

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Apr 26 15:41:11 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    74                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    75  0000                     
    76                           ; Version 2.20
    77                           ; Generated 12/02/2020 GMT
    78                           ; 
    79                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC18F452 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     
   111                           	psect	idataCOMRAM
   112  00246C                     __pidataCOMRAM:
   113                           	callstack 0
   114                           
   115                           ;initializer for _motCounter
   116  00246C  0000               	dw	0
   117  00246E  0001               	dw	1
   118  002470  0000               	dw	0
   119  002472  0001               	dw	1
   120  002474  0000               	dw	0
   121  002476  0001               	dw	1
   122                           
   123                           ;initializer for _maxX
   124  002478  00C9               	dw	201
   125                           
   126                           ;initializer for storeData@mexLength
   127  00247A  05                 	db	5
   128                           
   129                           	psect	idataBANK0
   130  0022DA                     __pidataBANK0:
   131                           	callstack 0
   132                           
   133                           ;initializer for rotateObj@rotSequence
   134  0022DA  09                 	db	9
   135  0022DB  03                 	db	3
   136  0022DC  06                 	db	6
   137  0022DD  0C                 	db	12
   138                           
   139                           ;initializer for _stepMot3
   140  0022DE  09                 	db	9
   141  0022DF  03                 	db	3
   142  0022E0  06                 	db	6
   143  0022E1  0C                 	db	12
   144                           
   145                           ;initializer for _stepMot2
   146  0022E2  11                 	db	17
   147  0022E3  05                 	db	5
   148  0022E4  0C                 	db	12
   149  0022E5  18                 	db	24
   150                           
   151                           ;initializer for _stepMot1
   152  0022E6  22                 	db	34
   153  0022E7  06                 	db	6
   154  0022E8  0C                 	db	12
   155  0022E9  28                 	db	40
   156                           
   157                           ;initializer for _maxY
   158  0022EA  00C9               	dw	201
   159                           
   160                           ;initializer for _errString_Feed
   161  0022EC  45                 	db	69
   162  0022ED  72                 	db	114
   163  0022EE  72                 	db	114
   164  0022EF  6F                 	db	111
   165  0022F0  72                 	db	114
   166  0022F1  2C                 	db	44
   167  0022F2  20                 	db	32
   168  0022F3  66                 	db	102
   169  0022F4  65                 	db	101
   170  0022F5  65                 	db	101
   171  0022F6  64                 	db	100
   172  0022F7  20                 	db	32
   173  0022F8  6C                 	db	108
   174  0022F9  69                 	db	105
   175  0022FA  6E                 	db	110
   176  0022FB  65                 	db	101
   177  0022FC  20                 	db	32
   178  0022FD  6E                 	db	110
   179  0022FE  6F                 	db	111
   180  0022FF  74                 	db	116
   181  002300  20                 	db	32
   182  002301  64                 	db	100
   183  002302  65                 	db	101
   184  002303  66                 	db	102
   185  002304  69                 	db	105
   186  002305  6E                 	db	110
   187  002306  65                 	db	101
   188  002307  64                 	db	100
   189  002308  0A                 	db	10
   190  002309  00                 	db	0
   191                           
   192                           ;initializer for _errString_Command
   193  00230A  43                 	db	67
   194  00230B  6F                 	db	111
   195  00230C  6D                 	db	109
   196  00230D  6D                 	db	109
   197  00230E  61                 	db	97
   198  00230F  6E                 	db	110
   199  002310  64                 	db	100
   200  002311  20                 	db	32
   201  002312  6E                 	db	110
   202  002313  6F                 	db	111
   203  002314  74                 	db	116
   204  002315  20                 	db	32
   205  002316  72                 	db	114
   206  002317  65                 	db	101
   207  002318  63                 	db	99
   208  002319  6F                 	db	111
   209  00231A  67                 	db	103
   210  00231B  6E                 	db	110
   211  00231C  69                 	db	105
   212  00231D  7A                 	db	122
   213  00231E  65                 	db	101
   214  00231F  64                 	db	100
   215  002320  0A                 	db	10
   216  002321  00                 	db	0
   217                           
   218                           	psect	idataBANK1
   219  001EC4                     __pidataBANK1:
   220                           	callstack 0
   221                           
   222                           ;initializer for _errString_PointZ
   223  001EC4  45                 	db	69
   224  001EC5  72                 	db	114
   225  001EC6  72                 	db	114
   226  001EC7  6F                 	db	111
   227  001EC8  72                 	db	114
   228  001EC9  2C                 	db	44
   229  001ECA  20                 	db	32
   230  001ECB  74                 	db	116
   231  001ECC  69                 	db	105
   232  001ECD  6D                 	db	109
   233  001ECE  65                 	db	101
   234  001ECF  20                 	db	32
   235  001ED0  65                 	db	101
   236  001ED1  78                 	db	120
   237  001ED2  63                 	db	99
   238  001ED3  65                 	db	101
   239  001ED4  65                 	db	101
   240  001ED5  64                 	db	100
   241  001ED6  65                 	db	101
   242  001ED7  64                 	db	100
   243  001ED8  20                 	db	32
   244  001ED9  74                 	db	116
   245  001EDA  6F                 	db	111
   246  001EDB  20                 	db	32
   247  001EDC  72                 	db	114
   248  001EDD  65                 	db	101
   249  001EDE  61                 	db	97
   250  001EDF  63                 	db	99
   251  001EE0  68                 	db	104
   252  001EE1  20                 	db	32
   253  001EE2  74                 	db	116
   254  001EE3  68                 	db	104
   255  001EE4  65                 	db	101
   256  001EE5  20                 	db	32
   257  001EE6  65                 	db	101
   258  001EE7  6E                 	db	110
   259  001EE8  64                 	db	100
   260  001EE9  20                 	db	32
   261  001EEA  6F                 	db	111
   262  001EEB  66                 	db	102
   263  001EEC  20                 	db	32
   264  001EED  74                 	db	116
   265  001EEE  68                 	db	104
   266  001EEF  65                 	db	101
   267  001EF0  20                 	db	32
   268  001EF1  5A                 	db	90
   269  001EF2  20                 	db	32
   270  001EF3  41                 	db	65
   271  001EF4  78                 	db	120
   272  001EF5  69                 	db	105
   273  001EF6  73                 	db	115
   274  001EF7  0A                 	db	10
   275  001EF8  00                 	db	0
   276                           
   277                           ;initializer for _errString_Point
   278  001EF9  45                 	db	69
   279  001EFA  72                 	db	114
   280  001EFB  72                 	db	114
   281  001EFC  6F                 	db	111
   282  001EFD  72                 	db	114
   283  001EFE  2C                 	db	44
   284  001EFF  20                 	db	32
   285  001F00  74                 	db	116
   286  001F01  69                 	db	105
   287  001F02  6D                 	db	109
   288  001F03  65                 	db	101
   289  001F04  20                 	db	32
   290  001F05  65                 	db	101
   291  001F06  78                 	db	120
   292  001F07  63                 	db	99
   293  001F08  65                 	db	101
   294  001F09  65                 	db	101
   295  001F0A  64                 	db	100
   296  001F0B  65                 	db	101
   297  001F0C  64                 	db	100
   298  001F0D  20                 	db	32
   299  001F0E  74                 	db	116
   300  001F0F  6F                 	db	111
   301  001F10  20                 	db	32
   302  001F11  72                 	db	114
   303  001F12  65                 	db	101
   304  001F13  61                 	db	97
   305  001F14  63                 	db	99
   306  001F15  68                 	db	104
   307  001F16  20                 	db	32
   308  001F17  74                 	db	116
   309  001F18  68                 	db	104
   310  001F19  65                 	db	101
   311  001F1A  20                 	db	32
   312  001F1B  70                 	db	112
   313  001F1C  6F                 	db	111
   314  001F1D  69                 	db	105
   315  001F1E  6E                 	db	110
   316  001F1F  74                 	db	116
   317  001F20  0A                 	db	10
   318  001F21  00                 	db	0
   319                           
   320                           ;initializer for _errString_ZEND
   321  001F22  45                 	db	69
   322  001F23  72                 	db	114
   323  001F24  72                 	db	114
   324  001F25  6F                 	db	111
   325  001F26  72                 	db	114
   326  001F27  2C                 	db	44
   327  001F28  20                 	db	32
   328  001F29  6E                 	db	110
   329  001F2A  6F                 	db	111
   330  001F2B  20                 	db	32
   331  001F2C  6F                 	db	111
   332  001F2D  62                 	db	98
   333  001F2E  6A                 	db	106
   334  001F2F  65                 	db	101
   335  001F30  63                 	db	99
   336  001F31  74                 	db	116
   337  001F32  20                 	db	32
   338  001F33  72                 	db	114
   339  001F34  65                 	db	101
   340  001F35  6C                 	db	108
   341  001F36  65                 	db	101
   342  001F37  76                 	db	118
   343  001F38  61                 	db	97
   344  001F39  74                 	db	116
   345  001F3A  65                 	db	101
   346  001F3B  64                 	db	100
   347  001F3C  20                 	db	32
   348  001F3D  61                 	db	97
   349  001F3E  6C                 	db	108
   350  001F3F  6F                 	db	111
   351  001F40  6E                 	db	110
   352  001F41  67                 	db	103
   353  001F42  20                 	db	32
   354  001F43  5A                 	db	90
   355  001F44  20                 	db	32
   356  001F45  41                 	db	65
   357  001F46  78                 	db	120
   358  001F47  69                 	db	105
   359  001F48  73                 	db	115
   360  001F49  0A                 	db	10
   361  001F4A  00                 	db	0
   362                           
   363                           ;initializer for _errString_Reset
   364  001F4B  45                 	db	69
   365  001F4C  72                 	db	114
   366  001F4D  72                 	db	114
   367  001F4E  6F                 	db	111
   368  001F4F  72                 	db	114
   369  001F50  2C                 	db	44
   370  001F51  20                 	db	32
   371  001F52  74                 	db	116
   372  001F53  69                 	db	105
   373  001F54  6D                 	db	109
   374  001F55  65                 	db	101
   375  001F56  20                 	db	32
   376  001F57  65                 	db	101
   377  001F58  78                 	db	120
   378  001F59  63                 	db	99
   379  001F5A  65                 	db	101
   380  001F5B  65                 	db	101
   381  001F5C  64                 	db	100
   382  001F5D  65                 	db	101
   383  001F5E  64                 	db	100
   384  001F5F  20                 	db	32
   385  001F60  74                 	db	116
   386  001F61  6F                 	db	111
   387  001F62  20                 	db	32
   388  001F63  72                 	db	114
   389  001F64  65                 	db	101
   390  001F65  73                 	db	115
   391  001F66  65                 	db	101
   392  001F67  74                 	db	116
   393  001F68  20                 	db	32
   394  001F69  70                 	db	112
   395  001F6A  6F                 	db	111
   396  001F6B  73                 	db	115
   397  001F6C  69                 	db	105
   398  001F6D  74                 	db	116
   399  001F6E  69                 	db	105
   400  001F6F  6F                 	db	111
   401  001F70  6E                 	db	110
   402  001F71  0A                 	db	10
   403  001F72  00                 	db	0
   404                           
   405                           ;initializer for _errString_Fatal
   406  001F73  46                 	db	70
   407  001F74  61                 	db	97
   408  001F75  74                 	db	116
   409  001F76  61                 	db	97
   410  001F77  6C                 	db	108
   411  001F78  20                 	db	32
   412  001F79  45                 	db	69
   413  001F7A  72                 	db	114
   414  001F7B  72                 	db	114
   415  001F7C  6F                 	db	111
   416  001F7D  72                 	db	114
   417  001F7E  2C                 	db	44
   418  001F7F  20                 	db	32
   419  001F80  70                 	db	112
   420  001F81  6C                 	db	108
   421  001F82  65                 	db	101
   422  001F83  61                 	db	97
   423  001F84  73                 	db	115
   424  001F85  65                 	db	101
   425  001F86  20                 	db	32
   426  001F87  72                 	db	114
   427  001F88  65                 	db	101
   428  001F89  73                 	db	115
   429  001F8A  65                 	db	101
   430  001F8B  74                 	db	116
   431  001F8C  20                 	db	32
   432  001F8D  74                 	db	116
   433  001F8E  68                 	db	104
   434  001F8F  65                 	db	101
   435  001F90  20                 	db	32
   436  001F91  64                 	db	100
   437  001F92  65                 	db	101
   438  001F93  76                 	db	118
   439  001F94  69                 	db	105
   440  001F95  63                 	db	99
   441  001F96  65                 	db	101
   442  001F97  21                 	db	33
   443  001F98  0A                 	db	10
   444  001F99  00                 	db	0
   445                           
   446                           ;initializer for _errString_Bound
   447  001F9A  45                 	db	69
   448  001F9B  72                 	db	114
   449  001F9C  72                 	db	114
   450  001F9D  6F                 	db	111
   451  001F9E  72                 	db	114
   452  001F9F  2C                 	db	44
   453  001FA0  20                 	db	32
   454  001FA1  70                 	db	112
   455  001FA2  6F                 	db	111
   456  001FA3  69                 	db	105
   457  001FA4  6E                 	db	110
   458  001FA5  74                 	db	116
   459  001FA6  20                 	db	32
   460  001FA7  6F                 	db	111
   461  001FA8  75                 	db	117
   462  001FA9  74                 	db	116
   463  001FAA  73                 	db	115
   464  001FAB  69                 	db	105
   465  001FAC  64                 	db	100
   466  001FAD  65                 	db	101
   467  001FAE  20                 	db	32
   468  001FAF  62                 	db	98
   469  001FB0  6F                 	db	111
   470  001FB1  75                 	db	117
   471  001FB2  6E                 	db	110
   472  001FB3  64                 	db	100
   473  001FB4  61                 	db	97
   474  001FB5  72                 	db	114
   475  001FB6  69                 	db	105
   476  001FB7  65                 	db	101
   477  001FB8  73                 	db	115
   478  001FB9  0A                 	db	10
   479  001FBA  00                 	db	0
   480                           
   481                           	psect	smallconst
   482  000600                     __psmallconst:
   483                           	callstack 0
   484  000600  00                 	db	0
   485  000601  FFAC               	dw	65452
   486  000603  3DB3               	dw	15795
   487  000605                     __end_ofrotateObj@stepAngle:
   488                           	callstack 0
   489  000605  0400               	dw	1024
   490  000607                     __end_of_therm_pressure:
   491                           	callstack 0
   492  000607  0200               	dw	512
   493  000609                     __end_of_touch_pressure:
   494                           	callstack 0
   495  000609                     _feeder3Pos:
   496                           	callstack 0
   497  000609  1E                 	db	30
   498  00060A  96                 	db	150
   499  00060B                     __end_of_feeder3Pos:
   500                           	callstack 0
   501  00060B                     _feeder2Pos:
   502                           	callstack 0
   503  00060B  1E                 	db	30
   504  00060C  64                 	db	100
   505  00060D                     __end_of_feeder2Pos:
   506                           	callstack 0
   507  00060D                     _feeder1Pos:
   508                           	callstack 0
   509  00060D  1E                 	db	30
   510  00060E  32                 	db	50
   511  00060F                     __end_of_feeder1Pos:
   512                           	callstack 0
   513  00060F  C8                 	db	200
   514  000610                     __end_of_maxFeedY:
   515                           	callstack 0
   516  000610  3C                 	db	60
   517  000611                     __end_of_maxFeedX:
   518                           	callstack 0
   519  0000                     _TMR0	set	4054
   520  0000                     _T1CONbits	set	4045
   521  0000                     _TXREG	set	4013
   522  0000                     _SPBRG	set	4015
   523  0000                     _TXSTAbits	set	4012
   524  0000                     _TRISCbits	set	3988
   525  0000                     _RCREG1	set	4014
   526  0000                     _ADRESH	set	4036
   527  0000                     _ADRESL	set	4035
   528  0000                     _PIR1bits	set	3998
   529  0000                     _RCONbits	set	4048
   530  0000                     _INTCONbits	set	4082
   531  0000                     _IPR1bits	set	3999
   532  0000                     _PIE1bits	set	3997
   533  0000                     _ADCON0bits	set	4034
   534  0000                     _RCSTAbits	set	4011
   535  0000                     _RCSTA1bits	set	4011
   536  0000                     _LATD	set	3980
   537  0000                     _PORTDbits	set	3971
   538  0000                     _TMR2	set	4044
   539  0000                     _LATC	set	3979
   540  0000                     _LATB	set	3978
   541  0000                     _LATA	set	3977
   542  0000                     _PORTEbits	set	3972
   543  0000                     _T0CONbits	set	4053
   544  0000                     _T2CONbits	set	4042
   545  0000                     _LATDbits	set	3980
   546  0000                     _LATCbits	set	3979
   547  0000                     _LATBbits	set	3978
   548  0000                     _LATAbits	set	3977
   549  0000                     _TRISDbits	set	3989
   550  0000                     _TRISEbits	set	3990
   551  0000                     _TRISD	set	3989
   552  0000                     _TRISC	set	3988
   553  0000                     _TRISB	set	3987
   554  0000                     _TRISA	set	3986
   555  0000                     _ADCON1bits	set	4033
   556  000611  00                 	db	0	; dummy byte at the end
   557  0000                     
   558                           ; #config settings
   559                           
   560                           	psect	cinit
   561  002158                     __pcinit:
   562                           	callstack 0
   563  002158                     start_initialization:
   564                           	callstack 0
   565  002158                     __initialization:
   566                           	callstack 0
   567                           
   568                           ; Initialize objects allocated to BANK1 (247 bytes)
   569                           ; load TBLPTR registers with __pidataBANK1
   570  002158  0EC4               	movlw	low __pidataBANK1
   571  00215A  6EF6               	movwf	tblptrl,c
   572  00215C  0E1E               	movlw	high __pidataBANK1
   573  00215E  6EF7               	movwf	tblptrh,c
   574  002160  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   575  002162  6EF8               	movwf	tblptru,c
   576  002164  EE01  F000         	lfsr	0,__pdataBANK1
   577  002168  EE10 F0F7          	lfsr	1,247
   578  00216C                     copy_data0:
   579  00216C  0009               	tblrd		*+
   580  00216E  CFF5 FFEE          	movff	tablat,postinc0
   581  002172  50E5               	movf	postdec1,w,c
   582  002174  50E1               	movf	fsr1l,w,c
   583  002176  E1FA               	bnz	copy_data0
   584                           
   585                           ; Initialize objects allocated to BANK0 (72 bytes)
   586                           ; load TBLPTR registers with __pidataBANK0
   587  002178  0EDA               	movlw	low __pidataBANK0
   588  00217A  6EF6               	movwf	tblptrl,c
   589  00217C  0E22               	movlw	high __pidataBANK0
   590  00217E  6EF7               	movwf	tblptrh,c
   591  002180  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   592  002182  6EF8               	movwf	tblptru,c
   593  002184  EE00  F080         	lfsr	0,__pdataBANK0
   594  002188  EE10 F048          	lfsr	1,72
   595  00218C                     copy_data1:
   596  00218C  0009               	tblrd		*+
   597  00218E  CFF5 FFEE          	movff	tablat,postinc0
   598  002192  50E5               	movf	postdec1,w,c
   599  002194  50E1               	movf	fsr1l,w,c
   600  002196  E1FA               	bnz	copy_data1
   601                           
   602                           ; Initialize objects allocated to COMRAM (15 bytes)
   603                           ; load TBLPTR registers with __pidataCOMRAM
   604  002198  0E6C               	movlw	low __pidataCOMRAM
   605  00219A  6EF6               	movwf	tblptrl,c
   606  00219C  0E24               	movlw	high __pidataCOMRAM
   607  00219E  6EF7               	movwf	tblptrh,c
   608  0021A0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   609  0021A2  6EF8               	movwf	tblptru,c
   610  0021A4  EE00  F05E         	lfsr	0,__pdataCOMRAM
   611  0021A8  EE10 F00F          	lfsr	1,15
   612  0021AC                     copy_data2:
   613  0021AC  0009               	tblrd		*+
   614  0021AE  CFF5 FFEE          	movff	tablat,postinc0
   615  0021B2  50E5               	movf	postdec1,w,c
   616  0021B4  50E1               	movf	fsr1l,w,c
   617  0021B6  E1FA               	bnz	copy_data2
   618                           
   619                           ; Clear objects allocated to BANK0 (37 bytes)
   620  0021B8  EE00  F0C8         	lfsr	0,__pbssBANK0
   621  0021BC  0E25               	movlw	37
   622  0021BE                     clear_0:
   623  0021BE  6AEE               	clrf	postinc0,c
   624  0021C0  06E8               	decf	wreg,f,c
   625  0021C2  E1FD               	bnz	clear_0
   626                           
   627                           ; Clear objects allocated to COMRAM (27 bytes)
   628  0021C4  EE00  F043         	lfsr	0,__pbssCOMRAM
   629  0021C8  0E1B               	movlw	27
   630  0021CA                     clear_1:
   631  0021CA  6AEE               	clrf	postinc0,c
   632  0021CC  06E8               	decf	wreg,f,c
   633  0021CE  E1FD               	bnz	clear_1
   634  0021D0                     end_of_initialization:
   635                           	callstack 0
   636  0021D0                     __end_of__initialization:
   637                           	callstack 0
   638  0021D0  906D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   639  0021D2  926D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   640  0021D4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   641  0021D6  6EF8               	movwf	tblptru,c
   642  0021D8  0100               	movlb	0
   643  0021DA  EF46  F00A         	goto	_main	;jump to C main() function
   644                           
   645                           	psect	bssCOMRAM
   646  000043                     __pbssCOMRAM:
   647                           	callstack 0
   648  000043                     _posVector:
   649                           	callstack 0
   650  000043                     	ds	3
   651  000046                     _pwmPeriod:
   652                           	callstack 0
   653  000046                     	ds	2
   654  000048                     isr@single_cycle:
   655                           	callstack 0
   656  000048                     	ds	2
   657  00004A                     _ADC_res:
   658                           	callstack 0
   659  00004A                     	ds	2
   660  00004C                     _newFeeder:
   661                           	callstack 0
   662  00004C                     	ds	2
   663  00004E                     _rotAngle:
   664                           	callstack 0
   665  00004E                     	ds	2
   666  000050                     _tm0Error:
   667                           	callstack 0
   668  000050                     	ds	2
   669  000052                     _stepToggle:
   670                           	callstack 0
   671  000052                     	ds	1
   672  000053                     _pwmStep:
   673                           	callstack 0
   674  000053                     	ds	1
   675  000054                     	ds	1
   676  000055                     storeData@counter:
   677                           	callstack 0
   678  000055                     	ds	1
   679  000056                     __newSequence:
   680                           	callstack 0
   681  000056                     	ds	1
   682  000057                     __fatalError:
   683                           	callstack 0
   684  000057                     	ds	1
   685  000058                     _dataCounter:
   686                           	callstack 0
   687  000058                     	ds	1
   688  000059                     isr@completeStep:
   689                           	callstack 0
   690  000059                     	ds	1
   691  00005A                     isr@tm0Count:
   692                           	callstack 0
   693  00005A                     	ds	1
   694  00005B                     _therm_rel:
   695                           	callstack 0
   696  00005B                     	ds	1
   697  00005C                     _touch_rel:
   698                           	callstack 0
   699  00005C                     	ds	1
   700  00005D                     _tm0Limit:
   701                           	callstack 0
   702  00005D                     	ds	1
   703                           
   704                           	psect	dataCOMRAM
   705  00005E                     __pdataCOMRAM:
   706                           	callstack 0
   707  00005E                     _motCounter:
   708                           	callstack 0
   709  00005E                     	ds	12
   710  00006A                     	ds	2
   711  00006C                     storeData@mexLength:
   712                           	callstack 0
   713  00006C                     	ds	1
   714                           
   715                           	psect	bssBANK0
   716  0000C8                     __pbssBANK0:
   717                           	callstack 0
   718  0000C8                     storeData@receivedMex:
   719                           	callstack 0
   720  0000C8                     	ds	9
   721  0000D1                     _dataSequence:
   722                           	callstack 0
   723  0000D1                     	ds	20
   724  0000E5                     _newSequenceData:
   725                           	callstack 0
   726  0000E5                     	ds	8
   727                           
   728                           	psect	dataBANK0
   729  000080                     __pdataBANK0:
   730                           	callstack 0
   731  000080                     rotateObj@rotSequence:
   732                           	callstack 0
   733  000080                     	ds	4
   734  000084                     _stepMot3:
   735                           	callstack 0
   736  000084                     	ds	4
   737  000088                     _stepMot2:
   738                           	callstack 0
   739  000088                     	ds	4
   740  00008C                     _stepMot1:
   741                           	callstack 0
   742  00008C                     	ds	4
   743  000090                     	ds	2
   744  000092                     _errString_Feed:
   745                           	callstack 0
   746  000092                     	ds	30
   747  0000B0                     _errString_Command:
   748                           	callstack 0
   749  0000B0                     	ds	24
   750                           
   751                           	psect	dataBANK1
   752  000100                     __pdataBANK1:
   753                           	callstack 0
   754  000100                     _errString_PointZ:
   755                           	callstack 0
   756  000100                     	ds	53
   757  000135                     _errString_Point:
   758                           	callstack 0
   759  000135                     	ds	41
   760  00015E                     _errString_ZEND:
   761                           	callstack 0
   762  00015E                     	ds	41
   763  000187                     _errString_Reset:
   764                           	callstack 0
   765  000187                     	ds	40
   766  0001AF                     _errString_Fatal:
   767                           	callstack 0
   768  0001AF                     	ds	39
   769  0001D6                     _errString_Bound:
   770                           	callstack 0
   771  0001D6                     	ds	33
   772                           
   773                           	psect	cstackBANK0
   774  0000ED                     __pcstackBANK0:
   775                           	callstack 0
   776  0000ED                     ??_rotateObj:
   777                           
   778                           ; 1 bytes @ 0x0
   779  0000ED                     	ds	3
   780  0000F0                     rotateObj@rotAngle:
   781                           	callstack 0
   782                           
   783                           ; 1 bytes @ 0x3
   784  0000F0                     	ds	1
   785  0000F1                     rotateObj@totStep:
   786                           	callstack 0
   787                           
   788                           ; 2 bytes @ 0x4
   789  0000F1                     	ds	2
   790  0000F3                     rotateObj@i:
   791                           	callstack 0
   792                           
   793                           ; 2 bytes @ 0x6
   794  0000F3                     	ds	2
   795  0000F5                     ??_executeData:
   796                           
   797                           ; 1 bytes @ 0x8
   798  0000F5                     	ds	2
   799  0000F7                     executeData@errCode:
   800                           	callstack 0
   801                           
   802                           ; 1 bytes @ 0xA
   803  0000F7                     	ds	1
   804  0000F8                     executeData@data:
   805                           	callstack 0
   806                           
   807                           ; 2 bytes @ 0xB
   808  0000F8                     	ds	2
   809  0000FA                     ??_main:
   810                           
   811                           ; 1 bytes @ 0xD
   812  0000FA                     	ds	2
   813  0000FC                     main@errCode:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0xF
   817  0000FC                     	ds	1
   818  0000FD                     main@newData:
   819                           	callstack 0
   820                           
   821                           ; 2 bytes @ 0x10
   822  0000FD                     	ds	2
   823                           
   824                           	psect	cstackCOMRAM
   825  000001                     __pcstackCOMRAM:
   826                           	callstack 0
   827  000001                     ?_retPeriod:
   828                           	callstack 0
   829  000001                     i2uartTx@ptr:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x0
   833  000001                     	ds	2
   834  000003                     i2uartTx@length:
   835                           	callstack 0
   836                           
   837                           ; 1 bytes @ 0x2
   838  000003                     	ds	1
   839  000004                     i2uartTx@i:
   840                           	callstack 0
   841                           
   842                           ; 1 bytes @ 0x3
   843  000004                     	ds	1
   844  000005                     ??i2_printError:
   845                           
   846                           ; 1 bytes @ 0x4
   847  000005                     	ds	2
   848  000007                     i2printError@errCode:
   849                           	callstack 0
   850                           
   851                           ; 1 bytes @ 0x6
   852  000007                     	ds	1
   853  000008                     ??i2_storeData:
   854                           
   855                           ; 1 bytes @ 0x7
   856  000008                     	ds	2
   857  00000A                     i2storeData@data:
   858                           	callstack 0
   859                           
   860                           ; 1 bytes @ 0x9
   861  00000A                     	ds	1
   862  00000B                     ??_isr:
   863                           
   864                           ; 1 bytes @ 0xA
   865  00000B                     	ds	6
   866  000011                     isr@temp:
   867                           	callstack 0
   868                           
   869                           ; 1 bytes @ 0x10
   870  000011                     	ds	1
   871  000012                     ??_shiftData:
   872  000012                     ?_stepMade:
   873                           	callstack 0
   874  000012                     ?_stepCounter:
   875                           	callstack 0
   876  000012                     ?_returnTouch:
   877                           	callstack 0
   878  000012                     ?_returnTherm:
   879                           	callstack 0
   880  000012                     ?_getNewSequence:
   881                           	callstack 0
   882  000012                     ?_getData:
   883                           	callstack 0
   884  000012                     ?___xxtofl:
   885                           	callstack 0
   886  000012                     uartTx@ptr:
   887                           	callstack 0
   888  000012                     tim2Init@_pwmPeriod:
   889                           	callstack 0
   890  000012                     ___xxtofl@val:
   891                           	callstack 0
   892                           
   893                           ; 4 bytes @ 0x11
   894  000012                     	ds	2
   895  000014                     shiftData@i:
   896                           	callstack 0
   897  000014                     uartTx@length:
   898                           	callstack 0
   899  000014                     stepMade@temp:
   900                           	callstack 0
   901                           
   902                           ; 1 bytes @ 0x13
   903  000014                     	ds	1
   904  000015                     resetPosition@keepMovingX:
   905                           	callstack 0
   906  000015                     uartTx@i:
   907                           	callstack 0
   908  000015                     moveToPoint@x1:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x14
   912  000015                     	ds	1
   913  000016                     ??_printError:
   914  000016                     ??___xxtofl:
   915  000016                     resetPosition@keepMovingY:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x15
   919  000016                     	ds	1
   920  000017                     resetPosition@keepMovingZ:
   921                           	callstack 0
   922  000017                     moveToPoint@y1:
   923                           	callstack 0
   924                           
   925                           ; 2 bytes @ 0x16
   926  000017                     	ds	1
   927  000018                     printError@errCode:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x17
   931  000018                     	ds	1
   932  000019                     ??_storeData:
   933  000019                     moveToPoint@x2:
   934                           	callstack 0
   935                           
   936                           ; 2 bytes @ 0x18
   937  000019                     	ds	1
   938  00001A                     ___xxtofl@sign:
   939                           	callstack 0
   940                           
   941                           ; 1 bytes @ 0x19
   942  00001A                     	ds	1
   943  00001B                     storeData@data:
   944                           	callstack 0
   945  00001B                     ___xxtofl@exp:
   946                           	callstack 0
   947  00001B                     moveToPoint@y2:
   948                           	callstack 0
   949                           
   950                           ; 2 bytes @ 0x1A
   951  00001B                     	ds	1
   952  00001C                     ___xxtofl@arg:
   953                           	callstack 0
   954                           
   955                           ; 4 bytes @ 0x1B
   956  00001C                     	ds	1
   957  00001D                     ??_moveToPoint:
   958                           
   959                           ; 1 bytes @ 0x1C
   960  00001D                     	ds	2
   961  00001F                     moveToPoint@MOT1Direction:
   962                           	callstack 0
   963                           
   964                           ; 1 bytes @ 0x1E
   965  00001F                     	ds	1
   966  000020                     ?___fldiv:
   967                           	callstack 0
   968  000020                     moveToPoint@MOT2Direction:
   969                           	callstack 0
   970  000020                     ___fldiv@b:
   971                           	callstack 0
   972                           
   973                           ; 4 bytes @ 0x1F
   974  000020                     	ds	1
   975  000021                     moveToPoint@keepMovingX:
   976                           	callstack 0
   977                           
   978                           ; 1 bytes @ 0x20
   979  000021                     	ds	1
   980  000022                     moveToPoint@keepMovingY:
   981                           	callstack 0
   982                           
   983                           ; 1 bytes @ 0x21
   984  000022                     	ds	2
   985  000024                     ___fldiv@a:
   986                           	callstack 0
   987                           
   988                           ; 4 bytes @ 0x23
   989  000024                     	ds	4
   990  000028                     ??___fldiv:
   991                           
   992                           ; 1 bytes @ 0x27
   993  000028                     	ds	4
   994  00002C                     ___fldiv@rem:
   995                           	callstack 0
   996                           
   997                           ; 4 bytes @ 0x2B
   998  00002C                     	ds	4
   999  000030                     ___fldiv@sign:
  1000                           	callstack 0
  1001                           
  1002                           ; 1 bytes @ 0x2F
  1003  000030                     	ds	1
  1004  000031                     ___fldiv@new_exp:
  1005                           	callstack 0
  1006                           
  1007                           ; 2 bytes @ 0x30
  1008  000031                     	ds	2
  1009  000033                     ___fldiv@grs:
  1010                           	callstack 0
  1011                           
  1012                           ; 4 bytes @ 0x32
  1013  000033                     	ds	4
  1014  000037                     ___fldiv@bexp:
  1015                           	callstack 0
  1016                           
  1017                           ; 1 bytes @ 0x36
  1018  000037                     	ds	1
  1019  000038                     ___fldiv@aexp:
  1020                           	callstack 0
  1021                           
  1022                           ; 1 bytes @ 0x37
  1023  000038                     	ds	1
  1024  000039                     ?___fltol:
  1025                           	callstack 0
  1026  000039                     ___fltol@f1:
  1027                           	callstack 0
  1028                           
  1029                           ; 4 bytes @ 0x38
  1030  000039                     	ds	4
  1031  00003D                     ??___fltol:
  1032                           
  1033                           ; 1 bytes @ 0x3C
  1034  00003D                     	ds	4
  1035  000041                     ___fltol@sign1:
  1036                           	callstack 0
  1037                           
  1038                           ; 1 bytes @ 0x40
  1039  000041                     	ds	1
  1040  000042                     ___fltol@exp1:
  1041                           	callstack 0
  1042                           
  1043                           ; 1 bytes @ 0x41
  1044  000042                     	ds	1
  1045                           
  1046 ;;
  1047 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1048 ;;
  1049 ;; *************** function _main *****************
  1050 ;; Defined at:
  1051 ;;		line 19 in file "main.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;		None
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  newData         2   16[BANK0 ] PTR struct .
  1056 ;;		 -> newSequenceData(8), 
  1057 ;;  errCode         1   15[BANK0 ] unsigned char 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      void 
  1060 ;; Registers used:
  1061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1067 ;;      Params:         0       0       0       0       0       0       0
  1068 ;;      Locals:         0       3       0       0       0       0       0
  1069 ;;      Temps:          0       2       0       0       0       0       0
  1070 ;;      Totals:         0       5       0       0       0       0       0
  1071 ;;Total ram usage:        5 bytes
  1072 ;; Hardware stack levels required when called:    7
  1073 ;; This function calls:
  1074 ;;		_clearTM0
  1075 ;;		_executeData
  1076 ;;		_getNewSequence
  1077 ;;		_initADC
  1078 ;;		_initPinMotors
  1079 ;;		_interruptInit
  1080 ;;		_newSequence
  1081 ;;		_printError
  1082 ;;		_readSeq
  1083 ;;		_reduceSeq
  1084 ;;		_resetNewSequence
  1085 ;;		_resetPosition
  1086 ;;		_shiftData
  1087 ;;		_storeData
  1088 ;;		_tim0Init
  1089 ;;		_tim1Init
  1090 ;;		_tim2Init
  1091 ;;		_usartInit
  1092 ;; This function is called by:
  1093 ;;		Startup code after reset
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text0
  1098  00148C                     __ptext0:
  1099                           	callstack 0
  1100  00148C                     _main:
  1101                           	callstack 24
  1102  00148C  FFFF               	dw	65535	; assembler added errata NOP
  1103                           
  1104                           ;main.c: 23:     interruptInit();
  1105  00148E  EC91  F011         	call	_interruptInit	;wreg free
  1106  001492                     
  1107                           ;main.c: 24:     initPinMotors();
  1108  001492  ECDB  F011         	call	_initPinMotors	;wreg free
  1109  001496                     
  1110                           ;main.c: 25:     initADC();
  1111  001496  ECEE  F011         	call	_initADC	;wreg free
  1112  00149A                     
  1113                           ;main.c: 26:     usartInit();
  1114  00149A  EC01  F012         	call	_usartInit	;wreg free
  1115  00149E                     
  1116                           ;main.c: 27:     tim0Init();
  1117  00149E  EC24  F012         	call	_tim0Init	;wreg free
  1118  0014A2                     
  1119                           ;main.c: 28:     tim1Init();
  1120  0014A2  EC3E  F012         	call	_tim1Init	;wreg free
  1121  0014A6                     
  1122                           ;main.c: 29:     tim2Init(10);
  1123  0014A6  0E00               	movlw	0
  1124  0014A8  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1125  0014AA  0E0A               	movlw	10
  1126  0014AC  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1127  0014AE  EC10  F012         	call	_tim2Init	;wreg free
  1128  0014B2                     
  1129                           ;main.c: 32:     errCode = resetPosition();
  1130  0014B2  EC49  F008         	call	_resetPosition	;wreg free
  1131  0014B6  0100               	movlb	0	; () banked
  1132  0014B8  6FFC               	movwf	main@errCode& (0+255),b
  1133  0014BA                     
  1134                           ; BSR set to: 0
  1135                           ;main.c: 33:     if(errCode != 0){
  1136  0014BA  51FC               	movf	main@errCode& (0+255),w,b
  1137  0014BC  B4D8               	btfsc	status,2,c
  1138  0014BE  EF63  F00A         	goto	u3701
  1139  0014C2  EF66  F00A         	goto	u3700
  1140  0014C6                     u3701:
  1141  0014C6  FFFF               	dw	65535	; assembler added errata NOP
  1142  0014C8  EF6D  F00A         	goto	l333
  1143  0014CC                     u3700:
  1144  0014CC  FFFF               	dw	65535	; assembler added errata NOP
  1145  0014CE                     
  1146                           ; BSR set to: 0
  1147                           ;main.c: 34:         printError(errCode);
  1148  0014CE  51FC               	movf	main@errCode& (0+255),w,b
  1149  0014D0  EC32  F00D         	call	_printError
  1150  0014D4                     l334:
  1151  0014D4  FFFF               	dw	65535	; assembler added errata NOP
  1152  0014D6  EF6A  F00A         	goto	l334
  1153  0014DA                     l333:
  1154  0014DA  FFFF               	dw	65535	; assembler added errata NOP
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;main.c: 39:     RCSTA1bits.CREN = 1;
  1158  0014DC  88AB               	bsf	171,4,c	;volatile
  1159  0014DE                     l4458:
  1160  0014DE  FFFF               	dw	65535	; assembler added errata NOP
  1161                           
  1162                           ;main.c: 42:         if(newSequence()){
  1163  0014E0  ECAA  F012         	call	_newSequence	;wreg free
  1164  0014E4  0900               	iorlw	0
  1165  0014E6  B4D8               	btfsc	status,2,c
  1166  0014E8  EF78  F00A         	goto	u3711
  1167  0014EC  EF7B  F00A         	goto	u3710
  1168  0014F0                     u3711:
  1169  0014F0  FFFF               	dw	65535	; assembler added errata NOP
  1170  0014F2  EFFD  F00A         	goto	l4486
  1171  0014F6                     u3710:
  1172  0014F6  FFFF               	dw	65535	; assembler added errata NOP
  1173  0014F8                     
  1174                           ;main.c: 43:             t_newSequence* newData = getNewSequence();
  1175  0014F8  EC45  F012         	call	_getNewSequence	;wreg free
  1176  0014FC  C012  F0FD         	movff	?_getNewSequence,main@newData
  1177  001500  C013  F0FE         	movff	?_getNewSequence+1,main@newData+1
  1178  001504                     
  1179                           ;main.c: 45:             newFeeder[0] = newData ->init_posX;
  1180  001504  0100               	movlb	0	; () banked
  1181  001506  EE20 F002          	lfsr	2,2
  1182  00150A  51FD               	movf	main@newData& (0+255),w,b
  1183  00150C  26D9               	addwf	fsr2l,f,c
  1184  00150E  51FE               	movf	(main@newData+1)& (0+255),w,b
  1185  001510  22DA               	addwfc	fsr2h,f,c
  1186  001512  50DF               	movf	indf2,w,c
  1187  001514  6E4C               	movwf	_newFeeder^0,c
  1188  001516                     
  1189                           ; BSR set to: 0
  1190                           ;main.c: 46:             newFeeder[1] = newData ->init_posY;
  1191  001516  EE20 F003          	lfsr	2,3
  1192  00151A  51FD               	movf	main@newData& (0+255),w,b
  1193  00151C  26D9               	addwf	fsr2l,f,c
  1194  00151E  51FE               	movf	(main@newData+1)& (0+255),w,b
  1195  001520  22DA               	addwfc	fsr2h,f,c
  1196  001522  50DF               	movf	indf2,w,c
  1197  001524  6E4D               	movwf	(_newFeeder+1)^0,c
  1198  001526                     
  1199                           ; BSR set to: 0
  1200                           ;main.c: 50:             RCSTAbits.CREN = 0;
  1201  001526  98AB               	bcf	171,4,c	;volatile
  1202  001528                     
  1203                           ; BSR set to: 0
  1204                           ;main.c: 55:             if(newData ->end_posX > maxFeedX || newData ->end_posY > maxFee
      +                          dY){
  1205  001528  EE20 F005          	lfsr	2,5
  1206  00152C  51FD               	movf	main@newData& (0+255),w,b
  1207  00152E  26D9               	addwf	fsr2l,f,c
  1208  001530  51FE               	movf	(main@newData+1)& (0+255),w,b
  1209  001532  22DA               	addwfc	fsr2h,f,c
  1210  001534  0E3D               	movlw	61
  1211  001536  60DF               	cpfslt	indf2,c
  1212  001538  EFA0  F00A         	goto	u3721
  1213  00153C  EFA3  F00A         	goto	u3720
  1214  001540                     u3721:
  1215  001540  FFFF               	dw	65535	; assembler added errata NOP
  1216  001542  EFB3  F00A         	goto	l4472
  1217  001546                     u3720:
  1218  001546  FFFF               	dw	65535	; assembler added errata NOP
  1219  001548                     
  1220                           ; BSR set to: 0
  1221  001548  EE20 F006          	lfsr	2,6
  1222  00154C  51FD               	movf	main@newData& (0+255),w,b
  1223  00154E  26D9               	addwf	fsr2l,f,c
  1224  001550  51FE               	movf	(main@newData+1)& (0+255),w,b
  1225  001552  22DA               	addwfc	fsr2h,f,c
  1226  001554  0EC8               	movlw	200
  1227  001556  64DF               	cpfsgt	indf2,c
  1228  001558  EFB0  F00A         	goto	u3731
  1229  00155C  EFB3  F00A         	goto	u3730
  1230  001560                     u3731:
  1231  001560  FFFF               	dw	65535	; assembler added errata NOP
  1232  001562  EFB8  F00A         	goto	l4474
  1233  001566                     u3730:
  1234  001566                     l4472:
  1235  001566  FFFF               	dw	65535	; assembler added errata NOP
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;main.c: 56:                 errCode = 5;
  1239  001568  0E05               	movlw	5
  1240  00156A  6FFC               	movwf	main@errCode& (0+255),b
  1241                           
  1242                           ;main.c: 57:             }else{
  1243  00156C  EFCC  F00A         	goto	l4476
  1244  001570                     l4474:
  1245  001570  FFFF               	dw	65535	; assembler added errata NOP
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;main.c: 58:                 storeData(newData ->end_posX);
  1249  001572  EE20 F005          	lfsr	2,5
  1250  001576  51FD               	movf	main@newData& (0+255),w,b
  1251  001578  26D9               	addwf	fsr2l,f,c
  1252  00157A  51FE               	movf	(main@newData+1)& (0+255),w,b
  1253  00157C  22DA               	addwfc	fsr2h,f,c
  1254  00157E  50DF               	movf	indf2,w,c
  1255  001580  EC1B  F00B         	call	_storeData
  1256                           
  1257                           ;main.c: 59:                 storeData(newData ->end_posY);
  1258  001584  0100               	movlb	0	; () banked
  1259  001586  EE20 F006          	lfsr	2,6
  1260  00158A  51FD               	movf	main@newData& (0+255),w,b
  1261  00158C  26D9               	addwf	fsr2l,f,c
  1262  00158E  51FE               	movf	(main@newData+1)& (0+255),w,b
  1263  001590  22DA               	addwfc	fsr2h,f,c
  1264  001592  50DF               	movf	indf2,w,c
  1265  001594  EC1B  F00B         	call	_storeData
  1266  001598                     l4476:
  1267  001598  FFFF               	dw	65535	; assembler added errata NOP
  1268                           
  1269                           ;main.c: 63:             if(errCode == 0){
  1270  00159A  0100               	movlb	0	; () banked
  1271  00159C  51FC               	movf	main@errCode& (0+255),w,b
  1272  00159E  A4D8               	btfss	status,2,c
  1273  0015A0  EFD4  F00A         	goto	u3741
  1274  0015A4  EFD7  F00A         	goto	u3740
  1275  0015A8                     u3741:
  1276  0015A8  FFFF               	dw	65535	; assembler added errata NOP
  1277  0015AA  EFF5  F00A         	goto	l4480
  1278  0015AE                     u3740:
  1279  0015AE  FFFF               	dw	65535	; assembler added errata NOP
  1280  0015B0                     
  1281                           ; BSR set to: 0
  1282                           ;main.c: 65:                 storeData(0);
  1283  0015B0  0E00               	movlw	0
  1284  0015B2  EC1B  F00B         	call	_storeData
  1285                           
  1286                           ;main.c: 66:                 storeData(0xFF);
  1287  0015B6  0EFF               	movlw	255
  1288  0015B8  EC1B  F00B         	call	_storeData
  1289                           
  1290                           ;main.c: 67:                 storeData(newData ->end_rot - newData ->init_rot);
  1291  0015BC  0100               	movlb	0	; () banked
  1292  0015BE  EE20 F004          	lfsr	2,4
  1293  0015C2  51FD               	movf	main@newData& (0+255),w,b
  1294  0015C4  26D9               	addwf	fsr2l,f,c
  1295  0015C6  51FE               	movf	(main@newData+1)& (0+255),w,b
  1296  0015C8  22DA               	addwfc	fsr2h,f,c
  1297  0015CA  50DF               	movf	indf2,w,c
  1298  0015CC  6FFA               	movwf	??_main& (0+255),b
  1299  0015CE  EE20 F007          	lfsr	2,7
  1300  0015D2  51FD               	movf	main@newData& (0+255),w,b
  1301  0015D4  26D9               	addwf	fsr2l,f,c
  1302  0015D6  51FE               	movf	(main@newData+1)& (0+255),w,b
  1303  0015D8  22DA               	addwfc	fsr2h,f,c
  1304  0015DA  50DF               	movf	indf2,w,c
  1305  0015DC  6FFB               	movwf	(??_main+1)& (0+255),b
  1306  0015DE  51FA               	movf	??_main& (0+255),w,b
  1307  0015E0  5DFB               	subwf	(??_main+1)& (0+255),w,b
  1308  0015E2  EC1B  F00B         	call	_storeData
  1309                           
  1310                           ;main.c: 68:             }else{
  1311  0015E6  EFF9  F00A         	goto	l4482
  1312  0015EA                     l4480:
  1313  0015EA  FFFF               	dw	65535	; assembler added errata NOP
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;main.c: 69:                 printError(errCode);
  1317  0015EC  51FC               	movf	main@errCode& (0+255),w,b
  1318  0015EE  EC32  F00D         	call	_printError
  1319  0015F2                     l4482:
  1320  0015F2  FFFF               	dw	65535	; assembler added errata NOP
  1321                           
  1322                           ;main.c: 73:             RCSTAbits.CREN = 1;
  1323  0015F4  88AB               	bsf	171,4,c	;volatile
  1324  0015F6                     
  1325                           ;main.c: 76:             resetNewSequence();
  1326  0015F6  EC7A  F012         	call	_resetNewSequence	;wreg free
  1327  0015FA                     l4486:
  1328  0015FA  FFFF               	dw	65535	; assembler added errata NOP
  1329                           
  1330                           ;main.c: 78:         if(readSeq()){
  1331  0015FC  ECA6  F012         	call	_readSeq	;wreg free
  1332  001600  0900               	iorlw	0
  1333  001602  B4D8               	btfsc	status,2,c
  1334  001604  EF06  F00B         	goto	u3751
  1335  001608  EF09  F00B         	goto	u3750
  1336  00160C                     u3751:
  1337  00160C  FFFF               	dw	65535	; assembler added errata NOP
  1338  00160E  EF6F  F00A         	goto	l4458
  1339  001612                     u3750:
  1340  001612  FFFF               	dw	65535	; assembler added errata NOP
  1341  001614                     
  1342                           ;main.c: 82:             errCode = executeData();
  1343  001614  EC05  F007         	call	_executeData	;wreg free
  1344  001618  0100               	movlb	0	; () banked
  1345  00161A  6FFC               	movwf	main@errCode& (0+255),b
  1346  00161C                     
  1347                           ; BSR set to: 0
  1348                           ;main.c: 84:             printError(errCode);
  1349  00161C  51FC               	movf	main@errCode& (0+255),w,b
  1350  00161E  EC32  F00D         	call	_printError
  1351  001622                     
  1352                           ;main.c: 87:             clearTM0();
  1353  001622  EC53  F012         	call	_clearTM0	;wreg free
  1354  001626                     
  1355                           ;main.c: 91:             reduceSeq();
  1356  001626  ECA2  F012         	call	_reduceSeq	;wreg free
  1357  00162A                     
  1358                           ;main.c: 92:             shiftData();
  1359  00162A  ECEF  F010         	call	_shiftData	;wreg free
  1360  00162E  EF6F  F00A         	goto	l4458
  1361  001632  EFCE  F000         	goto	start
  1362  001636                     __end_of_main:
  1363                           	callstack 0
  1364                           
  1365 ;; *************** function _usartInit *****************
  1366 ;; Defined at:
  1367 ;;		line 92 in file "usart.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;		None
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;		None
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1381 ;;      Params:         0       0       0       0       0       0       0
  1382 ;;      Locals:         0       0       0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0
  1384 ;;      Totals:         0       0       0       0       0       0       0
  1385 ;;Total ram usage:        0 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    4
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text1
  1396  002402                     __ptext1:
  1397                           	callstack 0
  1398  002402                     _usartInit:
  1399                           	callstack 0
  1400  002402  FFFF               	dw	65535	; assembler added errata NOP
  1401  002404                     
  1402                           ;usart.c: 94:     TRISCbits.TRISC6 = 0;
  1403  002404  9C94               	bcf	148,6,c	;volatile
  1404                           
  1405                           ;usart.c: 95:     TRISCbits.TRISC7 = 1;
  1406  002406  8E94               	bsf	148,7,c	;volatile
  1407                           
  1408                           ;usart.c: 97:     TXSTAbits.TX9 = 0;
  1409  002408  9CAC               	bcf	172,6,c	;volatile
  1410                           
  1411                           ;usart.c: 98:     TXSTAbits.TXEN = 1;
  1412  00240A  8AAC               	bsf	172,5,c	;volatile
  1413                           
  1414                           ;usart.c: 99:     TXSTAbits.SYNC = 0;
  1415  00240C  98AC               	bcf	172,4,c	;volatile
  1416                           
  1417                           ;usart.c: 100:     TXSTAbits.BRGH = 0;
  1418  00240E  94AC               	bcf	172,2,c	;volatile
  1419                           
  1420                           ;usart.c: 102:     RCSTAbits.SPEN = 1;
  1421  002410  8EAB               	bsf	171,7,c	;volatile
  1422                           
  1423                           ;usart.c: 103:     RCSTAbits.RX9 = 0;
  1424  002412  9CAB               	bcf	171,6,c	;volatile
  1425                           
  1426                           ;usart.c: 104:     RCSTAbits.CREN = 0;
  1427  002414  98AB               	bcf	171,4,c	;volatile
  1428                           
  1429                           ;usart.c: 105:     RCSTAbits.ADDEN = 0;
  1430  002416  96AB               	bcf	171,3,c	;volatile
  1431  002418                     
  1432                           ;usart.c: 108:     SPBRG = 25;
  1433  002418  0E19               	movlw	25
  1434  00241A  6EAF               	movwf	175,c	;volatile
  1435  00241C  0012               	return		;funcret
  1436  00241E  FFFF               	dw	65535	; errata NOP
  1437  002420                     __end_of_usartInit:
  1438                           	callstack 0
  1439                           
  1440 ;; *************** function _tim2Init *****************
  1441 ;; Defined at:
  1442 ;;		line 46 in file "timer.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1456 ;;      Params:         2       0       0       0       0       0       0
  1457 ;;      Locals:         0       0       0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0
  1459 ;;      Totals:         2       0       0       0       0       0       0
  1460 ;;Total ram usage:        2 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    4
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text2
  1471  002420                     __ptext2:
  1472                           	callstack 0
  1473  002420                     _tim2Init:
  1474                           	callstack 0
  1475  002420  FFFF               	dw	65535	; assembler added errata NOP
  1476  002422                     
  1477                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1478  002422  94CA               	bcf	202,2,c	;volatile
  1479  002424                     
  1480                           ;timer.c: 48:     T2CONbits.T2CKPS = 0x10;
  1481  002424  0EFC               	movlw	-4
  1482  002426  16CA               	andwf	202,f,c	;volatile
  1483  002428                     
  1484                           ;timer.c: 51:     pwmPeriod = _pwmPeriod;
  1485  002428  C012  F046         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1486  00242C  C013  F047         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1487  002430  0012               	return		;funcret
  1488  002432  FFFF               	dw	65535	; errata NOP
  1489  002434                     __end_of_tim2Init:
  1490                           	callstack 0
  1491                           
  1492 ;; *************** function _tim1Init *****************
  1493 ;; Defined at:
  1494 ;;		line 33 in file "timer.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;		None
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      void 
  1501 ;; Registers used:
  1502 ;;		wreg, status,2
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1508 ;;      Params:         0       0       0       0       0       0       0
  1509 ;;      Locals:         0       0       0       0       0       0       0
  1510 ;;      Temps:          0       0       0       0       0       0       0
  1511 ;;      Totals:         0       0       0       0       0       0       0
  1512 ;;Total ram usage:        0 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    4
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_main
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           	psect	text3
  1523  00247C                     __ptext3:
  1524                           	callstack 0
  1525  00247C                     _tim1Init:
  1526                           	callstack 0
  1527  00247C  FFFF               	dw	65535	; assembler added errata NOP
  1528  00247E                     
  1529                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1530  00247E  0E30               	movlw	48
  1531  002480  12CD               	iorwf	205,f,c	;volatile
  1532  002482                     
  1533                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1534  002482  92CD               	bcf	205,1,c	;volatile
  1535  002484                     
  1536                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1537  002484  80CD               	bsf	205,0,c	;volatile
  1538  002486  0012               	return		;funcret
  1539  002488  FFFF               	dw	65535	; errata NOP
  1540  00248A                     __end_of_tim1Init:
  1541                           	callstack 0
  1542                           
  1543 ;; *************** function _tim0Init *****************
  1544 ;; Defined at:
  1545 ;;		line 21 in file "timer.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;		None
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;		None
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, status,2
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1559 ;;      Params:         0       0       0       0       0       0       0
  1560 ;;      Locals:         0       0       0       0       0       0       0
  1561 ;;      Temps:          0       0       0       0       0       0       0
  1562 ;;      Totals:         0       0       0       0       0       0       0
  1563 ;;Total ram usage:        0 bytes
  1564 ;; Hardware stack levels used:    1
  1565 ;; Hardware stack levels required when called:    4
  1566 ;; This function calls:
  1567 ;;		Nothing
  1568 ;; This function is called by:
  1569 ;;		_main
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           	psect	text4
  1574  002448                     __ptext4:
  1575                           	callstack 0
  1576  002448                     _tim0Init:
  1577                           	callstack 0
  1578  002448  FFFF               	dw	65535	; assembler added errata NOP
  1579  00244A                     
  1580                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1581  00244A  9ED5               	bcf	213,7,c	;volatile
  1582                           
  1583                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1584  00244C  9CD5               	bcf	213,6,c	;volatile
  1585                           
  1586                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1587  00244E  9AD5               	bcf	213,5,c	;volatile
  1588                           
  1589                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1590  002450  86D5               	bsf	213,3,c	;volatile
  1591  002452                     
  1592                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1593  002452  0E07               	movlw	7
  1594  002454  12D5               	iorwf	213,f,c	;volatile
  1595  002456  0012               	return		;funcret
  1596  002458  FFFF               	dw	65535	; errata NOP
  1597  00245A                     __end_of_tim0Init:
  1598                           	callstack 0
  1599                           
  1600 ;; *************** function _storeData *****************
  1601 ;; Defined at:
  1602 ;;		line 164 in file "usart.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  data            1    wreg     unsigned char 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  data            1   26[COMRAM] unsigned char 
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1616 ;;      Params:         0       0       0       0       0       0       0
  1617 ;;      Locals:         1       0       0       0       0       0       0
  1618 ;;      Temps:          2       0       0       0       0       0       0
  1619 ;;      Totals:         3       0       0       0       0       0       0
  1620 ;;Total ram usage:        3 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    6
  1623 ;; This function calls:
  1624 ;;		_printError
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text5
  1631  001636                     __ptext5:
  1632                           	callstack 0
  1633  001636                     _storeData:
  1634                           	callstack 0
  1635  001636  FFFF               	dw	65535	; assembler added errata NOP
  1636                           
  1637                           ;incstack = 0
  1638                           ;storeData@data stored from wreg
  1639  001638  6E1B               	movwf	storeData@data^0,c
  1640  00163A                     
  1641                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  1642  00163A  0EC8               	movlw	low storeData@receivedMex
  1643  00163C  2455               	addwf	storeData@counter^0,w,c
  1644  00163E  6ED9               	movwf	fsr2l,c
  1645  001640  6ADA               	clrf	fsr2h,c
  1646  001642  0E00               	movlw	high storeData@receivedMex
  1647  001644  22DA               	addwfc	fsr2h,f,c
  1648  001646  C01B  FFDF         	movff	storeData@data,indf2
  1649  00164A                     
  1650                           ;usart.c: 175:     counter++;
  1651  00164A  2A55               	incf	storeData@counter^0,f,c
  1652                           
  1653                           ;usart.c: 178:     switch(receivedMex[0]){
  1654  00164C  EF37  F00B         	goto	l4310
  1655  001650                     l4302:
  1656  001650  FFFF               	dw	65535	; assembler added errata NOP
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;usart.c: 180:             mexLength = 5;
  1660  001652  0E05               	movlw	5
  1661  001654  6E6C               	movwf	storeData@mexLength^0,c
  1662                           
  1663                           ;usart.c: 181:             break;
  1664  001656  EF53  F00B         	goto	l4312
  1665  00165A                     l4304:
  1666  00165A  FFFF               	dw	65535	; assembler added errata NOP
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;usart.c: 183:             mexLength = 9;
  1670  00165C  0E09               	movlw	9
  1671  00165E  6E6C               	movwf	storeData@mexLength^0,c
  1672                           
  1673                           ;usart.c: 184:             break;
  1674  001660  EF53  F00B         	goto	l4312
  1675  001664                     l4306:
  1676  001664  FFFF               	dw	65535	; assembler added errata NOP
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;usart.c: 186:             mexLength = 1;
  1680  001666  0E01               	movlw	1
  1681  001668  6E6C               	movwf	storeData@mexLength^0,c
  1682                           
  1683                           ;usart.c: 187:             break;
  1684  00166A  EF53  F00B         	goto	l4312
  1685  00166E                     l4310:
  1686  00166E  FFFF               	dw	65535	; assembler added errata NOP
  1687  001670  0100               	movlb	0	; () banked
  1688  001672  51C8               	movf	storeData@receivedMex& (0+255),w,b
  1689  001674  6E19               	movwf	??_storeData^0,c
  1690  001676  6A1A               	clrf	(??_storeData+1)^0,c
  1691                           
  1692                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1693                           ; Switch size 1, requested type "simple"
  1694                           ; Number of cases is 1, Range of values is 0 to 0
  1695                           ; switch strategies available:
  1696                           ; Name         Instructions Cycles
  1697                           ; simple_byte            4     3 (average)
  1698                           ;	Chosen strategy is simple_byte
  1699  001678  501A               	movf	(??_storeData+1)^0,w,c
  1700  00167A  0A00               	xorlw	0	; case 0
  1701  00167C  B4D8               	btfsc	status,2,c
  1702  00167E  EF43  F00B         	goto	l4678
  1703  001682  EF53  F00B         	goto	l4312
  1704  001686                     l4678:
  1705  001686  FFFF               	dw	65535	; assembler added errata NOP
  1706                           
  1707                           ; BSR set to: 0
  1708                           ; Switch size 1, requested type "simple"
  1709                           ; Number of cases is 3, Range of values is 0 to 2
  1710                           ; switch strategies available:
  1711                           ; Name         Instructions Cycles
  1712                           ; simple_byte           10     6 (average)
  1713                           ;	Chosen strategy is simple_byte
  1714  001688  5019               	movf	??_storeData^0,w,c
  1715  00168A  0A00               	xorlw	0	; case 0
  1716  00168C  B4D8               	btfsc	status,2,c
  1717  00168E  EF28  F00B         	goto	l4302
  1718  001692  0A01               	xorlw	1	; case 1
  1719  001694  B4D8               	btfsc	status,2,c
  1720  001696  EF2D  F00B         	goto	l4304
  1721  00169A  0A03               	xorlw	3	; case 2
  1722  00169C  B4D8               	btfsc	status,2,c
  1723  00169E  EF32  F00B         	goto	l4306
  1724  0016A2  EF53  F00B         	goto	l4312
  1725  0016A6                     l4312:
  1726  0016A6  FFFF               	dw	65535	; assembler added errata NOP
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;usart.c: 194:     if(counter >= mexLength){
  1730  0016A8  506C               	movf	storeData@mexLength^0,w,c
  1731  0016AA  5C55               	subwf	storeData@counter^0,w,c
  1732  0016AC  A0D8               	btfss	status,0,c
  1733  0016AE  EF5B  F00B         	goto	u3661
  1734  0016B2  EF5E  F00B         	goto	u3660
  1735  0016B6                     u3661:
  1736  0016B6  FFFF               	dw	65535	; assembler added errata NOP
  1737  0016B8  EFD6  F00B         	goto	l583
  1738  0016BC                     u3660:
  1739  0016BC  FFFF               	dw	65535	; assembler added errata NOP
  1740  0016BE                     
  1741                           ; BSR set to: 0
  1742                           ;usart.c: 195:         counter = 0;
  1743  0016BE  0E00               	movlw	0
  1744  0016C0  6E55               	movwf	storeData@counter^0,c
  1745                           
  1746                           ;usart.c: 198:         switch(receivedMex[0]){
  1747  0016C2  EFBB  F00B         	goto	l4334
  1748  0016C6                     l4316:
  1749  0016C6  FFFF               	dw	65535	; assembler added errata NOP
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1753  0016C8  5058               	movf	_dataCounter^0,w,c
  1754  0016CA  0D04               	mullw	4
  1755  0016CC  0ED1               	movlw	low _dataSequence
  1756  0016CE  24F3               	addwf	243,w,c
  1757  0016D0  6ED9               	movwf	fsr2l,c
  1758  0016D2  0E00               	movlw	high _dataSequence
  1759  0016D4  20F4               	addwfc	prodh,w,c
  1760  0016D6  6EDA               	movwf	fsr2h,c
  1761  0016D8  C0C9  FFDF         	movff	storeData@receivedMex+1,indf2
  1762                           
  1763                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 10;
  1764  0016DC  5058               	movf	_dataCounter^0,w,c
  1765  0016DE  0D04               	mullw	4
  1766  0016E0  0ED2               	movlw	low (_dataSequence+1)
  1767  0016E2  24F3               	addwf	243,w,c
  1768  0016E4  6ED9               	movwf	fsr2l,c
  1769  0016E6  0E00               	movlw	high (_dataSequence+1)
  1770  0016E8  20F4               	addwfc	prodh,w,c
  1771  0016EA  6EDA               	movwf	fsr2h,c
  1772  0016EC  51CA               	movf	(storeData@receivedMex+2)& (0+255),w,b
  1773  0016EE  0D0A               	mullw	10
  1774  0016F0  CFF3 FFDF          	movff	prodl,indf2
  1775                           
  1776                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 10;
  1777  0016F4  5058               	movf	_dataCounter^0,w,c
  1778  0016F6  0D04               	mullw	4
  1779  0016F8  0ED3               	movlw	low (_dataSequence+2)
  1780  0016FA  24F3               	addwf	243,w,c
  1781  0016FC  6ED9               	movwf	fsr2l,c
  1782  0016FE  0E00               	movlw	high (_dataSequence+2)
  1783  001700  20F4               	addwfc	prodh,w,c
  1784  001702  6EDA               	movwf	fsr2h,c
  1785  001704  51CB               	movf	(storeData@receivedMex+3)& (0+255),w,b
  1786  001706  0D0A               	mullw	10
  1787  001708  CFF3 FFDF          	movff	prodl,indf2
  1788                           
  1789                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1790  00170C  5058               	movf	_dataCounter^0,w,c
  1791  00170E  0D04               	mullw	4
  1792  001710  0ED4               	movlw	low (_dataSequence+3)
  1793  001712  24F3               	addwf	243,w,c
  1794  001714  6ED9               	movwf	fsr2l,c
  1795  001716  0E00               	movlw	high (_dataSequence+3)
  1796  001718  20F4               	addwfc	prodh,w,c
  1797  00171A  6EDA               	movwf	fsr2h,c
  1798  00171C  C0CC  FFDF         	movff	storeData@receivedMex+4,indf2
  1799  001720                     
  1800                           ; BSR set to: 0
  1801                           ;usart.c: 205:                 dataCounter++;
  1802  001720  2A58               	incf	_dataCounter^0,f,c
  1803                           
  1804                           ;usart.c: 206:                 break;
  1805  001722  EFD6  F00B         	goto	l583
  1806  001726                     l580:
  1807  001726  FFFF               	dw	65535	; assembler added errata NOP
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  1811  001728  C0C9  F0E5         	movff	storeData@receivedMex+1,_newSequenceData
  1812                           
  1813                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  1814  00172C  C0CA  F0E6         	movff	storeData@receivedMex+2,_newSequenceData+1
  1815  001730                     
  1816                           ; BSR set to: 0
  1817                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 10;
  1818  001730  51CB               	movf	(storeData@receivedMex+3)& (0+255),w,b
  1819  001732  0D0A               	mullw	10
  1820  001734  CFF3 F0E7          	movff	prodl,_newSequenceData+2
  1821                           
  1822                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 10;
  1823  001738  51CC               	movf	(storeData@receivedMex+4)& (0+255),w,b
  1824  00173A  0D0A               	mullw	10
  1825  00173C  CFF3 F0E8          	movff	prodl,_newSequenceData+3
  1826  001740                     
  1827                           ; BSR set to: 0
  1828                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  1829  001740  C0CD  F0E9         	movff	storeData@receivedMex+5,_newSequenceData+4
  1830                           
  1831                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 10;
  1832  001744  51CE               	movf	(storeData@receivedMex+6)& (0+255),w,b
  1833  001746  0D0A               	mullw	10
  1834  001748  CFF3 F0EA          	movff	prodl,_newSequenceData+5
  1835                           
  1836                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 10;
  1837  00174C  51CF               	movf	(storeData@receivedMex+7)& (0+255),w,b
  1838  00174E  0D0A               	mullw	10
  1839  001750  CFF3 F0EB          	movff	prodl,_newSequenceData+6
  1840  001754                     
  1841                           ; BSR set to: 0
  1842                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  1843  001754  C0D0  F0EC         	movff	storeData@receivedMex+8,_newSequenceData+7
  1844  001758                     
  1845                           ; BSR set to: 0
  1846                           ;usart.c: 218:                 _newSequence = 1;
  1847  001758  0E01               	movlw	1
  1848  00175A  6E56               	movwf	__newSequence^0,c
  1849                           
  1850                           ;usart.c: 219:                 break;
  1851  00175C  EFD6  F00B         	goto	l583
  1852  001760                     l4328:
  1853  001760  FFFF               	dw	65535	; assembler added errata NOP
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;usart.c: 222:                 _fatalError = 1;
  1857  001762  0E01               	movlw	1
  1858  001764  6E57               	movwf	__fatalError^0,c
  1859                           
  1860                           ;usart.c: 223:                 break;
  1861  001766  EFD6  F00B         	goto	l583
  1862  00176A                     l4330:
  1863  00176A  FFFF               	dw	65535	; assembler added errata NOP
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;usart.c: 226:                 printError(8);
  1867  00176C  0E08               	movlw	8
  1868  00176E  EC32  F00D         	call	_printError
  1869                           
  1870                           ;usart.c: 227:                 break;
  1871  001772  EFD6  F00B         	goto	l583
  1872  001776                     l4334:
  1873  001776  FFFF               	dw	65535	; assembler added errata NOP
  1874                           
  1875                           ; BSR set to: 0
  1876  001778  51C8               	movf	storeData@receivedMex& (0+255),w,b
  1877  00177A  6E19               	movwf	??_storeData^0,c
  1878  00177C  6A1A               	clrf	(??_storeData+1)^0,c
  1879                           
  1880                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1881                           ; Switch size 1, requested type "simple"
  1882                           ; Number of cases is 1, Range of values is 0 to 0
  1883                           ; switch strategies available:
  1884                           ; Name         Instructions Cycles
  1885                           ; simple_byte            4     3 (average)
  1886                           ;	Chosen strategy is simple_byte
  1887  00177E  501A               	movf	(??_storeData+1)^0,w,c
  1888  001780  0A00               	xorlw	0	; case 0
  1889  001782  B4D8               	btfsc	status,2,c
  1890  001784  EFC6  F00B         	goto	l4680
  1891  001788  EFB5  F00B         	goto	l4330
  1892  00178C                     l4680:
  1893  00178C  FFFF               	dw	65535	; assembler added errata NOP
  1894                           
  1895                           ; BSR set to: 0
  1896                           ; Switch size 1, requested type "simple"
  1897                           ; Number of cases is 3, Range of values is 0 to 2
  1898                           ; switch strategies available:
  1899                           ; Name         Instructions Cycles
  1900                           ; simple_byte           10     6 (average)
  1901                           ;	Chosen strategy is simple_byte
  1902  00178E  5019               	movf	??_storeData^0,w,c
  1903  001790  0A00               	xorlw	0	; case 0
  1904  001792  B4D8               	btfsc	status,2,c
  1905  001794  EF63  F00B         	goto	l4316
  1906  001798  0A01               	xorlw	1	; case 1
  1907  00179A  B4D8               	btfsc	status,2,c
  1908  00179C  EF93  F00B         	goto	l580
  1909  0017A0  0A03               	xorlw	3	; case 2
  1910  0017A2  B4D8               	btfsc	status,2,c
  1911  0017A4  EFB0  F00B         	goto	l4328
  1912  0017A8  EFB5  F00B         	goto	l4330
  1913  0017AC                     l583:
  1914  0017AC  FFFF               	dw	65535	; assembler added errata NOP
  1915  0017AE  0012               	return		;funcret
  1916  0017B0  FFFF               	dw	65535	; errata NOP
  1917  0017B2                     __end_of_storeData:
  1918                           	callstack 0
  1919                           
  1920 ;; *************** function _printError *****************
  1921 ;; Defined at:
  1922 ;;		line 111 in file "usart.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;  errCode         1    wreg     unsigned char 
  1925 ;; Auto vars:     Size  Location     Type
  1926 ;;  errCode         1   23[COMRAM] unsigned char 
  1927 ;; Return value:  Size  Location     Type
  1928 ;;                  1    wreg      void 
  1929 ;; Registers used:
  1930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1931 ;; Tracked objects:
  1932 ;;		On entry : 0/0
  1933 ;;		On exit  : 0/0
  1934 ;;		Unchanged: 0/0
  1935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1936 ;;      Params:         0       0       0       0       0       0       0
  1937 ;;      Locals:         1       0       0       0       0       0       0
  1938 ;;      Temps:          2       0       0       0       0       0       0
  1939 ;;      Totals:         3       0       0       0       0       0       0
  1940 ;;Total ram usage:        3 bytes
  1941 ;; Hardware stack levels used:    1
  1942 ;; Hardware stack levels required when called:    5
  1943 ;; This function calls:
  1944 ;;		_uartTx
  1945 ;; This function is called by:
  1946 ;;		_main
  1947 ;;		_storeData
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           	psect	text6
  1952  001A64                     __ptext6:
  1953                           	callstack 0
  1954  001A64                     _printError:
  1955                           	callstack 0
  1956  001A64  FFFF               	dw	65535	; assembler added errata NOP
  1957                           
  1958                           ;incstack = 0
  1959                           ;printError@errCode stored from wreg
  1960  001A66  6E18               	movwf	printError@errCode^0,c
  1961  001A68                     
  1962                           ;usart.c: 113:     switch(errCode){
  1963  001A68  EF8E  F00D         	goto	l4152
  1964  001A6C                     l4134:
  1965  001A6C  FFFF               	dw	65535	; assembler added errata NOP
  1966                           
  1967                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1968  001A6E  0E92               	movlw	low _errString_Feed
  1969  001A70  6E12               	movwf	uartTx@ptr^0,c
  1970  001A72  0E00               	movlw	high _errString_Feed
  1971  001A74  6E13               	movwf	(uartTx@ptr+1)^0,c
  1972  001A76  0E1E               	movlw	30
  1973  001A78  6E14               	movwf	uartTx@length^0,c
  1974  001A7A  EC1F  F011         	call	_uartTx	;wreg free
  1975                           
  1976                           ;usart.c: 116:             break;
  1977  001A7E  EFBD  F00D         	goto	l550
  1978  001A82                     l4136:
  1979  001A82  FFFF               	dw	65535	; assembler added errata NOP
  1980                           
  1981                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1982  001A84  0E5E               	movlw	low _errString_ZEND
  1983  001A86  6E12               	movwf	uartTx@ptr^0,c
  1984  001A88  0E01               	movlw	high _errString_ZEND
  1985  001A8A  6E13               	movwf	(uartTx@ptr+1)^0,c
  1986  001A8C  0E29               	movlw	41
  1987  001A8E  6E14               	movwf	uartTx@length^0,c
  1988  001A90  EC1F  F011         	call	_uartTx	;wreg free
  1989                           
  1990                           ;usart.c: 119:             break;
  1991  001A94  EFBD  F00D         	goto	l550
  1992  001A98                     l4138:
  1993  001A98  FFFF               	dw	65535	; assembler added errata NOP
  1994                           
  1995                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1996  001A9A  0E87               	movlw	low _errString_Reset
  1997  001A9C  6E12               	movwf	uartTx@ptr^0,c
  1998  001A9E  0E01               	movlw	high _errString_Reset
  1999  001AA0  6E13               	movwf	(uartTx@ptr+1)^0,c
  2000  001AA2  0E28               	movlw	40
  2001  001AA4  6E14               	movwf	uartTx@length^0,c
  2002  001AA6  EC1F  F011         	call	_uartTx	;wreg free
  2003                           
  2004                           ;usart.c: 122:             break;
  2005  001AAA  EFBD  F00D         	goto	l550
  2006  001AAE                     l4140:
  2007  001AAE  FFFF               	dw	65535	; assembler added errata NOP
  2008                           
  2009                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  2010  001AB0  0E35               	movlw	low _errString_Point
  2011  001AB2  6E12               	movwf	uartTx@ptr^0,c
  2012  001AB4  0E01               	movlw	high _errString_Point
  2013  001AB6  6E13               	movwf	(uartTx@ptr+1)^0,c
  2014  001AB8  0E29               	movlw	41
  2015  001ABA  6E14               	movwf	uartTx@length^0,c
  2016  001ABC  EC1F  F011         	call	_uartTx	;wreg free
  2017                           
  2018                           ;usart.c: 125:             break;
  2019  001AC0  EFBD  F00D         	goto	l550
  2020  001AC4                     l4142:
  2021  001AC4  FFFF               	dw	65535	; assembler added errata NOP
  2022                           
  2023                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2024  001AC6  0ED6               	movlw	low _errString_Bound
  2025  001AC8  6E12               	movwf	uartTx@ptr^0,c
  2026  001ACA  0E01               	movlw	high _errString_Bound
  2027  001ACC  6E13               	movwf	(uartTx@ptr+1)^0,c
  2028  001ACE  0E21               	movlw	33
  2029  001AD0  6E14               	movwf	uartTx@length^0,c
  2030  001AD2  EC1F  F011         	call	_uartTx	;wreg free
  2031                           
  2032                           ;usart.c: 128:             break;
  2033  001AD6  EFBD  F00D         	goto	l550
  2034  001ADA                     l4144:
  2035  001ADA  FFFF               	dw	65535	; assembler added errata NOP
  2036                           
  2037                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2038  001ADC  0E00               	movlw	low _errString_PointZ
  2039  001ADE  6E12               	movwf	uartTx@ptr^0,c
  2040  001AE0  0E01               	movlw	high _errString_PointZ
  2041  001AE2  6E13               	movwf	(uartTx@ptr+1)^0,c
  2042  001AE4  0E35               	movlw	53
  2043  001AE6  6E14               	movwf	uartTx@length^0,c
  2044  001AE8  EC1F  F011         	call	_uartTx	;wreg free
  2045                           
  2046                           ;usart.c: 131:             break;
  2047  001AEC  EFBD  F00D         	goto	l550
  2048  001AF0                     l4146:
  2049  001AF0  FFFF               	dw	65535	; assembler added errata NOP
  2050                           
  2051                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2052  001AF2  0EAF               	movlw	low _errString_Fatal
  2053  001AF4  6E12               	movwf	uartTx@ptr^0,c
  2054  001AF6  0E01               	movlw	high _errString_Fatal
  2055  001AF8  6E13               	movwf	(uartTx@ptr+1)^0,c
  2056  001AFA  0E27               	movlw	39
  2057  001AFC  6E14               	movwf	uartTx@length^0,c
  2058  001AFE  EC1F  F011         	call	_uartTx	;wreg free
  2059                           
  2060                           ;usart.c: 134:             break;
  2061  001B02  EFBD  F00D         	goto	l550
  2062  001B06                     l4148:
  2063  001B06  FFFF               	dw	65535	; assembler added errata NOP
  2064                           
  2065                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2066  001B08  0EB0               	movlw	low _errString_Command
  2067  001B0A  6E12               	movwf	uartTx@ptr^0,c
  2068  001B0C  0E00               	movlw	high _errString_Command
  2069  001B0E  6E13               	movwf	(uartTx@ptr+1)^0,c
  2070  001B10  0E18               	movlw	24
  2071  001B12  6E14               	movwf	uartTx@length^0,c
  2072  001B14  EC1F  F011         	call	_uartTx	;wreg free
  2073                           
  2074                           ;usart.c: 137:             break;
  2075  001B18  EFBD  F00D         	goto	l550
  2076  001B1C                     l4152:
  2077  001B1C  FFFF               	dw	65535	; assembler added errata NOP
  2078  001B1E  5018               	movf	printError@errCode^0,w,c
  2079  001B20  6E16               	movwf	??_printError^0,c
  2080  001B22  6A17               	clrf	(??_printError+1)^0,c
  2081                           
  2082                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2083                           ; Switch size 1, requested type "simple"
  2084                           ; Number of cases is 1, Range of values is 0 to 0
  2085                           ; switch strategies available:
  2086                           ; Name         Instructions Cycles
  2087                           ; simple_byte            4     3 (average)
  2088                           ;	Chosen strategy is simple_byte
  2089  001B24  5017               	movf	(??_printError+1)^0,w,c
  2090  001B26  0A00               	xorlw	0	; case 0
  2091  001B28  B4D8               	btfsc	status,2,c
  2092  001B2A  EF99  F00D         	goto	l4682
  2093  001B2E  EFBD  F00D         	goto	l550
  2094  001B32                     l4682:
  2095  001B32  FFFF               	dw	65535	; assembler added errata NOP
  2096                           
  2097                           ; Switch size 1, requested type "simple"
  2098                           ; Number of cases is 8, Range of values is 1 to 8
  2099                           ; switch strategies available:
  2100                           ; Name         Instructions Cycles
  2101                           ; simple_byte           25    13 (average)
  2102                           ;	Chosen strategy is simple_byte
  2103  001B34  5016               	movf	??_printError^0,w,c
  2104  001B36  0A01               	xorlw	1	; case 1
  2105  001B38  B4D8               	btfsc	status,2,c
  2106  001B3A  EF36  F00D         	goto	l4134
  2107  001B3E  0A03               	xorlw	3	; case 2
  2108  001B40  B4D8               	btfsc	status,2,c
  2109  001B42  EF41  F00D         	goto	l4136
  2110  001B46  0A01               	xorlw	1	; case 3
  2111  001B48  B4D8               	btfsc	status,2,c
  2112  001B4A  EF4C  F00D         	goto	l4138
  2113  001B4E  0A07               	xorlw	7	; case 4
  2114  001B50  B4D8               	btfsc	status,2,c
  2115  001B52  EF57  F00D         	goto	l4140
  2116  001B56  0A01               	xorlw	1	; case 5
  2117  001B58  B4D8               	btfsc	status,2,c
  2118  001B5A  EF62  F00D         	goto	l4142
  2119  001B5E  0A03               	xorlw	3	; case 6
  2120  001B60  B4D8               	btfsc	status,2,c
  2121  001B62  EF6D  F00D         	goto	l4144
  2122  001B66  0A01               	xorlw	1	; case 7
  2123  001B68  B4D8               	btfsc	status,2,c
  2124  001B6A  EF78  F00D         	goto	l4146
  2125  001B6E  0A0F               	xorlw	15	; case 8
  2126  001B70  B4D8               	btfsc	status,2,c
  2127  001B72  EF83  F00D         	goto	l4148
  2128  001B76  EFBD  F00D         	goto	l550
  2129  001B7A                     l550:
  2130  001B7A  FFFF               	dw	65535	; assembler added errata NOP
  2131  001B7C  0012               	return		;funcret
  2132  001B7E  FFFF               	dw	65535	; errata NOP
  2133  001B80                     __end_of_printError:
  2134                           	callstack 0
  2135                           
  2136 ;; *************** function _uartTx *****************
  2137 ;; Defined at:
  2138 ;;		line 148 in file "usart.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2141 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2142 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2143 ;;  length          1   19[COMRAM] unsigned char 
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;  i               1   20[COMRAM] unsigned char 
  2146 ;; Return value:  Size  Location     Type
  2147 ;;                  1    wreg      void 
  2148 ;; Registers used:
  2149 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2155 ;;      Params:         3       0       0       0       0       0       0
  2156 ;;      Locals:         1       0       0       0       0       0       0
  2157 ;;      Temps:          0       0       0       0       0       0       0
  2158 ;;      Totals:         4       0       0       0       0       0       0
  2159 ;;Total ram usage:        4 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:    4
  2162 ;; This function calls:
  2163 ;;		Nothing
  2164 ;; This function is called by:
  2165 ;;		_printError
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text7
  2170  00223E                     __ptext7:
  2171                           	callstack 0
  2172  00223E                     _uartTx:
  2173                           	callstack 0
  2174  00223E  FFFF               	dw	65535	; assembler added errata NOP
  2175  002240                     
  2176                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  2177  002240  0E01               	movlw	1
  2178  002242  6E15               	movwf	uartTx@i^0,c
  2179  002244  EF38  F011         	goto	l3654
  2180  002248                     l3650:
  2181  002248  FFFF               	dw	65535	; assembler added errata NOP
  2182                           
  2183                           ;usart.c: 153:         TXREG = *ptr;
  2184  00224A  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2185  00224E  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2186  002252  50DF               	movf	indf2,w,c
  2187  002254  6EAD               	movwf	173,c	;volatile
  2188  002256                     l555:
  2189  002256  FFFF               	dw	65535	; assembler added errata NOP
  2190  002258  A2AC               	btfss	172,1,c	;volatile
  2191  00225A  EF31  F011         	goto	u2641
  2192  00225E  EF34  F011         	goto	u2640
  2193  002262                     u2641:
  2194  002262  FFFF               	dw	65535	; assembler added errata NOP
  2195  002264  EF2B  F011         	goto	l555
  2196  002268                     u2640:
  2197  002268  FFFF               	dw	65535	; assembler added errata NOP
  2198  00226A                     
  2199                           ;usart.c: 157:         ptr++;
  2200  00226A  4A12               	infsnz	uartTx@ptr^0,f,c
  2201  00226C  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2202                           
  2203                           ;usart.c: 158:     }
  2204  00226E  2A15               	incf	uartTx@i^0,f,c
  2205  002270                     l3654:
  2206  002270  FFFF               	dw	65535	; assembler added errata NOP
  2207  002272  5014               	movf	uartTx@length^0,w,c
  2208  002274  5C15               	subwf	uartTx@i^0,w,c
  2209  002276  A0D8               	btfss	status,0,c
  2210  002278  EF40  F011         	goto	u2651
  2211  00227C  EF43  F011         	goto	u2650
  2212  002280                     u2651:
  2213  002280  FFFF               	dw	65535	; assembler added errata NOP
  2214  002282  EF24  F011         	goto	l3650
  2215  002286                     u2650:
  2216  002286  FFFF               	dw	65535	; assembler added errata NOP
  2217  002288  0012               	return		;funcret
  2218  00228A  FFFF               	dw	65535	; errata NOP
  2219  00228C                     __end_of_uartTx:
  2220                           	callstack 0
  2221                           
  2222 ;; *************** function _shiftData *****************
  2223 ;; Defined at:
  2224 ;;		line 81 in file "usart.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;		None
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;  i               1   19[COMRAM] unsigned char 
  2229 ;; Return value:  Size  Location     Type
  2230 ;;                  1    wreg      void 
  2231 ;; Registers used:
  2232 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2233 ;; Tracked objects:
  2234 ;;		On entry : 0/0
  2235 ;;		On exit  : 0/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2238 ;;      Params:         0       0       0       0       0       0       0
  2239 ;;      Locals:         1       0       0       0       0       0       0
  2240 ;;      Temps:          2       0       0       0       0       0       0
  2241 ;;      Totals:         3       0       0       0       0       0       0
  2242 ;;Total ram usage:        3 bytes
  2243 ;; Hardware stack levels used:    1
  2244 ;; Hardware stack levels required when called:    4
  2245 ;; This function calls:
  2246 ;;		Nothing
  2247 ;; This function is called by:
  2248 ;;		_main
  2249 ;; This function uses a non-reentrant model
  2250 ;;
  2251                           
  2252                           	psect	text8
  2253  0021DE                     __ptext8:
  2254                           	callstack 0
  2255  0021DE                     _shiftData:
  2256                           	callstack 0
  2257  0021DE  FFFF               	dw	65535	; assembler added errata NOP
  2258  0021E0                     
  2259                           ;usart.c: 82:     char i;;usart.c: 84:     for(i = 0; i < 4; i++){
  2260  0021E0  0E00               	movlw	0
  2261  0021E2  6E14               	movwf	shiftData@i^0,c
  2262  0021E4                     l4430:
  2263  0021E4  FFFF               	dw	65535	; assembler added errata NOP
  2264                           
  2265                           ;usart.c: 85:         dataSequence[i] = dataSequence[i+1];
  2266  0021E6  5014               	movf	shiftData@i^0,w,c
  2267  0021E8  6E12               	movwf	??_shiftData^0,c
  2268  0021EA  6A13               	clrf	(??_shiftData+1)^0,c
  2269  0021EC  90D8               	bcf	status,0,c
  2270  0021EE  3612               	rlcf	??_shiftData^0,f,c
  2271  0021F0  3613               	rlcf	(??_shiftData+1)^0,f,c
  2272  0021F2  90D8               	bcf	status,0,c
  2273  0021F4  3612               	rlcf	??_shiftData^0,f,c
  2274  0021F6  3613               	rlcf	(??_shiftData+1)^0,f,c
  2275  0021F8  0ED5               	movlw	low (_dataSequence+4)
  2276  0021FA  2412               	addwf	??_shiftData^0,w,c
  2277  0021FC  6ED9               	movwf	fsr2l,c
  2278  0021FE  0E00               	movlw	high (_dataSequence+4)
  2279  002200  2013               	addwfc	(??_shiftData+1)^0,w,c
  2280  002202  6EDA               	movwf	fsr2h,c
  2281  002204  5014               	movf	shiftData@i^0,w,c
  2282  002206  0D04               	mullw	4
  2283  002208  0ED1               	movlw	low _dataSequence
  2284  00220A  24F3               	addwf	243,w,c
  2285  00220C  6EE1               	movwf	fsr1l,c
  2286  00220E  0E00               	movlw	high _dataSequence
  2287  002210  20F4               	addwfc	prodh,w,c
  2288  002212  6EE2               	movwf	fsr1h,c
  2289  002214  CFDE FFE6          	movff	postinc2,postinc1
  2290  002218  CFDE FFE6          	movff	postinc2,postinc1
  2291  00221C  CFDE FFE6          	movff	postinc2,postinc1
  2292  002220  CFDE FFE6          	movff	postinc2,postinc1
  2293  002224                     
  2294                           ;usart.c: 86:     }
  2295  002224  2A14               	incf	shiftData@i^0,f,c
  2296  002226  0E03               	movlw	3
  2297  002228  6414               	cpfsgt	shiftData@i^0,c
  2298  00222A  EF19  F011         	goto	u3691
  2299  00222E  EF1C  F011         	goto	u3690
  2300  002232                     u3691:
  2301  002232  FFFF               	dw	65535	; assembler added errata NOP
  2302  002234  EFF2  F010         	goto	l4430
  2303  002238                     u3690:
  2304  002238  FFFF               	dw	65535	; assembler added errata NOP
  2305  00223A  0012               	return		;funcret
  2306  00223C  FFFF               	dw	65535	; errata NOP
  2307  00223E                     __end_of_shiftData:
  2308                           	callstack 0
  2309                           
  2310 ;; *************** function _resetPosition *****************
  2311 ;; Defined at:
  2312 ;;		line 165 in file "motors.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;		None
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2317 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2318 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2319 ;; Return value:  Size  Location     Type
  2320 ;;                  1    wreg      unsigned char 
  2321 ;; Registers used:
  2322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2328 ;;      Params:         0       0       0       0       0       0       0
  2329 ;;      Locals:         3       0       0       0       0       0       0
  2330 ;;      Temps:          0       0       0       0       0       0       0
  2331 ;;      Totals:         3       0       0       0       0       0       0
  2332 ;;Total ram usage:        3 bytes
  2333 ;; Hardware stack levels used:    1
  2334 ;; Hardware stack levels required when called:    5
  2335 ;; This function calls:
  2336 ;;		_resetStep
  2337 ;;		_stepMade
  2338 ;; This function is called by:
  2339 ;;		_main
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           	psect	text9
  2344  001092                     __ptext9:
  2345                           	callstack 0
  2346  001092                     _resetPosition:
  2347                           	callstack 0
  2348  001092  FFFF               	dw	65535	; assembler added errata NOP
  2349  001094                     
  2350                           ;motors.c: 185:     motCounter[0][1] = -1;
  2351  001094  6860               	setf	(_motCounter+2)^0,c
  2352  001096  6861               	setf	(_motCounter+3)^0,c
  2353                           
  2354                           ;motors.c: 186:     motCounter[1][1] = -1;
  2355  001098  6864               	setf	(_motCounter+6)^0,c
  2356  00109A  6865               	setf	(_motCounter+7)^0,c
  2357                           
  2358                           ;motors.c: 187:     motCounter[2][1] = -1;
  2359  00109C  6868               	setf	(_motCounter+10)^0,c
  2360  00109E  6869               	setf	(_motCounter+11)^0,c
  2361  0010A0                     
  2362                           ;motors.c: 192:     unsigned char keepMovingX = 1;
  2363  0010A0  0E01               	movlw	1
  2364  0010A2  6E15               	movwf	resetPosition@keepMovingX^0,c
  2365                           
  2366                           ;motors.c: 193:     unsigned char keepMovingY = 1;
  2367  0010A4  0E01               	movlw	1
  2368  0010A6  6E16               	movwf	resetPosition@keepMovingY^0,c
  2369                           
  2370                           ;motors.c: 194:     unsigned char keepMovingZ = 1;
  2371  0010A8  0E01               	movlw	1
  2372  0010AA  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2373  0010AC                     
  2374                           ;motors.c: 197:     T2CONbits.TMR2ON = 1;
  2375  0010AC  84CA               	bsf	202,2,c	;volatile
  2376                           
  2377                           ;motors.c: 199:     tm0Error = 0;
  2378  0010AE  0E00               	movlw	0
  2379  0010B0  6E51               	movwf	(_tm0Error+1)^0,c
  2380  0010B2  0E00               	movlw	0
  2381  0010B4  6E50               	movwf	_tm0Error^0,c
  2382                           
  2383                           ;motors.c: 200:     tm0Limit = 250;
  2384  0010B6  0EFA               	movlw	250
  2385  0010B8  6E5D               	movwf	_tm0Limit^0,c
  2386  0010BA                     
  2387                           ;motors.c: 201:     T0CONbits.TMR0ON = 1;
  2388  0010BA  8ED5               	bsf	213,7,c	;volatile
  2389                           
  2390                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2391  0010BC  EF1E  F009         	goto	l4236
  2392  0010C0                     l4190:
  2393  0010C0  FFFF               	dw	65535	; assembler added errata NOP
  2394                           
  2395                           ;motors.c: 206:         if(tm0Error){
  2396  0010C2  5050               	movf	_tm0Error^0,w,c
  2397  0010C4  1051               	iorwf	(_tm0Error+1)^0,w,c
  2398  0010C6  B4D8               	btfsc	status,2,c
  2399  0010C8  EF68  F008         	goto	u3501
  2400  0010CC  EF6B  F008         	goto	u3500
  2401  0010D0                     u3501:
  2402  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  2403  0010D2  EF72  F008         	goto	l131
  2404  0010D6                     u3500:
  2405  0010D6  FFFF               	dw	65535	; assembler added errata NOP
  2406  0010D8                     
  2407                           ;motors.c: 214:             tm0Error = 3;
  2408  0010D8  0E00               	movlw	0
  2409  0010DA  6E51               	movwf	(_tm0Error+1)^0,c
  2410  0010DC  0E03               	movlw	3
  2411  0010DE  6E50               	movwf	_tm0Error^0,c
  2412                           
  2413                           ;motors.c: 215:             break;
  2414  0010E0  EF3C  F009         	goto	l132
  2415  0010E4                     l131:
  2416  0010E4  FFFF               	dw	65535	; assembler added errata NOP
  2417                           
  2418                           ;motors.c: 222:         if(PORTEbits.RE0 || !keepMovingX){
  2419  0010E6  B084               	btfsc	132,0,c	;volatile
  2420  0010E8  EF78  F008         	goto	u3511
  2421  0010EC  EF7B  F008         	goto	u3510
  2422  0010F0                     u3511:
  2423  0010F0  FFFF               	dw	65535	; assembler added errata NOP
  2424  0010F2  EF85  F008         	goto	l4196
  2425  0010F6                     u3510:
  2426  0010F6  FFFF               	dw	65535	; assembler added errata NOP
  2427  0010F8  5015               	movf	resetPosition@keepMovingX^0,w,c
  2428  0010FA  A4D8               	btfss	status,2,c
  2429  0010FC  EF82  F008         	goto	u3521
  2430  001100  EF85  F008         	goto	u3520
  2431  001104                     u3521:
  2432  001104  FFFF               	dw	65535	; assembler added errata NOP
  2433  001106  EF8A  F008         	goto	l4198
  2434  00110A                     u3520:
  2435  00110A                     l4196:
  2436  00110A  FFFF               	dw	65535	; assembler added errata NOP
  2437                           
  2438                           ;motors.c: 224:             keepMovingX = 0;
  2439  00110C  0E00               	movlw	0
  2440  00110E  6E15               	movwf	resetPosition@keepMovingX^0,c
  2441                           
  2442                           ;motors.c: 225:         }else{
  2443  001110  EFA7  F008         	goto	l4206
  2444  001114                     l4198:
  2445  001114  FFFF               	dw	65535	; assembler added errata NOP
  2446                           
  2447                           ;motors.c: 231:             motCounter[0][0] += motCounter[0][1];
  2448  001116  EE20  F060         	lfsr	2,_motCounter+2
  2449  00111A  50DE               	movf	postinc2,w,c
  2450  00111C  265E               	addwf	_motCounter^0,f,c
  2451  00111E  50DD               	movf	postdec2,w,c
  2452  001120  225F               	addwfc	(_motCounter+1)^0,f,c
  2453  001122                     
  2454                           ;motors.c: 232:             if(motCounter[0][0] < 0){
  2455  001122  BE5F               	btfsc	(_motCounter+1)^0,7,c
  2456  001124  EF99  F008         	goto	u3530
  2457  001128  EF96  F008         	goto	u3531
  2458  00112C                     u3531:
  2459  00112C  FFFF               	dw	65535	; assembler added errata NOP
  2460  00112E  EF9E  F008         	goto	l4204
  2461  001132                     u3530:
  2462  001132  FFFF               	dw	65535	; assembler added errata NOP
  2463  001134                     
  2464                           ;motors.c: 233:                 motCounter[0][0] = 3;
  2465  001134  0E00               	movlw	0
  2466  001136  6E5F               	movwf	(_motCounter+1)^0,c
  2467  001138  0E03               	movlw	3
  2468  00113A  6E5E               	movwf	_motCounter^0,c
  2469  00113C                     l4204:
  2470  00113C  FFFF               	dw	65535	; assembler added errata NOP
  2471                           
  2472                           ;motors.c: 236:             LATA = stepMot1[motCounter[0][0]];
  2473  00113E  0E8C               	movlw	low _stepMot1
  2474  001140  245E               	addwf	_motCounter^0,w,c
  2475  001142  6ED9               	movwf	fsr2l,c
  2476  001144  0E00               	movlw	high _stepMot1
  2477  001146  205F               	addwfc	(_motCounter+1)^0,w,c
  2478  001148  6EDA               	movwf	fsr2h,c
  2479  00114A  50DF               	movf	indf2,w,c
  2480  00114C  6E89               	movwf	137,c	;volatile
  2481  00114E                     l4206:
  2482  00114E  FFFF               	dw	65535	; assembler added errata NOP
  2483                           
  2484                           ;motors.c: 241:         if(PORTEbits.RE1 || !keepMovingY){
  2485  001150  B284               	btfsc	132,1,c	;volatile
  2486  001152  EFAD  F008         	goto	u3541
  2487  001156  EFB0  F008         	goto	u3540
  2488  00115A                     u3541:
  2489  00115A  FFFF               	dw	65535	; assembler added errata NOP
  2490  00115C  EFBA  F008         	goto	l4210
  2491  001160                     u3540:
  2492  001160  FFFF               	dw	65535	; assembler added errata NOP
  2493  001162  5016               	movf	resetPosition@keepMovingY^0,w,c
  2494  001164  A4D8               	btfss	status,2,c
  2495  001166  EFB7  F008         	goto	u3551
  2496  00116A  EFBA  F008         	goto	u3550
  2497  00116E                     u3551:
  2498  00116E  FFFF               	dw	65535	; assembler added errata NOP
  2499  001170  EFBF  F008         	goto	l4212
  2500  001174                     u3550:
  2501  001174                     l4210:
  2502  001174  FFFF               	dw	65535	; assembler added errata NOP
  2503                           
  2504                           ;motors.c: 243:             keepMovingY = 0;
  2505  001176  0E00               	movlw	0
  2506  001178  6E16               	movwf	resetPosition@keepMovingY^0,c
  2507                           
  2508                           ;motors.c: 244:         }else{
  2509  00117A  EFDC  F008         	goto	l4220
  2510  00117E                     l4212:
  2511  00117E  FFFF               	dw	65535	; assembler added errata NOP
  2512                           
  2513                           ;motors.c: 250:             motCounter[1][0] += motCounter[1][1];
  2514  001180  EE20  F064         	lfsr	2,_motCounter+6
  2515  001184  50DE               	movf	postinc2,w,c
  2516  001186  2662               	addwf	(_motCounter+4)^0,f,c
  2517  001188  50DD               	movf	postdec2,w,c
  2518  00118A  2263               	addwfc	(_motCounter+5)^0,f,c
  2519  00118C                     
  2520                           ;motors.c: 251:             if(motCounter[1][0] < 0){
  2521  00118C  BE63               	btfsc	(_motCounter+5)^0,7,c
  2522  00118E  EFCE  F008         	goto	u3560
  2523  001192  EFCB  F008         	goto	u3561
  2524  001196                     u3561:
  2525  001196  FFFF               	dw	65535	; assembler added errata NOP
  2526  001198  EFD3  F008         	goto	l4218
  2527  00119C                     u3560:
  2528  00119C  FFFF               	dw	65535	; assembler added errata NOP
  2529  00119E                     
  2530                           ;motors.c: 252:                 motCounter[1][0] = 3;
  2531  00119E  0E00               	movlw	0
  2532  0011A0  6E63               	movwf	(_motCounter+5)^0,c
  2533  0011A2  0E03               	movlw	3
  2534  0011A4  6E62               	movwf	(_motCounter+4)^0,c
  2535  0011A6                     l4218:
  2536  0011A6  FFFF               	dw	65535	; assembler added errata NOP
  2537                           
  2538                           ;motors.c: 255:             LATB = stepMot2[motCounter[1][0]];
  2539  0011A8  0E88               	movlw	low _stepMot2
  2540  0011AA  2462               	addwf	(_motCounter+4)^0,w,c
  2541  0011AC  6ED9               	movwf	fsr2l,c
  2542  0011AE  0E00               	movlw	high _stepMot2
  2543  0011B0  2063               	addwfc	(_motCounter+5)^0,w,c
  2544  0011B2  6EDA               	movwf	fsr2h,c
  2545  0011B4  50DF               	movf	indf2,w,c
  2546  0011B6  6E8A               	movwf	138,c	;volatile
  2547  0011B8                     l4220:
  2548  0011B8  FFFF               	dw	65535	; assembler added errata NOP
  2549                           
  2550                           ;motors.c: 260:         if(PORTEbits.RE2 || !keepMovingZ){
  2551  0011BA  B484               	btfsc	132,2,c	;volatile
  2552  0011BC  EFE2  F008         	goto	u3571
  2553  0011C0  EFE5  F008         	goto	u3570
  2554  0011C4                     u3571:
  2555  0011C4  FFFF               	dw	65535	; assembler added errata NOP
  2556  0011C6  EFEF  F008         	goto	l4224
  2557  0011CA                     u3570:
  2558  0011CA  FFFF               	dw	65535	; assembler added errata NOP
  2559  0011CC  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2560  0011CE  A4D8               	btfss	status,2,c
  2561  0011D0  EFEC  F008         	goto	u3581
  2562  0011D4  EFEF  F008         	goto	u3580
  2563  0011D8                     u3581:
  2564  0011D8  FFFF               	dw	65535	; assembler added errata NOP
  2565  0011DA  EFF4  F008         	goto	l4226
  2566  0011DE                     u3580:
  2567  0011DE                     l4224:
  2568  0011DE  FFFF               	dw	65535	; assembler added errata NOP
  2569                           
  2570                           ;motors.c: 262:             keepMovingZ = 0;
  2571  0011E0  0E00               	movlw	0
  2572  0011E2  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2573                           
  2574                           ;motors.c: 263:         }else{
  2575  0011E4  EF11  F009         	goto	l4234
  2576  0011E8                     l4226:
  2577  0011E8  FFFF               	dw	65535	; assembler added errata NOP
  2578                           
  2579                           ;motors.c: 269:             motCounter[2][0] += motCounter[2][1];
  2580  0011EA  EE20  F068         	lfsr	2,_motCounter+10
  2581  0011EE  50DE               	movf	postinc2,w,c
  2582  0011F0  2666               	addwf	(_motCounter+8)^0,f,c
  2583  0011F2  50DD               	movf	postdec2,w,c
  2584  0011F4  2267               	addwfc	(_motCounter+9)^0,f,c
  2585  0011F6                     
  2586                           ;motors.c: 270:             if(motCounter[2][0] < 0){
  2587  0011F6  BE67               	btfsc	(_motCounter+9)^0,7,c
  2588  0011F8  EF03  F009         	goto	u3590
  2589  0011FC  EF00  F009         	goto	u3591
  2590  001200                     u3591:
  2591  001200  FFFF               	dw	65535	; assembler added errata NOP
  2592  001202  EF08  F009         	goto	l4232
  2593  001206                     u3590:
  2594  001206  FFFF               	dw	65535	; assembler added errata NOP
  2595  001208                     
  2596                           ;motors.c: 271:                 motCounter[2][0] = 3;
  2597  001208  0E00               	movlw	0
  2598  00120A  6E67               	movwf	(_motCounter+9)^0,c
  2599  00120C  0E03               	movlw	3
  2600  00120E  6E66               	movwf	(_motCounter+8)^0,c
  2601  001210                     l4232:
  2602  001210  FFFF               	dw	65535	; assembler added errata NOP
  2603                           
  2604                           ;motors.c: 274:             LATC = stepMot3[motCounter[2][0]];
  2605  001212  0E84               	movlw	low _stepMot3
  2606  001214  2466               	addwf	(_motCounter+8)^0,w,c
  2607  001216  6ED9               	movwf	fsr2l,c
  2608  001218  0E00               	movlw	high _stepMot3
  2609  00121A  2067               	addwfc	(_motCounter+9)^0,w,c
  2610  00121C  6EDA               	movwf	fsr2h,c
  2611  00121E  50DF               	movf	indf2,w,c
  2612  001220  6E8B               	movwf	139,c	;volatile
  2613  001222                     l4234:
  2614  001222  FFFF               	dw	65535	; assembler added errata NOP
  2615  001224  EC1A  F012         	call	_stepMade	;wreg free
  2616  001228  5012               	movf	?_stepMade^0,w,c
  2617  00122A  1013               	iorwf	(?_stepMade+1)^0,w,c
  2618  00122C  B4D8               	btfsc	status,2,c
  2619  00122E  EF1B  F009         	goto	u3601
  2620  001232  EF1E  F009         	goto	u3600
  2621  001236                     u3601:
  2622  001236  FFFF               	dw	65535	; assembler added errata NOP
  2623  001238  EF11  F009         	goto	l4234
  2624  00123C                     u3600:
  2625  00123C                     l4236:
  2626  00123C  FFFF               	dw	65535	; assembler added errata NOP
  2627                           
  2628                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2629  00123E  5015               	movf	resetPosition@keepMovingX^0,w,c
  2630  001240  A4D8               	btfss	status,2,c
  2631  001242  EF25  F009         	goto	u3611
  2632  001246  EF28  F009         	goto	u3610
  2633  00124A                     u3611:
  2634  00124A  FFFF               	dw	65535	; assembler added errata NOP
  2635  00124C  EF60  F008         	goto	l4190
  2636  001250                     u3610:
  2637  001250  FFFF               	dw	65535	; assembler added errata NOP
  2638  001252  5016               	movf	resetPosition@keepMovingY^0,w,c
  2639  001254  A4D8               	btfss	status,2,c
  2640  001256  EF2F  F009         	goto	u3621
  2641  00125A  EF32  F009         	goto	u3620
  2642  00125E                     u3621:
  2643  00125E  FFFF               	dw	65535	; assembler added errata NOP
  2644  001260  EF60  F008         	goto	l4190
  2645  001264                     u3620:
  2646  001264  FFFF               	dw	65535	; assembler added errata NOP
  2647  001266  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2648  001268  A4D8               	btfss	status,2,c
  2649  00126A  EF39  F009         	goto	u3631
  2650  00126E  EF3C  F009         	goto	u3630
  2651  001272                     u3631:
  2652  001272  FFFF               	dw	65535	; assembler added errata NOP
  2653  001274  EF60  F008         	goto	l4190
  2654  001278                     u3630:
  2655  001278                     l132:
  2656  001278  FFFF               	dw	65535	; assembler added errata NOP
  2657                           
  2658                           ;motors.c: 294:     T0CONbits.TMR0ON = 0;
  2659  00127A  9ED5               	bcf	213,7,c	;volatile
  2660                           
  2661                           ;motors.c: 295:     T2CONbits.TMR2ON = 0;
  2662  00127C  94CA               	bcf	202,2,c	;volatile
  2663  00127E                     
  2664                           ;motors.c: 297:     TMR0 = 0;
  2665  00127E  0E00               	movlw	0
  2666  001280  6ED7               	movwf	215,c	;volatile
  2667  001282  0E00               	movlw	0
  2668  001284  6ED6               	movwf	214,c	;volatile
  2669                           
  2670                           ;motors.c: 298:     TMR2 = 0;
  2671  001286  0E00               	movlw	0
  2672  001288  6ECC               	movwf	204,c	;volatile
  2673  00128A                     
  2674                           ;motors.c: 301:     resetStep();
  2675  00128A  EC8E  F012         	call	_resetStep	;wreg free
  2676  00128E                     
  2677                           ;motors.c: 304:     return(tm0Error);
  2678  00128E  5050               	movf	_tm0Error^0,w,c
  2679  001290  0012               	return		;funcret
  2680  001292  FFFF               	dw	65535	; errata NOP
  2681  001294                     __end_of_resetPosition:
  2682                           	callstack 0
  2683                           
  2684 ;; *************** function _resetNewSequence *****************
  2685 ;; Defined at:
  2686 ;;		line 73 in file "usart.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;		None
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;		None
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, status,2
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2700 ;;      Params:         0       0       0       0       0       0       0
  2701 ;;      Locals:         0       0       0       0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0       0       0
  2703 ;;      Totals:         0       0       0       0       0       0       0
  2704 ;;Total ram usage:        0 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    4
  2707 ;; This function calls:
  2708 ;;		Nothing
  2709 ;; This function is called by:
  2710 ;;		_main
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text10
  2715  0024F4                     __ptext10:
  2716                           	callstack 0
  2717  0024F4                     _resetNewSequence:
  2718                           	callstack 0
  2719  0024F4  FFFF               	dw	65535	; assembler added errata NOP
  2720  0024F6                     
  2721                           ;usart.c: 74:     _newSequence = 0;
  2722  0024F6  0E00               	movlw	0
  2723  0024F8  6E56               	movwf	__newSequence^0,c
  2724  0024FA  0012               	return		;funcret
  2725  0024FC  FFFF               	dw	65535	; errata NOP
  2726  0024FE                     __end_of_resetNewSequence:
  2727                           	callstack 0
  2728                           
  2729 ;; *************** function _reduceSeq *****************
  2730 ;; Defined at:
  2731 ;;		line 50 in file "usart.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;		None
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;		None
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		status,2, status,0
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2745 ;;      Params:         0       0       0       0       0       0       0
  2746 ;;      Locals:         0       0       0       0       0       0       0
  2747 ;;      Temps:          0       0       0       0       0       0       0
  2748 ;;      Totals:         0       0       0       0       0       0       0
  2749 ;;Total ram usage:        0 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    4
  2752 ;; This function calls:
  2753 ;;		Nothing
  2754 ;; This function is called by:
  2755 ;;		_main
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text11
  2760  002544                     __ptext11:
  2761                           	callstack 0
  2762  002544                     _reduceSeq:
  2763                           	callstack 0
  2764  002544  FFFF               	dw	65535	; assembler added errata NOP
  2765  002546                     
  2766                           ;usart.c: 51:     dataCounter--;
  2767  002546  0658               	decf	_dataCounter^0,f,c
  2768  002548  0012               	return		;funcret
  2769  00254A  FFFF               	dw	65535	; errata NOP
  2770  00254C                     __end_of_reduceSeq:
  2771                           	callstack 0
  2772                           
  2773 ;; *************** function _readSeq *****************
  2774 ;; Defined at:
  2775 ;;		line 57 in file "usart.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;		None
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;		None
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  1    wreg      unsigned char 
  2782 ;; Registers used:
  2783 ;;		wreg, status,2
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2789 ;;      Params:         0       0       0       0       0       0       0
  2790 ;;      Locals:         0       0       0       0       0       0       0
  2791 ;;      Temps:          0       0       0       0       0       0       0
  2792 ;;      Totals:         0       0       0       0       0       0       0
  2793 ;;Total ram usage:        0 bytes
  2794 ;; Hardware stack levels used:    1
  2795 ;; Hardware stack levels required when called:    4
  2796 ;; This function calls:
  2797 ;;		Nothing
  2798 ;; This function is called by:
  2799 ;;		_main
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           	psect	text12
  2804  00254C                     __ptext12:
  2805                           	callstack 0
  2806  00254C                     _readSeq:
  2807                           	callstack 0
  2808  00254C  FFFF               	dw	65535	; assembler added errata NOP
  2809  00254E                     
  2810                           ;usart.c: 58:     return dataCounter;
  2811  00254E  5058               	movf	_dataCounter^0,w,c
  2812  002550  0012               	return		;funcret
  2813  002552  FFFF               	dw	65535	; errata NOP
  2814  002554                     __end_of_readSeq:
  2815                           	callstack 0
  2816                           
  2817 ;; *************** function _newSequence *****************
  2818 ;; Defined at:
  2819 ;;		line 65 in file "usart.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;		None
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;		None
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  1    wreg      unsigned char 
  2826 ;; Registers used:
  2827 ;;		wreg, status,2
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2833 ;;      Params:         0       0       0       0       0       0       0
  2834 ;;      Locals:         0       0       0       0       0       0       0
  2835 ;;      Temps:          0       0       0       0       0       0       0
  2836 ;;      Totals:         0       0       0       0       0       0       0
  2837 ;;Total ram usage:        0 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; Hardware stack levels required when called:    4
  2840 ;; This function calls:
  2841 ;;		Nothing
  2842 ;; This function is called by:
  2843 ;;		_main
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           	psect	text13
  2848  002554                     __ptext13:
  2849                           	callstack 0
  2850  002554                     _newSequence:
  2851                           	callstack 0
  2852  002554  FFFF               	dw	65535	; assembler added errata NOP
  2853  002556                     
  2854                           ;usart.c: 66:     return _newSequence;
  2855  002556  5056               	movf	__newSequence^0,w,c
  2856  002558  0012               	return		;funcret
  2857  00255A  FFFF               	dw	65535	; errata NOP
  2858  00255C                     __end_of_newSequence:
  2859                           	callstack 0
  2860                           
  2861 ;; *************** function _interruptInit *****************
  2862 ;; Defined at:
  2863 ;;		line 21 in file "interrupt.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;		None
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;		None
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      void 
  2870 ;; Registers used:
  2871 ;;		None
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2877 ;;      Params:         0       0       0       0       0       0       0
  2878 ;;      Locals:         0       0       0       0       0       0       0
  2879 ;;      Temps:          0       0       0       0       0       0       0
  2880 ;;      Totals:         0       0       0       0       0       0       0
  2881 ;;Total ram usage:        0 bytes
  2882 ;; Hardware stack levels used:    1
  2883 ;; Hardware stack levels required when called:    4
  2884 ;; This function calls:
  2885 ;;		Nothing
  2886 ;; This function is called by:
  2887 ;;		_main
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	text14
  2892  002322                     __ptext14:
  2893                           	callstack 0
  2894  002322                     _interruptInit:
  2895                           	callstack 0
  2896  002322  FFFF               	dw	65535	; assembler added errata NOP
  2897  002324                     
  2898                           ;interrupt.c: 23:     if(!INTCONbits.GIE){
  2899  002324  BEF2               	btfsc	242,7,c	;volatile
  2900  002326  EF97  F011         	goto	u3641
  2901  00232A  EF9A  F011         	goto	u3640
  2902  00232E                     u3641:
  2903  00232E  FFFF               	dw	65535	; assembler added errata NOP
  2904  002330  EF9C  F011         	goto	l444
  2905  002334                     u3640:
  2906  002334  FFFF               	dw	65535	; assembler added errata NOP
  2907  002336                     
  2908                           ;interrupt.c: 24:         INTCONbits.GIE = 1;
  2909  002336  8EF2               	bsf	242,7,c	;volatile
  2910  002338                     l444:
  2911  002338  FFFF               	dw	65535	; assembler added errata NOP
  2912                           
  2913                           ;interrupt.c: 26:     if(!INTCONbits.PEIE){
  2914  00233A  BCF2               	btfsc	242,6,c	;volatile
  2915  00233C  EFA2  F011         	goto	u3651
  2916  002340  EFA5  F011         	goto	u3650
  2917  002344                     u3651:
  2918  002344  FFFF               	dw	65535	; assembler added errata NOP
  2919  002346  EFA7  F011         	goto	l445
  2920  00234A                     u3650:
  2921  00234A  FFFF               	dw	65535	; assembler added errata NOP
  2922  00234C                     
  2923                           ;interrupt.c: 27:         INTCONbits.PEIE = 1;
  2924  00234C  8CF2               	bsf	242,6,c	;volatile
  2925  00234E                     l445:
  2926  00234E  FFFF               	dw	65535	; assembler added errata NOP
  2927                           
  2928                           ;interrupt.c: 31:     RCONbits.IPEN = 1;
  2929  002350  8ED0               	bsf	208,7,c	;volatile
  2930                           
  2931                           ;interrupt.c: 32:     INTCONbits.T0IE = 1;
  2932  002352  8AF2               	bsf	242,5,c	;volatile
  2933                           
  2934                           ;interrupt.c: 33:     PIE1bits.TMR1IE = 1;
  2935  002354  809D               	bsf	157,0,c	;volatile
  2936                           
  2937                           ;interrupt.c: 34:     PIE1bits.TMR2IE = 1;
  2938  002356  829D               	bsf	157,1,c	;volatile
  2939                           
  2940                           ;interrupt.c: 35:     PIE1bits.RC1IE = 1;
  2941  002358  8A9D               	bsf	157,5,c	;volatile
  2942  00235A  0012               	return		;funcret
  2943  00235C  FFFF               	dw	65535	; errata NOP
  2944  00235E                     __end_of_interruptInit:
  2945                           	callstack 0
  2946                           
  2947 ;; *************** function _initPinMotors *****************
  2948 ;; Defined at:
  2949 ;;		line 49 in file "motors.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;		None
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;		None
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  1    wreg      void 
  2956 ;; Registers used:
  2957 ;;		wreg, status,2, status,0
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2963 ;;      Params:         0       0       0       0       0       0       0
  2964 ;;      Locals:         0       0       0       0       0       0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0
  2966 ;;      Totals:         0       0       0       0       0       0       0
  2967 ;;Total ram usage:        0 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; Hardware stack levels required when called:    4
  2970 ;; This function calls:
  2971 ;;		Nothing
  2972 ;; This function is called by:
  2973 ;;		_main
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text15
  2978  0023B6                     __ptext15:
  2979                           	callstack 0
  2980  0023B6                     _initPinMotors:
  2981                           	callstack 0
  2982  0023B6  FFFF               	dw	65535	; assembler added errata NOP
  2983  0023B8                     
  2984                           ;motors.c: 51:     ADCON1bits.PCFG = 0x06;
  2985  0023B8  50C1               	movf	193,w,c	;volatile
  2986  0023BA  0BF0               	andlw	-16
  2987  0023BC  0906               	iorlw	6
  2988  0023BE  6EC1               	movwf	193,c	;volatile
  2989  0023C0                     
  2990                           ;motors.c: 52:     TRISA &= 0b11010001;
  2991  0023C0  0ED1               	movlw	209
  2992  0023C2  1692               	andwf	146,f,c	;volatile
  2993  0023C4                     
  2994                           ;motors.c: 54:     TRISB &= 0b00000010;
  2995  0023C4  0E02               	movlw	2
  2996  0023C6  1693               	andwf	147,f,c	;volatile
  2997  0023C8                     
  2998                           ;motors.c: 55:     TRISC &= 0b11000000;
  2999  0023C8  0EC0               	movlw	192
  3000  0023CA  1694               	andwf	148,f,c	;volatile
  3001  0023CC                     
  3002                           ;motors.c: 56:     TRISD &= 0b11000000;
  3003  0023CC  0EC0               	movlw	192
  3004  0023CE  1695               	andwf	149,f,c	;volatile
  3005  0023D0                     
  3006                           ;motors.c: 59:     TRISEbits.TRISE0 = 1;
  3007  0023D0  8096               	bsf	150,0,c	;volatile
  3008  0023D2                     
  3009                           ;motors.c: 60:     TRISEbits.TRISE1 = 1;
  3010  0023D2  8296               	bsf	150,1,c	;volatile
  3011  0023D4                     
  3012                           ;motors.c: 61:     TRISEbits.TRISE2 = 1;
  3013  0023D4  8496               	bsf	150,2,c	;volatile
  3014  0023D6                     
  3015                           ;motors.c: 64:     TRISDbits.TRISD7 = 1;
  3016  0023D6  8E95               	bsf	149,7,c	;volatile
  3017  0023D8  0012               	return		;funcret
  3018  0023DA  FFFF               	dw	65535	; errata NOP
  3019  0023DC                     __end_of_initPinMotors:
  3020                           	callstack 0
  3021                           
  3022 ;; *************** function _initADC *****************
  3023 ;; Defined at:
  3024 ;;		line 18 in file "adc.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;		None
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;		None
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  1    wreg      void 
  3031 ;; Registers used:
  3032 ;;		wreg, status,2
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3038 ;;      Params:         0       0       0       0       0       0       0
  3039 ;;      Locals:         0       0       0       0       0       0       0
  3040 ;;      Temps:          0       0       0       0       0       0       0
  3041 ;;      Totals:         0       0       0       0       0       0       0
  3042 ;;Total ram usage:        0 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; Hardware stack levels required when called:    4
  3045 ;; This function calls:
  3046 ;;		Nothing
  3047 ;; This function is called by:
  3048 ;;		_main
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	text16
  3053  0023DC                     __ptext16:
  3054                           	callstack 0
  3055  0023DC                     _initADC:
  3056                           	callstack 0
  3057  0023DC  FFFF               	dw	65535	; assembler added errata NOP
  3058  0023DE                     
  3059                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3060  0023DE  50C2               	movf	194,w,c	;volatile
  3061  0023E0  0B3F               	andlw	-193
  3062  0023E2  0940               	iorlw	64
  3063  0023E4  6EC2               	movwf	194,c	;volatile
  3064  0023E6                     
  3065                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3066  0023E6  8CC1               	bsf	193,6,c	;volatile
  3067                           
  3068                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3069  0023E8  0EC7               	movlw	-57
  3070  0023EA  16C2               	andwf	194,f,c	;volatile
  3071  0023EC                     
  3072                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3073  0023EC  94C2               	bcf	194,2,c	;volatile
  3074  0023EE                     
  3075                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3076  0023EE  90C2               	bcf	194,0,c	;volatile
  3077  0023F0                     
  3078                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3079  0023F0  9EC1               	bcf	193,7,c	;volatile
  3080                           
  3081                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3082  0023F2  50C1               	movf	193,w,c	;volatile
  3083  0023F4  0BF0               	andlw	-16
  3084  0023F6  090E               	iorlw	14
  3085  0023F8  6EC1               	movwf	193,c	;volatile
  3086  0023FA                     
  3087                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3088  0023FA  8C9D               	bsf	157,6,c	;volatile
  3089  0023FC                     
  3090                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3091  0023FC  8C9F               	bsf	159,6,c	;volatile
  3092  0023FE  0012               	return		;funcret
  3093  002400  FFFF               	dw	65535	; errata NOP
  3094  002402                     __end_of_initADC:
  3095                           	callstack 0
  3096                           
  3097 ;; *************** function _getNewSequence *****************
  3098 ;; Defined at:
  3099 ;;		line 43 in file "usart.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;		None
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;		None
  3104 ;; Return value:  Size  Location     Type
  3105 ;;                  2   17[COMRAM] PTR struct .
  3106 ;; Registers used:
  3107 ;;		wreg, status,2, status,0
  3108 ;; Tracked objects:
  3109 ;;		On entry : 0/0
  3110 ;;		On exit  : 0/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3113 ;;      Params:         2       0       0       0       0       0       0
  3114 ;;      Locals:         0       0       0       0       0       0       0
  3115 ;;      Temps:          0       0       0       0       0       0       0
  3116 ;;      Totals:         2       0       0       0       0       0       0
  3117 ;;Total ram usage:        2 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; Hardware stack levels required when called:    4
  3120 ;; This function calls:
  3121 ;;		Nothing
  3122 ;; This function is called by:
  3123 ;;		_main
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           	psect	text17
  3128  00248A                     __ptext17:
  3129                           	callstack 0
  3130  00248A                     _getNewSequence:
  3131                           	callstack 0
  3132  00248A  FFFF               	dw	65535	; assembler added errata NOP
  3133  00248C                     
  3134                           ;usart.c: 44:     return(&newSequenceData);
  3135  00248C  0EE5               	movlw	low _newSequenceData
  3136  00248E  6E12               	movwf	?_getNewSequence^0,c
  3137  002490  0E00               	movlw	high _newSequenceData
  3138  002492  6E13               	movwf	(?_getNewSequence+1)^0,c
  3139  002494  0012               	return		;funcret
  3140  002496  FFFF               	dw	65535	; errata NOP
  3141  002498                     __end_of_getNewSequence:
  3142                           	callstack 0
  3143                           
  3144 ;; *************** function _executeData *****************
  3145 ;; Defined at:
  3146 ;;		line 105 in file "main.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;		None
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  data            2   11[BANK0 ] PTR struct .
  3151 ;;		 -> dataSequence(20), 
  3152 ;;  errCode         1   10[BANK0 ] unsigned char 
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  1    wreg      unsigned char 
  3155 ;; Registers used:
  3156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3162 ;;      Params:         0       0       0       0       0       0       0
  3163 ;;      Locals:         0       3       0       0       0       0       0
  3164 ;;      Temps:          0       2       0       0       0       0       0
  3165 ;;      Totals:         0       5       0       0       0       0       0
  3166 ;;Total ram usage:        5 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; Hardware stack levels required when called:    6
  3169 ;; This function calls:
  3170 ;;		_getData
  3171 ;;		_liftArm
  3172 ;;		_moveToPoint
  3173 ;;		_pickObject
  3174 ;;		_releaseObj
  3175 ;;		_rotateObj
  3176 ;;		_touchObject
  3177 ;;		_touchTherm
  3178 ;; This function is called by:
  3179 ;;		_main
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           	psect	text18
  3184  000E0A                     __ptext18:
  3185                           	callstack 0
  3186  000E0A                     _executeData:
  3187                           	callstack 0
  3188  000E0A  FFFF               	dw	65535	; assembler added errata NOP
  3189  000E0C                     
  3190                           ;main.c: 106:     t_sequence *data = getData();
  3191  000E0C  EC4C  F012         	call	_getData	;wreg free
  3192  000E10  C012  F0F8         	movff	?_getData,executeData@data
  3193  000E14  C013  F0F9         	movff	?_getData+1,executeData@data+1
  3194  000E18                     
  3195                           ;main.c: 112:     switch(data->feederLine){
  3196  000E18  EFB7  F007         	goto	l4386
  3197  000E1C                     l4358:
  3198  000E1C  FFFF               	dw	65535	; assembler added errata NOP
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;main.c: 115:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3202  000E1E  C043  F015         	movff	_posVector,moveToPoint@x1
  3203  000E22  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3204  000E24  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3205  000E28  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3206  000E2A  0E0D               	movlw	low _feeder1Pos
  3207  000E2C  6EF6               	movwf	tblptrl,c
  3208  000E2E                     	if	1	;There is more than 1 active tblptr byte
  3209  000E2E  0E06               	movlw	high _feeder1Pos
  3210  000E30  6EF7               	movwf	tblptrh,c
  3211  000E32                     	endif
  3212  000E32                     	if	0	;There are less than 3 active tblptr bytes
  3213  000E32                     	endif
  3214  000E32  0008               	tblrd		*
  3215  000E34  FFFF               	dw	65535	; errata NOP
  3216  000E36  50F5               	movf	tablat,w,c
  3217  000E38  6E19               	movwf	moveToPoint@x2^0,c
  3218  000E3A  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3219  000E3C  0E0E               	movlw	low (_feeder1Pos+1)
  3220  000E3E  6EF6               	movwf	tblptrl,c
  3221  000E40  0E06               	movlw	high (_feeder1Pos+1)
  3222  000E42  6EF7               	movwf	tblptrh,c
  3223  000E44                     	if	0	;tblptru may be non-zero
  3224  000E44                     	endif
  3225  000E44                     	if	0	;tblptru may be non-zero
  3226  000E44                     	endif
  3227  000E44  0008               	tblrd		*
  3228  000E46  FFFF               	dw	65535	; errata NOP
  3229  000E48  50F5               	movf	tablat,w,c
  3230  000E4A  6E1B               	movwf	moveToPoint@y2^0,c
  3231  000E4C  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3232  000E4E  EC22  F005         	call	_moveToPoint	;wreg free
  3233  000E52  0100               	movlb	0	; () banked
  3234  000E54  6FF7               	movwf	executeData@errCode& (0+255),b
  3235  000E56                     
  3236                           ; BSR set to: 0
  3237                           ;main.c: 117:             posVector[0] = feeder1Pos[0];
  3238  000E56  0E0D               	movlw	low _feeder1Pos
  3239  000E58  6EF6               	movwf	tblptrl,c
  3240  000E5A                     	if	1	;There is more than 1 active tblptr byte
  3241  000E5A  0E06               	movlw	high _feeder1Pos
  3242  000E5C  6EF7               	movwf	tblptrh,c
  3243  000E5E                     	endif
  3244  000E5E                     	if	0	;There are less than 3 active tblptr bytes
  3245  000E5E                     	endif
  3246  000E5E  0008               	tblrd		*
  3247  000E60  FFFF               	dw	65535	; errata NOP
  3248  000E62  CFF5 F043          	movff	tablat,_posVector
  3249  000E66                     
  3250                           ; BSR set to: 0
  3251                           ;main.c: 118:             posVector[1] = feeder1Pos[1];
  3252  000E66  0E0E               	movlw	low (_feeder1Pos+1)
  3253  000E68  6EF6               	movwf	tblptrl,c
  3254  000E6A  0E06               	movlw	high (_feeder1Pos+1)
  3255  000E6C  6EF7               	movwf	tblptrh,c
  3256  000E6E                     	if	0	;tblptru may be non-zero
  3257  000E6E                     	endif
  3258  000E6E                     	if	0	;tblptru may be non-zero
  3259  000E6E                     	endif
  3260  000E6E  0008               	tblrd		*
  3261  000E70  FFFF               	dw	65535	; errata NOP
  3262  000E72  CFF5 F044          	movff	tablat,_posVector+1
  3263                           
  3264                           ;main.c: 119:             break;
  3265  000E76  EFDB  F007         	goto	l4388
  3266  000E7A                     l4364:
  3267  000E7A  FFFF               	dw	65535	; assembler added errata NOP
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;main.c: 121:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3271  000E7C  C043  F015         	movff	_posVector,moveToPoint@x1
  3272  000E80  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3273  000E82  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3274  000E86  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3275  000E88  0E0B               	movlw	low _feeder2Pos
  3276  000E8A  6EF6               	movwf	tblptrl,c
  3277  000E8C                     	if	1	;There is more than 1 active tblptr byte
  3278  000E8C  0E06               	movlw	high _feeder2Pos
  3279  000E8E  6EF7               	movwf	tblptrh,c
  3280  000E90                     	endif
  3281  000E90                     	if	0	;There are less than 3 active tblptr bytes
  3282  000E90                     	endif
  3283  000E90  0008               	tblrd		*
  3284  000E92  FFFF               	dw	65535	; errata NOP
  3285  000E94  50F5               	movf	tablat,w,c
  3286  000E96  6E19               	movwf	moveToPoint@x2^0,c
  3287  000E98  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3288  000E9A  0E0C               	movlw	low (_feeder2Pos+1)
  3289  000E9C  6EF6               	movwf	tblptrl,c
  3290  000E9E  0E06               	movlw	high (_feeder2Pos+1)
  3291  000EA0  6EF7               	movwf	tblptrh,c
  3292  000EA2                     	if	0	;tblptru may be non-zero
  3293  000EA2                     	endif
  3294  000EA2                     	if	0	;tblptru may be non-zero
  3295  000EA2                     	endif
  3296  000EA2  0008               	tblrd		*
  3297  000EA4  FFFF               	dw	65535	; errata NOP
  3298  000EA6  50F5               	movf	tablat,w,c
  3299  000EA8  6E1B               	movwf	moveToPoint@y2^0,c
  3300  000EAA  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3301  000EAC  EC22  F005         	call	_moveToPoint	;wreg free
  3302  000EB0  0100               	movlb	0	; () banked
  3303  000EB2  6FF7               	movwf	executeData@errCode& (0+255),b
  3304  000EB4                     
  3305                           ; BSR set to: 0
  3306                           ;main.c: 122:             posVector[0] = feeder2Pos[0];
  3307  000EB4  0E0B               	movlw	low _feeder2Pos
  3308  000EB6  6EF6               	movwf	tblptrl,c
  3309  000EB8                     	if	1	;There is more than 1 active tblptr byte
  3310  000EB8  0E06               	movlw	high _feeder2Pos
  3311  000EBA  6EF7               	movwf	tblptrh,c
  3312  000EBC                     	endif
  3313  000EBC                     	if	0	;There are less than 3 active tblptr bytes
  3314  000EBC                     	endif
  3315  000EBC  0008               	tblrd		*
  3316  000EBE  FFFF               	dw	65535	; errata NOP
  3317  000EC0  CFF5 F043          	movff	tablat,_posVector
  3318  000EC4                     
  3319                           ; BSR set to: 0
  3320                           ;main.c: 123:             posVector[1] = feeder2Pos[1];
  3321  000EC4  0E0C               	movlw	low (_feeder2Pos+1)
  3322  000EC6  6EF6               	movwf	tblptrl,c
  3323  000EC8  0E06               	movlw	high (_feeder2Pos+1)
  3324  000ECA  6EF7               	movwf	tblptrh,c
  3325  000ECC                     	if	0	;tblptru may be non-zero
  3326  000ECC                     	endif
  3327  000ECC                     	if	0	;tblptru may be non-zero
  3328  000ECC                     	endif
  3329  000ECC  0008               	tblrd		*
  3330  000ECE  FFFF               	dw	65535	; errata NOP
  3331  000ED0  CFF5 F044          	movff	tablat,_posVector+1
  3332                           
  3333                           ;main.c: 124:             break;
  3334  000ED4  EFDB  F007         	goto	l4388
  3335  000ED8                     l4370:
  3336  000ED8  FFFF               	dw	65535	; assembler added errata NOP
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;main.c: 126:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3340  000EDA  C043  F015         	movff	_posVector,moveToPoint@x1
  3341  000EDE  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3342  000EE0  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3343  000EE4  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3344  000EE6  0E09               	movlw	low _feeder3Pos
  3345  000EE8  6EF6               	movwf	tblptrl,c
  3346  000EEA                     	if	1	;There is more than 1 active tblptr byte
  3347  000EEA  0E06               	movlw	high _feeder3Pos
  3348  000EEC  6EF7               	movwf	tblptrh,c
  3349  000EEE                     	endif
  3350  000EEE                     	if	0	;There are less than 3 active tblptr bytes
  3351  000EEE                     	endif
  3352  000EEE  0008               	tblrd		*
  3353  000EF0  FFFF               	dw	65535	; errata NOP
  3354  000EF2  50F5               	movf	tablat,w,c
  3355  000EF4  6E19               	movwf	moveToPoint@x2^0,c
  3356  000EF6  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3357  000EF8  0E0A               	movlw	low (_feeder3Pos+1)
  3358  000EFA  6EF6               	movwf	tblptrl,c
  3359  000EFC  0E06               	movlw	high (_feeder3Pos+1)
  3360  000EFE  6EF7               	movwf	tblptrh,c
  3361  000F00                     	if	0	;tblptru may be non-zero
  3362  000F00                     	endif
  3363  000F00                     	if	0	;tblptru may be non-zero
  3364  000F00                     	endif
  3365  000F00  0008               	tblrd		*
  3366  000F02  FFFF               	dw	65535	; errata NOP
  3367  000F04  50F5               	movf	tablat,w,c
  3368  000F06  6E1B               	movwf	moveToPoint@y2^0,c
  3369  000F08  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3370  000F0A  EC22  F005         	call	_moveToPoint	;wreg free
  3371  000F0E  0100               	movlb	0	; () banked
  3372  000F10  6FF7               	movwf	executeData@errCode& (0+255),b
  3373  000F12                     
  3374                           ; BSR set to: 0
  3375                           ;main.c: 127:             posVector[0] = feeder3Pos[0];
  3376  000F12  0E09               	movlw	low _feeder3Pos
  3377  000F14  6EF6               	movwf	tblptrl,c
  3378  000F16                     	if	1	;There is more than 1 active tblptr byte
  3379  000F16  0E06               	movlw	high _feeder3Pos
  3380  000F18  6EF7               	movwf	tblptrh,c
  3381  000F1A                     	endif
  3382  000F1A                     	if	0	;There are less than 3 active tblptr bytes
  3383  000F1A                     	endif
  3384  000F1A  0008               	tblrd		*
  3385  000F1C  FFFF               	dw	65535	; errata NOP
  3386  000F1E  CFF5 F043          	movff	tablat,_posVector
  3387  000F22                     
  3388                           ; BSR set to: 0
  3389                           ;main.c: 128:             posVector[1] = feeder3Pos[1];
  3390  000F22  0E0A               	movlw	low (_feeder3Pos+1)
  3391  000F24  6EF6               	movwf	tblptrl,c
  3392  000F26  0E06               	movlw	high (_feeder3Pos+1)
  3393  000F28  6EF7               	movwf	tblptrh,c
  3394  000F2A                     	if	0	;tblptru may be non-zero
  3395  000F2A                     	endif
  3396  000F2A                     	if	0	;tblptru may be non-zero
  3397  000F2A                     	endif
  3398  000F2A  0008               	tblrd		*
  3399  000F2C  FFFF               	dw	65535	; errata NOP
  3400  000F2E  CFF5 F044          	movff	tablat,_posVector+1
  3401                           
  3402                           ;main.c: 129:             break;
  3403  000F32  EFDB  F007         	goto	l4388
  3404  000F36                     l4376:
  3405  000F36  FFFF               	dw	65535	; assembler added errata NOP
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;main.c: 133:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3409  000F38  C043  F015         	movff	_posVector,moveToPoint@x1
  3410  000F3C  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3411  000F3E  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3412  000F42  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3413  000F44  C04C  F019         	movff	_newFeeder,moveToPoint@x2
  3414  000F48  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3415  000F4A  C04D  F01B         	movff	_newFeeder+1,moveToPoint@y2
  3416  000F4E  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3417  000F50  EC22  F005         	call	_moveToPoint	;wreg free
  3418  000F54  0100               	movlb	0	; () banked
  3419  000F56  6FF7               	movwf	executeData@errCode& (0+255),b
  3420  000F58                     
  3421                           ; BSR set to: 0
  3422                           ;main.c: 134:             posVector[0] = newFeeder[0];
  3423  000F58  C04C  F043         	movff	_newFeeder,_posVector
  3424  000F5C                     
  3425                           ; BSR set to: 0
  3426                           ;main.c: 135:             posVector[1] = newFeeder[1];
  3427  000F5C  C04D  F044         	movff	_newFeeder+1,_posVector+1
  3428                           
  3429                           ;main.c: 136:             break;
  3430  000F60  EFDB  F007         	goto	l4388
  3431  000F64                     l4382:
  3432  000F64  FFFF               	dw	65535	; assembler added errata NOP
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;main.c: 140:             errCode = 1;
  3436  000F66  0E01               	movlw	1
  3437  000F68  6FF7               	movwf	executeData@errCode& (0+255),b
  3438                           
  3439                           ;main.c: 141:             break;
  3440  000F6A  EFDB  F007         	goto	l4388
  3441  000F6E                     l4386:
  3442  000F6E  FFFF               	dw	65535	; assembler added errata NOP
  3443  000F70  C0F8  FFD9         	movff	executeData@data,fsr2l
  3444  000F74  C0F9  FFDA         	movff	executeData@data+1,fsr2h
  3445  000F78  50DF               	movf	indf2,w,c
  3446  000F7A  0100               	movlb	0	; () banked
  3447  000F7C  6FF5               	movwf	??_executeData& (0+255),b
  3448  000F7E  6BF6               	clrf	(??_executeData+1)& (0+255),b
  3449                           
  3450                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3451                           ; Switch size 1, requested type "simple"
  3452                           ; Number of cases is 1, Range of values is 0 to 0
  3453                           ; switch strategies available:
  3454                           ; Name         Instructions Cycles
  3455                           ; simple_byte            4     3 (average)
  3456                           ;	Chosen strategy is simple_byte
  3457  000F80  51F6               	movf	(??_executeData+1)& (0+255),w,b
  3458  000F82  0A00               	xorlw	0	; case 0
  3459  000F84  B4D8               	btfsc	status,2,c
  3460  000F86  EFC7  F007         	goto	l4684
  3461  000F8A  EFB2  F007         	goto	l4382
  3462  000F8E                     l4684:
  3463  000F8E  FFFF               	dw	65535	; assembler added errata NOP
  3464                           
  3465                           ; BSR set to: 0
  3466                           ; Switch size 1, requested type "simple"
  3467                           ; Number of cases is 4, Range of values is 0 to 255
  3468                           ; switch strategies available:
  3469                           ; Name         Instructions Cycles
  3470                           ; simple_byte           13     7 (average)
  3471                           ;	Chosen strategy is simple_byte
  3472  000F90  51F5               	movf	??_executeData& (0+255),w,b
  3473  000F92  0A00               	xorlw	0	; case 0
  3474  000F94  B4D8               	btfsc	status,2,c
  3475  000F96  EF0E  F007         	goto	l4358
  3476  000F9A  0A01               	xorlw	1	; case 1
  3477  000F9C  B4D8               	btfsc	status,2,c
  3478  000F9E  EF3D  F007         	goto	l4364
  3479  000FA2  0A03               	xorlw	3	; case 2
  3480  000FA4  B4D8               	btfsc	status,2,c
  3481  000FA6  EF6C  F007         	goto	l4370
  3482  000FAA  0AFD               	xorlw	253	; case 255
  3483  000FAC  B4D8               	btfsc	status,2,c
  3484  000FAE  EF9B  F007         	goto	l4376
  3485  000FB2  EFB2  F007         	goto	l4382
  3486  000FB6                     l4388:
  3487  000FB6  FFFF               	dw	65535	; assembler added errata NOP
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;main.c: 145:     if(!errCode){
  3491  000FB8  51F7               	movf	executeData@errCode& (0+255),w,b
  3492  000FBA  A4D8               	btfss	status,2,c
  3493  000FBC  EFE2  F007         	goto	u3671
  3494  000FC0  EFE5  F007         	goto	u3670
  3495  000FC4                     u3671:
  3496  000FC4  FFFF               	dw	65535	; assembler added errata NOP
  3497  000FC6  EF45  F008         	goto	l4414
  3498  000FCA                     u3670:
  3499  000FCA  FFFF               	dw	65535	; assembler added errata NOP
  3500  000FCC                     
  3501                           ; BSR set to: 0
  3502  000FCC  ECD8  F00E         	call	_touchObject	;wreg free
  3503  000FD0                     
  3504                           ;main.c: 150:         pickObject();
  3505  000FD0  ECC5  F011         	call	_pickObject	;wreg free
  3506  000FD4  EC4C  F010         	call	_liftArm	;wreg free
  3507  000FD8  C043  F015         	movff	_posVector,moveToPoint@x1
  3508  000FDC  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3509  000FDE  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3510  000FE2  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3511  000FE4  0100               	movlb	0	; () banked
  3512  000FE6  EE20 F001          	lfsr	2,1
  3513  000FEA  51F8               	movf	executeData@data& (0+255),w,b
  3514  000FEC  26D9               	addwf	fsr2l,f,c
  3515  000FEE  51F9               	movf	(executeData@data+1)& (0+255),w,b
  3516  000FF0  22DA               	addwfc	fsr2h,f,c
  3517  000FF2  50DF               	movf	indf2,w,c
  3518  000FF4  6FF5               	movwf	??_executeData& (0+255),b
  3519  000FF6  51F5               	movf	??_executeData& (0+255),w,b
  3520  000FF8  6E19               	movwf	moveToPoint@x2^0,c
  3521  000FFA  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3522  000FFC  EE20 F002          	lfsr	2,2
  3523  001000  51F8               	movf	executeData@data& (0+255),w,b
  3524  001002  26D9               	addwf	fsr2l,f,c
  3525  001004  51F9               	movf	(executeData@data+1)& (0+255),w,b
  3526  001006  22DA               	addwfc	fsr2h,f,c
  3527  001008  50DF               	movf	indf2,w,c
  3528  00100A  6FF6               	movwf	(??_executeData+1)& (0+255),b
  3529  00100C  51F6               	movf	(??_executeData+1)& (0+255),w,b
  3530  00100E  6E1B               	movwf	moveToPoint@y2^0,c
  3531  001010  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3532  001012  EC22  F005         	call	_moveToPoint	;wreg free
  3533  001016                     
  3534                           ;main.c: 157:         posVector[0] = data->posX;
  3535  001016  0100               	movlb	0	; () banked
  3536  001018  EE20 F001          	lfsr	2,1
  3537  00101C  51F8               	movf	executeData@data& (0+255),w,b
  3538  00101E  26D9               	addwf	fsr2l,f,c
  3539  001020  51F9               	movf	(executeData@data+1)& (0+255),w,b
  3540  001022  22DA               	addwfc	fsr2h,f,c
  3541  001024  50DF               	movf	indf2,w,c
  3542  001026  6E43               	movwf	_posVector^0,c
  3543  001028                     
  3544                           ; BSR set to: 0
  3545                           ;main.c: 158:         posVector[1] = data->posY;
  3546  001028  EE20 F002          	lfsr	2,2
  3547  00102C  51F8               	movf	executeData@data& (0+255),w,b
  3548  00102E  26D9               	addwf	fsr2l,f,c
  3549  001030  51F9               	movf	(executeData@data+1)& (0+255),w,b
  3550  001032  22DA               	addwfc	fsr2h,f,c
  3551  001034  50DF               	movf	indf2,w,c
  3552  001036  6E44               	movwf	(_posVector+1)^0,c
  3553  001038                     
  3554                           ; BSR set to: 0
  3555                           ;main.c: 161:         rotAngle = data->rotation - rotAngle;
  3556  001038  EE20 F003          	lfsr	2,3
  3557  00103C  51F8               	movf	executeData@data& (0+255),w,b
  3558  00103E  26D9               	addwf	fsr2l,f,c
  3559  001040  51F9               	movf	(executeData@data+1)& (0+255),w,b
  3560  001042  22DA               	addwfc	fsr2h,f,c
  3561  001044  50DF               	movf	indf2,w,c
  3562  001046  6FF5               	movwf	??_executeData& (0+255),b
  3563  001048  504E               	movf	_rotAngle^0,w,c
  3564  00104A  5DF5               	subwf	??_executeData& (0+255),w,b
  3565  00104C  6E4E               	movwf	_rotAngle^0,c
  3566  00104E  504F               	movf	(_rotAngle+1)^0,w,c
  3567  001050  A0D8               	btfss	status,0,c
  3568  001052  284F               	incf	(_rotAngle+1)^0,w,c
  3569  001054  6A4F               	clrf	(_rotAngle+1)^0,c
  3570  001056  5E4F               	subwf	(_rotAngle+1)^0,f,c
  3571                           
  3572                           ;main.c: 163:         if(rotAngle < 0){
  3573  001058  BE4F               	btfsc	(_rotAngle+1)^0,7,c
  3574  00105A  EF34  F008         	goto	u3680
  3575  00105E  EF31  F008         	goto	u3681
  3576  001062                     u3681:
  3577  001062  FFFF               	dw	65535	; assembler added errata NOP
  3578  001064  EF39  F008         	goto	l4406
  3579  001068                     u3680:
  3580  001068  FFFF               	dw	65535	; assembler added errata NOP
  3581  00106A                     
  3582                           ; BSR set to: 0
  3583                           ;main.c: 164:             rotAngle += 360;
  3584  00106A  0E68               	movlw	104
  3585  00106C  264E               	addwf	_rotAngle^0,f,c
  3586  00106E  0E01               	movlw	1
  3587  001070  224F               	addwfc	(_rotAngle+1)^0,f,c
  3588  001072                     l4406:
  3589  001072  FFFF               	dw	65535	; assembler added errata NOP
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;main.c: 166:         rotateObj(rotAngle);
  3593  001074  504E               	movf	_rotAngle^0,w,c
  3594  001076  ECDE  F00F         	call	_rotateObj
  3595  00107A  EC4E  F00E         	call	_touchTherm	;wreg free
  3596  00107E                     
  3597                           ;main.c: 171:         releaseObj();
  3598  00107E  ECAF  F011         	call	_releaseObj	;wreg free
  3599  001082                     
  3600                           ;main.c: 174:         errCode = liftArm();
  3601  001082  EC4C  F010         	call	_liftArm	;wreg free
  3602  001086  0100               	movlb	0	; () banked
  3603  001088  6FF7               	movwf	executeData@errCode& (0+255),b
  3604  00108A                     l4414:
  3605  00108A  FFFF               	dw	65535	; assembler added errata NOP
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;main.c: 177:     return(errCode);
  3609  00108C  51F7               	movf	executeData@errCode& (0+255),w,b
  3610  00108E                     
  3611                           ; BSR set to: 0
  3612  00108E  0012               	return		;funcret
  3613  001090  FFFF               	dw	65535	; errata NOP
  3614  001092                     __end_of_executeData:
  3615                           	callstack 0
  3616                           
  3617 ;; *************** function _touchTherm *****************
  3618 ;; Defined at:
  3619 ;;		line 587 in file "motors.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;		None
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;		None
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  1    wreg      unsigned char 
  3626 ;; Registers used:
  3627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3633 ;;      Params:         0       0       0       0       0       0       0
  3634 ;;      Locals:         0       0       0       0       0       0       0
  3635 ;;      Temps:          0       0       0       0       0       0       0
  3636 ;;      Totals:         0       0       0       0       0       0       0
  3637 ;;Total ram usage:        0 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    5
  3640 ;; This function calls:
  3641 ;;		_resetStep
  3642 ;;		_resetTherm
  3643 ;;		_returnTherm
  3644 ;;		_startADC
  3645 ;;		_stepMade
  3646 ;;		_stopADC
  3647 ;; This function is called by:
  3648 ;;		_executeData
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           	psect	text19
  3653  001C9C                     __ptext19:
  3654                           	callstack 0
  3655  001C9C                     _touchTherm:
  3656                           	callstack 0
  3657  001C9C  FFFF               	dw	65535	; assembler added errata NOP
  3658  001C9E                     
  3659                           ;motors.c: 593:     motCounter[2][1] = 1;
  3660  001C9E  0E00               	movlw	0
  3661  001CA0  6E69               	movwf	(_motCounter+11)^0,c
  3662  001CA2  0E01               	movlw	1
  3663  001CA4  6E68               	movwf	(_motCounter+10)^0,c
  3664  001CA6                     
  3665                           ;motors.c: 596:     T2CONbits.TMR2ON = 1;
  3666  001CA6  84CA               	bsf	202,2,c	;volatile
  3667                           
  3668                           ;motors.c: 598:     tm0Error = 0;
  3669  001CA8  0E00               	movlw	0
  3670  001CAA  6E51               	movwf	(_tm0Error+1)^0,c
  3671  001CAC  0E00               	movlw	0
  3672  001CAE  6E50               	movwf	_tm0Error^0,c
  3673                           
  3674                           ;motors.c: 599:     tm0Limit = 250;
  3675  001CB0  0EFA               	movlw	250
  3676  001CB2  6E5D               	movwf	_tm0Limit^0,c
  3677  001CB4                     
  3678                           ;motors.c: 600:     T0CONbits.TMR0ON = 1;
  3679  001CB4  8ED5               	bsf	213,7,c	;volatile
  3680  001CB6                     
  3681                           ;motors.c: 603:     startADC();
  3682  001CB6  EC84  F012         	call	_startADC	;wreg free
  3683                           
  3684                           ;motors.c: 606:     while(!returnTherm() || PORTDbits.RD7){
  3685  001CBA  EFA2  F00E         	goto	l4054
  3686  001CBE                     l4040:
  3687  001CBE  FFFF               	dw	65535	; assembler added errata NOP
  3688                           
  3689                           ;motors.c: 609:         if(tm0Error){
  3690  001CC0  5050               	movf	_tm0Error^0,w,c
  3691  001CC2  1051               	iorwf	(_tm0Error+1)^0,w,c
  3692  001CC4  B4D8               	btfsc	status,2,c
  3693  001CC6  EF67  F00E         	goto	u3361
  3694  001CCA  EF6A  F00E         	goto	u3360
  3695  001CCE                     u3361:
  3696  001CCE  FFFF               	dw	65535	; assembler added errata NOP
  3697  001CD0  EF71  F00E         	goto	l4044
  3698  001CD4                     u3360:
  3699  001CD4  FFFF               	dw	65535	; assembler added errata NOP
  3700  001CD6                     
  3701                           ;motors.c: 614:             tm0Error = 6;
  3702  001CD6  0E00               	movlw	0
  3703  001CD8  6E51               	movwf	(_tm0Error+1)^0,c
  3704  001CDA  0E06               	movlw	6
  3705  001CDC  6E50               	movwf	_tm0Error^0,c
  3706                           
  3707                           ;motors.c: 615:             break;
  3708  001CDE  EFB8  F00E         	goto	l4058
  3709  001CE2                     l4044:
  3710  001CE2  FFFF               	dw	65535	; assembler added errata NOP
  3711                           
  3712                           ;motors.c: 623:             motCounter[2][0] += motCounter[2][1];
  3713  001CE4  EE20  F068         	lfsr	2,_motCounter+10
  3714  001CE8  50DE               	movf	postinc2,w,c
  3715  001CEA  2666               	addwf	(_motCounter+8)^0,f,c
  3716  001CEC  50DD               	movf	postdec2,w,c
  3717  001CEE  2267               	addwfc	(_motCounter+9)^0,f,c
  3718  001CF0                     
  3719                           ;motors.c: 624:             if(motCounter[2][0] > 3){
  3720  001CF0  BE67               	btfsc	(_motCounter+9)^0,7,c
  3721  001CF2  EF84  F00E         	goto	u3371
  3722  001CF6  5067               	movf	(_motCounter+9)^0,w,c
  3723  001CF8  E10A               	bnz	u3370
  3724  001CFA  0E04               	movlw	4
  3725  001CFC  5C66               	subwf	(_motCounter+8)^0,w,c
  3726  001CFE  A0D8               	btfss	status,0,c
  3727  001D00  EF84  F00E         	goto	u3371
  3728  001D04  EF87  F00E         	goto	u3370
  3729  001D08                     u3371:
  3730  001D08  FFFF               	dw	65535	; assembler added errata NOP
  3731  001D0A  EF8C  F00E         	goto	l4050
  3732  001D0E                     u3370:
  3733  001D0E  FFFF               	dw	65535	; assembler added errata NOP
  3734  001D10                     
  3735                           ;motors.c: 625:                 motCounter[2][0] = 0;
  3736  001D10  0E00               	movlw	0
  3737  001D12  6E67               	movwf	(_motCounter+9)^0,c
  3738  001D14  0E00               	movlw	0
  3739  001D16  6E66               	movwf	(_motCounter+8)^0,c
  3740  001D18                     l4050:
  3741  001D18  FFFF               	dw	65535	; assembler added errata NOP
  3742                           
  3743                           ;motors.c: 628:             LATC = stepMot3[motCounter[2][0]];
  3744  001D1A  0E84               	movlw	low _stepMot3
  3745  001D1C  2466               	addwf	(_motCounter+8)^0,w,c
  3746  001D1E  6ED9               	movwf	fsr2l,c
  3747  001D20  0E00               	movlw	high _stepMot3
  3748  001D22  2067               	addwfc	(_motCounter+9)^0,w,c
  3749  001D24  6EDA               	movwf	fsr2h,c
  3750  001D26  50DF               	movf	indf2,w,c
  3751  001D28  6E8B               	movwf	139,c	;volatile
  3752  001D2A                     l4052:
  3753  001D2A  FFFF               	dw	65535	; assembler added errata NOP
  3754  001D2C  EC1A  F012         	call	_stepMade	;wreg free
  3755  001D30  5012               	movf	?_stepMade^0,w,c
  3756  001D32  1013               	iorwf	(?_stepMade+1)^0,w,c
  3757  001D34  B4D8               	btfsc	status,2,c
  3758  001D36  EF9F  F00E         	goto	u3381
  3759  001D3A  EFA2  F00E         	goto	u3380
  3760  001D3E                     u3381:
  3761  001D3E  FFFF               	dw	65535	; assembler added errata NOP
  3762  001D40  EF95  F00E         	goto	l4052
  3763  001D44                     u3380:
  3764  001D44                     l4054:
  3765  001D44  FFFF               	dw	65535	; assembler added errata NOP
  3766                           
  3767                           ;motors.c: 606:     while(!returnTherm() || PORTDbits.RD7){
  3768  001D46  EC68  F012         	call	_returnTherm	;wreg free
  3769  001D4A  5012               	movf	?_returnTherm^0,w,c
  3770  001D4C  1013               	iorwf	(?_returnTherm+1)^0,w,c
  3771  001D4E  B4D8               	btfsc	status,2,c
  3772  001D50  EFAC  F00E         	goto	u3391
  3773  001D54  EFAF  F00E         	goto	u3390
  3774  001D58                     u3391:
  3775  001D58  FFFF               	dw	65535	; assembler added errata NOP
  3776  001D5A  EF5F  F00E         	goto	l4040
  3777  001D5E                     u3390:
  3778  001D5E  FFFF               	dw	65535	; assembler added errata NOP
  3779  001D60  BE83               	btfsc	131,7,c	;volatile
  3780  001D62  EFB5  F00E         	goto	u3401
  3781  001D66  EFB8  F00E         	goto	u3400
  3782  001D6A                     u3401:
  3783  001D6A  FFFF               	dw	65535	; assembler added errata NOP
  3784  001D6C  EF5F  F00E         	goto	l4040
  3785  001D70                     u3400:
  3786  001D70                     l4058:
  3787  001D70  FFFF               	dw	65535	; assembler added errata NOP
  3788                           
  3789                           ;motors.c: 646:     stopADC();
  3790  001D72  ECAE  F012         	call	_stopADC	;wreg free
  3791  001D76                     
  3792                           ;motors.c: 649:     resetTherm();
  3793  001D76  EC7F  F012         	call	_resetTherm	;wreg free
  3794  001D7A                     
  3795                           ;motors.c: 652:     T0CONbits.TMR0ON = 0;
  3796  001D7A  9ED5               	bcf	213,7,c	;volatile
  3797  001D7C                     
  3798                           ;motors.c: 653:     T2CONbits.TMR2ON = 0;
  3799  001D7C  94CA               	bcf	202,2,c	;volatile
  3800                           
  3801                           ;motors.c: 655:     TMR0 = 0;
  3802  001D7E  0E00               	movlw	0
  3803  001D80  6ED7               	movwf	215,c	;volatile
  3804  001D82  0E00               	movlw	0
  3805  001D84  6ED6               	movwf	214,c	;volatile
  3806                           
  3807                           ;motors.c: 656:     TMR2 = 0;
  3808  001D86  0E00               	movlw	0
  3809  001D88  6ECC               	movwf	204,c	;volatile
  3810  001D8A                     
  3811                           ;motors.c: 659:     resetStep();
  3812  001D8A  EC8E  F012         	call	_resetStep	;wreg free
  3813  001D8E                     
  3814                           ;motors.c: 662:     if(PORTDbits.RD7){
  3815  001D8E  AE83               	btfss	131,7,c	;volatile
  3816  001D90  EFCC  F00E         	goto	u3411
  3817  001D94  EFCF  F00E         	goto	u3410
  3818  001D98                     u3411:
  3819  001D98  FFFF               	dw	65535	; assembler added errata NOP
  3820  001D9A  EFD4  F00E         	goto	l213
  3821  001D9E                     u3410:
  3822  001D9E  FFFF               	dw	65535	; assembler added errata NOP
  3823  001DA0                     
  3824                           ;motors.c: 663:         tm0Error = 2;
  3825  001DA0  0E00               	movlw	0
  3826  001DA2  6E51               	movwf	(_tm0Error+1)^0,c
  3827  001DA4  0E02               	movlw	2
  3828  001DA6  6E50               	movwf	_tm0Error^0,c
  3829  001DA8                     l213:
  3830  001DA8  FFFF               	dw	65535	; assembler added errata NOP
  3831                           
  3832                           ;motors.c: 666:     return(tm0Error);
  3833  001DAA  5050               	movf	_tm0Error^0,w,c
  3834  001DAC  0012               	return		;funcret
  3835  001DAE  FFFF               	dw	65535	; errata NOP
  3836  001DB0                     __end_of_touchTherm:
  3837                           	callstack 0
  3838                           
  3839 ;; *************** function _returnTherm *****************
  3840 ;; Defined at:
  3841 ;;		line 58 in file "adc.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;		None
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;		None
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  2   17[COMRAM] unsigned int 
  3848 ;; Registers used:
  3849 ;;		None
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3855 ;;      Params:         2       0       0       0       0       0       0
  3856 ;;      Locals:         0       0       0       0       0       0       0
  3857 ;;      Temps:          0       0       0       0       0       0       0
  3858 ;;      Totals:         2       0       0       0       0       0       0
  3859 ;;Total ram usage:        2 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    4
  3862 ;; This function calls:
  3863 ;;		Nothing
  3864 ;; This function is called by:
  3865 ;;		_touchTherm
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           	psect	text20
  3870  0024D0                     __ptext20:
  3871                           	callstack 0
  3872  0024D0                     _returnTherm:
  3873                           	callstack 0
  3874  0024D0  FFFF               	dw	65535	; assembler added errata NOP
  3875  0024D2                     
  3876                           ;adc.c: 59:     return therm_rel;
  3877  0024D2  C05B  F012         	movff	_therm_rel,?_returnTherm	;volatile
  3878  0024D6  6A13               	clrf	(?_returnTherm+1)^0,c
  3879  0024D8  0012               	return		;funcret
  3880  0024DA  FFFF               	dw	65535	; errata NOP
  3881  0024DC                     __end_of_returnTherm:
  3882                           	callstack 0
  3883                           
  3884 ;; *************** function _resetTherm *****************
  3885 ;; Defined at:
  3886 ;;		line 72 in file "adc.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;		None
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;		None
  3891 ;; Return value:  Size  Location     Type
  3892 ;;                  1    wreg      void 
  3893 ;; Registers used:
  3894 ;;		wreg, status,2
  3895 ;; Tracked objects:
  3896 ;;		On entry : 0/0
  3897 ;;		On exit  : 0/0
  3898 ;;		Unchanged: 0/0
  3899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3900 ;;      Params:         0       0       0       0       0       0       0
  3901 ;;      Locals:         0       0       0       0       0       0       0
  3902 ;;      Temps:          0       0       0       0       0       0       0
  3903 ;;      Totals:         0       0       0       0       0       0       0
  3904 ;;Total ram usage:        0 bytes
  3905 ;; Hardware stack levels used:    1
  3906 ;; Hardware stack levels required when called:    4
  3907 ;; This function calls:
  3908 ;;		Nothing
  3909 ;; This function is called by:
  3910 ;;		_touchTherm
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           	psect	text21
  3915  0024FE                     __ptext21:
  3916                           	callstack 0
  3917  0024FE                     _resetTherm:
  3918                           	callstack 0
  3919  0024FE  FFFF               	dw	65535	; assembler added errata NOP
  3920  002500                     
  3921                           ;adc.c: 73:     therm_rel = 0;
  3922  002500  0E00               	movlw	0
  3923  002502  6E5B               	movwf	_therm_rel^0,c	;volatile
  3924  002504  0012               	return		;funcret
  3925  002506  FFFF               	dw	65535	; errata NOP
  3926  002508                     __end_of_resetTherm:
  3927                           	callstack 0
  3928                           
  3929 ;; *************** function _touchObject *****************
  3930 ;; Defined at:
  3931 ;;		line 497 in file "motors.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;		None
  3934 ;; Auto vars:     Size  Location     Type
  3935 ;;		None
  3936 ;; Return value:  Size  Location     Type
  3937 ;;                  1    wreg      unsigned char 
  3938 ;; Registers used:
  3939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3940 ;; Tracked objects:
  3941 ;;		On entry : 0/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3945 ;;      Params:         0       0       0       0       0       0       0
  3946 ;;      Locals:         0       0       0       0       0       0       0
  3947 ;;      Temps:          0       0       0       0       0       0       0
  3948 ;;      Totals:         0       0       0       0       0       0       0
  3949 ;;Total ram usage:        0 bytes
  3950 ;; Hardware stack levels used:    1
  3951 ;; Hardware stack levels required when called:    5
  3952 ;; This function calls:
  3953 ;;		_resetStep
  3954 ;;		_resetTouch
  3955 ;;		_returnTouch
  3956 ;;		_startADC
  3957 ;;		_stepMade
  3958 ;;		_stopADC
  3959 ;; This function is called by:
  3960 ;;		_executeData
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           	psect	text22
  3965  001DB0                     __ptext22:
  3966                           	callstack 0
  3967  001DB0                     _touchObject:
  3968                           	callstack 0
  3969  001DB0  FFFF               	dw	65535	; assembler added errata NOP
  3970  001DB2                     
  3971                           ;motors.c: 503:     motCounter[2][1] = 1;
  3972  001DB2  0E00               	movlw	0
  3973  001DB4  6E69               	movwf	(_motCounter+11)^0,c
  3974  001DB6  0E01               	movlw	1
  3975  001DB8  6E68               	movwf	(_motCounter+10)^0,c
  3976  001DBA                     
  3977                           ;motors.c: 506:     T2CONbits.TMR2ON = 1;
  3978  001DBA  84CA               	bsf	202,2,c	;volatile
  3979                           
  3980                           ;motors.c: 508:     tm0Error = 0;
  3981  001DBC  0E00               	movlw	0
  3982  001DBE  6E51               	movwf	(_tm0Error+1)^0,c
  3983  001DC0  0E00               	movlw	0
  3984  001DC2  6E50               	movwf	_tm0Error^0,c
  3985                           
  3986                           ;motors.c: 509:     tm0Limit = 250;
  3987  001DC4  0EFA               	movlw	250
  3988  001DC6  6E5D               	movwf	_tm0Limit^0,c
  3989  001DC8                     
  3990                           ;motors.c: 510:     T0CONbits.TMR0ON = 1;
  3991  001DC8  8ED5               	bsf	213,7,c	;volatile
  3992  001DCA                     
  3993                           ;motors.c: 513:     startADC();
  3994  001DCA  EC84  F012         	call	_startADC	;wreg free
  3995                           
  3996                           ;motors.c: 516:     while(!returnTouch() || PORTDbits.RD7){
  3997  001DCE  EF2C  F00F         	goto	l4012
  3998  001DD2                     l3998:
  3999  001DD2  FFFF               	dw	65535	; assembler added errata NOP
  4000                           
  4001                           ;motors.c: 519:         if(tm0Error){
  4002  001DD4  5050               	movf	_tm0Error^0,w,c
  4003  001DD6  1051               	iorwf	(_tm0Error+1)^0,w,c
  4004  001DD8  B4D8               	btfsc	status,2,c
  4005  001DDA  EFF1  F00E         	goto	u3301
  4006  001DDE  EFF4  F00E         	goto	u3300
  4007  001DE2                     u3301:
  4008  001DE2  FFFF               	dw	65535	; assembler added errata NOP
  4009  001DE4  EFFB  F00E         	goto	l4002
  4010  001DE8                     u3300:
  4011  001DE8  FFFF               	dw	65535	; assembler added errata NOP
  4012  001DEA                     
  4013                           ;motors.c: 524:             tm0Error = 6;
  4014  001DEA  0E00               	movlw	0
  4015  001DEC  6E51               	movwf	(_tm0Error+1)^0,c
  4016  001DEE  0E06               	movlw	6
  4017  001DF0  6E50               	movwf	_tm0Error^0,c
  4018                           
  4019                           ;motors.c: 525:             break;
  4020  001DF2  EF42  F00F         	goto	l4016
  4021  001DF6                     l4002:
  4022  001DF6  FFFF               	dw	65535	; assembler added errata NOP
  4023                           
  4024                           ;motors.c: 533:             motCounter[2][0] += motCounter[2][1];
  4025  001DF8  EE20  F068         	lfsr	2,_motCounter+10
  4026  001DFC  50DE               	movf	postinc2,w,c
  4027  001DFE  2666               	addwf	(_motCounter+8)^0,f,c
  4028  001E00  50DD               	movf	postdec2,w,c
  4029  001E02  2267               	addwfc	(_motCounter+9)^0,f,c
  4030  001E04                     
  4031                           ;motors.c: 534:             if(motCounter[2][0] > 3){
  4032  001E04  BE67               	btfsc	(_motCounter+9)^0,7,c
  4033  001E06  EF0E  F00F         	goto	u3311
  4034  001E0A  5067               	movf	(_motCounter+9)^0,w,c
  4035  001E0C  E10A               	bnz	u3310
  4036  001E0E  0E04               	movlw	4
  4037  001E10  5C66               	subwf	(_motCounter+8)^0,w,c
  4038  001E12  A0D8               	btfss	status,0,c
  4039  001E14  EF0E  F00F         	goto	u3311
  4040  001E18  EF11  F00F         	goto	u3310
  4041  001E1C                     u3311:
  4042  001E1C  FFFF               	dw	65535	; assembler added errata NOP
  4043  001E1E  EF16  F00F         	goto	l4008
  4044  001E22                     u3310:
  4045  001E22  FFFF               	dw	65535	; assembler added errata NOP
  4046  001E24                     
  4047                           ;motors.c: 535:                 motCounter[2][0] = 0;
  4048  001E24  0E00               	movlw	0
  4049  001E26  6E67               	movwf	(_motCounter+9)^0,c
  4050  001E28  0E00               	movlw	0
  4051  001E2A  6E66               	movwf	(_motCounter+8)^0,c
  4052  001E2C                     l4008:
  4053  001E2C  FFFF               	dw	65535	; assembler added errata NOP
  4054                           
  4055                           ;motors.c: 538:             LATC = stepMot3[motCounter[2][0]];
  4056  001E2E  0E84               	movlw	low _stepMot3
  4057  001E30  2466               	addwf	(_motCounter+8)^0,w,c
  4058  001E32  6ED9               	movwf	fsr2l,c
  4059  001E34  0E00               	movlw	high _stepMot3
  4060  001E36  2067               	addwfc	(_motCounter+9)^0,w,c
  4061  001E38  6EDA               	movwf	fsr2h,c
  4062  001E3A  50DF               	movf	indf2,w,c
  4063  001E3C  6E8B               	movwf	139,c	;volatile
  4064  001E3E                     l4010:
  4065  001E3E  FFFF               	dw	65535	; assembler added errata NOP
  4066  001E40  EC1A  F012         	call	_stepMade	;wreg free
  4067  001E44  5012               	movf	?_stepMade^0,w,c
  4068  001E46  1013               	iorwf	(?_stepMade+1)^0,w,c
  4069  001E48  B4D8               	btfsc	status,2,c
  4070  001E4A  EF29  F00F         	goto	u3321
  4071  001E4E  EF2C  F00F         	goto	u3320
  4072  001E52                     u3321:
  4073  001E52  FFFF               	dw	65535	; assembler added errata NOP
  4074  001E54  EF1F  F00F         	goto	l4010
  4075  001E58                     u3320:
  4076  001E58                     l4012:
  4077  001E58  FFFF               	dw	65535	; assembler added errata NOP
  4078                           
  4079                           ;motors.c: 516:     while(!returnTouch() || PORTDbits.RD7){
  4080  001E5A  EC6E  F012         	call	_returnTouch	;wreg free
  4081  001E5E  5012               	movf	?_returnTouch^0,w,c
  4082  001E60  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4083  001E62  B4D8               	btfsc	status,2,c
  4084  001E64  EF36  F00F         	goto	u3331
  4085  001E68  EF39  F00F         	goto	u3330
  4086  001E6C                     u3331:
  4087  001E6C  FFFF               	dw	65535	; assembler added errata NOP
  4088  001E6E  EFE9  F00E         	goto	l3998
  4089  001E72                     u3330:
  4090  001E72  FFFF               	dw	65535	; assembler added errata NOP
  4091  001E74  BE83               	btfsc	131,7,c	;volatile
  4092  001E76  EF3F  F00F         	goto	u3341
  4093  001E7A  EF42  F00F         	goto	u3340
  4094  001E7E                     u3341:
  4095  001E7E  FFFF               	dw	65535	; assembler added errata NOP
  4096  001E80  EFE9  F00E         	goto	l3998
  4097  001E84                     u3340:
  4098  001E84                     l4016:
  4099  001E84  FFFF               	dw	65535	; assembler added errata NOP
  4100                           
  4101                           ;motors.c: 555:     stopADC();
  4102  001E86  ECAE  F012         	call	_stopADC	;wreg free
  4103  001E8A                     
  4104                           ;motors.c: 558:     resetTouch();
  4105  001E8A  EC89  F012         	call	_resetTouch	;wreg free
  4106  001E8E                     
  4107                           ;motors.c: 561:     T0CONbits.TMR0ON = 0;
  4108  001E8E  9ED5               	bcf	213,7,c	;volatile
  4109  001E90                     
  4110                           ;motors.c: 562:     T2CONbits.TMR2ON = 0;
  4111  001E90  94CA               	bcf	202,2,c	;volatile
  4112                           
  4113                           ;motors.c: 564:     TMR0 = 0;
  4114  001E92  0E00               	movlw	0
  4115  001E94  6ED7               	movwf	215,c	;volatile
  4116  001E96  0E00               	movlw	0
  4117  001E98  6ED6               	movwf	214,c	;volatile
  4118                           
  4119                           ;motors.c: 565:     TMR2 = 0;
  4120  001E9A  0E00               	movlw	0
  4121  001E9C  6ECC               	movwf	204,c	;volatile
  4122  001E9E                     
  4123                           ;motors.c: 568:     resetStep();
  4124  001E9E  EC8E  F012         	call	_resetStep	;wreg free
  4125  001EA2                     
  4126                           ;motors.c: 571:     if(PORTDbits.RD7){
  4127  001EA2  AE83               	btfss	131,7,c	;volatile
  4128  001EA4  EF56  F00F         	goto	u3351
  4129  001EA8  EF59  F00F         	goto	u3350
  4130  001EAC                     u3351:
  4131  001EAC  FFFF               	dw	65535	; assembler added errata NOP
  4132  001EAE  EF5E  F00F         	goto	l201
  4133  001EB2                     u3350:
  4134  001EB2  FFFF               	dw	65535	; assembler added errata NOP
  4135  001EB4                     
  4136                           ;motors.c: 572:         tm0Error = 2;
  4137  001EB4  0E00               	movlw	0
  4138  001EB6  6E51               	movwf	(_tm0Error+1)^0,c
  4139  001EB8  0E02               	movlw	2
  4140  001EBA  6E50               	movwf	_tm0Error^0,c
  4141  001EBC                     l201:
  4142  001EBC  FFFF               	dw	65535	; assembler added errata NOP
  4143                           
  4144                           ;motors.c: 575:     return(tm0Error);
  4145  001EBE  5050               	movf	_tm0Error^0,w,c
  4146  001EC0  0012               	return		;funcret
  4147  001EC2  FFFF               	dw	65535	; errata NOP
  4148  001EC4                     __end_of_touchObject:
  4149                           	callstack 0
  4150                           
  4151 ;; *************** function _stopADC *****************
  4152 ;; Defined at:
  4153 ;;		line 44 in file "adc.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;		None
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;		None
  4158 ;; Return value:  Size  Location     Type
  4159 ;;                  1    wreg      void 
  4160 ;; Registers used:
  4161 ;;		None
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4167 ;;      Params:         0       0       0       0       0       0       0
  4168 ;;      Locals:         0       0       0       0       0       0       0
  4169 ;;      Temps:          0       0       0       0       0       0       0
  4170 ;;      Totals:         0       0       0       0       0       0       0
  4171 ;;Total ram usage:        0 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    4
  4174 ;; This function calls:
  4175 ;;		Nothing
  4176 ;; This function is called by:
  4177 ;;		_touchObject
  4178 ;;		_touchTherm
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           	psect	text23
  4183  00255C                     __ptext23:
  4184                           	callstack 0
  4185  00255C                     _stopADC:
  4186                           	callstack 0
  4187  00255C  FFFF               	dw	65535	; assembler added errata NOP
  4188  00255E                     
  4189                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4190  00255E  90C2               	bcf	194,0,c	;volatile
  4191  002560  0012               	return		;funcret
  4192  002562  FFFF               	dw	65535	; errata NOP
  4193  002564                     __end_of_stopADC:
  4194                           	callstack 0
  4195                           
  4196 ;; *************** function _startADC *****************
  4197 ;; Defined at:
  4198 ;;		line 36 in file "adc.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;		None
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;		None
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  1    wreg      void 
  4205 ;; Registers used:
  4206 ;;		None
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4212 ;;      Params:         0       0       0       0       0       0       0
  4213 ;;      Locals:         0       0       0       0       0       0       0
  4214 ;;      Temps:          0       0       0       0       0       0       0
  4215 ;;      Totals:         0       0       0       0       0       0       0
  4216 ;;Total ram usage:        0 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; Hardware stack levels required when called:    4
  4219 ;; This function calls:
  4220 ;;		Nothing
  4221 ;; This function is called by:
  4222 ;;		_touchObject
  4223 ;;		_touchTherm
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           	psect	text24
  4228  002508                     __ptext24:
  4229                           	callstack 0
  4230  002508                     _startADC:
  4231                           	callstack 0
  4232  002508  FFFF               	dw	65535	; assembler added errata NOP
  4233  00250A                     
  4234                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4235  00250A  80C2               	bsf	194,0,c	;volatile
  4236                           
  4237                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4238  00250C  84C2               	bsf	194,2,c	;volatile
  4239  00250E  0012               	return		;funcret
  4240  002510  FFFF               	dw	65535	; errata NOP
  4241  002512                     __end_of_startADC:
  4242                           	callstack 0
  4243                           
  4244 ;; *************** function _returnTouch *****************
  4245 ;; Defined at:
  4246 ;;		line 51 in file "adc.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;		None
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;		None
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  2   17[COMRAM] unsigned int 
  4253 ;; Registers used:
  4254 ;;		None
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4260 ;;      Params:         2       0       0       0       0       0       0
  4261 ;;      Locals:         0       0       0       0       0       0       0
  4262 ;;      Temps:          0       0       0       0       0       0       0
  4263 ;;      Totals:         2       0       0       0       0       0       0
  4264 ;;Total ram usage:        2 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    4
  4267 ;; This function calls:
  4268 ;;		Nothing
  4269 ;; This function is called by:
  4270 ;;		_touchObject
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           	psect	text25
  4275  0024DC                     __ptext25:
  4276                           	callstack 0
  4277  0024DC                     _returnTouch:
  4278                           	callstack 0
  4279  0024DC  FFFF               	dw	65535	; assembler added errata NOP
  4280  0024DE                     
  4281                           ;adc.c: 52:     return touch_rel;
  4282  0024DE  C05C  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4283  0024E2  6A13               	clrf	(?_returnTouch+1)^0,c
  4284  0024E4  0012               	return		;funcret
  4285  0024E6  FFFF               	dw	65535	; errata NOP
  4286  0024E8                     __end_of_returnTouch:
  4287                           	callstack 0
  4288                           
  4289 ;; *************** function _resetTouch *****************
  4290 ;; Defined at:
  4291 ;;		line 65 in file "adc.c"
  4292 ;; Parameters:    Size  Location     Type
  4293 ;;		None
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;		None
  4296 ;; Return value:  Size  Location     Type
  4297 ;;                  1    wreg      void 
  4298 ;; Registers used:
  4299 ;;		wreg, status,2
  4300 ;; Tracked objects:
  4301 ;;		On entry : 0/0
  4302 ;;		On exit  : 0/0
  4303 ;;		Unchanged: 0/0
  4304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4305 ;;      Params:         0       0       0       0       0       0       0
  4306 ;;      Locals:         0       0       0       0       0       0       0
  4307 ;;      Temps:          0       0       0       0       0       0       0
  4308 ;;      Totals:         0       0       0       0       0       0       0
  4309 ;;Total ram usage:        0 bytes
  4310 ;; Hardware stack levels used:    1
  4311 ;; Hardware stack levels required when called:    4
  4312 ;; This function calls:
  4313 ;;		Nothing
  4314 ;; This function is called by:
  4315 ;;		_touchObject
  4316 ;; This function uses a non-reentrant model
  4317 ;;
  4318                           
  4319                           	psect	text26
  4320  002512                     __ptext26:
  4321                           	callstack 0
  4322  002512                     _resetTouch:
  4323                           	callstack 0
  4324  002512  FFFF               	dw	65535	; assembler added errata NOP
  4325  002514                     
  4326                           ;adc.c: 66:     touch_rel = 0;
  4327  002514  0E00               	movlw	0
  4328  002516  6E5C               	movwf	_touch_rel^0,c	;volatile
  4329  002518  0012               	return		;funcret
  4330  00251A  FFFF               	dw	65535	; errata NOP
  4331  00251C                     __end_of_resetTouch:
  4332                           	callstack 0
  4333                           
  4334 ;; *************** function _rotateObj *****************
  4335 ;; Defined at:
  4336 ;;		line 746 in file "motors.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;  rotAngle        1    wreg     unsigned char 
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;  rotAngle        1    3[BANK0 ] unsigned char 
  4341 ;;  i               2    6[BANK0 ] unsigned int 
  4342 ;;  totStep         2    4[BANK0 ] int 
  4343 ;; Return value:  Size  Location     Type
  4344 ;;                  1    wreg      void 
  4345 ;; Registers used:
  4346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4352 ;;      Params:         0       0       0       0       0       0       0
  4353 ;;      Locals:         0       5       0       0       0       0       0
  4354 ;;      Temps:          0       3       0       0       0       0       0
  4355 ;;      Totals:         0       8       0       0       0       0       0
  4356 ;;Total ram usage:        8 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    5
  4359 ;; This function calls:
  4360 ;;		___fldiv
  4361 ;;		___fltol
  4362 ;;		___xxtofl
  4363 ;;		_stepMade
  4364 ;; This function is called by:
  4365 ;;		_executeData
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           	psect	text27
  4370  001FBC                     __ptext27:
  4371                           	callstack 0
  4372  001FBC                     _rotateObj:
  4373                           	callstack 0
  4374  001FBC  FFFF               	dw	65535	; assembler added errata NOP
  4375                           
  4376                           ;incstack = 0
  4377                           ;rotateObj@rotAngle stored from wreg
  4378  001FBE  0100               	movlb	0	; () banked
  4379  001FC0  6FF0               	movwf	rotateObj@rotAngle& (0+255),b
  4380  001FC2                     
  4381                           ;motors.c: 747:     static const float stepAngle = 0.08789;;motors.c: 748:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 749:     unsigned int i;;
      +                          motors.c: 750:     int totStep = rotAngle/stepAngle;
  4382  001FC2  0EAC               	movlw	172
  4383  001FC4  6E24               	movwf	___fldiv@a^0,c
  4384  001FC6  0EFF               	movlw	255
  4385  001FC8  6E25               	movwf	(___fldiv@a+1)^0,c
  4386  001FCA  0EB3               	movlw	179
  4387  001FCC  6E26               	movwf	(___fldiv@a+2)^0,c
  4388  001FCE  0E3D               	movlw	61
  4389  001FD0  6E27               	movwf	(___fldiv@a+3)^0,c
  4390  001FD2  0100               	movlb	0	; () banked
  4391  001FD4  51F0               	movf	rotateObj@rotAngle& (0+255),w,b
  4392  001FD6  6E12               	movwf	___xxtofl@val^0,c
  4393  001FD8  6A13               	clrf	(___xxtofl@val+1)^0,c
  4394  001FDA  6A14               	clrf	(___xxtofl@val+2)^0,c
  4395  001FDC  6A15               	clrf	(___xxtofl@val+3)^0,c
  4396  001FDE  0E01               	movlw	1
  4397  001FE0  EC4A  F009         	call	___xxtofl
  4398  001FE4  C012  F020         	movff	?___xxtofl,___fldiv@b
  4399  001FE8  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4400  001FEC  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4401  001FF0  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4402  001FF4  EC09  F003         	call	___fldiv	;wreg free
  4403  001FF8  C020  F039         	movff	?___fldiv,___fltol@f1
  4404  001FFC  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4405  002000  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4406  002004  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4407  002008  EC97  F00C         	call	___fltol	;wreg free
  4408  00200C  C039  F0F1         	movff	?___fltol,rotateObj@totStep
  4409  002010  C03A  F0F2         	movff	?___fltol+1,rotateObj@totStep+1
  4410  002014                     
  4411                           ;motors.c: 753:     for(i = 0; i < totStep; i++){
  4412  002014  0E00               	movlw	0
  4413  002016  0100               	movlb	0	; () banked
  4414  002018  6FF4               	movwf	(rotateObj@i+1)& (0+255),b
  4415  00201A  0E00               	movlw	0
  4416  00201C  6FF3               	movwf	rotateObj@i& (0+255),b
  4417  00201E  EF3C  F010         	goto	l4118
  4418  002022                     l4106:
  4419  002022  FFFF               	dw	65535	; assembler added errata NOP
  4420                           
  4421                           ; BSR set to: 0
  4422                           ;motors.c: 755:         LATD &= 0xC3;
  4423  002024  0EC3               	movlw	195
  4424  002026  168C               	andwf	140,f,c	;volatile
  4425  002028                     
  4426                           ; BSR set to: 0
  4427                           ;motors.c: 757:         LATD |= rotSequence[i%4] << 2;
  4428  002028  0E03               	movlw	3
  4429  00202A  15F3               	andwf	rotateObj@i& (0+255),w,b
  4430  00202C  6FED               	movwf	??_rotateObj& (0+255),b
  4431  00202E  0E00               	movlw	0
  4432  002030  15F4               	andwf	(rotateObj@i+1)& (0+255),w,b
  4433  002032  6FEE               	movwf	(??_rotateObj+1)& (0+255),b
  4434  002034  0E80               	movlw	low rotateObj@rotSequence
  4435  002036  25ED               	addwf	??_rotateObj& (0+255),w,b
  4436  002038  6ED9               	movwf	fsr2l,c
  4437  00203A  0E00               	movlw	high rotateObj@rotSequence
  4438  00203C  21EE               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4439  00203E  6EDA               	movwf	fsr2h,c
  4440  002040  50DF               	movf	indf2,w,c
  4441  002042  6FEF               	movwf	(??_rotateObj+2)& (0+255),b
  4442  002044  90D8               	bcf	status,0,c
  4443  002046  37EF               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4444  002048  90D8               	bcf	status,0,c
  4445  00204A  35EF               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4446  00204C  128C               	iorwf	140,f,c	;volatile
  4447  00204E                     
  4448                           ; BSR set to: 0
  4449                           ;motors.c: 760:         T2CONbits.TMR2ON = 1;
  4450  00204E  84CA               	bsf	202,2,c	;volatile
  4451  002050                     l4112:
  4452  002050  FFFF               	dw	65535	; assembler added errata NOP
  4453  002052  EC1A  F012         	call	_stepMade	;wreg free
  4454  002056  5012               	movf	?_stepMade^0,w,c
  4455  002058  1013               	iorwf	(?_stepMade+1)^0,w,c
  4456  00205A  B4D8               	btfsc	status,2,c
  4457  00205C  EF32  F010         	goto	u3461
  4458  002060  EF35  F010         	goto	u3460
  4459  002064                     u3461:
  4460  002064  FFFF               	dw	65535	; assembler added errata NOP
  4461  002066  EF28  F010         	goto	l4112
  4462  00206A                     u3460:
  4463  00206A  FFFF               	dw	65535	; assembler added errata NOP
  4464  00206C                     
  4465                           ;motors.c: 762:         T2CONbits.TMR2ON = 1;
  4466  00206C  84CA               	bsf	202,2,c	;volatile
  4467  00206E                     
  4468                           ;motors.c: 763:         TMR2 = 0;
  4469  00206E  0E00               	movlw	0
  4470  002070  6ECC               	movwf	204,c	;volatile
  4471  002072                     
  4472                           ;motors.c: 764:     }
  4473  002072  0100               	movlb	0	; () banked
  4474  002074  4BF3               	infsnz	rotateObj@i& (0+255),f,b
  4475  002076  2BF4               	incf	(rotateObj@i+1)& (0+255),f,b
  4476  002078                     l4118:
  4477  002078  FFFF               	dw	65535	; assembler added errata NOP
  4478                           
  4479                           ; BSR set to: 0
  4480  00207A  51F1               	movf	rotateObj@totStep& (0+255),w,b
  4481  00207C  5DF3               	subwf	rotateObj@i& (0+255),w,b
  4482  00207E  51F2               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4483  002080  59F4               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4484  002082  A0D8               	btfss	status,0,c
  4485  002084  EF46  F010         	goto	u3471
  4486  002088  EF49  F010         	goto	u3470
  4487  00208C                     u3471:
  4488  00208C  FFFF               	dw	65535	; assembler added errata NOP
  4489  00208E  EF11  F010         	goto	l4106
  4490  002092                     u3470:
  4491  002092  FFFF               	dw	65535	; assembler added errata NOP
  4492  002094                     
  4493                           ; BSR set to: 0
  4494  002094  0012               	return		;funcret
  4495  002096  FFFF               	dw	65535	; errata NOP
  4496  002098                     __end_of_rotateObj:
  4497                           	callstack 0
  4498                           
  4499 ;; *************** function ___xxtofl *****************
  4500 ;; Defined at:
  4501 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;  sign            1    wreg     unsigned char 
  4504 ;;  val             4   17[COMRAM] long 
  4505 ;; Auto vars:     Size  Location     Type
  4506 ;;  sign            1   25[COMRAM] unsigned char 
  4507 ;;  arg             4   27[COMRAM] unsigned long 
  4508 ;;  exp             1   26[COMRAM] unsigned char 
  4509 ;; Return value:  Size  Location     Type
  4510 ;;                  4   17[COMRAM] unsigned char 
  4511 ;; Registers used:
  4512 ;;		wreg, status,2, status,0
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4518 ;;      Params:         4       0       0       0       0       0       0
  4519 ;;      Locals:         6       0       0       0       0       0       0
  4520 ;;      Temps:          4       0       0       0       0       0       0
  4521 ;;      Totals:        14       0       0       0       0       0       0
  4522 ;;Total ram usage:       14 bytes
  4523 ;; Hardware stack levels used:    1
  4524 ;; Hardware stack levels required when called:    4
  4525 ;; This function calls:
  4526 ;;		Nothing
  4527 ;; This function is called by:
  4528 ;;		_rotateObj
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           	psect	text28
  4533  001294                     __ptext28:
  4534                           	callstack 0
  4535  001294                     ___xxtofl:
  4536                           	callstack 0
  4537  001294  FFFF               	dw	65535	; assembler added errata NOP
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;incstack = 0
  4541                           ;___xxtofl@sign stored from wreg
  4542  001296  6E1A               	movwf	___xxtofl@sign^0,c
  4543  001298  501A               	movf	___xxtofl@sign^0,w,c
  4544  00129A  B4D8               	btfsc	status,2,c
  4545  00129C  EF52  F009         	goto	u2961
  4546  0012A0  EF55  F009         	goto	u2960
  4547  0012A4                     u2961:
  4548  0012A4  FFFF               	dw	65535	; assembler added errata NOP
  4549  0012A6  EF7A  F009         	goto	l1280
  4550  0012AA                     u2960:
  4551  0012AA  FFFF               	dw	65535	; assembler added errata NOP
  4552  0012AC  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4553  0012AE  EF5E  F009         	goto	u2970
  4554  0012B2  EF5B  F009         	goto	u2971
  4555  0012B6                     u2971:
  4556  0012B6  FFFF               	dw	65535	; assembler added errata NOP
  4557  0012B8  EF7A  F009         	goto	l1280
  4558  0012BC                     u2970:
  4559  0012BC  FFFF               	dw	65535	; assembler added errata NOP
  4560  0012BE  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4561  0012C2  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4562  0012C6  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4563  0012CA  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4564  0012CE  1E16               	comf	??___xxtofl^0,f,c
  4565  0012D0  1E17               	comf	(??___xxtofl+1)^0,f,c
  4566  0012D2  1E18               	comf	(??___xxtofl+2)^0,f,c
  4567  0012D4  1E19               	comf	(??___xxtofl+3)^0,f,c
  4568  0012D6  2A16               	incf	??___xxtofl^0,f,c
  4569  0012D8  0E00               	movlw	0
  4570  0012DA  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4571  0012DC  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4572  0012DE  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4573  0012E0  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4574  0012E4  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4575  0012E8  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4576  0012EC  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4577  0012F0  EF83  F009         	goto	l3844
  4578  0012F4                     l1280:
  4579  0012F4  FFFF               	dw	65535	; assembler added errata NOP
  4580  0012F6  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4581  0012FA  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4582  0012FE  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4583  001302  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4584  001306                     l3844:
  4585  001306  FFFF               	dw	65535	; assembler added errata NOP
  4586  001308  5012               	movf	___xxtofl@val^0,w,c
  4587  00130A  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4588  00130C  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4589  00130E  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4590  001310  A4D8               	btfss	status,2,c
  4591  001312  EF8D  F009         	goto	u2981
  4592  001316  EF90  F009         	goto	u2980
  4593  00131A                     u2981:
  4594  00131A  FFFF               	dw	65535	; assembler added errata NOP
  4595  00131C  EF9B  F009         	goto	l3850
  4596  001320                     u2980:
  4597  001320  FFFF               	dw	65535	; assembler added errata NOP
  4598  001322  0E00               	movlw	0
  4599  001324  6E12               	movwf	?___xxtofl^0,c
  4600  001326  0E00               	movlw	0
  4601  001328  6E13               	movwf	(?___xxtofl+1)^0,c
  4602  00132A  0E00               	movlw	0
  4603  00132C  6E14               	movwf	(?___xxtofl+2)^0,c
  4604  00132E  0E00               	movlw	0
  4605  001330  6E15               	movwf	(?___xxtofl+3)^0,c
  4606  001332  EF43  F00A         	goto	l1283
  4607  001336                     l3850:
  4608  001336  FFFF               	dw	65535	; assembler added errata NOP
  4609  001338  0E96               	movlw	150
  4610  00133A  6E1B               	movwf	___xxtofl@exp^0,c
  4611  00133C  EFA7  F009         	goto	l3854
  4612  001340                     l3852:
  4613  001340  FFFF               	dw	65535	; assembler added errata NOP
  4614  001342  2A1B               	incf	___xxtofl@exp^0,f,c
  4615  001344  90D8               	bcf	status,0,c
  4616  001346  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4617  001348  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4618  00134A  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4619  00134C  321C               	rrcf	___xxtofl@arg^0,f,c
  4620  00134E                     l3854:
  4621  00134E  FFFF               	dw	65535	; assembler added errata NOP
  4622  001350  0E00               	movlw	0
  4623  001352  141C               	andwf	___xxtofl@arg^0,w,c
  4624  001354  6E16               	movwf	??___xxtofl^0,c
  4625  001356  0E00               	movlw	0
  4626  001358  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4627  00135A  6E17               	movwf	(??___xxtofl+1)^0,c
  4628  00135C  0E00               	movlw	0
  4629  00135E  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4630  001360  6E18               	movwf	(??___xxtofl+2)^0,c
  4631  001362  0EFE               	movlw	254
  4632  001364  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4633  001366  6E19               	movwf	(??___xxtofl+3)^0,c
  4634  001368  5016               	movf	??___xxtofl^0,w,c
  4635  00136A  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4636  00136C  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4637  00136E  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4638  001370  A4D8               	btfss	status,2,c
  4639  001372  EFBD  F009         	goto	u2991
  4640  001376  EFC0  F009         	goto	u2990
  4641  00137A                     u2991:
  4642  00137A  FFFF               	dw	65535	; assembler added errata NOP
  4643  00137C  EFA0  F009         	goto	l3852
  4644  001380                     u2990:
  4645  001380  FFFF               	dw	65535	; assembler added errata NOP
  4646  001382  EFD0  F009         	goto	l1287
  4647  001386                     l3856:
  4648  001386  FFFF               	dw	65535	; assembler added errata NOP
  4649  001388  2A1B               	incf	___xxtofl@exp^0,f,c
  4650  00138A  0E01               	movlw	1
  4651  00138C  261C               	addwf	___xxtofl@arg^0,f,c
  4652  00138E  0E00               	movlw	0
  4653  001390  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4654  001392  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4655  001394  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4656  001396  90D8               	bcf	status,0,c
  4657  001398  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4658  00139A  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4659  00139C  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4660  00139E  321C               	rrcf	___xxtofl@arg^0,f,c
  4661  0013A0                     l1287:
  4662  0013A0  FFFF               	dw	65535	; assembler added errata NOP
  4663  0013A2  0E00               	movlw	0
  4664  0013A4  141C               	andwf	___xxtofl@arg^0,w,c
  4665  0013A6  6E16               	movwf	??___xxtofl^0,c
  4666  0013A8  0E00               	movlw	0
  4667  0013AA  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4668  0013AC  6E17               	movwf	(??___xxtofl+1)^0,c
  4669  0013AE  0E00               	movlw	0
  4670  0013B0  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4671  0013B2  6E18               	movwf	(??___xxtofl+2)^0,c
  4672  0013B4  0EFF               	movlw	255
  4673  0013B6  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4674  0013B8  6E19               	movwf	(??___xxtofl+3)^0,c
  4675  0013BA  5016               	movf	??___xxtofl^0,w,c
  4676  0013BC  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4677  0013BE  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4678  0013C0  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4679  0013C2  A4D8               	btfss	status,2,c
  4680  0013C4  EFE6  F009         	goto	u3001
  4681  0013C8  EFE9  F009         	goto	u3000
  4682  0013CC                     u3001:
  4683  0013CC  FFFF               	dw	65535	; assembler added errata NOP
  4684  0013CE  EFC3  F009         	goto	l3856
  4685  0013D2                     u3000:
  4686  0013D2  FFFF               	dw	65535	; assembler added errata NOP
  4687  0013D4  EFF3  F009         	goto	l3864
  4688  0013D8                     l3862:
  4689  0013D8  FFFF               	dw	65535	; assembler added errata NOP
  4690  0013DA  061B               	decf	___xxtofl@exp^0,f,c
  4691  0013DC  90D8               	bcf	status,0,c
  4692  0013DE  361C               	rlcf	___xxtofl@arg^0,f,c
  4693  0013E0  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4694  0013E2  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4695  0013E4  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4696  0013E6                     l3864:
  4697  0013E6  FFFF               	dw	65535	; assembler added errata NOP
  4698  0013E8  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4699  0013EA  EFF9  F009         	goto	u3011
  4700  0013EE  EFFC  F009         	goto	u3010
  4701  0013F2                     u3011:
  4702  0013F2  FFFF               	dw	65535	; assembler added errata NOP
  4703  0013F4  EF06  F00A         	goto	l1294
  4704  0013F8                     u3010:
  4705  0013F8  FFFF               	dw	65535	; assembler added errata NOP
  4706  0013FA  0E02               	movlw	2
  4707  0013FC  601B               	cpfslt	___xxtofl@exp^0,c
  4708  0013FE  EF03  F00A         	goto	u3021
  4709  001402  EF06  F00A         	goto	u3020
  4710  001406                     u3021:
  4711  001406  FFFF               	dw	65535	; assembler added errata NOP
  4712  001408  EFEC  F009         	goto	l3862
  4713  00140C                     u3020:
  4714  00140C                     l1294:
  4715  00140C  FFFF               	dw	65535	; assembler added errata NOP
  4716  00140E  B01B               	btfsc	___xxtofl@exp^0,0,c
  4717  001410  EF0C  F00A         	goto	u3031
  4718  001414  EF0F  F00A         	goto	u3030
  4719  001418                     u3031:
  4720  001418  FFFF               	dw	65535	; assembler added errata NOP
  4721  00141A  EF11  F00A         	goto	l3870
  4722  00141E                     u3030:
  4723  00141E  FFFF               	dw	65535	; assembler added errata NOP
  4724  001420  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4725  001422                     l3870:
  4726  001422  FFFF               	dw	65535	; assembler added errata NOP
  4727  001424  90D8               	bcf	status,0,c
  4728  001426  321B               	rrcf	___xxtofl@exp^0,f,c
  4729  001428  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4730  00142C  6A17               	clrf	(??___xxtofl+1)^0,c
  4731  00142E  6A18               	clrf	(??___xxtofl+2)^0,c
  4732  001430  6A19               	clrf	(??___xxtofl+3)^0,c
  4733  001432  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4734  001436  6A18               	clrf	(??___xxtofl+2)^0,c
  4735  001438  6A17               	clrf	(??___xxtofl+1)^0,c
  4736  00143A  6A16               	clrf	??___xxtofl^0,c
  4737  00143C  5016               	movf	??___xxtofl^0,w,c
  4738  00143E  121C               	iorwf	___xxtofl@arg^0,f,c
  4739  001440  5017               	movf	(??___xxtofl+1)^0,w,c
  4740  001442  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4741  001444  5018               	movf	(??___xxtofl+2)^0,w,c
  4742  001446  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4743  001448  5019               	movf	(??___xxtofl+3)^0,w,c
  4744  00144A  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4745  00144C  501A               	movf	___xxtofl@sign^0,w,c
  4746  00144E  B4D8               	btfsc	status,2,c
  4747  001450  EF2C  F00A         	goto	u3041
  4748  001454  EF2F  F00A         	goto	u3040
  4749  001458                     u3041:
  4750  001458  FFFF               	dw	65535	; assembler added errata NOP
  4751  00145A  EF3A  F00A         	goto	l3880
  4752  00145E                     u3040:
  4753  00145E  FFFF               	dw	65535	; assembler added errata NOP
  4754  001460  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4755  001462  EF38  F00A         	goto	u3050
  4756  001466  EF35  F00A         	goto	u3051
  4757  00146A                     u3051:
  4758  00146A  FFFF               	dw	65535	; assembler added errata NOP
  4759  00146C  EF3A  F00A         	goto	l3880
  4760  001470                     u3050:
  4761  001470  FFFF               	dw	65535	; assembler added errata NOP
  4762  001472  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4763  001474                     l3880:
  4764  001474  FFFF               	dw	65535	; assembler added errata NOP
  4765  001476  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4766  00147A  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4767  00147E  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4768  001482  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  4769  001486                     l1283:
  4770  001486  FFFF               	dw	65535	; assembler added errata NOP
  4771  001488  0012               	return		;funcret
  4772  00148A  FFFF               	dw	65535	; errata NOP
  4773  00148C                     __end_of___xxtofl:
  4774                           	callstack 0
  4775                           
  4776 ;; *************** function ___fltol *****************
  4777 ;; Defined at:
  4778 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  4779 ;; Parameters:    Size  Location     Type
  4780 ;;  f1              4   56[COMRAM] unsigned char 
  4781 ;; Auto vars:     Size  Location     Type
  4782 ;;  exp1            1   65[COMRAM] unsigned char 
  4783 ;;  sign1           1   64[COMRAM] unsigned char 
  4784 ;; Return value:  Size  Location     Type
  4785 ;;                  4   56[COMRAM] long 
  4786 ;; Registers used:
  4787 ;;		wreg, status,2, status,0
  4788 ;; Tracked objects:
  4789 ;;		On entry : 0/0
  4790 ;;		On exit  : 0/0
  4791 ;;		Unchanged: 0/0
  4792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4793 ;;      Params:         4       0       0       0       0       0       0
  4794 ;;      Locals:         2       0       0       0       0       0       0
  4795 ;;      Temps:          4       0       0       0       0       0       0
  4796 ;;      Totals:        10       0       0       0       0       0       0
  4797 ;;Total ram usage:       10 bytes
  4798 ;; Hardware stack levels used:    1
  4799 ;; Hardware stack levels required when called:    4
  4800 ;; This function calls:
  4801 ;;		Nothing
  4802 ;; This function is called by:
  4803 ;;		_rotateObj
  4804 ;; This function uses a non-reentrant model
  4805 ;;
  4806                           
  4807                           	psect	text29
  4808  00192E                     __ptext29:
  4809                           	callstack 0
  4810  00192E                     ___fltol:
  4811                           	callstack 0
  4812  00192E  FFFF               	dw	65535	; assembler added errata NOP
  4813  001930  343B               	rlcf	(___fltol@f1+2)^0,w,c
  4814  001932  343C               	rlcf	(___fltol@f1+3)^0,w,c
  4815  001934  6E42               	movwf	___fltol@exp1^0,c
  4816  001936  5042               	movf	___fltol@exp1^0,w,c
  4817  001938  A4D8               	btfss	status,2,c
  4818  00193A  EFA1  F00C         	goto	u2891
  4819  00193E  EFA4  F00C         	goto	u2890
  4820  001942                     u2891:
  4821  001942  FFFF               	dw	65535	; assembler added errata NOP
  4822  001944  EFB0  F00C         	goto	l3800
  4823  001948                     u2890:
  4824  001948  FFFF               	dw	65535	; assembler added errata NOP
  4825  00194A                     l3796:
  4826  00194A  FFFF               	dw	65535	; assembler added errata NOP
  4827  00194C  0E00               	movlw	0
  4828  00194E  6E39               	movwf	?___fltol^0,c
  4829  001950  0E00               	movlw	0
  4830  001952  6E3A               	movwf	(?___fltol+1)^0,c
  4831  001954  0E00               	movlw	0
  4832  001956  6E3B               	movwf	(?___fltol+2)^0,c
  4833  001958  0E00               	movlw	0
  4834  00195A  6E3C               	movwf	(?___fltol+3)^0,c
  4835  00195C  EF2F  F00D         	goto	l922
  4836  001960                     l3800:
  4837  001960  FFFF               	dw	65535	; assembler added errata NOP
  4838  001962  C039  F03D         	movff	___fltol@f1,??___fltol
  4839  001966  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  4840  00196A  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  4841  00196E  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  4842  001972  0E20               	movlw	32
  4843  001974  EFC2  F00C         	goto	u2900
  4844  001978                     u2905:
  4845  001978  FFFF               	dw	65535	; assembler added errata NOP
  4846  00197A  90D8               	bcf	status,0,c
  4847  00197C  3240               	rrcf	(??___fltol+3)^0,f,c
  4848  00197E  323F               	rrcf	(??___fltol+2)^0,f,c
  4849  001980  323E               	rrcf	(??___fltol+1)^0,f,c
  4850  001982  323D               	rrcf	??___fltol^0,f,c
  4851  001984                     u2900:
  4852  001984  FFFF               	dw	65535	; assembler added errata NOP
  4853  001986  2EE8               	decfsz	wreg,f,c
  4854  001988  EFBC  F00C         	goto	u2905
  4855  00198C  503D               	movf	??___fltol^0,w,c
  4856  00198E  6E41               	movwf	___fltol@sign1^0,c
  4857  001990  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  4858  001992  0EFF               	movlw	255
  4859  001994  1639               	andwf	___fltol@f1^0,f,c
  4860  001996  0EFF               	movlw	255
  4861  001998  163A               	andwf	(___fltol@f1+1)^0,f,c
  4862  00199A  0EFF               	movlw	255
  4863  00199C  163B               	andwf	(___fltol@f1+2)^0,f,c
  4864  00199E  0E00               	movlw	0
  4865  0019A0  163C               	andwf	(___fltol@f1+3)^0,f,c
  4866  0019A2  0E96               	movlw	150
  4867  0019A4  5E42               	subwf	___fltol@exp1^0,f,c
  4868  0019A6  BE42               	btfsc	___fltol@exp1^0,7,c
  4869  0019A8  EFDB  F00C         	goto	u2910
  4870  0019AC  EFD8  F00C         	goto	u2911
  4871  0019B0                     u2911:
  4872  0019B0  FFFF               	dw	65535	; assembler added errata NOP
  4873  0019B2  EFF5  F00C         	goto	l3820
  4874  0019B6                     u2910:
  4875  0019B6  FFFF               	dw	65535	; assembler added errata NOP
  4876  0019B8  5042               	movf	___fltol@exp1^0,w,c
  4877  0019BA  0A80               	xorlw	128
  4878  0019BC  0F97               	addlw	151
  4879  0019BE  B0D8               	btfsc	status,0,c
  4880  0019C0  EFE4  F00C         	goto	u2921
  4881  0019C4  EFE7  F00C         	goto	u2920
  4882  0019C8                     u2921:
  4883  0019C8  FFFF               	dw	65535	; assembler added errata NOP
  4884  0019CA  EFEA  F00C         	goto	l3816
  4885  0019CE                     u2920:
  4886  0019CE  FFFF               	dw	65535	; assembler added errata NOP
  4887  0019D0  EFA5  F00C         	goto	l3796
  4888  0019D4                     l3816:
  4889  0019D4  FFFF               	dw	65535	; assembler added errata NOP
  4890  0019D6  90D8               	bcf	status,0,c
  4891  0019D8  323C               	rrcf	(___fltol@f1+3)^0,f,c
  4892  0019DA  323B               	rrcf	(___fltol@f1+2)^0,f,c
  4893  0019DC  323A               	rrcf	(___fltol@f1+1)^0,f,c
  4894  0019DE  3239               	rrcf	___fltol@f1^0,f,c
  4895  0019E0  3E42               	incfsz	___fltol@exp1^0,f,c
  4896  0019E2  EFEA  F00C         	goto	l3816
  4897  0019E6  EF13  F00D         	goto	l3830
  4898  0019EA                     l3820:
  4899  0019EA  FFFF               	dw	65535	; assembler added errata NOP
  4900  0019EC  0E1F               	movlw	31
  4901  0019EE  6442               	cpfsgt	___fltol@exp1^0,c
  4902  0019F0  EFFC  F00C         	goto	u2931
  4903  0019F4  EFFF  F00C         	goto	u2930
  4904  0019F8                     u2931:
  4905  0019F8  FFFF               	dw	65535	; assembler added errata NOP
  4906  0019FA  EF09  F00D         	goto	l3828
  4907  0019FE                     u2930:
  4908  0019FE  FFFF               	dw	65535	; assembler added errata NOP
  4909  001A00  EFA5  F00C         	goto	l3796
  4910  001A04                     l3826:
  4911  001A04  FFFF               	dw	65535	; assembler added errata NOP
  4912  001A06  90D8               	bcf	status,0,c
  4913  001A08  3639               	rlcf	___fltol@f1^0,f,c
  4914  001A0A  363A               	rlcf	(___fltol@f1+1)^0,f,c
  4915  001A0C  363B               	rlcf	(___fltol@f1+2)^0,f,c
  4916  001A0E  363C               	rlcf	(___fltol@f1+3)^0,f,c
  4917  001A10  0642               	decf	___fltol@exp1^0,f,c
  4918  001A12                     l3828:
  4919  001A12  FFFF               	dw	65535	; assembler added errata NOP
  4920  001A14  5042               	movf	___fltol@exp1^0,w,c
  4921  001A16  A4D8               	btfss	status,2,c
  4922  001A18  EF10  F00D         	goto	u2941
  4923  001A1C  EF13  F00D         	goto	u2940
  4924  001A20                     u2941:
  4925  001A20  FFFF               	dw	65535	; assembler added errata NOP
  4926  001A22  EF02  F00D         	goto	l3826
  4927  001A26                     u2940:
  4928  001A26                     l3830:
  4929  001A26  FFFF               	dw	65535	; assembler added errata NOP
  4930  001A28  5041               	movf	___fltol@sign1^0,w,c
  4931  001A2A  B4D8               	btfsc	status,2,c
  4932  001A2C  EF1A  F00D         	goto	u2951
  4933  001A30  EF1D  F00D         	goto	u2950
  4934  001A34                     u2951:
  4935  001A34  FFFF               	dw	65535	; assembler added errata NOP
  4936  001A36  EF26  F00D         	goto	l3834
  4937  001A3A                     u2950:
  4938  001A3A  FFFF               	dw	65535	; assembler added errata NOP
  4939  001A3C  1E3C               	comf	(___fltol@f1+3)^0,f,c
  4940  001A3E  1E3B               	comf	(___fltol@f1+2)^0,f,c
  4941  001A40  1E3A               	comf	(___fltol@f1+1)^0,f,c
  4942  001A42  6C39               	negf	___fltol@f1^0,c
  4943  001A44  0E00               	movlw	0
  4944  001A46  223A               	addwfc	(___fltol@f1+1)^0,f,c
  4945  001A48  223B               	addwfc	(___fltol@f1+2)^0,f,c
  4946  001A4A  223C               	addwfc	(___fltol@f1+3)^0,f,c
  4947  001A4C                     l3834:
  4948  001A4C  FFFF               	dw	65535	; assembler added errata NOP
  4949  001A4E  C039  F039         	movff	___fltol@f1,?___fltol
  4950  001A52  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  4951  001A56  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  4952  001A5A  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  4953  001A5E                     l922:
  4954  001A5E  FFFF               	dw	65535	; assembler added errata NOP
  4955  001A60  0012               	return		;funcret
  4956  001A62  FFFF               	dw	65535	; errata NOP
  4957  001A64                     __end_of___fltol:
  4958                           	callstack 0
  4959                           
  4960 ;; *************** function ___fldiv *****************
  4961 ;; Defined at:
  4962 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  4963 ;; Parameters:    Size  Location     Type
  4964 ;;  b               4   31[COMRAM] long 
  4965 ;;  a               4   35[COMRAM] long 
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;  grs             4   50[COMRAM] unsigned long 
  4968 ;;  rem             4   43[COMRAM] unsigned long 
  4969 ;;  new_exp         2   48[COMRAM] short 
  4970 ;;  aexp            1   55[COMRAM] unsigned char 
  4971 ;;  bexp            1   54[COMRAM] unsigned char 
  4972 ;;  sign            1   47[COMRAM] unsigned char 
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  4   31[COMRAM] unsigned char 
  4975 ;; Registers used:
  4976 ;;		wreg, status,2, status,0
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4982 ;;      Params:         8       0       0       0       0       0       0
  4983 ;;      Locals:        13       0       0       0       0       0       0
  4984 ;;      Temps:          4       0       0       0       0       0       0
  4985 ;;      Totals:        25       0       0       0       0       0       0
  4986 ;;Total ram usage:       25 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    4
  4989 ;; This function calls:
  4990 ;;		Nothing
  4991 ;; This function is called by:
  4992 ;;		_rotateObj
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           	psect	text30
  4997  000612                     __ptext30:
  4998                           	callstack 0
  4999  000612                     ___fldiv:
  5000                           	callstack 0
  5001  000612  FFFF               	dw	65535	; assembler added errata NOP
  5002  000614  5023               	movf	(___fldiv@b+3)^0,w,c
  5003  000616  0B80               	andlw	128
  5004  000618  6E30               	movwf	___fldiv@sign^0,c
  5005  00061A  5023               	movf	(___fldiv@b+3)^0,w,c
  5006  00061C  2423               	addwf	(___fldiv@b+3)^0,w,c
  5007  00061E  6E37               	movwf	___fldiv@bexp^0,c
  5008  000620  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5009  000622  EF15  F003         	goto	u2661
  5010  000626  EF18  F003         	goto	u2660
  5011  00062A                     u2661:
  5012  00062A  FFFF               	dw	65535	; assembler added errata NOP
  5013  00062C  EF1A  F003         	goto	l3662
  5014  000630                     u2660:
  5015  000630  FFFF               	dw	65535	; assembler added errata NOP
  5016  000632  8037               	bsf	___fldiv@bexp^0,0,c
  5017  000634                     l3662:
  5018  000634  FFFF               	dw	65535	; assembler added errata NOP
  5019  000636  5037               	movf	___fldiv@bexp^0,w,c
  5020  000638  B4D8               	btfsc	status,2,c
  5021  00063A  EF21  F003         	goto	u2671
  5022  00063E  EF24  F003         	goto	u2670
  5023  000642                     u2671:
  5024  000642  FFFF               	dw	65535	; assembler added errata NOP
  5025  000644  EF3D  F003         	goto	l3672
  5026  000648                     u2670:
  5027  000648  FFFF               	dw	65535	; assembler added errata NOP
  5028  00064A  2837               	incf	___fldiv@bexp^0,w,c
  5029  00064C  A4D8               	btfss	status,2,c
  5030  00064E  EF2B  F003         	goto	u2681
  5031  000652  EF2E  F003         	goto	u2680
  5032  000656                     u2681:
  5033  000656  FFFF               	dw	65535	; assembler added errata NOP
  5034  000658  EF37  F003         	goto	l3668
  5035  00065C                     u2680:
  5036  00065C  FFFF               	dw	65535	; assembler added errata NOP
  5037  00065E  0E00               	movlw	0
  5038  000660  6E20               	movwf	___fldiv@b^0,c
  5039  000662  0E00               	movlw	0
  5040  000664  6E21               	movwf	(___fldiv@b+1)^0,c
  5041  000666  0E00               	movlw	0
  5042  000668  6E22               	movwf	(___fldiv@b+2)^0,c
  5043  00066A  0E00               	movlw	0
  5044  00066C  6E23               	movwf	(___fldiv@b+3)^0,c
  5045  00066E                     l3668:
  5046  00066E  FFFF               	dw	65535	; assembler added errata NOP
  5047  000670  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5048  000672  0E00               	movlw	0
  5049  000674  6E23               	movwf	(___fldiv@b+3)^0,c
  5050  000676  EF46  F003         	goto	l3674
  5051  00067A                     l3672:
  5052  00067A  FFFF               	dw	65535	; assembler added errata NOP
  5053  00067C  0E00               	movlw	0
  5054  00067E  6E20               	movwf	___fldiv@b^0,c
  5055  000680  0E00               	movlw	0
  5056  000682  6E21               	movwf	(___fldiv@b+1)^0,c
  5057  000684  0E00               	movlw	0
  5058  000686  6E22               	movwf	(___fldiv@b+2)^0,c
  5059  000688  0E00               	movlw	0
  5060  00068A  6E23               	movwf	(___fldiv@b+3)^0,c
  5061  00068C                     l3674:
  5062  00068C  FFFF               	dw	65535	; assembler added errata NOP
  5063  00068E  5027               	movf	(___fldiv@a+3)^0,w,c
  5064  000690  0B80               	andlw	128
  5065  000692  1A30               	xorwf	___fldiv@sign^0,f,c
  5066  000694  5027               	movf	(___fldiv@a+3)^0,w,c
  5067  000696  2427               	addwf	(___fldiv@a+3)^0,w,c
  5068  000698  6E38               	movwf	___fldiv@aexp^0,c
  5069  00069A  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5070  00069C  EF52  F003         	goto	u2691
  5071  0006A0  EF55  F003         	goto	u2690
  5072  0006A4                     u2691:
  5073  0006A4  FFFF               	dw	65535	; assembler added errata NOP
  5074  0006A6  EF57  F003         	goto	l3682
  5075  0006AA                     u2690:
  5076  0006AA  FFFF               	dw	65535	; assembler added errata NOP
  5077  0006AC  8038               	bsf	___fldiv@aexp^0,0,c
  5078  0006AE                     l3682:
  5079  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5080  0006B0  5038               	movf	___fldiv@aexp^0,w,c
  5081  0006B2  B4D8               	btfsc	status,2,c
  5082  0006B4  EF5E  F003         	goto	u2701
  5083  0006B8  EF61  F003         	goto	u2700
  5084  0006BC                     u2701:
  5085  0006BC  FFFF               	dw	65535	; assembler added errata NOP
  5086  0006BE  EF7A  F003         	goto	l3692
  5087  0006C2                     u2700:
  5088  0006C2  FFFF               	dw	65535	; assembler added errata NOP
  5089  0006C4  2838               	incf	___fldiv@aexp^0,w,c
  5090  0006C6  A4D8               	btfss	status,2,c
  5091  0006C8  EF68  F003         	goto	u2711
  5092  0006CC  EF6B  F003         	goto	u2710
  5093  0006D0                     u2711:
  5094  0006D0  FFFF               	dw	65535	; assembler added errata NOP
  5095  0006D2  EF74  F003         	goto	l3688
  5096  0006D6                     u2710:
  5097  0006D6  FFFF               	dw	65535	; assembler added errata NOP
  5098  0006D8  0E00               	movlw	0
  5099  0006DA  6E24               	movwf	___fldiv@a^0,c
  5100  0006DC  0E00               	movlw	0
  5101  0006DE  6E25               	movwf	(___fldiv@a+1)^0,c
  5102  0006E0  0E00               	movlw	0
  5103  0006E2  6E26               	movwf	(___fldiv@a+2)^0,c
  5104  0006E4  0E00               	movlw	0
  5105  0006E6  6E27               	movwf	(___fldiv@a+3)^0,c
  5106  0006E8                     l3688:
  5107  0006E8  FFFF               	dw	65535	; assembler added errata NOP
  5108  0006EA  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5109  0006EC  0E00               	movlw	0
  5110  0006EE  6E27               	movwf	(___fldiv@a+3)^0,c
  5111  0006F0  EF83  F003         	goto	l3694
  5112  0006F4                     l3692:
  5113  0006F4  FFFF               	dw	65535	; assembler added errata NOP
  5114  0006F6  0E00               	movlw	0
  5115  0006F8  6E24               	movwf	___fldiv@a^0,c
  5116  0006FA  0E00               	movlw	0
  5117  0006FC  6E25               	movwf	(___fldiv@a+1)^0,c
  5118  0006FE  0E00               	movlw	0
  5119  000700  6E26               	movwf	(___fldiv@a+2)^0,c
  5120  000702  0E00               	movlw	0
  5121  000704  6E27               	movwf	(___fldiv@a+3)^0,c
  5122  000706                     l3694:
  5123  000706  FFFF               	dw	65535	; assembler added errata NOP
  5124  000708  5024               	movf	___fldiv@a^0,w,c
  5125  00070A  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5126  00070C  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5127  00070E  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5128  000710  A4D8               	btfss	status,2,c
  5129  000712  EF8D  F003         	goto	u2721
  5130  000716  EF90  F003         	goto	u2720
  5131  00071A                     u2721:
  5132  00071A  FFFF               	dw	65535	; assembler added errata NOP
  5133  00071C  EFAA  F003         	goto	l3706
  5134  000720                     u2720:
  5135  000720  FFFF               	dw	65535	; assembler added errata NOP
  5136  000722  0E00               	movlw	0
  5137  000724  6E20               	movwf	___fldiv@b^0,c
  5138  000726  0E00               	movlw	0
  5139  000728  6E21               	movwf	(___fldiv@b+1)^0,c
  5140  00072A  0E00               	movlw	0
  5141  00072C  6E22               	movwf	(___fldiv@b+2)^0,c
  5142  00072E  0E00               	movlw	0
  5143  000730  6E23               	movwf	(___fldiv@b+3)^0,c
  5144  000732  0E80               	movlw	128
  5145  000734  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5146  000736  0E7F               	movlw	127
  5147  000738  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5148  00073A                     l3700:
  5149  00073A  FFFF               	dw	65535	; assembler added errata NOP
  5150  00073C  5030               	movf	___fldiv@sign^0,w,c
  5151  00073E  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5152  000740  C020  F020         	movff	___fldiv@b,?___fldiv
  5153  000744  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5154  000748  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5155  00074C  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5156  000750  EF1F  F005         	goto	l1207
  5157  000754                     l3706:
  5158  000754  FFFF               	dw	65535	; assembler added errata NOP
  5159  000756  5037               	movf	___fldiv@bexp^0,w,c
  5160  000758  A4D8               	btfss	status,2,c
  5161  00075A  EFB1  F003         	goto	u2731
  5162  00075E  EFB4  F003         	goto	u2730
  5163  000762                     u2731:
  5164  000762  FFFF               	dw	65535	; assembler added errata NOP
  5165  000764  EFBF  F003         	goto	l3714
  5166  000768                     u2730:
  5167  000768  FFFF               	dw	65535	; assembler added errata NOP
  5168  00076A  0E00               	movlw	0
  5169  00076C  6E20               	movwf	?___fldiv^0,c
  5170  00076E  0E00               	movlw	0
  5171  000770  6E21               	movwf	(?___fldiv+1)^0,c
  5172  000772  0E00               	movlw	0
  5173  000774  6E22               	movwf	(?___fldiv+2)^0,c
  5174  000776  0E00               	movlw	0
  5175  000778  6E23               	movwf	(?___fldiv+3)^0,c
  5176  00077A  EF1F  F005         	goto	l1207
  5177  00077E                     l3714:
  5178  00077E  FFFF               	dw	65535	; assembler added errata NOP
  5179  000780  5038               	movf	___fldiv@aexp^0,w,c
  5180  000782  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5181  000786  6A29               	clrf	(??___fldiv+1)^0,c
  5182  000788  5E28               	subwf	??___fldiv^0,f,c
  5183  00078A  0E00               	movlw	0
  5184  00078C  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5185  00078E  0E7F               	movlw	127
  5186  000790  2428               	addwf	??___fldiv^0,w,c
  5187  000792  6E31               	movwf	___fldiv@new_exp^0,c
  5188  000794  0E00               	movlw	0
  5189  000796  2029               	addwfc	(??___fldiv+1)^0,w,c
  5190  000798  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5191  00079A  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5192  00079E  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5193  0007A2  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5194  0007A6  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5195  0007AA  0E00               	movlw	0
  5196  0007AC  6E20               	movwf	___fldiv@b^0,c
  5197  0007AE  0E00               	movlw	0
  5198  0007B0  6E21               	movwf	(___fldiv@b+1)^0,c
  5199  0007B2  0E00               	movlw	0
  5200  0007B4  6E22               	movwf	(___fldiv@b+2)^0,c
  5201  0007B6  0E00               	movlw	0
  5202  0007B8  6E23               	movwf	(___fldiv@b+3)^0,c
  5203  0007BA  0E00               	movlw	0
  5204  0007BC  6E33               	movwf	___fldiv@grs^0,c
  5205  0007BE  0E00               	movlw	0
  5206  0007C0  6E34               	movwf	(___fldiv@grs+1)^0,c
  5207  0007C2  0E00               	movlw	0
  5208  0007C4  6E35               	movwf	(___fldiv@grs+2)^0,c
  5209  0007C6  0E00               	movlw	0
  5210  0007C8  6E36               	movwf	(___fldiv@grs+3)^0,c
  5211  0007CA  0E00               	movlw	0
  5212  0007CC  6E38               	movwf	___fldiv@aexp^0,c
  5213  0007CE  EF2B  F004         	goto	l1209
  5214  0007D2                     l3724:
  5215  0007D2  FFFF               	dw	65535	; assembler added errata NOP
  5216  0007D4  5038               	movf	___fldiv@aexp^0,w,c
  5217  0007D6  B4D8               	btfsc	status,2,c
  5218  0007D8  EFF0  F003         	goto	u2741
  5219  0007DC  EFF3  F003         	goto	u2740
  5220  0007E0                     u2741:
  5221  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  5222  0007E2  EF0E  F004         	goto	l3732
  5223  0007E6                     u2740:
  5224  0007E6  FFFF               	dw	65535	; assembler added errata NOP
  5225  0007E8  90D8               	bcf	status,0,c
  5226  0007EA  362C               	rlcf	___fldiv@rem^0,f,c
  5227  0007EC  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5228  0007EE  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5229  0007F0  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5230  0007F2  90D8               	bcf	status,0,c
  5231  0007F4  3620               	rlcf	___fldiv@b^0,f,c
  5232  0007F6  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5233  0007F8  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5234  0007FA  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5235  0007FC  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5236  0007FE  EF03  F004         	goto	u2751
  5237  000802  EF06  F004         	goto	u2750
  5238  000806                     u2751:
  5239  000806  FFFF               	dw	65535	; assembler added errata NOP
  5240  000808  EF08  F004         	goto	l1212
  5241  00080C                     u2750:
  5242  00080C  FFFF               	dw	65535	; assembler added errata NOP
  5243  00080E  8020               	bsf	___fldiv@b^0,0,c
  5244  000810                     l1212:
  5245  000810  FFFF               	dw	65535	; assembler added errata NOP
  5246  000812  90D8               	bcf	status,0,c
  5247  000814  3633               	rlcf	___fldiv@grs^0,f,c
  5248  000816  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5249  000818  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5250  00081A  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5251  00081C                     l3732:
  5252  00081C  FFFF               	dw	65535	; assembler added errata NOP
  5253  00081E  5024               	movf	___fldiv@a^0,w,c
  5254  000820  5C2C               	subwf	___fldiv@rem^0,w,c
  5255  000822  5025               	movf	(___fldiv@a+1)^0,w,c
  5256  000824  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5257  000826  5026               	movf	(___fldiv@a+2)^0,w,c
  5258  000828  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5259  00082A  5027               	movf	(___fldiv@a+3)^0,w,c
  5260  00082C  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5261  00082E  A0D8               	btfss	status,0,c
  5262  000830  EF1C  F004         	goto	u2761
  5263  000834  EF1F  F004         	goto	u2760
  5264  000838                     u2761:
  5265  000838  FFFF               	dw	65535	; assembler added errata NOP
  5266  00083A  EF29  F004         	goto	l3738
  5267  00083E                     u2760:
  5268  00083E  FFFF               	dw	65535	; assembler added errata NOP
  5269  000840  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5270  000842  5024               	movf	___fldiv@a^0,w,c
  5271  000844  5E2C               	subwf	___fldiv@rem^0,f,c
  5272  000846  5025               	movf	(___fldiv@a+1)^0,w,c
  5273  000848  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5274  00084A  5026               	movf	(___fldiv@a+2)^0,w,c
  5275  00084C  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5276  00084E  5027               	movf	(___fldiv@a+3)^0,w,c
  5277  000850  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5278  000852                     l3738:
  5279  000852  FFFF               	dw	65535	; assembler added errata NOP
  5280  000854  2A38               	incf	___fldiv@aexp^0,f,c
  5281  000856                     l1209:
  5282  000856  FFFF               	dw	65535	; assembler added errata NOP
  5283  000858  0E19               	movlw	25
  5284  00085A  6438               	cpfsgt	___fldiv@aexp^0,c
  5285  00085C  EF32  F004         	goto	u2771
  5286  000860  EF35  F004         	goto	u2770
  5287  000864                     u2771:
  5288  000864  FFFF               	dw	65535	; assembler added errata NOP
  5289  000866  EFE9  F003         	goto	l3724
  5290  00086A                     u2770:
  5291  00086A  FFFF               	dw	65535	; assembler added errata NOP
  5292  00086C  502C               	movf	___fldiv@rem^0,w,c
  5293  00086E  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5294  000870  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5295  000872  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5296  000874  B4D8               	btfsc	status,2,c
  5297  000876  EF3F  F004         	goto	u2781
  5298  00087A  EF42  F004         	goto	u2780
  5299  00087E                     u2781:
  5300  00087E  FFFF               	dw	65535	; assembler added errata NOP
  5301  000880  EF5F  F004         	goto	l3750
  5302  000884                     u2780:
  5303  000884  FFFF               	dw	65535	; assembler added errata NOP
  5304  000886  8033               	bsf	___fldiv@grs^0,0,c
  5305  000888  EF5F  F004         	goto	l3750
  5306  00088C                     l3744:
  5307  00088C  FFFF               	dw	65535	; assembler added errata NOP
  5308  00088E  90D8               	bcf	status,0,c
  5309  000890  3620               	rlcf	___fldiv@b^0,f,c
  5310  000892  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5311  000894  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5312  000896  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5313  000898  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5314  00089A  EF51  F004         	goto	u2791
  5315  00089E  EF54  F004         	goto	u2790
  5316  0008A2                     u2791:
  5317  0008A2  FFFF               	dw	65535	; assembler added errata NOP
  5318  0008A4  EF56  F004         	goto	l1218
  5319  0008A8                     u2790:
  5320  0008A8  FFFF               	dw	65535	; assembler added errata NOP
  5321  0008AA  8020               	bsf	___fldiv@b^0,0,c
  5322  0008AC                     l1218:
  5323  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5324  0008AE  90D8               	bcf	status,0,c
  5325  0008B0  3633               	rlcf	___fldiv@grs^0,f,c
  5326  0008B2  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5327  0008B4  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5328  0008B6  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5329  0008B8  0631               	decf	___fldiv@new_exp^0,f,c
  5330  0008BA  A0D8               	btfss	status,0,c
  5331  0008BC  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5332  0008BE                     l3750:
  5333  0008BE  FFFF               	dw	65535	; assembler added errata NOP
  5334  0008C0  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5335  0008C2  EF65  F004         	goto	u2801
  5336  0008C6  EF68  F004         	goto	u2800
  5337  0008CA                     u2801:
  5338  0008CA  FFFF               	dw	65535	; assembler added errata NOP
  5339  0008CC  EF46  F004         	goto	l3744
  5340  0008D0                     u2800:
  5341  0008D0  FFFF               	dw	65535	; assembler added errata NOP
  5342  0008D2  0E00               	movlw	0
  5343  0008D4  6E38               	movwf	___fldiv@aexp^0,c
  5344  0008D6  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5345  0008D8  EF70  F004         	goto	u2811
  5346  0008DC  EF73  F004         	goto	u2810
  5347  0008E0                     u2811:
  5348  0008E0  FFFF               	dw	65535	; assembler added errata NOP
  5349  0008E2  EF9E  F004         	goto	l1220
  5350  0008E6                     u2810:
  5351  0008E6  FFFF               	dw	65535	; assembler added errata NOP
  5352  0008E8  0EFF               	movlw	255
  5353  0008EA  1433               	andwf	___fldiv@grs^0,w,c
  5354  0008EC  6E28               	movwf	??___fldiv^0,c
  5355  0008EE  0EFF               	movlw	255
  5356  0008F0  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5357  0008F2  6E29               	movwf	(??___fldiv+1)^0,c
  5358  0008F4  0EFF               	movlw	255
  5359  0008F6  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5360  0008F8  6E2A               	movwf	(??___fldiv+2)^0,c
  5361  0008FA  0E7F               	movlw	127
  5362  0008FC  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5363  0008FE  6E2B               	movwf	(??___fldiv+3)^0,c
  5364  000900  5028               	movf	??___fldiv^0,w,c
  5365  000902  1029               	iorwf	(??___fldiv+1)^0,w,c
  5366  000904  102A               	iorwf	(??___fldiv+2)^0,w,c
  5367  000906  102B               	iorwf	(??___fldiv+3)^0,w,c
  5368  000908  B4D8               	btfsc	status,2,c
  5369  00090A  EF89  F004         	goto	u2821
  5370  00090E  EF8C  F004         	goto	u2820
  5371  000912                     u2821:
  5372  000912  FFFF               	dw	65535	; assembler added errata NOP
  5373  000914  EF92  F004         	goto	l1221
  5374  000918                     u2820:
  5375  000918  FFFF               	dw	65535	; assembler added errata NOP
  5376  00091A                     l3758:
  5377  00091A  FFFF               	dw	65535	; assembler added errata NOP
  5378  00091C  0E01               	movlw	1
  5379  00091E  6E38               	movwf	___fldiv@aexp^0,c
  5380  000920  EF9E  F004         	goto	l1220
  5381  000924                     l1221:
  5382  000924  FFFF               	dw	65535	; assembler added errata NOP
  5383  000926  A020               	btfss	___fldiv@b^0,0,c
  5384  000928  EF98  F004         	goto	u2831
  5385  00092C  EF9B  F004         	goto	u2830
  5386  000930                     u2831:
  5387  000930  FFFF               	dw	65535	; assembler added errata NOP
  5388  000932  EF9E  F004         	goto	l1220
  5389  000936                     u2830:
  5390  000936  FFFF               	dw	65535	; assembler added errata NOP
  5391  000938  EF8D  F004         	goto	l3758
  5392  00093C                     l1220:
  5393  00093C  FFFF               	dw	65535	; assembler added errata NOP
  5394  00093E  5038               	movf	___fldiv@aexp^0,w,c
  5395  000940  B4D8               	btfsc	status,2,c
  5396  000942  EFA5  F004         	goto	u2841
  5397  000946  EFA8  F004         	goto	u2840
  5398  00094A                     u2841:
  5399  00094A  FFFF               	dw	65535	; assembler added errata NOP
  5400  00094C  EFCF  F004         	goto	l3770
  5401  000950                     u2840:
  5402  000950  FFFF               	dw	65535	; assembler added errata NOP
  5403  000952  0E01               	movlw	1
  5404  000954  2620               	addwf	___fldiv@b^0,f,c
  5405  000956  0E00               	movlw	0
  5406  000958  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5407  00095A  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5408  00095C  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5409  00095E  A023               	btfss	(___fldiv@b+3)^0,0,c
  5410  000960  EFB4  F004         	goto	u2851
  5411  000964  EFB7  F004         	goto	u2850
  5412  000968                     u2851:
  5413  000968  FFFF               	dw	65535	; assembler added errata NOP
  5414  00096A  EFCF  F004         	goto	l3770
  5415  00096E                     u2850:
  5416  00096E  FFFF               	dw	65535	; assembler added errata NOP
  5417  000970  C020  F028         	movff	___fldiv@b,??___fldiv
  5418  000974  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5419  000978  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5420  00097C  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5421  000980  342B               	rlcf	(??___fldiv+3)^0,w,c
  5422  000982  322B               	rrcf	(??___fldiv+3)^0,f,c
  5423  000984  322A               	rrcf	(??___fldiv+2)^0,f,c
  5424  000986  3229               	rrcf	(??___fldiv+1)^0,f,c
  5425  000988  3228               	rrcf	??___fldiv^0,f,c
  5426  00098A  C028  F020         	movff	??___fldiv,___fldiv@b
  5427  00098E  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5428  000992  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5429  000996  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5430  00099A  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5431  00099C  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5432  00099E                     l3770:
  5433  00099E  FFFF               	dw	65535	; assembler added errata NOP
  5434  0009A0  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5435  0009A2  EFDB  F004         	goto	u2861
  5436  0009A6  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5437  0009A8  E109               	bnz	u2860
  5438  0009AA  2831               	incf	___fldiv@new_exp^0,w,c
  5439  0009AC  A0D8               	btfss	status,0,c
  5440  0009AE  EFDB  F004         	goto	u2861
  5441  0009B2  EFDE  F004         	goto	u2860
  5442  0009B6                     u2861:
  5443  0009B6  FFFF               	dw	65535	; assembler added errata NOP
  5444  0009B8  EFEA  F004         	goto	l3774
  5445  0009BC                     u2860:
  5446  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  5447  0009BE  0E00               	movlw	0
  5448  0009C0  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5449  0009C2  6831               	setf	___fldiv@new_exp^0,c
  5450  0009C4  0E00               	movlw	0
  5451  0009C6  6E20               	movwf	___fldiv@b^0,c
  5452  0009C8  0E00               	movlw	0
  5453  0009CA  6E21               	movwf	(___fldiv@b+1)^0,c
  5454  0009CC  0E00               	movlw	0
  5455  0009CE  6E22               	movwf	(___fldiv@b+2)^0,c
  5456  0009D0  0E00               	movlw	0
  5457  0009D2  6E23               	movwf	(___fldiv@b+3)^0,c
  5458  0009D4                     l3774:
  5459  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  5460  0009D6  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5461  0009D8  EFF9  F004         	goto	u2870
  5462  0009DC  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5463  0009DE  E106               	bnz	u2871
  5464  0009E0  0431               	decf	___fldiv@new_exp^0,w,c
  5465  0009E2  B0D8               	btfsc	status,0,c
  5466  0009E4  EFF6  F004         	goto	u2871
  5467  0009E8  EFF9  F004         	goto	u2870
  5468  0009EC                     u2871:
  5469  0009EC  FFFF               	dw	65535	; assembler added errata NOP
  5470  0009EE  EF08  F005         	goto	l3778
  5471  0009F2                     u2870:
  5472  0009F2  FFFF               	dw	65535	; assembler added errata NOP
  5473  0009F4  0E00               	movlw	0
  5474  0009F6  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5475  0009F8  0E00               	movlw	0
  5476  0009FA  6E31               	movwf	___fldiv@new_exp^0,c
  5477  0009FC  0E00               	movlw	0
  5478  0009FE  6E20               	movwf	___fldiv@b^0,c
  5479  000A00  0E00               	movlw	0
  5480  000A02  6E21               	movwf	(___fldiv@b+1)^0,c
  5481  000A04  0E00               	movlw	0
  5482  000A06  6E22               	movwf	(___fldiv@b+2)^0,c
  5483  000A08  0E00               	movlw	0
  5484  000A0A  6E23               	movwf	(___fldiv@b+3)^0,c
  5485  000A0C  0E00               	movlw	0
  5486  000A0E  6E30               	movwf	___fldiv@sign^0,c
  5487  000A10                     l3778:
  5488  000A10  FFFF               	dw	65535	; assembler added errata NOP
  5489  000A12  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5490  000A16  A037               	btfss	___fldiv@bexp^0,0,c
  5491  000A18  EF10  F005         	goto	u2881
  5492  000A1C  EF13  F005         	goto	u2880
  5493  000A20                     u2881:
  5494  000A20  FFFF               	dw	65535	; assembler added errata NOP
  5495  000A22  EF17  F005         	goto	l3784
  5496  000A26                     u2880:
  5497  000A26  FFFF               	dw	65535	; assembler added errata NOP
  5498  000A28  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5499  000A2A  EF19  F005         	goto	l3786
  5500  000A2E                     l3784:
  5501  000A2E  FFFF               	dw	65535	; assembler added errata NOP
  5502  000A30  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5503  000A32                     l3786:
  5504  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5505  000A34  90D8               	bcf	status,0,c
  5506  000A36  3037               	rrcf	___fldiv@bexp^0,w,c
  5507  000A38  6E23               	movwf	(___fldiv@b+3)^0,c
  5508  000A3A  EF9D  F003         	goto	l3700
  5509  000A3E                     l1207:
  5510  000A3E  FFFF               	dw	65535	; assembler added errata NOP
  5511  000A40  0012               	return		;funcret
  5512  000A42  FFFF               	dw	65535	; errata NOP
  5513  000A44                     __end_of___fldiv:
  5514                           	callstack 0
  5515                           
  5516 ;; *************** function _releaseObj *****************
  5517 ;; Defined at:
  5518 ;;		line 783 in file "motors.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;		None
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;		None
  5523 ;; Return value:  Size  Location     Type
  5524 ;;                  1    wreg      void 
  5525 ;; Registers used:
  5526 ;;		wreg, status,2, status,0, cstack
  5527 ;; Tracked objects:
  5528 ;;		On entry : 0/0
  5529 ;;		On exit  : 0/0
  5530 ;;		Unchanged: 0/0
  5531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5532 ;;      Params:         0       0       0       0       0       0       0
  5533 ;;      Locals:         0       0       0       0       0       0       0
  5534 ;;      Temps:          0       0       0       0       0       0       0
  5535 ;;      Totals:         0       0       0       0       0       0       0
  5536 ;;Total ram usage:        0 bytes
  5537 ;; Hardware stack levels used:    1
  5538 ;; Hardware stack levels required when called:    5
  5539 ;; This function calls:
  5540 ;;		_stepMade
  5541 ;; This function is called by:
  5542 ;;		_executeData
  5543 ;; This function uses a non-reentrant model
  5544 ;;
  5545                           
  5546                           	psect	text31
  5547  00235E                     __ptext31:
  5548                           	callstack 0
  5549  00235E                     _releaseObj:
  5550                           	callstack 0
  5551  00235E  FFFF               	dw	65535	; assembler added errata NOP
  5552  002360                     
  5553                           ;motors.c: 784:     LATDbits.LATD1 = 0;
  5554  002360  928C               	bcf	140,1,c	;volatile
  5555                           
  5556                           ;motors.c: 787:     T2CONbits.TMR2ON = 1;
  5557  002362  84CA               	bsf	202,2,c	;volatile
  5558  002364                     l4128:
  5559  002364  FFFF               	dw	65535	; assembler added errata NOP
  5560  002366  EC1A  F012         	call	_stepMade	;wreg free
  5561  00236A  5012               	movf	?_stepMade^0,w,c
  5562  00236C  1013               	iorwf	(?_stepMade+1)^0,w,c
  5563  00236E  B4D8               	btfsc	status,2,c
  5564  002370  EFBC  F011         	goto	u3491
  5565  002374  EFBF  F011         	goto	u3490
  5566  002378                     u3491:
  5567  002378  FFFF               	dw	65535	; assembler added errata NOP
  5568  00237A  EFB2  F011         	goto	l4128
  5569  00237E                     u3490:
  5570  00237E  FFFF               	dw	65535	; assembler added errata NOP
  5571  002380                     
  5572                           ;motors.c: 789:     T2CONbits.TMR2ON = 1;
  5573  002380  84CA               	bsf	202,2,c	;volatile
  5574  002382                     
  5575                           ;motors.c: 790:     TMR2 = 0;
  5576  002382  0E00               	movlw	0
  5577  002384  6ECC               	movwf	204,c	;volatile
  5578  002386  0012               	return		;funcret
  5579  002388  FFFF               	dw	65535	; errata NOP
  5580  00238A                     __end_of_releaseObj:
  5581                           	callstack 0
  5582                           
  5583 ;; *************** function _pickObject *****************
  5584 ;; Defined at:
  5585 ;;		line 770 in file "motors.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;		None
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;		None
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  1    wreg      void 
  5592 ;; Registers used:
  5593 ;;		wreg, status,2, status,0, cstack
  5594 ;; Tracked objects:
  5595 ;;		On entry : 0/0
  5596 ;;		On exit  : 0/0
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5599 ;;      Params:         0       0       0       0       0       0       0
  5600 ;;      Locals:         0       0       0       0       0       0       0
  5601 ;;      Temps:          0       0       0       0       0       0       0
  5602 ;;      Totals:         0       0       0       0       0       0       0
  5603 ;;Total ram usage:        0 bytes
  5604 ;; Hardware stack levels used:    1
  5605 ;; Hardware stack levels required when called:    5
  5606 ;; This function calls:
  5607 ;;		_stepMade
  5608 ;; This function is called by:
  5609 ;;		_executeData
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           	psect	text32
  5614  00238A                     __ptext32:
  5615                           	callstack 0
  5616  00238A                     _pickObject:
  5617                           	callstack 0
  5618  00238A  FFFF               	dw	65535	; assembler added errata NOP
  5619  00238C                     
  5620                           ;motors.c: 771:     LATDbits.LATD1 = 1;
  5621  00238C  828C               	bsf	140,1,c	;volatile
  5622                           
  5623                           ;motors.c: 774:     T2CONbits.TMR2ON = 1;
  5624  00238E  84CA               	bsf	202,2,c	;volatile
  5625  002390                     l4122:
  5626  002390  FFFF               	dw	65535	; assembler added errata NOP
  5627  002392  EC1A  F012         	call	_stepMade	;wreg free
  5628  002396  5012               	movf	?_stepMade^0,w,c
  5629  002398  1013               	iorwf	(?_stepMade+1)^0,w,c
  5630  00239A  B4D8               	btfsc	status,2,c
  5631  00239C  EFD2  F011         	goto	u3481
  5632  0023A0  EFD5  F011         	goto	u3480
  5633  0023A4                     u3481:
  5634  0023A4  FFFF               	dw	65535	; assembler added errata NOP
  5635  0023A6  EFC8  F011         	goto	l4122
  5636  0023AA                     u3480:
  5637  0023AA  FFFF               	dw	65535	; assembler added errata NOP
  5638  0023AC                     
  5639                           ;motors.c: 776:     T2CONbits.TMR2ON = 1;
  5640  0023AC  84CA               	bsf	202,2,c	;volatile
  5641  0023AE                     
  5642                           ;motors.c: 777:     TMR2 = 0;
  5643  0023AE  0E00               	movlw	0
  5644  0023B0  6ECC               	movwf	204,c	;volatile
  5645  0023B2  0012               	return		;funcret
  5646  0023B4  FFFF               	dw	65535	; errata NOP
  5647  0023B6                     __end_of_pickObject:
  5648                           	callstack 0
  5649                           
  5650 ;; *************** function _moveToPoint *****************
  5651 ;; Defined at:
  5652 ;;		line 313 in file "motors.c"
  5653 ;; Parameters:    Size  Location     Type
  5654 ;;  x1              2   20[COMRAM] int 
  5655 ;;  y1              2   22[COMRAM] int 
  5656 ;;  x2              2   24[COMRAM] int 
  5657 ;;  y2              2   26[COMRAM] int 
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;  keepMovingY     1   33[COMRAM] unsigned char 
  5660 ;;  keepMovingX     1   32[COMRAM] unsigned char 
  5661 ;;  MOT2Directio    1   31[COMRAM] unsigned char 
  5662 ;;  MOT1Directio    1   30[COMRAM] unsigned char 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  1    wreg      unsigned char 
  5665 ;; Registers used:
  5666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5672 ;;      Params:         8       0       0       0       0       0       0
  5673 ;;      Locals:         4       0       0       0       0       0       0
  5674 ;;      Temps:          2       0       0       0       0       0       0
  5675 ;;      Totals:        14       0       0       0       0       0       0
  5676 ;;Total ram usage:       14 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    5
  5679 ;; This function calls:
  5680 ;;		_resetStep
  5681 ;;		_stepCounter
  5682 ;;		_stepMade
  5683 ;; This function is called by:
  5684 ;;		_executeData
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           	psect	text33
  5689  000A44                     __ptext33:
  5690                           	callstack 0
  5691  000A44                     _moveToPoint:
  5692                           	callstack 0
  5693  000A44  FFFF               	dw	65535	; assembler added errata NOP
  5694  000A46                     
  5695                           ;motors.c: 315:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 318:     if(x2
      +                           > maxX || y2 > maxY){
  5696  000A46  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5697  000A48  E107               	bnz	u3061
  5698  000A4A  0ECA               	movlw	202
  5699  000A4C  5C19               	subwf	moveToPoint@x2^0,w,c
  5700  000A4E  B0D8               	btfsc	status,0,c
  5701  000A50  EF2C  F005         	goto	u3061
  5702  000A54  EF2F  F005         	goto	u3060
  5703  000A58                     u3061:
  5704  000A58  FFFF               	dw	65535	; assembler added errata NOP
  5705  000A5A  EF3C  F005         	goto	l3888
  5706  000A5E                     u3060:
  5707  000A5E  FFFF               	dw	65535	; assembler added errata NOP
  5708  000A60  501C               	movf	(moveToPoint@y2+1)^0,w,c
  5709  000A62  E10A               	bnz	u3070
  5710  000A64  0ECA               	movlw	202
  5711  000A66  5C1B               	subwf	moveToPoint@y2^0,w,c
  5712  000A68  A0D8               	btfss	status,0,c
  5713  000A6A  EF39  F005         	goto	u3071
  5714  000A6E  EF3C  F005         	goto	u3070
  5715  000A72                     u3071:
  5716  000A72  FFFF               	dw	65535	; assembler added errata NOP
  5717  000A74  EF40  F005         	goto	l3892
  5718  000A78                     u3070:
  5719  000A78                     l3888:
  5720  000A78  FFFF               	dw	65535	; assembler added errata NOP
  5721                           
  5722                           ;motors.c: 319:         return(5);
  5723  000A7A  0E05               	movlw	5
  5724  000A7C  EF02  F007         	goto	l157
  5725  000A80                     l3892:
  5726  000A80  FFFF               	dw	65535	; assembler added errata NOP
  5727                           
  5728                           ;motors.c: 340:     if((x2 - x1) > 0){
  5729  000A82  5015               	movf	moveToPoint@x1^0,w,c
  5730  000A84  5C19               	subwf	moveToPoint@x2^0,w,c
  5731  000A86  6E1D               	movwf	??_moveToPoint^0,c
  5732  000A88  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5733  000A8A  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5734  000A8C  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5735  000A8E  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5736  000A90  EF52  F005         	goto	u3081
  5737  000A94  501E               	movf	(??_moveToPoint+1)^0,w,c
  5738  000A96  E109               	bnz	u3080
  5739  000A98  041D               	decf	??_moveToPoint^0,w,c
  5740  000A9A  A0D8               	btfss	status,0,c
  5741  000A9C  EF52  F005         	goto	u3081
  5742  000AA0  EF55  F005         	goto	u3080
  5743  000AA4                     u3081:
  5744  000AA4  FFFF               	dw	65535	; assembler added errata NOP
  5745  000AA6  EF5E  F005         	goto	l158
  5746  000AAA                     u3080:
  5747  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  5748  000AAC                     
  5749                           ;motors.c: 341:         motCounter[0][1] = 1;
  5750  000AAC  0E00               	movlw	0
  5751  000AAE  6E61               	movwf	(_motCounter+3)^0,c
  5752  000AB0  0E01               	movlw	1
  5753  000AB2  6E60               	movwf	(_motCounter+2)^0,c
  5754                           
  5755                           ;motors.c: 342:         MOT1Direction = 1;
  5756  000AB4  0E01               	movlw	1
  5757  000AB6  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5758                           
  5759                           ;motors.c: 343:     }else{
  5760  000AB8  EF63  F005         	goto	l3898
  5761  000ABC                     l158:
  5762  000ABC  FFFF               	dw	65535	; assembler added errata NOP
  5763                           
  5764                           ;motors.c: 344:         motCounter[0][1] = -1;
  5765  000ABE  6860               	setf	(_motCounter+2)^0,c
  5766  000AC0  6861               	setf	(_motCounter+3)^0,c
  5767  000AC2                     
  5768                           ;motors.c: 345:         MOT1Direction = 0;
  5769  000AC2  0E00               	movlw	0
  5770  000AC4  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5771  000AC6                     l3898:
  5772  000AC6  FFFF               	dw	65535	; assembler added errata NOP
  5773                           
  5774                           ;motors.c: 348:     if((y2 - y1) > 0){
  5775  000AC8  5017               	movf	moveToPoint@y1^0,w,c
  5776  000ACA  5C1B               	subwf	moveToPoint@y2^0,w,c
  5777  000ACC  6E1D               	movwf	??_moveToPoint^0,c
  5778  000ACE  5018               	movf	(moveToPoint@y1+1)^0,w,c
  5779  000AD0  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  5780  000AD2  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5781  000AD4  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5782  000AD6  EF75  F005         	goto	u3091
  5783  000ADA  501E               	movf	(??_moveToPoint+1)^0,w,c
  5784  000ADC  E109               	bnz	u3090
  5785  000ADE  041D               	decf	??_moveToPoint^0,w,c
  5786  000AE0  A0D8               	btfss	status,0,c
  5787  000AE2  EF75  F005         	goto	u3091
  5788  000AE6  EF78  F005         	goto	u3090
  5789  000AEA                     u3091:
  5790  000AEA  FFFF               	dw	65535	; assembler added errata NOP
  5791  000AEC  EF81  F005         	goto	l160
  5792  000AF0                     u3090:
  5793  000AF0  FFFF               	dw	65535	; assembler added errata NOP
  5794  000AF2                     
  5795                           ;motors.c: 349:         motCounter[1][1] = 1;
  5796  000AF2  0E00               	movlw	0
  5797  000AF4  6E65               	movwf	(_motCounter+7)^0,c
  5798  000AF6  0E01               	movlw	1
  5799  000AF8  6E64               	movwf	(_motCounter+6)^0,c
  5800                           
  5801                           ;motors.c: 350:         MOT2Direction = 1;
  5802  000AFA  0E01               	movlw	1
  5803  000AFC  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5804                           
  5805                           ;motors.c: 351:     }else{
  5806  000AFE  EF86  F005         	goto	l161
  5807  000B02                     l160:
  5808  000B02  FFFF               	dw	65535	; assembler added errata NOP
  5809                           
  5810                           ;motors.c: 352:         motCounter[2][1] = -1;
  5811  000B04  6868               	setf	(_motCounter+10)^0,c
  5812  000B06  6869               	setf	(_motCounter+11)^0,c
  5813  000B08                     
  5814                           ;motors.c: 353:         MOT2Direction = 0;
  5815  000B08  0E00               	movlw	0
  5816  000B0A  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5817  000B0C                     l161:
  5818  000B0C  FFFF               	dw	65535	; assembler added errata NOP
  5819                           
  5820                           ;motors.c: 358:     unsigned char keepMovingX = 1;
  5821  000B0E  0E01               	movlw	1
  5822  000B10  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5823                           
  5824                           ;motors.c: 359:     unsigned char keepMovingY = 1;
  5825  000B12  0E01               	movlw	1
  5826  000B14  6E22               	movwf	moveToPoint@keepMovingY^0,c
  5827  000B16                     
  5828                           ;motors.c: 362:     T2CONbits.TMR2ON = 1;
  5829  000B16  84CA               	bsf	202,2,c	;volatile
  5830                           
  5831                           ;motors.c: 364:     tm0Error = 0;
  5832  000B18  0E00               	movlw	0
  5833  000B1A  6E51               	movwf	(_tm0Error+1)^0,c
  5834  000B1C  0E00               	movlw	0
  5835  000B1E  6E50               	movwf	_tm0Error^0,c
  5836                           
  5837                           ;motors.c: 365:     tm0Limit = 250;
  5838  000B20  0EFA               	movlw	250
  5839  000B22  6E5D               	movwf	_tm0Limit^0,c
  5840  000B24                     
  5841                           ;motors.c: 366:     T0CONbits.TMR0ON = 1;
  5842  000B24  8ED5               	bsf	213,7,c	;volatile
  5843                           
  5844                           ;motors.c: 368:     while(keepMovingX || keepMovingY){
  5845  000B26  EFE2  F006         	goto	l3978
  5846  000B2A                     l3908:
  5847  000B2A  FFFF               	dw	65535	; assembler added errata NOP
  5848                           
  5849                           ;motors.c: 371:         if(tm0Error){
  5850  000B2C  5050               	movf	_tm0Error^0,w,c
  5851  000B2E  1051               	iorwf	(_tm0Error+1)^0,w,c
  5852  000B30  B4D8               	btfsc	status,2,c
  5853  000B32  EF9D  F005         	goto	u3101
  5854  000B36  EFA0  F005         	goto	u3100
  5855  000B3A                     u3101:
  5856  000B3A  FFFF               	dw	65535	; assembler added errata NOP
  5857  000B3C  EFA7  F005         	goto	l3912
  5858  000B40                     u3100:
  5859  000B40  FFFF               	dw	65535	; assembler added errata NOP
  5860  000B42                     
  5861                           ;motors.c: 377:             tm0Error = 4;
  5862  000B42  0E00               	movlw	0
  5863  000B44  6E51               	movwf	(_tm0Error+1)^0,c
  5864  000B46  0E04               	movlw	4
  5865  000B48  6E50               	movwf	_tm0Error^0,c
  5866                           
  5867                           ;motors.c: 378:             break;
  5868  000B4A  EFF6  F006         	goto	l165
  5869  000B4E                     l3912:
  5870  000B4E  FFFF               	dw	65535	; assembler added errata NOP
  5871                           
  5872                           ;motors.c: 386:         if(MOT1Direction == 1){
  5873  000B50  041F               	decf	moveToPoint@MOT1Direction^0,w,c
  5874  000B52  A4D8               	btfss	status,2,c
  5875  000B54  EFAE  F005         	goto	u3111
  5876  000B58  EFB1  F005         	goto	u3110
  5877  000B5C                     u3111:
  5878  000B5C  FFFF               	dw	65535	; assembler added errata NOP
  5879  000B5E  EFFA  F005         	goto	l3928
  5880  000B62                     u3110:
  5881  000B62  FFFF               	dw	65535	; assembler added errata NOP
  5882  000B64                     
  5883                           ;motors.c: 387:             if(x1 + stepCounter() >= x2){
  5884  000B64  EC74  F012         	call	_stepCounter	;wreg free
  5885  000B68  5015               	movf	moveToPoint@x1^0,w,c
  5886  000B6A  2612               	addwf	?_stepCounter^0,f,c
  5887  000B6C  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5888  000B6E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  5889  000B70  5019               	movf	moveToPoint@x2^0,w,c
  5890  000B72  5C12               	subwf	?_stepCounter^0,w,c
  5891  000B74  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5892  000B76  5813               	subwfb	(?_stepCounter+1)^0,w,c
  5893  000B78  A0D8               	btfss	status,0,c
  5894  000B7A  EFC1  F005         	goto	u3121
  5895  000B7E  EFC4  F005         	goto	u3120
  5896  000B82                     u3121:
  5897  000B82  FFFF               	dw	65535	; assembler added errata NOP
  5898  000B84  EFCA  F005         	goto	l3918
  5899  000B88                     u3120:
  5900  000B88  FFFF               	dw	65535	; assembler added errata NOP
  5901  000B8A                     l3916:
  5902  000B8A  FFFF               	dw	65535	; assembler added errata NOP
  5903                           
  5904                           ;motors.c: 389:                 keepMovingX = 0;
  5905  000B8C  0E00               	movlw	0
  5906  000B8E  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5907                           
  5908                           ;motors.c: 390:             }else if(keepMovingX){
  5909  000B90  EF3E  F006         	goto	l3944
  5910  000B94                     l3918:
  5911  000B94  FFFF               	dw	65535	; assembler added errata NOP
  5912  000B96  5021               	movf	moveToPoint@keepMovingX^0,w,c
  5913  000B98  B4D8               	btfsc	status,2,c
  5914  000B9A  EFD1  F005         	goto	u3131
  5915  000B9E  EFD4  F005         	goto	u3130
  5916  000BA2                     u3131:
  5917  000BA2  FFFF               	dw	65535	; assembler added errata NOP
  5918  000BA4  EF3E  F006         	goto	l3944
  5919  000BA8                     u3130:
  5920  000BA8  FFFF               	dw	65535	; assembler added errata NOP
  5921  000BAA                     
  5922                           ;motors.c: 396:             motCounter[0][0] += motCounter[0][1];
  5923  000BAA  EE20  F060         	lfsr	2,_motCounter+2
  5924  000BAE  50DE               	movf	postinc2,w,c
  5925  000BB0  265E               	addwf	_motCounter^0,f,c
  5926  000BB2  50DD               	movf	postdec2,w,c
  5927  000BB4  225F               	addwfc	(_motCounter+1)^0,f,c
  5928  000BB6                     
  5929                           ;motors.c: 397:             if(motCounter[0][0] > 3){
  5930  000BB6  BE5F               	btfsc	(_motCounter+1)^0,7,c
  5931  000BB8  EFE7  F005         	goto	u3141
  5932  000BBC  505F               	movf	(_motCounter+1)^0,w,c
  5933  000BBE  E10A               	bnz	u3140
  5934  000BC0  0E04               	movlw	4
  5935  000BC2  5C5E               	subwf	_motCounter^0,w,c
  5936  000BC4  A0D8               	btfss	status,0,c
  5937  000BC6  EFE7  F005         	goto	u3141
  5938  000BCA  EFEA  F005         	goto	u3140
  5939  000BCE                     u3141:
  5940  000BCE  FFFF               	dw	65535	; assembler added errata NOP
  5941  000BD0  EFEF  F005         	goto	l3926
  5942  000BD4                     u3140:
  5943  000BD4  FFFF               	dw	65535	; assembler added errata NOP
  5944  000BD6                     
  5945                           ;motors.c: 398:                 motCounter[0][0] = 0;
  5946  000BD6  0E00               	movlw	0
  5947  000BD8  6E5F               	movwf	(_motCounter+1)^0,c
  5948  000BDA  0E00               	movlw	0
  5949  000BDC  6E5E               	movwf	_motCounter^0,c
  5950  000BDE                     l3926:
  5951  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  5952                           
  5953                           ;motors.c: 401:             LATA = stepMot1[motCounter[0][0]];
  5954  000BE0  0E8C               	movlw	low _stepMot1
  5955  000BE2  245E               	addwf	_motCounter^0,w,c
  5956  000BE4  6ED9               	movwf	fsr2l,c
  5957  000BE6  0E00               	movlw	high _stepMot1
  5958  000BE8  205F               	addwfc	(_motCounter+1)^0,w,c
  5959  000BEA  6EDA               	movwf	fsr2h,c
  5960  000BEC  50DF               	movf	indf2,w,c
  5961  000BEE  6E89               	movwf	137,c	;volatile
  5962  000BF0  EF3E  F006         	goto	l3944
  5963  000BF4                     l3928:
  5964  000BF4  FFFF               	dw	65535	; assembler added errata NOP
  5965  000BF6  501F               	movf	moveToPoint@MOT1Direction^0,w,c
  5966  000BF8  A4D8               	btfss	status,2,c
  5967  000BFA  EF01  F006         	goto	u3151
  5968  000BFE  EF04  F006         	goto	u3150
  5969  000C02                     u3151:
  5970  000C02  FFFF               	dw	65535	; assembler added errata NOP
  5971  000C04  EF3E  F006         	goto	l3944
  5972  000C08                     u3150:
  5973  000C08  FFFF               	dw	65535	; assembler added errata NOP
  5974  000C0A                     
  5975                           ;motors.c: 405:             if(x1 - stepCounter() <= x2){
  5976  000C0A  EC74  F012         	call	_stepCounter	;wreg free
  5977  000C0E  C015  F01D         	movff	moveToPoint@x1,??_moveToPoint
  5978  000C12  C016  F01E         	movff	moveToPoint@x1+1,??_moveToPoint+1
  5979  000C16  5012               	movf	?_stepCounter^0,w,c
  5980  000C18  5E1D               	subwf	??_moveToPoint^0,f,c
  5981  000C1A  5013               	movf	(?_stepCounter+1)^0,w,c
  5982  000C1C  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  5983  000C1E  501D               	movf	??_moveToPoint^0,w,c
  5984  000C20  5C19               	subwf	moveToPoint@x2^0,w,c
  5985  000C22  501E               	movf	(??_moveToPoint+1)^0,w,c
  5986  000C24  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5987  000C26  A0D8               	btfss	status,0,c
  5988  000C28  EF18  F006         	goto	u3161
  5989  000C2C  EF1B  F006         	goto	u3160
  5990  000C30                     u3161:
  5991  000C30  FFFF               	dw	65535	; assembler added errata NOP
  5992  000C32  EF1E  F006         	goto	l3934
  5993  000C36                     u3160:
  5994  000C36  FFFF               	dw	65535	; assembler added errata NOP
  5995  000C38  EFC5  F005         	goto	l3916
  5996  000C3C                     l3934:
  5997  000C3C  FFFF               	dw	65535	; assembler added errata NOP
  5998  000C3E  5021               	movf	moveToPoint@keepMovingX^0,w,c
  5999  000C40  B4D8               	btfsc	status,2,c
  6000  000C42  EF25  F006         	goto	u3171
  6001  000C46  EF28  F006         	goto	u3170
  6002  000C4A                     u3171:
  6003  000C4A  FFFF               	dw	65535	; assembler added errata NOP
  6004  000C4C  EF3E  F006         	goto	l3944
  6005  000C50                     u3170:
  6006  000C50  FFFF               	dw	65535	; assembler added errata NOP
  6007  000C52                     
  6008                           ;motors.c: 414:             motCounter[0][0] += motCounter[0][1];
  6009  000C52  EE20  F060         	lfsr	2,_motCounter+2
  6010  000C56  50DE               	movf	postinc2,w,c
  6011  000C58  265E               	addwf	_motCounter^0,f,c
  6012  000C5A  50DD               	movf	postdec2,w,c
  6013  000C5C  225F               	addwfc	(_motCounter+1)^0,f,c
  6014  000C5E                     
  6015                           ;motors.c: 415:             if(motCounter[0][0] < 0){
  6016  000C5E  BE5F               	btfsc	(_motCounter+1)^0,7,c
  6017  000C60  EF37  F006         	goto	u3180
  6018  000C64  EF34  F006         	goto	u3181
  6019  000C68                     u3181:
  6020  000C68  FFFF               	dw	65535	; assembler added errata NOP
  6021  000C6A  EFEF  F005         	goto	l3926
  6022  000C6E                     u3180:
  6023  000C6E  FFFF               	dw	65535	; assembler added errata NOP
  6024  000C70                     
  6025                           ;motors.c: 416:                 motCounter[0][0] = 3;
  6026  000C70  0E00               	movlw	0
  6027  000C72  6E5F               	movwf	(_motCounter+1)^0,c
  6028  000C74  0E03               	movlw	3
  6029  000C76  6E5E               	movwf	_motCounter^0,c
  6030  000C78  EFEF  F005         	goto	l3926
  6031  000C7C                     l3944:
  6032  000C7C  FFFF               	dw	65535	; assembler added errata NOP
  6033                           
  6034                           ;motors.c: 424:         if(MOT2Direction == 1){
  6035  000C7E  0420               	decf	moveToPoint@MOT2Direction^0,w,c
  6036  000C80  A4D8               	btfss	status,2,c
  6037  000C82  EF45  F006         	goto	u3191
  6038  000C86  EF48  F006         	goto	u3190
  6039  000C8A                     u3191:
  6040  000C8A  FFFF               	dw	65535	; assembler added errata NOP
  6041  000C8C  EF91  F006         	goto	l3960
  6042  000C90                     u3190:
  6043  000C90  FFFF               	dw	65535	; assembler added errata NOP
  6044  000C92                     
  6045                           ;motors.c: 426:             if(y1 + stepCounter() >= y2){
  6046  000C92  EC74  F012         	call	_stepCounter	;wreg free
  6047  000C96  5017               	movf	moveToPoint@y1^0,w,c
  6048  000C98  2612               	addwf	?_stepCounter^0,f,c
  6049  000C9A  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6050  000C9C  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6051  000C9E  501B               	movf	moveToPoint@y2^0,w,c
  6052  000CA0  5C12               	subwf	?_stepCounter^0,w,c
  6053  000CA2  501C               	movf	(moveToPoint@y2+1)^0,w,c
  6054  000CA4  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6055  000CA6  A0D8               	btfss	status,0,c
  6056  000CA8  EF58  F006         	goto	u3201
  6057  000CAC  EF5B  F006         	goto	u3200
  6058  000CB0                     u3201:
  6059  000CB0  FFFF               	dw	65535	; assembler added errata NOP
  6060  000CB2  EF61  F006         	goto	l3950
  6061  000CB6                     u3200:
  6062  000CB6  FFFF               	dw	65535	; assembler added errata NOP
  6063  000CB8                     l3948:
  6064  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6065                           
  6066                           ;motors.c: 428:                 keepMovingY = 0;
  6067  000CBA  0E00               	movlw	0
  6068  000CBC  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6069                           
  6070                           ;motors.c: 429:             }else if(keepMovingY){
  6071  000CBE  EFD5  F006         	goto	l3976
  6072  000CC2                     l3950:
  6073  000CC2  FFFF               	dw	65535	; assembler added errata NOP
  6074  000CC4  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6075  000CC6  B4D8               	btfsc	status,2,c
  6076  000CC8  EF68  F006         	goto	u3211
  6077  000CCC  EF6B  F006         	goto	u3210
  6078  000CD0                     u3211:
  6079  000CD0  FFFF               	dw	65535	; assembler added errata NOP
  6080  000CD2  EFD5  F006         	goto	l182
  6081  000CD6                     u3210:
  6082  000CD6  FFFF               	dw	65535	; assembler added errata NOP
  6083  000CD8                     
  6084                           ;motors.c: 435:             motCounter[1][0] += motCounter[1][1];
  6085  000CD8  EE20  F064         	lfsr	2,_motCounter+6
  6086  000CDC  50DE               	movf	postinc2,w,c
  6087  000CDE  2662               	addwf	(_motCounter+4)^0,f,c
  6088  000CE0  50DD               	movf	postdec2,w,c
  6089  000CE2  2263               	addwfc	(_motCounter+5)^0,f,c
  6090  000CE4                     
  6091                           ;motors.c: 436:             if(motCounter[1][0] > 3){
  6092  000CE4  BE63               	btfsc	(_motCounter+5)^0,7,c
  6093  000CE6  EF7E  F006         	goto	u3221
  6094  000CEA  5063               	movf	(_motCounter+5)^0,w,c
  6095  000CEC  E10A               	bnz	u3220
  6096  000CEE  0E04               	movlw	4
  6097  000CF0  5C62               	subwf	(_motCounter+4)^0,w,c
  6098  000CF2  A0D8               	btfss	status,0,c
  6099  000CF4  EF7E  F006         	goto	u3221
  6100  000CF8  EF81  F006         	goto	u3220
  6101  000CFC                     u3221:
  6102  000CFC  FFFF               	dw	65535	; assembler added errata NOP
  6103  000CFE  EF86  F006         	goto	l3958
  6104  000D02                     u3220:
  6105  000D02  FFFF               	dw	65535	; assembler added errata NOP
  6106  000D04                     
  6107                           ;motors.c: 437:                 motCounter[1][0] = 0;
  6108  000D04  0E00               	movlw	0
  6109  000D06  6E63               	movwf	(_motCounter+5)^0,c
  6110  000D08  0E00               	movlw	0
  6111  000D0A  6E62               	movwf	(_motCounter+4)^0,c
  6112  000D0C                     l3958:
  6113  000D0C  FFFF               	dw	65535	; assembler added errata NOP
  6114                           
  6115                           ;motors.c: 440:             LATB = stepMot2[motCounter[1][0]];
  6116  000D0E  0E88               	movlw	low _stepMot2
  6117  000D10  2462               	addwf	(_motCounter+4)^0,w,c
  6118  000D12  6ED9               	movwf	fsr2l,c
  6119  000D14  0E00               	movlw	high _stepMot2
  6120  000D16  2063               	addwfc	(_motCounter+5)^0,w,c
  6121  000D18  6EDA               	movwf	fsr2h,c
  6122  000D1A  50DF               	movf	indf2,w,c
  6123  000D1C  6E8A               	movwf	138,c	;volatile
  6124  000D1E  EFD5  F006         	goto	l3976
  6125  000D22                     l3960:
  6126  000D22  FFFF               	dw	65535	; assembler added errata NOP
  6127  000D24  5020               	movf	moveToPoint@MOT2Direction^0,w,c
  6128  000D26  A4D8               	btfss	status,2,c
  6129  000D28  EF98  F006         	goto	u3231
  6130  000D2C  EF9B  F006         	goto	u3230
  6131  000D30                     u3231:
  6132  000D30  FFFF               	dw	65535	; assembler added errata NOP
  6133  000D32  EFD5  F006         	goto	l3976
  6134  000D36                     u3230:
  6135  000D36  FFFF               	dw	65535	; assembler added errata NOP
  6136  000D38                     
  6137                           ;motors.c: 445:             if(y1 - stepCounter() <= y2){
  6138  000D38  EC74  F012         	call	_stepCounter	;wreg free
  6139  000D3C  C017  F01D         	movff	moveToPoint@y1,??_moveToPoint
  6140  000D40  C018  F01E         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6141  000D44  5012               	movf	?_stepCounter^0,w,c
  6142  000D46  5E1D               	subwf	??_moveToPoint^0,f,c
  6143  000D48  5013               	movf	(?_stepCounter+1)^0,w,c
  6144  000D4A  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6145  000D4C  501D               	movf	??_moveToPoint^0,w,c
  6146  000D4E  5C1B               	subwf	moveToPoint@y2^0,w,c
  6147  000D50  501E               	movf	(??_moveToPoint+1)^0,w,c
  6148  000D52  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6149  000D54  A0D8               	btfss	status,0,c
  6150  000D56  EFAF  F006         	goto	u3241
  6151  000D5A  EFB2  F006         	goto	u3240
  6152  000D5E                     u3241:
  6153  000D5E  FFFF               	dw	65535	; assembler added errata NOP
  6154  000D60  EFB5  F006         	goto	l3966
  6155  000D64                     u3240:
  6156  000D64  FFFF               	dw	65535	; assembler added errata NOP
  6157  000D66  EF5C  F006         	goto	l3948
  6158  000D6A                     l3966:
  6159  000D6A  FFFF               	dw	65535	; assembler added errata NOP
  6160  000D6C  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6161  000D6E  B4D8               	btfsc	status,2,c
  6162  000D70  EFBC  F006         	goto	u3251
  6163  000D74  EFBF  F006         	goto	u3250
  6164  000D78                     u3251:
  6165  000D78  FFFF               	dw	65535	; assembler added errata NOP
  6166  000D7A  EFD5  F006         	goto	l3976
  6167  000D7E                     u3250:
  6168  000D7E  FFFF               	dw	65535	; assembler added errata NOP
  6169  000D80                     
  6170                           ;motors.c: 454:             motCounter[1][0] += motCounter[1][1];
  6171  000D80  EE20  F064         	lfsr	2,_motCounter+6
  6172  000D84  50DE               	movf	postinc2,w,c
  6173  000D86  2662               	addwf	(_motCounter+4)^0,f,c
  6174  000D88  50DD               	movf	postdec2,w,c
  6175  000D8A  2263               	addwfc	(_motCounter+5)^0,f,c
  6176  000D8C                     
  6177                           ;motors.c: 455:             if(motCounter[1][0] < 0){
  6178  000D8C  BE63               	btfsc	(_motCounter+5)^0,7,c
  6179  000D8E  EFCE  F006         	goto	u3260
  6180  000D92  EFCB  F006         	goto	u3261
  6181  000D96                     u3261:
  6182  000D96  FFFF               	dw	65535	; assembler added errata NOP
  6183  000D98  EF86  F006         	goto	l3958
  6184  000D9C                     u3260:
  6185  000D9C  FFFF               	dw	65535	; assembler added errata NOP
  6186  000D9E                     
  6187                           ;motors.c: 456:                 motCounter[1][0] = 3;
  6188  000D9E  0E00               	movlw	0
  6189  000DA0  6E63               	movwf	(_motCounter+5)^0,c
  6190  000DA2  0E03               	movlw	3
  6191  000DA4  6E62               	movwf	(_motCounter+4)^0,c
  6192  000DA6  EF86  F006         	goto	l3958
  6193  000DAA                     l182:
  6194  000DAA                     l3976:
  6195  000DAA  FFFF               	dw	65535	; assembler added errata NOP
  6196  000DAC  EC1A  F012         	call	_stepMade	;wreg free
  6197  000DB0  5012               	movf	?_stepMade^0,w,c
  6198  000DB2  1013               	iorwf	(?_stepMade+1)^0,w,c
  6199  000DB4  B4D8               	btfsc	status,2,c
  6200  000DB6  EFDF  F006         	goto	u3271
  6201  000DBA  EFE2  F006         	goto	u3270
  6202  000DBE                     u3271:
  6203  000DBE  FFFF               	dw	65535	; assembler added errata NOP
  6204  000DC0  EFD5  F006         	goto	l3976
  6205  000DC4                     u3270:
  6206  000DC4                     l3978:
  6207  000DC4  FFFF               	dw	65535	; assembler added errata NOP
  6208                           
  6209                           ;motors.c: 368:     while(keepMovingX || keepMovingY){
  6210  000DC6  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6211  000DC8  A4D8               	btfss	status,2,c
  6212  000DCA  EFE9  F006         	goto	u3281
  6213  000DCE  EFEC  F006         	goto	u3280
  6214  000DD2                     u3281:
  6215  000DD2  FFFF               	dw	65535	; assembler added errata NOP
  6216  000DD4  EF95  F005         	goto	l3908
  6217  000DD8                     u3280:
  6218  000DD8  FFFF               	dw	65535	; assembler added errata NOP
  6219  000DDA  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6220  000DDC  A4D8               	btfss	status,2,c
  6221  000DDE  EFF3  F006         	goto	u3291
  6222  000DE2  EFF6  F006         	goto	u3290
  6223  000DE6                     u3291:
  6224  000DE6  FFFF               	dw	65535	; assembler added errata NOP
  6225  000DE8  EF95  F005         	goto	l3908
  6226  000DEC                     u3290:
  6227  000DEC                     l165:
  6228  000DEC  FFFF               	dw	65535	; assembler added errata NOP
  6229                           
  6230                           ;motors.c: 479:     T0CONbits.TMR0ON = 0;
  6231  000DEE  9ED5               	bcf	213,7,c	;volatile
  6232                           
  6233                           ;motors.c: 480:     T2CONbits.TMR2ON = 0;
  6234  000DF0  94CA               	bcf	202,2,c	;volatile
  6235  000DF2                     
  6236                           ;motors.c: 482:     TMR0 = 0;
  6237  000DF2  0E00               	movlw	0
  6238  000DF4  6ED7               	movwf	215,c	;volatile
  6239  000DF6  0E00               	movlw	0
  6240  000DF8  6ED6               	movwf	214,c	;volatile
  6241                           
  6242                           ;motors.c: 483:     TMR2 = 0;
  6243  000DFA  0E00               	movlw	0
  6244  000DFC  6ECC               	movwf	204,c	;volatile
  6245  000DFE                     
  6246                           ;motors.c: 486:     resetStep();
  6247  000DFE  EC8E  F012         	call	_resetStep	;wreg free
  6248  000E02                     
  6249                           ;motors.c: 488:     return(tm0Error);
  6250  000E02  5050               	movf	_tm0Error^0,w,c
  6251  000E04                     l157:
  6252  000E04  FFFF               	dw	65535	; assembler added errata NOP
  6253  000E06  0012               	return		;funcret
  6254  000E08  FFFF               	dw	65535	; errata NOP
  6255  000E0A                     __end_of_moveToPoint:
  6256                           	callstack 0
  6257                           
  6258 ;; *************** function _stepCounter *****************
  6259 ;; Defined at:
  6260 ;;		line 70 in file "timer.c"
  6261 ;; Parameters:    Size  Location     Type
  6262 ;;		None
  6263 ;; Auto vars:     Size  Location     Type
  6264 ;;		None
  6265 ;; Return value:  Size  Location     Type
  6266 ;;                  2   17[COMRAM] unsigned int 
  6267 ;; Registers used:
  6268 ;;		None
  6269 ;; Tracked objects:
  6270 ;;		On entry : 0/0
  6271 ;;		On exit  : 0/0
  6272 ;;		Unchanged: 0/0
  6273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6274 ;;      Params:         2       0       0       0       0       0       0
  6275 ;;      Locals:         0       0       0       0       0       0       0
  6276 ;;      Temps:          0       0       0       0       0       0       0
  6277 ;;      Totals:         2       0       0       0       0       0       0
  6278 ;;Total ram usage:        2 bytes
  6279 ;; Hardware stack levels used:    1
  6280 ;; Hardware stack levels required when called:    4
  6281 ;; This function calls:
  6282 ;;		Nothing
  6283 ;; This function is called by:
  6284 ;;		_moveToPoint
  6285 ;; This function uses a non-reentrant model
  6286 ;;
  6287                           
  6288                           	psect	text34
  6289  0024E8                     __ptext34:
  6290                           	callstack 0
  6291  0024E8                     _stepCounter:
  6292                           	callstack 0
  6293  0024E8  FFFF               	dw	65535	; assembler added errata NOP
  6294  0024EA                     
  6295                           ;timer.c: 71:     return pwmStep;
  6296  0024EA  C053  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6297  0024EE  6A13               	clrf	(?_stepCounter+1)^0,c
  6298  0024F0  0012               	return		;funcret
  6299  0024F2  FFFF               	dw	65535	; errata NOP
  6300  0024F4                     __end_of_stepCounter:
  6301                           	callstack 0
  6302                           
  6303 ;; *************** function _liftArm *****************
  6304 ;; Defined at:
  6305 ;;		line 673 in file "motors.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;		None
  6308 ;; Auto vars:     Size  Location     Type
  6309 ;;		None
  6310 ;; Return value:  Size  Location     Type
  6311 ;;                  1    wreg      unsigned char 
  6312 ;; Registers used:
  6313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6314 ;; Tracked objects:
  6315 ;;		On entry : 0/0
  6316 ;;		On exit  : 0/0
  6317 ;;		Unchanged: 0/0
  6318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6319 ;;      Params:         0       0       0       0       0       0       0
  6320 ;;      Locals:         0       0       0       0       0       0       0
  6321 ;;      Temps:          0       0       0       0       0       0       0
  6322 ;;      Totals:         0       0       0       0       0       0       0
  6323 ;;Total ram usage:        0 bytes
  6324 ;; Hardware stack levels used:    1
  6325 ;; Hardware stack levels required when called:    5
  6326 ;; This function calls:
  6327 ;;		_resetStep
  6328 ;;		_stepMade
  6329 ;; This function is called by:
  6330 ;;		_executeData
  6331 ;; This function uses a non-reentrant model
  6332 ;;
  6333                           
  6334                           	psect	text35
  6335  002098                     __ptext35:
  6336                           	callstack 0
  6337  002098                     _liftArm:
  6338                           	callstack 0
  6339  002098  FFFF               	dw	65535	; assembler added errata NOP
  6340  00209A                     
  6341                           ;motors.c: 679:     motCounter[2][1] = -1;
  6342  00209A  6868               	setf	(_motCounter+10)^0,c
  6343  00209C  6869               	setf	(_motCounter+11)^0,c
  6344                           
  6345                           ;motors.c: 682:     T2CONbits.TMR2ON = 1;
  6346  00209E  84CA               	bsf	202,2,c	;volatile
  6347  0020A0                     
  6348                           ;motors.c: 684:     tm0Error = 0;
  6349  0020A0  0E00               	movlw	0
  6350  0020A2  6E51               	movwf	(_tm0Error+1)^0,c
  6351  0020A4  0E00               	movlw	0
  6352  0020A6  6E50               	movwf	_tm0Error^0,c
  6353                           
  6354                           ;motors.c: 685:     tm0Limit = 250;
  6355  0020A8  0EFA               	movlw	250
  6356  0020AA  6E5D               	movwf	_tm0Limit^0,c
  6357  0020AC                     
  6358                           ;motors.c: 686:     T0CONbits.TMR0ON = 1;
  6359  0020AC  8ED5               	bsf	213,7,c	;volatile
  6360                           
  6361                           ;motors.c: 690:     while(!PORTEbits.RE2){
  6362  0020AE  EF95  F010         	goto	l217
  6363  0020B2                     l4080:
  6364  0020B2  FFFF               	dw	65535	; assembler added errata NOP
  6365                           
  6366                           ;motors.c: 693:         if(tm0Error){
  6367  0020B4  5050               	movf	_tm0Error^0,w,c
  6368  0020B6  1051               	iorwf	(_tm0Error+1)^0,w,c
  6369  0020B8  B4D8               	btfsc	status,2,c
  6370  0020BA  EF61  F010         	goto	u3421
  6371  0020BE  EF64  F010         	goto	u3420
  6372  0020C2                     u3421:
  6373  0020C2  FFFF               	dw	65535	; assembler added errata NOP
  6374  0020C4  EF6B  F010         	goto	l4084
  6375  0020C8                     u3420:
  6376  0020C8  FFFF               	dw	65535	; assembler added errata NOP
  6377  0020CA                     
  6378                           ;motors.c: 698:             tm0Error = 6;
  6379  0020CA  0E00               	movlw	0
  6380  0020CC  6E51               	movwf	(_tm0Error+1)^0,c
  6381  0020CE  0E06               	movlw	6
  6382  0020D0  6E50               	movwf	_tm0Error^0,c
  6383                           
  6384                           ;motors.c: 699:             break;
  6385  0020D2  EF9E  F010         	goto	l220
  6386  0020D6                     l4084:
  6387  0020D6  FFFF               	dw	65535	; assembler added errata NOP
  6388                           
  6389                           ;motors.c: 708:             motCounter[2][0] += motCounter[2][1];
  6390  0020D8  EE20  F068         	lfsr	2,_motCounter+10
  6391  0020DC  50DE               	movf	postinc2,w,c
  6392  0020DE  2666               	addwf	(_motCounter+8)^0,f,c
  6393  0020E0  50DD               	movf	postdec2,w,c
  6394  0020E2  2267               	addwfc	(_motCounter+9)^0,f,c
  6395  0020E4                     
  6396                           ;motors.c: 709:             if(motCounter[2][0] < 0){
  6397  0020E4  BE67               	btfsc	(_motCounter+9)^0,7,c
  6398  0020E6  EF7A  F010         	goto	u3430
  6399  0020EA  EF77  F010         	goto	u3431
  6400  0020EE                     u3431:
  6401  0020EE  FFFF               	dw	65535	; assembler added errata NOP
  6402  0020F0  EF7F  F010         	goto	l4090
  6403  0020F4                     u3430:
  6404  0020F4  FFFF               	dw	65535	; assembler added errata NOP
  6405  0020F6                     
  6406                           ;motors.c: 710:                 motCounter[2][0] = 3;
  6407  0020F6  0E00               	movlw	0
  6408  0020F8  6E67               	movwf	(_motCounter+9)^0,c
  6409  0020FA  0E03               	movlw	3
  6410  0020FC  6E66               	movwf	(_motCounter+8)^0,c
  6411  0020FE                     l4090:
  6412  0020FE  FFFF               	dw	65535	; assembler added errata NOP
  6413                           
  6414                           ;motors.c: 713:             LATC = stepMot3[motCounter[2][0]];
  6415  002100  0E84               	movlw	low _stepMot3
  6416  002102  2466               	addwf	(_motCounter+8)^0,w,c
  6417  002104  6ED9               	movwf	fsr2l,c
  6418  002106  0E00               	movlw	high _stepMot3
  6419  002108  2067               	addwfc	(_motCounter+9)^0,w,c
  6420  00210A  6EDA               	movwf	fsr2h,c
  6421  00210C  50DF               	movf	indf2,w,c
  6422  00210E  6E8B               	movwf	139,c	;volatile
  6423  002110                     l4092:
  6424  002110  FFFF               	dw	65535	; assembler added errata NOP
  6425  002112  EC1A  F012         	call	_stepMade	;wreg free
  6426  002116  5012               	movf	?_stepMade^0,w,c
  6427  002118  1013               	iorwf	(?_stepMade+1)^0,w,c
  6428  00211A  B4D8               	btfsc	status,2,c
  6429  00211C  EF92  F010         	goto	u3441
  6430  002120  EF95  F010         	goto	u3440
  6431  002124                     u3441:
  6432  002124  FFFF               	dw	65535	; assembler added errata NOP
  6433  002126  EF88  F010         	goto	l4092
  6434  00212A                     u3440:
  6435  00212A                     l217:
  6436  00212A  FFFF               	dw	65535	; assembler added errata NOP
  6437                           
  6438                           ;motors.c: 690:     while(!PORTEbits.RE2){
  6439  00212C  A484               	btfss	132,2,c	;volatile
  6440  00212E  EF9B  F010         	goto	u3451
  6441  002132  EF9E  F010         	goto	u3450
  6442  002136                     u3451:
  6443  002136  FFFF               	dw	65535	; assembler added errata NOP
  6444  002138  EF59  F010         	goto	l4080
  6445  00213C                     u3450:
  6446  00213C                     l220:
  6447  00213C  FFFF               	dw	65535	; assembler added errata NOP
  6448                           
  6449                           ;motors.c: 730:     T0CONbits.TMR0ON = 0;
  6450  00213E  9ED5               	bcf	213,7,c	;volatile
  6451                           
  6452                           ;motors.c: 731:     T2CONbits.TMR2ON = 0;
  6453  002140  94CA               	bcf	202,2,c	;volatile
  6454  002142                     
  6455                           ;motors.c: 733:     TMR0 = 0;
  6456  002142  0E00               	movlw	0
  6457  002144  6ED7               	movwf	215,c	;volatile
  6458  002146  0E00               	movlw	0
  6459  002148  6ED6               	movwf	214,c	;volatile
  6460                           
  6461                           ;motors.c: 734:     TMR2 = 0;
  6462  00214A  0E00               	movlw	0
  6463  00214C  6ECC               	movwf	204,c	;volatile
  6464  00214E                     
  6465                           ;motors.c: 737:     resetStep();
  6466  00214E  EC8E  F012         	call	_resetStep	;wreg free
  6467  002152                     
  6468                           ;motors.c: 739:     return(tm0Error);
  6469  002152  5050               	movf	_tm0Error^0,w,c
  6470  002154  0012               	return		;funcret
  6471  002156  FFFF               	dw	65535	; errata NOP
  6472  002158                     __end_of_liftArm:
  6473                           	callstack 0
  6474                           
  6475 ;; *************** function _stepMade *****************
  6476 ;; Defined at:
  6477 ;;		line 59 in file "timer.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;		None
  6480 ;; Auto vars:     Size  Location     Type
  6481 ;;  temp            1   19[COMRAM] unsigned char 
  6482 ;; Return value:  Size  Location     Type
  6483 ;;                  2   17[COMRAM] unsigned int 
  6484 ;; Registers used:
  6485 ;;		wreg, status,2
  6486 ;; Tracked objects:
  6487 ;;		On entry : 0/0
  6488 ;;		On exit  : 0/0
  6489 ;;		Unchanged: 0/0
  6490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6491 ;;      Params:         2       0       0       0       0       0       0
  6492 ;;      Locals:         1       0       0       0       0       0       0
  6493 ;;      Temps:          0       0       0       0       0       0       0
  6494 ;;      Totals:         3       0       0       0       0       0       0
  6495 ;;Total ram usage:        3 bytes
  6496 ;; Hardware stack levels used:    1
  6497 ;; Hardware stack levels required when called:    4
  6498 ;; This function calls:
  6499 ;;		Nothing
  6500 ;; This function is called by:
  6501 ;;		_resetPosition
  6502 ;;		_moveToPoint
  6503 ;;		_touchObject
  6504 ;;		_touchTherm
  6505 ;;		_liftArm
  6506 ;;		_rotateObj
  6507 ;;		_pickObject
  6508 ;;		_releaseObj
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511                           
  6512                           	psect	text36
  6513  002434                     __ptext36:
  6514                           	callstack 0
  6515  002434                     _stepMade:
  6516                           	callstack 0
  6517  002434  FFFF               	dw	65535	; assembler added errata NOP
  6518  002436                     
  6519                           ;timer.c: 60:     unsigned char temp = stepToggle;
  6520  002436  C052  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6521  00243A                     
  6522                           ;timer.c: 62:     stepToggle = 0;
  6523  00243A  0E00               	movlw	0
  6524  00243C  6E52               	movwf	_stepToggle^0,c	;volatile
  6525  00243E                     
  6526                           ;timer.c: 64:     return temp;
  6527  00243E  C014  F012         	movff	stepMade@temp,?_stepMade
  6528  002442  6A13               	clrf	(?_stepMade+1)^0,c
  6529  002444  0012               	return		;funcret
  6530  002446  FFFF               	dw	65535	; errata NOP
  6531  002448                     __end_of_stepMade:
  6532                           	callstack 0
  6533                           
  6534 ;; *************** function _resetStep *****************
  6535 ;; Defined at:
  6536 ;;		line 77 in file "timer.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;		None
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;		None
  6541 ;; Return value:  Size  Location     Type
  6542 ;;                  1    wreg      void 
  6543 ;; Registers used:
  6544 ;;		wreg, status,2
  6545 ;; Tracked objects:
  6546 ;;		On entry : 0/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6550 ;;      Params:         0       0       0       0       0       0       0
  6551 ;;      Locals:         0       0       0       0       0       0       0
  6552 ;;      Temps:          0       0       0       0       0       0       0
  6553 ;;      Totals:         0       0       0       0       0       0       0
  6554 ;;Total ram usage:        0 bytes
  6555 ;; Hardware stack levels used:    1
  6556 ;; Hardware stack levels required when called:    4
  6557 ;; This function calls:
  6558 ;;		Nothing
  6559 ;; This function is called by:
  6560 ;;		_resetPosition
  6561 ;;		_moveToPoint
  6562 ;;		_touchObject
  6563 ;;		_touchTherm
  6564 ;;		_liftArm
  6565 ;; This function uses a non-reentrant model
  6566 ;;
  6567                           
  6568                           	psect	text37
  6569  00251C                     __ptext37:
  6570                           	callstack 0
  6571  00251C                     _resetStep:
  6572                           	callstack 0
  6573  00251C  FFFF               	dw	65535	; assembler added errata NOP
  6574  00251E                     
  6575                           ;timer.c: 78:     pwmStep = 0;
  6576  00251E  0E00               	movlw	0
  6577  002520  6E53               	movwf	_pwmStep^0,c	;volatile
  6578  002522  0012               	return		;funcret
  6579  002524  FFFF               	dw	65535	; errata NOP
  6580  002526                     __end_of_resetStep:
  6581                           	callstack 0
  6582                           
  6583 ;; *************** function _getData *****************
  6584 ;; Defined at:
  6585 ;;		line 35 in file "usart.c"
  6586 ;; Parameters:    Size  Location     Type
  6587 ;;		None
  6588 ;; Auto vars:     Size  Location     Type
  6589 ;;		None
  6590 ;; Return value:  Size  Location     Type
  6591 ;;                  2   17[COMRAM] PTR struct .
  6592 ;; Registers used:
  6593 ;;		wreg, status,2, status,0
  6594 ;; Tracked objects:
  6595 ;;		On entry : 0/0
  6596 ;;		On exit  : 0/0
  6597 ;;		Unchanged: 0/0
  6598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6599 ;;      Params:         2       0       0       0       0       0       0
  6600 ;;      Locals:         0       0       0       0       0       0       0
  6601 ;;      Temps:          0       0       0       0       0       0       0
  6602 ;;      Totals:         2       0       0       0       0       0       0
  6603 ;;Total ram usage:        2 bytes
  6604 ;; Hardware stack levels used:    1
  6605 ;; Hardware stack levels required when called:    4
  6606 ;; This function calls:
  6607 ;;		Nothing
  6608 ;; This function is called by:
  6609 ;;		_executeData
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           	psect	text38
  6614  002498                     __ptext38:
  6615                           	callstack 0
  6616  002498                     _getData:
  6617                           	callstack 0
  6618  002498  FFFF               	dw	65535	; assembler added errata NOP
  6619  00249A                     
  6620                           ;usart.c: 36:     return(&dataSequence[0]);
  6621  00249A  0ED1               	movlw	low _dataSequence
  6622  00249C  6E12               	movwf	?_getData^0,c
  6623  00249E  0E00               	movlw	high _dataSequence
  6624  0024A0  6E13               	movwf	(?_getData+1)^0,c
  6625  0024A2  0012               	return		;funcret
  6626  0024A4  FFFF               	dw	65535	; errata NOP
  6627  0024A6                     __end_of_getData:
  6628                           	callstack 0
  6629                           
  6630 ;; *************** function _clearTM0 *****************
  6631 ;; Defined at:
  6632 ;;		line 35 in file "motors.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;		None
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;		None
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  1    wreg      void 
  6639 ;; Registers used:
  6640 ;;		wreg, status,2
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6646 ;;      Params:         0       0       0       0       0       0       0
  6647 ;;      Locals:         0       0       0       0       0       0       0
  6648 ;;      Temps:          0       0       0       0       0       0       0
  6649 ;;      Totals:         0       0       0       0       0       0       0
  6650 ;;Total ram usage:        0 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    4
  6653 ;; This function calls:
  6654 ;;		Nothing
  6655 ;; This function is called by:
  6656 ;;		_main
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           	psect	text39
  6661  0024A6                     __ptext39:
  6662                           	callstack 0
  6663  0024A6                     _clearTM0:
  6664                           	callstack 0
  6665  0024A6  FFFF               	dw	65535	; assembler added errata NOP
  6666  0024A8                     
  6667                           ;motors.c: 36:     tm0Error = 0;
  6668  0024A8  0E00               	movlw	0
  6669  0024AA  6E51               	movwf	(_tm0Error+1)^0,c
  6670  0024AC  0E00               	movlw	0
  6671  0024AE  6E50               	movwf	_tm0Error^0,c
  6672  0024B0  0012               	return		;funcret
  6673  0024B2  FFFF               	dw	65535	; errata NOP
  6674  0024B4                     __end_of_clearTM0:
  6675                           	callstack 0
  6676                           
  6677 ;; *************** function _isr *****************
  6678 ;; Defined at:
  6679 ;;		line 38 in file "interrupt.c"
  6680 ;; Parameters:    Size  Location     Type
  6681 ;;		None
  6682 ;; Auto vars:     Size  Location     Type
  6683 ;;  temp            1   16[COMRAM] unsigned char 
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  1    wreg      void 
  6686 ;; Registers used:
  6687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6693 ;;      Params:         0       0       0       0       0       0       0
  6694 ;;      Locals:         1       0       0       0       0       0       0
  6695 ;;      Temps:          6       0       0       0       0       0       0
  6696 ;;      Totals:         7       0       0       0       0       0       0
  6697 ;;Total ram usage:        7 bytes
  6698 ;; Hardware stack levels used:    1
  6699 ;; Hardware stack levels required when called:    3
  6700 ;; This function calls:
  6701 ;;		_abortAll
  6702 ;;		_fatalError
  6703 ;;		_increaseStep
  6704 ;;		_retPeriod
  6705 ;;		_setThermRel
  6706 ;;		_setTouchRel
  6707 ;;		_toggleStep
  6708 ;;		_whatsTM0Limit
  6709 ;;		_writeTM0
  6710 ;;		i2_storeData
  6711 ;; This function is called by:
  6712 ;;		Interrupt level 2
  6713 ;; This function uses a non-reentrant model
  6714 ;;
  6715                           
  6716                           	psect	intcode
  6717  000008                     __pintcode:
  6718                           	callstack 0
  6719  000008                     _isr:
  6720                           	callstack 0
  6721  000008  FFFF               	dw	65535	; assembler added errata NOP
  6722                           
  6723                           ;incstack = 0
  6724  00000A  826D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6725  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6726  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6727  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6728  000018  CFF4 F010          	movff	prodh,??_isr+5
  6729  00001C                     
  6730                           ;interrupt.c: 39:     static unsigned int single_cycle = 0;;interrupt.c: 40:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 41:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 44:     if(INTCONbits.T0IF){
  6731  00001C  A4F2               	btfss	242,2,c	;volatile
  6732  00001E  EF13  F000         	goto	i2u252_41
  6733  000022  EF16  F000         	goto	i2u252_40
  6734  000026                     i2u252_41:
  6735  000026  FFFF               	dw	65535	; assembler added errata NOP
  6736  000028  EF2C  F000         	goto	i2l3398
  6737  00002C                     i2u252_40:
  6738  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6739  00002E                     
  6740                           ;interrupt.c: 45:         INTCONbits.T0IF = 0;
  6741  00002E  94F2               	bcf	242,2,c	;volatile
  6742  000030                     
  6743                           ;interrupt.c: 48:         tm0Count++;
  6744  000030  2A5A               	incf	isr@tm0Count^0,f,c
  6745  000032                     
  6746                           ;interrupt.c: 50:         if(tm0Count >= whatsTM0Limit()){
  6747  000032  ECB2  F012         	call	_whatsTM0Limit	;wreg free
  6748  000036  6E0B               	movwf	??_isr^0,c
  6749  000038  500B               	movf	??_isr^0,w,c
  6750  00003A  5C5A               	subwf	isr@tm0Count^0,w,c
  6751  00003C  A0D8               	btfss	status,0,c
  6752  00003E  EF23  F000         	goto	i2u253_41
  6753  000042  EF26  F000         	goto	i2u253_40
  6754  000046                     i2u253_41:
  6755  000046  FFFF               	dw	65535	; assembler added errata NOP
  6756  000048  EF2C  F000         	goto	i2l3398
  6757  00004C                     i2u253_40:
  6758  00004C  FFFF               	dw	65535	; assembler added errata NOP
  6759  00004E                     
  6760                           ;interrupt.c: 51:             T0CONbits.TMR0ON = 0;
  6761  00004E  9ED5               	bcf	213,7,c	;volatile
  6762  000050                     
  6763                           ;interrupt.c: 52:             tm0Count = 0;
  6764  000050  0E00               	movlw	0
  6765  000052  6E5A               	movwf	isr@tm0Count^0,c
  6766  000054                     
  6767                           ;interrupt.c: 53:             writeTM0();
  6768  000054  EC5A  F012         	call	_writeTM0	;wreg free
  6769  000058                     i2l3398:
  6770  000058  FFFF               	dw	65535	; assembler added errata NOP
  6771                           
  6772                           ;interrupt.c: 58:     if(PIR1bits.TMR1IF){
  6773  00005A  A09E               	btfss	158,0,c	;volatile
  6774  00005C  EF32  F000         	goto	i2u254_41
  6775  000060  EF35  F000         	goto	i2u254_40
  6776  000064                     i2u254_41:
  6777  000064  FFFF               	dw	65535	; assembler added errata NOP
  6778  000066  EF45  F000         	goto	i2l3406
  6779  00006A                     i2u254_40:
  6780  00006A  FFFF               	dw	65535	; assembler added errata NOP
  6781  00006C                     
  6782                           ;interrupt.c: 59:         PIR1bits.TMR1IF = 0;
  6783  00006C  909E               	bcf	158,0,c	;volatile
  6784  00006E                     
  6785                           ;interrupt.c: 60:         if(fatalError()){
  6786  00006E  ECBA  F012         	call	_fatalError	;wreg free
  6787  000072  0900               	iorlw	0
  6788  000074  B4D8               	btfsc	status,2,c
  6789  000076  EF3F  F000         	goto	i2u255_41
  6790  00007A  EF42  F000         	goto	i2u255_40
  6791  00007E                     i2u255_41:
  6792  00007E  FFFF               	dw	65535	; assembler added errata NOP
  6793  000080  EF45  F000         	goto	i2l3406
  6794  000084                     i2u255_40:
  6795  000084  FFFF               	dw	65535	; assembler added errata NOP
  6796  000086                     
  6797                           ;interrupt.c: 61:             abortAll();
  6798  000086  EC2D  F012         	call	_abortAll	;wreg free
  6799  00008A                     i2l3406:
  6800  00008A  FFFF               	dw	65535	; assembler added errata NOP
  6801                           
  6802                           ;interrupt.c: 66:     if(PIR1bits.TMR2IF){
  6803  00008C  A29E               	btfss	158,1,c	;volatile
  6804  00008E  EF4B  F000         	goto	i2u256_41
  6805  000092  EF4E  F000         	goto	i2u256_40
  6806  000096                     i2u256_41:
  6807  000096  FFFF               	dw	65535	; assembler added errata NOP
  6808  000098  EF7C  F000         	goto	i2l3426
  6809  00009C                     i2u256_40:
  6810  00009C  FFFF               	dw	65535	; assembler added errata NOP
  6811  00009E                     
  6812                           ;interrupt.c: 67:         PIR1bits.TMR2IF = 0;
  6813  00009E  929E               	bcf	158,1,c	;volatile
  6814  0000A0                     
  6815                           ;interrupt.c: 68:         single_cycle++;
  6816  0000A0  4A48               	infsnz	isr@single_cycle^0,f,c
  6817  0000A2  2A49               	incf	(isr@single_cycle+1)^0,f,c
  6818  0000A4                     
  6819                           ;interrupt.c: 71:         if(single_cycle > retPeriod()){
  6820  0000A4  EC61  F012         	call	_retPeriod	;wreg free
  6821  0000A8  5048               	movf	isr@single_cycle^0,w,c
  6822  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  6823  0000AC  5049               	movf	(isr@single_cycle+1)^0,w,c
  6824  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  6825  0000B0  B0D8               	btfsc	status,0,c
  6826  0000B2  EF5D  F000         	goto	i2u257_41
  6827  0000B6  EF60  F000         	goto	i2u257_40
  6828  0000BA                     i2u257_41:
  6829  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  6830  0000BC  EF7C  F000         	goto	i2l3426
  6831  0000C0                     i2u257_40:
  6832  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  6833  0000C2                     
  6834                           ;interrupt.c: 72:             completeStep++;
  6835  0000C2  2A59               	incf	isr@completeStep^0,f,c
  6836  0000C4                     
  6837                           ;interrupt.c: 75:             if(completeStep != 0 && !(completeStep % 2)){
  6838  0000C4  5059               	movf	isr@completeStep^0,w,c
  6839  0000C6  B4D8               	btfsc	status,2,c
  6840  0000C8  EF68  F000         	goto	i2u258_41
  6841  0000CC  EF6B  F000         	goto	i2u258_40
  6842  0000D0                     i2u258_41:
  6843  0000D0  FFFF               	dw	65535	; assembler added errata NOP
  6844  0000D2  EF79  F000         	goto	i2l3424
  6845  0000D6                     i2u258_40:
  6846  0000D6  FFFF               	dw	65535	; assembler added errata NOP
  6847  0000D8  B059               	btfsc	isr@completeStep^0,0,c
  6848  0000DA  EF71  F000         	goto	i2u259_41
  6849  0000DE  EF74  F000         	goto	i2u259_40
  6850  0000E2                     i2u259_41:
  6851  0000E2  FFFF               	dw	65535	; assembler added errata NOP
  6852  0000E4  EF79  F000         	goto	i2l3424
  6853  0000E8                     i2u259_40:
  6854  0000E8  FFFF               	dw	65535	; assembler added errata NOP
  6855  0000EA                     
  6856                           ;interrupt.c: 77:                 completeStep = 0;
  6857  0000EA  0E00               	movlw	0
  6858  0000EC  6E59               	movwf	isr@completeStep^0,c
  6859  0000EE                     
  6860                           ;interrupt.c: 80:                 increaseStep();
  6861  0000EE  ECB6  F012         	call	_increaseStep	;wreg free
  6862  0000F2                     i2l3424:
  6863  0000F2  FFFF               	dw	65535	; assembler added errata NOP
  6864                           
  6865                           ;interrupt.c: 85:             toggleStep();
  6866  0000F4  EC93  F012         	call	_toggleStep	;wreg free
  6867  0000F8                     i2l3426:
  6868  0000F8  FFFF               	dw	65535	; assembler added errata NOP
  6869                           
  6870                           ;interrupt.c: 90:     if(PIR1bits.ADIF){
  6871  0000FA  AC9E               	btfss	158,6,c	;volatile
  6872  0000FC  EF82  F000         	goto	i2u260_41
  6873  000100  EF85  F000         	goto	i2u260_40
  6874  000104                     i2u260_41:
  6875  000104  FFFF               	dw	65535	; assembler added errata NOP
  6876  000106  EFB2  F000         	goto	i2l3438
  6877  00010A                     i2u260_40:
  6878  00010A  FFFF               	dw	65535	; assembler added errata NOP
  6879  00010C                     
  6880                           ;interrupt.c: 91:         PIR1bits.ADIF = 0;
  6881  00010C  9C9E               	bcf	158,6,c	;volatile
  6882                           
  6883                           ;interrupt.c: 94:         ADC_res = ADRESL;
  6884  00010E  CFC3 F04A          	movff	4035,_ADC_res	;volatile
  6885  000112  6A4B               	clrf	(_ADC_res+1)^0,c
  6886  000114                     
  6887                           ;interrupt.c: 95:         ADC_res |= (ADRESH << 8);
  6888  000114  50C4               	movf	196,w,c	;volatile
  6889  000116  6E0C               	movwf	(??_isr+1)^0,c
  6890  000118  6A0B               	clrf	??_isr^0,c
  6891  00011A  500B               	movf	??_isr^0,w,c
  6892  00011C  124A               	iorwf	_ADC_res^0,f,c
  6893  00011E  500C               	movf	(??_isr+1)^0,w,c
  6894  000120  124B               	iorwf	(_ADC_res+1)^0,f,c
  6895                           
  6896                           ;interrupt.c: 98:         if(ADC_res > therm_pressure){
  6897  000122  044A               	decf	_ADC_res^0,w,c
  6898  000124  0E04               	movlw	4
  6899  000126  584B               	subwfb	(_ADC_res+1)^0,w,c
  6900  000128  A0D8               	btfss	status,0,c
  6901  00012A  EF99  F000         	goto	i2u261_41
  6902  00012E  EF9C  F000         	goto	i2u261_40
  6903  000132                     i2u261_41:
  6904  000132  FFFF               	dw	65535	; assembler added errata NOP
  6905  000134  EFA3  F000         	goto	i2l3434
  6906  000138                     i2u261_40:
  6907  000138  FFFF               	dw	65535	; assembler added errata NOP
  6908  00013A                     
  6909                           ;interrupt.c: 100:             setTouchRel();
  6910  00013A  EC98  F012         	call	_setTouchRel	;wreg free
  6911                           
  6912                           ;interrupt.c: 101:             setThermRel();
  6913  00013E  EC9D  F012         	call	_setThermRel	;wreg free
  6914                           
  6915                           ;interrupt.c: 102:         }else if(ADC_res > touch_pressure){
  6916  000142  EFB2  F000         	goto	i2l3438
  6917  000146                     i2l3434:
  6918  000146  FFFF               	dw	65535	; assembler added errata NOP
  6919  000148  044A               	decf	_ADC_res^0,w,c
  6920  00014A  0E02               	movlw	2
  6921  00014C  584B               	subwfb	(_ADC_res+1)^0,w,c
  6922  00014E  A0D8               	btfss	status,0,c
  6923  000150  EFAC  F000         	goto	i2u262_41
  6924  000154  EFAF  F000         	goto	i2u262_40
  6925  000158                     i2u262_41:
  6926  000158  FFFF               	dw	65535	; assembler added errata NOP
  6927  00015A  EFB2  F000         	goto	i2l3438
  6928  00015E                     i2u262_40:
  6929  00015E  FFFF               	dw	65535	; assembler added errata NOP
  6930  000160                     
  6931                           ;interrupt.c: 104:             setTouchRel();
  6932  000160  EC98  F012         	call	_setTouchRel	;wreg free
  6933  000164                     i2l3438:
  6934  000164  FFFF               	dw	65535	; assembler added errata NOP
  6935                           
  6936                           ;interrupt.c: 109:     if(PIR1bits.RC1IF){
  6937  000166  AA9E               	btfss	158,5,c	;volatile
  6938  000168  EFB8  F000         	goto	i2u263_41
  6939  00016C  EFBB  F000         	goto	i2u263_40
  6940  000170                     i2u263_41:
  6941  000170  FFFF               	dw	65535	; assembler added errata NOP
  6942  000172  EFC2  F000         	goto	i2l469
  6943  000176                     i2u263_40:
  6944  000176  FFFF               	dw	65535	; assembler added errata NOP
  6945  000178                     
  6946                           ;interrupt.c: 110:         PIR1bits.RC1IF = 0;
  6947  000178  9A9E               	bcf	158,5,c	;volatile
  6948                           
  6949                           ;interrupt.c: 113:         unsigned char temp = RCREG1;
  6950  00017A  CFAE F011          	movff	4014,isr@temp	;volatile
  6951  00017E                     
  6952                           ;interrupt.c: 115:         storeData(temp);
  6953  00017E  5011               	movf	isr@temp^0,w,c
  6954  000180  ECD9  F00B         	call	i2_storeData
  6955  000184                     i2l469:
  6956  000184  FFFF               	dw	65535	; assembler added errata NOP
  6957  000186  C010  FFF4         	movff	??_isr+5,prodh
  6958  00018A  C00F  FFF3         	movff	??_isr+4,prodl
  6959  00018E  C00E  FFDA         	movff	??_isr+3,fsr2h
  6960  000192  C00D  FFD9         	movff	??_isr+2,fsr2l
  6961  000196  926D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6962  000198  0011               	retfie		f
  6963  00019A  FFFF               	dw	65535	; errata NOP
  6964  00019C                     __end_of_isr:
  6965                           	callstack 0
  6966                           
  6967 ;; *************** function i2_storeData *****************
  6968 ;; Defined at:
  6969 ;;		line 164 in file "usart.c"
  6970 ;; Parameters:    Size  Location     Type
  6971 ;;  data            1    wreg     unsigned char 
  6972 ;; Auto vars:     Size  Location     Type
  6973 ;;  data            1    9[COMRAM] unsigned char 
  6974 ;; Return value:  Size  Location     Type
  6975 ;;                  1    wreg      void 
  6976 ;; Registers used:
  6977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6978 ;; Tracked objects:
  6979 ;;		On entry : 0/0
  6980 ;;		On exit  : 0/0
  6981 ;;		Unchanged: 0/0
  6982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6983 ;;      Params:         0       0       0       0       0       0       0
  6984 ;;      Locals:         1       0       0       0       0       0       0
  6985 ;;      Temps:          2       0       0       0       0       0       0
  6986 ;;      Totals:         3       0       0       0       0       0       0
  6987 ;;Total ram usage:        3 bytes
  6988 ;; Hardware stack levels used:    1
  6989 ;; Hardware stack levels required when called:    2
  6990 ;; This function calls:
  6991 ;;		i2_printError
  6992 ;; This function is called by:
  6993 ;;		_isr
  6994 ;; This function uses a non-reentrant model
  6995 ;;
  6996                           
  6997                           	psect	text41
  6998  0017B2                     __ptext41:
  6999                           	callstack 0
  7000  0017B2                     i2_storeData:
  7001                           	callstack 0
  7002  0017B2  FFFF               	dw	65535	; assembler added errata NOP
  7003                           
  7004                           ;incstack = 0
  7005                           ;i2storeData@data stored from wreg
  7006  0017B4  6E0A               	movwf	i2storeData@data^0,c
  7007  0017B6                     
  7008                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  7009  0017B6  0EC8               	movlw	low storeData@receivedMex
  7010  0017B8  2455               	addwf	storeData@counter^0,w,c
  7011  0017BA  6ED9               	movwf	fsr2l,c
  7012  0017BC  6ADA               	clrf	fsr2h,c
  7013  0017BE  0E00               	movlw	high storeData@receivedMex
  7014  0017C0  22DA               	addwfc	fsr2h,f,c
  7015  0017C2  C00A  FFDF         	movff	i2storeData@data,indf2
  7016  0017C6                     
  7017                           ;usart.c: 175:     counter++;
  7018  0017C6  2A55               	incf	storeData@counter^0,f,c
  7019                           
  7020                           ;usart.c: 178:     switch(receivedMex[0]){
  7021  0017C8  EFF5  F00B         	goto	i2l3284
  7022  0017CC                     i2l3276:
  7023  0017CC  FFFF               	dw	65535	; assembler added errata NOP
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;usart.c: 180:             mexLength = 5;
  7027  0017CE  0E05               	movlw	5
  7028  0017D0  6E6C               	movwf	storeData@mexLength^0,c
  7029                           
  7030                           ;usart.c: 181:             break;
  7031  0017D2  EF11  F00C         	goto	i2l3286
  7032  0017D6                     i2l3278:
  7033  0017D6  FFFF               	dw	65535	; assembler added errata NOP
  7034                           
  7035                           ; BSR set to: 0
  7036                           ;usart.c: 183:             mexLength = 9;
  7037  0017D8  0E09               	movlw	9
  7038  0017DA  6E6C               	movwf	storeData@mexLength^0,c
  7039                           
  7040                           ;usart.c: 184:             break;
  7041  0017DC  EF11  F00C         	goto	i2l3286
  7042  0017E0                     i2l3280:
  7043  0017E0  FFFF               	dw	65535	; assembler added errata NOP
  7044                           
  7045                           ; BSR set to: 0
  7046                           ;usart.c: 186:             mexLength = 1;
  7047  0017E2  0E01               	movlw	1
  7048  0017E4  6E6C               	movwf	storeData@mexLength^0,c
  7049                           
  7050                           ;usart.c: 187:             break;
  7051  0017E6  EF11  F00C         	goto	i2l3286
  7052  0017EA                     i2l3284:
  7053  0017EA  FFFF               	dw	65535	; assembler added errata NOP
  7054  0017EC  0100               	movlb	0	; () banked
  7055  0017EE  51C8               	movf	storeData@receivedMex& (0+255),w,b
  7056  0017F0  6E08               	movwf	??i2_storeData^0,c
  7057  0017F2  6A09               	clrf	(??i2_storeData+1)^0,c
  7058                           
  7059                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7060                           ; Switch size 1, requested type "simple"
  7061                           ; Number of cases is 1, Range of values is 0 to 0
  7062                           ; switch strategies available:
  7063                           ; Name         Instructions Cycles
  7064                           ; simple_byte            4     3 (average)
  7065                           ;	Chosen strategy is simple_byte
  7066  0017F4  5009               	movf	(??i2_storeData+1)^0,w,c
  7067  0017F6  0A00               	xorlw	0	; case 0
  7068  0017F8  B4D8               	btfsc	status,2,c
  7069  0017FA  EF01  F00C         	goto	i2l4686
  7070  0017FE  EF11  F00C         	goto	i2l3286
  7071  001802                     i2l4686:
  7072  001802  FFFF               	dw	65535	; assembler added errata NOP
  7073                           
  7074                           ; BSR set to: 0
  7075                           ; Switch size 1, requested type "simple"
  7076                           ; Number of cases is 3, Range of values is 0 to 2
  7077                           ; switch strategies available:
  7078                           ; Name         Instructions Cycles
  7079                           ; simple_byte           10     6 (average)
  7080                           ;	Chosen strategy is simple_byte
  7081  001804  5008               	movf	??i2_storeData^0,w,c
  7082  001806  0A00               	xorlw	0	; case 0
  7083  001808  B4D8               	btfsc	status,2,c
  7084  00180A  EFE6  F00B         	goto	i2l3276
  7085  00180E  0A01               	xorlw	1	; case 1
  7086  001810  B4D8               	btfsc	status,2,c
  7087  001812  EFEB  F00B         	goto	i2l3278
  7088  001816  0A03               	xorlw	3	; case 2
  7089  001818  B4D8               	btfsc	status,2,c
  7090  00181A  EFF0  F00B         	goto	i2l3280
  7091  00181E  EF11  F00C         	goto	i2l3286
  7092  001822                     i2l3286:
  7093  001822  FFFF               	dw	65535	; assembler added errata NOP
  7094                           
  7095                           ; BSR set to: 0
  7096                           ;usart.c: 194:     if(counter >= mexLength){
  7097  001824  506C               	movf	storeData@mexLength^0,w,c
  7098  001826  5C55               	subwf	storeData@counter^0,w,c
  7099  001828  A0D8               	btfss	status,0,c
  7100  00182A  EF19  F00C         	goto	i2u245_41
  7101  00182E  EF1C  F00C         	goto	i2u245_40
  7102  001832                     i2u245_41:
  7103  001832  FFFF               	dw	65535	; assembler added errata NOP
  7104  001834  EF94  F00C         	goto	i2l583
  7105  001838                     i2u245_40:
  7106  001838  FFFF               	dw	65535	; assembler added errata NOP
  7107  00183A                     
  7108                           ; BSR set to: 0
  7109                           ;usart.c: 195:         counter = 0;
  7110  00183A  0E00               	movlw	0
  7111  00183C  6E55               	movwf	storeData@counter^0,c
  7112                           
  7113                           ;usart.c: 198:         switch(receivedMex[0]){
  7114  00183E  EF79  F00C         	goto	i2l3308
  7115  001842                     i2l3290:
  7116  001842  FFFF               	dw	65535	; assembler added errata NOP
  7117                           
  7118                           ; BSR set to: 0
  7119                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7120  001844  5058               	movf	_dataCounter^0,w,c
  7121  001846  0D04               	mullw	4
  7122  001848  0ED1               	movlw	low _dataSequence
  7123  00184A  24F3               	addwf	243,w,c
  7124  00184C  6ED9               	movwf	fsr2l,c
  7125  00184E  0E00               	movlw	high _dataSequence
  7126  001850  20F4               	addwfc	prodh,w,c
  7127  001852  6EDA               	movwf	fsr2h,c
  7128  001854  C0C9  FFDF         	movff	storeData@receivedMex+1,indf2
  7129                           
  7130                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 10;
  7131  001858  5058               	movf	_dataCounter^0,w,c
  7132  00185A  0D04               	mullw	4
  7133  00185C  0ED2               	movlw	low (_dataSequence+1)
  7134  00185E  24F3               	addwf	243,w,c
  7135  001860  6ED9               	movwf	fsr2l,c
  7136  001862  0E00               	movlw	high (_dataSequence+1)
  7137  001864  20F4               	addwfc	prodh,w,c
  7138  001866  6EDA               	movwf	fsr2h,c
  7139  001868  51CA               	movf	(storeData@receivedMex+2)& (0+255),w,b
  7140  00186A  0D0A               	mullw	10
  7141  00186C  CFF3 FFDF          	movff	prodl,indf2
  7142                           
  7143                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 10;
  7144  001870  5058               	movf	_dataCounter^0,w,c
  7145  001872  0D04               	mullw	4
  7146  001874  0ED3               	movlw	low (_dataSequence+2)
  7147  001876  24F3               	addwf	243,w,c
  7148  001878  6ED9               	movwf	fsr2l,c
  7149  00187A  0E00               	movlw	high (_dataSequence+2)
  7150  00187C  20F4               	addwfc	prodh,w,c
  7151  00187E  6EDA               	movwf	fsr2h,c
  7152  001880  51CB               	movf	(storeData@receivedMex+3)& (0+255),w,b
  7153  001882  0D0A               	mullw	10
  7154  001884  CFF3 FFDF          	movff	prodl,indf2
  7155                           
  7156                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7157  001888  5058               	movf	_dataCounter^0,w,c
  7158  00188A  0D04               	mullw	4
  7159  00188C  0ED4               	movlw	low (_dataSequence+3)
  7160  00188E  24F3               	addwf	243,w,c
  7161  001890  6ED9               	movwf	fsr2l,c
  7162  001892  0E00               	movlw	high (_dataSequence+3)
  7163  001894  20F4               	addwfc	prodh,w,c
  7164  001896  6EDA               	movwf	fsr2h,c
  7165  001898  C0CC  FFDF         	movff	storeData@receivedMex+4,indf2
  7166  00189C                     
  7167                           ; BSR set to: 0
  7168                           ;usart.c: 205:                 dataCounter++;
  7169  00189C  2A58               	incf	_dataCounter^0,f,c
  7170                           
  7171                           ;usart.c: 206:                 break;
  7172  00189E  EF94  F00C         	goto	i2l583
  7173  0018A2                     i2l580:
  7174  0018A2  FFFF               	dw	65535	; assembler added errata NOP
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  7178  0018A4  C0C9  F0E5         	movff	storeData@receivedMex+1,_newSequenceData
  7179                           
  7180                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  7181  0018A8  C0CA  F0E6         	movff	storeData@receivedMex+2,_newSequenceData+1
  7182  0018AC                     
  7183                           ; BSR set to: 0
  7184                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 10;
  7185  0018AC  51CB               	movf	(storeData@receivedMex+3)& (0+255),w,b
  7186  0018AE  0D0A               	mullw	10
  7187  0018B0  CFF3 F0E7          	movff	prodl,_newSequenceData+2
  7188                           
  7189                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 10;
  7190  0018B4  51CC               	movf	(storeData@receivedMex+4)& (0+255),w,b
  7191  0018B6  0D0A               	mullw	10
  7192  0018B8  CFF3 F0E8          	movff	prodl,_newSequenceData+3
  7193  0018BC                     
  7194                           ; BSR set to: 0
  7195                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  7196  0018BC  C0CD  F0E9         	movff	storeData@receivedMex+5,_newSequenceData+4
  7197                           
  7198                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 10;
  7199  0018C0  51CE               	movf	(storeData@receivedMex+6)& (0+255),w,b
  7200  0018C2  0D0A               	mullw	10
  7201  0018C4  CFF3 F0EA          	movff	prodl,_newSequenceData+5
  7202                           
  7203                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 10;
  7204  0018C8  51CF               	movf	(storeData@receivedMex+7)& (0+255),w,b
  7205  0018CA  0D0A               	mullw	10
  7206  0018CC  CFF3 F0EB          	movff	prodl,_newSequenceData+6
  7207  0018D0                     
  7208                           ; BSR set to: 0
  7209                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  7210  0018D0  C0D0  F0EC         	movff	storeData@receivedMex+8,_newSequenceData+7
  7211  0018D4                     
  7212                           ; BSR set to: 0
  7213                           ;usart.c: 218:                 _newSequence = 1;
  7214  0018D4  0E01               	movlw	1
  7215  0018D6  6E56               	movwf	__newSequence^0,c
  7216                           
  7217                           ;usart.c: 219:                 break;
  7218  0018D8  EF94  F00C         	goto	i2l583
  7219  0018DC                     i2l3302:
  7220  0018DC  FFFF               	dw	65535	; assembler added errata NOP
  7221                           
  7222                           ; BSR set to: 0
  7223                           ;usart.c: 222:                 _fatalError = 1;
  7224  0018DE  0E01               	movlw	1
  7225  0018E0  6E57               	movwf	__fatalError^0,c
  7226                           
  7227                           ;usart.c: 223:                 break;
  7228  0018E2  EF94  F00C         	goto	i2l583
  7229  0018E6                     i2l3304:
  7230  0018E6  FFFF               	dw	65535	; assembler added errata NOP
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;usart.c: 226:                 printError(8);
  7234  0018E8  0E08               	movlw	8
  7235  0018EA  ECC0  F00D         	call	i2_printError
  7236                           
  7237                           ;usart.c: 227:                 break;
  7238  0018EE  EF94  F00C         	goto	i2l583
  7239  0018F2                     i2l3308:
  7240  0018F2  FFFF               	dw	65535	; assembler added errata NOP
  7241                           
  7242                           ; BSR set to: 0
  7243  0018F4  51C8               	movf	storeData@receivedMex& (0+255),w,b
  7244  0018F6  6E08               	movwf	??i2_storeData^0,c
  7245  0018F8  6A09               	clrf	(??i2_storeData+1)^0,c
  7246                           
  7247                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7248                           ; Switch size 1, requested type "simple"
  7249                           ; Number of cases is 1, Range of values is 0 to 0
  7250                           ; switch strategies available:
  7251                           ; Name         Instructions Cycles
  7252                           ; simple_byte            4     3 (average)
  7253                           ;	Chosen strategy is simple_byte
  7254  0018FA  5009               	movf	(??i2_storeData+1)^0,w,c
  7255  0018FC  0A00               	xorlw	0	; case 0
  7256  0018FE  B4D8               	btfsc	status,2,c
  7257  001900  EF84  F00C         	goto	i2l4688
  7258  001904  EF73  F00C         	goto	i2l3304
  7259  001908                     i2l4688:
  7260  001908  FFFF               	dw	65535	; assembler added errata NOP
  7261                           
  7262                           ; BSR set to: 0
  7263                           ; Switch size 1, requested type "simple"
  7264                           ; Number of cases is 3, Range of values is 0 to 2
  7265                           ; switch strategies available:
  7266                           ; Name         Instructions Cycles
  7267                           ; simple_byte           10     6 (average)
  7268                           ;	Chosen strategy is simple_byte
  7269  00190A  5008               	movf	??i2_storeData^0,w,c
  7270  00190C  0A00               	xorlw	0	; case 0
  7271  00190E  B4D8               	btfsc	status,2,c
  7272  001910  EF21  F00C         	goto	i2l3290
  7273  001914  0A01               	xorlw	1	; case 1
  7274  001916  B4D8               	btfsc	status,2,c
  7275  001918  EF51  F00C         	goto	i2l580
  7276  00191C  0A03               	xorlw	3	; case 2
  7277  00191E  B4D8               	btfsc	status,2,c
  7278  001920  EF6E  F00C         	goto	i2l3302
  7279  001924  EF73  F00C         	goto	i2l3304
  7280  001928                     i2l583:
  7281  001928  FFFF               	dw	65535	; assembler added errata NOP
  7282  00192A  0012               	return		;funcret
  7283  00192C  FFFF               	dw	65535	; errata NOP
  7284  00192E                     __end_ofi2_storeData:
  7285                           	callstack 0
  7286                           
  7287 ;; *************** function _writeTM0 *****************
  7288 ;; Defined at:
  7289 ;;		line 28 in file "motors.c"
  7290 ;; Parameters:    Size  Location     Type
  7291 ;;		None
  7292 ;; Auto vars:     Size  Location     Type
  7293 ;;		None
  7294 ;; Return value:  Size  Location     Type
  7295 ;;                  1    wreg      void 
  7296 ;; Registers used:
  7297 ;;		wreg, status,2
  7298 ;; Tracked objects:
  7299 ;;		On entry : 0/0
  7300 ;;		On exit  : 0/0
  7301 ;;		Unchanged: 0/0
  7302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7303 ;;      Params:         0       0       0       0       0       0       0
  7304 ;;      Locals:         0       0       0       0       0       0       0
  7305 ;;      Temps:          0       0       0       0       0       0       0
  7306 ;;      Totals:         0       0       0       0       0       0       0
  7307 ;;Total ram usage:        0 bytes
  7308 ;; Hardware stack levels used:    1
  7309 ;; This function calls:
  7310 ;;		Nothing
  7311 ;; This function is called by:
  7312 ;;		_isr
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           	psect	text42
  7317  0024B4                     __ptext42:
  7318                           	callstack 0
  7319  0024B4                     _writeTM0:
  7320                           	callstack 0
  7321  0024B4  FFFF               	dw	65535	; assembler added errata NOP
  7322  0024B6                     
  7323                           ;motors.c: 29:     tm0Error = 1;
  7324  0024B6  0E00               	movlw	0
  7325  0024B8  6E51               	movwf	(_tm0Error+1)^0,c
  7326  0024BA  0E01               	movlw	1
  7327  0024BC  6E50               	movwf	_tm0Error^0,c
  7328  0024BE  0012               	return		;funcret
  7329  0024C0  FFFF               	dw	65535	; errata NOP
  7330  0024C2                     __end_of_writeTM0:
  7331                           	callstack 0
  7332                           
  7333 ;; *************** function _whatsTM0Limit *****************
  7334 ;; Defined at:
  7335 ;;		line 42 in file "motors.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;		None
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;		None
  7340 ;; Return value:  Size  Location     Type
  7341 ;;                  1    wreg      unsigned char 
  7342 ;; Registers used:
  7343 ;;		wreg, status,2
  7344 ;; Tracked objects:
  7345 ;;		On entry : 0/0
  7346 ;;		On exit  : 0/0
  7347 ;;		Unchanged: 0/0
  7348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7349 ;;      Params:         0       0       0       0       0       0       0
  7350 ;;      Locals:         0       0       0       0       0       0       0
  7351 ;;      Temps:          0       0       0       0       0       0       0
  7352 ;;      Totals:         0       0       0       0       0       0       0
  7353 ;;Total ram usage:        0 bytes
  7354 ;; Hardware stack levels used:    1
  7355 ;; This function calls:
  7356 ;;		Nothing
  7357 ;; This function is called by:
  7358 ;;		_isr
  7359 ;; This function uses a non-reentrant model
  7360 ;;
  7361                           
  7362                           	psect	text43
  7363  002564                     __ptext43:
  7364                           	callstack 0
  7365  002564                     _whatsTM0Limit:
  7366                           	callstack 0
  7367  002564  FFFF               	dw	65535	; assembler added errata NOP
  7368  002566                     
  7369                           ;motors.c: 43:     return(tm0Limit);
  7370  002566  505D               	movf	_tm0Limit^0,w,c
  7371  002568  0012               	return		;funcret
  7372  00256A  FFFF               	dw	65535	; errata NOP
  7373  00256C                     __end_of_whatsTM0Limit:
  7374                           	callstack 0
  7375                           
  7376 ;; *************** function _toggleStep *****************
  7377 ;; Defined at:
  7378 ;;		line 92 in file "timer.c"
  7379 ;; Parameters:    Size  Location     Type
  7380 ;;		None
  7381 ;; Auto vars:     Size  Location     Type
  7382 ;;		None
  7383 ;; Return value:  Size  Location     Type
  7384 ;;                  1    wreg      void 
  7385 ;; Registers used:
  7386 ;;		wreg, status,2
  7387 ;; Tracked objects:
  7388 ;;		On entry : 0/0
  7389 ;;		On exit  : 0/0
  7390 ;;		Unchanged: 0/0
  7391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7392 ;;      Params:         0       0       0       0       0       0       0
  7393 ;;      Locals:         0       0       0       0       0       0       0
  7394 ;;      Temps:          0       0       0       0       0       0       0
  7395 ;;      Totals:         0       0       0       0       0       0       0
  7396 ;;Total ram usage:        0 bytes
  7397 ;; Hardware stack levels used:    1
  7398 ;; This function calls:
  7399 ;;		Nothing
  7400 ;; This function is called by:
  7401 ;;		_isr
  7402 ;; This function uses a non-reentrant model
  7403 ;;
  7404                           
  7405                           	psect	text44
  7406  002526                     __ptext44:
  7407                           	callstack 0
  7408  002526                     _toggleStep:
  7409                           	callstack 0
  7410  002526  FFFF               	dw	65535	; assembler added errata NOP
  7411  002528                     
  7412                           ;timer.c: 93:     stepToggle = 1;
  7413  002528  0E01               	movlw	1
  7414  00252A  6E52               	movwf	_stepToggle^0,c	;volatile
  7415  00252C  0012               	return		;funcret
  7416  00252E  FFFF               	dw	65535	; errata NOP
  7417  002530                     __end_of_toggleStep:
  7418                           	callstack 0
  7419                           
  7420 ;; *************** function _setTouchRel *****************
  7421 ;; Defined at:
  7422 ;;		line 86 in file "adc.c"
  7423 ;; Parameters:    Size  Location     Type
  7424 ;;		None
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;		None
  7427 ;; Return value:  Size  Location     Type
  7428 ;;                  1    wreg      void 
  7429 ;; Registers used:
  7430 ;;		wreg, status,2
  7431 ;; Tracked objects:
  7432 ;;		On entry : 0/0
  7433 ;;		On exit  : 0/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7436 ;;      Params:         0       0       0       0       0       0       0
  7437 ;;      Locals:         0       0       0       0       0       0       0
  7438 ;;      Temps:          0       0       0       0       0       0       0
  7439 ;;      Totals:         0       0       0       0       0       0       0
  7440 ;;Total ram usage:        0 bytes
  7441 ;; Hardware stack levels used:    1
  7442 ;; This function calls:
  7443 ;;		Nothing
  7444 ;; This function is called by:
  7445 ;;		_isr
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           	psect	text45
  7450  002530                     __ptext45:
  7451                           	callstack 0
  7452  002530                     _setTouchRel:
  7453                           	callstack 0
  7454  002530  FFFF               	dw	65535	; assembler added errata NOP
  7455  002532                     
  7456                           ;adc.c: 87:     touch_rel = 1;
  7457  002532  0E01               	movlw	1
  7458  002534  6E5C               	movwf	_touch_rel^0,c	;volatile
  7459  002536  0012               	return		;funcret
  7460  002538  FFFF               	dw	65535	; errata NOP
  7461  00253A                     __end_of_setTouchRel:
  7462                           	callstack 0
  7463                           
  7464 ;; *************** function _setThermRel *****************
  7465 ;; Defined at:
  7466 ;;		line 79 in file "adc.c"
  7467 ;; Parameters:    Size  Location     Type
  7468 ;;		None
  7469 ;; Auto vars:     Size  Location     Type
  7470 ;;		None
  7471 ;; Return value:  Size  Location     Type
  7472 ;;                  1    wreg      void 
  7473 ;; Registers used:
  7474 ;;		wreg, status,2
  7475 ;; Tracked objects:
  7476 ;;		On entry : 0/0
  7477 ;;		On exit  : 0/0
  7478 ;;		Unchanged: 0/0
  7479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7480 ;;      Params:         0       0       0       0       0       0       0
  7481 ;;      Locals:         0       0       0       0       0       0       0
  7482 ;;      Temps:          0       0       0       0       0       0       0
  7483 ;;      Totals:         0       0       0       0       0       0       0
  7484 ;;Total ram usage:        0 bytes
  7485 ;; Hardware stack levels used:    1
  7486 ;; This function calls:
  7487 ;;		Nothing
  7488 ;; This function is called by:
  7489 ;;		_isr
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           	psect	text46
  7494  00253A                     __ptext46:
  7495                           	callstack 0
  7496  00253A                     _setThermRel:
  7497                           	callstack 0
  7498  00253A  FFFF               	dw	65535	; assembler added errata NOP
  7499  00253C                     
  7500                           ;adc.c: 80:     therm_rel = 1;
  7501  00253C  0E01               	movlw	1
  7502  00253E  6E5B               	movwf	_therm_rel^0,c	;volatile
  7503  002540  0012               	return		;funcret
  7504  002542  FFFF               	dw	65535	; errata NOP
  7505  002544                     __end_of_setThermRel:
  7506                           	callstack 0
  7507                           
  7508 ;; *************** function _retPeriod *****************
  7509 ;; Defined at:
  7510 ;;		line 100 in file "timer.c"
  7511 ;; Parameters:    Size  Location     Type
  7512 ;;		None
  7513 ;; Auto vars:     Size  Location     Type
  7514 ;;		None
  7515 ;; Return value:  Size  Location     Type
  7516 ;;                  2    0[COMRAM] unsigned int 
  7517 ;; Registers used:
  7518 ;;		None
  7519 ;; Tracked objects:
  7520 ;;		On entry : 0/0
  7521 ;;		On exit  : 0/0
  7522 ;;		Unchanged: 0/0
  7523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7524 ;;      Params:         2       0       0       0       0       0       0
  7525 ;;      Locals:         0       0       0       0       0       0       0
  7526 ;;      Temps:          0       0       0       0       0       0       0
  7527 ;;      Totals:         2       0       0       0       0       0       0
  7528 ;;Total ram usage:        2 bytes
  7529 ;; Hardware stack levels used:    1
  7530 ;; This function calls:
  7531 ;;		Nothing
  7532 ;; This function is called by:
  7533 ;;		_isr
  7534 ;; This function uses a non-reentrant model
  7535 ;;
  7536                           
  7537                           	psect	text47
  7538  0024C2                     __ptext47:
  7539                           	callstack 0
  7540  0024C2                     _retPeriod:
  7541                           	callstack 0
  7542  0024C2  FFFF               	dw	65535	; assembler added errata NOP
  7543  0024C4                     
  7544                           ;timer.c: 101:     return pwmPeriod;
  7545  0024C4  C046  F001         	movff	_pwmPeriod,?_retPeriod
  7546  0024C8  C047  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7547  0024CC  0012               	return		;funcret
  7548  0024CE  FFFF               	dw	65535	; errata NOP
  7549  0024D0                     __end_of_retPeriod:
  7550                           	callstack 0
  7551                           
  7552 ;; *************** function _increaseStep *****************
  7553 ;; Defined at:
  7554 ;;		line 84 in file "timer.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;		None
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;		None
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  1    wreg      void 
  7561 ;; Registers used:
  7562 ;;		status,2, status,0
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7568 ;;      Params:         0       0       0       0       0       0       0
  7569 ;;      Locals:         0       0       0       0       0       0       0
  7570 ;;      Temps:          0       0       0       0       0       0       0
  7571 ;;      Totals:         0       0       0       0       0       0       0
  7572 ;;Total ram usage:        0 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; This function calls:
  7575 ;;		Nothing
  7576 ;; This function is called by:
  7577 ;;		_isr
  7578 ;; This function uses a non-reentrant model
  7579 ;;
  7580                           
  7581                           	psect	text48
  7582  00256C                     __ptext48:
  7583                           	callstack 0
  7584  00256C                     _increaseStep:
  7585                           	callstack 0
  7586  00256C  FFFF               	dw	65535	; assembler added errata NOP
  7587  00256E                     
  7588                           ;timer.c: 85:     pwmStep++;
  7589  00256E  2A53               	incf	_pwmStep^0,f,c	;volatile
  7590  002570  0012               	return		;funcret
  7591  002572  FFFF               	dw	65535	; errata NOP
  7592  002574                     __end_of_increaseStep:
  7593                           	callstack 0
  7594                           
  7595 ;; *************** function _fatalError *****************
  7596 ;; Defined at:
  7597 ;;		line 61 in file "usart.c"
  7598 ;; Parameters:    Size  Location     Type
  7599 ;;		None
  7600 ;; Auto vars:     Size  Location     Type
  7601 ;;		None
  7602 ;; Return value:  Size  Location     Type
  7603 ;;                  1    wreg      unsigned char 
  7604 ;; Registers used:
  7605 ;;		wreg, status,2
  7606 ;; Tracked objects:
  7607 ;;		On entry : 0/0
  7608 ;;		On exit  : 0/0
  7609 ;;		Unchanged: 0/0
  7610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7611 ;;      Params:         0       0       0       0       0       0       0
  7612 ;;      Locals:         0       0       0       0       0       0       0
  7613 ;;      Temps:          0       0       0       0       0       0       0
  7614 ;;      Totals:         0       0       0       0       0       0       0
  7615 ;;Total ram usage:        0 bytes
  7616 ;; Hardware stack levels used:    1
  7617 ;; This function calls:
  7618 ;;		Nothing
  7619 ;; This function is called by:
  7620 ;;		_isr
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           	psect	text49
  7625  002574                     __ptext49:
  7626                           	callstack 0
  7627  002574                     _fatalError:
  7628                           	callstack 0
  7629  002574  FFFF               	dw	65535	; assembler added errata NOP
  7630  002576                     
  7631                           ;usart.c: 62:     return _fatalError;
  7632  002576  5057               	movf	__fatalError^0,w,c
  7633  002578  0012               	return		;funcret
  7634  00257A  FFFF               	dw	65535	; errata NOP
  7635  00257C                     __end_of_fatalError:
  7636                           	callstack 0
  7637                           
  7638 ;; *************** function _abortAll *****************
  7639 ;; Defined at:
  7640 ;;		line 797 in file "motors.c"
  7641 ;; Parameters:    Size  Location     Type
  7642 ;;		None
  7643 ;; Auto vars:     Size  Location     Type
  7644 ;;		None
  7645 ;; Return value:  Size  Location     Type
  7646 ;;                  1    wreg      void 
  7647 ;; Registers used:
  7648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7649 ;; Tracked objects:
  7650 ;;		On entry : 0/0
  7651 ;;		On exit  : 0/0
  7652 ;;		Unchanged: 0/0
  7653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7654 ;;      Params:         0       0       0       0       0       0       0
  7655 ;;      Locals:         0       0       0       0       0       0       0
  7656 ;;      Temps:          0       0       0       0       0       0       0
  7657 ;;      Totals:         0       0       0       0       0       0       0
  7658 ;;Total ram usage:        0 bytes
  7659 ;; Hardware stack levels used:    1
  7660 ;; Hardware stack levels required when called:    2
  7661 ;; This function calls:
  7662 ;;		i2_printError
  7663 ;; This function is called by:
  7664 ;;		_isr
  7665 ;; This function uses a non-reentrant model
  7666 ;;
  7667                           
  7668                           	psect	text50
  7669  00245A                     __ptext50:
  7670                           	callstack 0
  7671  00245A                     _abortAll:
  7672                           	callstack 0
  7673  00245A  FFFF               	dw	65535	; assembler added errata NOP
  7674  00245C                     
  7675                           ;motors.c: 805:     printError(7);
  7676  00245C  0E07               	movlw	7
  7677  00245E  ECC0  F00D         	call	i2_printError
  7678  002462                     i2l253:
  7679  002462  FFFF               	dw	65535	; assembler added errata NOP
  7680  002464  EF31  F012         	goto	i2l253
  7681  002468  0012               	return		;funcret
  7682  00246A  FFFF               	dw	65535	; errata NOP
  7683  00246C                     __end_of_abortAll:
  7684                           	callstack 0
  7685                           
  7686 ;; *************** function i2_printError *****************
  7687 ;; Defined at:
  7688 ;;		line 111 in file "usart.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;  errCode         1    wreg     unsigned char 
  7691 ;; Auto vars:     Size  Location     Type
  7692 ;;  errCode         1    6[COMRAM] unsigned char 
  7693 ;; Return value:  Size  Location     Type
  7694 ;;                  1    wreg      void 
  7695 ;; Registers used:
  7696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7697 ;; Tracked objects:
  7698 ;;		On entry : 0/0
  7699 ;;		On exit  : 0/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7702 ;;      Params:         0       0       0       0       0       0       0
  7703 ;;      Locals:         1       0       0       0       0       0       0
  7704 ;;      Temps:          2       0       0       0       0       0       0
  7705 ;;      Totals:         3       0       0       0       0       0       0
  7706 ;;Total ram usage:        3 bytes
  7707 ;; Hardware stack levels used:    1
  7708 ;; Hardware stack levels required when called:    1
  7709 ;; This function calls:
  7710 ;;		i2_uartTx
  7711 ;; This function is called by:
  7712 ;;		_abortAll
  7713 ;;		i2_storeData
  7714 ;; This function uses a non-reentrant model
  7715 ;;
  7716                           
  7717                           	psect	text51
  7718  001B80                     __ptext51:
  7719                           	callstack 0
  7720  001B80                     i2_printError:
  7721                           	callstack 0
  7722  001B80  FFFF               	dw	65535	; assembler added errata NOP
  7723                           
  7724                           ;incstack = 0
  7725                           ;i2printError@errCode stored from wreg
  7726  001B82  6E07               	movwf	i2printError@errCode^0,c
  7727  001B84                     
  7728                           ;usart.c: 113:     switch(errCode){
  7729  001B84  EF1C  F00E         	goto	i2l2988
  7730  001B88                     i2l2970:
  7731  001B88  FFFF               	dw	65535	; assembler added errata NOP
  7732                           
  7733                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7734  001B8A  0E92               	movlw	low _errString_Feed
  7735  001B8C  6E01               	movwf	i2uartTx@ptr^0,c
  7736  001B8E  0E00               	movlw	high _errString_Feed
  7737  001B90  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7738  001B92  0E1E               	movlw	30
  7739  001B94  6E03               	movwf	i2uartTx@length^0,c
  7740  001B96  EC46  F011         	call	i2_uartTx	;wreg free
  7741                           
  7742                           ;usart.c: 116:             break;
  7743  001B9A  EF4B  F00E         	goto	i2l550
  7744  001B9E                     i2l2972:
  7745  001B9E  FFFF               	dw	65535	; assembler added errata NOP
  7746                           
  7747                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7748  001BA0  0E5E               	movlw	low _errString_ZEND
  7749  001BA2  6E01               	movwf	i2uartTx@ptr^0,c
  7750  001BA4  0E01               	movlw	high _errString_ZEND
  7751  001BA6  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7752  001BA8  0E29               	movlw	41
  7753  001BAA  6E03               	movwf	i2uartTx@length^0,c
  7754  001BAC  EC46  F011         	call	i2_uartTx	;wreg free
  7755                           
  7756                           ;usart.c: 119:             break;
  7757  001BB0  EF4B  F00E         	goto	i2l550
  7758  001BB4                     i2l2974:
  7759  001BB4  FFFF               	dw	65535	; assembler added errata NOP
  7760                           
  7761                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7762  001BB6  0E87               	movlw	low _errString_Reset
  7763  001BB8  6E01               	movwf	i2uartTx@ptr^0,c
  7764  001BBA  0E01               	movlw	high _errString_Reset
  7765  001BBC  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7766  001BBE  0E28               	movlw	40
  7767  001BC0  6E03               	movwf	i2uartTx@length^0,c
  7768  001BC2  EC46  F011         	call	i2_uartTx	;wreg free
  7769                           
  7770                           ;usart.c: 122:             break;
  7771  001BC6  EF4B  F00E         	goto	i2l550
  7772  001BCA                     i2l2976:
  7773  001BCA  FFFF               	dw	65535	; assembler added errata NOP
  7774                           
  7775                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7776  001BCC  0E35               	movlw	low _errString_Point
  7777  001BCE  6E01               	movwf	i2uartTx@ptr^0,c
  7778  001BD0  0E01               	movlw	high _errString_Point
  7779  001BD2  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7780  001BD4  0E29               	movlw	41
  7781  001BD6  6E03               	movwf	i2uartTx@length^0,c
  7782  001BD8  EC46  F011         	call	i2_uartTx	;wreg free
  7783                           
  7784                           ;usart.c: 125:             break;
  7785  001BDC  EF4B  F00E         	goto	i2l550
  7786  001BE0                     i2l2978:
  7787  001BE0  FFFF               	dw	65535	; assembler added errata NOP
  7788                           
  7789                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7790  001BE2  0ED6               	movlw	low _errString_Bound
  7791  001BE4  6E01               	movwf	i2uartTx@ptr^0,c
  7792  001BE6  0E01               	movlw	high _errString_Bound
  7793  001BE8  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7794  001BEA  0E21               	movlw	33
  7795  001BEC  6E03               	movwf	i2uartTx@length^0,c
  7796  001BEE  EC46  F011         	call	i2_uartTx	;wreg free
  7797                           
  7798                           ;usart.c: 128:             break;
  7799  001BF2  EF4B  F00E         	goto	i2l550
  7800  001BF6                     i2l2980:
  7801  001BF6  FFFF               	dw	65535	; assembler added errata NOP
  7802                           
  7803                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7804  001BF8  0E00               	movlw	low _errString_PointZ
  7805  001BFA  6E01               	movwf	i2uartTx@ptr^0,c
  7806  001BFC  0E01               	movlw	high _errString_PointZ
  7807  001BFE  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7808  001C00  0E35               	movlw	53
  7809  001C02  6E03               	movwf	i2uartTx@length^0,c
  7810  001C04  EC46  F011         	call	i2_uartTx	;wreg free
  7811                           
  7812                           ;usart.c: 131:             break;
  7813  001C08  EF4B  F00E         	goto	i2l550
  7814  001C0C                     i2l2982:
  7815  001C0C  FFFF               	dw	65535	; assembler added errata NOP
  7816                           
  7817                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7818  001C0E  0EAF               	movlw	low _errString_Fatal
  7819  001C10  6E01               	movwf	i2uartTx@ptr^0,c
  7820  001C12  0E01               	movlw	high _errString_Fatal
  7821  001C14  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7822  001C16  0E27               	movlw	39
  7823  001C18  6E03               	movwf	i2uartTx@length^0,c
  7824  001C1A  EC46  F011         	call	i2_uartTx	;wreg free
  7825                           
  7826                           ;usart.c: 134:             break;
  7827  001C1E  EF4B  F00E         	goto	i2l550
  7828  001C22                     i2l2984:
  7829  001C22  FFFF               	dw	65535	; assembler added errata NOP
  7830                           
  7831                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7832  001C24  0EB0               	movlw	low _errString_Command
  7833  001C26  6E01               	movwf	i2uartTx@ptr^0,c
  7834  001C28  0E00               	movlw	high _errString_Command
  7835  001C2A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7836  001C2C  0E18               	movlw	24
  7837  001C2E  6E03               	movwf	i2uartTx@length^0,c
  7838  001C30  EC46  F011         	call	i2_uartTx	;wreg free
  7839                           
  7840                           ;usart.c: 137:             break;
  7841  001C34  EF4B  F00E         	goto	i2l550
  7842  001C38                     i2l2988:
  7843  001C38  FFFF               	dw	65535	; assembler added errata NOP
  7844  001C3A  5007               	movf	i2printError@errCode^0,w,c
  7845  001C3C  6E05               	movwf	??i2_printError^0,c
  7846  001C3E  6A06               	clrf	(??i2_printError+1)^0,c
  7847                           
  7848                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7849                           ; Switch size 1, requested type "simple"
  7850                           ; Number of cases is 1, Range of values is 0 to 0
  7851                           ; switch strategies available:
  7852                           ; Name         Instructions Cycles
  7853                           ; simple_byte            4     3 (average)
  7854                           ;	Chosen strategy is simple_byte
  7855  001C40  5006               	movf	(??i2_printError+1)^0,w,c
  7856  001C42  0A00               	xorlw	0	; case 0
  7857  001C44  B4D8               	btfsc	status,2,c
  7858  001C46  EF27  F00E         	goto	i2l4690
  7859  001C4A  EF4B  F00E         	goto	i2l550
  7860  001C4E                     i2l4690:
  7861  001C4E  FFFF               	dw	65535	; assembler added errata NOP
  7862                           
  7863                           ; Switch size 1, requested type "simple"
  7864                           ; Number of cases is 8, Range of values is 1 to 8
  7865                           ; switch strategies available:
  7866                           ; Name         Instructions Cycles
  7867                           ; simple_byte           25    13 (average)
  7868                           ;	Chosen strategy is simple_byte
  7869  001C50  5005               	movf	??i2_printError^0,w,c
  7870  001C52  0A01               	xorlw	1	; case 1
  7871  001C54  B4D8               	btfsc	status,2,c
  7872  001C56  EFC4  F00D         	goto	i2l2970
  7873  001C5A  0A03               	xorlw	3	; case 2
  7874  001C5C  B4D8               	btfsc	status,2,c
  7875  001C5E  EFCF  F00D         	goto	i2l2972
  7876  001C62  0A01               	xorlw	1	; case 3
  7877  001C64  B4D8               	btfsc	status,2,c
  7878  001C66  EFDA  F00D         	goto	i2l2974
  7879  001C6A  0A07               	xorlw	7	; case 4
  7880  001C6C  B4D8               	btfsc	status,2,c
  7881  001C6E  EFE5  F00D         	goto	i2l2976
  7882  001C72  0A01               	xorlw	1	; case 5
  7883  001C74  B4D8               	btfsc	status,2,c
  7884  001C76  EFF0  F00D         	goto	i2l2978
  7885  001C7A  0A03               	xorlw	3	; case 6
  7886  001C7C  B4D8               	btfsc	status,2,c
  7887  001C7E  EFFB  F00D         	goto	i2l2980
  7888  001C82  0A01               	xorlw	1	; case 7
  7889  001C84  B4D8               	btfsc	status,2,c
  7890  001C86  EF06  F00E         	goto	i2l2982
  7891  001C8A  0A0F               	xorlw	15	; case 8
  7892  001C8C  B4D8               	btfsc	status,2,c
  7893  001C8E  EF11  F00E         	goto	i2l2984
  7894  001C92  EF4B  F00E         	goto	i2l550
  7895  001C96                     i2l550:
  7896  001C96  FFFF               	dw	65535	; assembler added errata NOP
  7897  001C98  0012               	return		;funcret
  7898  001C9A  FFFF               	dw	65535	; errata NOP
  7899  001C9C                     __end_ofi2_printError:
  7900                           	callstack 0
  7901                           
  7902 ;; *************** function i2_uartTx *****************
  7903 ;; Defined at:
  7904 ;;		line 148 in file "usart.c"
  7905 ;; Parameters:    Size  Location     Type
  7906 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7907 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  7908 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  7909 ;;  length          1    2[COMRAM] unsigned char 
  7910 ;; Auto vars:     Size  Location     Type
  7911 ;;  i               1    3[COMRAM] unsigned char 
  7912 ;; Return value:  Size  Location     Type
  7913 ;;                  1    wreg      void 
  7914 ;; Registers used:
  7915 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7916 ;; Tracked objects:
  7917 ;;		On entry : 0/0
  7918 ;;		On exit  : 0/0
  7919 ;;		Unchanged: 0/0
  7920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7921 ;;      Params:         3       0       0       0       0       0       0
  7922 ;;      Locals:         1       0       0       0       0       0       0
  7923 ;;      Temps:          0       0       0       0       0       0       0
  7924 ;;      Totals:         4       0       0       0       0       0       0
  7925 ;;Total ram usage:        4 bytes
  7926 ;; Hardware stack levels used:    1
  7927 ;; This function calls:
  7928 ;;		Nothing
  7929 ;; This function is called by:
  7930 ;;		i2_printError
  7931 ;; This function uses a non-reentrant model
  7932 ;;
  7933                           
  7934                           	psect	text52
  7935  00228C                     __ptext52:
  7936                           	callstack 0
  7937  00228C                     i2_uartTx:
  7938                           	callstack 0
  7939  00228C  FFFF               	dw	65535	; assembler added errata NOP
  7940  00228E                     
  7941                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  7942  00228E  0E01               	movlw	1
  7943  002290  6E04               	movwf	i2uartTx@i^0,c
  7944  002292  EF5F  F011         	goto	i2l2688
  7945  002296                     i2l2684:
  7946  002296  FFFF               	dw	65535	; assembler added errata NOP
  7947                           
  7948                           ;usart.c: 153:         TXREG = *ptr;
  7949  002298  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  7950  00229C  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  7951  0022A0  50DF               	movf	indf2,w,c
  7952  0022A2  6EAD               	movwf	173,c	;volatile
  7953  0022A4                     i2l555:
  7954  0022A4  FFFF               	dw	65535	; assembler added errata NOP
  7955  0022A6  A2AC               	btfss	172,1,c	;volatile
  7956  0022A8  EF58  F011         	goto	i2u179_41
  7957  0022AC  EF5B  F011         	goto	i2u179_40
  7958  0022B0                     i2u179_41:
  7959  0022B0  FFFF               	dw	65535	; assembler added errata NOP
  7960  0022B2  EF52  F011         	goto	i2l555
  7961  0022B6                     i2u179_40:
  7962  0022B6  FFFF               	dw	65535	; assembler added errata NOP
  7963  0022B8                     
  7964                           ;usart.c: 157:         ptr++;
  7965  0022B8  4A01               	infsnz	i2uartTx@ptr^0,f,c
  7966  0022BA  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  7967                           
  7968                           ;usart.c: 158:     }
  7969  0022BC  2A04               	incf	i2uartTx@i^0,f,c
  7970  0022BE                     i2l2688:
  7971  0022BE  FFFF               	dw	65535	; assembler added errata NOP
  7972  0022C0  5003               	movf	i2uartTx@length^0,w,c
  7973  0022C2  5C04               	subwf	i2uartTx@i^0,w,c
  7974  0022C4  A0D8               	btfss	status,0,c
  7975  0022C6  EF67  F011         	goto	i2u180_41
  7976  0022CA  EF6A  F011         	goto	i2u180_40
  7977  0022CE                     i2u180_41:
  7978  0022CE  FFFF               	dw	65535	; assembler added errata NOP
  7979  0022D0  EF4B  F011         	goto	i2l2684
  7980  0022D4                     i2u180_40:
  7981  0022D4  FFFF               	dw	65535	; assembler added errata NOP
  7982  0022D6  0012               	return		;funcret
  7983  0022D8  FFFF               	dw	65535	; errata NOP
  7984  0022DA                     __end_ofi2_uartTx:
  7985                           	callstack 0
  7986                           
  7987                           	psect	rparam
  7988  0000                     
  7989                           	psect	temp
  7990  00006D                     btemp:
  7991                           	callstack 0
  7992  00006D                     	ds	1
  7993  0000                     int$flags	set	btemp
  7994  0000                     wtemp8	set	btemp+1
  7995  0000                     ttemp5	set	btemp+1
  7996  0000                     ttemp6	set	btemp+4
  7997  0000                     ttemp7	set	btemp+8
  7998                           
  7999                           	psect	idloc
  8000                           
  8001                           ;Config register IDLOC0 @ 0x200000
  8002                           ;	unspecified, using default values
  8003  200000                     	org	2097152
  8004  200000  FF                 	db	255
  8005                           
  8006                           ;Config register IDLOC1 @ 0x200001
  8007                           ;	unspecified, using default values
  8008  200001                     	org	2097153
  8009  200001  FF                 	db	255
  8010                           
  8011                           ;Config register IDLOC2 @ 0x200002
  8012                           ;	unspecified, using default values
  8013  200002                     	org	2097154
  8014  200002  FF                 	db	255
  8015                           
  8016                           ;Config register IDLOC3 @ 0x200003
  8017                           ;	unspecified, using default values
  8018  200003                     	org	2097155
  8019  200003  FF                 	db	255
  8020                           
  8021                           ;Config register IDLOC4 @ 0x200004
  8022                           ;	unspecified, using default values
  8023  200004                     	org	2097156
  8024  200004  FF                 	db	255
  8025                           
  8026                           ;Config register IDLOC5 @ 0x200005
  8027                           ;	unspecified, using default values
  8028  200005                     	org	2097157
  8029  200005  FF                 	db	255
  8030                           
  8031                           ;Config register IDLOC6 @ 0x200006
  8032                           ;	unspecified, using default values
  8033  200006                     	org	2097158
  8034  200006  FF                 	db	255
  8035                           
  8036                           ;Config register IDLOC7 @ 0x200007
  8037                           ;	unspecified, using default values
  8038  200007                     	org	2097159
  8039  200007  FF                 	db	255
  8040                           
  8041                           	psect	config
  8042                           
  8043                           ; Padding undefined space
  8044  300000                     	org	3145728
  8045  300000  FF                 	db	255
  8046                           
  8047                           ;Config register CONFIG1H @ 0x300001
  8048                           ;	Oscillator Selection bits
  8049                           ;	OSC = XT, XT oscillator
  8050                           ;	Oscillator System Clock Switch Enable bit
  8051                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8052  300001                     	org	3145729
  8053  300001  21                 	db	33
  8054                           
  8055                           ;Config register CONFIG2L @ 0x300002
  8056                           ;	Power-up Timer Enable bit
  8057                           ;	PWRT = OFF, PWRT disabled
  8058                           ;	Brown-out Reset Enable bit
  8059                           ;	BOR = OFF, Brown-out Reset disabled
  8060                           ;	Brown-out Reset Voltage bits
  8061                           ;	BORV = 20, VBOR set to 2.0V
  8062  300002                     	org	3145730
  8063  300002  0D                 	db	13
  8064                           
  8065                           ;Config register CONFIG2H @ 0x300003
  8066                           ;	Watchdog Timer Enable bit
  8067                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8068                           ;	Watchdog Timer Postscale Select bits
  8069                           ;	WDTPS = 128, 1:128
  8070  300003                     	org	3145731
  8071  300003  0E                 	db	14
  8072                           
  8073                           ; Padding undefined space
  8074  300004                     	org	3145732
  8075  300004  FF                 	db	255
  8076                           
  8077                           ;Config register CONFIG3H @ 0x300005
  8078                           ;	CCP2 Mux bit
  8079                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8080  300005                     	org	3145733
  8081  300005  00                 	db	0
  8082                           
  8083                           ;Config register CONFIG4L @ 0x300006
  8084                           ;	Stack Full/Underflow Reset Enable bit
  8085                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8086                           ;	Low Voltage ICSP Enable bit
  8087                           ;	LVP = OFF, Low Voltage ICSP disabled
  8088                           ;	Background Debugger Enable bit
  8089                           ;	DEBUG = 0x1, unprogrammed default
  8090  300006                     	org	3145734
  8091  300006  80                 	db	128
  8092                           
  8093                           ; Padding undefined space
  8094  300007                     	org	3145735
  8095  300007  FF                 	db	255
  8096                           
  8097                           ;Config register CONFIG5L @ 0x300008
  8098                           ;	Code Protection bit
  8099                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8100                           ;	Code Protection bit
  8101                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8102                           ;	Code Protection bit
  8103                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8104                           ;	Code Protection bit
  8105                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8106  300008                     	org	3145736
  8107  300008  0F                 	db	15
  8108                           
  8109                           ;Config register CONFIG5H @ 0x300009
  8110                           ;	Boot Block Code Protection bit
  8111                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8112                           ;	Data EEPROM Code Protection bit
  8113                           ;	CPD = OFF, Data EEPROM not code protected
  8114  300009                     	org	3145737
  8115  300009  C0                 	db	192
  8116                           
  8117                           ;Config register CONFIG6L @ 0x30000A
  8118                           ;	Write Protection bit
  8119                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8120                           ;	Write Protection bit
  8121                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8122                           ;	Write Protection bit
  8123                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8124                           ;	Write Protection bit
  8125                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8126  30000A                     	org	3145738
  8127  30000A  0F                 	db	15
  8128                           
  8129                           ;Config register CONFIG6H @ 0x30000B
  8130                           ;	Configuration Register Write Protection bit
  8131                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8132                           ;	Boot Block Write Protection bit
  8133                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8134                           ;	Data EEPROM Write Protection bit
  8135                           ;	WRTD = OFF, Data EEPROM not write protected
  8136  30000B                     	org	3145739
  8137  30000B  E0                 	db	224
  8138                           
  8139                           ;Config register CONFIG7L @ 0x30000C
  8140                           ;	Table Read Protection bit
  8141                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8142                           ;	Table Read Protection bit
  8143                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8144                           ;	Table Read Protection bit
  8145                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8146                           ;	Table Read Protection bit
  8147                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8148  30000C                     	org	3145740
  8149  30000C  0F                 	db	15
  8150                           
  8151                           ;Config register CONFIG7H @ 0x30000D
  8152                           ;	Boot Block Table Read Protection bit
  8153                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8154  30000D                     	org	3145741
  8155  30000D  40                 	db	64
  8156                           tosu	equ	0xFFF
  8157                           tosh	equ	0xFFE
  8158                           tosl	equ	0xFFD
  8159                           stkptr	equ	0xFFC
  8160                           pclatu	equ	0xFFB
  8161                           pclath	equ	0xFFA
  8162                           pcl	equ	0xFF9
  8163                           tblptru	equ	0xFF8
  8164                           tblptrh	equ	0xFF7
  8165                           tblptrl	equ	0xFF6
  8166                           tablat	equ	0xFF5
  8167                           prodh	equ	0xFF4
  8168                           prodl	equ	0xFF3
  8169                           indf0	equ	0xFEF
  8170                           postinc0	equ	0xFEE
  8171                           postdec0	equ	0xFED
  8172                           preinc0	equ	0xFEC
  8173                           plusw0	equ	0xFEB
  8174                           fsr0h	equ	0xFEA
  8175                           fsr0l	equ	0xFE9
  8176                           wreg	equ	0xFE8
  8177                           indf1	equ	0xFE7
  8178                           postinc1	equ	0xFE6
  8179                           postdec1	equ	0xFE5
  8180                           preinc1	equ	0xFE4
  8181                           plusw1	equ	0xFE3
  8182                           fsr1h	equ	0xFE2
  8183                           fsr1l	equ	0xFE1
  8184                           bsr	equ	0xFE0
  8185                           indf2	equ	0xFDF
  8186                           postinc2	equ	0xFDE
  8187                           postdec2	equ	0xFDD
  8188                           preinc2	equ	0xFDC
  8189                           plusw2	equ	0xFDB
  8190                           fsr2h	equ	0xFDA
  8191                           fsr2l	equ	0xFD9
  8192                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    16
    Data        334
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     108
    BANK0           128     18     127
    BANK1           256      0     247
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK1[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10309
                                             13 BANK0      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    6225
                                              8 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                         _resetTherm
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            8     8      0    3163
                                              0 BANK0      8     8      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2608
                                             20 COMRAM    14     6      8
                          _resetStep
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _stepMade
     _moveToPoint
       _resetStep
       _stepCounter
       _stepMade
     _pickObject
       _stepMade
     _releaseObj
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _stepMade
     _touchObject
       _resetStep
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80     12      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6C       1       85.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E2      15        0.0%
DATA                 0      0     1E2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Apr 26 15:41:11 2021

                                                  ___fldiv@aexp 0038  
                                                  ___fldiv@bexp 0037  
                                         __end_of_interruptInit 235E  
                                                  ___fldiv@sign 0030  
                                                            l90 23D8  
                                                            l84 24B0  
                                                           l201 1EBC  
                                                           l202 1EC0  
                                                           l131 10E4  
                                                           l220 213C  
                                                           l132 1278  
                                                           l213 1DA8  
                                                           l214 1DAC  
                                                           l151 1290  
                                                           l160 0B02  
                                                           l225 2154  
                                                           l217 212A  
                                                           l161 0B0C  
                                                           l250 2386  
                                                           l243 23AC  
                                                           l244 23B2  
                                                           l236 206C  
                                                           l165 0DEC  
                                                           l157 0E04  
                                                           l333 14DA  
                                                           l510 24A2  
                                                           l182 0DAA  
                                                           l158 0ABC  
                                                           l238 2094  
                                                           l334 14D4  
                                                           l335 14D6  
                                                           l360 108E  
                                                           l249 2380  
                                                           l513 2494  
                                                           l601 2486  
                                                           l610 24F0  
                                                           l444 2338  
                                                           l516 2548  
                                                           l604 2430  
                                                           l613 2522  
                                                           l381 2560  
                                                           l445 234E  
                                                           l525 2558  
                                                           l533 223A  
                                                           l390 2518  
                                                           l446 235A  
                                                           l550 1B7A  
                                                           l607 2444  
                                                           l375 23FE  
                                                           l519 2550  
                                                           l384 24E4  
                                                           l528 24FA  
                                                           l536 241C  
                                                           l393 2504  
                                                           l378 250E  
                                                           l387 24D8  
                                                           l555 2256  
                                                           l580 1726  
                                                           l559 2288  
                                                           l583 17AC  
                                                           l922 1A5E  
                                                           l598 2456  
                                                           _isr 0008  
                                                   _touchObject 1DB0  
                                                           prod 000FF3  
                                                           wreg 000FE8  
                                                  ___fltol@exp1 0042  
                                                   main@errCode 00FC  
                                                          l1220 093C  
                                                          l1212 0810  
                                                          l1221 0924  
                                                          l1207 0A3E  
                                                          l1209 0856  
                                                          l1218 08AC  
                                                          l1280 12F4  
                                                          l4000 1DEA  
                                                          l4010 1E3E  
                                                          l4002 1DF6  
                                                          l1283 1486  
                                                          l4020 1E8E  
                                                          l4004 1E04  
                                                          l4012 1E58  
                                                          l1294 140C  
                                                          l4110 204E  
                                                          l4102 1FC2  
                                                          l4022 1E90  
                                                          l4014 1E74  
                                                          l4006 1E24  
                                                          l1287 13A0  
                                                          l4120 238C  
                                                          l4112 2050  
                                                          l4104 2014  
                                                          l4024 1E9E  
                                                          l4008 1E2C  
                                                          l4016 1E84  
                                                          l4040 1CBE  
                                                          l4032 1C9E  
                                                          l4200 1122  
                                                          l4122 2390  
                                                          l4130 2382  
                                                          l4114 206E  
                                                          l4106 2022  
                                                          l4026 1EA2  
                                                          l4018 1E8A  
                                                          l4050 1D18  
                                                          l4042 1CD6  
                                                          l4034 1CA6  
                                                          l4210 1174  
                                                          l4202 1134  
                                                          l4124 23AE  
                                                          l4116 2072  
                                                          l4108 2028  
                                                          l4028 1EB4  
                                                          l4060 1D76  
                                                          l4052 1D2A  
                                                          l4044 1CE2  
                                                          l4036 1CB4  
                                                          l4220 11B8  
                                                          l4212 117E  
                                                          l4204 113C  
                                                          l4140 1AAE  
                                                          l4132 1A68  
                                                          l4300 164A  
                                                          l4126 2360  
                                                          l4118 2078  
                                                          l4070 1DA0  
                                                          l4062 1D7A  
                                                          l4046 1CF0  
                                                          l4054 1D44  
                                                          l4038 1CB6  
                                                          l4230 1208  
                                                          l4222 11CC  
                                                          l4214 118C  
                                                          l4206 114E  
                                                          l4142 1AC4  
                                                          l4134 1A6C  
                                                          l4302 1650  
                                                          l4310 166E  
                                                          l4080 20B2  
                                                          l4128 2364  
                                                          l4064 1D7C  
                                                          l4056 1D60  
                                                          l4048 1D10  
                                                          l4400 1028  
                                                          l4240 1266  
                                                          l4232 1210  
                                                          l4224 11DE  
                                                          l4216 119E  
                                                          l4208 1162  
                                                          l4144 1ADA  
                                                          l4136 1A82  
                                                          l4152 1B1C  
                                                          l4320 1730  
                                                          l4304 165A  
                                                          l4312 16A6  
                                                          l4162 24A8  
                                                          l4090 20FE  
                                                          l4082 20CA  
                                                          l4074 209A  
                                                          l4066 1D8A  
                                                          l4058 1D70  
                                                          l4410 107E  
                                                          l4402 1038  
                                                          l4170 23C8  
                                                          l4250 2324  
                                                          l4242 127E  
                                                          l4234 1222  
                                                          l4226 11E8  
                                                          l4218 11A6  
                                                          l4146 1AF0  
                                                          l4138 1A98  
                                                          l4330 176A  
                                                          l4322 1740  
                                                          l4314 16BE  
                                                          l4306 1664  
                                                          l4092 2110  
                                                          l4084 20D6  
                                                          l4076 20A0  
                                                          l3700 073A  
                                                          l4068 1D8E  
                                                          l4412 1082  
                                                          l4404 106A  
                                                          l4260 23EC  
                                                          l4180 23D6  
                                                          l4172 23CC  
                                                          l4164 23B8  
                                                          l4252 2336  
                                                          l4244 128A  
                                                          l4228 11F6  
                                                          l4236 123C  
                                                          l4148 1B06  
                                                          l4324 1754  
                                                          l4316 16C6  
                                                          l4158 249A  
                                                          l4094 2142  
                                                          l4086 20E4  
                                                          l4078 20AC  
                                                          l3710 076A  
                                                          l3702 0740  
                                                          l4406 1072  
                                                          l4414 108A  
                                                          l4262 23EE  
                                                          l4174 23D0  
                                                          l4166 23C0  
                                                          l4254 234C  
                                                          l4350 254E  
                                                          l4422 2546  
                                                          l4246 128E  
                                                          l4238 1252  
                                                          l4190 10C0  
                                                          l4182 1094  
                                                          l4430 21E4  
                                                          l4326 1758  
                                                          l4318 1720  
                                                          l4334 1776  
                                                          l4270 2404  
                                                          l3632 251E  
                                                          l3624 2436  
                                                          l4096 214E  
                                                          l4088 20F6  
                                                          l3720 07BA  
                                                          l3800 1960  
                                                          l3640 255E  
                                                          l4408 107A  
                                                          l4360 0E56  
                                                          l4264 23F0  
                                                          l4256 23DE  
                                                          l4176 23D2  
                                                          l4168 23C4  
                                                          l4192 10D8  
                                                          l4184 10A0  
                                                          l4432 2224  
                                                          l4424 21E0  
                                                          l4328 1760  
                                                          l4280 2482  
                                                          l4272 2418  
                                                          l4440 1492  
                                                          l3626 243A  
                                                          l4098 2152  
                                                          l3634 24EA  
                                                          l3730 080E  
                                                          l3722 07CA  
                                                          l3714 077E  
                                                          l3706 0754  
                                                          l3810 19B8  
                                                          l3802 1990  
                                                          l3642 2514  
                                                          l4370 0ED8  
                                                          l4362 0E66  
                                                          l4354 0E0C  
                                                          l4266 23FA  
                                                          l4258 23E6  
                                                          l4178 23D4  
                                                          l4290 2556  
                                                          l4194 10F8  
                                                          l4186 10AC  
                                                          l4434 2226  
                                                          l3650 2248  
                                                          l4274 244A  
                                                          l4282 2484  
                                                          l4450 14A6  
                                                          l4442 1496  
                                                          l3628 243E  
                                                          l3900 0AF2  
                                                          l3740 086C  
                                                          l3732 081C  
                                                          l3724 07D2  
                                                          l3716 079A  
                                                          l3708 076A  
                                                          l3660 0632  
                                                          l3820 19EA  
                                                          l3804 1992  
                                                          l3636 250A  
                                                          l3644 24D2  
                                                          l4380 0F5C  
                                                          l4372 0F12  
                                                          l4364 0E7A  
                                                          l4356 0E18  
                                                          l4268 23FC  
                                                          l4348 24F6  
                                                          l4196 110A  
                                                          l4188 10BA  
                                                          l3652 226A  
                                                          l4276 2452  
                                                          l4284 2422  
                                                          l4460 14F8  
                                                          l4452 14B2  
                                                          l4444 149A  
                                                          l4436 148C  
                                                          l3910 0B42  
                                                          l3902 0B08  
                                                          l3742 0886  
                                                          l3750 08BE  
                                                          l3734 0840  
                                                          l3726 07E8  
                                                          l3718 07AA  
                                                          l3670 0672  
                                                          l3662 0634  
                                                          l3830 1A26  
                                                          l3806 19A2  
                                                          l3638 24DE  
                                                          l3646 2500  
                                                          l4390 0FCC  
                                                          l4382 0F64  
                                                          l4374 0F22  
                                                          l4366 0EB4  
                                                          l4358 0E1C  
                                                          l4294 248C  
                                                          l4198 1114  
                                                          l3654 2270  
                                                          l4278 247E  
                                                          l4286 2424  
                                                          l4470 1548  
                                                          l4462 1504  
                                                          l4454 14BA  
                                                          l4446 149E  
                                                          l4438 148C  
                                                          l3920 0BAA  
                                                          l3912 0B4E  
                                                          l3904 0B16  
                                                          l3752 08D2  
                                                          l3744 088C  
                                                          l3736 0842  
                                                          l3728 07FC  
                                                          l3680 06AC  
                                                          l3664 064A  
                                                          l3672 067A  
                                                          l3656 0614  
                                                          l3832 1A3C  
                                                          l3816 19D4  
                                                          l3808 19A6  
                                                          l3840 12AC  
                                                          l4392 0FD0  
                                                          l4376 0F36  
                                                          l4368 0EC4  
                                                          l3648 2240  
                                                          l4288 2428  
                                                          l4480 15EA  
                                                          l4472 1566  
                                                          l4464 1516  
                                                          l4456 14CE  
                                                          l4448 14A2  
                                                          l3930 0C0A  
                                                          l3922 0BB6  
                                                          l3914 0B64  
                                                          l3906 0B24  
                                                          l3762 0952  
                                                          l3770 099E  
                                                          l3754 08D6  
                                                          l3746 0898  
                                                          l3738 0852  
                                                          l3690 06EC  
                                                          l3682 06AE  
                                                          l3674 068C  
                                                          l3666 065E  
                                                          l3658 0620  
                                                          l3834 1A4C  
                                                          l3826 1A04  
                                                          l3818 19E0  
                                                          l3850 1336  
                                                          l3842 12BE  
                                                          l4394 0FD4  
                                                          l4378 0F58  
                                                          l4386 0F6E  
                                                          l4298 163A  
                                                          l4490 161C  
                                                          l4482 15F2  
                                                          l4474 1570  
                                                          l4466 1526  
                                                          l4458 14DE  
                                                          l3940 0C70  
                                                          l3924 0BD6  
                                                          l3916 0B8A  
                                                          l3908 0B2A  
                                                          l3780 0A16  
                                                          l3772 09BE  
                                                          l3764 095E  
                                                          l3756 08E8  
                                                          l3748 08AA  
                                                          l3684 06C4  
                                                          l3692 06F4  
                                                          l3676 0694  
                                                          l3668 066E  
                                                          l3828 1A12  
                                                          l3860 1396  
                                                          l3852 1340  
                                                          l3844 1306  
                                                          l4396 0FD8  
                                                          l4388 0FB6  
                                                          l4492 1622  
                                                          l4484 15F6  
                                                          l4476 1598  
                                                          l4468 1528  
                                                          l3950 0CC2  
                                                          l3934 0C3C  
                                                          l3926 0BDE  
                                                          l3918 0B94  
                                                          l3782 0A28  
                                                          l3774 09D4  
                                                          l3766 0970  
                                                          l3758 091A  
                                                          l3694 0706  
                                                          l3686 06D8  
                                                          l3678 069A  
                                                          l3870 1422  
                                                          l3862 13D8  
                                                          l3854 134E  
                                                          l3846 1322  
                                                          l3838 1298  
                                                          l4398 1016  
                                                          l4494 1626  
                                                          l4478 15B0  
                                                          l4486 15FA  
                                                          l3952 0CD8  
                                                          l3960 0D22  
                                                          l3936 0C52  
                                                          l3944 0C7C  
                                                          l3928 0BF4  
                                                          l3784 0A2E  
                                                          l3776 09F4  
                                                          l3768 099A  
                                                          l3696 0722  
                                                          l3688 06E8  
                                                          l3880 1474  
                                                          l3872 1428  
                                                          l3864 13E6  
                                                          l3856 1386  
                                                          l4680 178C  
                                                          l4496 162A  
                                                          l4488 1614  
                                                          l3970 0D8C  
                                                          l3962 0D38  
                                                          l3954 0CE4  
                                                          l3946 0C92  
                                                          l3938 0C5E  
                                                          l3786 0A32  
                                                          l3778 0A10  
                                                          l3698 0732  
                                                          l3794 1930  
                                                          l3874 144C  
                                                          l3866 13FA  
                                                          l3858 138A  
                                                          l4682 1B32  
                                                          l3980 0DDA  
                                                          l3972 0D9E  
                                                          l3956 0D04  
                                                          l3948 0CB8  
                                                          l3892 0A80  
                                                          l3884 0A46  
                                                          l3796 194A  
                                                          l3876 1460  
                                                          l3868 1420  
                                                          l4684 0F8E  
                                                          l3982 0DF2  
                                                          l3966 0D6A  
                                                          l3958 0D0C  
                                                          l3894 0AAC  
                                                          l3886 0A60  
                                                          l3878 1472  
                                                          l3990 1DB2  
                                                          l4678 1686  
                                                          l3984 0DFE  
                                                          l3968 0D80  
                                                          l3976 0DAA  
                                                          l3896 0AC2  
                                                          l3888 0A78  
                                                          l3992 1DBA  
                                                          l3986 0E02  
                                                          l3978 0DC4  
                                                          l3898 0AC6  
                                                          l3994 1DC8  
                                                          l3996 1DCA  
                                                          ?_isr 0001  
                                                          l3998 1DD2  
                                                          u3000 13D2  
                                                          u3001 13CC  
                                                          u3010 13F8  
                                                          u3011 13F2  
                                                          u3100 0B40  
                                                          u3020 140C  
                                                          u3101 0B3A  
                                                          u3021 1406  
                                                          _LATA 000F89  
                                                          u3110 0B62  
                                                          u3030 141E  
                                                          _LATB 000F8A  
                                                          u3111 0B5C  
                                                          u3031 1418  
                                                          _LATC 000F8B  
                                                          u3200 0CB6  
                                                          u3120 0B88  
                                                          u3040 145E  
                                                          _LATD 000F8C  
                                                          u3201 0CB0  
                                                          u3121 0B82  
                                                          u3041 1458  
                                                          u3210 0CD6  
                                                          u3130 0BA8  
                                                          u3050 1470  
                                                          u3211 0CD0  
                                                          u3131 0BA2  
                                                          u3051 146A  
                                                          u3220 0D02  
                                                          u3140 0BD4  
                                                          u3060 0A5E  
                                                          u3300 1DE8  
                                                          u3221 0CFC  
                                                          u3141 0BCE  
                                                          u3061 0A58  
                                                          u3301 1DE2  
                                                          u3230 0D36  
                                                          u3150 0C08  
                                                          u3070 0A78  
                                                          u3310 1E22  
                                                          u3231 0D30  
                                                          u3151 0C02  
                                                          u3071 0A72  
                                                          u3311 1E1C  
                                                          u3240 0D64  
                                                          u3160 0C36  
                                                          u3080 0AAA  
                                                          u3320 1E58  
                                                          u3400 1D70  
                                                          u3241 0D5E  
                                                          u3161 0C30  
                                                          u3081 0AA4  
                                                          u3321 1E52  
                                                          u3401 1D6A  
                                                          u3250 0D7E  
                                                          u3170 0C50  
                                                          u3090 0AF0  
                                                          u3330 1E72  
                                                          u3410 1D9E  
                                                          u3251 0D78  
                                                          u3171 0C4A  
                                                          u3091 0AEA  
                                                          u3331 1E6C  
                                                          u3411 1D98  
                                                          u3420 20C8  
                                                          u3260 0D9C  
                                                          u3180 0C6E  
                                                          u2700 06C2  
                                                          u3340 1E84  
                                                          u3500 10D6  
                                                          u3421 20C2  
                                                          u3261 0D96  
                                                          u3181 0C68  
                                                          u2701 06BC  
                                                          u3341 1E7E  
                                                          u3501 10D0  
                                                          u3430 20F4  
                                                          u3270 0DC4  
                                                          u3190 0C90  
                                                          u2710 06D6  
                                                          u3350 1EB2  
                                                          u3510 10F6  
                                                          u3431 20EE  
                                                          u3271 0DBE  
                                                          u3191 0C8A  
                                                          u2711 06D0  
                                                          u3351 1EAC  
                                                          u3511 10F0  
                                                          u3440 212A  
                                                          u3280 0DD8  
                                                          u2800 08D0  
                                                          u2720 0720  
                                                          u3360 1CD4  
                                                          u3600 123C  
                                                          u3520 110A  
                                                          u2640 2268  
                                                          u3441 2124  
                                                          u3281 0DD2  
                                                          u2801 08CA  
                                                          u2721 071A  
                                                          u3361 1CCE  
                                                          u3601 1236  
                                                          u3521 1104  
                                                          u2641 2262  
                                                          u3450 213C  
                                                          u3290 0DEC  
                                                          u2810 08E6  
                                                          u2730 0768  
                                                          u3370 1D0E  
                                                          u3610 1250  
                                                          u3530 1132  
                                                          u2650 2286  
                                                          u3451 2136  
                                                          u3291 0DE6  
                                                          u2811 08E0  
                                                          u2731 0762  
                                                          u3371 1D08  
                                                          u3611 124A  
                                                          u3531 112C  
                                                          u2651 2280  
                                                          u2820 0918  
                                                          u2740 07E6  
                                                          u2660 0630  
                                                          u2900 1984  
                                                          u3460 206A  
                                                          u3380 1D44  
                                                          u3620 1264  
                                                          u3540 1160  
                                                          u3700 14CC  
                                                          u2821 0912  
                                                          u2741 07E0  
                                                          u2661 062A  
                                                          u3461 2064  
                                                          u3381 1D3E  
                                                          u3621 125E  
                                                          u3541 115A  
                                                          u3701 14C6  
                                                          u2830 0936  
                                                          u2750 080C  
                                                          u2670 0648  
                                                          u2910 19B6  
                                                          u3470 2092  
                                                          u3390 1D5E  
                                                          u3630 1278  
                                                          u3550 1174  
                                                          u3710 14F6  
                                                          u2831 0930  
                                                          u2751 0806  
                                                          u2671 0642  
                                                          u2911 19B0  
                                                          u3471 208C  
                                                          u3391 1D58  
                                                          u3631 1272  
                                                          u3551 116E  
                                                          u3711 14F0  
                                                          u3480 23AA  
                                                          u2840 0950  
                                                          u2760 083E  
                                                          u2680 065C  
                                                          u2920 19CE  
                                                          u3640 2334  
                                                          u3560 119C  
                                                          u3720 1546  
                                                          u3481 23A4  
                                                          u2841 094A  
                                                          u2761 0838  
                                                          u2681 0656  
                                                          u2921 19C8  
                                                          u2905 1978  
                                                          u3641 232E  
                                                          u3561 1196  
                                                          u3721 1540  
                                                          u3490 237E  
                                                          u2850 096E  
                                                          u2770 086A  
                                                          u2690 06AA  
                                                          u2930 19FE  
                                                          u3650 234A  
                                                          u3570 11CA  
                                                          u3730 1566  
                                                          u3491 2378  
                                                          u2851 0968  
                                                          u2771 0864  
                                                          u2691 06A4  
                                                          u2931 19F8  
                                                          u3651 2344  
                                                          u3571 11C4  
                                                          u3731 1560  
                                                          u2860 09BC  
                                                          u2780 0884  
                                                          u2940 1A26  
                                                          u3580 11DE  
                                                          u3660 16BC  
                                                          u3740 15AE  
                                                          u2861 09B6  
                                                          u2781 087E  
                                                          u2941 1A20  
                                                          u3581 11D8  
                                                          u3661 16B6  
                                                          u3741 15A8  
                                                          u2870 09F2  
                                                          u2790 08A8  
                                                          u2950 1A3A  
                                                          u3670 0FCA  
                                                          u3590 1206  
                                                          u3750 1612  
                                                          u2871 09EC  
                                                          u2791 08A2  
                                                          u2951 1A34  
                                                          u3671 0FC4  
                                                          u3591 1200  
                                                          u3751 160C  
                                                          u2880 0A26  
                                                          u2960 12AA  
                                                          u3680 1068  
                                                          u2881 0A20  
                                                          u2961 12A4  
                                                          u3681 1062  
                                                          u2890 1948  
                                                          u2970 12BC  
                                                          u3690 2238  
                                                   main@newData 00FD  
                                                          u2891 1942  
                                                          u2971 12B6  
                                                          u3691 2232  
                                                          u2980 1320  
                                                          u2981 131A  
                                                          u2990 1380  
                                                          u2991 137A  
                                                          i2l81 24BE  
                                                          i2l87 2568  
                                                          _TMR0 000FD6  
                                                          _TMR2 000FCC  
                                           __end_ofi2_storeData 192E  
                                                          _main 148C  
                                                          _maxX 006A  
                                                          _maxY 0090  
                                          __end_ofi2_printError 1C9C  
                                                          fsr2h 000FDA  
                                                          indf2 000FDF  
                                                          fsr1l 000FE1  
                                                          fsr2l 000FD9  
                                                          btemp 006D  
                                                          prodh 000FF4  
                                                          prodl 000FF3  
                                                          start 019C  
                                               ___fldiv@new_exp 0031  
                                                  ___param_bank 000000  
                                               ??_whatsTM0Limit 0001  
                                                         ??_isr 000B  
                                                  ?_executeData 0001  
                                               executeData@data 00F8  
                                                 ___fltol@sign1 0041  
                                                         ?_main 0001  
                                               __end_of___fldiv 0A44  
                                               __end_of___fltol 1A64  
                                                         i2l253 2462  
                                                         i2l254 2464  
                                                         i2l522 2578  
                                                         i2l550 1C96  
                                                         i2l622 24CC  
                                                         i2l616 2570  
                                                         i2l555 22A4  
                                                         i2l619 252C  
                                                         i2l396 2540  
                                                         i2l580 18A2  
                                                         i2l469 0184  
                                                         i2l559 22D6  
                                                         i2l399 2536  
                                                         i2l583 1928  
                                          rotateObj@rotSequence 0080  
                                                         _SPBRG 000FAF  
                                                         _TRISA 000F92  
                                                         _TRISB 000F93  
                                                         _TRISC 000F94  
                                                         _TRISD 000F95  
                                                         _TXREG 000FAD  
                                               __end_of_getData 24A6  
                                               i2storeData@data 000A  
                                               __end_of_initADC 2402  
                                                  ?_newSequence 0001  
                                               __end_of_liftArm 2158  
                                               __end_of_readSeq 2554  
                                                  stepMade@temp 0014  
                                                         tablat 000FF5  
                                                i2uartTx@length 0003  
                                               __end_of_stopADC 2564  
                                                         ttemp5 006E  
                                                         ttemp6 0071  
                                                         ttemp7 0075  
                                                         status 000FD8  
                                                         wtemp8 006E  
                                              __end_ofi2_uartTx 22DA  
                                                 ?_increaseStep 0001  
                                               __initialization 2158  
                                        __size_of_initPinMotors 0026  
                                                  __end_of_main 1636  
                                      resetPosition@keepMovingX 0015  
                                      resetPosition@keepMovingY 0016  
                                      resetPosition@keepMovingZ 0017  
                                                        ??_main 00FA  
                                                 __activetblptr 000002  
                                                   i2_storeData 17B2  
                                                   isr@tm0Count 005A  
                                                  ?_setThermRel 0001  
                                                        _ADRESH 000FC4  
                                                        _ADRESL 000FC3  
                                                  ?_moveToPoint 0015  
                                                        i2l2150 2532  
                                                        i2l2152 2576  
                                                        i2l2160 2528  
                                                        i2l2148 253C  
                                                        i2l3300 18D4  
                                                        i2l2158 256E  
                                                        i2l3302 18DC  
                                                        i2l3304 18E6  
                                                        i2l3400 006C  
                                                        i2l3082 245C  
                                                        i2l3410 00A0  
                                                        i2l3402 006E  
                                                        i2l3308 18F2  
                                                        i2l3420 00EA  
                                                        i2l3412 00A4  
                                                        i2l3404 0086  
                                                        i2l3270 24C4  
                                                        i2l3430 0114  
                                                        i2l3422 00EE  
                                                        i2l3414 00C2  
                                                        i2l3406 008A  
                                                        i2l3280 17E0  
                                                        i2l3272 17B6  
                                                        i2l3440 0178  
                                                        i2l3432 013A  
                                                        i2l3424 00F2  
                                                        i2l3416 00C4  
                                                        i2l3408 009E  
                                                        i2l3290 1842  
                                                        i2l3274 17C6  
                                                        i2l3442 017E  
                                                        i2l3434 0146  
                                                        i2l3418 00D8  
                                                        i2l3426 00F8  
                                                        i2l3292 189C  
                                                        i2l3276 17CC  
                                                        i2l3284 17EA  
                                                        i2l3436 0160  
                                                        i2l3428 010C  
                                                        i2l1870 24B6  
                                                        i2l3294 18AC  
                                                        i2l3278 17D6  
                                                        i2l3286 1822  
                                                        i2l3438 0164  
                                                        i2l3390 0032  
                                                        i2l3296 18BC  
                                                        i2l3288 183A  
                                                        i2l3392 004E  
                                                        i2l3384 001C  
                                                        i2l2682 228E  
                                                        i2l1874 2566  
                                                        i2l3298 18D0  
                                                        i2l3394 0050  
                                                        i2l3386 002E  
                                                        i2l2684 2296  
                                                        i2l3396 0054  
                                                        i2l3388 0030  
                                                        i2l2686 22B8  
                                                        i2l3398 0058  
                                                        i2l2688 22BE  
                                                        i2l2970 1B88  
                                                        i2l2980 1BF6  
                                                        i2l2972 1B9E  
                                                        i2l2982 1C0C  
                                                        i2l2974 1BB4  
                                                        i2l2984 1C22  
                                                        i2l2976 1BCA  
                                                        i2l2968 1B84  
                                                        i2l4690 1C4E  
                                                        i2l2978 1BE0  
                                                        i2l2988 1C38  
                                                        i2l4686 1802  
                                                        i2l4688 1908  
                                                        _RCREG1 000FAE  
                                                  ?_setTouchRel 0001  
                                              __end_of_abortAll 246C  
                                              __end_of___xxtofl 148C  
                                              __end_of_clearTM0 24B4  
                                              _errString_PointZ 0100  
                                                ??_increaseStep 0001  
                                              __end_of_maxFeedX 0611  
                                              __end_of_maxFeedY 0610  
                                                     ??___fldiv 0028  
                                                     ??___fltol 003D  
                                              __end_of_tim0Init 245A  
                                              __end_of_tim1Init 248A  
                                              __end_of_tim2Init 2434  
                                                        clear_0 21BE  
                                                        clear_1 21CA  
                                                     ??_getData 0014  
                                                        _uartTx 223E  
                                                     ??_initADC 0012  
                                                     ??_liftArm 0015  
                                                     ??_readSeq 0012  
                                                  __pdataCOMRAM 005E  
                                         __end_of_resetPosition 1294  
                                                  __mediumconst 0000  
                                                        tblptrh 000FF7  
                                                        tblptrl 000FF6  
                                                        tblptru 000FF8  
                                                  ?_returnTherm 0012  
                                              __end_of_startADC 2512  
                                              __end_of_stepMade 2448  
                                                 _initPinMotors 23B6  
                                                  ?_returnTouch 0012  
                                                     ??_stopADC 0012  
                                         __size_ofi2_printError 011C  
                                              __end_of_writeTM0 24C2  
                                     __size_of_resetNewSequence 000A  
                                                  ___xxtofl@arg 001C  
                                                  ___xxtofl@exp 001B  
                                                  ___xxtofl@val 0012  
                                                    __accesstop 0080  
                                       __end_of__initialization 21D0  
                                                  _dataSequence 00D1  
                                                 ___rparam_used 000001  
                                                    ___fltol@f1 0039  
                                                  ?_stepCounter 0012  
                                                   i2uartTx@ptr 0001  
                                                __pcstackCOMRAM 0001  
                                                  __newSequence 0056  
                                                  __pidataBANK0 22DA  
                                                  __pidataBANK1 1EC4  
                                               isr@single_cycle 0048  
                                          __size_of_executeData 0288  
                                                  i2_printError 1B80  
                                                  ?_touchObject 0001  
                                                _errString_ZEND 015E  
                                                _errString_Feed 0092  
                                                ?_initPinMotors 0001  
                                                     ?i2_uartTx 0001  
                                                    __pbssBANK0 00C8  
                                          __size_of_newSequence 0008  
                                                    _feeder1Pos 060D  
                                                    _feeder2Pos 060B  
                                                    _feeder3Pos 0609  
                                       __size_of_getNewSequence 000E  
                                                    _fatalError 2574  
                                            __size_of_reduceSeq 0008  
                                            __size_of_retPeriod 000E  
                                                _touch_pressure 0607  
                                            __size_of_shiftData 0060  
                                            __size_of_resetStep 000A  
                                                       _ADC_res 004A  
                                                       ?_uartTx 0012  
                                                     ?_abortAll 0001  
                                                     ?___xxtofl 0012  
                                          __end_of_increaseStep 2574  
                                                     ?_clearTM0 0001  
                                                    ??i2_uartTx 0004  
                                            __size_of_rotateObj 00DC  
                                             _errString_Command 00B0  
                                            __size_of_usartInit 001E  
                                        __size_of_interruptInit 003C  
                                          __size_of_setThermRel 000A  
                                            __size_of_storeData 017C  
                                                     ?_tim0Init 0001  
                                                     ?_tim1Init 0001  
                                                     ?_tim2Init 0012  
                                          __size_of_moveToPoint 03C6  
                                          storeData@receivedMex 00C8  
                                               _newSequenceData 00E5  
                                          __size_of_setTouchRel 000A  
                                                       __Hparam 0000  
                                                       __Lparam 0000  
                                        __end_of_touch_pressure 0609  
                                                       ___fldiv 0612  
                                                     ?_startADC 0001  
                                                     ?_stepMade 0012  
                                                       ___fltol 192E  
                                                  __psmallconst 0600  
                                                       __pcinit 2158  
                                         __end_of_whatsTM0Limit 256C  
                                                       _getData 2498  
                                                       __ramtop 0600  
                                                     ?_writeTM0 0001  
                                                    _pickObject 238A  
                                                       __ptext0 148C  
                                                       __ptext1 2402  
                                                       __ptext2 2420  
                                                       __ptext3 247C  
                                                       __ptext4 2448  
                                                       __ptext5 1636  
                                                       __ptext6 1A64  
                                                       __ptext7 223E  
                                                       __ptext8 21DE  
                                                       __ptext9 1092  
                                               __size_of_uartTx 004E  
                                                     _T0CONbits 000FD5  
                                                       _initADC 23DC  
                                                     _T1CONbits 000FCD  
                                               ??_initPinMotors 0012  
                                                       _liftArm 2098  
                                                     _T2CONbits 000FCA  
                                                    ??_abortAll 0008  
                                                       _readSeq 254C  
                                                  __size_of_isr 0194  
                                                    ??___xxtofl 0016  
                                                  ?i2_storeData 0001  
                                                    ??_clearTM0 0012  
                                                    _motCounter 005E  
                                                       _pwmStep 0053  
                                                       _stopADC 255C  
                                             __end_of_reduceSeq 254C  
                                             __end_of_retPeriod 24D0  
                                                    _releaseObj 235E  
                                          __size_of_returnTherm 000C  
                                          end_of_initialization 21D0  
                                          __size_of_returnTouch 000C  
                                              _resetNewSequence 24F4  
                                              rotateObj@totStep 00F1  
                                             __end_of_shiftData 223E  
                                                       isr@temp 0011  
                                             __end_of_resetStep 2526  
                                                    ??_tim0Init 0012  
                                                 __Lmediumconst 0000  
                                                    ??_tim1Init 0012  
                                                    ??_tim2Init 0014  
                                              storeData@command 0054  
                                              storeData@counter 0055  
                                                    _resetTherm 24FE  
                                                    _resetTouch 2512  
                                                       uartTx@i 0015  
                                                   ?_fatalError 0001  
                                                     _RCSTAbits 000FAB  
                                                       postdec1 000FE5  
                                                       postdec2 000FDD  
                                             __end_of_rotateObj 2098  
                                                       postinc0 000FEE  
                                                       postinc1 000FE6  
                                                       postinc2 000FDE  
                                                    ??_startADC 0012  
                                                    ??_stepMade 0014  
                                          __size_of_stepCounter 000C  
                                                 _interruptInit 2322  
                                             __end_of_usartInit 2420  
                                             __end_of_storeData 17B2  
                                    __end_ofrotateObj@stepAngle 0605  
                                                    ??_writeTM0 0001  
                                                     _PORTDbits 000F83  
                                                    _printError 1A64  
                                                     _PORTEbits 000F84  
                                           i2printError@errCode 0007  
                                                    _toggleStep 2526  
                                                 ___xxtofl@sign 001A  
                                                     _TRISCbits 000F94  
                                                     _TRISDbits 000F95  
                                                     _TRISEbits 000F96  
                                                   ___fldiv@grs 0033  
                                                   ___fldiv@rem 002C  
                                          __size_of_touchObject 0114  
                                                    _stepToggle 0052  
                                                    _touchTherm 1C9C  
                                                     _TXSTAbits 000FAC  
                                                _getNewSequence 248A  
                                                ?_interruptInit 0001  
                                                 __pidataCOMRAM 246C  
                                         __size_of_increaseStep 0008  
                                                   ?_pickObject 0001  
                                                   __fatalError 0057  
                                                __end_of_uartTx 228C  
                                                 moveToPoint@x1 0015  
                                                 moveToPoint@x2 0019  
                                                 moveToPoint@y1 0017  
                                                 moveToPoint@y2 001B  
                                           start_initialization 2158  
                                                     i2uartTx@i 0004  
                                                   __end_of_isr 019C  
                                           __size_of_fatalError 0008  
                                                   ?_releaseObj 0001  
                                             __size_ofi2_uartTx 004E  
                                        __end_of_getNewSequence 2498  
                                               _errString_Fatal 01AF  
                                               _errString_Bound 01D6  
                                                   ?_resetTherm 0001  
                                               _errString_Reset 0187  
                                                   ?_resetTouch 0001  
                                               _errString_Point 0135  
                                                  _increaseStep 256C  
                                        __size_of_resetPosition 0202  
                                                 ??_executeData 00F5  
                                                   __pdataBANK0 0080  
                                                   __pdataBANK1 0100  
                                                   _dataCounter 0058  
                                                      ??_uartTx 0015  
                                        moveToPoint@keepMovingX 0021  
                                        moveToPoint@keepMovingY 0022  
                                                   ?_printError 0001  
                                                     ___fldiv@a 0024  
                                                     ___fldiv@b 0020  
                                                _therm_pressure 0605  
                                                   ?_toggleStep 0001  
                                                   __pbssCOMRAM 0043  
                                                 __pcstackBANK0 00ED  
                                                 ??_newSequence 0012  
                                             __size_of_abortAll 0012  
                                             __size_of___xxtofl 01F8  
                                          __size_ofi2_storeData 017C  
                                             __size_of_clearTM0 000E  
                                               ?_getNewSequence 0012  
                                                   ?_touchTherm 0001  
                                           __size_of_pickObject 002C  
                                            executeData@errCode 00F7  
                                             __size_of_tim0Init 0012  
                                             __size_of_tim1Init 000E  
                                             __size_of_tim2Init 0014  
                                               ??_interruptInit 0012  
                                                     __pintcode 0008  
                                                      ?___fldiv 0020  
                                                      ?___fltol 0039  
                                      __end_of_resetNewSequence 24FE  
                                           __size_of_releaseObj 002C  
                                                 storeData@data 001B  
                                                      ?_getData 0012  
                                             __size_of_startADC 000A  
                                             __size_of_stepMade 0014  
                                        __end_of_therm_pressure 0607  
                                                      ?_initADC 0001  
                                                   __smallconst 0600  
                                                      ?_liftArm 0001  
                                                      ?_readSeq 0001  
                                             __size_of_writeTM0 000E  
                                           __end_of_executeData 1092  
                                                    shiftData@i 0014  
                                           __size_of_resetTherm 000A  
                                                     _newFeeder 004C  
                                                 _resetPosition 1092  
                                           __size_of_resetTouch 000A  
                                                 ??_setThermRel 0001  
                                                      ?_stopADC 0001  
                                                 ??_moveToPoint 001D  
                                                 ??_setTouchRel 0001  
                                           __end_of_newSequence 255C  
                                                     _reduceSeq 2544  
                                                      _LATAbits 000F89  
                                                      _LATBbits 000F8A  
                                                     _retPeriod 24C2  
                                                      _LATCbits 000F8B  
                                                      _LATDbits 000F8C  
                                           __size_of_printError 011C  
                                                      _IPR1bits 000F9F  
                                                      _PIE1bits 000F9D  
                                                     _shiftData 21DE  
                                                      i2u180_40 22D4  
                                                      i2u260_40 010A  
                                                      i2u252_40 002C  
                                                      i2u180_41 22CE  
                                                      i2u260_41 0104  
                                                      i2u252_41 0026  
                                                     _resetStep 251C  
                                                      i2u245_40 1838  
                                                      i2u261_40 0138  
                                                      i2u253_40 004C  
                                                      i2u245_41 1832  
                                                      i2u261_41 0132  
                                                      i2u253_41 0046  
                                                      i2u262_40 015E  
                                                      i2u254_40 006A  
                                                      i2u262_41 0158  
                                                      i2u254_41 0064  
                                                      i2u263_40 0176  
                                                      i2u255_40 0084  
                                                      i2u263_41 0170  
                                                      i2u255_41 007E  
                                                      i2u256_40 009C  
                                                      i2u256_41 0096  
                                                      i2u257_40 00C0  
                                                      i2u257_41 00BA  
                                                      _PIR1bits 000F9E  
                                                      i2u258_40 00D6  
                                                      i2u258_41 00D0  
                                                      i2u179_40 22B6  
                                                      i2u259_40 00E8  
                                                      i2u179_41 22B0  
                                                      i2u259_41 00E2  
                                           __size_of_toggleStep 000A  
                                                  ??_fatalError 0001  
                                                     _posVector 0043  
                                                      _RCONbits 000FD0  
                                                     _therm_rel 005B  
                                                     _pwmPeriod 0046  
                                                     _rotateObj 1FBC  
                                                    _ADCON0bits 000FC2  
                                                    _ADCON1bits 000FC1  
                                           __size_of_touchTherm 0114  
                                                     _usartInit 2402  
                                                     _touch_rel 005C  
                                            __end_of_feeder1Pos 060F  
                                            __end_of_feeder2Pos 060D  
                                            __end_of_feeder3Pos 060B  
                                                     _storeData 1636  
                                                ?_resetPosition 0001  
                                         __end_of_initPinMotors 23DC  
                                                 ??_returnTherm 0014  
                                                 ??_returnTouch 0014  
                                                      i2_uartTx 228C  
                                                     copy_data0 216C  
                                                     copy_data1 218C  
                                                     copy_data2 21AC  
                                            __end_of_fatalError 257C  
                                            rotateObj@stepAngle 0601  
                                                    ?_reduceSeq 0001  
                                                    ?_retPeriod 0001  
                                                    rotateObj@i 00F3  
                                        __size_of_whatsTM0Limit 0008  
                                           __end_of_setThermRel 2544  
                                           __end_of_moveToPoint 0E0A  
                                             printError@errCode 0018  
                                                    ?_shiftData 0001  
                                                 ??_stepCounter 0014  
                                                      __Hrparam 0000  
                                                    ?_resetStep 0001  
                                           __end_of_setTouchRel 253A  
                                                      __Lrparam 0000  
                                              __size_of___fldiv 0432  
                                              __size_of___fltol 0136  
                                                   _executeData 0E0A  
                                                  ??_pickObject 0015  
                                                    ?_rotateObj 0001  
                                      moveToPoint@MOT1Direction 001F  
                                                 ?i2_printError 0001  
                                              __size_of_getData 000E  
                                      moveToPoint@MOT2Direction 0020  
                                                 ??_touchObject 0015  
                                                      _abortAll 245A  
                                                    ?_usartInit 0001  
                                              __size_of_initADC 0026  
                                                      ___xxtofl 1294  
                                              __size_of_liftArm 00C0  
                                                    ?_storeData 0001  
                                                      _clearTM0 24A6  
                                              __size_of_readSeq 0008  
                                            storeData@mexLength 006C  
                                                      _tm0Error 0050  
                                                      _tm0Limit 005D  
                                                   _newSequence 2554  
                                                      __ptext10 24F4  
                                                      __ptext11 2544  
                                                      __ptext20 24D0  
                                                      __ptext12 254C  
                                                      __ptext21 24FE  
                                                      __ptext13 2554  
                                                      __ptext30 0612  
                                                      __ptext22 1DB0  
                                                      __ptext14 2322  
                                                      __ptext31 235E  
                                                      __ptext23 255C  
                                                      __ptext15 23B6  
                                                      __ptext32 238A  
                                                      __ptext24 2508  
                                                      __ptext16 23DC  
                                                      __ptext41 17B2  
                                                      __ptext33 0A44  
                                                      __ptext25 24DC  
                                                      __ptext17 248A  
                                                      __ptext50 245A  
                                                      __ptext42 24B4  
                                                      __ptext34 24E8  
                                                      __ptext26 2512  
                                                      __ptext18 0E0A  
                                                      __ptext51 1B80  
                                                      __ptext43 2564  
                                                      __ptext35 2098  
                                                      __ptext27 1FBC  
                                                      __ptext19 1C9C  
                                                      __ptext52 228C  
                                                      __ptext44 2526  
                                                      __ptext36 2434  
                                                      __ptext28 1294  
                                                      __ptext45 2530  
                                                      __ptext37 251C  
                                                      __ptext29 192E  
                                                      __ptext46 253A  
                                                      __ptext38 2498  
                                                      __ptext47 24C2  
                                                      __ptext39 24A6  
                                                      __ptext48 256C  
                                                      __ptext49 2574  
                                                  ??_releaseObj 0015  
                                              __size_of_stopADC 0008  
                                                      _maxFeedX 0610  
                                                      _maxFeedY 060F  
                                           __end_of_returnTherm 24DC  
                                           __end_of_returnTouch 24E8  
                                                      _tim0Init 2448  
                                                      _tim1Init 247C  
                                                      _tim2Init 2420  
                                                 __size_of_main 01AA  
                                            __end_of_pickObject 23B6  
                                                  ??_resetTherm 0012  
                                                  ??_resetTouch 0012  
                                                     uartTx@ptr 0012  
                                                      _rotAngle 004E  
                                               isr@completeStep 0059  
                                                      int$flags 006D  
                                                      _startADC 2508  
                                                      _stepMade 2434  
                                                      _stepMot1 008C  
                                                      _stepMot2 0088  
                                                      _stepMot3 0084  
                                           __end_of_stepCounter 24F4  
                                             rotateObj@rotAngle 00F0  
                                                ??i2_printError 0005  
                                            __end_of_releaseObj 238A  
                                                      _writeTM0 24B4  
                                                  ??_printError 0016  
                                                 _whatsTM0Limit 2564  
                                               ??_resetPosition 0015  
                                            tim2Init@_pwmPeriod 0012  
                                                    _INTCONbits 000FF2  
                                                  ??_toggleStep 0001  
                                              ??_getNewSequence 0014  
                                            __end_of_resetTherm 2508  
                                            __end_of_resetTouch 251C  
                                                   _setThermRel 253A  
                                                  uartTx@length 0014  
                                                   _moveToPoint 0A44  
                                           __end_of_touchObject 1EC4  
                                                      intlevel2 257C  
                                                  ??_touchTherm 0015  
                                                   _setTouchRel 2530  
                                                   ??_reduceSeq 0012  
                                                   ??_retPeriod 0003  
                                                    _RCSTA1bits 000FAB  
                                            __end_of_printError 1B80  
                                                   ??_shiftData 0012  
                                                   ??_resetStep 0012  
                                            __end_of_toggleStep 2530  
                                             ?_resetNewSequence 0001  
                                                ?_whatsTM0Limit 0001  
                                                   ??_rotateObj 00ED  
                                            ??_resetNewSequence 0012  
                                            __end_of_touchTherm 1DB0  
                                                   ??_usartInit 0012  
                                                 ??i2_storeData 0008  
                                                   ??_storeData 0019  
                                                   _returnTherm 24D0  
                                                   _returnTouch 24DC  
                                                   _stepCounter 24E8  
