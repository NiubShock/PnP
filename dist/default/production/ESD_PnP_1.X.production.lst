

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Apr 27 14:51:37 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    70                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    71  0000                     
    72                           ; Version 2.20
    73                           ; Generated 12/02/2020 GMT
    74                           ; 
    75                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC18F452 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106  0000                     
   107                           	psect	idataCOMRAM
   108  001BD0                     __pidataCOMRAM:
   109                           	callstack 0
   110                           
   111                           ;initializer for _motCounter
   112  001BD0  0000               	dw	0
   113  001BD2  0001               	dw	1
   114  001BD4  0000               	dw	0
   115  001BD6  0001               	dw	1
   116  001BD8  0000               	dw	0
   117  001BDA  0001               	dw	1
   118                           
   119                           ;initializer for rotateObj@rotSequence
   120  001BDC  09                 	db	9
   121  001BDD  03                 	db	3
   122  001BDE  06                 	db	6
   123  001BDF  0C                 	db	12
   124                           
   125                           ;initializer for _stepMot3
   126  001BE0  09                 	db	9
   127  001BE1  03                 	db	3
   128  001BE2  06                 	db	6
   129  001BE3  0C                 	db	12
   130                           
   131                           ;initializer for _stepMot2
   132  001BE4  11                 	db	17
   133  001BE5  05                 	db	5
   134  001BE6  0C                 	db	12
   135  001BE7  18                 	db	24
   136                           
   137                           ;initializer for _stepMot1
   138  001BE8  22                 	db	34
   139  001BE9  06                 	db	6
   140  001BEA  0C                 	db	12
   141  001BEB  28                 	db	40
   142                           
   143                           ;initializer for _maxY
   144  001BEC  00C9               	dw	201
   145                           
   146                           ;initializer for _maxX
   147  001BEE  00C9               	dw	201
   148                           
   149                           ;initializer for storeData@mexLength
   150  001BF0  05                 	db	5
   151                           
   152                           	psect	idataBANK0
   153  0019FC                     __pidataBANK0:
   154                           	callstack 0
   155                           
   156                           ;initializer for _errString_Bound
   157  0019FC  45                 	db	69
   158  0019FD  72                 	db	114
   159  0019FE  72                 	db	114
   160  0019FF  6F                 	db	111
   161  001A00  72                 	db	114
   162  001A01  2C                 	db	44
   163  001A02  20                 	db	32
   164  001A03  70                 	db	112
   165  001A04  6F                 	db	111
   166  001A05  69                 	db	105
   167  001A06  6E                 	db	110
   168  001A07  74                 	db	116
   169  001A08  20                 	db	32
   170  001A09  6F                 	db	111
   171  001A0A  75                 	db	117
   172  001A0B  74                 	db	116
   173  001A0C  73                 	db	115
   174  001A0D  69                 	db	105
   175  001A0E  64                 	db	100
   176  001A0F  65                 	db	101
   177  001A10  20                 	db	32
   178  001A11  62                 	db	98
   179  001A12  6F                 	db	111
   180  001A13  75                 	db	117
   181  001A14  6E                 	db	110
   182  001A15  64                 	db	100
   183  001A16  61                 	db	97
   184  001A17  72                 	db	114
   185  001A18  69                 	db	105
   186  001A19  65                 	db	101
   187  001A1A  73                 	db	115
   188  001A1B  0A                 	db	10
   189  001A1C  00                 	db	0
   190                           
   191                           ;initializer for _errString_Feed
   192  001A1D  45                 	db	69
   193  001A1E  72                 	db	114
   194  001A1F  72                 	db	114
   195  001A20  6F                 	db	111
   196  001A21  72                 	db	114
   197  001A22  2C                 	db	44
   198  001A23  20                 	db	32
   199  001A24  66                 	db	102
   200  001A25  65                 	db	101
   201  001A26  65                 	db	101
   202  001A27  64                 	db	100
   203  001A28  20                 	db	32
   204  001A29  6C                 	db	108
   205  001A2A  69                 	db	105
   206  001A2B  6E                 	db	110
   207  001A2C  65                 	db	101
   208  001A2D  20                 	db	32
   209  001A2E  6E                 	db	110
   210  001A2F  6F                 	db	111
   211  001A30  74                 	db	116
   212  001A31  20                 	db	32
   213  001A32  64                 	db	100
   214  001A33  65                 	db	101
   215  001A34  66                 	db	102
   216  001A35  69                 	db	105
   217  001A36  6E                 	db	110
   218  001A37  65                 	db	101
   219  001A38  64                 	db	100
   220  001A39  0A                 	db	10
   221  001A3A  00                 	db	0
   222                           
   223                           ;initializer for _errString_Command
   224  001A3B  43                 	db	67
   225  001A3C  6F                 	db	111
   226  001A3D  6D                 	db	109
   227  001A3E  6D                 	db	109
   228  001A3F  61                 	db	97
   229  001A40  6E                 	db	110
   230  001A41  64                 	db	100
   231  001A42  20                 	db	32
   232  001A43  6E                 	db	110
   233  001A44  6F                 	db	111
   234  001A45  74                 	db	116
   235  001A46  20                 	db	32
   236  001A47  72                 	db	114
   237  001A48  65                 	db	101
   238  001A49  63                 	db	99
   239  001A4A  6F                 	db	111
   240  001A4B  67                 	db	103
   241  001A4C  6E                 	db	110
   242  001A4D  69                 	db	105
   243  001A4E  7A                 	db	122
   244  001A4F  65                 	db	101
   245  001A50  64                 	db	100
   246  001A51  0A                 	db	10
   247  001A52  00                 	db	0
   248                           
   249                           	psect	idataBANK1
   250  001780                     __pidataBANK1:
   251                           	callstack 0
   252                           
   253                           ;initializer for _errString_PointZ
   254  001780  45                 	db	69
   255  001781  72                 	db	114
   256  001782  72                 	db	114
   257  001783  6F                 	db	111
   258  001784  72                 	db	114
   259  001785  2C                 	db	44
   260  001786  20                 	db	32
   261  001787  74                 	db	116
   262  001788  69                 	db	105
   263  001789  6D                 	db	109
   264  00178A  65                 	db	101
   265  00178B  20                 	db	32
   266  00178C  65                 	db	101
   267  00178D  78                 	db	120
   268  00178E  63                 	db	99
   269  00178F  65                 	db	101
   270  001790  65                 	db	101
   271  001791  64                 	db	100
   272  001792  65                 	db	101
   273  001793  64                 	db	100
   274  001794  20                 	db	32
   275  001795  74                 	db	116
   276  001796  6F                 	db	111
   277  001797  20                 	db	32
   278  001798  72                 	db	114
   279  001799  65                 	db	101
   280  00179A  61                 	db	97
   281  00179B  63                 	db	99
   282  00179C  68                 	db	104
   283  00179D  20                 	db	32
   284  00179E  74                 	db	116
   285  00179F  68                 	db	104
   286  0017A0  65                 	db	101
   287  0017A1  20                 	db	32
   288  0017A2  65                 	db	101
   289  0017A3  6E                 	db	110
   290  0017A4  64                 	db	100
   291  0017A5  20                 	db	32
   292  0017A6  6F                 	db	111
   293  0017A7  66                 	db	102
   294  0017A8  20                 	db	32
   295  0017A9  74                 	db	116
   296  0017AA  68                 	db	104
   297  0017AB  65                 	db	101
   298  0017AC  20                 	db	32
   299  0017AD  5A                 	db	90
   300  0017AE  20                 	db	32
   301  0017AF  41                 	db	65
   302  0017B0  78                 	db	120
   303  0017B1  69                 	db	105
   304  0017B2  73                 	db	115
   305  0017B3  0A                 	db	10
   306  0017B4  00                 	db	0
   307                           
   308                           ;initializer for _errString_Point
   309  0017B5  45                 	db	69
   310  0017B6  72                 	db	114
   311  0017B7  72                 	db	114
   312  0017B8  6F                 	db	111
   313  0017B9  72                 	db	114
   314  0017BA  2C                 	db	44
   315  0017BB  20                 	db	32
   316  0017BC  74                 	db	116
   317  0017BD  69                 	db	105
   318  0017BE  6D                 	db	109
   319  0017BF  65                 	db	101
   320  0017C0  20                 	db	32
   321  0017C1  65                 	db	101
   322  0017C2  78                 	db	120
   323  0017C3  63                 	db	99
   324  0017C4  65                 	db	101
   325  0017C5  65                 	db	101
   326  0017C6  64                 	db	100
   327  0017C7  65                 	db	101
   328  0017C8  64                 	db	100
   329  0017C9  20                 	db	32
   330  0017CA  74                 	db	116
   331  0017CB  6F                 	db	111
   332  0017CC  20                 	db	32
   333  0017CD  72                 	db	114
   334  0017CE  65                 	db	101
   335  0017CF  61                 	db	97
   336  0017D0  63                 	db	99
   337  0017D1  68                 	db	104
   338  0017D2  20                 	db	32
   339  0017D3  74                 	db	116
   340  0017D4  68                 	db	104
   341  0017D5  65                 	db	101
   342  0017D6  20                 	db	32
   343  0017D7  70                 	db	112
   344  0017D8  6F                 	db	111
   345  0017D9  69                 	db	105
   346  0017DA  6E                 	db	110
   347  0017DB  74                 	db	116
   348  0017DC  0A                 	db	10
   349  0017DD  00                 	db	0
   350                           
   351                           ;initializer for _errString_ZEND
   352  0017DE  45                 	db	69
   353  0017DF  72                 	db	114
   354  0017E0  72                 	db	114
   355  0017E1  6F                 	db	111
   356  0017E2  72                 	db	114
   357  0017E3  2C                 	db	44
   358  0017E4  20                 	db	32
   359  0017E5  6E                 	db	110
   360  0017E6  6F                 	db	111
   361  0017E7  20                 	db	32
   362  0017E8  6F                 	db	111
   363  0017E9  62                 	db	98
   364  0017EA  6A                 	db	106
   365  0017EB  65                 	db	101
   366  0017EC  63                 	db	99
   367  0017ED  74                 	db	116
   368  0017EE  20                 	db	32
   369  0017EF  72                 	db	114
   370  0017F0  65                 	db	101
   371  0017F1  6C                 	db	108
   372  0017F2  65                 	db	101
   373  0017F3  76                 	db	118
   374  0017F4  61                 	db	97
   375  0017F5  74                 	db	116
   376  0017F6  65                 	db	101
   377  0017F7  64                 	db	100
   378  0017F8  20                 	db	32
   379  0017F9  61                 	db	97
   380  0017FA  6C                 	db	108
   381  0017FB  6F                 	db	111
   382  0017FC  6E                 	db	110
   383  0017FD  67                 	db	103
   384  0017FE  20                 	db	32
   385  0017FF  5A                 	db	90
   386  001800  20                 	db	32
   387  001801  41                 	db	65
   388  001802  78                 	db	120
   389  001803  69                 	db	105
   390  001804  73                 	db	115
   391  001805  0A                 	db	10
   392  001806  00                 	db	0
   393                           
   394                           ;initializer for _errString_Reset
   395  001807  45                 	db	69
   396  001808  72                 	db	114
   397  001809  72                 	db	114
   398  00180A  6F                 	db	111
   399  00180B  72                 	db	114
   400  00180C  2C                 	db	44
   401  00180D  20                 	db	32
   402  00180E  74                 	db	116
   403  00180F  69                 	db	105
   404  001810  6D                 	db	109
   405  001811  65                 	db	101
   406  001812  20                 	db	32
   407  001813  65                 	db	101
   408  001814  78                 	db	120
   409  001815  63                 	db	99
   410  001816  65                 	db	101
   411  001817  65                 	db	101
   412  001818  64                 	db	100
   413  001819  65                 	db	101
   414  00181A  64                 	db	100
   415  00181B  20                 	db	32
   416  00181C  74                 	db	116
   417  00181D  6F                 	db	111
   418  00181E  20                 	db	32
   419  00181F  72                 	db	114
   420  001820  65                 	db	101
   421  001821  73                 	db	115
   422  001822  65                 	db	101
   423  001823  74                 	db	116
   424  001824  20                 	db	32
   425  001825  70                 	db	112
   426  001826  6F                 	db	111
   427  001827  73                 	db	115
   428  001828  69                 	db	105
   429  001829  74                 	db	116
   430  00182A  69                 	db	105
   431  00182B  6F                 	db	111
   432  00182C  6E                 	db	110
   433  00182D  0A                 	db	10
   434  00182E  00                 	db	0
   435                           
   436                           ;initializer for _errString_Fatal
   437  00182F  46                 	db	70
   438  001830  61                 	db	97
   439  001831  74                 	db	116
   440  001832  61                 	db	97
   441  001833  6C                 	db	108
   442  001834  20                 	db	32
   443  001835  45                 	db	69
   444  001836  72                 	db	114
   445  001837  72                 	db	114
   446  001838  6F                 	db	111
   447  001839  72                 	db	114
   448  00183A  2C                 	db	44
   449  00183B  20                 	db	32
   450  00183C  70                 	db	112
   451  00183D  6C                 	db	108
   452  00183E  65                 	db	101
   453  00183F  61                 	db	97
   454  001840  73                 	db	115
   455  001841  65                 	db	101
   456  001842  20                 	db	32
   457  001843  72                 	db	114
   458  001844  65                 	db	101
   459  001845  73                 	db	115
   460  001846  65                 	db	101
   461  001847  74                 	db	116
   462  001848  20                 	db	32
   463  001849  74                 	db	116
   464  00184A  68                 	db	104
   465  00184B  65                 	db	101
   466  00184C  20                 	db	32
   467  00184D  64                 	db	100
   468  00184E  65                 	db	101
   469  00184F  76                 	db	118
   470  001850  69                 	db	105
   471  001851  63                 	db	99
   472  001852  65                 	db	101
   473  001853  21                 	db	33
   474  001854  0A                 	db	10
   475  001855  00                 	db	0
   476                           
   477                           	psect	smallconst
   478  000600                     __psmallconst:
   479                           	callstack 0
   480  000600  00                 	db	0
   481  000601  FFAC               	dw	65452
   482  000603  3DB3               	dw	15795
   483  000605                     __end_ofrotateObj@stepAngle:
   484                           	callstack 0
   485  000605  0400               	dw	1024
   486  000607                     __end_of_therm_pressure:
   487                           	callstack 0
   488  000607  0200               	dw	512
   489  000609                     __end_of_touch_pressure:
   490                           	callstack 0
   491  000609                     _feeder3Pos:
   492                           	callstack 0
   493  000609  1E                 	db	30
   494  00060A  96                 	db	150
   495  00060B                     __end_of_feeder3Pos:
   496                           	callstack 0
   497  00060B                     _feeder2Pos:
   498                           	callstack 0
   499  00060B  1E                 	db	30
   500  00060C  64                 	db	100
   501  00060D                     __end_of_feeder2Pos:
   502                           	callstack 0
   503  00060D                     _feeder1Pos:
   504                           	callstack 0
   505  00060D  1E                 	db	30
   506  00060E  32                 	db	50
   507  00060F                     __end_of_feeder1Pos:
   508                           	callstack 0
   509  00060F  C8                 	db	200
   510  000610                     __end_of_maxFeedY:
   511                           	callstack 0
   512  000610  3C                 	db	60
   513  000611                     __end_of_maxFeedX:
   514                           	callstack 0
   515  0000                     _TMR0	set	4054
   516  0000                     _T1CONbits	set	4045
   517  0000                     _TXREG	set	4013
   518  0000                     _SPBRG	set	4015
   519  0000                     _TXSTAbits	set	4012
   520  0000                     _TRISCbits	set	3988
   521  0000                     _RCREG1	set	4014
   522  0000                     _ADRESH	set	4036
   523  0000                     _ADRESL	set	4035
   524  0000                     _PIR1bits	set	3998
   525  0000                     _RCONbits	set	4048
   526  0000                     _INTCONbits	set	4082
   527  0000                     _IPR1bits	set	3999
   528  0000                     _PIE1bits	set	3997
   529  0000                     _ADCON0bits	set	4034
   530  0000                     _RCSTAbits	set	4011
   531  0000                     _RCSTA1bits	set	4011
   532  0000                     _LATD	set	3980
   533  0000                     _PORTDbits	set	3971
   534  0000                     _TMR2	set	4044
   535  0000                     _LATC	set	3979
   536  0000                     _LATB	set	3978
   537  0000                     _LATA	set	3977
   538  0000                     _PORTEbits	set	3972
   539  0000                     _T0CONbits	set	4053
   540  0000                     _T2CONbits	set	4042
   541  0000                     _LATDbits	set	3980
   542  0000                     _LATCbits	set	3979
   543  0000                     _LATBbits	set	3978
   544  0000                     _LATAbits	set	3977
   545  0000                     _TRISDbits	set	3989
   546  0000                     _TRISEbits	set	3990
   547  0000                     _TRISD	set	3989
   548  0000                     _TRISC	set	3988
   549  0000                     _TRISB	set	3987
   550  0000                     _TRISA	set	3986
   551  0000                     _ADCON1bits	set	4033
   552  000611  00                 	db	0	; dummy byte at the end
   553  0000                     
   554                           ; #config settings
   555                           
   556                           	psect	cinit
   557  001916                     __pcinit:
   558                           	callstack 0
   559  001916                     start_initialization:
   560                           	callstack 0
   561  001916                     __initialization:
   562                           	callstack 0
   563                           
   564                           ; Initialize objects allocated to BANK1 (214 bytes)
   565                           ; load TBLPTR registers with __pidataBANK1
   566  001916  0E80               	movlw	low __pidataBANK1
   567  001918  6EF6               	movwf	tblptrl,c
   568  00191A  0E17               	movlw	high __pidataBANK1
   569  00191C  6EF7               	movwf	tblptrh,c
   570  00191E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   571  001920  6EF8               	movwf	tblptru,c
   572  001922  EE01  F000         	lfsr	0,__pdataBANK1
   573  001926  EE10 F0D6          	lfsr	1,214
   574  00192A                     copy_data0:
   575  00192A  0009               	tblrd		*+
   576  00192C  CFF5 FFEE          	movff	tablat,postinc0
   577  001930  50E5               	movf	postdec1,w,c
   578  001932  50E1               	movf	fsr1l,w,c
   579  001934  E1FA               	bnz	copy_data0
   580                           
   581                           ; Initialize objects allocated to BANK0 (87 bytes)
   582                           ; load TBLPTR registers with __pidataBANK0
   583  001936  0EFC               	movlw	low __pidataBANK0
   584  001938  6EF6               	movwf	tblptrl,c
   585  00193A  0E19               	movlw	high __pidataBANK0
   586  00193C  6EF7               	movwf	tblptrh,c
   587  00193E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   588  001940  6EF8               	movwf	tblptru,c
   589  001942  EE00  F080         	lfsr	0,__pdataBANK0
   590  001946  EE10 F057          	lfsr	1,87
   591  00194A                     copy_data1:
   592  00194A  0009               	tblrd		*+
   593  00194C  CFF5 FFEE          	movff	tablat,postinc0
   594  001950  50E5               	movf	postdec1,w,c
   595  001952  50E1               	movf	fsr1l,w,c
   596  001954  E1FA               	bnz	copy_data1
   597                           
   598                           ; Initialize objects allocated to COMRAM (33 bytes)
   599                           ; load TBLPTR registers with __pidataCOMRAM
   600  001956  0ED0               	movlw	low __pidataCOMRAM
   601  001958  6EF6               	movwf	tblptrl,c
   602  00195A  0E1B               	movlw	high __pidataCOMRAM
   603  00195C  6EF7               	movwf	tblptrh,c
   604  00195E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   605  001960  6EF8               	movwf	tblptru,c
   606  001962  EE00  F02D         	lfsr	0,__pdataCOMRAM
   607  001966  EE10 F021          	lfsr	1,33
   608  00196A                     copy_data2:
   609  00196A  0009               	tblrd		*+
   610  00196C  CFF5 FFEE          	movff	tablat,postinc0
   611  001970  50E5               	movf	postdec1,w,c
   612  001972  50E1               	movf	fsr1l,w,c
   613  001974  E1FA               	bnz	copy_data2
   614                           
   615                           ; Clear objects allocated to BANK0 (20 bytes)
   616  001976  EE00  F0D7         	lfsr	0,__pbssBANK0
   617  00197A  0E14               	movlw	20
   618  00197C                     clear_0:
   619  00197C  6AEE               	clrf	postinc0,c
   620  00197E  06E8               	decf	wreg,f,c
   621  001980  E1FD               	bnz	clear_0
   622                           
   623                           ; Clear objects allocated to COMRAM (44 bytes)
   624  001982  EE00  F001         	lfsr	0,__pbssCOMRAM
   625  001986  0E2C               	movlw	44
   626  001988                     clear_1:
   627  001988  6AEE               	clrf	postinc0,c
   628  00198A  06E8               	decf	wreg,f,c
   629  00198C  E1FD               	bnz	clear_1
   630  00198E                     end_of_initialization:
   631                           	callstack 0
   632  00198E                     __end_of__initialization:
   633                           	callstack 0
   634  00198E  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   635  001990  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   636  001992  0E00               	movlw	low (__Lmediumconst shr (0+16))
   637  001994  6EF8               	movwf	tblptru,c
   638  001996  0100               	movlb	0
   639  001998  EF37  F007         	goto	_main	;jump to C main() function
   640                           
   641                           	psect	bssCOMRAM
   642  000001                     __pbssCOMRAM:
   643                           	callstack 0
   644  000001                     storeData@receivedMex:
   645                           	callstack 0
   646  000001                     	ds	9
   647  00000A                     _posVector:
   648                           	callstack 0
   649  00000A                     	ds	3
   650  00000D                     _pwmPeriod:
   651                           	callstack 0
   652  00000D                     	ds	2
   653  00000F                     isr@single_cycle:
   654                           	callstack 0
   655  00000F                     	ds	2
   656  000011                     _ADC_res:
   657                           	callstack 0
   658  000011                     	ds	2
   659  000013                     _newFeeder:
   660                           	callstack 0
   661  000013                     	ds	2
   662  000015                     _rotAngle:
   663                           	callstack 0
   664  000015                     	ds	2
   665  000017                     _tm0Error:
   666                           	callstack 0
   667  000017                     	ds	2
   668  000019                     _stepToggle:
   669                           	callstack 0
   670  000019                     	ds	1
   671  00001A                     _pwmStep:
   672                           	callstack 0
   673  00001A                     	ds	1
   674  00001B                     	ds	1
   675  00001C                     storeData@counter:
   676                           	callstack 0
   677  00001C                     	ds	1
   678  00001D                     __newSequence:
   679                           	callstack 0
   680  00001D                     	ds	1
   681  00001E                     __fatalError:
   682                           	callstack 0
   683  00001E                     	ds	1
   684  00001F                     _dataCounter:
   685                           	callstack 0
   686  00001F                     	ds	1
   687  000020                     isr@completeStep:
   688                           	callstack 0
   689  000020                     	ds	1
   690  000021                     isr@tm0Count:
   691                           	callstack 0
   692  000021                     	ds	1
   693  000022                     _therm_rel:
   694                           	callstack 0
   695  000022                     	ds	1
   696  000023                     _touch_rel:
   697                           	callstack 0
   698  000023                     	ds	1
   699  000024                     _tm0Limit:
   700                           	callstack 0
   701  000024                     	ds	1
   702  000025                     _newSequenceData:
   703                           	callstack 0
   704  000025                     	ds	8
   705                           
   706                           	psect	dataCOMRAM
   707  00002D                     __pdataCOMRAM:
   708                           	callstack 0
   709  00002D                     _motCounter:
   710                           	callstack 0
   711  00002D                     	ds	12
   712  000039                     rotateObj@rotSequence:
   713                           	callstack 0
   714  000039                     	ds	4
   715  00003D                     _stepMot3:
   716                           	callstack 0
   717  00003D                     	ds	4
   718  000041                     _stepMot2:
   719                           	callstack 0
   720  000041                     	ds	4
   721  000045                     _stepMot1:
   722                           	callstack 0
   723  000045                     	ds	4
   724  000049                     	ds	2
   725  00004B                     	ds	2
   726  00004D                     storeData@mexLength:
   727                           	callstack 0
   728  00004D                     	ds	1
   729                           
   730                           	psect	bssBANK0
   731  0000D7                     __pbssBANK0:
   732                           	callstack 0
   733  0000D7                     _dataSequence:
   734                           	callstack 0
   735  0000D7                     	ds	20
   736                           
   737                           	psect	dataBANK0
   738  000080                     __pdataBANK0:
   739                           	callstack 0
   740  000080                     _errString_Bound:
   741                           	callstack 0
   742  000080                     	ds	33
   743  0000A1                     _errString_Feed:
   744                           	callstack 0
   745  0000A1                     	ds	30
   746  0000BF                     _errString_Command:
   747                           	callstack 0
   748  0000BF                     	ds	24
   749                           
   750                           	psect	dataBANK1
   751  000100                     __pdataBANK1:
   752                           	callstack 0
   753  000100                     _errString_PointZ:
   754                           	callstack 0
   755  000100                     	ds	53
   756  000135                     _errString_Point:
   757                           	callstack 0
   758  000135                     	ds	41
   759  00015E                     _errString_ZEND:
   760                           	callstack 0
   761  00015E                     	ds	41
   762  000187                     _errString_Reset:
   763                           	callstack 0
   764  000187                     	ds	40
   765  0001AF                     _errString_Fatal:
   766                           	callstack 0
   767  0001AF                     	ds	39
   768                           
   769                           	psect	cstackBANK0
   770  0000EB                     __pcstackBANK0:
   771                           	callstack 0
   772  0000EB                     moveToPoint@MOT1Direction:
   773                           	callstack 0
   774                           
   775                           ; 1 bytes @ 0x0
   776  0000EB                     	ds	1
   777  0000EC                     moveToPoint@MOT2Direction:
   778                           	callstack 0
   779                           
   780                           ; 1 bytes @ 0x1
   781  0000EC                     	ds	1
   782  0000ED                     moveToPoint@keepMovingX:
   783                           	callstack 0
   784                           
   785                           ; 1 bytes @ 0x2
   786  0000ED                     	ds	1
   787  0000EE                     moveToPoint@keepMovingY:
   788                           	callstack 0
   789                           
   790                           ; 1 bytes @ 0x3
   791  0000EE                     	ds	1
   792  0000EF                     executeData@errCode:
   793                           	callstack 0
   794                           
   795                           ; 1 bytes @ 0x4
   796  0000EF                     	ds	1
   797  0000F0                     executeData@data:
   798                           	callstack 0
   799                           
   800                           ; 2 bytes @ 0x5
   801  0000F0                     	ds	2
   802  0000F2                     ??_main:
   803                           
   804                           ; 1 bytes @ 0x7
   805  0000F2                     	ds	2
   806  0000F4                     main@errCode:
   807                           	callstack 0
   808                           
   809                           ; 1 bytes @ 0x9
   810  0000F4                     	ds	1
   811  0000F5                     main@newData:
   812                           	callstack 0
   813                           
   814                           ; 2 bytes @ 0xA
   815  0000F5                     	ds	2
   816                           
   817                           	psect	cstackCOMRAM
   818  00004E                     __pcstackCOMRAM:
   819                           	callstack 0
   820  00004E                     ?_retPeriod:
   821                           	callstack 0
   822  00004E                     i2uartTx@ptr:
   823                           	callstack 0
   824                           
   825                           ; 2 bytes @ 0x0
   826  00004E                     	ds	2
   827  000050                     i2uartTx@length:
   828                           	callstack 0
   829                           
   830                           ; 1 bytes @ 0x2
   831  000050                     	ds	1
   832  000051                     i2uartTx@i:
   833                           	callstack 0
   834                           
   835                           ; 1 bytes @ 0x3
   836  000051                     	ds	1
   837  000052                     ??i2_printError:
   838                           
   839                           ; 1 bytes @ 0x4
   840  000052                     	ds	2
   841  000054                     i2printError@errCode:
   842                           	callstack 0
   843                           
   844                           ; 1 bytes @ 0x6
   845  000054                     	ds	1
   846  000055                     ??i2_storeData:
   847                           
   848                           ; 1 bytes @ 0x7
   849  000055                     	ds	2
   850  000057                     i2storeData@data:
   851                           	callstack 0
   852                           
   853                           ; 1 bytes @ 0x9
   854  000057                     	ds	1
   855  000058                     ??_isr:
   856                           
   857                           ; 1 bytes @ 0xA
   858  000058                     	ds	6
   859  00005E                     isr@temp:
   860                           	callstack 0
   861                           
   862                           ; 1 bytes @ 0x10
   863  00005E                     	ds	1
   864  00005F                     ??_shiftData:
   865  00005F                     ?_stepMade:
   866                           	callstack 0
   867  00005F                     ?_stepCounter:
   868                           	callstack 0
   869  00005F                     ?_returnTouch:
   870                           	callstack 0
   871  00005F                     ?_returnTherm:
   872                           	callstack 0
   873  00005F                     ?_getNewSequence:
   874                           	callstack 0
   875  00005F                     ?_getData:
   876                           	callstack 0
   877  00005F                     uartTx@ptr:
   878                           	callstack 0
   879  00005F                     tim2Init@_pwmPeriod:
   880                           	callstack 0
   881                           
   882                           ; 2 bytes @ 0x11
   883  00005F                     	ds	2
   884  000061                     shiftData@i:
   885                           	callstack 0
   886  000061                     uartTx@length:
   887                           	callstack 0
   888  000061                     stepMade@temp:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x13
   892  000061                     	ds	1
   893  000062                     resetPosition@keepMovingX:
   894                           	callstack 0
   895  000062                     uartTx@i:
   896                           	callstack 0
   897  000062                     moveToPoint@x1:
   898                           	callstack 0
   899                           
   900                           ; 2 bytes @ 0x14
   901  000062                     	ds	1
   902  000063                     ??_printError:
   903  000063                     resetPosition@keepMovingY:
   904                           	callstack 0
   905                           
   906                           ; 1 bytes @ 0x15
   907  000063                     	ds	1
   908  000064                     resetPosition@keepMovingZ:
   909                           	callstack 0
   910  000064                     moveToPoint@y1:
   911                           	callstack 0
   912                           
   913                           ; 2 bytes @ 0x16
   914  000064                     	ds	1
   915  000065                     printError@errCode:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x17
   919  000065                     	ds	1
   920  000066                     ??_storeData:
   921  000066                     moveToPoint@x2:
   922                           	callstack 0
   923                           
   924                           ; 2 bytes @ 0x18
   925  000066                     	ds	2
   926  000068                     storeData@data:
   927                           	callstack 0
   928  000068                     moveToPoint@y2:
   929                           	callstack 0
   930                           
   931                           ; 2 bytes @ 0x1A
   932  000068                     	ds	2
   933  00006A                     ??_moveToPoint:
   934                           
   935                           ; 1 bytes @ 0x1C
   936  00006A                     	ds	2
   937  00006C                     ??_executeData:
   938                           
   939                           ; 1 bytes @ 0x1E
   940  00006C                     	ds	2
   941                           
   942 ;;
   943 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   944 ;;
   945 ;; *************** function _main *****************
   946 ;; Defined at:
   947 ;;		line 19 in file "main.c"
   948 ;; Parameters:    Size  Location     Type
   949 ;;		None
   950 ;; Auto vars:     Size  Location     Type
   951 ;;  newData         2   10[BANK0 ] PTR struct .
   952 ;;		 -> newSequenceData(8), 
   953 ;;  errCode         1    9[BANK0 ] unsigned char 
   954 ;; Return value:  Size  Location     Type
   955 ;;                  1    wreg      void 
   956 ;; Registers used:
   957 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   963 ;;      Params:         0       0       0       0       0       0       0
   964 ;;      Locals:         0       3       0       0       0       0       0
   965 ;;      Temps:          0       2       0       0       0       0       0
   966 ;;      Totals:         0       5       0       0       0       0       0
   967 ;;Total ram usage:        5 bytes
   968 ;; Hardware stack levels required when called:    7
   969 ;; This function calls:
   970 ;;		_clearTM0
   971 ;;		_executeData
   972 ;;		_getNewSequence
   973 ;;		_initADC
   974 ;;		_initPinMotors
   975 ;;		_interruptInit
   976 ;;		_newSequence
   977 ;;		_printError
   978 ;;		_readSeq
   979 ;;		_reduceSeq
   980 ;;		_resetNewSequence
   981 ;;		_resetPosition
   982 ;;		_shiftData
   983 ;;		_storeData
   984 ;;		_tim0Init
   985 ;;		_tim1Init
   986 ;;		_tim2Init
   987 ;;		_usartInit
   988 ;; This function is called by:
   989 ;;		Startup code after reset
   990 ;; This function uses a non-reentrant model
   991 ;;
   992                           
   993                           	psect	text0
   994  000E6E                     __ptext0:
   995                           	callstack 0
   996  000E6E                     _main:
   997                           	callstack 24
   998  000E6E  FFFF               	dw	65535	; assembler added errata NOP
   999                           
  1000                           ;main.c: 23:     interruptInit();
  1001  000E70  EC78  F00D         	call	_interruptInit	;wreg free
  1002  000E74                     
  1003                           ;main.c: 24:     initPinMotors();
  1004  000E74  ECC2  F00D         	call	_initPinMotors	;wreg free
  1005  000E78                     
  1006                           ;main.c: 25:     initADC();
  1007  000E78  ECD5  F00D         	call	_initADC	;wreg free
  1008  000E7C                     
  1009                           ;main.c: 26:     usartInit();
  1010  000E7C  ECF9  F00D         	call	_usartInit	;wreg free
  1011  000E80                     
  1012                           ;main.c: 27:     tim0Init();
  1013  000E80  EC1C  F00E         	call	_tim0Init	;wreg free
  1014  000E84                     
  1015                           ;main.c: 28:     tim1Init();
  1016  000E84  EC2E  F00E         	call	_tim1Init	;wreg free
  1017  000E88                     
  1018                           ;main.c: 29:     tim2Init(10);
  1019  000E88  0E00               	movlw	0
  1020  000E8A  6E60               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1021  000E8C  0E0A               	movlw	10
  1022  000E8E  6E5F               	movwf	tim2Init@_pwmPeriod^0,c
  1023  000E90  EC08  F00E         	call	_tim2Init	;wreg free
  1024  000E94                     
  1025                           ;main.c: 32:     errCode = resetPosition();
  1026  000E94  EC36  F006         	call	_resetPosition	;wreg free
  1027  000E98  0100               	movlb	0	; () banked
  1028  000E9A  6FF4               	movwf	main@errCode& (0+255),b
  1029  000E9C                     
  1030                           ; BSR set to: 0
  1031                           ;main.c: 33:     if(errCode != 0){
  1032  000E9C  51F4               	movf	main@errCode& (0+255),w,b
  1033  000E9E  B4D8               	btfsc	status,2,c
  1034  000EA0  EF54  F007         	goto	u2481
  1035  000EA4  EF57  F007         	goto	u2480
  1036  000EA8                     u2481:
  1037  000EA8  FFFF               	dw	65535	; assembler added errata NOP
  1038  000EAA  EF5E  F007         	goto	l331
  1039  000EAE                     u2480:
  1040  000EAE  FFFF               	dw	65535	; assembler added errata NOP
  1041  000EB0                     
  1042                           ; BSR set to: 0
  1043                           ;main.c: 34:         printError(errCode);
  1044  000EB0  51F4               	movf	main@errCode& (0+255),w,b
  1045  000EB2  EC16  F00A         	call	_printError
  1046  000EB6                     l332:
  1047  000EB6  FFFF               	dw	65535	; assembler added errata NOP
  1048  000EB8  EF5B  F007         	goto	l332
  1049  000EBC                     l331:
  1050  000EBC  FFFF               	dw	65535	; assembler added errata NOP
  1051                           
  1052                           ; BSR set to: 0
  1053                           ;main.c: 39:     RCSTA1bits.CREN = 1;
  1054  000EBE  88AB               	bsf	171,4,c	;volatile
  1055  000EC0                     l3558:
  1056  000EC0  FFFF               	dw	65535	; assembler added errata NOP
  1057                           
  1058                           ;main.c: 42:         if(newSequence()){
  1059  000EC2  EC9A  F00E         	call	_newSequence	;wreg free
  1060  000EC6  0900               	iorlw	0
  1061  000EC8  B4D8               	btfsc	status,2,c
  1062  000ECA  EF69  F007         	goto	u2491
  1063  000ECE  EF6C  F007         	goto	u2490
  1064  000ED2                     u2491:
  1065  000ED2  FFFF               	dw	65535	; assembler added errata NOP
  1066  000ED4  EFEE  F007         	goto	l3586
  1067  000ED8                     u2490:
  1068  000ED8  FFFF               	dw	65535	; assembler added errata NOP
  1069  000EDA                     
  1070                           ;main.c: 43:             t_newSequence* newData = getNewSequence();
  1071  000EDA  EC35  F00E         	call	_getNewSequence	;wreg free
  1072  000EDE  C05F  F0F5         	movff	?_getNewSequence,main@newData
  1073  000EE2  C060  F0F6         	movff	?_getNewSequence+1,main@newData+1
  1074  000EE6                     
  1075                           ;main.c: 45:             newFeeder[0] = newData ->init_posX;
  1076  000EE6  0100               	movlb	0	; () banked
  1077  000EE8  EE20 F002          	lfsr	2,2
  1078  000EEC  51F5               	movf	main@newData& (0+255),w,b
  1079  000EEE  26D9               	addwf	fsr2l,f,c
  1080  000EF0  51F6               	movf	(main@newData+1)& (0+255),w,b
  1081  000EF2  22DA               	addwfc	fsr2h,f,c
  1082  000EF4  50DF               	movf	indf2,w,c
  1083  000EF6  6E13               	movwf	_newFeeder^0,c
  1084  000EF8                     
  1085                           ; BSR set to: 0
  1086                           ;main.c: 46:             newFeeder[1] = newData ->init_posY;
  1087  000EF8  EE20 F003          	lfsr	2,3
  1088  000EFC  51F5               	movf	main@newData& (0+255),w,b
  1089  000EFE  26D9               	addwf	fsr2l,f,c
  1090  000F00  51F6               	movf	(main@newData+1)& (0+255),w,b
  1091  000F02  22DA               	addwfc	fsr2h,f,c
  1092  000F04  50DF               	movf	indf2,w,c
  1093  000F06  6E14               	movwf	(_newFeeder+1)^0,c
  1094  000F08                     
  1095                           ; BSR set to: 0
  1096                           ;main.c: 50:             RCSTAbits.CREN = 0;
  1097  000F08  98AB               	bcf	171,4,c	;volatile
  1098  000F0A                     
  1099                           ; BSR set to: 0
  1100                           ;main.c: 55:             if(newData ->end_posX > maxFeedX || newData ->end_posY > maxFee
      +                          dY){
  1101  000F0A  EE20 F005          	lfsr	2,5
  1102  000F0E  51F5               	movf	main@newData& (0+255),w,b
  1103  000F10  26D9               	addwf	fsr2l,f,c
  1104  000F12  51F6               	movf	(main@newData+1)& (0+255),w,b
  1105  000F14  22DA               	addwfc	fsr2h,f,c
  1106  000F16  0E3D               	movlw	61
  1107  000F18  60DF               	cpfslt	indf2,c
  1108  000F1A  EF91  F007         	goto	u2501
  1109  000F1E  EF94  F007         	goto	u2500
  1110  000F22                     u2501:
  1111  000F22  FFFF               	dw	65535	; assembler added errata NOP
  1112  000F24  EFA4  F007         	goto	l3572
  1113  000F28                     u2500:
  1114  000F28  FFFF               	dw	65535	; assembler added errata NOP
  1115  000F2A                     
  1116                           ; BSR set to: 0
  1117  000F2A  EE20 F006          	lfsr	2,6
  1118  000F2E  51F5               	movf	main@newData& (0+255),w,b
  1119  000F30  26D9               	addwf	fsr2l,f,c
  1120  000F32  51F6               	movf	(main@newData+1)& (0+255),w,b
  1121  000F34  22DA               	addwfc	fsr2h,f,c
  1122  000F36  0EC8               	movlw	200
  1123  000F38  64DF               	cpfsgt	indf2,c
  1124  000F3A  EFA1  F007         	goto	u2511
  1125  000F3E  EFA4  F007         	goto	u2510
  1126  000F42                     u2511:
  1127  000F42  FFFF               	dw	65535	; assembler added errata NOP
  1128  000F44  EFA9  F007         	goto	l3574
  1129  000F48                     u2510:
  1130  000F48                     l3572:
  1131  000F48  FFFF               	dw	65535	; assembler added errata NOP
  1132                           
  1133                           ; BSR set to: 0
  1134                           ;main.c: 56:                 errCode = 5;
  1135  000F4A  0E05               	movlw	5
  1136  000F4C  6FF4               	movwf	main@errCode& (0+255),b
  1137                           
  1138                           ;main.c: 57:             }else{
  1139  000F4E  EFBD  F007         	goto	l3576
  1140  000F52                     l3574:
  1141  000F52  FFFF               	dw	65535	; assembler added errata NOP
  1142                           
  1143                           ; BSR set to: 0
  1144                           ;main.c: 58:                 storeData(newData ->end_posX);
  1145  000F54  EE20 F005          	lfsr	2,5
  1146  000F58  51F5               	movf	main@newData& (0+255),w,b
  1147  000F5A  26D9               	addwf	fsr2l,f,c
  1148  000F5C  51F6               	movf	(main@newData+1)& (0+255),w,b
  1149  000F5E  22DA               	addwfc	fsr2h,f,c
  1150  000F60  50DF               	movf	indf2,w,c
  1151  000F62  EC0C  F008         	call	_storeData
  1152                           
  1153                           ;main.c: 59:                 storeData(newData ->end_posY);
  1154  000F66  0100               	movlb	0	; () banked
  1155  000F68  EE20 F006          	lfsr	2,6
  1156  000F6C  51F5               	movf	main@newData& (0+255),w,b
  1157  000F6E  26D9               	addwf	fsr2l,f,c
  1158  000F70  51F6               	movf	(main@newData+1)& (0+255),w,b
  1159  000F72  22DA               	addwfc	fsr2h,f,c
  1160  000F74  50DF               	movf	indf2,w,c
  1161  000F76  EC0C  F008         	call	_storeData
  1162  000F7A                     l3576:
  1163  000F7A  FFFF               	dw	65535	; assembler added errata NOP
  1164                           
  1165                           ;main.c: 63:             if(errCode == 0){
  1166  000F7C  0100               	movlb	0	; () banked
  1167  000F7E  51F4               	movf	main@errCode& (0+255),w,b
  1168  000F80  A4D8               	btfss	status,2,c
  1169  000F82  EFC5  F007         	goto	u2521
  1170  000F86  EFC8  F007         	goto	u2520
  1171  000F8A                     u2521:
  1172  000F8A  FFFF               	dw	65535	; assembler added errata NOP
  1173  000F8C  EFE6  F007         	goto	l3580
  1174  000F90                     u2520:
  1175  000F90  FFFF               	dw	65535	; assembler added errata NOP
  1176  000F92                     
  1177                           ; BSR set to: 0
  1178                           ;main.c: 65:                 storeData(0);
  1179  000F92  0E00               	movlw	0
  1180  000F94  EC0C  F008         	call	_storeData
  1181                           
  1182                           ;main.c: 66:                 storeData(0xFF);
  1183  000F98  0EFF               	movlw	255
  1184  000F9A  EC0C  F008         	call	_storeData
  1185                           
  1186                           ;main.c: 67:                 storeData(newData ->end_rot - newData ->init_rot);
  1187  000F9E  0100               	movlb	0	; () banked
  1188  000FA0  EE20 F004          	lfsr	2,4
  1189  000FA4  51F5               	movf	main@newData& (0+255),w,b
  1190  000FA6  26D9               	addwf	fsr2l,f,c
  1191  000FA8  51F6               	movf	(main@newData+1)& (0+255),w,b
  1192  000FAA  22DA               	addwfc	fsr2h,f,c
  1193  000FAC  50DF               	movf	indf2,w,c
  1194  000FAE  6FF2               	movwf	??_main& (0+255),b
  1195  000FB0  EE20 F007          	lfsr	2,7
  1196  000FB4  51F5               	movf	main@newData& (0+255),w,b
  1197  000FB6  26D9               	addwf	fsr2l,f,c
  1198  000FB8  51F6               	movf	(main@newData+1)& (0+255),w,b
  1199  000FBA  22DA               	addwfc	fsr2h,f,c
  1200  000FBC  50DF               	movf	indf2,w,c
  1201  000FBE  6FF3               	movwf	(??_main+1)& (0+255),b
  1202  000FC0  51F2               	movf	??_main& (0+255),w,b
  1203  000FC2  5DF3               	subwf	(??_main+1)& (0+255),w,b
  1204  000FC4  EC0C  F008         	call	_storeData
  1205                           
  1206                           ;main.c: 68:             }else{
  1207  000FC8  EFEA  F007         	goto	l3582
  1208  000FCC                     l3580:
  1209  000FCC  FFFF               	dw	65535	; assembler added errata NOP
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;main.c: 69:                 printError(errCode);
  1213  000FCE  51F4               	movf	main@errCode& (0+255),w,b
  1214  000FD0  EC16  F00A         	call	_printError
  1215  000FD4                     l3582:
  1216  000FD4  FFFF               	dw	65535	; assembler added errata NOP
  1217                           
  1218                           ;main.c: 73:             RCSTAbits.CREN = 1;
  1219  000FD6  88AB               	bsf	171,4,c	;volatile
  1220  000FD8                     
  1221                           ;main.c: 76:             resetNewSequence();
  1222  000FD8  EC6A  F00E         	call	_resetNewSequence	;wreg free
  1223  000FDC                     l3586:
  1224  000FDC  FFFF               	dw	65535	; assembler added errata NOP
  1225                           
  1226                           ;main.c: 78:         if(readSeq()){
  1227  000FDE  EC96  F00E         	call	_readSeq	;wreg free
  1228  000FE2  0900               	iorlw	0
  1229  000FE4  B4D8               	btfsc	status,2,c
  1230  000FE6  EFF7  F007         	goto	u2531
  1231  000FEA  EFFA  F007         	goto	u2530
  1232  000FEE                     u2531:
  1233  000FEE  FFFF               	dw	65535	; assembler added errata NOP
  1234  000FF0  EF60  F007         	goto	l3558
  1235  000FF4                     u2530:
  1236  000FF4  FFFF               	dw	65535	; assembler added errata NOP
  1237  000FF6                     
  1238                           ;main.c: 82:             errCode = executeData();
  1239  000FF6  ECF5  F004         	call	_executeData	;wreg free
  1240  000FFA  0100               	movlb	0	; () banked
  1241  000FFC  6FF4               	movwf	main@errCode& (0+255),b
  1242  000FFE                     
  1243                           ; BSR set to: 0
  1244                           ;main.c: 84:             printError(errCode);
  1245  000FFE  51F4               	movf	main@errCode& (0+255),w,b
  1246  001000  EC16  F00A         	call	_printError
  1247  001004                     
  1248                           ;main.c: 87:             clearTM0();
  1249  001004  EC43  F00E         	call	_clearTM0	;wreg free
  1250  001008                     
  1251                           ;main.c: 91:             reduceSeq();
  1252  001008  EC92  F00E         	call	_reduceSeq	;wreg free
  1253  00100C                     
  1254                           ;main.c: 92:             shiftData();
  1255  00100C  ECCE  F00C         	call	_shiftData	;wreg free
  1256  001010  EF60  F007         	goto	l3558
  1257  001014  EFD2  F000         	goto	start
  1258  001018                     __end_of_main:
  1259                           	callstack 0
  1260                           
  1261 ;; *************** function _usartInit *****************
  1262 ;; Defined at:
  1263 ;;		line 92 in file "usart.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;		None
  1266 ;; Auto vars:     Size  Location     Type
  1267 ;;		None
  1268 ;; Return value:  Size  Location     Type
  1269 ;;                  1    wreg      void 
  1270 ;; Registers used:
  1271 ;;		wreg, status,2
  1272 ;; Tracked objects:
  1273 ;;		On entry : 0/0
  1274 ;;		On exit  : 0/0
  1275 ;;		Unchanged: 0/0
  1276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1277 ;;      Params:         0       0       0       0       0       0       0
  1278 ;;      Locals:         0       0       0       0       0       0       0
  1279 ;;      Temps:          0       0       0       0       0       0       0
  1280 ;;      Totals:         0       0       0       0       0       0       0
  1281 ;;Total ram usage:        0 bytes
  1282 ;; Hardware stack levels used:    1
  1283 ;; Hardware stack levels required when called:    4
  1284 ;; This function calls:
  1285 ;;		Nothing
  1286 ;; This function is called by:
  1287 ;;		_main
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           	psect	text1
  1292  001BF2                     __ptext1:
  1293                           	callstack 0
  1294  001BF2                     _usartInit:
  1295                           	callstack 0
  1296  001BF2  FFFF               	dw	65535	; assembler added errata NOP
  1297  001BF4                     
  1298                           ;usart.c: 94:     TRISCbits.TRISC6 = 0;
  1299  001BF4  9C94               	bcf	148,6,c	;volatile
  1300                           
  1301                           ;usart.c: 95:     TRISCbits.TRISC7 = 1;
  1302  001BF6  8E94               	bsf	148,7,c	;volatile
  1303                           
  1304                           ;usart.c: 97:     TXSTAbits.TX9 = 0;
  1305  001BF8  9CAC               	bcf	172,6,c	;volatile
  1306                           
  1307                           ;usart.c: 98:     TXSTAbits.TXEN = 1;
  1308  001BFA  8AAC               	bsf	172,5,c	;volatile
  1309                           
  1310                           ;usart.c: 99:     TXSTAbits.SYNC = 0;
  1311  001BFC  98AC               	bcf	172,4,c	;volatile
  1312                           
  1313                           ;usart.c: 100:     TXSTAbits.BRGH = 0;
  1314  001BFE  94AC               	bcf	172,2,c	;volatile
  1315                           
  1316                           ;usart.c: 102:     RCSTAbits.SPEN = 1;
  1317  001C00  8EAB               	bsf	171,7,c	;volatile
  1318                           
  1319                           ;usart.c: 103:     RCSTAbits.RX9 = 0;
  1320  001C02  9CAB               	bcf	171,6,c	;volatile
  1321                           
  1322                           ;usart.c: 104:     RCSTAbits.CREN = 0;
  1323  001C04  98AB               	bcf	171,4,c	;volatile
  1324                           
  1325                           ;usart.c: 105:     RCSTAbits.ADDEN = 0;
  1326  001C06  96AB               	bcf	171,3,c	;volatile
  1327  001C08                     
  1328                           ;usart.c: 108:     SPBRG = 25;
  1329  001C08  0E19               	movlw	25
  1330  001C0A  6EAF               	movwf	175,c	;volatile
  1331  001C0C  0012               	return		;funcret
  1332  001C0E  FFFF               	dw	65535	; errata NOP
  1333  001C10                     __end_of_usartInit:
  1334                           	callstack 0
  1335                           
  1336 ;; *************** function _tim2Init *****************
  1337 ;; Defined at:
  1338 ;;		line 46 in file "timer.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;		None
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg, status,2
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1352 ;;      Params:         2       0       0       0       0       0       0
  1353 ;;      Locals:         0       0       0       0       0       0       0
  1354 ;;      Temps:          0       0       0       0       0       0       0
  1355 ;;      Totals:         2       0       0       0       0       0       0
  1356 ;;Total ram usage:        2 bytes
  1357 ;; Hardware stack levels used:    1
  1358 ;; Hardware stack levels required when called:    4
  1359 ;; This function calls:
  1360 ;;		Nothing
  1361 ;; This function is called by:
  1362 ;;		_main
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text2
  1367  001C10                     __ptext2:
  1368                           	callstack 0
  1369  001C10                     _tim2Init:
  1370                           	callstack 0
  1371  001C10  FFFF               	dw	65535	; assembler added errata NOP
  1372  001C12                     
  1373                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1374  001C12  94CA               	bcf	202,2,c	;volatile
  1375  001C14                     
  1376                           ;timer.c: 48:     T2CONbits.T2CKPS = 0x10;
  1377  001C14  0EFC               	movlw	-4
  1378  001C16  16CA               	andwf	202,f,c	;volatile
  1379  001C18                     
  1380                           ;timer.c: 51:     pwmPeriod = _pwmPeriod;
  1381  001C18  C05F  F00D         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1382  001C1C  C060  F00E         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1383  001C20  0012               	return		;funcret
  1384  001C22  FFFF               	dw	65535	; errata NOP
  1385  001C24                     __end_of_tim2Init:
  1386                           	callstack 0
  1387                           
  1388 ;; *************** function _tim1Init *****************
  1389 ;; Defined at:
  1390 ;;		line 33 in file "timer.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;		None
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;		None
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  1    wreg      void 
  1397 ;; Registers used:
  1398 ;;		wreg, status,2
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : 0/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1404 ;;      Params:         0       0       0       0       0       0       0
  1405 ;;      Locals:         0       0       0       0       0       0       0
  1406 ;;      Temps:          0       0       0       0       0       0       0
  1407 ;;      Totals:         0       0       0       0       0       0       0
  1408 ;;Total ram usage:        0 bytes
  1409 ;; Hardware stack levels used:    1
  1410 ;; Hardware stack levels required when called:    4
  1411 ;; This function calls:
  1412 ;;		Nothing
  1413 ;; This function is called by:
  1414 ;;		_main
  1415 ;; This function uses a non-reentrant model
  1416 ;;
  1417                           
  1418                           	psect	text3
  1419  001C5C                     __ptext3:
  1420                           	callstack 0
  1421  001C5C                     _tim1Init:
  1422                           	callstack 0
  1423  001C5C  FFFF               	dw	65535	; assembler added errata NOP
  1424  001C5E                     
  1425                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1426  001C5E  0E30               	movlw	48
  1427  001C60  12CD               	iorwf	205,f,c	;volatile
  1428  001C62                     
  1429                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1430  001C62  92CD               	bcf	205,1,c	;volatile
  1431  001C64                     
  1432                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1433  001C64  80CD               	bsf	205,0,c	;volatile
  1434  001C66  0012               	return		;funcret
  1435  001C68  FFFF               	dw	65535	; errata NOP
  1436  001C6A                     __end_of_tim1Init:
  1437                           	callstack 0
  1438                           
  1439 ;; *************** function _tim0Init *****************
  1440 ;; Defined at:
  1441 ;;		line 21 in file "timer.c"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;		None
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;		None
  1446 ;; Return value:  Size  Location     Type
  1447 ;;                  1    wreg      void 
  1448 ;; Registers used:
  1449 ;;		wreg, status,2
  1450 ;; Tracked objects:
  1451 ;;		On entry : 0/0
  1452 ;;		On exit  : 0/0
  1453 ;;		Unchanged: 0/0
  1454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1455 ;;      Params:         0       0       0       0       0       0       0
  1456 ;;      Locals:         0       0       0       0       0       0       0
  1457 ;;      Temps:          0       0       0       0       0       0       0
  1458 ;;      Totals:         0       0       0       0       0       0       0
  1459 ;;Total ram usage:        0 bytes
  1460 ;; Hardware stack levels used:    1
  1461 ;; Hardware stack levels required when called:    4
  1462 ;; This function calls:
  1463 ;;		Nothing
  1464 ;; This function is called by:
  1465 ;;		_main
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           
  1469                           	psect	text4
  1470  001C38                     __ptext4:
  1471                           	callstack 0
  1472  001C38                     _tim0Init:
  1473                           	callstack 0
  1474  001C38  FFFF               	dw	65535	; assembler added errata NOP
  1475  001C3A                     
  1476                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1477  001C3A  9ED5               	bcf	213,7,c	;volatile
  1478                           
  1479                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1480  001C3C  9CD5               	bcf	213,6,c	;volatile
  1481                           
  1482                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1483  001C3E  9AD5               	bcf	213,5,c	;volatile
  1484                           
  1485                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1486  001C40  86D5               	bsf	213,3,c	;volatile
  1487  001C42                     
  1488                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1489  001C42  0E07               	movlw	7
  1490  001C44  12D5               	iorwf	213,f,c	;volatile
  1491  001C46  0012               	return		;funcret
  1492  001C48  FFFF               	dw	65535	; errata NOP
  1493  001C4A                     __end_of_tim0Init:
  1494                           	callstack 0
  1495                           
  1496 ;; *************** function _storeData *****************
  1497 ;; Defined at:
  1498 ;;		line 164 in file "usart.c"
  1499 ;; Parameters:    Size  Location     Type
  1500 ;;  data            1    wreg     unsigned char 
  1501 ;; Auto vars:     Size  Location     Type
  1502 ;;  data            1   26[COMRAM] unsigned char 
  1503 ;; Return value:  Size  Location     Type
  1504 ;;                  1    wreg      void 
  1505 ;; Registers used:
  1506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1512 ;;      Params:         0       0       0       0       0       0       0
  1513 ;;      Locals:         1       0       0       0       0       0       0
  1514 ;;      Temps:          2       0       0       0       0       0       0
  1515 ;;      Totals:         3       0       0       0       0       0       0
  1516 ;;Total ram usage:        3 bytes
  1517 ;; Hardware stack levels used:    1
  1518 ;; Hardware stack levels required when called:    6
  1519 ;; This function calls:
  1520 ;;		_printError
  1521 ;; This function is called by:
  1522 ;;		_main
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525                           
  1526                           	psect	text5
  1527  001018                     __ptext5:
  1528                           	callstack 0
  1529  001018                     _storeData:
  1530                           	callstack 0
  1531  001018  FFFF               	dw	65535	; assembler added errata NOP
  1532                           
  1533                           ;incstack = 0
  1534                           ;storeData@data stored from wreg
  1535  00101A  6E68               	movwf	storeData@data^0,c
  1536  00101C                     
  1537                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  1538  00101C  0E01               	movlw	low storeData@receivedMex
  1539  00101E  241C               	addwf	storeData@counter^0,w,c
  1540  001020  6ED9               	movwf	fsr2l,c
  1541  001022  6ADA               	clrf	fsr2h,c
  1542  001024  0E00               	movlw	high storeData@receivedMex
  1543  001026  22DA               	addwfc	fsr2h,f,c
  1544  001028  C068  FFDF         	movff	storeData@data,indf2
  1545  00102C                     
  1546                           ;usart.c: 175:     counter++;
  1547  00102C  2A1C               	incf	storeData@counter^0,f,c
  1548                           
  1549                           ;usart.c: 178:     switch(receivedMex[0]){
  1550  00102E  EF28  F008         	goto	l3398
  1551  001032                     l3390:
  1552  001032  FFFF               	dw	65535	; assembler added errata NOP
  1553                           
  1554                           ;usart.c: 180:             mexLength = 5;
  1555  001034  0E05               	movlw	5
  1556  001036  6E4D               	movwf	storeData@mexLength^0,c
  1557                           
  1558                           ;usart.c: 181:             break;
  1559  001038  EF43  F008         	goto	l3400
  1560  00103C                     l3392:
  1561  00103C  FFFF               	dw	65535	; assembler added errata NOP
  1562                           
  1563                           ;usart.c: 183:             mexLength = 9;
  1564  00103E  0E09               	movlw	9
  1565  001040  6E4D               	movwf	storeData@mexLength^0,c
  1566                           
  1567                           ;usart.c: 184:             break;
  1568  001042  EF43  F008         	goto	l3400
  1569  001046                     l3394:
  1570  001046  FFFF               	dw	65535	; assembler added errata NOP
  1571                           
  1572                           ;usart.c: 186:             mexLength = 1;
  1573  001048  0E01               	movlw	1
  1574  00104A  6E4D               	movwf	storeData@mexLength^0,c
  1575                           
  1576                           ;usart.c: 187:             break;
  1577  00104C  EF43  F008         	goto	l3400
  1578  001050                     l3398:
  1579  001050  FFFF               	dw	65535	; assembler added errata NOP
  1580  001052  5001               	movf	storeData@receivedMex^0,w,c
  1581  001054  6E66               	movwf	??_storeData^0,c
  1582  001056  6A67               	clrf	(??_storeData+1)^0,c
  1583                           
  1584                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1585                           ; Switch size 1, requested type "simple"
  1586                           ; Number of cases is 1, Range of values is 0 to 0
  1587                           ; switch strategies available:
  1588                           ; Name         Instructions Cycles
  1589                           ; simple_byte            4     3 (average)
  1590                           ;	Chosen strategy is simple_byte
  1591  001058  5067               	movf	(??_storeData+1)^0,w,c
  1592  00105A  0A00               	xorlw	0	; case 0
  1593  00105C  B4D8               	btfsc	status,2,c
  1594  00105E  EF33  F008         	goto	l3738
  1595  001062  EF43  F008         	goto	l3400
  1596  001066                     l3738:
  1597  001066  FFFF               	dw	65535	; assembler added errata NOP
  1598                           
  1599                           ; Switch size 1, requested type "simple"
  1600                           ; Number of cases is 3, Range of values is 0 to 2
  1601                           ; switch strategies available:
  1602                           ; Name         Instructions Cycles
  1603                           ; simple_byte           10     6 (average)
  1604                           ;	Chosen strategy is simple_byte
  1605  001068  5066               	movf	??_storeData^0,w,c
  1606  00106A  0A00               	xorlw	0	; case 0
  1607  00106C  B4D8               	btfsc	status,2,c
  1608  00106E  EF19  F008         	goto	l3390
  1609  001072  0A01               	xorlw	1	; case 1
  1610  001074  B4D8               	btfsc	status,2,c
  1611  001076  EF1E  F008         	goto	l3392
  1612  00107A  0A03               	xorlw	3	; case 2
  1613  00107C  B4D8               	btfsc	status,2,c
  1614  00107E  EF23  F008         	goto	l3394
  1615  001082  EF43  F008         	goto	l3400
  1616  001086                     l3400:
  1617  001086  FFFF               	dw	65535	; assembler added errata NOP
  1618                           
  1619                           ;usart.c: 194:     if(counter >= mexLength){
  1620  001088  504D               	movf	storeData@mexLength^0,w,c
  1621  00108A  5C1C               	subwf	storeData@counter^0,w,c
  1622  00108C  A0D8               	btfss	status,0,c
  1623  00108E  EF4B  F008         	goto	u2421
  1624  001092  EF4E  F008         	goto	u2420
  1625  001096                     u2421:
  1626  001096  FFFF               	dw	65535	; assembler added errata NOP
  1627  001098  EFC6  F008         	goto	l581
  1628  00109C                     u2420:
  1629  00109C  FFFF               	dw	65535	; assembler added errata NOP
  1630  00109E                     
  1631                           ;usart.c: 195:         counter = 0;
  1632  00109E  0E00               	movlw	0
  1633  0010A0  6E1C               	movwf	storeData@counter^0,c
  1634                           
  1635                           ;usart.c: 198:         switch(receivedMex[0]){
  1636  0010A2  EFAB  F008         	goto	l3422
  1637  0010A6                     l3404:
  1638  0010A6  FFFF               	dw	65535	; assembler added errata NOP
  1639                           
  1640                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1641  0010A8  501F               	movf	_dataCounter^0,w,c
  1642  0010AA  0D04               	mullw	4
  1643  0010AC  0ED7               	movlw	low _dataSequence
  1644  0010AE  24F3               	addwf	243,w,c
  1645  0010B0  6ED9               	movwf	fsr2l,c
  1646  0010B2  0E00               	movlw	high _dataSequence
  1647  0010B4  20F4               	addwfc	prodh,w,c
  1648  0010B6  6EDA               	movwf	fsr2h,c
  1649  0010B8  C002  FFDF         	movff	storeData@receivedMex+1,indf2
  1650                           
  1651                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 10;
  1652  0010BC  501F               	movf	_dataCounter^0,w,c
  1653  0010BE  0D04               	mullw	4
  1654  0010C0  0ED8               	movlw	low (_dataSequence+1)
  1655  0010C2  24F3               	addwf	243,w,c
  1656  0010C4  6ED9               	movwf	fsr2l,c
  1657  0010C6  0E00               	movlw	high (_dataSequence+1)
  1658  0010C8  20F4               	addwfc	prodh,w,c
  1659  0010CA  6EDA               	movwf	fsr2h,c
  1660  0010CC  5003               	movf	(storeData@receivedMex+2)^0,w,c
  1661  0010CE  0D0A               	mullw	10
  1662  0010D0  CFF3 FFDF          	movff	prodl,indf2
  1663                           
  1664                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 10;
  1665  0010D4  501F               	movf	_dataCounter^0,w,c
  1666  0010D6  0D04               	mullw	4
  1667  0010D8  0ED9               	movlw	low (_dataSequence+2)
  1668  0010DA  24F3               	addwf	243,w,c
  1669  0010DC  6ED9               	movwf	fsr2l,c
  1670  0010DE  0E00               	movlw	high (_dataSequence+2)
  1671  0010E0  20F4               	addwfc	prodh,w,c
  1672  0010E2  6EDA               	movwf	fsr2h,c
  1673  0010E4  5004               	movf	(storeData@receivedMex+3)^0,w,c
  1674  0010E6  0D0A               	mullw	10
  1675  0010E8  CFF3 FFDF          	movff	prodl,indf2
  1676                           
  1677                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1678  0010EC  501F               	movf	_dataCounter^0,w,c
  1679  0010EE  0D04               	mullw	4
  1680  0010F0  0EDA               	movlw	low (_dataSequence+3)
  1681  0010F2  24F3               	addwf	243,w,c
  1682  0010F4  6ED9               	movwf	fsr2l,c
  1683  0010F6  0E00               	movlw	high (_dataSequence+3)
  1684  0010F8  20F4               	addwfc	prodh,w,c
  1685  0010FA  6EDA               	movwf	fsr2h,c
  1686  0010FC  C005  FFDF         	movff	storeData@receivedMex+4,indf2
  1687  001100                     
  1688                           ;usart.c: 205:                 dataCounter++;
  1689  001100  2A1F               	incf	_dataCounter^0,f,c
  1690                           
  1691                           ;usart.c: 206:                 break;
  1692  001102  EFC6  F008         	goto	l581
  1693  001106                     l578:
  1694  001106  FFFF               	dw	65535	; assembler added errata NOP
  1695                           
  1696                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  1697  001108  C002  F025         	movff	storeData@receivedMex+1,_newSequenceData
  1698                           
  1699                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  1700  00110C  C003  F026         	movff	storeData@receivedMex+2,_newSequenceData+1
  1701  001110                     
  1702                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 10;
  1703  001110  5004               	movf	(storeData@receivedMex+3)^0,w,c
  1704  001112  0D0A               	mullw	10
  1705  001114  CFF3 F027          	movff	prodl,_newSequenceData+2
  1706                           
  1707                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 10;
  1708  001118  5005               	movf	(storeData@receivedMex+4)^0,w,c
  1709  00111A  0D0A               	mullw	10
  1710  00111C  CFF3 F028          	movff	prodl,_newSequenceData+3
  1711  001120                     
  1712                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  1713  001120  C006  F029         	movff	storeData@receivedMex+5,_newSequenceData+4
  1714                           
  1715                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 10;
  1716  001124  5007               	movf	(storeData@receivedMex+6)^0,w,c
  1717  001126  0D0A               	mullw	10
  1718  001128  CFF3 F02A          	movff	prodl,_newSequenceData+5
  1719                           
  1720                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 10;
  1721  00112C  5008               	movf	(storeData@receivedMex+7)^0,w,c
  1722  00112E  0D0A               	mullw	10
  1723  001130  CFF3 F02B          	movff	prodl,_newSequenceData+6
  1724  001134                     
  1725                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  1726  001134  C009  F02C         	movff	storeData@receivedMex+8,_newSequenceData+7
  1727  001138                     
  1728                           ;usart.c: 218:                 _newSequence = 1;
  1729  001138  0E01               	movlw	1
  1730  00113A  6E1D               	movwf	__newSequence^0,c
  1731                           
  1732                           ;usart.c: 219:                 break;
  1733  00113C  EFC6  F008         	goto	l581
  1734  001140                     l3416:
  1735  001140  FFFF               	dw	65535	; assembler added errata NOP
  1736                           
  1737                           ;usart.c: 222:                 _fatalError = 1;
  1738  001142  0E01               	movlw	1
  1739  001144  6E1E               	movwf	__fatalError^0,c
  1740                           
  1741                           ;usart.c: 223:                 break;
  1742  001146  EFC6  F008         	goto	l581
  1743  00114A                     l3418:
  1744  00114A  FFFF               	dw	65535	; assembler added errata NOP
  1745                           
  1746                           ;usart.c: 226:                 printError(8);
  1747  00114C  0E08               	movlw	8
  1748  00114E  EC16  F00A         	call	_printError
  1749                           
  1750                           ;usart.c: 227:                 break;
  1751  001152  EFC6  F008         	goto	l581
  1752  001156                     l3422:
  1753  001156  FFFF               	dw	65535	; assembler added errata NOP
  1754  001158  5001               	movf	storeData@receivedMex^0,w,c
  1755  00115A  6E66               	movwf	??_storeData^0,c
  1756  00115C  6A67               	clrf	(??_storeData+1)^0,c
  1757                           
  1758                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1759                           ; Switch size 1, requested type "simple"
  1760                           ; Number of cases is 1, Range of values is 0 to 0
  1761                           ; switch strategies available:
  1762                           ; Name         Instructions Cycles
  1763                           ; simple_byte            4     3 (average)
  1764                           ;	Chosen strategy is simple_byte
  1765  00115E  5067               	movf	(??_storeData+1)^0,w,c
  1766  001160  0A00               	xorlw	0	; case 0
  1767  001162  B4D8               	btfsc	status,2,c
  1768  001164  EFB6  F008         	goto	l3740
  1769  001168  EFA5  F008         	goto	l3418
  1770  00116C                     l3740:
  1771  00116C  FFFF               	dw	65535	; assembler added errata NOP
  1772                           
  1773                           ; Switch size 1, requested type "simple"
  1774                           ; Number of cases is 3, Range of values is 0 to 2
  1775                           ; switch strategies available:
  1776                           ; Name         Instructions Cycles
  1777                           ; simple_byte           10     6 (average)
  1778                           ;	Chosen strategy is simple_byte
  1779  00116E  5066               	movf	??_storeData^0,w,c
  1780  001170  0A00               	xorlw	0	; case 0
  1781  001172  B4D8               	btfsc	status,2,c
  1782  001174  EF53  F008         	goto	l3404
  1783  001178  0A01               	xorlw	1	; case 1
  1784  00117A  B4D8               	btfsc	status,2,c
  1785  00117C  EF83  F008         	goto	l578
  1786  001180  0A03               	xorlw	3	; case 2
  1787  001182  B4D8               	btfsc	status,2,c
  1788  001184  EFA0  F008         	goto	l3416
  1789  001188  EFA5  F008         	goto	l3418
  1790  00118C                     l581:
  1791  00118C  FFFF               	dw	65535	; assembler added errata NOP
  1792  00118E  0012               	return		;funcret
  1793  001190  FFFF               	dw	65535	; errata NOP
  1794  001192                     __end_of_storeData:
  1795                           	callstack 0
  1796                           
  1797 ;; *************** function _printError *****************
  1798 ;; Defined at:
  1799 ;;		line 111 in file "usart.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;  errCode         1    wreg     unsigned char 
  1802 ;; Auto vars:     Size  Location     Type
  1803 ;;  errCode         1   23[COMRAM] unsigned char 
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  1    wreg      void 
  1806 ;; Registers used:
  1807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1808 ;; Tracked objects:
  1809 ;;		On entry : 0/0
  1810 ;;		On exit  : 0/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1813 ;;      Params:         0       0       0       0       0       0       0
  1814 ;;      Locals:         1       0       0       0       0       0       0
  1815 ;;      Temps:          2       0       0       0       0       0       0
  1816 ;;      Totals:         3       0       0       0       0       0       0
  1817 ;;Total ram usage:        3 bytes
  1818 ;; Hardware stack levels used:    1
  1819 ;; Hardware stack levels required when called:    5
  1820 ;; This function calls:
  1821 ;;		_uartTx
  1822 ;; This function is called by:
  1823 ;;		_main
  1824 ;;		_storeData
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           	psect	text6
  1829  00142C                     __ptext6:
  1830                           	callstack 0
  1831  00142C                     _printError:
  1832                           	callstack 0
  1833  00142C  FFFF               	dw	65535	; assembler added errata NOP
  1834                           
  1835                           ;incstack = 0
  1836                           ;printError@errCode stored from wreg
  1837  00142E  6E65               	movwf	printError@errCode^0,c
  1838  001430                     
  1839                           ;usart.c: 113:     switch(errCode){
  1840  001430  EF72  F00A         	goto	l3240
  1841  001434                     l3222:
  1842  001434  FFFF               	dw	65535	; assembler added errata NOP
  1843                           
  1844                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1845  001436  0EA1               	movlw	low _errString_Feed
  1846  001438  6E5F               	movwf	uartTx@ptr^0,c
  1847  00143A  0E00               	movlw	high _errString_Feed
  1848  00143C  6E60               	movwf	(uartTx@ptr+1)^0,c
  1849  00143E  0E1E               	movlw	30
  1850  001440  6E61               	movwf	uartTx@length^0,c
  1851  001442  EC2A  F00D         	call	_uartTx	;wreg free
  1852                           
  1853                           ;usart.c: 116:             break;
  1854  001446  EFA1  F00A         	goto	l548
  1855  00144A                     l3224:
  1856  00144A  FFFF               	dw	65535	; assembler added errata NOP
  1857                           
  1858                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1859  00144C  0E5E               	movlw	low _errString_ZEND
  1860  00144E  6E5F               	movwf	uartTx@ptr^0,c
  1861  001450  0E01               	movlw	high _errString_ZEND
  1862  001452  6E60               	movwf	(uartTx@ptr+1)^0,c
  1863  001454  0E29               	movlw	41
  1864  001456  6E61               	movwf	uartTx@length^0,c
  1865  001458  EC2A  F00D         	call	_uartTx	;wreg free
  1866                           
  1867                           ;usart.c: 119:             break;
  1868  00145C  EFA1  F00A         	goto	l548
  1869  001460                     l3226:
  1870  001460  FFFF               	dw	65535	; assembler added errata NOP
  1871                           
  1872                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1873  001462  0E87               	movlw	low _errString_Reset
  1874  001464  6E5F               	movwf	uartTx@ptr^0,c
  1875  001466  0E01               	movlw	high _errString_Reset
  1876  001468  6E60               	movwf	(uartTx@ptr+1)^0,c
  1877  00146A  0E28               	movlw	40
  1878  00146C  6E61               	movwf	uartTx@length^0,c
  1879  00146E  EC2A  F00D         	call	_uartTx	;wreg free
  1880                           
  1881                           ;usart.c: 122:             break;
  1882  001472  EFA1  F00A         	goto	l548
  1883  001476                     l3228:
  1884  001476  FFFF               	dw	65535	; assembler added errata NOP
  1885                           
  1886                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1887  001478  0E35               	movlw	low _errString_Point
  1888  00147A  6E5F               	movwf	uartTx@ptr^0,c
  1889  00147C  0E01               	movlw	high _errString_Point
  1890  00147E  6E60               	movwf	(uartTx@ptr+1)^0,c
  1891  001480  0E29               	movlw	41
  1892  001482  6E61               	movwf	uartTx@length^0,c
  1893  001484  EC2A  F00D         	call	_uartTx	;wreg free
  1894                           
  1895                           ;usart.c: 125:             break;
  1896  001488  EFA1  F00A         	goto	l548
  1897  00148C                     l3230:
  1898  00148C  FFFF               	dw	65535	; assembler added errata NOP
  1899                           
  1900                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  1901  00148E  0E80               	movlw	low _errString_Bound
  1902  001490  6E5F               	movwf	uartTx@ptr^0,c
  1903  001492  0E00               	movlw	high _errString_Bound
  1904  001494  6E60               	movwf	(uartTx@ptr+1)^0,c
  1905  001496  0E21               	movlw	33
  1906  001498  6E61               	movwf	uartTx@length^0,c
  1907  00149A  EC2A  F00D         	call	_uartTx	;wreg free
  1908                           
  1909                           ;usart.c: 128:             break;
  1910  00149E  EFA1  F00A         	goto	l548
  1911  0014A2                     l3232:
  1912  0014A2  FFFF               	dw	65535	; assembler added errata NOP
  1913                           
  1914                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  1915  0014A4  0E00               	movlw	low _errString_PointZ
  1916  0014A6  6E5F               	movwf	uartTx@ptr^0,c
  1917  0014A8  0E01               	movlw	high _errString_PointZ
  1918  0014AA  6E60               	movwf	(uartTx@ptr+1)^0,c
  1919  0014AC  0E35               	movlw	53
  1920  0014AE  6E61               	movwf	uartTx@length^0,c
  1921  0014B0  EC2A  F00D         	call	_uartTx	;wreg free
  1922                           
  1923                           ;usart.c: 131:             break;
  1924  0014B4  EFA1  F00A         	goto	l548
  1925  0014B8                     l3234:
  1926  0014B8  FFFF               	dw	65535	; assembler added errata NOP
  1927                           
  1928                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  1929  0014BA  0EAF               	movlw	low _errString_Fatal
  1930  0014BC  6E5F               	movwf	uartTx@ptr^0,c
  1931  0014BE  0E01               	movlw	high _errString_Fatal
  1932  0014C0  6E60               	movwf	(uartTx@ptr+1)^0,c
  1933  0014C2  0E27               	movlw	39
  1934  0014C4  6E61               	movwf	uartTx@length^0,c
  1935  0014C6  EC2A  F00D         	call	_uartTx	;wreg free
  1936                           
  1937                           ;usart.c: 134:             break;
  1938  0014CA  EFA1  F00A         	goto	l548
  1939  0014CE                     l3236:
  1940  0014CE  FFFF               	dw	65535	; assembler added errata NOP
  1941                           
  1942                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  1943  0014D0  0EBF               	movlw	low _errString_Command
  1944  0014D2  6E5F               	movwf	uartTx@ptr^0,c
  1945  0014D4  0E00               	movlw	high _errString_Command
  1946  0014D6  6E60               	movwf	(uartTx@ptr+1)^0,c
  1947  0014D8  0E18               	movlw	24
  1948  0014DA  6E61               	movwf	uartTx@length^0,c
  1949  0014DC  EC2A  F00D         	call	_uartTx	;wreg free
  1950                           
  1951                           ;usart.c: 137:             break;
  1952  0014E0  EFA1  F00A         	goto	l548
  1953  0014E4                     l3240:
  1954  0014E4  FFFF               	dw	65535	; assembler added errata NOP
  1955  0014E6  5065               	movf	printError@errCode^0,w,c
  1956  0014E8  6E63               	movwf	??_printError^0,c
  1957  0014EA  6A64               	clrf	(??_printError+1)^0,c
  1958                           
  1959                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1960                           ; Switch size 1, requested type "simple"
  1961                           ; Number of cases is 1, Range of values is 0 to 0
  1962                           ; switch strategies available:
  1963                           ; Name         Instructions Cycles
  1964                           ; simple_byte            4     3 (average)
  1965                           ;	Chosen strategy is simple_byte
  1966  0014EC  5064               	movf	(??_printError+1)^0,w,c
  1967  0014EE  0A00               	xorlw	0	; case 0
  1968  0014F0  B4D8               	btfsc	status,2,c
  1969  0014F2  EF7D  F00A         	goto	l3742
  1970  0014F6  EFA1  F00A         	goto	l548
  1971  0014FA                     l3742:
  1972  0014FA  FFFF               	dw	65535	; assembler added errata NOP
  1973                           
  1974                           ; Switch size 1, requested type "simple"
  1975                           ; Number of cases is 8, Range of values is 1 to 8
  1976                           ; switch strategies available:
  1977                           ; Name         Instructions Cycles
  1978                           ; simple_byte           25    13 (average)
  1979                           ;	Chosen strategy is simple_byte
  1980  0014FC  5063               	movf	??_printError^0,w,c
  1981  0014FE  0A01               	xorlw	1	; case 1
  1982  001500  B4D8               	btfsc	status,2,c
  1983  001502  EF1A  F00A         	goto	l3222
  1984  001506  0A03               	xorlw	3	; case 2
  1985  001508  B4D8               	btfsc	status,2,c
  1986  00150A  EF25  F00A         	goto	l3224
  1987  00150E  0A01               	xorlw	1	; case 3
  1988  001510  B4D8               	btfsc	status,2,c
  1989  001512  EF30  F00A         	goto	l3226
  1990  001516  0A07               	xorlw	7	; case 4
  1991  001518  B4D8               	btfsc	status,2,c
  1992  00151A  EF3B  F00A         	goto	l3228
  1993  00151E  0A01               	xorlw	1	; case 5
  1994  001520  B4D8               	btfsc	status,2,c
  1995  001522  EF46  F00A         	goto	l3230
  1996  001526  0A03               	xorlw	3	; case 6
  1997  001528  B4D8               	btfsc	status,2,c
  1998  00152A  EF51  F00A         	goto	l3232
  1999  00152E  0A01               	xorlw	1	; case 7
  2000  001530  B4D8               	btfsc	status,2,c
  2001  001532  EF5C  F00A         	goto	l3234
  2002  001536  0A0F               	xorlw	15	; case 8
  2003  001538  B4D8               	btfsc	status,2,c
  2004  00153A  EF67  F00A         	goto	l3236
  2005  00153E  EFA1  F00A         	goto	l548
  2006  001542                     l548:
  2007  001542  FFFF               	dw	65535	; assembler added errata NOP
  2008  001544  0012               	return		;funcret
  2009  001546  FFFF               	dw	65535	; errata NOP
  2010  001548                     __end_of_printError:
  2011                           	callstack 0
  2012                           
  2013 ;; *************** function _uartTx *****************
  2014 ;; Defined at:
  2015 ;;		line 148 in file "usart.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2018 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2019 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2020 ;;  length          1   19[COMRAM] unsigned char 
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;  i               1   20[COMRAM] unsigned char 
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      void 
  2025 ;; Registers used:
  2026 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2032 ;;      Params:         3       0       0       0       0       0       0
  2033 ;;      Locals:         1       0       0       0       0       0       0
  2034 ;;      Temps:          0       0       0       0       0       0       0
  2035 ;;      Totals:         4       0       0       0       0       0       0
  2036 ;;Total ram usage:        4 bytes
  2037 ;; Hardware stack levels used:    1
  2038 ;; Hardware stack levels required when called:    4
  2039 ;; This function calls:
  2040 ;;		Nothing
  2041 ;; This function is called by:
  2042 ;;		_printError
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           	psect	text7
  2047  001A54                     __ptext7:
  2048                           	callstack 0
  2049  001A54                     _uartTx:
  2050                           	callstack 0
  2051  001A54  FFFF               	dw	65535	; assembler added errata NOP
  2052  001A56                     
  2053                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  2054  001A56  0E01               	movlw	1
  2055  001A58  6E62               	movwf	uartTx@i^0,c
  2056  001A5A  EF43  F00D         	goto	l2982
  2057  001A5E                     l2978:
  2058  001A5E  FFFF               	dw	65535	; assembler added errata NOP
  2059                           
  2060                           ;usart.c: 153:         TXREG = *ptr;
  2061  001A60  C05F  FFD9         	movff	uartTx@ptr,fsr2l
  2062  001A64  C060  FFDA         	movff	uartTx@ptr+1,fsr2h
  2063  001A68  50DF               	movf	indf2,w,c
  2064  001A6A  6EAD               	movwf	173,c	;volatile
  2065  001A6C                     l553:
  2066  001A6C  FFFF               	dw	65535	; assembler added errata NOP
  2067  001A6E  A2AC               	btfss	172,1,c	;volatile
  2068  001A70  EF3C  F00D         	goto	u1821
  2069  001A74  EF3F  F00D         	goto	u1820
  2070  001A78                     u1821:
  2071  001A78  FFFF               	dw	65535	; assembler added errata NOP
  2072  001A7A  EF36  F00D         	goto	l553
  2073  001A7E                     u1820:
  2074  001A7E  FFFF               	dw	65535	; assembler added errata NOP
  2075  001A80                     
  2076                           ;usart.c: 157:         ptr++;
  2077  001A80  4A5F               	infsnz	uartTx@ptr^0,f,c
  2078  001A82  2A60               	incf	(uartTx@ptr+1)^0,f,c
  2079                           
  2080                           ;usart.c: 158:     }
  2081  001A84  2A62               	incf	uartTx@i^0,f,c
  2082  001A86                     l2982:
  2083  001A86  FFFF               	dw	65535	; assembler added errata NOP
  2084  001A88  5061               	movf	uartTx@length^0,w,c
  2085  001A8A  5C62               	subwf	uartTx@i^0,w,c
  2086  001A8C  A0D8               	btfss	status,0,c
  2087  001A8E  EF4B  F00D         	goto	u1831
  2088  001A92  EF4E  F00D         	goto	u1830
  2089  001A96                     u1831:
  2090  001A96  FFFF               	dw	65535	; assembler added errata NOP
  2091  001A98  EF2F  F00D         	goto	l2978
  2092  001A9C                     u1830:
  2093  001A9C  FFFF               	dw	65535	; assembler added errata NOP
  2094  001A9E  0012               	return		;funcret
  2095  001AA0  FFFF               	dw	65535	; errata NOP
  2096  001AA2                     __end_of_uartTx:
  2097                           	callstack 0
  2098                           
  2099 ;; *************** function _shiftData *****************
  2100 ;; Defined at:
  2101 ;;		line 81 in file "usart.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;		None
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;  i               1   19[COMRAM] unsigned char 
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  1    wreg      void 
  2108 ;; Registers used:
  2109 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2115 ;;      Params:         0       0       0       0       0       0       0
  2116 ;;      Locals:         1       0       0       0       0       0       0
  2117 ;;      Temps:          2       0       0       0       0       0       0
  2118 ;;      Totals:         3       0       0       0       0       0       0
  2119 ;;Total ram usage:        3 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    4
  2122 ;; This function calls:
  2123 ;;		Nothing
  2124 ;; This function is called by:
  2125 ;;		_main
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           	psect	text8
  2130  00199C                     __ptext8:
  2131                           	callstack 0
  2132  00199C                     _shiftData:
  2133                           	callstack 0
  2134  00199C  FFFF               	dw	65535	; assembler added errata NOP
  2135  00199E                     
  2136                           ;usart.c: 82:     char i;;usart.c: 84:     for(i = 0; i < 4; i++){
  2137  00199E  0E00               	movlw	0
  2138  0019A0  6E61               	movwf	shiftData@i^0,c
  2139  0019A2                     l3512:
  2140  0019A2  FFFF               	dw	65535	; assembler added errata NOP
  2141                           
  2142                           ;usart.c: 85:         dataSequence[i] = dataSequence[i+1];
  2143  0019A4  5061               	movf	shiftData@i^0,w,c
  2144  0019A6  6E5F               	movwf	??_shiftData^0,c
  2145  0019A8  6A60               	clrf	(??_shiftData+1)^0,c
  2146  0019AA  90D8               	bcf	status,0,c
  2147  0019AC  365F               	rlcf	??_shiftData^0,f,c
  2148  0019AE  3660               	rlcf	(??_shiftData+1)^0,f,c
  2149  0019B0  90D8               	bcf	status,0,c
  2150  0019B2  365F               	rlcf	??_shiftData^0,f,c
  2151  0019B4  3660               	rlcf	(??_shiftData+1)^0,f,c
  2152  0019B6  0EDB               	movlw	low (_dataSequence+4)
  2153  0019B8  245F               	addwf	??_shiftData^0,w,c
  2154  0019BA  6ED9               	movwf	fsr2l,c
  2155  0019BC  0E00               	movlw	high (_dataSequence+4)
  2156  0019BE  2060               	addwfc	(??_shiftData+1)^0,w,c
  2157  0019C0  6EDA               	movwf	fsr2h,c
  2158  0019C2  5061               	movf	shiftData@i^0,w,c
  2159  0019C4  0D04               	mullw	4
  2160  0019C6  0ED7               	movlw	low _dataSequence
  2161  0019C8  24F3               	addwf	243,w,c
  2162  0019CA  6EE1               	movwf	fsr1l,c
  2163  0019CC  0E00               	movlw	high _dataSequence
  2164  0019CE  20F4               	addwfc	prodh,w,c
  2165  0019D0  6EE2               	movwf	fsr1h,c
  2166  0019D2  CFDE FFE6          	movff	postinc2,postinc1
  2167  0019D6  CFDE FFE6          	movff	postinc2,postinc1
  2168  0019DA  CFDE FFE6          	movff	postinc2,postinc1
  2169  0019DE  CFDE FFE6          	movff	postinc2,postinc1
  2170  0019E2                     
  2171                           ;usart.c: 86:     }
  2172  0019E2  2A61               	incf	shiftData@i^0,f,c
  2173  0019E4  0E03               	movlw	3
  2174  0019E6  6461               	cpfsgt	shiftData@i^0,c
  2175  0019E8  EFF8  F00C         	goto	u2451
  2176  0019EC  EFFB  F00C         	goto	u2450
  2177  0019F0                     u2451:
  2178  0019F0  FFFF               	dw	65535	; assembler added errata NOP
  2179  0019F2  EFD1  F00C         	goto	l3512
  2180  0019F6                     u2450:
  2181  0019F6  FFFF               	dw	65535	; assembler added errata NOP
  2182  0019F8  0012               	return		;funcret
  2183  0019FA  FFFF               	dw	65535	; errata NOP
  2184  0019FC                     __end_of_shiftData:
  2185                           	callstack 0
  2186                           
  2187 ;; *************** function _resetPosition *****************
  2188 ;; Defined at:
  2189 ;;		line 165 in file "motors.c"
  2190 ;; Parameters:    Size  Location     Type
  2191 ;;		None
  2192 ;; Auto vars:     Size  Location     Type
  2193 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2194 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2195 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      unsigned char 
  2198 ;; Registers used:
  2199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2205 ;;      Params:         0       0       0       0       0       0       0
  2206 ;;      Locals:         3       0       0       0       0       0       0
  2207 ;;      Temps:          0       0       0       0       0       0       0
  2208 ;;      Totals:         3       0       0       0       0       0       0
  2209 ;;Total ram usage:        3 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    5
  2212 ;; This function calls:
  2213 ;;		_resetStep
  2214 ;;		_stepMade
  2215 ;; This function is called by:
  2216 ;;		_main
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           	psect	text9
  2221  000C6C                     __ptext9:
  2222                           	callstack 0
  2223  000C6C                     _resetPosition:
  2224                           	callstack 0
  2225  000C6C  FFFF               	dw	65535	; assembler added errata NOP
  2226  000C6E                     
  2227                           ;motors.c: 185:     motCounter[0][1] = -1;
  2228  000C6E  682F               	setf	(_motCounter+2)^0,c
  2229  000C70  6830               	setf	(_motCounter+3)^0,c
  2230                           
  2231                           ;motors.c: 186:     motCounter[1][1] = -1;
  2232  000C72  6833               	setf	(_motCounter+6)^0,c
  2233  000C74  6834               	setf	(_motCounter+7)^0,c
  2234                           
  2235                           ;motors.c: 187:     motCounter[2][1] = -1;
  2236  000C76  6837               	setf	(_motCounter+10)^0,c
  2237  000C78  6838               	setf	(_motCounter+11)^0,c
  2238  000C7A                     
  2239                           ;motors.c: 192:     unsigned char keepMovingX = 1;
  2240  000C7A  0E01               	movlw	1
  2241  000C7C  6E62               	movwf	resetPosition@keepMovingX^0,c
  2242                           
  2243                           ;motors.c: 193:     unsigned char keepMovingY = 1;
  2244  000C7E  0E01               	movlw	1
  2245  000C80  6E63               	movwf	resetPosition@keepMovingY^0,c
  2246                           
  2247                           ;motors.c: 194:     unsigned char keepMovingZ = 1;
  2248  000C82  0E01               	movlw	1
  2249  000C84  6E64               	movwf	resetPosition@keepMovingZ^0,c
  2250  000C86                     
  2251                           ;motors.c: 197:     T2CONbits.TMR2ON = 1;
  2252  000C86  84CA               	bsf	202,2,c	;volatile
  2253                           
  2254                           ;motors.c: 199:     tm0Error = 0;
  2255  000C88  0E00               	movlw	0
  2256  000C8A  6E18               	movwf	(_tm0Error+1)^0,c
  2257  000C8C  0E00               	movlw	0
  2258  000C8E  6E17               	movwf	_tm0Error^0,c
  2259                           
  2260                           ;motors.c: 200:     tm0Limit = 250;
  2261  000C90  0EFA               	movlw	250
  2262  000C92  6E24               	movwf	_tm0Limit^0,c
  2263  000C94                     
  2264                           ;motors.c: 201:     T0CONbits.TMR0ON = 1;
  2265  000C94  8ED5               	bsf	213,7,c	;volatile
  2266                           
  2267                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2268  000C96  EF0B  F007         	goto	l3324
  2269  000C9A                     l3278:
  2270  000C9A  FFFF               	dw	65535	; assembler added errata NOP
  2271                           
  2272                           ;motors.c: 206:         if(tm0Error){
  2273  000C9C  5017               	movf	_tm0Error^0,w,c
  2274  000C9E  1018               	iorwf	(_tm0Error+1)^0,w,c
  2275  000CA0  B4D8               	btfsc	status,2,c
  2276  000CA2  EF55  F006         	goto	u2261
  2277  000CA6  EF58  F006         	goto	u2260
  2278  000CAA                     u2261:
  2279  000CAA  FFFF               	dw	65535	; assembler added errata NOP
  2280  000CAC  EF5F  F006         	goto	l131
  2281  000CB0                     u2260:
  2282  000CB0  FFFF               	dw	65535	; assembler added errata NOP
  2283  000CB2                     
  2284                           ;motors.c: 214:             tm0Error = 3;
  2285  000CB2  0E00               	movlw	0
  2286  000CB4  6E18               	movwf	(_tm0Error+1)^0,c
  2287  000CB6  0E03               	movlw	3
  2288  000CB8  6E17               	movwf	_tm0Error^0,c
  2289                           
  2290                           ;motors.c: 215:             break;
  2291  000CBA  EF29  F007         	goto	l132
  2292  000CBE                     l131:
  2293  000CBE  FFFF               	dw	65535	; assembler added errata NOP
  2294                           
  2295                           ;motors.c: 222:         if(PORTEbits.RE0 || !keepMovingX){
  2296  000CC0  B084               	btfsc	132,0,c	;volatile
  2297  000CC2  EF65  F006         	goto	u2271
  2298  000CC6  EF68  F006         	goto	u2270
  2299  000CCA                     u2271:
  2300  000CCA  FFFF               	dw	65535	; assembler added errata NOP
  2301  000CCC  EF72  F006         	goto	l3284
  2302  000CD0                     u2270:
  2303  000CD0  FFFF               	dw	65535	; assembler added errata NOP
  2304  000CD2  5062               	movf	resetPosition@keepMovingX^0,w,c
  2305  000CD4  A4D8               	btfss	status,2,c
  2306  000CD6  EF6F  F006         	goto	u2281
  2307  000CDA  EF72  F006         	goto	u2280
  2308  000CDE                     u2281:
  2309  000CDE  FFFF               	dw	65535	; assembler added errata NOP
  2310  000CE0  EF77  F006         	goto	l3286
  2311  000CE4                     u2280:
  2312  000CE4                     l3284:
  2313  000CE4  FFFF               	dw	65535	; assembler added errata NOP
  2314                           
  2315                           ;motors.c: 224:             keepMovingX = 0;
  2316  000CE6  0E00               	movlw	0
  2317  000CE8  6E62               	movwf	resetPosition@keepMovingX^0,c
  2318                           
  2319                           ;motors.c: 225:         }else{
  2320  000CEA  EF94  F006         	goto	l3294
  2321  000CEE                     l3286:
  2322  000CEE  FFFF               	dw	65535	; assembler added errata NOP
  2323                           
  2324                           ;motors.c: 231:             motCounter[0][0] += motCounter[0][1];
  2325  000CF0  EE20  F02F         	lfsr	2,_motCounter+2
  2326  000CF4  50DE               	movf	postinc2,w,c
  2327  000CF6  262D               	addwf	_motCounter^0,f,c
  2328  000CF8  50DD               	movf	postdec2,w,c
  2329  000CFA  222E               	addwfc	(_motCounter+1)^0,f,c
  2330  000CFC                     
  2331                           ;motors.c: 232:             if(motCounter[0][0] < 0){
  2332  000CFC  BE2E               	btfsc	(_motCounter+1)^0,7,c
  2333  000CFE  EF86  F006         	goto	u2290
  2334  000D02  EF83  F006         	goto	u2291
  2335  000D06                     u2291:
  2336  000D06  FFFF               	dw	65535	; assembler added errata NOP
  2337  000D08  EF8B  F006         	goto	l3292
  2338  000D0C                     u2290:
  2339  000D0C  FFFF               	dw	65535	; assembler added errata NOP
  2340  000D0E                     
  2341                           ;motors.c: 233:                 motCounter[0][0] = 3;
  2342  000D0E  0E00               	movlw	0
  2343  000D10  6E2E               	movwf	(_motCounter+1)^0,c
  2344  000D12  0E03               	movlw	3
  2345  000D14  6E2D               	movwf	_motCounter^0,c
  2346  000D16                     l3292:
  2347  000D16  FFFF               	dw	65535	; assembler added errata NOP
  2348                           
  2349                           ;motors.c: 236:             LATA = stepMot1[motCounter[0][0]];
  2350  000D18  0E45               	movlw	low _stepMot1
  2351  000D1A  242D               	addwf	_motCounter^0,w,c
  2352  000D1C  6ED9               	movwf	fsr2l,c
  2353  000D1E  0E00               	movlw	high _stepMot1
  2354  000D20  202E               	addwfc	(_motCounter+1)^0,w,c
  2355  000D22  6EDA               	movwf	fsr2h,c
  2356  000D24  50DF               	movf	indf2,w,c
  2357  000D26  6E89               	movwf	137,c	;volatile
  2358  000D28                     l3294:
  2359  000D28  FFFF               	dw	65535	; assembler added errata NOP
  2360                           
  2361                           ;motors.c: 241:         if(PORTEbits.RE1 || !keepMovingY){
  2362  000D2A  B284               	btfsc	132,1,c	;volatile
  2363  000D2C  EF9A  F006         	goto	u2301
  2364  000D30  EF9D  F006         	goto	u2300
  2365  000D34                     u2301:
  2366  000D34  FFFF               	dw	65535	; assembler added errata NOP
  2367  000D36  EFA7  F006         	goto	l3298
  2368  000D3A                     u2300:
  2369  000D3A  FFFF               	dw	65535	; assembler added errata NOP
  2370  000D3C  5063               	movf	resetPosition@keepMovingY^0,w,c
  2371  000D3E  A4D8               	btfss	status,2,c
  2372  000D40  EFA4  F006         	goto	u2311
  2373  000D44  EFA7  F006         	goto	u2310
  2374  000D48                     u2311:
  2375  000D48  FFFF               	dw	65535	; assembler added errata NOP
  2376  000D4A  EFAC  F006         	goto	l3300
  2377  000D4E                     u2310:
  2378  000D4E                     l3298:
  2379  000D4E  FFFF               	dw	65535	; assembler added errata NOP
  2380                           
  2381                           ;motors.c: 243:             keepMovingY = 0;
  2382  000D50  0E00               	movlw	0
  2383  000D52  6E63               	movwf	resetPosition@keepMovingY^0,c
  2384                           
  2385                           ;motors.c: 244:         }else{
  2386  000D54  EFC9  F006         	goto	l3308
  2387  000D58                     l3300:
  2388  000D58  FFFF               	dw	65535	; assembler added errata NOP
  2389                           
  2390                           ;motors.c: 250:             motCounter[1][0] += motCounter[1][1];
  2391  000D5A  EE20  F033         	lfsr	2,_motCounter+6
  2392  000D5E  50DE               	movf	postinc2,w,c
  2393  000D60  2631               	addwf	(_motCounter+4)^0,f,c
  2394  000D62  50DD               	movf	postdec2,w,c
  2395  000D64  2232               	addwfc	(_motCounter+5)^0,f,c
  2396  000D66                     
  2397                           ;motors.c: 251:             if(motCounter[1][0] < 0){
  2398  000D66  BE32               	btfsc	(_motCounter+5)^0,7,c
  2399  000D68  EFBB  F006         	goto	u2320
  2400  000D6C  EFB8  F006         	goto	u2321
  2401  000D70                     u2321:
  2402  000D70  FFFF               	dw	65535	; assembler added errata NOP
  2403  000D72  EFC0  F006         	goto	l3306
  2404  000D76                     u2320:
  2405  000D76  FFFF               	dw	65535	; assembler added errata NOP
  2406  000D78                     
  2407                           ;motors.c: 252:                 motCounter[1][0] = 3;
  2408  000D78  0E00               	movlw	0
  2409  000D7A  6E32               	movwf	(_motCounter+5)^0,c
  2410  000D7C  0E03               	movlw	3
  2411  000D7E  6E31               	movwf	(_motCounter+4)^0,c
  2412  000D80                     l3306:
  2413  000D80  FFFF               	dw	65535	; assembler added errata NOP
  2414                           
  2415                           ;motors.c: 255:             LATB = stepMot2[motCounter[1][0]];
  2416  000D82  0E41               	movlw	low _stepMot2
  2417  000D84  2431               	addwf	(_motCounter+4)^0,w,c
  2418  000D86  6ED9               	movwf	fsr2l,c
  2419  000D88  0E00               	movlw	high _stepMot2
  2420  000D8A  2032               	addwfc	(_motCounter+5)^0,w,c
  2421  000D8C  6EDA               	movwf	fsr2h,c
  2422  000D8E  50DF               	movf	indf2,w,c
  2423  000D90  6E8A               	movwf	138,c	;volatile
  2424  000D92                     l3308:
  2425  000D92  FFFF               	dw	65535	; assembler added errata NOP
  2426                           
  2427                           ;motors.c: 260:         if(PORTEbits.RE2 || !keepMovingZ){
  2428  000D94  B484               	btfsc	132,2,c	;volatile
  2429  000D96  EFCF  F006         	goto	u2331
  2430  000D9A  EFD2  F006         	goto	u2330
  2431  000D9E                     u2331:
  2432  000D9E  FFFF               	dw	65535	; assembler added errata NOP
  2433  000DA0  EFDC  F006         	goto	l3312
  2434  000DA4                     u2330:
  2435  000DA4  FFFF               	dw	65535	; assembler added errata NOP
  2436  000DA6  5064               	movf	resetPosition@keepMovingZ^0,w,c
  2437  000DA8  A4D8               	btfss	status,2,c
  2438  000DAA  EFD9  F006         	goto	u2341
  2439  000DAE  EFDC  F006         	goto	u2340
  2440  000DB2                     u2341:
  2441  000DB2  FFFF               	dw	65535	; assembler added errata NOP
  2442  000DB4  EFE1  F006         	goto	l3314
  2443  000DB8                     u2340:
  2444  000DB8                     l3312:
  2445  000DB8  FFFF               	dw	65535	; assembler added errata NOP
  2446                           
  2447                           ;motors.c: 262:             keepMovingZ = 0;
  2448  000DBA  0E00               	movlw	0
  2449  000DBC  6E64               	movwf	resetPosition@keepMovingZ^0,c
  2450                           
  2451                           ;motors.c: 263:         }else{
  2452  000DBE  EFFE  F006         	goto	l3322
  2453  000DC2                     l3314:
  2454  000DC2  FFFF               	dw	65535	; assembler added errata NOP
  2455                           
  2456                           ;motors.c: 269:             motCounter[2][0] += motCounter[2][1];
  2457  000DC4  EE20  F037         	lfsr	2,_motCounter+10
  2458  000DC8  50DE               	movf	postinc2,w,c
  2459  000DCA  2635               	addwf	(_motCounter+8)^0,f,c
  2460  000DCC  50DD               	movf	postdec2,w,c
  2461  000DCE  2236               	addwfc	(_motCounter+9)^0,f,c
  2462  000DD0                     
  2463                           ;motors.c: 270:             if(motCounter[2][0] < 0){
  2464  000DD0  BE36               	btfsc	(_motCounter+9)^0,7,c
  2465  000DD2  EFF0  F006         	goto	u2350
  2466  000DD6  EFED  F006         	goto	u2351
  2467  000DDA                     u2351:
  2468  000DDA  FFFF               	dw	65535	; assembler added errata NOP
  2469  000DDC  EFF5  F006         	goto	l3320
  2470  000DE0                     u2350:
  2471  000DE0  FFFF               	dw	65535	; assembler added errata NOP
  2472  000DE2                     
  2473                           ;motors.c: 271:                 motCounter[2][0] = 3;
  2474  000DE2  0E00               	movlw	0
  2475  000DE4  6E36               	movwf	(_motCounter+9)^0,c
  2476  000DE6  0E03               	movlw	3
  2477  000DE8  6E35               	movwf	(_motCounter+8)^0,c
  2478  000DEA                     l3320:
  2479  000DEA  FFFF               	dw	65535	; assembler added errata NOP
  2480                           
  2481                           ;motors.c: 274:             LATC = stepMot3[motCounter[2][0]];
  2482  000DEC  0E3D               	movlw	low _stepMot3
  2483  000DEE  2435               	addwf	(_motCounter+8)^0,w,c
  2484  000DF0  6ED9               	movwf	fsr2l,c
  2485  000DF2  0E00               	movlw	high _stepMot3
  2486  000DF4  2036               	addwfc	(_motCounter+9)^0,w,c
  2487  000DF6  6EDA               	movwf	fsr2h,c
  2488  000DF8  50DF               	movf	indf2,w,c
  2489  000DFA  6E8B               	movwf	139,c	;volatile
  2490  000DFC                     l3322:
  2491  000DFC  FFFF               	dw	65535	; assembler added errata NOP
  2492  000DFE  EC12  F00E         	call	_stepMade	;wreg free
  2493  000E02  505F               	movf	?_stepMade^0,w,c
  2494  000E04  1060               	iorwf	(?_stepMade+1)^0,w,c
  2495  000E06  B4D8               	btfsc	status,2,c
  2496  000E08  EF08  F007         	goto	u2361
  2497  000E0C  EF0B  F007         	goto	u2360
  2498  000E10                     u2361:
  2499  000E10  FFFF               	dw	65535	; assembler added errata NOP
  2500  000E12  EFFE  F006         	goto	l3322
  2501  000E16                     u2360:
  2502  000E16                     l3324:
  2503  000E16  FFFF               	dw	65535	; assembler added errata NOP
  2504                           
  2505                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2506  000E18  5062               	movf	resetPosition@keepMovingX^0,w,c
  2507  000E1A  A4D8               	btfss	status,2,c
  2508  000E1C  EF12  F007         	goto	u2371
  2509  000E20  EF15  F007         	goto	u2370
  2510  000E24                     u2371:
  2511  000E24  FFFF               	dw	65535	; assembler added errata NOP
  2512  000E26  EF4D  F006         	goto	l3278
  2513  000E2A                     u2370:
  2514  000E2A  FFFF               	dw	65535	; assembler added errata NOP
  2515  000E2C  5063               	movf	resetPosition@keepMovingY^0,w,c
  2516  000E2E  A4D8               	btfss	status,2,c
  2517  000E30  EF1C  F007         	goto	u2381
  2518  000E34  EF1F  F007         	goto	u2380
  2519  000E38                     u2381:
  2520  000E38  FFFF               	dw	65535	; assembler added errata NOP
  2521  000E3A  EF4D  F006         	goto	l3278
  2522  000E3E                     u2380:
  2523  000E3E  FFFF               	dw	65535	; assembler added errata NOP
  2524  000E40  5064               	movf	resetPosition@keepMovingZ^0,w,c
  2525  000E42  A4D8               	btfss	status,2,c
  2526  000E44  EF26  F007         	goto	u2391
  2527  000E48  EF29  F007         	goto	u2390
  2528  000E4C                     u2391:
  2529  000E4C  FFFF               	dw	65535	; assembler added errata NOP
  2530  000E4E  EF4D  F006         	goto	l3278
  2531  000E52                     u2390:
  2532  000E52                     l132:
  2533  000E52  FFFF               	dw	65535	; assembler added errata NOP
  2534                           
  2535                           ;motors.c: 294:     T0CONbits.TMR0ON = 0;
  2536  000E54  9ED5               	bcf	213,7,c	;volatile
  2537                           
  2538                           ;motors.c: 295:     T2CONbits.TMR2ON = 0;
  2539  000E56  94CA               	bcf	202,2,c	;volatile
  2540  000E58                     
  2541                           ;motors.c: 297:     TMR0 = 0;
  2542  000E58  0E00               	movlw	0
  2543  000E5A  6ED7               	movwf	215,c	;volatile
  2544  000E5C  0E00               	movlw	0
  2545  000E5E  6ED6               	movwf	214,c	;volatile
  2546                           
  2547                           ;motors.c: 298:     TMR2 = 0;
  2548  000E60  0E00               	movlw	0
  2549  000E62  6ECC               	movwf	204,c	;volatile
  2550  000E64                     
  2551                           ;motors.c: 301:     resetStep();
  2552  000E64  EC7E  F00E         	call	_resetStep	;wreg free
  2553  000E68                     
  2554                           ;motors.c: 304:     return(tm0Error);
  2555  000E68  5017               	movf	_tm0Error^0,w,c
  2556  000E6A  0012               	return		;funcret
  2557  000E6C  FFFF               	dw	65535	; errata NOP
  2558  000E6E                     __end_of_resetPosition:
  2559                           	callstack 0
  2560                           
  2561 ;; *************** function _resetNewSequence *****************
  2562 ;; Defined at:
  2563 ;;		line 73 in file "usart.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;		None
  2566 ;; Auto vars:     Size  Location     Type
  2567 ;;		None
  2568 ;; Return value:  Size  Location     Type
  2569 ;;                  1    wreg      void 
  2570 ;; Registers used:
  2571 ;;		wreg, status,2
  2572 ;; Tracked objects:
  2573 ;;		On entry : 0/0
  2574 ;;		On exit  : 0/0
  2575 ;;		Unchanged: 0/0
  2576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2577 ;;      Params:         0       0       0       0       0       0       0
  2578 ;;      Locals:         0       0       0       0       0       0       0
  2579 ;;      Temps:          0       0       0       0       0       0       0
  2580 ;;      Totals:         0       0       0       0       0       0       0
  2581 ;;Total ram usage:        0 bytes
  2582 ;; Hardware stack levels used:    1
  2583 ;; Hardware stack levels required when called:    4
  2584 ;; This function calls:
  2585 ;;		Nothing
  2586 ;; This function is called by:
  2587 ;;		_main
  2588 ;; This function uses a non-reentrant model
  2589 ;;
  2590                           
  2591                           	psect	text10
  2592  001CD4                     __ptext10:
  2593                           	callstack 0
  2594  001CD4                     _resetNewSequence:
  2595                           	callstack 0
  2596  001CD4  FFFF               	dw	65535	; assembler added errata NOP
  2597  001CD6                     
  2598                           ;usart.c: 74:     _newSequence = 0;
  2599  001CD6  0E00               	movlw	0
  2600  001CD8  6E1D               	movwf	__newSequence^0,c
  2601  001CDA  0012               	return		;funcret
  2602  001CDC  FFFF               	dw	65535	; errata NOP
  2603  001CDE                     __end_of_resetNewSequence:
  2604                           	callstack 0
  2605                           
  2606 ;; *************** function _reduceSeq *****************
  2607 ;; Defined at:
  2608 ;;		line 50 in file "usart.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;		None
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		status,2, status,0
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2622 ;;      Params:         0       0       0       0       0       0       0
  2623 ;;      Locals:         0       0       0       0       0       0       0
  2624 ;;      Temps:          0       0       0       0       0       0       0
  2625 ;;      Totals:         0       0       0       0       0       0       0
  2626 ;;Total ram usage:        0 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    4
  2629 ;; This function calls:
  2630 ;;		Nothing
  2631 ;; This function is called by:
  2632 ;;		_main
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text11
  2637  001D24                     __ptext11:
  2638                           	callstack 0
  2639  001D24                     _reduceSeq:
  2640                           	callstack 0
  2641  001D24  FFFF               	dw	65535	; assembler added errata NOP
  2642  001D26                     
  2643                           ;usart.c: 51:     dataCounter--;
  2644  001D26  061F               	decf	_dataCounter^0,f,c
  2645  001D28  0012               	return		;funcret
  2646  001D2A  FFFF               	dw	65535	; errata NOP
  2647  001D2C                     __end_of_reduceSeq:
  2648                           	callstack 0
  2649                           
  2650 ;; *************** function _readSeq *****************
  2651 ;; Defined at:
  2652 ;;		line 57 in file "usart.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;		None
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;		None
  2657 ;; Return value:  Size  Location     Type
  2658 ;;                  1    wreg      unsigned char 
  2659 ;; Registers used:
  2660 ;;		wreg, status,2
  2661 ;; Tracked objects:
  2662 ;;		On entry : 0/0
  2663 ;;		On exit  : 0/0
  2664 ;;		Unchanged: 0/0
  2665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2666 ;;      Params:         0       0       0       0       0       0       0
  2667 ;;      Locals:         0       0       0       0       0       0       0
  2668 ;;      Temps:          0       0       0       0       0       0       0
  2669 ;;      Totals:         0       0       0       0       0       0       0
  2670 ;;Total ram usage:        0 bytes
  2671 ;; Hardware stack levels used:    1
  2672 ;; Hardware stack levels required when called:    4
  2673 ;; This function calls:
  2674 ;;		Nothing
  2675 ;; This function is called by:
  2676 ;;		_main
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           	psect	text12
  2681  001D2C                     __ptext12:
  2682                           	callstack 0
  2683  001D2C                     _readSeq:
  2684                           	callstack 0
  2685  001D2C  FFFF               	dw	65535	; assembler added errata NOP
  2686  001D2E                     
  2687                           ;usart.c: 58:     return dataCounter;
  2688  001D2E  501F               	movf	_dataCounter^0,w,c
  2689  001D30  0012               	return		;funcret
  2690  001D32  FFFF               	dw	65535	; errata NOP
  2691  001D34                     __end_of_readSeq:
  2692                           	callstack 0
  2693                           
  2694 ;; *************** function _newSequence *****************
  2695 ;; Defined at:
  2696 ;;		line 65 in file "usart.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;		None
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;		None
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  1    wreg      unsigned char 
  2703 ;; Registers used:
  2704 ;;		wreg, status,2
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2710 ;;      Params:         0       0       0       0       0       0       0
  2711 ;;      Locals:         0       0       0       0       0       0       0
  2712 ;;      Temps:          0       0       0       0       0       0       0
  2713 ;;      Totals:         0       0       0       0       0       0       0
  2714 ;;Total ram usage:        0 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; Hardware stack levels required when called:    4
  2717 ;; This function calls:
  2718 ;;		Nothing
  2719 ;; This function is called by:
  2720 ;;		_main
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           	psect	text13
  2725  001D34                     __ptext13:
  2726                           	callstack 0
  2727  001D34                     _newSequence:
  2728                           	callstack 0
  2729  001D34  FFFF               	dw	65535	; assembler added errata NOP
  2730  001D36                     
  2731                           ;usart.c: 66:     return _newSequence;
  2732  001D36  501D               	movf	__newSequence^0,w,c
  2733  001D38  0012               	return		;funcret
  2734  001D3A  FFFF               	dw	65535	; errata NOP
  2735  001D3C                     __end_of_newSequence:
  2736                           	callstack 0
  2737                           
  2738 ;; *************** function _interruptInit *****************
  2739 ;; Defined at:
  2740 ;;		line 21 in file "interrupt.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;		None
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;		None
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  1    wreg      void 
  2747 ;; Registers used:
  2748 ;;		None
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2754 ;;      Params:         0       0       0       0       0       0       0
  2755 ;;      Locals:         0       0       0       0       0       0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0
  2757 ;;      Totals:         0       0       0       0       0       0       0
  2758 ;;Total ram usage:        0 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    4
  2761 ;; This function calls:
  2762 ;;		Nothing
  2763 ;; This function is called by:
  2764 ;;		_main
  2765 ;; This function uses a non-reentrant model
  2766 ;;
  2767                           
  2768                           	psect	text14
  2769  001AF0                     __ptext14:
  2770                           	callstack 0
  2771  001AF0                     _interruptInit:
  2772                           	callstack 0
  2773  001AF0  FFFF               	dw	65535	; assembler added errata NOP
  2774  001AF2                     
  2775                           ;interrupt.c: 23:     if(!INTCONbits.GIE){
  2776  001AF2  BEF2               	btfsc	242,7,c	;volatile
  2777  001AF4  EF7E  F00D         	goto	u2401
  2778  001AF8  EF81  F00D         	goto	u2400
  2779  001AFC                     u2401:
  2780  001AFC  FFFF               	dw	65535	; assembler added errata NOP
  2781  001AFE  EF83  F00D         	goto	l442
  2782  001B02                     u2400:
  2783  001B02  FFFF               	dw	65535	; assembler added errata NOP
  2784  001B04                     
  2785                           ;interrupt.c: 24:         INTCONbits.GIE = 1;
  2786  001B04  8EF2               	bsf	242,7,c	;volatile
  2787  001B06                     l442:
  2788  001B06  FFFF               	dw	65535	; assembler added errata NOP
  2789                           
  2790                           ;interrupt.c: 26:     if(!INTCONbits.PEIE){
  2791  001B08  BCF2               	btfsc	242,6,c	;volatile
  2792  001B0A  EF89  F00D         	goto	u2411
  2793  001B0E  EF8C  F00D         	goto	u2410
  2794  001B12                     u2411:
  2795  001B12  FFFF               	dw	65535	; assembler added errata NOP
  2796  001B14  EF8E  F00D         	goto	l443
  2797  001B18                     u2410:
  2798  001B18  FFFF               	dw	65535	; assembler added errata NOP
  2799  001B1A                     
  2800                           ;interrupt.c: 27:         INTCONbits.PEIE = 1;
  2801  001B1A  8CF2               	bsf	242,6,c	;volatile
  2802  001B1C                     l443:
  2803  001B1C  FFFF               	dw	65535	; assembler added errata NOP
  2804                           
  2805                           ;interrupt.c: 31:     RCONbits.IPEN = 1;
  2806  001B1E  8ED0               	bsf	208,7,c	;volatile
  2807                           
  2808                           ;interrupt.c: 32:     INTCONbits.T0IE = 1;
  2809  001B20  8AF2               	bsf	242,5,c	;volatile
  2810                           
  2811                           ;interrupt.c: 33:     PIE1bits.TMR1IE = 1;
  2812  001B22  809D               	bsf	157,0,c	;volatile
  2813                           
  2814                           ;interrupt.c: 34:     PIE1bits.TMR2IE = 1;
  2815  001B24  829D               	bsf	157,1,c	;volatile
  2816                           
  2817                           ;interrupt.c: 35:     PIE1bits.RC1IE = 1;
  2818  001B26  8A9D               	bsf	157,5,c	;volatile
  2819  001B28  0012               	return		;funcret
  2820  001B2A  FFFF               	dw	65535	; errata NOP
  2821  001B2C                     __end_of_interruptInit:
  2822                           	callstack 0
  2823                           
  2824 ;; *************** function _initPinMotors *****************
  2825 ;; Defined at:
  2826 ;;		line 49 in file "motors.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;		None
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;		None
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      void 
  2833 ;; Registers used:
  2834 ;;		wreg, status,2, status,0
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2840 ;;      Params:         0       0       0       0       0       0       0
  2841 ;;      Locals:         0       0       0       0       0       0       0
  2842 ;;      Temps:          0       0       0       0       0       0       0
  2843 ;;      Totals:         0       0       0       0       0       0       0
  2844 ;;Total ram usage:        0 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; Hardware stack levels required when called:    4
  2847 ;; This function calls:
  2848 ;;		Nothing
  2849 ;; This function is called by:
  2850 ;;		_main
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           	psect	text15
  2855  001B84                     __ptext15:
  2856                           	callstack 0
  2857  001B84                     _initPinMotors:
  2858                           	callstack 0
  2859  001B84  FFFF               	dw	65535	; assembler added errata NOP
  2860  001B86                     
  2861                           ;motors.c: 51:     ADCON1bits.PCFG = 0x06;
  2862  001B86  50C1               	movf	193,w,c	;volatile
  2863  001B88  0BF0               	andlw	-16
  2864  001B8A  0906               	iorlw	6
  2865  001B8C  6EC1               	movwf	193,c	;volatile
  2866  001B8E                     
  2867                           ;motors.c: 52:     TRISA &= 0b11010001;
  2868  001B8E  0ED1               	movlw	209
  2869  001B90  1692               	andwf	146,f,c	;volatile
  2870  001B92                     
  2871                           ;motors.c: 54:     TRISB &= 0b00000010;
  2872  001B92  0E02               	movlw	2
  2873  001B94  1693               	andwf	147,f,c	;volatile
  2874  001B96                     
  2875                           ;motors.c: 55:     TRISC &= 0b11000000;
  2876  001B96  0EC0               	movlw	192
  2877  001B98  1694               	andwf	148,f,c	;volatile
  2878  001B9A                     
  2879                           ;motors.c: 56:     TRISD &= 0b11000000;
  2880  001B9A  0EC0               	movlw	192
  2881  001B9C  1695               	andwf	149,f,c	;volatile
  2882  001B9E                     
  2883                           ;motors.c: 59:     TRISEbits.TRISE0 = 1;
  2884  001B9E  8096               	bsf	150,0,c	;volatile
  2885  001BA0                     
  2886                           ;motors.c: 60:     TRISEbits.TRISE1 = 1;
  2887  001BA0  8296               	bsf	150,1,c	;volatile
  2888  001BA2                     
  2889                           ;motors.c: 61:     TRISEbits.TRISE2 = 1;
  2890  001BA2  8496               	bsf	150,2,c	;volatile
  2891  001BA4                     
  2892                           ;motors.c: 64:     TRISDbits.TRISD7 = 1;
  2893  001BA4  8E95               	bsf	149,7,c	;volatile
  2894  001BA6  0012               	return		;funcret
  2895  001BA8  FFFF               	dw	65535	; errata NOP
  2896  001BAA                     __end_of_initPinMotors:
  2897                           	callstack 0
  2898                           
  2899 ;; *************** function _initADC *****************
  2900 ;; Defined at:
  2901 ;;		line 18 in file "adc.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;		None
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;		None
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      void 
  2908 ;; Registers used:
  2909 ;;		wreg, status,2
  2910 ;; Tracked objects:
  2911 ;;		On entry : 0/0
  2912 ;;		On exit  : 0/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2915 ;;      Params:         0       0       0       0       0       0       0
  2916 ;;      Locals:         0       0       0       0       0       0       0
  2917 ;;      Temps:          0       0       0       0       0       0       0
  2918 ;;      Totals:         0       0       0       0       0       0       0
  2919 ;;Total ram usage:        0 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:    4
  2922 ;; This function calls:
  2923 ;;		Nothing
  2924 ;; This function is called by:
  2925 ;;		_main
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           	psect	text16
  2930  001BAA                     __ptext16:
  2931                           	callstack 0
  2932  001BAA                     _initADC:
  2933                           	callstack 0
  2934  001BAA  FFFF               	dw	65535	; assembler added errata NOP
  2935  001BAC                     
  2936                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  2937  001BAC  50C2               	movf	194,w,c	;volatile
  2938  001BAE  0B3F               	andlw	-193
  2939  001BB0  0940               	iorlw	64
  2940  001BB2  6EC2               	movwf	194,c	;volatile
  2941  001BB4                     
  2942                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  2943  001BB4  8CC1               	bsf	193,6,c	;volatile
  2944                           
  2945                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  2946  001BB6  0EC7               	movlw	-57
  2947  001BB8  16C2               	andwf	194,f,c	;volatile
  2948  001BBA                     
  2949                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  2950  001BBA  94C2               	bcf	194,2,c	;volatile
  2951  001BBC                     
  2952                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  2953  001BBC  90C2               	bcf	194,0,c	;volatile
  2954  001BBE                     
  2955                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  2956  001BBE  9EC1               	bcf	193,7,c	;volatile
  2957                           
  2958                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  2959  001BC0  50C1               	movf	193,w,c	;volatile
  2960  001BC2  0BF0               	andlw	-16
  2961  001BC4  090E               	iorlw	14
  2962  001BC6  6EC1               	movwf	193,c	;volatile
  2963  001BC8                     
  2964                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  2965  001BC8  8C9D               	bsf	157,6,c	;volatile
  2966  001BCA                     
  2967                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  2968  001BCA  8C9F               	bsf	159,6,c	;volatile
  2969  001BCC  0012               	return		;funcret
  2970  001BCE  FFFF               	dw	65535	; errata NOP
  2971  001BD0                     __end_of_initADC:
  2972                           	callstack 0
  2973                           
  2974 ;; *************** function _getNewSequence *****************
  2975 ;; Defined at:
  2976 ;;		line 43 in file "usart.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;		None
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;		None
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  2   17[COMRAM] PTR struct .
  2983 ;; Registers used:
  2984 ;;		wreg, status,2, status,0
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2990 ;;      Params:         2       0       0       0       0       0       0
  2991 ;;      Locals:         0       0       0       0       0       0       0
  2992 ;;      Temps:          0       0       0       0       0       0       0
  2993 ;;      Totals:         2       0       0       0       0       0       0
  2994 ;;Total ram usage:        2 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:    4
  2997 ;; This function calls:
  2998 ;;		Nothing
  2999 ;; This function is called by:
  3000 ;;		_main
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           	psect	text17
  3005  001C6A                     __ptext17:
  3006                           	callstack 0
  3007  001C6A                     _getNewSequence:
  3008                           	callstack 0
  3009  001C6A  FFFF               	dw	65535	; assembler added errata NOP
  3010  001C6C                     
  3011                           ;usart.c: 44:     return(&newSequenceData);
  3012  001C6C  0E25               	movlw	low _newSequenceData
  3013  001C6E  6E5F               	movwf	?_getNewSequence^0,c
  3014  001C70  0E00               	movlw	high _newSequenceData
  3015  001C72  6E60               	movwf	(?_getNewSequence+1)^0,c
  3016  001C74  0012               	return		;funcret
  3017  001C76  FFFF               	dw	65535	; errata NOP
  3018  001C78                     __end_of_getNewSequence:
  3019                           	callstack 0
  3020                           
  3021 ;; *************** function _executeData *****************
  3022 ;; Defined at:
  3023 ;;		line 105 in file "main.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;		None
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;  data            2    5[BANK0 ] PTR struct .
  3028 ;;		 -> dataSequence(20), 
  3029 ;;  errCode         1    4[BANK0 ] unsigned char 
  3030 ;; Return value:  Size  Location     Type
  3031 ;;                  1    wreg      unsigned char 
  3032 ;; Registers used:
  3033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3034 ;; Tracked objects:
  3035 ;;		On entry : 0/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3039 ;;      Params:         0       0       0       0       0       0       0
  3040 ;;      Locals:         0       3       0       0       0       0       0
  3041 ;;      Temps:          2       0       0       0       0       0       0
  3042 ;;      Totals:         2       3       0       0       0       0       0
  3043 ;;Total ram usage:        5 bytes
  3044 ;; Hardware stack levels used:    1
  3045 ;; Hardware stack levels required when called:    6
  3046 ;; This function calls:
  3047 ;;		_getData
  3048 ;;		_liftArm
  3049 ;;		_moveToPoint
  3050 ;;		_pickObject
  3051 ;;		_releaseObj
  3052 ;;		_touchObject
  3053 ;;		_touchTherm
  3054 ;; This function is called by:
  3055 ;;		_main
  3056 ;; This function uses a non-reentrant model
  3057 ;;
  3058                           
  3059                           	psect	text18
  3060  0009EA                     __ptext18:
  3061                           	callstack 0
  3062  0009EA                     _executeData:
  3063                           	callstack 0
  3064  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  3065  0009EC                     
  3066                           ;main.c: 106:     t_sequence *data = getData();
  3067  0009EC  EC3C  F00E         	call	_getData	;wreg free
  3068  0009F0  C05F  F0F0         	movff	?_getData,executeData@data
  3069  0009F4  C060  F0F1         	movff	?_getData+1,executeData@data+1
  3070  0009F8                     
  3071                           ;main.c: 112:     switch(data->feederLine){
  3072  0009F8  EFA8  F005         	goto	l3470
  3073  0009FC                     l3442:
  3074  0009FC  FFFF               	dw	65535	; assembler added errata NOP
  3075                           
  3076                           ;main.c: 115:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3077  0009FE  C00A  F062         	movff	_posVector,moveToPoint@x1
  3078  000A02  6A63               	clrf	(moveToPoint@x1+1)^0,c
  3079  000A04  C00B  F064         	movff	_posVector+1,moveToPoint@y1
  3080  000A08  6A65               	clrf	(moveToPoint@y1+1)^0,c
  3081  000A0A  0E0D               	movlw	low _feeder1Pos
  3082  000A0C  6EF6               	movwf	tblptrl,c
  3083  000A0E                     	if	1	;There is more than 1 active tblptr byte
  3084  000A0E  0E06               	movlw	high _feeder1Pos
  3085  000A10  6EF7               	movwf	tblptrh,c
  3086  000A12                     	endif
  3087  000A12                     	if	0	;There are less than 3 active tblptr bytes
  3088  000A12                     	endif
  3089  000A12  0008               	tblrd		*
  3090  000A14  FFFF               	dw	65535	; errata NOP
  3091  000A16  50F5               	movf	tablat,w,c
  3092  000A18  6E66               	movwf	moveToPoint@x2^0,c
  3093  000A1A  6A67               	clrf	(moveToPoint@x2+1)^0,c
  3094  000A1C  0E0E               	movlw	low (_feeder1Pos+1)
  3095  000A1E  6EF6               	movwf	tblptrl,c
  3096  000A20  0E06               	movlw	high (_feeder1Pos+1)
  3097  000A22  6EF7               	movwf	tblptrh,c
  3098  000A24                     	if	0	;tblptru may be non-zero
  3099  000A24                     	endif
  3100  000A24                     	if	0	;tblptru may be non-zero
  3101  000A24                     	endif
  3102  000A24  0008               	tblrd		*
  3103  000A26  FFFF               	dw	65535	; errata NOP
  3104  000A28  50F5               	movf	tablat,w,c
  3105  000A2A  6E68               	movwf	moveToPoint@y2^0,c
  3106  000A2C  6A69               	clrf	(moveToPoint@y2+1)^0,c
  3107  000A2E  EC09  F003         	call	_moveToPoint	;wreg free
  3108  000A32  0100               	movlb	0	; () banked
  3109  000A34  6FEF               	movwf	executeData@errCode& (0+255),b
  3110  000A36                     
  3111                           ; BSR set to: 0
  3112                           ;main.c: 117:             posVector[0] = feeder1Pos[0];
  3113  000A36  0E0D               	movlw	low _feeder1Pos
  3114  000A38  6EF6               	movwf	tblptrl,c
  3115  000A3A                     	if	1	;There is more than 1 active tblptr byte
  3116  000A3A  0E06               	movlw	high _feeder1Pos
  3117  000A3C  6EF7               	movwf	tblptrh,c
  3118  000A3E                     	endif
  3119  000A3E                     	if	0	;There are less than 3 active tblptr bytes
  3120  000A3E                     	endif
  3121  000A3E  0008               	tblrd		*
  3122  000A40  FFFF               	dw	65535	; errata NOP
  3123  000A42  CFF5 F00A          	movff	tablat,_posVector
  3124  000A46                     
  3125                           ; BSR set to: 0
  3126                           ;main.c: 118:             posVector[1] = feeder1Pos[1];
  3127  000A46  0E0E               	movlw	low (_feeder1Pos+1)
  3128  000A48  6EF6               	movwf	tblptrl,c
  3129  000A4A  0E06               	movlw	high (_feeder1Pos+1)
  3130  000A4C  6EF7               	movwf	tblptrh,c
  3131  000A4E                     	if	0	;tblptru may be non-zero
  3132  000A4E                     	endif
  3133  000A4E                     	if	0	;tblptru may be non-zero
  3134  000A4E                     	endif
  3135  000A4E  0008               	tblrd		*
  3136  000A50  FFFF               	dw	65535	; errata NOP
  3137  000A52  CFF5 F00B          	movff	tablat,_posVector+1
  3138                           
  3139                           ;main.c: 119:             break;
  3140  000A56  EFCB  F005         	goto	l3472
  3141  000A5A                     l3448:
  3142  000A5A  FFFF               	dw	65535	; assembler added errata NOP
  3143                           
  3144                           ;main.c: 121:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3145  000A5C  C00A  F062         	movff	_posVector,moveToPoint@x1
  3146  000A60  6A63               	clrf	(moveToPoint@x1+1)^0,c
  3147  000A62  C00B  F064         	movff	_posVector+1,moveToPoint@y1
  3148  000A66  6A65               	clrf	(moveToPoint@y1+1)^0,c
  3149  000A68  0E0B               	movlw	low _feeder2Pos
  3150  000A6A  6EF6               	movwf	tblptrl,c
  3151  000A6C                     	if	1	;There is more than 1 active tblptr byte
  3152  000A6C  0E06               	movlw	high _feeder2Pos
  3153  000A6E  6EF7               	movwf	tblptrh,c
  3154  000A70                     	endif
  3155  000A70                     	if	0	;There are less than 3 active tblptr bytes
  3156  000A70                     	endif
  3157  000A70  0008               	tblrd		*
  3158  000A72  FFFF               	dw	65535	; errata NOP
  3159  000A74  50F5               	movf	tablat,w,c
  3160  000A76  6E66               	movwf	moveToPoint@x2^0,c
  3161  000A78  6A67               	clrf	(moveToPoint@x2+1)^0,c
  3162  000A7A  0E0C               	movlw	low (_feeder2Pos+1)
  3163  000A7C  6EF6               	movwf	tblptrl,c
  3164  000A7E  0E06               	movlw	high (_feeder2Pos+1)
  3165  000A80  6EF7               	movwf	tblptrh,c
  3166  000A82                     	if	0	;tblptru may be non-zero
  3167  000A82                     	endif
  3168  000A82                     	if	0	;tblptru may be non-zero
  3169  000A82                     	endif
  3170  000A82  0008               	tblrd		*
  3171  000A84  FFFF               	dw	65535	; errata NOP
  3172  000A86  50F5               	movf	tablat,w,c
  3173  000A88  6E68               	movwf	moveToPoint@y2^0,c
  3174  000A8A  6A69               	clrf	(moveToPoint@y2+1)^0,c
  3175  000A8C  EC09  F003         	call	_moveToPoint	;wreg free
  3176  000A90  0100               	movlb	0	; () banked
  3177  000A92  6FEF               	movwf	executeData@errCode& (0+255),b
  3178  000A94                     
  3179                           ; BSR set to: 0
  3180                           ;main.c: 122:             posVector[0] = feeder2Pos[0];
  3181  000A94  0E0B               	movlw	low _feeder2Pos
  3182  000A96  6EF6               	movwf	tblptrl,c
  3183  000A98                     	if	1	;There is more than 1 active tblptr byte
  3184  000A98  0E06               	movlw	high _feeder2Pos
  3185  000A9A  6EF7               	movwf	tblptrh,c
  3186  000A9C                     	endif
  3187  000A9C                     	if	0	;There are less than 3 active tblptr bytes
  3188  000A9C                     	endif
  3189  000A9C  0008               	tblrd		*
  3190  000A9E  FFFF               	dw	65535	; errata NOP
  3191  000AA0  CFF5 F00A          	movff	tablat,_posVector
  3192  000AA4                     
  3193                           ; BSR set to: 0
  3194                           ;main.c: 123:             posVector[1] = feeder2Pos[1];
  3195  000AA4  0E0C               	movlw	low (_feeder2Pos+1)
  3196  000AA6  6EF6               	movwf	tblptrl,c
  3197  000AA8  0E06               	movlw	high (_feeder2Pos+1)
  3198  000AAA  6EF7               	movwf	tblptrh,c
  3199  000AAC                     	if	0	;tblptru may be non-zero
  3200  000AAC                     	endif
  3201  000AAC                     	if	0	;tblptru may be non-zero
  3202  000AAC                     	endif
  3203  000AAC  0008               	tblrd		*
  3204  000AAE  FFFF               	dw	65535	; errata NOP
  3205  000AB0  CFF5 F00B          	movff	tablat,_posVector+1
  3206                           
  3207                           ;main.c: 124:             break;
  3208  000AB4  EFCB  F005         	goto	l3472
  3209  000AB8                     l3454:
  3210  000AB8  FFFF               	dw	65535	; assembler added errata NOP
  3211                           
  3212                           ;main.c: 126:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3213  000ABA  C00A  F062         	movff	_posVector,moveToPoint@x1
  3214  000ABE  6A63               	clrf	(moveToPoint@x1+1)^0,c
  3215  000AC0  C00B  F064         	movff	_posVector+1,moveToPoint@y1
  3216  000AC4  6A65               	clrf	(moveToPoint@y1+1)^0,c
  3217  000AC6  0E09               	movlw	low _feeder3Pos
  3218  000AC8  6EF6               	movwf	tblptrl,c
  3219  000ACA                     	if	1	;There is more than 1 active tblptr byte
  3220  000ACA  0E06               	movlw	high _feeder3Pos
  3221  000ACC  6EF7               	movwf	tblptrh,c
  3222  000ACE                     	endif
  3223  000ACE                     	if	0	;There are less than 3 active tblptr bytes
  3224  000ACE                     	endif
  3225  000ACE  0008               	tblrd		*
  3226  000AD0  FFFF               	dw	65535	; errata NOP
  3227  000AD2  50F5               	movf	tablat,w,c
  3228  000AD4  6E66               	movwf	moveToPoint@x2^0,c
  3229  000AD6  6A67               	clrf	(moveToPoint@x2+1)^0,c
  3230  000AD8  0E0A               	movlw	low (_feeder3Pos+1)
  3231  000ADA  6EF6               	movwf	tblptrl,c
  3232  000ADC  0E06               	movlw	high (_feeder3Pos+1)
  3233  000ADE  6EF7               	movwf	tblptrh,c
  3234  000AE0                     	if	0	;tblptru may be non-zero
  3235  000AE0                     	endif
  3236  000AE0                     	if	0	;tblptru may be non-zero
  3237  000AE0                     	endif
  3238  000AE0  0008               	tblrd		*
  3239  000AE2  FFFF               	dw	65535	; errata NOP
  3240  000AE4  50F5               	movf	tablat,w,c
  3241  000AE6  6E68               	movwf	moveToPoint@y2^0,c
  3242  000AE8  6A69               	clrf	(moveToPoint@y2+1)^0,c
  3243  000AEA  EC09  F003         	call	_moveToPoint	;wreg free
  3244  000AEE  0100               	movlb	0	; () banked
  3245  000AF0  6FEF               	movwf	executeData@errCode& (0+255),b
  3246  000AF2                     
  3247                           ; BSR set to: 0
  3248                           ;main.c: 127:             posVector[0] = feeder3Pos[0];
  3249  000AF2  0E09               	movlw	low _feeder3Pos
  3250  000AF4  6EF6               	movwf	tblptrl,c
  3251  000AF6                     	if	1	;There is more than 1 active tblptr byte
  3252  000AF6  0E06               	movlw	high _feeder3Pos
  3253  000AF8  6EF7               	movwf	tblptrh,c
  3254  000AFA                     	endif
  3255  000AFA                     	if	0	;There are less than 3 active tblptr bytes
  3256  000AFA                     	endif
  3257  000AFA  0008               	tblrd		*
  3258  000AFC  FFFF               	dw	65535	; errata NOP
  3259  000AFE  CFF5 F00A          	movff	tablat,_posVector
  3260  000B02                     
  3261                           ; BSR set to: 0
  3262                           ;main.c: 128:             posVector[1] = feeder3Pos[1];
  3263  000B02  0E0A               	movlw	low (_feeder3Pos+1)
  3264  000B04  6EF6               	movwf	tblptrl,c
  3265  000B06  0E06               	movlw	high (_feeder3Pos+1)
  3266  000B08  6EF7               	movwf	tblptrh,c
  3267  000B0A                     	if	0	;tblptru may be non-zero
  3268  000B0A                     	endif
  3269  000B0A                     	if	0	;tblptru may be non-zero
  3270  000B0A                     	endif
  3271  000B0A  0008               	tblrd		*
  3272  000B0C  FFFF               	dw	65535	; errata NOP
  3273  000B0E  CFF5 F00B          	movff	tablat,_posVector+1
  3274                           
  3275                           ;main.c: 129:             break;
  3276  000B12  EFCB  F005         	goto	l3472
  3277  000B16                     l3460:
  3278  000B16  FFFF               	dw	65535	; assembler added errata NOP
  3279                           
  3280                           ;main.c: 133:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3281  000B18  C00A  F062         	movff	_posVector,moveToPoint@x1
  3282  000B1C  6A63               	clrf	(moveToPoint@x1+1)^0,c
  3283  000B1E  C00B  F064         	movff	_posVector+1,moveToPoint@y1
  3284  000B22  6A65               	clrf	(moveToPoint@y1+1)^0,c
  3285  000B24  C013  F066         	movff	_newFeeder,moveToPoint@x2
  3286  000B28  6A67               	clrf	(moveToPoint@x2+1)^0,c
  3287  000B2A  C014  F068         	movff	_newFeeder+1,moveToPoint@y2
  3288  000B2E  6A69               	clrf	(moveToPoint@y2+1)^0,c
  3289  000B30  EC09  F003         	call	_moveToPoint	;wreg free
  3290  000B34  0100               	movlb	0	; () banked
  3291  000B36  6FEF               	movwf	executeData@errCode& (0+255),b
  3292  000B38                     
  3293                           ; BSR set to: 0
  3294                           ;main.c: 134:             posVector[0] = newFeeder[0];
  3295  000B38  C013  F00A         	movff	_newFeeder,_posVector
  3296  000B3C                     
  3297                           ; BSR set to: 0
  3298                           ;main.c: 135:             posVector[1] = newFeeder[1];
  3299  000B3C  C014  F00B         	movff	_newFeeder+1,_posVector+1
  3300                           
  3301                           ;main.c: 136:             break;
  3302  000B40  EFCB  F005         	goto	l3472
  3303  000B44                     l3466:
  3304  000B44  FFFF               	dw	65535	; assembler added errata NOP
  3305                           
  3306                           ;main.c: 140:             errCode = 1;
  3307  000B46  0E01               	movlw	1
  3308  000B48  0100               	movlb	0	; () banked
  3309  000B4A  6FEF               	movwf	executeData@errCode& (0+255),b
  3310                           
  3311                           ;main.c: 141:             break;
  3312  000B4C  EFCB  F005         	goto	l3472
  3313  000B50                     l3470:
  3314  000B50  FFFF               	dw	65535	; assembler added errata NOP
  3315  000B52  C0F0  FFD9         	movff	executeData@data,fsr2l
  3316  000B56  C0F1  FFDA         	movff	executeData@data+1,fsr2h
  3317  000B5A  50DF               	movf	indf2,w,c
  3318  000B5C  6E6C               	movwf	??_executeData^0,c
  3319  000B5E  6A6D               	clrf	(??_executeData+1)^0,c
  3320                           
  3321                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3322                           ; Switch size 1, requested type "simple"
  3323                           ; Number of cases is 1, Range of values is 0 to 0
  3324                           ; switch strategies available:
  3325                           ; Name         Instructions Cycles
  3326                           ; simple_byte            4     3 (average)
  3327                           ;	Chosen strategy is simple_byte
  3328  000B60  506D               	movf	(??_executeData+1)^0,w,c
  3329  000B62  0A00               	xorlw	0	; case 0
  3330  000B64  B4D8               	btfsc	status,2,c
  3331  000B66  EFB7  F005         	goto	l3744
  3332  000B6A  EFA2  F005         	goto	l3466
  3333  000B6E                     l3744:
  3334  000B6E  FFFF               	dw	65535	; assembler added errata NOP
  3335                           
  3336                           ; Switch size 1, requested type "simple"
  3337                           ; Number of cases is 4, Range of values is 0 to 255
  3338                           ; switch strategies available:
  3339                           ; Name         Instructions Cycles
  3340                           ; simple_byte           13     7 (average)
  3341                           ;	Chosen strategy is simple_byte
  3342  000B70  506C               	movf	??_executeData^0,w,c
  3343  000B72  0A00               	xorlw	0	; case 0
  3344  000B74  B4D8               	btfsc	status,2,c
  3345  000B76  EFFE  F004         	goto	l3442
  3346  000B7A  0A01               	xorlw	1	; case 1
  3347  000B7C  B4D8               	btfsc	status,2,c
  3348  000B7E  EF2D  F005         	goto	l3448
  3349  000B82  0A03               	xorlw	3	; case 2
  3350  000B84  B4D8               	btfsc	status,2,c
  3351  000B86  EF5C  F005         	goto	l3454
  3352  000B8A  0AFD               	xorlw	253	; case 255
  3353  000B8C  B4D8               	btfsc	status,2,c
  3354  000B8E  EF8B  F005         	goto	l3460
  3355  000B92  EFA2  F005         	goto	l3466
  3356  000B96                     l3472:
  3357  000B96  FFFF               	dw	65535	; assembler added errata NOP
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;main.c: 145:     if(!errCode){
  3361  000B98  51EF               	movf	executeData@errCode& (0+255),w,b
  3362  000B9A  A4D8               	btfss	status,2,c
  3363  000B9C  EFD2  F005         	goto	u2431
  3364  000BA0  EFD5  F005         	goto	u2430
  3365  000BA4                     u2431:
  3366  000BA4  FFFF               	dw	65535	; assembler added errata NOP
  3367  000BA6  EF32  F006         	goto	l3496
  3368  000BAA                     u2430:
  3369  000BAA  FFFF               	dw	65535	; assembler added errata NOP
  3370  000BAC                     
  3371                           ; BSR set to: 0
  3372  000BAC  EC86  F009         	call	_touchObject	;wreg free
  3373  000BB0                     
  3374                           ;main.c: 150:         pickObject();
  3375  000BB0  ECAC  F00D         	call	_pickObject	;wreg free
  3376  000BB4  EC2B  F00C         	call	_liftArm	;wreg free
  3377  000BB8  C00A  F062         	movff	_posVector,moveToPoint@x1
  3378  000BBC  6A63               	clrf	(moveToPoint@x1+1)^0,c
  3379  000BBE  C00B  F064         	movff	_posVector+1,moveToPoint@y1
  3380  000BC2  6A65               	clrf	(moveToPoint@y1+1)^0,c
  3381  000BC4  0100               	movlb	0	; () banked
  3382  000BC6  EE20 F001          	lfsr	2,1
  3383  000BCA  51F0               	movf	executeData@data& (0+255),w,b
  3384  000BCC  26D9               	addwf	fsr2l,f,c
  3385  000BCE  51F1               	movf	(executeData@data+1)& (0+255),w,b
  3386  000BD0  22DA               	addwfc	fsr2h,f,c
  3387  000BD2  50DF               	movf	indf2,w,c
  3388  000BD4  6E6C               	movwf	??_executeData^0,c
  3389  000BD6  506C               	movf	??_executeData^0,w,c
  3390  000BD8  6E66               	movwf	moveToPoint@x2^0,c
  3391  000BDA  6A67               	clrf	(moveToPoint@x2+1)^0,c
  3392  000BDC  EE20 F002          	lfsr	2,2
  3393  000BE0  51F0               	movf	executeData@data& (0+255),w,b
  3394  000BE2  26D9               	addwf	fsr2l,f,c
  3395  000BE4  51F1               	movf	(executeData@data+1)& (0+255),w,b
  3396  000BE6  22DA               	addwfc	fsr2h,f,c
  3397  000BE8  50DF               	movf	indf2,w,c
  3398  000BEA  6E6D               	movwf	(??_executeData+1)^0,c
  3399  000BEC  506D               	movf	(??_executeData+1)^0,w,c
  3400  000BEE  6E68               	movwf	moveToPoint@y2^0,c
  3401  000BF0  6A69               	clrf	(moveToPoint@y2+1)^0,c
  3402  000BF2  EC09  F003         	call	_moveToPoint	;wreg free
  3403  000BF6                     
  3404                           ;main.c: 157:         posVector[0] = data->posX;
  3405  000BF6  0100               	movlb	0	; () banked
  3406  000BF8  EE20 F001          	lfsr	2,1
  3407  000BFC  51F0               	movf	executeData@data& (0+255),w,b
  3408  000BFE  26D9               	addwf	fsr2l,f,c
  3409  000C00  51F1               	movf	(executeData@data+1)& (0+255),w,b
  3410  000C02  22DA               	addwfc	fsr2h,f,c
  3411  000C04  50DF               	movf	indf2,w,c
  3412  000C06  6E0A               	movwf	_posVector^0,c
  3413  000C08                     
  3414                           ; BSR set to: 0
  3415                           ;main.c: 158:         posVector[1] = data->posY;
  3416  000C08  EE20 F002          	lfsr	2,2
  3417  000C0C  51F0               	movf	executeData@data& (0+255),w,b
  3418  000C0E  26D9               	addwf	fsr2l,f,c
  3419  000C10  51F1               	movf	(executeData@data+1)& (0+255),w,b
  3420  000C12  22DA               	addwfc	fsr2h,f,c
  3421  000C14  50DF               	movf	indf2,w,c
  3422  000C16  6E0B               	movwf	(_posVector+1)^0,c
  3423  000C18                     
  3424                           ; BSR set to: 0
  3425                           ;main.c: 161:         rotAngle = data->rotation - rotAngle;
  3426  000C18  EE20 F003          	lfsr	2,3
  3427  000C1C  51F0               	movf	executeData@data& (0+255),w,b
  3428  000C1E  26D9               	addwf	fsr2l,f,c
  3429  000C20  51F1               	movf	(executeData@data+1)& (0+255),w,b
  3430  000C22  22DA               	addwfc	fsr2h,f,c
  3431  000C24  50DF               	movf	indf2,w,c
  3432  000C26  6E6C               	movwf	??_executeData^0,c
  3433  000C28  5015               	movf	_rotAngle^0,w,c
  3434  000C2A  5C6C               	subwf	??_executeData^0,w,c
  3435  000C2C  6E15               	movwf	_rotAngle^0,c
  3436  000C2E  5016               	movf	(_rotAngle+1)^0,w,c
  3437  000C30  A0D8               	btfss	status,0,c
  3438  000C32  2816               	incf	(_rotAngle+1)^0,w,c
  3439  000C34  6A16               	clrf	(_rotAngle+1)^0,c
  3440  000C36  5E16               	subwf	(_rotAngle+1)^0,f,c
  3441                           
  3442                           ;main.c: 163:         if(rotAngle < 0){
  3443  000C38  BE16               	btfsc	(_rotAngle+1)^0,7,c
  3444  000C3A  EF24  F006         	goto	u2440
  3445  000C3E  EF21  F006         	goto	u2441
  3446  000C42                     u2441:
  3447  000C42  FFFF               	dw	65535	; assembler added errata NOP
  3448  000C44  EF29  F006         	goto	l3490
  3449  000C48                     u2440:
  3450  000C48  FFFF               	dw	65535	; assembler added errata NOP
  3451  000C4A                     
  3452                           ; BSR set to: 0
  3453                           ;main.c: 164:             rotAngle += 360;
  3454  000C4A  0E68               	movlw	104
  3455  000C4C  2615               	addwf	_rotAngle^0,f,c
  3456  000C4E  0E01               	movlw	1
  3457  000C50  2216               	addwfc	(_rotAngle+1)^0,f,c
  3458  000C52                     l3490:
  3459  000C52  FFFF               	dw	65535	; assembler added errata NOP
  3460                           
  3461                           ; BSR set to: 0
  3462  000C54  ECA4  F00A         	call	_touchTherm	;wreg free
  3463  000C58                     
  3464                           ;main.c: 171:         releaseObj();
  3465  000C58  EC96  F00D         	call	_releaseObj	;wreg free
  3466  000C5C                     
  3467                           ;main.c: 174:         errCode = liftArm();
  3468  000C5C  EC2B  F00C         	call	_liftArm	;wreg free
  3469  000C60  0100               	movlb	0	; () banked
  3470  000C62  6FEF               	movwf	executeData@errCode& (0+255),b
  3471  000C64                     l3496:
  3472  000C64  FFFF               	dw	65535	; assembler added errata NOP
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;main.c: 177:     return(errCode);
  3476  000C66  51EF               	movf	executeData@errCode& (0+255),w,b
  3477  000C68                     
  3478                           ; BSR set to: 0
  3479  000C68  0012               	return		;funcret
  3480  000C6A  FFFF               	dw	65535	; errata NOP
  3481  000C6C                     __end_of_executeData:
  3482                           	callstack 0
  3483                           
  3484 ;; *************** function _touchTherm *****************
  3485 ;; Defined at:
  3486 ;;		line 590 in file "motors.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;		None
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;		None
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  1    wreg      unsigned char 
  3493 ;; Registers used:
  3494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3500 ;;      Params:         0       0       0       0       0       0       0
  3501 ;;      Locals:         0       0       0       0       0       0       0
  3502 ;;      Temps:          0       0       0       0       0       0       0
  3503 ;;      Totals:         0       0       0       0       0       0       0
  3504 ;;Total ram usage:        0 bytes
  3505 ;; Hardware stack levels used:    1
  3506 ;; Hardware stack levels required when called:    5
  3507 ;; This function calls:
  3508 ;;		_resetStep
  3509 ;;		_resetTherm
  3510 ;;		_returnTherm
  3511 ;;		_startADC
  3512 ;;		_stepMade
  3513 ;;		_stopADC
  3514 ;; This function is called by:
  3515 ;;		_executeData
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           	psect	text19
  3520  001548                     __ptext19:
  3521                           	callstack 0
  3522  001548                     _touchTherm:
  3523                           	callstack 0
  3524  001548  FFFF               	dw	65535	; assembler added errata NOP
  3525  00154A                     
  3526                           ;motors.c: 596:     motCounter[2][1] = 1;
  3527  00154A  0E00               	movlw	0
  3528  00154C  6E38               	movwf	(_motCounter+11)^0,c
  3529  00154E  0E01               	movlw	1
  3530  001550  6E37               	movwf	(_motCounter+10)^0,c
  3531  001552                     
  3532                           ;motors.c: 599:     T2CONbits.TMR2ON = 1;
  3533  001552  84CA               	bsf	202,2,c	;volatile
  3534                           
  3535                           ;motors.c: 601:     tm0Error = 0;
  3536  001554  0E00               	movlw	0
  3537  001556  6E18               	movwf	(_tm0Error+1)^0,c
  3538  001558  0E00               	movlw	0
  3539  00155A  6E17               	movwf	_tm0Error^0,c
  3540                           
  3541                           ;motors.c: 602:     tm0Limit = 250;
  3542  00155C  0EFA               	movlw	250
  3543  00155E  6E24               	movwf	_tm0Limit^0,c
  3544  001560                     
  3545                           ;motors.c: 603:     T0CONbits.TMR0ON = 1;
  3546  001560  8ED5               	bsf	213,7,c	;volatile
  3547  001562                     l3142:
  3548  001562  FFFF               	dw	65535	; assembler added errata NOP
  3549                           
  3550                           ;motors.c: 606:     startADC();
  3551  001564  EC6F  F00E         	call	_startADC	;wreg free
  3552                           
  3553                           ;motors.c: 609:     while(!returnTherm() || PORTDbits.RD7){
  3554  001568  EFFC  F00A         	goto	l3160
  3555  00156C                     l3144:
  3556  00156C  FFFF               	dw	65535	; assembler added errata NOP
  3557                           
  3558                           ;motors.c: 612:         if(tm0Error){
  3559  00156E  5017               	movf	_tm0Error^0,w,c
  3560  001570  1018               	iorwf	(_tm0Error+1)^0,w,c
  3561  001572  B4D8               	btfsc	status,2,c
  3562  001574  EFBE  F00A         	goto	u2141
  3563  001578  EFC1  F00A         	goto	u2140
  3564  00157C                     u2141:
  3565  00157C  FFFF               	dw	65535	; assembler added errata NOP
  3566  00157E  EFC8  F00A         	goto	l3148
  3567  001582                     u2140:
  3568  001582  FFFF               	dw	65535	; assembler added errata NOP
  3569  001584                     
  3570                           ;motors.c: 617:             tm0Error = 6;
  3571  001584  0E00               	movlw	0
  3572  001586  6E18               	movwf	(_tm0Error+1)^0,c
  3573  001588  0E06               	movlw	6
  3574  00158A  6E17               	movwf	_tm0Error^0,c
  3575                           
  3576                           ;motors.c: 618:             break;
  3577  00158C  EF12  F00B         	goto	l3164
  3578  001590                     l3148:
  3579  001590  FFFF               	dw	65535	; assembler added errata NOP
  3580                           
  3581                           ;motors.c: 626:             motCounter[2][0] += motCounter[2][1];
  3582  001592  EE20  F037         	lfsr	2,_motCounter+10
  3583  001596  50DE               	movf	postinc2,w,c
  3584  001598  2635               	addwf	(_motCounter+8)^0,f,c
  3585  00159A  50DD               	movf	postdec2,w,c
  3586  00159C  2236               	addwfc	(_motCounter+9)^0,f,c
  3587  00159E                     
  3588                           ;motors.c: 627:             if(motCounter[2][0] > 3){
  3589  00159E  BE36               	btfsc	(_motCounter+9)^0,7,c
  3590  0015A0  EFDB  F00A         	goto	u2151
  3591  0015A4  5036               	movf	(_motCounter+9)^0,w,c
  3592  0015A6  E10A               	bnz	u2150
  3593  0015A8  0E04               	movlw	4
  3594  0015AA  5C35               	subwf	(_motCounter+8)^0,w,c
  3595  0015AC  A0D8               	btfss	status,0,c
  3596  0015AE  EFDB  F00A         	goto	u2151
  3597  0015B2  EFDE  F00A         	goto	u2150
  3598  0015B6                     u2151:
  3599  0015B6  FFFF               	dw	65535	; assembler added errata NOP
  3600  0015B8  EFE3  F00A         	goto	l3154
  3601  0015BC                     u2150:
  3602  0015BC  FFFF               	dw	65535	; assembler added errata NOP
  3603  0015BE                     
  3604                           ;motors.c: 628:                 motCounter[2][0] = 0;
  3605  0015BE  0E00               	movlw	0
  3606  0015C0  6E36               	movwf	(_motCounter+9)^0,c
  3607  0015C2  0E00               	movlw	0
  3608  0015C4  6E35               	movwf	(_motCounter+8)^0,c
  3609  0015C6                     l3154:
  3610  0015C6  FFFF               	dw	65535	; assembler added errata NOP
  3611                           
  3612                           ;motors.c: 631:             LATC = stepMot3[motCounter[2][0]];
  3613  0015C8  0E3D               	movlw	low _stepMot3
  3614  0015CA  2435               	addwf	(_motCounter+8)^0,w,c
  3615  0015CC  6ED9               	movwf	fsr2l,c
  3616  0015CE  0E00               	movlw	high _stepMot3
  3617  0015D0  2036               	addwfc	(_motCounter+9)^0,w,c
  3618  0015D2  6EDA               	movwf	fsr2h,c
  3619  0015D4  50DF               	movf	indf2,w,c
  3620  0015D6  6E8B               	movwf	139,c	;volatile
  3621  0015D8                     l3156:
  3622  0015D8  FFFF               	dw	65535	; assembler added errata NOP
  3623  0015DA  EC12  F00E         	call	_stepMade	;wreg free
  3624  0015DE  505F               	movf	?_stepMade^0,w,c
  3625  0015E0  1060               	iorwf	(?_stepMade+1)^0,w,c
  3626  0015E2  B4D8               	btfsc	status,2,c
  3627  0015E4  EFF6  F00A         	goto	u2161
  3628  0015E8  EFF9  F00A         	goto	u2160
  3629  0015EC                     u2161:
  3630  0015EC  FFFF               	dw	65535	; assembler added errata NOP
  3631  0015EE  EFEC  F00A         	goto	l3156
  3632  0015F2                     u2160:
  3633  0015F2  FFFF               	dw	65535	; assembler added errata NOP
  3634  0015F4  EFB1  F00A         	goto	l3142
  3635  0015F8                     l3160:
  3636  0015F8  FFFF               	dw	65535	; assembler added errata NOP
  3637                           
  3638                           ;motors.c: 609:     while(!returnTherm() || PORTDbits.RD7){
  3639  0015FA  EC58  F00E         	call	_returnTherm	;wreg free
  3640  0015FE  505F               	movf	?_returnTherm^0,w,c
  3641  001600  1060               	iorwf	(?_returnTherm+1)^0,w,c
  3642  001602  B4D8               	btfsc	status,2,c
  3643  001604  EF06  F00B         	goto	u2171
  3644  001608  EF09  F00B         	goto	u2170
  3645  00160C                     u2171:
  3646  00160C  FFFF               	dw	65535	; assembler added errata NOP
  3647  00160E  EFB6  F00A         	goto	l3144
  3648  001612                     u2170:
  3649  001612  FFFF               	dw	65535	; assembler added errata NOP
  3650  001614  BE83               	btfsc	131,7,c	;volatile
  3651  001616  EF0F  F00B         	goto	u2181
  3652  00161A  EF12  F00B         	goto	u2180
  3653  00161E                     u2181:
  3654  00161E  FFFF               	dw	65535	; assembler added errata NOP
  3655  001620  EFB6  F00A         	goto	l3144
  3656  001624                     u2180:
  3657  001624                     l3164:
  3658  001624  FFFF               	dw	65535	; assembler added errata NOP
  3659                           
  3660                           ;motors.c: 652:     stopADC();
  3661  001626  EC9E  F00E         	call	_stopADC	;wreg free
  3662  00162A                     
  3663                           ;motors.c: 655:     resetTherm();
  3664  00162A  EC79  F00E         	call	_resetTherm	;wreg free
  3665  00162E                     
  3666                           ;motors.c: 658:     T0CONbits.TMR0ON = 0;
  3667  00162E  9ED5               	bcf	213,7,c	;volatile
  3668  001630                     
  3669                           ;motors.c: 659:     T2CONbits.TMR2ON = 0;
  3670  001630  94CA               	bcf	202,2,c	;volatile
  3671                           
  3672                           ;motors.c: 661:     TMR0 = 0;
  3673  001632  0E00               	movlw	0
  3674  001634  6ED7               	movwf	215,c	;volatile
  3675  001636  0E00               	movlw	0
  3676  001638  6ED6               	movwf	214,c	;volatile
  3677                           
  3678                           ;motors.c: 662:     TMR2 = 0;
  3679  00163A  0E00               	movlw	0
  3680  00163C  6ECC               	movwf	204,c	;volatile
  3681  00163E                     
  3682                           ;motors.c: 665:     resetStep();
  3683  00163E  EC7E  F00E         	call	_resetStep	;wreg free
  3684  001642                     
  3685                           ;motors.c: 668:     if(PORTDbits.RD7){
  3686  001642  AE83               	btfss	131,7,c	;volatile
  3687  001644  EF26  F00B         	goto	u2191
  3688  001648  EF29  F00B         	goto	u2190
  3689  00164C                     u2191:
  3690  00164C  FFFF               	dw	65535	; assembler added errata NOP
  3691  00164E  EF2E  F00B         	goto	l213
  3692  001652                     u2190:
  3693  001652  FFFF               	dw	65535	; assembler added errata NOP
  3694  001654                     
  3695                           ;motors.c: 669:         tm0Error = 2;
  3696  001654  0E00               	movlw	0
  3697  001656  6E18               	movwf	(_tm0Error+1)^0,c
  3698  001658  0E02               	movlw	2
  3699  00165A  6E17               	movwf	_tm0Error^0,c
  3700  00165C                     l213:
  3701  00165C  FFFF               	dw	65535	; assembler added errata NOP
  3702                           
  3703                           ;motors.c: 672:     return(tm0Error);
  3704  00165E  5017               	movf	_tm0Error^0,w,c
  3705  001660  0012               	return		;funcret
  3706  001662  FFFF               	dw	65535	; errata NOP
  3707  001664                     __end_of_touchTherm:
  3708                           	callstack 0
  3709                           
  3710 ;; *************** function _returnTherm *****************
  3711 ;; Defined at:
  3712 ;;		line 58 in file "adc.c"
  3713 ;; Parameters:    Size  Location     Type
  3714 ;;		None
  3715 ;; Auto vars:     Size  Location     Type
  3716 ;;		None
  3717 ;; Return value:  Size  Location     Type
  3718 ;;                  2   17[COMRAM] unsigned int 
  3719 ;; Registers used:
  3720 ;;		None
  3721 ;; Tracked objects:
  3722 ;;		On entry : 0/0
  3723 ;;		On exit  : 0/0
  3724 ;;		Unchanged: 0/0
  3725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3726 ;;      Params:         2       0       0       0       0       0       0
  3727 ;;      Locals:         0       0       0       0       0       0       0
  3728 ;;      Temps:          0       0       0       0       0       0       0
  3729 ;;      Totals:         2       0       0       0       0       0       0
  3730 ;;Total ram usage:        2 bytes
  3731 ;; Hardware stack levels used:    1
  3732 ;; Hardware stack levels required when called:    4
  3733 ;; This function calls:
  3734 ;;		Nothing
  3735 ;; This function is called by:
  3736 ;;		_touchTherm
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           	psect	text20
  3741  001CB0                     __ptext20:
  3742                           	callstack 0
  3743  001CB0                     _returnTherm:
  3744                           	callstack 0
  3745  001CB0  FFFF               	dw	65535	; assembler added errata NOP
  3746  001CB2                     
  3747                           ;adc.c: 59:     return therm_rel;
  3748  001CB2  C022  F05F         	movff	_therm_rel,?_returnTherm	;volatile
  3749  001CB6  6A60               	clrf	(?_returnTherm+1)^0,c
  3750  001CB8  0012               	return		;funcret
  3751  001CBA  FFFF               	dw	65535	; errata NOP
  3752  001CBC                     __end_of_returnTherm:
  3753                           	callstack 0
  3754                           
  3755 ;; *************** function _touchObject *****************
  3756 ;; Defined at:
  3757 ;;		line 497 in file "motors.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;		None
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;		None
  3762 ;; Return value:  Size  Location     Type
  3763 ;;                  1    wreg      unsigned char 
  3764 ;; Registers used:
  3765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3766 ;; Tracked objects:
  3767 ;;		On entry : 0/0
  3768 ;;		On exit  : 0/0
  3769 ;;		Unchanged: 0/0
  3770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3771 ;;      Params:         0       0       0       0       0       0       0
  3772 ;;      Locals:         0       0       0       0       0       0       0
  3773 ;;      Temps:          0       0       0       0       0       0       0
  3774 ;;      Totals:         0       0       0       0       0       0       0
  3775 ;;Total ram usage:        0 bytes
  3776 ;; Hardware stack levels used:    1
  3777 ;; Hardware stack levels required when called:    5
  3778 ;; This function calls:
  3779 ;;		_resetStep
  3780 ;;		_resetTherm
  3781 ;;		_resetTouch
  3782 ;;		_returnTouch
  3783 ;;		_startADC
  3784 ;;		_stepMade
  3785 ;;		_stopADC
  3786 ;; This function is called by:
  3787 ;;		_executeData
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           	psect	text21
  3792  00130C                     __ptext21:
  3793                           	callstack 0
  3794  00130C                     _touchObject:
  3795                           	callstack 0
  3796  00130C  FFFF               	dw	65535	; assembler added errata NOP
  3797  00130E                     
  3798                           ;motors.c: 503:     motCounter[2][1] = 1;
  3799  00130E  0E00               	movlw	0
  3800  001310  6E38               	movwf	(_motCounter+11)^0,c
  3801  001312  0E01               	movlw	1
  3802  001314  6E37               	movwf	(_motCounter+10)^0,c
  3803  001316                     
  3804                           ;motors.c: 506:     T2CONbits.TMR2ON = 1;
  3805  001316  84CA               	bsf	202,2,c	;volatile
  3806                           
  3807                           ;motors.c: 508:     tm0Error = 0;
  3808  001318  0E00               	movlw	0
  3809  00131A  6E18               	movwf	(_tm0Error+1)^0,c
  3810  00131C  0E00               	movlw	0
  3811  00131E  6E17               	movwf	_tm0Error^0,c
  3812                           
  3813                           ;motors.c: 509:     tm0Limit = 250;
  3814  001320  0EFA               	movlw	250
  3815  001322  6E24               	movwf	_tm0Limit^0,c
  3816  001324                     
  3817                           ;motors.c: 510:     T0CONbits.TMR0ON = 1;
  3818  001324  8ED5               	bsf	213,7,c	;volatile
  3819  001326                     l3096:
  3820  001326  FFFF               	dw	65535	; assembler added errata NOP
  3821                           
  3822                           ;motors.c: 513:     startADC();
  3823  001328  EC6F  F00E         	call	_startADC	;wreg free
  3824                           
  3825                           ;motors.c: 516:     while(!returnTouch() || PORTDbits.RD7){
  3826  00132C  EFDE  F009         	goto	l3114
  3827  001330                     l3098:
  3828  001330  FFFF               	dw	65535	; assembler added errata NOP
  3829                           
  3830                           ;motors.c: 519:         if(tm0Error){
  3831  001332  5017               	movf	_tm0Error^0,w,c
  3832  001334  1018               	iorwf	(_tm0Error+1)^0,w,c
  3833  001336  B4D8               	btfsc	status,2,c
  3834  001338  EFA0  F009         	goto	u2081
  3835  00133C  EFA3  F009         	goto	u2080
  3836  001340                     u2081:
  3837  001340  FFFF               	dw	65535	; assembler added errata NOP
  3838  001342  EFAA  F009         	goto	l3102
  3839  001346                     u2080:
  3840  001346  FFFF               	dw	65535	; assembler added errata NOP
  3841  001348                     
  3842                           ;motors.c: 524:             tm0Error = 6;
  3843  001348  0E00               	movlw	0
  3844  00134A  6E18               	movwf	(_tm0Error+1)^0,c
  3845  00134C  0E06               	movlw	6
  3846  00134E  6E17               	movwf	_tm0Error^0,c
  3847                           
  3848                           ;motors.c: 525:             break;
  3849  001350  EFF4  F009         	goto	l3118
  3850  001354                     l3102:
  3851  001354  FFFF               	dw	65535	; assembler added errata NOP
  3852                           
  3853                           ;motors.c: 533:             motCounter[2][0] += motCounter[2][1];
  3854  001356  EE20  F037         	lfsr	2,_motCounter+10
  3855  00135A  50DE               	movf	postinc2,w,c
  3856  00135C  2635               	addwf	(_motCounter+8)^0,f,c
  3857  00135E  50DD               	movf	postdec2,w,c
  3858  001360  2236               	addwfc	(_motCounter+9)^0,f,c
  3859  001362                     
  3860                           ;motors.c: 534:             if(motCounter[2][0] > 3){
  3861  001362  BE36               	btfsc	(_motCounter+9)^0,7,c
  3862  001364  EFBD  F009         	goto	u2091
  3863  001368  5036               	movf	(_motCounter+9)^0,w,c
  3864  00136A  E10A               	bnz	u2090
  3865  00136C  0E04               	movlw	4
  3866  00136E  5C35               	subwf	(_motCounter+8)^0,w,c
  3867  001370  A0D8               	btfss	status,0,c
  3868  001372  EFBD  F009         	goto	u2091
  3869  001376  EFC0  F009         	goto	u2090
  3870  00137A                     u2091:
  3871  00137A  FFFF               	dw	65535	; assembler added errata NOP
  3872  00137C  EFC5  F009         	goto	l3108
  3873  001380                     u2090:
  3874  001380  FFFF               	dw	65535	; assembler added errata NOP
  3875  001382                     
  3876                           ;motors.c: 535:                 motCounter[2][0] = 0;
  3877  001382  0E00               	movlw	0
  3878  001384  6E36               	movwf	(_motCounter+9)^0,c
  3879  001386  0E00               	movlw	0
  3880  001388  6E35               	movwf	(_motCounter+8)^0,c
  3881  00138A                     l3108:
  3882  00138A  FFFF               	dw	65535	; assembler added errata NOP
  3883                           
  3884                           ;motors.c: 538:             LATC = stepMot3[motCounter[2][0]];
  3885  00138C  0E3D               	movlw	low _stepMot3
  3886  00138E  2435               	addwf	(_motCounter+8)^0,w,c
  3887  001390  6ED9               	movwf	fsr2l,c
  3888  001392  0E00               	movlw	high _stepMot3
  3889  001394  2036               	addwfc	(_motCounter+9)^0,w,c
  3890  001396  6EDA               	movwf	fsr2h,c
  3891  001398  50DF               	movf	indf2,w,c
  3892  00139A  6E8B               	movwf	139,c	;volatile
  3893  00139C                     l3110:
  3894  00139C  FFFF               	dw	65535	; assembler added errata NOP
  3895  00139E  EC12  F00E         	call	_stepMade	;wreg free
  3896  0013A2  505F               	movf	?_stepMade^0,w,c
  3897  0013A4  1060               	iorwf	(?_stepMade+1)^0,w,c
  3898  0013A6  B4D8               	btfsc	status,2,c
  3899  0013A8  EFD8  F009         	goto	u2101
  3900  0013AC  EFDB  F009         	goto	u2100
  3901  0013B0                     u2101:
  3902  0013B0  FFFF               	dw	65535	; assembler added errata NOP
  3903  0013B2  EFCE  F009         	goto	l3110
  3904  0013B6                     u2100:
  3905  0013B6  FFFF               	dw	65535	; assembler added errata NOP
  3906  0013B8  EF93  F009         	goto	l3096
  3907  0013BC                     l3114:
  3908  0013BC  FFFF               	dw	65535	; assembler added errata NOP
  3909                           
  3910                           ;motors.c: 516:     while(!returnTouch() || PORTDbits.RD7){
  3911  0013BE  EC5E  F00E         	call	_returnTouch	;wreg free
  3912  0013C2  505F               	movf	?_returnTouch^0,w,c
  3913  0013C4  1060               	iorwf	(?_returnTouch+1)^0,w,c
  3914  0013C6  B4D8               	btfsc	status,2,c
  3915  0013C8  EFE8  F009         	goto	u2111
  3916  0013CC  EFEB  F009         	goto	u2110
  3917  0013D0                     u2111:
  3918  0013D0  FFFF               	dw	65535	; assembler added errata NOP
  3919  0013D2  EF98  F009         	goto	l3098
  3920  0013D6                     u2110:
  3921  0013D6  FFFF               	dw	65535	; assembler added errata NOP
  3922  0013D8  BE83               	btfsc	131,7,c	;volatile
  3923  0013DA  EFF1  F009         	goto	u2121
  3924  0013DE  EFF4  F009         	goto	u2120
  3925  0013E2                     u2121:
  3926  0013E2  FFFF               	dw	65535	; assembler added errata NOP
  3927  0013E4  EF98  F009         	goto	l3098
  3928  0013E8                     u2120:
  3929  0013E8                     l3118:
  3930  0013E8  FFFF               	dw	65535	; assembler added errata NOP
  3931                           
  3932                           ;motors.c: 557:     stopADC();
  3933  0013EA  EC9E  F00E         	call	_stopADC	;wreg free
  3934  0013EE                     
  3935                           ;motors.c: 560:     resetTouch();
  3936  0013EE  EC74  F00E         	call	_resetTouch	;wreg free
  3937  0013F2                     
  3938                           ;motors.c: 563:     T0CONbits.TMR0ON = 0;
  3939  0013F2  9ED5               	bcf	213,7,c	;volatile
  3940  0013F4                     
  3941                           ;motors.c: 564:     T2CONbits.TMR2ON = 0;
  3942  0013F4  94CA               	bcf	202,2,c	;volatile
  3943                           
  3944                           ;motors.c: 566:     TMR0 = 0;
  3945  0013F6  0E00               	movlw	0
  3946  0013F8  6ED7               	movwf	215,c	;volatile
  3947  0013FA  0E00               	movlw	0
  3948  0013FC  6ED6               	movwf	214,c	;volatile
  3949                           
  3950                           ;motors.c: 567:     TMR2 = 0;
  3951  0013FE  0E00               	movlw	0
  3952  001400  6ECC               	movwf	204,c	;volatile
  3953  001402                     
  3954                           ;motors.c: 570:     resetStep();
  3955  001402  EC7E  F00E         	call	_resetStep	;wreg free
  3956  001406                     
  3957                           ;motors.c: 571:     resetTherm();
  3958  001406  EC79  F00E         	call	_resetTherm	;wreg free
  3959  00140A                     
  3960                           ;motors.c: 574:     if(PORTDbits.RD7){
  3961  00140A  AE83               	btfss	131,7,c	;volatile
  3962  00140C  EF0A  F00A         	goto	u2131
  3963  001410  EF0D  F00A         	goto	u2130
  3964  001414                     u2131:
  3965  001414  FFFF               	dw	65535	; assembler added errata NOP
  3966  001416  EF12  F00A         	goto	l201
  3967  00141A                     u2130:
  3968  00141A  FFFF               	dw	65535	; assembler added errata NOP
  3969  00141C                     
  3970                           ;motors.c: 575:         tm0Error = 2;
  3971  00141C  0E00               	movlw	0
  3972  00141E  6E18               	movwf	(_tm0Error+1)^0,c
  3973  001420  0E02               	movlw	2
  3974  001422  6E17               	movwf	_tm0Error^0,c
  3975  001424                     l201:
  3976  001424  FFFF               	dw	65535	; assembler added errata NOP
  3977                           
  3978                           ;motors.c: 578:     return(tm0Error);
  3979  001426  5017               	movf	_tm0Error^0,w,c
  3980  001428  0012               	return		;funcret
  3981  00142A  FFFF               	dw	65535	; errata NOP
  3982  00142C                     __end_of_touchObject:
  3983                           	callstack 0
  3984                           
  3985 ;; *************** function _stopADC *****************
  3986 ;; Defined at:
  3987 ;;		line 44 in file "adc.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;		None
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;		None
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  1    wreg      void 
  3994 ;; Registers used:
  3995 ;;		None
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4001 ;;      Params:         0       0       0       0       0       0       0
  4002 ;;      Locals:         0       0       0       0       0       0       0
  4003 ;;      Temps:          0       0       0       0       0       0       0
  4004 ;;      Totals:         0       0       0       0       0       0       0
  4005 ;;Total ram usage:        0 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; Hardware stack levels required when called:    4
  4008 ;; This function calls:
  4009 ;;		Nothing
  4010 ;; This function is called by:
  4011 ;;		_touchObject
  4012 ;;		_touchTherm
  4013 ;; This function uses a non-reentrant model
  4014 ;;
  4015                           
  4016                           	psect	text22
  4017  001D3C                     __ptext22:
  4018                           	callstack 0
  4019  001D3C                     _stopADC:
  4020                           	callstack 0
  4021  001D3C  FFFF               	dw	65535	; assembler added errata NOP
  4022  001D3E                     
  4023                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4024  001D3E  90C2               	bcf	194,0,c	;volatile
  4025  001D40  0012               	return		;funcret
  4026  001D42  FFFF               	dw	65535	; errata NOP
  4027  001D44                     __end_of_stopADC:
  4028                           	callstack 0
  4029                           
  4030 ;; *************** function _startADC *****************
  4031 ;; Defined at:
  4032 ;;		line 36 in file "adc.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;		None
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;		None
  4037 ;; Return value:  Size  Location     Type
  4038 ;;                  1    wreg      void 
  4039 ;; Registers used:
  4040 ;;		None
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4046 ;;      Params:         0       0       0       0       0       0       0
  4047 ;;      Locals:         0       0       0       0       0       0       0
  4048 ;;      Temps:          0       0       0       0       0       0       0
  4049 ;;      Totals:         0       0       0       0       0       0       0
  4050 ;;Total ram usage:        0 bytes
  4051 ;; Hardware stack levels used:    1
  4052 ;; Hardware stack levels required when called:    4
  4053 ;; This function calls:
  4054 ;;		Nothing
  4055 ;; This function is called by:
  4056 ;;		_touchObject
  4057 ;;		_touchTherm
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	text23
  4062  001CDE                     __ptext23:
  4063                           	callstack 0
  4064  001CDE                     _startADC:
  4065                           	callstack 0
  4066  001CDE  FFFF               	dw	65535	; assembler added errata NOP
  4067  001CE0                     
  4068                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4069  001CE0  80C2               	bsf	194,0,c	;volatile
  4070                           
  4071                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4072  001CE2  84C2               	bsf	194,2,c	;volatile
  4073  001CE4  0012               	return		;funcret
  4074  001CE6  FFFF               	dw	65535	; errata NOP
  4075  001CE8                     __end_of_startADC:
  4076                           	callstack 0
  4077                           
  4078 ;; *************** function _returnTouch *****************
  4079 ;; Defined at:
  4080 ;;		line 51 in file "adc.c"
  4081 ;; Parameters:    Size  Location     Type
  4082 ;;		None
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;		None
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  2   17[COMRAM] unsigned int 
  4087 ;; Registers used:
  4088 ;;		None
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4094 ;;      Params:         2       0       0       0       0       0       0
  4095 ;;      Locals:         0       0       0       0       0       0       0
  4096 ;;      Temps:          0       0       0       0       0       0       0
  4097 ;;      Totals:         2       0       0       0       0       0       0
  4098 ;;Total ram usage:        2 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; Hardware stack levels required when called:    4
  4101 ;; This function calls:
  4102 ;;		Nothing
  4103 ;; This function is called by:
  4104 ;;		_touchObject
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           	psect	text24
  4109  001CBC                     __ptext24:
  4110                           	callstack 0
  4111  001CBC                     _returnTouch:
  4112                           	callstack 0
  4113  001CBC  FFFF               	dw	65535	; assembler added errata NOP
  4114  001CBE                     
  4115                           ;adc.c: 52:     return touch_rel;
  4116  001CBE  C023  F05F         	movff	_touch_rel,?_returnTouch	;volatile
  4117  001CC2  6A60               	clrf	(?_returnTouch+1)^0,c
  4118  001CC4  0012               	return		;funcret
  4119  001CC6  FFFF               	dw	65535	; errata NOP
  4120  001CC8                     __end_of_returnTouch:
  4121                           	callstack 0
  4122                           
  4123 ;; *************** function _resetTouch *****************
  4124 ;; Defined at:
  4125 ;;		line 65 in file "adc.c"
  4126 ;; Parameters:    Size  Location     Type
  4127 ;;		None
  4128 ;; Auto vars:     Size  Location     Type
  4129 ;;		None
  4130 ;; Return value:  Size  Location     Type
  4131 ;;                  1    wreg      void 
  4132 ;; Registers used:
  4133 ;;		wreg, status,2
  4134 ;; Tracked objects:
  4135 ;;		On entry : 0/0
  4136 ;;		On exit  : 0/0
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4139 ;;      Params:         0       0       0       0       0       0       0
  4140 ;;      Locals:         0       0       0       0       0       0       0
  4141 ;;      Temps:          0       0       0       0       0       0       0
  4142 ;;      Totals:         0       0       0       0       0       0       0
  4143 ;;Total ram usage:        0 bytes
  4144 ;; Hardware stack levels used:    1
  4145 ;; Hardware stack levels required when called:    4
  4146 ;; This function calls:
  4147 ;;		Nothing
  4148 ;; This function is called by:
  4149 ;;		_touchObject
  4150 ;; This function uses a non-reentrant model
  4151 ;;
  4152                           
  4153                           	psect	text25
  4154  001CE8                     __ptext25:
  4155                           	callstack 0
  4156  001CE8                     _resetTouch:
  4157                           	callstack 0
  4158  001CE8  FFFF               	dw	65535	; assembler added errata NOP
  4159  001CEA                     
  4160                           ;adc.c: 66:     touch_rel = 0;
  4161  001CEA  0E00               	movlw	0
  4162  001CEC  6E23               	movwf	_touch_rel^0,c	;volatile
  4163  001CEE  0012               	return		;funcret
  4164  001CF0  FFFF               	dw	65535	; errata NOP
  4165  001CF2                     __end_of_resetTouch:
  4166                           	callstack 0
  4167                           
  4168 ;; *************** function _resetTherm *****************
  4169 ;; Defined at:
  4170 ;;		line 72 in file "adc.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;		None
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  1    wreg      void 
  4177 ;; Registers used:
  4178 ;;		wreg, status,2
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4184 ;;      Params:         0       0       0       0       0       0       0
  4185 ;;      Locals:         0       0       0       0       0       0       0
  4186 ;;      Temps:          0       0       0       0       0       0       0
  4187 ;;      Totals:         0       0       0       0       0       0       0
  4188 ;;Total ram usage:        0 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    4
  4191 ;; This function calls:
  4192 ;;		Nothing
  4193 ;; This function is called by:
  4194 ;;		_touchObject
  4195 ;;		_touchTherm
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	text26
  4200  001CF2                     __ptext26:
  4201                           	callstack 0
  4202  001CF2                     _resetTherm:
  4203                           	callstack 0
  4204  001CF2  FFFF               	dw	65535	; assembler added errata NOP
  4205  001CF4                     
  4206                           ;adc.c: 73:     therm_rel = 0;
  4207  001CF4  0E00               	movlw	0
  4208  001CF6  6E22               	movwf	_therm_rel^0,c	;volatile
  4209  001CF8  0012               	return		;funcret
  4210  001CFA  FFFF               	dw	65535	; errata NOP
  4211  001CFC                     __end_of_resetTherm:
  4212                           	callstack 0
  4213                           
  4214 ;; *************** function _releaseObj *****************
  4215 ;; Defined at:
  4216 ;;		line 789 in file "motors.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;		None
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;		None
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  1    wreg      void 
  4223 ;; Registers used:
  4224 ;;		wreg, status,2, status,0, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4230 ;;      Params:         0       0       0       0       0       0       0
  4231 ;;      Locals:         0       0       0       0       0       0       0
  4232 ;;      Temps:          0       0       0       0       0       0       0
  4233 ;;      Totals:         0       0       0       0       0       0       0
  4234 ;;Total ram usage:        0 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    5
  4237 ;; This function calls:
  4238 ;;		_stepMade
  4239 ;; This function is called by:
  4240 ;;		_executeData
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           	psect	text27
  4245  001B2C                     __ptext27:
  4246                           	callstack 0
  4247  001B2C                     _releaseObj:
  4248                           	callstack 0
  4249  001B2C  FFFF               	dw	65535	; assembler added errata NOP
  4250  001B2E                     
  4251                           ;motors.c: 790:     LATDbits.LATD1 = 0;
  4252  001B2E  928C               	bcf	140,1,c	;volatile
  4253                           
  4254                           ;motors.c: 793:     T2CONbits.TMR2ON = 1;
  4255  001B30  84CA               	bsf	202,2,c	;volatile
  4256  001B32                     l3216:
  4257  001B32  FFFF               	dw	65535	; assembler added errata NOP
  4258  001B34  EC12  F00E         	call	_stepMade	;wreg free
  4259  001B38  505F               	movf	?_stepMade^0,w,c
  4260  001B3A  1060               	iorwf	(?_stepMade+1)^0,w,c
  4261  001B3C  B4D8               	btfsc	status,2,c
  4262  001B3E  EFA3  F00D         	goto	u2251
  4263  001B42  EFA6  F00D         	goto	u2250
  4264  001B46                     u2251:
  4265  001B46  FFFF               	dw	65535	; assembler added errata NOP
  4266  001B48  EF99  F00D         	goto	l3216
  4267  001B4C                     u2250:
  4268  001B4C  FFFF               	dw	65535	; assembler added errata NOP
  4269  001B4E                     
  4270                           ;motors.c: 795:     T2CONbits.TMR2ON = 1;
  4271  001B4E  84CA               	bsf	202,2,c	;volatile
  4272  001B50                     
  4273                           ;motors.c: 796:     TMR2 = 0;
  4274  001B50  0E00               	movlw	0
  4275  001B52  6ECC               	movwf	204,c	;volatile
  4276  001B54  0012               	return		;funcret
  4277  001B56  FFFF               	dw	65535	; errata NOP
  4278  001B58                     __end_of_releaseObj:
  4279                           	callstack 0
  4280                           
  4281 ;; *************** function _pickObject *****************
  4282 ;; Defined at:
  4283 ;;		line 776 in file "motors.c"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;		None
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;		None
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  1    wreg      void 
  4290 ;; Registers used:
  4291 ;;		wreg, status,2, status,0, cstack
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4297 ;;      Params:         0       0       0       0       0       0       0
  4298 ;;      Locals:         0       0       0       0       0       0       0
  4299 ;;      Temps:          0       0       0       0       0       0       0
  4300 ;;      Totals:         0       0       0       0       0       0       0
  4301 ;;Total ram usage:        0 bytes
  4302 ;; Hardware stack levels used:    1
  4303 ;; Hardware stack levels required when called:    5
  4304 ;; This function calls:
  4305 ;;		_stepMade
  4306 ;; This function is called by:
  4307 ;;		_executeData
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text28
  4312  001B58                     __ptext28:
  4313                           	callstack 0
  4314  001B58                     _pickObject:
  4315                           	callstack 0
  4316  001B58  FFFF               	dw	65535	; assembler added errata NOP
  4317  001B5A                     
  4318                           ;motors.c: 777:     LATDbits.LATD1 = 1;
  4319  001B5A  828C               	bsf	140,1,c	;volatile
  4320                           
  4321                           ;motors.c: 780:     T2CONbits.TMR2ON = 1;
  4322  001B5C  84CA               	bsf	202,2,c	;volatile
  4323  001B5E                     l3210:
  4324  001B5E  FFFF               	dw	65535	; assembler added errata NOP
  4325  001B60  EC12  F00E         	call	_stepMade	;wreg free
  4326  001B64  505F               	movf	?_stepMade^0,w,c
  4327  001B66  1060               	iorwf	(?_stepMade+1)^0,w,c
  4328  001B68  B4D8               	btfsc	status,2,c
  4329  001B6A  EFB9  F00D         	goto	u2241
  4330  001B6E  EFBC  F00D         	goto	u2240
  4331  001B72                     u2241:
  4332  001B72  FFFF               	dw	65535	; assembler added errata NOP
  4333  001B74  EFAF  F00D         	goto	l3210
  4334  001B78                     u2240:
  4335  001B78  FFFF               	dw	65535	; assembler added errata NOP
  4336  001B7A                     
  4337                           ;motors.c: 782:     T2CONbits.TMR2ON = 1;
  4338  001B7A  84CA               	bsf	202,2,c	;volatile
  4339  001B7C                     
  4340                           ;motors.c: 783:     TMR2 = 0;
  4341  001B7C  0E00               	movlw	0
  4342  001B7E  6ECC               	movwf	204,c	;volatile
  4343  001B80  0012               	return		;funcret
  4344  001B82  FFFF               	dw	65535	; errata NOP
  4345  001B84                     __end_of_pickObject:
  4346                           	callstack 0
  4347                           
  4348 ;; *************** function _moveToPoint *****************
  4349 ;; Defined at:
  4350 ;;		line 313 in file "motors.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;  x1              2   20[COMRAM] int 
  4353 ;;  y1              2   22[COMRAM] int 
  4354 ;;  x2              2   24[COMRAM] int 
  4355 ;;  y2              2   26[COMRAM] int 
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;  keepMovingY     1    3[BANK0 ] unsigned char 
  4358 ;;  keepMovingX     1    2[BANK0 ] unsigned char 
  4359 ;;  MOT2Directio    1    1[BANK0 ] unsigned char 
  4360 ;;  MOT1Directio    1    0[BANK0 ] unsigned char 
  4361 ;; Return value:  Size  Location     Type
  4362 ;;                  1    wreg      unsigned char 
  4363 ;; Registers used:
  4364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4370 ;;      Params:         8       0       0       0       0       0       0
  4371 ;;      Locals:         0       4       0       0       0       0       0
  4372 ;;      Temps:          2       0       0       0       0       0       0
  4373 ;;      Totals:        10       4       0       0       0       0       0
  4374 ;;Total ram usage:       14 bytes
  4375 ;; Hardware stack levels used:    1
  4376 ;; Hardware stack levels required when called:    5
  4377 ;; This function calls:
  4378 ;;		_resetStep
  4379 ;;		_stepCounter
  4380 ;;		_stepMade
  4381 ;; This function is called by:
  4382 ;;		_executeData
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           	psect	text29
  4387  000612                     __ptext29:
  4388                           	callstack 0
  4389  000612                     _moveToPoint:
  4390                           	callstack 0
  4391  000612  FFFF               	dw	65535	; assembler added errata NOP
  4392  000614                     
  4393                           ;motors.c: 315:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 318:     if(x2
      +                           > maxX || y2 > maxY){
  4394  000614  5067               	movf	(moveToPoint@x2+1)^0,w,c
  4395  000616  E107               	bnz	u1841
  4396  000618  0ECA               	movlw	202
  4397  00061A  5C66               	subwf	moveToPoint@x2^0,w,c
  4398  00061C  B0D8               	btfsc	status,0,c
  4399  00061E  EF13  F003         	goto	u1841
  4400  000622  EF16  F003         	goto	u1840
  4401  000626                     u1841:
  4402  000626  FFFF               	dw	65535	; assembler added errata NOP
  4403  000628  EF23  F003         	goto	l2988
  4404  00062C                     u1840:
  4405  00062C  FFFF               	dw	65535	; assembler added errata NOP
  4406  00062E  5069               	movf	(moveToPoint@y2+1)^0,w,c
  4407  000630  E10A               	bnz	u1850
  4408  000632  0ECA               	movlw	202
  4409  000634  5C68               	subwf	moveToPoint@y2^0,w,c
  4410  000636  A0D8               	btfss	status,0,c
  4411  000638  EF20  F003         	goto	u1851
  4412  00063C  EF23  F003         	goto	u1850
  4413  000640                     u1851:
  4414  000640  FFFF               	dw	65535	; assembler added errata NOP
  4415  000642  EF27  F003         	goto	l2992
  4416  000646                     u1850:
  4417  000646                     l2988:
  4418  000646  FFFF               	dw	65535	; assembler added errata NOP
  4419                           
  4420                           ;motors.c: 319:         return(5);
  4421  000648  0E05               	movlw	5
  4422  00064A  EFF2  F004         	goto	l157
  4423  00064E                     l2992:
  4424  00064E  FFFF               	dw	65535	; assembler added errata NOP
  4425                           
  4426                           ;motors.c: 340:     if((x2 - x1) > 0){
  4427  000650  5062               	movf	moveToPoint@x1^0,w,c
  4428  000652  5C66               	subwf	moveToPoint@x2^0,w,c
  4429  000654  6E6A               	movwf	??_moveToPoint^0,c
  4430  000656  5063               	movf	(moveToPoint@x1+1)^0,w,c
  4431  000658  5867               	subwfb	(moveToPoint@x2+1)^0,w,c
  4432  00065A  6E6B               	movwf	(??_moveToPoint+1)^0,c
  4433  00065C  BE6B               	btfsc	(??_moveToPoint+1)^0,7,c
  4434  00065E  EF39  F003         	goto	u1861
  4435  000662  506B               	movf	(??_moveToPoint+1)^0,w,c
  4436  000664  E109               	bnz	u1860
  4437  000666  046A               	decf	??_moveToPoint^0,w,c
  4438  000668  A0D8               	btfss	status,0,c
  4439  00066A  EF39  F003         	goto	u1861
  4440  00066E  EF3C  F003         	goto	u1860
  4441  000672                     u1861:
  4442  000672  FFFF               	dw	65535	; assembler added errata NOP
  4443  000674  EF46  F003         	goto	l158
  4444  000678                     u1860:
  4445  000678  FFFF               	dw	65535	; assembler added errata NOP
  4446  00067A                     
  4447                           ;motors.c: 341:         motCounter[0][1] = 1;
  4448  00067A  0E00               	movlw	0
  4449  00067C  6E30               	movwf	(_motCounter+3)^0,c
  4450  00067E  0E01               	movlw	1
  4451  000680  6E2F               	movwf	(_motCounter+2)^0,c
  4452                           
  4453                           ;motors.c: 342:         MOT1Direction = 1;
  4454  000682  0E01               	movlw	1
  4455  000684  0100               	movlb	0	; () banked
  4456  000686  6FEB               	movwf	moveToPoint@MOT1Direction& (0+255),b
  4457                           
  4458                           ;motors.c: 343:     }else{
  4459  000688  EF4C  F003         	goto	l2998
  4460  00068C                     l158:
  4461  00068C  FFFF               	dw	65535	; assembler added errata NOP
  4462                           
  4463                           ;motors.c: 344:         motCounter[0][1] = -1;
  4464  00068E  682F               	setf	(_motCounter+2)^0,c
  4465  000690  6830               	setf	(_motCounter+3)^0,c
  4466  000692                     
  4467                           ;motors.c: 345:         MOT1Direction = 0;
  4468  000692  0E00               	movlw	0
  4469  000694  0100               	movlb	0	; () banked
  4470  000696  6FEB               	movwf	moveToPoint@MOT1Direction& (0+255),b
  4471  000698                     l2998:
  4472  000698  FFFF               	dw	65535	; assembler added errata NOP
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;motors.c: 348:     if((y2 - y1) > 0){
  4476  00069A  5064               	movf	moveToPoint@y1^0,w,c
  4477  00069C  5C68               	subwf	moveToPoint@y2^0,w,c
  4478  00069E  6E6A               	movwf	??_moveToPoint^0,c
  4479  0006A0  5065               	movf	(moveToPoint@y1+1)^0,w,c
  4480  0006A2  5869               	subwfb	(moveToPoint@y2+1)^0,w,c
  4481  0006A4  6E6B               	movwf	(??_moveToPoint+1)^0,c
  4482  0006A6  BE6B               	btfsc	(??_moveToPoint+1)^0,7,c
  4483  0006A8  EF5E  F003         	goto	u1871
  4484  0006AC  506B               	movf	(??_moveToPoint+1)^0,w,c
  4485  0006AE  E109               	bnz	u1870
  4486  0006B0  046A               	decf	??_moveToPoint^0,w,c
  4487  0006B2  A0D8               	btfss	status,0,c
  4488  0006B4  EF5E  F003         	goto	u1871
  4489  0006B8  EF61  F003         	goto	u1870
  4490  0006BC                     u1871:
  4491  0006BC  FFFF               	dw	65535	; assembler added errata NOP
  4492  0006BE  EF6A  F003         	goto	l160
  4493  0006C2                     u1870:
  4494  0006C2  FFFF               	dw	65535	; assembler added errata NOP
  4495  0006C4                     
  4496                           ; BSR set to: 0
  4497                           ;motors.c: 349:         motCounter[1][1] = 1;
  4498  0006C4  0E00               	movlw	0
  4499  0006C6  6E34               	movwf	(_motCounter+7)^0,c
  4500  0006C8  0E01               	movlw	1
  4501  0006CA  6E33               	movwf	(_motCounter+6)^0,c
  4502                           
  4503                           ;motors.c: 350:         MOT2Direction = 1;
  4504  0006CC  0E01               	movlw	1
  4505  0006CE  6FEC               	movwf	moveToPoint@MOT2Direction& (0+255),b
  4506                           
  4507                           ;motors.c: 351:     }else{
  4508  0006D0  EF6F  F003         	goto	l161
  4509  0006D4                     l160:
  4510  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;motors.c: 352:         motCounter[2][1] = -1;
  4514  0006D6  6837               	setf	(_motCounter+10)^0,c
  4515  0006D8  6838               	setf	(_motCounter+11)^0,c
  4516  0006DA                     
  4517                           ; BSR set to: 0
  4518                           ;motors.c: 353:         MOT2Direction = 0;
  4519  0006DA  0E00               	movlw	0
  4520  0006DC  6FEC               	movwf	moveToPoint@MOT2Direction& (0+255),b
  4521  0006DE                     l161:
  4522  0006DE  FFFF               	dw	65535	; assembler added errata NOP
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;motors.c: 358:     unsigned char keepMovingX = 1;
  4526  0006E0  0E01               	movlw	1
  4527  0006E2  6FED               	movwf	moveToPoint@keepMovingX& (0+255),b
  4528                           
  4529                           ;motors.c: 359:     unsigned char keepMovingY = 1;
  4530  0006E4  0E01               	movlw	1
  4531  0006E6  6FEE               	movwf	moveToPoint@keepMovingY& (0+255),b
  4532  0006E8                     
  4533                           ; BSR set to: 0
  4534                           ;motors.c: 362:     T2CONbits.TMR2ON = 1;
  4535  0006E8  84CA               	bsf	202,2,c	;volatile
  4536                           
  4537                           ;motors.c: 364:     tm0Error = 0;
  4538  0006EA  0E00               	movlw	0
  4539  0006EC  6E18               	movwf	(_tm0Error+1)^0,c
  4540  0006EE  0E00               	movlw	0
  4541  0006F0  6E17               	movwf	_tm0Error^0,c
  4542                           
  4543                           ;motors.c: 365:     tm0Limit = 250;
  4544  0006F2  0EFA               	movlw	250
  4545  0006F4  6E24               	movwf	_tm0Limit^0,c
  4546  0006F6                     
  4547                           ; BSR set to: 0
  4548                           ;motors.c: 366:     T0CONbits.TMR0ON = 1;
  4549  0006F6  8ED5               	bsf	213,7,c	;volatile
  4550                           
  4551                           ;motors.c: 368:     while(keepMovingX || keepMovingY){
  4552  0006F8  EFD1  F004         	goto	l3078
  4553  0006FC                     l3008:
  4554  0006FC  FFFF               	dw	65535	; assembler added errata NOP
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;motors.c: 371:         if(tm0Error){
  4558  0006FE  5017               	movf	_tm0Error^0,w,c
  4559  000700  1018               	iorwf	(_tm0Error+1)^0,w,c
  4560  000702  B4D8               	btfsc	status,2,c
  4561  000704  EF86  F003         	goto	u1881
  4562  000708  EF89  F003         	goto	u1880
  4563  00070C                     u1881:
  4564  00070C  FFFF               	dw	65535	; assembler added errata NOP
  4565  00070E  EF90  F003         	goto	l3012
  4566  000712                     u1880:
  4567  000712  FFFF               	dw	65535	; assembler added errata NOP
  4568  000714                     
  4569                           ; BSR set to: 0
  4570                           ;motors.c: 377:             tm0Error = 4;
  4571  000714  0E00               	movlw	0
  4572  000716  6E18               	movwf	(_tm0Error+1)^0,c
  4573  000718  0E04               	movlw	4
  4574  00071A  6E17               	movwf	_tm0Error^0,c
  4575                           
  4576                           ;motors.c: 378:             break;
  4577  00071C  EFE6  F004         	goto	l165
  4578  000720                     l3012:
  4579  000720  FFFF               	dw	65535	; assembler added errata NOP
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;motors.c: 386:         if(MOT1Direction == 1){
  4583  000722  05EB               	decf	moveToPoint@MOT1Direction& (0+255),w,b
  4584  000724  A4D8               	btfss	status,2,c
  4585  000726  EF97  F003         	goto	u1891
  4586  00072A  EF9A  F003         	goto	u1890
  4587  00072E                     u1891:
  4588  00072E  FFFF               	dw	65535	; assembler added errata NOP
  4589  000730  EFE5  F003         	goto	l3028
  4590  000734                     u1890:
  4591  000734  FFFF               	dw	65535	; assembler added errata NOP
  4592  000736                     
  4593                           ; BSR set to: 0
  4594                           ;motors.c: 387:             if(x1 + stepCounter() >= x2){
  4595  000736  EC64  F00E         	call	_stepCounter	;wreg free
  4596  00073A  5062               	movf	moveToPoint@x1^0,w,c
  4597  00073C  265F               	addwf	?_stepCounter^0,f,c
  4598  00073E  5063               	movf	(moveToPoint@x1+1)^0,w,c
  4599  000740  2260               	addwfc	(?_stepCounter+1)^0,f,c
  4600  000742  5066               	movf	moveToPoint@x2^0,w,c
  4601  000744  5C5F               	subwf	?_stepCounter^0,w,c
  4602  000746  5067               	movf	(moveToPoint@x2+1)^0,w,c
  4603  000748  5860               	subwfb	(?_stepCounter+1)^0,w,c
  4604  00074A  A0D8               	btfss	status,0,c
  4605  00074C  EFAA  F003         	goto	u1901
  4606  000750  EFAD  F003         	goto	u1900
  4607  000754                     u1901:
  4608  000754  FFFF               	dw	65535	; assembler added errata NOP
  4609  000756  EFB4  F003         	goto	l3018
  4610  00075A                     u1900:
  4611  00075A  FFFF               	dw	65535	; assembler added errata NOP
  4612  00075C                     l3016:
  4613  00075C  FFFF               	dw	65535	; assembler added errata NOP
  4614                           
  4615                           ;motors.c: 389:                 keepMovingX = 0;
  4616  00075E  0E00               	movlw	0
  4617  000760  0100               	movlb	0	; () banked
  4618  000762  6FED               	movwf	moveToPoint@keepMovingX& (0+255),b
  4619                           
  4620                           ;motors.c: 390:             }else if(keepMovingX){
  4621  000764  EF2A  F004         	goto	l3044
  4622  000768                     l3018:
  4623  000768  FFFF               	dw	65535	; assembler added errata NOP
  4624  00076A  0100               	movlb	0	; () banked
  4625  00076C  51ED               	movf	moveToPoint@keepMovingX& (0+255),w,b
  4626  00076E  B4D8               	btfsc	status,2,c
  4627  000770  EFBC  F003         	goto	u1911
  4628  000774  EFBF  F003         	goto	u1910
  4629  000778                     u1911:
  4630  000778  FFFF               	dw	65535	; assembler added errata NOP
  4631  00077A  EF2A  F004         	goto	l3044
  4632  00077E                     u1910:
  4633  00077E  FFFF               	dw	65535	; assembler added errata NOP
  4634  000780                     
  4635                           ; BSR set to: 0
  4636                           ;motors.c: 396:             motCounter[0][0] += motCounter[0][1];
  4637  000780  EE20  F02F         	lfsr	2,_motCounter+2
  4638  000784  50DE               	movf	postinc2,w,c
  4639  000786  262D               	addwf	_motCounter^0,f,c
  4640  000788  50DD               	movf	postdec2,w,c
  4641  00078A  222E               	addwfc	(_motCounter+1)^0,f,c
  4642  00078C                     
  4643                           ; BSR set to: 0
  4644                           ;motors.c: 397:             if(motCounter[0][0] > 3){
  4645  00078C  BE2E               	btfsc	(_motCounter+1)^0,7,c
  4646  00078E  EFD2  F003         	goto	u1921
  4647  000792  502E               	movf	(_motCounter+1)^0,w,c
  4648  000794  E10A               	bnz	u1920
  4649  000796  0E04               	movlw	4
  4650  000798  5C2D               	subwf	_motCounter^0,w,c
  4651  00079A  A0D8               	btfss	status,0,c
  4652  00079C  EFD2  F003         	goto	u1921
  4653  0007A0  EFD5  F003         	goto	u1920
  4654  0007A4                     u1921:
  4655  0007A4  FFFF               	dw	65535	; assembler added errata NOP
  4656  0007A6  EFDA  F003         	goto	l3026
  4657  0007AA                     u1920:
  4658  0007AA  FFFF               	dw	65535	; assembler added errata NOP
  4659  0007AC                     
  4660                           ; BSR set to: 0
  4661                           ;motors.c: 398:                 motCounter[0][0] = 0;
  4662  0007AC  0E00               	movlw	0
  4663  0007AE  6E2E               	movwf	(_motCounter+1)^0,c
  4664  0007B0  0E00               	movlw	0
  4665  0007B2  6E2D               	movwf	_motCounter^0,c
  4666  0007B4                     l3026:
  4667  0007B4  FFFF               	dw	65535	; assembler added errata NOP
  4668                           
  4669                           ; BSR set to: 0
  4670                           ;motors.c: 401:             LATA = stepMot1[motCounter[0][0]];
  4671  0007B6  0E45               	movlw	low _stepMot1
  4672  0007B8  242D               	addwf	_motCounter^0,w,c
  4673  0007BA  6ED9               	movwf	fsr2l,c
  4674  0007BC  0E00               	movlw	high _stepMot1
  4675  0007BE  202E               	addwfc	(_motCounter+1)^0,w,c
  4676  0007C0  6EDA               	movwf	fsr2h,c
  4677  0007C2  50DF               	movf	indf2,w,c
  4678  0007C4  6E89               	movwf	137,c	;volatile
  4679  0007C6  EF2A  F004         	goto	l3044
  4680  0007CA                     l3028:
  4681  0007CA  FFFF               	dw	65535	; assembler added errata NOP
  4682                           
  4683                           ; BSR set to: 0
  4684  0007CC  51EB               	movf	moveToPoint@MOT1Direction& (0+255),w,b
  4685  0007CE  A4D8               	btfss	status,2,c
  4686  0007D0  EFEC  F003         	goto	u1931
  4687  0007D4  EFEF  F003         	goto	u1930
  4688  0007D8                     u1931:
  4689  0007D8  FFFF               	dw	65535	; assembler added errata NOP
  4690  0007DA  EF2A  F004         	goto	l3044
  4691  0007DE                     u1930:
  4692  0007DE  FFFF               	dw	65535	; assembler added errata NOP
  4693  0007E0                     
  4694                           ; BSR set to: 0
  4695                           ;motors.c: 405:             if(x1 - stepCounter() <= x2){
  4696  0007E0  EC64  F00E         	call	_stepCounter	;wreg free
  4697  0007E4  C062  F06A         	movff	moveToPoint@x1,??_moveToPoint
  4698  0007E8  C063  F06B         	movff	moveToPoint@x1+1,??_moveToPoint+1
  4699  0007EC  505F               	movf	?_stepCounter^0,w,c
  4700  0007EE  5E6A               	subwf	??_moveToPoint^0,f,c
  4701  0007F0  5060               	movf	(?_stepCounter+1)^0,w,c
  4702  0007F2  5A6B               	subwfb	(??_moveToPoint+1)^0,f,c
  4703  0007F4  506A               	movf	??_moveToPoint^0,w,c
  4704  0007F6  5C66               	subwf	moveToPoint@x2^0,w,c
  4705  0007F8  506B               	movf	(??_moveToPoint+1)^0,w,c
  4706  0007FA  5867               	subwfb	(moveToPoint@x2+1)^0,w,c
  4707  0007FC  A0D8               	btfss	status,0,c
  4708  0007FE  EF03  F004         	goto	u1941
  4709  000802  EF06  F004         	goto	u1940
  4710  000806                     u1941:
  4711  000806  FFFF               	dw	65535	; assembler added errata NOP
  4712  000808  EF09  F004         	goto	l3034
  4713  00080C                     u1940:
  4714  00080C  FFFF               	dw	65535	; assembler added errata NOP
  4715  00080E  EFAE  F003         	goto	l3016
  4716  000812                     l3034:
  4717  000812  FFFF               	dw	65535	; assembler added errata NOP
  4718  000814  0100               	movlb	0	; () banked
  4719  000816  51ED               	movf	moveToPoint@keepMovingX& (0+255),w,b
  4720  000818  B4D8               	btfsc	status,2,c
  4721  00081A  EF11  F004         	goto	u1951
  4722  00081E  EF14  F004         	goto	u1950
  4723  000822                     u1951:
  4724  000822  FFFF               	dw	65535	; assembler added errata NOP
  4725  000824  EF2A  F004         	goto	l3044
  4726  000828                     u1950:
  4727  000828  FFFF               	dw	65535	; assembler added errata NOP
  4728  00082A                     
  4729                           ; BSR set to: 0
  4730                           ;motors.c: 414:             motCounter[0][0] += motCounter[0][1];
  4731  00082A  EE20  F02F         	lfsr	2,_motCounter+2
  4732  00082E  50DE               	movf	postinc2,w,c
  4733  000830  262D               	addwf	_motCounter^0,f,c
  4734  000832  50DD               	movf	postdec2,w,c
  4735  000834  222E               	addwfc	(_motCounter+1)^0,f,c
  4736  000836                     
  4737                           ; BSR set to: 0
  4738                           ;motors.c: 415:             if(motCounter[0][0] < 0){
  4739  000836  BE2E               	btfsc	(_motCounter+1)^0,7,c
  4740  000838  EF23  F004         	goto	u1960
  4741  00083C  EF20  F004         	goto	u1961
  4742  000840                     u1961:
  4743  000840  FFFF               	dw	65535	; assembler added errata NOP
  4744  000842  EFDA  F003         	goto	l3026
  4745  000846                     u1960:
  4746  000846  FFFF               	dw	65535	; assembler added errata NOP
  4747  000848                     
  4748                           ; BSR set to: 0
  4749                           ;motors.c: 416:                 motCounter[0][0] = 3;
  4750  000848  0E00               	movlw	0
  4751  00084A  6E2E               	movwf	(_motCounter+1)^0,c
  4752  00084C  0E03               	movlw	3
  4753  00084E  6E2D               	movwf	_motCounter^0,c
  4754  000850  EFDA  F003         	goto	l3026
  4755  000854                     l3044:
  4756  000854  FFFF               	dw	65535	; assembler added errata NOP
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;motors.c: 424:         if(MOT2Direction == 1){
  4760  000856  05EC               	decf	moveToPoint@MOT2Direction& (0+255),w,b
  4761  000858  A4D8               	btfss	status,2,c
  4762  00085A  EF31  F004         	goto	u1971
  4763  00085E  EF34  F004         	goto	u1970
  4764  000862                     u1971:
  4765  000862  FFFF               	dw	65535	; assembler added errata NOP
  4766  000864  EF7F  F004         	goto	l3060
  4767  000868                     u1970:
  4768  000868  FFFF               	dw	65535	; assembler added errata NOP
  4769  00086A                     
  4770                           ; BSR set to: 0
  4771                           ;motors.c: 426:             if(y1 + stepCounter() >= y2){
  4772  00086A  EC64  F00E         	call	_stepCounter	;wreg free
  4773  00086E  5064               	movf	moveToPoint@y1^0,w,c
  4774  000870  265F               	addwf	?_stepCounter^0,f,c
  4775  000872  5065               	movf	(moveToPoint@y1+1)^0,w,c
  4776  000874  2260               	addwfc	(?_stepCounter+1)^0,f,c
  4777  000876  5068               	movf	moveToPoint@y2^0,w,c
  4778  000878  5C5F               	subwf	?_stepCounter^0,w,c
  4779  00087A  5069               	movf	(moveToPoint@y2+1)^0,w,c
  4780  00087C  5860               	subwfb	(?_stepCounter+1)^0,w,c
  4781  00087E  A0D8               	btfss	status,0,c
  4782  000880  EF44  F004         	goto	u1981
  4783  000884  EF47  F004         	goto	u1980
  4784  000888                     u1981:
  4785  000888  FFFF               	dw	65535	; assembler added errata NOP
  4786  00088A  EF4E  F004         	goto	l3050
  4787  00088E                     u1980:
  4788  00088E  FFFF               	dw	65535	; assembler added errata NOP
  4789  000890                     l3048:
  4790  000890  FFFF               	dw	65535	; assembler added errata NOP
  4791                           
  4792                           ;motors.c: 428:                 keepMovingY = 0;
  4793  000892  0E00               	movlw	0
  4794  000894  0100               	movlb	0	; () banked
  4795  000896  6FEE               	movwf	moveToPoint@keepMovingY& (0+255),b
  4796                           
  4797                           ;motors.c: 429:             }else if(keepMovingY){
  4798  000898  EFC4  F004         	goto	l3076
  4799  00089C                     l3050:
  4800  00089C  FFFF               	dw	65535	; assembler added errata NOP
  4801  00089E  0100               	movlb	0	; () banked
  4802  0008A0  51EE               	movf	moveToPoint@keepMovingY& (0+255),w,b
  4803  0008A2  B4D8               	btfsc	status,2,c
  4804  0008A4  EF56  F004         	goto	u1991
  4805  0008A8  EF59  F004         	goto	u1990
  4806  0008AC                     u1991:
  4807  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  4808  0008AE  EFC4  F004         	goto	l182
  4809  0008B2                     u1990:
  4810  0008B2  FFFF               	dw	65535	; assembler added errata NOP
  4811  0008B4                     
  4812                           ; BSR set to: 0
  4813                           ;motors.c: 435:             motCounter[1][0] += motCounter[1][1];
  4814  0008B4  EE20  F033         	lfsr	2,_motCounter+6
  4815  0008B8  50DE               	movf	postinc2,w,c
  4816  0008BA  2631               	addwf	(_motCounter+4)^0,f,c
  4817  0008BC  50DD               	movf	postdec2,w,c
  4818  0008BE  2232               	addwfc	(_motCounter+5)^0,f,c
  4819  0008C0                     
  4820                           ; BSR set to: 0
  4821                           ;motors.c: 436:             if(motCounter[1][0] > 3){
  4822  0008C0  BE32               	btfsc	(_motCounter+5)^0,7,c
  4823  0008C2  EF6C  F004         	goto	u2001
  4824  0008C6  5032               	movf	(_motCounter+5)^0,w,c
  4825  0008C8  E10A               	bnz	u2000
  4826  0008CA  0E04               	movlw	4
  4827  0008CC  5C31               	subwf	(_motCounter+4)^0,w,c
  4828  0008CE  A0D8               	btfss	status,0,c
  4829  0008D0  EF6C  F004         	goto	u2001
  4830  0008D4  EF6F  F004         	goto	u2000
  4831  0008D8                     u2001:
  4832  0008D8  FFFF               	dw	65535	; assembler added errata NOP
  4833  0008DA  EF74  F004         	goto	l3058
  4834  0008DE                     u2000:
  4835  0008DE  FFFF               	dw	65535	; assembler added errata NOP
  4836  0008E0                     
  4837                           ; BSR set to: 0
  4838                           ;motors.c: 437:                 motCounter[1][0] = 0;
  4839  0008E0  0E00               	movlw	0
  4840  0008E2  6E32               	movwf	(_motCounter+5)^0,c
  4841  0008E4  0E00               	movlw	0
  4842  0008E6  6E31               	movwf	(_motCounter+4)^0,c
  4843  0008E8                     l3058:
  4844  0008E8  FFFF               	dw	65535	; assembler added errata NOP
  4845                           
  4846                           ; BSR set to: 0
  4847                           ;motors.c: 440:             LATB = stepMot2[motCounter[1][0]];
  4848  0008EA  0E41               	movlw	low _stepMot2
  4849  0008EC  2431               	addwf	(_motCounter+4)^0,w,c
  4850  0008EE  6ED9               	movwf	fsr2l,c
  4851  0008F0  0E00               	movlw	high _stepMot2
  4852  0008F2  2032               	addwfc	(_motCounter+5)^0,w,c
  4853  0008F4  6EDA               	movwf	fsr2h,c
  4854  0008F6  50DF               	movf	indf2,w,c
  4855  0008F8  6E8A               	movwf	138,c	;volatile
  4856  0008FA  EFC4  F004         	goto	l3076
  4857  0008FE                     l3060:
  4858  0008FE  FFFF               	dw	65535	; assembler added errata NOP
  4859                           
  4860                           ; BSR set to: 0
  4861  000900  51EC               	movf	moveToPoint@MOT2Direction& (0+255),w,b
  4862  000902  A4D8               	btfss	status,2,c
  4863  000904  EF86  F004         	goto	u2011
  4864  000908  EF89  F004         	goto	u2010
  4865  00090C                     u2011:
  4866  00090C  FFFF               	dw	65535	; assembler added errata NOP
  4867  00090E  EFC4  F004         	goto	l3076
  4868  000912                     u2010:
  4869  000912  FFFF               	dw	65535	; assembler added errata NOP
  4870  000914                     
  4871                           ; BSR set to: 0
  4872                           ;motors.c: 445:             if(y1 - stepCounter() <= y2){
  4873  000914  EC64  F00E         	call	_stepCounter	;wreg free
  4874  000918  C064  F06A         	movff	moveToPoint@y1,??_moveToPoint
  4875  00091C  C065  F06B         	movff	moveToPoint@y1+1,??_moveToPoint+1
  4876  000920  505F               	movf	?_stepCounter^0,w,c
  4877  000922  5E6A               	subwf	??_moveToPoint^0,f,c
  4878  000924  5060               	movf	(?_stepCounter+1)^0,w,c
  4879  000926  5A6B               	subwfb	(??_moveToPoint+1)^0,f,c
  4880  000928  506A               	movf	??_moveToPoint^0,w,c
  4881  00092A  5C68               	subwf	moveToPoint@y2^0,w,c
  4882  00092C  506B               	movf	(??_moveToPoint+1)^0,w,c
  4883  00092E  5869               	subwfb	(moveToPoint@y2+1)^0,w,c
  4884  000930  A0D8               	btfss	status,0,c
  4885  000932  EF9D  F004         	goto	u2021
  4886  000936  EFA0  F004         	goto	u2020
  4887  00093A                     u2021:
  4888  00093A  FFFF               	dw	65535	; assembler added errata NOP
  4889  00093C  EFA3  F004         	goto	l3066
  4890  000940                     u2020:
  4891  000940  FFFF               	dw	65535	; assembler added errata NOP
  4892  000942  EF48  F004         	goto	l3048
  4893  000946                     l3066:
  4894  000946  FFFF               	dw	65535	; assembler added errata NOP
  4895  000948  0100               	movlb	0	; () banked
  4896  00094A  51EE               	movf	moveToPoint@keepMovingY& (0+255),w,b
  4897  00094C  B4D8               	btfsc	status,2,c
  4898  00094E  EFAB  F004         	goto	u2031
  4899  000952  EFAE  F004         	goto	u2030
  4900  000956                     u2031:
  4901  000956  FFFF               	dw	65535	; assembler added errata NOP
  4902  000958  EFC4  F004         	goto	l3076
  4903  00095C                     u2030:
  4904  00095C  FFFF               	dw	65535	; assembler added errata NOP
  4905  00095E                     
  4906                           ; BSR set to: 0
  4907                           ;motors.c: 454:             motCounter[1][0] += motCounter[1][1];
  4908  00095E  EE20  F033         	lfsr	2,_motCounter+6
  4909  000962  50DE               	movf	postinc2,w,c
  4910  000964  2631               	addwf	(_motCounter+4)^0,f,c
  4911  000966  50DD               	movf	postdec2,w,c
  4912  000968  2232               	addwfc	(_motCounter+5)^0,f,c
  4913  00096A                     
  4914                           ; BSR set to: 0
  4915                           ;motors.c: 455:             if(motCounter[1][0] < 0){
  4916  00096A  BE32               	btfsc	(_motCounter+5)^0,7,c
  4917  00096C  EFBD  F004         	goto	u2040
  4918  000970  EFBA  F004         	goto	u2041
  4919  000974                     u2041:
  4920  000974  FFFF               	dw	65535	; assembler added errata NOP
  4921  000976  EF74  F004         	goto	l3058
  4922  00097A                     u2040:
  4923  00097A  FFFF               	dw	65535	; assembler added errata NOP
  4924  00097C                     
  4925                           ; BSR set to: 0
  4926                           ;motors.c: 456:                 motCounter[1][0] = 3;
  4927  00097C  0E00               	movlw	0
  4928  00097E  6E32               	movwf	(_motCounter+5)^0,c
  4929  000980  0E03               	movlw	3
  4930  000982  6E31               	movwf	(_motCounter+4)^0,c
  4931  000984  EF74  F004         	goto	l3058
  4932  000988                     l182:
  4933  000988                     l3076:
  4934  000988  FFFF               	dw	65535	; assembler added errata NOP
  4935  00098A  EC12  F00E         	call	_stepMade	;wreg free
  4936  00098E  505F               	movf	?_stepMade^0,w,c
  4937  000990  1060               	iorwf	(?_stepMade+1)^0,w,c
  4938  000992  B4D8               	btfsc	status,2,c
  4939  000994  EFCE  F004         	goto	u2051
  4940  000998  EFD1  F004         	goto	u2050
  4941  00099C                     u2051:
  4942  00099C  FFFF               	dw	65535	; assembler added errata NOP
  4943  00099E  EFC4  F004         	goto	l3076
  4944  0009A2                     u2050:
  4945  0009A2                     l3078:
  4946  0009A2  FFFF               	dw	65535	; assembler added errata NOP
  4947                           
  4948                           ;motors.c: 368:     while(keepMovingX || keepMovingY){
  4949  0009A4  0100               	movlb	0	; () banked
  4950  0009A6  51ED               	movf	moveToPoint@keepMovingX& (0+255),w,b
  4951  0009A8  A4D8               	btfss	status,2,c
  4952  0009AA  EFD9  F004         	goto	u2061
  4953  0009AE  EFDC  F004         	goto	u2060
  4954  0009B2                     u2061:
  4955  0009B2  FFFF               	dw	65535	; assembler added errata NOP
  4956  0009B4  EF7E  F003         	goto	l3008
  4957  0009B8                     u2060:
  4958  0009B8  FFFF               	dw	65535	; assembler added errata NOP
  4959  0009BA                     
  4960                           ; BSR set to: 0
  4961  0009BA  51EE               	movf	moveToPoint@keepMovingY& (0+255),w,b
  4962  0009BC  A4D8               	btfss	status,2,c
  4963  0009BE  EFE3  F004         	goto	u2071
  4964  0009C2  EFE6  F004         	goto	u2070
  4965  0009C6                     u2071:
  4966  0009C6  FFFF               	dw	65535	; assembler added errata NOP
  4967  0009C8  EF7E  F003         	goto	l3008
  4968  0009CC                     u2070:
  4969  0009CC                     l165:
  4970  0009CC  FFFF               	dw	65535	; assembler added errata NOP
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;motors.c: 479:     T0CONbits.TMR0ON = 0;
  4974  0009CE  9ED5               	bcf	213,7,c	;volatile
  4975                           
  4976                           ;motors.c: 480:     T2CONbits.TMR2ON = 0;
  4977  0009D0  94CA               	bcf	202,2,c	;volatile
  4978  0009D2                     
  4979                           ; BSR set to: 0
  4980                           ;motors.c: 482:     TMR0 = 0;
  4981  0009D2  0E00               	movlw	0
  4982  0009D4  6ED7               	movwf	215,c	;volatile
  4983  0009D6  0E00               	movlw	0
  4984  0009D8  6ED6               	movwf	214,c	;volatile
  4985                           
  4986                           ;motors.c: 483:     TMR2 = 0;
  4987  0009DA  0E00               	movlw	0
  4988  0009DC  6ECC               	movwf	204,c	;volatile
  4989  0009DE                     
  4990                           ; BSR set to: 0
  4991                           ;motors.c: 486:     resetStep();
  4992  0009DE  EC7E  F00E         	call	_resetStep	;wreg free
  4993  0009E2                     
  4994                           ;motors.c: 488:     return(tm0Error);
  4995  0009E2  5017               	movf	_tm0Error^0,w,c
  4996  0009E4                     l157:
  4997  0009E4  FFFF               	dw	65535	; assembler added errata NOP
  4998  0009E6  0012               	return		;funcret
  4999  0009E8  FFFF               	dw	65535	; errata NOP
  5000  0009EA                     __end_of_moveToPoint:
  5001                           	callstack 0
  5002                           
  5003 ;; *************** function _stepCounter *****************
  5004 ;; Defined at:
  5005 ;;		line 70 in file "timer.c"
  5006 ;; Parameters:    Size  Location     Type
  5007 ;;		None
  5008 ;; Auto vars:     Size  Location     Type
  5009 ;;		None
  5010 ;; Return value:  Size  Location     Type
  5011 ;;                  2   17[COMRAM] unsigned int 
  5012 ;; Registers used:
  5013 ;;		None
  5014 ;; Tracked objects:
  5015 ;;		On entry : 0/0
  5016 ;;		On exit  : 0/0
  5017 ;;		Unchanged: 0/0
  5018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5019 ;;      Params:         2       0       0       0       0       0       0
  5020 ;;      Locals:         0       0       0       0       0       0       0
  5021 ;;      Temps:          0       0       0       0       0       0       0
  5022 ;;      Totals:         2       0       0       0       0       0       0
  5023 ;;Total ram usage:        2 bytes
  5024 ;; Hardware stack levels used:    1
  5025 ;; Hardware stack levels required when called:    4
  5026 ;; This function calls:
  5027 ;;		Nothing
  5028 ;; This function is called by:
  5029 ;;		_moveToPoint
  5030 ;; This function uses a non-reentrant model
  5031 ;;
  5032                           
  5033                           	psect	text30
  5034  001CC8                     __ptext30:
  5035                           	callstack 0
  5036  001CC8                     _stepCounter:
  5037                           	callstack 0
  5038  001CC8  FFFF               	dw	65535	; assembler added errata NOP
  5039  001CCA                     
  5040                           ;timer.c: 71:     return pwmStep;
  5041  001CCA  C01A  F05F         	movff	_pwmStep,?_stepCounter	;volatile
  5042  001CCE  6A60               	clrf	(?_stepCounter+1)^0,c
  5043  001CD0  0012               	return		;funcret
  5044  001CD2  FFFF               	dw	65535	; errata NOP
  5045  001CD4                     __end_of_stepCounter:
  5046                           	callstack 0
  5047                           
  5048 ;; *************** function _liftArm *****************
  5049 ;; Defined at:
  5050 ;;		line 679 in file "motors.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;		None
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;		None
  5055 ;; Return value:  Size  Location     Type
  5056 ;;                  1    wreg      unsigned char 
  5057 ;; Registers used:
  5058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5059 ;; Tracked objects:
  5060 ;;		On entry : 0/0
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5064 ;;      Params:         0       0       0       0       0       0       0
  5065 ;;      Locals:         0       0       0       0       0       0       0
  5066 ;;      Temps:          0       0       0       0       0       0       0
  5067 ;;      Totals:         0       0       0       0       0       0       0
  5068 ;;Total ram usage:        0 bytes
  5069 ;; Hardware stack levels used:    1
  5070 ;; Hardware stack levels required when called:    5
  5071 ;; This function calls:
  5072 ;;		_resetStep
  5073 ;;		_stepMade
  5074 ;; This function is called by:
  5075 ;;		_executeData
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           	psect	text31
  5080  001856                     __ptext31:
  5081                           	callstack 0
  5082  001856                     _liftArm:
  5083                           	callstack 0
  5084  001856  FFFF               	dw	65535	; assembler added errata NOP
  5085  001858                     
  5086                           ;motors.c: 685:     motCounter[2][1] = -1;
  5087  001858  6837               	setf	(_motCounter+10)^0,c
  5088  00185A  6838               	setf	(_motCounter+11)^0,c
  5089                           
  5090                           ;motors.c: 688:     T2CONbits.TMR2ON = 1;
  5091  00185C  84CA               	bsf	202,2,c	;volatile
  5092  00185E                     
  5093                           ;motors.c: 690:     tm0Error = 0;
  5094  00185E  0E00               	movlw	0
  5095  001860  6E18               	movwf	(_tm0Error+1)^0,c
  5096  001862  0E00               	movlw	0
  5097  001864  6E17               	movwf	_tm0Error^0,c
  5098                           
  5099                           ;motors.c: 691:     tm0Limit = 250;
  5100  001866  0EFA               	movlw	250
  5101  001868  6E24               	movwf	_tm0Limit^0,c
  5102  00186A                     
  5103                           ;motors.c: 692:     T0CONbits.TMR0ON = 1;
  5104  00186A  8ED5               	bsf	213,7,c	;volatile
  5105                           
  5106                           ;motors.c: 696:     while(!PORTEbits.RE2){
  5107  00186C  EF74  F00C         	goto	l217
  5108  001870                     l3186:
  5109  001870  FFFF               	dw	65535	; assembler added errata NOP
  5110                           
  5111                           ;motors.c: 699:         if(tm0Error){
  5112  001872  5017               	movf	_tm0Error^0,w,c
  5113  001874  1018               	iorwf	(_tm0Error+1)^0,w,c
  5114  001876  B4D8               	btfsc	status,2,c
  5115  001878  EF40  F00C         	goto	u2201
  5116  00187C  EF43  F00C         	goto	u2200
  5117  001880                     u2201:
  5118  001880  FFFF               	dw	65535	; assembler added errata NOP
  5119  001882  EF4A  F00C         	goto	l3190
  5120  001886                     u2200:
  5121  001886  FFFF               	dw	65535	; assembler added errata NOP
  5122  001888                     
  5123                           ;motors.c: 704:             tm0Error = 6;
  5124  001888  0E00               	movlw	0
  5125  00188A  6E18               	movwf	(_tm0Error+1)^0,c
  5126  00188C  0E06               	movlw	6
  5127  00188E  6E17               	movwf	_tm0Error^0,c
  5128                           
  5129                           ;motors.c: 705:             break;
  5130  001890  EF7D  F00C         	goto	l220
  5131  001894                     l3190:
  5132  001894  FFFF               	dw	65535	; assembler added errata NOP
  5133                           
  5134                           ;motors.c: 714:             motCounter[2][0] += motCounter[2][1];
  5135  001896  EE20  F037         	lfsr	2,_motCounter+10
  5136  00189A  50DE               	movf	postinc2,w,c
  5137  00189C  2635               	addwf	(_motCounter+8)^0,f,c
  5138  00189E  50DD               	movf	postdec2,w,c
  5139  0018A0  2236               	addwfc	(_motCounter+9)^0,f,c
  5140  0018A2                     
  5141                           ;motors.c: 715:             if(motCounter[2][0] < 0){
  5142  0018A2  BE36               	btfsc	(_motCounter+9)^0,7,c
  5143  0018A4  EF59  F00C         	goto	u2210
  5144  0018A8  EF56  F00C         	goto	u2211
  5145  0018AC                     u2211:
  5146  0018AC  FFFF               	dw	65535	; assembler added errata NOP
  5147  0018AE  EF5E  F00C         	goto	l3196
  5148  0018B2                     u2210:
  5149  0018B2  FFFF               	dw	65535	; assembler added errata NOP
  5150  0018B4                     
  5151                           ;motors.c: 716:                 motCounter[2][0] = 3;
  5152  0018B4  0E00               	movlw	0
  5153  0018B6  6E36               	movwf	(_motCounter+9)^0,c
  5154  0018B8  0E03               	movlw	3
  5155  0018BA  6E35               	movwf	(_motCounter+8)^0,c
  5156  0018BC                     l3196:
  5157  0018BC  FFFF               	dw	65535	; assembler added errata NOP
  5158                           
  5159                           ;motors.c: 719:             LATC = stepMot3[motCounter[2][0]];
  5160  0018BE  0E3D               	movlw	low _stepMot3
  5161  0018C0  2435               	addwf	(_motCounter+8)^0,w,c
  5162  0018C2  6ED9               	movwf	fsr2l,c
  5163  0018C4  0E00               	movlw	high _stepMot3
  5164  0018C6  2036               	addwfc	(_motCounter+9)^0,w,c
  5165  0018C8  6EDA               	movwf	fsr2h,c
  5166  0018CA  50DF               	movf	indf2,w,c
  5167  0018CC  6E8B               	movwf	139,c	;volatile
  5168  0018CE                     l3198:
  5169  0018CE  FFFF               	dw	65535	; assembler added errata NOP
  5170  0018D0  EC12  F00E         	call	_stepMade	;wreg free
  5171  0018D4  505F               	movf	?_stepMade^0,w,c
  5172  0018D6  1060               	iorwf	(?_stepMade+1)^0,w,c
  5173  0018D8  B4D8               	btfsc	status,2,c
  5174  0018DA  EF71  F00C         	goto	u2221
  5175  0018DE  EF74  F00C         	goto	u2220
  5176  0018E2                     u2221:
  5177  0018E2  FFFF               	dw	65535	; assembler added errata NOP
  5178  0018E4  EF67  F00C         	goto	l3198
  5179  0018E8                     u2220:
  5180  0018E8                     l217:
  5181  0018E8  FFFF               	dw	65535	; assembler added errata NOP
  5182                           
  5183                           ;motors.c: 696:     while(!PORTEbits.RE2){
  5184  0018EA  A484               	btfss	132,2,c	;volatile
  5185  0018EC  EF7A  F00C         	goto	u2231
  5186  0018F0  EF7D  F00C         	goto	u2230
  5187  0018F4                     u2231:
  5188  0018F4  FFFF               	dw	65535	; assembler added errata NOP
  5189  0018F6  EF38  F00C         	goto	l3186
  5190  0018FA                     u2230:
  5191  0018FA                     l220:
  5192  0018FA  FFFF               	dw	65535	; assembler added errata NOP
  5193                           
  5194                           ;motors.c: 736:     T0CONbits.TMR0ON = 0;
  5195  0018FC  9ED5               	bcf	213,7,c	;volatile
  5196                           
  5197                           ;motors.c: 737:     T2CONbits.TMR2ON = 0;
  5198  0018FE  94CA               	bcf	202,2,c	;volatile
  5199  001900                     
  5200                           ;motors.c: 739:     TMR0 = 0;
  5201  001900  0E00               	movlw	0
  5202  001902  6ED7               	movwf	215,c	;volatile
  5203  001904  0E00               	movlw	0
  5204  001906  6ED6               	movwf	214,c	;volatile
  5205                           
  5206                           ;motors.c: 740:     TMR2 = 0;
  5207  001908  0E00               	movlw	0
  5208  00190A  6ECC               	movwf	204,c	;volatile
  5209  00190C                     
  5210                           ;motors.c: 743:     resetStep();
  5211  00190C  EC7E  F00E         	call	_resetStep	;wreg free
  5212  001910                     
  5213                           ;motors.c: 745:     return(tm0Error);
  5214  001910  5017               	movf	_tm0Error^0,w,c
  5215  001912  0012               	return		;funcret
  5216  001914  FFFF               	dw	65535	; errata NOP
  5217  001916                     __end_of_liftArm:
  5218                           	callstack 0
  5219                           
  5220 ;; *************** function _stepMade *****************
  5221 ;; Defined at:
  5222 ;;		line 59 in file "timer.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;		None
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  temp            1   19[COMRAM] unsigned char 
  5227 ;; Return value:  Size  Location     Type
  5228 ;;                  2   17[COMRAM] unsigned int 
  5229 ;; Registers used:
  5230 ;;		wreg, status,2
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : 0/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5236 ;;      Params:         2       0       0       0       0       0       0
  5237 ;;      Locals:         1       0       0       0       0       0       0
  5238 ;;      Temps:          0       0       0       0       0       0       0
  5239 ;;      Totals:         3       0       0       0       0       0       0
  5240 ;;Total ram usage:        3 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; Hardware stack levels required when called:    4
  5243 ;; This function calls:
  5244 ;;		Nothing
  5245 ;; This function is called by:
  5246 ;;		_resetPosition
  5247 ;;		_moveToPoint
  5248 ;;		_touchObject
  5249 ;;		_touchTherm
  5250 ;;		_liftArm
  5251 ;;		_pickObject
  5252 ;;		_releaseObj
  5253 ;;		_rotateObj
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           	psect	text32
  5258  001C24                     __ptext32:
  5259                           	callstack 0
  5260  001C24                     _stepMade:
  5261                           	callstack 0
  5262  001C24  FFFF               	dw	65535	; assembler added errata NOP
  5263  001C26                     
  5264                           ;timer.c: 60:     unsigned char temp = stepToggle;
  5265  001C26  C019  F061         	movff	_stepToggle,stepMade@temp	;volatile
  5266  001C2A                     
  5267                           ;timer.c: 62:     stepToggle = 0;
  5268  001C2A  0E00               	movlw	0
  5269  001C2C  6E19               	movwf	_stepToggle^0,c	;volatile
  5270  001C2E                     
  5271                           ;timer.c: 64:     return temp;
  5272  001C2E  C061  F05F         	movff	stepMade@temp,?_stepMade
  5273  001C32  6A60               	clrf	(?_stepMade+1)^0,c
  5274  001C34  0012               	return		;funcret
  5275  001C36  FFFF               	dw	65535	; errata NOP
  5276  001C38                     __end_of_stepMade:
  5277                           	callstack 0
  5278                           
  5279 ;; *************** function _resetStep *****************
  5280 ;; Defined at:
  5281 ;;		line 77 in file "timer.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;		None
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;		None
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  1    wreg      void 
  5288 ;; Registers used:
  5289 ;;		wreg, status,2
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5295 ;;      Params:         0       0       0       0       0       0       0
  5296 ;;      Locals:         0       0       0       0       0       0       0
  5297 ;;      Temps:          0       0       0       0       0       0       0
  5298 ;;      Totals:         0       0       0       0       0       0       0
  5299 ;;Total ram usage:        0 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; Hardware stack levels required when called:    4
  5302 ;; This function calls:
  5303 ;;		Nothing
  5304 ;; This function is called by:
  5305 ;;		_resetPosition
  5306 ;;		_moveToPoint
  5307 ;;		_touchObject
  5308 ;;		_touchTherm
  5309 ;;		_liftArm
  5310 ;; This function uses a non-reentrant model
  5311 ;;
  5312                           
  5313                           	psect	text33
  5314  001CFC                     __ptext33:
  5315                           	callstack 0
  5316  001CFC                     _resetStep:
  5317                           	callstack 0
  5318  001CFC  FFFF               	dw	65535	; assembler added errata NOP
  5319  001CFE                     
  5320                           ;timer.c: 78:     pwmStep = 0;
  5321  001CFE  0E00               	movlw	0
  5322  001D00  6E1A               	movwf	_pwmStep^0,c	;volatile
  5323  001D02  0012               	return		;funcret
  5324  001D04  FFFF               	dw	65535	; errata NOP
  5325  001D06                     __end_of_resetStep:
  5326                           	callstack 0
  5327                           
  5328 ;; *************** function _getData *****************
  5329 ;; Defined at:
  5330 ;;		line 35 in file "usart.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;		None
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;		None
  5335 ;; Return value:  Size  Location     Type
  5336 ;;                  2   17[COMRAM] PTR struct .
  5337 ;; Registers used:
  5338 ;;		wreg, status,2, status,0
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5344 ;;      Params:         2       0       0       0       0       0       0
  5345 ;;      Locals:         0       0       0       0       0       0       0
  5346 ;;      Temps:          0       0       0       0       0       0       0
  5347 ;;      Totals:         2       0       0       0       0       0       0
  5348 ;;Total ram usage:        2 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    4
  5351 ;; This function calls:
  5352 ;;		Nothing
  5353 ;; This function is called by:
  5354 ;;		_executeData
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text34
  5359  001C78                     __ptext34:
  5360                           	callstack 0
  5361  001C78                     _getData:
  5362                           	callstack 0
  5363  001C78  FFFF               	dw	65535	; assembler added errata NOP
  5364  001C7A                     
  5365                           ;usart.c: 36:     return(&dataSequence[0]);
  5366  001C7A  0ED7               	movlw	low _dataSequence
  5367  001C7C  6E5F               	movwf	?_getData^0,c
  5368  001C7E  0E00               	movlw	high _dataSequence
  5369  001C80  6E60               	movwf	(?_getData+1)^0,c
  5370  001C82  0012               	return		;funcret
  5371  001C84  FFFF               	dw	65535	; errata NOP
  5372  001C86                     __end_of_getData:
  5373                           	callstack 0
  5374                           
  5375 ;; *************** function _clearTM0 *****************
  5376 ;; Defined at:
  5377 ;;		line 35 in file "motors.c"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;		None
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;		None
  5382 ;; Return value:  Size  Location     Type
  5383 ;;                  1    wreg      void 
  5384 ;; Registers used:
  5385 ;;		wreg, status,2
  5386 ;; Tracked objects:
  5387 ;;		On entry : 0/0
  5388 ;;		On exit  : 0/0
  5389 ;;		Unchanged: 0/0
  5390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5391 ;;      Params:         0       0       0       0       0       0       0
  5392 ;;      Locals:         0       0       0       0       0       0       0
  5393 ;;      Temps:          0       0       0       0       0       0       0
  5394 ;;      Totals:         0       0       0       0       0       0       0
  5395 ;;Total ram usage:        0 bytes
  5396 ;; Hardware stack levels used:    1
  5397 ;; Hardware stack levels required when called:    4
  5398 ;; This function calls:
  5399 ;;		Nothing
  5400 ;; This function is called by:
  5401 ;;		_main
  5402 ;; This function uses a non-reentrant model
  5403 ;;
  5404                           
  5405                           	psect	text35
  5406  001C86                     __ptext35:
  5407                           	callstack 0
  5408  001C86                     _clearTM0:
  5409                           	callstack 0
  5410  001C86  FFFF               	dw	65535	; assembler added errata NOP
  5411  001C88                     
  5412                           ;motors.c: 36:     tm0Error = 0;
  5413  001C88  0E00               	movlw	0
  5414  001C8A  6E18               	movwf	(_tm0Error+1)^0,c
  5415  001C8C  0E00               	movlw	0
  5416  001C8E  6E17               	movwf	_tm0Error^0,c
  5417  001C90  0012               	return		;funcret
  5418  001C92  FFFF               	dw	65535	; errata NOP
  5419  001C94                     __end_of_clearTM0:
  5420                           	callstack 0
  5421                           
  5422 ;; *************** function _isr *****************
  5423 ;; Defined at:
  5424 ;;		line 38 in file "interrupt.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;		None
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;  temp            1   16[COMRAM] unsigned char 
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  1    wreg      void 
  5431 ;; Registers used:
  5432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5438 ;;      Params:         0       0       0       0       0       0       0
  5439 ;;      Locals:         1       0       0       0       0       0       0
  5440 ;;      Temps:          6       0       0       0       0       0       0
  5441 ;;      Totals:         7       0       0       0       0       0       0
  5442 ;;Total ram usage:        7 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    3
  5445 ;; This function calls:
  5446 ;;		_abortAll
  5447 ;;		_fatalError
  5448 ;;		_increaseStep
  5449 ;;		_retPeriod
  5450 ;;		_setThermRel
  5451 ;;		_setTouchRel
  5452 ;;		_toggleStep
  5453 ;;		_whatsTM0Limit
  5454 ;;		_writeTM0
  5455 ;;		i2_storeData
  5456 ;; This function is called by:
  5457 ;;		Interrupt level 2
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           
  5461                           	psect	intcode
  5462  000008                     __pintcode:
  5463                           	callstack 0
  5464  000008                     _isr:
  5465                           	callstack 0
  5466  000008  FFFF               	dw	65535	; assembler added errata NOP
  5467                           
  5468                           ;incstack = 0
  5469  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5470  00000C  CFD9 F05A          	movff	fsr2l,??_isr+2
  5471  000010  CFDA F05B          	movff	fsr2h,??_isr+3
  5472  000014  CFF3 F05C          	movff	prodl,??_isr+4
  5473  000018  CFF4 F05D          	movff	prodh,??_isr+5
  5474  00001C                     
  5475                           ;interrupt.c: 39:     static unsigned int single_cycle = 0;;interrupt.c: 40:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 41:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 44:     if(INTCONbits.T0IF){
  5476  00001C  A4F2               	btfss	242,2,c	;volatile
  5477  00001E  EF13  F000         	goto	i2u170_41
  5478  000022  EF16  F000         	goto	i2u170_40
  5479  000026                     i2u170_41:
  5480  000026  FFFF               	dw	65535	; assembler added errata NOP
  5481  000028  EF2C  F000         	goto	i2l2876
  5482  00002C                     i2u170_40:
  5483  00002C  FFFF               	dw	65535	; assembler added errata NOP
  5484  00002E                     
  5485                           ;interrupt.c: 45:         INTCONbits.T0IF = 0;
  5486  00002E  94F2               	bcf	242,2,c	;volatile
  5487  000030                     
  5488                           ;interrupt.c: 48:         tm0Count++;
  5489  000030  2A21               	incf	isr@tm0Count^0,f,c
  5490  000032                     
  5491                           ;interrupt.c: 50:         if(tm0Count >= whatsTM0Limit()){
  5492  000032  ECA2  F00E         	call	_whatsTM0Limit	;wreg free
  5493  000036  6E58               	movwf	??_isr^0,c
  5494  000038  5058               	movf	??_isr^0,w,c
  5495  00003A  5C21               	subwf	isr@tm0Count^0,w,c
  5496  00003C  A0D8               	btfss	status,0,c
  5497  00003E  EF23  F000         	goto	i2u171_41
  5498  000042  EF26  F000         	goto	i2u171_40
  5499  000046                     i2u171_41:
  5500  000046  FFFF               	dw	65535	; assembler added errata NOP
  5501  000048  EF2C  F000         	goto	i2l2876
  5502  00004C                     i2u171_40:
  5503  00004C  FFFF               	dw	65535	; assembler added errata NOP
  5504  00004E                     
  5505                           ;interrupt.c: 51:             T0CONbits.TMR0ON = 0;
  5506  00004E  9ED5               	bcf	213,7,c	;volatile
  5507  000050                     
  5508                           ;interrupt.c: 52:             tm0Count = 0;
  5509  000050  0E00               	movlw	0
  5510  000052  6E21               	movwf	isr@tm0Count^0,c
  5511  000054                     
  5512                           ;interrupt.c: 53:             writeTM0();
  5513  000054  EC4A  F00E         	call	_writeTM0	;wreg free
  5514  000058                     i2l2876:
  5515  000058  FFFF               	dw	65535	; assembler added errata NOP
  5516                           
  5517                           ;interrupt.c: 58:     if(PIR1bits.TMR1IF){
  5518  00005A  A09E               	btfss	158,0,c	;volatile
  5519  00005C  EF32  F000         	goto	i2u172_41
  5520  000060  EF35  F000         	goto	i2u172_40
  5521  000064                     i2u172_41:
  5522  000064  FFFF               	dw	65535	; assembler added errata NOP
  5523  000066  EF45  F000         	goto	i2l2884
  5524  00006A                     i2u172_40:
  5525  00006A  FFFF               	dw	65535	; assembler added errata NOP
  5526  00006C                     
  5527                           ;interrupt.c: 59:         PIR1bits.TMR1IF = 0;
  5528  00006C  909E               	bcf	158,0,c	;volatile
  5529  00006E                     
  5530                           ;interrupt.c: 60:         if(fatalError()){
  5531  00006E  ECAA  F00E         	call	_fatalError	;wreg free
  5532  000072  0900               	iorlw	0
  5533  000074  B4D8               	btfsc	status,2,c
  5534  000076  EF3F  F000         	goto	i2u173_41
  5535  00007A  EF42  F000         	goto	i2u173_40
  5536  00007E                     i2u173_41:
  5537  00007E  FFFF               	dw	65535	; assembler added errata NOP
  5538  000080  EF45  F000         	goto	i2l2884
  5539  000084                     i2u173_40:
  5540  000084  FFFF               	dw	65535	; assembler added errata NOP
  5541  000086                     
  5542                           ;interrupt.c: 61:             abortAll();
  5543  000086  EC25  F00E         	call	_abortAll	;wreg free
  5544  00008A                     i2l2884:
  5545  00008A  FFFF               	dw	65535	; assembler added errata NOP
  5546                           
  5547                           ;interrupt.c: 66:     if(PIR1bits.TMR2IF){
  5548  00008C  A29E               	btfss	158,1,c	;volatile
  5549  00008E  EF4B  F000         	goto	i2u174_41
  5550  000092  EF4E  F000         	goto	i2u174_40
  5551  000096                     i2u174_41:
  5552  000096  FFFF               	dw	65535	; assembler added errata NOP
  5553  000098  EF80  F000         	goto	i2l2906
  5554  00009C                     i2u174_40:
  5555  00009C  FFFF               	dw	65535	; assembler added errata NOP
  5556  00009E                     
  5557                           ;interrupt.c: 67:         PIR1bits.TMR2IF = 0;
  5558  00009E  929E               	bcf	158,1,c	;volatile
  5559  0000A0                     
  5560                           ;interrupt.c: 68:         single_cycle++;
  5561  0000A0  4A0F               	infsnz	isr@single_cycle^0,f,c
  5562  0000A2  2A10               	incf	(isr@single_cycle+1)^0,f,c
  5563  0000A4                     
  5564                           ;interrupt.c: 71:         if(single_cycle > retPeriod()){
  5565  0000A4  EC51  F00E         	call	_retPeriod	;wreg free
  5566  0000A8  500F               	movf	isr@single_cycle^0,w,c
  5567  0000AA  5C4E               	subwf	?_retPeriod^0,w,c
  5568  0000AC  5010               	movf	(isr@single_cycle+1)^0,w,c
  5569  0000AE  584F               	subwfb	(?_retPeriod+1)^0,w,c
  5570  0000B0  B0D8               	btfsc	status,0,c
  5571  0000B2  EF5D  F000         	goto	i2u175_41
  5572  0000B6  EF60  F000         	goto	i2u175_40
  5573  0000BA                     i2u175_41:
  5574  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  5575  0000BC  EF80  F000         	goto	i2l2906
  5576  0000C0                     i2u175_40:
  5577  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  5578  0000C2                     
  5579                           ;interrupt.c: 72:             single_cycle = 0;
  5580  0000C2  0E00               	movlw	0
  5581  0000C4  6E10               	movwf	(isr@single_cycle+1)^0,c
  5582  0000C6  0E00               	movlw	0
  5583  0000C8  6E0F               	movwf	isr@single_cycle^0,c
  5584  0000CA                     
  5585                           ;interrupt.c: 73:             completeStep++;
  5586  0000CA  2A20               	incf	isr@completeStep^0,f,c
  5587  0000CC                     
  5588                           ;interrupt.c: 76:             if(completeStep != 0 && !(completeStep % 2)){
  5589  0000CC  5020               	movf	isr@completeStep^0,w,c
  5590  0000CE  B4D8               	btfsc	status,2,c
  5591  0000D0  EF6C  F000         	goto	i2u176_41
  5592  0000D4  EF6F  F000         	goto	i2u176_40
  5593  0000D8                     i2u176_41:
  5594  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  5595  0000DA  EF7D  F000         	goto	i2l2904
  5596  0000DE                     i2u176_40:
  5597  0000DE  FFFF               	dw	65535	; assembler added errata NOP
  5598  0000E0  B020               	btfsc	isr@completeStep^0,0,c
  5599  0000E2  EF75  F000         	goto	i2u177_41
  5600  0000E6  EF78  F000         	goto	i2u177_40
  5601  0000EA                     i2u177_41:
  5602  0000EA  FFFF               	dw	65535	; assembler added errata NOP
  5603  0000EC  EF7D  F000         	goto	i2l2904
  5604  0000F0                     i2u177_40:
  5605  0000F0  FFFF               	dw	65535	; assembler added errata NOP
  5606  0000F2                     
  5607                           ;interrupt.c: 78:                 completeStep = 0;
  5608  0000F2  0E00               	movlw	0
  5609  0000F4  6E20               	movwf	isr@completeStep^0,c
  5610  0000F6                     
  5611                           ;interrupt.c: 81:                 increaseStep();
  5612  0000F6  ECA6  F00E         	call	_increaseStep	;wreg free
  5613  0000FA                     i2l2904:
  5614  0000FA  FFFF               	dw	65535	; assembler added errata NOP
  5615                           
  5616                           ;interrupt.c: 86:             toggleStep();
  5617  0000FC  EC83  F00E         	call	_toggleStep	;wreg free
  5618  000100                     i2l2906:
  5619  000100  FFFF               	dw	65535	; assembler added errata NOP
  5620                           
  5621                           ;interrupt.c: 91:     if(PIR1bits.ADIF){
  5622  000102  AC9E               	btfss	158,6,c	;volatile
  5623  000104  EF86  F000         	goto	i2u178_41
  5624  000108  EF89  F000         	goto	i2u178_40
  5625  00010C                     i2u178_41:
  5626  00010C  FFFF               	dw	65535	; assembler added errata NOP
  5627  00010E  EFB6  F000         	goto	i2l2918
  5628  000112                     i2u178_40:
  5629  000112  FFFF               	dw	65535	; assembler added errata NOP
  5630  000114                     
  5631                           ;interrupt.c: 92:         PIR1bits.ADIF = 0;
  5632  000114  9C9E               	bcf	158,6,c	;volatile
  5633                           
  5634                           ;interrupt.c: 95:         ADC_res = ADRESL;
  5635  000116  CFC3 F011          	movff	4035,_ADC_res	;volatile
  5636  00011A  6A12               	clrf	(_ADC_res+1)^0,c
  5637  00011C                     
  5638                           ;interrupt.c: 96:         ADC_res |= (ADRESH << 8);
  5639  00011C  50C4               	movf	196,w,c	;volatile
  5640  00011E  6E59               	movwf	(??_isr+1)^0,c
  5641  000120  6A58               	clrf	??_isr^0,c
  5642  000122  5058               	movf	??_isr^0,w,c
  5643  000124  1211               	iorwf	_ADC_res^0,f,c
  5644  000126  5059               	movf	(??_isr+1)^0,w,c
  5645  000128  1212               	iorwf	(_ADC_res+1)^0,f,c
  5646                           
  5647                           ;interrupt.c: 99:         if(ADC_res > therm_pressure){
  5648  00012A  0411               	decf	_ADC_res^0,w,c
  5649  00012C  0E04               	movlw	4
  5650  00012E  5812               	subwfb	(_ADC_res+1)^0,w,c
  5651  000130  A0D8               	btfss	status,0,c
  5652  000132  EF9D  F000         	goto	i2u179_41
  5653  000136  EFA0  F000         	goto	i2u179_40
  5654  00013A                     i2u179_41:
  5655  00013A  FFFF               	dw	65535	; assembler added errata NOP
  5656  00013C  EFA7  F000         	goto	i2l2914
  5657  000140                     i2u179_40:
  5658  000140  FFFF               	dw	65535	; assembler added errata NOP
  5659  000142                     
  5660                           ;interrupt.c: 101:             setTouchRel();
  5661  000142  EC88  F00E         	call	_setTouchRel	;wreg free
  5662                           
  5663                           ;interrupt.c: 102:             setThermRel();
  5664  000146  EC8D  F00E         	call	_setThermRel	;wreg free
  5665                           
  5666                           ;interrupt.c: 103:         }else if(ADC_res > touch_pressure){
  5667  00014A  EFB6  F000         	goto	i2l2918
  5668  00014E                     i2l2914:
  5669  00014E  FFFF               	dw	65535	; assembler added errata NOP
  5670  000150  0411               	decf	_ADC_res^0,w,c
  5671  000152  0E02               	movlw	2
  5672  000154  5812               	subwfb	(_ADC_res+1)^0,w,c
  5673  000156  A0D8               	btfss	status,0,c
  5674  000158  EFB0  F000         	goto	i2u180_41
  5675  00015C  EFB3  F000         	goto	i2u180_40
  5676  000160                     i2u180_41:
  5677  000160  FFFF               	dw	65535	; assembler added errata NOP
  5678  000162  EFB6  F000         	goto	i2l2918
  5679  000166                     i2u180_40:
  5680  000166  FFFF               	dw	65535	; assembler added errata NOP
  5681  000168                     
  5682                           ;interrupt.c: 105:             setTouchRel();
  5683  000168  EC88  F00E         	call	_setTouchRel	;wreg free
  5684  00016C                     i2l2918:
  5685  00016C  FFFF               	dw	65535	; assembler added errata NOP
  5686                           
  5687                           ;interrupt.c: 110:     if(PIR1bits.RC1IF){
  5688  00016E  AA9E               	btfss	158,5,c	;volatile
  5689  000170  EFBC  F000         	goto	i2u181_41
  5690  000174  EFBF  F000         	goto	i2u181_40
  5691  000178                     i2u181_41:
  5692  000178  FFFF               	dw	65535	; assembler added errata NOP
  5693  00017A  EFC6  F000         	goto	i2l467
  5694  00017E                     i2u181_40:
  5695  00017E  FFFF               	dw	65535	; assembler added errata NOP
  5696  000180                     
  5697                           ;interrupt.c: 111:         PIR1bits.RC1IF = 0;
  5698  000180  9A9E               	bcf	158,5,c	;volatile
  5699                           
  5700                           ;interrupt.c: 114:         unsigned char temp = RCREG1;
  5701  000182  CFAE F05E          	movff	4014,isr@temp	;volatile
  5702  000186                     
  5703                           ;interrupt.c: 116:         storeData(temp);
  5704  000186  505E               	movf	isr@temp^0,w,c
  5705  000188  ECC9  F008         	call	i2_storeData
  5706  00018C                     i2l467:
  5707  00018C  FFFF               	dw	65535	; assembler added errata NOP
  5708  00018E  C05D  FFF4         	movff	??_isr+5,prodh
  5709  000192  C05C  FFF3         	movff	??_isr+4,prodl
  5710  000196  C05B  FFDA         	movff	??_isr+3,fsr2h
  5711  00019A  C05A  FFD9         	movff	??_isr+2,fsr2l
  5712  00019E  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5713  0001A0  0011               	retfie		f
  5714  0001A2  FFFF               	dw	65535	; errata NOP
  5715  0001A4                     __end_of_isr:
  5716                           	callstack 0
  5717                           
  5718 ;; *************** function i2_storeData *****************
  5719 ;; Defined at:
  5720 ;;		line 164 in file "usart.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;  data            1    wreg     unsigned char 
  5723 ;; Auto vars:     Size  Location     Type
  5724 ;;  data            1    9[COMRAM] unsigned char 
  5725 ;; Return value:  Size  Location     Type
  5726 ;;                  1    wreg      void 
  5727 ;; Registers used:
  5728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5729 ;; Tracked objects:
  5730 ;;		On entry : 0/0
  5731 ;;		On exit  : 0/0
  5732 ;;		Unchanged: 0/0
  5733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5734 ;;      Params:         0       0       0       0       0       0       0
  5735 ;;      Locals:         1       0       0       0       0       0       0
  5736 ;;      Temps:          2       0       0       0       0       0       0
  5737 ;;      Totals:         3       0       0       0       0       0       0
  5738 ;;Total ram usage:        3 bytes
  5739 ;; Hardware stack levels used:    1
  5740 ;; Hardware stack levels required when called:    2
  5741 ;; This function calls:
  5742 ;;		i2_printError
  5743 ;; This function is called by:
  5744 ;;		_isr
  5745 ;; This function uses a non-reentrant model
  5746 ;;
  5747                           
  5748                           	psect	text37
  5749  001192                     __ptext37:
  5750                           	callstack 0
  5751  001192                     i2_storeData:
  5752                           	callstack 0
  5753  001192  FFFF               	dw	65535	; assembler added errata NOP
  5754                           
  5755                           ;incstack = 0
  5756                           ;i2storeData@data stored from wreg
  5757  001194  6E57               	movwf	i2storeData@data^0,c
  5758  001196                     
  5759                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  5760  001196  0E01               	movlw	low storeData@receivedMex
  5761  001198  241C               	addwf	storeData@counter^0,w,c
  5762  00119A  6ED9               	movwf	fsr2l,c
  5763  00119C  6ADA               	clrf	fsr2h,c
  5764  00119E  0E00               	movlw	high storeData@receivedMex
  5765  0011A0  22DA               	addwfc	fsr2h,f,c
  5766  0011A2  C057  FFDF         	movff	i2storeData@data,indf2
  5767  0011A6                     
  5768                           ;usart.c: 175:     counter++;
  5769  0011A6  2A1C               	incf	storeData@counter^0,f,c
  5770                           
  5771                           ;usart.c: 178:     switch(receivedMex[0]){
  5772  0011A8  EFE5  F008         	goto	i2l2748
  5773  0011AC                     i2l2740:
  5774  0011AC  FFFF               	dw	65535	; assembler added errata NOP
  5775                           
  5776                           ;usart.c: 180:             mexLength = 5;
  5777  0011AE  0E05               	movlw	5
  5778  0011B0  6E4D               	movwf	storeData@mexLength^0,c
  5779                           
  5780                           ;usart.c: 181:             break;
  5781  0011B2  EF00  F009         	goto	i2l2750
  5782  0011B6                     i2l2742:
  5783  0011B6  FFFF               	dw	65535	; assembler added errata NOP
  5784                           
  5785                           ;usart.c: 183:             mexLength = 9;
  5786  0011B8  0E09               	movlw	9
  5787  0011BA  6E4D               	movwf	storeData@mexLength^0,c
  5788                           
  5789                           ;usart.c: 184:             break;
  5790  0011BC  EF00  F009         	goto	i2l2750
  5791  0011C0                     i2l2744:
  5792  0011C0  FFFF               	dw	65535	; assembler added errata NOP
  5793                           
  5794                           ;usart.c: 186:             mexLength = 1;
  5795  0011C2  0E01               	movlw	1
  5796  0011C4  6E4D               	movwf	storeData@mexLength^0,c
  5797                           
  5798                           ;usart.c: 187:             break;
  5799  0011C6  EF00  F009         	goto	i2l2750
  5800  0011CA                     i2l2748:
  5801  0011CA  FFFF               	dw	65535	; assembler added errata NOP
  5802  0011CC  5001               	movf	storeData@receivedMex^0,w,c
  5803  0011CE  6E55               	movwf	??i2_storeData^0,c
  5804  0011D0  6A56               	clrf	(??i2_storeData+1)^0,c
  5805                           
  5806                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5807                           ; Switch size 1, requested type "simple"
  5808                           ; Number of cases is 1, Range of values is 0 to 0
  5809                           ; switch strategies available:
  5810                           ; Name         Instructions Cycles
  5811                           ; simple_byte            4     3 (average)
  5812                           ;	Chosen strategy is simple_byte
  5813  0011D2  5056               	movf	(??i2_storeData+1)^0,w,c
  5814  0011D4  0A00               	xorlw	0	; case 0
  5815  0011D6  B4D8               	btfsc	status,2,c
  5816  0011D8  EFF0  F008         	goto	i2l3746
  5817  0011DC  EF00  F009         	goto	i2l2750
  5818  0011E0                     i2l3746:
  5819  0011E0  FFFF               	dw	65535	; assembler added errata NOP
  5820                           
  5821                           ; Switch size 1, requested type "simple"
  5822                           ; Number of cases is 3, Range of values is 0 to 2
  5823                           ; switch strategies available:
  5824                           ; Name         Instructions Cycles
  5825                           ; simple_byte           10     6 (average)
  5826                           ;	Chosen strategy is simple_byte
  5827  0011E2  5055               	movf	??i2_storeData^0,w,c
  5828  0011E4  0A00               	xorlw	0	; case 0
  5829  0011E6  B4D8               	btfsc	status,2,c
  5830  0011E8  EFD6  F008         	goto	i2l2740
  5831  0011EC  0A01               	xorlw	1	; case 1
  5832  0011EE  B4D8               	btfsc	status,2,c
  5833  0011F0  EFDB  F008         	goto	i2l2742
  5834  0011F4  0A03               	xorlw	3	; case 2
  5835  0011F6  B4D8               	btfsc	status,2,c
  5836  0011F8  EFE0  F008         	goto	i2l2744
  5837  0011FC  EF00  F009         	goto	i2l2750
  5838  001200                     i2l2750:
  5839  001200  FFFF               	dw	65535	; assembler added errata NOP
  5840                           
  5841                           ;usart.c: 194:     if(counter >= mexLength){
  5842  001202  504D               	movf	storeData@mexLength^0,w,c
  5843  001204  5C1C               	subwf	storeData@counter^0,w,c
  5844  001206  A0D8               	btfss	status,0,c
  5845  001208  EF08  F009         	goto	i2u161_41
  5846  00120C  EF0B  F009         	goto	i2u161_40
  5847  001210                     i2u161_41:
  5848  001210  FFFF               	dw	65535	; assembler added errata NOP
  5849  001212  EF83  F009         	goto	i2l581
  5850  001216                     i2u161_40:
  5851  001216  FFFF               	dw	65535	; assembler added errata NOP
  5852  001218                     
  5853                           ;usart.c: 195:         counter = 0;
  5854  001218  0E00               	movlw	0
  5855  00121A  6E1C               	movwf	storeData@counter^0,c
  5856                           
  5857                           ;usart.c: 198:         switch(receivedMex[0]){
  5858  00121C  EF68  F009         	goto	i2l2772
  5859  001220                     i2l2754:
  5860  001220  FFFF               	dw	65535	; assembler added errata NOP
  5861                           
  5862                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  5863  001222  501F               	movf	_dataCounter^0,w,c
  5864  001224  0D04               	mullw	4
  5865  001226  0ED7               	movlw	low _dataSequence
  5866  001228  24F3               	addwf	243,w,c
  5867  00122A  6ED9               	movwf	fsr2l,c
  5868  00122C  0E00               	movlw	high _dataSequence
  5869  00122E  20F4               	addwfc	prodh,w,c
  5870  001230  6EDA               	movwf	fsr2h,c
  5871  001232  C002  FFDF         	movff	storeData@receivedMex+1,indf2
  5872                           
  5873                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 10;
  5874  001236  501F               	movf	_dataCounter^0,w,c
  5875  001238  0D04               	mullw	4
  5876  00123A  0ED8               	movlw	low (_dataSequence+1)
  5877  00123C  24F3               	addwf	243,w,c
  5878  00123E  6ED9               	movwf	fsr2l,c
  5879  001240  0E00               	movlw	high (_dataSequence+1)
  5880  001242  20F4               	addwfc	prodh,w,c
  5881  001244  6EDA               	movwf	fsr2h,c
  5882  001246  5003               	movf	(storeData@receivedMex+2)^0,w,c
  5883  001248  0D0A               	mullw	10
  5884  00124A  CFF3 FFDF          	movff	prodl,indf2
  5885                           
  5886                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 10;
  5887  00124E  501F               	movf	_dataCounter^0,w,c
  5888  001250  0D04               	mullw	4
  5889  001252  0ED9               	movlw	low (_dataSequence+2)
  5890  001254  24F3               	addwf	243,w,c
  5891  001256  6ED9               	movwf	fsr2l,c
  5892  001258  0E00               	movlw	high (_dataSequence+2)
  5893  00125A  20F4               	addwfc	prodh,w,c
  5894  00125C  6EDA               	movwf	fsr2h,c
  5895  00125E  5004               	movf	(storeData@receivedMex+3)^0,w,c
  5896  001260  0D0A               	mullw	10
  5897  001262  CFF3 FFDF          	movff	prodl,indf2
  5898                           
  5899                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  5900  001266  501F               	movf	_dataCounter^0,w,c
  5901  001268  0D04               	mullw	4
  5902  00126A  0EDA               	movlw	low (_dataSequence+3)
  5903  00126C  24F3               	addwf	243,w,c
  5904  00126E  6ED9               	movwf	fsr2l,c
  5905  001270  0E00               	movlw	high (_dataSequence+3)
  5906  001272  20F4               	addwfc	prodh,w,c
  5907  001274  6EDA               	movwf	fsr2h,c
  5908  001276  C005  FFDF         	movff	storeData@receivedMex+4,indf2
  5909  00127A                     
  5910                           ;usart.c: 205:                 dataCounter++;
  5911  00127A  2A1F               	incf	_dataCounter^0,f,c
  5912                           
  5913                           ;usart.c: 206:                 break;
  5914  00127C  EF83  F009         	goto	i2l581
  5915  001280                     i2l578:
  5916  001280  FFFF               	dw	65535	; assembler added errata NOP
  5917                           
  5918                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  5919  001282  C002  F025         	movff	storeData@receivedMex+1,_newSequenceData
  5920                           
  5921                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  5922  001286  C003  F026         	movff	storeData@receivedMex+2,_newSequenceData+1
  5923  00128A                     
  5924                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 10;
  5925  00128A  5004               	movf	(storeData@receivedMex+3)^0,w,c
  5926  00128C  0D0A               	mullw	10
  5927  00128E  CFF3 F027          	movff	prodl,_newSequenceData+2
  5928                           
  5929                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 10;
  5930  001292  5005               	movf	(storeData@receivedMex+4)^0,w,c
  5931  001294  0D0A               	mullw	10
  5932  001296  CFF3 F028          	movff	prodl,_newSequenceData+3
  5933  00129A                     
  5934                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  5935  00129A  C006  F029         	movff	storeData@receivedMex+5,_newSequenceData+4
  5936                           
  5937                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 10;
  5938  00129E  5007               	movf	(storeData@receivedMex+6)^0,w,c
  5939  0012A0  0D0A               	mullw	10
  5940  0012A2  CFF3 F02A          	movff	prodl,_newSequenceData+5
  5941                           
  5942                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 10;
  5943  0012A6  5008               	movf	(storeData@receivedMex+7)^0,w,c
  5944  0012A8  0D0A               	mullw	10
  5945  0012AA  CFF3 F02B          	movff	prodl,_newSequenceData+6
  5946  0012AE                     
  5947                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  5948  0012AE  C009  F02C         	movff	storeData@receivedMex+8,_newSequenceData+7
  5949  0012B2                     
  5950                           ;usart.c: 218:                 _newSequence = 1;
  5951  0012B2  0E01               	movlw	1
  5952  0012B4  6E1D               	movwf	__newSequence^0,c
  5953                           
  5954                           ;usart.c: 219:                 break;
  5955  0012B6  EF83  F009         	goto	i2l581
  5956  0012BA                     i2l2766:
  5957  0012BA  FFFF               	dw	65535	; assembler added errata NOP
  5958                           
  5959                           ;usart.c: 222:                 _fatalError = 1;
  5960  0012BC  0E01               	movlw	1
  5961  0012BE  6E1E               	movwf	__fatalError^0,c
  5962                           
  5963                           ;usart.c: 223:                 break;
  5964  0012C0  EF83  F009         	goto	i2l581
  5965  0012C4                     i2l2768:
  5966  0012C4  FFFF               	dw	65535	; assembler added errata NOP
  5967                           
  5968                           ;usart.c: 226:                 printError(8);
  5969  0012C6  0E08               	movlw	8
  5970  0012C8  EC32  F00B         	call	i2_printError
  5971                           
  5972                           ;usart.c: 227:                 break;
  5973  0012CC  EF83  F009         	goto	i2l581
  5974  0012D0                     i2l2772:
  5975  0012D0  FFFF               	dw	65535	; assembler added errata NOP
  5976  0012D2  5001               	movf	storeData@receivedMex^0,w,c
  5977  0012D4  6E55               	movwf	??i2_storeData^0,c
  5978  0012D6  6A56               	clrf	(??i2_storeData+1)^0,c
  5979                           
  5980                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5981                           ; Switch size 1, requested type "simple"
  5982                           ; Number of cases is 1, Range of values is 0 to 0
  5983                           ; switch strategies available:
  5984                           ; Name         Instructions Cycles
  5985                           ; simple_byte            4     3 (average)
  5986                           ;	Chosen strategy is simple_byte
  5987  0012D8  5056               	movf	(??i2_storeData+1)^0,w,c
  5988  0012DA  0A00               	xorlw	0	; case 0
  5989  0012DC  B4D8               	btfsc	status,2,c
  5990  0012DE  EF73  F009         	goto	i2l3748
  5991  0012E2  EF62  F009         	goto	i2l2768
  5992  0012E6                     i2l3748:
  5993  0012E6  FFFF               	dw	65535	; assembler added errata NOP
  5994                           
  5995                           ; Switch size 1, requested type "simple"
  5996                           ; Number of cases is 3, Range of values is 0 to 2
  5997                           ; switch strategies available:
  5998                           ; Name         Instructions Cycles
  5999                           ; simple_byte           10     6 (average)
  6000                           ;	Chosen strategy is simple_byte
  6001  0012E8  5055               	movf	??i2_storeData^0,w,c
  6002  0012EA  0A00               	xorlw	0	; case 0
  6003  0012EC  B4D8               	btfsc	status,2,c
  6004  0012EE  EF10  F009         	goto	i2l2754
  6005  0012F2  0A01               	xorlw	1	; case 1
  6006  0012F4  B4D8               	btfsc	status,2,c
  6007  0012F6  EF40  F009         	goto	i2l578
  6008  0012FA  0A03               	xorlw	3	; case 2
  6009  0012FC  B4D8               	btfsc	status,2,c
  6010  0012FE  EF5D  F009         	goto	i2l2766
  6011  001302  EF62  F009         	goto	i2l2768
  6012  001306                     i2l581:
  6013  001306  FFFF               	dw	65535	; assembler added errata NOP
  6014  001308  0012               	return		;funcret
  6015  00130A  FFFF               	dw	65535	; errata NOP
  6016  00130C                     __end_ofi2_storeData:
  6017                           	callstack 0
  6018                           
  6019 ;; *************** function _writeTM0 *****************
  6020 ;; Defined at:
  6021 ;;		line 28 in file "motors.c"
  6022 ;; Parameters:    Size  Location     Type
  6023 ;;		None
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;		None
  6026 ;; Return value:  Size  Location     Type
  6027 ;;                  1    wreg      void 
  6028 ;; Registers used:
  6029 ;;		wreg, status,2
  6030 ;; Tracked objects:
  6031 ;;		On entry : 0/0
  6032 ;;		On exit  : 0/0
  6033 ;;		Unchanged: 0/0
  6034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6035 ;;      Params:         0       0       0       0       0       0       0
  6036 ;;      Locals:         0       0       0       0       0       0       0
  6037 ;;      Temps:          0       0       0       0       0       0       0
  6038 ;;      Totals:         0       0       0       0       0       0       0
  6039 ;;Total ram usage:        0 bytes
  6040 ;; Hardware stack levels used:    1
  6041 ;; This function calls:
  6042 ;;		Nothing
  6043 ;; This function is called by:
  6044 ;;		_isr
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           	psect	text38
  6049  001C94                     __ptext38:
  6050                           	callstack 0
  6051  001C94                     _writeTM0:
  6052                           	callstack 0
  6053  001C94  FFFF               	dw	65535	; assembler added errata NOP
  6054  001C96                     
  6055                           ;motors.c: 29:     tm0Error = 1;
  6056  001C96  0E00               	movlw	0
  6057  001C98  6E18               	movwf	(_tm0Error+1)^0,c
  6058  001C9A  0E01               	movlw	1
  6059  001C9C  6E17               	movwf	_tm0Error^0,c
  6060  001C9E  0012               	return		;funcret
  6061  001CA0  FFFF               	dw	65535	; errata NOP
  6062  001CA2                     __end_of_writeTM0:
  6063                           	callstack 0
  6064                           
  6065 ;; *************** function _whatsTM0Limit *****************
  6066 ;; Defined at:
  6067 ;;		line 42 in file "motors.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;		None
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;		None
  6072 ;; Return value:  Size  Location     Type
  6073 ;;                  1    wreg      unsigned char 
  6074 ;; Registers used:
  6075 ;;		wreg, status,2
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6081 ;;      Params:         0       0       0       0       0       0       0
  6082 ;;      Locals:         0       0       0       0       0       0       0
  6083 ;;      Temps:          0       0       0       0       0       0       0
  6084 ;;      Totals:         0       0       0       0       0       0       0
  6085 ;;Total ram usage:        0 bytes
  6086 ;; Hardware stack levels used:    1
  6087 ;; This function calls:
  6088 ;;		Nothing
  6089 ;; This function is called by:
  6090 ;;		_isr
  6091 ;; This function uses a non-reentrant model
  6092 ;;
  6093                           
  6094                           	psect	text39
  6095  001D44                     __ptext39:
  6096                           	callstack 0
  6097  001D44                     _whatsTM0Limit:
  6098                           	callstack 0
  6099  001D44  FFFF               	dw	65535	; assembler added errata NOP
  6100  001D46                     
  6101                           ;motors.c: 43:     return(tm0Limit);
  6102  001D46  5024               	movf	_tm0Limit^0,w,c
  6103  001D48  0012               	return		;funcret
  6104  001D4A  FFFF               	dw	65535	; errata NOP
  6105  001D4C                     __end_of_whatsTM0Limit:
  6106                           	callstack 0
  6107                           
  6108 ;; *************** function _toggleStep *****************
  6109 ;; Defined at:
  6110 ;;		line 92 in file "timer.c"
  6111 ;; Parameters:    Size  Location     Type
  6112 ;;		None
  6113 ;; Auto vars:     Size  Location     Type
  6114 ;;		None
  6115 ;; Return value:  Size  Location     Type
  6116 ;;                  1    wreg      void 
  6117 ;; Registers used:
  6118 ;;		wreg, status,2
  6119 ;; Tracked objects:
  6120 ;;		On entry : 0/0
  6121 ;;		On exit  : 0/0
  6122 ;;		Unchanged: 0/0
  6123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6124 ;;      Params:         0       0       0       0       0       0       0
  6125 ;;      Locals:         0       0       0       0       0       0       0
  6126 ;;      Temps:          0       0       0       0       0       0       0
  6127 ;;      Totals:         0       0       0       0       0       0       0
  6128 ;;Total ram usage:        0 bytes
  6129 ;; Hardware stack levels used:    1
  6130 ;; This function calls:
  6131 ;;		Nothing
  6132 ;; This function is called by:
  6133 ;;		_isr
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           	psect	text40
  6138  001D06                     __ptext40:
  6139                           	callstack 0
  6140  001D06                     _toggleStep:
  6141                           	callstack 0
  6142  001D06  FFFF               	dw	65535	; assembler added errata NOP
  6143  001D08                     
  6144                           ;timer.c: 93:     stepToggle = 1;
  6145  001D08  0E01               	movlw	1
  6146  001D0A  6E19               	movwf	_stepToggle^0,c	;volatile
  6147  001D0C  0012               	return		;funcret
  6148  001D0E  FFFF               	dw	65535	; errata NOP
  6149  001D10                     __end_of_toggleStep:
  6150                           	callstack 0
  6151                           
  6152 ;; *************** function _setTouchRel *****************
  6153 ;; Defined at:
  6154 ;;		line 86 in file "adc.c"
  6155 ;; Parameters:    Size  Location     Type
  6156 ;;		None
  6157 ;; Auto vars:     Size  Location     Type
  6158 ;;		None
  6159 ;; Return value:  Size  Location     Type
  6160 ;;                  1    wreg      void 
  6161 ;; Registers used:
  6162 ;;		wreg, status,2
  6163 ;; Tracked objects:
  6164 ;;		On entry : 0/0
  6165 ;;		On exit  : 0/0
  6166 ;;		Unchanged: 0/0
  6167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6168 ;;      Params:         0       0       0       0       0       0       0
  6169 ;;      Locals:         0       0       0       0       0       0       0
  6170 ;;      Temps:          0       0       0       0       0       0       0
  6171 ;;      Totals:         0       0       0       0       0       0       0
  6172 ;;Total ram usage:        0 bytes
  6173 ;; Hardware stack levels used:    1
  6174 ;; This function calls:
  6175 ;;		Nothing
  6176 ;; This function is called by:
  6177 ;;		_isr
  6178 ;; This function uses a non-reentrant model
  6179 ;;
  6180                           
  6181                           	psect	text41
  6182  001D10                     __ptext41:
  6183                           	callstack 0
  6184  001D10                     _setTouchRel:
  6185                           	callstack 0
  6186  001D10  FFFF               	dw	65535	; assembler added errata NOP
  6187  001D12                     
  6188                           ;adc.c: 87:     touch_rel = 1;
  6189  001D12  0E01               	movlw	1
  6190  001D14  6E23               	movwf	_touch_rel^0,c	;volatile
  6191  001D16  0012               	return		;funcret
  6192  001D18  FFFF               	dw	65535	; errata NOP
  6193  001D1A                     __end_of_setTouchRel:
  6194                           	callstack 0
  6195                           
  6196 ;; *************** function _setThermRel *****************
  6197 ;; Defined at:
  6198 ;;		line 79 in file "adc.c"
  6199 ;; Parameters:    Size  Location     Type
  6200 ;;		None
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;		None
  6203 ;; Return value:  Size  Location     Type
  6204 ;;                  1    wreg      void 
  6205 ;; Registers used:
  6206 ;;		wreg, status,2
  6207 ;; Tracked objects:
  6208 ;;		On entry : 0/0
  6209 ;;		On exit  : 0/0
  6210 ;;		Unchanged: 0/0
  6211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6212 ;;      Params:         0       0       0       0       0       0       0
  6213 ;;      Locals:         0       0       0       0       0       0       0
  6214 ;;      Temps:          0       0       0       0       0       0       0
  6215 ;;      Totals:         0       0       0       0       0       0       0
  6216 ;;Total ram usage:        0 bytes
  6217 ;; Hardware stack levels used:    1
  6218 ;; This function calls:
  6219 ;;		Nothing
  6220 ;; This function is called by:
  6221 ;;		_isr
  6222 ;; This function uses a non-reentrant model
  6223 ;;
  6224                           
  6225                           	psect	text42
  6226  001D1A                     __ptext42:
  6227                           	callstack 0
  6228  001D1A                     _setThermRel:
  6229                           	callstack 0
  6230  001D1A  FFFF               	dw	65535	; assembler added errata NOP
  6231  001D1C                     
  6232                           ;adc.c: 80:     therm_rel = 1;
  6233  001D1C  0E01               	movlw	1
  6234  001D1E  6E22               	movwf	_therm_rel^0,c	;volatile
  6235  001D20  0012               	return		;funcret
  6236  001D22  FFFF               	dw	65535	; errata NOP
  6237  001D24                     __end_of_setThermRel:
  6238                           	callstack 0
  6239                           
  6240 ;; *************** function _retPeriod *****************
  6241 ;; Defined at:
  6242 ;;		line 100 in file "timer.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;		None
  6245 ;; Auto vars:     Size  Location     Type
  6246 ;;		None
  6247 ;; Return value:  Size  Location     Type
  6248 ;;                  2    0[COMRAM] unsigned int 
  6249 ;; Registers used:
  6250 ;;		None
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6256 ;;      Params:         2       0       0       0       0       0       0
  6257 ;;      Locals:         0       0       0       0       0       0       0
  6258 ;;      Temps:          0       0       0       0       0       0       0
  6259 ;;      Totals:         2       0       0       0       0       0       0
  6260 ;;Total ram usage:        2 bytes
  6261 ;; Hardware stack levels used:    1
  6262 ;; This function calls:
  6263 ;;		Nothing
  6264 ;; This function is called by:
  6265 ;;		_isr
  6266 ;; This function uses a non-reentrant model
  6267 ;;
  6268                           
  6269                           	psect	text43
  6270  001CA2                     __ptext43:
  6271                           	callstack 0
  6272  001CA2                     _retPeriod:
  6273                           	callstack 0
  6274  001CA2  FFFF               	dw	65535	; assembler added errata NOP
  6275  001CA4                     
  6276                           ;timer.c: 101:     return pwmPeriod;
  6277  001CA4  C00D  F04E         	movff	_pwmPeriod,?_retPeriod
  6278  001CA8  C00E  F04F         	movff	_pwmPeriod+1,?_retPeriod+1
  6279  001CAC  0012               	return		;funcret
  6280  001CAE  FFFF               	dw	65535	; errata NOP
  6281  001CB0                     __end_of_retPeriod:
  6282                           	callstack 0
  6283                           
  6284 ;; *************** function _increaseStep *****************
  6285 ;; Defined at:
  6286 ;;		line 84 in file "timer.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;		None
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;		None
  6291 ;; Return value:  Size  Location     Type
  6292 ;;                  1    wreg      void 
  6293 ;; Registers used:
  6294 ;;		status,2, status,0
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6300 ;;      Params:         0       0       0       0       0       0       0
  6301 ;;      Locals:         0       0       0       0       0       0       0
  6302 ;;      Temps:          0       0       0       0       0       0       0
  6303 ;;      Totals:         0       0       0       0       0       0       0
  6304 ;;Total ram usage:        0 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; This function calls:
  6307 ;;		Nothing
  6308 ;; This function is called by:
  6309 ;;		_isr
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           	psect	text44
  6314  001D4C                     __ptext44:
  6315                           	callstack 0
  6316  001D4C                     _increaseStep:
  6317                           	callstack 0
  6318  001D4C  FFFF               	dw	65535	; assembler added errata NOP
  6319  001D4E                     
  6320                           ;timer.c: 85:     pwmStep++;
  6321  001D4E  2A1A               	incf	_pwmStep^0,f,c	;volatile
  6322  001D50  0012               	return		;funcret
  6323  001D52  FFFF               	dw	65535	; errata NOP
  6324  001D54                     __end_of_increaseStep:
  6325                           	callstack 0
  6326                           
  6327 ;; *************** function _fatalError *****************
  6328 ;; Defined at:
  6329 ;;		line 61 in file "usart.c"
  6330 ;; Parameters:    Size  Location     Type
  6331 ;;		None
  6332 ;; Auto vars:     Size  Location     Type
  6333 ;;		None
  6334 ;; Return value:  Size  Location     Type
  6335 ;;                  1    wreg      unsigned char 
  6336 ;; Registers used:
  6337 ;;		wreg, status,2
  6338 ;; Tracked objects:
  6339 ;;		On entry : 0/0
  6340 ;;		On exit  : 0/0
  6341 ;;		Unchanged: 0/0
  6342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6343 ;;      Params:         0       0       0       0       0       0       0
  6344 ;;      Locals:         0       0       0       0       0       0       0
  6345 ;;      Temps:          0       0       0       0       0       0       0
  6346 ;;      Totals:         0       0       0       0       0       0       0
  6347 ;;Total ram usage:        0 bytes
  6348 ;; Hardware stack levels used:    1
  6349 ;; This function calls:
  6350 ;;		Nothing
  6351 ;; This function is called by:
  6352 ;;		_isr
  6353 ;; This function uses a non-reentrant model
  6354 ;;
  6355                           
  6356                           	psect	text45
  6357  001D54                     __ptext45:
  6358                           	callstack 0
  6359  001D54                     _fatalError:
  6360                           	callstack 0
  6361  001D54  FFFF               	dw	65535	; assembler added errata NOP
  6362  001D56                     
  6363                           ;usart.c: 62:     return _fatalError;
  6364  001D56  501E               	movf	__fatalError^0,w,c
  6365  001D58  0012               	return		;funcret
  6366  001D5A  FFFF               	dw	65535	; errata NOP
  6367  001D5C                     __end_of_fatalError:
  6368                           	callstack 0
  6369                           
  6370 ;; *************** function _abortAll *****************
  6371 ;; Defined at:
  6372 ;;		line 803 in file "motors.c"
  6373 ;; Parameters:    Size  Location     Type
  6374 ;;		None
  6375 ;; Auto vars:     Size  Location     Type
  6376 ;;		None
  6377 ;; Return value:  Size  Location     Type
  6378 ;;                  1    wreg      void 
  6379 ;; Registers used:
  6380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6381 ;; Tracked objects:
  6382 ;;		On entry : 0/0
  6383 ;;		On exit  : 0/0
  6384 ;;		Unchanged: 0/0
  6385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6386 ;;      Params:         0       0       0       0       0       0       0
  6387 ;;      Locals:         0       0       0       0       0       0       0
  6388 ;;      Temps:          0       0       0       0       0       0       0
  6389 ;;      Totals:         0       0       0       0       0       0       0
  6390 ;;Total ram usage:        0 bytes
  6391 ;; Hardware stack levels used:    1
  6392 ;; Hardware stack levels required when called:    2
  6393 ;; This function calls:
  6394 ;;		i2_printError
  6395 ;; This function is called by:
  6396 ;;		_isr
  6397 ;; This function uses a non-reentrant model
  6398 ;;
  6399                           
  6400                           	psect	text46
  6401  001C4A                     __ptext46:
  6402                           	callstack 0
  6403  001C4A                     _abortAll:
  6404                           	callstack 0
  6405  001C4A  FFFF               	dw	65535	; assembler added errata NOP
  6406  001C4C                     
  6407                           ;motors.c: 811:     printError(7);
  6408  001C4C  0E07               	movlw	7
  6409  001C4E  EC32  F00B         	call	i2_printError
  6410  001C52                     i2l253:
  6411  001C52  FFFF               	dw	65535	; assembler added errata NOP
  6412  001C54  EF29  F00E         	goto	i2l253
  6413  001C58  0012               	return		;funcret
  6414  001C5A  FFFF               	dw	65535	; errata NOP
  6415  001C5C                     __end_of_abortAll:
  6416                           	callstack 0
  6417                           
  6418 ;; *************** function i2_printError *****************
  6419 ;; Defined at:
  6420 ;;		line 111 in file "usart.c"
  6421 ;; Parameters:    Size  Location     Type
  6422 ;;  errCode         1    wreg     unsigned char 
  6423 ;; Auto vars:     Size  Location     Type
  6424 ;;  errCode         1    6[COMRAM] unsigned char 
  6425 ;; Return value:  Size  Location     Type
  6426 ;;                  1    wreg      void 
  6427 ;; Registers used:
  6428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6434 ;;      Params:         0       0       0       0       0       0       0
  6435 ;;      Locals:         1       0       0       0       0       0       0
  6436 ;;      Temps:          2       0       0       0       0       0       0
  6437 ;;      Totals:         3       0       0       0       0       0       0
  6438 ;;Total ram usage:        3 bytes
  6439 ;; Hardware stack levels used:    1
  6440 ;; Hardware stack levels required when called:    1
  6441 ;; This function calls:
  6442 ;;		i2_uartTx
  6443 ;; This function is called by:
  6444 ;;		_abortAll
  6445 ;;		i2_storeData
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           	psect	text47
  6450  001664                     __ptext47:
  6451                           	callstack 0
  6452  001664                     i2_printError:
  6453                           	callstack 0
  6454  001664  FFFF               	dw	65535	; assembler added errata NOP
  6455                           
  6456                           ;incstack = 0
  6457                           ;i2printError@errCode stored from wreg
  6458  001666  6E54               	movwf	i2printError@errCode^0,c
  6459  001668                     
  6460                           ;usart.c: 113:     switch(errCode){
  6461  001668  EF8E  F00B         	goto	i2l2524
  6462  00166C                     i2l2506:
  6463  00166C  FFFF               	dw	65535	; assembler added errata NOP
  6464                           
  6465                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  6466  00166E  0EA1               	movlw	low _errString_Feed
  6467  001670  6E4E               	movwf	i2uartTx@ptr^0,c
  6468  001672  0E00               	movlw	high _errString_Feed
  6469  001674  6E4F               	movwf	(i2uartTx@ptr+1)^0,c
  6470  001676  0E1E               	movlw	30
  6471  001678  6E50               	movwf	i2uartTx@length^0,c
  6472  00167A  EC51  F00D         	call	i2_uartTx	;wreg free
  6473                           
  6474                           ;usart.c: 116:             break;
  6475  00167E  EFBD  F00B         	goto	i2l548
  6476  001682                     i2l2508:
  6477  001682  FFFF               	dw	65535	; assembler added errata NOP
  6478                           
  6479                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  6480  001684  0E5E               	movlw	low _errString_ZEND
  6481  001686  6E4E               	movwf	i2uartTx@ptr^0,c
  6482  001688  0E01               	movlw	high _errString_ZEND
  6483  00168A  6E4F               	movwf	(i2uartTx@ptr+1)^0,c
  6484  00168C  0E29               	movlw	41
  6485  00168E  6E50               	movwf	i2uartTx@length^0,c
  6486  001690  EC51  F00D         	call	i2_uartTx	;wreg free
  6487                           
  6488                           ;usart.c: 119:             break;
  6489  001694  EFBD  F00B         	goto	i2l548
  6490  001698                     i2l2510:
  6491  001698  FFFF               	dw	65535	; assembler added errata NOP
  6492                           
  6493                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  6494  00169A  0E87               	movlw	low _errString_Reset
  6495  00169C  6E4E               	movwf	i2uartTx@ptr^0,c
  6496  00169E  0E01               	movlw	high _errString_Reset
  6497  0016A0  6E4F               	movwf	(i2uartTx@ptr+1)^0,c
  6498  0016A2  0E28               	movlw	40
  6499  0016A4  6E50               	movwf	i2uartTx@length^0,c
  6500  0016A6  EC51  F00D         	call	i2_uartTx	;wreg free
  6501                           
  6502                           ;usart.c: 122:             break;
  6503  0016AA  EFBD  F00B         	goto	i2l548
  6504  0016AE                     i2l2512:
  6505  0016AE  FFFF               	dw	65535	; assembler added errata NOP
  6506                           
  6507                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  6508  0016B0  0E35               	movlw	low _errString_Point
  6509  0016B2  6E4E               	movwf	i2uartTx@ptr^0,c
  6510  0016B4  0E01               	movlw	high _errString_Point
  6511  0016B6  6E4F               	movwf	(i2uartTx@ptr+1)^0,c
  6512  0016B8  0E29               	movlw	41
  6513  0016BA  6E50               	movwf	i2uartTx@length^0,c
  6514  0016BC  EC51  F00D         	call	i2_uartTx	;wreg free
  6515                           
  6516                           ;usart.c: 125:             break;
  6517  0016C0  EFBD  F00B         	goto	i2l548
  6518  0016C4                     i2l2514:
  6519  0016C4  FFFF               	dw	65535	; assembler added errata NOP
  6520                           
  6521                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  6522  0016C6  0E80               	movlw	low _errString_Bound
  6523  0016C8  6E4E               	movwf	i2uartTx@ptr^0,c
  6524  0016CA  0E00               	movlw	high _errString_Bound
  6525  0016CC  6E4F               	movwf	(i2uartTx@ptr+1)^0,c
  6526  0016CE  0E21               	movlw	33
  6527  0016D0  6E50               	movwf	i2uartTx@length^0,c
  6528  0016D2  EC51  F00D         	call	i2_uartTx	;wreg free
  6529                           
  6530                           ;usart.c: 128:             break;
  6531  0016D6  EFBD  F00B         	goto	i2l548
  6532  0016DA                     i2l2516:
  6533  0016DA  FFFF               	dw	65535	; assembler added errata NOP
  6534                           
  6535                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  6536  0016DC  0E00               	movlw	low _errString_PointZ
  6537  0016DE  6E4E               	movwf	i2uartTx@ptr^0,c
  6538  0016E0  0E01               	movlw	high _errString_PointZ
  6539  0016E2  6E4F               	movwf	(i2uartTx@ptr+1)^0,c
  6540  0016E4  0E35               	movlw	53
  6541  0016E6  6E50               	movwf	i2uartTx@length^0,c
  6542  0016E8  EC51  F00D         	call	i2_uartTx	;wreg free
  6543                           
  6544                           ;usart.c: 131:             break;
  6545  0016EC  EFBD  F00B         	goto	i2l548
  6546  0016F0                     i2l2518:
  6547  0016F0  FFFF               	dw	65535	; assembler added errata NOP
  6548                           
  6549                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  6550  0016F2  0EAF               	movlw	low _errString_Fatal
  6551  0016F4  6E4E               	movwf	i2uartTx@ptr^0,c
  6552  0016F6  0E01               	movlw	high _errString_Fatal
  6553  0016F8  6E4F               	movwf	(i2uartTx@ptr+1)^0,c
  6554  0016FA  0E27               	movlw	39
  6555  0016FC  6E50               	movwf	i2uartTx@length^0,c
  6556  0016FE  EC51  F00D         	call	i2_uartTx	;wreg free
  6557                           
  6558                           ;usart.c: 134:             break;
  6559  001702  EFBD  F00B         	goto	i2l548
  6560  001706                     i2l2520:
  6561  001706  FFFF               	dw	65535	; assembler added errata NOP
  6562                           
  6563                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  6564  001708  0EBF               	movlw	low _errString_Command
  6565  00170A  6E4E               	movwf	i2uartTx@ptr^0,c
  6566  00170C  0E00               	movlw	high _errString_Command
  6567  00170E  6E4F               	movwf	(i2uartTx@ptr+1)^0,c
  6568  001710  0E18               	movlw	24
  6569  001712  6E50               	movwf	i2uartTx@length^0,c
  6570  001714  EC51  F00D         	call	i2_uartTx	;wreg free
  6571                           
  6572                           ;usart.c: 137:             break;
  6573  001718  EFBD  F00B         	goto	i2l548
  6574  00171C                     i2l2524:
  6575  00171C  FFFF               	dw	65535	; assembler added errata NOP
  6576  00171E  5054               	movf	i2printError@errCode^0,w,c
  6577  001720  6E52               	movwf	??i2_printError^0,c
  6578  001722  6A53               	clrf	(??i2_printError+1)^0,c
  6579                           
  6580                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6581                           ; Switch size 1, requested type "simple"
  6582                           ; Number of cases is 1, Range of values is 0 to 0
  6583                           ; switch strategies available:
  6584                           ; Name         Instructions Cycles
  6585                           ; simple_byte            4     3 (average)
  6586                           ;	Chosen strategy is simple_byte
  6587  001724  5053               	movf	(??i2_printError+1)^0,w,c
  6588  001726  0A00               	xorlw	0	; case 0
  6589  001728  B4D8               	btfsc	status,2,c
  6590  00172A  EF99  F00B         	goto	i2l3750
  6591  00172E  EFBD  F00B         	goto	i2l548
  6592  001732                     i2l3750:
  6593  001732  FFFF               	dw	65535	; assembler added errata NOP
  6594                           
  6595                           ; Switch size 1, requested type "simple"
  6596                           ; Number of cases is 8, Range of values is 1 to 8
  6597                           ; switch strategies available:
  6598                           ; Name         Instructions Cycles
  6599                           ; simple_byte           25    13 (average)
  6600                           ;	Chosen strategy is simple_byte
  6601  001734  5052               	movf	??i2_printError^0,w,c
  6602  001736  0A01               	xorlw	1	; case 1
  6603  001738  B4D8               	btfsc	status,2,c
  6604  00173A  EF36  F00B         	goto	i2l2506
  6605  00173E  0A03               	xorlw	3	; case 2
  6606  001740  B4D8               	btfsc	status,2,c
  6607  001742  EF41  F00B         	goto	i2l2508
  6608  001746  0A01               	xorlw	1	; case 3
  6609  001748  B4D8               	btfsc	status,2,c
  6610  00174A  EF4C  F00B         	goto	i2l2510
  6611  00174E  0A07               	xorlw	7	; case 4
  6612  001750  B4D8               	btfsc	status,2,c
  6613  001752  EF57  F00B         	goto	i2l2512
  6614  001756  0A01               	xorlw	1	; case 5
  6615  001758  B4D8               	btfsc	status,2,c
  6616  00175A  EF62  F00B         	goto	i2l2514
  6617  00175E  0A03               	xorlw	3	; case 6
  6618  001760  B4D8               	btfsc	status,2,c
  6619  001762  EF6D  F00B         	goto	i2l2516
  6620  001766  0A01               	xorlw	1	; case 7
  6621  001768  B4D8               	btfsc	status,2,c
  6622  00176A  EF78  F00B         	goto	i2l2518
  6623  00176E  0A0F               	xorlw	15	; case 8
  6624  001770  B4D8               	btfsc	status,2,c
  6625  001772  EF83  F00B         	goto	i2l2520
  6626  001776  EFBD  F00B         	goto	i2l548
  6627  00177A                     i2l548:
  6628  00177A  FFFF               	dw	65535	; assembler added errata NOP
  6629  00177C  0012               	return		;funcret
  6630  00177E  FFFF               	dw	65535	; errata NOP
  6631  001780                     __end_ofi2_printError:
  6632                           	callstack 0
  6633                           
  6634 ;; *************** function i2_uartTx *****************
  6635 ;; Defined at:
  6636 ;;		line 148 in file "usart.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  6639 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  6640 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  6641 ;;  length          1    2[COMRAM] unsigned char 
  6642 ;; Auto vars:     Size  Location     Type
  6643 ;;  i               1    3[COMRAM] unsigned char 
  6644 ;; Return value:  Size  Location     Type
  6645 ;;                  1    wreg      void 
  6646 ;; Registers used:
  6647 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6653 ;;      Params:         3       0       0       0       0       0       0
  6654 ;;      Locals:         1       0       0       0       0       0       0
  6655 ;;      Temps:          0       0       0       0       0       0       0
  6656 ;;      Totals:         4       0       0       0       0       0       0
  6657 ;;Total ram usage:        4 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; This function calls:
  6660 ;;		Nothing
  6661 ;; This function is called by:
  6662 ;;		i2_printError
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           	psect	text48
  6667  001AA2                     __ptext48:
  6668                           	callstack 0
  6669  001AA2                     i2_uartTx:
  6670                           	callstack 0
  6671  001AA2  FFFF               	dw	65535	; assembler added errata NOP
  6672  001AA4                     
  6673                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  6674  001AA4  0E01               	movlw	1
  6675  001AA6  6E51               	movwf	i2uartTx@i^0,c
  6676  001AA8  EF6A  F00D         	goto	i2l2236
  6677  001AAC                     i2l2232:
  6678  001AAC  FFFF               	dw	65535	; assembler added errata NOP
  6679                           
  6680                           ;usart.c: 153:         TXREG = *ptr;
  6681  001AAE  C04E  FFD9         	movff	i2uartTx@ptr,fsr2l
  6682  001AB2  C04F  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  6683  001AB6  50DF               	movf	indf2,w,c
  6684  001AB8  6EAD               	movwf	173,c	;volatile
  6685  001ABA                     i2l553:
  6686  001ABA  FFFF               	dw	65535	; assembler added errata NOP
  6687  001ABC  A2AC               	btfss	172,1,c	;volatile
  6688  001ABE  EF63  F00D         	goto	i2u99_41
  6689  001AC2  EF66  F00D         	goto	i2u99_40
  6690  001AC6                     i2u99_41:
  6691  001AC6  FFFF               	dw	65535	; assembler added errata NOP
  6692  001AC8  EF5D  F00D         	goto	i2l553
  6693  001ACC                     i2u99_40:
  6694  001ACC  FFFF               	dw	65535	; assembler added errata NOP
  6695  001ACE                     
  6696                           ;usart.c: 157:         ptr++;
  6697  001ACE  4A4E               	infsnz	i2uartTx@ptr^0,f,c
  6698  001AD0  2A4F               	incf	(i2uartTx@ptr+1)^0,f,c
  6699                           
  6700                           ;usart.c: 158:     }
  6701  001AD2  2A51               	incf	i2uartTx@i^0,f,c
  6702  001AD4                     i2l2236:
  6703  001AD4  FFFF               	dw	65535	; assembler added errata NOP
  6704  001AD6  5050               	movf	i2uartTx@length^0,w,c
  6705  001AD8  5C51               	subwf	i2uartTx@i^0,w,c
  6706  001ADA  A0D8               	btfss	status,0,c
  6707  001ADC  EF72  F00D         	goto	i2u100_41
  6708  001AE0  EF75  F00D         	goto	i2u100_40
  6709  001AE4                     i2u100_41:
  6710  001AE4  FFFF               	dw	65535	; assembler added errata NOP
  6711  001AE6  EF56  F00D         	goto	i2l2232
  6712  001AEA                     i2u100_40:
  6713  001AEA  FFFF               	dw	65535	; assembler added errata NOP
  6714  001AEC  0012               	return		;funcret
  6715  001AEE  FFFF               	dw	65535	; errata NOP
  6716  001AF0                     __end_ofi2_uartTx:
  6717                           	callstack 0
  6718                           
  6719                           	psect	rparam
  6720  0000                     
  6721                           	psect	temp
  6722  00006E                     btemp:
  6723                           	callstack 0
  6724  00006E                     	ds	1
  6725  0000                     int$flags	set	btemp
  6726  0000                     wtemp8	set	btemp+1
  6727  0000                     ttemp5	set	btemp+1
  6728  0000                     ttemp6	set	btemp+4
  6729  0000                     ttemp7	set	btemp+8
  6730                           
  6731                           	psect	idloc
  6732                           
  6733                           ;Config register IDLOC0 @ 0x200000
  6734                           ;	unspecified, using default values
  6735  200000                     	org	2097152
  6736  200000  FF                 	db	255
  6737                           
  6738                           ;Config register IDLOC1 @ 0x200001
  6739                           ;	unspecified, using default values
  6740  200001                     	org	2097153
  6741  200001  FF                 	db	255
  6742                           
  6743                           ;Config register IDLOC2 @ 0x200002
  6744                           ;	unspecified, using default values
  6745  200002                     	org	2097154
  6746  200002  FF                 	db	255
  6747                           
  6748                           ;Config register IDLOC3 @ 0x200003
  6749                           ;	unspecified, using default values
  6750  200003                     	org	2097155
  6751  200003  FF                 	db	255
  6752                           
  6753                           ;Config register IDLOC4 @ 0x200004
  6754                           ;	unspecified, using default values
  6755  200004                     	org	2097156
  6756  200004  FF                 	db	255
  6757                           
  6758                           ;Config register IDLOC5 @ 0x200005
  6759                           ;	unspecified, using default values
  6760  200005                     	org	2097157
  6761  200005  FF                 	db	255
  6762                           
  6763                           ;Config register IDLOC6 @ 0x200006
  6764                           ;	unspecified, using default values
  6765  200006                     	org	2097158
  6766  200006  FF                 	db	255
  6767                           
  6768                           ;Config register IDLOC7 @ 0x200007
  6769                           ;	unspecified, using default values
  6770  200007                     	org	2097159
  6771  200007  FF                 	db	255
  6772                           
  6773                           	psect	config
  6774                           
  6775                           ; Padding undefined space
  6776  300000                     	org	3145728
  6777  300000  FF                 	db	255
  6778                           
  6779                           ;Config register CONFIG1H @ 0x300001
  6780                           ;	Oscillator Selection bits
  6781                           ;	OSC = XT, XT oscillator
  6782                           ;	Oscillator System Clock Switch Enable bit
  6783                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  6784  300001                     	org	3145729
  6785  300001  21                 	db	33
  6786                           
  6787                           ;Config register CONFIG2L @ 0x300002
  6788                           ;	Power-up Timer Enable bit
  6789                           ;	PWRT = OFF, PWRT disabled
  6790                           ;	Brown-out Reset Enable bit
  6791                           ;	BOR = OFF, Brown-out Reset disabled
  6792                           ;	Brown-out Reset Voltage bits
  6793                           ;	BORV = 20, VBOR set to 2.0V
  6794  300002                     	org	3145730
  6795  300002  0D                 	db	13
  6796                           
  6797                           ;Config register CONFIG2H @ 0x300003
  6798                           ;	Watchdog Timer Enable bit
  6799                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  6800                           ;	Watchdog Timer Postscale Select bits
  6801                           ;	WDTPS = 128, 1:128
  6802  300003                     	org	3145731
  6803  300003  0E                 	db	14
  6804                           
  6805                           ; Padding undefined space
  6806  300004                     	org	3145732
  6807  300004  FF                 	db	255
  6808                           
  6809                           ;Config register CONFIG3H @ 0x300005
  6810                           ;	CCP2 Mux bit
  6811                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  6812  300005                     	org	3145733
  6813  300005  00                 	db	0
  6814                           
  6815                           ;Config register CONFIG4L @ 0x300006
  6816                           ;	Stack Full/Underflow Reset Enable bit
  6817                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  6818                           ;	Low Voltage ICSP Enable bit
  6819                           ;	LVP = OFF, Low Voltage ICSP disabled
  6820                           ;	Background Debugger Enable bit
  6821                           ;	DEBUG = 0x1, unprogrammed default
  6822  300006                     	org	3145734
  6823  300006  80                 	db	128
  6824                           
  6825                           ; Padding undefined space
  6826  300007                     	org	3145735
  6827  300007  FF                 	db	255
  6828                           
  6829                           ;Config register CONFIG5L @ 0x300008
  6830                           ;	Code Protection bit
  6831                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  6832                           ;	Code Protection bit
  6833                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  6834                           ;	Code Protection bit
  6835                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  6836                           ;	Code Protection bit
  6837                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  6838  300008                     	org	3145736
  6839  300008  0F                 	db	15
  6840                           
  6841                           ;Config register CONFIG5H @ 0x300009
  6842                           ;	Boot Block Code Protection bit
  6843                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  6844                           ;	Data EEPROM Code Protection bit
  6845                           ;	CPD = OFF, Data EEPROM not code protected
  6846  300009                     	org	3145737
  6847  300009  C0                 	db	192
  6848                           
  6849                           ;Config register CONFIG6L @ 0x30000A
  6850                           ;	Write Protection bit
  6851                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  6852                           ;	Write Protection bit
  6853                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  6854                           ;	Write Protection bit
  6855                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  6856                           ;	Write Protection bit
  6857                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  6858  30000A                     	org	3145738
  6859  30000A  0F                 	db	15
  6860                           
  6861                           ;Config register CONFIG6H @ 0x30000B
  6862                           ;	Configuration Register Write Protection bit
  6863                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  6864                           ;	Boot Block Write Protection bit
  6865                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  6866                           ;	Data EEPROM Write Protection bit
  6867                           ;	WRTD = OFF, Data EEPROM not write protected
  6868  30000B                     	org	3145739
  6869  30000B  E0                 	db	224
  6870                           
  6871                           ;Config register CONFIG7L @ 0x30000C
  6872                           ;	Table Read Protection bit
  6873                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  6874                           ;	Table Read Protection bit
  6875                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  6876                           ;	Table Read Protection bit
  6877                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  6878                           ;	Table Read Protection bit
  6879                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  6880  30000C                     	org	3145740
  6881  30000C  0F                 	db	15
  6882                           
  6883                           ;Config register CONFIG7H @ 0x30000D
  6884                           ;	Boot Block Table Read Protection bit
  6885                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  6886  30000D                     	org	3145741
  6887  30000D  40                 	db	64
  6888                           tosu	equ	0xFFF
  6889                           tosh	equ	0xFFE
  6890                           tosl	equ	0xFFD
  6891                           stkptr	equ	0xFFC
  6892                           pclatu	equ	0xFFB
  6893                           pclath	equ	0xFFA
  6894                           pcl	equ	0xFF9
  6895                           tblptru	equ	0xFF8
  6896                           tblptrh	equ	0xFF7
  6897                           tblptrl	equ	0xFF6
  6898                           tablat	equ	0xFF5
  6899                           prodh	equ	0xFF4
  6900                           prodl	equ	0xFF3
  6901                           indf0	equ	0xFEF
  6902                           postinc0	equ	0xFEE
  6903                           postdec0	equ	0xFED
  6904                           preinc0	equ	0xFEC
  6905                           plusw0	equ	0xFEB
  6906                           fsr0h	equ	0xFEA
  6907                           fsr0l	equ	0xFE9
  6908                           wreg	equ	0xFE8
  6909                           indf1	equ	0xFE7
  6910                           postinc1	equ	0xFE6
  6911                           postdec1	equ	0xFE5
  6912                           preinc1	equ	0xFE4
  6913                           plusw1	equ	0xFE3
  6914                           fsr1h	equ	0xFE2
  6915                           fsr1l	equ	0xFE1
  6916                           bsr	equ	0xFE0
  6917                           indf2	equ	0xFDF
  6918                           postinc2	equ	0xFDE
  6919                           postdec2	equ	0xFDD
  6920                           preinc2	equ	0xFDC
  6921                           plusw2	equ	0xFDB
  6922                           fsr2h	equ	0xFDA
  6923                           fsr2l	equ	0xFD9
  6924                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    16
    Data        334
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     32     109
    BANK0           128     12     119
    BANK1           256      0     214
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK0[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(COMRAM[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_executeData
    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _executeData->_moveToPoint
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_moveToPoint

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    7146
                                              7 BANK0      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    3062
                                             30 COMRAM     2     2      0
                                              4 BANK0      3     3      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                         _resetTherm
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                         _resetTherm
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2608
                                             20 COMRAM    10     2      8
                                              0 BANK0      4     4      0
                          _resetStep
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _stepMade
     _moveToPoint
       _resetStep
       _stepCounter
       _stepMade
     _pickObject
       _stepMade
     _releaseObj
       _stepMade
     _touchObject
       _resetStep
       _resetTherm
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      D6       7       83.6%
BITBANK0            80      0       0       4        0.0%
BANK0               80      C      77       5       93.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     20      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BA      15        0.0%
DATA                 0      0     1BA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Apr 27 14:51:37 2021

                                         __end_of_interruptInit 1B2C  
                                                            l90 1BA6  
                                                            l84 1C90  
                                                           l201 1424  
                                                           l202 1428  
                                                           l131 0CBE  
                                                           l220 18FA  
                                                           l132 0E52  
                                                           l213 165C  
                                                           l214 1660  
                                                           l151 0E6A  
                                                           l160 06D4  
                                                           l225 1912  
                                                           l217 18E8  
                                                           l161 06DE  
                                                           l250 1B54  
                                                           l243 1B7A  
                                                           l331 0EBC  
                                                           l244 1B80  
                                                           l332 0EB6  
                                                           l165 09CC  
                                                           l157 09E4  
                                                           l333 0EB8  
                                                           l182 0988  
                                                           l158 068C  
                                                           l511 1C74  
                                                           l249 1B4E  
                                                           l442 1B06  
                                                           l514 1D28  
                                                           l602 1C20  
                                                           l611 1D02  
                                                           l443 1B1C  
                                                           l523 1D38  
                                                           l531 19F8  
                                                           l508 1C82  
                                                           l444 1B28  
                                                           l605 1C34  
                                                           l373 1BCC  
                                                           l517 1D30  
                                                           l382 1CC4  
                                                           l358 0C68  
                                                           l526 1CDA  
                                                           l534 1C0C  
                                                           l391 1CF8  
                                                           l608 1CD0  
                                                           l376 1CE4  
                                                           l385 1CB8  
                                                           l553 1A6C  
                                                           l379 1D40  
                                                           l388 1CEE  
                                                           l548 1542  
                                                           l557 1A9E  
                                                           l581 118C  
                                                           l578 1106  
                                                           l596 1C46  
                                                           l599 1C66  
                                                           _isr 0008  
                                                   _touchObject 130C  
                                                           prod 000FF3  
                                                           wreg 000FE8  
                                                   main@errCode 00F4  
                                                          l3000 06C4  
                                                          l3010 0714  
                                                          l3002 06DA  
                                                          l3020 0780  
                                                          l3012 0720  
                                                          l3004 06E8  
                                                          l3100 1348  
                                                          l3030 07E0  
                                                          l3022 078C  
                                                          l3014 0736  
                                                          l3006 06F6  
                                                          l3110 139C  
                                                          l3102 1354  
                                                          l3200 1900  
                                                          l3040 0848  
                                                          l3024 07AC  
                                                          l3016 075C  
                                                          l3008 06FC  
                                                          l3120 13EE  
                                                          l3104 1362  
                                                          l3202 190C  
                                                          l3050 089C  
                                                          l3034 0812  
                                                          l3026 07B4  
                                                          l3018 0768  
                                                          l3210 1B5E  
                                                          l3130 140A  
                                                          l3122 13F2  
                                                          l3106 1382  
                                                          l3114 13BC  
                                                          l3204 1910  
                                                          l3052 08B4  
                                                          l3060 08FE  
                                                          l3036 082A  
                                                          l3044 0854  
                                                          l3028 07CA  
                                                          l3212 1B7C  
                                                          l3132 141C  
                                                          l3124 13F4  
                                                          l3116 13D8  
                                                          l3108 138A  
                                                          l3140 1560  
                                                          l3300 0D58  
                                                          l3220 1430  
                                                          l3070 096A  
                                                          l3062 0914  
                                                          l3054 08C0  
                                                          l3046 086A  
                                                          l3038 0836  
                                                          l3214 1B2E  
                                                          l3126 1402  
                                                          l3118 13E8  
                                                          l3150 159E  
                                                          l3142 1562  
                                                          l3310 0DA6  
                                                          l3302 0D66  
                                                          l3230 148C  
                                                          l3222 1434  
                                                          l3080 09BA  
                                                          l3072 097C  
                                                          l3056 08E0  
                                                          l3048 0890  
                                                          l3208 1B5A  
                                                          l3216 1B32  
                                                          l3128 1406  
                                                          l3152 15BE  
                                                          l3144 156C  
                                                          l3160 15F8  
                                                          l3136 154A  
                                                          l3320 0DEA  
                                                          l3312 0DB8  
                                                          l3304 0D78  
                                                          l3232 14A2  
                                                          l3224 144A  
                                                          l3240 14E4  
                                                          l3400 1086  
                                                          l3250 1C88  
                                                          l3082 09D2  
                                                          l3066 0946  
                                                          l3058 08E8  
                                                          l3218 1B50  
                                                          l3090 130E  
                                                          l3170 1630  
                                                          l3162 1614  
                                                          l3154 15C6  
                                                          l3146 1584  
                                                          l3138 1552  
                                                          l3330 0E58  
                                                          l3322 0DFC  
                                                          l3314 0DC2  
                                                          l3306 0D80  
                                                          l3234 14B8  
                                                          l3226 1460  
                                                          l3410 1120  
                                                          l3402 109E  
                                                          l3180 1858  
                                                          l3084 09DE  
                                                          l3068 095E  
                                                          l3076 0988  
                                                          l3092 1316  
                                                          l3172 163E  
                                                          l3156 15D8  
                                                          l3164 1624  
                                                          l3148 1590  
                                                          l3260 1B9A  
                                                          l3252 1B86  
                                                          l3340 1B04  
                                                          l3332 0E64  
                                                          l3316 0DD0  
                                                          l3308 0D92  
                                                          l3324 0E16  
                                                          l3236 14CE  
                                                          l3228 1476  
                                                          l3412 1134  
                                                          l3404 10A6  
                                                          l3246 1C7A  
                                                          l3190 1894  
                                                          l3182 185E  
                                                          l3086 09E2  
                                                          l3078 09A2  
                                                          l3094 1324  
                                                          l3174 1642  
                                                          l3166 162A  
                                                          l3350 1BBC  
                                                          l3262 1B9E  
                                                          l3254 1B8E  
                                                          l3342 1B1A  
                                                          l3334 0E68  
                                                          l3326 0E2C  
                                                          l3318 0DE2  
                                                          l3270 0C6E  
                                                          l3414 1138  
                                                          l3406 1100  
                                                          l3422 1156  
                                                          l3192 18A2  
                                                          l3184 186A  
                                                          l3096 1326  
                                                          l3176 1654  
                                                          l3168 162E  
                                                          l3440 09F8  
                                                          l3352 1BBE  
                                                          l3344 1BAC  
                                                          l3264 1BA0  
                                                          l3256 1B92  
                                                          l3504 1D26  
                                                          l3432 1CD6  
                                                          l3328 0E40  
                                                          l3280 0CB2  
                                                          l3272 0C7A  
                                                          l3512 19A2  
                                                          l3416 1140  
                                                          l3408 1110  
                                                          l3360 1C08  
                                                          l3194 18B4  
                                                          l3186 1870  
                                                          l3098 1330  
                                                          l3450 0A94  
                                                          l3442 09FC  
                                                          l3354 1BC8  
                                                          l3346 1BB4  
                                                          l3266 1BA2  
                                                          l3258 1B96  
                                                          l3338 1AF2  
                                                          l3434 1D2E  
                                                          l3290 0D0E  
                                                          l3282 0CD2  
                                                          l3274 0C86  
                                                          l3514 19E2  
                                                          l3506 199E  
                                                          l3418 114A  
                                                          l3362 1C3A  
                                                          l3370 1C64  
                                                          l3196 18BC  
                                                          l3188 1888  
                                                          l3460 0B16  
                                                          l3452 0AA4  
                                                          l3444 0A36  
                                                          l3356 1BCA  
                                                          l3348 1BBA  
                                                          l3268 1BA4  
                                                          l3292 0D16  
                                                          l3284 0CE4  
                                                          l3276 0C94  
                                                          l3516 19E4  
                                                          l3364 1C42  
                                                          l3372 1C12  
                                                          l3540 0E74  
                                                          l3198 18CE  
                                                          l3462 0B38  
                                                          l3454 0AB8  
                                                          l3446 0A46  
                                                          l3470 0B50  
                                                          l3438 09EC  
                                                          l3382 1C6C  
                                                          l3294 0D28  
                                                          l3286 0CEE  
                                                          l3278 0C9A  
                                                          l3390 1032  
                                                          l3366 1C5E  
                                                          l3374 1C14  
                                                          l3358 1BF4  
                                                          l3550 0E88  
                                                          l3542 0E78  
                                                          l3480 0BB8  
                                                          l3464 0B3C  
                                                          l3456 0AF2  
                                                          l3448 0A5A  
                                                          l3472 0B96  
                                                          l3296 0D3C  
                                                          l3288 0CFC  
                                                          l3392 103C  
                                                          l3368 1C62  
                                                          l3376 1C18  
                                                          l3560 0EDA  
                                                          l3552 0E94  
                                                          l3544 0E7C  
                                                          l3536 0E6E  
                                                          l3490 0C52  
                                                          l3482 0BF6  
                                                          l3474 0BAC  
                                                          l3466 0B44  
                                                          l3458 0B02  
                                                          l3378 1D36  
                                                          l3298 0D4E  
                                                          l3394 1046  
                                                          l3386 101C  
                                                          l3570 0F2A  
                                                          l3562 0EE6  
                                                          l3554 0E9C  
                                                          l3546 0E80  
                                                          l3538 0E6E  
                                                          l3492 0C58  
                                                          l3484 0C08  
                                                          l3476 0BB0  
                                                          l3740 116C  
                                                          l3388 102C  
                                                          l3580 0FCC  
                                                          l3572 0F48  
                                                          l3564 0EF8  
                                                          l3556 0EB0  
                                                          l3548 0E84  
                                                          l3494 0C5C  
                                                          l3486 0C18  
                                                          l3478 0BB4  
                                                          l3742 14FA  
                                                          l3398 1050  
                                                          l3590 0FFE  
                                                          l3582 0FD4  
                                                          l3574 0F52  
                                                          l3566 0F08  
                                                          l3558 0EC0  
                                                          l2960 1CFE  
                                                          l2952 1C26  
                                                          l3488 0C4A  
                                                          l3496 0C64  
                                                          l3744 0B6E  
                                                          l3592 1004  
                                                          l3584 0FD8  
                                                          l3576 0F7A  
                                                          l3568 0F0A  
                                                          l2954 1C2A  
                                                          l2962 1CCA  
                                                          l2970 1CEA  
                                                          l3738 1066  
                                                          l3594 1008  
                                                          l3578 0F92  
                                                          l3586 0FDC  
                                                          l2956 1C2E  
                                                          l2972 1CF4  
                                                          l2964 1CE0  
                                                          l2980 1A80  
                                                          l3596 100C  
                                                          l3588 0FF6  
                                                          l2966 1CBE  
                                                          l2974 1CB2  
                                                          l2982 1A86  
                                                          l2992 064E  
                                                          l2984 0614  
                                                          l2968 1D3E  
                                                          l2976 1A56  
                                                          l2994 067A  
                                                          l2986 062E  
                                                          l2978 1A5E  
                                                          l2996 0692  
                                                          l2988 0646  
                                                          l2998 0698  
                                                          ?_isr 004E  
                                                          u2000 08DE  
                                                          u2001 08D8  
                                                          u2010 0912  
                                                          u2011 090C  
                                                          u2020 0940  
                                                          u2100 13B6  
                                                          u2021 093A  
                                                          u2101 13B0  
                                                          u2030 095C  
                                                          u2110 13D6  
                                                          u2031 0956  
                                                          u2111 13D0  
                                                          u2200 1886  
                                                          u2040 097A  
                                                          u2120 13E8  
                                                          u2201 1880  
                                                          u2041 0974  
                                                          u2121 13E2  
                                                          u2210 18B2  
                                                          u2050 09A2  
                                                          u2130 141A  
                                                          u2211 18AC  
                                                          u2051 099C  
                                                          u2131 1414  
                                                          u2220 18E8  
                                                          u2060 09B8  
                                                          u2140 1582  
                                                          u2300 0D3A  
                                                          u2221 18E2  
                                                          u2061 09B2  
                                                          u2141 157C  
                                                          u2301 0D34  
                                                          _LATA 000F89  
                                                          u2230 18FA  
                                                          u2070 09CC  
                                                          u2150 15BC  
                                                          u2310 0D4E  
                                                          _LATB 000F8A  
                                                          u2231 18F4  
                                                          u2071 09C6  
                                                          u2151 15B6  
                                                          u2311 0D48  
                                                          _LATC 000F8B  
                                                          u2240 1B78  
                                                          u2080 1346  
                                                          u2160 15F2  
                                                          u2400 1B02  
                                                          u2320 0D76  
                                                          _LATD 000F8C  
                                                          u2241 1B72  
                                                          u2081 1340  
                                                          u2161 15EC  
                                                          u2401 1AFC  
                                                          u2321 0D70  
                                                          u2250 1B4C  
                                                          u2090 1380  
                                                          u2170 1612  
                                                          u2410 1B18  
                                                          u2330 0DA4  
                                                          u2251 1B46  
                                                          u2091 137A  
                                                          u2171 160C  
                                                          u2411 1B12  
                                                          u2331 0D9E  
                                                          u2180 1624  
                                                          u2340 0DB8  
                                                          u2260 0CB0  
                                                          u2420 109C  
                                                          u2500 0F28  
                                                          u2181 161E  
                                                          u2341 0DB2  
                                                          u2261 0CAA  
                                                          u2421 1096  
                                                          u2501 0F22  
                                                          u2190 1652  
                                                          u2430 0BAA  
                                                          u2350 0DE0  
                                                          u2270 0CD0  
                                                          u2510 0F48  
                                                          u2191 164C  
                                                          u2431 0BA4  
                                                          u2351 0DDA  
                                                          u2271 0CCA  
                                                          u2511 0F42  
                                                          u2440 0C48  
                                                          u2360 0E16  
                                                          u2280 0CE4  
                                                          u2520 0F90  
                                                          u2441 0C42  
                                                          u2361 0E10  
                                                          u2281 0CDE  
                                                          u2521 0F8A  
                                                          u2370 0E2A  
                                                          u2290 0D0C  
                                                          u2450 19F6  
                                                          u2530 0FF4  
                                                          u2371 0E24  
                                                          u2291 0D06  
                                                          u2451 19F0  
                                                          u2531 0FEE  
                                                          u1900 075A  
                                                          u2380 0E3E  
                                                          u1820 1A7E  
                                                          u1901 0754  
                                                          u2381 0E38  
                                                          u1821 1A78  
                                                          u1910 077E  
                                                          u2390 0E52  
                                                          u1830 1A9C  
                                                          u1911 0778  
                                                          u2391 0E4C  
                                                          u1831 1A96  
                                                          u1920 07AA  
                                                          u1840 062C  
                                                          u2480 0EAE  
                                                          u1921 07A4  
                                                          u1841 0626  
                                                          u2481 0EA8  
                                                          u1930 07DE  
                                                          u1850 0646  
                                                          u2490 0ED8  
                                                          u1931 07D8  
                                                          u1851 0640  
                                                          u2491 0ED2  
                                                          u1940 080C  
                                                          u1860 0678  
                                                          u1941 0806  
                                                          u1861 0672  
                                                          u1950 0828  
                                                          u1870 06C2  
                                                          u1951 0822  
                                                          u1871 06BC  
                                                          u1960 0846  
                                                          u1880 0712  
                                                          u1961 0840  
                                                          u1881 070C  
                                                          u1970 0868  
                                                          u1890 0734  
                                                          u1971 0862  
                                                          u1891 072E  
                                                          u1980 088E  
                                                          u1981 0888  
                                                          u1990 08B2  
                                                          u1991 08AC  
                                                   main@newData 00F5  
                                                          i2l81 1C9E  
                                                          i2l87 1D48  
                                                          _TMR0 000FD6  
                                                          _TMR2 000FCC  
                                           __end_ofi2_storeData 130C  
                                                          _main 0E6E  
                                                          _maxX 004B  
                                                          _maxY 0049  
                                          __end_ofi2_printError 1780  
                                                          fsr2h 000FDA  
                                                          indf2 000FDF  
                                                          fsr1l 000FE1  
                                                          fsr2l 000FD9  
                                                          btemp 006E  
                                                          prodh 000FF4  
                                                          prodl 000FF3  
                                                          start 01A4  
                                                  ___param_bank 000000  
                                               ??_whatsTM0Limit 004E  
                                                         ??_isr 0058  
                                                  ?_executeData 004E  
                                               executeData@data 00F0  
                                                         ?_main 004E  
                                                         i2l253 1C52  
                                                         i2l254 1C54  
                                                         i2l520 1D58  
                                                         i2l620 1CAC  
                                                         i2l614 1D50  
                                                         i2l553 1ABA  
                                                         i2l617 1D0C  
                                                         i2l394 1D20  
                                                         i2l467 018C  
                                                         i2l548 177A  
                                                         i2l557 1AEC  
                                                         i2l397 1D16  
                                                         i2l581 1306  
                                                         i2l578 1280  
                                          rotateObj@rotSequence 0039  
                                                         _SPBRG 000FAF  
                                                         _TRISA 000F92  
                                                         _TRISB 000F93  
                                                         _TRISC 000F94  
                                                         _TRISD 000F95  
                                                         _TXREG 000FAD  
                                               __end_of_getData 1C86  
                                               i2storeData@data 0057  
                                               __end_of_initADC 1BD0  
                                                  ?_newSequence 004E  
                                               __end_of_liftArm 1916  
                                               __end_of_readSeq 1D34  
                                                  stepMade@temp 0061  
                                                         tablat 000FF5  
                                                i2uartTx@length 0050  
                                               __end_of_stopADC 1D44  
                                                         ttemp5 006F  
                                                         ttemp6 0072  
                                                         ttemp7 0076  
                                                         status 000FD8  
                                                         wtemp8 006F  
                                              __end_ofi2_uartTx 1AF0  
                                                 ?_increaseStep 004E  
                                               __initialization 1916  
                                        __size_of_initPinMotors 0026  
                                                  __end_of_main 1018  
                                      resetPosition@keepMovingX 0062  
                                      resetPosition@keepMovingY 0063  
                                      resetPosition@keepMovingZ 0064  
                                                        ??_main 00F2  
                                                 __activetblptr 000002  
                                                   i2_storeData 1192  
                                                   isr@tm0Count 0021  
                                                  ?_setThermRel 004E  
                                                        _ADRESH 000FC4  
                                                        _ADRESL 000FC3  
                                                  ?_moveToPoint 0062  
                                                        i2l2230 1AA4  
                                                        i2l2232 1AAC  
                                                        i2l2234 1ACE  
                                                        i2l2236 1AD4  
                                                        i2l2510 1698  
                                                        i2l2520 1706  
                                                        i2l2512 16AE  
                                                        i2l2504 1668  
                                                        i2l1632 1D46  
                                                        i2l2514 16C4  
                                                        i2l2506 166C  
                                                        i2l2516 16DA  
                                                        i2l2508 1682  
                                                        i2l2524 171C  
                                                        i2l1628 1C96  
                                                        i2l2518 16F0  
                                                        i2l1904 1D1C  
                                                        i2l1914 1D4E  
                                                        i2l1906 1D12  
                                                        i2l1908 1D56  
                                                        i2l1916 1D08  
                                                        i2l2740 11AC  
                                                        i2l2900 00F2  
                                                        i2l2734 1CA4  
                                                        i2l2742 11B6  
                                                        i2l2750 1200  
                                                        i2l2910 011C  
                                                        i2l2902 00F6  
                                                        i2l2760 129A  
                                                        i2l2752 1218  
                                                        i2l2744 11C0  
                                                        i2l2736 1196  
                                                        i2l2920 0180  
                                                        i2l2912 0142  
                                                        i2l2904 00FA  
                                                        i2l2762 12AE  
                                                        i2l2754 1220  
                                                        i2l2738 11A6  
                                                        i2l2922 0186  
                                                        i2l2914 014E  
                                                        i2l2906 0100  
                                                        i2l2764 12B2  
                                                        i2l2756 127A  
                                                        i2l2772 12D0  
                                                        i2l2748 11CA  
                                                        i2l2916 0168  
                                                        i2l2908 0114  
                                                        i2l3750 1732  
                                                        i2l2598 1C4C  
                                                        i2l2766 12BA  
                                                        i2l2758 128A  
                                                        i2l2918 016C  
                                                        i2l2870 004E  
                                                        i2l2862 001C  
                                                        i2l2768 12C4  
                                                        i2l2880 006E  
                                                        i2l2872 0050  
                                                        i2l2864 002E  
                                                        i2l3746 11E0  
                                                        i2l2890 00A4  
                                                        i2l2882 0086  
                                                        i2l2874 0054  
                                                        i2l2866 0030  
                                                        i2l3748 12E6  
                                                        i2l2892 00C2  
                                                        i2l2884 008A  
                                                        i2l2868 0032  
                                                        i2l2876 0058  
                                                        i2l2894 00CA  
                                                        i2l2886 009E  
                                                        i2l2878 006C  
                                                        i2l2896 00CC  
                                                        i2l2888 00A0  
                                                        i2l2898 00E0  
                                                        _RCREG1 000FAE  
                                                  ?_setTouchRel 004E  
                                              __end_of_abortAll 1C5C  
                                              __end_of_clearTM0 1C94  
                                              _errString_PointZ 0100  
                                                ??_increaseStep 004E  
                                              __end_of_maxFeedX 0611  
                                              __end_of_maxFeedY 0610  
                                              __end_of_tim0Init 1C4A  
                                              __end_of_tim1Init 1C6A  
                                              __end_of_tim2Init 1C24  
                                                        clear_0 197C  
                                                        clear_1 1988  
                                                     ??_getData 0061  
                                                        _uartTx 1A54  
                                                     ??_initADC 005F  
                                                     ??_liftArm 0062  
                                                     ??_readSeq 005F  
                                                  __pdataCOMRAM 002D  
                                         __end_of_resetPosition 0E6E  
                                                  __mediumconst 0000  
                                                        tblptrh 000FF7  
                                                        tblptrl 000FF6  
                                                        tblptru 000FF8  
                                                  ?_returnTherm 005F  
                                              __end_of_startADC 1CE8  
                                              __end_of_stepMade 1C38  
                                                 _initPinMotors 1B84  
                                                  ?_returnTouch 005F  
                                                     ??_stopADC 005F  
                                         __size_ofi2_printError 011C  
                                              __end_of_writeTM0 1CA2  
                                     __size_of_resetNewSequence 000A  
                                                    __accesstop 0080  
                                       __end_of__initialization 198E  
                                                  _dataSequence 00D7  
                                                 ___rparam_used 000001  
                                                  ?_stepCounter 005F  
                                                   i2uartTx@ptr 004E  
                                                __pcstackCOMRAM 004E  
                                                  __newSequence 001D  
                                                  __pidataBANK0 19FC  
                                                  __pidataBANK1 1780  
                                               isr@single_cycle 000F  
                                          __size_of_executeData 0282  
                                                  i2_printError 1664  
                                                  ?_touchObject 004E  
                                                _errString_ZEND 015E  
                                                _errString_Feed 00A1  
                                                ?_initPinMotors 004E  
                                                     ?i2_uartTx 004E  
                                                    __pbssBANK0 00D7  
                                          __size_of_newSequence 0008  
                                                    _feeder1Pos 060D  
                                                    _feeder2Pos 060B  
                                                    _feeder3Pos 0609  
                                       __size_of_getNewSequence 000E  
                                                    _fatalError 1D54  
                                            __size_of_reduceSeq 0008  
                                            __size_of_retPeriod 000E  
                                                _touch_pressure 0607  
                                            __size_of_shiftData 0060  
                                            __size_of_resetStep 000A  
                                                       _ADC_res 0011  
                                                       ?_uartTx 005F  
                                                     ?_abortAll 004E  
                                          __end_of_increaseStep 1D54  
                                                     ?_clearTM0 004E  
                                                    ??i2_uartTx 0051  
                                                       i2u99_40 1ACC  
                                                       i2u99_41 1AC6  
                                             _errString_Command 00BF  
                                            __size_of_usartInit 001E  
                                        __size_of_interruptInit 003C  
                                          __size_of_setThermRel 000A  
                                            __size_of_storeData 017A  
                                                     ?_tim0Init 004E  
                                                     ?_tim1Init 004E  
                                                     ?_tim2Init 005F  
                                          __size_of_moveToPoint 03D8  
                                          storeData@receivedMex 0001  
                                               _newSequenceData 0025  
                                          __size_of_setTouchRel 000A  
                                                       __Hparam 0000  
                                                       __Lparam 0000  
                                        __end_of_touch_pressure 0609  
                                                     ?_startADC 004E  
                                                     ?_stepMade 005F  
                                                  __psmallconst 0600  
                                                       __pcinit 1916  
                                         __end_of_whatsTM0Limit 1D4C  
                                                       _getData 1C78  
                                                       __ramtop 0600  
                                                     ?_writeTM0 004E  
                                                    _pickObject 1B58  
                                                       __ptext0 0E6E  
                                                       __ptext1 1BF2  
                                                       __ptext2 1C10  
                                                       __ptext3 1C5C  
                                                       __ptext4 1C38  
                                                       __ptext5 1018  
                                                       __ptext6 142C  
                                                       __ptext7 1A54  
                                                       __ptext8 199C  
                                                       __ptext9 0C6C  
                                               __size_of_uartTx 004E  
                                                     _T0CONbits 000FD5  
                                                       _initADC 1BAA  
                                                     _T1CONbits 000FCD  
                                               ??_initPinMotors 005F  
                                                       _liftArm 1856  
                                                     _T2CONbits 000FCA  
                                                    ??_abortAll 0055  
                                                       _readSeq 1D2C  
                                                  __size_of_isr 019C  
                                                  ?i2_storeData 004E  
                                                    ??_clearTM0 005F  
                                                    _motCounter 002D  
                                                       _pwmStep 001A  
                                                       _stopADC 1D3C  
                                             __end_of_reduceSeq 1D2C  
                                             __end_of_retPeriod 1CB0  
                                                    _releaseObj 1B2C  
                                          __size_of_returnTherm 000C  
                                          end_of_initialization 198E  
                                          __size_of_returnTouch 000C  
                                              _resetNewSequence 1CD4  
                                             __end_of_shiftData 19FC  
                                                       isr@temp 005E  
                                             __end_of_resetStep 1D06  
                                                    ??_tim0Init 005F  
                                                 __Lmediumconst 0000  
                                                    ??_tim1Init 005F  
                                                    ??_tim2Init 0061  
                                              storeData@command 001B  
                                              storeData@counter 001C  
                                                    _resetTherm 1CF2  
                                                    _resetTouch 1CE8  
                                                       uartTx@i 0062  
                                                   ?_fatalError 004E  
                                                     _RCSTAbits 000FAB  
                                                       postdec1 000FE5  
                                                       postdec2 000FDD  
                                                       postinc0 000FEE  
                                                       postinc1 000FE6  
                                                       postinc2 000FDE  
                                                    ??_startADC 005F  
                                                    ??_stepMade 0061  
                                          __size_of_stepCounter 000C  
                                                 _interruptInit 1AF0  
                                             __end_of_usartInit 1C10  
                                             __end_of_storeData 1192  
                                    __end_ofrotateObj@stepAngle 0605  
                                                    ??_writeTM0 004E  
                                                     _PORTDbits 000F83  
                                                    _printError 142C  
                                                     _PORTEbits 000F84  
                                           i2printError@errCode 0054  
                                                    _toggleStep 1D06  
                                                     _TRISCbits 000F94  
                                                     _TRISDbits 000F95  
                                                     _TRISEbits 000F96  
                                          __size_of_touchObject 0120  
                                                    _stepToggle 0019  
                                                    _touchTherm 1548  
                                                     _TXSTAbits 000FAC  
                                                _getNewSequence 1C6A  
                                                ?_interruptInit 004E  
                                                 __pidataCOMRAM 1BD0  
                                         __size_of_increaseStep 0008  
                                                   ?_pickObject 004E  
                                                   __fatalError 001E  
                                                __end_of_uartTx 1AA2  
                                                 moveToPoint@x1 0062  
                                                 moveToPoint@x2 0066  
                                                 moveToPoint@y1 0064  
                                                 moveToPoint@y2 0068  
                                           start_initialization 1916  
                                                     i2uartTx@i 0051  
                                                   __end_of_isr 01A4  
                                           __size_of_fatalError 0008  
                                                   ?_releaseObj 004E  
                                             __size_ofi2_uartTx 004E  
                                        __end_of_getNewSequence 1C78  
                                               _errString_Fatal 01AF  
                                               _errString_Bound 0080  
                                                   ?_resetTherm 004E  
                                               _errString_Reset 0187  
                                                   ?_resetTouch 004E  
                                               _errString_Point 0135  
                                                  _increaseStep 1D4C  
                                        __size_of_resetPosition 0202  
                                                 ??_executeData 006C  
                                                   __pdataBANK0 0080  
                                                   __pdataBANK1 0100  
                                                   _dataCounter 001F  
                                                      ??_uartTx 0062  
                                        moveToPoint@keepMovingX 00ED  
                                        moveToPoint@keepMovingY 00EE  
                                                   ?_printError 004E  
                                                _therm_pressure 0605  
                                                   ?_toggleStep 004E  
                                                   __pbssCOMRAM 0001  
                                                 __pcstackBANK0 00EB  
                                                 ??_newSequence 005F  
                                             __size_of_abortAll 0012  
                                          __size_ofi2_storeData 017A  
                                             __size_of_clearTM0 000E  
                                               ?_getNewSequence 005F  
                                                   ?_touchTherm 004E  
                                           __size_of_pickObject 002C  
                                            executeData@errCode 00EF  
                                             __size_of_tim0Init 0012  
                                             __size_of_tim1Init 000E  
                                             __size_of_tim2Init 0014  
                                               ??_interruptInit 005F  
                                                     __pintcode 0008  
                                      __end_of_resetNewSequence 1CDE  
                                           __size_of_releaseObj 002C  
                                                 storeData@data 0068  
                                                      ?_getData 005F  
                                             __size_of_startADC 000A  
                                             __size_of_stepMade 0014  
                                        __end_of_therm_pressure 0607  
                                                      ?_initADC 004E  
                                                   __smallconst 0600  
                                                      ?_liftArm 004E  
                                                      ?_readSeq 004E  
                                             __size_of_writeTM0 000E  
                                           __end_of_executeData 0C6C  
                                                    shiftData@i 0061  
                                           __size_of_resetTherm 000A  
                                                     _newFeeder 0013  
                                                 _resetPosition 0C6C  
                                           __size_of_resetTouch 000A  
                                                 ??_setThermRel 004E  
                                                      ?_stopADC 004E  
                                                 ??_moveToPoint 006A  
                                                 ??_setTouchRel 004E  
                                           __end_of_newSequence 1D3C  
                                                     _reduceSeq 1D24  
                                                      _LATAbits 000F89  
                                                      _LATBbits 000F8A  
                                                     _retPeriod 1CA2  
                                                      _LATCbits 000F8B  
                                                      _LATDbits 000F8C  
                                           __size_of_printError 011C  
                                                      _IPR1bits 000F9F  
                                                      _PIE1bits 000F9D  
                                                     _shiftData 199C  
                                                      i2u100_40 1AEA  
                                                      i2u100_41 1AE4  
                                                      i2u161_40 1216  
                                                      i2u161_41 1210  
                                                      i2u170_40 002C  
                                                      i2u170_41 0026  
                                                      i2u171_40 004C  
                                                      i2u171_41 0046  
                                                      i2u180_40 0166  
                                                      i2u172_40 006A  
                                                      i2u180_41 0160  
                                                      i2u172_41 0064  
                                                     _resetStep 1CFC  
                                                      i2u181_40 017E  
                                                      i2u173_40 0084  
                                                      i2u181_41 0178  
                                                      i2u173_41 007E  
                                                      i2u174_40 009C  
                                                      i2u174_41 0096  
                                                      i2u175_40 00C0  
                                                      i2u175_41 00BA  
                                                      i2u176_40 00DE  
                                                      i2u176_41 00D8  
                                                      i2u177_40 00F0  
                                                      i2u177_41 00EA  
                                                      _PIR1bits 000F9E  
                                                      i2u178_40 0112  
                                                      i2u178_41 010C  
                                                      i2u179_40 0140  
                                                      i2u179_41 013A  
                                           __size_of_toggleStep 000A  
                                                  ??_fatalError 004E  
                                                     _posVector 000A  
                                                      _RCONbits 000FD0  
                                                     _therm_rel 0022  
                                                     _pwmPeriod 000D  
                                                    _ADCON0bits 000FC2  
                                                    _ADCON1bits 000FC1  
                                           __size_of_touchTherm 011C  
                                                     _usartInit 1BF2  
                                                     _touch_rel 0023  
                                            __end_of_feeder1Pos 060F  
                                            __end_of_feeder2Pos 060D  
                                            __end_of_feeder3Pos 060B  
                                                     _storeData 1018  
                                                ?_resetPosition 004E  
                                         __end_of_initPinMotors 1BAA  
                                                 ??_returnTherm 0061  
                                                 ??_returnTouch 0061  
                                                      i2_uartTx 1AA2  
                                                     copy_data0 192A  
                                                     copy_data1 194A  
                                                     copy_data2 196A  
                                            __end_of_fatalError 1D5C  
                                            rotateObj@stepAngle 0601  
                                                    ?_reduceSeq 004E  
                                                    ?_retPeriod 004E  
                                        __size_of_whatsTM0Limit 0008  
                                           __end_of_setThermRel 1D24  
                                           __end_of_moveToPoint 09EA  
                                             printError@errCode 0065  
                                                    ?_shiftData 004E  
                                                 ??_stepCounter 0061  
                                                      __Hrparam 0000  
                                                    ?_resetStep 004E  
                                           __end_of_setTouchRel 1D1A  
                                                      __Lrparam 0000  
                                                   _executeData 09EA  
                                                  ??_pickObject 0062  
                                      moveToPoint@MOT1Direction 00EB  
                                                 ?i2_printError 004E  
                                              __size_of_getData 000E  
                                      moveToPoint@MOT2Direction 00EC  
                                                 ??_touchObject 0062  
                                                      _abortAll 1C4A  
                                                    ?_usartInit 004E  
                                              __size_of_initADC 0026  
                                              __size_of_liftArm 00C0  
                                                    ?_storeData 004E  
                                                      _clearTM0 1C86  
                                              __size_of_readSeq 0008  
                                            storeData@mexLength 004D  
                                                      _tm0Error 0017  
                                                      _tm0Limit 0024  
                                                   _newSequence 1D34  
                                                      __ptext10 1CD4  
                                                      __ptext11 1D24  
                                                      __ptext20 1CB0  
                                                      __ptext12 1D2C  
                                                      __ptext21 130C  
                                                      __ptext13 1D34  
                                                      __ptext30 1CC8  
                                                      __ptext22 1D3C  
                                                      __ptext14 1AF0  
                                                      __ptext31 1856  
                                                      __ptext23 1CDE  
                                                      __ptext15 1B84  
                                                      __ptext40 1D06  
                                                      __ptext32 1C24  
                                                      __ptext24 1CBC  
                                                      __ptext16 1BAA  
                                                      __ptext41 1D10  
                                                      __ptext33 1CFC  
                                                      __ptext25 1CE8  
                                                      __ptext17 1C6A  
                                                      __ptext42 1D1A  
                                                      __ptext34 1C78  
                                                      __ptext26 1CF2  
                                                      __ptext18 09EA  
                                                      __ptext43 1CA2  
                                                      __ptext35 1C86  
                                                      __ptext27 1B2C  
                                                      __ptext19 1548  
                                                      __ptext44 1D4C  
                                                      __ptext28 1B58  
                                                      __ptext45 1D54  
                                                      __ptext37 1192  
                                                      __ptext29 0612  
                                                      __ptext46 1C4A  
                                                      __ptext38 1C94  
                                                      __ptext47 1664  
                                                      __ptext39 1D44  
                                                      __ptext48 1AA2  
                                                  ??_releaseObj 0062  
                                              __size_of_stopADC 0008  
                                                      _maxFeedX 0610  
                                                      _maxFeedY 060F  
                                           __end_of_returnTherm 1CBC  
                                           __end_of_returnTouch 1CC8  
                                                      _tim0Init 1C38  
                                                      _tim1Init 1C5C  
                                                      _tim2Init 1C10  
                                                 __size_of_main 01AA  
                                            __end_of_pickObject 1B84  
                                                  ??_resetTherm 005F  
                                                  ??_resetTouch 005F  
                                                     uartTx@ptr 005F  
                                                      _rotAngle 0015  
                                               isr@completeStep 0020  
                                                      int$flags 006E  
                                                      _startADC 1CDE  
                                                      _stepMade 1C24  
                                                      _stepMot1 0045  
                                                      _stepMot2 0041  
                                                      _stepMot3 003D  
                                           __end_of_stepCounter 1CD4  
                                                ??i2_printError 0052  
                                            __end_of_releaseObj 1B58  
                                                      _writeTM0 1C94  
                                                  ??_printError 0063  
                                                 _whatsTM0Limit 1D44  
                                               ??_resetPosition 0062  
                                            tim2Init@_pwmPeriod 005F  
                                                    _INTCONbits 000FF2  
                                                  ??_toggleStep 004E  
                                              ??_getNewSequence 0061  
                                            __end_of_resetTherm 1CFC  
                                            __end_of_resetTouch 1CF2  
                                                   _setThermRel 1D1A  
                                                  uartTx@length 0061  
                                                   _moveToPoint 0612  
                                           __end_of_touchObject 142C  
                                                      intlevel2 1D5C  
                                                  ??_touchTherm 0062  
                                                   _setTouchRel 1D10  
                                                   ??_reduceSeq 005F  
                                                   ??_retPeriod 0050  
                                                    _RCSTA1bits 000FAB  
                                            __end_of_printError 1548  
                                                   ??_shiftData 005F  
                                                   ??_resetStep 005F  
                                            __end_of_toggleStep 1D10  
                                             ?_resetNewSequence 004E  
                                                ?_whatsTM0Limit 004E  
                                            ??_resetNewSequence 005F  
                                            __end_of_touchTherm 1664  
                                                   ??_usartInit 005F  
                                                 ??i2_storeData 0055  
                                                   ??_storeData 0066  
                                                   _returnTherm 1CB0  
                                                   _returnTouch 1CBC  
                                                   _stepCounter 1CC8  
