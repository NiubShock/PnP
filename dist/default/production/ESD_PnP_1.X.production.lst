

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu Jan 28 11:08:49 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    75                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    76                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    77                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    78  0000                     
    79                           ; Version 2.20
    80                           ; Generated 12/02/2020 GMT
    81                           ; 
    82                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F452 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataCOMRAM
   115  002440                     __pidataCOMRAM:
   116                           	callstack 0
   117                           
   118                           ;initializer for _maxY
   119  002440  03E8               	dw	1000
   120                           
   121                           ;initializer for _maxX
   122  002442  03E8               	dw	1000
   123                           
   124                           ;initializer for storeData@mexLength
   125  002444  05                 	db	5
   126                           
   127                           	psect	idataBANK0
   128  00216E                     __pidataBANK0:
   129                           	callstack 0
   130                           
   131                           ;initializer for rotateObj@rotSequence
   132  00216E  09                 	db	9
   133  00216F  03                 	db	3
   134  002170  06                 	db	6
   135  002171  0C                 	db	12
   136                           
   137                           ;initializer for _errString_Bound
   138  002172  45                 	db	69
   139  002173  72                 	db	114
   140  002174  72                 	db	114
   141  002175  6F                 	db	111
   142  002176  72                 	db	114
   143  002177  2C                 	db	44
   144  002178  20                 	db	32
   145  002179  70                 	db	112
   146  00217A  6F                 	db	111
   147  00217B  69                 	db	105
   148  00217C  6E                 	db	110
   149  00217D  74                 	db	116
   150  00217E  20                 	db	32
   151  00217F  6F                 	db	111
   152  002180  75                 	db	117
   153  002181  74                 	db	116
   154  002182  73                 	db	115
   155  002183  69                 	db	105
   156  002184  64                 	db	100
   157  002185  65                 	db	101
   158  002186  20                 	db	32
   159  002187  62                 	db	98
   160  002188  6F                 	db	111
   161  002189  75                 	db	117
   162  00218A  6E                 	db	110
   163  00218B  64                 	db	100
   164  00218C  61                 	db	97
   165  00218D  72                 	db	114
   166  00218E  69                 	db	105
   167  00218F  65                 	db	101
   168  002190  73                 	db	115
   169  002191  00                 	db	0
   170                           
   171                           ;initializer for _errString_Feed
   172  002192  45                 	db	69
   173  002193  72                 	db	114
   174  002194  72                 	db	114
   175  002195  6F                 	db	111
   176  002196  72                 	db	114
   177  002197  2C                 	db	44
   178  002198  20                 	db	32
   179  002199  66                 	db	102
   180  00219A  65                 	db	101
   181  00219B  65                 	db	101
   182  00219C  64                 	db	100
   183  00219D  20                 	db	32
   184  00219E  6C                 	db	108
   185  00219F  69                 	db	105
   186  0021A0  6E                 	db	110
   187  0021A1  65                 	db	101
   188  0021A2  20                 	db	32
   189  0021A3  6E                 	db	110
   190  0021A4  6F                 	db	111
   191  0021A5  74                 	db	116
   192  0021A6  20                 	db	32
   193  0021A7  64                 	db	100
   194  0021A8  65                 	db	101
   195  0021A9  66                 	db	102
   196  0021AA  69                 	db	105
   197  0021AB  6E                 	db	110
   198  0021AC  65                 	db	101
   199  0021AD  64                 	db	100
   200  0021AE  00                 	db	0
   201                           
   202                           ;initializer for _errString_Command
   203  0021AF  43                 	db	67
   204  0021B0  6F                 	db	111
   205  0021B1  6D                 	db	109
   206  0021B2  6D                 	db	109
   207  0021B3  61                 	db	97
   208  0021B4  6E                 	db	110
   209  0021B5  64                 	db	100
   210  0021B6  20                 	db	32
   211  0021B7  6E                 	db	110
   212  0021B8  6F                 	db	111
   213  0021B9  74                 	db	116
   214  0021BA  20                 	db	32
   215  0021BB  72                 	db	114
   216  0021BC  65                 	db	101
   217  0021BD  63                 	db	99
   218  0021BE  6F                 	db	111
   219  0021BF  67                 	db	103
   220  0021C0  6E                 	db	110
   221  0021C1  69                 	db	105
   222  0021C2  7A                 	db	122
   223  0021C3  65                 	db	101
   224  0021C4  64                 	db	100
   225  0021C5  00                 	db	0
   226                           
   227                           	psect	idataBANK1
   228  001CF0                     __pidataBANK1:
   229                           	callstack 0
   230                           
   231                           ;initializer for _errString_PointZ
   232  001CF0  45                 	db	69
   233  001CF1  72                 	db	114
   234  001CF2  72                 	db	114
   235  001CF3  6F                 	db	111
   236  001CF4  72                 	db	114
   237  001CF5  2C                 	db	44
   238  001CF6  20                 	db	32
   239  001CF7  74                 	db	116
   240  001CF8  69                 	db	105
   241  001CF9  6D                 	db	109
   242  001CFA  65                 	db	101
   243  001CFB  20                 	db	32
   244  001CFC  65                 	db	101
   245  001CFD  78                 	db	120
   246  001CFE  63                 	db	99
   247  001CFF  65                 	db	101
   248  001D00  65                 	db	101
   249  001D01  64                 	db	100
   250  001D02  65                 	db	101
   251  001D03  64                 	db	100
   252  001D04  20                 	db	32
   253  001D05  74                 	db	116
   254  001D06  6F                 	db	111
   255  001D07  20                 	db	32
   256  001D08  72                 	db	114
   257  001D09  65                 	db	101
   258  001D0A  61                 	db	97
   259  001D0B  63                 	db	99
   260  001D0C  68                 	db	104
   261  001D0D  20                 	db	32
   262  001D0E  74                 	db	116
   263  001D0F  68                 	db	104
   264  001D10  65                 	db	101
   265  001D11  20                 	db	32
   266  001D12  65                 	db	101
   267  001D13  6E                 	db	110
   268  001D14  64                 	db	100
   269  001D15  20                 	db	32
   270  001D16  6F                 	db	111
   271  001D17  66                 	db	102
   272  001D18  20                 	db	32
   273  001D19  74                 	db	116
   274  001D1A  68                 	db	104
   275  001D1B  65                 	db	101
   276  001D1C  20                 	db	32
   277  001D1D  5A                 	db	90
   278  001D1E  20                 	db	32
   279  001D1F  41                 	db	65
   280  001D20  78                 	db	120
   281  001D21  69                 	db	105
   282  001D22  73                 	db	115
   283  001D23  00                 	db	0
   284                           
   285                           ;initializer for _errString_Point
   286  001D24  45                 	db	69
   287  001D25  72                 	db	114
   288  001D26  72                 	db	114
   289  001D27  6F                 	db	111
   290  001D28  72                 	db	114
   291  001D29  2C                 	db	44
   292  001D2A  20                 	db	32
   293  001D2B  74                 	db	116
   294  001D2C  69                 	db	105
   295  001D2D  6D                 	db	109
   296  001D2E  65                 	db	101
   297  001D2F  20                 	db	32
   298  001D30  65                 	db	101
   299  001D31  78                 	db	120
   300  001D32  63                 	db	99
   301  001D33  65                 	db	101
   302  001D34  65                 	db	101
   303  001D35  64                 	db	100
   304  001D36  65                 	db	101
   305  001D37  64                 	db	100
   306  001D38  20                 	db	32
   307  001D39  74                 	db	116
   308  001D3A  6F                 	db	111
   309  001D3B  20                 	db	32
   310  001D3C  72                 	db	114
   311  001D3D  65                 	db	101
   312  001D3E  61                 	db	97
   313  001D3F  63                 	db	99
   314  001D40  68                 	db	104
   315  001D41  20                 	db	32
   316  001D42  74                 	db	116
   317  001D43  68                 	db	104
   318  001D44  65                 	db	101
   319  001D45  20                 	db	32
   320  001D46  70                 	db	112
   321  001D47  6F                 	db	111
   322  001D48  69                 	db	105
   323  001D49  6E                 	db	110
   324  001D4A  74                 	db	116
   325  001D4B  00                 	db	0
   326                           
   327                           ;initializer for _errString_ZEND
   328  001D4C  45                 	db	69
   329  001D4D  72                 	db	114
   330  001D4E  72                 	db	114
   331  001D4F  6F                 	db	111
   332  001D50  72                 	db	114
   333  001D51  2C                 	db	44
   334  001D52  20                 	db	32
   335  001D53  6E                 	db	110
   336  001D54  6F                 	db	111
   337  001D55  20                 	db	32
   338  001D56  6F                 	db	111
   339  001D57  62                 	db	98
   340  001D58  6A                 	db	106
   341  001D59  65                 	db	101
   342  001D5A  63                 	db	99
   343  001D5B  74                 	db	116
   344  001D5C  20                 	db	32
   345  001D5D  72                 	db	114
   346  001D5E  65                 	db	101
   347  001D5F  6C                 	db	108
   348  001D60  65                 	db	101
   349  001D61  76                 	db	118
   350  001D62  61                 	db	97
   351  001D63  74                 	db	116
   352  001D64  65                 	db	101
   353  001D65  64                 	db	100
   354  001D66  20                 	db	32
   355  001D67  61                 	db	97
   356  001D68  6C                 	db	108
   357  001D69  6F                 	db	111
   358  001D6A  6E                 	db	110
   359  001D6B  67                 	db	103
   360  001D6C  20                 	db	32
   361  001D6D  5A                 	db	90
   362  001D6E  20                 	db	32
   363  001D6F  41                 	db	65
   364  001D70  78                 	db	120
   365  001D71  69                 	db	105
   366  001D72  73                 	db	115
   367  001D73  00                 	db	0
   368                           
   369                           ;initializer for _errString_Reset
   370  001D74  45                 	db	69
   371  001D75  72                 	db	114
   372  001D76  72                 	db	114
   373  001D77  6F                 	db	111
   374  001D78  72                 	db	114
   375  001D79  2C                 	db	44
   376  001D7A  20                 	db	32
   377  001D7B  74                 	db	116
   378  001D7C  69                 	db	105
   379  001D7D  6D                 	db	109
   380  001D7E  65                 	db	101
   381  001D7F  20                 	db	32
   382  001D80  65                 	db	101
   383  001D81  78                 	db	120
   384  001D82  63                 	db	99
   385  001D83  65                 	db	101
   386  001D84  65                 	db	101
   387  001D85  64                 	db	100
   388  001D86  65                 	db	101
   389  001D87  64                 	db	100
   390  001D88  20                 	db	32
   391  001D89  74                 	db	116
   392  001D8A  6F                 	db	111
   393  001D8B  20                 	db	32
   394  001D8C  72                 	db	114
   395  001D8D  65                 	db	101
   396  001D8E  73                 	db	115
   397  001D8F  65                 	db	101
   398  001D90  74                 	db	116
   399  001D91  20                 	db	32
   400  001D92  70                 	db	112
   401  001D93  6F                 	db	111
   402  001D94  73                 	db	115
   403  001D95  69                 	db	105
   404  001D96  74                 	db	116
   405  001D97  69                 	db	105
   406  001D98  6F                 	db	111
   407  001D99  6E                 	db	110
   408  001D9A  00                 	db	0
   409                           
   410                           ;initializer for _errString_Fatal
   411  001D9B  46                 	db	70
   412  001D9C  61                 	db	97
   413  001D9D  74                 	db	116
   414  001D9E  61                 	db	97
   415  001D9F  6C                 	db	108
   416  001DA0  20                 	db	32
   417  001DA1  45                 	db	69
   418  001DA2  72                 	db	114
   419  001DA3  72                 	db	114
   420  001DA4  6F                 	db	111
   421  001DA5  72                 	db	114
   422  001DA6  2C                 	db	44
   423  001DA7  20                 	db	32
   424  001DA8  70                 	db	112
   425  001DA9  6C                 	db	108
   426  001DAA  65                 	db	101
   427  001DAB  61                 	db	97
   428  001DAC  73                 	db	115
   429  001DAD  65                 	db	101
   430  001DAE  20                 	db	32
   431  001DAF  72                 	db	114
   432  001DB0  65                 	db	101
   433  001DB1  73                 	db	115
   434  001DB2  65                 	db	101
   435  001DB3  74                 	db	116
   436  001DB4  20                 	db	32
   437  001DB5  74                 	db	116
   438  001DB6  68                 	db	104
   439  001DB7  65                 	db	101
   440  001DB8  20                 	db	32
   441  001DB9  64                 	db	100
   442  001DBA  65                 	db	101
   443  001DBB  76                 	db	118
   444  001DBC  69                 	db	105
   445  001DBD  63                 	db	99
   446  001DBE  65                 	db	101
   447  001DBF  21                 	db	33
   448  001DC0  00                 	db	0
   449                           
   450                           	psect	smallconst
   451  000600                     __psmallconst:
   452                           	callstack 0
   453  000600  00                 	db	0
   454  000601  FFAC               	dw	65452
   455  000603  3DB3               	dw	15795
   456  000605                     __end_ofrotateObj@stepAngle:
   457                           	callstack 0
   458  000605  0400               	dw	1024
   459  000607                     __end_of_therm_pressure:
   460                           	callstack 0
   461  000607  0200               	dw	512
   462  000609                     __end_of_touch_pressure:
   463                           	callstack 0
   464  000609                     _feeder3Pos:
   465                           	callstack 0
   466  000609  19                 	db	25
   467  00060A  19                 	db	25
   468  00060B                     __end_of_feeder3Pos:
   469                           	callstack 0
   470  00060B                     _feeder2Pos:
   471                           	callstack 0
   472  00060B  0F                 	db	15
   473  00060C  0F                 	db	15
   474  00060D                     __end_of_feeder2Pos:
   475                           	callstack 0
   476  00060D                     _feeder1Pos:
   477                           	callstack 0
   478  00060D  05                 	db	5
   479  00060E  05                 	db	5
   480  00060F                     __end_of_feeder1Pos:
   481                           	callstack 0
   482  0000                     _TMR0	set	4054
   483  0000                     _TXREG	set	4013
   484  0000                     _SPBRG	set	4015
   485  0000                     _TXSTAbits	set	4012
   486  0000                     _TRISCbits	set	3988
   487  0000                     _RCREG1	set	4014
   488  0000                     _ADRESH	set	4036
   489  0000                     _ADRESL	set	4035
   490  0000                     _PIR1bits	set	3998
   491  0000                     _IPR1bits	set	3999
   492  0000                     _ADCON0bits	set	4034
   493  0000                     _PIE1bits	set	3997
   494  0000                     _RCONbits	set	4048
   495  0000                     _INTCONbits	set	4082
   496  0000                     _RCSTAbits	set	4011
   497  0000                     _RCSTA1bits	set	4011
   498  0000                     _LATD	set	3980
   499  0000                     _PORTDbits	set	3971
   500  0000                     _TMR2	set	4044
   501  0000                     _PORTEbits	set	3972
   502  0000                     _T0CONbits	set	4053
   503  0000                     _T2CONbits	set	4042
   504  0000                     _LATDbits	set	3980
   505  0000                     _LATCbits	set	3979
   506  0000                     _LATBbits	set	3978
   507  0000                     _LATAbits	set	3977
   508  0000                     _TRISDbits	set	3989
   509  0000                     _TRISEbits	set	3990
   510  0000                     _TRISD	set	3989
   511  0000                     _TRISC	set	3988
   512  0000                     _TRISB	set	3987
   513  0000                     _TRISA	set	3986
   514  0000                     _ADCON1bits	set	4033
   515  00060F  00                 	db	0	; dummy byte at the end
   516  0000                     
   517                           ; #config settings
   518                           
   519                           	psect	cinit
   520  001F2C                     __pcinit:
   521                           	callstack 0
   522  001F2C                     start_initialization:
   523                           	callstack 0
   524  001F2C                     __initialization:
   525                           	callstack 0
   526                           
   527                           ; Initialize objects allocated to BANK1 (209 bytes)
   528                           ; load TBLPTR registers with __pidataBANK1
   529  001F2C  0EF0               	movlw	low __pidataBANK1
   530  001F2E  6EF6               	movwf	tblptrl,c
   531  001F30  0E1C               	movlw	high __pidataBANK1
   532  001F32  6EF7               	movwf	tblptrh,c
   533  001F34  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   534  001F36  6EF8               	movwf	tblptru,c
   535  001F38  EE01  F000         	lfsr	0,__pdataBANK1
   536  001F3C  EE10 F0D1          	lfsr	1,209
   537  001F40                     copy_data0:
   538  001F40  0009               	tblrd		*+
   539  001F42  CFF5 FFEE          	movff	tablat,postinc0
   540  001F46  50E5               	movf	postdec1,w,c
   541  001F48  50E1               	movf	fsr1l,w,c
   542  001F4A  E1FA               	bnz	copy_data0
   543                           
   544                           ; Initialize objects allocated to BANK0 (88 bytes)
   545                           ; load TBLPTR registers with __pidataBANK0
   546  001F4C  0E6E               	movlw	low __pidataBANK0
   547  001F4E  6EF6               	movwf	tblptrl,c
   548  001F50  0E21               	movlw	high __pidataBANK0
   549  001F52  6EF7               	movwf	tblptrh,c
   550  001F54  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   551  001F56  6EF8               	movwf	tblptru,c
   552  001F58  EE00  F080         	lfsr	0,__pdataBANK0
   553  001F5C  EE10 F058          	lfsr	1,88
   554  001F60                     copy_data1:
   555  001F60  0009               	tblrd		*+
   556  001F62  CFF5 FFEE          	movff	tablat,postinc0
   557  001F66  50E5               	movf	postdec1,w,c
   558  001F68  50E1               	movf	fsr1l,w,c
   559  001F6A  E1FA               	bnz	copy_data1
   560                           
   561                           ; Initialize objects allocated to COMRAM (5 bytes)
   562                           ; load TBLPTR registers with __pidataCOMRAM
   563  001F6C  0E40               	movlw	low __pidataCOMRAM
   564  001F6E  6EF6               	movwf	tblptrl,c
   565  001F70  0E24               	movlw	high __pidataCOMRAM
   566  001F72  6EF7               	movwf	tblptrh,c
   567  001F74  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   568  001F76  6EF8               	movwf	tblptru,c
   569  001F78  EE00  F069         	lfsr	0,__pdataCOMRAM
   570  001F7C  EE10 F005          	lfsr	1,5
   571  001F80                     copy_data2:
   572  001F80  0009               	tblrd		*+
   573  001F82  CFF5 FFEE          	movff	tablat,postinc0
   574  001F86  50E5               	movf	postdec1,w,c
   575  001F88  50E1               	movf	fsr1l,w,c
   576  001F8A  E1FA               	bnz	copy_data2
   577                           
   578                           ; Clear objects allocated to BANK0 (28 bytes)
   579  001F8C  EE00  F0D8         	lfsr	0,__pbssBANK0
   580  001F90  0E1C               	movlw	28
   581  001F92                     clear_0:
   582  001F92  6AEE               	clrf	postinc0,c
   583  001F94  06E8               	decf	wreg,f,c
   584  001F96  E1FD               	bnz	clear_0
   585                           
   586                           ; Clear objects allocated to COMRAM (36 bytes)
   587  001F98  EE00  F045         	lfsr	0,__pbssCOMRAM
   588  001F9C  0E24               	movlw	36
   589  001F9E                     clear_1:
   590  001F9E  6AEE               	clrf	postinc0,c
   591  001FA0  06E8               	decf	wreg,f,c
   592  001FA2  E1FD               	bnz	clear_1
   593  001FA4                     end_of_initialization:
   594                           	callstack 0
   595  001FA4                     __end_of__initialization:
   596                           	callstack 0
   597  001FA4  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   598  001FA6  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   599  001FA8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   600  001FAA  6EF8               	movwf	tblptru,c
   601  001FAC  0100               	movlb	0
   602  001FAE  EF4F  F009         	goto	_main	;jump to C main() function
   603                           
   604                           	psect	bssCOMRAM
   605  000045                     __pbssCOMRAM:
   606                           	callstack 0
   607  000045                     storeData@receivedMex:
   608                           	callstack 0
   609  000045                     	ds	9
   610  00004E                     _posVector:
   611                           	callstack 0
   612  00004E                     	ds	3
   613  000051                     isr@single_cycle:
   614                           	callstack 0
   615  000051                     	ds	2
   616  000053                     _ADC_res:
   617                           	callstack 0
   618  000053                     	ds	2
   619  000055                     _pwmPeriod:
   620                           	callstack 0
   621  000055                     	ds	2
   622  000057                     _newFeeder:
   623                           	callstack 0
   624  000057                     	ds	2
   625  000059                     _rotAngle:
   626                           	callstack 0
   627  000059                     	ds	2
   628  00005B                     _tm0Error:
   629                           	callstack 0
   630  00005B                     	ds	2
   631  00005D                     	ds	1
   632  00005E                     storeData@counter:
   633                           	callstack 0
   634  00005E                     	ds	1
   635  00005F                     __newSequence:
   636                           	callstack 0
   637  00005F                     	ds	1
   638  000060                     __fatalError:
   639                           	callstack 0
   640  000060                     	ds	1
   641  000061                     _dataCounter:
   642                           	callstack 0
   643  000061                     	ds	1
   644  000062                     isr@completeStep:
   645                           	callstack 0
   646  000062                     	ds	1
   647  000063                     isr@tm0Count:
   648                           	callstack 0
   649  000063                     	ds	1
   650  000064                     _therm_rel:
   651                           	callstack 0
   652  000064                     	ds	1
   653  000065                     _touch_rel:
   654                           	callstack 0
   655  000065                     	ds	1
   656  000066                     _stepToggle:
   657                           	callstack 0
   658  000066                     	ds	1
   659  000067                     _pwmStep:
   660                           	callstack 0
   661  000067                     	ds	1
   662  000068                     _tm0Limit:
   663                           	callstack 0
   664  000068                     	ds	1
   665                           
   666                           	psect	dataCOMRAM
   667  000069                     __pdataCOMRAM:
   668                           	callstack 0
   669  000069                     	ds	2
   670  00006B                     	ds	2
   671  00006D                     storeData@mexLength:
   672                           	callstack 0
   673  00006D                     	ds	1
   674                           
   675                           	psect	bssBANK0
   676  0000D8                     __pbssBANK0:
   677                           	callstack 0
   678  0000D8                     _dataSequence:
   679                           	callstack 0
   680  0000D8                     	ds	20
   681  0000EC                     _newSequenceData:
   682                           	callstack 0
   683  0000EC                     	ds	8
   684                           
   685                           	psect	dataBANK0
   686  000080                     __pdataBANK0:
   687                           	callstack 0
   688  000080                     rotateObj@rotSequence:
   689                           	callstack 0
   690  000080                     	ds	4
   691  000084                     _errString_Bound:
   692                           	callstack 0
   693  000084                     	ds	32
   694  0000A4                     _errString_Feed:
   695                           	callstack 0
   696  0000A4                     	ds	29
   697  0000C1                     _errString_Command:
   698                           	callstack 0
   699  0000C1                     	ds	23
   700                           
   701                           	psect	dataBANK1
   702  000100                     __pdataBANK1:
   703                           	callstack 0
   704  000100                     _errString_PointZ:
   705                           	callstack 0
   706  000100                     	ds	52
   707  000134                     _errString_Point:
   708                           	callstack 0
   709  000134                     	ds	40
   710  00015C                     _errString_ZEND:
   711                           	callstack 0
   712  00015C                     	ds	40
   713  000184                     _errString_Reset:
   714                           	callstack 0
   715  000184                     	ds	39
   716  0001AB                     _errString_Fatal:
   717                           	callstack 0
   718  0001AB                     	ds	38
   719                           
   720                           	psect	cstackBANK1
   721  0001D1                     __pcstackBANK1:
   722                           	callstack 0
   723  0001D1                     main@errCode:
   724                           	callstack 0
   725                           
   726                           ; 1 bytes @ 0x0
   727  0001D1                     	ds	1
   728  0001D2                     main@newData:
   729                           	callstack 0
   730                           
   731                           ; 2 bytes @ 0x1
   732  0001D2                     	ds	2
   733                           
   734                           	psect	cstackBANK0
   735  0000F4                     __pcstackBANK0:
   736                           	callstack 0
   737  0000F4                     ??_rotateObj:
   738                           
   739                           ; 1 bytes @ 0x0
   740  0000F4                     	ds	3
   741  0000F7                     rotateObj@rotAngle:
   742                           	callstack 0
   743                           
   744                           ; 1 bytes @ 0x3
   745  0000F7                     	ds	1
   746  0000F8                     rotateObj@totStep:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0x4
   750  0000F8                     	ds	2
   751  0000FA                     rotateObj@i:
   752                           	callstack 0
   753                           
   754                           ; 1 bytes @ 0x6
   755  0000FA                     	ds	1
   756  0000FB                     executeData@errCode:
   757                           	callstack 0
   758                           
   759                           ; 1 bytes @ 0x7
   760  0000FB                     	ds	1
   761  0000FC                     executeData@data:
   762                           	callstack 0
   763                           
   764                           ; 2 bytes @ 0x8
   765  0000FC                     	ds	2
   766  0000FE                     ??_main:
   767                           
   768                           ; 1 bytes @ 0xA
   769  0000FE                     	ds	2
   770                           
   771                           	psect	cstackCOMRAM
   772  000001                     __pcstackCOMRAM:
   773                           	callstack 0
   774  000001                     ?_retPeriod:
   775                           	callstack 0
   776  000001                     i2uartTx@ptr:
   777                           	callstack 0
   778                           
   779                           ; 2 bytes @ 0x0
   780  000001                     	ds	2
   781  000003                     i2uartTx@length:
   782                           	callstack 0
   783                           
   784                           ; 1 bytes @ 0x2
   785  000003                     	ds	1
   786  000004                     i2uartTx@i:
   787                           	callstack 0
   788                           
   789                           ; 1 bytes @ 0x3
   790  000004                     	ds	1
   791  000005                     ??i2_printError:
   792                           
   793                           ; 1 bytes @ 0x4
   794  000005                     	ds	2
   795  000007                     i2printError@errCode:
   796                           	callstack 0
   797                           
   798                           ; 1 bytes @ 0x6
   799  000007                     	ds	1
   800  000008                     ??i2_storeData:
   801                           
   802                           ; 1 bytes @ 0x7
   803  000008                     	ds	2
   804  00000A                     i2storeData@data:
   805                           	callstack 0
   806                           
   807                           ; 1 bytes @ 0x9
   808  00000A                     	ds	1
   809  00000B                     ??_isr:
   810                           
   811                           ; 1 bytes @ 0xA
   812  00000B                     	ds	6
   813  000011                     isr@temp:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0x10
   817  000011                     	ds	1
   818  000012                     ??_shiftData:
   819  000012                     ?_stepMade:
   820                           	callstack 0
   821  000012                     ?_stepCounter:
   822                           	callstack 0
   823  000012                     ?_returnTouch:
   824                           	callstack 0
   825  000012                     ?_returnTherm:
   826                           	callstack 0
   827  000012                     ?_getNewSequence:
   828                           	callstack 0
   829  000012                     ?_getData:
   830                           	callstack 0
   831  000012                     ?___xxtofl:
   832                           	callstack 0
   833  000012                     setStep@motor:
   834                           	callstack 0
   835  000012                     enableMotor@motor:
   836                           	callstack 0
   837  000012                     setDirection@motor:
   838                           	callstack 0
   839  000012                     setDecay@motor:
   840                           	callstack 0
   841  000012                     tim2Init@_pwmPeriod:
   842                           	callstack 0
   843  000012                     uartTx@ptr:
   844                           	callstack 0
   845  000012                     ___xxtofl@val:
   846                           	callstack 0
   847                           
   848                           ; 4 bytes @ 0x11
   849  000012                     	ds	1
   850  000013                     ??_setStep:
   851  000013                     ??_enableMotor:
   852  000013                     ??_setDirection:
   853  000013                     ??_setDecay:
   854                           
   855                           ; 1 bytes @ 0x12
   856  000013                     	ds	1
   857  000014                     stepMade@temp:
   858                           	callstack 0
   859  000014                     shiftData@i:
   860                           	callstack 0
   861  000014                     uartTx@length:
   862                           	callstack 0
   863                           
   864                           ; 1 bytes @ 0x13
   865  000014                     	ds	1
   866  000015                     setStep@step:
   867                           	callstack 0
   868  000015                     enableMotor@enable:
   869                           	callstack 0
   870  000015                     setDirection@direction:
   871                           	callstack 0
   872  000015                     setDecay@decay:
   873                           	callstack 0
   874  000015                     uartTx@i:
   875                           	callstack 0
   876                           
   877                           ; 1 bytes @ 0x14
   878  000015                     	ds	1
   879  000016                     ??_printError:
   880  000016                     ??___xxtofl:
   881  000016                     resetPosition@keepMovingX:
   882                           	callstack 0
   883  000016                     moveToPoint@x1:
   884                           	callstack 0
   885                           
   886                           ; 2 bytes @ 0x15
   887  000016                     	ds	1
   888  000017                     resetPosition@keepMovingY:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x16
   892  000017                     	ds	1
   893  000018                     resetPosition@keepMovingZ:
   894                           	callstack 0
   895  000018                     printError@errCode:
   896                           	callstack 0
   897  000018                     moveToPoint@y1:
   898                           	callstack 0
   899                           
   900                           ; 2 bytes @ 0x17
   901  000018                     	ds	1
   902  000019                     ??_storeData:
   903                           
   904                           ; 1 bytes @ 0x18
   905  000019                     	ds	1
   906  00001A                     ___xxtofl@sign:
   907                           	callstack 0
   908  00001A                     moveToPoint@x2:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x19
   912  00001A                     	ds	1
   913  00001B                     storeData@data:
   914                           	callstack 0
   915  00001B                     ___xxtofl@exp:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x1A
   919  00001B                     	ds	1
   920  00001C                     moveToPoint@y2:
   921                           	callstack 0
   922  00001C                     ___xxtofl@arg:
   923                           	callstack 0
   924                           
   925                           ; 4 bytes @ 0x1B
   926  00001C                     	ds	2
   927  00001E                     ??_moveToPoint:
   928                           
   929                           ; 1 bytes @ 0x1D
   930  00001E                     	ds	2
   931  000020                     ?___fldiv:
   932                           	callstack 0
   933  000020                     moveToPoint@keepMovingX:
   934                           	callstack 0
   935  000020                     ___fldiv@b:
   936                           	callstack 0
   937                           
   938                           ; 4 bytes @ 0x1F
   939  000020                     	ds	1
   940  000021                     moveToPoint@keepMovingY:
   941                           	callstack 0
   942                           
   943                           ; 1 bytes @ 0x20
   944  000021                     	ds	3
   945  000024                     ___fldiv@a:
   946                           	callstack 0
   947                           
   948                           ; 4 bytes @ 0x23
   949  000024                     	ds	4
   950  000028                     ??___fldiv:
   951                           
   952                           ; 1 bytes @ 0x27
   953  000028                     	ds	4
   954  00002C                     ___fldiv@rem:
   955                           	callstack 0
   956                           
   957                           ; 4 bytes @ 0x2B
   958  00002C                     	ds	4
   959  000030                     ___fldiv@sign:
   960                           	callstack 0
   961                           
   962                           ; 1 bytes @ 0x2F
   963  000030                     	ds	1
   964  000031                     ___fldiv@new_exp:
   965                           	callstack 0
   966                           
   967                           ; 2 bytes @ 0x30
   968  000031                     	ds	2
   969  000033                     ___fldiv@grs:
   970                           	callstack 0
   971                           
   972                           ; 4 bytes @ 0x32
   973  000033                     	ds	4
   974  000037                     ___fldiv@bexp:
   975                           	callstack 0
   976                           
   977                           ; 1 bytes @ 0x36
   978  000037                     	ds	1
   979  000038                     ___fldiv@aexp:
   980                           	callstack 0
   981                           
   982                           ; 1 bytes @ 0x37
   983  000038                     	ds	1
   984  000039                     ?___fltol:
   985                           	callstack 0
   986  000039                     ___fltol@f1:
   987                           	callstack 0
   988                           
   989                           ; 4 bytes @ 0x38
   990  000039                     	ds	4
   991  00003D                     ??___fltol:
   992                           
   993                           ; 1 bytes @ 0x3C
   994  00003D                     	ds	4
   995  000041                     ___fltol@sign1:
   996                           	callstack 0
   997                           
   998                           ; 1 bytes @ 0x40
   999  000041                     	ds	1
  1000  000042                     ___fltol@exp1:
  1001                           	callstack 0
  1002                           
  1003                           ; 1 bytes @ 0x41
  1004  000042                     	ds	1
  1005  000043                     ??_executeData:
  1006                           
  1007                           ; 1 bytes @ 0x42
  1008  000043                     	ds	2
  1009                           
  1010 ;;
  1011 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1012 ;;
  1013 ;; *************** function _main *****************
  1014 ;; Defined at:
  1015 ;;		line 26 in file "main.c"
  1016 ;; Parameters:    Size  Location     Type
  1017 ;;		None
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;  newData         2    1[BANK1 ] PTR struct .
  1020 ;;		 -> newSequenceData(8), 
  1021 ;;  errCode         1    0[BANK1 ] unsigned char 
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  1    wreg      void 
  1024 ;; Registers used:
  1025 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1031 ;;      Params:         0       0       0       0       0       0       0
  1032 ;;      Locals:         0       0       3       0       0       0       0
  1033 ;;      Temps:          0       2       0       0       0       0       0
  1034 ;;      Totals:         0       2       3       0       0       0       0
  1035 ;;Total ram usage:        5 bytes
  1036 ;; Hardware stack levels required when called:    7
  1037 ;; This function calls:
  1038 ;;		_clearTM0
  1039 ;;		_enableMotor
  1040 ;;		_executeData
  1041 ;;		_fatalError
  1042 ;;		_getNewSequence
  1043 ;;		_initADC
  1044 ;;		_initPinMotors
  1045 ;;		_interruptInit
  1046 ;;		_newSequence
  1047 ;;		_printError
  1048 ;;		_readSeq
  1049 ;;		_reduceSeq
  1050 ;;		_resetNewSequence
  1051 ;;		_resetPosition
  1052 ;;		_shiftData
  1053 ;;		_storeData
  1054 ;;		_tim0Init
  1055 ;;		_tim2Init
  1056 ;;		_usartInit
  1057 ;; This function is called by:
  1058 ;;		Startup code after reset
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           	psect	text0
  1063  00129E                     __ptext0:
  1064                           	callstack 0
  1065  00129E                     _main:
  1066                           	callstack 24
  1067  00129E  FFFF               	dw	65535	; assembler added errata NOP
  1068                           
  1069                           ;main.c: 30:     interruptInit();
  1070  0012A0  EC31  F011         	call	_interruptInit	;wreg free
  1071  0012A4                     
  1072                           ;main.c: 31:     initPinMotors();
  1073  0012A4  EC4E  F011         	call	_initPinMotors	;wreg free
  1074  0012A8                     
  1075                           ;main.c: 32:     initADC();
  1076  0012A8  EC61  F011         	call	_initADC	;wreg free
  1077  0012AC                     
  1078                           ;main.c: 33:     tim0Init();
  1079  0012AC  EC97  F011         	call	_tim0Init	;wreg free
  1080  0012B0                     
  1081                           ;main.c: 34:     tim2Init(10);
  1082  0012B0  0E00               	movlw	0
  1083  0012B2  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1084  0012B4  0E0A               	movlw	10
  1085  0012B6  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1086  0012B8  EC83  F011         	call	_tim2Init	;wreg free
  1087                           
  1088                           ;main.c: 37:     resetPosition();
  1089  0012BC  EC61  F007         	call	_resetPosition	;wreg free
  1090  0012C0                     
  1091                           ;main.c: 40:     usartInit();
  1092  0012C0  EC74  F011         	call	_usartInit	;wreg free
  1093  0012C4                     
  1094                           ;main.c: 41:     RCSTA1bits.CREN = 1;
  1095  0012C4  88AB               	bsf	171,4,c	;volatile
  1096  0012C6                     l4085:
  1097  0012C6  FFFF               	dw	65535	; assembler added errata NOP
  1098                           
  1099                           ;main.c: 44:         if(fatalError()){
  1100  0012C8  EC04  F012         	call	_fatalError	;wreg free
  1101  0012CC  0900               	iorlw	0
  1102  0012CE  B4D8               	btfsc	status,2,c
  1103  0012D0  EF6C  F009         	goto	u3241
  1104  0012D4  EF6F  F009         	goto	u3240
  1105  0012D8                     u3241:
  1106  0012D8  FFFF               	dw	65535	; assembler added errata NOP
  1107  0012DA  EF85  F009         	goto	l4091
  1108  0012DE                     u3240:
  1109  0012DE  FFFF               	dw	65535	; assembler added errata NOP
  1110  0012E0                     
  1111                           ;main.c: 46:             enableMotor(1, 0);
  1112  0012E0  0E00               	movlw	0
  1113  0012E2  6E12               	movwf	enableMotor@motor^0,c
  1114  0012E4  0E01               	movlw	1
  1115  0012E6  EC13  F010         	call	_enableMotor
  1116                           
  1117                           ;main.c: 47:             enableMotor(1, 1);
  1118  0012EA  0E01               	movlw	1
  1119  0012EC  6E12               	movwf	enableMotor@motor^0,c
  1120  0012EE  0E01               	movlw	1
  1121  0012F0  EC13  F010         	call	_enableMotor
  1122                           
  1123                           ;main.c: 48:             enableMotor(1, 2);
  1124  0012F4  0E02               	movlw	2
  1125  0012F6  6E12               	movwf	enableMotor@motor^0,c
  1126  0012F8  0E01               	movlw	1
  1127  0012FA  EC13  F010         	call	_enableMotor
  1128  0012FE                     
  1129                           ;main.c: 50:             printError(7);
  1130  0012FE  0E07               	movlw	7
  1131  001300  ECFF  F00B         	call	_printError
  1132  001304                     l299:
  1133  001304  FFFF               	dw	65535	; assembler added errata NOP
  1134  001306  EF82  F009         	goto	l299
  1135  00130A                     l4091:
  1136  00130A  FFFF               	dw	65535	; assembler added errata NOP
  1137  00130C  EC00  F012         	call	_newSequence	;wreg free
  1138  001310  0900               	iorlw	0
  1139  001312  B4D8               	btfsc	status,2,c
  1140  001314  EF8E  F009         	goto	u3251
  1141  001318  EF91  F009         	goto	u3250
  1142  00131C                     u3251:
  1143  00131C  FFFF               	dw	65535	; assembler added errata NOP
  1144  00131E  EFE1  F009         	goto	l4115
  1145  001322                     u3250:
  1146  001322  FFFF               	dw	65535	; assembler added errata NOP
  1147  001324                     
  1148                           ;main.c: 53:             t_newSequence* newData = getNewSequence();
  1149  001324  ECA0  F011         	call	_getNewSequence	;wreg free
  1150  001328  C012  F1D2         	movff	?_getNewSequence,main@newData
  1151  00132C  C013  F1D3         	movff	?_getNewSequence+1,main@newData+1
  1152  001330                     
  1153                           ;main.c: 55:             newFeeder[0] = newData ->init_posX;
  1154  001330  0101               	movlb	1	; () banked
  1155  001332  EE20 F002          	lfsr	2,2
  1156  001336  51D2               	movf	main@newData& (0+255),w,b
  1157  001338  26D9               	addwf	fsr2l,f,c
  1158  00133A  51D3               	movf	(main@newData+1)& (0+255),w,b
  1159  00133C  22DA               	addwfc	fsr2h,f,c
  1160  00133E  50DF               	movf	indf2,w,c
  1161  001340  6E57               	movwf	_newFeeder^0,c
  1162  001342                     
  1163                           ; BSR set to: 1
  1164                           ;main.c: 56:             newFeeder[1] = newData ->init_posY;
  1165  001342  EE20 F003          	lfsr	2,3
  1166  001346  51D2               	movf	main@newData& (0+255),w,b
  1167  001348  26D9               	addwf	fsr2l,f,c
  1168  00134A  51D3               	movf	(main@newData+1)& (0+255),w,b
  1169  00134C  22DA               	addwfc	fsr2h,f,c
  1170  00134E  50DF               	movf	indf2,w,c
  1171  001350  6E58               	movwf	(_newFeeder+1)^0,c
  1172  001352                     
  1173                           ; BSR set to: 1
  1174                           ;main.c: 60:             RCSTAbits.CREN = 0;
  1175  001352  98AB               	bcf	171,4,c	;volatile
  1176  001354                     
  1177                           ; BSR set to: 1
  1178                           ;main.c: 63:             storeData(0);
  1179  001354  0E00               	movlw	0
  1180  001356  EC02  F00A         	call	_storeData
  1181  00135A                     
  1182                           ;main.c: 64:             storeData(0xFF);
  1183  00135A  0EFF               	movlw	255
  1184  00135C  EC02  F00A         	call	_storeData
  1185  001360                     
  1186                           ;main.c: 65:             storeData(newData ->end_posX);
  1187  001360  0101               	movlb	1	; () banked
  1188  001362  EE20 F005          	lfsr	2,5
  1189  001366  51D2               	movf	main@newData& (0+255),w,b
  1190  001368  26D9               	addwf	fsr2l,f,c
  1191  00136A  51D3               	movf	(main@newData+1)& (0+255),w,b
  1192  00136C  22DA               	addwfc	fsr2h,f,c
  1193  00136E  50DF               	movf	indf2,w,c
  1194  001370  EC02  F00A         	call	_storeData
  1195  001374                     
  1196                           ;main.c: 66:             storeData(newData ->end_posY);
  1197  001374  0101               	movlb	1	; () banked
  1198  001376  EE20 F006          	lfsr	2,6
  1199  00137A  51D2               	movf	main@newData& (0+255),w,b
  1200  00137C  26D9               	addwf	fsr2l,f,c
  1201  00137E  51D3               	movf	(main@newData+1)& (0+255),w,b
  1202  001380  22DA               	addwfc	fsr2h,f,c
  1203  001382  50DF               	movf	indf2,w,c
  1204  001384  EC02  F00A         	call	_storeData
  1205  001388                     
  1206                           ;main.c: 67:             storeData(newData ->end_rot - newData ->init_rot);
  1207  001388  0101               	movlb	1	; () banked
  1208  00138A  EE20 F004          	lfsr	2,4
  1209  00138E  51D2               	movf	main@newData& (0+255),w,b
  1210  001390  26D9               	addwf	fsr2l,f,c
  1211  001392  51D3               	movf	(main@newData+1)& (0+255),w,b
  1212  001394  22DA               	addwfc	fsr2h,f,c
  1213  001396  50DF               	movf	indf2,w,c
  1214  001398  0100               	movlb	0	; () banked
  1215  00139A  6FFE               	movwf	??_main& (0+255),b
  1216  00139C  0101               	movlb	1	; () banked
  1217  00139E  EE20 F007          	lfsr	2,7
  1218  0013A2  51D2               	movf	main@newData& (0+255),w,b
  1219  0013A4  26D9               	addwf	fsr2l,f,c
  1220  0013A6  51D3               	movf	(main@newData+1)& (0+255),w,b
  1221  0013A8  22DA               	addwfc	fsr2h,f,c
  1222  0013AA  50DF               	movf	indf2,w,c
  1223  0013AC  0100               	movlb	0	; () banked
  1224  0013AE  6FFF               	movwf	(??_main+1)& (0+255),b
  1225  0013B0  51FE               	movf	??_main& (0+255),w,b
  1226  0013B2  5DFF               	subwf	(??_main+1)& (0+255),w,b
  1227  0013B4  EC02  F00A         	call	_storeData
  1228  0013B8                     
  1229                           ;main.c: 70:             RCSTAbits.CREN = 1;
  1230  0013B8  88AB               	bsf	171,4,c	;volatile
  1231  0013BA                     
  1232                           ;main.c: 73:             resetNewSequence();
  1233  0013BA  ECD5  F011         	call	_resetNewSequence	;wreg free
  1234                           
  1235                           ;main.c: 75:         }else if(readSeq()){
  1236  0013BE  EF63  F009         	goto	l4085
  1237  0013C2                     l4115:
  1238  0013C2  FFFF               	dw	65535	; assembler added errata NOP
  1239  0013C4  ECFC  F011         	call	_readSeq	;wreg free
  1240  0013C8  0900               	iorlw	0
  1241  0013CA  B4D8               	btfsc	status,2,c
  1242  0013CC  EFEA  F009         	goto	u3261
  1243  0013D0  EFED  F009         	goto	u3260
  1244  0013D4                     u3261:
  1245  0013D4  FFFF               	dw	65535	; assembler added errata NOP
  1246  0013D6  EFFD  F009         	goto	l302
  1247  0013DA                     u3260:
  1248  0013DA  FFFF               	dw	65535	; assembler added errata NOP
  1249  0013DC                     
  1250                           ;main.c: 78:             errCode = executeData();
  1251  0013DC  EC21  F005         	call	_executeData	;wreg free
  1252  0013E0  0101               	movlb	1	; () banked
  1253  0013E2  6FD1               	movwf	main@errCode& (0+255),b
  1254  0013E4                     
  1255                           ; BSR set to: 1
  1256                           ;main.c: 79:             printError(errCode);
  1257  0013E4  51D1               	movf	main@errCode& (0+255),w,b
  1258  0013E6  ECFF  F00B         	call	_printError
  1259  0013EA                     
  1260                           ;main.c: 80:             clearTM0();
  1261  0013EA  ECAE  F011         	call	_clearTM0	;wreg free
  1262  0013EE                     
  1263                           ;main.c: 84:             reduceSeq();
  1264  0013EE  ECF8  F011         	call	_reduceSeq	;wreg free
  1265  0013F2                     
  1266                           ;main.c: 85:             shiftData();
  1267  0013F2  EC87  F010         	call	_shiftData	;wreg free
  1268  0013F6  EF63  F009         	goto	l4085
  1269  0013FA                     l302:
  1270  0013FA  FFFF               	dw	65535	; assembler added errata NOP
  1271  0013FC  EF63  F009         	goto	l4085
  1272  001400  EFB5  F000         	goto	start
  1273  001404                     __end_of_main:
  1274                           	callstack 0
  1275                           
  1276 ;; *************** function _usartInit *****************
  1277 ;; Defined at:
  1278 ;;		line 34 in file "usart.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;		None
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;		None
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg, status,2
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1292 ;;      Params:         0       0       0       0       0       0       0
  1293 ;;      Locals:         0       0       0       0       0       0       0
  1294 ;;      Temps:          0       0       0       0       0       0       0
  1295 ;;      Totals:         0       0       0       0       0       0       0
  1296 ;;Total ram usage:        0 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    4
  1299 ;; This function calls:
  1300 ;;		Nothing
  1301 ;; This function is called by:
  1302 ;;		_main
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           	psect	text1
  1307  0022E8                     __ptext1:
  1308                           	callstack 0
  1309  0022E8                     _usartInit:
  1310                           	callstack 0
  1311  0022E8  FFFF               	dw	65535	; assembler added errata NOP
  1312  0022EA                     
  1313                           ;usart.c: 36:     TRISCbits.TRISC6 = 0;
  1314  0022EA  9C94               	bcf	148,6,c	;volatile
  1315                           
  1316                           ;usart.c: 37:     TRISCbits.TRISC7 = 1;
  1317  0022EC  8E94               	bsf	148,7,c	;volatile
  1318                           
  1319                           ;usart.c: 39:     TXSTAbits.TX9 = 0;
  1320  0022EE  9CAC               	bcf	172,6,c	;volatile
  1321                           
  1322                           ;usart.c: 40:     TXSTAbits.TXEN = 1;
  1323  0022F0  8AAC               	bsf	172,5,c	;volatile
  1324                           
  1325                           ;usart.c: 41:     TXSTAbits.SYNC = 0;
  1326  0022F2  98AC               	bcf	172,4,c	;volatile
  1327                           
  1328                           ;usart.c: 42:     TXSTAbits.BRGH = 0;
  1329  0022F4  94AC               	bcf	172,2,c	;volatile
  1330                           
  1331                           ;usart.c: 44:     RCSTAbits.SPEN = 1;
  1332  0022F6  8EAB               	bsf	171,7,c	;volatile
  1333                           
  1334                           ;usart.c: 45:     RCSTAbits.RX9 = 0;
  1335  0022F8  9CAB               	bcf	171,6,c	;volatile
  1336                           
  1337                           ;usart.c: 46:     RCSTAbits.CREN = 0;
  1338  0022FA  98AB               	bcf	171,4,c	;volatile
  1339                           
  1340                           ;usart.c: 47:     RCSTAbits.ADDEN = 0;
  1341  0022FC  96AB               	bcf	171,3,c	;volatile
  1342  0022FE                     
  1343                           ;usart.c: 50:     SPBRG = 25;
  1344  0022FE  0E19               	movlw	25
  1345  002300  6EAF               	movwf	175,c	;volatile
  1346  002302  0012               	return		;funcret
  1347  002304  FFFF               	dw	65535	; errata NOP
  1348  002306                     __end_of_usartInit:
  1349                           	callstack 0
  1350                           
  1351 ;; *************** function _tim2Init *****************
  1352 ;; Defined at:
  1353 ;;		line 34 in file "pwm.c"
  1354 ;; Parameters:    Size  Location     Type
  1355 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1356 ;; Auto vars:     Size  Location     Type
  1357 ;;		None
  1358 ;; Return value:  Size  Location     Type
  1359 ;;                  1    wreg      void 
  1360 ;; Registers used:
  1361 ;;		wreg, status,2
  1362 ;; Tracked objects:
  1363 ;;		On entry : 0/0
  1364 ;;		On exit  : 0/0
  1365 ;;		Unchanged: 0/0
  1366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1367 ;;      Params:         2       0       0       0       0       0       0
  1368 ;;      Locals:         0       0       0       0       0       0       0
  1369 ;;      Temps:          0       0       0       0       0       0       0
  1370 ;;      Totals:         2       0       0       0       0       0       0
  1371 ;;Total ram usage:        2 bytes
  1372 ;; Hardware stack levels used:    1
  1373 ;; Hardware stack levels required when called:    4
  1374 ;; This function calls:
  1375 ;;		Nothing
  1376 ;; This function is called by:
  1377 ;;		_main
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text2
  1382  002306                     __ptext2:
  1383                           	callstack 0
  1384  002306                     _tim2Init:
  1385                           	callstack 0
  1386  002306  FFFF               	dw	65535	; assembler added errata NOP
  1387  002308                     
  1388                           ;pwm.c: 35:     T2CONbits.TMR2ON = 0;
  1389  002308  94CA               	bcf	202,2,c	;volatile
  1390  00230A                     
  1391                           ;pwm.c: 36:     T2CONbits.T2CKPS = 0x03;
  1392  00230A  0E03               	movlw	3
  1393  00230C  12CA               	iorwf	202,f,c	;volatile
  1394  00230E                     
  1395                           ;pwm.c: 39:     pwmPeriod = _pwmPeriod;
  1396  00230E  C012  F055         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1397  002312  C013  F056         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1398  002316  0012               	return		;funcret
  1399  002318  FFFF               	dw	65535	; errata NOP
  1400  00231A                     __end_of_tim2Init:
  1401                           	callstack 0
  1402                           
  1403 ;; *************** function _tim0Init *****************
  1404 ;; Defined at:
  1405 ;;		line 21 in file "pwm.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;		None
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;		None
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  1    wreg      void 
  1412 ;; Registers used:
  1413 ;;		wreg, status,2
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 0/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1419 ;;      Params:         0       0       0       0       0       0       0
  1420 ;;      Locals:         0       0       0       0       0       0       0
  1421 ;;      Temps:          0       0       0       0       0       0       0
  1422 ;;      Totals:         0       0       0       0       0       0       0
  1423 ;;Total ram usage:        0 bytes
  1424 ;; Hardware stack levels used:    1
  1425 ;; Hardware stack levels required when called:    4
  1426 ;; This function calls:
  1427 ;;		Nothing
  1428 ;; This function is called by:
  1429 ;;		_main
  1430 ;; This function uses a non-reentrant model
  1431 ;;
  1432                           
  1433                           	psect	text3
  1434  00232E                     __ptext3:
  1435                           	callstack 0
  1436  00232E                     _tim0Init:
  1437                           	callstack 0
  1438  00232E  FFFF               	dw	65535	; assembler added errata NOP
  1439  002330                     
  1440                           ;pwm.c: 22:     T0CONbits.TMR0ON = 0;
  1441  002330  9ED5               	bcf	213,7,c	;volatile
  1442                           
  1443                           ;pwm.c: 23:     T0CONbits.T08BIT = 0;
  1444  002332  9CD5               	bcf	213,6,c	;volatile
  1445                           
  1446                           ;pwm.c: 24:     T0CONbits.T0CS = 0;
  1447  002334  9AD5               	bcf	213,5,c	;volatile
  1448                           
  1449                           ;pwm.c: 25:     T0CONbits.PSA = 1;
  1450  002336  86D5               	bsf	213,3,c	;volatile
  1451  002338                     
  1452                           ;pwm.c: 26:     T0CONbits.T0PS = 0x07;
  1453  002338  0E07               	movlw	7
  1454  00233A  12D5               	iorwf	213,f,c	;volatile
  1455  00233C  0012               	return		;funcret
  1456  00233E  FFFF               	dw	65535	; errata NOP
  1457  002340                     __end_of_tim0Init:
  1458                           	callstack 0
  1459                           
  1460 ;; *************** function _storeData *****************
  1461 ;; Defined at:
  1462 ;;		line 131 in file "usart.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;  data            1    wreg     unsigned char 
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;  data            1   26[COMRAM] unsigned char 
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  1    wreg      void 
  1469 ;; Registers used:
  1470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1476 ;;      Params:         0       0       0       0       0       0       0
  1477 ;;      Locals:         1       0       0       0       0       0       0
  1478 ;;      Temps:          2       0       0       0       0       0       0
  1479 ;;      Totals:         3       0       0       0       0       0       0
  1480 ;;Total ram usage:        3 bytes
  1481 ;; Hardware stack levels used:    1
  1482 ;; Hardware stack levels required when called:    6
  1483 ;; This function calls:
  1484 ;;		_printError
  1485 ;; This function is called by:
  1486 ;;		_main
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           	psect	text4
  1491  001404                     __ptext4:
  1492                           	callstack 0
  1493  001404                     _storeData:
  1494                           	callstack 0
  1495  001404  FFFF               	dw	65535	; assembler added errata NOP
  1496                           
  1497                           ;incstack = 0
  1498                           ;storeData@data stored from wreg
  1499  001406  6E1B               	movwf	storeData@data^0,c
  1500  001408                     
  1501                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  1502  001408  0E45               	movlw	low storeData@receivedMex
  1503  00140A  245E               	addwf	storeData@counter^0,w,c
  1504  00140C  6ED9               	movwf	fsr2l,c
  1505  00140E  6ADA               	clrf	fsr2h,c
  1506  001410  0E00               	movlw	high storeData@receivedMex
  1507  001412  22DA               	addwfc	fsr2h,f,c
  1508  001414  C01B  FFDF         	movff	storeData@data,indf2
  1509  001418                     
  1510                           ;usart.c: 142:     counter++;
  1511  001418  2A5E               	incf	storeData@counter^0,f,c
  1512                           
  1513                           ;usart.c: 145:     switch(receivedMex[0]){
  1514  00141A  EF1E  F00A         	goto	l3957
  1515  00141E                     l3949:
  1516  00141E  FFFF               	dw	65535	; assembler added errata NOP
  1517                           
  1518                           ;usart.c: 147:             mexLength = 5;
  1519  001420  0E05               	movlw	5
  1520  001422  6E6D               	movwf	storeData@mexLength^0,c
  1521                           
  1522                           ;usart.c: 148:             break;
  1523  001424  EF39  F00A         	goto	l3959
  1524  001428                     l3951:
  1525  001428  FFFF               	dw	65535	; assembler added errata NOP
  1526                           
  1527                           ;usart.c: 150:             mexLength = 9;
  1528  00142A  0E09               	movlw	9
  1529  00142C  6E6D               	movwf	storeData@mexLength^0,c
  1530                           
  1531                           ;usart.c: 151:             break;
  1532  00142E  EF39  F00A         	goto	l3959
  1533  001432                     l3953:
  1534  001432  FFFF               	dw	65535	; assembler added errata NOP
  1535                           
  1536                           ;usart.c: 153:             mexLength = 1;
  1537  001434  0E01               	movlw	1
  1538  001436  6E6D               	movwf	storeData@mexLength^0,c
  1539                           
  1540                           ;usart.c: 154:             break;
  1541  001438  EF39  F00A         	goto	l3959
  1542  00143C                     l3957:
  1543  00143C  FFFF               	dw	65535	; assembler added errata NOP
  1544  00143E  5045               	movf	storeData@receivedMex^0,w,c
  1545  001440  6E19               	movwf	??_storeData^0,c
  1546  001442  6A1A               	clrf	(??_storeData+1)^0,c
  1547                           
  1548                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1549                           ; Switch size 1, requested type "simple"
  1550                           ; Number of cases is 1, Range of values is 0 to 0
  1551                           ; switch strategies available:
  1552                           ; Name         Instructions Cycles
  1553                           ; simple_byte            4     3 (average)
  1554                           ;	Chosen strategy is simple_byte
  1555  001444  501A               	movf	(??_storeData+1)^0,w,c
  1556  001446  0A00               	xorlw	0	; case 0
  1557  001448  B4D8               	btfsc	status,2,c
  1558  00144A  EF29  F00A         	goto	l4347
  1559  00144E  EF39  F00A         	goto	l3959
  1560  001452                     l4347:
  1561  001452  FFFF               	dw	65535	; assembler added errata NOP
  1562                           
  1563                           ; Switch size 1, requested type "simple"
  1564                           ; Number of cases is 3, Range of values is 0 to 2
  1565                           ; switch strategies available:
  1566                           ; Name         Instructions Cycles
  1567                           ; simple_byte           10     6 (average)
  1568                           ;	Chosen strategy is simple_byte
  1569  001454  5019               	movf	??_storeData^0,w,c
  1570  001456  0A00               	xorlw	0	; case 0
  1571  001458  B4D8               	btfsc	status,2,c
  1572  00145A  EF0F  F00A         	goto	l3949
  1573  00145E  0A01               	xorlw	1	; case 1
  1574  001460  B4D8               	btfsc	status,2,c
  1575  001462  EF14  F00A         	goto	l3951
  1576  001466  0A03               	xorlw	3	; case 2
  1577  001468  B4D8               	btfsc	status,2,c
  1578  00146A  EF19  F00A         	goto	l3953
  1579  00146E  EF39  F00A         	goto	l3959
  1580  001472                     l3959:
  1581  001472  FFFF               	dw	65535	; assembler added errata NOP
  1582                           
  1583                           ;usart.c: 161:     if(counter >= mexLength){
  1584  001474  506D               	movf	storeData@mexLength^0,w,c
  1585  001476  5C5E               	subwf	storeData@counter^0,w,c
  1586  001478  A0D8               	btfss	status,0,c
  1587  00147A  EF41  F00A         	goto	u3201
  1588  00147E  EF44  F00A         	goto	u3200
  1589  001482                     u3201:
  1590  001482  FFFF               	dw	65535	; assembler added errata NOP
  1591  001484  EFB0  F00A         	goto	l552
  1592  001488                     u3200:
  1593  001488  FFFF               	dw	65535	; assembler added errata NOP
  1594  00148A                     
  1595                           ;usart.c: 162:         counter = 0;
  1596  00148A  0E00               	movlw	0
  1597  00148C  6E5E               	movwf	storeData@counter^0,c
  1598                           
  1599                           ;usart.c: 166:         switch(receivedMex[0]){
  1600  00148E  EF95  F00A         	goto	l3975
  1601  001492                     l3963:
  1602  001492  FFFF               	dw	65535	; assembler added errata NOP
  1603                           
  1604                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1605  001494  5061               	movf	_dataCounter^0,w,c
  1606  001496  0D04               	mullw	4
  1607  001498  0ED8               	movlw	low _dataSequence
  1608  00149A  24F3               	addwf	243,w,c
  1609  00149C  6ED9               	movwf	fsr2l,c
  1610  00149E  0E00               	movlw	high _dataSequence
  1611  0014A0  20F4               	addwfc	prodh,w,c
  1612  0014A2  6EDA               	movwf	fsr2h,c
  1613  0014A4  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  1614                           
  1615                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  1616  0014A8  5061               	movf	_dataCounter^0,w,c
  1617  0014AA  0D04               	mullw	4
  1618  0014AC  0ED9               	movlw	low (_dataSequence+1)
  1619  0014AE  24F3               	addwf	243,w,c
  1620  0014B0  6ED9               	movwf	fsr2l,c
  1621  0014B2  0E00               	movlw	high (_dataSequence+1)
  1622  0014B4  20F4               	addwfc	prodh,w,c
  1623  0014B6  6EDA               	movwf	fsr2h,c
  1624  0014B8  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  1625                           
  1626                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  1627  0014BC  5061               	movf	_dataCounter^0,w,c
  1628  0014BE  0D04               	mullw	4
  1629  0014C0  0EDA               	movlw	low (_dataSequence+2)
  1630  0014C2  24F3               	addwf	243,w,c
  1631  0014C4  6ED9               	movwf	fsr2l,c
  1632  0014C6  0E00               	movlw	high (_dataSequence+2)
  1633  0014C8  20F4               	addwfc	prodh,w,c
  1634  0014CA  6EDA               	movwf	fsr2h,c
  1635  0014CC  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  1636                           
  1637                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1638  0014D0  5061               	movf	_dataCounter^0,w,c
  1639  0014D2  0D04               	mullw	4
  1640  0014D4  0EDB               	movlw	low (_dataSequence+3)
  1641  0014D6  24F3               	addwf	243,w,c
  1642  0014D8  6ED9               	movwf	fsr2l,c
  1643  0014DA  0E00               	movlw	high (_dataSequence+3)
  1644  0014DC  20F4               	addwfc	prodh,w,c
  1645  0014DE  6EDA               	movwf	fsr2h,c
  1646  0014E0  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  1647  0014E4                     
  1648                           ;usart.c: 173:                 dataCounter++;
  1649  0014E4  2A61               	incf	_dataCounter^0,f,c
  1650                           
  1651                           ;usart.c: 174:                 break;
  1652  0014E6  EFB0  F00A         	goto	l552
  1653  0014EA                     l549:
  1654  0014EA  FFFF               	dw	65535	; assembler added errata NOP
  1655                           
  1656                           ;usart.c: 179:                 newSequenceData.L = receivedMex[1];
  1657  0014EC  C046  F0EC         	movff	storeData@receivedMex+1,_newSequenceData
  1658                           
  1659                           ;usart.c: 180:                 newSequenceData.W = receivedMex[2];
  1660  0014F0  C047  F0ED         	movff	storeData@receivedMex+2,_newSequenceData+1
  1661                           
  1662                           ;usart.c: 181:                 newSequenceData.init_posX = receivedMex[3];
  1663  0014F4  C048  F0EE         	movff	storeData@receivedMex+3,_newSequenceData+2
  1664                           
  1665                           ;usart.c: 182:                 newSequenceData.init_posY = receivedMex[4];
  1666  0014F8  C049  F0EF         	movff	storeData@receivedMex+4,_newSequenceData+3
  1667                           
  1668                           ;usart.c: 183:                 newSequenceData.init_rot = receivedMex[5];
  1669  0014FC  C04A  F0F0         	movff	storeData@receivedMex+5,_newSequenceData+4
  1670                           
  1671                           ;usart.c: 184:                 newSequenceData.end_posX = receivedMex[6];
  1672  001500  C04B  F0F1         	movff	storeData@receivedMex+6,_newSequenceData+5
  1673                           
  1674                           ;usart.c: 185:                 newSequenceData.end_posY = receivedMex[7];
  1675  001504  C04C  F0F2         	movff	storeData@receivedMex+7,_newSequenceData+6
  1676                           
  1677                           ;usart.c: 186:                 newSequenceData.end_rot = receivedMex[8];
  1678  001508  C04D  F0F3         	movff	storeData@receivedMex+8,_newSequenceData+7
  1679  00150C                     
  1680                           ;usart.c: 188:                 _newSequence = 1;
  1681  00150C  0E01               	movlw	1
  1682  00150E  6E5F               	movwf	__newSequence^0,c
  1683                           
  1684                           ;usart.c: 189:                 break;
  1685  001510  EFB0  F00A         	goto	l552
  1686  001514                     l3969:
  1687  001514  FFFF               	dw	65535	; assembler added errata NOP
  1688                           
  1689                           ;usart.c: 192:                 _fatalError = 1;
  1690  001516  0E01               	movlw	1
  1691  001518  6E60               	movwf	__fatalError^0,c
  1692                           
  1693                           ;usart.c: 193:                 break;
  1694  00151A  EFB0  F00A         	goto	l552
  1695  00151E                     l3971:
  1696  00151E  FFFF               	dw	65535	; assembler added errata NOP
  1697                           
  1698                           ;usart.c: 196:                 printError(8);
  1699  001520  0E08               	movlw	8
  1700  001522  ECFF  F00B         	call	_printError
  1701                           
  1702                           ;usart.c: 197:                 break;
  1703  001526  EFB0  F00A         	goto	l552
  1704  00152A                     l3975:
  1705  00152A  FFFF               	dw	65535	; assembler added errata NOP
  1706  00152C  5045               	movf	storeData@receivedMex^0,w,c
  1707  00152E  6E19               	movwf	??_storeData^0,c
  1708  001530  6A1A               	clrf	(??_storeData+1)^0,c
  1709                           
  1710                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1711                           ; Switch size 1, requested type "simple"
  1712                           ; Number of cases is 1, Range of values is 0 to 0
  1713                           ; switch strategies available:
  1714                           ; Name         Instructions Cycles
  1715                           ; simple_byte            4     3 (average)
  1716                           ;	Chosen strategy is simple_byte
  1717  001532  501A               	movf	(??_storeData+1)^0,w,c
  1718  001534  0A00               	xorlw	0	; case 0
  1719  001536  B4D8               	btfsc	status,2,c
  1720  001538  EFA0  F00A         	goto	l4349
  1721  00153C  EF8F  F00A         	goto	l3971
  1722  001540                     l4349:
  1723  001540  FFFF               	dw	65535	; assembler added errata NOP
  1724                           
  1725                           ; Switch size 1, requested type "simple"
  1726                           ; Number of cases is 3, Range of values is 0 to 2
  1727                           ; switch strategies available:
  1728                           ; Name         Instructions Cycles
  1729                           ; simple_byte           10     6 (average)
  1730                           ;	Chosen strategy is simple_byte
  1731  001542  5019               	movf	??_storeData^0,w,c
  1732  001544  0A00               	xorlw	0	; case 0
  1733  001546  B4D8               	btfsc	status,2,c
  1734  001548  EF49  F00A         	goto	l3963
  1735  00154C  0A01               	xorlw	1	; case 1
  1736  00154E  B4D8               	btfsc	status,2,c
  1737  001550  EF75  F00A         	goto	l549
  1738  001554  0A03               	xorlw	3	; case 2
  1739  001556  B4D8               	btfsc	status,2,c
  1740  001558  EF8A  F00A         	goto	l3969
  1741  00155C  EF8F  F00A         	goto	l3971
  1742  001560                     l552:
  1743  001560  FFFF               	dw	65535	; assembler added errata NOP
  1744  001562  0012               	return		;funcret
  1745  001564  FFFF               	dw	65535	; errata NOP
  1746  001566                     __end_of_storeData:
  1747                           	callstack 0
  1748                           
  1749 ;; *************** function _printError *****************
  1750 ;; Defined at:
  1751 ;;		line 53 in file "usart.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;  errCode         1    wreg     unsigned char 
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;  errCode         1   23[COMRAM] unsigned char 
  1756 ;; Return value:  Size  Location     Type
  1757 ;;                  1    wreg      void 
  1758 ;; Registers used:
  1759 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1765 ;;      Params:         0       0       0       0       0       0       0
  1766 ;;      Locals:         1       0       0       0       0       0       0
  1767 ;;      Temps:          2       0       0       0       0       0       0
  1768 ;;      Totals:         3       0       0       0       0       0       0
  1769 ;;Total ram usage:        3 bytes
  1770 ;; Hardware stack levels used:    1
  1771 ;; Hardware stack levels required when called:    5
  1772 ;; This function calls:
  1773 ;;		_uartTx
  1774 ;; This function is called by:
  1775 ;;		_main
  1776 ;;		_storeData
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           	psect	text5
  1781  0017FE                     __ptext5:
  1782                           	callstack 0
  1783  0017FE                     _printError:
  1784                           	callstack 0
  1785  0017FE  FFFF               	dw	65535	; assembler added errata NOP
  1786                           
  1787                           ;incstack = 0
  1788                           ;printError@errCode stored from wreg
  1789  001800  6E18               	movwf	printError@errCode^0,c
  1790  001802                     
  1791                           ;usart.c: 55:     switch(errCode){
  1792  001802  EF5B  F00C         	goto	l3819
  1793  001806                     l3801:
  1794  001806  FFFF               	dw	65535	; assembler added errata NOP
  1795                           
  1796                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1797  001808  0EA4               	movlw	low _errString_Feed
  1798  00180A  6E12               	movwf	uartTx@ptr^0,c
  1799  00180C  0E00               	movlw	high _errString_Feed
  1800  00180E  6E13               	movwf	(uartTx@ptr+1)^0,c
  1801  001810  0E1D               	movlw	29
  1802  001812  6E14               	movwf	uartTx@length^0,c
  1803  001814  ECE3  F010         	call	_uartTx	;wreg free
  1804                           
  1805                           ;usart.c: 58:             break;
  1806  001818  EF8A  F00C         	goto	l508
  1807  00181C                     l3803:
  1808  00181C  FFFF               	dw	65535	; assembler added errata NOP
  1809                           
  1810                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1811  00181E  0E5C               	movlw	low _errString_ZEND
  1812  001820  6E12               	movwf	uartTx@ptr^0,c
  1813  001822  0E01               	movlw	high _errString_ZEND
  1814  001824  6E13               	movwf	(uartTx@ptr+1)^0,c
  1815  001826  0E28               	movlw	40
  1816  001828  6E14               	movwf	uartTx@length^0,c
  1817  00182A  ECE3  F010         	call	_uartTx	;wreg free
  1818                           
  1819                           ;usart.c: 61:             break;
  1820  00182E  EF8A  F00C         	goto	l508
  1821  001832                     l3805:
  1822  001832  FFFF               	dw	65535	; assembler added errata NOP
  1823                           
  1824                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1825  001834  0E84               	movlw	low _errString_Reset
  1826  001836  6E12               	movwf	uartTx@ptr^0,c
  1827  001838  0E01               	movlw	high _errString_Reset
  1828  00183A  6E13               	movwf	(uartTx@ptr+1)^0,c
  1829  00183C  0E27               	movlw	39
  1830  00183E  6E14               	movwf	uartTx@length^0,c
  1831  001840  ECE3  F010         	call	_uartTx	;wreg free
  1832                           
  1833                           ;usart.c: 64:             break;
  1834  001844  EF8A  F00C         	goto	l508
  1835  001848                     l3807:
  1836  001848  FFFF               	dw	65535	; assembler added errata NOP
  1837                           
  1838                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1839  00184A  0E34               	movlw	low _errString_Point
  1840  00184C  6E12               	movwf	uartTx@ptr^0,c
  1841  00184E  0E01               	movlw	high _errString_Point
  1842  001850  6E13               	movwf	(uartTx@ptr+1)^0,c
  1843  001852  0E28               	movlw	40
  1844  001854  6E14               	movwf	uartTx@length^0,c
  1845  001856  ECE3  F010         	call	_uartTx	;wreg free
  1846                           
  1847                           ;usart.c: 67:             break;
  1848  00185A  EF8A  F00C         	goto	l508
  1849  00185E                     l3809:
  1850  00185E  FFFF               	dw	65535	; assembler added errata NOP
  1851                           
  1852                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  1853  001860  0E84               	movlw	low _errString_Bound
  1854  001862  6E12               	movwf	uartTx@ptr^0,c
  1855  001864  0E00               	movlw	high _errString_Bound
  1856  001866  6E13               	movwf	(uartTx@ptr+1)^0,c
  1857  001868  0E20               	movlw	32
  1858  00186A  6E14               	movwf	uartTx@length^0,c
  1859  00186C  ECE3  F010         	call	_uartTx	;wreg free
  1860                           
  1861                           ;usart.c: 70:             break;
  1862  001870  EF8A  F00C         	goto	l508
  1863  001874                     l3811:
  1864  001874  FFFF               	dw	65535	; assembler added errata NOP
  1865                           
  1866                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  1867  001876  0E00               	movlw	low _errString_PointZ
  1868  001878  6E12               	movwf	uartTx@ptr^0,c
  1869  00187A  0E01               	movlw	high _errString_PointZ
  1870  00187C  6E13               	movwf	(uartTx@ptr+1)^0,c
  1871  00187E  0E34               	movlw	52
  1872  001880  6E14               	movwf	uartTx@length^0,c
  1873  001882  ECE3  F010         	call	_uartTx	;wreg free
  1874                           
  1875                           ;usart.c: 73:             break;
  1876  001886  EF8A  F00C         	goto	l508
  1877  00188A                     l3813:
  1878  00188A  FFFF               	dw	65535	; assembler added errata NOP
  1879                           
  1880                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  1881  00188C  0EAB               	movlw	low _errString_Fatal
  1882  00188E  6E12               	movwf	uartTx@ptr^0,c
  1883  001890  0E01               	movlw	high _errString_Fatal
  1884  001892  6E13               	movwf	(uartTx@ptr+1)^0,c
  1885  001894  0E26               	movlw	38
  1886  001896  6E14               	movwf	uartTx@length^0,c
  1887  001898  ECE3  F010         	call	_uartTx	;wreg free
  1888                           
  1889                           ;usart.c: 76:             break;
  1890  00189C  EF8A  F00C         	goto	l508
  1891  0018A0                     l3815:
  1892  0018A0  FFFF               	dw	65535	; assembler added errata NOP
  1893                           
  1894                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  1895  0018A2  0EC1               	movlw	low _errString_Command
  1896  0018A4  6E12               	movwf	uartTx@ptr^0,c
  1897  0018A6  0E00               	movlw	high _errString_Command
  1898  0018A8  6E13               	movwf	(uartTx@ptr+1)^0,c
  1899  0018AA  0E17               	movlw	23
  1900  0018AC  6E14               	movwf	uartTx@length^0,c
  1901  0018AE  ECE3  F010         	call	_uartTx	;wreg free
  1902                           
  1903                           ;usart.c: 79:             break;
  1904  0018B2  EF8A  F00C         	goto	l508
  1905  0018B6                     l3819:
  1906  0018B6  FFFF               	dw	65535	; assembler added errata NOP
  1907  0018B8  5018               	movf	printError@errCode^0,w,c
  1908  0018BA  6E16               	movwf	??_printError^0,c
  1909  0018BC  6A17               	clrf	(??_printError+1)^0,c
  1910                           
  1911                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1912                           ; Switch size 1, requested type "simple"
  1913                           ; Number of cases is 1, Range of values is 0 to 0
  1914                           ; switch strategies available:
  1915                           ; Name         Instructions Cycles
  1916                           ; simple_byte            4     3 (average)
  1917                           ;	Chosen strategy is simple_byte
  1918  0018BE  5017               	movf	(??_printError+1)^0,w,c
  1919  0018C0  0A00               	xorlw	0	; case 0
  1920  0018C2  B4D8               	btfsc	status,2,c
  1921  0018C4  EF66  F00C         	goto	l4351
  1922  0018C8  EF8A  F00C         	goto	l508
  1923  0018CC                     l4351:
  1924  0018CC  FFFF               	dw	65535	; assembler added errata NOP
  1925                           
  1926                           ; Switch size 1, requested type "simple"
  1927                           ; Number of cases is 8, Range of values is 1 to 8
  1928                           ; switch strategies available:
  1929                           ; Name         Instructions Cycles
  1930                           ; simple_byte           25    13 (average)
  1931                           ;	Chosen strategy is simple_byte
  1932  0018CE  5016               	movf	??_printError^0,w,c
  1933  0018D0  0A01               	xorlw	1	; case 1
  1934  0018D2  B4D8               	btfsc	status,2,c
  1935  0018D4  EF03  F00C         	goto	l3801
  1936  0018D8  0A03               	xorlw	3	; case 2
  1937  0018DA  B4D8               	btfsc	status,2,c
  1938  0018DC  EF0E  F00C         	goto	l3803
  1939  0018E0  0A01               	xorlw	1	; case 3
  1940  0018E2  B4D8               	btfsc	status,2,c
  1941  0018E4  EF19  F00C         	goto	l3805
  1942  0018E8  0A07               	xorlw	7	; case 4
  1943  0018EA  B4D8               	btfsc	status,2,c
  1944  0018EC  EF24  F00C         	goto	l3807
  1945  0018F0  0A01               	xorlw	1	; case 5
  1946  0018F2  B4D8               	btfsc	status,2,c
  1947  0018F4  EF2F  F00C         	goto	l3809
  1948  0018F8  0A03               	xorlw	3	; case 6
  1949  0018FA  B4D8               	btfsc	status,2,c
  1950  0018FC  EF3A  F00C         	goto	l3811
  1951  001900  0A01               	xorlw	1	; case 7
  1952  001902  B4D8               	btfsc	status,2,c
  1953  001904  EF45  F00C         	goto	l3813
  1954  001908  0A0F               	xorlw	15	; case 8
  1955  00190A  B4D8               	btfsc	status,2,c
  1956  00190C  EF50  F00C         	goto	l3815
  1957  001910  EF8A  F00C         	goto	l508
  1958  001914                     l508:
  1959  001914  FFFF               	dw	65535	; assembler added errata NOP
  1960  001916  0012               	return		;funcret
  1961  001918  FFFF               	dw	65535	; errata NOP
  1962  00191A                     __end_of_printError:
  1963                           	callstack 0
  1964                           
  1965 ;; *************** function _uartTx *****************
  1966 ;; Defined at:
  1967 ;;		line 219 in file "usart.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  1970 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  1971 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  1972 ;;  length          1   19[COMRAM] unsigned char 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  i               1   20[COMRAM] unsigned char 
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  1    wreg      void 
  1977 ;; Registers used:
  1978 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1984 ;;      Params:         3       0       0       0       0       0       0
  1985 ;;      Locals:         1       0       0       0       0       0       0
  1986 ;;      Temps:          0       0       0       0       0       0       0
  1987 ;;      Totals:         4       0       0       0       0       0       0
  1988 ;;Total ram usage:        4 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; Hardware stack levels required when called:    4
  1991 ;; This function calls:
  1992 ;;		Nothing
  1993 ;; This function is called by:
  1994 ;;		_printError
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           	psect	text6
  1999  0021C6                     __ptext6:
  2000                           	callstack 0
  2001  0021C6                     _uartTx:
  2002                           	callstack 0
  2003  0021C6  FFFF               	dw	65535	; assembler added errata NOP
  2004  0021C8                     
  2005                           ;usart.c: 219: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 220: {;usa
      +                          rt.c: 222:     for(char i = 1; i < length; i++){
  2006  0021C8  0E01               	movlw	1
  2007  0021CA  6E15               	movwf	uartTx@i^0,c
  2008  0021CC  EFFC  F010         	goto	l3331
  2009  0021D0                     l3327:
  2010  0021D0  FFFF               	dw	65535	; assembler added errata NOP
  2011                           
  2012                           ;usart.c: 224:         TXREG = *ptr;
  2013  0021D2  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2014  0021D6  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2015  0021DA  50DF               	movf	indf2,w,c
  2016  0021DC  6EAD               	movwf	173,c	;volatile
  2017  0021DE                     l563:
  2018  0021DE  FFFF               	dw	65535	; assembler added errata NOP
  2019  0021E0  A2AC               	btfss	172,1,c	;volatile
  2020  0021E2  EFF5  F010         	goto	u2301
  2021  0021E6  EFF8  F010         	goto	u2300
  2022  0021EA                     u2301:
  2023  0021EA  FFFF               	dw	65535	; assembler added errata NOP
  2024  0021EC  EFEF  F010         	goto	l563
  2025  0021F0                     u2300:
  2026  0021F0  FFFF               	dw	65535	; assembler added errata NOP
  2027  0021F2                     
  2028                           ;usart.c: 228:         ptr++;
  2029  0021F2  4A12               	infsnz	uartTx@ptr^0,f,c
  2030  0021F4  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2031                           
  2032                           ;usart.c: 229:     }
  2033  0021F6  2A15               	incf	uartTx@i^0,f,c
  2034  0021F8                     l3331:
  2035  0021F8  FFFF               	dw	65535	; assembler added errata NOP
  2036  0021FA  5014               	movf	uartTx@length^0,w,c
  2037  0021FC  5C15               	subwf	uartTx@i^0,w,c
  2038  0021FE  A0D8               	btfss	status,0,c
  2039  002200  EF04  F011         	goto	u2311
  2040  002204  EF07  F011         	goto	u2310
  2041  002208                     u2311:
  2042  002208  FFFF               	dw	65535	; assembler added errata NOP
  2043  00220A  EFE8  F010         	goto	l3327
  2044  00220E                     u2310:
  2045  00220E  FFFF               	dw	65535	; assembler added errata NOP
  2046  002210  0012               	return		;funcret
  2047  002212  FFFF               	dw	65535	; errata NOP
  2048  002214                     __end_of_uartTx:
  2049                           	callstack 0
  2050                           
  2051 ;; *************** function _shiftData *****************
  2052 ;; Defined at:
  2053 ;;		line 120 in file "usart.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;		None
  2056 ;; Auto vars:     Size  Location     Type
  2057 ;;  i               1   19[COMRAM] unsigned char 
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  1    wreg      void 
  2060 ;; Registers used:
  2061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2067 ;;      Params:         0       0       0       0       0       0       0
  2068 ;;      Locals:         1       0       0       0       0       0       0
  2069 ;;      Temps:          2       0       0       0       0       0       0
  2070 ;;      Totals:         3       0       0       0       0       0       0
  2071 ;;Total ram usage:        3 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; Hardware stack levels required when called:    4
  2074 ;; This function calls:
  2075 ;;		Nothing
  2076 ;; This function is called by:
  2077 ;;		_main
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           	psect	text7
  2082  00210E                     __ptext7:
  2083                           	callstack 0
  2084  00210E                     _shiftData:
  2085                           	callstack 0
  2086  00210E  FFFF               	dw	65535	; assembler added errata NOP
  2087  002110                     
  2088                           ;usart.c: 121:     char i;;usart.c: 123:     for(i = 0; i < 4; i++){
  2089  002110  0E00               	movlw	0
  2090  002112  6E14               	movwf	shiftData@i^0,c
  2091  002114                     l4063:
  2092  002114  FFFF               	dw	65535	; assembler added errata NOP
  2093                           
  2094                           ;usart.c: 124:         dataSequence[i] = dataSequence[i+1];
  2095  002116  5014               	movf	shiftData@i^0,w,c
  2096  002118  6E12               	movwf	??_shiftData^0,c
  2097  00211A  6A13               	clrf	(??_shiftData+1)^0,c
  2098  00211C  90D8               	bcf	status,0,c
  2099  00211E  3612               	rlcf	??_shiftData^0,f,c
  2100  002120  3613               	rlcf	(??_shiftData+1)^0,f,c
  2101  002122  90D8               	bcf	status,0,c
  2102  002124  3612               	rlcf	??_shiftData^0,f,c
  2103  002126  3613               	rlcf	(??_shiftData+1)^0,f,c
  2104  002128  0EDC               	movlw	low (_dataSequence+4)
  2105  00212A  2412               	addwf	??_shiftData^0,w,c
  2106  00212C  6ED9               	movwf	fsr2l,c
  2107  00212E  0E00               	movlw	high (_dataSequence+4)
  2108  002130  2013               	addwfc	(??_shiftData+1)^0,w,c
  2109  002132  6EDA               	movwf	fsr2h,c
  2110  002134  5014               	movf	shiftData@i^0,w,c
  2111  002136  0D04               	mullw	4
  2112  002138  0ED8               	movlw	low _dataSequence
  2113  00213A  24F3               	addwf	243,w,c
  2114  00213C  6EE1               	movwf	fsr1l,c
  2115  00213E  0E00               	movlw	high _dataSequence
  2116  002140  20F4               	addwfc	prodh,w,c
  2117  002142  6EE2               	movwf	fsr1h,c
  2118  002144  CFDE FFE6          	movff	postinc2,postinc1
  2119  002148  CFDE FFE6          	movff	postinc2,postinc1
  2120  00214C  CFDE FFE6          	movff	postinc2,postinc1
  2121  002150  CFDE FFE6          	movff	postinc2,postinc1
  2122  002154                     
  2123                           ;usart.c: 125:     }
  2124  002154  2A14               	incf	shiftData@i^0,f,c
  2125  002156  0E03               	movlw	3
  2126  002158  6414               	cpfsgt	shiftData@i^0,c
  2127  00215A  EFB1  F010         	goto	u3231
  2128  00215E  EFB4  F010         	goto	u3230
  2129  002162                     u3231:
  2130  002162  FFFF               	dw	65535	; assembler added errata NOP
  2131  002164  EF8A  F010         	goto	l4063
  2132  002168                     u3230:
  2133  002168  FFFF               	dw	65535	; assembler added errata NOP
  2134  00216A  0012               	return		;funcret
  2135  00216C  FFFF               	dw	65535	; errata NOP
  2136  00216E                     __end_of_shiftData:
  2137                           	callstack 0
  2138                           
  2139 ;; *************** function _resetPosition *****************
  2140 ;; Defined at:
  2141 ;;		line 160 in file "motors.c"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;		None
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;  keepMovingZ     1   23[COMRAM] unsigned char 
  2146 ;;  keepMovingY     1   22[COMRAM] unsigned char 
  2147 ;;  keepMovingX     1   21[COMRAM] unsigned char 
  2148 ;; Return value:  Size  Location     Type
  2149 ;;                  1    wreg      unsigned char 
  2150 ;; Registers used:
  2151 ;;		wreg, status,2, status,0, cstack
  2152 ;; Tracked objects:
  2153 ;;		On entry : 0/0
  2154 ;;		On exit  : 0/0
  2155 ;;		Unchanged: 0/0
  2156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2157 ;;      Params:         0       0       0       0       0       0       0
  2158 ;;      Locals:         3       0       0       0       0       0       0
  2159 ;;      Temps:          0       0       0       0       0       0       0
  2160 ;;      Totals:         3       0       0       0       0       0       0
  2161 ;;Total ram usage:        3 bytes
  2162 ;; Hardware stack levels used:    1
  2163 ;; Hardware stack levels required when called:    5
  2164 ;; This function calls:
  2165 ;;		_enableMotor
  2166 ;;		_resetStep
  2167 ;;		_setDecay
  2168 ;;		_setDirection
  2169 ;;		_setStep
  2170 ;;		_stepMade
  2171 ;; This function is called by:
  2172 ;;		_main
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text8
  2177  000EC2                     __ptext8:
  2178                           	callstack 0
  2179  000EC2                     _resetPosition:
  2180                           	callstack 0
  2181  000EC2  FFFF               	dw	65535	; assembler added errata NOP
  2182  000EC4                     
  2183                           ;motors.c: 162:     setStep(0, 0);
  2184  000EC4  0E00               	movlw	0
  2185  000EC6  6E12               	movwf	setStep@motor^0,c
  2186  000EC8  0E00               	movlw	0
  2187  000ECA  EC0D  F00E         	call	_setStep
  2188                           
  2189                           ;motors.c: 163:     setStep(1, 0);
  2190  000ECE  0E00               	movlw	0
  2191  000ED0  6E12               	movwf	setStep@motor^0,c
  2192  000ED2  0E01               	movlw	1
  2193  000ED4  EC0D  F00E         	call	_setStep
  2194                           
  2195                           ;motors.c: 164:     setStep(2, 0);
  2196  000ED8  0E00               	movlw	0
  2197  000EDA  6E12               	movwf	setStep@motor^0,c
  2198  000EDC  0E02               	movlw	2
  2199  000EDE  EC0D  F00E         	call	_setStep
  2200                           
  2201                           ;motors.c: 166:     setDirection(0, 0);
  2202  000EE2  0E00               	movlw	0
  2203  000EE4  6E12               	movwf	setDirection@motor^0,c
  2204  000EE6  0E00               	movlw	0
  2205  000EE8  EC4D  F010         	call	_setDirection
  2206                           
  2207                           ;motors.c: 167:     setDirection(0, 1);
  2208  000EEC  0E01               	movlw	1
  2209  000EEE  6E12               	movwf	setDirection@motor^0,c
  2210  000EF0  0E00               	movlw	0
  2211  000EF2  EC4D  F010         	call	_setDirection
  2212                           
  2213                           ;motors.c: 168:     setDirection(0, 2);
  2214  000EF6  0E02               	movlw	2
  2215  000EF8  6E12               	movwf	setDirection@motor^0,c
  2216  000EFA  0E00               	movlw	0
  2217  000EFC  EC4D  F010         	call	_setDirection
  2218                           
  2219                           ;motors.c: 170:     setDecay(1, 0);
  2220  000F00  0E00               	movlw	0
  2221  000F02  6E12               	movwf	setDecay@motor^0,c
  2222  000F04  0E01               	movlw	1
  2223  000F06  ECD9  F00F         	call	_setDecay
  2224                           
  2225                           ;motors.c: 171:     setDecay(1, 1);
  2226  000F0A  0E01               	movlw	1
  2227  000F0C  6E12               	movwf	setDecay@motor^0,c
  2228  000F0E  0E01               	movlw	1
  2229  000F10  ECD9  F00F         	call	_setDecay
  2230                           
  2231                           ;motors.c: 172:     setDecay(1, 2);
  2232  000F14  0E02               	movlw	2
  2233  000F16  6E12               	movwf	setDecay@motor^0,c
  2234  000F18  0E01               	movlw	1
  2235  000F1A  ECD9  F00F         	call	_setDecay
  2236                           
  2237                           ;motors.c: 174:     enableMotor(0, 0);
  2238  000F1E  0E00               	movlw	0
  2239  000F20  6E12               	movwf	enableMotor@motor^0,c
  2240  000F22  0E00               	movlw	0
  2241  000F24  EC13  F010         	call	_enableMotor
  2242                           
  2243                           ;motors.c: 175:     enableMotor(0, 1);
  2244  000F28  0E01               	movlw	1
  2245  000F2A  6E12               	movwf	enableMotor@motor^0,c
  2246  000F2C  0E00               	movlw	0
  2247  000F2E  EC13  F010         	call	_enableMotor
  2248                           
  2249                           ;motors.c: 176:     enableMotor(0, 2);
  2250  000F32  0E02               	movlw	2
  2251  000F34  6E12               	movwf	enableMotor@motor^0,c
  2252  000F36  0E00               	movlw	0
  2253  000F38  EC13  F010         	call	_enableMotor
  2254  000F3C                     
  2255                           ;motors.c: 180:     unsigned char keepMovingX = 1;
  2256  000F3C  0E01               	movlw	1
  2257  000F3E  6E16               	movwf	resetPosition@keepMovingX^0,c
  2258  000F40                     
  2259                           ;motors.c: 181:     unsigned char keepMovingY = 1;
  2260  000F40  0E01               	movlw	1
  2261  000F42  6E17               	movwf	resetPosition@keepMovingY^0,c
  2262  000F44                     
  2263                           ;motors.c: 182:     unsigned char keepMovingZ = 1;
  2264  000F44  0E01               	movlw	1
  2265  000F46  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2266  000F48                     
  2267                           ;motors.c: 185:     T2CONbits.TMR2ON = 1;
  2268  000F48  84CA               	bsf	202,2,c	;volatile
  2269  000F4A                     
  2270                           ;motors.c: 187:     tm0Error = 0;
  2271  000F4A  0E00               	movlw	0
  2272  000F4C  6E5C               	movwf	(_tm0Error+1)^0,c
  2273  000F4E  0E00               	movlw	0
  2274  000F50  6E5B               	movwf	_tm0Error^0,c
  2275  000F52                     
  2276                           ;motors.c: 188:     tm0Limit = 200;
  2277  000F52  0EC8               	movlw	200
  2278  000F54  6E68               	movwf	_tm0Limit^0,c
  2279  000F56                     
  2280                           ;motors.c: 189:     T0CONbits.TMR0ON = 1;
  2281  000F56  8ED5               	bsf	213,7,c	;volatile
  2282                           
  2283                           ;motors.c: 191:     while(keepMovingX || keepMovingY || keepMovingZ){
  2284  000F58  EF2F  F008         	goto	l3887
  2285  000F5C                     l3865:
  2286  000F5C  FFFF               	dw	65535	; assembler added errata NOP
  2287                           
  2288                           ;motors.c: 194:         if(tm0Error){
  2289  000F5E  505B               	movf	_tm0Error^0,w,c
  2290  000F60  105C               	iorwf	(_tm0Error+1)^0,w,c
  2291  000F62  B4D8               	btfsc	status,2,c
  2292  000F64  EFB6  F007         	goto	u3061
  2293  000F68  EFB9  F007         	goto	u3060
  2294  000F6C                     u3061:
  2295  000F6C  FFFF               	dw	65535	; assembler added errata NOP
  2296  000F6E  EFC3  F007         	goto	l115
  2297  000F72                     u3060:
  2298  000F72  FFFF               	dw	65535	; assembler added errata NOP
  2299  000F74                     
  2300                           ;motors.c: 196:             LATAbits.LATA2 = 0;
  2301  000F74  9489               	bcf	137,2,c	;volatile
  2302                           
  2303                           ;motors.c: 197:             LATBbits.LATB4 = 0;
  2304  000F76  988A               	bcf	138,4,c	;volatile
  2305                           
  2306                           ;motors.c: 198:             LATCbits.LATC2 = 0;
  2307  000F78  948B               	bcf	139,2,c	;volatile
  2308  000F7A                     
  2309                           ;motors.c: 200:             tm0Error = 3;
  2310  000F7A  0E00               	movlw	0
  2311  000F7C  6E5C               	movwf	(_tm0Error+1)^0,c
  2312  000F7E  0E03               	movlw	3
  2313  000F80  6E5B               	movwf	_tm0Error^0,c
  2314                           
  2315                           ;motors.c: 201:             break;
  2316  000F82  EF4D  F008         	goto	l116
  2317  000F86                     l115:
  2318  000F86  FFFF               	dw	65535	; assembler added errata NOP
  2319                           
  2320                           ;motors.c: 208:         if(PORTEbits.RE0 || !keepMovingX){
  2321  000F88  B084               	btfsc	132,0,c	;volatile
  2322  000F8A  EFC9  F007         	goto	u3071
  2323  000F8E  EFCC  F007         	goto	u3070
  2324  000F92                     u3071:
  2325  000F92  FFFF               	dw	65535	; assembler added errata NOP
  2326  000F94  EFD6  F007         	goto	l3873
  2327  000F98                     u3070:
  2328  000F98  FFFF               	dw	65535	; assembler added errata NOP
  2329  000F9A  5016               	movf	resetPosition@keepMovingX^0,w,c
  2330  000F9C  A4D8               	btfss	status,2,c
  2331  000F9E  EFD3  F007         	goto	u3081
  2332  000FA2  EFD6  F007         	goto	u3080
  2333  000FA6                     u3081:
  2334  000FA6  FFFF               	dw	65535	; assembler added errata NOP
  2335  000FA8  EFDB  F007         	goto	l117
  2336  000FAC                     u3080:
  2337  000FAC                     l3873:
  2338  000FAC  FFFF               	dw	65535	; assembler added errata NOP
  2339                           
  2340                           ;motors.c: 210:             keepMovingX = 0;
  2341  000FAE  0E00               	movlw	0
  2342  000FB0  6E16               	movwf	resetPosition@keepMovingX^0,c
  2343                           
  2344                           ;motors.c: 211:         }else{
  2345  000FB2  EFDD  F007         	goto	l120
  2346  000FB6                     l117:
  2347  000FB6  FFFF               	dw	65535	; assembler added errata NOP
  2348                           
  2349                           ;motors.c: 213:             LATAbits.LATA2 = 1;
  2350  000FB8  8489               	bsf	137,2,c	;volatile
  2351  000FBA                     l120:
  2352  000FBA  FFFF               	dw	65535	; assembler added errata NOP
  2353                           
  2354                           ;motors.c: 217:         if(PORTEbits.RE1 || !keepMovingY){
  2355  000FBC  B284               	btfsc	132,1,c	;volatile
  2356  000FBE  EFE3  F007         	goto	u3091
  2357  000FC2  EFE6  F007         	goto	u3090
  2358  000FC6                     u3091:
  2359  000FC6  FFFF               	dw	65535	; assembler added errata NOP
  2360  000FC8  EFF0  F007         	goto	l3877
  2361  000FCC                     u3090:
  2362  000FCC  FFFF               	dw	65535	; assembler added errata NOP
  2363  000FCE  5017               	movf	resetPosition@keepMovingY^0,w,c
  2364  000FD0  A4D8               	btfss	status,2,c
  2365  000FD2  EFED  F007         	goto	u3101
  2366  000FD6  EFF0  F007         	goto	u3100
  2367  000FDA                     u3101:
  2368  000FDA  FFFF               	dw	65535	; assembler added errata NOP
  2369  000FDC  EFF5  F007         	goto	l121
  2370  000FE0                     u3100:
  2371  000FE0                     l3877:
  2372  000FE0  FFFF               	dw	65535	; assembler added errata NOP
  2373                           
  2374                           ;motors.c: 219:             keepMovingY = 0;
  2375  000FE2  0E00               	movlw	0
  2376  000FE4  6E17               	movwf	resetPosition@keepMovingY^0,c
  2377                           
  2378                           ;motors.c: 220:         }else{
  2379  000FE6  EFF7  F007         	goto	l124
  2380  000FEA                     l121:
  2381  000FEA  FFFF               	dw	65535	; assembler added errata NOP
  2382                           
  2383                           ;motors.c: 222:             LATBbits.LATB4 = 1;
  2384  000FEC  888A               	bsf	138,4,c	;volatile
  2385  000FEE                     l124:
  2386  000FEE  FFFF               	dw	65535	; assembler added errata NOP
  2387                           
  2388                           ;motors.c: 226:         if(PORTEbits.RE2 || !keepMovingZ){
  2389  000FF0  B484               	btfsc	132,2,c	;volatile
  2390  000FF2  EFFD  F007         	goto	u3111
  2391  000FF6  EF00  F008         	goto	u3110
  2392  000FFA                     u3111:
  2393  000FFA  FFFF               	dw	65535	; assembler added errata NOP
  2394  000FFC  EF0A  F008         	goto	l3881
  2395  001000                     u3110:
  2396  001000  FFFF               	dw	65535	; assembler added errata NOP
  2397  001002  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2398  001004  A4D8               	btfss	status,2,c
  2399  001006  EF07  F008         	goto	u3121
  2400  00100A  EF0A  F008         	goto	u3120
  2401  00100E                     u3121:
  2402  00100E  FFFF               	dw	65535	; assembler added errata NOP
  2403  001010  EF0F  F008         	goto	l125
  2404  001014                     u3120:
  2405  001014                     l3881:
  2406  001014  FFFF               	dw	65535	; assembler added errata NOP
  2407                           
  2408                           ;motors.c: 228:             keepMovingZ = 0;
  2409  001016  0E00               	movlw	0
  2410  001018  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2411                           
  2412                           ;motors.c: 229:         }else{
  2413  00101A  EF11  F008         	goto	l3883
  2414  00101E                     l125:
  2415  00101E  FFFF               	dw	65535	; assembler added errata NOP
  2416                           
  2417                           ;motors.c: 231:             LATCbits.LATC2 = 1;
  2418  001020  848B               	bsf	139,2,c	;volatile
  2419  001022                     l3883:
  2420  001022  FFFF               	dw	65535	; assembler added errata NOP
  2421  001024  EC8D  F011         	call	_stepMade	;wreg free
  2422  001028  5012               	movf	?_stepMade^0,w,c
  2423  00102A  1013               	iorwf	(?_stepMade+1)^0,w,c
  2424  00102C  B4D8               	btfsc	status,2,c
  2425  00102E  EF1B  F008         	goto	u3131
  2426  001032  EF1E  F008         	goto	u3130
  2427  001036                     u3131:
  2428  001036  FFFF               	dw	65535	; assembler added errata NOP
  2429  001038  EF11  F008         	goto	l3883
  2430  00103C                     u3130:
  2431  00103C  FFFF               	dw	65535	; assembler added errata NOP
  2432  00103E                     
  2433                           ;motors.c: 238:         LATAbits.LATA2 = 0;
  2434  00103E  9489               	bcf	137,2,c	;volatile
  2435                           
  2436                           ;motors.c: 239:         LATBbits.LATB4 = 0;
  2437  001040  988A               	bcf	138,4,c	;volatile
  2438                           
  2439                           ;motors.c: 240:         LATCbits.LATC2 = 0;
  2440  001042  948B               	bcf	139,2,c	;volatile
  2441  001044                     l3885:
  2442  001044  FFFF               	dw	65535	; assembler added errata NOP
  2443  001046  EC8D  F011         	call	_stepMade	;wreg free
  2444  00104A  5012               	movf	?_stepMade^0,w,c
  2445  00104C  1013               	iorwf	(?_stepMade+1)^0,w,c
  2446  00104E  B4D8               	btfsc	status,2,c
  2447  001050  EF2C  F008         	goto	u3141
  2448  001054  EF2F  F008         	goto	u3140
  2449  001058                     u3141:
  2450  001058  FFFF               	dw	65535	; assembler added errata NOP
  2451  00105A  EF22  F008         	goto	l3885
  2452  00105E                     u3140:
  2453  00105E                     l3887:
  2454  00105E  FFFF               	dw	65535	; assembler added errata NOP
  2455                           
  2456                           ;motors.c: 191:     while(keepMovingX || keepMovingY || keepMovingZ){
  2457  001060  5016               	movf	resetPosition@keepMovingX^0,w,c
  2458  001062  A4D8               	btfss	status,2,c
  2459  001064  EF36  F008         	goto	u3151
  2460  001068  EF39  F008         	goto	u3150
  2461  00106C                     u3151:
  2462  00106C  FFFF               	dw	65535	; assembler added errata NOP
  2463  00106E  EFAE  F007         	goto	l3865
  2464  001072                     u3150:
  2465  001072  FFFF               	dw	65535	; assembler added errata NOP
  2466  001074  5017               	movf	resetPosition@keepMovingY^0,w,c
  2467  001076  A4D8               	btfss	status,2,c
  2468  001078  EF40  F008         	goto	u3161
  2469  00107C  EF43  F008         	goto	u3160
  2470  001080                     u3161:
  2471  001080  FFFF               	dw	65535	; assembler added errata NOP
  2472  001082  EFAE  F007         	goto	l3865
  2473  001086                     u3160:
  2474  001086  FFFF               	dw	65535	; assembler added errata NOP
  2475  001088  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2476  00108A  A4D8               	btfss	status,2,c
  2477  00108C  EF4A  F008         	goto	u3171
  2478  001090  EF4D  F008         	goto	u3170
  2479  001094                     u3171:
  2480  001094  FFFF               	dw	65535	; assembler added errata NOP
  2481  001096  EFAE  F007         	goto	l3865
  2482  00109A                     u3170:
  2483  00109A                     l116:
  2484  00109A  FFFF               	dw	65535	; assembler added errata NOP
  2485                           
  2486                           ;motors.c: 247:     T0CONbits.TMR0ON = 0;
  2487  00109C  9ED5               	bcf	213,7,c	;volatile
  2488                           
  2489                           ;motors.c: 248:     T2CONbits.TMR2ON = 0;
  2490  00109E  94CA               	bcf	202,2,c	;volatile
  2491  0010A0                     
  2492                           ;motors.c: 250:     TMR0 = 0;
  2493  0010A0  0E00               	movlw	0
  2494  0010A2  6ED7               	movwf	215,c	;volatile
  2495  0010A4  0E00               	movlw	0
  2496  0010A6  6ED6               	movwf	214,c	;volatile
  2497                           
  2498                           ;motors.c: 251:     TMR2 = 0;
  2499  0010A8  0E00               	movlw	0
  2500  0010AA  6ECC               	movwf	204,c	;volatile
  2501  0010AC                     
  2502                           ;motors.c: 254:     resetStep();
  2503  0010AC  ECE4  F011         	call	_resetStep	;wreg free
  2504  0010B0  0012               	return		;funcret
  2505  0010B2  FFFF               	dw	65535	; errata NOP
  2506  0010B4                     __end_of_resetPosition:
  2507                           	callstack 0
  2508                           
  2509 ;; *************** function _setStep *****************
  2510 ;; Defined at:
  2511 ;;		line 69 in file "motors.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;  step            1    wreg     unsigned char 
  2514 ;;  motor           1   17[COMRAM] unsigned char 
  2515 ;; Auto vars:     Size  Location     Type
  2516 ;;  step            1   20[COMRAM] unsigned char 
  2517 ;; Return value:  Size  Location     Type
  2518 ;;                  1    wreg      void 
  2519 ;; Registers used:
  2520 ;;		wreg, status,2, status,0
  2521 ;; Tracked objects:
  2522 ;;		On entry : 0/0
  2523 ;;		On exit  : 0/0
  2524 ;;		Unchanged: 0/0
  2525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2526 ;;      Params:         1       0       0       0       0       0       0
  2527 ;;      Locals:         1       0       0       0       0       0       0
  2528 ;;      Temps:          2       0       0       0       0       0       0
  2529 ;;      Totals:         4       0       0       0       0       0       0
  2530 ;;Total ram usage:        4 bytes
  2531 ;; Hardware stack levels used:    1
  2532 ;; Hardware stack levels required when called:    4
  2533 ;; This function calls:
  2534 ;;		Nothing
  2535 ;; This function is called by:
  2536 ;;		_resetPosition
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text9
  2541  001C1A                     __ptext9:
  2542                           	callstack 0
  2543  001C1A                     _setStep:
  2544                           	callstack 0
  2545  001C1A  FFFF               	dw	65535	; assembler added errata NOP
  2546                           
  2547                           ;incstack = 0
  2548                           ;setStep@step stored from wreg
  2549  001C1C  6E15               	movwf	setStep@step^0,c
  2550  001C1E                     
  2551                           ;motors.c: 70:     switch(motor){
  2552  001C1E  EF5A  F00E         	goto	l3571
  2553  001C22                     l3563:
  2554  001C22  FFFF               	dw	65535	; assembler added errata NOP
  2555                           
  2556                           ;motors.c: 73:             LATAbits.LATA5 = (step & 0x01);
  2557  001C24  C015  F013         	movff	setStep@step,??_setStep
  2558  001C28  0E01               	movlw	1
  2559  001C2A  1613               	andwf	??_setStep^0,f,c
  2560  001C2C  3A13               	swapf	??_setStep^0,f,c
  2561  001C2E  4613               	rlncf	??_setStep^0,f,c
  2562  001C30  5089               	movf	137,w,c	;volatile
  2563  001C32  1813               	xorwf	??_setStep^0,w,c
  2564  001C34  0BDF               	andlw	-33
  2565  001C36  1813               	xorwf	??_setStep^0,w,c
  2566  001C38  6E89               	movwf	137,c	;volatile
  2567                           
  2568                           ;motors.c: 75:             LATBbits.LATB0 = (step & 0x02);
  2569  001C3A  C015  F013         	movff	setStep@step,??_setStep
  2570  001C3E  0E02               	movlw	2
  2571  001C40  1613               	andwf	??_setStep^0,f,c
  2572  001C42  508A               	movf	138,w,c	;volatile
  2573  001C44  1813               	xorwf	??_setStep^0,w,c
  2574  001C46  0BFE               	andlw	-2
  2575  001C48  1813               	xorwf	??_setStep^0,w,c
  2576  001C4A  6E8A               	movwf	138,c	;volatile
  2577                           
  2578                           ;motors.c: 76:             break;
  2579  001C4C  EF75  F00E         	goto	l83
  2580  001C50                     l3565:
  2581  001C50  FFFF               	dw	65535	; assembler added errata NOP
  2582                           
  2583                           ;motors.c: 78:             LATBbits.LATB6 = (step & 0x01);
  2584  001C52  C015  F013         	movff	setStep@step,??_setStep
  2585  001C56  0E01               	movlw	1
  2586  001C58  1613               	andwf	??_setStep^0,f,c
  2587  001C5A  3A13               	swapf	??_setStep^0,f,c
  2588  001C5C  4613               	rlncf	??_setStep^0,f,c
  2589  001C5E  4613               	rlncf	??_setStep^0,f,c
  2590  001C60  508A               	movf	138,w,c	;volatile
  2591  001C62  1813               	xorwf	??_setStep^0,w,c
  2592  001C64  0BBF               	andlw	-65
  2593  001C66  1813               	xorwf	??_setStep^0,w,c
  2594  001C68  6E8A               	movwf	138,c	;volatile
  2595                           
  2596                           ;motors.c: 79:             LATBbits.LATB7 = (step & 0x02);
  2597  001C6A  C015  F013         	movff	setStep@step,??_setStep
  2598  001C6E  0E02               	movlw	2
  2599  001C70  1613               	andwf	??_setStep^0,f,c
  2600  001C72  3213               	rrcf	??_setStep^0,f,c
  2601  001C74  3213               	rrcf	??_setStep^0,f,c
  2602  001C76  508A               	movf	138,w,c	;volatile
  2603  001C78  1813               	xorwf	??_setStep^0,w,c
  2604  001C7A  0B7F               	andlw	-129
  2605  001C7C  1813               	xorwf	??_setStep^0,w,c
  2606  001C7E  6E8A               	movwf	138,c	;volatile
  2607                           
  2608                           ;motors.c: 80:             break;
  2609  001C80  EF75  F00E         	goto	l83
  2610  001C84                     l3567:
  2611  001C84  FFFF               	dw	65535	; assembler added errata NOP
  2612                           
  2613                           ;motors.c: 82:             LATCbits.LATC4 = (step & 0x01);
  2614  001C86  C015  F013         	movff	setStep@step,??_setStep
  2615  001C8A  0E01               	movlw	1
  2616  001C8C  1613               	andwf	??_setStep^0,f,c
  2617  001C8E  3A13               	swapf	??_setStep^0,f,c
  2618  001C90  508B               	movf	139,w,c	;volatile
  2619  001C92  1813               	xorwf	??_setStep^0,w,c
  2620  001C94  0BEF               	andlw	-17
  2621  001C96  1813               	xorwf	??_setStep^0,w,c
  2622  001C98  6E8B               	movwf	139,c	;volatile
  2623                           
  2624                           ;motors.c: 83:             LATCbits.LATC5 = (step & 0x02);
  2625  001C9A  C015  F013         	movff	setStep@step,??_setStep
  2626  001C9E  0E02               	movlw	2
  2627  001CA0  1613               	andwf	??_setStep^0,f,c
  2628  001CA2  3A13               	swapf	??_setStep^0,f,c
  2629  001CA4  4613               	rlncf	??_setStep^0,f,c
  2630  001CA6  508B               	movf	139,w,c	;volatile
  2631  001CA8  1813               	xorwf	??_setStep^0,w,c
  2632  001CAA  0BDF               	andlw	-33
  2633  001CAC  1813               	xorwf	??_setStep^0,w,c
  2634  001CAE  6E8B               	movwf	139,c	;volatile
  2635                           
  2636                           ;motors.c: 84:             break;
  2637  001CB0  EF75  F00E         	goto	l83
  2638  001CB4                     l3571:
  2639  001CB4  FFFF               	dw	65535	; assembler added errata NOP
  2640  001CB6  5012               	movf	setStep@motor^0,w,c
  2641  001CB8  6E13               	movwf	??_setStep^0,c
  2642  001CBA  6A14               	clrf	(??_setStep+1)^0,c
  2643                           
  2644                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2645                           ; Switch size 1, requested type "simple"
  2646                           ; Number of cases is 1, Range of values is 0 to 0
  2647                           ; switch strategies available:
  2648                           ; Name         Instructions Cycles
  2649                           ; simple_byte            4     3 (average)
  2650                           ;	Chosen strategy is simple_byte
  2651  001CBC  5014               	movf	(??_setStep+1)^0,w,c
  2652  001CBE  0A00               	xorlw	0	; case 0
  2653  001CC0  B4D8               	btfsc	status,2,c
  2654  001CC2  EF65  F00E         	goto	l4353
  2655  001CC6  EF75  F00E         	goto	l83
  2656  001CCA                     l4353:
  2657  001CCA  FFFF               	dw	65535	; assembler added errata NOP
  2658                           
  2659                           ; Switch size 1, requested type "simple"
  2660                           ; Number of cases is 3, Range of values is 0 to 2
  2661                           ; switch strategies available:
  2662                           ; Name         Instructions Cycles
  2663                           ; simple_byte           10     6 (average)
  2664                           ;	Chosen strategy is simple_byte
  2665  001CCC  5013               	movf	??_setStep^0,w,c
  2666  001CCE  0A00               	xorlw	0	; case 0
  2667  001CD0  B4D8               	btfsc	status,2,c
  2668  001CD2  EF11  F00E         	goto	l3563
  2669  001CD6  0A01               	xorlw	1	; case 1
  2670  001CD8  B4D8               	btfsc	status,2,c
  2671  001CDA  EF28  F00E         	goto	l3565
  2672  001CDE  0A03               	xorlw	3	; case 2
  2673  001CE0  B4D8               	btfsc	status,2,c
  2674  001CE2  EF42  F00E         	goto	l3567
  2675  001CE6  EF75  F00E         	goto	l83
  2676  001CEA                     l83:
  2677  001CEA  FFFF               	dw	65535	; assembler added errata NOP
  2678  001CEC  0012               	return		;funcret
  2679  001CEE  FFFF               	dw	65535	; errata NOP
  2680  001CF0                     __end_of_setStep:
  2681                           	callstack 0
  2682                           
  2683 ;; *************** function _setDecay *****************
  2684 ;; Defined at:
  2685 ;;		line 138 in file "motors.c"
  2686 ;; Parameters:    Size  Location     Type
  2687 ;;  decay           1    wreg     unsigned char 
  2688 ;;  motor           1   17[COMRAM] unsigned char 
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;  decay           1   20[COMRAM] unsigned char 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, status,2, status,0
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2700 ;;      Params:         1       0       0       0       0       0       0
  2701 ;;      Locals:         1       0       0       0       0       0       0
  2702 ;;      Temps:          2       0       0       0       0       0       0
  2703 ;;      Totals:         4       0       0       0       0       0       0
  2704 ;;Total ram usage:        4 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    4
  2707 ;; This function calls:
  2708 ;;		Nothing
  2709 ;; This function is called by:
  2710 ;;		_resetPosition
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text10
  2715  001FB2                     __ptext10:
  2716                           	callstack 0
  2717  001FB2                     _setDecay:
  2718                           	callstack 0
  2719  001FB2  FFFF               	dw	65535	; assembler added errata NOP
  2720                           
  2721                           ;incstack = 0
  2722                           ;setDecay@decay stored from wreg
  2723  001FB4  6E15               	movwf	setDecay@decay^0,c
  2724  001FB6                     
  2725                           ;motors.c: 139:     switch(motor){
  2726  001FB6  EFF5  F00F         	goto	l3603
  2727  001FBA                     l3595:
  2728  001FBA  FFFF               	dw	65535	; assembler added errata NOP
  2729                           
  2730                           ;motors.c: 141:             LATBbits.LATB2 = decay;
  2731  001FBC  B015               	btfsc	setDecay@decay^0,0,c
  2732  001FBE  D002               	bra	u2755
  2733  001FC0  948A               	bcf	138,2,c	;volatile
  2734  001FC2  D001               	bra	u2756
  2735  001FC4                     u2755:
  2736  001FC4  848A               	bsf	138,2,c	;volatile
  2737  001FC6                     u2756:
  2738                           
  2739                           ;motors.c: 142:             break;
  2740  001FC6  EF10  F010         	goto	l110
  2741  001FCA                     l3597:
  2742  001FCA  FFFF               	dw	65535	; assembler added errata NOP
  2743                           
  2744                           ;motors.c: 144:             LATCbits.LATC0 = decay;
  2745  001FCC  B015               	btfsc	setDecay@decay^0,0,c
  2746  001FCE  D002               	bra	u2765
  2747  001FD0  908B               	bcf	139,0,c	;volatile
  2748  001FD2  D001               	bra	u2766
  2749  001FD4                     u2765:
  2750  001FD4  808B               	bsf	139,0,c	;volatile
  2751  001FD6                     u2766:
  2752                           
  2753                           ;motors.c: 145:             break;
  2754  001FD6  EF10  F010         	goto	l110
  2755  001FDA                     l3599:
  2756  001FDA  FFFF               	dw	65535	; assembler added errata NOP
  2757                           
  2758                           ;motors.c: 147:             LATDbits.LATD0 = decay;
  2759  001FDC  B015               	btfsc	setDecay@decay^0,0,c
  2760  001FDE  D002               	bra	u2775
  2761  001FE0  908C               	bcf	140,0,c	;volatile
  2762  001FE2  D001               	bra	u2776
  2763  001FE4                     u2775:
  2764  001FE4  808C               	bsf	140,0,c	;volatile
  2765  001FE6                     u2776:
  2766                           
  2767                           ;motors.c: 148:             break;
  2768  001FE6  EF10  F010         	goto	l110
  2769  001FEA                     l3603:
  2770  001FEA  FFFF               	dw	65535	; assembler added errata NOP
  2771  001FEC  5012               	movf	setDecay@motor^0,w,c
  2772  001FEE  6E13               	movwf	??_setDecay^0,c
  2773  001FF0  6A14               	clrf	(??_setDecay+1)^0,c
  2774                           
  2775                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2776                           ; Switch size 1, requested type "simple"
  2777                           ; Number of cases is 1, Range of values is 0 to 0
  2778                           ; switch strategies available:
  2779                           ; Name         Instructions Cycles
  2780                           ; simple_byte            4     3 (average)
  2781                           ;	Chosen strategy is simple_byte
  2782  001FF2  5014               	movf	(??_setDecay+1)^0,w,c
  2783  001FF4  0A00               	xorlw	0	; case 0
  2784  001FF6  B4D8               	btfsc	status,2,c
  2785  001FF8  EF00  F010         	goto	l4355
  2786  001FFC  EF10  F010         	goto	l110
  2787  002000                     l4355:
  2788  002000  FFFF               	dw	65535	; assembler added errata NOP
  2789                           
  2790                           ; Switch size 1, requested type "simple"
  2791                           ; Number of cases is 3, Range of values is 0 to 2
  2792                           ; switch strategies available:
  2793                           ; Name         Instructions Cycles
  2794                           ; simple_byte           10     6 (average)
  2795                           ;	Chosen strategy is simple_byte
  2796  002002  5013               	movf	??_setDecay^0,w,c
  2797  002004  0A00               	xorlw	0	; case 0
  2798  002006  B4D8               	btfsc	status,2,c
  2799  002008  EFDD  F00F         	goto	l3595
  2800  00200C  0A01               	xorlw	1	; case 1
  2801  00200E  B4D8               	btfsc	status,2,c
  2802  002010  EFE5  F00F         	goto	l3597
  2803  002014  0A03               	xorlw	3	; case 2
  2804  002016  B4D8               	btfsc	status,2,c
  2805  002018  EFED  F00F         	goto	l3599
  2806  00201C  EF10  F010         	goto	l110
  2807  002020                     l110:
  2808  002020  FFFF               	dw	65535	; assembler added errata NOP
  2809  002022  0012               	return		;funcret
  2810  002024  FFFF               	dw	65535	; errata NOP
  2811  002026                     __end_of_setDecay:
  2812                           	callstack 0
  2813                           
  2814 ;; *************** function _enableMotor *****************
  2815 ;; Defined at:
  2816 ;;		line 96 in file "motors.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  enable          1    wreg     unsigned char 
  2819 ;;  motor           1   17[COMRAM] unsigned char 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  enable          1   20[COMRAM] unsigned char 
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  1    wreg      void 
  2824 ;; Registers used:
  2825 ;;		wreg, status,2, status,0
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2831 ;;      Params:         1       0       0       0       0       0       0
  2832 ;;      Locals:         1       0       0       0       0       0       0
  2833 ;;      Temps:          2       0       0       0       0       0       0
  2834 ;;      Totals:         4       0       0       0       0       0       0
  2835 ;;Total ram usage:        4 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    4
  2838 ;; This function calls:
  2839 ;;		Nothing
  2840 ;; This function is called by:
  2841 ;;		_resetPosition
  2842 ;;		_main
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           	psect	text11
  2847  002026                     __ptext11:
  2848                           	callstack 0
  2849  002026                     _enableMotor:
  2850                           	callstack 0
  2851  002026  FFFF               	dw	65535	; assembler added errata NOP
  2852                           
  2853                           ;incstack = 0
  2854                           ;enableMotor@enable stored from wreg
  2855  002028  6E15               	movwf	enableMotor@enable^0,c
  2856  00202A                     
  2857                           ;motors.c: 97:     switch(motor){
  2858  00202A  EF2F  F010         	goto	l3587
  2859  00202E                     l3579:
  2860  00202E  FFFF               	dw	65535	; assembler added errata NOP
  2861                           
  2862                           ;motors.c: 99:             LATAbits.LATA3 = enable;
  2863  002030  B015               	btfsc	enableMotor@enable^0,0,c
  2864  002032  D002               	bra	u2725
  2865  002034  9689               	bcf	137,3,c	;volatile
  2866  002036  D001               	bra	u2726
  2867  002038                     u2725:
  2868  002038  8689               	bsf	137,3,c	;volatile
  2869  00203A                     u2726:
  2870                           
  2871                           ;motors.c: 100:             break;
  2872  00203A  EF4A  F010         	goto	l92
  2873  00203E                     l3581:
  2874  00203E  FFFF               	dw	65535	; assembler added errata NOP
  2875                           
  2876                           ;motors.c: 102:             LATBbits.LATB5 = enable;
  2877  002040  B015               	btfsc	enableMotor@enable^0,0,c
  2878  002042  D002               	bra	u2735
  2879  002044  9A8A               	bcf	138,5,c	;volatile
  2880  002046  D001               	bra	u2736
  2881  002048                     u2735:
  2882  002048  8A8A               	bsf	138,5,c	;volatile
  2883  00204A                     u2736:
  2884                           
  2885                           ;motors.c: 103:             break;
  2886  00204A  EF4A  F010         	goto	l92
  2887  00204E                     l3583:
  2888  00204E  FFFF               	dw	65535	; assembler added errata NOP
  2889                           
  2890                           ;motors.c: 105:             LATCbits.LATC3 = enable;
  2891  002050  B015               	btfsc	enableMotor@enable^0,0,c
  2892  002052  D002               	bra	u2745
  2893  002054  968B               	bcf	139,3,c	;volatile
  2894  002056  D001               	bra	u2746
  2895  002058                     u2745:
  2896  002058  868B               	bsf	139,3,c	;volatile
  2897  00205A                     u2746:
  2898                           
  2899                           ;motors.c: 106:             break;
  2900  00205A  EF4A  F010         	goto	l92
  2901  00205E                     l3587:
  2902  00205E  FFFF               	dw	65535	; assembler added errata NOP
  2903  002060  5012               	movf	enableMotor@motor^0,w,c
  2904  002062  6E13               	movwf	??_enableMotor^0,c
  2905  002064  6A14               	clrf	(??_enableMotor+1)^0,c
  2906                           
  2907                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2908                           ; Switch size 1, requested type "simple"
  2909                           ; Number of cases is 1, Range of values is 0 to 0
  2910                           ; switch strategies available:
  2911                           ; Name         Instructions Cycles
  2912                           ; simple_byte            4     3 (average)
  2913                           ;	Chosen strategy is simple_byte
  2914  002066  5014               	movf	(??_enableMotor+1)^0,w,c
  2915  002068  0A00               	xorlw	0	; case 0
  2916  00206A  B4D8               	btfsc	status,2,c
  2917  00206C  EF3A  F010         	goto	l4357
  2918  002070  EF4A  F010         	goto	l92
  2919  002074                     l4357:
  2920  002074  FFFF               	dw	65535	; assembler added errata NOP
  2921                           
  2922                           ; Switch size 1, requested type "simple"
  2923                           ; Number of cases is 3, Range of values is 0 to 2
  2924                           ; switch strategies available:
  2925                           ; Name         Instructions Cycles
  2926                           ; simple_byte           10     6 (average)
  2927                           ;	Chosen strategy is simple_byte
  2928  002076  5013               	movf	??_enableMotor^0,w,c
  2929  002078  0A00               	xorlw	0	; case 0
  2930  00207A  B4D8               	btfsc	status,2,c
  2931  00207C  EF17  F010         	goto	l3579
  2932  002080  0A01               	xorlw	1	; case 1
  2933  002082  B4D8               	btfsc	status,2,c
  2934  002084  EF1F  F010         	goto	l3581
  2935  002088  0A03               	xorlw	3	; case 2
  2936  00208A  B4D8               	btfsc	status,2,c
  2937  00208C  EF27  F010         	goto	l3583
  2938  002090  EF4A  F010         	goto	l92
  2939  002094                     l92:
  2940  002094  FFFF               	dw	65535	; assembler added errata NOP
  2941  002096  0012               	return		;funcret
  2942  002098  FFFF               	dw	65535	; errata NOP
  2943  00209A                     __end_of_enableMotor:
  2944                           	callstack 0
  2945                           
  2946 ;; *************** function _resetNewSequence *****************
  2947 ;; Defined at:
  2948 ;;		line 112 in file "usart.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;		None
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;		None
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      void 
  2955 ;; Registers used:
  2956 ;;		wreg, status,2
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2962 ;;      Params:         0       0       0       0       0       0       0
  2963 ;;      Locals:         0       0       0       0       0       0       0
  2964 ;;      Temps:          0       0       0       0       0       0       0
  2965 ;;      Totals:         0       0       0       0       0       0       0
  2966 ;;Total ram usage:        0 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    4
  2969 ;; This function calls:
  2970 ;;		Nothing
  2971 ;; This function is called by:
  2972 ;;		_main
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text12
  2977  0023AA                     __ptext12:
  2978                           	callstack 0
  2979  0023AA                     _resetNewSequence:
  2980                           	callstack 0
  2981  0023AA  FFFF               	dw	65535	; assembler added errata NOP
  2982  0023AC                     
  2983                           ;usart.c: 113:     _newSequence = 0;
  2984  0023AC  0E00               	movlw	0
  2985  0023AE  6E5F               	movwf	__newSequence^0,c
  2986  0023B0  0012               	return		;funcret
  2987  0023B2  FFFF               	dw	65535	; errata NOP
  2988  0023B4                     __end_of_resetNewSequence:
  2989                           	callstack 0
  2990                           
  2991 ;; *************** function _reduceSeq *****************
  2992 ;; Defined at:
  2993 ;;		line 89 in file "usart.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;		None
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;		None
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		status,2, status,0
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3007 ;;      Params:         0       0       0       0       0       0       0
  3008 ;;      Locals:         0       0       0       0       0       0       0
  3009 ;;      Temps:          0       0       0       0       0       0       0
  3010 ;;      Totals:         0       0       0       0       0       0       0
  3011 ;;Total ram usage:        0 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    4
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		_main
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text13
  3022  0023F0                     __ptext13:
  3023                           	callstack 0
  3024  0023F0                     _reduceSeq:
  3025                           	callstack 0
  3026  0023F0  FFFF               	dw	65535	; assembler added errata NOP
  3027  0023F2                     
  3028                           ;usart.c: 90:     dataCounter--;
  3029  0023F2  0661               	decf	_dataCounter^0,f,c
  3030  0023F4  0012               	return		;funcret
  3031  0023F6  FFFF               	dw	65535	; errata NOP
  3032  0023F8                     __end_of_reduceSeq:
  3033                           	callstack 0
  3034                           
  3035 ;; *************** function _readSeq *****************
  3036 ;; Defined at:
  3037 ;;		line 96 in file "usart.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;		None
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;		None
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  1    wreg      unsigned char 
  3044 ;; Registers used:
  3045 ;;		wreg, status,2
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3051 ;;      Params:         0       0       0       0       0       0       0
  3052 ;;      Locals:         0       0       0       0       0       0       0
  3053 ;;      Temps:          0       0       0       0       0       0       0
  3054 ;;      Totals:         0       0       0       0       0       0       0
  3055 ;;Total ram usage:        0 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:    4
  3058 ;; This function calls:
  3059 ;;		Nothing
  3060 ;; This function is called by:
  3061 ;;		_main
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text14
  3066  0023F8                     __ptext14:
  3067                           	callstack 0
  3068  0023F8                     _readSeq:
  3069                           	callstack 0
  3070  0023F8  FFFF               	dw	65535	; assembler added errata NOP
  3071  0023FA                     
  3072                           ;usart.c: 97:     return dataCounter;
  3073  0023FA  5061               	movf	_dataCounter^0,w,c
  3074  0023FC  0012               	return		;funcret
  3075  0023FE  FFFF               	dw	65535	; errata NOP
  3076  002400                     __end_of_readSeq:
  3077                           	callstack 0
  3078                           
  3079 ;; *************** function _newSequence *****************
  3080 ;; Defined at:
  3081 ;;		line 104 in file "usart.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;		None
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;		None
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      unsigned char 
  3088 ;; Registers used:
  3089 ;;		wreg, status,2
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3095 ;;      Params:         0       0       0       0       0       0       0
  3096 ;;      Locals:         0       0       0       0       0       0       0
  3097 ;;      Temps:          0       0       0       0       0       0       0
  3098 ;;      Totals:         0       0       0       0       0       0       0
  3099 ;;Total ram usage:        0 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    4
  3102 ;; This function calls:
  3103 ;;		Nothing
  3104 ;; This function is called by:
  3105 ;;		_main
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           	psect	text15
  3110  002400                     __ptext15:
  3111                           	callstack 0
  3112  002400                     _newSequence:
  3113                           	callstack 0
  3114  002400  FFFF               	dw	65535	; assembler added errata NOP
  3115  002402                     
  3116                           ;usart.c: 105:     return _newSequence;
  3117  002402  505F               	movf	__newSequence^0,w,c
  3118  002404  0012               	return		;funcret
  3119  002406  FFFF               	dw	65535	; errata NOP
  3120  002408                     __end_of_newSequence:
  3121                           	callstack 0
  3122                           
  3123 ;; *************** function _interruptInit *****************
  3124 ;; Defined at:
  3125 ;;		line 98 in file "main.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;		None
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;		None
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      void 
  3132 ;; Registers used:
  3133 ;;		None
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3139 ;;      Params:         0       0       0       0       0       0       0
  3140 ;;      Locals:         0       0       0       0       0       0       0
  3141 ;;      Temps:          0       0       0       0       0       0       0
  3142 ;;      Totals:         0       0       0       0       0       0       0
  3143 ;;Total ram usage:        0 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:    4
  3146 ;; This function calls:
  3147 ;;		Nothing
  3148 ;; This function is called by:
  3149 ;;		_main
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           	psect	text16
  3154  002262                     __ptext16:
  3155                           	callstack 0
  3156  002262                     _interruptInit:
  3157                           	callstack 0
  3158  002262  FFFF               	dw	65535	; assembler added errata NOP
  3159  002264                     
  3160                           ;main.c: 100:     if(!INTCONbits.GIE){
  3161  002264  BEF2               	btfsc	242,7,c	;volatile
  3162  002266  EF37  F011         	goto	u3181
  3163  00226A  EF3A  F011         	goto	u3180
  3164  00226E                     u3181:
  3165  00226E  FFFF               	dw	65535	; assembler added errata NOP
  3166  002270  EF3C  F011         	goto	l311
  3167  002274                     u3180:
  3168  002274  FFFF               	dw	65535	; assembler added errata NOP
  3169  002276                     
  3170                           ;main.c: 101:         INTCONbits.GIE = 1;
  3171  002276  8EF2               	bsf	242,7,c	;volatile
  3172  002278                     l311:
  3173  002278  FFFF               	dw	65535	; assembler added errata NOP
  3174                           
  3175                           ;main.c: 103:     if(!INTCONbits.PEIE){
  3176  00227A  BCF2               	btfsc	242,6,c	;volatile
  3177  00227C  EF42  F011         	goto	u3191
  3178  002280  EF45  F011         	goto	u3190
  3179  002284                     u3191:
  3180  002284  FFFF               	dw	65535	; assembler added errata NOP
  3181  002286  EF47  F011         	goto	l312
  3182  00228A                     u3190:
  3183  00228A  FFFF               	dw	65535	; assembler added errata NOP
  3184  00228C                     
  3185                           ;main.c: 104:         INTCONbits.PEIE = 1;
  3186  00228C  8CF2               	bsf	242,6,c	;volatile
  3187  00228E                     l312:
  3188  00228E  FFFF               	dw	65535	; assembler added errata NOP
  3189                           
  3190                           ;main.c: 108:     RCONbits.IPEN = 1;
  3191  002290  8ED0               	bsf	208,7,c	;volatile
  3192                           
  3193                           ;main.c: 109:     INTCONbits.T0IE = 1;
  3194  002292  8AF2               	bsf	242,5,c	;volatile
  3195                           
  3196                           ;main.c: 110:     PIE1bits.TMR2IE = 1;
  3197  002294  829D               	bsf	157,1,c	;volatile
  3198                           
  3199                           ;main.c: 111:     PIE1bits.RC1IE = 1;
  3200  002296  8A9D               	bsf	157,5,c	;volatile
  3201  002298  0012               	return		;funcret
  3202  00229A  FFFF               	dw	65535	; errata NOP
  3203  00229C                     __end_of_interruptInit:
  3204                           	callstack 0
  3205                           
  3206 ;; *************** function _initPinMotors *****************
  3207 ;; Defined at:
  3208 ;;		line 44 in file "motors.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;		None
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;		None
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  1    wreg      void 
  3215 ;; Registers used:
  3216 ;;		wreg, status,2, status,0
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3222 ;;      Params:         0       0       0       0       0       0       0
  3223 ;;      Locals:         0       0       0       0       0       0       0
  3224 ;;      Temps:          0       0       0       0       0       0       0
  3225 ;;      Totals:         0       0       0       0       0       0       0
  3226 ;;Total ram usage:        0 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    4
  3229 ;; This function calls:
  3230 ;;		Nothing
  3231 ;; This function is called by:
  3232 ;;		_main
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text17
  3237  00229C                     __ptext17:
  3238                           	callstack 0
  3239  00229C                     _initPinMotors:
  3240                           	callstack 0
  3241  00229C  FFFF               	dw	65535	; assembler added errata NOP
  3242  00229E                     
  3243                           ;motors.c: 46:     ADCON1bits.PCFG = 0x06;
  3244  00229E  50C1               	movf	193,w,c	;volatile
  3245  0022A0  0BF0               	andlw	-16
  3246  0022A2  0906               	iorlw	6
  3247  0022A4  6EC1               	movwf	193,c	;volatile
  3248  0022A6                     
  3249                           ;motors.c: 47:     TRISA &= 0b11010001;
  3250  0022A6  0ED1               	movlw	209
  3251  0022A8  1692               	andwf	146,f,c	;volatile
  3252  0022AA                     
  3253                           ;motors.c: 49:     TRISB &= 0b00000010;
  3254  0022AA  0E02               	movlw	2
  3255  0022AC  1693               	andwf	147,f,c	;volatile
  3256  0022AE                     
  3257                           ;motors.c: 50:     TRISC &= 0b11000000;
  3258  0022AE  0EC0               	movlw	192
  3259  0022B0  1694               	andwf	148,f,c	;volatile
  3260  0022B2                     
  3261                           ;motors.c: 51:     TRISD &= 0b11000000;
  3262  0022B2  0EC0               	movlw	192
  3263  0022B4  1695               	andwf	149,f,c	;volatile
  3264  0022B6                     
  3265                           ;motors.c: 54:     TRISEbits.TRISE0 = 1;
  3266  0022B6  8096               	bsf	150,0,c	;volatile
  3267  0022B8                     
  3268                           ;motors.c: 55:     TRISEbits.TRISE1 = 1;
  3269  0022B8  8296               	bsf	150,1,c	;volatile
  3270  0022BA                     
  3271                           ;motors.c: 56:     TRISEbits.TRISE2 = 1;
  3272  0022BA  8496               	bsf	150,2,c	;volatile
  3273  0022BC                     
  3274                           ;motors.c: 59:     TRISDbits.TRISD7 = 1;
  3275  0022BC  8E95               	bsf	149,7,c	;volatile
  3276  0022BE  0012               	return		;funcret
  3277  0022C0  FFFF               	dw	65535	; errata NOP
  3278  0022C2                     __end_of_initPinMotors:
  3279                           	callstack 0
  3280                           
  3281 ;; *************** function _initADC *****************
  3282 ;; Defined at:
  3283 ;;		line 18 in file "adc.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;		None
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;		None
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  1    wreg      void 
  3290 ;; Registers used:
  3291 ;;		wreg, status,2
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3297 ;;      Params:         0       0       0       0       0       0       0
  3298 ;;      Locals:         0       0       0       0       0       0       0
  3299 ;;      Temps:          0       0       0       0       0       0       0
  3300 ;;      Totals:         0       0       0       0       0       0       0
  3301 ;;Total ram usage:        0 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; Hardware stack levels required when called:    4
  3304 ;; This function calls:
  3305 ;;		Nothing
  3306 ;; This function is called by:
  3307 ;;		_main
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           	psect	text18
  3312  0022C2                     __ptext18:
  3313                           	callstack 0
  3314  0022C2                     _initADC:
  3315                           	callstack 0
  3316  0022C2  FFFF               	dw	65535	; assembler added errata NOP
  3317  0022C4                     
  3318                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3319  0022C4  50C2               	movf	194,w,c	;volatile
  3320  0022C6  0B3F               	andlw	-193
  3321  0022C8  0940               	iorlw	64
  3322  0022CA  6EC2               	movwf	194,c	;volatile
  3323  0022CC                     
  3324                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3325  0022CC  8CC1               	bsf	193,6,c	;volatile
  3326                           
  3327                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3328  0022CE  0EC7               	movlw	-57
  3329  0022D0  16C2               	andwf	194,f,c	;volatile
  3330  0022D2                     
  3331                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3332  0022D2  94C2               	bcf	194,2,c	;volatile
  3333  0022D4                     
  3334                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3335  0022D4  90C2               	bcf	194,0,c	;volatile
  3336  0022D6                     
  3337                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3338  0022D6  9EC1               	bcf	193,7,c	;volatile
  3339                           
  3340                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3341  0022D8  50C1               	movf	193,w,c	;volatile
  3342  0022DA  0BF0               	andlw	-16
  3343  0022DC  090E               	iorlw	14
  3344  0022DE  6EC1               	movwf	193,c	;volatile
  3345  0022E0                     
  3346                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3347  0022E0  8C9D               	bsf	157,6,c	;volatile
  3348  0022E2                     
  3349                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3350  0022E2  8C9F               	bsf	159,6,c	;volatile
  3351  0022E4  0012               	return		;funcret
  3352  0022E6  FFFF               	dw	65535	; errata NOP
  3353  0022E8                     __end_of_initADC:
  3354                           	callstack 0
  3355                           
  3356 ;; *************** function _getNewSequence *****************
  3357 ;; Defined at:
  3358 ;;		line 211 in file "usart.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;		None
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;		None
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  2   17[COMRAM] PTR struct .
  3365 ;; Registers used:
  3366 ;;		wreg, status,2, status,0
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3372 ;;      Params:         2       0       0       0       0       0       0
  3373 ;;      Locals:         0       0       0       0       0       0       0
  3374 ;;      Temps:          0       0       0       0       0       0       0
  3375 ;;      Totals:         2       0       0       0       0       0       0
  3376 ;;Total ram usage:        2 bytes
  3377 ;; Hardware stack levels used:    1
  3378 ;; Hardware stack levels required when called:    4
  3379 ;; This function calls:
  3380 ;;		Nothing
  3381 ;; This function is called by:
  3382 ;;		_main
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           	psect	text19
  3387  002340                     __ptext19:
  3388                           	callstack 0
  3389  002340                     _getNewSequence:
  3390                           	callstack 0
  3391  002340  FFFF               	dw	65535	; assembler added errata NOP
  3392  002342                     
  3393                           ;usart.c: 212:     return(&newSequenceData);
  3394  002342  0EEC               	movlw	low _newSequenceData
  3395  002344  6E12               	movwf	?_getNewSequence^0,c
  3396  002346  0E00               	movlw	high _newSequenceData
  3397  002348  6E13               	movwf	(?_getNewSequence+1)^0,c
  3398  00234A  0012               	return		;funcret
  3399  00234C  FFFF               	dw	65535	; errata NOP
  3400  00234E                     __end_of_getNewSequence:
  3401                           	callstack 0
  3402                           
  3403 ;; *************** function _fatalError *****************
  3404 ;; Defined at:
  3405 ;;		line 100 in file "usart.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;		None
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;		None
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  1    wreg      unsigned char 
  3412 ;; Registers used:
  3413 ;;		wreg, status,2
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3419 ;;      Params:         0       0       0       0       0       0       0
  3420 ;;      Locals:         0       0       0       0       0       0       0
  3421 ;;      Temps:          0       0       0       0       0       0       0
  3422 ;;      Totals:         0       0       0       0       0       0       0
  3423 ;;Total ram usage:        0 bytes
  3424 ;; Hardware stack levels used:    1
  3425 ;; Hardware stack levels required when called:    4
  3426 ;; This function calls:
  3427 ;;		Nothing
  3428 ;; This function is called by:
  3429 ;;		_main
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	text20
  3434  002408                     __ptext20:
  3435                           	callstack 0
  3436  002408                     _fatalError:
  3437                           	callstack 0
  3438  002408  FFFF               	dw	65535	; assembler added errata NOP
  3439  00240A                     
  3440                           ;usart.c: 101:     return _fatalError;
  3441  00240A  5060               	movf	__fatalError^0,w,c
  3442  00240C  0012               	return		;funcret
  3443  00240E  FFFF               	dw	65535	; errata NOP
  3444  002410                     __end_of_fatalError:
  3445                           	callstack 0
  3446                           
  3447 ;; *************** function _executeData *****************
  3448 ;; Defined at:
  3449 ;;		line 121 in file "main.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;		None
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;  data            2    8[BANK0 ] PTR struct .
  3454 ;;		 -> dataSequence(20), 
  3455 ;;  errCode         1    7[BANK0 ] unsigned char 
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  1    wreg      unsigned char 
  3458 ;; Registers used:
  3459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3465 ;;      Params:         0       0       0       0       0       0       0
  3466 ;;      Locals:         0       3       0       0       0       0       0
  3467 ;;      Temps:          2       0       0       0       0       0       0
  3468 ;;      Totals:         2       3       0       0       0       0       0
  3469 ;;Total ram usage:        5 bytes
  3470 ;; Hardware stack levels used:    1
  3471 ;; Hardware stack levels required when called:    6
  3472 ;; This function calls:
  3473 ;;		_getData
  3474 ;;		_liftArm
  3475 ;;		_moveToPoint
  3476 ;;		_pickObject
  3477 ;;		_releaseObj
  3478 ;;		_rotateObj
  3479 ;;		_touchObject
  3480 ;;		_touchTherm
  3481 ;; This function is called by:
  3482 ;;		_main
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           	psect	text21
  3487  000A42                     __ptext21:
  3488                           	callstack 0
  3489  000A42                     _executeData:
  3490                           	callstack 0
  3491  000A42  FFFF               	dw	65535	; assembler added errata NOP
  3492  000A44                     
  3493                           ;main.c: 122:     t_sequence *data = getData();
  3494  000A44  ECA7  F011         	call	_getData	;wreg free
  3495  000A48  C012  F0FC         	movff	?_getData,executeData@data
  3496  000A4C  C013  F0FD         	movff	?_getData+1,executeData@data+1
  3497  000A50                     
  3498                           ;main.c: 128:     switch(data->feederLine){
  3499  000A50  EFD4  F005         	goto	l4023
  3500  000A54                     l3995:
  3501  000A54  FFFF               	dw	65535	; assembler added errata NOP
  3502                           
  3503                           ;main.c: 131:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3504  000A56  C04E  F016         	movff	_posVector,moveToPoint@x1
  3505  000A5A  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3506  000A5C  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3507  000A60  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3508  000A62  0E0D               	movlw	low _feeder1Pos
  3509  000A64  6EF6               	movwf	tblptrl,c
  3510  000A66                     	if	1	;There is more than 1 active tblptr byte
  3511  000A66  0E06               	movlw	high _feeder1Pos
  3512  000A68  6EF7               	movwf	tblptrh,c
  3513  000A6A                     	endif
  3514  000A6A                     	if	0	;There are less than 3 active tblptr bytes
  3515  000A6A                     	endif
  3516  000A6A  0008               	tblrd		*
  3517  000A6C  FFFF               	dw	65535	; errata NOP
  3518  000A6E  50F5               	movf	tablat,w,c
  3519  000A70  6E1A               	movwf	moveToPoint@x2^0,c
  3520  000A72  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3521  000A74  0E0E               	movlw	low (_feeder1Pos+1)
  3522  000A76  6EF6               	movwf	tblptrl,c
  3523  000A78  0E06               	movlw	high (_feeder1Pos+1)
  3524  000A7A  6EF7               	movwf	tblptrh,c
  3525  000A7C                     	if	0	;tblptru may be non-zero
  3526  000A7C                     	endif
  3527  000A7C                     	if	0	;tblptru may be non-zero
  3528  000A7C                     	endif
  3529  000A7C  0008               	tblrd		*
  3530  000A7E  FFFF               	dw	65535	; errata NOP
  3531  000A80  50F5               	movf	tablat,w,c
  3532  000A82  6E1C               	movwf	moveToPoint@y2^0,c
  3533  000A84  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3534  000A86  EC5A  F008         	call	_moveToPoint	;wreg free
  3535  000A8A  0100               	movlb	0	; () banked
  3536  000A8C  6FFB               	movwf	executeData@errCode& (0+255),b
  3537  000A8E                     
  3538                           ; BSR set to: 0
  3539                           ;main.c: 133:             posVector[0] = feeder1Pos[0];
  3540  000A8E  0E0D               	movlw	low _feeder1Pos
  3541  000A90  6EF6               	movwf	tblptrl,c
  3542  000A92                     	if	1	;There is more than 1 active tblptr byte
  3543  000A92  0E06               	movlw	high _feeder1Pos
  3544  000A94  6EF7               	movwf	tblptrh,c
  3545  000A96                     	endif
  3546  000A96                     	if	0	;There are less than 3 active tblptr bytes
  3547  000A96                     	endif
  3548  000A96  0008               	tblrd		*
  3549  000A98  FFFF               	dw	65535	; errata NOP
  3550  000A9A  CFF5 F04E          	movff	tablat,_posVector
  3551  000A9E                     
  3552                           ; BSR set to: 0
  3553                           ;main.c: 134:             posVector[1] = feeder1Pos[1];
  3554  000A9E  0E0E               	movlw	low (_feeder1Pos+1)
  3555  000AA0  6EF6               	movwf	tblptrl,c
  3556  000AA2  0E06               	movlw	high (_feeder1Pos+1)
  3557  000AA4  6EF7               	movwf	tblptrh,c
  3558  000AA6                     	if	0	;tblptru may be non-zero
  3559  000AA6                     	endif
  3560  000AA6                     	if	0	;tblptru may be non-zero
  3561  000AA6                     	endif
  3562  000AA6  0008               	tblrd		*
  3563  000AA8  FFFF               	dw	65535	; errata NOP
  3564  000AAA  CFF5 F04F          	movff	tablat,_posVector+1
  3565                           
  3566                           ;main.c: 135:             break;
  3567  000AAE  EFF7  F005         	goto	l4025
  3568  000AB2                     l4001:
  3569  000AB2  FFFF               	dw	65535	; assembler added errata NOP
  3570                           
  3571                           ;main.c: 137:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3572  000AB4  C04E  F016         	movff	_posVector,moveToPoint@x1
  3573  000AB8  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3574  000ABA  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3575  000ABE  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3576  000AC0  0E0B               	movlw	low _feeder2Pos
  3577  000AC2  6EF6               	movwf	tblptrl,c
  3578  000AC4                     	if	1	;There is more than 1 active tblptr byte
  3579  000AC4  0E06               	movlw	high _feeder2Pos
  3580  000AC6  6EF7               	movwf	tblptrh,c
  3581  000AC8                     	endif
  3582  000AC8                     	if	0	;There are less than 3 active tblptr bytes
  3583  000AC8                     	endif
  3584  000AC8  0008               	tblrd		*
  3585  000ACA  FFFF               	dw	65535	; errata NOP
  3586  000ACC  50F5               	movf	tablat,w,c
  3587  000ACE  6E1A               	movwf	moveToPoint@x2^0,c
  3588  000AD0  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3589  000AD2  0E0C               	movlw	low (_feeder2Pos+1)
  3590  000AD4  6EF6               	movwf	tblptrl,c
  3591  000AD6  0E06               	movlw	high (_feeder2Pos+1)
  3592  000AD8  6EF7               	movwf	tblptrh,c
  3593  000ADA                     	if	0	;tblptru may be non-zero
  3594  000ADA                     	endif
  3595  000ADA                     	if	0	;tblptru may be non-zero
  3596  000ADA                     	endif
  3597  000ADA  0008               	tblrd		*
  3598  000ADC  FFFF               	dw	65535	; errata NOP
  3599  000ADE  50F5               	movf	tablat,w,c
  3600  000AE0  6E1C               	movwf	moveToPoint@y2^0,c
  3601  000AE2  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3602  000AE4  EC5A  F008         	call	_moveToPoint	;wreg free
  3603  000AE8  0100               	movlb	0	; () banked
  3604  000AEA  6FFB               	movwf	executeData@errCode& (0+255),b
  3605  000AEC                     
  3606                           ; BSR set to: 0
  3607                           ;main.c: 138:             posVector[0] = feeder2Pos[0];
  3608  000AEC  0E0B               	movlw	low _feeder2Pos
  3609  000AEE  6EF6               	movwf	tblptrl,c
  3610  000AF0                     	if	1	;There is more than 1 active tblptr byte
  3611  000AF0  0E06               	movlw	high _feeder2Pos
  3612  000AF2  6EF7               	movwf	tblptrh,c
  3613  000AF4                     	endif
  3614  000AF4                     	if	0	;There are less than 3 active tblptr bytes
  3615  000AF4                     	endif
  3616  000AF4  0008               	tblrd		*
  3617  000AF6  FFFF               	dw	65535	; errata NOP
  3618  000AF8  CFF5 F04E          	movff	tablat,_posVector
  3619  000AFC                     
  3620                           ; BSR set to: 0
  3621                           ;main.c: 139:             posVector[1] = feeder2Pos[1];
  3622  000AFC  0E0C               	movlw	low (_feeder2Pos+1)
  3623  000AFE  6EF6               	movwf	tblptrl,c
  3624  000B00  0E06               	movlw	high (_feeder2Pos+1)
  3625  000B02  6EF7               	movwf	tblptrh,c
  3626  000B04                     	if	0	;tblptru may be non-zero
  3627  000B04                     	endif
  3628  000B04                     	if	0	;tblptru may be non-zero
  3629  000B04                     	endif
  3630  000B04  0008               	tblrd		*
  3631  000B06  FFFF               	dw	65535	; errata NOP
  3632  000B08  CFF5 F04F          	movff	tablat,_posVector+1
  3633                           
  3634                           ;main.c: 140:             break;
  3635  000B0C  EFF7  F005         	goto	l4025
  3636  000B10                     l4007:
  3637  000B10  FFFF               	dw	65535	; assembler added errata NOP
  3638                           
  3639                           ;main.c: 142:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3640  000B12  C04E  F016         	movff	_posVector,moveToPoint@x1
  3641  000B16  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3642  000B18  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3643  000B1C  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3644  000B1E  0E09               	movlw	low _feeder3Pos
  3645  000B20  6EF6               	movwf	tblptrl,c
  3646  000B22                     	if	1	;There is more than 1 active tblptr byte
  3647  000B22  0E06               	movlw	high _feeder3Pos
  3648  000B24  6EF7               	movwf	tblptrh,c
  3649  000B26                     	endif
  3650  000B26                     	if	0	;There are less than 3 active tblptr bytes
  3651  000B26                     	endif
  3652  000B26  0008               	tblrd		*
  3653  000B28  FFFF               	dw	65535	; errata NOP
  3654  000B2A  50F5               	movf	tablat,w,c
  3655  000B2C  6E1A               	movwf	moveToPoint@x2^0,c
  3656  000B2E  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3657  000B30  0E0A               	movlw	low (_feeder3Pos+1)
  3658  000B32  6EF6               	movwf	tblptrl,c
  3659  000B34  0E06               	movlw	high (_feeder3Pos+1)
  3660  000B36  6EF7               	movwf	tblptrh,c
  3661  000B38                     	if	0	;tblptru may be non-zero
  3662  000B38                     	endif
  3663  000B38                     	if	0	;tblptru may be non-zero
  3664  000B38                     	endif
  3665  000B38  0008               	tblrd		*
  3666  000B3A  FFFF               	dw	65535	; errata NOP
  3667  000B3C  50F5               	movf	tablat,w,c
  3668  000B3E  6E1C               	movwf	moveToPoint@y2^0,c
  3669  000B40  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3670  000B42  EC5A  F008         	call	_moveToPoint	;wreg free
  3671  000B46  0100               	movlb	0	; () banked
  3672  000B48  6FFB               	movwf	executeData@errCode& (0+255),b
  3673  000B4A                     
  3674                           ; BSR set to: 0
  3675                           ;main.c: 143:             posVector[0] = feeder3Pos[0];
  3676  000B4A  0E09               	movlw	low _feeder3Pos
  3677  000B4C  6EF6               	movwf	tblptrl,c
  3678  000B4E                     	if	1	;There is more than 1 active tblptr byte
  3679  000B4E  0E06               	movlw	high _feeder3Pos
  3680  000B50  6EF7               	movwf	tblptrh,c
  3681  000B52                     	endif
  3682  000B52                     	if	0	;There are less than 3 active tblptr bytes
  3683  000B52                     	endif
  3684  000B52  0008               	tblrd		*
  3685  000B54  FFFF               	dw	65535	; errata NOP
  3686  000B56  CFF5 F04E          	movff	tablat,_posVector
  3687  000B5A                     
  3688                           ; BSR set to: 0
  3689                           ;main.c: 144:             posVector[1] = feeder3Pos[1];
  3690  000B5A  0E0A               	movlw	low (_feeder3Pos+1)
  3691  000B5C  6EF6               	movwf	tblptrl,c
  3692  000B5E  0E06               	movlw	high (_feeder3Pos+1)
  3693  000B60  6EF7               	movwf	tblptrh,c
  3694  000B62                     	if	0	;tblptru may be non-zero
  3695  000B62                     	endif
  3696  000B62                     	if	0	;tblptru may be non-zero
  3697  000B62                     	endif
  3698  000B62  0008               	tblrd		*
  3699  000B64  FFFF               	dw	65535	; errata NOP
  3700  000B66  CFF5 F04F          	movff	tablat,_posVector+1
  3701                           
  3702                           ;main.c: 145:             break;
  3703  000B6A  EFF7  F005         	goto	l4025
  3704  000B6E                     l4013:
  3705  000B6E  FFFF               	dw	65535	; assembler added errata NOP
  3706                           
  3707                           ;main.c: 149:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3708  000B70  C04E  F016         	movff	_posVector,moveToPoint@x1
  3709  000B74  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3710  000B76  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3711  000B7A  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3712  000B7C  C057  F01A         	movff	_newFeeder,moveToPoint@x2
  3713  000B80  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3714  000B82  C058  F01C         	movff	_newFeeder+1,moveToPoint@y2
  3715  000B86  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3716  000B88  EC5A  F008         	call	_moveToPoint	;wreg free
  3717  000B8C  0100               	movlb	0	; () banked
  3718  000B8E  6FFB               	movwf	executeData@errCode& (0+255),b
  3719  000B90                     
  3720                           ; BSR set to: 0
  3721                           ;main.c: 150:             posVector[0] = newFeeder[0];
  3722  000B90  C057  F04E         	movff	_newFeeder,_posVector
  3723  000B94                     
  3724                           ; BSR set to: 0
  3725                           ;main.c: 151:             posVector[1] = newFeeder[1];
  3726  000B94  C058  F04F         	movff	_newFeeder+1,_posVector+1
  3727                           
  3728                           ;main.c: 152:             break;
  3729  000B98  EFF7  F005         	goto	l4025
  3730  000B9C                     l4019:
  3731  000B9C  FFFF               	dw	65535	; assembler added errata NOP
  3732                           
  3733                           ;main.c: 156:             errCode = 1;
  3734  000B9E  0E01               	movlw	1
  3735  000BA0  0100               	movlb	0	; () banked
  3736  000BA2  6FFB               	movwf	executeData@errCode& (0+255),b
  3737                           
  3738                           ;main.c: 157:             break;
  3739  000BA4  EFF7  F005         	goto	l4025
  3740  000BA8                     l4023:
  3741  000BA8  FFFF               	dw	65535	; assembler added errata NOP
  3742  000BAA  C0FC  FFD9         	movff	executeData@data,fsr2l
  3743  000BAE  C0FD  FFDA         	movff	executeData@data+1,fsr2h
  3744  000BB2  50DF               	movf	indf2,w,c
  3745  000BB4  6E43               	movwf	??_executeData^0,c
  3746  000BB6  6A44               	clrf	(??_executeData+1)^0,c
  3747                           
  3748                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3749                           ; Switch size 1, requested type "simple"
  3750                           ; Number of cases is 1, Range of values is 0 to 0
  3751                           ; switch strategies available:
  3752                           ; Name         Instructions Cycles
  3753                           ; simple_byte            4     3 (average)
  3754                           ;	Chosen strategy is simple_byte
  3755  000BB8  5044               	movf	(??_executeData+1)^0,w,c
  3756  000BBA  0A00               	xorlw	0	; case 0
  3757  000BBC  B4D8               	btfsc	status,2,c
  3758  000BBE  EFE3  F005         	goto	l4359
  3759  000BC2  EFCE  F005         	goto	l4019
  3760  000BC6                     l4359:
  3761  000BC6  FFFF               	dw	65535	; assembler added errata NOP
  3762                           
  3763                           ; Switch size 1, requested type "simple"
  3764                           ; Number of cases is 4, Range of values is 48 to 255
  3765                           ; switch strategies available:
  3766                           ; Name         Instructions Cycles
  3767                           ; simple_byte           13     7 (average)
  3768                           ;	Chosen strategy is simple_byte
  3769  000BC8  5043               	movf	??_executeData^0,w,c
  3770  000BCA  0A30               	xorlw	48	; case 48
  3771  000BCC  B4D8               	btfsc	status,2,c
  3772  000BCE  EF2A  F005         	goto	l3995
  3773  000BD2  0A01               	xorlw	1	; case 49
  3774  000BD4  B4D8               	btfsc	status,2,c
  3775  000BD6  EF59  F005         	goto	l4001
  3776  000BDA  0A03               	xorlw	3	; case 50
  3777  000BDC  B4D8               	btfsc	status,2,c
  3778  000BDE  EF88  F005         	goto	l4007
  3779  000BE2  0ACD               	xorlw	205	; case 255
  3780  000BE4  B4D8               	btfsc	status,2,c
  3781  000BE6  EFB7  F005         	goto	l4013
  3782  000BEA  EFCE  F005         	goto	l4019
  3783  000BEE                     l4025:
  3784  000BEE  FFFF               	dw	65535	; assembler added errata NOP
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;main.c: 161:     if(!errCode){
  3788  000BF0  51FB               	movf	executeData@errCode& (0+255),w,b
  3789  000BF2  A4D8               	btfss	status,2,c
  3790  000BF4  EFFE  F005         	goto	u3211
  3791  000BF8  EF01  F006         	goto	u3210
  3792  000BFC                     u3211:
  3793  000BFC  FFFF               	dw	65535	; assembler added errata NOP
  3794  000BFE  EF61  F006         	goto	l4047
  3795  000C02                     u3210:
  3796  000C02  FFFF               	dw	65535	; assembler added errata NOP
  3797  000C04                     
  3798                           ; BSR set to: 0
  3799  000C04  EC94  F00D         	call	_touchObject	;wreg free
  3800  000C08                     
  3801                           ;main.c: 165:         pickObject();
  3802  000C08  EC14  F012         	call	_pickObject	;wreg free
  3803  000C0C  EC3E  F00F         	call	_liftArm	;wreg free
  3804  000C10  C04E  F016         	movff	_posVector,moveToPoint@x1
  3805  000C14  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3806  000C16  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3807  000C1A  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3808  000C1C  0100               	movlb	0	; () banked
  3809  000C1E  EE20 F001          	lfsr	2,1
  3810  000C22  51FC               	movf	executeData@data& (0+255),w,b
  3811  000C24  26D9               	addwf	fsr2l,f,c
  3812  000C26  51FD               	movf	(executeData@data+1)& (0+255),w,b
  3813  000C28  22DA               	addwfc	fsr2h,f,c
  3814  000C2A  50DF               	movf	indf2,w,c
  3815  000C2C  6E43               	movwf	??_executeData^0,c
  3816  000C2E  5043               	movf	??_executeData^0,w,c
  3817  000C30  6E1A               	movwf	moveToPoint@x2^0,c
  3818  000C32  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3819  000C34  EE20 F002          	lfsr	2,2
  3820  000C38  51FC               	movf	executeData@data& (0+255),w,b
  3821  000C3A  26D9               	addwf	fsr2l,f,c
  3822  000C3C  51FD               	movf	(executeData@data+1)& (0+255),w,b
  3823  000C3E  22DA               	addwfc	fsr2h,f,c
  3824  000C40  50DF               	movf	indf2,w,c
  3825  000C42  6E44               	movwf	(??_executeData+1)^0,c
  3826  000C44  5044               	movf	(??_executeData+1)^0,w,c
  3827  000C46  6E1C               	movwf	moveToPoint@y2^0,c
  3828  000C48  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3829  000C4A  EC5A  F008         	call	_moveToPoint	;wreg free
  3830                           
  3831                           ;main.c: 172:         posVector[0] = data->posX;
  3832  000C4E  0100               	movlb	0	; () banked
  3833  000C50  EE20 F001          	lfsr	2,1
  3834  000C54  51FC               	movf	executeData@data& (0+255),w,b
  3835  000C56  26D9               	addwf	fsr2l,f,c
  3836  000C58  51FD               	movf	(executeData@data+1)& (0+255),w,b
  3837  000C5A  22DA               	addwfc	fsr2h,f,c
  3838  000C5C  50DF               	movf	indf2,w,c
  3839  000C5E  6E4E               	movwf	_posVector^0,c
  3840                           
  3841                           ;main.c: 173:         posVector[1] = data->posY;
  3842  000C60  EE20 F002          	lfsr	2,2
  3843  000C64  51FC               	movf	executeData@data& (0+255),w,b
  3844  000C66  26D9               	addwf	fsr2l,f,c
  3845  000C68  51FD               	movf	(executeData@data+1)& (0+255),w,b
  3846  000C6A  22DA               	addwfc	fsr2h,f,c
  3847  000C6C  50DF               	movf	indf2,w,c
  3848  000C6E  6E4F               	movwf	(_posVector+1)^0,c
  3849                           
  3850                           ;main.c: 176:         rotAngle = data->rotation - rotAngle;
  3851  000C70  EE20 F003          	lfsr	2,3
  3852  000C74  51FC               	movf	executeData@data& (0+255),w,b
  3853  000C76  26D9               	addwf	fsr2l,f,c
  3854  000C78  51FD               	movf	(executeData@data+1)& (0+255),w,b
  3855  000C7A  22DA               	addwfc	fsr2h,f,c
  3856  000C7C  50DF               	movf	indf2,w,c
  3857  000C7E  6E43               	movwf	??_executeData^0,c
  3858  000C80  5059               	movf	_rotAngle^0,w,c
  3859  000C82  5C43               	subwf	??_executeData^0,w,c
  3860  000C84  6E59               	movwf	_rotAngle^0,c
  3861  000C86  505A               	movf	(_rotAngle+1)^0,w,c
  3862  000C88  A0D8               	btfss	status,0,c
  3863  000C8A  285A               	incf	(_rotAngle+1)^0,w,c
  3864  000C8C  6A5A               	clrf	(_rotAngle+1)^0,c
  3865  000C8E  5E5A               	subwf	(_rotAngle+1)^0,f,c
  3866  000C90                     
  3867                           ; BSR set to: 0
  3868                           ;main.c: 178:         if(rotAngle < 0){
  3869  000C90  BE5A               	btfsc	(_rotAngle+1)^0,7,c
  3870  000C92  EF50  F006         	goto	u3220
  3871  000C96  EF4D  F006         	goto	u3221
  3872  000C9A                     u3221:
  3873  000C9A  FFFF               	dw	65535	; assembler added errata NOP
  3874  000C9C  EF55  F006         	goto	l4039
  3875  000CA0                     u3220:
  3876  000CA0  FFFF               	dw	65535	; assembler added errata NOP
  3877  000CA2                     
  3878                           ; BSR set to: 0
  3879                           ;main.c: 179:             rotAngle += 360;
  3880  000CA2  0E68               	movlw	104
  3881  000CA4  2659               	addwf	_rotAngle^0,f,c
  3882  000CA6  0E01               	movlw	1
  3883  000CA8  225A               	addwfc	(_rotAngle+1)^0,f,c
  3884  000CAA                     l4039:
  3885  000CAA  FFFF               	dw	65535	; assembler added errata NOP
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;main.c: 181:         rotateObj(rotAngle);
  3889  000CAC  5059               	movf	_rotAngle^0,w,c
  3890  000CAE  ECE1  F00E         	call	_rotateObj
  3891  000CB2  EC1B  F00D         	call	_touchTherm	;wreg free
  3892  000CB6                     
  3893                           ;main.c: 186:         releaseObj();
  3894  000CB6  EC10  F012         	call	_releaseObj	;wreg free
  3895  000CBA                     
  3896                           ;main.c: 189:         errCode = liftArm();
  3897  000CBA  EC3E  F00F         	call	_liftArm	;wreg free
  3898  000CBE  0100               	movlb	0	; () banked
  3899  000CC0  6FFB               	movwf	executeData@errCode& (0+255),b
  3900  000CC2                     l4047:
  3901  000CC2  FFFF               	dw	65535	; assembler added errata NOP
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;main.c: 192:     return(errCode);
  3905  000CC4  51FB               	movf	executeData@errCode& (0+255),w,b
  3906  000CC6                     
  3907                           ; BSR set to: 0
  3908  000CC6  0012               	return		;funcret
  3909  000CC8  FFFF               	dw	65535	; errata NOP
  3910  000CCA                     __end_of_executeData:
  3911                           	callstack 0
  3912                           
  3913 ;; *************** function _touchTherm *****************
  3914 ;; Defined at:
  3915 ;;		line 430 in file "motors.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;		None
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;		None
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  1    wreg      unsigned char 
  3922 ;; Registers used:
  3923 ;;		wreg, status,2, status,0, cstack
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3929 ;;      Params:         0       0       0       0       0       0       0
  3930 ;;      Locals:         0       0       0       0       0       0       0
  3931 ;;      Temps:          0       0       0       0       0       0       0
  3932 ;;      Totals:         0       0       0       0       0       0       0
  3933 ;;Total ram usage:        0 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; Hardware stack levels required when called:    5
  3936 ;; This function calls:
  3937 ;;		_resetStep
  3938 ;;		_resetTherm
  3939 ;;		_returnTherm
  3940 ;;		_setDirection
  3941 ;;		_startADC
  3942 ;;		_stepMade
  3943 ;;		_stopADC
  3944 ;; This function is called by:
  3945 ;;		_executeData
  3946 ;; This function uses a non-reentrant model
  3947 ;;
  3948                           
  3949                           	psect	text22
  3950  001A36                     __ptext22:
  3951                           	callstack 0
  3952  001A36                     _touchTherm:
  3953                           	callstack 0
  3954  001A36  FFFF               	dw	65535	; assembler added errata NOP
  3955  001A38                     
  3956                           ;motors.c: 433:     setDirection(1, 2);
  3957  001A38  0E02               	movlw	2
  3958  001A3A  6E12               	movwf	setDirection@motor^0,c
  3959  001A3C  0E01               	movlw	1
  3960  001A3E  EC4D  F010         	call	_setDirection
  3961  001A42                     
  3962                           ;motors.c: 435:     T2CONbits.TMR2ON = 1;
  3963  001A42  84CA               	bsf	202,2,c	;volatile
  3964  001A44                     
  3965                           ;motors.c: 437:     tm0Error = 0;
  3966  001A44  0E00               	movlw	0
  3967  001A46  6E5C               	movwf	(_tm0Error+1)^0,c
  3968  001A48  0E00               	movlw	0
  3969  001A4A  6E5B               	movwf	_tm0Error^0,c
  3970  001A4C                     
  3971                           ;motors.c: 438:     tm0Limit = 200;
  3972  001A4C  0EC8               	movlw	200
  3973  001A4E  6E68               	movwf	_tm0Limit^0,c
  3974  001A50                     
  3975                           ;motors.c: 439:     T0CONbits.TMR0ON = 1;
  3976  001A50  8ED5               	bsf	213,7,c	;volatile
  3977  001A52                     
  3978                           ;motors.c: 442:     startADC();
  3979  001A52  EC0C  F012         	call	_startADC	;wreg free
  3980                           
  3981                           ;motors.c: 445:     while(!returnTherm() || PORTDbits.RD7){
  3982  001A56  EF5E  F00D         	goto	l3735
  3983  001A5A                     l3725:
  3984  001A5A  FFFF               	dw	65535	; assembler added errata NOP
  3985                           
  3986                           ;motors.c: 448:         if(tm0Error){
  3987  001A5C  505B               	movf	_tm0Error^0,w,c
  3988  001A5E  105C               	iorwf	(_tm0Error+1)^0,w,c
  3989  001A60  B4D8               	btfsc	status,2,c
  3990  001A62  EF35  F00D         	goto	u2951
  3991  001A66  EF38  F00D         	goto	u2950
  3992  001A6A                     u2951:
  3993  001A6A  FFFF               	dw	65535	; assembler added errata NOP
  3994  001A6C  EF40  F00D         	goto	l178
  3995  001A70                     u2950:
  3996  001A70  FFFF               	dw	65535	; assembler added errata NOP
  3997  001A72                     
  3998                           ;motors.c: 450:             LATCbits.LATC2 = 0;
  3999  001A72  948B               	bcf	139,2,c	;volatile
  4000  001A74                     
  4001                           ;motors.c: 451:             tm0Error = 6;
  4002  001A74  0E00               	movlw	0
  4003  001A76  6E5C               	movwf	(_tm0Error+1)^0,c
  4004  001A78  0E06               	movlw	6
  4005  001A7A  6E5B               	movwf	_tm0Error^0,c
  4006                           
  4007                           ;motors.c: 452:             break;
  4008  001A7C  EF74  F00D         	goto	l3739
  4009  001A80                     l178:
  4010  001A80  FFFF               	dw	65535	; assembler added errata NOP
  4011                           
  4012                           ;motors.c: 456:         LATCbits.LATC2 = 1;
  4013  001A82  848B               	bsf	139,2,c	;volatile
  4014  001A84                     l3731:
  4015  001A84  FFFF               	dw	65535	; assembler added errata NOP
  4016  001A86  EC8D  F011         	call	_stepMade	;wreg free
  4017  001A8A  5012               	movf	?_stepMade^0,w,c
  4018  001A8C  1013               	iorwf	(?_stepMade+1)^0,w,c
  4019  001A8E  B4D8               	btfsc	status,2,c
  4020  001A90  EF4C  F00D         	goto	u2961
  4021  001A94  EF4F  F00D         	goto	u2960
  4022  001A98                     u2961:
  4023  001A98  FFFF               	dw	65535	; assembler added errata NOP
  4024  001A9A  EF42  F00D         	goto	l3731
  4025  001A9E                     u2960:
  4026  001A9E  FFFF               	dw	65535	; assembler added errata NOP
  4027  001AA0                     
  4028                           ;motors.c: 462:         LATCbits.LATC2 = 0;
  4029  001AA0  948B               	bcf	139,2,c	;volatile
  4030  001AA2                     l3733:
  4031  001AA2  FFFF               	dw	65535	; assembler added errata NOP
  4032  001AA4  EC8D  F011         	call	_stepMade	;wreg free
  4033  001AA8  5012               	movf	?_stepMade^0,w,c
  4034  001AAA  1013               	iorwf	(?_stepMade+1)^0,w,c
  4035  001AAC  B4D8               	btfsc	status,2,c
  4036  001AAE  EF5B  F00D         	goto	u2971
  4037  001AB2  EF5E  F00D         	goto	u2970
  4038  001AB6                     u2971:
  4039  001AB6  FFFF               	dw	65535	; assembler added errata NOP
  4040  001AB8  EF51  F00D         	goto	l3733
  4041  001ABC                     u2970:
  4042  001ABC                     l3735:
  4043  001ABC  FFFF               	dw	65535	; assembler added errata NOP
  4044                           
  4045                           ;motors.c: 445:     while(!returnTherm() || PORTDbits.RD7){
  4046  001ABE  ECC3  F011         	call	_returnTherm	;wreg free
  4047  001AC2  5012               	movf	?_returnTherm^0,w,c
  4048  001AC4  1013               	iorwf	(?_returnTherm+1)^0,w,c
  4049  001AC6  B4D8               	btfsc	status,2,c
  4050  001AC8  EF68  F00D         	goto	u2981
  4051  001ACC  EF6B  F00D         	goto	u2980
  4052  001AD0                     u2981:
  4053  001AD0  FFFF               	dw	65535	; assembler added errata NOP
  4054  001AD2  EF2D  F00D         	goto	l3725
  4055  001AD6                     u2980:
  4056  001AD6  FFFF               	dw	65535	; assembler added errata NOP
  4057  001AD8  BE83               	btfsc	131,7,c	;volatile
  4058  001ADA  EF71  F00D         	goto	u2991
  4059  001ADE  EF74  F00D         	goto	u2990
  4060  001AE2                     u2991:
  4061  001AE2  FFFF               	dw	65535	; assembler added errata NOP
  4062  001AE4  EF2D  F00D         	goto	l3725
  4063  001AE8                     u2990:
  4064  001AE8                     l3739:
  4065  001AE8  FFFF               	dw	65535	; assembler added errata NOP
  4066                           
  4067                           ;motors.c: 469:     stopADC();
  4068  001AEA  EC08  F012         	call	_stopADC	;wreg free
  4069  001AEE                     
  4070                           ;motors.c: 472:     resetTherm();
  4071  001AEE  ECDA  F011         	call	_resetTherm	;wreg free
  4072  001AF2                     
  4073                           ;motors.c: 475:     T0CONbits.TMR0ON = 0;
  4074  001AF2  9ED5               	bcf	213,7,c	;volatile
  4075  001AF4                     
  4076                           ;motors.c: 476:     T2CONbits.TMR2ON = 0;
  4077  001AF4  94CA               	bcf	202,2,c	;volatile
  4078                           
  4079                           ;motors.c: 478:     TMR0 = 0;
  4080  001AF6  0E00               	movlw	0
  4081  001AF8  6ED7               	movwf	215,c	;volatile
  4082  001AFA  0E00               	movlw	0
  4083  001AFC  6ED6               	movwf	214,c	;volatile
  4084                           
  4085                           ;motors.c: 479:     TMR2 = 0;
  4086  001AFE  0E00               	movlw	0
  4087  001B00  6ECC               	movwf	204,c	;volatile
  4088  001B02                     
  4089                           ;motors.c: 482:     resetStep();
  4090  001B02  ECE4  F011         	call	_resetStep	;wreg free
  4091  001B06                     
  4092                           ;motors.c: 485:     if(PORTDbits.RD7){
  4093  001B06  AE83               	btfss	131,7,c	;volatile
  4094  001B08  EF88  F00D         	goto	u3001
  4095  001B0C  EF8B  F00D         	goto	u3000
  4096  001B10                     u3001:
  4097  001B10  FFFF               	dw	65535	; assembler added errata NOP
  4098  001B12  EF90  F00D         	goto	l186
  4099  001B16                     u3000:
  4100  001B16  FFFF               	dw	65535	; assembler added errata NOP
  4101  001B18                     
  4102                           ;motors.c: 486:         tm0Error = 2;
  4103  001B18  0E00               	movlw	0
  4104  001B1A  6E5C               	movwf	(_tm0Error+1)^0,c
  4105  001B1C  0E02               	movlw	2
  4106  001B1E  6E5B               	movwf	_tm0Error^0,c
  4107  001B20                     l186:
  4108  001B20  FFFF               	dw	65535	; assembler added errata NOP
  4109                           
  4110                           ;motors.c: 489:     return(tm0Error);
  4111  001B22  505B               	movf	_tm0Error^0,w,c
  4112  001B24  0012               	return		;funcret
  4113  001B26  FFFF               	dw	65535	; errata NOP
  4114  001B28                     __end_of_touchTherm:
  4115                           	callstack 0
  4116                           
  4117 ;; *************** function _returnTherm *****************
  4118 ;; Defined at:
  4119 ;;		line 57 in file "adc.c"
  4120 ;; Parameters:    Size  Location     Type
  4121 ;;		None
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;		None
  4124 ;; Return value:  Size  Location     Type
  4125 ;;                  2   17[COMRAM] unsigned int 
  4126 ;; Registers used:
  4127 ;;		None
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : 0/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4133 ;;      Params:         2       0       0       0       0       0       0
  4134 ;;      Locals:         0       0       0       0       0       0       0
  4135 ;;      Temps:          0       0       0       0       0       0       0
  4136 ;;      Totals:         2       0       0       0       0       0       0
  4137 ;;Total ram usage:        2 bytes
  4138 ;; Hardware stack levels used:    1
  4139 ;; Hardware stack levels required when called:    4
  4140 ;; This function calls:
  4141 ;;		Nothing
  4142 ;; This function is called by:
  4143 ;;		_touchTherm
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147                           	psect	text23
  4148  002386                     __ptext23:
  4149                           	callstack 0
  4150  002386                     _returnTherm:
  4151                           	callstack 0
  4152  002386  FFFF               	dw	65535	; assembler added errata NOP
  4153  002388                     
  4154                           ;adc.c: 58:     return therm_rel;
  4155  002388  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4156  00238C  6A13               	clrf	(?_returnTherm+1)^0,c
  4157  00238E  0012               	return		;funcret
  4158  002390  FFFF               	dw	65535	; errata NOP
  4159  002392                     __end_of_returnTherm:
  4160                           	callstack 0
  4161                           
  4162 ;; *************** function _resetTherm *****************
  4163 ;; Defined at:
  4164 ;;		line 71 in file "adc.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;		None
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;		None
  4169 ;; Return value:  Size  Location     Type
  4170 ;;                  1    wreg      void 
  4171 ;; Registers used:
  4172 ;;		wreg, status,2
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4178 ;;      Params:         0       0       0       0       0       0       0
  4179 ;;      Locals:         0       0       0       0       0       0       0
  4180 ;;      Temps:          0       0       0       0       0       0       0
  4181 ;;      Totals:         0       0       0       0       0       0       0
  4182 ;;Total ram usage:        0 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; Hardware stack levels required when called:    4
  4185 ;; This function calls:
  4186 ;;		Nothing
  4187 ;; This function is called by:
  4188 ;;		_touchTherm
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           	psect	text24
  4193  0023B4                     __ptext24:
  4194                           	callstack 0
  4195  0023B4                     _resetTherm:
  4196                           	callstack 0
  4197  0023B4  FFFF               	dw	65535	; assembler added errata NOP
  4198  0023B6                     
  4199                           ;adc.c: 72:     therm_rel = 0;
  4200  0023B6  0E00               	movlw	0
  4201  0023B8  6E64               	movwf	_therm_rel^0,c	;volatile
  4202  0023BA  0012               	return		;funcret
  4203  0023BC  FFFF               	dw	65535	; errata NOP
  4204  0023BE                     __end_of_resetTherm:
  4205                           	callstack 0
  4206                           
  4207 ;; *************** function _touchObject *****************
  4208 ;; Defined at:
  4209 ;;		line 359 in file "motors.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  1    wreg      unsigned char 
  4216 ;; Registers used:
  4217 ;;		wreg, status,2, status,0, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4223 ;;      Params:         0       0       0       0       0       0       0
  4224 ;;      Locals:         0       0       0       0       0       0       0
  4225 ;;      Temps:          0       0       0       0       0       0       0
  4226 ;;      Totals:         0       0       0       0       0       0       0
  4227 ;;Total ram usage:        0 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    5
  4230 ;; This function calls:
  4231 ;;		_resetStep
  4232 ;;		_resetTouch
  4233 ;;		_returnTouch
  4234 ;;		_setDirection
  4235 ;;		_startADC
  4236 ;;		_stepMade
  4237 ;;		_stopADC
  4238 ;; This function is called by:
  4239 ;;		_executeData
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           	psect	text25
  4244  001B28                     __ptext25:
  4245                           	callstack 0
  4246  001B28                     _touchObject:
  4247                           	callstack 0
  4248  001B28  FFFF               	dw	65535	; assembler added errata NOP
  4249  001B2A                     
  4250                           ;motors.c: 362:     setDirection(1, 2);
  4251  001B2A  0E02               	movlw	2
  4252  001B2C  6E12               	movwf	setDirection@motor^0,c
  4253  001B2E  0E01               	movlw	1
  4254  001B30  EC4D  F010         	call	_setDirection
  4255  001B34                     
  4256                           ;motors.c: 364:     T2CONbits.TMR2ON = 1;
  4257  001B34  84CA               	bsf	202,2,c	;volatile
  4258  001B36                     
  4259                           ;motors.c: 366:     tm0Error = 0;
  4260  001B36  0E00               	movlw	0
  4261  001B38  6E5C               	movwf	(_tm0Error+1)^0,c
  4262  001B3A  0E00               	movlw	0
  4263  001B3C  6E5B               	movwf	_tm0Error^0,c
  4264  001B3E                     
  4265                           ;motors.c: 367:     tm0Limit = 200;
  4266  001B3E  0EC8               	movlw	200
  4267  001B40  6E68               	movwf	_tm0Limit^0,c
  4268  001B42                     
  4269                           ;motors.c: 368:     T0CONbits.TMR0ON = 1;
  4270  001B42  8ED5               	bsf	213,7,c	;volatile
  4271  001B44                     
  4272                           ;motors.c: 371:     startADC();
  4273  001B44  EC0C  F012         	call	_startADC	;wreg free
  4274                           
  4275                           ;motors.c: 374:     while(!returnTouch() || PORTDbits.RD7){
  4276  001B48  EFD7  F00D         	goto	l3693
  4277  001B4C                     l3683:
  4278  001B4C  FFFF               	dw	65535	; assembler added errata NOP
  4279                           
  4280                           ;motors.c: 377:         if(tm0Error){
  4281  001B4E  505B               	movf	_tm0Error^0,w,c
  4282  001B50  105C               	iorwf	(_tm0Error+1)^0,w,c
  4283  001B52  B4D8               	btfsc	status,2,c
  4284  001B54  EFAE  F00D         	goto	u2891
  4285  001B58  EFB1  F00D         	goto	u2890
  4286  001B5C                     u2891:
  4287  001B5C  FFFF               	dw	65535	; assembler added errata NOP
  4288  001B5E  EFB9  F00D         	goto	l164
  4289  001B62                     u2890:
  4290  001B62  FFFF               	dw	65535	; assembler added errata NOP
  4291  001B64                     
  4292                           ;motors.c: 379:             LATCbits.LATC2 = 0;
  4293  001B64  948B               	bcf	139,2,c	;volatile
  4294  001B66                     
  4295                           ;motors.c: 380:             tm0Error = 6;
  4296  001B66  0E00               	movlw	0
  4297  001B68  6E5C               	movwf	(_tm0Error+1)^0,c
  4298  001B6A  0E06               	movlw	6
  4299  001B6C  6E5B               	movwf	_tm0Error^0,c
  4300                           
  4301                           ;motors.c: 381:             break;
  4302  001B6E  EFED  F00D         	goto	l3697
  4303  001B72                     l164:
  4304  001B72  FFFF               	dw	65535	; assembler added errata NOP
  4305                           
  4306                           ;motors.c: 385:         LATCbits.LATC2 = 1;
  4307  001B74  848B               	bsf	139,2,c	;volatile
  4308  001B76                     l3689:
  4309  001B76  FFFF               	dw	65535	; assembler added errata NOP
  4310  001B78  EC8D  F011         	call	_stepMade	;wreg free
  4311  001B7C  5012               	movf	?_stepMade^0,w,c
  4312  001B7E  1013               	iorwf	(?_stepMade+1)^0,w,c
  4313  001B80  B4D8               	btfsc	status,2,c
  4314  001B82  EFC5  F00D         	goto	u2901
  4315  001B86  EFC8  F00D         	goto	u2900
  4316  001B8A                     u2901:
  4317  001B8A  FFFF               	dw	65535	; assembler added errata NOP
  4318  001B8C  EFBB  F00D         	goto	l3689
  4319  001B90                     u2900:
  4320  001B90  FFFF               	dw	65535	; assembler added errata NOP
  4321  001B92                     
  4322                           ;motors.c: 391:         LATCbits.LATC2 = 0;
  4323  001B92  948B               	bcf	139,2,c	;volatile
  4324  001B94                     l3691:
  4325  001B94  FFFF               	dw	65535	; assembler added errata NOP
  4326  001B96  EC8D  F011         	call	_stepMade	;wreg free
  4327  001B9A  5012               	movf	?_stepMade^0,w,c
  4328  001B9C  1013               	iorwf	(?_stepMade+1)^0,w,c
  4329  001B9E  B4D8               	btfsc	status,2,c
  4330  001BA0  EFD4  F00D         	goto	u2911
  4331  001BA4  EFD7  F00D         	goto	u2910
  4332  001BA8                     u2911:
  4333  001BA8  FFFF               	dw	65535	; assembler added errata NOP
  4334  001BAA  EFCA  F00D         	goto	l3691
  4335  001BAE                     u2910:
  4336  001BAE                     l3693:
  4337  001BAE  FFFF               	dw	65535	; assembler added errata NOP
  4338                           
  4339                           ;motors.c: 374:     while(!returnTouch() || PORTDbits.RD7){
  4340  001BB0  ECC9  F011         	call	_returnTouch	;wreg free
  4341  001BB4  5012               	movf	?_returnTouch^0,w,c
  4342  001BB6  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4343  001BB8  B4D8               	btfsc	status,2,c
  4344  001BBA  EFE1  F00D         	goto	u2921
  4345  001BBE  EFE4  F00D         	goto	u2920
  4346  001BC2                     u2921:
  4347  001BC2  FFFF               	dw	65535	; assembler added errata NOP
  4348  001BC4  EFA6  F00D         	goto	l3683
  4349  001BC8                     u2920:
  4350  001BC8  FFFF               	dw	65535	; assembler added errata NOP
  4351  001BCA  BE83               	btfsc	131,7,c	;volatile
  4352  001BCC  EFEA  F00D         	goto	u2931
  4353  001BD0  EFED  F00D         	goto	u2930
  4354  001BD4                     u2931:
  4355  001BD4  FFFF               	dw	65535	; assembler added errata NOP
  4356  001BD6  EFA6  F00D         	goto	l3683
  4357  001BDA                     u2930:
  4358  001BDA                     l3697:
  4359  001BDA  FFFF               	dw	65535	; assembler added errata NOP
  4360                           
  4361                           ;motors.c: 398:     stopADC();
  4362  001BDC  EC08  F012         	call	_stopADC	;wreg free
  4363  001BE0                     
  4364                           ;motors.c: 401:     resetTouch();
  4365  001BE0  ECDF  F011         	call	_resetTouch	;wreg free
  4366  001BE4                     
  4367                           ;motors.c: 404:     T0CONbits.TMR0ON = 0;
  4368  001BE4  9ED5               	bcf	213,7,c	;volatile
  4369  001BE6                     
  4370                           ;motors.c: 405:     T2CONbits.TMR2ON = 0;
  4371  001BE6  94CA               	bcf	202,2,c	;volatile
  4372                           
  4373                           ;motors.c: 407:     TMR0 = 0;
  4374  001BE8  0E00               	movlw	0
  4375  001BEA  6ED7               	movwf	215,c	;volatile
  4376  001BEC  0E00               	movlw	0
  4377  001BEE  6ED6               	movwf	214,c	;volatile
  4378                           
  4379                           ;motors.c: 408:     TMR2 = 0;
  4380  001BF0  0E00               	movlw	0
  4381  001BF2  6ECC               	movwf	204,c	;volatile
  4382  001BF4                     
  4383                           ;motors.c: 411:     resetStep();
  4384  001BF4  ECE4  F011         	call	_resetStep	;wreg free
  4385  001BF8                     
  4386                           ;motors.c: 414:     if(PORTDbits.RD7){
  4387  001BF8  AE83               	btfss	131,7,c	;volatile
  4388  001BFA  EF01  F00E         	goto	u2941
  4389  001BFE  EF04  F00E         	goto	u2940
  4390  001C02                     u2941:
  4391  001C02  FFFF               	dw	65535	; assembler added errata NOP
  4392  001C04  EF09  F00E         	goto	l172
  4393  001C08                     u2940:
  4394  001C08  FFFF               	dw	65535	; assembler added errata NOP
  4395  001C0A                     
  4396                           ;motors.c: 415:         tm0Error = 2;
  4397  001C0A  0E00               	movlw	0
  4398  001C0C  6E5C               	movwf	(_tm0Error+1)^0,c
  4399  001C0E  0E02               	movlw	2
  4400  001C10  6E5B               	movwf	_tm0Error^0,c
  4401  001C12                     l172:
  4402  001C12  FFFF               	dw	65535	; assembler added errata NOP
  4403                           
  4404                           ;motors.c: 418:     return(tm0Error);
  4405  001C14  505B               	movf	_tm0Error^0,w,c
  4406  001C16  0012               	return		;funcret
  4407  001C18  FFFF               	dw	65535	; errata NOP
  4408  001C1A                     __end_of_touchObject:
  4409                           	callstack 0
  4410                           
  4411 ;; *************** function _stopADC *****************
  4412 ;; Defined at:
  4413 ;;		line 43 in file "adc.c"
  4414 ;; Parameters:    Size  Location     Type
  4415 ;;		None
  4416 ;; Auto vars:     Size  Location     Type
  4417 ;;		None
  4418 ;; Return value:  Size  Location     Type
  4419 ;;                  1    wreg      void 
  4420 ;; Registers used:
  4421 ;;		None
  4422 ;; Tracked objects:
  4423 ;;		On entry : 0/0
  4424 ;;		On exit  : 0/0
  4425 ;;		Unchanged: 0/0
  4426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4427 ;;      Params:         0       0       0       0       0       0       0
  4428 ;;      Locals:         0       0       0       0       0       0       0
  4429 ;;      Temps:          0       0       0       0       0       0       0
  4430 ;;      Totals:         0       0       0       0       0       0       0
  4431 ;;Total ram usage:        0 bytes
  4432 ;; Hardware stack levels used:    1
  4433 ;; Hardware stack levels required when called:    4
  4434 ;; This function calls:
  4435 ;;		Nothing
  4436 ;; This function is called by:
  4437 ;;		_touchObject
  4438 ;;		_touchTherm
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           	psect	text26
  4443  002410                     __ptext26:
  4444                           	callstack 0
  4445  002410                     _stopADC:
  4446                           	callstack 0
  4447  002410  FFFF               	dw	65535	; assembler added errata NOP
  4448  002412                     
  4449                           ;adc.c: 44:     ADCON0bits.ADON = 0;
  4450  002412  90C2               	bcf	194,0,c	;volatile
  4451  002414  0012               	return		;funcret
  4452  002416  FFFF               	dw	65535	; errata NOP
  4453  002418                     __end_of_stopADC:
  4454                           	callstack 0
  4455                           
  4456 ;; *************** function _startADC *****************
  4457 ;; Defined at:
  4458 ;;		line 36 in file "adc.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;		None
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;		None
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  1    wreg      void 
  4465 ;; Registers used:
  4466 ;;		None
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4472 ;;      Params:         0       0       0       0       0       0       0
  4473 ;;      Locals:         0       0       0       0       0       0       0
  4474 ;;      Temps:          0       0       0       0       0       0       0
  4475 ;;      Totals:         0       0       0       0       0       0       0
  4476 ;;Total ram usage:        0 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    4
  4479 ;; This function calls:
  4480 ;;		Nothing
  4481 ;; This function is called by:
  4482 ;;		_touchObject
  4483 ;;		_touchTherm
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           	psect	text27
  4488  002418                     __ptext27:
  4489                           	callstack 0
  4490  002418                     _startADC:
  4491                           	callstack 0
  4492  002418  FFFF               	dw	65535	; assembler added errata NOP
  4493  00241A                     
  4494                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4495  00241A  80C2               	bsf	194,0,c	;volatile
  4496  00241C  0012               	return		;funcret
  4497  00241E  FFFF               	dw	65535	; errata NOP
  4498  002420                     __end_of_startADC:
  4499                           	callstack 0
  4500                           
  4501 ;; *************** function _returnTouch *****************
  4502 ;; Defined at:
  4503 ;;		line 50 in file "adc.c"
  4504 ;; Parameters:    Size  Location     Type
  4505 ;;		None
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;		None
  4508 ;; Return value:  Size  Location     Type
  4509 ;;                  2   17[COMRAM] unsigned int 
  4510 ;; Registers used:
  4511 ;;		None
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/0
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4517 ;;      Params:         2       0       0       0       0       0       0
  4518 ;;      Locals:         0       0       0       0       0       0       0
  4519 ;;      Temps:          0       0       0       0       0       0       0
  4520 ;;      Totals:         2       0       0       0       0       0       0
  4521 ;;Total ram usage:        2 bytes
  4522 ;; Hardware stack levels used:    1
  4523 ;; Hardware stack levels required when called:    4
  4524 ;; This function calls:
  4525 ;;		Nothing
  4526 ;; This function is called by:
  4527 ;;		_touchObject
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531                           	psect	text28
  4532  002392                     __ptext28:
  4533                           	callstack 0
  4534  002392                     _returnTouch:
  4535                           	callstack 0
  4536  002392  FFFF               	dw	65535	; assembler added errata NOP
  4537  002394                     
  4538                           ;adc.c: 51:     return touch_rel;
  4539  002394  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4540  002398  6A13               	clrf	(?_returnTouch+1)^0,c
  4541  00239A  0012               	return		;funcret
  4542  00239C  FFFF               	dw	65535	; errata NOP
  4543  00239E                     __end_of_returnTouch:
  4544                           	callstack 0
  4545                           
  4546 ;; *************** function _resetTouch *****************
  4547 ;; Defined at:
  4548 ;;		line 64 in file "adc.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;		None
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;		None
  4553 ;; Return value:  Size  Location     Type
  4554 ;;                  1    wreg      void 
  4555 ;; Registers used:
  4556 ;;		wreg, status,2
  4557 ;; Tracked objects:
  4558 ;;		On entry : 0/0
  4559 ;;		On exit  : 0/0
  4560 ;;		Unchanged: 0/0
  4561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4562 ;;      Params:         0       0       0       0       0       0       0
  4563 ;;      Locals:         0       0       0       0       0       0       0
  4564 ;;      Temps:          0       0       0       0       0       0       0
  4565 ;;      Totals:         0       0       0       0       0       0       0
  4566 ;;Total ram usage:        0 bytes
  4567 ;; Hardware stack levels used:    1
  4568 ;; Hardware stack levels required when called:    4
  4569 ;; This function calls:
  4570 ;;		Nothing
  4571 ;; This function is called by:
  4572 ;;		_touchObject
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           	psect	text29
  4577  0023BE                     __ptext29:
  4578                           	callstack 0
  4579  0023BE                     _resetTouch:
  4580                           	callstack 0
  4581  0023BE  FFFF               	dw	65535	; assembler added errata NOP
  4582  0023C0                     
  4583                           ;adc.c: 65:     touch_rel = 0;
  4584  0023C0  0E00               	movlw	0
  4585  0023C2  6E65               	movwf	_touch_rel^0,c	;volatile
  4586  0023C4  0012               	return		;funcret
  4587  0023C6  FFFF               	dw	65535	; errata NOP
  4588  0023C8                     __end_of_resetTouch:
  4589                           	callstack 0
  4590                           
  4591 ;; *************** function _rotateObj *****************
  4592 ;; Defined at:
  4593 ;;		line 550 in file "motors.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;  rotAngle        1    wreg     unsigned char 
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;  rotAngle        1    3[BANK0 ] unsigned char 
  4598 ;;  totStep         2    4[BANK0 ] int 
  4599 ;;  i               1    6[BANK0 ] unsigned char 
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  1    wreg      void 
  4602 ;; Registers used:
  4603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4609 ;;      Params:         0       0       0       0       0       0       0
  4610 ;;      Locals:         0       4       0       0       0       0       0
  4611 ;;      Temps:          0       3       0       0       0       0       0
  4612 ;;      Totals:         0       7       0       0       0       0       0
  4613 ;;Total ram usage:        7 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; Hardware stack levels required when called:    5
  4616 ;; This function calls:
  4617 ;;		___fldiv
  4618 ;;		___fltol
  4619 ;;		___xxtofl
  4620 ;; This function is called by:
  4621 ;;		_executeData
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	text30
  4626  001DC2                     __ptext30:
  4627                           	callstack 0
  4628  001DC2                     _rotateObj:
  4629                           	callstack 0
  4630  001DC2  FFFF               	dw	65535	; assembler added errata NOP
  4631                           
  4632                           ;incstack = 0
  4633                           ;rotateObj@rotAngle stored from wreg
  4634  001DC4  0100               	movlb	0	; () banked
  4635  001DC6  6FF7               	movwf	rotateObj@rotAngle& (0+255),b
  4636  001DC8                     
  4637                           ;motors.c: 551:     static const float stepAngle = 0.08789;;motors.c: 552:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 553:     unsigned char i;
      +                          ;motors.c: 554:     int totStep = rotAngle/stepAngle;
  4638  001DC8  0EAC               	movlw	172
  4639  001DCA  6E24               	movwf	___fldiv@a^0,c
  4640  001DCC  0EFF               	movlw	255
  4641  001DCE  6E25               	movwf	(___fldiv@a+1)^0,c
  4642  001DD0  0EB3               	movlw	179
  4643  001DD2  6E26               	movwf	(___fldiv@a+2)^0,c
  4644  001DD4  0E3D               	movlw	61
  4645  001DD6  6E27               	movwf	(___fldiv@a+3)^0,c
  4646  001DD8  0100               	movlb	0	; () banked
  4647  001DDA  51F7               	movf	rotateObj@rotAngle& (0+255),w,b
  4648  001DDC  6E12               	movwf	___xxtofl@val^0,c
  4649  001DDE  6A13               	clrf	(___xxtofl@val+1)^0,c
  4650  001DE0  6A14               	clrf	(___xxtofl@val+2)^0,c
  4651  001DE2  6A15               	clrf	(___xxtofl@val+3)^0,c
  4652  001DE4  0E01               	movlw	1
  4653  001DE6  EC65  F006         	call	___xxtofl
  4654  001DEA  C012  F020         	movff	?___xxtofl,___fldiv@b
  4655  001DEE  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4656  001DF2  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4657  001DF6  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4658  001DFA  EC08  F003         	call	___fldiv	;wreg free
  4659  001DFE  C020  F039         	movff	?___fldiv,___fltol@f1
  4660  001E02  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4661  001E06  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4662  001E0A  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4663  001E0E  EC64  F00B         	call	___fltol	;wreg free
  4664  001E12  C039  F0F8         	movff	?___fltol,rotateObj@totStep
  4665  001E16  C03A  F0F9         	movff	?___fltol+1,rotateObj@totStep+1
  4666  001E1A                     
  4667                           ;motors.c: 557:     for(i = 0; i < totStep; i++){
  4668  001E1A  0E00               	movlw	0
  4669  001E1C  0100               	movlb	0	; () banked
  4670  001E1E  6FFA               	movwf	rotateObj@i& (0+255),b
  4671  001E20  EF27  F00F         	goto	l3793
  4672  001E24                     l3787:
  4673  001E24  FFFF               	dw	65535	; assembler added errata NOP
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;motors.c: 559:         LATD &= 0xC3;
  4677  001E26  0EC3               	movlw	195
  4678  001E28  168C               	andwf	140,f,c	;volatile
  4679  001E2A                     
  4680                           ; BSR set to: 0
  4681                           ;motors.c: 561:         LATD |= rotSequence[i%4] << 2;
  4682  001E2A  51FA               	movf	rotateObj@i& (0+255),w,b
  4683  001E2C  0B03               	andlw	3
  4684  001E2E  6FF4               	movwf	??_rotateObj& (0+255),b
  4685  001E30  6BF5               	clrf	(??_rotateObj+1)& (0+255),b
  4686  001E32  0E80               	movlw	low rotateObj@rotSequence
  4687  001E34  25F4               	addwf	??_rotateObj& (0+255),w,b
  4688  001E36  6ED9               	movwf	fsr2l,c
  4689  001E38  0E00               	movlw	high rotateObj@rotSequence
  4690  001E3A  21F5               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4691  001E3C  6EDA               	movwf	fsr2h,c
  4692  001E3E  50DF               	movf	indf2,w,c
  4693  001E40  6FF6               	movwf	(??_rotateObj+2)& (0+255),b
  4694  001E42  90D8               	bcf	status,0,c
  4695  001E44  37F6               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4696  001E46  90D8               	bcf	status,0,c
  4697  001E48  35F6               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4698  001E4A  128C               	iorwf	140,f,c	;volatile
  4699  001E4C                     
  4700                           ; BSR set to: 0
  4701                           ;motors.c: 562:     }
  4702  001E4C  2BFA               	incf	rotateObj@i& (0+255),f,b
  4703  001E4E                     l3793:
  4704  001E4E  FFFF               	dw	65535	; assembler added errata NOP
  4705                           
  4706                           ; BSR set to: 0
  4707  001E50  51FA               	movf	rotateObj@i& (0+255),w,b
  4708  001E52  6FF4               	movwf	??_rotateObj& (0+255),b
  4709  001E54  6BF5               	clrf	(??_rotateObj+1)& (0+255),b
  4710  001E56  51F8               	movf	rotateObj@totStep& (0+255),w,b
  4711  001E58  5DF4               	subwf	??_rotateObj& (0+255),w,b
  4712  001E5A  51F5               	movf	(??_rotateObj+1)& (0+255),w,b
  4713  001E5C  0A80               	xorlw	128
  4714  001E5E  6FF6               	movwf	(??_rotateObj+2)& (0+255),b
  4715  001E60  51F9               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4716  001E62  0A80               	xorlw	128
  4717  001E64  59F6               	subwfb	(??_rotateObj+2)& (0+255),w,b
  4718  001E66  A0D8               	btfss	status,0,c
  4719  001E68  EF38  F00F         	goto	u3051
  4720  001E6C  EF3B  F00F         	goto	u3050
  4721  001E70                     u3051:
  4722  001E70  FFFF               	dw	65535	; assembler added errata NOP
  4723  001E72  EF12  F00F         	goto	l3787
  4724  001E76                     u3050:
  4725  001E76  FFFF               	dw	65535	; assembler added errata NOP
  4726  001E78                     
  4727                           ; BSR set to: 0
  4728  001E78  0012               	return		;funcret
  4729  001E7A  FFFF               	dw	65535	; errata NOP
  4730  001E7C                     __end_of_rotateObj:
  4731                           	callstack 0
  4732                           
  4733 ;; *************** function ___xxtofl *****************
  4734 ;; Defined at:
  4735 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;  sign            1    wreg     unsigned char 
  4738 ;;  val             4   17[COMRAM] long 
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;  sign            1   25[COMRAM] unsigned char 
  4741 ;;  arg             4   27[COMRAM] unsigned long 
  4742 ;;  exp             1   26[COMRAM] unsigned char 
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  4   17[COMRAM] unsigned char 
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4752 ;;      Params:         4       0       0       0       0       0       0
  4753 ;;      Locals:         6       0       0       0       0       0       0
  4754 ;;      Temps:          4       0       0       0       0       0       0
  4755 ;;      Totals:        14       0       0       0       0       0       0
  4756 ;;Total ram usage:       14 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    4
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_rotateObj
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           	psect	text31
  4767  000CCA                     __ptext31:
  4768                           	callstack 0
  4769  000CCA                     ___xxtofl:
  4770                           	callstack 0
  4771  000CCA  FFFF               	dw	65535	; assembler added errata NOP
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;incstack = 0
  4775                           ;___xxtofl@sign stored from wreg
  4776  000CCC  6E1A               	movwf	___xxtofl@sign^0,c
  4777  000CCE  501A               	movf	___xxtofl@sign^0,w,c
  4778  000CD0  B4D8               	btfsc	status,2,c
  4779  000CD2  EF6D  F006         	goto	u2621
  4780  000CD6  EF70  F006         	goto	u2620
  4781  000CDA                     u2621:
  4782  000CDA  FFFF               	dw	65535	; assembler added errata NOP
  4783  000CDC  EF95  F006         	goto	l1225
  4784  000CE0                     u2620:
  4785  000CE0  FFFF               	dw	65535	; assembler added errata NOP
  4786  000CE2  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4787  000CE4  EF79  F006         	goto	u2630
  4788  000CE8  EF76  F006         	goto	u2631
  4789  000CEC                     u2631:
  4790  000CEC  FFFF               	dw	65535	; assembler added errata NOP
  4791  000CEE  EF95  F006         	goto	l1225
  4792  000CF2                     u2630:
  4793  000CF2  FFFF               	dw	65535	; assembler added errata NOP
  4794  000CF4  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4795  000CF8  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4796  000CFC  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4797  000D00  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4798  000D04  1E16               	comf	??___xxtofl^0,f,c
  4799  000D06  1E17               	comf	(??___xxtofl+1)^0,f,c
  4800  000D08  1E18               	comf	(??___xxtofl+2)^0,f,c
  4801  000D0A  1E19               	comf	(??___xxtofl+3)^0,f,c
  4802  000D0C  2A16               	incf	??___xxtofl^0,f,c
  4803  000D0E  0E00               	movlw	0
  4804  000D10  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4805  000D12  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4806  000D14  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4807  000D16  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4808  000D1A  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4809  000D1E  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4810  000D22  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4811  000D26  EF9E  F006         	goto	l3521
  4812  000D2A                     l1225:
  4813  000D2A  FFFF               	dw	65535	; assembler added errata NOP
  4814  000D2C  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4815  000D30  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4816  000D34  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4817  000D38  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4818  000D3C                     l3521:
  4819  000D3C  FFFF               	dw	65535	; assembler added errata NOP
  4820  000D3E  5012               	movf	___xxtofl@val^0,w,c
  4821  000D40  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4822  000D42  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4823  000D44  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4824  000D46  A4D8               	btfss	status,2,c
  4825  000D48  EFA8  F006         	goto	u2641
  4826  000D4C  EFAB  F006         	goto	u2640
  4827  000D50                     u2641:
  4828  000D50  FFFF               	dw	65535	; assembler added errata NOP
  4829  000D52  EFB6  F006         	goto	l3527
  4830  000D56                     u2640:
  4831  000D56  FFFF               	dw	65535	; assembler added errata NOP
  4832  000D58  0E00               	movlw	0
  4833  000D5A  6E12               	movwf	?___xxtofl^0,c
  4834  000D5C  0E00               	movlw	0
  4835  000D5E  6E13               	movwf	(?___xxtofl+1)^0,c
  4836  000D60  0E00               	movlw	0
  4837  000D62  6E14               	movwf	(?___xxtofl+2)^0,c
  4838  000D64  0E00               	movlw	0
  4839  000D66  6E15               	movwf	(?___xxtofl+3)^0,c
  4840  000D68  EF5E  F007         	goto	l1228
  4841  000D6C                     l3527:
  4842  000D6C  FFFF               	dw	65535	; assembler added errata NOP
  4843  000D6E  0E96               	movlw	150
  4844  000D70  6E1B               	movwf	___xxtofl@exp^0,c
  4845  000D72  EFC2  F006         	goto	l3531
  4846  000D76                     l3529:
  4847  000D76  FFFF               	dw	65535	; assembler added errata NOP
  4848  000D78  2A1B               	incf	___xxtofl@exp^0,f,c
  4849  000D7A  90D8               	bcf	status,0,c
  4850  000D7C  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4851  000D7E  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4852  000D80  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4853  000D82  321C               	rrcf	___xxtofl@arg^0,f,c
  4854  000D84                     l3531:
  4855  000D84  FFFF               	dw	65535	; assembler added errata NOP
  4856  000D86  0E00               	movlw	0
  4857  000D88  141C               	andwf	___xxtofl@arg^0,w,c
  4858  000D8A  6E16               	movwf	??___xxtofl^0,c
  4859  000D8C  0E00               	movlw	0
  4860  000D8E  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4861  000D90  6E17               	movwf	(??___xxtofl+1)^0,c
  4862  000D92  0E00               	movlw	0
  4863  000D94  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4864  000D96  6E18               	movwf	(??___xxtofl+2)^0,c
  4865  000D98  0EFE               	movlw	254
  4866  000D9A  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4867  000D9C  6E19               	movwf	(??___xxtofl+3)^0,c
  4868  000D9E  5016               	movf	??___xxtofl^0,w,c
  4869  000DA0  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4870  000DA2  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4871  000DA4  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4872  000DA6  A4D8               	btfss	status,2,c
  4873  000DA8  EFD8  F006         	goto	u2651
  4874  000DAC  EFDB  F006         	goto	u2650
  4875  000DB0                     u2651:
  4876  000DB0  FFFF               	dw	65535	; assembler added errata NOP
  4877  000DB2  EFBB  F006         	goto	l3529
  4878  000DB6                     u2650:
  4879  000DB6  FFFF               	dw	65535	; assembler added errata NOP
  4880  000DB8  EFEB  F006         	goto	l1232
  4881  000DBC                     l3533:
  4882  000DBC  FFFF               	dw	65535	; assembler added errata NOP
  4883  000DBE  2A1B               	incf	___xxtofl@exp^0,f,c
  4884  000DC0  0E01               	movlw	1
  4885  000DC2  261C               	addwf	___xxtofl@arg^0,f,c
  4886  000DC4  0E00               	movlw	0
  4887  000DC6  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4888  000DC8  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4889  000DCA  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4890  000DCC  90D8               	bcf	status,0,c
  4891  000DCE  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4892  000DD0  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4893  000DD2  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4894  000DD4  321C               	rrcf	___xxtofl@arg^0,f,c
  4895  000DD6                     l1232:
  4896  000DD6  FFFF               	dw	65535	; assembler added errata NOP
  4897  000DD8  0E00               	movlw	0
  4898  000DDA  141C               	andwf	___xxtofl@arg^0,w,c
  4899  000DDC  6E16               	movwf	??___xxtofl^0,c
  4900  000DDE  0E00               	movlw	0
  4901  000DE0  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4902  000DE2  6E17               	movwf	(??___xxtofl+1)^0,c
  4903  000DE4  0E00               	movlw	0
  4904  000DE6  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4905  000DE8  6E18               	movwf	(??___xxtofl+2)^0,c
  4906  000DEA  0EFF               	movlw	255
  4907  000DEC  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4908  000DEE  6E19               	movwf	(??___xxtofl+3)^0,c
  4909  000DF0  5016               	movf	??___xxtofl^0,w,c
  4910  000DF2  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4911  000DF4  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4912  000DF6  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4913  000DF8  A4D8               	btfss	status,2,c
  4914  000DFA  EF01  F007         	goto	u2661
  4915  000DFE  EF04  F007         	goto	u2660
  4916  000E02                     u2661:
  4917  000E02  FFFF               	dw	65535	; assembler added errata NOP
  4918  000E04  EFDE  F006         	goto	l3533
  4919  000E08                     u2660:
  4920  000E08  FFFF               	dw	65535	; assembler added errata NOP
  4921  000E0A  EF0E  F007         	goto	l3541
  4922  000E0E                     l3539:
  4923  000E0E  FFFF               	dw	65535	; assembler added errata NOP
  4924  000E10  061B               	decf	___xxtofl@exp^0,f,c
  4925  000E12  90D8               	bcf	status,0,c
  4926  000E14  361C               	rlcf	___xxtofl@arg^0,f,c
  4927  000E16  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4928  000E18  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4929  000E1A  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4930  000E1C                     l3541:
  4931  000E1C  FFFF               	dw	65535	; assembler added errata NOP
  4932  000E1E  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4933  000E20  EF14  F007         	goto	u2671
  4934  000E24  EF17  F007         	goto	u2670
  4935  000E28                     u2671:
  4936  000E28  FFFF               	dw	65535	; assembler added errata NOP
  4937  000E2A  EF21  F007         	goto	l1239
  4938  000E2E                     u2670:
  4939  000E2E  FFFF               	dw	65535	; assembler added errata NOP
  4940  000E30  0E02               	movlw	2
  4941  000E32  601B               	cpfslt	___xxtofl@exp^0,c
  4942  000E34  EF1E  F007         	goto	u2681
  4943  000E38  EF21  F007         	goto	u2680
  4944  000E3C                     u2681:
  4945  000E3C  FFFF               	dw	65535	; assembler added errata NOP
  4946  000E3E  EF07  F007         	goto	l3539
  4947  000E42                     u2680:
  4948  000E42                     l1239:
  4949  000E42  FFFF               	dw	65535	; assembler added errata NOP
  4950  000E44  B01B               	btfsc	___xxtofl@exp^0,0,c
  4951  000E46  EF27  F007         	goto	u2691
  4952  000E4A  EF2A  F007         	goto	u2690
  4953  000E4E                     u2691:
  4954  000E4E  FFFF               	dw	65535	; assembler added errata NOP
  4955  000E50  EF2C  F007         	goto	l3547
  4956  000E54                     u2690:
  4957  000E54  FFFF               	dw	65535	; assembler added errata NOP
  4958  000E56  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4959  000E58                     l3547:
  4960  000E58  FFFF               	dw	65535	; assembler added errata NOP
  4961  000E5A  90D8               	bcf	status,0,c
  4962  000E5C  321B               	rrcf	___xxtofl@exp^0,f,c
  4963  000E5E  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4964  000E62  6A17               	clrf	(??___xxtofl+1)^0,c
  4965  000E64  6A18               	clrf	(??___xxtofl+2)^0,c
  4966  000E66  6A19               	clrf	(??___xxtofl+3)^0,c
  4967  000E68  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4968  000E6C  6A18               	clrf	(??___xxtofl+2)^0,c
  4969  000E6E  6A17               	clrf	(??___xxtofl+1)^0,c
  4970  000E70  6A16               	clrf	??___xxtofl^0,c
  4971  000E72  5016               	movf	??___xxtofl^0,w,c
  4972  000E74  121C               	iorwf	___xxtofl@arg^0,f,c
  4973  000E76  5017               	movf	(??___xxtofl+1)^0,w,c
  4974  000E78  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4975  000E7A  5018               	movf	(??___xxtofl+2)^0,w,c
  4976  000E7C  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4977  000E7E  5019               	movf	(??___xxtofl+3)^0,w,c
  4978  000E80  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4979  000E82  501A               	movf	___xxtofl@sign^0,w,c
  4980  000E84  B4D8               	btfsc	status,2,c
  4981  000E86  EF47  F007         	goto	u2701
  4982  000E8A  EF4A  F007         	goto	u2700
  4983  000E8E                     u2701:
  4984  000E8E  FFFF               	dw	65535	; assembler added errata NOP
  4985  000E90  EF55  F007         	goto	l3557
  4986  000E94                     u2700:
  4987  000E94  FFFF               	dw	65535	; assembler added errata NOP
  4988  000E96  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4989  000E98  EF53  F007         	goto	u2710
  4990  000E9C  EF50  F007         	goto	u2711
  4991  000EA0                     u2711:
  4992  000EA0  FFFF               	dw	65535	; assembler added errata NOP
  4993  000EA2  EF55  F007         	goto	l3557
  4994  000EA6                     u2710:
  4995  000EA6  FFFF               	dw	65535	; assembler added errata NOP
  4996  000EA8  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4997  000EAA                     l3557:
  4998  000EAA  FFFF               	dw	65535	; assembler added errata NOP
  4999  000EAC  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  5000  000EB0  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  5001  000EB4  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  5002  000EB8  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5003  000EBC                     l1228:
  5004  000EBC  FFFF               	dw	65535	; assembler added errata NOP
  5005  000EBE  0012               	return		;funcret
  5006  000EC0  FFFF               	dw	65535	; errata NOP
  5007  000EC2                     __end_of___xxtofl:
  5008                           	callstack 0
  5009                           
  5010 ;; *************** function ___fltol *****************
  5011 ;; Defined at:
  5012 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;  f1              4   56[COMRAM] unsigned char 
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;  exp1            1   65[COMRAM] unsigned char 
  5017 ;;  sign1           1   64[COMRAM] unsigned char 
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  4   56[COMRAM] long 
  5020 ;; Registers used:
  5021 ;;		wreg, status,2, status,0
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5027 ;;      Params:         4       0       0       0       0       0       0
  5028 ;;      Locals:         2       0       0       0       0       0       0
  5029 ;;      Temps:          4       0       0       0       0       0       0
  5030 ;;      Totals:        10       0       0       0       0       0       0
  5031 ;;Total ram usage:       10 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:    4
  5034 ;; This function calls:
  5035 ;;		Nothing
  5036 ;; This function is called by:
  5037 ;;		_rotateObj
  5038 ;; This function uses a non-reentrant model
  5039 ;;
  5040                           
  5041                           	psect	text32
  5042  0016C8                     __ptext32:
  5043                           	callstack 0
  5044  0016C8                     ___fltol:
  5045                           	callstack 0
  5046  0016C8  FFFF               	dw	65535	; assembler added errata NOP
  5047  0016CA  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5048  0016CC  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5049  0016CE  6E42               	movwf	___fltol@exp1^0,c
  5050  0016D0  5042               	movf	___fltol@exp1^0,w,c
  5051  0016D2  A4D8               	btfss	status,2,c
  5052  0016D4  EF6E  F00B         	goto	u2551
  5053  0016D8  EF71  F00B         	goto	u2550
  5054  0016DC                     u2551:
  5055  0016DC  FFFF               	dw	65535	; assembler added errata NOP
  5056  0016DE  EF7D  F00B         	goto	l3477
  5057  0016E2                     u2550:
  5058  0016E2  FFFF               	dw	65535	; assembler added errata NOP
  5059  0016E4                     l3473:
  5060  0016E4  FFFF               	dw	65535	; assembler added errata NOP
  5061  0016E6  0E00               	movlw	0
  5062  0016E8  6E39               	movwf	?___fltol^0,c
  5063  0016EA  0E00               	movlw	0
  5064  0016EC  6E3A               	movwf	(?___fltol+1)^0,c
  5065  0016EE  0E00               	movlw	0
  5066  0016F0  6E3B               	movwf	(?___fltol+2)^0,c
  5067  0016F2  0E00               	movlw	0
  5068  0016F4  6E3C               	movwf	(?___fltol+3)^0,c
  5069  0016F6  EFFC  F00B         	goto	l867
  5070  0016FA                     l3477:
  5071  0016FA  FFFF               	dw	65535	; assembler added errata NOP
  5072  0016FC  C039  F03D         	movff	___fltol@f1,??___fltol
  5073  001700  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5074  001704  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5075  001708  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5076  00170C  0E20               	movlw	32
  5077  00170E  EF8F  F00B         	goto	u2560
  5078  001712                     u2565:
  5079  001712  FFFF               	dw	65535	; assembler added errata NOP
  5080  001714  90D8               	bcf	status,0,c
  5081  001716  3240               	rrcf	(??___fltol+3)^0,f,c
  5082  001718  323F               	rrcf	(??___fltol+2)^0,f,c
  5083  00171A  323E               	rrcf	(??___fltol+1)^0,f,c
  5084  00171C  323D               	rrcf	??___fltol^0,f,c
  5085  00171E                     u2560:
  5086  00171E  FFFF               	dw	65535	; assembler added errata NOP
  5087  001720  2EE8               	decfsz	wreg,f,c
  5088  001722  EF89  F00B         	goto	u2565
  5089  001726  503D               	movf	??___fltol^0,w,c
  5090  001728  6E41               	movwf	___fltol@sign1^0,c
  5091  00172A  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5092  00172C  0EFF               	movlw	255
  5093  00172E  1639               	andwf	___fltol@f1^0,f,c
  5094  001730  0EFF               	movlw	255
  5095  001732  163A               	andwf	(___fltol@f1+1)^0,f,c
  5096  001734  0EFF               	movlw	255
  5097  001736  163B               	andwf	(___fltol@f1+2)^0,f,c
  5098  001738  0E00               	movlw	0
  5099  00173A  163C               	andwf	(___fltol@f1+3)^0,f,c
  5100  00173C  0E96               	movlw	150
  5101  00173E  5E42               	subwf	___fltol@exp1^0,f,c
  5102  001740  BE42               	btfsc	___fltol@exp1^0,7,c
  5103  001742  EFA8  F00B         	goto	u2570
  5104  001746  EFA5  F00B         	goto	u2571
  5105  00174A                     u2571:
  5106  00174A  FFFF               	dw	65535	; assembler added errata NOP
  5107  00174C  EFC2  F00B         	goto	l3497
  5108  001750                     u2570:
  5109  001750  FFFF               	dw	65535	; assembler added errata NOP
  5110  001752  5042               	movf	___fltol@exp1^0,w,c
  5111  001754  0A80               	xorlw	128
  5112  001756  0F97               	addlw	151
  5113  001758  B0D8               	btfsc	status,0,c
  5114  00175A  EFB1  F00B         	goto	u2581
  5115  00175E  EFB4  F00B         	goto	u2580
  5116  001762                     u2581:
  5117  001762  FFFF               	dw	65535	; assembler added errata NOP
  5118  001764  EFB7  F00B         	goto	l3493
  5119  001768                     u2580:
  5120  001768  FFFF               	dw	65535	; assembler added errata NOP
  5121  00176A  EF72  F00B         	goto	l3473
  5122  00176E                     l3493:
  5123  00176E  FFFF               	dw	65535	; assembler added errata NOP
  5124  001770  90D8               	bcf	status,0,c
  5125  001772  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5126  001774  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5127  001776  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5128  001778  3239               	rrcf	___fltol@f1^0,f,c
  5129  00177A  3E42               	incfsz	___fltol@exp1^0,f,c
  5130  00177C  EFB7  F00B         	goto	l3493
  5131  001780  EFE0  F00B         	goto	l3507
  5132  001784                     l3497:
  5133  001784  FFFF               	dw	65535	; assembler added errata NOP
  5134  001786  0E1F               	movlw	31
  5135  001788  6442               	cpfsgt	___fltol@exp1^0,c
  5136  00178A  EFC9  F00B         	goto	u2591
  5137  00178E  EFCC  F00B         	goto	u2590
  5138  001792                     u2591:
  5139  001792  FFFF               	dw	65535	; assembler added errata NOP
  5140  001794  EFD6  F00B         	goto	l3505
  5141  001798                     u2590:
  5142  001798  FFFF               	dw	65535	; assembler added errata NOP
  5143  00179A  EF72  F00B         	goto	l3473
  5144  00179E                     l3503:
  5145  00179E  FFFF               	dw	65535	; assembler added errata NOP
  5146  0017A0  90D8               	bcf	status,0,c
  5147  0017A2  3639               	rlcf	___fltol@f1^0,f,c
  5148  0017A4  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5149  0017A6  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5150  0017A8  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5151  0017AA  0642               	decf	___fltol@exp1^0,f,c
  5152  0017AC                     l3505:
  5153  0017AC  FFFF               	dw	65535	; assembler added errata NOP
  5154  0017AE  5042               	movf	___fltol@exp1^0,w,c
  5155  0017B0  A4D8               	btfss	status,2,c
  5156  0017B2  EFDD  F00B         	goto	u2601
  5157  0017B6  EFE0  F00B         	goto	u2600
  5158  0017BA                     u2601:
  5159  0017BA  FFFF               	dw	65535	; assembler added errata NOP
  5160  0017BC  EFCF  F00B         	goto	l3503
  5161  0017C0                     u2600:
  5162  0017C0                     l3507:
  5163  0017C0  FFFF               	dw	65535	; assembler added errata NOP
  5164  0017C2  5041               	movf	___fltol@sign1^0,w,c
  5165  0017C4  B4D8               	btfsc	status,2,c
  5166  0017C6  EFE7  F00B         	goto	u2611
  5167  0017CA  EFEA  F00B         	goto	u2610
  5168  0017CE                     u2611:
  5169  0017CE  FFFF               	dw	65535	; assembler added errata NOP
  5170  0017D0  EFF3  F00B         	goto	l3511
  5171  0017D4                     u2610:
  5172  0017D4  FFFF               	dw	65535	; assembler added errata NOP
  5173  0017D6  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5174  0017D8  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5175  0017DA  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5176  0017DC  6C39               	negf	___fltol@f1^0,c
  5177  0017DE  0E00               	movlw	0
  5178  0017E0  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5179  0017E2  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5180  0017E4  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5181  0017E6                     l3511:
  5182  0017E6  FFFF               	dw	65535	; assembler added errata NOP
  5183  0017E8  C039  F039         	movff	___fltol@f1,?___fltol
  5184  0017EC  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5185  0017F0  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5186  0017F4  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5187  0017F8                     l867:
  5188  0017F8  FFFF               	dw	65535	; assembler added errata NOP
  5189  0017FA  0012               	return		;funcret
  5190  0017FC  FFFF               	dw	65535	; errata NOP
  5191  0017FE                     __end_of___fltol:
  5192                           	callstack 0
  5193                           
  5194 ;; *************** function ___fldiv *****************
  5195 ;; Defined at:
  5196 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5197 ;; Parameters:    Size  Location     Type
  5198 ;;  b               4   31[COMRAM] long 
  5199 ;;  a               4   35[COMRAM] long 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  grs             4   50[COMRAM] unsigned long 
  5202 ;;  rem             4   43[COMRAM] unsigned long 
  5203 ;;  new_exp         2   48[COMRAM] short 
  5204 ;;  aexp            1   55[COMRAM] unsigned char 
  5205 ;;  bexp            1   54[COMRAM] unsigned char 
  5206 ;;  sign            1   47[COMRAM] unsigned char 
  5207 ;; Return value:  Size  Location     Type
  5208 ;;                  4   31[COMRAM] unsigned char 
  5209 ;; Registers used:
  5210 ;;		wreg, status,2, status,0
  5211 ;; Tracked objects:
  5212 ;;		On entry : 0/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5216 ;;      Params:         8       0       0       0       0       0       0
  5217 ;;      Locals:        13       0       0       0       0       0       0
  5218 ;;      Temps:          4       0       0       0       0       0       0
  5219 ;;      Totals:        25       0       0       0       0       0       0
  5220 ;;Total ram usage:       25 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:    4
  5223 ;; This function calls:
  5224 ;;		Nothing
  5225 ;; This function is called by:
  5226 ;;		_rotateObj
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text33
  5231  000610                     __ptext33:
  5232                           	callstack 0
  5233  000610                     ___fldiv:
  5234                           	callstack 0
  5235  000610  FFFF               	dw	65535	; assembler added errata NOP
  5236  000612  5023               	movf	(___fldiv@b+3)^0,w,c
  5237  000614  0B80               	andlw	128
  5238  000616  6E30               	movwf	___fldiv@sign^0,c
  5239  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  5240  00061A  2423               	addwf	(___fldiv@b+3)^0,w,c
  5241  00061C  6E37               	movwf	___fldiv@bexp^0,c
  5242  00061E  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5243  000620  EF14  F003         	goto	u2321
  5244  000624  EF17  F003         	goto	u2320
  5245  000628                     u2321:
  5246  000628  FFFF               	dw	65535	; assembler added errata NOP
  5247  00062A  EF19  F003         	goto	l3339
  5248  00062E                     u2320:
  5249  00062E  FFFF               	dw	65535	; assembler added errata NOP
  5250  000630  8037               	bsf	___fldiv@bexp^0,0,c
  5251  000632                     l3339:
  5252  000632  FFFF               	dw	65535	; assembler added errata NOP
  5253  000634  5037               	movf	___fldiv@bexp^0,w,c
  5254  000636  B4D8               	btfsc	status,2,c
  5255  000638  EF20  F003         	goto	u2331
  5256  00063C  EF23  F003         	goto	u2330
  5257  000640                     u2331:
  5258  000640  FFFF               	dw	65535	; assembler added errata NOP
  5259  000642  EF3C  F003         	goto	l3349
  5260  000646                     u2330:
  5261  000646  FFFF               	dw	65535	; assembler added errata NOP
  5262  000648  2837               	incf	___fldiv@bexp^0,w,c
  5263  00064A  A4D8               	btfss	status,2,c
  5264  00064C  EF2A  F003         	goto	u2341
  5265  000650  EF2D  F003         	goto	u2340
  5266  000654                     u2341:
  5267  000654  FFFF               	dw	65535	; assembler added errata NOP
  5268  000656  EF36  F003         	goto	l3345
  5269  00065A                     u2340:
  5270  00065A  FFFF               	dw	65535	; assembler added errata NOP
  5271  00065C  0E00               	movlw	0
  5272  00065E  6E20               	movwf	___fldiv@b^0,c
  5273  000660  0E00               	movlw	0
  5274  000662  6E21               	movwf	(___fldiv@b+1)^0,c
  5275  000664  0E00               	movlw	0
  5276  000666  6E22               	movwf	(___fldiv@b+2)^0,c
  5277  000668  0E00               	movlw	0
  5278  00066A  6E23               	movwf	(___fldiv@b+3)^0,c
  5279  00066C                     l3345:
  5280  00066C  FFFF               	dw	65535	; assembler added errata NOP
  5281  00066E  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5282  000670  0E00               	movlw	0
  5283  000672  6E23               	movwf	(___fldiv@b+3)^0,c
  5284  000674  EF45  F003         	goto	l3351
  5285  000678                     l3349:
  5286  000678  FFFF               	dw	65535	; assembler added errata NOP
  5287  00067A  0E00               	movlw	0
  5288  00067C  6E20               	movwf	___fldiv@b^0,c
  5289  00067E  0E00               	movlw	0
  5290  000680  6E21               	movwf	(___fldiv@b+1)^0,c
  5291  000682  0E00               	movlw	0
  5292  000684  6E22               	movwf	(___fldiv@b+2)^0,c
  5293  000686  0E00               	movlw	0
  5294  000688  6E23               	movwf	(___fldiv@b+3)^0,c
  5295  00068A                     l3351:
  5296  00068A  FFFF               	dw	65535	; assembler added errata NOP
  5297  00068C  5027               	movf	(___fldiv@a+3)^0,w,c
  5298  00068E  0B80               	andlw	128
  5299  000690  1A30               	xorwf	___fldiv@sign^0,f,c
  5300  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  5301  000694  2427               	addwf	(___fldiv@a+3)^0,w,c
  5302  000696  6E38               	movwf	___fldiv@aexp^0,c
  5303  000698  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5304  00069A  EF51  F003         	goto	u2351
  5305  00069E  EF54  F003         	goto	u2350
  5306  0006A2                     u2351:
  5307  0006A2  FFFF               	dw	65535	; assembler added errata NOP
  5308  0006A4  EF56  F003         	goto	l3359
  5309  0006A8                     u2350:
  5310  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  5311  0006AA  8038               	bsf	___fldiv@aexp^0,0,c
  5312  0006AC                     l3359:
  5313  0006AC  FFFF               	dw	65535	; assembler added errata NOP
  5314  0006AE  5038               	movf	___fldiv@aexp^0,w,c
  5315  0006B0  B4D8               	btfsc	status,2,c
  5316  0006B2  EF5D  F003         	goto	u2361
  5317  0006B6  EF60  F003         	goto	u2360
  5318  0006BA                     u2361:
  5319  0006BA  FFFF               	dw	65535	; assembler added errata NOP
  5320  0006BC  EF79  F003         	goto	l3369
  5321  0006C0                     u2360:
  5322  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  5323  0006C2  2838               	incf	___fldiv@aexp^0,w,c
  5324  0006C4  A4D8               	btfss	status,2,c
  5325  0006C6  EF67  F003         	goto	u2371
  5326  0006CA  EF6A  F003         	goto	u2370
  5327  0006CE                     u2371:
  5328  0006CE  FFFF               	dw	65535	; assembler added errata NOP
  5329  0006D0  EF73  F003         	goto	l3365
  5330  0006D4                     u2370:
  5331  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  5332  0006D6  0E00               	movlw	0
  5333  0006D8  6E24               	movwf	___fldiv@a^0,c
  5334  0006DA  0E00               	movlw	0
  5335  0006DC  6E25               	movwf	(___fldiv@a+1)^0,c
  5336  0006DE  0E00               	movlw	0
  5337  0006E0  6E26               	movwf	(___fldiv@a+2)^0,c
  5338  0006E2  0E00               	movlw	0
  5339  0006E4  6E27               	movwf	(___fldiv@a+3)^0,c
  5340  0006E6                     l3365:
  5341  0006E6  FFFF               	dw	65535	; assembler added errata NOP
  5342  0006E8  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5343  0006EA  0E00               	movlw	0
  5344  0006EC  6E27               	movwf	(___fldiv@a+3)^0,c
  5345  0006EE  EF82  F003         	goto	l3371
  5346  0006F2                     l3369:
  5347  0006F2  FFFF               	dw	65535	; assembler added errata NOP
  5348  0006F4  0E00               	movlw	0
  5349  0006F6  6E24               	movwf	___fldiv@a^0,c
  5350  0006F8  0E00               	movlw	0
  5351  0006FA  6E25               	movwf	(___fldiv@a+1)^0,c
  5352  0006FC  0E00               	movlw	0
  5353  0006FE  6E26               	movwf	(___fldiv@a+2)^0,c
  5354  000700  0E00               	movlw	0
  5355  000702  6E27               	movwf	(___fldiv@a+3)^0,c
  5356  000704                     l3371:
  5357  000704  FFFF               	dw	65535	; assembler added errata NOP
  5358  000706  5024               	movf	___fldiv@a^0,w,c
  5359  000708  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5360  00070A  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5361  00070C  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5362  00070E  A4D8               	btfss	status,2,c
  5363  000710  EF8C  F003         	goto	u2381
  5364  000714  EF8F  F003         	goto	u2380
  5365  000718                     u2381:
  5366  000718  FFFF               	dw	65535	; assembler added errata NOP
  5367  00071A  EFA9  F003         	goto	l3383
  5368  00071E                     u2380:
  5369  00071E  FFFF               	dw	65535	; assembler added errata NOP
  5370  000720  0E00               	movlw	0
  5371  000722  6E20               	movwf	___fldiv@b^0,c
  5372  000724  0E00               	movlw	0
  5373  000726  6E21               	movwf	(___fldiv@b+1)^0,c
  5374  000728  0E00               	movlw	0
  5375  00072A  6E22               	movwf	(___fldiv@b+2)^0,c
  5376  00072C  0E00               	movlw	0
  5377  00072E  6E23               	movwf	(___fldiv@b+3)^0,c
  5378  000730  0E80               	movlw	128
  5379  000732  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5380  000734  0E7F               	movlw	127
  5381  000736  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5382  000738                     l3377:
  5383  000738  FFFF               	dw	65535	; assembler added errata NOP
  5384  00073A  5030               	movf	___fldiv@sign^0,w,c
  5385  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5386  00073E  C020  F020         	movff	___fldiv@b,?___fldiv
  5387  000742  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5388  000746  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5389  00074A  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5390  00074E  EF1E  F005         	goto	l1152
  5391  000752                     l3383:
  5392  000752  FFFF               	dw	65535	; assembler added errata NOP
  5393  000754  5037               	movf	___fldiv@bexp^0,w,c
  5394  000756  A4D8               	btfss	status,2,c
  5395  000758  EFB0  F003         	goto	u2391
  5396  00075C  EFB3  F003         	goto	u2390
  5397  000760                     u2391:
  5398  000760  FFFF               	dw	65535	; assembler added errata NOP
  5399  000762  EFBE  F003         	goto	l3391
  5400  000766                     u2390:
  5401  000766  FFFF               	dw	65535	; assembler added errata NOP
  5402  000768  0E00               	movlw	0
  5403  00076A  6E20               	movwf	?___fldiv^0,c
  5404  00076C  0E00               	movlw	0
  5405  00076E  6E21               	movwf	(?___fldiv+1)^0,c
  5406  000770  0E00               	movlw	0
  5407  000772  6E22               	movwf	(?___fldiv+2)^0,c
  5408  000774  0E00               	movlw	0
  5409  000776  6E23               	movwf	(?___fldiv+3)^0,c
  5410  000778  EF1E  F005         	goto	l1152
  5411  00077C                     l3391:
  5412  00077C  FFFF               	dw	65535	; assembler added errata NOP
  5413  00077E  5038               	movf	___fldiv@aexp^0,w,c
  5414  000780  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5415  000784  6A29               	clrf	(??___fldiv+1)^0,c
  5416  000786  5E28               	subwf	??___fldiv^0,f,c
  5417  000788  0E00               	movlw	0
  5418  00078A  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5419  00078C  0E7F               	movlw	127
  5420  00078E  2428               	addwf	??___fldiv^0,w,c
  5421  000790  6E31               	movwf	___fldiv@new_exp^0,c
  5422  000792  0E00               	movlw	0
  5423  000794  2029               	addwfc	(??___fldiv+1)^0,w,c
  5424  000796  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5425  000798  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5426  00079C  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5427  0007A0  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5428  0007A4  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5429  0007A8  0E00               	movlw	0
  5430  0007AA  6E20               	movwf	___fldiv@b^0,c
  5431  0007AC  0E00               	movlw	0
  5432  0007AE  6E21               	movwf	(___fldiv@b+1)^0,c
  5433  0007B0  0E00               	movlw	0
  5434  0007B2  6E22               	movwf	(___fldiv@b+2)^0,c
  5435  0007B4  0E00               	movlw	0
  5436  0007B6  6E23               	movwf	(___fldiv@b+3)^0,c
  5437  0007B8  0E00               	movlw	0
  5438  0007BA  6E33               	movwf	___fldiv@grs^0,c
  5439  0007BC  0E00               	movlw	0
  5440  0007BE  6E34               	movwf	(___fldiv@grs+1)^0,c
  5441  0007C0  0E00               	movlw	0
  5442  0007C2  6E35               	movwf	(___fldiv@grs+2)^0,c
  5443  0007C4  0E00               	movlw	0
  5444  0007C6  6E36               	movwf	(___fldiv@grs+3)^0,c
  5445  0007C8  0E00               	movlw	0
  5446  0007CA  6E38               	movwf	___fldiv@aexp^0,c
  5447  0007CC  EF2A  F004         	goto	l1154
  5448  0007D0                     l3401:
  5449  0007D0  FFFF               	dw	65535	; assembler added errata NOP
  5450  0007D2  5038               	movf	___fldiv@aexp^0,w,c
  5451  0007D4  B4D8               	btfsc	status,2,c
  5452  0007D6  EFEF  F003         	goto	u2401
  5453  0007DA  EFF2  F003         	goto	u2400
  5454  0007DE                     u2401:
  5455  0007DE  FFFF               	dw	65535	; assembler added errata NOP
  5456  0007E0  EF0D  F004         	goto	l3409
  5457  0007E4                     u2400:
  5458  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  5459  0007E6  90D8               	bcf	status,0,c
  5460  0007E8  362C               	rlcf	___fldiv@rem^0,f,c
  5461  0007EA  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5462  0007EC  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5463  0007EE  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5464  0007F0  90D8               	bcf	status,0,c
  5465  0007F2  3620               	rlcf	___fldiv@b^0,f,c
  5466  0007F4  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5467  0007F6  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5468  0007F8  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5469  0007FA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5470  0007FC  EF02  F004         	goto	u2411
  5471  000800  EF05  F004         	goto	u2410
  5472  000804                     u2411:
  5473  000804  FFFF               	dw	65535	; assembler added errata NOP
  5474  000806  EF07  F004         	goto	l1157
  5475  00080A                     u2410:
  5476  00080A  FFFF               	dw	65535	; assembler added errata NOP
  5477  00080C  8020               	bsf	___fldiv@b^0,0,c
  5478  00080E                     l1157:
  5479  00080E  FFFF               	dw	65535	; assembler added errata NOP
  5480  000810  90D8               	bcf	status,0,c
  5481  000812  3633               	rlcf	___fldiv@grs^0,f,c
  5482  000814  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5483  000816  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5484  000818  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5485  00081A                     l3409:
  5486  00081A  FFFF               	dw	65535	; assembler added errata NOP
  5487  00081C  5024               	movf	___fldiv@a^0,w,c
  5488  00081E  5C2C               	subwf	___fldiv@rem^0,w,c
  5489  000820  5025               	movf	(___fldiv@a+1)^0,w,c
  5490  000822  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5491  000824  5026               	movf	(___fldiv@a+2)^0,w,c
  5492  000826  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5493  000828  5027               	movf	(___fldiv@a+3)^0,w,c
  5494  00082A  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5495  00082C  A0D8               	btfss	status,0,c
  5496  00082E  EF1B  F004         	goto	u2421
  5497  000832  EF1E  F004         	goto	u2420
  5498  000836                     u2421:
  5499  000836  FFFF               	dw	65535	; assembler added errata NOP
  5500  000838  EF28  F004         	goto	l3415
  5501  00083C                     u2420:
  5502  00083C  FFFF               	dw	65535	; assembler added errata NOP
  5503  00083E  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5504  000840  5024               	movf	___fldiv@a^0,w,c
  5505  000842  5E2C               	subwf	___fldiv@rem^0,f,c
  5506  000844  5025               	movf	(___fldiv@a+1)^0,w,c
  5507  000846  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5508  000848  5026               	movf	(___fldiv@a+2)^0,w,c
  5509  00084A  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5510  00084C  5027               	movf	(___fldiv@a+3)^0,w,c
  5511  00084E  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5512  000850                     l3415:
  5513  000850  FFFF               	dw	65535	; assembler added errata NOP
  5514  000852  2A38               	incf	___fldiv@aexp^0,f,c
  5515  000854                     l1154:
  5516  000854  FFFF               	dw	65535	; assembler added errata NOP
  5517  000856  0E19               	movlw	25
  5518  000858  6438               	cpfsgt	___fldiv@aexp^0,c
  5519  00085A  EF31  F004         	goto	u2431
  5520  00085E  EF34  F004         	goto	u2430
  5521  000862                     u2431:
  5522  000862  FFFF               	dw	65535	; assembler added errata NOP
  5523  000864  EFE8  F003         	goto	l3401
  5524  000868                     u2430:
  5525  000868  FFFF               	dw	65535	; assembler added errata NOP
  5526  00086A  502C               	movf	___fldiv@rem^0,w,c
  5527  00086C  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5528  00086E  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5529  000870  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5530  000872  B4D8               	btfsc	status,2,c
  5531  000874  EF3E  F004         	goto	u2441
  5532  000878  EF41  F004         	goto	u2440
  5533  00087C                     u2441:
  5534  00087C  FFFF               	dw	65535	; assembler added errata NOP
  5535  00087E  EF5E  F004         	goto	l3427
  5536  000882                     u2440:
  5537  000882  FFFF               	dw	65535	; assembler added errata NOP
  5538  000884  8033               	bsf	___fldiv@grs^0,0,c
  5539  000886  EF5E  F004         	goto	l3427
  5540  00088A                     l3421:
  5541  00088A  FFFF               	dw	65535	; assembler added errata NOP
  5542  00088C  90D8               	bcf	status,0,c
  5543  00088E  3620               	rlcf	___fldiv@b^0,f,c
  5544  000890  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5545  000892  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5546  000894  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5547  000896  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5548  000898  EF50  F004         	goto	u2451
  5549  00089C  EF53  F004         	goto	u2450
  5550  0008A0                     u2451:
  5551  0008A0  FFFF               	dw	65535	; assembler added errata NOP
  5552  0008A2  EF55  F004         	goto	l1163
  5553  0008A6                     u2450:
  5554  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5555  0008A8  8020               	bsf	___fldiv@b^0,0,c
  5556  0008AA                     l1163:
  5557  0008AA  FFFF               	dw	65535	; assembler added errata NOP
  5558  0008AC  90D8               	bcf	status,0,c
  5559  0008AE  3633               	rlcf	___fldiv@grs^0,f,c
  5560  0008B0  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5561  0008B2  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5562  0008B4  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5563  0008B6  0631               	decf	___fldiv@new_exp^0,f,c
  5564  0008B8  A0D8               	btfss	status,0,c
  5565  0008BA  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5566  0008BC                     l3427:
  5567  0008BC  FFFF               	dw	65535	; assembler added errata NOP
  5568  0008BE  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5569  0008C0  EF64  F004         	goto	u2461
  5570  0008C4  EF67  F004         	goto	u2460
  5571  0008C8                     u2461:
  5572  0008C8  FFFF               	dw	65535	; assembler added errata NOP
  5573  0008CA  EF45  F004         	goto	l3421
  5574  0008CE                     u2460:
  5575  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5576  0008D0  0E00               	movlw	0
  5577  0008D2  6E38               	movwf	___fldiv@aexp^0,c
  5578  0008D4  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5579  0008D6  EF6F  F004         	goto	u2471
  5580  0008DA  EF72  F004         	goto	u2470
  5581  0008DE                     u2471:
  5582  0008DE  FFFF               	dw	65535	; assembler added errata NOP
  5583  0008E0  EF9D  F004         	goto	l1165
  5584  0008E4                     u2470:
  5585  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5586  0008E6  0EFF               	movlw	255
  5587  0008E8  1433               	andwf	___fldiv@grs^0,w,c
  5588  0008EA  6E28               	movwf	??___fldiv^0,c
  5589  0008EC  0EFF               	movlw	255
  5590  0008EE  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5591  0008F0  6E29               	movwf	(??___fldiv+1)^0,c
  5592  0008F2  0EFF               	movlw	255
  5593  0008F4  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5594  0008F6  6E2A               	movwf	(??___fldiv+2)^0,c
  5595  0008F8  0E7F               	movlw	127
  5596  0008FA  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5597  0008FC  6E2B               	movwf	(??___fldiv+3)^0,c
  5598  0008FE  5028               	movf	??___fldiv^0,w,c
  5599  000900  1029               	iorwf	(??___fldiv+1)^0,w,c
  5600  000902  102A               	iorwf	(??___fldiv+2)^0,w,c
  5601  000904  102B               	iorwf	(??___fldiv+3)^0,w,c
  5602  000906  B4D8               	btfsc	status,2,c
  5603  000908  EF88  F004         	goto	u2481
  5604  00090C  EF8B  F004         	goto	u2480
  5605  000910                     u2481:
  5606  000910  FFFF               	dw	65535	; assembler added errata NOP
  5607  000912  EF91  F004         	goto	l1166
  5608  000916                     u2480:
  5609  000916  FFFF               	dw	65535	; assembler added errata NOP
  5610  000918                     l3435:
  5611  000918  FFFF               	dw	65535	; assembler added errata NOP
  5612  00091A  0E01               	movlw	1
  5613  00091C  6E38               	movwf	___fldiv@aexp^0,c
  5614  00091E  EF9D  F004         	goto	l1165
  5615  000922                     l1166:
  5616  000922  FFFF               	dw	65535	; assembler added errata NOP
  5617  000924  A020               	btfss	___fldiv@b^0,0,c
  5618  000926  EF97  F004         	goto	u2491
  5619  00092A  EF9A  F004         	goto	u2490
  5620  00092E                     u2491:
  5621  00092E  FFFF               	dw	65535	; assembler added errata NOP
  5622  000930  EF9D  F004         	goto	l1165
  5623  000934                     u2490:
  5624  000934  FFFF               	dw	65535	; assembler added errata NOP
  5625  000936  EF8C  F004         	goto	l3435
  5626  00093A                     l1165:
  5627  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5628  00093C  5038               	movf	___fldiv@aexp^0,w,c
  5629  00093E  B4D8               	btfsc	status,2,c
  5630  000940  EFA4  F004         	goto	u2501
  5631  000944  EFA7  F004         	goto	u2500
  5632  000948                     u2501:
  5633  000948  FFFF               	dw	65535	; assembler added errata NOP
  5634  00094A  EFCE  F004         	goto	l3447
  5635  00094E                     u2500:
  5636  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5637  000950  0E01               	movlw	1
  5638  000952  2620               	addwf	___fldiv@b^0,f,c
  5639  000954  0E00               	movlw	0
  5640  000956  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5641  000958  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5642  00095A  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5643  00095C  A023               	btfss	(___fldiv@b+3)^0,0,c
  5644  00095E  EFB3  F004         	goto	u2511
  5645  000962  EFB6  F004         	goto	u2510
  5646  000966                     u2511:
  5647  000966  FFFF               	dw	65535	; assembler added errata NOP
  5648  000968  EFCE  F004         	goto	l3447
  5649  00096C                     u2510:
  5650  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5651  00096E  C020  F028         	movff	___fldiv@b,??___fldiv
  5652  000972  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5653  000976  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5654  00097A  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5655  00097E  342B               	rlcf	(??___fldiv+3)^0,w,c
  5656  000980  322B               	rrcf	(??___fldiv+3)^0,f,c
  5657  000982  322A               	rrcf	(??___fldiv+2)^0,f,c
  5658  000984  3229               	rrcf	(??___fldiv+1)^0,f,c
  5659  000986  3228               	rrcf	??___fldiv^0,f,c
  5660  000988  C028  F020         	movff	??___fldiv,___fldiv@b
  5661  00098C  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5662  000990  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5663  000994  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5664  000998  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5665  00099A  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5666  00099C                     l3447:
  5667  00099C  FFFF               	dw	65535	; assembler added errata NOP
  5668  00099E  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5669  0009A0  EFDA  F004         	goto	u2521
  5670  0009A4  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5671  0009A6  E109               	bnz	u2520
  5672  0009A8  2831               	incf	___fldiv@new_exp^0,w,c
  5673  0009AA  A0D8               	btfss	status,0,c
  5674  0009AC  EFDA  F004         	goto	u2521
  5675  0009B0  EFDD  F004         	goto	u2520
  5676  0009B4                     u2521:
  5677  0009B4  FFFF               	dw	65535	; assembler added errata NOP
  5678  0009B6  EFE9  F004         	goto	l3451
  5679  0009BA                     u2520:
  5680  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5681  0009BC  0E00               	movlw	0
  5682  0009BE  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5683  0009C0  6831               	setf	___fldiv@new_exp^0,c
  5684  0009C2  0E00               	movlw	0
  5685  0009C4  6E20               	movwf	___fldiv@b^0,c
  5686  0009C6  0E00               	movlw	0
  5687  0009C8  6E21               	movwf	(___fldiv@b+1)^0,c
  5688  0009CA  0E00               	movlw	0
  5689  0009CC  6E22               	movwf	(___fldiv@b+2)^0,c
  5690  0009CE  0E00               	movlw	0
  5691  0009D0  6E23               	movwf	(___fldiv@b+3)^0,c
  5692  0009D2                     l3451:
  5693  0009D2  FFFF               	dw	65535	; assembler added errata NOP
  5694  0009D4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5695  0009D6  EFF8  F004         	goto	u2530
  5696  0009DA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5697  0009DC  E106               	bnz	u2531
  5698  0009DE  0431               	decf	___fldiv@new_exp^0,w,c
  5699  0009E0  B0D8               	btfsc	status,0,c
  5700  0009E2  EFF5  F004         	goto	u2531
  5701  0009E6  EFF8  F004         	goto	u2530
  5702  0009EA                     u2531:
  5703  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  5704  0009EC  EF07  F005         	goto	l3455
  5705  0009F0                     u2530:
  5706  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5707  0009F2  0E00               	movlw	0
  5708  0009F4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5709  0009F6  0E00               	movlw	0
  5710  0009F8  6E31               	movwf	___fldiv@new_exp^0,c
  5711  0009FA  0E00               	movlw	0
  5712  0009FC  6E20               	movwf	___fldiv@b^0,c
  5713  0009FE  0E00               	movlw	0
  5714  000A00  6E21               	movwf	(___fldiv@b+1)^0,c
  5715  000A02  0E00               	movlw	0
  5716  000A04  6E22               	movwf	(___fldiv@b+2)^0,c
  5717  000A06  0E00               	movlw	0
  5718  000A08  6E23               	movwf	(___fldiv@b+3)^0,c
  5719  000A0A  0E00               	movlw	0
  5720  000A0C  6E30               	movwf	___fldiv@sign^0,c
  5721  000A0E                     l3455:
  5722  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  5723  000A10  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5724  000A14  A037               	btfss	___fldiv@bexp^0,0,c
  5725  000A16  EF0F  F005         	goto	u2541
  5726  000A1A  EF12  F005         	goto	u2540
  5727  000A1E                     u2541:
  5728  000A1E  FFFF               	dw	65535	; assembler added errata NOP
  5729  000A20  EF16  F005         	goto	l3461
  5730  000A24                     u2540:
  5731  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5732  000A26  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5733  000A28  EF18  F005         	goto	l3463
  5734  000A2C                     l3461:
  5735  000A2C  FFFF               	dw	65535	; assembler added errata NOP
  5736  000A2E  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5737  000A30                     l3463:
  5738  000A30  FFFF               	dw	65535	; assembler added errata NOP
  5739  000A32  90D8               	bcf	status,0,c
  5740  000A34  3037               	rrcf	___fldiv@bexp^0,w,c
  5741  000A36  6E23               	movwf	(___fldiv@b+3)^0,c
  5742  000A38  EF9C  F003         	goto	l3377
  5743  000A3C                     l1152:
  5744  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  5745  000A3E  0012               	return		;funcret
  5746  000A40  FFFF               	dw	65535	; errata NOP
  5747  000A42                     __end_of___fldiv:
  5748                           	callstack 0
  5749                           
  5750 ;; *************** function _releaseObj *****************
  5751 ;; Defined at:
  5752 ;;		line 575 in file "motors.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;		None
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;		None
  5757 ;; Return value:  Size  Location     Type
  5758 ;;                  1    wreg      void 
  5759 ;; Registers used:
  5760 ;;		None
  5761 ;; Tracked objects:
  5762 ;;		On entry : 0/0
  5763 ;;		On exit  : 0/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5766 ;;      Params:         0       0       0       0       0       0       0
  5767 ;;      Locals:         0       0       0       0       0       0       0
  5768 ;;      Temps:          0       0       0       0       0       0       0
  5769 ;;      Totals:         0       0       0       0       0       0       0
  5770 ;;Total ram usage:        0 bytes
  5771 ;; Hardware stack levels used:    1
  5772 ;; Hardware stack levels required when called:    4
  5773 ;; This function calls:
  5774 ;;		Nothing
  5775 ;; This function is called by:
  5776 ;;		_executeData
  5777 ;; This function uses a non-reentrant model
  5778 ;;
  5779                           
  5780                           	psect	text34
  5781  002420                     __ptext34:
  5782                           	callstack 0
  5783  002420                     _releaseObj:
  5784                           	callstack 0
  5785  002420  FFFF               	dw	65535	; assembler added errata NOP
  5786  002422                     
  5787                           ;motors.c: 576:     LATDbits.LATD1 = 0;
  5788  002422  928C               	bcf	140,1,c	;volatile
  5789  002424  0012               	return		;funcret
  5790  002426  FFFF               	dw	65535	; errata NOP
  5791  002428                     __end_of_releaseObj:
  5792                           	callstack 0
  5793                           
  5794 ;; *************** function _pickObject *****************
  5795 ;; Defined at:
  5796 ;;		line 568 in file "motors.c"
  5797 ;; Parameters:    Size  Location     Type
  5798 ;;		None
  5799 ;; Auto vars:     Size  Location     Type
  5800 ;;		None
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  1    wreg      void 
  5803 ;; Registers used:
  5804 ;;		None
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5810 ;;      Params:         0       0       0       0       0       0       0
  5811 ;;      Locals:         0       0       0       0       0       0       0
  5812 ;;      Temps:          0       0       0       0       0       0       0
  5813 ;;      Totals:         0       0       0       0       0       0       0
  5814 ;;Total ram usage:        0 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; Hardware stack levels required when called:    4
  5817 ;; This function calls:
  5818 ;;		Nothing
  5819 ;; This function is called by:
  5820 ;;		_executeData
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           	psect	text35
  5825  002428                     __ptext35:
  5826                           	callstack 0
  5827  002428                     _pickObject:
  5828                           	callstack 0
  5829  002428  FFFF               	dw	65535	; assembler added errata NOP
  5830  00242A                     
  5831                           ;motors.c: 569:     LATDbits.LATD1 = 1;
  5832  00242A  828C               	bsf	140,1,c	;volatile
  5833  00242C  0012               	return		;funcret
  5834  00242E  FFFF               	dw	65535	; errata NOP
  5835  002430                     __end_of_pickObject:
  5836                           	callstack 0
  5837                           
  5838 ;; *************** function _moveToPoint *****************
  5839 ;; Defined at:
  5840 ;;		line 266 in file "motors.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;  x1              2   21[COMRAM] unsigned int 
  5843 ;;  y1              2   23[COMRAM] unsigned int 
  5844 ;;  x2              2   25[COMRAM] unsigned int 
  5845 ;;  y2              2   27[COMRAM] unsigned int 
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;  keepMovingY     1   32[COMRAM] unsigned char 
  5848 ;;  keepMovingX     1   31[COMRAM] unsigned char 
  5849 ;; Return value:  Size  Location     Type
  5850 ;;                  1    wreg      unsigned char 
  5851 ;; Registers used:
  5852 ;;		wreg, status,2, status,0, cstack
  5853 ;; Tracked objects:
  5854 ;;		On entry : 0/0
  5855 ;;		On exit  : 0/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5858 ;;      Params:         8       0       0       0       0       0       0
  5859 ;;      Locals:         2       0       0       0       0       0       0
  5860 ;;      Temps:          2       0       0       0       0       0       0
  5861 ;;      Totals:        12       0       0       0       0       0       0
  5862 ;;Total ram usage:       12 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; Hardware stack levels required when called:    5
  5865 ;; This function calls:
  5866 ;;		_resetStep
  5867 ;;		_setDirection
  5868 ;;		_stepCounter
  5869 ;;		_stepMade
  5870 ;; This function is called by:
  5871 ;;		_executeData
  5872 ;; This function uses a non-reentrant model
  5873 ;;
  5874                           
  5875                           	psect	text36
  5876  0010B4                     __ptext36:
  5877                           	callstack 0
  5878  0010B4                     _moveToPoint:
  5879                           	callstack 0
  5880  0010B4  FFFF               	dw	65535	; assembler added errata NOP
  5881  0010B6                     
  5882                           ;motors.c: 269:     if(x2 > maxX || y2 > maxY){
  5883  0010B6  0EE9               	movlw	233
  5884  0010B8  5C1A               	subwf	moveToPoint@x2^0,w,c
  5885  0010BA  0E03               	movlw	3
  5886  0010BC  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5887  0010BE  B0D8               	btfsc	status,0,c
  5888  0010C0  EF64  F008         	goto	u2781
  5889  0010C4  EF67  F008         	goto	u2780
  5890  0010C8                     u2781:
  5891  0010C8  FFFF               	dw	65535	; assembler added errata NOP
  5892  0010CA  EF74  F008         	goto	l3613
  5893  0010CE                     u2780:
  5894  0010CE  FFFF               	dw	65535	; assembler added errata NOP
  5895  0010D0  0EE9               	movlw	233
  5896  0010D2  5C1C               	subwf	moveToPoint@y2^0,w,c
  5897  0010D4  0E03               	movlw	3
  5898  0010D6  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  5899  0010D8  A0D8               	btfss	status,0,c
  5900  0010DA  EF71  F008         	goto	u2791
  5901  0010DE  EF74  F008         	goto	u2790
  5902  0010E2                     u2791:
  5903  0010E2  FFFF               	dw	65535	; assembler added errata NOP
  5904  0010E4  EF78  F008         	goto	l3617
  5905  0010E8                     u2790:
  5906  0010E8                     l3613:
  5907  0010E8  FFFF               	dw	65535	; assembler added errata NOP
  5908                           
  5909                           ;motors.c: 270:         return(5);
  5910  0010EA  0E05               	movlw	5
  5911  0010EC  EF4C  F009         	goto	l141
  5912  0010F0                     l3617:
  5913  0010F0  FFFF               	dw	65535	; assembler added errata NOP
  5914                           
  5915                           ;motors.c: 274:     if((x2 - x1) > 0){
  5916  0010F2  5016               	movf	moveToPoint@x1^0,w,c
  5917  0010F4  5C1A               	subwf	moveToPoint@x2^0,w,c
  5918  0010F6  6E1E               	movwf	??_moveToPoint^0,c
  5919  0010F8  5017               	movf	(moveToPoint@x1+1)^0,w,c
  5920  0010FA  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5921  0010FC  6E1F               	movwf	(??_moveToPoint+1)^0,c
  5922  0010FE  501E               	movf	??_moveToPoint^0,w,c
  5923  001100  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  5924  001102  B4D8               	btfsc	status,2,c
  5925  001104  EF86  F008         	goto	u2801
  5926  001108  EF89  F008         	goto	u2800
  5927  00110C                     u2801:
  5928  00110C  FFFF               	dw	65535	; assembler added errata NOP
  5929  00110E  EF91  F008         	goto	l3621
  5930  001112                     u2800:
  5931  001112  FFFF               	dw	65535	; assembler added errata NOP
  5932  001114                     
  5933                           ;motors.c: 275:         setDirection(1, 0);
  5934  001114  0E00               	movlw	0
  5935  001116  6E12               	movwf	setDirection@motor^0,c
  5936  001118  0E01               	movlw	1
  5937  00111A  EC4D  F010         	call	_setDirection
  5938                           
  5939                           ;motors.c: 276:     }else{
  5940  00111E  EF97  F008         	goto	l3623
  5941  001122                     l3621:
  5942  001122  FFFF               	dw	65535	; assembler added errata NOP
  5943                           
  5944                           ;motors.c: 277:         setDirection(0, 0);
  5945  001124  0E00               	movlw	0
  5946  001126  6E12               	movwf	setDirection@motor^0,c
  5947  001128  0E00               	movlw	0
  5948  00112A  EC4D  F010         	call	_setDirection
  5949  00112E                     l3623:
  5950  00112E  FFFF               	dw	65535	; assembler added errata NOP
  5951                           
  5952                           ;motors.c: 280:     if((y2 - y1) > 0){
  5953  001130  5018               	movf	moveToPoint@y1^0,w,c
  5954  001132  5C1C               	subwf	moveToPoint@y2^0,w,c
  5955  001134  6E1E               	movwf	??_moveToPoint^0,c
  5956  001136  5019               	movf	(moveToPoint@y1+1)^0,w,c
  5957  001138  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  5958  00113A  6E1F               	movwf	(??_moveToPoint+1)^0,c
  5959  00113C  501E               	movf	??_moveToPoint^0,w,c
  5960  00113E  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  5961  001140  B4D8               	btfsc	status,2,c
  5962  001142  EFA5  F008         	goto	u2811
  5963  001146  EFA8  F008         	goto	u2810
  5964  00114A                     u2811:
  5965  00114A  FFFF               	dw	65535	; assembler added errata NOP
  5966  00114C  EFB0  F008         	goto	l3627
  5967  001150                     u2810:
  5968  001150  FFFF               	dw	65535	; assembler added errata NOP
  5969  001152                     
  5970                           ;motors.c: 281:         setDirection(1, 1);
  5971  001152  0E01               	movlw	1
  5972  001154  6E12               	movwf	setDirection@motor^0,c
  5973  001156  0E01               	movlw	1
  5974  001158  EC4D  F010         	call	_setDirection
  5975                           
  5976                           ;motors.c: 282:     }else{
  5977  00115C  EFB6  F008         	goto	l3629
  5978  001160                     l3627:
  5979  001160  FFFF               	dw	65535	; assembler added errata NOP
  5980                           
  5981                           ;motors.c: 283:         setDirection(0, 1);
  5982  001162  0E01               	movlw	1
  5983  001164  6E12               	movwf	setDirection@motor^0,c
  5984  001166  0E00               	movlw	0
  5985  001168  EC4D  F010         	call	_setDirection
  5986  00116C                     l3629:
  5987  00116C  FFFF               	dw	65535	; assembler added errata NOP
  5988                           
  5989                           ;motors.c: 286:     unsigned char keepMovingX = 1;
  5990  00116E  0E01               	movlw	1
  5991  001170  6E20               	movwf	moveToPoint@keepMovingX^0,c
  5992  001172                     
  5993                           ;motors.c: 287:     unsigned char keepMovingY = 1;
  5994  001172  0E01               	movlw	1
  5995  001174  6E21               	movwf	moveToPoint@keepMovingY^0,c
  5996  001176                     
  5997                           ;motors.c: 290:     T2CONbits.TMR2ON = 1;
  5998  001176  84CA               	bsf	202,2,c	;volatile
  5999  001178                     
  6000                           ;motors.c: 292:     tm0Error = 0;
  6001  001178  0E00               	movlw	0
  6002  00117A  6E5C               	movwf	(_tm0Error+1)^0,c
  6003  00117C  0E00               	movlw	0
  6004  00117E  6E5B               	movwf	_tm0Error^0,c
  6005  001180                     
  6006                           ;motors.c: 293:     tm0Limit = 200;
  6007  001180  0EC8               	movlw	200
  6008  001182  6E68               	movwf	_tm0Limit^0,c
  6009  001184                     
  6010                           ;motors.c: 294:     T0CONbits.TMR0ON = 1;
  6011  001184  8ED5               	bsf	213,7,c	;volatile
  6012                           
  6013                           ;motors.c: 296:     while(keepMovingX || keepMovingY){
  6014  001186  EF2C  F009         	goto	l3659
  6015  00118A                     l3641:
  6016  00118A  FFFF               	dw	65535	; assembler added errata NOP
  6017                           
  6018                           ;motors.c: 299:         if(tm0Error){
  6019  00118C  505B               	movf	_tm0Error^0,w,c
  6020  00118E  105C               	iorwf	(_tm0Error+1)^0,w,c
  6021  001190  B4D8               	btfsc	status,2,c
  6022  001192  EFCD  F008         	goto	u2821
  6023  001196  EFD0  F008         	goto	u2820
  6024  00119A                     u2821:
  6025  00119A  FFFF               	dw	65535	; assembler added errata NOP
  6026  00119C  EFD9  F008         	goto	l3647
  6027  0011A0                     u2820:
  6028  0011A0  FFFF               	dw	65535	; assembler added errata NOP
  6029  0011A2                     
  6030                           ;motors.c: 301:             LATAbits.LATA2 = 0;
  6031  0011A2  9489               	bcf	137,2,c	;volatile
  6032                           
  6033                           ;motors.c: 302:             LATBbits.LATB4 = 0;
  6034  0011A4  988A               	bcf	138,4,c	;volatile
  6035  0011A6                     
  6036                           ;motors.c: 303:             tm0Error = 4;
  6037  0011A6  0E00               	movlw	0
  6038  0011A8  6E5C               	movwf	(_tm0Error+1)^0,c
  6039  0011AA  0E04               	movlw	4
  6040  0011AC  6E5B               	movwf	_tm0Error^0,c
  6041                           
  6042                           ;motors.c: 304:             break;
  6043  0011AE  EF40  F009         	goto	l149
  6044  0011B2                     l3647:
  6045  0011B2  FFFF               	dw	65535	; assembler added errata NOP
  6046                           
  6047                           ;motors.c: 312:         if(x1 + stepCounter() == x2){
  6048  0011B4  ECCF  F011         	call	_stepCounter	;wreg free
  6049  0011B8  5016               	movf	moveToPoint@x1^0,w,c
  6050  0011BA  2612               	addwf	?_stepCounter^0,f,c
  6051  0011BC  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6052  0011BE  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6053  0011C0  501A               	movf	moveToPoint@x2^0,w,c
  6054  0011C2  1812               	xorwf	?_stepCounter^0,w,c
  6055  0011C4  E107               	bnz	u2831
  6056  0011C6  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6057  0011C8  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6058  0011CA  A4D8               	btfss	status,2,c
  6059  0011CC  EFEA  F008         	goto	u2831
  6060  0011D0  EFED  F008         	goto	u2830
  6061  0011D4                     u2831:
  6062  0011D4  FFFF               	dw	65535	; assembler added errata NOP
  6063  0011D6  EFF2  F008         	goto	l150
  6064  0011DA                     u2830:
  6065  0011DA  FFFF               	dw	65535	; assembler added errata NOP
  6066  0011DC                     
  6067                           ;motors.c: 314:             keepMovingX = 0;
  6068  0011DC  0E00               	movlw	0
  6069  0011DE  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6070                           
  6071                           ;motors.c: 315:         }else{
  6072  0011E0  EFF4  F008         	goto	l3651
  6073  0011E4                     l150:
  6074  0011E4  FFFF               	dw	65535	; assembler added errata NOP
  6075                           
  6076                           ;motors.c: 317:             LATAbits.LATA2 = 1;
  6077  0011E6  8489               	bsf	137,2,c	;volatile
  6078  0011E8                     l3651:
  6079  0011E8  FFFF               	dw	65535	; assembler added errata NOP
  6080                           
  6081                           ;motors.c: 321:         if(y1 + stepCounter() == y2){
  6082  0011EA  ECCF  F011         	call	_stepCounter	;wreg free
  6083  0011EE  5018               	movf	moveToPoint@y1^0,w,c
  6084  0011F0  2612               	addwf	?_stepCounter^0,f,c
  6085  0011F2  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6086  0011F4  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6087  0011F6  501C               	movf	moveToPoint@y2^0,w,c
  6088  0011F8  1812               	xorwf	?_stepCounter^0,w,c
  6089  0011FA  E107               	bnz	u2841
  6090  0011FC  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6091  0011FE  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6092  001200  A4D8               	btfss	status,2,c
  6093  001202  EF05  F009         	goto	u2841
  6094  001206  EF08  F009         	goto	u2840
  6095  00120A                     u2841:
  6096  00120A  FFFF               	dw	65535	; assembler added errata NOP
  6097  00120C  EF0D  F009         	goto	l152
  6098  001210                     u2840:
  6099  001210  FFFF               	dw	65535	; assembler added errata NOP
  6100  001212                     
  6101                           ;motors.c: 323:             keepMovingY = 0;
  6102  001212  0E00               	movlw	0
  6103  001214  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6104                           
  6105                           ;motors.c: 324:         }else{
  6106  001216  EF0F  F009         	goto	l3655
  6107  00121A                     l152:
  6108  00121A  FFFF               	dw	65535	; assembler added errata NOP
  6109                           
  6110                           ;motors.c: 326:             LATBbits.LATB4 = 1;
  6111  00121C  888A               	bsf	138,4,c	;volatile
  6112  00121E                     l3655:
  6113  00121E  FFFF               	dw	65535	; assembler added errata NOP
  6114  001220  EC8D  F011         	call	_stepMade	;wreg free
  6115  001224  5012               	movf	?_stepMade^0,w,c
  6116  001226  1013               	iorwf	(?_stepMade+1)^0,w,c
  6117  001228  B4D8               	btfsc	status,2,c
  6118  00122A  EF19  F009         	goto	u2851
  6119  00122E  EF1C  F009         	goto	u2850
  6120  001232                     u2851:
  6121  001232  FFFF               	dw	65535	; assembler added errata NOP
  6122  001234  EF0F  F009         	goto	l3655
  6123  001238                     u2850:
  6124  001238  FFFF               	dw	65535	; assembler added errata NOP
  6125  00123A                     
  6126                           ;motors.c: 333:         LATAbits.LATA2 = 0;
  6127  00123A  9489               	bcf	137,2,c	;volatile
  6128                           
  6129                           ;motors.c: 334:         LATBbits.LATB4 = 0;
  6130  00123C  988A               	bcf	138,4,c	;volatile
  6131  00123E                     l3657:
  6132  00123E  FFFF               	dw	65535	; assembler added errata NOP
  6133  001240  EC8D  F011         	call	_stepMade	;wreg free
  6134  001244  5012               	movf	?_stepMade^0,w,c
  6135  001246  1013               	iorwf	(?_stepMade+1)^0,w,c
  6136  001248  B4D8               	btfsc	status,2,c
  6137  00124A  EF29  F009         	goto	u2861
  6138  00124E  EF2C  F009         	goto	u2860
  6139  001252                     u2861:
  6140  001252  FFFF               	dw	65535	; assembler added errata NOP
  6141  001254  EF1F  F009         	goto	l3657
  6142  001258                     u2860:
  6143  001258                     l3659:
  6144  001258  FFFF               	dw	65535	; assembler added errata NOP
  6145                           
  6146                           ;motors.c: 296:     while(keepMovingX || keepMovingY){
  6147  00125A  5020               	movf	moveToPoint@keepMovingX^0,w,c
  6148  00125C  A4D8               	btfss	status,2,c
  6149  00125E  EF33  F009         	goto	u2871
  6150  001262  EF36  F009         	goto	u2870
  6151  001266                     u2871:
  6152  001266  FFFF               	dw	65535	; assembler added errata NOP
  6153  001268  EFC5  F008         	goto	l3641
  6154  00126C                     u2870:
  6155  00126C  FFFF               	dw	65535	; assembler added errata NOP
  6156  00126E  5021               	movf	moveToPoint@keepMovingY^0,w,c
  6157  001270  A4D8               	btfss	status,2,c
  6158  001272  EF3D  F009         	goto	u2881
  6159  001276  EF40  F009         	goto	u2880
  6160  00127A                     u2881:
  6161  00127A  FFFF               	dw	65535	; assembler added errata NOP
  6162  00127C  EFC5  F008         	goto	l3641
  6163  001280                     u2880:
  6164  001280                     l149:
  6165  001280  FFFF               	dw	65535	; assembler added errata NOP
  6166                           
  6167                           ;motors.c: 341:     T0CONbits.TMR0ON = 0;
  6168  001282  9ED5               	bcf	213,7,c	;volatile
  6169                           
  6170                           ;motors.c: 342:     T2CONbits.TMR2ON = 0;
  6171  001284  94CA               	bcf	202,2,c	;volatile
  6172  001286                     
  6173                           ;motors.c: 344:     TMR0 = 0;
  6174  001286  0E00               	movlw	0
  6175  001288  6ED7               	movwf	215,c	;volatile
  6176  00128A  0E00               	movlw	0
  6177  00128C  6ED6               	movwf	214,c	;volatile
  6178                           
  6179                           ;motors.c: 345:     TMR2 = 0;
  6180  00128E  0E00               	movlw	0
  6181  001290  6ECC               	movwf	204,c	;volatile
  6182  001292                     
  6183                           ;motors.c: 348:     resetStep();
  6184  001292  ECE4  F011         	call	_resetStep	;wreg free
  6185  001296                     
  6186                           ;motors.c: 350:     return(tm0Error);
  6187  001296  505B               	movf	_tm0Error^0,w,c
  6188  001298                     l141:
  6189  001298  FFFF               	dw	65535	; assembler added errata NOP
  6190  00129A  0012               	return		;funcret
  6191  00129C  FFFF               	dw	65535	; errata NOP
  6192  00129E                     __end_of_moveToPoint:
  6193                           	callstack 0
  6194                           
  6195 ;; *************** function _stepCounter *****************
  6196 ;; Defined at:
  6197 ;;		line 59 in file "pwm.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;		None
  6200 ;; Auto vars:     Size  Location     Type
  6201 ;;		None
  6202 ;; Return value:  Size  Location     Type
  6203 ;;                  2   17[COMRAM] unsigned int 
  6204 ;; Registers used:
  6205 ;;		None
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6211 ;;      Params:         2       0       0       0       0       0       0
  6212 ;;      Locals:         0       0       0       0       0       0       0
  6213 ;;      Temps:          0       0       0       0       0       0       0
  6214 ;;      Totals:         2       0       0       0       0       0       0
  6215 ;;Total ram usage:        2 bytes
  6216 ;; Hardware stack levels used:    1
  6217 ;; Hardware stack levels required when called:    4
  6218 ;; This function calls:
  6219 ;;		Nothing
  6220 ;; This function is called by:
  6221 ;;		_moveToPoint
  6222 ;; This function uses a non-reentrant model
  6223 ;;
  6224                           
  6225                           	psect	text37
  6226  00239E                     __ptext37:
  6227                           	callstack 0
  6228  00239E                     _stepCounter:
  6229                           	callstack 0
  6230  00239E  FFFF               	dw	65535	; assembler added errata NOP
  6231  0023A0                     
  6232                           ;pwm.c: 60:     return pwmStep;
  6233  0023A0  C067  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6234  0023A4  6A13               	clrf	(?_stepCounter+1)^0,c
  6235  0023A6  0012               	return		;funcret
  6236  0023A8  FFFF               	dw	65535	; errata NOP
  6237  0023AA                     __end_of_stepCounter:
  6238                           	callstack 0
  6239                           
  6240 ;; *************** function _liftArm *****************
  6241 ;; Defined at:
  6242 ;;		line 496 in file "motors.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;		None
  6245 ;; Auto vars:     Size  Location     Type
  6246 ;;		None
  6247 ;; Return value:  Size  Location     Type
  6248 ;;                  1    wreg      unsigned char 
  6249 ;; Registers used:
  6250 ;;		wreg, status,2, status,0, cstack
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6256 ;;      Params:         0       0       0       0       0       0       0
  6257 ;;      Locals:         0       0       0       0       0       0       0
  6258 ;;      Temps:          0       0       0       0       0       0       0
  6259 ;;      Totals:         0       0       0       0       0       0       0
  6260 ;;Total ram usage:        0 bytes
  6261 ;; Hardware stack levels used:    1
  6262 ;; Hardware stack levels required when called:    5
  6263 ;; This function calls:
  6264 ;;		_resetStep
  6265 ;;		_setDirection
  6266 ;;		_stepMade
  6267 ;; This function is called by:
  6268 ;;		_executeData
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           	psect	text38
  6273  001E7C                     __ptext38:
  6274                           	callstack 0
  6275  001E7C                     _liftArm:
  6276                           	callstack 0
  6277  001E7C  FFFF               	dw	65535	; assembler added errata NOP
  6278  001E7E                     
  6279                           ;motors.c: 499:     setDirection(0, 2);
  6280  001E7E  0E02               	movlw	2
  6281  001E80  6E12               	movwf	setDirection@motor^0,c
  6282  001E82  0E00               	movlw	0
  6283  001E84  EC4D  F010         	call	_setDirection
  6284  001E88                     
  6285                           ;motors.c: 501:     T2CONbits.TMR2ON = 1;
  6286  001E88  84CA               	bsf	202,2,c	;volatile
  6287  001E8A                     
  6288                           ;motors.c: 503:     tm0Error = 0;
  6289  001E8A  0E00               	movlw	0
  6290  001E8C  6E5C               	movwf	(_tm0Error+1)^0,c
  6291  001E8E  0E00               	movlw	0
  6292  001E90  6E5B               	movwf	_tm0Error^0,c
  6293  001E92                     
  6294                           ;motors.c: 504:     tm0Limit = 200;
  6295  001E92  0EC8               	movlw	200
  6296  001E94  6E68               	movwf	_tm0Limit^0,c
  6297  001E96                     
  6298                           ;motors.c: 505:     T0CONbits.TMR0ON = 1;
  6299  001E96  8ED5               	bsf	213,7,c	;volatile
  6300                           
  6301                           ;motors.c: 509:     while(!PORTEbits.RE2){
  6302  001E98  EF7F  F00F         	goto	l190
  6303  001E9C                     l3765:
  6304  001E9C  FFFF               	dw	65535	; assembler added errata NOP
  6305                           
  6306                           ;motors.c: 512:         if(tm0Error){
  6307  001E9E  505B               	movf	_tm0Error^0,w,c
  6308  001EA0  105C               	iorwf	(_tm0Error+1)^0,w,c
  6309  001EA2  B4D8               	btfsc	status,2,c
  6310  001EA4  EF56  F00F         	goto	u3011
  6311  001EA8  EF59  F00F         	goto	u3010
  6312  001EAC                     u3011:
  6313  001EAC  FFFF               	dw	65535	; assembler added errata NOP
  6314  001EAE  EF61  F00F         	goto	l192
  6315  001EB2                     u3010:
  6316  001EB2  FFFF               	dw	65535	; assembler added errata NOP
  6317  001EB4                     
  6318                           ;motors.c: 514:             LATCbits.LATC2 = 0;
  6319  001EB4  948B               	bcf	139,2,c	;volatile
  6320  001EB6                     
  6321                           ;motors.c: 515:             tm0Error = 6;
  6322  001EB6  0E00               	movlw	0
  6323  001EB8  6E5C               	movwf	(_tm0Error+1)^0,c
  6324  001EBA  0E06               	movlw	6
  6325  001EBC  6E5B               	movwf	_tm0Error^0,c
  6326                           
  6327                           ;motors.c: 516:             break;
  6328  001EBE  EF88  F00F         	goto	l193
  6329  001EC2                     l192:
  6330  001EC2  FFFF               	dw	65535	; assembler added errata NOP
  6331                           
  6332                           ;motors.c: 521:         LATCbits.LATC2 = 1;
  6333  001EC4  848B               	bsf	139,2,c	;volatile
  6334  001EC6                     l3771:
  6335  001EC6  FFFF               	dw	65535	; assembler added errata NOP
  6336  001EC8  EC8D  F011         	call	_stepMade	;wreg free
  6337  001ECC  5012               	movf	?_stepMade^0,w,c
  6338  001ECE  1013               	iorwf	(?_stepMade+1)^0,w,c
  6339  001ED0  B4D8               	btfsc	status,2,c
  6340  001ED2  EF6D  F00F         	goto	u3021
  6341  001ED6  EF70  F00F         	goto	u3020
  6342  001EDA                     u3021:
  6343  001EDA  FFFF               	dw	65535	; assembler added errata NOP
  6344  001EDC  EF63  F00F         	goto	l3771
  6345  001EE0                     u3020:
  6346  001EE0  FFFF               	dw	65535	; assembler added errata NOP
  6347  001EE2                     
  6348                           ;motors.c: 527:         LATCbits.LATC2 = 0;
  6349  001EE2  948B               	bcf	139,2,c	;volatile
  6350  001EE4                     l3773:
  6351  001EE4  FFFF               	dw	65535	; assembler added errata NOP
  6352  001EE6  EC8D  F011         	call	_stepMade	;wreg free
  6353  001EEA  5012               	movf	?_stepMade^0,w,c
  6354  001EEC  1013               	iorwf	(?_stepMade+1)^0,w,c
  6355  001EEE  B4D8               	btfsc	status,2,c
  6356  001EF0  EF7C  F00F         	goto	u3031
  6357  001EF4  EF7F  F00F         	goto	u3030
  6358  001EF8                     u3031:
  6359  001EF8  FFFF               	dw	65535	; assembler added errata NOP
  6360  001EFA  EF72  F00F         	goto	l3773
  6361  001EFE                     u3030:
  6362  001EFE                     l190:
  6363  001EFE  FFFF               	dw	65535	; assembler added errata NOP
  6364                           
  6365                           ;motors.c: 509:     while(!PORTEbits.RE2){
  6366  001F00  A484               	btfss	132,2,c	;volatile
  6367  001F02  EF85  F00F         	goto	u3041
  6368  001F06  EF88  F00F         	goto	u3040
  6369  001F0A                     u3041:
  6370  001F0A  FFFF               	dw	65535	; assembler added errata NOP
  6371  001F0C  EF4E  F00F         	goto	l3765
  6372  001F10                     u3040:
  6373  001F10                     l193:
  6374  001F10  FFFF               	dw	65535	; assembler added errata NOP
  6375                           
  6376                           ;motors.c: 534:     T0CONbits.TMR0ON = 0;
  6377  001F12  9ED5               	bcf	213,7,c	;volatile
  6378                           
  6379                           ;motors.c: 535:     T2CONbits.TMR2ON = 0;
  6380  001F14  94CA               	bcf	202,2,c	;volatile
  6381  001F16                     
  6382                           ;motors.c: 537:     TMR0 = 0;
  6383  001F16  0E00               	movlw	0
  6384  001F18  6ED7               	movwf	215,c	;volatile
  6385  001F1A  0E00               	movlw	0
  6386  001F1C  6ED6               	movwf	214,c	;volatile
  6387                           
  6388                           ;motors.c: 538:     TMR2 = 0;
  6389  001F1E  0E00               	movlw	0
  6390  001F20  6ECC               	movwf	204,c	;volatile
  6391  001F22                     
  6392                           ;motors.c: 541:     resetStep();
  6393  001F22  ECE4  F011         	call	_resetStep	;wreg free
  6394  001F26                     
  6395                           ;motors.c: 543:     return(tm0Error);
  6396  001F26  505B               	movf	_tm0Error^0,w,c
  6397  001F28  0012               	return		;funcret
  6398  001F2A  FFFF               	dw	65535	; errata NOP
  6399  001F2C                     __end_of_liftArm:
  6400                           	callstack 0
  6401                           
  6402 ;; *************** function _stepMade *****************
  6403 ;; Defined at:
  6404 ;;		line 47 in file "pwm.c"
  6405 ;; Parameters:    Size  Location     Type
  6406 ;;		None
  6407 ;; Auto vars:     Size  Location     Type
  6408 ;;  temp            1   19[COMRAM] unsigned char 
  6409 ;; Return value:  Size  Location     Type
  6410 ;;                  2   17[COMRAM] unsigned int 
  6411 ;; Registers used:
  6412 ;;		wreg, status,2
  6413 ;; Tracked objects:
  6414 ;;		On entry : 0/0
  6415 ;;		On exit  : 0/0
  6416 ;;		Unchanged: 0/0
  6417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6418 ;;      Params:         2       0       0       0       0       0       0
  6419 ;;      Locals:         1       0       0       0       0       0       0
  6420 ;;      Temps:          0       0       0       0       0       0       0
  6421 ;;      Totals:         3       0       0       0       0       0       0
  6422 ;;Total ram usage:        3 bytes
  6423 ;; Hardware stack levels used:    1
  6424 ;; Hardware stack levels required when called:    4
  6425 ;; This function calls:
  6426 ;;		Nothing
  6427 ;; This function is called by:
  6428 ;;		_resetPosition
  6429 ;;		_moveToPoint
  6430 ;;		_touchObject
  6431 ;;		_touchTherm
  6432 ;;		_liftArm
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           	psect	text39
  6437  00231A                     __ptext39:
  6438                           	callstack 0
  6439  00231A                     _stepMade:
  6440                           	callstack 0
  6441  00231A  FFFF               	dw	65535	; assembler added errata NOP
  6442  00231C                     
  6443                           ;pwm.c: 48:     unsigned char temp = stepToggle;
  6444  00231C  C066  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6445  002320                     
  6446                           ;pwm.c: 50:     stepToggle = 0;
  6447  002320  0E00               	movlw	0
  6448  002322  6E66               	movwf	_stepToggle^0,c	;volatile
  6449  002324                     
  6450                           ;pwm.c: 52:     return temp;
  6451  002324  C014  F012         	movff	stepMade@temp,?_stepMade
  6452  002328  6A13               	clrf	(?_stepMade+1)^0,c
  6453  00232A  0012               	return		;funcret
  6454  00232C  FFFF               	dw	65535	; errata NOP
  6455  00232E                     __end_of_stepMade:
  6456                           	callstack 0
  6457                           
  6458 ;; *************** function _setDirection *****************
  6459 ;; Defined at:
  6460 ;;		line 117 in file "motors.c"
  6461 ;; Parameters:    Size  Location     Type
  6462 ;;  direction       1    wreg     unsigned char 
  6463 ;;  motor           1   17[COMRAM] unsigned char 
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;  direction       1   20[COMRAM] unsigned char 
  6466 ;; Return value:  Size  Location     Type
  6467 ;;                  1    wreg      void 
  6468 ;; Registers used:
  6469 ;;		wreg, status,2, status,0
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6475 ;;      Params:         1       0       0       0       0       0       0
  6476 ;;      Locals:         1       0       0       0       0       0       0
  6477 ;;      Temps:          2       0       0       0       0       0       0
  6478 ;;      Totals:         4       0       0       0       0       0       0
  6479 ;;Total ram usage:        4 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; Hardware stack levels required when called:    4
  6482 ;; This function calls:
  6483 ;;		Nothing
  6484 ;; This function is called by:
  6485 ;;		_resetPosition
  6486 ;;		_moveToPoint
  6487 ;;		_touchObject
  6488 ;;		_touchTherm
  6489 ;;		_liftArm
  6490 ;; This function uses a non-reentrant model
  6491 ;;
  6492                           
  6493                           	psect	text40
  6494  00209A                     __ptext40:
  6495                           	callstack 0
  6496  00209A                     _setDirection:
  6497                           	callstack 0
  6498  00209A  FFFF               	dw	65535	; assembler added errata NOP
  6499                           
  6500                           ;incstack = 0
  6501                           ;setDirection@direction stored from wreg
  6502  00209C  6E15               	movwf	setDirection@direction^0,c
  6503  00209E                     
  6504                           ;motors.c: 118:     switch(motor){
  6505  00209E  EF69  F010         	goto	l3295
  6506  0020A2                     l3287:
  6507  0020A2  FFFF               	dw	65535	; assembler added errata NOP
  6508                           
  6509                           ;motors.c: 120:             LATAbits.LATA1 = direction;
  6510  0020A4  B015               	btfsc	setDirection@direction^0,0,c
  6511  0020A6  D002               	bra	u2275
  6512  0020A8  9289               	bcf	137,1,c	;volatile
  6513  0020AA  D001               	bra	u2276
  6514  0020AC                     u2275:
  6515  0020AC  8289               	bsf	137,1,c	;volatile
  6516  0020AE                     u2276:
  6517                           
  6518                           ;motors.c: 121:             break;
  6519  0020AE  EF84  F010         	goto	l101
  6520  0020B2                     l3289:
  6521  0020B2  FFFF               	dw	65535	; assembler added errata NOP
  6522                           
  6523                           ;motors.c: 123:             LATBbits.LATB3 = direction;
  6524  0020B4  B015               	btfsc	setDirection@direction^0,0,c
  6525  0020B6  D002               	bra	u2285
  6526  0020B8  968A               	bcf	138,3,c	;volatile
  6527  0020BA  D001               	bra	u2286
  6528  0020BC                     u2285:
  6529  0020BC  868A               	bsf	138,3,c	;volatile
  6530  0020BE                     u2286:
  6531                           
  6532                           ;motors.c: 124:             break;
  6533  0020BE  EF84  F010         	goto	l101
  6534  0020C2                     l3291:
  6535  0020C2  FFFF               	dw	65535	; assembler added errata NOP
  6536                           
  6537                           ;motors.c: 126:             LATCbits.LATC1 = direction;
  6538  0020C4  B015               	btfsc	setDirection@direction^0,0,c
  6539  0020C6  D002               	bra	u2295
  6540  0020C8  928B               	bcf	139,1,c	;volatile
  6541  0020CA  D001               	bra	u2296
  6542  0020CC                     u2295:
  6543  0020CC  828B               	bsf	139,1,c	;volatile
  6544  0020CE                     u2296:
  6545                           
  6546                           ;motors.c: 127:             break;
  6547  0020CE  EF84  F010         	goto	l101
  6548  0020D2                     l3295:
  6549  0020D2  FFFF               	dw	65535	; assembler added errata NOP
  6550  0020D4  5012               	movf	setDirection@motor^0,w,c
  6551  0020D6  6E13               	movwf	??_setDirection^0,c
  6552  0020D8  6A14               	clrf	(??_setDirection+1)^0,c
  6553                           
  6554                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6555                           ; Switch size 1, requested type "simple"
  6556                           ; Number of cases is 1, Range of values is 0 to 0
  6557                           ; switch strategies available:
  6558                           ; Name         Instructions Cycles
  6559                           ; simple_byte            4     3 (average)
  6560                           ;	Chosen strategy is simple_byte
  6561  0020DA  5014               	movf	(??_setDirection+1)^0,w,c
  6562  0020DC  0A00               	xorlw	0	; case 0
  6563  0020DE  B4D8               	btfsc	status,2,c
  6564  0020E0  EF74  F010         	goto	l4361
  6565  0020E4  EF84  F010         	goto	l101
  6566  0020E8                     l4361:
  6567  0020E8  FFFF               	dw	65535	; assembler added errata NOP
  6568                           
  6569                           ; Switch size 1, requested type "simple"
  6570                           ; Number of cases is 3, Range of values is 0 to 2
  6571                           ; switch strategies available:
  6572                           ; Name         Instructions Cycles
  6573                           ; simple_byte           10     6 (average)
  6574                           ;	Chosen strategy is simple_byte
  6575  0020EA  5013               	movf	??_setDirection^0,w,c
  6576  0020EC  0A00               	xorlw	0	; case 0
  6577  0020EE  B4D8               	btfsc	status,2,c
  6578  0020F0  EF51  F010         	goto	l3287
  6579  0020F4  0A01               	xorlw	1	; case 1
  6580  0020F6  B4D8               	btfsc	status,2,c
  6581  0020F8  EF59  F010         	goto	l3289
  6582  0020FC  0A03               	xorlw	3	; case 2
  6583  0020FE  B4D8               	btfsc	status,2,c
  6584  002100  EF61  F010         	goto	l3291
  6585  002104  EF84  F010         	goto	l101
  6586  002108                     l101:
  6587  002108  FFFF               	dw	65535	; assembler added errata NOP
  6588  00210A  0012               	return		;funcret
  6589  00210C  FFFF               	dw	65535	; errata NOP
  6590  00210E                     __end_of_setDirection:
  6591                           	callstack 0
  6592                           
  6593 ;; *************** function _resetStep *****************
  6594 ;; Defined at:
  6595 ;;		line 66 in file "pwm.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;		None
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;		None
  6600 ;; Return value:  Size  Location     Type
  6601 ;;                  1    wreg      void 
  6602 ;; Registers used:
  6603 ;;		wreg, status,2
  6604 ;; Tracked objects:
  6605 ;;		On entry : 0/0
  6606 ;;		On exit  : 0/0
  6607 ;;		Unchanged: 0/0
  6608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6609 ;;      Params:         0       0       0       0       0       0       0
  6610 ;;      Locals:         0       0       0       0       0       0       0
  6611 ;;      Temps:          0       0       0       0       0       0       0
  6612 ;;      Totals:         0       0       0       0       0       0       0
  6613 ;;Total ram usage:        0 bytes
  6614 ;; Hardware stack levels used:    1
  6615 ;; Hardware stack levels required when called:    4
  6616 ;; This function calls:
  6617 ;;		Nothing
  6618 ;; This function is called by:
  6619 ;;		_resetPosition
  6620 ;;		_moveToPoint
  6621 ;;		_touchObject
  6622 ;;		_touchTherm
  6623 ;;		_liftArm
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           	psect	text41
  6628  0023C8                     __ptext41:
  6629                           	callstack 0
  6630  0023C8                     _resetStep:
  6631                           	callstack 0
  6632  0023C8  FFFF               	dw	65535	; assembler added errata NOP
  6633  0023CA                     
  6634                           ;pwm.c: 67:     pwmStep = 0;
  6635  0023CA  0E00               	movlw	0
  6636  0023CC  6E67               	movwf	_pwmStep^0,c	;volatile
  6637  0023CE  0012               	return		;funcret
  6638  0023D0  FFFF               	dw	65535	; errata NOP
  6639  0023D2                     __end_of_resetStep:
  6640                           	callstack 0
  6641                           
  6642 ;; *************** function _getData *****************
  6643 ;; Defined at:
  6644 ;;		line 207 in file "usart.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;		None
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;		None
  6649 ;; Return value:  Size  Location     Type
  6650 ;;                  2   17[COMRAM] PTR struct .
  6651 ;; Registers used:
  6652 ;;		wreg, status,2, status,0
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6658 ;;      Params:         2       0       0       0       0       0       0
  6659 ;;      Locals:         0       0       0       0       0       0       0
  6660 ;;      Temps:          0       0       0       0       0       0       0
  6661 ;;      Totals:         2       0       0       0       0       0       0
  6662 ;;Total ram usage:        2 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    4
  6665 ;; This function calls:
  6666 ;;		Nothing
  6667 ;; This function is called by:
  6668 ;;		_executeData
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           	psect	text42
  6673  00234E                     __ptext42:
  6674                           	callstack 0
  6675  00234E                     _getData:
  6676                           	callstack 0
  6677  00234E  FFFF               	dw	65535	; assembler added errata NOP
  6678  002350                     
  6679                           ;usart.c: 208:     return(&dataSequence[0]);
  6680  002350  0ED8               	movlw	low _dataSequence
  6681  002352  6E12               	movwf	?_getData^0,c
  6682  002354  0E00               	movlw	high _dataSequence
  6683  002356  6E13               	movwf	(?_getData+1)^0,c
  6684  002358  0012               	return		;funcret
  6685  00235A  FFFF               	dw	65535	; errata NOP
  6686  00235C                     __end_of_getData:
  6687                           	callstack 0
  6688                           
  6689 ;; *************** function _clearTM0 *****************
  6690 ;; Defined at:
  6691 ;;		line 30 in file "motors.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;		None
  6694 ;; Auto vars:     Size  Location     Type
  6695 ;;		None
  6696 ;; Return value:  Size  Location     Type
  6697 ;;                  1    wreg      void 
  6698 ;; Registers used:
  6699 ;;		wreg, status,2
  6700 ;; Tracked objects:
  6701 ;;		On entry : 0/0
  6702 ;;		On exit  : 0/0
  6703 ;;		Unchanged: 0/0
  6704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6705 ;;      Params:         0       0       0       0       0       0       0
  6706 ;;      Locals:         0       0       0       0       0       0       0
  6707 ;;      Temps:          0       0       0       0       0       0       0
  6708 ;;      Totals:         0       0       0       0       0       0       0
  6709 ;;Total ram usage:        0 bytes
  6710 ;; Hardware stack levels used:    1
  6711 ;; Hardware stack levels required when called:    4
  6712 ;; This function calls:
  6713 ;;		Nothing
  6714 ;; This function is called by:
  6715 ;;		_main
  6716 ;; This function uses a non-reentrant model
  6717 ;;
  6718                           
  6719                           	psect	text43
  6720  00235C                     __ptext43:
  6721                           	callstack 0
  6722  00235C                     _clearTM0:
  6723                           	callstack 0
  6724  00235C  FFFF               	dw	65535	; assembler added errata NOP
  6725  00235E                     
  6726                           ;motors.c: 31:     tm0Error = 0;
  6727  00235E  0E00               	movlw	0
  6728  002360  6E5C               	movwf	(_tm0Error+1)^0,c
  6729  002362  0E00               	movlw	0
  6730  002364  6E5B               	movwf	_tm0Error^0,c
  6731  002366  0012               	return		;funcret
  6732  002368  FFFF               	dw	65535	; errata NOP
  6733  00236A                     __end_of_clearTM0:
  6734                           	callstack 0
  6735                           
  6736 ;; *************** function _isr *****************
  6737 ;; Defined at:
  6738 ;;		line 17 in file "interrupt.c"
  6739 ;; Parameters:    Size  Location     Type
  6740 ;;		None
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;  temp            1   16[COMRAM] unsigned char 
  6743 ;; Return value:  Size  Location     Type
  6744 ;;                  1    wreg      void 
  6745 ;; Registers used:
  6746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6747 ;; Tracked objects:
  6748 ;;		On entry : 0/0
  6749 ;;		On exit  : 0/0
  6750 ;;		Unchanged: 0/0
  6751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6752 ;;      Params:         0       0       0       0       0       0       0
  6753 ;;      Locals:         1       0       0       0       0       0       0
  6754 ;;      Temps:          6       0       0       0       0       0       0
  6755 ;;      Totals:         7       0       0       0       0       0       0
  6756 ;;Total ram usage:        7 bytes
  6757 ;; Hardware stack levels used:    1
  6758 ;; Hardware stack levels required when called:    3
  6759 ;; This function calls:
  6760 ;;		_increaseStep
  6761 ;;		_retPeriod
  6762 ;;		_setThermRel
  6763 ;;		_setTouchRel
  6764 ;;		_toggleStep
  6765 ;;		_whatsTM0Limit
  6766 ;;		_writeTM0
  6767 ;;		i2_storeData
  6768 ;; This function is called by:
  6769 ;;		Interrupt level 2
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           	psect	intcode
  6774  000008                     __pintcode:
  6775                           	callstack 0
  6776  000008                     _isr:
  6777                           	callstack 0
  6778  000008  FFFF               	dw	65535	; assembler added errata NOP
  6779                           
  6780                           ;incstack = 0
  6781  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6782  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6783  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6784  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6785  000018  CFF4 F010          	movff	prodh,??_isr+5
  6786  00001C                     
  6787                           ;interrupt.c: 18:     static unsigned int single_cycle = 0;;interrupt.c: 19:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 20:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 23:     if(INTCONbits.T0IF){
  6788  00001C  A4F2               	btfss	242,2,c	;volatile
  6789  00001E  EF13  F000         	goto	i2u217_41
  6790  000022  EF16  F000         	goto	i2u217_40
  6791  000026                     i2u217_41:
  6792  000026  FFFF               	dw	65535	; assembler added errata NOP
  6793  000028  EF2C  F000         	goto	i2l3203
  6794  00002C                     i2u217_40:
  6795  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6796  00002E                     
  6797                           ;interrupt.c: 24:         INTCONbits.T0IF = 0;
  6798  00002E  94F2               	bcf	242,2,c	;volatile
  6799  000030                     
  6800                           ;interrupt.c: 27:         tm0Count++;
  6801  000030  2A63               	incf	isr@tm0Count^0,f,c
  6802  000032                     
  6803                           ;interrupt.c: 29:         if(tm0Count >= whatsTM0Limit()){
  6804  000032  EC18  F012         	call	_whatsTM0Limit	;wreg free
  6805  000036  6E0B               	movwf	??_isr^0,c
  6806  000038  500B               	movf	??_isr^0,w,c
  6807  00003A  5C63               	subwf	isr@tm0Count^0,w,c
  6808  00003C  A0D8               	btfss	status,0,c
  6809  00003E  EF23  F000         	goto	i2u218_41
  6810  000042  EF26  F000         	goto	i2u218_40
  6811  000046                     i2u218_41:
  6812  000046  FFFF               	dw	65535	; assembler added errata NOP
  6813  000048  EF2C  F000         	goto	i2l3203
  6814  00004C                     i2u218_40:
  6815  00004C  FFFF               	dw	65535	; assembler added errata NOP
  6816  00004E                     
  6817                           ;interrupt.c: 30:             T0CONbits.TMR0ON = 0;
  6818  00004E  9ED5               	bcf	213,7,c	;volatile
  6819  000050                     
  6820                           ;interrupt.c: 31:             tm0Count = 0;
  6821  000050  0E00               	movlw	0
  6822  000052  6E63               	movwf	isr@tm0Count^0,c
  6823  000054                     
  6824                           ;interrupt.c: 32:             writeTM0();
  6825  000054  ECB5  F011         	call	_writeTM0	;wreg free
  6826  000058                     i2l3203:
  6827  000058  FFFF               	dw	65535	; assembler added errata NOP
  6828                           
  6829                           ;interrupt.c: 37:     if(PIR1bits.TMR2IF){
  6830  00005A  A29E               	btfss	158,1,c	;volatile
  6831  00005C  EF32  F000         	goto	i2u219_41
  6832  000060  EF35  F000         	goto	i2u219_40
  6833  000064                     i2u219_41:
  6834  000064  FFFF               	dw	65535	; assembler added errata NOP
  6835  000066  EF63  F000         	goto	i2l3223
  6836  00006A                     i2u219_40:
  6837  00006A  FFFF               	dw	65535	; assembler added errata NOP
  6838  00006C                     
  6839                           ;interrupt.c: 38:         PIR1bits.TMR2IF = 0;
  6840  00006C  929E               	bcf	158,1,c	;volatile
  6841  00006E                     
  6842                           ;interrupt.c: 39:         single_cycle++;
  6843  00006E  4A51               	infsnz	isr@single_cycle^0,f,c
  6844  000070  2A52               	incf	(isr@single_cycle+1)^0,f,c
  6845  000072                     
  6846                           ;interrupt.c: 42:         if(single_cycle > retPeriod()){
  6847  000072  ECBC  F011         	call	_retPeriod	;wreg free
  6848  000076  5051               	movf	isr@single_cycle^0,w,c
  6849  000078  5C01               	subwf	?_retPeriod^0,w,c
  6850  00007A  5052               	movf	(isr@single_cycle+1)^0,w,c
  6851  00007C  5802               	subwfb	(?_retPeriod+1)^0,w,c
  6852  00007E  B0D8               	btfsc	status,0,c
  6853  000080  EF44  F000         	goto	i2u220_41
  6854  000084  EF47  F000         	goto	i2u220_40
  6855  000088                     i2u220_41:
  6856  000088  FFFF               	dw	65535	; assembler added errata NOP
  6857  00008A  EF63  F000         	goto	i2l3223
  6858  00008E                     i2u220_40:
  6859  00008E  FFFF               	dw	65535	; assembler added errata NOP
  6860  000090                     
  6861                           ;interrupt.c: 43:             completeStep++;
  6862  000090  2A62               	incf	isr@completeStep^0,f,c
  6863  000092                     
  6864                           ;interrupt.c: 46:             if(completeStep != 0 && !(completeStep % 2)){
  6865  000092  5062               	movf	isr@completeStep^0,w,c
  6866  000094  B4D8               	btfsc	status,2,c
  6867  000096  EF4F  F000         	goto	i2u221_41
  6868  00009A  EF52  F000         	goto	i2u221_40
  6869  00009E                     i2u221_41:
  6870  00009E  FFFF               	dw	65535	; assembler added errata NOP
  6871  0000A0  EF60  F000         	goto	i2l3221
  6872  0000A4                     i2u221_40:
  6873  0000A4  FFFF               	dw	65535	; assembler added errata NOP
  6874  0000A6  B062               	btfsc	isr@completeStep^0,0,c
  6875  0000A8  EF58  F000         	goto	i2u222_41
  6876  0000AC  EF5B  F000         	goto	i2u222_40
  6877  0000B0                     i2u222_41:
  6878  0000B0  FFFF               	dw	65535	; assembler added errata NOP
  6879  0000B2  EF60  F000         	goto	i2l3221
  6880  0000B6                     i2u222_40:
  6881  0000B6  FFFF               	dw	65535	; assembler added errata NOP
  6882  0000B8                     
  6883                           ;interrupt.c: 48:                 completeStep = 0;
  6884  0000B8  0E00               	movlw	0
  6885  0000BA  6E62               	movwf	isr@completeStep^0,c
  6886  0000BC                     
  6887                           ;interrupt.c: 51:                 increaseStep();
  6888  0000BC  EC1C  F012         	call	_increaseStep	;wreg free
  6889  0000C0                     i2l3221:
  6890  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  6891                           
  6892                           ;interrupt.c: 56:             toggleStep();
  6893  0000C2  ECE9  F011         	call	_toggleStep	;wreg free
  6894  0000C6                     i2l3223:
  6895  0000C6  FFFF               	dw	65535	; assembler added errata NOP
  6896                           
  6897                           ;interrupt.c: 61:     if(PIR1bits.ADIF){
  6898  0000C8  AC9E               	btfss	158,6,c	;volatile
  6899  0000CA  EF69  F000         	goto	i2u223_41
  6900  0000CE  EF6C  F000         	goto	i2u223_40
  6901  0000D2                     i2u223_41:
  6902  0000D2  FFFF               	dw	65535	; assembler added errata NOP
  6903  0000D4  EF99  F000         	goto	i2l3235
  6904  0000D8                     i2u223_40:
  6905  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  6906  0000DA                     
  6907                           ;interrupt.c: 62:         PIR1bits.ADIF = 0;
  6908  0000DA  9C9E               	bcf	158,6,c	;volatile
  6909                           
  6910                           ;interrupt.c: 65:         ADC_res = ADRESL;
  6911  0000DC  CFC3 F053          	movff	4035,_ADC_res	;volatile
  6912  0000E0  6A54               	clrf	(_ADC_res+1)^0,c
  6913  0000E2                     
  6914                           ;interrupt.c: 66:         ADC_res |= (ADRESH << 8);
  6915  0000E2  50C4               	movf	196,w,c	;volatile
  6916  0000E4  6E0C               	movwf	(??_isr+1)^0,c
  6917  0000E6  6A0B               	clrf	??_isr^0,c
  6918  0000E8  500B               	movf	??_isr^0,w,c
  6919  0000EA  1253               	iorwf	_ADC_res^0,f,c
  6920  0000EC  500C               	movf	(??_isr+1)^0,w,c
  6921  0000EE  1254               	iorwf	(_ADC_res+1)^0,f,c
  6922                           
  6923                           ;interrupt.c: 69:         if(ADC_res > therm_pressure){
  6924  0000F0  0453               	decf	_ADC_res^0,w,c
  6925  0000F2  0E04               	movlw	4
  6926  0000F4  5854               	subwfb	(_ADC_res+1)^0,w,c
  6927  0000F6  A0D8               	btfss	status,0,c
  6928  0000F8  EF80  F000         	goto	i2u224_41
  6929  0000FC  EF83  F000         	goto	i2u224_40
  6930  000100                     i2u224_41:
  6931  000100  FFFF               	dw	65535	; assembler added errata NOP
  6932  000102  EF8A  F000         	goto	i2l3231
  6933  000106                     i2u224_40:
  6934  000106  FFFF               	dw	65535	; assembler added errata NOP
  6935  000108                     
  6936                           ;interrupt.c: 71:             setTouchRel();
  6937  000108  ECEE  F011         	call	_setTouchRel	;wreg free
  6938                           
  6939                           ;interrupt.c: 72:             setThermRel();
  6940  00010C  ECF3  F011         	call	_setThermRel	;wreg free
  6941                           
  6942                           ;interrupt.c: 73:         }else if(ADC_res > touch_pressure){
  6943  000110  EF99  F000         	goto	i2l3235
  6944  000114                     i2l3231:
  6945  000114  FFFF               	dw	65535	; assembler added errata NOP
  6946  000116  0453               	decf	_ADC_res^0,w,c
  6947  000118  0E02               	movlw	2
  6948  00011A  5854               	subwfb	(_ADC_res+1)^0,w,c
  6949  00011C  A0D8               	btfss	status,0,c
  6950  00011E  EF93  F000         	goto	i2u225_41
  6951  000122  EF96  F000         	goto	i2u225_40
  6952  000126                     i2u225_41:
  6953  000126  FFFF               	dw	65535	; assembler added errata NOP
  6954  000128  EF99  F000         	goto	i2l3235
  6955  00012C                     i2u225_40:
  6956  00012C  FFFF               	dw	65535	; assembler added errata NOP
  6957  00012E                     
  6958                           ;interrupt.c: 75:             setTouchRel();
  6959  00012E  ECEE  F011         	call	_setTouchRel	;wreg free
  6960  000132                     i2l3235:
  6961  000132  FFFF               	dw	65535	; assembler added errata NOP
  6962                           
  6963                           ;interrupt.c: 80:     if(PIR1bits.RC1IF){
  6964  000134  AA9E               	btfss	158,5,c	;volatile
  6965  000136  EF9F  F000         	goto	i2u226_41
  6966  00013A  EFA2  F000         	goto	i2u226_40
  6967  00013E                     i2u226_41:
  6968  00013E  FFFF               	dw	65535	; assembler added errata NOP
  6969  000140  EFA9  F000         	goto	i2l453
  6970  000144                     i2u226_40:
  6971  000144  FFFF               	dw	65535	; assembler added errata NOP
  6972  000146                     
  6973                           ;interrupt.c: 81:         PIR1bits.RC1IF = 0;
  6974  000146  9A9E               	bcf	158,5,c	;volatile
  6975                           
  6976                           ;interrupt.c: 84:         unsigned char temp = RCREG1;
  6977  000148  CFAE F011          	movff	4014,isr@temp	;volatile
  6978  00014C                     
  6979                           ;interrupt.c: 86:         storeData(temp);
  6980  00014C  5011               	movf	isr@temp^0,w,c
  6981  00014E  ECB3  F00A         	call	i2_storeData
  6982  000152                     i2l453:
  6983  000152  FFFF               	dw	65535	; assembler added errata NOP
  6984  000154  C010  FFF4         	movff	??_isr+5,prodh
  6985  000158  C00F  FFF3         	movff	??_isr+4,prodl
  6986  00015C  C00E  FFDA         	movff	??_isr+3,fsr2h
  6987  000160  C00D  FFD9         	movff	??_isr+2,fsr2l
  6988  000164  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6989  000166  0011               	retfie		f
  6990  000168  FFFF               	dw	65535	; errata NOP
  6991  00016A                     __end_of_isr:
  6992                           	callstack 0
  6993                           
  6994 ;; *************** function i2_storeData *****************
  6995 ;; Defined at:
  6996 ;;		line 131 in file "usart.c"
  6997 ;; Parameters:    Size  Location     Type
  6998 ;;  data            1    wreg     unsigned char 
  6999 ;; Auto vars:     Size  Location     Type
  7000 ;;  data            1    9[COMRAM] unsigned char 
  7001 ;; Return value:  Size  Location     Type
  7002 ;;                  1    wreg      void 
  7003 ;; Registers used:
  7004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7005 ;; Tracked objects:
  7006 ;;		On entry : 0/0
  7007 ;;		On exit  : 0/0
  7008 ;;		Unchanged: 0/0
  7009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7010 ;;      Params:         0       0       0       0       0       0       0
  7011 ;;      Locals:         1       0       0       0       0       0       0
  7012 ;;      Temps:          2       0       0       0       0       0       0
  7013 ;;      Totals:         3       0       0       0       0       0       0
  7014 ;;Total ram usage:        3 bytes
  7015 ;; Hardware stack levels used:    1
  7016 ;; Hardware stack levels required when called:    2
  7017 ;; This function calls:
  7018 ;;		i2_printError
  7019 ;; This function is called by:
  7020 ;;		_isr
  7021 ;; This function uses a non-reentrant model
  7022 ;;
  7023                           
  7024                           	psect	text45
  7025  001566                     __ptext45:
  7026                           	callstack 0
  7027  001566                     i2_storeData:
  7028                           	callstack 0
  7029  001566  FFFF               	dw	65535	; assembler added errata NOP
  7030                           
  7031                           ;incstack = 0
  7032                           ;i2storeData@data stored from wreg
  7033  001568  6E0A               	movwf	i2storeData@data^0,c
  7034  00156A                     
  7035                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  7036  00156A  0E45               	movlw	low storeData@receivedMex
  7037  00156C  245E               	addwf	storeData@counter^0,w,c
  7038  00156E  6ED9               	movwf	fsr2l,c
  7039  001570  6ADA               	clrf	fsr2h,c
  7040  001572  0E00               	movlw	high storeData@receivedMex
  7041  001574  22DA               	addwfc	fsr2h,f,c
  7042  001576  C00A  FFDF         	movff	i2storeData@data,indf2
  7043  00157A                     
  7044                           ;usart.c: 142:     counter++;
  7045  00157A  2A5E               	incf	storeData@counter^0,f,c
  7046                           
  7047                           ;usart.c: 145:     switch(receivedMex[0]){
  7048  00157C  EFCF  F00A         	goto	i2l3103
  7049  001580                     i2l3095:
  7050  001580  FFFF               	dw	65535	; assembler added errata NOP
  7051                           
  7052                           ;usart.c: 147:             mexLength = 5;
  7053  001582  0E05               	movlw	5
  7054  001584  6E6D               	movwf	storeData@mexLength^0,c
  7055                           
  7056                           ;usart.c: 148:             break;
  7057  001586  EFEA  F00A         	goto	i2l3105
  7058  00158A                     i2l3097:
  7059  00158A  FFFF               	dw	65535	; assembler added errata NOP
  7060                           
  7061                           ;usart.c: 150:             mexLength = 9;
  7062  00158C  0E09               	movlw	9
  7063  00158E  6E6D               	movwf	storeData@mexLength^0,c
  7064                           
  7065                           ;usart.c: 151:             break;
  7066  001590  EFEA  F00A         	goto	i2l3105
  7067  001594                     i2l3099:
  7068  001594  FFFF               	dw	65535	; assembler added errata NOP
  7069                           
  7070                           ;usart.c: 153:             mexLength = 1;
  7071  001596  0E01               	movlw	1
  7072  001598  6E6D               	movwf	storeData@mexLength^0,c
  7073                           
  7074                           ;usart.c: 154:             break;
  7075  00159A  EFEA  F00A         	goto	i2l3105
  7076  00159E                     i2l3103:
  7077  00159E  FFFF               	dw	65535	; assembler added errata NOP
  7078  0015A0  5045               	movf	storeData@receivedMex^0,w,c
  7079  0015A2  6E08               	movwf	??i2_storeData^0,c
  7080  0015A4  6A09               	clrf	(??i2_storeData+1)^0,c
  7081                           
  7082                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7083                           ; Switch size 1, requested type "simple"
  7084                           ; Number of cases is 1, Range of values is 0 to 0
  7085                           ; switch strategies available:
  7086                           ; Name         Instructions Cycles
  7087                           ; simple_byte            4     3 (average)
  7088                           ;	Chosen strategy is simple_byte
  7089  0015A6  5009               	movf	(??i2_storeData+1)^0,w,c
  7090  0015A8  0A00               	xorlw	0	; case 0
  7091  0015AA  B4D8               	btfsc	status,2,c
  7092  0015AC  EFDA  F00A         	goto	i2l4363
  7093  0015B0  EFEA  F00A         	goto	i2l3105
  7094  0015B4                     i2l4363:
  7095  0015B4  FFFF               	dw	65535	; assembler added errata NOP
  7096                           
  7097                           ; Switch size 1, requested type "simple"
  7098                           ; Number of cases is 3, Range of values is 0 to 2
  7099                           ; switch strategies available:
  7100                           ; Name         Instructions Cycles
  7101                           ; simple_byte           10     6 (average)
  7102                           ;	Chosen strategy is simple_byte
  7103  0015B6  5008               	movf	??i2_storeData^0,w,c
  7104  0015B8  0A00               	xorlw	0	; case 0
  7105  0015BA  B4D8               	btfsc	status,2,c
  7106  0015BC  EFC0  F00A         	goto	i2l3095
  7107  0015C0  0A01               	xorlw	1	; case 1
  7108  0015C2  B4D8               	btfsc	status,2,c
  7109  0015C4  EFC5  F00A         	goto	i2l3097
  7110  0015C8  0A03               	xorlw	3	; case 2
  7111  0015CA  B4D8               	btfsc	status,2,c
  7112  0015CC  EFCA  F00A         	goto	i2l3099
  7113  0015D0  EFEA  F00A         	goto	i2l3105
  7114  0015D4                     i2l3105:
  7115  0015D4  FFFF               	dw	65535	; assembler added errata NOP
  7116                           
  7117                           ;usart.c: 161:     if(counter >= mexLength){
  7118  0015D6  506D               	movf	storeData@mexLength^0,w,c
  7119  0015D8  5C5E               	subwf	storeData@counter^0,w,c
  7120  0015DA  A0D8               	btfss	status,0,c
  7121  0015DC  EFF2  F00A         	goto	i2u213_41
  7122  0015E0  EFF5  F00A         	goto	i2u213_40
  7123  0015E4                     i2u213_41:
  7124  0015E4  FFFF               	dw	65535	; assembler added errata NOP
  7125  0015E6  EF61  F00B         	goto	i2l552
  7126  0015EA                     i2u213_40:
  7127  0015EA  FFFF               	dw	65535	; assembler added errata NOP
  7128  0015EC                     
  7129                           ;usart.c: 162:         counter = 0;
  7130  0015EC  0E00               	movlw	0
  7131  0015EE  6E5E               	movwf	storeData@counter^0,c
  7132                           
  7133                           ;usart.c: 166:         switch(receivedMex[0]){
  7134  0015F0  EF46  F00B         	goto	i2l3121
  7135  0015F4                     i2l3109:
  7136  0015F4  FFFF               	dw	65535	; assembler added errata NOP
  7137                           
  7138                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7139  0015F6  5061               	movf	_dataCounter^0,w,c
  7140  0015F8  0D04               	mullw	4
  7141  0015FA  0ED8               	movlw	low _dataSequence
  7142  0015FC  24F3               	addwf	243,w,c
  7143  0015FE  6ED9               	movwf	fsr2l,c
  7144  001600  0E00               	movlw	high _dataSequence
  7145  001602  20F4               	addwfc	prodh,w,c
  7146  001604  6EDA               	movwf	fsr2h,c
  7147  001606  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  7148                           
  7149                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  7150  00160A  5061               	movf	_dataCounter^0,w,c
  7151  00160C  0D04               	mullw	4
  7152  00160E  0ED9               	movlw	low (_dataSequence+1)
  7153  001610  24F3               	addwf	243,w,c
  7154  001612  6ED9               	movwf	fsr2l,c
  7155  001614  0E00               	movlw	high (_dataSequence+1)
  7156  001616  20F4               	addwfc	prodh,w,c
  7157  001618  6EDA               	movwf	fsr2h,c
  7158  00161A  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  7159                           
  7160                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  7161  00161E  5061               	movf	_dataCounter^0,w,c
  7162  001620  0D04               	mullw	4
  7163  001622  0EDA               	movlw	low (_dataSequence+2)
  7164  001624  24F3               	addwf	243,w,c
  7165  001626  6ED9               	movwf	fsr2l,c
  7166  001628  0E00               	movlw	high (_dataSequence+2)
  7167  00162A  20F4               	addwfc	prodh,w,c
  7168  00162C  6EDA               	movwf	fsr2h,c
  7169  00162E  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  7170                           
  7171                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7172  001632  5061               	movf	_dataCounter^0,w,c
  7173  001634  0D04               	mullw	4
  7174  001636  0EDB               	movlw	low (_dataSequence+3)
  7175  001638  24F3               	addwf	243,w,c
  7176  00163A  6ED9               	movwf	fsr2l,c
  7177  00163C  0E00               	movlw	high (_dataSequence+3)
  7178  00163E  20F4               	addwfc	prodh,w,c
  7179  001640  6EDA               	movwf	fsr2h,c
  7180  001642  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  7181  001646                     
  7182                           ;usart.c: 173:                 dataCounter++;
  7183  001646  2A61               	incf	_dataCounter^0,f,c
  7184                           
  7185                           ;usart.c: 174:                 break;
  7186  001648  EF61  F00B         	goto	i2l552
  7187  00164C                     i2l549:
  7188  00164C  FFFF               	dw	65535	; assembler added errata NOP
  7189                           
  7190                           ;usart.c: 179:                 newSequenceData.L = receivedMex[1];
  7191  00164E  C046  F0EC         	movff	storeData@receivedMex+1,_newSequenceData
  7192                           
  7193                           ;usart.c: 180:                 newSequenceData.W = receivedMex[2];
  7194  001652  C047  F0ED         	movff	storeData@receivedMex+2,_newSequenceData+1
  7195                           
  7196                           ;usart.c: 181:                 newSequenceData.init_posX = receivedMex[3];
  7197  001656  C048  F0EE         	movff	storeData@receivedMex+3,_newSequenceData+2
  7198                           
  7199                           ;usart.c: 182:                 newSequenceData.init_posY = receivedMex[4];
  7200  00165A  C049  F0EF         	movff	storeData@receivedMex+4,_newSequenceData+3
  7201                           
  7202                           ;usart.c: 183:                 newSequenceData.init_rot = receivedMex[5];
  7203  00165E  C04A  F0F0         	movff	storeData@receivedMex+5,_newSequenceData+4
  7204                           
  7205                           ;usart.c: 184:                 newSequenceData.end_posX = receivedMex[6];
  7206  001662  C04B  F0F1         	movff	storeData@receivedMex+6,_newSequenceData+5
  7207                           
  7208                           ;usart.c: 185:                 newSequenceData.end_posY = receivedMex[7];
  7209  001666  C04C  F0F2         	movff	storeData@receivedMex+7,_newSequenceData+6
  7210                           
  7211                           ;usart.c: 186:                 newSequenceData.end_rot = receivedMex[8];
  7212  00166A  C04D  F0F3         	movff	storeData@receivedMex+8,_newSequenceData+7
  7213  00166E                     
  7214                           ;usart.c: 188:                 _newSequence = 1;
  7215  00166E  0E01               	movlw	1
  7216  001670  6E5F               	movwf	__newSequence^0,c
  7217                           
  7218                           ;usart.c: 189:                 break;
  7219  001672  EF61  F00B         	goto	i2l552
  7220  001676                     i2l3115:
  7221  001676  FFFF               	dw	65535	; assembler added errata NOP
  7222                           
  7223                           ;usart.c: 192:                 _fatalError = 1;
  7224  001678  0E01               	movlw	1
  7225  00167A  6E60               	movwf	__fatalError^0,c
  7226                           
  7227                           ;usart.c: 193:                 break;
  7228  00167C  EF61  F00B         	goto	i2l552
  7229  001680                     i2l3117:
  7230  001680  FFFF               	dw	65535	; assembler added errata NOP
  7231                           
  7232                           ;usart.c: 196:                 printError(8);
  7233  001682  0E08               	movlw	8
  7234  001684  EC8D  F00C         	call	i2_printError
  7235                           
  7236                           ;usart.c: 197:                 break;
  7237  001688  EF61  F00B         	goto	i2l552
  7238  00168C                     i2l3121:
  7239  00168C  FFFF               	dw	65535	; assembler added errata NOP
  7240  00168E  5045               	movf	storeData@receivedMex^0,w,c
  7241  001690  6E08               	movwf	??i2_storeData^0,c
  7242  001692  6A09               	clrf	(??i2_storeData+1)^0,c
  7243                           
  7244                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7245                           ; Switch size 1, requested type "simple"
  7246                           ; Number of cases is 1, Range of values is 0 to 0
  7247                           ; switch strategies available:
  7248                           ; Name         Instructions Cycles
  7249                           ; simple_byte            4     3 (average)
  7250                           ;	Chosen strategy is simple_byte
  7251  001694  5009               	movf	(??i2_storeData+1)^0,w,c
  7252  001696  0A00               	xorlw	0	; case 0
  7253  001698  B4D8               	btfsc	status,2,c
  7254  00169A  EF51  F00B         	goto	i2l4365
  7255  00169E  EF40  F00B         	goto	i2l3117
  7256  0016A2                     i2l4365:
  7257  0016A2  FFFF               	dw	65535	; assembler added errata NOP
  7258                           
  7259                           ; Switch size 1, requested type "simple"
  7260                           ; Number of cases is 3, Range of values is 0 to 2
  7261                           ; switch strategies available:
  7262                           ; Name         Instructions Cycles
  7263                           ; simple_byte           10     6 (average)
  7264                           ;	Chosen strategy is simple_byte
  7265  0016A4  5008               	movf	??i2_storeData^0,w,c
  7266  0016A6  0A00               	xorlw	0	; case 0
  7267  0016A8  B4D8               	btfsc	status,2,c
  7268  0016AA  EFFA  F00A         	goto	i2l3109
  7269  0016AE  0A01               	xorlw	1	; case 1
  7270  0016B0  B4D8               	btfsc	status,2,c
  7271  0016B2  EF26  F00B         	goto	i2l549
  7272  0016B6  0A03               	xorlw	3	; case 2
  7273  0016B8  B4D8               	btfsc	status,2,c
  7274  0016BA  EF3B  F00B         	goto	i2l3115
  7275  0016BE  EF40  F00B         	goto	i2l3117
  7276  0016C2                     i2l552:
  7277  0016C2  FFFF               	dw	65535	; assembler added errata NOP
  7278  0016C4  0012               	return		;funcret
  7279  0016C6  FFFF               	dw	65535	; errata NOP
  7280  0016C8                     __end_ofi2_storeData:
  7281                           	callstack 0
  7282                           
  7283 ;; *************** function i2_printError *****************
  7284 ;; Defined at:
  7285 ;;		line 53 in file "usart.c"
  7286 ;; Parameters:    Size  Location     Type
  7287 ;;  errCode         1    wreg     unsigned char 
  7288 ;; Auto vars:     Size  Location     Type
  7289 ;;  errCode         1    6[COMRAM] unsigned char 
  7290 ;; Return value:  Size  Location     Type
  7291 ;;                  1    wreg      void 
  7292 ;; Registers used:
  7293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7294 ;; Tracked objects:
  7295 ;;		On entry : 0/0
  7296 ;;		On exit  : 0/0
  7297 ;;		Unchanged: 0/0
  7298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7299 ;;      Params:         0       0       0       0       0       0       0
  7300 ;;      Locals:         1       0       0       0       0       0       0
  7301 ;;      Temps:          2       0       0       0       0       0       0
  7302 ;;      Totals:         3       0       0       0       0       0       0
  7303 ;;Total ram usage:        3 bytes
  7304 ;; Hardware stack levels used:    1
  7305 ;; Hardware stack levels required when called:    1
  7306 ;; This function calls:
  7307 ;;		i2_uartTx
  7308 ;; This function is called by:
  7309 ;;		i2_storeData
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           	psect	text46
  7314  00191A                     __ptext46:
  7315                           	callstack 0
  7316  00191A                     i2_printError:
  7317                           	callstack 0
  7318  00191A  FFFF               	dw	65535	; assembler added errata NOP
  7319                           
  7320                           ;incstack = 0
  7321                           ;i2printError@errCode stored from wreg
  7322  00191C  6E07               	movwf	i2printError@errCode^0,c
  7323  00191E                     
  7324                           ;usart.c: 55:     switch(errCode){
  7325  00191E  EFE9  F00C         	goto	i2l2843
  7326  001922                     i2l2825:
  7327  001922  FFFF               	dw	65535	; assembler added errata NOP
  7328                           
  7329                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7330  001924  0EA4               	movlw	low _errString_Feed
  7331  001926  6E01               	movwf	i2uartTx@ptr^0,c
  7332  001928  0E00               	movlw	high _errString_Feed
  7333  00192A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7334  00192C  0E1D               	movlw	29
  7335  00192E  6E03               	movwf	i2uartTx@length^0,c
  7336  001930  EC0A  F011         	call	i2_uartTx	;wreg free
  7337                           
  7338                           ;usart.c: 58:             break;
  7339  001934  EF18  F00D         	goto	i2l508
  7340  001938                     i2l2827:
  7341  001938  FFFF               	dw	65535	; assembler added errata NOP
  7342                           
  7343                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7344  00193A  0E5C               	movlw	low _errString_ZEND
  7345  00193C  6E01               	movwf	i2uartTx@ptr^0,c
  7346  00193E  0E01               	movlw	high _errString_ZEND
  7347  001940  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7348  001942  0E28               	movlw	40
  7349  001944  6E03               	movwf	i2uartTx@length^0,c
  7350  001946  EC0A  F011         	call	i2_uartTx	;wreg free
  7351                           
  7352                           ;usart.c: 61:             break;
  7353  00194A  EF18  F00D         	goto	i2l508
  7354  00194E                     i2l2829:
  7355  00194E  FFFF               	dw	65535	; assembler added errata NOP
  7356                           
  7357                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7358  001950  0E84               	movlw	low _errString_Reset
  7359  001952  6E01               	movwf	i2uartTx@ptr^0,c
  7360  001954  0E01               	movlw	high _errString_Reset
  7361  001956  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7362  001958  0E27               	movlw	39
  7363  00195A  6E03               	movwf	i2uartTx@length^0,c
  7364  00195C  EC0A  F011         	call	i2_uartTx	;wreg free
  7365                           
  7366                           ;usart.c: 64:             break;
  7367  001960  EF18  F00D         	goto	i2l508
  7368  001964                     i2l2831:
  7369  001964  FFFF               	dw	65535	; assembler added errata NOP
  7370                           
  7371                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7372  001966  0E34               	movlw	low _errString_Point
  7373  001968  6E01               	movwf	i2uartTx@ptr^0,c
  7374  00196A  0E01               	movlw	high _errString_Point
  7375  00196C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7376  00196E  0E28               	movlw	40
  7377  001970  6E03               	movwf	i2uartTx@length^0,c
  7378  001972  EC0A  F011         	call	i2_uartTx	;wreg free
  7379                           
  7380                           ;usart.c: 67:             break;
  7381  001976  EF18  F00D         	goto	i2l508
  7382  00197A                     i2l2833:
  7383  00197A  FFFF               	dw	65535	; assembler added errata NOP
  7384                           
  7385                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7386  00197C  0E84               	movlw	low _errString_Bound
  7387  00197E  6E01               	movwf	i2uartTx@ptr^0,c
  7388  001980  0E00               	movlw	high _errString_Bound
  7389  001982  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7390  001984  0E20               	movlw	32
  7391  001986  6E03               	movwf	i2uartTx@length^0,c
  7392  001988  EC0A  F011         	call	i2_uartTx	;wreg free
  7393                           
  7394                           ;usart.c: 70:             break;
  7395  00198C  EF18  F00D         	goto	i2l508
  7396  001990                     i2l2835:
  7397  001990  FFFF               	dw	65535	; assembler added errata NOP
  7398                           
  7399                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7400  001992  0E00               	movlw	low _errString_PointZ
  7401  001994  6E01               	movwf	i2uartTx@ptr^0,c
  7402  001996  0E01               	movlw	high _errString_PointZ
  7403  001998  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7404  00199A  0E34               	movlw	52
  7405  00199C  6E03               	movwf	i2uartTx@length^0,c
  7406  00199E  EC0A  F011         	call	i2_uartTx	;wreg free
  7407                           
  7408                           ;usart.c: 73:             break;
  7409  0019A2  EF18  F00D         	goto	i2l508
  7410  0019A6                     i2l2837:
  7411  0019A6  FFFF               	dw	65535	; assembler added errata NOP
  7412                           
  7413                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7414  0019A8  0EAB               	movlw	low _errString_Fatal
  7415  0019AA  6E01               	movwf	i2uartTx@ptr^0,c
  7416  0019AC  0E01               	movlw	high _errString_Fatal
  7417  0019AE  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7418  0019B0  0E26               	movlw	38
  7419  0019B2  6E03               	movwf	i2uartTx@length^0,c
  7420  0019B4  EC0A  F011         	call	i2_uartTx	;wreg free
  7421                           
  7422                           ;usart.c: 76:             break;
  7423  0019B8  EF18  F00D         	goto	i2l508
  7424  0019BC                     i2l2839:
  7425  0019BC  FFFF               	dw	65535	; assembler added errata NOP
  7426                           
  7427                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7428  0019BE  0EC1               	movlw	low _errString_Command
  7429  0019C0  6E01               	movwf	i2uartTx@ptr^0,c
  7430  0019C2  0E00               	movlw	high _errString_Command
  7431  0019C4  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7432  0019C6  0E17               	movlw	23
  7433  0019C8  6E03               	movwf	i2uartTx@length^0,c
  7434  0019CA  EC0A  F011         	call	i2_uartTx	;wreg free
  7435                           
  7436                           ;usart.c: 79:             break;
  7437  0019CE  EF18  F00D         	goto	i2l508
  7438  0019D2                     i2l2843:
  7439  0019D2  FFFF               	dw	65535	; assembler added errata NOP
  7440  0019D4  5007               	movf	i2printError@errCode^0,w,c
  7441  0019D6  6E05               	movwf	??i2_printError^0,c
  7442  0019D8  6A06               	clrf	(??i2_printError+1)^0,c
  7443                           
  7444                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7445                           ; Switch size 1, requested type "simple"
  7446                           ; Number of cases is 1, Range of values is 0 to 0
  7447                           ; switch strategies available:
  7448                           ; Name         Instructions Cycles
  7449                           ; simple_byte            4     3 (average)
  7450                           ;	Chosen strategy is simple_byte
  7451  0019DA  5006               	movf	(??i2_printError+1)^0,w,c
  7452  0019DC  0A00               	xorlw	0	; case 0
  7453  0019DE  B4D8               	btfsc	status,2,c
  7454  0019E0  EFF4  F00C         	goto	i2l4367
  7455  0019E4  EF18  F00D         	goto	i2l508
  7456  0019E8                     i2l4367:
  7457  0019E8  FFFF               	dw	65535	; assembler added errata NOP
  7458                           
  7459                           ; Switch size 1, requested type "simple"
  7460                           ; Number of cases is 8, Range of values is 1 to 8
  7461                           ; switch strategies available:
  7462                           ; Name         Instructions Cycles
  7463                           ; simple_byte           25    13 (average)
  7464                           ;	Chosen strategy is simple_byte
  7465  0019EA  5005               	movf	??i2_printError^0,w,c
  7466  0019EC  0A01               	xorlw	1	; case 1
  7467  0019EE  B4D8               	btfsc	status,2,c
  7468  0019F0  EF91  F00C         	goto	i2l2825
  7469  0019F4  0A03               	xorlw	3	; case 2
  7470  0019F6  B4D8               	btfsc	status,2,c
  7471  0019F8  EF9C  F00C         	goto	i2l2827
  7472  0019FC  0A01               	xorlw	1	; case 3
  7473  0019FE  B4D8               	btfsc	status,2,c
  7474  001A00  EFA7  F00C         	goto	i2l2829
  7475  001A04  0A07               	xorlw	7	; case 4
  7476  001A06  B4D8               	btfsc	status,2,c
  7477  001A08  EFB2  F00C         	goto	i2l2831
  7478  001A0C  0A01               	xorlw	1	; case 5
  7479  001A0E  B4D8               	btfsc	status,2,c
  7480  001A10  EFBD  F00C         	goto	i2l2833
  7481  001A14  0A03               	xorlw	3	; case 6
  7482  001A16  B4D8               	btfsc	status,2,c
  7483  001A18  EFC8  F00C         	goto	i2l2835
  7484  001A1C  0A01               	xorlw	1	; case 7
  7485  001A1E  B4D8               	btfsc	status,2,c
  7486  001A20  EFD3  F00C         	goto	i2l2837
  7487  001A24  0A0F               	xorlw	15	; case 8
  7488  001A26  B4D8               	btfsc	status,2,c
  7489  001A28  EFDE  F00C         	goto	i2l2839
  7490  001A2C  EF18  F00D         	goto	i2l508
  7491  001A30                     i2l508:
  7492  001A30  FFFF               	dw	65535	; assembler added errata NOP
  7493  001A32  0012               	return		;funcret
  7494  001A34  FFFF               	dw	65535	; errata NOP
  7495  001A36                     __end_ofi2_printError:
  7496                           	callstack 0
  7497                           
  7498 ;; *************** function i2_uartTx *****************
  7499 ;; Defined at:
  7500 ;;		line 219 in file "usart.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7503 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  7504 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  7505 ;;  length          1    2[COMRAM] unsigned char 
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;  i               1    3[COMRAM] unsigned char 
  7508 ;; Return value:  Size  Location     Type
  7509 ;;                  1    wreg      void 
  7510 ;; Registers used:
  7511 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7517 ;;      Params:         3       0       0       0       0       0       0
  7518 ;;      Locals:         1       0       0       0       0       0       0
  7519 ;;      Temps:          0       0       0       0       0       0       0
  7520 ;;      Totals:         4       0       0       0       0       0       0
  7521 ;;Total ram usage:        4 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; This function calls:
  7524 ;;		Nothing
  7525 ;; This function is called by:
  7526 ;;		i2_printError
  7527 ;; This function uses a non-reentrant model
  7528 ;;
  7529                           
  7530                           	psect	text47
  7531  002214                     __ptext47:
  7532                           	callstack 0
  7533  002214                     i2_uartTx:
  7534                           	callstack 0
  7535  002214  FFFF               	dw	65535	; assembler added errata NOP
  7536  002216                     
  7537                           ;usart.c: 219: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 220: {;usa
      +                          rt.c: 222:     for(char i = 1; i < length; i++){
  7538  002216  0E01               	movlw	1
  7539  002218  6E04               	movwf	i2uartTx@i^0,c
  7540  00221A  EF23  F011         	goto	i2l2553
  7541  00221E                     i2l2549:
  7542  00221E  FFFF               	dw	65535	; assembler added errata NOP
  7543                           
  7544                           ;usart.c: 224:         TXREG = *ptr;
  7545  002220  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  7546  002224  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  7547  002228  50DF               	movf	indf2,w,c
  7548  00222A  6EAD               	movwf	173,c	;volatile
  7549  00222C                     i2l563:
  7550  00222C  FFFF               	dw	65535	; assembler added errata NOP
  7551  00222E  A2AC               	btfss	172,1,c	;volatile
  7552  002230  EF1C  F011         	goto	i2u159_41
  7553  002234  EF1F  F011         	goto	i2u159_40
  7554  002238                     i2u159_41:
  7555  002238  FFFF               	dw	65535	; assembler added errata NOP
  7556  00223A  EF16  F011         	goto	i2l563
  7557  00223E                     i2u159_40:
  7558  00223E  FFFF               	dw	65535	; assembler added errata NOP
  7559  002240                     
  7560                           ;usart.c: 228:         ptr++;
  7561  002240  4A01               	infsnz	i2uartTx@ptr^0,f,c
  7562  002242  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  7563                           
  7564                           ;usart.c: 229:     }
  7565  002244  2A04               	incf	i2uartTx@i^0,f,c
  7566  002246                     i2l2553:
  7567  002246  FFFF               	dw	65535	; assembler added errata NOP
  7568  002248  5003               	movf	i2uartTx@length^0,w,c
  7569  00224A  5C04               	subwf	i2uartTx@i^0,w,c
  7570  00224C  A0D8               	btfss	status,0,c
  7571  00224E  EF2B  F011         	goto	i2u160_41
  7572  002252  EF2E  F011         	goto	i2u160_40
  7573  002256                     i2u160_41:
  7574  002256  FFFF               	dw	65535	; assembler added errata NOP
  7575  002258  EF0F  F011         	goto	i2l2549
  7576  00225C                     i2u160_40:
  7577  00225C  FFFF               	dw	65535	; assembler added errata NOP
  7578  00225E  0012               	return		;funcret
  7579  002260  FFFF               	dw	65535	; errata NOP
  7580  002262                     __end_ofi2_uartTx:
  7581                           	callstack 0
  7582                           
  7583 ;; *************** function _writeTM0 *****************
  7584 ;; Defined at:
  7585 ;;		line 23 in file "motors.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;		None
  7588 ;; Auto vars:     Size  Location     Type
  7589 ;;		None
  7590 ;; Return value:  Size  Location     Type
  7591 ;;                  1    wreg      void 
  7592 ;; Registers used:
  7593 ;;		wreg, status,2
  7594 ;; Tracked objects:
  7595 ;;		On entry : 0/0
  7596 ;;		On exit  : 0/0
  7597 ;;		Unchanged: 0/0
  7598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7599 ;;      Params:         0       0       0       0       0       0       0
  7600 ;;      Locals:         0       0       0       0       0       0       0
  7601 ;;      Temps:          0       0       0       0       0       0       0
  7602 ;;      Totals:         0       0       0       0       0       0       0
  7603 ;;Total ram usage:        0 bytes
  7604 ;; Hardware stack levels used:    1
  7605 ;; This function calls:
  7606 ;;		Nothing
  7607 ;; This function is called by:
  7608 ;;		_isr
  7609 ;; This function uses a non-reentrant model
  7610 ;;
  7611                           
  7612                           	psect	text48
  7613  00236A                     __ptext48:
  7614                           	callstack 0
  7615  00236A                     _writeTM0:
  7616                           	callstack 0
  7617  00236A  FFFF               	dw	65535	; assembler added errata NOP
  7618  00236C                     
  7619                           ;motors.c: 24:     tm0Error = 1;
  7620  00236C  0E00               	movlw	0
  7621  00236E  6E5C               	movwf	(_tm0Error+1)^0,c
  7622  002370  0E01               	movlw	1
  7623  002372  6E5B               	movwf	_tm0Error^0,c
  7624  002374  0012               	return		;funcret
  7625  002376  FFFF               	dw	65535	; errata NOP
  7626  002378                     __end_of_writeTM0:
  7627                           	callstack 0
  7628                           
  7629 ;; *************** function _whatsTM0Limit *****************
  7630 ;; Defined at:
  7631 ;;		line 37 in file "motors.c"
  7632 ;; Parameters:    Size  Location     Type
  7633 ;;		None
  7634 ;; Auto vars:     Size  Location     Type
  7635 ;;		None
  7636 ;; Return value:  Size  Location     Type
  7637 ;;                  1    wreg      unsigned char 
  7638 ;; Registers used:
  7639 ;;		wreg, status,2
  7640 ;; Tracked objects:
  7641 ;;		On entry : 0/0
  7642 ;;		On exit  : 0/0
  7643 ;;		Unchanged: 0/0
  7644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7645 ;;      Params:         0       0       0       0       0       0       0
  7646 ;;      Locals:         0       0       0       0       0       0       0
  7647 ;;      Temps:          0       0       0       0       0       0       0
  7648 ;;      Totals:         0       0       0       0       0       0       0
  7649 ;;Total ram usage:        0 bytes
  7650 ;; Hardware stack levels used:    1
  7651 ;; This function calls:
  7652 ;;		Nothing
  7653 ;; This function is called by:
  7654 ;;		_isr
  7655 ;; This function uses a non-reentrant model
  7656 ;;
  7657                           
  7658                           	psect	text49
  7659  002430                     __ptext49:
  7660                           	callstack 0
  7661  002430                     _whatsTM0Limit:
  7662                           	callstack 0
  7663  002430  FFFF               	dw	65535	; assembler added errata NOP
  7664  002432                     
  7665                           ;motors.c: 38:     return(tm0Limit);
  7666  002432  5068               	movf	_tm0Limit^0,w,c
  7667  002434  0012               	return		;funcret
  7668  002436  FFFF               	dw	65535	; errata NOP
  7669  002438                     __end_of_whatsTM0Limit:
  7670                           	callstack 0
  7671                           
  7672 ;; *************** function _toggleStep *****************
  7673 ;; Defined at:
  7674 ;;		line 81 in file "pwm.c"
  7675 ;; Parameters:    Size  Location     Type
  7676 ;;		None
  7677 ;; Auto vars:     Size  Location     Type
  7678 ;;		None
  7679 ;; Return value:  Size  Location     Type
  7680 ;;                  1    wreg      void 
  7681 ;; Registers used:
  7682 ;;		wreg, status,2
  7683 ;; Tracked objects:
  7684 ;;		On entry : 0/0
  7685 ;;		On exit  : 0/0
  7686 ;;		Unchanged: 0/0
  7687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7688 ;;      Params:         0       0       0       0       0       0       0
  7689 ;;      Locals:         0       0       0       0       0       0       0
  7690 ;;      Temps:          0       0       0       0       0       0       0
  7691 ;;      Totals:         0       0       0       0       0       0       0
  7692 ;;Total ram usage:        0 bytes
  7693 ;; Hardware stack levels used:    1
  7694 ;; This function calls:
  7695 ;;		Nothing
  7696 ;; This function is called by:
  7697 ;;		_isr
  7698 ;; This function uses a non-reentrant model
  7699 ;;
  7700                           
  7701                           	psect	text50
  7702  0023D2                     __ptext50:
  7703                           	callstack 0
  7704  0023D2                     _toggleStep:
  7705                           	callstack 0
  7706  0023D2  FFFF               	dw	65535	; assembler added errata NOP
  7707  0023D4                     
  7708                           ;pwm.c: 82:     stepToggle = 1;
  7709  0023D4  0E01               	movlw	1
  7710  0023D6  6E66               	movwf	_stepToggle^0,c	;volatile
  7711  0023D8  0012               	return		;funcret
  7712  0023DA  FFFF               	dw	65535	; errata NOP
  7713  0023DC                     __end_of_toggleStep:
  7714                           	callstack 0
  7715                           
  7716 ;; *************** function _setTouchRel *****************
  7717 ;; Defined at:
  7718 ;;		line 85 in file "adc.c"
  7719 ;; Parameters:    Size  Location     Type
  7720 ;;		None
  7721 ;; Auto vars:     Size  Location     Type
  7722 ;;		None
  7723 ;; Return value:  Size  Location     Type
  7724 ;;                  1    wreg      void 
  7725 ;; Registers used:
  7726 ;;		wreg, status,2
  7727 ;; Tracked objects:
  7728 ;;		On entry : 0/0
  7729 ;;		On exit  : 0/0
  7730 ;;		Unchanged: 0/0
  7731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7732 ;;      Params:         0       0       0       0       0       0       0
  7733 ;;      Locals:         0       0       0       0       0       0       0
  7734 ;;      Temps:          0       0       0       0       0       0       0
  7735 ;;      Totals:         0       0       0       0       0       0       0
  7736 ;;Total ram usage:        0 bytes
  7737 ;; Hardware stack levels used:    1
  7738 ;; This function calls:
  7739 ;;		Nothing
  7740 ;; This function is called by:
  7741 ;;		_isr
  7742 ;; This function uses a non-reentrant model
  7743 ;;
  7744                           
  7745                           	psect	text51
  7746  0023DC                     __ptext51:
  7747                           	callstack 0
  7748  0023DC                     _setTouchRel:
  7749                           	callstack 0
  7750  0023DC  FFFF               	dw	65535	; assembler added errata NOP
  7751  0023DE                     
  7752                           ;adc.c: 86:     touch_rel = 1;
  7753  0023DE  0E01               	movlw	1
  7754  0023E0  6E65               	movwf	_touch_rel^0,c	;volatile
  7755  0023E2  0012               	return		;funcret
  7756  0023E4  FFFF               	dw	65535	; errata NOP
  7757  0023E6                     __end_of_setTouchRel:
  7758                           	callstack 0
  7759                           
  7760 ;; *************** function _setThermRel *****************
  7761 ;; Defined at:
  7762 ;;		line 78 in file "adc.c"
  7763 ;; Parameters:    Size  Location     Type
  7764 ;;		None
  7765 ;; Auto vars:     Size  Location     Type
  7766 ;;		None
  7767 ;; Return value:  Size  Location     Type
  7768 ;;                  1    wreg      void 
  7769 ;; Registers used:
  7770 ;;		wreg, status,2
  7771 ;; Tracked objects:
  7772 ;;		On entry : 0/0
  7773 ;;		On exit  : 0/0
  7774 ;;		Unchanged: 0/0
  7775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7776 ;;      Params:         0       0       0       0       0       0       0
  7777 ;;      Locals:         0       0       0       0       0       0       0
  7778 ;;      Temps:          0       0       0       0       0       0       0
  7779 ;;      Totals:         0       0       0       0       0       0       0
  7780 ;;Total ram usage:        0 bytes
  7781 ;; Hardware stack levels used:    1
  7782 ;; This function calls:
  7783 ;;		Nothing
  7784 ;; This function is called by:
  7785 ;;		_isr
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           	psect	text52
  7790  0023E6                     __ptext52:
  7791                           	callstack 0
  7792  0023E6                     _setThermRel:
  7793                           	callstack 0
  7794  0023E6  FFFF               	dw	65535	; assembler added errata NOP
  7795  0023E8                     
  7796                           ;adc.c: 79:     therm_rel = 1;
  7797  0023E8  0E01               	movlw	1
  7798  0023EA  6E64               	movwf	_therm_rel^0,c	;volatile
  7799  0023EC  0012               	return		;funcret
  7800  0023EE  FFFF               	dw	65535	; errata NOP
  7801  0023F0                     __end_of_setThermRel:
  7802                           	callstack 0
  7803                           
  7804 ;; *************** function _retPeriod *****************
  7805 ;; Defined at:
  7806 ;;		line 89 in file "pwm.c"
  7807 ;; Parameters:    Size  Location     Type
  7808 ;;		None
  7809 ;; Auto vars:     Size  Location     Type
  7810 ;;		None
  7811 ;; Return value:  Size  Location     Type
  7812 ;;                  2    0[COMRAM] unsigned int 
  7813 ;; Registers used:
  7814 ;;		None
  7815 ;; Tracked objects:
  7816 ;;		On entry : 0/0
  7817 ;;		On exit  : 0/0
  7818 ;;		Unchanged: 0/0
  7819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7820 ;;      Params:         2       0       0       0       0       0       0
  7821 ;;      Locals:         0       0       0       0       0       0       0
  7822 ;;      Temps:          0       0       0       0       0       0       0
  7823 ;;      Totals:         2       0       0       0       0       0       0
  7824 ;;Total ram usage:        2 bytes
  7825 ;; Hardware stack levels used:    1
  7826 ;; This function calls:
  7827 ;;		Nothing
  7828 ;; This function is called by:
  7829 ;;		_isr
  7830 ;; This function uses a non-reentrant model
  7831 ;;
  7832                           
  7833                           	psect	text53
  7834  002378                     __ptext53:
  7835                           	callstack 0
  7836  002378                     _retPeriod:
  7837                           	callstack 0
  7838  002378  FFFF               	dw	65535	; assembler added errata NOP
  7839  00237A                     
  7840                           ;pwm.c: 90:     return pwmPeriod;
  7841  00237A  C055  F001         	movff	_pwmPeriod,?_retPeriod
  7842  00237E  C056  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7843  002382  0012               	return		;funcret
  7844  002384  FFFF               	dw	65535	; errata NOP
  7845  002386                     __end_of_retPeriod:
  7846                           	callstack 0
  7847                           
  7848 ;; *************** function _increaseStep *****************
  7849 ;; Defined at:
  7850 ;;		line 73 in file "pwm.c"
  7851 ;; Parameters:    Size  Location     Type
  7852 ;;		None
  7853 ;; Auto vars:     Size  Location     Type
  7854 ;;		None
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  1    wreg      void 
  7857 ;; Registers used:
  7858 ;;		status,2, status,0
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7864 ;;      Params:         0       0       0       0       0       0       0
  7865 ;;      Locals:         0       0       0       0       0       0       0
  7866 ;;      Temps:          0       0       0       0       0       0       0
  7867 ;;      Totals:         0       0       0       0       0       0       0
  7868 ;;Total ram usage:        0 bytes
  7869 ;; Hardware stack levels used:    1
  7870 ;; This function calls:
  7871 ;;		Nothing
  7872 ;; This function is called by:
  7873 ;;		_isr
  7874 ;; This function uses a non-reentrant model
  7875 ;;
  7876                           
  7877                           	psect	text54
  7878  002438                     __ptext54:
  7879                           	callstack 0
  7880  002438                     _increaseStep:
  7881                           	callstack 0
  7882  002438  FFFF               	dw	65535	; assembler added errata NOP
  7883  00243A                     
  7884                           ;pwm.c: 74:     pwmStep++;
  7885  00243A  2A67               	incf	_pwmStep^0,f,c	;volatile
  7886  00243C  0012               	return		;funcret
  7887  00243E  FFFF               	dw	65535	; errata NOP
  7888  002440                     __end_of_increaseStep:
  7889                           	callstack 0
  7890                           
  7891                           	psect	rparam
  7892  0000                     
  7893                           	psect	temp
  7894  00006E                     btemp:
  7895                           	callstack 0
  7896  00006E                     	ds	1
  7897  0000                     int$flags	set	btemp
  7898  0000                     wtemp8	set	btemp+1
  7899  0000                     ttemp5	set	btemp+1
  7900  0000                     ttemp6	set	btemp+4
  7901  0000                     ttemp7	set	btemp+8
  7902                           
  7903                           	psect	idloc
  7904                           
  7905                           ;Config register IDLOC0 @ 0x200000
  7906                           ;	unspecified, using default values
  7907  200000                     	org	2097152
  7908  200000  FF                 	db	255
  7909                           
  7910                           ;Config register IDLOC1 @ 0x200001
  7911                           ;	unspecified, using default values
  7912  200001                     	org	2097153
  7913  200001  FF                 	db	255
  7914                           
  7915                           ;Config register IDLOC2 @ 0x200002
  7916                           ;	unspecified, using default values
  7917  200002                     	org	2097154
  7918  200002  FF                 	db	255
  7919                           
  7920                           ;Config register IDLOC3 @ 0x200003
  7921                           ;	unspecified, using default values
  7922  200003                     	org	2097155
  7923  200003  FF                 	db	255
  7924                           
  7925                           ;Config register IDLOC4 @ 0x200004
  7926                           ;	unspecified, using default values
  7927  200004                     	org	2097156
  7928  200004  FF                 	db	255
  7929                           
  7930                           ;Config register IDLOC5 @ 0x200005
  7931                           ;	unspecified, using default values
  7932  200005                     	org	2097157
  7933  200005  FF                 	db	255
  7934                           
  7935                           ;Config register IDLOC6 @ 0x200006
  7936                           ;	unspecified, using default values
  7937  200006                     	org	2097158
  7938  200006  FF                 	db	255
  7939                           
  7940                           ;Config register IDLOC7 @ 0x200007
  7941                           ;	unspecified, using default values
  7942  200007                     	org	2097159
  7943  200007  FF                 	db	255
  7944                           
  7945                           	psect	config
  7946                           
  7947                           ; Padding undefined space
  7948  300000                     	org	3145728
  7949  300000  FF                 	db	255
  7950                           
  7951                           ;Config register CONFIG1H @ 0x300001
  7952                           ;	Oscillator Selection bits
  7953                           ;	OSC = XT, XT oscillator
  7954                           ;	Oscillator System Clock Switch Enable bit
  7955                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  7956  300001                     	org	3145729
  7957  300001  21                 	db	33
  7958                           
  7959                           ;Config register CONFIG2L @ 0x300002
  7960                           ;	Power-up Timer Enable bit
  7961                           ;	PWRT = OFF, PWRT disabled
  7962                           ;	Brown-out Reset Enable bit
  7963                           ;	BOR = OFF, Brown-out Reset disabled
  7964                           ;	Brown-out Reset Voltage bits
  7965                           ;	BORV = 20, VBOR set to 2.0V
  7966  300002                     	org	3145730
  7967  300002  0D                 	db	13
  7968                           
  7969                           ;Config register CONFIG2H @ 0x300003
  7970                           ;	Watchdog Timer Enable bit
  7971                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7972                           ;	Watchdog Timer Postscale Select bits
  7973                           ;	WDTPS = 128, 1:128
  7974  300003                     	org	3145731
  7975  300003  0E                 	db	14
  7976                           
  7977                           ; Padding undefined space
  7978  300004                     	org	3145732
  7979  300004  FF                 	db	255
  7980                           
  7981                           ;Config register CONFIG3H @ 0x300005
  7982                           ;	CCP2 Mux bit
  7983                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  7984  300005                     	org	3145733
  7985  300005  00                 	db	0
  7986                           
  7987                           ;Config register CONFIG4L @ 0x300006
  7988                           ;	Stack Full/Underflow Reset Enable bit
  7989                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  7990                           ;	Low Voltage ICSP Enable bit
  7991                           ;	LVP = OFF, Low Voltage ICSP disabled
  7992                           ;	Background Debugger Enable bit
  7993                           ;	DEBUG = 0x1, unprogrammed default
  7994  300006                     	org	3145734
  7995  300006  80                 	db	128
  7996                           
  7997                           ; Padding undefined space
  7998  300007                     	org	3145735
  7999  300007  FF                 	db	255
  8000                           
  8001                           ;Config register CONFIG5L @ 0x300008
  8002                           ;	Code Protection bit
  8003                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8004                           ;	Code Protection bit
  8005                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8006                           ;	Code Protection bit
  8007                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8008                           ;	Code Protection bit
  8009                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8010  300008                     	org	3145736
  8011  300008  0F                 	db	15
  8012                           
  8013                           ;Config register CONFIG5H @ 0x300009
  8014                           ;	Boot Block Code Protection bit
  8015                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8016                           ;	Data EEPROM Code Protection bit
  8017                           ;	CPD = OFF, Data EEPROM not code protected
  8018  300009                     	org	3145737
  8019  300009  C0                 	db	192
  8020                           
  8021                           ;Config register CONFIG6L @ 0x30000A
  8022                           ;	Write Protection bit
  8023                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8024                           ;	Write Protection bit
  8025                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8026                           ;	Write Protection bit
  8027                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8028                           ;	Write Protection bit
  8029                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8030  30000A                     	org	3145738
  8031  30000A  0F                 	db	15
  8032                           
  8033                           ;Config register CONFIG6H @ 0x30000B
  8034                           ;	Configuration Register Write Protection bit
  8035                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8036                           ;	Boot Block Write Protection bit
  8037                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8038                           ;	Data EEPROM Write Protection bit
  8039                           ;	WRTD = OFF, Data EEPROM not write protected
  8040  30000B                     	org	3145739
  8041  30000B  E0                 	db	224
  8042                           
  8043                           ;Config register CONFIG7L @ 0x30000C
  8044                           ;	Table Read Protection bit
  8045                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8046                           ;	Table Read Protection bit
  8047                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8048                           ;	Table Read Protection bit
  8049                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8050                           ;	Table Read Protection bit
  8051                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8052  30000C                     	org	3145740
  8053  30000C  0F                 	db	15
  8054                           
  8055                           ;Config register CONFIG7H @ 0x30000D
  8056                           ;	Boot Block Table Read Protection bit
  8057                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8058  30000D                     	org	3145741
  8059  30000D  40                 	db	64
  8060                           tosu	equ	0xFFF
  8061                           tosh	equ	0xFFE
  8062                           tosl	equ	0xFFD
  8063                           stkptr	equ	0xFFC
  8064                           pclatu	equ	0xFFB
  8065                           pclath	equ	0xFFA
  8066                           pcl	equ	0xFF9
  8067                           tblptru	equ	0xFF8
  8068                           tblptrh	equ	0xFF7
  8069                           tblptrl	equ	0xFF6
  8070                           tablat	equ	0xFF5
  8071                           prodh	equ	0xFF4
  8072                           prodl	equ	0xFF3
  8073                           indf0	equ	0xFEF
  8074                           postinc0	equ	0xFEE
  8075                           postdec0	equ	0xFED
  8076                           preinc0	equ	0xFEC
  8077                           plusw0	equ	0xFEB
  8078                           fsr0h	equ	0xFEA
  8079                           fsr0l	equ	0xFE9
  8080                           wreg	equ	0xFE8
  8081                           indf1	equ	0xFE7
  8082                           postinc1	equ	0xFE6
  8083                           postdec1	equ	0xFE5
  8084                           preinc1	equ	0xFE4
  8085                           plusw1	equ	0xFE3
  8086                           fsr1h	equ	0xFE2
  8087                           fsr1l	equ	0xFE1
  8088                           bsr	equ	0xFE0
  8089                           indf2	equ	0xFDF
  8090                           postinc2	equ	0xFDE
  8091                           postdec2	equ	0xFDD
  8092                           preinc2	equ	0xFDC
  8093                           plusw2	equ	0xFDB
  8094                           fsr2h	equ	0xFDA
  8095                           fsr2l	equ	0xFD9
  8096                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    14
    Data        302
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     68     109
    BANK0           128     12     128
    BANK1           256      3     212
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 52
		 -> errString_Command(BANK0[23]), errString_Fatal(BANK1[38]), errString_PointZ(BANK1[52]), errString_Bound(BANK0[32]), 
		 -> errString_Point(BANK1[40]), errString_Reset(BANK1[39]), errString_ZEND(BANK1[40]), errString_Feed(BANK0[29]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_executeData
    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_enableMotor
    _resetPosition->_setDecay
    _resetPosition->_setDirection
    _resetPosition->_setStep
    _touchTherm->_setDirection
    _touchObject->_setDirection
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _moveToPoint->_setDirection
    _liftArm->_setDirection

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   16954
                                             10 BANK0      2     2      0
                                              0 BANK1      3     3      0
                           _clearTM0
                        _enableMotor
                        _executeData
                         _fatalError
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0    2807
                                             21 COMRAM     3     3      0
                        _enableMotor
                          _resetStep
                           _setDecay
                       _setDirection
                            _setStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _setStep                                              4     3      1     487
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _setDecay                                             4     3      1     394
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _enableMotor                                          4     3      1     664
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    9829
                                             66 COMRAM     2     2      0
                                              7 BANK0      3     3      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0    1058
                          _resetStep
                         _resetTherm
                        _returnTherm
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0    1058
                          _resetStep
                         _resetTouch
                        _returnTouch
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3129
                                              0 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         12     4      8    3242
                                             21 COMRAM    12     4      8
                          _resetStep
                       _setDirection
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0    1058
                          _resetStep
                       _setDirection
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _setDirection                                         4     3      1    1024
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0     552
                                             10 COMRAM     7     7      0
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _enableMotor
   _executeData
     _getData
     _liftArm
       _resetStep
       _setDirection
       _stepMade
     _moveToPoint
       _resetStep
       _setDirection
       _stepCounter
       _stepMade
     _pickObject
     _releaseObj
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _touchObject
       _resetStep
       _resetTouch
       _returnTouch
       _setDirection
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _setDirection
       _startADC
       _stepMade
       _stopADC
   _fatalError
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _enableMotor
     _resetStep
     _setDecay
     _setDirection
     _setStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      3      D4       7       82.8%
BITBANK0            80      0       0       4        0.0%
BANK0               80      C      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     44      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C1      15        0.0%
DATA                 0      0     1C1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu Jan 28 11:08:49 2021

                                                  ___fldiv@aexp 0038  
                                                  ___fldiv@bexp 0037  
                                         __end_of_interruptInit 229C  
                                                  ___fldiv@sign 0030  
                                                            l74 22BE  
                                                            l83 1CEA  
                                                            l68 2366  
                                                            l92 2094  
                                                           l101 2108  
                                                           l110 2020  
                                                           l200 1F28  
                                                           l120 0FBA  
                                                           l121 0FEA  
                                                           l210 1E78  
                                                           l131 103E  
                                                           l115 0F86  
                                                           l124 0FEE  
                                                           l116 109A  
                                                           l300 1306  
                                                           l141 1298  
                                                           l213 242C  
                                                           l125 101E  
                                                           l117 0FB6  
                                                           l150 11E4  
                                                           l302 13FA  
                                                           l311 2278  
                                                           l135 10B0  
                                                           l152 121A  
                                                           l216 2424  
                                                           l312 228E  
                                                           l313 2298  
                                                           l156 123A  
                                                           l172 1C12  
                                                           l164 1B72  
                                                           l149 1280  
                                                           l173 1C16  
                                                           l325 0CC6  
                                                           l341 2316  
                                                           l350 23CE  
                                                           l190 1EFE  
                                                           l182 1AA0  
                                                           l511 23F4  
                                                           l344 232A  
                                                           l192 1EC2  
                                                           l168 1B92  
                                                           l520 2404  
                                                           l193 1F10  
                                                           l186 1B20  
                                                           l178 1A80  
                                                           l514 23FC  
                                                           l338 233C  
                                                           l347 23A6  
                                                           l187 1B24  
                                                           l523 23B0  
                                                           l196 1EE2  
                                                           l380 2414  
                                                           l508 1914  
                                                           l517 240C  
                                                           l374 22E4  
                                                           l383 239A  
                                                           l392 23BA  
                                                           l528 216A  
                                                           l552 1560  
                                                           l377 241C  
                                                           l386 238E  
                                                           l555 2358  
                                                           l563 21DE  
                                                           l299 1304  
                                                           l389 23C4  
                                                           l549 14EA  
                                                           l558 234A  
                                                           l494 2302  
                                                           l567 2210  
                                                           l867 17F8  
                                                           _isr 0008  
                                                   _touchObject 1B28  
                                                           prod 000FF3  
                                                           wreg 000FE8  
                                                  ___fltol@exp1 0042  
                                                   main@errCode 01D1  
                                                          l1152 0A3C  
                                                          l1232 0DD6  
                                                          l1225 0D2A  
                                                          l1154 0854  
                                                          l1163 08AA  
                                                          l1228 0EBC  
                                                          l1165 093A  
                                                          l1157 080E  
                                                          l1166 0922  
                                                          l1239 0E42  
                                                          l4001 0AB2  
                                                          l4011 0B5A  
                                                          l4003 0AEC  
                                                          l3301 231C  
                                                          l4013 0B6E  
                                                          l4005 0AFC  
                                                          l4101 1354  
                                                          l3303 2320  
                                                          l3311 23A0  
                                                          l4031 0C0C  
                                                          l4015 0B90  
                                                          l4007 0B10  
                                                          l4023 0BA8  
                                                          l4111 13B8  
                                                          l4103 135A  
                                                          l3305 2324  
                                                          l3401 07D0  
                                                          l3313 241A  
                                                          l3321 2388  
                                                          l4041 0CB2  
                                                          l4033 0C10  
                                                          l4017 0B94  
                                                          l4009 0B4A  
                                                          l4025 0BEE  
                                                          l4121 13EA  
                                                          l4113 13BA  
                                                          l4105 1360  
                                                          l3411 083E  
                                                          l3403 07E6  
                                                          l3315 2394  
                                                          l3323 23B6  
                                                          l4043 0CB6  
                                                          l4035 0C90  
                                                          l4027 0C04  
                                                          l4019 0B9C  
                                                          l3331 21F8  
                                                          l4123 13EE  
                                                          l4107 1374  
                                                          l4115 13C2  
                                                          l3309 23CA  
                                                          l3421 088A  
                                                          l3413 0840  
                                                          l3405 07FA  
                                                          l3341 0648  
                                                          l3333 0612  
                                                          l3317 2412  
                                                          l4045 0CBA  
                                                          l4037 0CA2  
                                                          l4029 0C08  
                                                          l3325 21C8  
                                                          l4125 13F2  
                                                          l4117 13DC  
                                                          l4109 1388  
                                                          l3431 08D4  
                                                          l3423 0896  
                                                          l3415 0850  
                                                          l3407 080C  
                                                          l3351 068A  
                                                          l3343 065C  
                                                          l3335 061E  
                                                          l3511 17E6  
                                                          l3503 179E  
                                                          l3319 23C0  
                                                          l4039 0CAA  
                                                          l4047 0CC2  
                                                          l4055 23F2  
                                                          l4063 2114  
                                                          l3327 21D0  
                                                          l4119 13E4  
                                                          l4071 129E  
                                                          l3441 095C  
                                                          l3433 08E6  
                                                          l3425 08A8  
                                                          l3417 086A  
                                                          l3409 081A  
                                                          l3361 06C2  
                                                          l3353 0692  
                                                          l3345 066C  
                                                          l3337 0630  
                                                          l3505 17AC  
                                                          l3521 0D3C  
                                                          l4065 2154  
                                                          l4057 2110  
                                                          l3329 21F2  
                                                          l4081 12C0  
                                                          l4073 12A4  
                                                          l3291 20C2  
                                                          l3611 10D0  
                                                          l3451 09D2  
                                                          l3443 096E  
                                                          l3435 0918  
                                                          l3419 0884  
                                                          l3427 08BC  
                                                          l3371 0704  
                                                          l3363 06D6  
                                                          l3355 0698  
                                                          l3347 0670  
                                                          l3339 0632  
                                                          l3507 17C0  
                                                          l3531 0D84  
                                                          l3523 0D58  
                                                          l3515 0CCE  
                                                          l3603 1FEA  
                                                          l4067 2156  
                                                          l4091 130A  
                                                          l4083 12C4  
                                                          l4075 12A8  
                                                          l3285 209E  
                                                          l3621 1122  
                                                          l3613 10E8  
                                                          l3461 0A2C  
                                                          l3453 09F2  
                                                          l3445 0998  
                                                          l3429 08D0  
                                                          l3373 0720  
                                                          l3365 06E6  
                                                          l3357 06AA  
                                                          l3349 0678  
                                                          l3509 17D6  
                                                          l3541 0E1C  
                                                          l3533 0DBC  
                                                          l3517 0CE2  
                                                          l3701 1BE4  
                                                          l4093 1324  
                                                          l4085 12C6  
                                                          l4077 12AC  
                                                          l4069 129E  
                                                          l3287 20A2  
                                                          l3295 20D2  
                                                          l3631 1172  
                                                          l3623 112E  
                                                          l3463 0A30  
                                                          l3455 0A0E  
                                                          l3439 0950  
                                                          l3447 099C  
                                                          l3391 077C  
                                                          l3375 0730  
                                                          l3383 0752  
                                                          l3367 06EA  
                                                          l3359 06AC  
                                                          l3471 16CA  
                                                          l3551 0E82  
                                                          l3543 0E30  
                                                          l3535 0DC0  
                                                          l3527 0D6C  
                                                          l3519 0CF4  
                                                          l3703 1BE6  
                                                          l4351 18CC  
                                                          l4095 1330  
                                                          l4087 12E0  
                                                          l4079 12B0  
                                                          l4361 20E8  
                                                          l3289 20B2  
                                                          l3641 118A  
                                                          l3633 1176  
                                                          l3625 1152  
                                                          l3617 10F0  
                                                          l3609 10B6  
                                                          l3457 0A14  
                                                          l3449 09BC  
                                                          l3393 0798  
                                                          l3385 0768  
                                                          l3377 0738  
                                                          l3369 06F2  
                                                          l3481 172C  
                                                          l3473 16E4  
                                                          l3553 0E96  
                                                          l3545 0E56  
                                                          l3537 0DCC  
                                                          l3529 0D76  
                                                          l3705 1BF4  
                                                          l3721 1A50  
                                                          l3713 1A38  
                                                          l4353 1CCA  
                                                          l3561 1C1E  
                                                          l3801 1806  
                                                          l4097 1342  
                                                          l4089 12FE  
                                                          l3651 11E8  
                                                          l3643 11A2  
                                                          l3635 1178  
                                                          l3627 1160  
                                                          l3619 1114  
                                                          l3459 0A26  
                                                          l3395 07A8  
                                                          l3387 0768  
                                                          l3379 073E  
                                                          l3483 173C  
                                                          l3555 0EA8  
                                                          l3547 0E58  
                                                          l3539 0E0E  
                                                          l3707 1BF8  
                                                          l3731 1A84  
                                                          l3723 1A52  
                                                          l3715 1A42  
                                                          l4355 2000  
                                                          l3563 1C22  
                                                          l3571 1CB4  
                                                          l3811 1874  
                                                          l3803 181C  
                                                          l4347 1452  
                                                          l4099 1352  
                                                          l3661 126E  
                                                          l3653 1212  
                                                          l3645 11A6  
                                                          l3637 1180  
                                                          l3629 116C  
                                                          l3397 07B8  
                                                          l3493 176E  
                                                          l3485 1740  
                                                          l3477 16FA  
                                                          l3557 0EAA  
                                                          l3549 0E5E  
                                                          l3709 1C0A  
                                                          l3741 1AEE  
                                                          l3733 1AA2  
                                                          l3725 1A5A  
                                                          l3717 1A44  
                                                          l3901 2276  
                                                          l4357 2074  
                                                          l3581 203E  
                                                          l3565 1C50  
                                                          l3813 188A  
                                                          l3805 1832  
                                                          l4349 1540  
                                                          l3663 1286  
                                                          l3655 121E  
                                                          l3647 11B2  
                                                          l3639 1184  
                                                          l3399 07C8  
                                                          l3495 177A  
                                                          l3487 1752  
                                                          l3479 172A  
                                                          l3671 1B2A  
                                                          l3751 1B18  
                                                          l3743 1AF2  
                                                          l3727 1A72  
                                                          l3735 1ABC  
                                                          l3719 1A4C  
                                                          l4359 0BC6  
                                                          l3911 22D4  
                                                          l3831 229E  
                                                          l3903 228C  
                                                          l3583 204E  
                                                          l3567 1C84  
                                                          l3815 18A0  
                                                          l3807 1848  
                                                          l3825 2350  
                                                          l3761 1E92  
                                                          l3665 1292  
                                                          l3657 123E  
                                                          l3649 11DC  
                                                          l3497 1784  
                                                          l3681 1B44  
                                                          l3673 1B34  
                                                          l3745 1AF4  
                                                          l3737 1AD8  
                                                          l3729 1A74  
                                                          l3913 22D6  
                                                          l3905 22C4  
                                                          l3841 22B6  
                                                          l3833 22A6  
                                                          l3577 202A  
                                                          l3593 1FB6  
                                                          l3809 185E  
                                                          l3921 2338  
                                                          l3771 1EC6  
                                                          l3763 1E96  
                                                          l3755 1E7E  
                                                          l3667 1296  
                                                          l3659 1258  
                                                          l3691 1B94  
                                                          l3683 1B4C  
                                                          l3675 1B36  
                                                          l3747 1B02  
                                                          l3739 1AE8  
                                                          l3915 22E0  
                                                          l3907 22CC  
                                                          l3843 22B8  
                                                          l3835 22AA  
                                                          l3579 202E  
                                                          l3587 205E  
                                                          l3595 1FBA  
                                                          l3851 0F3C  
                                                          l3819 18B6  
                                                          l3923 2308  
                                                          l3931 22FE  
                                                          l3829 235E  
                                                          l3773 1EE4  
                                                          l3765 1E9C  
                                                          l3757 1E88  
                                                          l3685 1B64  
                                                          l3693 1BAE  
                                                          l3677 1B3E  
                                                          l3749 1B06  
                                                          l3933 240A  
                                                          l3941 2342  
                                                          l3917 22E2  
                                                          l3909 22D2  
                                                          l3845 22BA  
                                                          l3837 22AE  
                                                          l3597 1FCA  
                                                          l3861 0F52  
                                                          l3853 0F40  
                                                          l3925 230A  
                                                          l3775 1F16  
                                                          l3767 1EB4  
                                                          l3759 1E8A  
                                                          l3791 1E4C  
                                                          l3783 1DC8  
                                                          l3695 1BCA  
                                                          l3687 1B66  
                                                          l3679 1B42  
                                                          l3847 22BC  
                                                          l3839 22B2  
                                                          l3599 1FDA  
                                                          l3871 0F9A  
                                                          l3863 0F56  
                                                          l3855 0F44  
                                                          l3951 1428  
                                                          l3919 2330  
                                                          l3927 230E  
                                                          l3777 1F22  
                                                          l3769 1EB6  
                                                          l3793 1E4E  
                                                          l3785 1E1A  
                                                          l3689 1B76  
                                                          l3697 1BDA  
                                                          l3937 2402  
                                                          l3881 1014  
                                                          l3873 0FAC  
                                                          l3865 0F5C  
                                                          l3857 0F48  
                                                          l3849 0EC4  
                                                          l3961 148A  
                                                          l3953 1432  
                                                          l3945 1408  
                                                          l3929 22EA  
                                                          l3779 1F26  
                                                          l3795 242A  
                                                          l3787 1E24  
                                                          l3699 1BE0  
                                                          l3891 1088  
                                                          l3883 1022  
                                                          l3875 0FCE  
                                                          l3867 0F74  
                                                          l3859 0F4A  
                                                          l3971 151E  
                                                          l3963 1492  
                                                          l3947 1418  
                                                          l3797 2422  
                                                          l3789 1E2A  
                                                          l3893 10A0  
                                                          l3885 1044  
                                                          l3877 0FE0  
                                                          l3869 0F7A  
                                                          l3965 14E4  
                                                          l3949 141E  
                                                          l3957 143C  
                                                          l3991 0A44  
                                                          l3895 10AC  
                                                          l3879 1002  
                                                          l3887 105E  
                                                          l3799 1802  
                                                          l3967 150C  
                                                          l3975 152A  
                                                          l3959 1472  
                                                          l3993 0A50  
                                                          l3985 23AC  
                                                          l3889 1074  
                                                          l3969 1514  
                                                          l3995 0A54  
                                                          l3899 2264  
                                                          l3987 23FA  
                                                          ?_isr 0001  
                                                          l3997 0A8E  
                                                          l3999 0A9E  
                                                          u3000 1B16  
                                                          u3001 1B10  
                                                          u3010 1EB2  
                                                          u3011 1EAC  
                                                          u3020 1EE0  
                                                          u3100 0FE0  
                                                          u2300 21F0  
                                                          u3021 1EDA  
                                                          u3101 0FDA  
                                                          u2301 21EA  
                                                          u3030 1EFE  
                                                          u3110 1000  
                                                          u2310 220E  
                                                          u3031 1EF8  
                                                          u3111 0FFA  
                                                          u2311 2208  
                                                          u3040 1F10  
                                                          u2400 07E4  
                                                          u2320 062E  
                                                          u3120 1014  
                                                          u3200 1488  
                                                          _LATD 000F8C  
                                                          u3041 1F0A  
                                                          u2401 07DE  
                                                          u2321 0628  
                                                          u3121 100E  
                                                          u3201 1482  
                                                          u2410 080A  
                                                          u2330 0646  
                                                          u3050 1E76  
                                                          u3210 0C02  
                                                          u3130 103C  
                                                          u2411 0804  
                                                          u2331 0640  
                                                          u3051 1E70  
                                                          u3211 0BFC  
                                                          u3131 1036  
                                                          u2500 094E  
                                                          u2420 083C  
                                                          u2340 065A  
                                                          u3220 0CA0  
                                                          u3140 105E  
                                                          u3060 0F72  
                                                          u2501 0948  
                                                          u2421 0836  
                                                          u2341 0654  
                                                          u3221 0C9A  
                                                          u3141 1058  
                                                          u3061 0F6C  
                                                          u2510 096C  
                                                          u2430 0868  
                                                          u2350 06A8  
                                                          u3150 1072  
                                                          u3070 0F98  
                                                          u3230 2168  
                                                          u2511 0966  
                                                          u2431 0862  
                                                          u2351 06A2  
                                                          u3151 106C  
                                                          u3071 0F92  
                                                          u3231 2162  
                                                          u2520 09BA  
                                                          u2440 0882  
                                                          u2360 06C0  
                                                          u2600 17C0  
                                                          u3160 1086  
                                                          u3080 0FAC  
                                                          u3240 12DE  
                                                          u2521 09B4  
                                                          u2441 087C  
                                                          u2361 06BA  
                                                          u2601 17BA  
                                                          u3161 1080  
                                                          u3081 0FA6  
                                                          u3241 12D8  
                                                          u2530 09F0  
                                                          u2450 08A6  
                                                          u2370 06D4  
                                                          u2610 17D4  
                                                          u3170 109A  
                                                          u3090 0FCC  
                                                          u3250 1322  
                                                          u2275 20AC  
                                                          u2531 09EA  
                                                          u2451 08A0  
                                                          u2371 06CE  
                                                          u2611 17CE  
                                                          u3171 1094  
                                                          u3091 0FC6  
                                                          u3251 131C  
                                                          u2276 20AE  
                                                          u2540 0A24  
                                                          u2460 08CE  
                                                          u2380 071E  
                                                          u2700 0E94  
                                                          u2620 0CE0  
                                                          u3180 2274  
                                                          u3260 13DA  
                                                          u2285 20BC  
                                                          u2541 0A1E  
                                                          u2461 08C8  
                                                          u2381 0718  
                                                          u2701 0E8E  
                                                          u2621 0CDA  
                                                          u3181 226E  
                                                          u3261 13D4  
                                                          u2286 20BE  
                                                          u2470 08E4  
                                                          u2390 0766  
                                                          u2550 16E2  
                                                          u2710 0EA6  
                                                          u2630 0CF2  
                                                          u3190 228A  
                                                          u2295 20CC  
                                                          u2471 08DE  
                                                          u2391 0760  
                                                          u2551 16DC  
                                                          u2711 0EA0  
                                                          u2631 0CEC  
                                                          u3191 2284  
                                                          u2296 20CE  
                                                          u2800 1112  
                                                          u2480 0916  
                                                          u2560 171E  
                                                          u2640 0D56  
                                                          u2801 110C  
                                                          u2481 0910  
                                                          u2641 0D50  
                                                          u2810 1150  
                                                          u2490 0934  
                                                          u2570 1750  
                                                          u2650 0DB6  
                                                          u2811 114A  
                                                          u2491 092E  
                                                          u2571 174A  
                                                          u2651 0DB0  
                                                          u2820 11A0  
                                                          u2580 1768  
                                                          u2660 0E08  
                                                          u2900 1B90  
                                                          u2821 119A  
                                                          u2581 1762  
                                                          u2565 1712  
                                                          u2661 0E02  
                                                          u2901 1B8A  
                                                          u2725 2038  
                                                          u2830 11DA  
                                                          u2590 1798  
                                                          u2670 0E2E  
                                                          u2910 1BAE  
                                                          u2726 203A  
                                                          u2831 11D4  
                                                          u2591 1792  
                                                          u2671 0E28  
                                                          u2911 1BA8  
                                                          u2735 2048  
                                                          u2840 1210  
                                                          u2680 0E42  
                                                          u2920 1BC8  
                                                          u2736 204A  
                                                          u2841 120A  
                                                          u2681 0E3C  
                                                          u2921 1BC2  
                                                          u2745 2058  
                                                          u2850 1238  
                                                          u2690 0E54  
                                                          u2930 1BDA  
                                                          u2746 205A  
                                                          u2851 1232  
                                                          u2691 0E4E  
                                                          u2931 1BD4  
                                                          u2755 1FC4  
                                                          u2860 1258  
                                                          u2780 10CE  
                                                          u2940 1C08  
                                                          u2756 1FC6  
                                                          u2861 1252  
                                                          u2781 10C8  
                                                          u2941 1C02  
                                                          u2765 1FD4  
                                                          u2870 126C  
                                                          u2790 10E8  
                                                          u2950 1A70  
                                                          u2766 1FD6  
                                                          u2871 1266  
                                                          u2791 10E2  
                                                          u2951 1A6A  
                                                          u2775 1FE4  
                                                          u2880 1280  
                                                          u2960 1A9E  
                                                          u2776 1FE6  
                                                          u2881 127A  
                                                          u2961 1A98  
                                                          u2890 1B62  
                                                          u2970 1ABC  
                                                   main@newData 01D2  
                                                          u2891 1B5C  
                                                          u2971 1AB6  
                                                          u2980 1AD6  
                                                          u2981 1AD0  
                                                          u2990 1AE8  
                                                          u2991 1AE2  
                                                          i2l71 2434  
                                                          i2l65 2374  
                                                          _TMR0 000FD6  
                                                          _TMR2 000FCC  
                                           __end_ofi2_storeData 16C8  
                                                          _main 129E  
                                                          _maxX 006B  
                                                          _maxY 0069  
                                          __end_ofi2_printError 1A36  
                                                          fsr2h 000FDA  
                                                          indf2 000FDF  
                                                          fsr1l 000FE1  
                                                          fsr2l 000FD9  
                                                          btemp 006E  
                                                          prodh 000FF4  
                                                          prodl 000FF3  
                                                          start 016A  
                                               ___fldiv@new_exp 0031  
                                                  ___param_bank 000000  
                                               ??_whatsTM0Limit 0001  
                                                         ??_isr 000B  
                                                  ?_executeData 0001  
                                               executeData@data 00FC  
                                                 ___fltol@sign1 0041  
                                                         ?_main 0001  
                                               __end_of___fldiv 0A42  
                                               __end_of___fltol 17FE  
                                                         i2l353 243C  
                                                         i2l356 23D8  
                                                         i2l508 1A30  
                                                         i2l453 0152  
                                                         i2l359 2382  
                                                         i2l552 16C2  
                                                         i2l395 23EC  
                                                         i2l563 222C  
                                                         i2l549 164C  
                                                         i2l398 23E2  
                                                         i2l567 225E  
                                          rotateObj@rotSequence 0080  
                                                         _SPBRG 000FAF  
                                                         _TRISA 000F92  
                                                         _TRISB 000F93  
                                                         _TRISC 000F94  
                                                         _TRISD 000F95  
                                                         _TXREG 000FAD  
                                               __end_of_getData 235C  
                                               i2storeData@data 000A  
                                               __end_of_initADC 22E8  
                                                  ?_newSequence 0001  
                                               __end_of_liftArm 1F2C  
                                               __end_of_readSeq 2400  
                                                  stepMade@temp 0014  
                                               __end_of_setStep 1CF0  
                                                         tablat 000FF5  
                                                i2uartTx@length 0003  
                                               __end_of_stopADC 2418  
                                                         ttemp5 006F  
                                                         ttemp6 0072  
                                                         ttemp7 0076  
                                                         status 000FD8  
                                                         wtemp8 006F  
                                              __end_ofi2_uartTx 2262  
                                                 ?_increaseStep 0001  
                                               __initialization 1F2C  
                                        __size_of_initPinMotors 0026  
                                                  __end_of_main 1404  
                                      resetPosition@keepMovingX 0016  
                                      resetPosition@keepMovingY 0017  
                                      resetPosition@keepMovingZ 0018  
                                                        ??_main 00FE  
                                                 __activetblptr 000002  
                                                   i2_storeData 1566  
                                          __size_of_enableMotor 0074  
                                                   isr@tm0Count 0063  
                                                  ?_setThermRel 0001  
                                                        _ADRESH 000FC4  
                                                        _ADRESL 000FC3  
                                                  ?_moveToPoint 0016  
                                                        i2l3111 1646  
                                                        i2l3103 159E  
                                                        i2l2073 23E8  
                                                        i2l3113 166E  
                                                        i2l3121 168C  
                                                        i2l3105 15D4  
                                                        i2l3201 0054  
                                                        i2l2067 243A  
                                                        i2l2075 23DE  
                                                        i2l3115 1676  
                                                        i2l3107 15EC  
                                                        i2l3211 0090  
                                                        i2l3203 0058  
                                                        i2l2069 23D4  
                                                        i2l3117 1680  
                                                        i2l3109 15F4  
                                                        i2l3221 00C0  
                                                        i2l3213 0092  
                                                        i2l3205 006C  
                                                        i2l3231 0114  
                                                        i2l3215 00A6  
                                                        i2l3207 006E  
                                                        i2l3223 00C6  
                                                        i2l3233 012E  
                                                        i2l3225 00DA  
                                                        i2l3217 00B8  
                                                        i2l3209 0072  
                                                        i2l3091 156A  
                                                        i2l3227 00E2  
                                                        i2l3235 0132  
                                                        i2l3219 00BC  
                                                        i2l1821 236C  
                                                        i2l3093 157A  
                                                        i2l3237 0146  
                                                        i2l3229 0108  
                                                        i2l2551 2240  
                                                        i2l3095 1580  
                                                        i2l3239 014C  
                                                        i2l3191 002E  
                                                        i2l3089 237A  
                                                        i2l1825 2432  
                                                        i2l2553 2246  
                                                        i2l3097 158A  
                                                        i2l3193 0030  
                                                        i2l2547 2216  
                                                        i2l3099 1594  
                                                        i2l3195 0032  
                                                        i2l2549 221E  
                                                        i2l3197 004E  
                                                        i2l3189 001C  
                                                        i2l2831 1964  
                                                        i2l2823 191E  
                                                        i2l3199 0050  
                                                        i2l2833 197A  
                                                        i2l2825 1922  
                                                        i2l2835 1990  
                                                        i2l2827 1938  
                                                        i2l2843 19D2  
                                                        i2l4363 15B4  
                                                        i2l2837 19A6  
                                                        i2l2829 194E  
                                                        i2l4365 16A2  
                                                        i2l4367 19E8  
                                                        i2l2839 19BC  
                                                        _RCREG1 000FAE  
                                                  ?_setTouchRel 0001  
                                                 setDecay@decay 0015  
                                              __end_of___xxtofl 0EC2  
                                                 setDecay@motor 0012  
                                              __end_of_clearTM0 236A  
                                              _errString_PointZ 0100  
                                                ??_increaseStep 0001  
                                                     ??___fldiv 0028  
                                                     ??___fltol 003D  
                                              __end_of_tim0Init 2340  
                                              __end_of_tim2Init 231A  
                                                        clear_0 1F92  
                                                        clear_1 1F9E  
                                                     ??_getData 0014  
                                                        _uartTx 21C6  
                                              __end_of_setDecay 2026  
                                                     ??_initADC 0012  
                                                     ??_liftArm 0016  
                                                     ??_readSeq 0012  
                                                  __pdataCOMRAM 0069  
                                         __end_of_resetPosition 10B4  
                                                  __mediumconst 0000  
                                                     ??_setStep 0013  
                                                        tblptrh 000FF7  
                                                        tblptrl 000FF6  
                                                        tblptru 000FF8  
                                                  ?_returnTherm 0012  
                                              __end_of_startADC 2420  
                                              __end_of_stepMade 232E  
                                                 _initPinMotors 229C  
                                                  ?_returnTouch 0012  
                                                     ??_stopADC 0012  
                                         __size_ofi2_printError 011C  
                                              __end_of_writeTM0 2378  
                                     __size_of_resetNewSequence 000A  
                                                  ___xxtofl@arg 001C  
                                                  ___xxtofl@exp 001B  
                                                  ___xxtofl@val 0012  
                                                    __accesstop 0080  
                                       __end_of__initialization 1FA4  
                                                  _dataSequence 00D8  
                                                 ___rparam_used 000001  
                                                    ___fltol@f1 0039  
                                                  ?_stepCounter 0012  
                                                   i2uartTx@ptr 0001  
                                                __pcstackCOMRAM 0001  
                                                  __newSequence 005F  
                                                  __pidataBANK0 216E  
                                                  __pidataBANK1 1CF0  
                                               isr@single_cycle 0051  
                                          __size_of_executeData 0288  
                                                 ?_setDirection 0012  
                                                  i2_printError 191A  
                                                  ?_touchObject 0001  
                                                _errString_ZEND 015C  
                                                _errString_Feed 00A4  
                                                ?_initPinMotors 0001  
                                                     ?i2_uartTx 0001  
                                                    __pbssBANK0 00D8  
                                          __size_of_newSequence 0008  
                                                    _feeder1Pos 060D  
                                                    _feeder2Pos 060B  
                                                    _feeder3Pos 0609  
                                       __size_of_getNewSequence 000E  
                                                    _fatalError 2408  
                                            __size_of_reduceSeq 0008  
                                            __size_of_retPeriod 000E  
                                                _touch_pressure 0607  
                                            __size_of_shiftData 0060  
                                            __size_of_resetStep 000A  
                                                       _ADC_res 0053  
                                                       ?_uartTx 0012  
                                                ??_setDirection 0013  
                                                     ?___xxtofl 0012  
                                          __end_of_increaseStep 2440  
                                                     ?_clearTM0 0001  
                                                    ??i2_uartTx 0004  
                                            __size_of_rotateObj 00BA  
                                             _errString_Command 00C1  
                                            __size_of_usartInit 001E  
                                        __size_of_interruptInit 003A  
                                          __size_of_setThermRel 000A  
                                            __size_of_storeData 0162  
                                                     ?_tim0Init 0001  
                                                     ?_tim2Init 0012  
                                          __size_of_moveToPoint 01EA  
                                          storeData@receivedMex 0045  
                                               _newSequenceData 00EC  
                                                     ?_setDecay 0012  
                                          __size_of_setTouchRel 000A  
                                                   setStep@step 0015  
                                                       __Hparam 0000  
                                                       __Lparam 0000  
                                        __end_of_touch_pressure 0609  
                                                       ___fldiv 0610  
                                                     ?_startADC 0001  
                                                     ?_stepMade 0012  
                                                       ___fltol 16C8  
                                                  __psmallconst 0600  
                                                       __pcinit 1F2C  
                                         __end_of_whatsTM0Limit 2438  
                                                       _getData 234E  
                                                       __ramtop 0600  
                                                     ?_writeTM0 0001  
                                                    _pickObject 2428  
                                                       __ptext0 129E  
                                                       __ptext1 22E8  
                                                       __ptext2 2306  
                                                       __ptext3 232E  
                                                       __ptext4 1404  
                                                       __ptext5 17FE  
                                                       __ptext6 21C6  
                                                       __ptext7 210E  
                                                       __ptext8 0EC2  
                                                       __ptext9 1C1A  
                                               __size_of_uartTx 004E  
                                                     _T0CONbits 000FD5  
                                                       _initADC 22C2  
                                               ??_initPinMotors 0012  
                                                       _liftArm 1E7C  
                                                     _T2CONbits 000FCA  
                                                       _readSeq 23F8  
                                                  __size_of_isr 0162  
                                                    ??___xxtofl 0016  
                                                  ?i2_storeData 0001  
                                                    ??_clearTM0 0012  
                                                       _setStep 1C1A  
                                                       _pwmStep 0067  
                                                       _stopADC 2410  
                                             __end_of_reduceSeq 23F8  
                                             __end_of_retPeriod 2386  
                                                    _releaseObj 2420  
                                          __size_of_returnTherm 000C  
                                          end_of_initialization 1FA4  
                                          __size_of_returnTouch 000C  
                                              _resetNewSequence 23AA  
                                              rotateObj@totStep 00F8  
                                             __end_of_shiftData 216E  
                                                       isr@temp 0011  
                                             __end_of_resetStep 23D2  
                                                    ??_tim0Init 0012  
                                                 __Lmediumconst 0000  
                                                    ??_tim2Init 0014  
                                              storeData@command 005D  
                                              storeData@counter 005E  
                                                    ??_setDecay 0013  
                                              enableMotor@motor 0012  
                                                    _resetTherm 23B4  
                                                    _resetTouch 23BE  
                                                       uartTx@i 0015  
                                                   ?_fatalError 0001  
                                                     _RCSTAbits 000FAB  
                                                       postdec1 000FE5  
                                             __end_of_rotateObj 1E7C  
                                                       postinc0 000FEE  
                                                       postinc1 000FE6  
                                                       postinc2 000FDE  
                                                    ??_startADC 0012  
                                                    ??_stepMade 0014  
                                          __size_of_stepCounter 000C  
                                                 _interruptInit 2262  
                                             __end_of_usartInit 2306  
                                             __end_of_storeData 1566  
                                    __end_ofrotateObj@stepAngle 0605  
                                                    ??_writeTM0 0001  
                                                     _PORTDbits 000F83  
                                                    _printError 17FE  
                                                     _PORTEbits 000F84  
                                                 ??_enableMotor 0013  
                                           i2printError@errCode 0007  
                                                    _toggleStep 23D2  
                                                 ___xxtofl@sign 001A  
                                                     _TRISCbits 000F94  
                                                     _TRISDbits 000F95  
                                                     _TRISEbits 000F96  
                                                   ___fldiv@grs 0033  
                                                   ___fldiv@rem 002C  
                                          __size_of_touchObject 00F2  
                                                    _stepToggle 0066  
                                                    _touchTherm 1A36  
                                          __end_of_setDirection 210E  
                                                     _TXSTAbits 000FAC  
                                                _getNewSequence 2340  
                                                ?_interruptInit 0001  
                                                 __pidataCOMRAM 2440  
                                         __size_of_increaseStep 0008  
                                                   ?_pickObject 0001  
                                                   __fatalError 0060  
                                                __end_of_uartTx 2214  
                                                 moveToPoint@x1 0016  
                                                 moveToPoint@x2 001A  
                                                 moveToPoint@y1 0018  
                                                 moveToPoint@y2 001C  
                                           start_initialization 1F2C  
                                                     i2uartTx@i 0004  
                                                   __end_of_isr 016A  
                                           __size_of_fatalError 0008  
                                           __end_of_enableMotor 209A  
                                                   ?_releaseObj 0001  
                                             __size_ofi2_uartTx 004E  
                                        __end_of_getNewSequence 234E  
                                               _errString_Fatal 01AB  
                                               _errString_Bound 0084  
                                                   ?_resetTherm 0001  
                                               _errString_Reset 0184  
                                                   ?_resetTouch 0001  
                                               _errString_Point 0134  
                                                  _increaseStep 2438  
                                        __size_of_resetPosition 01F2  
                                                 ??_executeData 0043  
                                                   __pdataBANK0 0080  
                                                   __pdataBANK1 0100  
                                                   _dataCounter 0061  
                                                      ??_uartTx 0015  
                                        moveToPoint@keepMovingX 0020  
                                        moveToPoint@keepMovingY 0021  
                                                   ?_printError 0001  
                                                     ___fldiv@a 0024  
                                                     ___fldiv@b 0020  
                                                _therm_pressure 0605  
                                                   ?_toggleStep 0001  
                                                   __pbssCOMRAM 0045  
                                                 __pcstackBANK0 00F4  
                                                 __pcstackBANK1 01D1  
                                                 ??_newSequence 0012  
                                             __size_of___xxtofl 01F8  
                                          __size_ofi2_storeData 0162  
                                             __size_of_clearTM0 000E  
                                               ?_getNewSequence 0012  
                                                   ?_touchTherm 0001  
                                           __size_of_pickObject 0008  
                                            executeData@errCode 00FB  
                                             __size_of_tim0Init 0012  
                                             __size_of_tim2Init 0014  
                                               ??_interruptInit 0012  
                                             __size_of_setDecay 0074  
                                                     __pintcode 0008  
                                                      ?___fldiv 0020  
                                                      ?___fltol 0039  
                                      __end_of_resetNewSequence 23B4  
                                           __size_of_releaseObj 0008  
                                                 storeData@data 001B  
                                                      ?_getData 0012  
                                             __size_of_startADC 0008  
                                             __size_of_stepMade 0014  
                                        __end_of_therm_pressure 0607  
                                                      ?_initADC 0001  
                                                   __smallconst 0600  
                                                      ?_liftArm 0001  
                                                   _enableMotor 2026  
                                                      ?_readSeq 0001  
                                             __size_of_writeTM0 000E  
                                           __end_of_executeData 0CCA  
                                                    shiftData@i 0014  
                                                      ?_setStep 0012  
                                           __size_of_resetTherm 000A  
                                                     _newFeeder 0057  
                                                 _resetPosition 0EC2  
                                           __size_of_resetTouch 000A  
                                                 ??_setThermRel 0001  
                                                      ?_stopADC 0001  
                                         __size_of_setDirection 0074  
                                                 ??_moveToPoint 001E  
                                                 ??_setTouchRel 0001  
                                           __end_of_newSequence 2408  
                                                     _reduceSeq 23F0  
                                                      _LATAbits 000F89  
                                                      _LATBbits 000F8A  
                                                     _retPeriod 2378  
                                                      _LATCbits 000F8B  
                                                      _LATDbits 000F8C  
                                           __size_of_printError 011C  
                                                      _IPR1bits 000F9F  
                                                      _PIE1bits 000F9D  
                                                     _shiftData 210E  
                                                      i2u220_40 008E  
                                                      i2u220_41 0088  
                                                      i2u213_40 15EA  
                                                      i2u221_40 00A4  
                                                      i2u213_41 15E4  
                                                      i2u221_41 009E  
                                                      i2u222_40 00B6  
                                                      i2u222_41 00B0  
                                                      i2u223_40 00D8  
                                                      i2u223_41 00D2  
                                                      i2u160_40 225C  
                                                      i2u224_40 0106  
                                                      i2u160_41 2256  
                                                      i2u224_41 0100  
                                                      i2u225_40 012C  
                                                      i2u217_40 002C  
                                                      i2u225_41 0126  
                                                      i2u217_41 0026  
                                                      i2u226_40 0144  
                                                      i2u218_40 004C  
                                                      i2u226_41 013E  
                                                      i2u218_41 0046  
                                                      i2u219_40 006A  
                                                      i2u219_41 0064  
                                                     _resetStep 23C8  
                                                      i2u159_40 223E  
                                                      i2u159_41 2238  
                                                      _PIR1bits 000F9E  
                                           __size_of_toggleStep 000A  
                                                  ??_fatalError 0012  
                                                     _posVector 004E  
                                                      _RCONbits 000FD0  
                                                     _therm_rel 0064  
                                                     _pwmPeriod 0055  
                                             setDirection@motor 0012  
                                                     _rotateObj 1DC2  
                                                    _ADCON0bits 000FC2  
                                                    _ADCON1bits 000FC1  
                                           __size_of_touchTherm 00F2  
                                                  _setDirection 209A  
                                                     _usartInit 22E8  
                                                     _touch_rel 0065  
                                            __end_of_feeder1Pos 060F  
                                            __end_of_feeder2Pos 060D  
                                            __end_of_feeder3Pos 060B  
                                                     _storeData 1404  
                                                ?_resetPosition 0001  
                                         __end_of_initPinMotors 22C2  
                                                 ??_returnTherm 0014  
                                                 ??_returnTouch 0014  
                                                      i2_uartTx 2214  
                                                     copy_data0 1F40  
                                                     copy_data1 1F60  
                                                     copy_data2 1F80  
                                            __end_of_fatalError 2410  
                                            rotateObj@stepAngle 0601  
                                                    ?_reduceSeq 0001  
                                                    ?_retPeriod 0001  
                                                  setStep@motor 0012  
                                                    rotateObj@i 00FA  
                                        __size_of_whatsTM0Limit 0008  
                                           __end_of_setThermRel 23F0  
                                           __end_of_moveToPoint 129E  
                                             printError@errCode 0018  
                                                    ?_shiftData 0001  
                                                 ??_stepCounter 0014  
                                                      __Hrparam 0000  
                                                    ?_resetStep 0001  
                                           __end_of_setTouchRel 23E6  
                                                      __Lrparam 0000  
                                              __size_of___fldiv 0432  
                                              __size_of___fltol 0136  
                                                   _executeData 0A42  
                                                  ??_pickObject 0012  
                                                    ?_rotateObj 0001  
                                                 ?i2_printError 0001  
                                              __size_of_getData 000E  
                                                 ??_touchObject 0016  
                                                    ?_usartInit 0001  
                                              __size_of_initADC 0026  
                                                      ___xxtofl 0CCA  
                                              __size_of_liftArm 00B0  
                                                    ?_storeData 0001  
                                                      _clearTM0 235C  
                                              __size_of_readSeq 0008  
                                            storeData@mexLength 006D  
                                                      _tm0Error 005B  
                                                      _tm0Limit 0068  
                                              __size_of_setStep 00D6  
                                                   _newSequence 2400  
                                                      __ptext10 1FB2  
                                                      __ptext11 2026  
                                                      __ptext20 2408  
                                                      __ptext12 23AA  
                                                      __ptext21 0A42  
                                                      __ptext13 23F0  
                                                      __ptext30 1DC2  
                                                      __ptext22 1A36  
                                                      __ptext14 23F8  
                                                      __ptext31 0CCA  
                                                      __ptext23 2386  
                                                      __ptext15 2400  
                                                      __ptext40 209A  
                                                      __ptext32 16C8  
                                                      __ptext24 23B4  
                                                      __ptext16 2262  
                                                      __ptext41 23C8  
                                                      __ptext33 0610  
                                                      __ptext25 1B28  
                                                      __ptext17 229C  
                                                      __ptext50 23D2  
                                                      __ptext42 234E  
                                                      __ptext34 2420  
                                                      __ptext26 2410  
                                                      __ptext18 22C2  
                                                      __ptext51 23DC  
                                                      __ptext43 235C  
                                                      __ptext35 2428  
                                                      __ptext27 2418  
                                                      __ptext19 2340  
                                                      __ptext52 23E6  
                                                      __ptext36 10B4  
                                                      __ptext28 2392  
                                                      __ptext53 2378  
                                                      __ptext45 1566  
                                                      __ptext37 239E  
                                                      __ptext29 23BE  
                                                      __ptext54 2438  
                                                      __ptext46 191A  
                                                      __ptext38 1E7C  
                                                      __ptext47 2214  
                                                      __ptext39 231A  
                                                      __ptext48 236A  
                                                      __ptext49 2430  
                                                  ??_releaseObj 0012  
                                              __size_of_stopADC 0008  
                                           __end_of_returnTherm 2392  
                                           __end_of_returnTouch 239E  
                                                      _tim0Init 232E  
                                                      _tim2Init 2306  
                                                 __size_of_main 0166  
                                                      _setDecay 1FB2  
                                            __end_of_pickObject 2430  
                                                  ??_resetTherm 0012  
                                                  ??_resetTouch 0012  
                                                     uartTx@ptr 0012  
                                                      _rotAngle 0059  
                                               isr@completeStep 0062  
                                                      int$flags 006E  
                                                      _startADC 2418  
                                                      _stepMade 231A  
                                           __end_of_stepCounter 23AA  
                                             rotateObj@rotAngle 00F7  
                                                ??i2_printError 0005  
                                            __end_of_releaseObj 2428  
                                                      _writeTM0 236A  
                                                  ??_printError 0016  
                                                 _whatsTM0Limit 2430  
                                               ??_resetPosition 0016  
                                            tim2Init@_pwmPeriod 0012  
                                                    _INTCONbits 000FF2  
                                                  ??_toggleStep 0001  
                                              ??_getNewSequence 0014  
                                            __end_of_resetTherm 23BE  
                                            __end_of_resetTouch 23C8  
                                                   _setThermRel 23E6  
                                                  uartTx@length 0014  
                                                   _moveToPoint 10B4  
                                           __end_of_touchObject 1C1A  
                                                      intlevel2 2446  
                                             enableMotor@enable 0015  
                                                  ??_touchTherm 0016  
                                                   _setTouchRel 23DC  
                                                   ??_reduceSeq 0012  
                                                   ??_retPeriod 0003  
                                                    _RCSTA1bits 000FAB  
                                            __end_of_printError 191A  
                                         setDirection@direction 0015  
                                                   ??_shiftData 0012  
                                                   ??_resetStep 0012  
                                            __end_of_toggleStep 23DC  
                                             ?_resetNewSequence 0001  
                                                ?_whatsTM0Limit 0001  
                                                   ??_rotateObj 00F4  
                                            ??_resetNewSequence 0012  
                                            __end_of_touchTherm 1B28  
                                                  ?_enableMotor 0012  
                                                   ??_usartInit 0012  
                                                 ??i2_storeData 0008  
                                                   ??_storeData 0019  
                                                   _returnTherm 2386  
                                                   _returnTouch 2392  
                                                   _stepCounter 239E  
