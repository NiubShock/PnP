

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sun Mar 28 10:24:32 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    76                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    77  0000                     
    78                           ; Version 2.20
    79                           ; Generated 12/02/2020 GMT
    80                           ; 
    81                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F452 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataCOMRAM
   114  00259C                     __pidataCOMRAM:
   115                           	callstack 0
   116                           
   117                           ;initializer for _maxY
   118  00259C  03E8               	dw	1000
   119                           
   120                           ;initializer for _maxX
   121  00259E  03E8               	dw	1000
   122                           
   123                           ;initializer for storeData@mexLength
   124  0025A0  05                 	db	5
   125                           
   126                           	psect	idataBANK0
   127  002286                     __pidataBANK0:
   128                           	callstack 0
   129                           
   130                           ;initializer for rotateObj@rotSequence
   131  002286  09                 	db	9
   132  002287  03                 	db	3
   133  002288  06                 	db	6
   134  002289  0C                 	db	12
   135                           
   136                           ;initializer for _errString_Bound
   137  00228A  45                 	db	69
   138  00228B  72                 	db	114
   139  00228C  72                 	db	114
   140  00228D  6F                 	db	111
   141  00228E  72                 	db	114
   142  00228F  2C                 	db	44
   143  002290  20                 	db	32
   144  002291  70                 	db	112
   145  002292  6F                 	db	111
   146  002293  69                 	db	105
   147  002294  6E                 	db	110
   148  002295  74                 	db	116
   149  002296  20                 	db	32
   150  002297  6F                 	db	111
   151  002298  75                 	db	117
   152  002299  74                 	db	116
   153  00229A  73                 	db	115
   154  00229B  69                 	db	105
   155  00229C  64                 	db	100
   156  00229D  65                 	db	101
   157  00229E  20                 	db	32
   158  00229F  62                 	db	98
   159  0022A0  6F                 	db	111
   160  0022A1  75                 	db	117
   161  0022A2  6E                 	db	110
   162  0022A3  64                 	db	100
   163  0022A4  61                 	db	97
   164  0022A5  72                 	db	114
   165  0022A6  69                 	db	105
   166  0022A7  65                 	db	101
   167  0022A8  73                 	db	115
   168  0022A9  0A                 	db	10
   169  0022AA  00                 	db	0
   170                           
   171                           ;initializer for _errString_Feed
   172  0022AB  45                 	db	69
   173  0022AC  72                 	db	114
   174  0022AD  72                 	db	114
   175  0022AE  6F                 	db	111
   176  0022AF  72                 	db	114
   177  0022B0  2C                 	db	44
   178  0022B1  20                 	db	32
   179  0022B2  66                 	db	102
   180  0022B3  65                 	db	101
   181  0022B4  65                 	db	101
   182  0022B5  64                 	db	100
   183  0022B6  20                 	db	32
   184  0022B7  6C                 	db	108
   185  0022B8  69                 	db	105
   186  0022B9  6E                 	db	110
   187  0022BA  65                 	db	101
   188  0022BB  20                 	db	32
   189  0022BC  6E                 	db	110
   190  0022BD  6F                 	db	111
   191  0022BE  74                 	db	116
   192  0022BF  20                 	db	32
   193  0022C0  64                 	db	100
   194  0022C1  65                 	db	101
   195  0022C2  66                 	db	102
   196  0022C3  69                 	db	105
   197  0022C4  6E                 	db	110
   198  0022C5  65                 	db	101
   199  0022C6  64                 	db	100
   200  0022C7  0A                 	db	10
   201  0022C8  00                 	db	0
   202                           
   203                           ;initializer for _errString_Command
   204  0022C9  43                 	db	67
   205  0022CA  6F                 	db	111
   206  0022CB  6D                 	db	109
   207  0022CC  6D                 	db	109
   208  0022CD  61                 	db	97
   209  0022CE  6E                 	db	110
   210  0022CF  64                 	db	100
   211  0022D0  20                 	db	32
   212  0022D1  6E                 	db	110
   213  0022D2  6F                 	db	111
   214  0022D3  74                 	db	116
   215  0022D4  20                 	db	32
   216  0022D5  72                 	db	114
   217  0022D6  65                 	db	101
   218  0022D7  63                 	db	99
   219  0022D8  6F                 	db	111
   220  0022D9  67                 	db	103
   221  0022DA  6E                 	db	110
   222  0022DB  69                 	db	105
   223  0022DC  7A                 	db	122
   224  0022DD  65                 	db	101
   225  0022DE  64                 	db	100
   226  0022DF  0A                 	db	10
   227  0022E0  00                 	db	0
   228                           
   229                           	psect	idataBANK1
   230  001DE8                     __pidataBANK1:
   231                           	callstack 0
   232                           
   233                           ;initializer for _errString_PointZ
   234  001DE8  45                 	db	69
   235  001DE9  72                 	db	114
   236  001DEA  72                 	db	114
   237  001DEB  6F                 	db	111
   238  001DEC  72                 	db	114
   239  001DED  2C                 	db	44
   240  001DEE  20                 	db	32
   241  001DEF  74                 	db	116
   242  001DF0  69                 	db	105
   243  001DF1  6D                 	db	109
   244  001DF2  65                 	db	101
   245  001DF3  20                 	db	32
   246  001DF4  65                 	db	101
   247  001DF5  78                 	db	120
   248  001DF6  63                 	db	99
   249  001DF7  65                 	db	101
   250  001DF8  65                 	db	101
   251  001DF9  64                 	db	100
   252  001DFA  65                 	db	101
   253  001DFB  64                 	db	100
   254  001DFC  20                 	db	32
   255  001DFD  74                 	db	116
   256  001DFE  6F                 	db	111
   257  001DFF  20                 	db	32
   258  001E00  72                 	db	114
   259  001E01  65                 	db	101
   260  001E02  61                 	db	97
   261  001E03  63                 	db	99
   262  001E04  68                 	db	104
   263  001E05  20                 	db	32
   264  001E06  74                 	db	116
   265  001E07  68                 	db	104
   266  001E08  65                 	db	101
   267  001E09  20                 	db	32
   268  001E0A  65                 	db	101
   269  001E0B  6E                 	db	110
   270  001E0C  64                 	db	100
   271  001E0D  20                 	db	32
   272  001E0E  6F                 	db	111
   273  001E0F  66                 	db	102
   274  001E10  20                 	db	32
   275  001E11  74                 	db	116
   276  001E12  68                 	db	104
   277  001E13  65                 	db	101
   278  001E14  20                 	db	32
   279  001E15  5A                 	db	90
   280  001E16  20                 	db	32
   281  001E17  41                 	db	65
   282  001E18  78                 	db	120
   283  001E19  69                 	db	105
   284  001E1A  73                 	db	115
   285  001E1B  0A                 	db	10
   286  001E1C  00                 	db	0
   287                           
   288                           ;initializer for _errString_Point
   289  001E1D  45                 	db	69
   290  001E1E  72                 	db	114
   291  001E1F  72                 	db	114
   292  001E20  6F                 	db	111
   293  001E21  72                 	db	114
   294  001E22  2C                 	db	44
   295  001E23  20                 	db	32
   296  001E24  74                 	db	116
   297  001E25  69                 	db	105
   298  001E26  6D                 	db	109
   299  001E27  65                 	db	101
   300  001E28  20                 	db	32
   301  001E29  65                 	db	101
   302  001E2A  78                 	db	120
   303  001E2B  63                 	db	99
   304  001E2C  65                 	db	101
   305  001E2D  65                 	db	101
   306  001E2E  64                 	db	100
   307  001E2F  65                 	db	101
   308  001E30  64                 	db	100
   309  001E31  20                 	db	32
   310  001E32  74                 	db	116
   311  001E33  6F                 	db	111
   312  001E34  20                 	db	32
   313  001E35  72                 	db	114
   314  001E36  65                 	db	101
   315  001E37  61                 	db	97
   316  001E38  63                 	db	99
   317  001E39  68                 	db	104
   318  001E3A  20                 	db	32
   319  001E3B  74                 	db	116
   320  001E3C  68                 	db	104
   321  001E3D  65                 	db	101
   322  001E3E  20                 	db	32
   323  001E3F  70                 	db	112
   324  001E40  6F                 	db	111
   325  001E41  69                 	db	105
   326  001E42  6E                 	db	110
   327  001E43  74                 	db	116
   328  001E44  0A                 	db	10
   329  001E45  00                 	db	0
   330                           
   331                           ;initializer for _errString_ZEND
   332  001E46  45                 	db	69
   333  001E47  72                 	db	114
   334  001E48  72                 	db	114
   335  001E49  6F                 	db	111
   336  001E4A  72                 	db	114
   337  001E4B  2C                 	db	44
   338  001E4C  20                 	db	32
   339  001E4D  6E                 	db	110
   340  001E4E  6F                 	db	111
   341  001E4F  20                 	db	32
   342  001E50  6F                 	db	111
   343  001E51  62                 	db	98
   344  001E52  6A                 	db	106
   345  001E53  65                 	db	101
   346  001E54  63                 	db	99
   347  001E55  74                 	db	116
   348  001E56  20                 	db	32
   349  001E57  72                 	db	114
   350  001E58  65                 	db	101
   351  001E59  6C                 	db	108
   352  001E5A  65                 	db	101
   353  001E5B  76                 	db	118
   354  001E5C  61                 	db	97
   355  001E5D  74                 	db	116
   356  001E5E  65                 	db	101
   357  001E5F  64                 	db	100
   358  001E60  20                 	db	32
   359  001E61  61                 	db	97
   360  001E62  6C                 	db	108
   361  001E63  6F                 	db	111
   362  001E64  6E                 	db	110
   363  001E65  67                 	db	103
   364  001E66  20                 	db	32
   365  001E67  5A                 	db	90
   366  001E68  20                 	db	32
   367  001E69  41                 	db	65
   368  001E6A  78                 	db	120
   369  001E6B  69                 	db	105
   370  001E6C  73                 	db	115
   371  001E6D  0A                 	db	10
   372  001E6E  00                 	db	0
   373                           
   374                           ;initializer for _errString_Reset
   375  001E6F  45                 	db	69
   376  001E70  72                 	db	114
   377  001E71  72                 	db	114
   378  001E72  6F                 	db	111
   379  001E73  72                 	db	114
   380  001E74  2C                 	db	44
   381  001E75  20                 	db	32
   382  001E76  74                 	db	116
   383  001E77  69                 	db	105
   384  001E78  6D                 	db	109
   385  001E79  65                 	db	101
   386  001E7A  20                 	db	32
   387  001E7B  65                 	db	101
   388  001E7C  78                 	db	120
   389  001E7D  63                 	db	99
   390  001E7E  65                 	db	101
   391  001E7F  65                 	db	101
   392  001E80  64                 	db	100
   393  001E81  65                 	db	101
   394  001E82  64                 	db	100
   395  001E83  20                 	db	32
   396  001E84  74                 	db	116
   397  001E85  6F                 	db	111
   398  001E86  20                 	db	32
   399  001E87  72                 	db	114
   400  001E88  65                 	db	101
   401  001E89  73                 	db	115
   402  001E8A  65                 	db	101
   403  001E8B  74                 	db	116
   404  001E8C  20                 	db	32
   405  001E8D  70                 	db	112
   406  001E8E  6F                 	db	111
   407  001E8F  73                 	db	115
   408  001E90  69                 	db	105
   409  001E91  74                 	db	116
   410  001E92  69                 	db	105
   411  001E93  6F                 	db	111
   412  001E94  6E                 	db	110
   413  001E95  0A                 	db	10
   414  001E96  00                 	db	0
   415                           
   416                           ;initializer for _errString_Fatal
   417  001E97  46                 	db	70
   418  001E98  61                 	db	97
   419  001E99  74                 	db	116
   420  001E9A  61                 	db	97
   421  001E9B  6C                 	db	108
   422  001E9C  20                 	db	32
   423  001E9D  45                 	db	69
   424  001E9E  72                 	db	114
   425  001E9F  72                 	db	114
   426  001EA0  6F                 	db	111
   427  001EA1  72                 	db	114
   428  001EA2  2C                 	db	44
   429  001EA3  20                 	db	32
   430  001EA4  70                 	db	112
   431  001EA5  6C                 	db	108
   432  001EA6  65                 	db	101
   433  001EA7  61                 	db	97
   434  001EA8  73                 	db	115
   435  001EA9  65                 	db	101
   436  001EAA  20                 	db	32
   437  001EAB  72                 	db	114
   438  001EAC  65                 	db	101
   439  001EAD  73                 	db	115
   440  001EAE  65                 	db	101
   441  001EAF  74                 	db	116
   442  001EB0  20                 	db	32
   443  001EB1  74                 	db	116
   444  001EB2  68                 	db	104
   445  001EB3  65                 	db	101
   446  001EB4  20                 	db	32
   447  001EB5  64                 	db	100
   448  001EB6  65                 	db	101
   449  001EB7  76                 	db	118
   450  001EB8  69                 	db	105
   451  001EB9  63                 	db	99
   452  001EBA  65                 	db	101
   453  001EBB  21                 	db	33
   454  001EBC  0A                 	db	10
   455  001EBD  00                 	db	0
   456                           
   457                           	psect	smallconst
   458  000600                     __psmallconst:
   459                           	callstack 0
   460  000600  00                 	db	0
   461  000601  FFAC               	dw	65452
   462  000603  3DB3               	dw	15795
   463  000605                     __end_ofrotateObj@stepAngle:
   464                           	callstack 0
   465  000605  0400               	dw	1024
   466  000607                     __end_of_therm_pressure:
   467                           	callstack 0
   468  000607  0200               	dw	512
   469  000609                     __end_of_touch_pressure:
   470                           	callstack 0
   471  000609                     _feeder3Pos:
   472                           	callstack 0
   473  000609  19                 	db	25
   474  00060A  19                 	db	25
   475  00060B                     __end_of_feeder3Pos:
   476                           	callstack 0
   477  00060B                     _feeder2Pos:
   478                           	callstack 0
   479  00060B  0F                 	db	15
   480  00060C  0F                 	db	15
   481  00060D                     __end_of_feeder2Pos:
   482                           	callstack 0
   483  00060D                     _feeder1Pos:
   484                           	callstack 0
   485  00060D  05                 	db	5
   486  00060E  05                 	db	5
   487  00060F                     __end_of_feeder1Pos:
   488                           	callstack 0
   489  0000                     _TMR0	set	4054
   490  0000                     _TXREG	set	4013
   491  0000                     _SPBRG	set	4015
   492  0000                     _TXSTAbits	set	4012
   493  0000                     _TRISCbits	set	3988
   494  0000                     _RCREG1	set	4014
   495  0000                     _ADRESH	set	4036
   496  0000                     _ADRESL	set	4035
   497  0000                     _PIR1bits	set	3998
   498  0000                     _IPR1bits	set	3999
   499  0000                     _ADCON0bits	set	4034
   500  0000                     _PIE1bits	set	3997
   501  0000                     _RCONbits	set	4048
   502  0000                     _INTCONbits	set	4082
   503  0000                     _RCSTAbits	set	4011
   504  0000                     _RCSTA1bits	set	4011
   505  0000                     _LATD	set	3980
   506  0000                     _PORTDbits	set	3971
   507  0000                     _TMR2	set	4044
   508  0000                     _PORTEbits	set	3972
   509  0000                     _T0CONbits	set	4053
   510  0000                     _T2CONbits	set	4042
   511  0000                     _LATDbits	set	3980
   512  0000                     _LATCbits	set	3979
   513  0000                     _LATBbits	set	3978
   514  0000                     _LATAbits	set	3977
   515  0000                     _TRISDbits	set	3989
   516  0000                     _TRISEbits	set	3990
   517  0000                     _TRISD	set	3989
   518  0000                     _TRISC	set	3988
   519  0000                     _TRISB	set	3987
   520  0000                     _TRISA	set	3986
   521  0000                     _ADCON1bits	set	4033
   522  00060F  00                 	db	0	; dummy byte at the end
   523  0000                     
   524                           ; #config settings
   525                           
   526                           	psect	cinit
   527  002044                     __pcinit:
   528                           	callstack 0
   529  002044                     start_initialization:
   530                           	callstack 0
   531  002044                     __initialization:
   532                           	callstack 0
   533                           
   534                           ; Initialize objects allocated to BANK1 (214 bytes)
   535                           ; load TBLPTR registers with __pidataBANK1
   536  002044  0EE8               	movlw	low __pidataBANK1
   537  002046  6EF6               	movwf	tblptrl,c
   538  002048  0E1D               	movlw	high __pidataBANK1
   539  00204A  6EF7               	movwf	tblptrh,c
   540  00204C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   541  00204E  6EF8               	movwf	tblptru,c
   542  002050  EE01  F000         	lfsr	0,__pdataBANK1
   543  002054  EE10 F0D6          	lfsr	1,214
   544  002058                     copy_data0:
   545  002058  0009               	tblrd		*+
   546  00205A  CFF5 FFEE          	movff	tablat,postinc0
   547  00205E  50E5               	movf	postdec1,w,c
   548  002060  50E1               	movf	fsr1l,w,c
   549  002062  E1FA               	bnz	copy_data0
   550                           
   551                           ; Initialize objects allocated to BANK0 (91 bytes)
   552                           ; load TBLPTR registers with __pidataBANK0
   553  002064  0E86               	movlw	low __pidataBANK0
   554  002066  6EF6               	movwf	tblptrl,c
   555  002068  0E22               	movlw	high __pidataBANK0
   556  00206A  6EF7               	movwf	tblptrh,c
   557  00206C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   558  00206E  6EF8               	movwf	tblptru,c
   559  002070  EE00  F080         	lfsr	0,__pdataBANK0
   560  002074  EE10 F05B          	lfsr	1,91
   561  002078                     copy_data1:
   562  002078  0009               	tblrd		*+
   563  00207A  CFF5 FFEE          	movff	tablat,postinc0
   564  00207E  50E5               	movf	postdec1,w,c
   565  002080  50E1               	movf	fsr1l,w,c
   566  002082  E1FA               	bnz	copy_data1
   567                           
   568                           ; Initialize objects allocated to COMRAM (5 bytes)
   569                           ; load TBLPTR registers with __pidataCOMRAM
   570  002084  0E9C               	movlw	low __pidataCOMRAM
   571  002086  6EF6               	movwf	tblptrl,c
   572  002088  0E25               	movlw	high __pidataCOMRAM
   573  00208A  6EF7               	movwf	tblptrh,c
   574  00208C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   575  00208E  6EF8               	movwf	tblptru,c
   576  002090  EE00  F069         	lfsr	0,__pdataCOMRAM
   577  002094  EE10 F005          	lfsr	1,5
   578  002098                     copy_data2:
   579  002098  0009               	tblrd		*+
   580  00209A  CFF5 FFEE          	movff	tablat,postinc0
   581  00209E  50E5               	movf	postdec1,w,c
   582  0020A0  50E1               	movf	fsr1l,w,c
   583  0020A2  E1FA               	bnz	copy_data2
   584                           
   585                           ; Clear objects allocated to BANK0 (28 bytes)
   586  0020A4  EE00  F0DB         	lfsr	0,__pbssBANK0
   587  0020A8  0E1C               	movlw	28
   588  0020AA                     clear_0:
   589  0020AA  6AEE               	clrf	postinc0,c
   590  0020AC  06E8               	decf	wreg,f,c
   591  0020AE  E1FD               	bnz	clear_0
   592                           
   593                           ; Clear objects allocated to COMRAM (36 bytes)
   594  0020B0  EE00  F045         	lfsr	0,__pbssCOMRAM
   595  0020B4  0E24               	movlw	36
   596  0020B6                     clear_1:
   597  0020B6  6AEE               	clrf	postinc0,c
   598  0020B8  06E8               	decf	wreg,f,c
   599  0020BA  E1FD               	bnz	clear_1
   600  0020BC                     end_of_initialization:
   601                           	callstack 0
   602  0020BC                     __end_of__initialization:
   603                           	callstack 0
   604  0020BC  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   605  0020BE  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   606  0020C0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   607  0020C2  6EF8               	movwf	tblptru,c
   608  0020C4  0100               	movlb	0
   609  0020C6  EFBF  F009         	goto	_main	;jump to C main() function
   610                           
   611                           	psect	bssCOMRAM
   612  000045                     __pbssCOMRAM:
   613                           	callstack 0
   614  000045                     storeData@receivedMex:
   615                           	callstack 0
   616  000045                     	ds	9
   617  00004E                     _posVector:
   618                           	callstack 0
   619  00004E                     	ds	3
   620  000051                     isr@single_cycle:
   621                           	callstack 0
   622  000051                     	ds	2
   623  000053                     _ADC_res:
   624                           	callstack 0
   625  000053                     	ds	2
   626  000055                     _pwmPeriod:
   627                           	callstack 0
   628  000055                     	ds	2
   629  000057                     _newFeeder:
   630                           	callstack 0
   631  000057                     	ds	2
   632  000059                     _rotAngle:
   633                           	callstack 0
   634  000059                     	ds	2
   635  00005B                     _tm0Error:
   636                           	callstack 0
   637  00005B                     	ds	2
   638  00005D                     	ds	1
   639  00005E                     storeData@counter:
   640                           	callstack 0
   641  00005E                     	ds	1
   642  00005F                     __newSequence:
   643                           	callstack 0
   644  00005F                     	ds	1
   645  000060                     __fatalError:
   646                           	callstack 0
   647  000060                     	ds	1
   648  000061                     _dataCounter:
   649                           	callstack 0
   650  000061                     	ds	1
   651  000062                     isr@completeStep:
   652                           	callstack 0
   653  000062                     	ds	1
   654  000063                     isr@tm0Count:
   655                           	callstack 0
   656  000063                     	ds	1
   657  000064                     _therm_rel:
   658                           	callstack 0
   659  000064                     	ds	1
   660  000065                     _touch_rel:
   661                           	callstack 0
   662  000065                     	ds	1
   663  000066                     _stepToggle:
   664                           	callstack 0
   665  000066                     	ds	1
   666  000067                     _pwmStep:
   667                           	callstack 0
   668  000067                     	ds	1
   669  000068                     _tm0Limit:
   670                           	callstack 0
   671  000068                     	ds	1
   672                           
   673                           	psect	dataCOMRAM
   674  000069                     __pdataCOMRAM:
   675                           	callstack 0
   676  000069                     	ds	2
   677  00006B                     	ds	2
   678  00006D                     storeData@mexLength:
   679                           	callstack 0
   680  00006D                     	ds	1
   681                           
   682                           	psect	bssBANK0
   683  0000DB                     __pbssBANK0:
   684                           	callstack 0
   685  0000DB                     _dataSequence:
   686                           	callstack 0
   687  0000DB                     	ds	20
   688  0000EF                     _newSequenceData:
   689                           	callstack 0
   690  0000EF                     	ds	8
   691                           
   692                           	psect	dataBANK0
   693  000080                     __pdataBANK0:
   694                           	callstack 0
   695  000080                     rotateObj@rotSequence:
   696                           	callstack 0
   697  000080                     	ds	4
   698  000084                     _errString_Bound:
   699                           	callstack 0
   700  000084                     	ds	33
   701  0000A5                     _errString_Feed:
   702                           	callstack 0
   703  0000A5                     	ds	30
   704  0000C3                     _errString_Command:
   705                           	callstack 0
   706  0000C3                     	ds	24
   707                           
   708                           	psect	dataBANK1
   709  000100                     __pdataBANK1:
   710                           	callstack 0
   711  000100                     _errString_PointZ:
   712                           	callstack 0
   713  000100                     	ds	53
   714  000135                     _errString_Point:
   715                           	callstack 0
   716  000135                     	ds	41
   717  00015E                     _errString_ZEND:
   718                           	callstack 0
   719  00015E                     	ds	41
   720  000187                     _errString_Reset:
   721                           	callstack 0
   722  000187                     	ds	40
   723  0001AF                     _errString_Fatal:
   724                           	callstack 0
   725  0001AF                     	ds	39
   726                           
   727                           	psect	cstackBANK1
   728  0001D6                     __pcstackBANK1:
   729                           	callstack 0
   730  0001D6                     executeData@errCode:
   731                           	callstack 0
   732                           
   733                           ; 1 bytes @ 0x0
   734  0001D6                     	ds	1
   735  0001D7                     executeData@data:
   736                           	callstack 0
   737                           
   738                           ; 2 bytes @ 0x1
   739  0001D7                     	ds	2
   740  0001D9                     ??_main:
   741                           
   742                           ; 1 bytes @ 0x3
   743  0001D9                     	ds	2
   744  0001DB                     main@errCode:
   745                           	callstack 0
   746                           
   747                           ; 1 bytes @ 0x5
   748  0001DB                     	ds	1
   749  0001DC                     main@newData:
   750                           	callstack 0
   751                           
   752                           ; 2 bytes @ 0x6
   753  0001DC                     	ds	2
   754                           
   755                           	psect	cstackBANK0
   756  0000F7                     __pcstackBANK0:
   757                           	callstack 0
   758  0000F7                     ??_rotateObj:
   759                           
   760                           ; 1 bytes @ 0x0
   761  0000F7                     	ds	3
   762  0000FA                     rotateObj@rotAngle:
   763                           	callstack 0
   764                           
   765                           ; 1 bytes @ 0x3
   766  0000FA                     	ds	1
   767  0000FB                     rotateObj@totStep:
   768                           	callstack 0
   769                           
   770                           ; 2 bytes @ 0x4
   771  0000FB                     	ds	2
   772  0000FD                     rotateObj@i:
   773                           	callstack 0
   774                           
   775                           ; 2 bytes @ 0x6
   776  0000FD                     	ds	2
   777                           
   778                           	psect	cstackCOMRAM
   779  000001                     __pcstackCOMRAM:
   780                           	callstack 0
   781  000001                     ?_retPeriod:
   782                           	callstack 0
   783  000001                     i2uartTx@ptr:
   784                           	callstack 0
   785                           
   786                           ; 2 bytes @ 0x0
   787  000001                     	ds	2
   788  000003                     i2uartTx@length:
   789                           	callstack 0
   790                           
   791                           ; 1 bytes @ 0x2
   792  000003                     	ds	1
   793  000004                     i2uartTx@i:
   794                           	callstack 0
   795                           
   796                           ; 1 bytes @ 0x3
   797  000004                     	ds	1
   798  000005                     ??i2_printError:
   799                           
   800                           ; 1 bytes @ 0x4
   801  000005                     	ds	2
   802  000007                     i2printError@errCode:
   803                           	callstack 0
   804                           
   805                           ; 1 bytes @ 0x6
   806  000007                     	ds	1
   807  000008                     ??i2_storeData:
   808                           
   809                           ; 1 bytes @ 0x7
   810  000008                     	ds	2
   811  00000A                     i2storeData@data:
   812                           	callstack 0
   813                           
   814                           ; 1 bytes @ 0x9
   815  00000A                     	ds	1
   816  00000B                     ??_isr:
   817                           
   818                           ; 1 bytes @ 0xA
   819  00000B                     	ds	6
   820  000011                     isr@temp:
   821                           	callstack 0
   822                           
   823                           ; 1 bytes @ 0x10
   824  000011                     	ds	1
   825  000012                     ??_shiftData:
   826  000012                     ?_stepMade:
   827                           	callstack 0
   828  000012                     ?_stepCounter:
   829                           	callstack 0
   830  000012                     ?_returnTouch:
   831                           	callstack 0
   832  000012                     ?_returnTherm:
   833                           	callstack 0
   834  000012                     ?_getNewSequence:
   835                           	callstack 0
   836  000012                     ?_getData:
   837                           	callstack 0
   838  000012                     ?___xxtofl:
   839                           	callstack 0
   840  000012                     setStep@motor:
   841                           	callstack 0
   842  000012                     enableMotor@motor:
   843                           	callstack 0
   844  000012                     setDirection@motor:
   845                           	callstack 0
   846  000012                     setDecay@motor:
   847                           	callstack 0
   848  000012                     tim2Init@_pwmPeriod:
   849                           	callstack 0
   850  000012                     uartTx@ptr:
   851                           	callstack 0
   852  000012                     ___xxtofl@val:
   853                           	callstack 0
   854                           
   855                           ; 4 bytes @ 0x11
   856  000012                     	ds	1
   857  000013                     ??_setStep:
   858  000013                     ??_enableMotor:
   859  000013                     ??_setDirection:
   860  000013                     ??_setDecay:
   861                           
   862                           ; 1 bytes @ 0x12
   863  000013                     	ds	1
   864  000014                     stepMade@temp:
   865                           	callstack 0
   866  000014                     shiftData@i:
   867                           	callstack 0
   868  000014                     uartTx@length:
   869                           	callstack 0
   870                           
   871                           ; 1 bytes @ 0x13
   872  000014                     	ds	1
   873  000015                     setStep@step:
   874                           	callstack 0
   875  000015                     enableMotor@enable:
   876                           	callstack 0
   877  000015                     setDirection@direction:
   878                           	callstack 0
   879  000015                     setDecay@decay:
   880                           	callstack 0
   881  000015                     uartTx@i:
   882                           	callstack 0
   883                           
   884                           ; 1 bytes @ 0x14
   885  000015                     	ds	1
   886  000016                     ??_printError:
   887  000016                     ??___xxtofl:
   888  000016                     resetPosition@keepMovingX:
   889                           	callstack 0
   890  000016                     moveToPoint@x1:
   891                           	callstack 0
   892                           
   893                           ; 2 bytes @ 0x15
   894  000016                     	ds	1
   895  000017                     resetPosition@keepMovingY:
   896                           	callstack 0
   897                           
   898                           ; 1 bytes @ 0x16
   899  000017                     	ds	1
   900  000018                     resetPosition@keepMovingZ:
   901                           	callstack 0
   902  000018                     printError@errCode:
   903                           	callstack 0
   904  000018                     moveToPoint@y1:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x17
   908  000018                     	ds	1
   909  000019                     ??_storeData:
   910                           
   911                           ; 1 bytes @ 0x18
   912  000019                     	ds	1
   913  00001A                     ___xxtofl@sign:
   914                           	callstack 0
   915  00001A                     moveToPoint@x2:
   916                           	callstack 0
   917                           
   918                           ; 2 bytes @ 0x19
   919  00001A                     	ds	1
   920  00001B                     storeData@data:
   921                           	callstack 0
   922  00001B                     ___xxtofl@exp:
   923                           	callstack 0
   924                           
   925                           ; 1 bytes @ 0x1A
   926  00001B                     	ds	1
   927  00001C                     moveToPoint@y2:
   928                           	callstack 0
   929  00001C                     ___xxtofl@arg:
   930                           	callstack 0
   931                           
   932                           ; 4 bytes @ 0x1B
   933  00001C                     	ds	2
   934  00001E                     ??_moveToPoint:
   935                           
   936                           ; 1 bytes @ 0x1D
   937  00001E                     	ds	2
   938  000020                     ?___fldiv:
   939                           	callstack 0
   940  000020                     moveToPoint@keepMovingX:
   941                           	callstack 0
   942  000020                     ___fldiv@b:
   943                           	callstack 0
   944                           
   945                           ; 4 bytes @ 0x1F
   946  000020                     	ds	1
   947  000021                     moveToPoint@keepMovingY:
   948                           	callstack 0
   949                           
   950                           ; 1 bytes @ 0x20
   951  000021                     	ds	1
   952  000022                     moveToPoint@MOT1Direction:
   953                           	callstack 0
   954                           
   955                           ; 1 bytes @ 0x21
   956  000022                     	ds	1
   957  000023                     moveToPoint@MOT2Direction:
   958                           	callstack 0
   959                           
   960                           ; 1 bytes @ 0x22
   961  000023                     	ds	1
   962  000024                     ___fldiv@a:
   963                           	callstack 0
   964                           
   965                           ; 4 bytes @ 0x23
   966  000024                     	ds	4
   967  000028                     ??___fldiv:
   968                           
   969                           ; 1 bytes @ 0x27
   970  000028                     	ds	4
   971  00002C                     ___fldiv@rem:
   972                           	callstack 0
   973                           
   974                           ; 4 bytes @ 0x2B
   975  00002C                     	ds	4
   976  000030                     ___fldiv@sign:
   977                           	callstack 0
   978                           
   979                           ; 1 bytes @ 0x2F
   980  000030                     	ds	1
   981  000031                     ___fldiv@new_exp:
   982                           	callstack 0
   983                           
   984                           ; 2 bytes @ 0x30
   985  000031                     	ds	2
   986  000033                     ___fldiv@grs:
   987                           	callstack 0
   988                           
   989                           ; 4 bytes @ 0x32
   990  000033                     	ds	4
   991  000037                     ___fldiv@bexp:
   992                           	callstack 0
   993                           
   994                           ; 1 bytes @ 0x36
   995  000037                     	ds	1
   996  000038                     ___fldiv@aexp:
   997                           	callstack 0
   998                           
   999                           ; 1 bytes @ 0x37
  1000  000038                     	ds	1
  1001  000039                     ?___fltol:
  1002                           	callstack 0
  1003  000039                     ___fltol@f1:
  1004                           	callstack 0
  1005                           
  1006                           ; 4 bytes @ 0x38
  1007  000039                     	ds	4
  1008  00003D                     ??___fltol:
  1009                           
  1010                           ; 1 bytes @ 0x3C
  1011  00003D                     	ds	4
  1012  000041                     ___fltol@sign1:
  1013                           	callstack 0
  1014                           
  1015                           ; 1 bytes @ 0x40
  1016  000041                     	ds	1
  1017  000042                     ___fltol@exp1:
  1018                           	callstack 0
  1019                           
  1020                           ; 1 bytes @ 0x41
  1021  000042                     	ds	1
  1022  000043                     ??_executeData:
  1023                           
  1024                           ; 1 bytes @ 0x42
  1025  000043                     	ds	2
  1026                           
  1027 ;;
  1028 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1029 ;;
  1030 ;; *************** function _main *****************
  1031 ;; Defined at:
  1032 ;;		line 17 in file "main.c"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;		None
  1035 ;; Auto vars:     Size  Location     Type
  1036 ;;  newData         2    6[BANK1 ] PTR struct .
  1037 ;;		 -> newSequenceData(8), 
  1038 ;;  errCode         1    5[BANK1 ] unsigned char 
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  1    wreg      void 
  1041 ;; Registers used:
  1042 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1043 ;; Tracked objects:
  1044 ;;		On entry : 0/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1048 ;;      Params:         0       0       0       0       0       0       0
  1049 ;;      Locals:         0       0       3       0       0       0       0
  1050 ;;      Temps:          0       0       2       0       0       0       0
  1051 ;;      Totals:         0       0       5       0       0       0       0
  1052 ;;Total ram usage:        5 bytes
  1053 ;; Hardware stack levels required when called:    7
  1054 ;; This function calls:
  1055 ;;		_clearTM0
  1056 ;;		_enableMotor
  1057 ;;		_executeData
  1058 ;;		_fatalError
  1059 ;;		_getNewSequence
  1060 ;;		_initADC
  1061 ;;		_initPinMotors
  1062 ;;		_interruptInit
  1063 ;;		_newSequence
  1064 ;;		_printError
  1065 ;;		_readSeq
  1066 ;;		_reduceSeq
  1067 ;;		_resetPosition
  1068 ;;		_shiftData
  1069 ;;		_storeData
  1070 ;;		_tim0Init
  1071 ;;		_tim2Init
  1072 ;;		_usartInit
  1073 ;; This function is called by:
  1074 ;;		Startup code after reset
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text0
  1079  00137E                     __ptext0:
  1080                           	callstack 0
  1081  00137E                     _main:
  1082                           	callstack 24
  1083  00137E  FFFF               	dw	65535	; assembler added errata NOP
  1084                           
  1085                           ;main.c: 21:     interruptInit();
  1086  001380  ECBF  F011         	call	_interruptInit	;wreg free
  1087  001384                     
  1088                           ;main.c: 22:     initPinMotors();
  1089  001384  EC08  F012         	call	_initPinMotors	;wreg free
  1090  001388                     
  1091                           ;main.c: 23:     initADC();
  1092  001388  EC1B  F012         	call	_initADC	;wreg free
  1093  00138C                     
  1094                           ;main.c: 24:     usartInit();
  1095  00138C  EC2E  F012         	call	_usartInit	;wreg free
  1096  001390                     
  1097                           ;main.c: 25:     tim0Init();
  1098  001390  EC51  F012         	call	_tim0Init	;wreg free
  1099  001394                     
  1100                           ;main.c: 26:     tim2Init(10);
  1101  001394  0E00               	movlw	0
  1102  001396  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1103  001398  0E0A               	movlw	10
  1104  00139A  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1105  00139C  EC3D  F012         	call	_tim2Init	;wreg free
  1106  0013A0                     
  1107                           ;main.c: 29:     errCode = resetPosition();
  1108  0013A0  ECC5  F008         	call	_resetPosition	;wreg free
  1109  0013A4  0101               	movlb	1	; () banked
  1110  0013A6  6FDB               	movwf	main@errCode& (0+255),b
  1111  0013A8                     
  1112                           ; BSR set to: 1
  1113                           ;main.c: 30:     if(errCode != 0){
  1114  0013A8  51DB               	movf	main@errCode& (0+255),w,b
  1115  0013AA  B4D8               	btfsc	status,2,c
  1116  0013AC  EFDA  F009         	goto	u3531
  1117  0013B0  EFDD  F009         	goto	u3530
  1118  0013B4                     u3531:
  1119  0013B4  FFFF               	dw	65535	; assembler added errata NOP
  1120  0013B6  EFE4  F009         	goto	l314
  1121  0013BA                     u3530:
  1122  0013BA  FFFF               	dw	65535	; assembler added errata NOP
  1123  0013BC                     
  1124                           ; BSR set to: 1
  1125                           ;main.c: 31:         printError(errCode);
  1126  0013BC  51DB               	movf	main@errCode& (0+255),w,b
  1127  0013BE  EC78  F00C         	call	_printError
  1128  0013C2                     l315:
  1129  0013C2  FFFF               	dw	65535	; assembler added errata NOP
  1130  0013C4  EFE1  F009         	goto	l315
  1131  0013C8                     l314:
  1132  0013C8  FFFF               	dw	65535	; assembler added errata NOP
  1133                           
  1134                           ; BSR set to: 1
  1135                           ;main.c: 36:     RCSTA1bits.CREN = 1;
  1136  0013CA  88AB               	bsf	171,4,c	;volatile
  1137  0013CC                     l4228:
  1138  0013CC  FFFF               	dw	65535	; assembler added errata NOP
  1139                           
  1140                           ;main.c: 39:         if(fatalError()){
  1141  0013CE  ECBE  F012         	call	_fatalError	;wreg free
  1142  0013D2  0900               	iorlw	0
  1143  0013D4  B4D8               	btfsc	status,2,c
  1144  0013D6  EFEF  F009         	goto	u3541
  1145  0013DA  EFF2  F009         	goto	u3540
  1146  0013DE                     u3541:
  1147  0013DE  FFFF               	dw	65535	; assembler added errata NOP
  1148  0013E0  EF08  F00A         	goto	l4234
  1149  0013E4                     u3540:
  1150  0013E4  FFFF               	dw	65535	; assembler added errata NOP
  1151  0013E6                     
  1152                           ;main.c: 41:             enableMotor(1, 0);
  1153  0013E6  0E00               	movlw	0
  1154  0013E8  6E12               	movwf	enableMotor@motor^0,c
  1155  0013EA  0E01               	movlw	1
  1156  0013EC  EC9F  F010         	call	_enableMotor
  1157                           
  1158                           ;main.c: 42:             enableMotor(1, 1);
  1159  0013F0  0E01               	movlw	1
  1160  0013F2  6E12               	movwf	enableMotor@motor^0,c
  1161  0013F4  0E01               	movlw	1
  1162  0013F6  EC9F  F010         	call	_enableMotor
  1163                           
  1164                           ;main.c: 43:             enableMotor(1, 2);
  1165  0013FA  0E02               	movlw	2
  1166  0013FC  6E12               	movwf	enableMotor@motor^0,c
  1167  0013FE  0E01               	movlw	1
  1168  001400  EC9F  F010         	call	_enableMotor
  1169  001404                     
  1170                           ;main.c: 45:             printError(7);
  1171  001404  0E07               	movlw	7
  1172  001406  EC78  F00C         	call	_printError
  1173  00140A                     l320:
  1174  00140A  FFFF               	dw	65535	; assembler added errata NOP
  1175  00140C  EF05  F00A         	goto	l320
  1176  001410                     l4234:
  1177  001410  FFFF               	dw	65535	; assembler added errata NOP
  1178                           
  1179                           ;main.c: 48:         if(newSequence()){
  1180  001412  ECBA  F012         	call	_newSequence	;wreg free
  1181  001416  0900               	iorlw	0
  1182  001418  B4D8               	btfsc	status,2,c
  1183  00141A  EF11  F00A         	goto	u3551
  1184  00141E  EF14  F00A         	goto	u3550
  1185  001422                     u3551:
  1186  001422  FFFF               	dw	65535	; assembler added errata NOP
  1187  001424  EF5D  F00A         	goto	l4256
  1188  001428                     u3550:
  1189  001428  FFFF               	dw	65535	; assembler added errata NOP
  1190  00142A                     
  1191                           ;main.c: 49:             t_newSequence* newData = getNewSequence();
  1192  00142A  EC5A  F012         	call	_getNewSequence	;wreg free
  1193  00142E  C012  F1DC         	movff	?_getNewSequence,main@newData
  1194  001432  C013  F1DD         	movff	?_getNewSequence+1,main@newData+1
  1195  001436                     
  1196                           ;main.c: 51:             newFeeder[0] = newData ->init_posX;
  1197  001436  0101               	movlb	1	; () banked
  1198  001438  EE20 F002          	lfsr	2,2
  1199  00143C  51DC               	movf	main@newData& (0+255),w,b
  1200  00143E  26D9               	addwf	fsr2l,f,c
  1201  001440  51DD               	movf	(main@newData+1)& (0+255),w,b
  1202  001442  22DA               	addwfc	fsr2h,f,c
  1203  001444  50DF               	movf	indf2,w,c
  1204  001446  6E57               	movwf	_newFeeder^0,c
  1205  001448                     
  1206                           ; BSR set to: 1
  1207                           ;main.c: 52:             newFeeder[1] = newData ->init_posY;
  1208  001448  EE20 F003          	lfsr	2,3
  1209  00144C  51DC               	movf	main@newData& (0+255),w,b
  1210  00144E  26D9               	addwf	fsr2l,f,c
  1211  001450  51DD               	movf	(main@newData+1)& (0+255),w,b
  1212  001452  22DA               	addwfc	fsr2h,f,c
  1213  001454  50DF               	movf	indf2,w,c
  1214  001456  6E58               	movwf	(_newFeeder+1)^0,c
  1215  001458                     
  1216                           ; BSR set to: 1
  1217                           ;main.c: 56:             RCSTAbits.CREN = 0;
  1218  001458  98AB               	bcf	171,4,c	;volatile
  1219  00145A                     
  1220                           ; BSR set to: 1
  1221                           ;main.c: 59:             storeData(0);
  1222  00145A  0E00               	movlw	0
  1223  00145C  EC7B  F00A         	call	_storeData
  1224  001460                     
  1225                           ;main.c: 60:             storeData(0xFF);
  1226  001460  0EFF               	movlw	255
  1227  001462  EC7B  F00A         	call	_storeData
  1228  001466                     
  1229                           ;main.c: 61:             storeData(newData ->end_posX);
  1230  001466  0101               	movlb	1	; () banked
  1231  001468  EE20 F005          	lfsr	2,5
  1232  00146C  51DC               	movf	main@newData& (0+255),w,b
  1233  00146E  26D9               	addwf	fsr2l,f,c
  1234  001470  51DD               	movf	(main@newData+1)& (0+255),w,b
  1235  001472  22DA               	addwfc	fsr2h,f,c
  1236  001474  50DF               	movf	indf2,w,c
  1237  001476  EC7B  F00A         	call	_storeData
  1238  00147A                     
  1239                           ;main.c: 62:             storeData(newData ->end_posY);
  1240  00147A  0101               	movlb	1	; () banked
  1241  00147C  EE20 F006          	lfsr	2,6
  1242  001480  51DC               	movf	main@newData& (0+255),w,b
  1243  001482  26D9               	addwf	fsr2l,f,c
  1244  001484  51DD               	movf	(main@newData+1)& (0+255),w,b
  1245  001486  22DA               	addwfc	fsr2h,f,c
  1246  001488  50DF               	movf	indf2,w,c
  1247  00148A  EC7B  F00A         	call	_storeData
  1248  00148E                     
  1249                           ;main.c: 63:             storeData(newData ->end_rot - newData ->init_rot);
  1250  00148E  0101               	movlb	1	; () banked
  1251  001490  EE20 F004          	lfsr	2,4
  1252  001494  51DC               	movf	main@newData& (0+255),w,b
  1253  001496  26D9               	addwf	fsr2l,f,c
  1254  001498  51DD               	movf	(main@newData+1)& (0+255),w,b
  1255  00149A  22DA               	addwfc	fsr2h,f,c
  1256  00149C  50DF               	movf	indf2,w,c
  1257  00149E  6FD9               	movwf	??_main& (0+255),b
  1258  0014A0  EE20 F007          	lfsr	2,7
  1259  0014A4  51DC               	movf	main@newData& (0+255),w,b
  1260  0014A6  26D9               	addwf	fsr2l,f,c
  1261  0014A8  51DD               	movf	(main@newData+1)& (0+255),w,b
  1262  0014AA  22DA               	addwfc	fsr2h,f,c
  1263  0014AC  50DF               	movf	indf2,w,c
  1264  0014AE  6FDA               	movwf	(??_main+1)& (0+255),b
  1265  0014B0  51D9               	movf	??_main& (0+255),w,b
  1266  0014B2  5DDA               	subwf	(??_main+1)& (0+255),w,b
  1267  0014B4  EC7B  F00A         	call	_storeData
  1268  0014B8                     
  1269                           ;main.c: 66:             RCSTAbits.CREN = 1;
  1270  0014B8  88AB               	bsf	171,4,c	;volatile
  1271  0014BA                     l4256:
  1272  0014BA  FFFF               	dw	65535	; assembler added errata NOP
  1273                           
  1274                           ;main.c: 81:         if(readSeq()){
  1275  0014BC  ECB6  F012         	call	_readSeq	;wreg free
  1276  0014C0  0900               	iorlw	0
  1277  0014C2  B4D8               	btfsc	status,2,c
  1278  0014C4  EF66  F00A         	goto	u3561
  1279  0014C8  EF69  F00A         	goto	u3560
  1280  0014CC                     u3561:
  1281  0014CC  FFFF               	dw	65535	; assembler added errata NOP
  1282  0014CE  EFE6  F009         	goto	l4228
  1283  0014D2                     u3560:
  1284  0014D2  FFFF               	dw	65535	; assembler added errata NOP
  1285  0014D4                     
  1286                           ;main.c: 84:             errCode = executeData();
  1287  0014D4  EC82  F006         	call	_executeData	;wreg free
  1288  0014D8  0101               	movlb	1	; () banked
  1289  0014DA  6FDB               	movwf	main@errCode& (0+255),b
  1290  0014DC                     
  1291                           ; BSR set to: 1
  1292                           ;main.c: 85:             printError(errCode);
  1293  0014DC  51DB               	movf	main@errCode& (0+255),w,b
  1294  0014DE  EC78  F00C         	call	_printError
  1295  0014E2                     
  1296                           ;main.c: 86:             clearTM0();
  1297  0014E2  EC68  F012         	call	_clearTM0	;wreg free
  1298  0014E6                     
  1299                           ;main.c: 90:             reduceSeq();
  1300  0014E6  ECB2  F012         	call	_reduceSeq	;wreg free
  1301  0014EA                     
  1302                           ;main.c: 91:             shiftData();
  1303  0014EA  EC13  F011         	call	_shiftData	;wreg free
  1304  0014EE  EFE6  F009         	goto	l4228
  1305  0014F2  EFB5  F000         	goto	start
  1306  0014F6                     __end_of_main:
  1307                           	callstack 0
  1308                           
  1309 ;; *************** function _usartInit *****************
  1310 ;; Defined at:
  1311 ;;		line 34 in file "usart.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;		None
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;		None
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  1    wreg      void 
  1318 ;; Registers used:
  1319 ;;		wreg, status,2
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1325 ;;      Params:         0       0       0       0       0       0       0
  1326 ;;      Locals:         0       0       0       0       0       0       0
  1327 ;;      Temps:          0       0       0       0       0       0       0
  1328 ;;      Totals:         0       0       0       0       0       0       0
  1329 ;;Total ram usage:        0 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; Hardware stack levels required when called:    4
  1332 ;; This function calls:
  1333 ;;		Nothing
  1334 ;; This function is called by:
  1335 ;;		_main
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           	psect	text1
  1340  00245C                     __ptext1:
  1341                           	callstack 0
  1342  00245C                     _usartInit:
  1343                           	callstack 0
  1344  00245C  FFFF               	dw	65535	; assembler added errata NOP
  1345  00245E                     
  1346                           ;usart.c: 36:     TRISCbits.TRISC6 = 0;
  1347  00245E  9C94               	bcf	148,6,c	;volatile
  1348                           
  1349                           ;usart.c: 37:     TRISCbits.TRISC7 = 1;
  1350  002460  8E94               	bsf	148,7,c	;volatile
  1351                           
  1352                           ;usart.c: 39:     TXSTAbits.TX9 = 0;
  1353  002462  9CAC               	bcf	172,6,c	;volatile
  1354                           
  1355                           ;usart.c: 40:     TXSTAbits.TXEN = 1;
  1356  002464  8AAC               	bsf	172,5,c	;volatile
  1357                           
  1358                           ;usart.c: 41:     TXSTAbits.SYNC = 0;
  1359  002466  98AC               	bcf	172,4,c	;volatile
  1360                           
  1361                           ;usart.c: 42:     TXSTAbits.BRGH = 0;
  1362  002468  94AC               	bcf	172,2,c	;volatile
  1363                           
  1364                           ;usart.c: 44:     RCSTAbits.SPEN = 1;
  1365  00246A  8EAB               	bsf	171,7,c	;volatile
  1366                           
  1367                           ;usart.c: 45:     RCSTAbits.RX9 = 0;
  1368  00246C  9CAB               	bcf	171,6,c	;volatile
  1369                           
  1370                           ;usart.c: 46:     RCSTAbits.CREN = 0;
  1371  00246E  98AB               	bcf	171,4,c	;volatile
  1372                           
  1373                           ;usart.c: 47:     RCSTAbits.ADDEN = 0;
  1374  002470  96AB               	bcf	171,3,c	;volatile
  1375  002472                     
  1376                           ;usart.c: 50:     SPBRG = 25;
  1377  002472  0E19               	movlw	25
  1378  002474  6EAF               	movwf	175,c	;volatile
  1379  002476  0012               	return		;funcret
  1380  002478  FFFF               	dw	65535	; errata NOP
  1381  00247A                     __end_of_usartInit:
  1382                           	callstack 0
  1383                           
  1384 ;; *************** function _tim2Init *****************
  1385 ;; Defined at:
  1386 ;;		line 34 in file "pwm.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;		None
  1391 ;; Return value:  Size  Location     Type
  1392 ;;                  1    wreg      void 
  1393 ;; Registers used:
  1394 ;;		wreg, status,2
  1395 ;; Tracked objects:
  1396 ;;		On entry : 0/0
  1397 ;;		On exit  : 0/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1400 ;;      Params:         2       0       0       0       0       0       0
  1401 ;;      Locals:         0       0       0       0       0       0       0
  1402 ;;      Temps:          0       0       0       0       0       0       0
  1403 ;;      Totals:         2       0       0       0       0       0       0
  1404 ;;Total ram usage:        2 bytes
  1405 ;; Hardware stack levels used:    1
  1406 ;; Hardware stack levels required when called:    4
  1407 ;; This function calls:
  1408 ;;		Nothing
  1409 ;; This function is called by:
  1410 ;;		_main
  1411 ;; This function uses a non-reentrant model
  1412 ;;
  1413                           
  1414                           	psect	text2
  1415  00247A                     __ptext2:
  1416                           	callstack 0
  1417  00247A                     _tim2Init:
  1418                           	callstack 0
  1419  00247A  FFFF               	dw	65535	; assembler added errata NOP
  1420  00247C                     
  1421                           ;pwm.c: 35:     T2CONbits.TMR2ON = 0;
  1422  00247C  94CA               	bcf	202,2,c	;volatile
  1423  00247E                     
  1424                           ;pwm.c: 36:     T2CONbits.T2CKPS = 0x03;
  1425  00247E  0E03               	movlw	3
  1426  002480  12CA               	iorwf	202,f,c	;volatile
  1427  002482                     
  1428                           ;pwm.c: 39:     pwmPeriod = _pwmPeriod;
  1429  002482  C012  F055         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1430  002486  C013  F056         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1431  00248A  0012               	return		;funcret
  1432  00248C  FFFF               	dw	65535	; errata NOP
  1433  00248E                     __end_of_tim2Init:
  1434                           	callstack 0
  1435                           
  1436 ;; *************** function _tim0Init *****************
  1437 ;; Defined at:
  1438 ;;		line 21 in file "pwm.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;		None
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;		None
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      void 
  1445 ;; Registers used:
  1446 ;;		wreg, status,2
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1452 ;;      Params:         0       0       0       0       0       0       0
  1453 ;;      Locals:         0       0       0       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0       0       0
  1455 ;;      Totals:         0       0       0       0       0       0       0
  1456 ;;Total ram usage:        0 bytes
  1457 ;; Hardware stack levels used:    1
  1458 ;; Hardware stack levels required when called:    4
  1459 ;; This function calls:
  1460 ;;		Nothing
  1461 ;; This function is called by:
  1462 ;;		_main
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           	psect	text3
  1467  0024A2                     __ptext3:
  1468                           	callstack 0
  1469  0024A2                     _tim0Init:
  1470                           	callstack 0
  1471  0024A2  FFFF               	dw	65535	; assembler added errata NOP
  1472  0024A4                     
  1473                           ;pwm.c: 22:     T0CONbits.TMR0ON = 0;
  1474  0024A4  9ED5               	bcf	213,7,c	;volatile
  1475                           
  1476                           ;pwm.c: 23:     T0CONbits.T08BIT = 0;
  1477  0024A6  9CD5               	bcf	213,6,c	;volatile
  1478                           
  1479                           ;pwm.c: 24:     T0CONbits.T0CS = 0;
  1480  0024A8  9AD5               	bcf	213,5,c	;volatile
  1481                           
  1482                           ;pwm.c: 25:     T0CONbits.PSA = 1;
  1483  0024AA  86D5               	bsf	213,3,c	;volatile
  1484  0024AC                     
  1485                           ;pwm.c: 26:     T0CONbits.T0PS = 0x07;
  1486  0024AC  0E07               	movlw	7
  1487  0024AE  12D5               	iorwf	213,f,c	;volatile
  1488  0024B0  0012               	return		;funcret
  1489  0024B2  FFFF               	dw	65535	; errata NOP
  1490  0024B4                     __end_of_tim0Init:
  1491                           	callstack 0
  1492                           
  1493 ;; *************** function _storeData *****************
  1494 ;; Defined at:
  1495 ;;		line 131 in file "usart.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;  data            1    wreg     unsigned char 
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;  data            1   26[COMRAM] unsigned char 
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  1    wreg      void 
  1502 ;; Registers used:
  1503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1509 ;;      Params:         0       0       0       0       0       0       0
  1510 ;;      Locals:         1       0       0       0       0       0       0
  1511 ;;      Temps:          2       0       0       0       0       0       0
  1512 ;;      Totals:         3       0       0       0       0       0       0
  1513 ;;Total ram usage:        3 bytes
  1514 ;; Hardware stack levels used:    1
  1515 ;; Hardware stack levels required when called:    6
  1516 ;; This function calls:
  1517 ;;		_printError
  1518 ;; This function is called by:
  1519 ;;		_main
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text4
  1524  0014F6                     __ptext4:
  1525                           	callstack 0
  1526  0014F6                     _storeData:
  1527                           	callstack 0
  1528  0014F6  FFFF               	dw	65535	; assembler added errata NOP
  1529                           
  1530                           ;incstack = 0
  1531                           ;storeData@data stored from wreg
  1532  0014F8  6E1B               	movwf	storeData@data^0,c
  1533  0014FA                     
  1534                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  1535  0014FA  0E45               	movlw	low storeData@receivedMex
  1536  0014FC  245E               	addwf	storeData@counter^0,w,c
  1537  0014FE  6ED9               	movwf	fsr2l,c
  1538  001500  6ADA               	clrf	fsr2h,c
  1539  001502  0E00               	movlw	high storeData@receivedMex
  1540  001504  22DA               	addwfc	fsr2h,f,c
  1541  001506  C01B  FFDF         	movff	storeData@data,indf2
  1542  00150A                     
  1543                           ;usart.c: 142:     counter++;
  1544  00150A  2A5E               	incf	storeData@counter^0,f,c
  1545                           
  1546                           ;usart.c: 145:     switch(receivedMex[0]){
  1547  00150C  EF97  F00A         	goto	l4098
  1548  001510                     l4090:
  1549  001510  FFFF               	dw	65535	; assembler added errata NOP
  1550                           
  1551                           ;usart.c: 147:             mexLength = 5;
  1552  001512  0E05               	movlw	5
  1553  001514  6E6D               	movwf	storeData@mexLength^0,c
  1554                           
  1555                           ;usart.c: 148:             break;
  1556  001516  EFB2  F00A         	goto	l4100
  1557  00151A                     l4092:
  1558  00151A  FFFF               	dw	65535	; assembler added errata NOP
  1559                           
  1560                           ;usart.c: 150:             mexLength = 9;
  1561  00151C  0E09               	movlw	9
  1562  00151E  6E6D               	movwf	storeData@mexLength^0,c
  1563                           
  1564                           ;usart.c: 151:             break;
  1565  001520  EFB2  F00A         	goto	l4100
  1566  001524                     l4094:
  1567  001524  FFFF               	dw	65535	; assembler added errata NOP
  1568                           
  1569                           ;usart.c: 153:             mexLength = 1;
  1570  001526  0E01               	movlw	1
  1571  001528  6E6D               	movwf	storeData@mexLength^0,c
  1572                           
  1573                           ;usart.c: 154:             break;
  1574  00152A  EFB2  F00A         	goto	l4100
  1575  00152E                     l4098:
  1576  00152E  FFFF               	dw	65535	; assembler added errata NOP
  1577  001530  5045               	movf	storeData@receivedMex^0,w,c
  1578  001532  6E19               	movwf	??_storeData^0,c
  1579  001534  6A1A               	clrf	(??_storeData+1)^0,c
  1580                           
  1581                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1582                           ; Switch size 1, requested type "simple"
  1583                           ; Number of cases is 1, Range of values is 0 to 0
  1584                           ; switch strategies available:
  1585                           ; Name         Instructions Cycles
  1586                           ; simple_byte            4     3 (average)
  1587                           ;	Chosen strategy is simple_byte
  1588  001536  501A               	movf	(??_storeData+1)^0,w,c
  1589  001538  0A00               	xorlw	0	; case 0
  1590  00153A  B4D8               	btfsc	status,2,c
  1591  00153C  EFA2  F00A         	goto	l4488
  1592  001540  EFB2  F00A         	goto	l4100
  1593  001544                     l4488:
  1594  001544  FFFF               	dw	65535	; assembler added errata NOP
  1595                           
  1596                           ; Switch size 1, requested type "simple"
  1597                           ; Number of cases is 3, Range of values is 0 to 2
  1598                           ; switch strategies available:
  1599                           ; Name         Instructions Cycles
  1600                           ; simple_byte           10     6 (average)
  1601                           ;	Chosen strategy is simple_byte
  1602  001546  5019               	movf	??_storeData^0,w,c
  1603  001548  0A00               	xorlw	0	; case 0
  1604  00154A  B4D8               	btfsc	status,2,c
  1605  00154C  EF88  F00A         	goto	l4090
  1606  001550  0A01               	xorlw	1	; case 1
  1607  001552  B4D8               	btfsc	status,2,c
  1608  001554  EF8D  F00A         	goto	l4092
  1609  001558  0A03               	xorlw	3	; case 2
  1610  00155A  B4D8               	btfsc	status,2,c
  1611  00155C  EF92  F00A         	goto	l4094
  1612  001560  EFB2  F00A         	goto	l4100
  1613  001564                     l4100:
  1614  001564  FFFF               	dw	65535	; assembler added errata NOP
  1615                           
  1616                           ;usart.c: 161:     if(counter >= mexLength){
  1617  001566  506D               	movf	storeData@mexLength^0,w,c
  1618  001568  5C5E               	subwf	storeData@counter^0,w,c
  1619  00156A  A0D8               	btfss	status,0,c
  1620  00156C  EFBA  F00A         	goto	u3491
  1621  001570  EFBD  F00A         	goto	u3490
  1622  001574                     u3491:
  1623  001574  FFFF               	dw	65535	; assembler added errata NOP
  1624  001576  EF29  F00B         	goto	l571
  1625  00157A                     u3490:
  1626  00157A  FFFF               	dw	65535	; assembler added errata NOP
  1627  00157C                     
  1628                           ;usart.c: 162:         counter = 0;
  1629  00157C  0E00               	movlw	0
  1630  00157E  6E5E               	movwf	storeData@counter^0,c
  1631                           
  1632                           ;usart.c: 166:         switch(receivedMex[0]){
  1633  001580  EF0E  F00B         	goto	l4116
  1634  001584                     l4104:
  1635  001584  FFFF               	dw	65535	; assembler added errata NOP
  1636                           
  1637                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1638  001586  5061               	movf	_dataCounter^0,w,c
  1639  001588  0D04               	mullw	4
  1640  00158A  0EDB               	movlw	low _dataSequence
  1641  00158C  24F3               	addwf	243,w,c
  1642  00158E  6ED9               	movwf	fsr2l,c
  1643  001590  0E00               	movlw	high _dataSequence
  1644  001592  20F4               	addwfc	prodh,w,c
  1645  001594  6EDA               	movwf	fsr2h,c
  1646  001596  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  1647                           
  1648                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  1649  00159A  5061               	movf	_dataCounter^0,w,c
  1650  00159C  0D04               	mullw	4
  1651  00159E  0EDC               	movlw	low (_dataSequence+1)
  1652  0015A0  24F3               	addwf	243,w,c
  1653  0015A2  6ED9               	movwf	fsr2l,c
  1654  0015A4  0E00               	movlw	high (_dataSequence+1)
  1655  0015A6  20F4               	addwfc	prodh,w,c
  1656  0015A8  6EDA               	movwf	fsr2h,c
  1657  0015AA  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  1658                           
  1659                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  1660  0015AE  5061               	movf	_dataCounter^0,w,c
  1661  0015B0  0D04               	mullw	4
  1662  0015B2  0EDD               	movlw	low (_dataSequence+2)
  1663  0015B4  24F3               	addwf	243,w,c
  1664  0015B6  6ED9               	movwf	fsr2l,c
  1665  0015B8  0E00               	movlw	high (_dataSequence+2)
  1666  0015BA  20F4               	addwfc	prodh,w,c
  1667  0015BC  6EDA               	movwf	fsr2h,c
  1668  0015BE  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  1669                           
  1670                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1671  0015C2  5061               	movf	_dataCounter^0,w,c
  1672  0015C4  0D04               	mullw	4
  1673  0015C6  0EDE               	movlw	low (_dataSequence+3)
  1674  0015C8  24F3               	addwf	243,w,c
  1675  0015CA  6ED9               	movwf	fsr2l,c
  1676  0015CC  0E00               	movlw	high (_dataSequence+3)
  1677  0015CE  20F4               	addwfc	prodh,w,c
  1678  0015D0  6EDA               	movwf	fsr2h,c
  1679  0015D2  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  1680  0015D6                     
  1681                           ;usart.c: 173:                 dataCounter++;
  1682  0015D6  2A61               	incf	_dataCounter^0,f,c
  1683                           
  1684                           ;usart.c: 174:                 break;
  1685  0015D8  EF29  F00B         	goto	l571
  1686  0015DC                     l568:
  1687  0015DC  FFFF               	dw	65535	; assembler added errata NOP
  1688                           
  1689                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  1690  0015DE  C046  F0EF         	movff	storeData@receivedMex+1,_newSequenceData
  1691                           
  1692                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  1693  0015E2  C047  F0F0         	movff	storeData@receivedMex+2,_newSequenceData+1
  1694                           
  1695                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  1696  0015E6  C048  F0F1         	movff	storeData@receivedMex+3,_newSequenceData+2
  1697                           
  1698                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  1699  0015EA  C049  F0F2         	movff	storeData@receivedMex+4,_newSequenceData+3
  1700                           
  1701                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  1702  0015EE  C04A  F0F3         	movff	storeData@receivedMex+5,_newSequenceData+4
  1703                           
  1704                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  1705  0015F2  C04B  F0F4         	movff	storeData@receivedMex+6,_newSequenceData+5
  1706                           
  1707                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  1708  0015F6  C04C  F0F5         	movff	storeData@receivedMex+7,_newSequenceData+6
  1709                           
  1710                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  1711  0015FA  C04D  F0F6         	movff	storeData@receivedMex+8,_newSequenceData+7
  1712  0015FE                     
  1713                           ;usart.c: 186:                 _newSequence = 1;
  1714  0015FE  0E01               	movlw	1
  1715  001600  6E5F               	movwf	__newSequence^0,c
  1716                           
  1717                           ;usart.c: 187:                 break;
  1718  001602  EF29  F00B         	goto	l571
  1719  001606                     l4110:
  1720  001606  FFFF               	dw	65535	; assembler added errata NOP
  1721                           
  1722                           ;usart.c: 190:                 _fatalError = 1;
  1723  001608  0E01               	movlw	1
  1724  00160A  6E60               	movwf	__fatalError^0,c
  1725                           
  1726                           ;usart.c: 191:                 break;
  1727  00160C  EF29  F00B         	goto	l571
  1728  001610                     l4112:
  1729  001610  FFFF               	dw	65535	; assembler added errata NOP
  1730                           
  1731                           ;usart.c: 194:                 printError(8);
  1732  001612  0E08               	movlw	8
  1733  001614  EC78  F00C         	call	_printError
  1734                           
  1735                           ;usart.c: 195:                 break;
  1736  001618  EF29  F00B         	goto	l571
  1737  00161C                     l4116:
  1738  00161C  FFFF               	dw	65535	; assembler added errata NOP
  1739  00161E  5045               	movf	storeData@receivedMex^0,w,c
  1740  001620  6E19               	movwf	??_storeData^0,c
  1741  001622  6A1A               	clrf	(??_storeData+1)^0,c
  1742                           
  1743                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1744                           ; Switch size 1, requested type "simple"
  1745                           ; Number of cases is 1, Range of values is 0 to 0
  1746                           ; switch strategies available:
  1747                           ; Name         Instructions Cycles
  1748                           ; simple_byte            4     3 (average)
  1749                           ;	Chosen strategy is simple_byte
  1750  001624  501A               	movf	(??_storeData+1)^0,w,c
  1751  001626  0A00               	xorlw	0	; case 0
  1752  001628  B4D8               	btfsc	status,2,c
  1753  00162A  EF19  F00B         	goto	l4490
  1754  00162E  EF08  F00B         	goto	l4112
  1755  001632                     l4490:
  1756  001632  FFFF               	dw	65535	; assembler added errata NOP
  1757                           
  1758                           ; Switch size 1, requested type "simple"
  1759                           ; Number of cases is 3, Range of values is 0 to 2
  1760                           ; switch strategies available:
  1761                           ; Name         Instructions Cycles
  1762                           ; simple_byte           10     6 (average)
  1763                           ;	Chosen strategy is simple_byte
  1764  001634  5019               	movf	??_storeData^0,w,c
  1765  001636  0A00               	xorlw	0	; case 0
  1766  001638  B4D8               	btfsc	status,2,c
  1767  00163A  EFC2  F00A         	goto	l4104
  1768  00163E  0A01               	xorlw	1	; case 1
  1769  001640  B4D8               	btfsc	status,2,c
  1770  001642  EFEE  F00A         	goto	l568
  1771  001646  0A03               	xorlw	3	; case 2
  1772  001648  B4D8               	btfsc	status,2,c
  1773  00164A  EF03  F00B         	goto	l4110
  1774  00164E  EF08  F00B         	goto	l4112
  1775  001652                     l571:
  1776  001652  FFFF               	dw	65535	; assembler added errata NOP
  1777  001654  0012               	return		;funcret
  1778  001656  FFFF               	dw	65535	; errata NOP
  1779  001658                     __end_of_storeData:
  1780                           	callstack 0
  1781                           
  1782 ;; *************** function _printError *****************
  1783 ;; Defined at:
  1784 ;;		line 53 in file "usart.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;  errCode         1    wreg     unsigned char 
  1787 ;; Auto vars:     Size  Location     Type
  1788 ;;  errCode         1   23[COMRAM] unsigned char 
  1789 ;; Return value:  Size  Location     Type
  1790 ;;                  1    wreg      void 
  1791 ;; Registers used:
  1792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1793 ;; Tracked objects:
  1794 ;;		On entry : 0/0
  1795 ;;		On exit  : 0/0
  1796 ;;		Unchanged: 0/0
  1797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1798 ;;      Params:         0       0       0       0       0       0       0
  1799 ;;      Locals:         1       0       0       0       0       0       0
  1800 ;;      Temps:          2       0       0       0       0       0       0
  1801 ;;      Totals:         3       0       0       0       0       0       0
  1802 ;;Total ram usage:        3 bytes
  1803 ;; Hardware stack levels used:    1
  1804 ;; Hardware stack levels required when called:    5
  1805 ;; This function calls:
  1806 ;;		_uartTx
  1807 ;; This function is called by:
  1808 ;;		_main
  1809 ;;		_storeData
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           	psect	text5
  1814  0018F0                     __ptext5:
  1815                           	callstack 0
  1816  0018F0                     _printError:
  1817                           	callstack 0
  1818  0018F0  FFFF               	dw	65535	; assembler added errata NOP
  1819                           
  1820                           ;incstack = 0
  1821                           ;printError@errCode stored from wreg
  1822  0018F2  6E18               	movwf	printError@errCode^0,c
  1823  0018F4                     
  1824                           ;usart.c: 55:     switch(errCode){
  1825  0018F4  EFD4  F00C         	goto	l3958
  1826  0018F8                     l3940:
  1827  0018F8  FFFF               	dw	65535	; assembler added errata NOP
  1828                           
  1829                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1830  0018FA  0EA5               	movlw	low _errString_Feed
  1831  0018FC  6E12               	movwf	uartTx@ptr^0,c
  1832  0018FE  0E00               	movlw	high _errString_Feed
  1833  001900  6E13               	movwf	(uartTx@ptr+1)^0,c
  1834  001902  0E1E               	movlw	30
  1835  001904  6E14               	movwf	uartTx@length^0,c
  1836  001906  EC71  F011         	call	_uartTx	;wreg free
  1837                           
  1838                           ;usart.c: 58:             break;
  1839  00190A  EF03  F00D         	goto	l527
  1840  00190E                     l3942:
  1841  00190E  FFFF               	dw	65535	; assembler added errata NOP
  1842                           
  1843                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1844  001910  0E5E               	movlw	low _errString_ZEND
  1845  001912  6E12               	movwf	uartTx@ptr^0,c
  1846  001914  0E01               	movlw	high _errString_ZEND
  1847  001916  6E13               	movwf	(uartTx@ptr+1)^0,c
  1848  001918  0E29               	movlw	41
  1849  00191A  6E14               	movwf	uartTx@length^0,c
  1850  00191C  EC71  F011         	call	_uartTx	;wreg free
  1851                           
  1852                           ;usart.c: 61:             break;
  1853  001920  EF03  F00D         	goto	l527
  1854  001924                     l3944:
  1855  001924  FFFF               	dw	65535	; assembler added errata NOP
  1856                           
  1857                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1858  001926  0E87               	movlw	low _errString_Reset
  1859  001928  6E12               	movwf	uartTx@ptr^0,c
  1860  00192A  0E01               	movlw	high _errString_Reset
  1861  00192C  6E13               	movwf	(uartTx@ptr+1)^0,c
  1862  00192E  0E28               	movlw	40
  1863  001930  6E14               	movwf	uartTx@length^0,c
  1864  001932  EC71  F011         	call	_uartTx	;wreg free
  1865                           
  1866                           ;usart.c: 64:             break;
  1867  001936  EF03  F00D         	goto	l527
  1868  00193A                     l3946:
  1869  00193A  FFFF               	dw	65535	; assembler added errata NOP
  1870                           
  1871                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1872  00193C  0E35               	movlw	low _errString_Point
  1873  00193E  6E12               	movwf	uartTx@ptr^0,c
  1874  001940  0E01               	movlw	high _errString_Point
  1875  001942  6E13               	movwf	(uartTx@ptr+1)^0,c
  1876  001944  0E29               	movlw	41
  1877  001946  6E14               	movwf	uartTx@length^0,c
  1878  001948  EC71  F011         	call	_uartTx	;wreg free
  1879                           
  1880                           ;usart.c: 67:             break;
  1881  00194C  EF03  F00D         	goto	l527
  1882  001950                     l3948:
  1883  001950  FFFF               	dw	65535	; assembler added errata NOP
  1884                           
  1885                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  1886  001952  0E84               	movlw	low _errString_Bound
  1887  001954  6E12               	movwf	uartTx@ptr^0,c
  1888  001956  0E00               	movlw	high _errString_Bound
  1889  001958  6E13               	movwf	(uartTx@ptr+1)^0,c
  1890  00195A  0E21               	movlw	33
  1891  00195C  6E14               	movwf	uartTx@length^0,c
  1892  00195E  EC71  F011         	call	_uartTx	;wreg free
  1893                           
  1894                           ;usart.c: 70:             break;
  1895  001962  EF03  F00D         	goto	l527
  1896  001966                     l3950:
  1897  001966  FFFF               	dw	65535	; assembler added errata NOP
  1898                           
  1899                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  1900  001968  0E00               	movlw	low _errString_PointZ
  1901  00196A  6E12               	movwf	uartTx@ptr^0,c
  1902  00196C  0E01               	movlw	high _errString_PointZ
  1903  00196E  6E13               	movwf	(uartTx@ptr+1)^0,c
  1904  001970  0E35               	movlw	53
  1905  001972  6E14               	movwf	uartTx@length^0,c
  1906  001974  EC71  F011         	call	_uartTx	;wreg free
  1907                           
  1908                           ;usart.c: 73:             break;
  1909  001978  EF03  F00D         	goto	l527
  1910  00197C                     l3952:
  1911  00197C  FFFF               	dw	65535	; assembler added errata NOP
  1912                           
  1913                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  1914  00197E  0EAF               	movlw	low _errString_Fatal
  1915  001980  6E12               	movwf	uartTx@ptr^0,c
  1916  001982  0E01               	movlw	high _errString_Fatal
  1917  001984  6E13               	movwf	(uartTx@ptr+1)^0,c
  1918  001986  0E27               	movlw	39
  1919  001988  6E14               	movwf	uartTx@length^0,c
  1920  00198A  EC71  F011         	call	_uartTx	;wreg free
  1921                           
  1922                           ;usart.c: 76:             break;
  1923  00198E  EF03  F00D         	goto	l527
  1924  001992                     l3954:
  1925  001992  FFFF               	dw	65535	; assembler added errata NOP
  1926                           
  1927                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  1928  001994  0EC3               	movlw	low _errString_Command
  1929  001996  6E12               	movwf	uartTx@ptr^0,c
  1930  001998  0E00               	movlw	high _errString_Command
  1931  00199A  6E13               	movwf	(uartTx@ptr+1)^0,c
  1932  00199C  0E18               	movlw	24
  1933  00199E  6E14               	movwf	uartTx@length^0,c
  1934  0019A0  EC71  F011         	call	_uartTx	;wreg free
  1935                           
  1936                           ;usart.c: 79:             break;
  1937  0019A4  EF03  F00D         	goto	l527
  1938  0019A8                     l3958:
  1939  0019A8  FFFF               	dw	65535	; assembler added errata NOP
  1940  0019AA  5018               	movf	printError@errCode^0,w,c
  1941  0019AC  6E16               	movwf	??_printError^0,c
  1942  0019AE  6A17               	clrf	(??_printError+1)^0,c
  1943                           
  1944                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1945                           ; Switch size 1, requested type "simple"
  1946                           ; Number of cases is 1, Range of values is 0 to 0
  1947                           ; switch strategies available:
  1948                           ; Name         Instructions Cycles
  1949                           ; simple_byte            4     3 (average)
  1950                           ;	Chosen strategy is simple_byte
  1951  0019B0  5017               	movf	(??_printError+1)^0,w,c
  1952  0019B2  0A00               	xorlw	0	; case 0
  1953  0019B4  B4D8               	btfsc	status,2,c
  1954  0019B6  EFDF  F00C         	goto	l4492
  1955  0019BA  EF03  F00D         	goto	l527
  1956  0019BE                     l4492:
  1957  0019BE  FFFF               	dw	65535	; assembler added errata NOP
  1958                           
  1959                           ; Switch size 1, requested type "simple"
  1960                           ; Number of cases is 8, Range of values is 1 to 8
  1961                           ; switch strategies available:
  1962                           ; Name         Instructions Cycles
  1963                           ; simple_byte           25    13 (average)
  1964                           ;	Chosen strategy is simple_byte
  1965  0019C0  5016               	movf	??_printError^0,w,c
  1966  0019C2  0A01               	xorlw	1	; case 1
  1967  0019C4  B4D8               	btfsc	status,2,c
  1968  0019C6  EF7C  F00C         	goto	l3940
  1969  0019CA  0A03               	xorlw	3	; case 2
  1970  0019CC  B4D8               	btfsc	status,2,c
  1971  0019CE  EF87  F00C         	goto	l3942
  1972  0019D2  0A01               	xorlw	1	; case 3
  1973  0019D4  B4D8               	btfsc	status,2,c
  1974  0019D6  EF92  F00C         	goto	l3944
  1975  0019DA  0A07               	xorlw	7	; case 4
  1976  0019DC  B4D8               	btfsc	status,2,c
  1977  0019DE  EF9D  F00C         	goto	l3946
  1978  0019E2  0A01               	xorlw	1	; case 5
  1979  0019E4  B4D8               	btfsc	status,2,c
  1980  0019E6  EFA8  F00C         	goto	l3948
  1981  0019EA  0A03               	xorlw	3	; case 6
  1982  0019EC  B4D8               	btfsc	status,2,c
  1983  0019EE  EFB3  F00C         	goto	l3950
  1984  0019F2  0A01               	xorlw	1	; case 7
  1985  0019F4  B4D8               	btfsc	status,2,c
  1986  0019F6  EFBE  F00C         	goto	l3952
  1987  0019FA  0A0F               	xorlw	15	; case 8
  1988  0019FC  B4D8               	btfsc	status,2,c
  1989  0019FE  EFC9  F00C         	goto	l3954
  1990  001A02  EF03  F00D         	goto	l527
  1991  001A06                     l527:
  1992  001A06  FFFF               	dw	65535	; assembler added errata NOP
  1993  001A08  0012               	return		;funcret
  1994  001A0A  FFFF               	dw	65535	; errata NOP
  1995  001A0C                     __end_of_printError:
  1996                           	callstack 0
  1997                           
  1998 ;; *************** function _uartTx *****************
  1999 ;; Defined at:
  2000 ;;		line 221 in file "usart.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2003 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2004 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2005 ;;  length          1   19[COMRAM] unsigned char 
  2006 ;; Auto vars:     Size  Location     Type
  2007 ;;  i               1   20[COMRAM] unsigned char 
  2008 ;; Return value:  Size  Location     Type
  2009 ;;                  1    wreg      void 
  2010 ;; Registers used:
  2011 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2012 ;; Tracked objects:
  2013 ;;		On entry : 0/0
  2014 ;;		On exit  : 0/0
  2015 ;;		Unchanged: 0/0
  2016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2017 ;;      Params:         3       0       0       0       0       0       0
  2018 ;;      Locals:         1       0       0       0       0       0       0
  2019 ;;      Temps:          0       0       0       0       0       0       0
  2020 ;;      Totals:         4       0       0       0       0       0       0
  2021 ;;Total ram usage:        4 bytes
  2022 ;; Hardware stack levels used:    1
  2023 ;; Hardware stack levels required when called:    4
  2024 ;; This function calls:
  2025 ;;		Nothing
  2026 ;; This function is called by:
  2027 ;;		_printError
  2028 ;; This function uses a non-reentrant model
  2029 ;;
  2030                           
  2031                           	psect	text6
  2032  0022E2                     __ptext6:
  2033                           	callstack 0
  2034  0022E2                     _uartTx:
  2035                           	callstack 0
  2036  0022E2  FFFF               	dw	65535	; assembler added errata NOP
  2037  0022E4                     
  2038                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  2039  0022E4  0E01               	movlw	1
  2040  0022E6  6E15               	movwf	uartTx@i^0,c
  2041  0022E8  EF8A  F011         	goto	l3432
  2042  0022EC                     l3428:
  2043  0022EC  FFFF               	dw	65535	; assembler added errata NOP
  2044                           
  2045                           ;usart.c: 226:         TXREG = *ptr;
  2046  0022EE  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2047  0022F2  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2048  0022F6  50DF               	movf	indf2,w,c
  2049  0022F8  6EAD               	movwf	173,c	;volatile
  2050  0022FA                     l582:
  2051  0022FA  FFFF               	dw	65535	; assembler added errata NOP
  2052  0022FC  A2AC               	btfss	172,1,c	;volatile
  2053  0022FE  EF83  F011         	goto	u2501
  2054  002302  EF86  F011         	goto	u2500
  2055  002306                     u2501:
  2056  002306  FFFF               	dw	65535	; assembler added errata NOP
  2057  002308  EF7D  F011         	goto	l582
  2058  00230C                     u2500:
  2059  00230C  FFFF               	dw	65535	; assembler added errata NOP
  2060  00230E                     
  2061                           ;usart.c: 230:         ptr++;
  2062  00230E  4A12               	infsnz	uartTx@ptr^0,f,c
  2063  002310  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2064                           
  2065                           ;usart.c: 231:     }
  2066  002312  2A15               	incf	uartTx@i^0,f,c
  2067  002314                     l3432:
  2068  002314  FFFF               	dw	65535	; assembler added errata NOP
  2069  002316  5014               	movf	uartTx@length^0,w,c
  2070  002318  5C15               	subwf	uartTx@i^0,w,c
  2071  00231A  A0D8               	btfss	status,0,c
  2072  00231C  EF92  F011         	goto	u2511
  2073  002320  EF95  F011         	goto	u2510
  2074  002324                     u2511:
  2075  002324  FFFF               	dw	65535	; assembler added errata NOP
  2076  002326  EF76  F011         	goto	l3428
  2077  00232A                     u2510:
  2078  00232A  FFFF               	dw	65535	; assembler added errata NOP
  2079  00232C  0012               	return		;funcret
  2080  00232E  FFFF               	dw	65535	; errata NOP
  2081  002330                     __end_of_uartTx:
  2082                           	callstack 0
  2083                           
  2084 ;; *************** function _shiftData *****************
  2085 ;; Defined at:
  2086 ;;		line 120 in file "usart.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;		None
  2089 ;; Auto vars:     Size  Location     Type
  2090 ;;  i               1   19[COMRAM] unsigned char 
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  1    wreg      void 
  2093 ;; Registers used:
  2094 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2100 ;;      Params:         0       0       0       0       0       0       0
  2101 ;;      Locals:         1       0       0       0       0       0       0
  2102 ;;      Temps:          2       0       0       0       0       0       0
  2103 ;;      Totals:         3       0       0       0       0       0       0
  2104 ;;Total ram usage:        3 bytes
  2105 ;; Hardware stack levels used:    1
  2106 ;; Hardware stack levels required when called:    4
  2107 ;; This function calls:
  2108 ;;		Nothing
  2109 ;; This function is called by:
  2110 ;;		_main
  2111 ;; This function uses a non-reentrant model
  2112 ;;
  2113                           
  2114                           	psect	text7
  2115  002226                     __ptext7:
  2116                           	callstack 0
  2117  002226                     _shiftData:
  2118                           	callstack 0
  2119  002226  FFFF               	dw	65535	; assembler added errata NOP
  2120  002228                     
  2121                           ;usart.c: 121:     char i;;usart.c: 123:     for(i = 0; i < 4; i++){
  2122  002228  0E00               	movlw	0
  2123  00222A  6E14               	movwf	shiftData@i^0,c
  2124  00222C                     l4202:
  2125  00222C  FFFF               	dw	65535	; assembler added errata NOP
  2126                           
  2127                           ;usart.c: 124:         dataSequence[i] = dataSequence[i+1];
  2128  00222E  5014               	movf	shiftData@i^0,w,c
  2129  002230  6E12               	movwf	??_shiftData^0,c
  2130  002232  6A13               	clrf	(??_shiftData+1)^0,c
  2131  002234  90D8               	bcf	status,0,c
  2132  002236  3612               	rlcf	??_shiftData^0,f,c
  2133  002238  3613               	rlcf	(??_shiftData+1)^0,f,c
  2134  00223A  90D8               	bcf	status,0,c
  2135  00223C  3612               	rlcf	??_shiftData^0,f,c
  2136  00223E  3613               	rlcf	(??_shiftData+1)^0,f,c
  2137  002240  0EDF               	movlw	low (_dataSequence+4)
  2138  002242  2412               	addwf	??_shiftData^0,w,c
  2139  002244  6ED9               	movwf	fsr2l,c
  2140  002246  0E00               	movlw	high (_dataSequence+4)
  2141  002248  2013               	addwfc	(??_shiftData+1)^0,w,c
  2142  00224A  6EDA               	movwf	fsr2h,c
  2143  00224C  5014               	movf	shiftData@i^0,w,c
  2144  00224E  0D04               	mullw	4
  2145  002250  0EDB               	movlw	low _dataSequence
  2146  002252  24F3               	addwf	243,w,c
  2147  002254  6EE1               	movwf	fsr1l,c
  2148  002256  0E00               	movlw	high _dataSequence
  2149  002258  20F4               	addwfc	prodh,w,c
  2150  00225A  6EE2               	movwf	fsr1h,c
  2151  00225C  CFDE FFE6          	movff	postinc2,postinc1
  2152  002260  CFDE FFE6          	movff	postinc2,postinc1
  2153  002264  CFDE FFE6          	movff	postinc2,postinc1
  2154  002268  CFDE FFE6          	movff	postinc2,postinc1
  2155  00226C                     
  2156                           ;usart.c: 125:     }
  2157  00226C  2A14               	incf	shiftData@i^0,f,c
  2158  00226E  0E03               	movlw	3
  2159  002270  6414               	cpfsgt	shiftData@i^0,c
  2160  002272  EF3D  F011         	goto	u3521
  2161  002276  EF40  F011         	goto	u3520
  2162  00227A                     u3521:
  2163  00227A  FFFF               	dw	65535	; assembler added errata NOP
  2164  00227C  EF16  F011         	goto	l4202
  2165  002280                     u3520:
  2166  002280  FFFF               	dw	65535	; assembler added errata NOP
  2167  002282  0012               	return		;funcret
  2168  002284  FFFF               	dw	65535	; errata NOP
  2169  002286                     __end_of_shiftData:
  2170                           	callstack 0
  2171                           
  2172 ;; *************** function _resetPosition *****************
  2173 ;; Defined at:
  2174 ;;		line 158 in file "motors.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;		None
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;  keepMovingZ     1   23[COMRAM] unsigned char 
  2179 ;;  keepMovingY     1   22[COMRAM] unsigned char 
  2180 ;;  keepMovingX     1   21[COMRAM] unsigned char 
  2181 ;; Return value:  Size  Location     Type
  2182 ;;                  1    wreg      unsigned char 
  2183 ;; Registers used:
  2184 ;;		wreg, status,2, status,0, cstack
  2185 ;; Tracked objects:
  2186 ;;		On entry : 0/0
  2187 ;;		On exit  : 0/0
  2188 ;;		Unchanged: 0/0
  2189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2190 ;;      Params:         0       0       0       0       0       0       0
  2191 ;;      Locals:         3       0       0       0       0       0       0
  2192 ;;      Temps:          0       0       0       0       0       0       0
  2193 ;;      Totals:         3       0       0       0       0       0       0
  2194 ;;Total ram usage:        3 bytes
  2195 ;; Hardware stack levels used:    1
  2196 ;; Hardware stack levels required when called:    5
  2197 ;; This function calls:
  2198 ;;		_enableMotor
  2199 ;;		_resetStep
  2200 ;;		_setDecay
  2201 ;;		_setDirection
  2202 ;;		_setStep
  2203 ;;		_stepMade
  2204 ;; This function is called by:
  2205 ;;		_main
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           	psect	text8
  2210  00118A                     __ptext8:
  2211                           	callstack 0
  2212  00118A                     _resetPosition:
  2213                           	callstack 0
  2214  00118A  FFFF               	dw	65535	; assembler added errata NOP
  2215  00118C                     
  2216                           ;motors.c: 160:     setStep(0, 0);
  2217  00118C  0E00               	movlw	0
  2218  00118E  6E12               	movwf	setStep@motor^0,c
  2219  001190  0E00               	movlw	0
  2220  001192  EC5F  F00F         	call	_setStep
  2221                           
  2222                           ;motors.c: 161:     setStep(1, 0);
  2223  001196  0E00               	movlw	0
  2224  001198  6E12               	movwf	setStep@motor^0,c
  2225  00119A  0E01               	movlw	1
  2226  00119C  EC5F  F00F         	call	_setStep
  2227                           
  2228                           ;motors.c: 162:     setStep(2, 0);
  2229  0011A0  0E00               	movlw	0
  2230  0011A2  6E12               	movwf	setStep@motor^0,c
  2231  0011A4  0E02               	movlw	2
  2232  0011A6  EC5F  F00F         	call	_setStep
  2233                           
  2234                           ;motors.c: 164:     setDirection(0, 0);
  2235  0011AA  0E00               	movlw	0
  2236  0011AC  6E12               	movwf	setDirection@motor^0,c
  2237  0011AE  0E00               	movlw	0
  2238  0011B0  ECD9  F010         	call	_setDirection
  2239                           
  2240                           ;motors.c: 165:     setDirection(0, 1);
  2241  0011B4  0E01               	movlw	1
  2242  0011B6  6E12               	movwf	setDirection@motor^0,c
  2243  0011B8  0E00               	movlw	0
  2244  0011BA  ECD9  F010         	call	_setDirection
  2245                           
  2246                           ;motors.c: 166:     setDirection(0, 2);
  2247  0011BE  0E02               	movlw	2
  2248  0011C0  6E12               	movwf	setDirection@motor^0,c
  2249  0011C2  0E00               	movlw	0
  2250  0011C4  ECD9  F010         	call	_setDirection
  2251                           
  2252                           ;motors.c: 168:     setDecay(1, 0);
  2253  0011C8  0E00               	movlw	0
  2254  0011CA  6E12               	movwf	setDecay@motor^0,c
  2255  0011CC  0E01               	movlw	1
  2256  0011CE  EC65  F010         	call	_setDecay
  2257                           
  2258                           ;motors.c: 169:     setDecay(1, 1);
  2259  0011D2  0E01               	movlw	1
  2260  0011D4  6E12               	movwf	setDecay@motor^0,c
  2261  0011D6  0E01               	movlw	1
  2262  0011D8  EC65  F010         	call	_setDecay
  2263                           
  2264                           ;motors.c: 170:     setDecay(1, 2);
  2265  0011DC  0E02               	movlw	2
  2266  0011DE  6E12               	movwf	setDecay@motor^0,c
  2267  0011E0  0E01               	movlw	1
  2268  0011E2  EC65  F010         	call	_setDecay
  2269                           
  2270                           ;motors.c: 172:     enableMotor(0, 0);
  2271  0011E6  0E00               	movlw	0
  2272  0011E8  6E12               	movwf	enableMotor@motor^0,c
  2273  0011EA  0E00               	movlw	0
  2274  0011EC  EC9F  F010         	call	_enableMotor
  2275                           
  2276                           ;motors.c: 173:     enableMotor(0, 1);
  2277  0011F0  0E01               	movlw	1
  2278  0011F2  6E12               	movwf	enableMotor@motor^0,c
  2279  0011F4  0E00               	movlw	0
  2280  0011F6  EC9F  F010         	call	_enableMotor
  2281                           
  2282                           ;motors.c: 174:     enableMotor(0, 2);
  2283  0011FA  0E02               	movlw	2
  2284  0011FC  6E12               	movwf	enableMotor@motor^0,c
  2285  0011FE  0E00               	movlw	0
  2286  001200  EC9F  F010         	call	_enableMotor
  2287  001204                     
  2288                           ;motors.c: 178:     unsigned char keepMovingX = 1;
  2289  001204  0E01               	movlw	1
  2290  001206  6E16               	movwf	resetPosition@keepMovingX^0,c
  2291  001208                     
  2292                           ;motors.c: 179:     unsigned char keepMovingY = 1;
  2293  001208  0E01               	movlw	1
  2294  00120A  6E17               	movwf	resetPosition@keepMovingY^0,c
  2295  00120C                     
  2296                           ;motors.c: 180:     unsigned char keepMovingZ = 1;
  2297  00120C  0E01               	movlw	1
  2298  00120E  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2299  001210                     
  2300                           ;motors.c: 183:     T2CONbits.TMR2ON = 1;
  2301  001210  84CA               	bsf	202,2,c	;volatile
  2302  001212                     
  2303                           ;motors.c: 185:     tm0Error = 0;
  2304  001212  0E00               	movlw	0
  2305  001214  6E5C               	movwf	(_tm0Error+1)^0,c
  2306  001216  0E00               	movlw	0
  2307  001218  6E5B               	movwf	_tm0Error^0,c
  2308  00121A                     
  2309                           ;motors.c: 186:     tm0Limit = 100;
  2310  00121A  0E64               	movlw	100
  2311  00121C  6E68               	movwf	_tm0Limit^0,c
  2312  00121E                     
  2313                           ;motors.c: 187:     T0CONbits.TMR0ON = 1;
  2314  00121E  8ED5               	bsf	213,7,c	;volatile
  2315                           
  2316                           ;motors.c: 189:     while(keepMovingX || keepMovingY || keepMovingZ){
  2317  001220  EF93  F009         	goto	l4026
  2318  001224                     l4004:
  2319  001224  FFFF               	dw	65535	; assembler added errata NOP
  2320                           
  2321                           ;motors.c: 192:         if(tm0Error){
  2322  001226  505B               	movf	_tm0Error^0,w,c
  2323  001228  105C               	iorwf	(_tm0Error+1)^0,w,c
  2324  00122A  B4D8               	btfsc	status,2,c
  2325  00122C  EF1A  F009         	goto	u3351
  2326  001230  EF1D  F009         	goto	u3350
  2327  001234                     u3351:
  2328  001234  FFFF               	dw	65535	; assembler added errata NOP
  2329  001236  EF27  F009         	goto	l115
  2330  00123A                     u3350:
  2331  00123A  FFFF               	dw	65535	; assembler added errata NOP
  2332  00123C                     
  2333                           ;motors.c: 194:             LATAbits.LATA2 = 0;
  2334  00123C  9489               	bcf	137,2,c	;volatile
  2335                           
  2336                           ;motors.c: 195:             LATBbits.LATB4 = 0;
  2337  00123E  988A               	bcf	138,4,c	;volatile
  2338                           
  2339                           ;motors.c: 196:             LATCbits.LATC2 = 0;
  2340  001240  948B               	bcf	139,2,c	;volatile
  2341  001242                     
  2342                           ;motors.c: 198:             tm0Error = 3;
  2343  001242  0E00               	movlw	0
  2344  001244  6E5C               	movwf	(_tm0Error+1)^0,c
  2345  001246  0E03               	movlw	3
  2346  001248  6E5B               	movwf	_tm0Error^0,c
  2347                           
  2348                           ;motors.c: 199:             break;
  2349  00124A  EFB1  F009         	goto	l116
  2350  00124E                     l115:
  2351  00124E  FFFF               	dw	65535	; assembler added errata NOP
  2352                           
  2353                           ;motors.c: 206:         if(PORTEbits.RE0 || !keepMovingX){
  2354  001250  B084               	btfsc	132,0,c	;volatile
  2355  001252  EF2D  F009         	goto	u3361
  2356  001256  EF30  F009         	goto	u3360
  2357  00125A                     u3361:
  2358  00125A  FFFF               	dw	65535	; assembler added errata NOP
  2359  00125C  EF3A  F009         	goto	l4012
  2360  001260                     u3360:
  2361  001260  FFFF               	dw	65535	; assembler added errata NOP
  2362  001262  5016               	movf	resetPosition@keepMovingX^0,w,c
  2363  001264  A4D8               	btfss	status,2,c
  2364  001266  EF37  F009         	goto	u3371
  2365  00126A  EF3A  F009         	goto	u3370
  2366  00126E                     u3371:
  2367  00126E  FFFF               	dw	65535	; assembler added errata NOP
  2368  001270  EF3F  F009         	goto	l117
  2369  001274                     u3370:
  2370  001274                     l4012:
  2371  001274  FFFF               	dw	65535	; assembler added errata NOP
  2372                           
  2373                           ;motors.c: 208:             keepMovingX = 0;
  2374  001276  0E00               	movlw	0
  2375  001278  6E16               	movwf	resetPosition@keepMovingX^0,c
  2376                           
  2377                           ;motors.c: 209:         }else{
  2378  00127A  EF41  F009         	goto	l120
  2379  00127E                     l117:
  2380  00127E  FFFF               	dw	65535	; assembler added errata NOP
  2381                           
  2382                           ;motors.c: 211:             LATAbits.LATA2 = 1;
  2383  001280  8489               	bsf	137,2,c	;volatile
  2384  001282                     l120:
  2385  001282  FFFF               	dw	65535	; assembler added errata NOP
  2386                           
  2387                           ;motors.c: 215:         if(PORTEbits.RE1 || !keepMovingY){
  2388  001284  B284               	btfsc	132,1,c	;volatile
  2389  001286  EF47  F009         	goto	u3381
  2390  00128A  EF4A  F009         	goto	u3380
  2391  00128E                     u3381:
  2392  00128E  FFFF               	dw	65535	; assembler added errata NOP
  2393  001290  EF54  F009         	goto	l4016
  2394  001294                     u3380:
  2395  001294  FFFF               	dw	65535	; assembler added errata NOP
  2396  001296  5017               	movf	resetPosition@keepMovingY^0,w,c
  2397  001298  A4D8               	btfss	status,2,c
  2398  00129A  EF51  F009         	goto	u3391
  2399  00129E  EF54  F009         	goto	u3390
  2400  0012A2                     u3391:
  2401  0012A2  FFFF               	dw	65535	; assembler added errata NOP
  2402  0012A4  EF59  F009         	goto	l121
  2403  0012A8                     u3390:
  2404  0012A8                     l4016:
  2405  0012A8  FFFF               	dw	65535	; assembler added errata NOP
  2406                           
  2407                           ;motors.c: 217:             keepMovingY = 0;
  2408  0012AA  0E00               	movlw	0
  2409  0012AC  6E17               	movwf	resetPosition@keepMovingY^0,c
  2410                           
  2411                           ;motors.c: 218:         }else{
  2412  0012AE  EF5B  F009         	goto	l124
  2413  0012B2                     l121:
  2414  0012B2  FFFF               	dw	65535	; assembler added errata NOP
  2415                           
  2416                           ;motors.c: 220:             LATBbits.LATB4 = 1;
  2417  0012B4  888A               	bsf	138,4,c	;volatile
  2418  0012B6                     l124:
  2419  0012B6  FFFF               	dw	65535	; assembler added errata NOP
  2420                           
  2421                           ;motors.c: 224:         if(PORTEbits.RE2 || !keepMovingZ){
  2422  0012B8  B484               	btfsc	132,2,c	;volatile
  2423  0012BA  EF61  F009         	goto	u3401
  2424  0012BE  EF64  F009         	goto	u3400
  2425  0012C2                     u3401:
  2426  0012C2  FFFF               	dw	65535	; assembler added errata NOP
  2427  0012C4  EF6E  F009         	goto	l4020
  2428  0012C8                     u3400:
  2429  0012C8  FFFF               	dw	65535	; assembler added errata NOP
  2430  0012CA  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2431  0012CC  A4D8               	btfss	status,2,c
  2432  0012CE  EF6B  F009         	goto	u3411
  2433  0012D2  EF6E  F009         	goto	u3410
  2434  0012D6                     u3411:
  2435  0012D6  FFFF               	dw	65535	; assembler added errata NOP
  2436  0012D8  EF73  F009         	goto	l125
  2437  0012DC                     u3410:
  2438  0012DC                     l4020:
  2439  0012DC  FFFF               	dw	65535	; assembler added errata NOP
  2440                           
  2441                           ;motors.c: 226:             keepMovingZ = 0;
  2442  0012DE  0E00               	movlw	0
  2443  0012E0  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2444                           
  2445                           ;motors.c: 227:         }else{
  2446  0012E2  EF75  F009         	goto	l4022
  2447  0012E6                     l125:
  2448  0012E6  FFFF               	dw	65535	; assembler added errata NOP
  2449                           
  2450                           ;motors.c: 229:             LATCbits.LATC2 = 1;
  2451  0012E8  848B               	bsf	139,2,c	;volatile
  2452  0012EA                     l4022:
  2453  0012EA  FFFF               	dw	65535	; assembler added errata NOP
  2454  0012EC  EC47  F012         	call	_stepMade	;wreg free
  2455  0012F0  5012               	movf	?_stepMade^0,w,c
  2456  0012F2  1013               	iorwf	(?_stepMade+1)^0,w,c
  2457  0012F4  B4D8               	btfsc	status,2,c
  2458  0012F6  EF7F  F009         	goto	u3421
  2459  0012FA  EF82  F009         	goto	u3420
  2460  0012FE                     u3421:
  2461  0012FE  FFFF               	dw	65535	; assembler added errata NOP
  2462  001300  EF75  F009         	goto	l4022
  2463  001304                     u3420:
  2464  001304  FFFF               	dw	65535	; assembler added errata NOP
  2465  001306                     
  2466                           ;motors.c: 236:         LATAbits.LATA2 = 0;
  2467  001306  9489               	bcf	137,2,c	;volatile
  2468                           
  2469                           ;motors.c: 237:         LATBbits.LATB4 = 0;
  2470  001308  988A               	bcf	138,4,c	;volatile
  2471                           
  2472                           ;motors.c: 238:         LATCbits.LATC2 = 0;
  2473  00130A  948B               	bcf	139,2,c	;volatile
  2474  00130C                     l4024:
  2475  00130C  FFFF               	dw	65535	; assembler added errata NOP
  2476  00130E  EC47  F012         	call	_stepMade	;wreg free
  2477  001312  5012               	movf	?_stepMade^0,w,c
  2478  001314  1013               	iorwf	(?_stepMade+1)^0,w,c
  2479  001316  B4D8               	btfsc	status,2,c
  2480  001318  EF90  F009         	goto	u3431
  2481  00131C  EF93  F009         	goto	u3430
  2482  001320                     u3431:
  2483  001320  FFFF               	dw	65535	; assembler added errata NOP
  2484  001322  EF86  F009         	goto	l4024
  2485  001326                     u3430:
  2486  001326                     l4026:
  2487  001326  FFFF               	dw	65535	; assembler added errata NOP
  2488                           
  2489                           ;motors.c: 189:     while(keepMovingX || keepMovingY || keepMovingZ){
  2490  001328  5016               	movf	resetPosition@keepMovingX^0,w,c
  2491  00132A  A4D8               	btfss	status,2,c
  2492  00132C  EF9A  F009         	goto	u3441
  2493  001330  EF9D  F009         	goto	u3440
  2494  001334                     u3441:
  2495  001334  FFFF               	dw	65535	; assembler added errata NOP
  2496  001336  EF12  F009         	goto	l4004
  2497  00133A                     u3440:
  2498  00133A  FFFF               	dw	65535	; assembler added errata NOP
  2499  00133C  5017               	movf	resetPosition@keepMovingY^0,w,c
  2500  00133E  A4D8               	btfss	status,2,c
  2501  001340  EFA4  F009         	goto	u3451
  2502  001344  EFA7  F009         	goto	u3450
  2503  001348                     u3451:
  2504  001348  FFFF               	dw	65535	; assembler added errata NOP
  2505  00134A  EF12  F009         	goto	l4004
  2506  00134E                     u3450:
  2507  00134E  FFFF               	dw	65535	; assembler added errata NOP
  2508  001350  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2509  001352  A4D8               	btfss	status,2,c
  2510  001354  EFAE  F009         	goto	u3461
  2511  001358  EFB1  F009         	goto	u3460
  2512  00135C                     u3461:
  2513  00135C  FFFF               	dw	65535	; assembler added errata NOP
  2514  00135E  EF12  F009         	goto	l4004
  2515  001362                     u3460:
  2516  001362                     l116:
  2517  001362  FFFF               	dw	65535	; assembler added errata NOP
  2518                           
  2519                           ;motors.c: 245:     T0CONbits.TMR0ON = 0;
  2520  001364  9ED5               	bcf	213,7,c	;volatile
  2521                           
  2522                           ;motors.c: 246:     T2CONbits.TMR2ON = 0;
  2523  001366  94CA               	bcf	202,2,c	;volatile
  2524  001368                     
  2525                           ;motors.c: 248:     TMR0 = 0;
  2526  001368  0E00               	movlw	0
  2527  00136A  6ED7               	movwf	215,c	;volatile
  2528  00136C  0E00               	movlw	0
  2529  00136E  6ED6               	movwf	214,c	;volatile
  2530                           
  2531                           ;motors.c: 249:     TMR2 = 0;
  2532  001370  0E00               	movlw	0
  2533  001372  6ECC               	movwf	204,c	;volatile
  2534  001374                     
  2535                           ;motors.c: 252:     resetStep();
  2536  001374  EC9E  F012         	call	_resetStep	;wreg free
  2537  001378                     
  2538                           ;motors.c: 255:     return(tm0Error);
  2539  001378  505B               	movf	_tm0Error^0,w,c
  2540  00137A  0012               	return		;funcret
  2541  00137C  FFFF               	dw	65535	; errata NOP
  2542  00137E                     __end_of_resetPosition:
  2543                           	callstack 0
  2544                           
  2545 ;; *************** function _setStep *****************
  2546 ;; Defined at:
  2547 ;;		line 67 in file "motors.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;  step            1    wreg     unsigned char 
  2550 ;;  motor           1   17[COMRAM] unsigned char 
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;  step            1   20[COMRAM] unsigned char 
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      void 
  2555 ;; Registers used:
  2556 ;;		wreg, status,2, status,0
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2562 ;;      Params:         1       0       0       0       0       0       0
  2563 ;;      Locals:         1       0       0       0       0       0       0
  2564 ;;      Temps:          2       0       0       0       0       0       0
  2565 ;;      Totals:         4       0       0       0       0       0       0
  2566 ;;Total ram usage:        4 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:    4
  2569 ;; This function calls:
  2570 ;;		Nothing
  2571 ;; This function is called by:
  2572 ;;		_resetPosition
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           	psect	text9
  2577  001EBE                     __ptext9:
  2578                           	callstack 0
  2579  001EBE                     _setStep:
  2580                           	callstack 0
  2581  001EBE  FFFF               	dw	65535	; assembler added errata NOP
  2582                           
  2583                           ;incstack = 0
  2584                           ;setStep@step stored from wreg
  2585  001EC0  6E15               	movwf	setStep@step^0,c
  2586  001EC2                     
  2587                           ;motors.c: 68:     switch(motor){
  2588  001EC2  EFAC  F00F         	goto	l3672
  2589  001EC6                     l3664:
  2590  001EC6  FFFF               	dw	65535	; assembler added errata NOP
  2591                           
  2592                           ;motors.c: 71:             LATAbits.LATA5 = (step & 0x01);
  2593  001EC8  C015  F013         	movff	setStep@step,??_setStep
  2594  001ECC  0E01               	movlw	1
  2595  001ECE  1613               	andwf	??_setStep^0,f,c
  2596  001ED0  3A13               	swapf	??_setStep^0,f,c
  2597  001ED2  4613               	rlncf	??_setStep^0,f,c
  2598  001ED4  5089               	movf	137,w,c	;volatile
  2599  001ED6  1813               	xorwf	??_setStep^0,w,c
  2600  001ED8  0BDF               	andlw	-33
  2601  001EDA  1813               	xorwf	??_setStep^0,w,c
  2602  001EDC  6E89               	movwf	137,c	;volatile
  2603                           
  2604                           ;motors.c: 73:             LATBbits.LATB0 = (step & 0x02);
  2605  001EDE  C015  F013         	movff	setStep@step,??_setStep
  2606  001EE2  0E02               	movlw	2
  2607  001EE4  1613               	andwf	??_setStep^0,f,c
  2608  001EE6  508A               	movf	138,w,c	;volatile
  2609  001EE8  1813               	xorwf	??_setStep^0,w,c
  2610  001EEA  0BFE               	andlw	-2
  2611  001EEC  1813               	xorwf	??_setStep^0,w,c
  2612  001EEE  6E8A               	movwf	138,c	;volatile
  2613                           
  2614                           ;motors.c: 74:             break;
  2615  001EF0  EFC7  F00F         	goto	l83
  2616  001EF4                     l3666:
  2617  001EF4  FFFF               	dw	65535	; assembler added errata NOP
  2618                           
  2619                           ;motors.c: 76:             LATBbits.LATB6 = (step & 0x01);
  2620  001EF6  C015  F013         	movff	setStep@step,??_setStep
  2621  001EFA  0E01               	movlw	1
  2622  001EFC  1613               	andwf	??_setStep^0,f,c
  2623  001EFE  3A13               	swapf	??_setStep^0,f,c
  2624  001F00  4613               	rlncf	??_setStep^0,f,c
  2625  001F02  4613               	rlncf	??_setStep^0,f,c
  2626  001F04  508A               	movf	138,w,c	;volatile
  2627  001F06  1813               	xorwf	??_setStep^0,w,c
  2628  001F08  0BBF               	andlw	-65
  2629  001F0A  1813               	xorwf	??_setStep^0,w,c
  2630  001F0C  6E8A               	movwf	138,c	;volatile
  2631                           
  2632                           ;motors.c: 77:             LATBbits.LATB7 = (step & 0x02);
  2633  001F0E  C015  F013         	movff	setStep@step,??_setStep
  2634  001F12  0E02               	movlw	2
  2635  001F14  1613               	andwf	??_setStep^0,f,c
  2636  001F16  3213               	rrcf	??_setStep^0,f,c
  2637  001F18  3213               	rrcf	??_setStep^0,f,c
  2638  001F1A  508A               	movf	138,w,c	;volatile
  2639  001F1C  1813               	xorwf	??_setStep^0,w,c
  2640  001F1E  0B7F               	andlw	-129
  2641  001F20  1813               	xorwf	??_setStep^0,w,c
  2642  001F22  6E8A               	movwf	138,c	;volatile
  2643                           
  2644                           ;motors.c: 78:             break;
  2645  001F24  EFC7  F00F         	goto	l83
  2646  001F28                     l3668:
  2647  001F28  FFFF               	dw	65535	; assembler added errata NOP
  2648                           
  2649                           ;motors.c: 80:             LATCbits.LATC4 = (step & 0x01);
  2650  001F2A  C015  F013         	movff	setStep@step,??_setStep
  2651  001F2E  0E01               	movlw	1
  2652  001F30  1613               	andwf	??_setStep^0,f,c
  2653  001F32  3A13               	swapf	??_setStep^0,f,c
  2654  001F34  508B               	movf	139,w,c	;volatile
  2655  001F36  1813               	xorwf	??_setStep^0,w,c
  2656  001F38  0BEF               	andlw	-17
  2657  001F3A  1813               	xorwf	??_setStep^0,w,c
  2658  001F3C  6E8B               	movwf	139,c	;volatile
  2659                           
  2660                           ;motors.c: 81:             LATCbits.LATC5 = (step & 0x02);
  2661  001F3E  C015  F013         	movff	setStep@step,??_setStep
  2662  001F42  0E02               	movlw	2
  2663  001F44  1613               	andwf	??_setStep^0,f,c
  2664  001F46  3A13               	swapf	??_setStep^0,f,c
  2665  001F48  4613               	rlncf	??_setStep^0,f,c
  2666  001F4A  508B               	movf	139,w,c	;volatile
  2667  001F4C  1813               	xorwf	??_setStep^0,w,c
  2668  001F4E  0BDF               	andlw	-33
  2669  001F50  1813               	xorwf	??_setStep^0,w,c
  2670  001F52  6E8B               	movwf	139,c	;volatile
  2671                           
  2672                           ;motors.c: 82:             break;
  2673  001F54  EFC7  F00F         	goto	l83
  2674  001F58                     l3672:
  2675  001F58  FFFF               	dw	65535	; assembler added errata NOP
  2676  001F5A  5012               	movf	setStep@motor^0,w,c
  2677  001F5C  6E13               	movwf	??_setStep^0,c
  2678  001F5E  6A14               	clrf	(??_setStep+1)^0,c
  2679                           
  2680                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2681                           ; Switch size 1, requested type "simple"
  2682                           ; Number of cases is 1, Range of values is 0 to 0
  2683                           ; switch strategies available:
  2684                           ; Name         Instructions Cycles
  2685                           ; simple_byte            4     3 (average)
  2686                           ;	Chosen strategy is simple_byte
  2687  001F60  5014               	movf	(??_setStep+1)^0,w,c
  2688  001F62  0A00               	xorlw	0	; case 0
  2689  001F64  B4D8               	btfsc	status,2,c
  2690  001F66  EFB7  F00F         	goto	l4494
  2691  001F6A  EFC7  F00F         	goto	l83
  2692  001F6E                     l4494:
  2693  001F6E  FFFF               	dw	65535	; assembler added errata NOP
  2694                           
  2695                           ; Switch size 1, requested type "simple"
  2696                           ; Number of cases is 3, Range of values is 0 to 2
  2697                           ; switch strategies available:
  2698                           ; Name         Instructions Cycles
  2699                           ; simple_byte           10     6 (average)
  2700                           ;	Chosen strategy is simple_byte
  2701  001F70  5013               	movf	??_setStep^0,w,c
  2702  001F72  0A00               	xorlw	0	; case 0
  2703  001F74  B4D8               	btfsc	status,2,c
  2704  001F76  EF63  F00F         	goto	l3664
  2705  001F7A  0A01               	xorlw	1	; case 1
  2706  001F7C  B4D8               	btfsc	status,2,c
  2707  001F7E  EF7A  F00F         	goto	l3666
  2708  001F82  0A03               	xorlw	3	; case 2
  2709  001F84  B4D8               	btfsc	status,2,c
  2710  001F86  EF94  F00F         	goto	l3668
  2711  001F8A  EFC7  F00F         	goto	l83
  2712  001F8E                     l83:
  2713  001F8E  FFFF               	dw	65535	; assembler added errata NOP
  2714  001F90  0012               	return		;funcret
  2715  001F92  FFFF               	dw	65535	; errata NOP
  2716  001F94                     __end_of_setStep:
  2717                           	callstack 0
  2718                           
  2719 ;; *************** function _setDecay *****************
  2720 ;; Defined at:
  2721 ;;		line 136 in file "motors.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;  decay           1    wreg     unsigned char 
  2724 ;;  motor           1   17[COMRAM] unsigned char 
  2725 ;; Auto vars:     Size  Location     Type
  2726 ;;  decay           1   20[COMRAM] unsigned char 
  2727 ;; Return value:  Size  Location     Type
  2728 ;;                  1    wreg      void 
  2729 ;; Registers used:
  2730 ;;		wreg, status,2, status,0
  2731 ;; Tracked objects:
  2732 ;;		On entry : 0/0
  2733 ;;		On exit  : 0/0
  2734 ;;		Unchanged: 0/0
  2735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2736 ;;      Params:         1       0       0       0       0       0       0
  2737 ;;      Locals:         1       0       0       0       0       0       0
  2738 ;;      Temps:          2       0       0       0       0       0       0
  2739 ;;      Totals:         4       0       0       0       0       0       0
  2740 ;;Total ram usage:        4 bytes
  2741 ;; Hardware stack levels used:    1
  2742 ;; Hardware stack levels required when called:    4
  2743 ;; This function calls:
  2744 ;;		Nothing
  2745 ;; This function is called by:
  2746 ;;		_resetPosition
  2747 ;; This function uses a non-reentrant model
  2748 ;;
  2749                           
  2750                           	psect	text10
  2751  0020CA                     __ptext10:
  2752                           	callstack 0
  2753  0020CA                     _setDecay:
  2754                           	callstack 0
  2755  0020CA  FFFF               	dw	65535	; assembler added errata NOP
  2756                           
  2757                           ;incstack = 0
  2758                           ;setDecay@decay stored from wreg
  2759  0020CC  6E15               	movwf	setDecay@decay^0,c
  2760  0020CE                     
  2761                           ;motors.c: 137:     switch(motor){
  2762  0020CE  EF81  F010         	goto	l3704
  2763  0020D2                     l3696:
  2764  0020D2  FFFF               	dw	65535	; assembler added errata NOP
  2765                           
  2766                           ;motors.c: 139:             LATBbits.LATB2 = decay;
  2767  0020D4  B015               	btfsc	setDecay@decay^0,0,c
  2768  0020D6  D002               	bra	u2955
  2769  0020D8  948A               	bcf	138,2,c	;volatile
  2770  0020DA  D001               	bra	u2956
  2771  0020DC                     u2955:
  2772  0020DC  848A               	bsf	138,2,c	;volatile
  2773  0020DE                     u2956:
  2774                           
  2775                           ;motors.c: 140:             break;
  2776  0020DE  EF9C  F010         	goto	l110
  2777  0020E2                     l3698:
  2778  0020E2  FFFF               	dw	65535	; assembler added errata NOP
  2779                           
  2780                           ;motors.c: 142:             LATCbits.LATC0 = decay;
  2781  0020E4  B015               	btfsc	setDecay@decay^0,0,c
  2782  0020E6  D002               	bra	u2965
  2783  0020E8  908B               	bcf	139,0,c	;volatile
  2784  0020EA  D001               	bra	u2966
  2785  0020EC                     u2965:
  2786  0020EC  808B               	bsf	139,0,c	;volatile
  2787  0020EE                     u2966:
  2788                           
  2789                           ;motors.c: 143:             break;
  2790  0020EE  EF9C  F010         	goto	l110
  2791  0020F2                     l3700:
  2792  0020F2  FFFF               	dw	65535	; assembler added errata NOP
  2793                           
  2794                           ;motors.c: 145:             LATDbits.LATD0 = decay;
  2795  0020F4  B015               	btfsc	setDecay@decay^0,0,c
  2796  0020F6  D002               	bra	u2975
  2797  0020F8  908C               	bcf	140,0,c	;volatile
  2798  0020FA  D001               	bra	u2976
  2799  0020FC                     u2975:
  2800  0020FC  808C               	bsf	140,0,c	;volatile
  2801  0020FE                     u2976:
  2802                           
  2803                           ;motors.c: 146:             break;
  2804  0020FE  EF9C  F010         	goto	l110
  2805  002102                     l3704:
  2806  002102  FFFF               	dw	65535	; assembler added errata NOP
  2807  002104  5012               	movf	setDecay@motor^0,w,c
  2808  002106  6E13               	movwf	??_setDecay^0,c
  2809  002108  6A14               	clrf	(??_setDecay+1)^0,c
  2810                           
  2811                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2812                           ; Switch size 1, requested type "simple"
  2813                           ; Number of cases is 1, Range of values is 0 to 0
  2814                           ; switch strategies available:
  2815                           ; Name         Instructions Cycles
  2816                           ; simple_byte            4     3 (average)
  2817                           ;	Chosen strategy is simple_byte
  2818  00210A  5014               	movf	(??_setDecay+1)^0,w,c
  2819  00210C  0A00               	xorlw	0	; case 0
  2820  00210E  B4D8               	btfsc	status,2,c
  2821  002110  EF8C  F010         	goto	l4496
  2822  002114  EF9C  F010         	goto	l110
  2823  002118                     l4496:
  2824  002118  FFFF               	dw	65535	; assembler added errata NOP
  2825                           
  2826                           ; Switch size 1, requested type "simple"
  2827                           ; Number of cases is 3, Range of values is 0 to 2
  2828                           ; switch strategies available:
  2829                           ; Name         Instructions Cycles
  2830                           ; simple_byte           10     6 (average)
  2831                           ;	Chosen strategy is simple_byte
  2832  00211A  5013               	movf	??_setDecay^0,w,c
  2833  00211C  0A00               	xorlw	0	; case 0
  2834  00211E  B4D8               	btfsc	status,2,c
  2835  002120  EF69  F010         	goto	l3696
  2836  002124  0A01               	xorlw	1	; case 1
  2837  002126  B4D8               	btfsc	status,2,c
  2838  002128  EF71  F010         	goto	l3698
  2839  00212C  0A03               	xorlw	3	; case 2
  2840  00212E  B4D8               	btfsc	status,2,c
  2841  002130  EF79  F010         	goto	l3700
  2842  002134  EF9C  F010         	goto	l110
  2843  002138                     l110:
  2844  002138  FFFF               	dw	65535	; assembler added errata NOP
  2845  00213A  0012               	return		;funcret
  2846  00213C  FFFF               	dw	65535	; errata NOP
  2847  00213E                     __end_of_setDecay:
  2848                           	callstack 0
  2849                           
  2850 ;; *************** function _enableMotor *****************
  2851 ;; Defined at:
  2852 ;;		line 94 in file "motors.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;  enable          1    wreg     unsigned char 
  2855 ;;  motor           1   17[COMRAM] unsigned char 
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;  enable          1   20[COMRAM] unsigned char 
  2858 ;; Return value:  Size  Location     Type
  2859 ;;                  1    wreg      void 
  2860 ;; Registers used:
  2861 ;;		wreg, status,2, status,0
  2862 ;; Tracked objects:
  2863 ;;		On entry : 0/0
  2864 ;;		On exit  : 0/0
  2865 ;;		Unchanged: 0/0
  2866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2867 ;;      Params:         1       0       0       0       0       0       0
  2868 ;;      Locals:         1       0       0       0       0       0       0
  2869 ;;      Temps:          2       0       0       0       0       0       0
  2870 ;;      Totals:         4       0       0       0       0       0       0
  2871 ;;Total ram usage:        4 bytes
  2872 ;; Hardware stack levels used:    1
  2873 ;; Hardware stack levels required when called:    4
  2874 ;; This function calls:
  2875 ;;		Nothing
  2876 ;; This function is called by:
  2877 ;;		_resetPosition
  2878 ;;		_main
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           	psect	text11
  2883  00213E                     __ptext11:
  2884                           	callstack 0
  2885  00213E                     _enableMotor:
  2886                           	callstack 0
  2887  00213E  FFFF               	dw	65535	; assembler added errata NOP
  2888                           
  2889                           ;incstack = 0
  2890                           ;enableMotor@enable stored from wreg
  2891  002140  6E15               	movwf	enableMotor@enable^0,c
  2892  002142                     
  2893                           ;motors.c: 95:     switch(motor){
  2894  002142  EFBB  F010         	goto	l3688
  2895  002146                     l3680:
  2896  002146  FFFF               	dw	65535	; assembler added errata NOP
  2897                           
  2898                           ;motors.c: 97:             LATAbits.LATA3 = enable;
  2899  002148  B015               	btfsc	enableMotor@enable^0,0,c
  2900  00214A  D002               	bra	u2925
  2901  00214C  9689               	bcf	137,3,c	;volatile
  2902  00214E  D001               	bra	u2926
  2903  002150                     u2925:
  2904  002150  8689               	bsf	137,3,c	;volatile
  2905  002152                     u2926:
  2906                           
  2907                           ;motors.c: 98:             break;
  2908  002152  EFD6  F010         	goto	l92
  2909  002156                     l3682:
  2910  002156  FFFF               	dw	65535	; assembler added errata NOP
  2911                           
  2912                           ;motors.c: 100:             LATBbits.LATB5 = enable;
  2913  002158  B015               	btfsc	enableMotor@enable^0,0,c
  2914  00215A  D002               	bra	u2935
  2915  00215C  9A8A               	bcf	138,5,c	;volatile
  2916  00215E  D001               	bra	u2936
  2917  002160                     u2935:
  2918  002160  8A8A               	bsf	138,5,c	;volatile
  2919  002162                     u2936:
  2920                           
  2921                           ;motors.c: 101:             break;
  2922  002162  EFD6  F010         	goto	l92
  2923  002166                     l3684:
  2924  002166  FFFF               	dw	65535	; assembler added errata NOP
  2925                           
  2926                           ;motors.c: 103:             LATCbits.LATC3 = enable;
  2927  002168  B015               	btfsc	enableMotor@enable^0,0,c
  2928  00216A  D002               	bra	u2945
  2929  00216C  968B               	bcf	139,3,c	;volatile
  2930  00216E  D001               	bra	u2946
  2931  002170                     u2945:
  2932  002170  868B               	bsf	139,3,c	;volatile
  2933  002172                     u2946:
  2934                           
  2935                           ;motors.c: 104:             break;
  2936  002172  EFD6  F010         	goto	l92
  2937  002176                     l3688:
  2938  002176  FFFF               	dw	65535	; assembler added errata NOP
  2939  002178  5012               	movf	enableMotor@motor^0,w,c
  2940  00217A  6E13               	movwf	??_enableMotor^0,c
  2941  00217C  6A14               	clrf	(??_enableMotor+1)^0,c
  2942                           
  2943                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2944                           ; Switch size 1, requested type "simple"
  2945                           ; Number of cases is 1, Range of values is 0 to 0
  2946                           ; switch strategies available:
  2947                           ; Name         Instructions Cycles
  2948                           ; simple_byte            4     3 (average)
  2949                           ;	Chosen strategy is simple_byte
  2950  00217E  5014               	movf	(??_enableMotor+1)^0,w,c
  2951  002180  0A00               	xorlw	0	; case 0
  2952  002182  B4D8               	btfsc	status,2,c
  2953  002184  EFC6  F010         	goto	l4498
  2954  002188  EFD6  F010         	goto	l92
  2955  00218C                     l4498:
  2956  00218C  FFFF               	dw	65535	; assembler added errata NOP
  2957                           
  2958                           ; Switch size 1, requested type "simple"
  2959                           ; Number of cases is 3, Range of values is 0 to 2
  2960                           ; switch strategies available:
  2961                           ; Name         Instructions Cycles
  2962                           ; simple_byte           10     6 (average)
  2963                           ;	Chosen strategy is simple_byte
  2964  00218E  5013               	movf	??_enableMotor^0,w,c
  2965  002190  0A00               	xorlw	0	; case 0
  2966  002192  B4D8               	btfsc	status,2,c
  2967  002194  EFA3  F010         	goto	l3680
  2968  002198  0A01               	xorlw	1	; case 1
  2969  00219A  B4D8               	btfsc	status,2,c
  2970  00219C  EFAB  F010         	goto	l3682
  2971  0021A0  0A03               	xorlw	3	; case 2
  2972  0021A2  B4D8               	btfsc	status,2,c
  2973  0021A4  EFB3  F010         	goto	l3684
  2974  0021A8  EFD6  F010         	goto	l92
  2975  0021AC                     l92:
  2976  0021AC  FFFF               	dw	65535	; assembler added errata NOP
  2977  0021AE  0012               	return		;funcret
  2978  0021B0  FFFF               	dw	65535	; errata NOP
  2979  0021B2                     __end_of_enableMotor:
  2980                           	callstack 0
  2981                           
  2982 ;; *************** function _reduceSeq *****************
  2983 ;; Defined at:
  2984 ;;		line 89 in file "usart.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;		None
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;		None
  2989 ;; Return value:  Size  Location     Type
  2990 ;;                  1    wreg      void 
  2991 ;; Registers used:
  2992 ;;		status,2, status,0
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2998 ;;      Params:         0       0       0       0       0       0       0
  2999 ;;      Locals:         0       0       0       0       0       0       0
  3000 ;;      Temps:          0       0       0       0       0       0       0
  3001 ;;      Totals:         0       0       0       0       0       0       0
  3002 ;;Total ram usage:        0 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    4
  3005 ;; This function calls:
  3006 ;;		Nothing
  3007 ;; This function is called by:
  3008 ;;		_main
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           	psect	text12
  3013  002564                     __ptext12:
  3014                           	callstack 0
  3015  002564                     _reduceSeq:
  3016                           	callstack 0
  3017  002564  FFFF               	dw	65535	; assembler added errata NOP
  3018  002566                     
  3019                           ;usart.c: 90:     dataCounter--;
  3020  002566  0661               	decf	_dataCounter^0,f,c
  3021  002568  0012               	return		;funcret
  3022  00256A  FFFF               	dw	65535	; errata NOP
  3023  00256C                     __end_of_reduceSeq:
  3024                           	callstack 0
  3025                           
  3026 ;; *************** function _readSeq *****************
  3027 ;; Defined at:
  3028 ;;		line 96 in file "usart.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;		None
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;		None
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      unsigned char 
  3035 ;; Registers used:
  3036 ;;		wreg, status,2
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3042 ;;      Params:         0       0       0       0       0       0       0
  3043 ;;      Locals:         0       0       0       0       0       0       0
  3044 ;;      Temps:          0       0       0       0       0       0       0
  3045 ;;      Totals:         0       0       0       0       0       0       0
  3046 ;;Total ram usage:        0 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; Hardware stack levels required when called:    4
  3049 ;; This function calls:
  3050 ;;		Nothing
  3051 ;; This function is called by:
  3052 ;;		_main
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text13
  3057  00256C                     __ptext13:
  3058                           	callstack 0
  3059  00256C                     _readSeq:
  3060                           	callstack 0
  3061  00256C  FFFF               	dw	65535	; assembler added errata NOP
  3062  00256E                     
  3063                           ;usart.c: 97:     return dataCounter;
  3064  00256E  5061               	movf	_dataCounter^0,w,c
  3065  002570  0012               	return		;funcret
  3066  002572  FFFF               	dw	65535	; errata NOP
  3067  002574                     __end_of_readSeq:
  3068                           	callstack 0
  3069                           
  3070 ;; *************** function _newSequence *****************
  3071 ;; Defined at:
  3072 ;;		line 104 in file "usart.c"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;		None
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;		None
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  1    wreg      unsigned char 
  3079 ;; Registers used:
  3080 ;;		wreg, status,2
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3086 ;;      Params:         0       0       0       0       0       0       0
  3087 ;;      Locals:         0       0       0       0       0       0       0
  3088 ;;      Temps:          0       0       0       0       0       0       0
  3089 ;;      Totals:         0       0       0       0       0       0       0
  3090 ;;Total ram usage:        0 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; Hardware stack levels required when called:    4
  3093 ;; This function calls:
  3094 ;;		Nothing
  3095 ;; This function is called by:
  3096 ;;		_main
  3097 ;; This function uses a non-reentrant model
  3098 ;;
  3099                           
  3100                           	psect	text14
  3101  002574                     __ptext14:
  3102                           	callstack 0
  3103  002574                     _newSequence:
  3104                           	callstack 0
  3105  002574  FFFF               	dw	65535	; assembler added errata NOP
  3106  002576                     
  3107                           ;usart.c: 105:     return _newSequence;
  3108  002576  505F               	movf	__newSequence^0,w,c
  3109  002578  0012               	return		;funcret
  3110  00257A  FFFF               	dw	65535	; errata NOP
  3111  00257C                     __end_of_newSequence:
  3112                           	callstack 0
  3113                           
  3114 ;; *************** function _interruptInit *****************
  3115 ;; Defined at:
  3116 ;;		line 104 in file "main.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;		None
  3119 ;; Auto vars:     Size  Location     Type
  3120 ;;		None
  3121 ;; Return value:  Size  Location     Type
  3122 ;;                  1    wreg      void 
  3123 ;; Registers used:
  3124 ;;		None
  3125 ;; Tracked objects:
  3126 ;;		On entry : 0/0
  3127 ;;		On exit  : 0/0
  3128 ;;		Unchanged: 0/0
  3129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3130 ;;      Params:         0       0       0       0       0       0       0
  3131 ;;      Locals:         0       0       0       0       0       0       0
  3132 ;;      Temps:          0       0       0       0       0       0       0
  3133 ;;      Totals:         0       0       0       0       0       0       0
  3134 ;;Total ram usage:        0 bytes
  3135 ;; Hardware stack levels used:    1
  3136 ;; Hardware stack levels required when called:    4
  3137 ;; This function calls:
  3138 ;;		Nothing
  3139 ;; This function is called by:
  3140 ;;		_main
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           	psect	text15
  3145  00237E                     __ptext15:
  3146                           	callstack 0
  3147  00237E                     _interruptInit:
  3148                           	callstack 0
  3149  00237E  FFFF               	dw	65535	; assembler added errata NOP
  3150  002380                     
  3151                           ;main.c: 106:     if(!INTCONbits.GIE){
  3152  002380  BEF2               	btfsc	242,7,c	;volatile
  3153  002382  EFC5  F011         	goto	u3471
  3154  002386  EFC8  F011         	goto	u3470
  3155  00238A                     u3471:
  3156  00238A  FFFF               	dw	65535	; assembler added errata NOP
  3157  00238C  EFCA  F011         	goto	l330
  3158  002390                     u3470:
  3159  002390  FFFF               	dw	65535	; assembler added errata NOP
  3160  002392                     
  3161                           ;main.c: 107:         INTCONbits.GIE = 1;
  3162  002392  8EF2               	bsf	242,7,c	;volatile
  3163  002394                     l330:
  3164  002394  FFFF               	dw	65535	; assembler added errata NOP
  3165                           
  3166                           ;main.c: 109:     if(!INTCONbits.PEIE){
  3167  002396  BCF2               	btfsc	242,6,c	;volatile
  3168  002398  EFD0  F011         	goto	u3481
  3169  00239C  EFD3  F011         	goto	u3480
  3170  0023A0                     u3481:
  3171  0023A0  FFFF               	dw	65535	; assembler added errata NOP
  3172  0023A2  EFD5  F011         	goto	l331
  3173  0023A6                     u3480:
  3174  0023A6  FFFF               	dw	65535	; assembler added errata NOP
  3175  0023A8                     
  3176                           ;main.c: 110:         INTCONbits.PEIE = 1;
  3177  0023A8  8CF2               	bsf	242,6,c	;volatile
  3178  0023AA                     l331:
  3179  0023AA  FFFF               	dw	65535	; assembler added errata NOP
  3180                           
  3181                           ;main.c: 114:     RCONbits.IPEN = 1;
  3182  0023AC  8ED0               	bsf	208,7,c	;volatile
  3183                           
  3184                           ;main.c: 115:     INTCONbits.T0IE = 1;
  3185  0023AE  8AF2               	bsf	242,5,c	;volatile
  3186                           
  3187                           ;main.c: 116:     PIE1bits.TMR2IE = 1;
  3188  0023B0  829D               	bsf	157,1,c	;volatile
  3189                           
  3190                           ;main.c: 117:     PIE1bits.RC1IE = 1;
  3191  0023B2  8A9D               	bsf	157,5,c	;volatile
  3192  0023B4  0012               	return		;funcret
  3193  0023B6  FFFF               	dw	65535	; errata NOP
  3194  0023B8                     __end_of_interruptInit:
  3195                           	callstack 0
  3196                           
  3197 ;; *************** function _initPinMotors *****************
  3198 ;; Defined at:
  3199 ;;		line 42 in file "motors.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;		None
  3202 ;; Auto vars:     Size  Location     Type
  3203 ;;		None
  3204 ;; Return value:  Size  Location     Type
  3205 ;;                  1    wreg      void 
  3206 ;; Registers used:
  3207 ;;		wreg, status,2, status,0
  3208 ;; Tracked objects:
  3209 ;;		On entry : 0/0
  3210 ;;		On exit  : 0/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3213 ;;      Params:         0       0       0       0       0       0       0
  3214 ;;      Locals:         0       0       0       0       0       0       0
  3215 ;;      Temps:          0       0       0       0       0       0       0
  3216 ;;      Totals:         0       0       0       0       0       0       0
  3217 ;;Total ram usage:        0 bytes
  3218 ;; Hardware stack levels used:    1
  3219 ;; Hardware stack levels required when called:    4
  3220 ;; This function calls:
  3221 ;;		Nothing
  3222 ;; This function is called by:
  3223 ;;		_main
  3224 ;; This function uses a non-reentrant model
  3225 ;;
  3226                           
  3227                           	psect	text16
  3228  002410                     __ptext16:
  3229                           	callstack 0
  3230  002410                     _initPinMotors:
  3231                           	callstack 0
  3232  002410  FFFF               	dw	65535	; assembler added errata NOP
  3233  002412                     
  3234                           ;motors.c: 44:     ADCON1bits.PCFG = 0x06;
  3235  002412  50C1               	movf	193,w,c	;volatile
  3236  002414  0BF0               	andlw	-16
  3237  002416  0906               	iorlw	6
  3238  002418  6EC1               	movwf	193,c	;volatile
  3239  00241A                     
  3240                           ;motors.c: 45:     TRISA &= 0b11010001;
  3241  00241A  0ED1               	movlw	209
  3242  00241C  1692               	andwf	146,f,c	;volatile
  3243  00241E                     
  3244                           ;motors.c: 47:     TRISB &= 0b00000010;
  3245  00241E  0E02               	movlw	2
  3246  002420  1693               	andwf	147,f,c	;volatile
  3247  002422                     
  3248                           ;motors.c: 48:     TRISC &= 0b11000000;
  3249  002422  0EC0               	movlw	192
  3250  002424  1694               	andwf	148,f,c	;volatile
  3251  002426                     
  3252                           ;motors.c: 49:     TRISD &= 0b11000000;
  3253  002426  0EC0               	movlw	192
  3254  002428  1695               	andwf	149,f,c	;volatile
  3255  00242A                     
  3256                           ;motors.c: 52:     TRISEbits.TRISE0 = 1;
  3257  00242A  8096               	bsf	150,0,c	;volatile
  3258  00242C                     
  3259                           ;motors.c: 53:     TRISEbits.TRISE1 = 1;
  3260  00242C  8296               	bsf	150,1,c	;volatile
  3261  00242E                     
  3262                           ;motors.c: 54:     TRISEbits.TRISE2 = 1;
  3263  00242E  8496               	bsf	150,2,c	;volatile
  3264  002430                     
  3265                           ;motors.c: 57:     TRISDbits.TRISD7 = 1;
  3266  002430  8E95               	bsf	149,7,c	;volatile
  3267  002432  0012               	return		;funcret
  3268  002434  FFFF               	dw	65535	; errata NOP
  3269  002436                     __end_of_initPinMotors:
  3270                           	callstack 0
  3271                           
  3272 ;; *************** function _initADC *****************
  3273 ;; Defined at:
  3274 ;;		line 18 in file "adc.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;		None
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;		None
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  1    wreg      void 
  3281 ;; Registers used:
  3282 ;;		wreg, status,2
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3288 ;;      Params:         0       0       0       0       0       0       0
  3289 ;;      Locals:         0       0       0       0       0       0       0
  3290 ;;      Temps:          0       0       0       0       0       0       0
  3291 ;;      Totals:         0       0       0       0       0       0       0
  3292 ;;Total ram usage:        0 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    4
  3295 ;; This function calls:
  3296 ;;		Nothing
  3297 ;; This function is called by:
  3298 ;;		_main
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text17
  3303  002436                     __ptext17:
  3304                           	callstack 0
  3305  002436                     _initADC:
  3306                           	callstack 0
  3307  002436  FFFF               	dw	65535	; assembler added errata NOP
  3308  002438                     
  3309                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3310  002438  50C2               	movf	194,w,c	;volatile
  3311  00243A  0B3F               	andlw	-193
  3312  00243C  0940               	iorlw	64
  3313  00243E  6EC2               	movwf	194,c	;volatile
  3314  002440                     
  3315                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3316  002440  8CC1               	bsf	193,6,c	;volatile
  3317                           
  3318                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3319  002442  0EC7               	movlw	-57
  3320  002444  16C2               	andwf	194,f,c	;volatile
  3321  002446                     
  3322                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3323  002446  94C2               	bcf	194,2,c	;volatile
  3324  002448                     
  3325                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3326  002448  90C2               	bcf	194,0,c	;volatile
  3327  00244A                     
  3328                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3329  00244A  9EC1               	bcf	193,7,c	;volatile
  3330                           
  3331                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3332  00244C  50C1               	movf	193,w,c	;volatile
  3333  00244E  0BF0               	andlw	-16
  3334  002450  090E               	iorlw	14
  3335  002452  6EC1               	movwf	193,c	;volatile
  3336  002454                     
  3337                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3338  002454  8C9D               	bsf	157,6,c	;volatile
  3339  002456                     
  3340                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3341  002456  8C9F               	bsf	159,6,c	;volatile
  3342  002458  0012               	return		;funcret
  3343  00245A  FFFF               	dw	65535	; errata NOP
  3344  00245C                     __end_of_initADC:
  3345                           	callstack 0
  3346                           
  3347 ;; *************** function _getNewSequence *****************
  3348 ;; Defined at:
  3349 ;;		line 213 in file "usart.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;		None
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;		None
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  2   17[COMRAM] PTR struct .
  3356 ;; Registers used:
  3357 ;;		wreg, status,2, status,0
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3363 ;;      Params:         2       0       0       0       0       0       0
  3364 ;;      Locals:         0       0       0       0       0       0       0
  3365 ;;      Temps:          0       0       0       0       0       0       0
  3366 ;;      Totals:         2       0       0       0       0       0       0
  3367 ;;Total ram usage:        2 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; Hardware stack levels required when called:    4
  3370 ;; This function calls:
  3371 ;;		Nothing
  3372 ;; This function is called by:
  3373 ;;		_main
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           	psect	text18
  3378  0024B4                     __ptext18:
  3379                           	callstack 0
  3380  0024B4                     _getNewSequence:
  3381                           	callstack 0
  3382  0024B4  FFFF               	dw	65535	; assembler added errata NOP
  3383  0024B6                     
  3384                           ;usart.c: 214:     return(&newSequenceData);
  3385  0024B6  0EEF               	movlw	low _newSequenceData
  3386  0024B8  6E12               	movwf	?_getNewSequence^0,c
  3387  0024BA  0E00               	movlw	high _newSequenceData
  3388  0024BC  6E13               	movwf	(?_getNewSequence+1)^0,c
  3389  0024BE  0012               	return		;funcret
  3390  0024C0  FFFF               	dw	65535	; errata NOP
  3391  0024C2                     __end_of_getNewSequence:
  3392                           	callstack 0
  3393                           
  3394 ;; *************** function _fatalError *****************
  3395 ;; Defined at:
  3396 ;;		line 100 in file "usart.c"
  3397 ;; Parameters:    Size  Location     Type
  3398 ;;		None
  3399 ;; Auto vars:     Size  Location     Type
  3400 ;;		None
  3401 ;; Return value:  Size  Location     Type
  3402 ;;                  1    wreg      unsigned char 
  3403 ;; Registers used:
  3404 ;;		wreg, status,2
  3405 ;; Tracked objects:
  3406 ;;		On entry : 0/0
  3407 ;;		On exit  : 0/0
  3408 ;;		Unchanged: 0/0
  3409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3410 ;;      Params:         0       0       0       0       0       0       0
  3411 ;;      Locals:         0       0       0       0       0       0       0
  3412 ;;      Temps:          0       0       0       0       0       0       0
  3413 ;;      Totals:         0       0       0       0       0       0       0
  3414 ;;Total ram usage:        0 bytes
  3415 ;; Hardware stack levels used:    1
  3416 ;; Hardware stack levels required when called:    4
  3417 ;; This function calls:
  3418 ;;		Nothing
  3419 ;; This function is called by:
  3420 ;;		_main
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424                           	psect	text19
  3425  00257C                     __ptext19:
  3426                           	callstack 0
  3427  00257C                     _fatalError:
  3428                           	callstack 0
  3429  00257C  FFFF               	dw	65535	; assembler added errata NOP
  3430  00257E                     
  3431                           ;usart.c: 101:     return _fatalError;
  3432  00257E  5060               	movf	__fatalError^0,w,c
  3433  002580  0012               	return		;funcret
  3434  002582  FFFF               	dw	65535	; errata NOP
  3435  002584                     __end_of_fatalError:
  3436                           	callstack 0
  3437                           
  3438 ;; *************** function _executeData *****************
  3439 ;; Defined at:
  3440 ;;		line 127 in file "main.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;		None
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;  data            2    1[BANK1 ] PTR struct .
  3445 ;;		 -> dataSequence(20), 
  3446 ;;  errCode         1    0[BANK1 ] unsigned char 
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  1    wreg      unsigned char 
  3449 ;; Registers used:
  3450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3456 ;;      Params:         0       0       0       0       0       0       0
  3457 ;;      Locals:         0       0       3       0       0       0       0
  3458 ;;      Temps:          2       0       0       0       0       0       0
  3459 ;;      Totals:         2       0       3       0       0       0       0
  3460 ;;Total ram usage:        5 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    6
  3463 ;; This function calls:
  3464 ;;		_getData
  3465 ;;		_liftArm
  3466 ;;		_moveToPoint
  3467 ;;		_pickObject
  3468 ;;		_releaseObj
  3469 ;;		_rotateObj
  3470 ;;		_touchObject
  3471 ;;		_touchTherm
  3472 ;; This function is called by:
  3473 ;;		_main
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           	psect	text20
  3478  000D04                     __ptext20:
  3479                           	callstack 0
  3480  000D04                     _executeData:
  3481                           	callstack 0
  3482  000D04  FFFF               	dw	65535	; assembler added errata NOP
  3483  000D06                     
  3484                           ;main.c: 128:     t_sequence *data = getData();
  3485  000D06  EC61  F012         	call	_getData	;wreg free
  3486  000D0A  C012  F1D7         	movff	?_getData,executeData@data
  3487  000D0E  C013  F1D8         	movff	?_getData+1,executeData@data+1
  3488  000D12                     
  3489                           ;main.c: 134:     switch(data->feederLine){
  3490  000D12  EF35  F007         	goto	l4162
  3491  000D16                     l4134:
  3492  000D16  FFFF               	dw	65535	; assembler added errata NOP
  3493                           
  3494                           ;main.c: 137:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3495  000D18  C04E  F016         	movff	_posVector,moveToPoint@x1
  3496  000D1C  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3497  000D1E  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3498  000D22  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3499  000D24  0E0D               	movlw	low _feeder1Pos
  3500  000D26  6EF6               	movwf	tblptrl,c
  3501  000D28                     	if	1	;There is more than 1 active tblptr byte
  3502  000D28  0E06               	movlw	high _feeder1Pos
  3503  000D2A  6EF7               	movwf	tblptrh,c
  3504  000D2C                     	endif
  3505  000D2C                     	if	0	;There are less than 3 active tblptr bytes
  3506  000D2C                     	endif
  3507  000D2C  0008               	tblrd		*
  3508  000D2E  FFFF               	dw	65535	; errata NOP
  3509  000D30  50F5               	movf	tablat,w,c
  3510  000D32  6E1A               	movwf	moveToPoint@x2^0,c
  3511  000D34  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3512  000D36  0E0E               	movlw	low (_feeder1Pos+1)
  3513  000D38  6EF6               	movwf	tblptrl,c
  3514  000D3A  0E06               	movlw	high (_feeder1Pos+1)
  3515  000D3C  6EF7               	movwf	tblptrh,c
  3516  000D3E                     	if	0	;tblptru may be non-zero
  3517  000D3E                     	endif
  3518  000D3E                     	if	0	;tblptru may be non-zero
  3519  000D3E                     	endif
  3520  000D3E  0008               	tblrd		*
  3521  000D40  FFFF               	dw	65535	; errata NOP
  3522  000D42  50F5               	movf	tablat,w,c
  3523  000D44  6E1C               	movwf	moveToPoint@y2^0,c
  3524  000D46  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3525  000D48  EC21  F005         	call	_moveToPoint	;wreg free
  3526  000D4C  0101               	movlb	1	; () banked
  3527  000D4E  6FD6               	movwf	executeData@errCode& (0+255),b
  3528  000D50                     
  3529                           ; BSR set to: 1
  3530                           ;main.c: 139:             posVector[0] = feeder1Pos[0];
  3531  000D50  0E0D               	movlw	low _feeder1Pos
  3532  000D52  6EF6               	movwf	tblptrl,c
  3533  000D54                     	if	1	;There is more than 1 active tblptr byte
  3534  000D54  0E06               	movlw	high _feeder1Pos
  3535  000D56  6EF7               	movwf	tblptrh,c
  3536  000D58                     	endif
  3537  000D58                     	if	0	;There are less than 3 active tblptr bytes
  3538  000D58                     	endif
  3539  000D58  0008               	tblrd		*
  3540  000D5A  FFFF               	dw	65535	; errata NOP
  3541  000D5C  CFF5 F04E          	movff	tablat,_posVector
  3542  000D60                     
  3543                           ; BSR set to: 1
  3544                           ;main.c: 140:             posVector[1] = feeder1Pos[1];
  3545  000D60  0E0E               	movlw	low (_feeder1Pos+1)
  3546  000D62  6EF6               	movwf	tblptrl,c
  3547  000D64  0E06               	movlw	high (_feeder1Pos+1)
  3548  000D66  6EF7               	movwf	tblptrh,c
  3549  000D68                     	if	0	;tblptru may be non-zero
  3550  000D68                     	endif
  3551  000D68                     	if	0	;tblptru may be non-zero
  3552  000D68                     	endif
  3553  000D68  0008               	tblrd		*
  3554  000D6A  FFFF               	dw	65535	; errata NOP
  3555  000D6C  CFF5 F04F          	movff	tablat,_posVector+1
  3556                           
  3557                           ;main.c: 141:             break;
  3558  000D70  EF58  F007         	goto	l4164
  3559  000D74                     l4140:
  3560  000D74  FFFF               	dw	65535	; assembler added errata NOP
  3561                           
  3562                           ;main.c: 143:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3563  000D76  C04E  F016         	movff	_posVector,moveToPoint@x1
  3564  000D7A  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3565  000D7C  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3566  000D80  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3567  000D82  0E0B               	movlw	low _feeder2Pos
  3568  000D84  6EF6               	movwf	tblptrl,c
  3569  000D86                     	if	1	;There is more than 1 active tblptr byte
  3570  000D86  0E06               	movlw	high _feeder2Pos
  3571  000D88  6EF7               	movwf	tblptrh,c
  3572  000D8A                     	endif
  3573  000D8A                     	if	0	;There are less than 3 active tblptr bytes
  3574  000D8A                     	endif
  3575  000D8A  0008               	tblrd		*
  3576  000D8C  FFFF               	dw	65535	; errata NOP
  3577  000D8E  50F5               	movf	tablat,w,c
  3578  000D90  6E1A               	movwf	moveToPoint@x2^0,c
  3579  000D92  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3580  000D94  0E0C               	movlw	low (_feeder2Pos+1)
  3581  000D96  6EF6               	movwf	tblptrl,c
  3582  000D98  0E06               	movlw	high (_feeder2Pos+1)
  3583  000D9A  6EF7               	movwf	tblptrh,c
  3584  000D9C                     	if	0	;tblptru may be non-zero
  3585  000D9C                     	endif
  3586  000D9C                     	if	0	;tblptru may be non-zero
  3587  000D9C                     	endif
  3588  000D9C  0008               	tblrd		*
  3589  000D9E  FFFF               	dw	65535	; errata NOP
  3590  000DA0  50F5               	movf	tablat,w,c
  3591  000DA2  6E1C               	movwf	moveToPoint@y2^0,c
  3592  000DA4  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3593  000DA6  EC21  F005         	call	_moveToPoint	;wreg free
  3594  000DAA  0101               	movlb	1	; () banked
  3595  000DAC  6FD6               	movwf	executeData@errCode& (0+255),b
  3596  000DAE                     
  3597                           ; BSR set to: 1
  3598                           ;main.c: 144:             posVector[0] = feeder2Pos[0];
  3599  000DAE  0E0B               	movlw	low _feeder2Pos
  3600  000DB0  6EF6               	movwf	tblptrl,c
  3601  000DB2                     	if	1	;There is more than 1 active tblptr byte
  3602  000DB2  0E06               	movlw	high _feeder2Pos
  3603  000DB4  6EF7               	movwf	tblptrh,c
  3604  000DB6                     	endif
  3605  000DB6                     	if	0	;There are less than 3 active tblptr bytes
  3606  000DB6                     	endif
  3607  000DB6  0008               	tblrd		*
  3608  000DB8  FFFF               	dw	65535	; errata NOP
  3609  000DBA  CFF5 F04E          	movff	tablat,_posVector
  3610  000DBE                     
  3611                           ; BSR set to: 1
  3612                           ;main.c: 145:             posVector[1] = feeder2Pos[1];
  3613  000DBE  0E0C               	movlw	low (_feeder2Pos+1)
  3614  000DC0  6EF6               	movwf	tblptrl,c
  3615  000DC2  0E06               	movlw	high (_feeder2Pos+1)
  3616  000DC4  6EF7               	movwf	tblptrh,c
  3617  000DC6                     	if	0	;tblptru may be non-zero
  3618  000DC6                     	endif
  3619  000DC6                     	if	0	;tblptru may be non-zero
  3620  000DC6                     	endif
  3621  000DC6  0008               	tblrd		*
  3622  000DC8  FFFF               	dw	65535	; errata NOP
  3623  000DCA  CFF5 F04F          	movff	tablat,_posVector+1
  3624                           
  3625                           ;main.c: 146:             break;
  3626  000DCE  EF58  F007         	goto	l4164
  3627  000DD2                     l4146:
  3628  000DD2  FFFF               	dw	65535	; assembler added errata NOP
  3629                           
  3630                           ;main.c: 148:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3631  000DD4  C04E  F016         	movff	_posVector,moveToPoint@x1
  3632  000DD8  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3633  000DDA  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3634  000DDE  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3635  000DE0  0E09               	movlw	low _feeder3Pos
  3636  000DE2  6EF6               	movwf	tblptrl,c
  3637  000DE4                     	if	1	;There is more than 1 active tblptr byte
  3638  000DE4  0E06               	movlw	high _feeder3Pos
  3639  000DE6  6EF7               	movwf	tblptrh,c
  3640  000DE8                     	endif
  3641  000DE8                     	if	0	;There are less than 3 active tblptr bytes
  3642  000DE8                     	endif
  3643  000DE8  0008               	tblrd		*
  3644  000DEA  FFFF               	dw	65535	; errata NOP
  3645  000DEC  50F5               	movf	tablat,w,c
  3646  000DEE  6E1A               	movwf	moveToPoint@x2^0,c
  3647  000DF0  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3648  000DF2  0E0A               	movlw	low (_feeder3Pos+1)
  3649  000DF4  6EF6               	movwf	tblptrl,c
  3650  000DF6  0E06               	movlw	high (_feeder3Pos+1)
  3651  000DF8  6EF7               	movwf	tblptrh,c
  3652  000DFA                     	if	0	;tblptru may be non-zero
  3653  000DFA                     	endif
  3654  000DFA                     	if	0	;tblptru may be non-zero
  3655  000DFA                     	endif
  3656  000DFA  0008               	tblrd		*
  3657  000DFC  FFFF               	dw	65535	; errata NOP
  3658  000DFE  50F5               	movf	tablat,w,c
  3659  000E00  6E1C               	movwf	moveToPoint@y2^0,c
  3660  000E02  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3661  000E04  EC21  F005         	call	_moveToPoint	;wreg free
  3662  000E08  0101               	movlb	1	; () banked
  3663  000E0A  6FD6               	movwf	executeData@errCode& (0+255),b
  3664  000E0C                     
  3665                           ; BSR set to: 1
  3666                           ;main.c: 149:             posVector[0] = feeder3Pos[0];
  3667  000E0C  0E09               	movlw	low _feeder3Pos
  3668  000E0E  6EF6               	movwf	tblptrl,c
  3669  000E10                     	if	1	;There is more than 1 active tblptr byte
  3670  000E10  0E06               	movlw	high _feeder3Pos
  3671  000E12  6EF7               	movwf	tblptrh,c
  3672  000E14                     	endif
  3673  000E14                     	if	0	;There are less than 3 active tblptr bytes
  3674  000E14                     	endif
  3675  000E14  0008               	tblrd		*
  3676  000E16  FFFF               	dw	65535	; errata NOP
  3677  000E18  CFF5 F04E          	movff	tablat,_posVector
  3678  000E1C                     
  3679                           ; BSR set to: 1
  3680                           ;main.c: 150:             posVector[1] = feeder3Pos[1];
  3681  000E1C  0E0A               	movlw	low (_feeder3Pos+1)
  3682  000E1E  6EF6               	movwf	tblptrl,c
  3683  000E20  0E06               	movlw	high (_feeder3Pos+1)
  3684  000E22  6EF7               	movwf	tblptrh,c
  3685  000E24                     	if	0	;tblptru may be non-zero
  3686  000E24                     	endif
  3687  000E24                     	if	0	;tblptru may be non-zero
  3688  000E24                     	endif
  3689  000E24  0008               	tblrd		*
  3690  000E26  FFFF               	dw	65535	; errata NOP
  3691  000E28  CFF5 F04F          	movff	tablat,_posVector+1
  3692                           
  3693                           ;main.c: 151:             break;
  3694  000E2C  EF58  F007         	goto	l4164
  3695  000E30                     l4152:
  3696  000E30  FFFF               	dw	65535	; assembler added errata NOP
  3697                           
  3698                           ;main.c: 155:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3699  000E32  C04E  F016         	movff	_posVector,moveToPoint@x1
  3700  000E36  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3701  000E38  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3702  000E3C  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3703  000E3E  C057  F01A         	movff	_newFeeder,moveToPoint@x2
  3704  000E42  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3705  000E44  C058  F01C         	movff	_newFeeder+1,moveToPoint@y2
  3706  000E48  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3707  000E4A  EC21  F005         	call	_moveToPoint	;wreg free
  3708  000E4E  0101               	movlb	1	; () banked
  3709  000E50  6FD6               	movwf	executeData@errCode& (0+255),b
  3710  000E52                     
  3711                           ; BSR set to: 1
  3712                           ;main.c: 156:             posVector[0] = newFeeder[0];
  3713  000E52  C057  F04E         	movff	_newFeeder,_posVector
  3714  000E56                     
  3715                           ; BSR set to: 1
  3716                           ;main.c: 157:             posVector[1] = newFeeder[1];
  3717  000E56  C058  F04F         	movff	_newFeeder+1,_posVector+1
  3718                           
  3719                           ;main.c: 158:             break;
  3720  000E5A  EF58  F007         	goto	l4164
  3721  000E5E                     l4158:
  3722  000E5E  FFFF               	dw	65535	; assembler added errata NOP
  3723                           
  3724                           ;main.c: 162:             errCode = 1;
  3725  000E60  0E01               	movlw	1
  3726  000E62  0101               	movlb	1	; () banked
  3727  000E64  6FD6               	movwf	executeData@errCode& (0+255),b
  3728                           
  3729                           ;main.c: 163:             break;
  3730  000E66  EF58  F007         	goto	l4164
  3731  000E6A                     l4162:
  3732  000E6A  FFFF               	dw	65535	; assembler added errata NOP
  3733  000E6C  C1D7  FFD9         	movff	executeData@data,fsr2l
  3734  000E70  C1D8  FFDA         	movff	executeData@data+1,fsr2h
  3735  000E74  50DF               	movf	indf2,w,c
  3736  000E76  6E43               	movwf	??_executeData^0,c
  3737  000E78  6A44               	clrf	(??_executeData+1)^0,c
  3738                           
  3739                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3740                           ; Switch size 1, requested type "simple"
  3741                           ; Number of cases is 1, Range of values is 0 to 0
  3742                           ; switch strategies available:
  3743                           ; Name         Instructions Cycles
  3744                           ; simple_byte            4     3 (average)
  3745                           ;	Chosen strategy is simple_byte
  3746  000E7A  5044               	movf	(??_executeData+1)^0,w,c
  3747  000E7C  0A00               	xorlw	0	; case 0
  3748  000E7E  B4D8               	btfsc	status,2,c
  3749  000E80  EF44  F007         	goto	l4500
  3750  000E84  EF2F  F007         	goto	l4158
  3751  000E88                     l4500:
  3752  000E88  FFFF               	dw	65535	; assembler added errata NOP
  3753                           
  3754                           ; Switch size 1, requested type "simple"
  3755                           ; Number of cases is 4, Range of values is 0 to 255
  3756                           ; switch strategies available:
  3757                           ; Name         Instructions Cycles
  3758                           ; simple_byte           13     7 (average)
  3759                           ;	Chosen strategy is simple_byte
  3760  000E8A  5043               	movf	??_executeData^0,w,c
  3761  000E8C  0A00               	xorlw	0	; case 0
  3762  000E8E  B4D8               	btfsc	status,2,c
  3763  000E90  EF8B  F006         	goto	l4134
  3764  000E94  0A01               	xorlw	1	; case 1
  3765  000E96  B4D8               	btfsc	status,2,c
  3766  000E98  EFBA  F006         	goto	l4140
  3767  000E9C  0A03               	xorlw	3	; case 2
  3768  000E9E  B4D8               	btfsc	status,2,c
  3769  000EA0  EFE9  F006         	goto	l4146
  3770  000EA4  0AFD               	xorlw	253	; case 255
  3771  000EA6  B4D8               	btfsc	status,2,c
  3772  000EA8  EF18  F007         	goto	l4152
  3773  000EAC  EF2F  F007         	goto	l4158
  3774  000EB0                     l4164:
  3775  000EB0  FFFF               	dw	65535	; assembler added errata NOP
  3776                           
  3777                           ; BSR set to: 1
  3778                           ;main.c: 167:     if(!errCode){
  3779  000EB2  51D6               	movf	executeData@errCode& (0+255),w,b
  3780  000EB4  A4D8               	btfss	status,2,c
  3781  000EB6  EF5F  F007         	goto	u3501
  3782  000EBA  EF62  F007         	goto	u3500
  3783  000EBE                     u3501:
  3784  000EBE  FFFF               	dw	65535	; assembler added errata NOP
  3785  000EC0  EFC5  F007         	goto	l4186
  3786  000EC4                     u3500:
  3787  000EC4  FFFF               	dw	65535	; assembler added errata NOP
  3788  000EC6                     
  3789                           ; BSR set to: 1
  3790                           ;main.c: 170:         errCode = touchObject();
  3791  000EC6  EC0D  F00E         	call	_touchObject	;wreg free
  3792  000ECA  0101               	movlb	1	; () banked
  3793  000ECC  6FD6               	movwf	executeData@errCode& (0+255),b
  3794                           
  3795                           ;main.c: 172:         pickObject();
  3796  000ECE  ECF2  F011         	call	_pickObject	;wreg free
  3797                           
  3798                           ;main.c: 175:         errCode = liftArm();
  3799  000ED2  ECCA  F00F         	call	_liftArm	;wreg free
  3800  000ED6  0101               	movlb	1	; () banked
  3801  000ED8  6FD6               	movwf	executeData@errCode& (0+255),b
  3802  000EDA                     
  3803                           ; BSR set to: 1
  3804  000EDA  C04E  F016         	movff	_posVector,moveToPoint@x1
  3805  000EDE  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3806  000EE0  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3807  000EE4  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3808  000EE6  EE20 F001          	lfsr	2,1
  3809  000EEA  51D7               	movf	executeData@data& (0+255),w,b
  3810  000EEC  26D9               	addwf	fsr2l,f,c
  3811  000EEE  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3812  000EF0  22DA               	addwfc	fsr2h,f,c
  3813  000EF2  50DF               	movf	indf2,w,c
  3814  000EF4  6E43               	movwf	??_executeData^0,c
  3815  000EF6  5043               	movf	??_executeData^0,w,c
  3816  000EF8  6E1A               	movwf	moveToPoint@x2^0,c
  3817  000EFA  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3818  000EFC  EE20 F002          	lfsr	2,2
  3819  000F00  51D7               	movf	executeData@data& (0+255),w,b
  3820  000F02  26D9               	addwf	fsr2l,f,c
  3821  000F04  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3822  000F06  22DA               	addwfc	fsr2h,f,c
  3823  000F08  50DF               	movf	indf2,w,c
  3824  000F0A  6E44               	movwf	(??_executeData+1)^0,c
  3825  000F0C  5044               	movf	(??_executeData+1)^0,w,c
  3826  000F0E  6E1C               	movwf	moveToPoint@y2^0,c
  3827  000F10  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3828  000F12  EC21  F005         	call	_moveToPoint	;wreg free
  3829  000F16                     
  3830                           ;main.c: 179:         posVector[0] = data->posX;
  3831  000F16  0101               	movlb	1	; () banked
  3832  000F18  EE20 F001          	lfsr	2,1
  3833  000F1C  51D7               	movf	executeData@data& (0+255),w,b
  3834  000F1E  26D9               	addwf	fsr2l,f,c
  3835  000F20  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3836  000F22  22DA               	addwfc	fsr2h,f,c
  3837  000F24  50DF               	movf	indf2,w,c
  3838  000F26  6E4E               	movwf	_posVector^0,c
  3839  000F28                     
  3840                           ; BSR set to: 1
  3841                           ;main.c: 180:         posVector[1] = data->posY;
  3842  000F28  EE20 F002          	lfsr	2,2
  3843  000F2C  51D7               	movf	executeData@data& (0+255),w,b
  3844  000F2E  26D9               	addwf	fsr2l,f,c
  3845  000F30  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3846  000F32  22DA               	addwfc	fsr2h,f,c
  3847  000F34  50DF               	movf	indf2,w,c
  3848  000F36  6E4F               	movwf	(_posVector+1)^0,c
  3849  000F38                     
  3850                           ; BSR set to: 1
  3851                           ;main.c: 183:         rotAngle = data->rotation - rotAngle;
  3852  000F38  EE20 F003          	lfsr	2,3
  3853  000F3C  51D7               	movf	executeData@data& (0+255),w,b
  3854  000F3E  26D9               	addwf	fsr2l,f,c
  3855  000F40  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3856  000F42  22DA               	addwfc	fsr2h,f,c
  3857  000F44  50DF               	movf	indf2,w,c
  3858  000F46  6E43               	movwf	??_executeData^0,c
  3859  000F48  5059               	movf	_rotAngle^0,w,c
  3860  000F4A  5C43               	subwf	??_executeData^0,w,c
  3861  000F4C  6E59               	movwf	_rotAngle^0,c
  3862  000F4E  505A               	movf	(_rotAngle+1)^0,w,c
  3863  000F50  A0D8               	btfss	status,0,c
  3864  000F52  285A               	incf	(_rotAngle+1)^0,w,c
  3865  000F54  6A5A               	clrf	(_rotAngle+1)^0,c
  3866  000F56  5E5A               	subwf	(_rotAngle+1)^0,f,c
  3867                           
  3868                           ;main.c: 185:         if(rotAngle < 0){
  3869  000F58  BE5A               	btfsc	(_rotAngle+1)^0,7,c
  3870  000F5A  EFB4  F007         	goto	u3510
  3871  000F5E  EFB1  F007         	goto	u3511
  3872  000F62                     u3511:
  3873  000F62  FFFF               	dw	65535	; assembler added errata NOP
  3874  000F64  EFB9  F007         	goto	l4178
  3875  000F68                     u3510:
  3876  000F68  FFFF               	dw	65535	; assembler added errata NOP
  3877  000F6A                     
  3878                           ; BSR set to: 1
  3879                           ;main.c: 186:             rotAngle += 360;
  3880  000F6A  0E68               	movlw	104
  3881  000F6C  2659               	addwf	_rotAngle^0,f,c
  3882  000F6E  0E01               	movlw	1
  3883  000F70  225A               	addwfc	(_rotAngle+1)^0,f,c
  3884  000F72                     l4178:
  3885  000F72  FFFF               	dw	65535	; assembler added errata NOP
  3886                           
  3887                           ; BSR set to: 1
  3888                           ;main.c: 188:         rotateObj(rotAngle);
  3889  000F74  5059               	movf	_rotAngle^0,w,c
  3890  000F76  EC86  F00E         	call	_rotateObj
  3891  000F7A  EC94  F00D         	call	_touchTherm	;wreg free
  3892  000F7E                     
  3893                           ;main.c: 193:         releaseObj();
  3894  000F7E  ECDC  F011         	call	_releaseObj	;wreg free
  3895  000F82                     
  3896                           ;main.c: 196:         errCode = liftArm();
  3897  000F82  ECCA  F00F         	call	_liftArm	;wreg free
  3898  000F86  0101               	movlb	1	; () banked
  3899  000F88  6FD6               	movwf	executeData@errCode& (0+255),b
  3900  000F8A                     l4186:
  3901  000F8A  FFFF               	dw	65535	; assembler added errata NOP
  3902                           
  3903                           ; BSR set to: 1
  3904                           ;main.c: 199:     return(errCode);
  3905  000F8C  51D6               	movf	executeData@errCode& (0+255),w,b
  3906  000F8E                     
  3907                           ; BSR set to: 1
  3908  000F8E  0012               	return		;funcret
  3909  000F90  FFFF               	dw	65535	; errata NOP
  3910  000F92                     __end_of_executeData:
  3911                           	callstack 0
  3912                           
  3913 ;; *************** function _touchTherm *****************
  3914 ;; Defined at:
  3915 ;;		line 455 in file "motors.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;		None
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;		None
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  1    wreg      unsigned char 
  3922 ;; Registers used:
  3923 ;;		wreg, status,2, status,0, cstack
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3929 ;;      Params:         0       0       0       0       0       0       0
  3930 ;;      Locals:         0       0       0       0       0       0       0
  3931 ;;      Temps:          0       0       0       0       0       0       0
  3932 ;;      Totals:         0       0       0       0       0       0       0
  3933 ;;Total ram usage:        0 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; Hardware stack levels required when called:    5
  3936 ;; This function calls:
  3937 ;;		_resetStep
  3938 ;;		_resetTherm
  3939 ;;		_returnTherm
  3940 ;;		_setDirection
  3941 ;;		_startADC
  3942 ;;		_stepMade
  3943 ;;		_stopADC
  3944 ;; This function is called by:
  3945 ;;		_executeData
  3946 ;; This function uses a non-reentrant model
  3947 ;;
  3948                           
  3949                           	psect	text21
  3950  001B28                     __ptext21:
  3951                           	callstack 0
  3952  001B28                     _touchTherm:
  3953                           	callstack 0
  3954  001B28  FFFF               	dw	65535	; assembler added errata NOP
  3955  001B2A                     
  3956                           ;motors.c: 458:     setDirection(1, 2);
  3957  001B2A  0E02               	movlw	2
  3958  001B2C  6E12               	movwf	setDirection@motor^0,c
  3959  001B2E  0E01               	movlw	1
  3960  001B30  ECD9  F010         	call	_setDirection
  3961  001B34                     
  3962                           ;motors.c: 460:     T2CONbits.TMR2ON = 1;
  3963  001B34  84CA               	bsf	202,2,c	;volatile
  3964  001B36                     
  3965                           ;motors.c: 462:     tm0Error = 0;
  3966  001B36  0E00               	movlw	0
  3967  001B38  6E5C               	movwf	(_tm0Error+1)^0,c
  3968  001B3A  0E00               	movlw	0
  3969  001B3C  6E5B               	movwf	_tm0Error^0,c
  3970  001B3E                     
  3971                           ;motors.c: 463:     tm0Limit = 100;
  3972  001B3E  0E64               	movlw	100
  3973  001B40  6E68               	movwf	_tm0Limit^0,c
  3974  001B42                     
  3975                           ;motors.c: 464:     T0CONbits.TMR0ON = 1;
  3976  001B42  8ED5               	bsf	213,7,c	;volatile
  3977  001B44                     
  3978                           ;motors.c: 467:     startADC();
  3979  001B44  EC94  F012         	call	_startADC	;wreg free
  3980                           
  3981                           ;motors.c: 470:     while(!returnTherm() || PORTDbits.RD7){
  3982  001B48  EFD7  F00D         	goto	l3860
  3983  001B4C                     l3850:
  3984  001B4C  FFFF               	dw	65535	; assembler added errata NOP
  3985                           
  3986                           ;motors.c: 473:         if(tm0Error){
  3987  001B4E  505B               	movf	_tm0Error^0,w,c
  3988  001B50  105C               	iorwf	(_tm0Error+1)^0,w,c
  3989  001B52  B4D8               	btfsc	status,2,c
  3990  001B54  EFAE  F00D         	goto	u3211
  3991  001B58  EFB1  F00D         	goto	u3210
  3992  001B5C                     u3211:
  3993  001B5C  FFFF               	dw	65535	; assembler added errata NOP
  3994  001B5E  EFB9  F00D         	goto	l188
  3995  001B62                     u3210:
  3996  001B62  FFFF               	dw	65535	; assembler added errata NOP
  3997  001B64                     
  3998                           ;motors.c: 475:             LATCbits.LATC2 = 0;
  3999  001B64  948B               	bcf	139,2,c	;volatile
  4000  001B66                     
  4001                           ;motors.c: 476:             tm0Error = 6;
  4002  001B66  0E00               	movlw	0
  4003  001B68  6E5C               	movwf	(_tm0Error+1)^0,c
  4004  001B6A  0E06               	movlw	6
  4005  001B6C  6E5B               	movwf	_tm0Error^0,c
  4006                           
  4007                           ;motors.c: 477:             break;
  4008  001B6E  EFED  F00D         	goto	l3864
  4009  001B72                     l188:
  4010  001B72  FFFF               	dw	65535	; assembler added errata NOP
  4011                           
  4012                           ;motors.c: 481:         LATCbits.LATC2 = 1;
  4013  001B74  848B               	bsf	139,2,c	;volatile
  4014  001B76                     l3856:
  4015  001B76  FFFF               	dw	65535	; assembler added errata NOP
  4016  001B78  EC47  F012         	call	_stepMade	;wreg free
  4017  001B7C  5012               	movf	?_stepMade^0,w,c
  4018  001B7E  1013               	iorwf	(?_stepMade+1)^0,w,c
  4019  001B80  B4D8               	btfsc	status,2,c
  4020  001B82  EFC5  F00D         	goto	u3221
  4021  001B86  EFC8  F00D         	goto	u3220
  4022  001B8A                     u3221:
  4023  001B8A  FFFF               	dw	65535	; assembler added errata NOP
  4024  001B8C  EFBB  F00D         	goto	l3856
  4025  001B90                     u3220:
  4026  001B90  FFFF               	dw	65535	; assembler added errata NOP
  4027  001B92                     
  4028                           ;motors.c: 487:         LATCbits.LATC2 = 0;
  4029  001B92  948B               	bcf	139,2,c	;volatile
  4030  001B94                     l3858:
  4031  001B94  FFFF               	dw	65535	; assembler added errata NOP
  4032  001B96  EC47  F012         	call	_stepMade	;wreg free
  4033  001B9A  5012               	movf	?_stepMade^0,w,c
  4034  001B9C  1013               	iorwf	(?_stepMade+1)^0,w,c
  4035  001B9E  B4D8               	btfsc	status,2,c
  4036  001BA0  EFD4  F00D         	goto	u3231
  4037  001BA4  EFD7  F00D         	goto	u3230
  4038  001BA8                     u3231:
  4039  001BA8  FFFF               	dw	65535	; assembler added errata NOP
  4040  001BAA  EFCA  F00D         	goto	l3858
  4041  001BAE                     u3230:
  4042  001BAE                     l3860:
  4043  001BAE  FFFF               	dw	65535	; assembler added errata NOP
  4044                           
  4045                           ;motors.c: 470:     while(!returnTherm() || PORTDbits.RD7){
  4046  001BB0  EC7D  F012         	call	_returnTherm	;wreg free
  4047  001BB4  5012               	movf	?_returnTherm^0,w,c
  4048  001BB6  1013               	iorwf	(?_returnTherm+1)^0,w,c
  4049  001BB8  B4D8               	btfsc	status,2,c
  4050  001BBA  EFE1  F00D         	goto	u3241
  4051  001BBE  EFE4  F00D         	goto	u3240
  4052  001BC2                     u3241:
  4053  001BC2  FFFF               	dw	65535	; assembler added errata NOP
  4054  001BC4  EFA6  F00D         	goto	l3850
  4055  001BC8                     u3240:
  4056  001BC8  FFFF               	dw	65535	; assembler added errata NOP
  4057  001BCA  BE83               	btfsc	131,7,c	;volatile
  4058  001BCC  EFEA  F00D         	goto	u3251
  4059  001BD0  EFED  F00D         	goto	u3250
  4060  001BD4                     u3251:
  4061  001BD4  FFFF               	dw	65535	; assembler added errata NOP
  4062  001BD6  EFA6  F00D         	goto	l3850
  4063  001BDA                     u3250:
  4064  001BDA                     l3864:
  4065  001BDA  FFFF               	dw	65535	; assembler added errata NOP
  4066                           
  4067                           ;motors.c: 494:     stopADC();
  4068  001BDC  ECC2  F012         	call	_stopADC	;wreg free
  4069  001BE0                     
  4070                           ;motors.c: 497:     resetTherm();
  4071  001BE0  EC8F  F012         	call	_resetTherm	;wreg free
  4072  001BE4                     
  4073                           ;motors.c: 500:     T0CONbits.TMR0ON = 0;
  4074  001BE4  9ED5               	bcf	213,7,c	;volatile
  4075  001BE6                     
  4076                           ;motors.c: 501:     T2CONbits.TMR2ON = 0;
  4077  001BE6  94CA               	bcf	202,2,c	;volatile
  4078                           
  4079                           ;motors.c: 503:     TMR0 = 0;
  4080  001BE8  0E00               	movlw	0
  4081  001BEA  6ED7               	movwf	215,c	;volatile
  4082  001BEC  0E00               	movlw	0
  4083  001BEE  6ED6               	movwf	214,c	;volatile
  4084                           
  4085                           ;motors.c: 504:     TMR2 = 0;
  4086  001BF0  0E00               	movlw	0
  4087  001BF2  6ECC               	movwf	204,c	;volatile
  4088  001BF4                     
  4089                           ;motors.c: 507:     resetStep();
  4090  001BF4  EC9E  F012         	call	_resetStep	;wreg free
  4091  001BF8                     
  4092                           ;motors.c: 510:     if(PORTDbits.RD7){
  4093  001BF8  AE83               	btfss	131,7,c	;volatile
  4094  001BFA  EF01  F00E         	goto	u3261
  4095  001BFE  EF04  F00E         	goto	u3260
  4096  001C02                     u3261:
  4097  001C02  FFFF               	dw	65535	; assembler added errata NOP
  4098  001C04  EF09  F00E         	goto	l196
  4099  001C08                     u3260:
  4100  001C08  FFFF               	dw	65535	; assembler added errata NOP
  4101  001C0A                     
  4102                           ;motors.c: 511:         tm0Error = 2;
  4103  001C0A  0E00               	movlw	0
  4104  001C0C  6E5C               	movwf	(_tm0Error+1)^0,c
  4105  001C0E  0E02               	movlw	2
  4106  001C10  6E5B               	movwf	_tm0Error^0,c
  4107  001C12                     l196:
  4108  001C12  FFFF               	dw	65535	; assembler added errata NOP
  4109                           
  4110                           ;motors.c: 514:     return(tm0Error);
  4111  001C14  505B               	movf	_tm0Error^0,w,c
  4112  001C16  0012               	return		;funcret
  4113  001C18  FFFF               	dw	65535	; errata NOP
  4114  001C1A                     __end_of_touchTherm:
  4115                           	callstack 0
  4116                           
  4117 ;; *************** function _returnTherm *****************
  4118 ;; Defined at:
  4119 ;;		line 58 in file "adc.c"
  4120 ;; Parameters:    Size  Location     Type
  4121 ;;		None
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;		None
  4124 ;; Return value:  Size  Location     Type
  4125 ;;                  2   17[COMRAM] unsigned int 
  4126 ;; Registers used:
  4127 ;;		None
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : 0/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4133 ;;      Params:         2       0       0       0       0       0       0
  4134 ;;      Locals:         0       0       0       0       0       0       0
  4135 ;;      Temps:          0       0       0       0       0       0       0
  4136 ;;      Totals:         2       0       0       0       0       0       0
  4137 ;;Total ram usage:        2 bytes
  4138 ;; Hardware stack levels used:    1
  4139 ;; Hardware stack levels required when called:    4
  4140 ;; This function calls:
  4141 ;;		Nothing
  4142 ;; This function is called by:
  4143 ;;		_touchTherm
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147                           	psect	text22
  4148  0024FA                     __ptext22:
  4149                           	callstack 0
  4150  0024FA                     _returnTherm:
  4151                           	callstack 0
  4152  0024FA  FFFF               	dw	65535	; assembler added errata NOP
  4153  0024FC                     
  4154                           ;adc.c: 59:     return therm_rel;
  4155  0024FC  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4156  002500  6A13               	clrf	(?_returnTherm+1)^0,c
  4157  002502  0012               	return		;funcret
  4158  002504  FFFF               	dw	65535	; errata NOP
  4159  002506                     __end_of_returnTherm:
  4160                           	callstack 0
  4161                           
  4162 ;; *************** function _resetTherm *****************
  4163 ;; Defined at:
  4164 ;;		line 72 in file "adc.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;		None
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;		None
  4169 ;; Return value:  Size  Location     Type
  4170 ;;                  1    wreg      void 
  4171 ;; Registers used:
  4172 ;;		wreg, status,2
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4178 ;;      Params:         0       0       0       0       0       0       0
  4179 ;;      Locals:         0       0       0       0       0       0       0
  4180 ;;      Temps:          0       0       0       0       0       0       0
  4181 ;;      Totals:         0       0       0       0       0       0       0
  4182 ;;Total ram usage:        0 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; Hardware stack levels required when called:    4
  4185 ;; This function calls:
  4186 ;;		Nothing
  4187 ;; This function is called by:
  4188 ;;		_touchTherm
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           	psect	text23
  4193  00251E                     __ptext23:
  4194                           	callstack 0
  4195  00251E                     _resetTherm:
  4196                           	callstack 0
  4197  00251E  FFFF               	dw	65535	; assembler added errata NOP
  4198  002520                     
  4199                           ;adc.c: 73:     therm_rel = 0;
  4200  002520  0E00               	movlw	0
  4201  002522  6E64               	movwf	_therm_rel^0,c	;volatile
  4202  002524  0012               	return		;funcret
  4203  002526  FFFF               	dw	65535	; errata NOP
  4204  002528                     __end_of_resetTherm:
  4205                           	callstack 0
  4206                           
  4207 ;; *************** function _touchObject *****************
  4208 ;; Defined at:
  4209 ;;		line 384 in file "motors.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  1    wreg      unsigned char 
  4216 ;; Registers used:
  4217 ;;		wreg, status,2, status,0, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4223 ;;      Params:         0       0       0       0       0       0       0
  4224 ;;      Locals:         0       0       0       0       0       0       0
  4225 ;;      Temps:          0       0       0       0       0       0       0
  4226 ;;      Totals:         0       0       0       0       0       0       0
  4227 ;;Total ram usage:        0 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    5
  4230 ;; This function calls:
  4231 ;;		_resetStep
  4232 ;;		_resetTouch
  4233 ;;		_returnTouch
  4234 ;;		_setDirection
  4235 ;;		_startADC
  4236 ;;		_stepMade
  4237 ;;		_stopADC
  4238 ;; This function is called by:
  4239 ;;		_executeData
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           	psect	text24
  4244  001C1A                     __ptext24:
  4245                           	callstack 0
  4246  001C1A                     _touchObject:
  4247                           	callstack 0
  4248  001C1A  FFFF               	dw	65535	; assembler added errata NOP
  4249  001C1C                     
  4250                           ;motors.c: 387:     setDirection(1, 2);
  4251  001C1C  0E02               	movlw	2
  4252  001C1E  6E12               	movwf	setDirection@motor^0,c
  4253  001C20  0E01               	movlw	1
  4254  001C22  ECD9  F010         	call	_setDirection
  4255  001C26                     
  4256                           ;motors.c: 389:     T2CONbits.TMR2ON = 1;
  4257  001C26  84CA               	bsf	202,2,c	;volatile
  4258  001C28                     
  4259                           ;motors.c: 391:     tm0Error = 0;
  4260  001C28  0E00               	movlw	0
  4261  001C2A  6E5C               	movwf	(_tm0Error+1)^0,c
  4262  001C2C  0E00               	movlw	0
  4263  001C2E  6E5B               	movwf	_tm0Error^0,c
  4264  001C30                     
  4265                           ;motors.c: 392:     tm0Limit = 100;
  4266  001C30  0E64               	movlw	100
  4267  001C32  6E68               	movwf	_tm0Limit^0,c
  4268  001C34                     
  4269                           ;motors.c: 393:     T0CONbits.TMR0ON = 1;
  4270  001C34  8ED5               	bsf	213,7,c	;volatile
  4271  001C36                     
  4272                           ;motors.c: 396:     startADC();
  4273  001C36  EC94  F012         	call	_startADC	;wreg free
  4274                           
  4275                           ;motors.c: 399:     while(!returnTouch() || PORTDbits.RD7){
  4276  001C3A  EF50  F00E         	goto	l3818
  4277  001C3E                     l3808:
  4278  001C3E  FFFF               	dw	65535	; assembler added errata NOP
  4279                           
  4280                           ;motors.c: 402:         if(tm0Error){
  4281  001C40  505B               	movf	_tm0Error^0,w,c
  4282  001C42  105C               	iorwf	(_tm0Error+1)^0,w,c
  4283  001C44  B4D8               	btfsc	status,2,c
  4284  001C46  EF27  F00E         	goto	u3151
  4285  001C4A  EF2A  F00E         	goto	u3150
  4286  001C4E                     u3151:
  4287  001C4E  FFFF               	dw	65535	; assembler added errata NOP
  4288  001C50  EF32  F00E         	goto	l174
  4289  001C54                     u3150:
  4290  001C54  FFFF               	dw	65535	; assembler added errata NOP
  4291  001C56                     
  4292                           ;motors.c: 404:             LATCbits.LATC2 = 0;
  4293  001C56  948B               	bcf	139,2,c	;volatile
  4294  001C58                     
  4295                           ;motors.c: 405:             tm0Error = 6;
  4296  001C58  0E00               	movlw	0
  4297  001C5A  6E5C               	movwf	(_tm0Error+1)^0,c
  4298  001C5C  0E06               	movlw	6
  4299  001C5E  6E5B               	movwf	_tm0Error^0,c
  4300                           
  4301                           ;motors.c: 406:             break;
  4302  001C60  EF66  F00E         	goto	l3822
  4303  001C64                     l174:
  4304  001C64  FFFF               	dw	65535	; assembler added errata NOP
  4305                           
  4306                           ;motors.c: 410:         LATCbits.LATC2 = 1;
  4307  001C66  848B               	bsf	139,2,c	;volatile
  4308  001C68                     l3814:
  4309  001C68  FFFF               	dw	65535	; assembler added errata NOP
  4310  001C6A  EC47  F012         	call	_stepMade	;wreg free
  4311  001C6E  5012               	movf	?_stepMade^0,w,c
  4312  001C70  1013               	iorwf	(?_stepMade+1)^0,w,c
  4313  001C72  B4D8               	btfsc	status,2,c
  4314  001C74  EF3E  F00E         	goto	u3161
  4315  001C78  EF41  F00E         	goto	u3160
  4316  001C7C                     u3161:
  4317  001C7C  FFFF               	dw	65535	; assembler added errata NOP
  4318  001C7E  EF34  F00E         	goto	l3814
  4319  001C82                     u3160:
  4320  001C82  FFFF               	dw	65535	; assembler added errata NOP
  4321  001C84                     
  4322                           ;motors.c: 416:         LATCbits.LATC2 = 0;
  4323  001C84  948B               	bcf	139,2,c	;volatile
  4324  001C86                     l3816:
  4325  001C86  FFFF               	dw	65535	; assembler added errata NOP
  4326  001C88  EC47  F012         	call	_stepMade	;wreg free
  4327  001C8C  5012               	movf	?_stepMade^0,w,c
  4328  001C8E  1013               	iorwf	(?_stepMade+1)^0,w,c
  4329  001C90  B4D8               	btfsc	status,2,c
  4330  001C92  EF4D  F00E         	goto	u3171
  4331  001C96  EF50  F00E         	goto	u3170
  4332  001C9A                     u3171:
  4333  001C9A  FFFF               	dw	65535	; assembler added errata NOP
  4334  001C9C  EF43  F00E         	goto	l3816
  4335  001CA0                     u3170:
  4336  001CA0                     l3818:
  4337  001CA0  FFFF               	dw	65535	; assembler added errata NOP
  4338                           
  4339                           ;motors.c: 399:     while(!returnTouch() || PORTDbits.RD7){
  4340  001CA2  EC83  F012         	call	_returnTouch	;wreg free
  4341  001CA6  5012               	movf	?_returnTouch^0,w,c
  4342  001CA8  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4343  001CAA  B4D8               	btfsc	status,2,c
  4344  001CAC  EF5A  F00E         	goto	u3181
  4345  001CB0  EF5D  F00E         	goto	u3180
  4346  001CB4                     u3181:
  4347  001CB4  FFFF               	dw	65535	; assembler added errata NOP
  4348  001CB6  EF1F  F00E         	goto	l3808
  4349  001CBA                     u3180:
  4350  001CBA  FFFF               	dw	65535	; assembler added errata NOP
  4351  001CBC  BE83               	btfsc	131,7,c	;volatile
  4352  001CBE  EF63  F00E         	goto	u3191
  4353  001CC2  EF66  F00E         	goto	u3190
  4354  001CC6                     u3191:
  4355  001CC6  FFFF               	dw	65535	; assembler added errata NOP
  4356  001CC8  EF1F  F00E         	goto	l3808
  4357  001CCC                     u3190:
  4358  001CCC                     l3822:
  4359  001CCC  FFFF               	dw	65535	; assembler added errata NOP
  4360                           
  4361                           ;motors.c: 423:     stopADC();
  4362  001CCE  ECC2  F012         	call	_stopADC	;wreg free
  4363  001CD2                     
  4364                           ;motors.c: 426:     resetTouch();
  4365  001CD2  EC99  F012         	call	_resetTouch	;wreg free
  4366  001CD6                     
  4367                           ;motors.c: 429:     T0CONbits.TMR0ON = 0;
  4368  001CD6  9ED5               	bcf	213,7,c	;volatile
  4369  001CD8                     
  4370                           ;motors.c: 430:     T2CONbits.TMR2ON = 0;
  4371  001CD8  94CA               	bcf	202,2,c	;volatile
  4372                           
  4373                           ;motors.c: 432:     TMR0 = 0;
  4374  001CDA  0E00               	movlw	0
  4375  001CDC  6ED7               	movwf	215,c	;volatile
  4376  001CDE  0E00               	movlw	0
  4377  001CE0  6ED6               	movwf	214,c	;volatile
  4378                           
  4379                           ;motors.c: 433:     TMR2 = 0;
  4380  001CE2  0E00               	movlw	0
  4381  001CE4  6ECC               	movwf	204,c	;volatile
  4382  001CE6                     
  4383                           ;motors.c: 436:     resetStep();
  4384  001CE6  EC9E  F012         	call	_resetStep	;wreg free
  4385  001CEA                     
  4386                           ;motors.c: 439:     if(PORTDbits.RD7){
  4387  001CEA  AE83               	btfss	131,7,c	;volatile
  4388  001CEC  EF7A  F00E         	goto	u3201
  4389  001CF0  EF7D  F00E         	goto	u3200
  4390  001CF4                     u3201:
  4391  001CF4  FFFF               	dw	65535	; assembler added errata NOP
  4392  001CF6  EF82  F00E         	goto	l182
  4393  001CFA                     u3200:
  4394  001CFA  FFFF               	dw	65535	; assembler added errata NOP
  4395  001CFC                     
  4396                           ;motors.c: 440:         tm0Error = 2;
  4397  001CFC  0E00               	movlw	0
  4398  001CFE  6E5C               	movwf	(_tm0Error+1)^0,c
  4399  001D00  0E02               	movlw	2
  4400  001D02  6E5B               	movwf	_tm0Error^0,c
  4401  001D04                     l182:
  4402  001D04  FFFF               	dw	65535	; assembler added errata NOP
  4403                           
  4404                           ;motors.c: 443:     return(tm0Error);
  4405  001D06  505B               	movf	_tm0Error^0,w,c
  4406  001D08  0012               	return		;funcret
  4407  001D0A  FFFF               	dw	65535	; errata NOP
  4408  001D0C                     __end_of_touchObject:
  4409                           	callstack 0
  4410                           
  4411 ;; *************** function _stopADC *****************
  4412 ;; Defined at:
  4413 ;;		line 44 in file "adc.c"
  4414 ;; Parameters:    Size  Location     Type
  4415 ;;		None
  4416 ;; Auto vars:     Size  Location     Type
  4417 ;;		None
  4418 ;; Return value:  Size  Location     Type
  4419 ;;                  1    wreg      void 
  4420 ;; Registers used:
  4421 ;;		None
  4422 ;; Tracked objects:
  4423 ;;		On entry : 0/0
  4424 ;;		On exit  : 0/0
  4425 ;;		Unchanged: 0/0
  4426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4427 ;;      Params:         0       0       0       0       0       0       0
  4428 ;;      Locals:         0       0       0       0       0       0       0
  4429 ;;      Temps:          0       0       0       0       0       0       0
  4430 ;;      Totals:         0       0       0       0       0       0       0
  4431 ;;Total ram usage:        0 bytes
  4432 ;; Hardware stack levels used:    1
  4433 ;; Hardware stack levels required when called:    4
  4434 ;; This function calls:
  4435 ;;		Nothing
  4436 ;; This function is called by:
  4437 ;;		_touchObject
  4438 ;;		_touchTherm
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           	psect	text25
  4443  002584                     __ptext25:
  4444                           	callstack 0
  4445  002584                     _stopADC:
  4446                           	callstack 0
  4447  002584  FFFF               	dw	65535	; assembler added errata NOP
  4448  002586                     
  4449                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4450  002586  90C2               	bcf	194,0,c	;volatile
  4451  002588  0012               	return		;funcret
  4452  00258A  FFFF               	dw	65535	; errata NOP
  4453  00258C                     __end_of_stopADC:
  4454                           	callstack 0
  4455                           
  4456 ;; *************** function _startADC *****************
  4457 ;; Defined at:
  4458 ;;		line 36 in file "adc.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;		None
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;		None
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  1    wreg      void 
  4465 ;; Registers used:
  4466 ;;		None
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4472 ;;      Params:         0       0       0       0       0       0       0
  4473 ;;      Locals:         0       0       0       0       0       0       0
  4474 ;;      Temps:          0       0       0       0       0       0       0
  4475 ;;      Totals:         0       0       0       0       0       0       0
  4476 ;;Total ram usage:        0 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    4
  4479 ;; This function calls:
  4480 ;;		Nothing
  4481 ;; This function is called by:
  4482 ;;		_touchObject
  4483 ;;		_touchTherm
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           	psect	text26
  4488  002528                     __ptext26:
  4489                           	callstack 0
  4490  002528                     _startADC:
  4491                           	callstack 0
  4492  002528  FFFF               	dw	65535	; assembler added errata NOP
  4493  00252A                     
  4494                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4495  00252A  80C2               	bsf	194,0,c	;volatile
  4496                           
  4497                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4498  00252C  84C2               	bsf	194,2,c	;volatile
  4499  00252E  0012               	return		;funcret
  4500  002530  FFFF               	dw	65535	; errata NOP
  4501  002532                     __end_of_startADC:
  4502                           	callstack 0
  4503                           
  4504 ;; *************** function _returnTouch *****************
  4505 ;; Defined at:
  4506 ;;		line 51 in file "adc.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;		None
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;		None
  4511 ;; Return value:  Size  Location     Type
  4512 ;;                  2   17[COMRAM] unsigned int 
  4513 ;; Registers used:
  4514 ;;		None
  4515 ;; Tracked objects:
  4516 ;;		On entry : 0/0
  4517 ;;		On exit  : 0/0
  4518 ;;		Unchanged: 0/0
  4519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4520 ;;      Params:         2       0       0       0       0       0       0
  4521 ;;      Locals:         0       0       0       0       0       0       0
  4522 ;;      Temps:          0       0       0       0       0       0       0
  4523 ;;      Totals:         2       0       0       0       0       0       0
  4524 ;;Total ram usage:        2 bytes
  4525 ;; Hardware stack levels used:    1
  4526 ;; Hardware stack levels required when called:    4
  4527 ;; This function calls:
  4528 ;;		Nothing
  4529 ;; This function is called by:
  4530 ;;		_touchObject
  4531 ;; This function uses a non-reentrant model
  4532 ;;
  4533                           
  4534                           	psect	text27
  4535  002506                     __ptext27:
  4536                           	callstack 0
  4537  002506                     _returnTouch:
  4538                           	callstack 0
  4539  002506  FFFF               	dw	65535	; assembler added errata NOP
  4540  002508                     
  4541                           ;adc.c: 52:     return touch_rel;
  4542  002508  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4543  00250C  6A13               	clrf	(?_returnTouch+1)^0,c
  4544  00250E  0012               	return		;funcret
  4545  002510  FFFF               	dw	65535	; errata NOP
  4546  002512                     __end_of_returnTouch:
  4547                           	callstack 0
  4548                           
  4549 ;; *************** function _resetTouch *****************
  4550 ;; Defined at:
  4551 ;;		line 65 in file "adc.c"
  4552 ;; Parameters:    Size  Location     Type
  4553 ;;		None
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;		None
  4556 ;; Return value:  Size  Location     Type
  4557 ;;                  1    wreg      void 
  4558 ;; Registers used:
  4559 ;;		wreg, status,2
  4560 ;; Tracked objects:
  4561 ;;		On entry : 0/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4565 ;;      Params:         0       0       0       0       0       0       0
  4566 ;;      Locals:         0       0       0       0       0       0       0
  4567 ;;      Temps:          0       0       0       0       0       0       0
  4568 ;;      Totals:         0       0       0       0       0       0       0
  4569 ;;Total ram usage:        0 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; Hardware stack levels required when called:    4
  4572 ;; This function calls:
  4573 ;;		Nothing
  4574 ;; This function is called by:
  4575 ;;		_touchObject
  4576 ;; This function uses a non-reentrant model
  4577 ;;
  4578                           
  4579                           	psect	text28
  4580  002532                     __ptext28:
  4581                           	callstack 0
  4582  002532                     _resetTouch:
  4583                           	callstack 0
  4584  002532  FFFF               	dw	65535	; assembler added errata NOP
  4585  002534                     
  4586                           ;adc.c: 66:     touch_rel = 0;
  4587  002534  0E00               	movlw	0
  4588  002536  6E65               	movwf	_touch_rel^0,c	;volatile
  4589  002538  0012               	return		;funcret
  4590  00253A  FFFF               	dw	65535	; errata NOP
  4591  00253C                     __end_of_resetTouch:
  4592                           	callstack 0
  4593                           
  4594 ;; *************** function _rotateObj *****************
  4595 ;; Defined at:
  4596 ;;		line 575 in file "motors.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;  rotAngle        1    wreg     unsigned char 
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;  rotAngle        1    3[BANK0 ] unsigned char 
  4601 ;;  i               2    6[BANK0 ] unsigned int 
  4602 ;;  totStep         2    4[BANK0 ] int 
  4603 ;; Return value:  Size  Location     Type
  4604 ;;                  1    wreg      void 
  4605 ;; Registers used:
  4606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4612 ;;      Params:         0       0       0       0       0       0       0
  4613 ;;      Locals:         0       5       0       0       0       0       0
  4614 ;;      Temps:          0       3       0       0       0       0       0
  4615 ;;      Totals:         0       8       0       0       0       0       0
  4616 ;;Total ram usage:        8 bytes
  4617 ;; Hardware stack levels used:    1
  4618 ;; Hardware stack levels required when called:    5
  4619 ;; This function calls:
  4620 ;;		___fldiv
  4621 ;;		___fltol
  4622 ;;		___xxtofl
  4623 ;;		_stepMade
  4624 ;; This function is called by:
  4625 ;;		_executeData
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text29
  4630  001D0C                     __ptext29:
  4631                           	callstack 0
  4632  001D0C                     _rotateObj:
  4633                           	callstack 0
  4634  001D0C  FFFF               	dw	65535	; assembler added errata NOP
  4635                           
  4636                           ;incstack = 0
  4637                           ;rotateObj@rotAngle stored from wreg
  4638  001D0E  0100               	movlb	0	; () banked
  4639  001D10  6FFA               	movwf	rotateObj@rotAngle& (0+255),b
  4640  001D12                     
  4641                           ;motors.c: 576:     static const float stepAngle = 0.08789;;motors.c: 577:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 578:     unsigned int i;;
      +                          motors.c: 579:     int totStep = rotAngle/stepAngle;
  4642  001D12  0EAC               	movlw	172
  4643  001D14  6E24               	movwf	___fldiv@a^0,c
  4644  001D16  0EFF               	movlw	255
  4645  001D18  6E25               	movwf	(___fldiv@a+1)^0,c
  4646  001D1A  0EB3               	movlw	179
  4647  001D1C  6E26               	movwf	(___fldiv@a+2)^0,c
  4648  001D1E  0E3D               	movlw	61
  4649  001D20  6E27               	movwf	(___fldiv@a+3)^0,c
  4650  001D22  0100               	movlb	0	; () banked
  4651  001D24  51FA               	movf	rotateObj@rotAngle& (0+255),w,b
  4652  001D26  6E12               	movwf	___xxtofl@val^0,c
  4653  001D28  6A13               	clrf	(___xxtofl@val+1)^0,c
  4654  001D2A  6A14               	clrf	(___xxtofl@val+2)^0,c
  4655  001D2C  6A15               	clrf	(___xxtofl@val+3)^0,c
  4656  001D2E  0E01               	movlw	1
  4657  001D30  ECC9  F007         	call	___xxtofl
  4658  001D34  C012  F020         	movff	?___xxtofl,___fldiv@b
  4659  001D38  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4660  001D3C  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4661  001D40  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4662  001D44  EC08  F003         	call	___fldiv	;wreg free
  4663  001D48  C020  F039         	movff	?___fldiv,___fltol@f1
  4664  001D4C  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4665  001D50  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4666  001D54  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4667  001D58  ECDD  F00B         	call	___fltol	;wreg free
  4668  001D5C  C039  F0FB         	movff	?___fltol,rotateObj@totStep
  4669  001D60  C03A  F0FC         	movff	?___fltol+1,rotateObj@totStep+1
  4670  001D64                     
  4671                           ;motors.c: 582:     for(i = 0; i < totStep; i++){
  4672  001D64  0E00               	movlw	0
  4673  001D66  0100               	movlb	0	; () banked
  4674  001D68  6FFE               	movwf	(rotateObj@i+1)& (0+255),b
  4675  001D6A  0E00               	movlw	0
  4676  001D6C  6FFD               	movwf	rotateObj@i& (0+255),b
  4677  001D6E  EFE4  F00E         	goto	l3924
  4678  001D72                     l3912:
  4679  001D72  FFFF               	dw	65535	; assembler added errata NOP
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;motors.c: 584:         LATD &= 0xC3;
  4683  001D74  0EC3               	movlw	195
  4684  001D76  168C               	andwf	140,f,c	;volatile
  4685  001D78                     
  4686                           ; BSR set to: 0
  4687                           ;motors.c: 586:         LATD |= rotSequence[i%4] << 2;
  4688  001D78  0E03               	movlw	3
  4689  001D7A  15FD               	andwf	rotateObj@i& (0+255),w,b
  4690  001D7C  6FF7               	movwf	??_rotateObj& (0+255),b
  4691  001D7E  0E00               	movlw	0
  4692  001D80  15FE               	andwf	(rotateObj@i+1)& (0+255),w,b
  4693  001D82  6FF8               	movwf	(??_rotateObj+1)& (0+255),b
  4694  001D84  0E80               	movlw	low rotateObj@rotSequence
  4695  001D86  25F7               	addwf	??_rotateObj& (0+255),w,b
  4696  001D88  6ED9               	movwf	fsr2l,c
  4697  001D8A  0E00               	movlw	high rotateObj@rotSequence
  4698  001D8C  21F8               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4699  001D8E  6EDA               	movwf	fsr2h,c
  4700  001D90  50DF               	movf	indf2,w,c
  4701  001D92  6FF9               	movwf	(??_rotateObj+2)& (0+255),b
  4702  001D94  90D8               	bcf	status,0,c
  4703  001D96  37F9               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4704  001D98  90D8               	bcf	status,0,c
  4705  001D9A  35F9               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4706  001D9C  128C               	iorwf	140,f,c	;volatile
  4707  001D9E                     
  4708                           ; BSR set to: 0
  4709                           ;motors.c: 590:         T2CONbits.TMR2ON = 1;
  4710  001D9E  84CA               	bsf	202,2,c	;volatile
  4711  001DA0                     l3918:
  4712  001DA0  FFFF               	dw	65535	; assembler added errata NOP
  4713  001DA2  EC47  F012         	call	_stepMade	;wreg free
  4714  001DA6  5012               	movf	?_stepMade^0,w,c
  4715  001DA8  1013               	iorwf	(?_stepMade+1)^0,w,c
  4716  001DAA  B4D8               	btfsc	status,2,c
  4717  001DAC  EFDA  F00E         	goto	u3311
  4718  001DB0  EFDD  F00E         	goto	u3310
  4719  001DB4                     u3311:
  4720  001DB4  FFFF               	dw	65535	; assembler added errata NOP
  4721  001DB6  EFD0  F00E         	goto	l3918
  4722  001DBA                     u3310:
  4723  001DBA  FFFF               	dw	65535	; assembler added errata NOP
  4724  001DBC                     
  4725                           ;motors.c: 592:         T2CONbits.TMR2ON = 1;
  4726  001DBC  84CA               	bsf	202,2,c	;volatile
  4727  001DBE                     
  4728                           ;motors.c: 593:         TMR2 = 0;
  4729  001DBE  0E00               	movlw	0
  4730  001DC0  6ECC               	movwf	204,c	;volatile
  4731  001DC2                     
  4732                           ;motors.c: 594:     }
  4733  001DC2  0100               	movlb	0	; () banked
  4734  001DC4  4BFD               	infsnz	rotateObj@i& (0+255),f,b
  4735  001DC6  2BFE               	incf	(rotateObj@i+1)& (0+255),f,b
  4736  001DC8                     l3924:
  4737  001DC8  FFFF               	dw	65535	; assembler added errata NOP
  4738                           
  4739                           ; BSR set to: 0
  4740  001DCA  51FB               	movf	rotateObj@totStep& (0+255),w,b
  4741  001DCC  5DFD               	subwf	rotateObj@i& (0+255),w,b
  4742  001DCE  51FC               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4743  001DD0  59FE               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4744  001DD2  A0D8               	btfss	status,0,c
  4745  001DD4  EFEE  F00E         	goto	u3321
  4746  001DD8  EFF1  F00E         	goto	u3320
  4747  001DDC                     u3321:
  4748  001DDC  FFFF               	dw	65535	; assembler added errata NOP
  4749  001DDE  EFB9  F00E         	goto	l3912
  4750  001DE2                     u3320:
  4751  001DE2  FFFF               	dw	65535	; assembler added errata NOP
  4752  001DE4                     
  4753                           ; BSR set to: 0
  4754  001DE4  0012               	return		;funcret
  4755  001DE6  FFFF               	dw	65535	; errata NOP
  4756  001DE8                     __end_of_rotateObj:
  4757                           	callstack 0
  4758                           
  4759 ;; *************** function ___xxtofl *****************
  4760 ;; Defined at:
  4761 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;  sign            1    wreg     unsigned char 
  4764 ;;  val             4   17[COMRAM] long 
  4765 ;; Auto vars:     Size  Location     Type
  4766 ;;  sign            1   25[COMRAM] unsigned char 
  4767 ;;  arg             4   27[COMRAM] unsigned long 
  4768 ;;  exp             1   26[COMRAM] unsigned char 
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  4   17[COMRAM] unsigned char 
  4771 ;; Registers used:
  4772 ;;		wreg, status,2, status,0
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4778 ;;      Params:         4       0       0       0       0       0       0
  4779 ;;      Locals:         6       0       0       0       0       0       0
  4780 ;;      Temps:          4       0       0       0       0       0       0
  4781 ;;      Totals:        14       0       0       0       0       0       0
  4782 ;;Total ram usage:       14 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; Hardware stack levels required when called:    4
  4785 ;; This function calls:
  4786 ;;		Nothing
  4787 ;; This function is called by:
  4788 ;;		_rotateObj
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           	psect	text30
  4793  000F92                     __ptext30:
  4794                           	callstack 0
  4795  000F92                     ___xxtofl:
  4796                           	callstack 0
  4797  000F92  FFFF               	dw	65535	; assembler added errata NOP
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;incstack = 0
  4801                           ;___xxtofl@sign stored from wreg
  4802  000F94  6E1A               	movwf	___xxtofl@sign^0,c
  4803  000F96  501A               	movf	___xxtofl@sign^0,w,c
  4804  000F98  B4D8               	btfsc	status,2,c
  4805  000F9A  EFD1  F007         	goto	u2821
  4806  000F9E  EFD4  F007         	goto	u2820
  4807  000FA2                     u2821:
  4808  000FA2  FFFF               	dw	65535	; assembler added errata NOP
  4809  000FA4  EFF9  F007         	goto	l1244
  4810  000FA8                     u2820:
  4811  000FA8  FFFF               	dw	65535	; assembler added errata NOP
  4812  000FAA  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4813  000FAC  EFDD  F007         	goto	u2830
  4814  000FB0  EFDA  F007         	goto	u2831
  4815  000FB4                     u2831:
  4816  000FB4  FFFF               	dw	65535	; assembler added errata NOP
  4817  000FB6  EFF9  F007         	goto	l1244
  4818  000FBA                     u2830:
  4819  000FBA  FFFF               	dw	65535	; assembler added errata NOP
  4820  000FBC  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4821  000FC0  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4822  000FC4  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4823  000FC8  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4824  000FCC  1E16               	comf	??___xxtofl^0,f,c
  4825  000FCE  1E17               	comf	(??___xxtofl+1)^0,f,c
  4826  000FD0  1E18               	comf	(??___xxtofl+2)^0,f,c
  4827  000FD2  1E19               	comf	(??___xxtofl+3)^0,f,c
  4828  000FD4  2A16               	incf	??___xxtofl^0,f,c
  4829  000FD6  0E00               	movlw	0
  4830  000FD8  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4831  000FDA  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4832  000FDC  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4833  000FDE  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4834  000FE2  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4835  000FE6  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4836  000FEA  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4837  000FEE  EF02  F008         	goto	l3622
  4838  000FF2                     l1244:
  4839  000FF2  FFFF               	dw	65535	; assembler added errata NOP
  4840  000FF4  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4841  000FF8  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4842  000FFC  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4843  001000  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4844  001004                     l3622:
  4845  001004  FFFF               	dw	65535	; assembler added errata NOP
  4846  001006  5012               	movf	___xxtofl@val^0,w,c
  4847  001008  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4848  00100A  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4849  00100C  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4850  00100E  A4D8               	btfss	status,2,c
  4851  001010  EF0C  F008         	goto	u2841
  4852  001014  EF0F  F008         	goto	u2840
  4853  001018                     u2841:
  4854  001018  FFFF               	dw	65535	; assembler added errata NOP
  4855  00101A  EF1A  F008         	goto	l3628
  4856  00101E                     u2840:
  4857  00101E  FFFF               	dw	65535	; assembler added errata NOP
  4858  001020  0E00               	movlw	0
  4859  001022  6E12               	movwf	?___xxtofl^0,c
  4860  001024  0E00               	movlw	0
  4861  001026  6E13               	movwf	(?___xxtofl+1)^0,c
  4862  001028  0E00               	movlw	0
  4863  00102A  6E14               	movwf	(?___xxtofl+2)^0,c
  4864  00102C  0E00               	movlw	0
  4865  00102E  6E15               	movwf	(?___xxtofl+3)^0,c
  4866  001030  EFC2  F008         	goto	l1247
  4867  001034                     l3628:
  4868  001034  FFFF               	dw	65535	; assembler added errata NOP
  4869  001036  0E96               	movlw	150
  4870  001038  6E1B               	movwf	___xxtofl@exp^0,c
  4871  00103A  EF26  F008         	goto	l3632
  4872  00103E                     l3630:
  4873  00103E  FFFF               	dw	65535	; assembler added errata NOP
  4874  001040  2A1B               	incf	___xxtofl@exp^0,f,c
  4875  001042  90D8               	bcf	status,0,c
  4876  001044  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4877  001046  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4878  001048  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4879  00104A  321C               	rrcf	___xxtofl@arg^0,f,c
  4880  00104C                     l3632:
  4881  00104C  FFFF               	dw	65535	; assembler added errata NOP
  4882  00104E  0E00               	movlw	0
  4883  001050  141C               	andwf	___xxtofl@arg^0,w,c
  4884  001052  6E16               	movwf	??___xxtofl^0,c
  4885  001054  0E00               	movlw	0
  4886  001056  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4887  001058  6E17               	movwf	(??___xxtofl+1)^0,c
  4888  00105A  0E00               	movlw	0
  4889  00105C  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4890  00105E  6E18               	movwf	(??___xxtofl+2)^0,c
  4891  001060  0EFE               	movlw	254
  4892  001062  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4893  001064  6E19               	movwf	(??___xxtofl+3)^0,c
  4894  001066  5016               	movf	??___xxtofl^0,w,c
  4895  001068  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4896  00106A  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4897  00106C  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4898  00106E  A4D8               	btfss	status,2,c
  4899  001070  EF3C  F008         	goto	u2851
  4900  001074  EF3F  F008         	goto	u2850
  4901  001078                     u2851:
  4902  001078  FFFF               	dw	65535	; assembler added errata NOP
  4903  00107A  EF1F  F008         	goto	l3630
  4904  00107E                     u2850:
  4905  00107E  FFFF               	dw	65535	; assembler added errata NOP
  4906  001080  EF4F  F008         	goto	l1251
  4907  001084                     l3634:
  4908  001084  FFFF               	dw	65535	; assembler added errata NOP
  4909  001086  2A1B               	incf	___xxtofl@exp^0,f,c
  4910  001088  0E01               	movlw	1
  4911  00108A  261C               	addwf	___xxtofl@arg^0,f,c
  4912  00108C  0E00               	movlw	0
  4913  00108E  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4914  001090  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4915  001092  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4916  001094  90D8               	bcf	status,0,c
  4917  001096  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4918  001098  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4919  00109A  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4920  00109C  321C               	rrcf	___xxtofl@arg^0,f,c
  4921  00109E                     l1251:
  4922  00109E  FFFF               	dw	65535	; assembler added errata NOP
  4923  0010A0  0E00               	movlw	0
  4924  0010A2  141C               	andwf	___xxtofl@arg^0,w,c
  4925  0010A4  6E16               	movwf	??___xxtofl^0,c
  4926  0010A6  0E00               	movlw	0
  4927  0010A8  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4928  0010AA  6E17               	movwf	(??___xxtofl+1)^0,c
  4929  0010AC  0E00               	movlw	0
  4930  0010AE  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4931  0010B0  6E18               	movwf	(??___xxtofl+2)^0,c
  4932  0010B2  0EFF               	movlw	255
  4933  0010B4  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4934  0010B6  6E19               	movwf	(??___xxtofl+3)^0,c
  4935  0010B8  5016               	movf	??___xxtofl^0,w,c
  4936  0010BA  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4937  0010BC  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4938  0010BE  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4939  0010C0  A4D8               	btfss	status,2,c
  4940  0010C2  EF65  F008         	goto	u2861
  4941  0010C6  EF68  F008         	goto	u2860
  4942  0010CA                     u2861:
  4943  0010CA  FFFF               	dw	65535	; assembler added errata NOP
  4944  0010CC  EF42  F008         	goto	l3634
  4945  0010D0                     u2860:
  4946  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  4947  0010D2  EF72  F008         	goto	l3642
  4948  0010D6                     l3640:
  4949  0010D6  FFFF               	dw	65535	; assembler added errata NOP
  4950  0010D8  061B               	decf	___xxtofl@exp^0,f,c
  4951  0010DA  90D8               	bcf	status,0,c
  4952  0010DC  361C               	rlcf	___xxtofl@arg^0,f,c
  4953  0010DE  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4954  0010E0  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4955  0010E2  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4956  0010E4                     l3642:
  4957  0010E4  FFFF               	dw	65535	; assembler added errata NOP
  4958  0010E6  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4959  0010E8  EF78  F008         	goto	u2871
  4960  0010EC  EF7B  F008         	goto	u2870
  4961  0010F0                     u2871:
  4962  0010F0  FFFF               	dw	65535	; assembler added errata NOP
  4963  0010F2  EF85  F008         	goto	l1258
  4964  0010F6                     u2870:
  4965  0010F6  FFFF               	dw	65535	; assembler added errata NOP
  4966  0010F8  0E02               	movlw	2
  4967  0010FA  601B               	cpfslt	___xxtofl@exp^0,c
  4968  0010FC  EF82  F008         	goto	u2881
  4969  001100  EF85  F008         	goto	u2880
  4970  001104                     u2881:
  4971  001104  FFFF               	dw	65535	; assembler added errata NOP
  4972  001106  EF6B  F008         	goto	l3640
  4973  00110A                     u2880:
  4974  00110A                     l1258:
  4975  00110A  FFFF               	dw	65535	; assembler added errata NOP
  4976  00110C  B01B               	btfsc	___xxtofl@exp^0,0,c
  4977  00110E  EF8B  F008         	goto	u2891
  4978  001112  EF8E  F008         	goto	u2890
  4979  001116                     u2891:
  4980  001116  FFFF               	dw	65535	; assembler added errata NOP
  4981  001118  EF90  F008         	goto	l3648
  4982  00111C                     u2890:
  4983  00111C  FFFF               	dw	65535	; assembler added errata NOP
  4984  00111E  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4985  001120                     l3648:
  4986  001120  FFFF               	dw	65535	; assembler added errata NOP
  4987  001122  90D8               	bcf	status,0,c
  4988  001124  321B               	rrcf	___xxtofl@exp^0,f,c
  4989  001126  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4990  00112A  6A17               	clrf	(??___xxtofl+1)^0,c
  4991  00112C  6A18               	clrf	(??___xxtofl+2)^0,c
  4992  00112E  6A19               	clrf	(??___xxtofl+3)^0,c
  4993  001130  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4994  001134  6A18               	clrf	(??___xxtofl+2)^0,c
  4995  001136  6A17               	clrf	(??___xxtofl+1)^0,c
  4996  001138  6A16               	clrf	??___xxtofl^0,c
  4997  00113A  5016               	movf	??___xxtofl^0,w,c
  4998  00113C  121C               	iorwf	___xxtofl@arg^0,f,c
  4999  00113E  5017               	movf	(??___xxtofl+1)^0,w,c
  5000  001140  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  5001  001142  5018               	movf	(??___xxtofl+2)^0,w,c
  5002  001144  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  5003  001146  5019               	movf	(??___xxtofl+3)^0,w,c
  5004  001148  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  5005  00114A  501A               	movf	___xxtofl@sign^0,w,c
  5006  00114C  B4D8               	btfsc	status,2,c
  5007  00114E  EFAB  F008         	goto	u2901
  5008  001152  EFAE  F008         	goto	u2900
  5009  001156                     u2901:
  5010  001156  FFFF               	dw	65535	; assembler added errata NOP
  5011  001158  EFB9  F008         	goto	l3658
  5012  00115C                     u2900:
  5013  00115C  FFFF               	dw	65535	; assembler added errata NOP
  5014  00115E  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  5015  001160  EFB7  F008         	goto	u2910
  5016  001164  EFB4  F008         	goto	u2911
  5017  001168                     u2911:
  5018  001168  FFFF               	dw	65535	; assembler added errata NOP
  5019  00116A  EFB9  F008         	goto	l3658
  5020  00116E                     u2910:
  5021  00116E  FFFF               	dw	65535	; assembler added errata NOP
  5022  001170  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  5023  001172                     l3658:
  5024  001172  FFFF               	dw	65535	; assembler added errata NOP
  5025  001174  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  5026  001178  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  5027  00117C  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  5028  001180  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5029  001184                     l1247:
  5030  001184  FFFF               	dw	65535	; assembler added errata NOP
  5031  001186  0012               	return		;funcret
  5032  001188  FFFF               	dw	65535	; errata NOP
  5033  00118A                     __end_of___xxtofl:
  5034                           	callstack 0
  5035                           
  5036 ;; *************** function ___fltol *****************
  5037 ;; Defined at:
  5038 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;  f1              4   56[COMRAM] unsigned char 
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;  exp1            1   65[COMRAM] unsigned char 
  5043 ;;  sign1           1   64[COMRAM] unsigned char 
  5044 ;; Return value:  Size  Location     Type
  5045 ;;                  4   56[COMRAM] long 
  5046 ;; Registers used:
  5047 ;;		wreg, status,2, status,0
  5048 ;; Tracked objects:
  5049 ;;		On entry : 0/0
  5050 ;;		On exit  : 0/0
  5051 ;;		Unchanged: 0/0
  5052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5053 ;;      Params:         4       0       0       0       0       0       0
  5054 ;;      Locals:         2       0       0       0       0       0       0
  5055 ;;      Temps:          4       0       0       0       0       0       0
  5056 ;;      Totals:        10       0       0       0       0       0       0
  5057 ;;Total ram usage:       10 bytes
  5058 ;; Hardware stack levels used:    1
  5059 ;; Hardware stack levels required when called:    4
  5060 ;; This function calls:
  5061 ;;		Nothing
  5062 ;; This function is called by:
  5063 ;;		_rotateObj
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           	psect	text31
  5068  0017BA                     __ptext31:
  5069                           	callstack 0
  5070  0017BA                     ___fltol:
  5071                           	callstack 0
  5072  0017BA  FFFF               	dw	65535	; assembler added errata NOP
  5073  0017BC  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5074  0017BE  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5075  0017C0  6E42               	movwf	___fltol@exp1^0,c
  5076  0017C2  5042               	movf	___fltol@exp1^0,w,c
  5077  0017C4  A4D8               	btfss	status,2,c
  5078  0017C6  EFE7  F00B         	goto	u2751
  5079  0017CA  EFEA  F00B         	goto	u2750
  5080  0017CE                     u2751:
  5081  0017CE  FFFF               	dw	65535	; assembler added errata NOP
  5082  0017D0  EFF6  F00B         	goto	l3578
  5083  0017D4                     u2750:
  5084  0017D4  FFFF               	dw	65535	; assembler added errata NOP
  5085  0017D6                     l3574:
  5086  0017D6  FFFF               	dw	65535	; assembler added errata NOP
  5087  0017D8  0E00               	movlw	0
  5088  0017DA  6E39               	movwf	?___fltol^0,c
  5089  0017DC  0E00               	movlw	0
  5090  0017DE  6E3A               	movwf	(?___fltol+1)^0,c
  5091  0017E0  0E00               	movlw	0
  5092  0017E2  6E3B               	movwf	(?___fltol+2)^0,c
  5093  0017E4  0E00               	movlw	0
  5094  0017E6  6E3C               	movwf	(?___fltol+3)^0,c
  5095  0017E8  EF75  F00C         	goto	l886
  5096  0017EC                     l3578:
  5097  0017EC  FFFF               	dw	65535	; assembler added errata NOP
  5098  0017EE  C039  F03D         	movff	___fltol@f1,??___fltol
  5099  0017F2  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5100  0017F6  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5101  0017FA  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5102  0017FE  0E20               	movlw	32
  5103  001800  EF08  F00C         	goto	u2760
  5104  001804                     u2765:
  5105  001804  FFFF               	dw	65535	; assembler added errata NOP
  5106  001806  90D8               	bcf	status,0,c
  5107  001808  3240               	rrcf	(??___fltol+3)^0,f,c
  5108  00180A  323F               	rrcf	(??___fltol+2)^0,f,c
  5109  00180C  323E               	rrcf	(??___fltol+1)^0,f,c
  5110  00180E  323D               	rrcf	??___fltol^0,f,c
  5111  001810                     u2760:
  5112  001810  FFFF               	dw	65535	; assembler added errata NOP
  5113  001812  2EE8               	decfsz	wreg,f,c
  5114  001814  EF02  F00C         	goto	u2765
  5115  001818  503D               	movf	??___fltol^0,w,c
  5116  00181A  6E41               	movwf	___fltol@sign1^0,c
  5117  00181C  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5118  00181E  0EFF               	movlw	255
  5119  001820  1639               	andwf	___fltol@f1^0,f,c
  5120  001822  0EFF               	movlw	255
  5121  001824  163A               	andwf	(___fltol@f1+1)^0,f,c
  5122  001826  0EFF               	movlw	255
  5123  001828  163B               	andwf	(___fltol@f1+2)^0,f,c
  5124  00182A  0E00               	movlw	0
  5125  00182C  163C               	andwf	(___fltol@f1+3)^0,f,c
  5126  00182E  0E96               	movlw	150
  5127  001830  5E42               	subwf	___fltol@exp1^0,f,c
  5128  001832  BE42               	btfsc	___fltol@exp1^0,7,c
  5129  001834  EF21  F00C         	goto	u2770
  5130  001838  EF1E  F00C         	goto	u2771
  5131  00183C                     u2771:
  5132  00183C  FFFF               	dw	65535	; assembler added errata NOP
  5133  00183E  EF3B  F00C         	goto	l3598
  5134  001842                     u2770:
  5135  001842  FFFF               	dw	65535	; assembler added errata NOP
  5136  001844  5042               	movf	___fltol@exp1^0,w,c
  5137  001846  0A80               	xorlw	128
  5138  001848  0F97               	addlw	151
  5139  00184A  B0D8               	btfsc	status,0,c
  5140  00184C  EF2A  F00C         	goto	u2781
  5141  001850  EF2D  F00C         	goto	u2780
  5142  001854                     u2781:
  5143  001854  FFFF               	dw	65535	; assembler added errata NOP
  5144  001856  EF30  F00C         	goto	l3594
  5145  00185A                     u2780:
  5146  00185A  FFFF               	dw	65535	; assembler added errata NOP
  5147  00185C  EFEB  F00B         	goto	l3574
  5148  001860                     l3594:
  5149  001860  FFFF               	dw	65535	; assembler added errata NOP
  5150  001862  90D8               	bcf	status,0,c
  5151  001864  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5152  001866  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5153  001868  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5154  00186A  3239               	rrcf	___fltol@f1^0,f,c
  5155  00186C  3E42               	incfsz	___fltol@exp1^0,f,c
  5156  00186E  EF30  F00C         	goto	l3594
  5157  001872  EF59  F00C         	goto	l3608
  5158  001876                     l3598:
  5159  001876  FFFF               	dw	65535	; assembler added errata NOP
  5160  001878  0E1F               	movlw	31
  5161  00187A  6442               	cpfsgt	___fltol@exp1^0,c
  5162  00187C  EF42  F00C         	goto	u2791
  5163  001880  EF45  F00C         	goto	u2790
  5164  001884                     u2791:
  5165  001884  FFFF               	dw	65535	; assembler added errata NOP
  5166  001886  EF4F  F00C         	goto	l3606
  5167  00188A                     u2790:
  5168  00188A  FFFF               	dw	65535	; assembler added errata NOP
  5169  00188C  EFEB  F00B         	goto	l3574
  5170  001890                     l3604:
  5171  001890  FFFF               	dw	65535	; assembler added errata NOP
  5172  001892  90D8               	bcf	status,0,c
  5173  001894  3639               	rlcf	___fltol@f1^0,f,c
  5174  001896  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5175  001898  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5176  00189A  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5177  00189C  0642               	decf	___fltol@exp1^0,f,c
  5178  00189E                     l3606:
  5179  00189E  FFFF               	dw	65535	; assembler added errata NOP
  5180  0018A0  5042               	movf	___fltol@exp1^0,w,c
  5181  0018A2  A4D8               	btfss	status,2,c
  5182  0018A4  EF56  F00C         	goto	u2801
  5183  0018A8  EF59  F00C         	goto	u2800
  5184  0018AC                     u2801:
  5185  0018AC  FFFF               	dw	65535	; assembler added errata NOP
  5186  0018AE  EF48  F00C         	goto	l3604
  5187  0018B2                     u2800:
  5188  0018B2                     l3608:
  5189  0018B2  FFFF               	dw	65535	; assembler added errata NOP
  5190  0018B4  5041               	movf	___fltol@sign1^0,w,c
  5191  0018B6  B4D8               	btfsc	status,2,c
  5192  0018B8  EF60  F00C         	goto	u2811
  5193  0018BC  EF63  F00C         	goto	u2810
  5194  0018C0                     u2811:
  5195  0018C0  FFFF               	dw	65535	; assembler added errata NOP
  5196  0018C2  EF6C  F00C         	goto	l3612
  5197  0018C6                     u2810:
  5198  0018C6  FFFF               	dw	65535	; assembler added errata NOP
  5199  0018C8  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5200  0018CA  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5201  0018CC  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5202  0018CE  6C39               	negf	___fltol@f1^0,c
  5203  0018D0  0E00               	movlw	0
  5204  0018D2  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5205  0018D4  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5206  0018D6  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5207  0018D8                     l3612:
  5208  0018D8  FFFF               	dw	65535	; assembler added errata NOP
  5209  0018DA  C039  F039         	movff	___fltol@f1,?___fltol
  5210  0018DE  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5211  0018E2  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5212  0018E6  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5213  0018EA                     l886:
  5214  0018EA  FFFF               	dw	65535	; assembler added errata NOP
  5215  0018EC  0012               	return		;funcret
  5216  0018EE  FFFF               	dw	65535	; errata NOP
  5217  0018F0                     __end_of___fltol:
  5218                           	callstack 0
  5219                           
  5220 ;; *************** function ___fldiv *****************
  5221 ;; Defined at:
  5222 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  b               4   31[COMRAM] long 
  5225 ;;  a               4   35[COMRAM] long 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  grs             4   50[COMRAM] unsigned long 
  5228 ;;  rem             4   43[COMRAM] unsigned long 
  5229 ;;  new_exp         2   48[COMRAM] short 
  5230 ;;  aexp            1   55[COMRAM] unsigned char 
  5231 ;;  bexp            1   54[COMRAM] unsigned char 
  5232 ;;  sign            1   47[COMRAM] unsigned char 
  5233 ;; Return value:  Size  Location     Type
  5234 ;;                  4   31[COMRAM] unsigned char 
  5235 ;; Registers used:
  5236 ;;		wreg, status,2, status,0
  5237 ;; Tracked objects:
  5238 ;;		On entry : 0/0
  5239 ;;		On exit  : 0/0
  5240 ;;		Unchanged: 0/0
  5241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5242 ;;      Params:         8       0       0       0       0       0       0
  5243 ;;      Locals:        13       0       0       0       0       0       0
  5244 ;;      Temps:          4       0       0       0       0       0       0
  5245 ;;      Totals:        25       0       0       0       0       0       0
  5246 ;;Total ram usage:       25 bytes
  5247 ;; Hardware stack levels used:    1
  5248 ;; Hardware stack levels required when called:    4
  5249 ;; This function calls:
  5250 ;;		Nothing
  5251 ;; This function is called by:
  5252 ;;		_rotateObj
  5253 ;; This function uses a non-reentrant model
  5254 ;;
  5255                           
  5256                           	psect	text32
  5257  000610                     __ptext32:
  5258                           	callstack 0
  5259  000610                     ___fldiv:
  5260                           	callstack 0
  5261  000610  FFFF               	dw	65535	; assembler added errata NOP
  5262  000612  5023               	movf	(___fldiv@b+3)^0,w,c
  5263  000614  0B80               	andlw	128
  5264  000616  6E30               	movwf	___fldiv@sign^0,c
  5265  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  5266  00061A  2423               	addwf	(___fldiv@b+3)^0,w,c
  5267  00061C  6E37               	movwf	___fldiv@bexp^0,c
  5268  00061E  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5269  000620  EF14  F003         	goto	u2521
  5270  000624  EF17  F003         	goto	u2520
  5271  000628                     u2521:
  5272  000628  FFFF               	dw	65535	; assembler added errata NOP
  5273  00062A  EF19  F003         	goto	l3440
  5274  00062E                     u2520:
  5275  00062E  FFFF               	dw	65535	; assembler added errata NOP
  5276  000630  8037               	bsf	___fldiv@bexp^0,0,c
  5277  000632                     l3440:
  5278  000632  FFFF               	dw	65535	; assembler added errata NOP
  5279  000634  5037               	movf	___fldiv@bexp^0,w,c
  5280  000636  B4D8               	btfsc	status,2,c
  5281  000638  EF20  F003         	goto	u2531
  5282  00063C  EF23  F003         	goto	u2530
  5283  000640                     u2531:
  5284  000640  FFFF               	dw	65535	; assembler added errata NOP
  5285  000642  EF3C  F003         	goto	l3450
  5286  000646                     u2530:
  5287  000646  FFFF               	dw	65535	; assembler added errata NOP
  5288  000648  2837               	incf	___fldiv@bexp^0,w,c
  5289  00064A  A4D8               	btfss	status,2,c
  5290  00064C  EF2A  F003         	goto	u2541
  5291  000650  EF2D  F003         	goto	u2540
  5292  000654                     u2541:
  5293  000654  FFFF               	dw	65535	; assembler added errata NOP
  5294  000656  EF36  F003         	goto	l3446
  5295  00065A                     u2540:
  5296  00065A  FFFF               	dw	65535	; assembler added errata NOP
  5297  00065C  0E00               	movlw	0
  5298  00065E  6E20               	movwf	___fldiv@b^0,c
  5299  000660  0E00               	movlw	0
  5300  000662  6E21               	movwf	(___fldiv@b+1)^0,c
  5301  000664  0E00               	movlw	0
  5302  000666  6E22               	movwf	(___fldiv@b+2)^0,c
  5303  000668  0E00               	movlw	0
  5304  00066A  6E23               	movwf	(___fldiv@b+3)^0,c
  5305  00066C                     l3446:
  5306  00066C  FFFF               	dw	65535	; assembler added errata NOP
  5307  00066E  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5308  000670  0E00               	movlw	0
  5309  000672  6E23               	movwf	(___fldiv@b+3)^0,c
  5310  000674  EF45  F003         	goto	l3452
  5311  000678                     l3450:
  5312  000678  FFFF               	dw	65535	; assembler added errata NOP
  5313  00067A  0E00               	movlw	0
  5314  00067C  6E20               	movwf	___fldiv@b^0,c
  5315  00067E  0E00               	movlw	0
  5316  000680  6E21               	movwf	(___fldiv@b+1)^0,c
  5317  000682  0E00               	movlw	0
  5318  000684  6E22               	movwf	(___fldiv@b+2)^0,c
  5319  000686  0E00               	movlw	0
  5320  000688  6E23               	movwf	(___fldiv@b+3)^0,c
  5321  00068A                     l3452:
  5322  00068A  FFFF               	dw	65535	; assembler added errata NOP
  5323  00068C  5027               	movf	(___fldiv@a+3)^0,w,c
  5324  00068E  0B80               	andlw	128
  5325  000690  1A30               	xorwf	___fldiv@sign^0,f,c
  5326  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  5327  000694  2427               	addwf	(___fldiv@a+3)^0,w,c
  5328  000696  6E38               	movwf	___fldiv@aexp^0,c
  5329  000698  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5330  00069A  EF51  F003         	goto	u2551
  5331  00069E  EF54  F003         	goto	u2550
  5332  0006A2                     u2551:
  5333  0006A2  FFFF               	dw	65535	; assembler added errata NOP
  5334  0006A4  EF56  F003         	goto	l3460
  5335  0006A8                     u2550:
  5336  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  5337  0006AA  8038               	bsf	___fldiv@aexp^0,0,c
  5338  0006AC                     l3460:
  5339  0006AC  FFFF               	dw	65535	; assembler added errata NOP
  5340  0006AE  5038               	movf	___fldiv@aexp^0,w,c
  5341  0006B0  B4D8               	btfsc	status,2,c
  5342  0006B2  EF5D  F003         	goto	u2561
  5343  0006B6  EF60  F003         	goto	u2560
  5344  0006BA                     u2561:
  5345  0006BA  FFFF               	dw	65535	; assembler added errata NOP
  5346  0006BC  EF79  F003         	goto	l3470
  5347  0006C0                     u2560:
  5348  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  5349  0006C2  2838               	incf	___fldiv@aexp^0,w,c
  5350  0006C4  A4D8               	btfss	status,2,c
  5351  0006C6  EF67  F003         	goto	u2571
  5352  0006CA  EF6A  F003         	goto	u2570
  5353  0006CE                     u2571:
  5354  0006CE  FFFF               	dw	65535	; assembler added errata NOP
  5355  0006D0  EF73  F003         	goto	l3466
  5356  0006D4                     u2570:
  5357  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  5358  0006D6  0E00               	movlw	0
  5359  0006D8  6E24               	movwf	___fldiv@a^0,c
  5360  0006DA  0E00               	movlw	0
  5361  0006DC  6E25               	movwf	(___fldiv@a+1)^0,c
  5362  0006DE  0E00               	movlw	0
  5363  0006E0  6E26               	movwf	(___fldiv@a+2)^0,c
  5364  0006E2  0E00               	movlw	0
  5365  0006E4  6E27               	movwf	(___fldiv@a+3)^0,c
  5366  0006E6                     l3466:
  5367  0006E6  FFFF               	dw	65535	; assembler added errata NOP
  5368  0006E8  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5369  0006EA  0E00               	movlw	0
  5370  0006EC  6E27               	movwf	(___fldiv@a+3)^0,c
  5371  0006EE  EF82  F003         	goto	l3472
  5372  0006F2                     l3470:
  5373  0006F2  FFFF               	dw	65535	; assembler added errata NOP
  5374  0006F4  0E00               	movlw	0
  5375  0006F6  6E24               	movwf	___fldiv@a^0,c
  5376  0006F8  0E00               	movlw	0
  5377  0006FA  6E25               	movwf	(___fldiv@a+1)^0,c
  5378  0006FC  0E00               	movlw	0
  5379  0006FE  6E26               	movwf	(___fldiv@a+2)^0,c
  5380  000700  0E00               	movlw	0
  5381  000702  6E27               	movwf	(___fldiv@a+3)^0,c
  5382  000704                     l3472:
  5383  000704  FFFF               	dw	65535	; assembler added errata NOP
  5384  000706  5024               	movf	___fldiv@a^0,w,c
  5385  000708  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5386  00070A  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5387  00070C  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5388  00070E  A4D8               	btfss	status,2,c
  5389  000710  EF8C  F003         	goto	u2581
  5390  000714  EF8F  F003         	goto	u2580
  5391  000718                     u2581:
  5392  000718  FFFF               	dw	65535	; assembler added errata NOP
  5393  00071A  EFA9  F003         	goto	l3484
  5394  00071E                     u2580:
  5395  00071E  FFFF               	dw	65535	; assembler added errata NOP
  5396  000720  0E00               	movlw	0
  5397  000722  6E20               	movwf	___fldiv@b^0,c
  5398  000724  0E00               	movlw	0
  5399  000726  6E21               	movwf	(___fldiv@b+1)^0,c
  5400  000728  0E00               	movlw	0
  5401  00072A  6E22               	movwf	(___fldiv@b+2)^0,c
  5402  00072C  0E00               	movlw	0
  5403  00072E  6E23               	movwf	(___fldiv@b+3)^0,c
  5404  000730  0E80               	movlw	128
  5405  000732  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5406  000734  0E7F               	movlw	127
  5407  000736  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5408  000738                     l3478:
  5409  000738  FFFF               	dw	65535	; assembler added errata NOP
  5410  00073A  5030               	movf	___fldiv@sign^0,w,c
  5411  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5412  00073E  C020  F020         	movff	___fldiv@b,?___fldiv
  5413  000742  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5414  000746  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5415  00074A  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5416  00074E  EF1E  F005         	goto	l1171
  5417  000752                     l3484:
  5418  000752  FFFF               	dw	65535	; assembler added errata NOP
  5419  000754  5037               	movf	___fldiv@bexp^0,w,c
  5420  000756  A4D8               	btfss	status,2,c
  5421  000758  EFB0  F003         	goto	u2591
  5422  00075C  EFB3  F003         	goto	u2590
  5423  000760                     u2591:
  5424  000760  FFFF               	dw	65535	; assembler added errata NOP
  5425  000762  EFBE  F003         	goto	l3492
  5426  000766                     u2590:
  5427  000766  FFFF               	dw	65535	; assembler added errata NOP
  5428  000768  0E00               	movlw	0
  5429  00076A  6E20               	movwf	?___fldiv^0,c
  5430  00076C  0E00               	movlw	0
  5431  00076E  6E21               	movwf	(?___fldiv+1)^0,c
  5432  000770  0E00               	movlw	0
  5433  000772  6E22               	movwf	(?___fldiv+2)^0,c
  5434  000774  0E00               	movlw	0
  5435  000776  6E23               	movwf	(?___fldiv+3)^0,c
  5436  000778  EF1E  F005         	goto	l1171
  5437  00077C                     l3492:
  5438  00077C  FFFF               	dw	65535	; assembler added errata NOP
  5439  00077E  5038               	movf	___fldiv@aexp^0,w,c
  5440  000780  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5441  000784  6A29               	clrf	(??___fldiv+1)^0,c
  5442  000786  5E28               	subwf	??___fldiv^0,f,c
  5443  000788  0E00               	movlw	0
  5444  00078A  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5445  00078C  0E7F               	movlw	127
  5446  00078E  2428               	addwf	??___fldiv^0,w,c
  5447  000790  6E31               	movwf	___fldiv@new_exp^0,c
  5448  000792  0E00               	movlw	0
  5449  000794  2029               	addwfc	(??___fldiv+1)^0,w,c
  5450  000796  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5451  000798  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5452  00079C  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5453  0007A0  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5454  0007A4  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5455  0007A8  0E00               	movlw	0
  5456  0007AA  6E20               	movwf	___fldiv@b^0,c
  5457  0007AC  0E00               	movlw	0
  5458  0007AE  6E21               	movwf	(___fldiv@b+1)^0,c
  5459  0007B0  0E00               	movlw	0
  5460  0007B2  6E22               	movwf	(___fldiv@b+2)^0,c
  5461  0007B4  0E00               	movlw	0
  5462  0007B6  6E23               	movwf	(___fldiv@b+3)^0,c
  5463  0007B8  0E00               	movlw	0
  5464  0007BA  6E33               	movwf	___fldiv@grs^0,c
  5465  0007BC  0E00               	movlw	0
  5466  0007BE  6E34               	movwf	(___fldiv@grs+1)^0,c
  5467  0007C0  0E00               	movlw	0
  5468  0007C2  6E35               	movwf	(___fldiv@grs+2)^0,c
  5469  0007C4  0E00               	movlw	0
  5470  0007C6  6E36               	movwf	(___fldiv@grs+3)^0,c
  5471  0007C8  0E00               	movlw	0
  5472  0007CA  6E38               	movwf	___fldiv@aexp^0,c
  5473  0007CC  EF2A  F004         	goto	l1173
  5474  0007D0                     l3502:
  5475  0007D0  FFFF               	dw	65535	; assembler added errata NOP
  5476  0007D2  5038               	movf	___fldiv@aexp^0,w,c
  5477  0007D4  B4D8               	btfsc	status,2,c
  5478  0007D6  EFEF  F003         	goto	u2601
  5479  0007DA  EFF2  F003         	goto	u2600
  5480  0007DE                     u2601:
  5481  0007DE  FFFF               	dw	65535	; assembler added errata NOP
  5482  0007E0  EF0D  F004         	goto	l3510
  5483  0007E4                     u2600:
  5484  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  5485  0007E6  90D8               	bcf	status,0,c
  5486  0007E8  362C               	rlcf	___fldiv@rem^0,f,c
  5487  0007EA  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5488  0007EC  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5489  0007EE  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5490  0007F0  90D8               	bcf	status,0,c
  5491  0007F2  3620               	rlcf	___fldiv@b^0,f,c
  5492  0007F4  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5493  0007F6  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5494  0007F8  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5495  0007FA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5496  0007FC  EF02  F004         	goto	u2611
  5497  000800  EF05  F004         	goto	u2610
  5498  000804                     u2611:
  5499  000804  FFFF               	dw	65535	; assembler added errata NOP
  5500  000806  EF07  F004         	goto	l1176
  5501  00080A                     u2610:
  5502  00080A  FFFF               	dw	65535	; assembler added errata NOP
  5503  00080C  8020               	bsf	___fldiv@b^0,0,c
  5504  00080E                     l1176:
  5505  00080E  FFFF               	dw	65535	; assembler added errata NOP
  5506  000810  90D8               	bcf	status,0,c
  5507  000812  3633               	rlcf	___fldiv@grs^0,f,c
  5508  000814  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5509  000816  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5510  000818  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5511  00081A                     l3510:
  5512  00081A  FFFF               	dw	65535	; assembler added errata NOP
  5513  00081C  5024               	movf	___fldiv@a^0,w,c
  5514  00081E  5C2C               	subwf	___fldiv@rem^0,w,c
  5515  000820  5025               	movf	(___fldiv@a+1)^0,w,c
  5516  000822  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5517  000824  5026               	movf	(___fldiv@a+2)^0,w,c
  5518  000826  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5519  000828  5027               	movf	(___fldiv@a+3)^0,w,c
  5520  00082A  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5521  00082C  A0D8               	btfss	status,0,c
  5522  00082E  EF1B  F004         	goto	u2621
  5523  000832  EF1E  F004         	goto	u2620
  5524  000836                     u2621:
  5525  000836  FFFF               	dw	65535	; assembler added errata NOP
  5526  000838  EF28  F004         	goto	l3516
  5527  00083C                     u2620:
  5528  00083C  FFFF               	dw	65535	; assembler added errata NOP
  5529  00083E  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5530  000840  5024               	movf	___fldiv@a^0,w,c
  5531  000842  5E2C               	subwf	___fldiv@rem^0,f,c
  5532  000844  5025               	movf	(___fldiv@a+1)^0,w,c
  5533  000846  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5534  000848  5026               	movf	(___fldiv@a+2)^0,w,c
  5535  00084A  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5536  00084C  5027               	movf	(___fldiv@a+3)^0,w,c
  5537  00084E  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5538  000850                     l3516:
  5539  000850  FFFF               	dw	65535	; assembler added errata NOP
  5540  000852  2A38               	incf	___fldiv@aexp^0,f,c
  5541  000854                     l1173:
  5542  000854  FFFF               	dw	65535	; assembler added errata NOP
  5543  000856  0E19               	movlw	25
  5544  000858  6438               	cpfsgt	___fldiv@aexp^0,c
  5545  00085A  EF31  F004         	goto	u2631
  5546  00085E  EF34  F004         	goto	u2630
  5547  000862                     u2631:
  5548  000862  FFFF               	dw	65535	; assembler added errata NOP
  5549  000864  EFE8  F003         	goto	l3502
  5550  000868                     u2630:
  5551  000868  FFFF               	dw	65535	; assembler added errata NOP
  5552  00086A  502C               	movf	___fldiv@rem^0,w,c
  5553  00086C  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5554  00086E  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5555  000870  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5556  000872  B4D8               	btfsc	status,2,c
  5557  000874  EF3E  F004         	goto	u2641
  5558  000878  EF41  F004         	goto	u2640
  5559  00087C                     u2641:
  5560  00087C  FFFF               	dw	65535	; assembler added errata NOP
  5561  00087E  EF5E  F004         	goto	l3528
  5562  000882                     u2640:
  5563  000882  FFFF               	dw	65535	; assembler added errata NOP
  5564  000884  8033               	bsf	___fldiv@grs^0,0,c
  5565  000886  EF5E  F004         	goto	l3528
  5566  00088A                     l3522:
  5567  00088A  FFFF               	dw	65535	; assembler added errata NOP
  5568  00088C  90D8               	bcf	status,0,c
  5569  00088E  3620               	rlcf	___fldiv@b^0,f,c
  5570  000890  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5571  000892  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5572  000894  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5573  000896  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5574  000898  EF50  F004         	goto	u2651
  5575  00089C  EF53  F004         	goto	u2650
  5576  0008A0                     u2651:
  5577  0008A0  FFFF               	dw	65535	; assembler added errata NOP
  5578  0008A2  EF55  F004         	goto	l1182
  5579  0008A6                     u2650:
  5580  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5581  0008A8  8020               	bsf	___fldiv@b^0,0,c
  5582  0008AA                     l1182:
  5583  0008AA  FFFF               	dw	65535	; assembler added errata NOP
  5584  0008AC  90D8               	bcf	status,0,c
  5585  0008AE  3633               	rlcf	___fldiv@grs^0,f,c
  5586  0008B0  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5587  0008B2  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5588  0008B4  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5589  0008B6  0631               	decf	___fldiv@new_exp^0,f,c
  5590  0008B8  A0D8               	btfss	status,0,c
  5591  0008BA  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5592  0008BC                     l3528:
  5593  0008BC  FFFF               	dw	65535	; assembler added errata NOP
  5594  0008BE  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5595  0008C0  EF64  F004         	goto	u2661
  5596  0008C4  EF67  F004         	goto	u2660
  5597  0008C8                     u2661:
  5598  0008C8  FFFF               	dw	65535	; assembler added errata NOP
  5599  0008CA  EF45  F004         	goto	l3522
  5600  0008CE                     u2660:
  5601  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5602  0008D0  0E00               	movlw	0
  5603  0008D2  6E38               	movwf	___fldiv@aexp^0,c
  5604  0008D4  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5605  0008D6  EF6F  F004         	goto	u2671
  5606  0008DA  EF72  F004         	goto	u2670
  5607  0008DE                     u2671:
  5608  0008DE  FFFF               	dw	65535	; assembler added errata NOP
  5609  0008E0  EF9D  F004         	goto	l1184
  5610  0008E4                     u2670:
  5611  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5612  0008E6  0EFF               	movlw	255
  5613  0008E8  1433               	andwf	___fldiv@grs^0,w,c
  5614  0008EA  6E28               	movwf	??___fldiv^0,c
  5615  0008EC  0EFF               	movlw	255
  5616  0008EE  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5617  0008F0  6E29               	movwf	(??___fldiv+1)^0,c
  5618  0008F2  0EFF               	movlw	255
  5619  0008F4  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5620  0008F6  6E2A               	movwf	(??___fldiv+2)^0,c
  5621  0008F8  0E7F               	movlw	127
  5622  0008FA  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5623  0008FC  6E2B               	movwf	(??___fldiv+3)^0,c
  5624  0008FE  5028               	movf	??___fldiv^0,w,c
  5625  000900  1029               	iorwf	(??___fldiv+1)^0,w,c
  5626  000902  102A               	iorwf	(??___fldiv+2)^0,w,c
  5627  000904  102B               	iorwf	(??___fldiv+3)^0,w,c
  5628  000906  B4D8               	btfsc	status,2,c
  5629  000908  EF88  F004         	goto	u2681
  5630  00090C  EF8B  F004         	goto	u2680
  5631  000910                     u2681:
  5632  000910  FFFF               	dw	65535	; assembler added errata NOP
  5633  000912  EF91  F004         	goto	l1185
  5634  000916                     u2680:
  5635  000916  FFFF               	dw	65535	; assembler added errata NOP
  5636  000918                     l3536:
  5637  000918  FFFF               	dw	65535	; assembler added errata NOP
  5638  00091A  0E01               	movlw	1
  5639  00091C  6E38               	movwf	___fldiv@aexp^0,c
  5640  00091E  EF9D  F004         	goto	l1184
  5641  000922                     l1185:
  5642  000922  FFFF               	dw	65535	; assembler added errata NOP
  5643  000924  A020               	btfss	___fldiv@b^0,0,c
  5644  000926  EF97  F004         	goto	u2691
  5645  00092A  EF9A  F004         	goto	u2690
  5646  00092E                     u2691:
  5647  00092E  FFFF               	dw	65535	; assembler added errata NOP
  5648  000930  EF9D  F004         	goto	l1184
  5649  000934                     u2690:
  5650  000934  FFFF               	dw	65535	; assembler added errata NOP
  5651  000936  EF8C  F004         	goto	l3536
  5652  00093A                     l1184:
  5653  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5654  00093C  5038               	movf	___fldiv@aexp^0,w,c
  5655  00093E  B4D8               	btfsc	status,2,c
  5656  000940  EFA4  F004         	goto	u2701
  5657  000944  EFA7  F004         	goto	u2700
  5658  000948                     u2701:
  5659  000948  FFFF               	dw	65535	; assembler added errata NOP
  5660  00094A  EFCE  F004         	goto	l3548
  5661  00094E                     u2700:
  5662  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5663  000950  0E01               	movlw	1
  5664  000952  2620               	addwf	___fldiv@b^0,f,c
  5665  000954  0E00               	movlw	0
  5666  000956  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5667  000958  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5668  00095A  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5669  00095C  A023               	btfss	(___fldiv@b+3)^0,0,c
  5670  00095E  EFB3  F004         	goto	u2711
  5671  000962  EFB6  F004         	goto	u2710
  5672  000966                     u2711:
  5673  000966  FFFF               	dw	65535	; assembler added errata NOP
  5674  000968  EFCE  F004         	goto	l3548
  5675  00096C                     u2710:
  5676  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5677  00096E  C020  F028         	movff	___fldiv@b,??___fldiv
  5678  000972  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5679  000976  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5680  00097A  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5681  00097E  342B               	rlcf	(??___fldiv+3)^0,w,c
  5682  000980  322B               	rrcf	(??___fldiv+3)^0,f,c
  5683  000982  322A               	rrcf	(??___fldiv+2)^0,f,c
  5684  000984  3229               	rrcf	(??___fldiv+1)^0,f,c
  5685  000986  3228               	rrcf	??___fldiv^0,f,c
  5686  000988  C028  F020         	movff	??___fldiv,___fldiv@b
  5687  00098C  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5688  000990  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5689  000994  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5690  000998  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5691  00099A  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5692  00099C                     l3548:
  5693  00099C  FFFF               	dw	65535	; assembler added errata NOP
  5694  00099E  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5695  0009A0  EFDA  F004         	goto	u2721
  5696  0009A4  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5697  0009A6  E109               	bnz	u2720
  5698  0009A8  2831               	incf	___fldiv@new_exp^0,w,c
  5699  0009AA  A0D8               	btfss	status,0,c
  5700  0009AC  EFDA  F004         	goto	u2721
  5701  0009B0  EFDD  F004         	goto	u2720
  5702  0009B4                     u2721:
  5703  0009B4  FFFF               	dw	65535	; assembler added errata NOP
  5704  0009B6  EFE9  F004         	goto	l3552
  5705  0009BA                     u2720:
  5706  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5707  0009BC  0E00               	movlw	0
  5708  0009BE  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5709  0009C0  6831               	setf	___fldiv@new_exp^0,c
  5710  0009C2  0E00               	movlw	0
  5711  0009C4  6E20               	movwf	___fldiv@b^0,c
  5712  0009C6  0E00               	movlw	0
  5713  0009C8  6E21               	movwf	(___fldiv@b+1)^0,c
  5714  0009CA  0E00               	movlw	0
  5715  0009CC  6E22               	movwf	(___fldiv@b+2)^0,c
  5716  0009CE  0E00               	movlw	0
  5717  0009D0  6E23               	movwf	(___fldiv@b+3)^0,c
  5718  0009D2                     l3552:
  5719  0009D2  FFFF               	dw	65535	; assembler added errata NOP
  5720  0009D4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5721  0009D6  EFF8  F004         	goto	u2730
  5722  0009DA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5723  0009DC  E106               	bnz	u2731
  5724  0009DE  0431               	decf	___fldiv@new_exp^0,w,c
  5725  0009E0  B0D8               	btfsc	status,0,c
  5726  0009E2  EFF5  F004         	goto	u2731
  5727  0009E6  EFF8  F004         	goto	u2730
  5728  0009EA                     u2731:
  5729  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  5730  0009EC  EF07  F005         	goto	l3556
  5731  0009F0                     u2730:
  5732  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5733  0009F2  0E00               	movlw	0
  5734  0009F4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5735  0009F6  0E00               	movlw	0
  5736  0009F8  6E31               	movwf	___fldiv@new_exp^0,c
  5737  0009FA  0E00               	movlw	0
  5738  0009FC  6E20               	movwf	___fldiv@b^0,c
  5739  0009FE  0E00               	movlw	0
  5740  000A00  6E21               	movwf	(___fldiv@b+1)^0,c
  5741  000A02  0E00               	movlw	0
  5742  000A04  6E22               	movwf	(___fldiv@b+2)^0,c
  5743  000A06  0E00               	movlw	0
  5744  000A08  6E23               	movwf	(___fldiv@b+3)^0,c
  5745  000A0A  0E00               	movlw	0
  5746  000A0C  6E30               	movwf	___fldiv@sign^0,c
  5747  000A0E                     l3556:
  5748  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  5749  000A10  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5750  000A14  A037               	btfss	___fldiv@bexp^0,0,c
  5751  000A16  EF0F  F005         	goto	u2741
  5752  000A1A  EF12  F005         	goto	u2740
  5753  000A1E                     u2741:
  5754  000A1E  FFFF               	dw	65535	; assembler added errata NOP
  5755  000A20  EF16  F005         	goto	l3562
  5756  000A24                     u2740:
  5757  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5758  000A26  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5759  000A28  EF18  F005         	goto	l3564
  5760  000A2C                     l3562:
  5761  000A2C  FFFF               	dw	65535	; assembler added errata NOP
  5762  000A2E  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5763  000A30                     l3564:
  5764  000A30  FFFF               	dw	65535	; assembler added errata NOP
  5765  000A32  90D8               	bcf	status,0,c
  5766  000A34  3037               	rrcf	___fldiv@bexp^0,w,c
  5767  000A36  6E23               	movwf	(___fldiv@b+3)^0,c
  5768  000A38  EF9C  F003         	goto	l3478
  5769  000A3C                     l1171:
  5770  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  5771  000A3E  0012               	return		;funcret
  5772  000A40  FFFF               	dw	65535	; errata NOP
  5773  000A42                     __end_of___fldiv:
  5774                           	callstack 0
  5775                           
  5776 ;; *************** function _releaseObj *****************
  5777 ;; Defined at:
  5778 ;;		line 614 in file "motors.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;		None
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;		None
  5783 ;; Return value:  Size  Location     Type
  5784 ;;                  1    wreg      void 
  5785 ;; Registers used:
  5786 ;;		wreg, status,2, status,0, cstack
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 0/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5792 ;;      Params:         0       0       0       0       0       0       0
  5793 ;;      Locals:         0       0       0       0       0       0       0
  5794 ;;      Temps:          0       0       0       0       0       0       0
  5795 ;;      Totals:         0       0       0       0       0       0       0
  5796 ;;Total ram usage:        0 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; Hardware stack levels required when called:    5
  5799 ;; This function calls:
  5800 ;;		_stepMade
  5801 ;; This function is called by:
  5802 ;;		_executeData
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           	psect	text33
  5807  0023B8                     __ptext33:
  5808                           	callstack 0
  5809  0023B8                     _releaseObj:
  5810                           	callstack 0
  5811  0023B8  FFFF               	dw	65535	; assembler added errata NOP
  5812  0023BA                     
  5813                           ;motors.c: 615:     LATDbits.LATD1 = 0;
  5814  0023BA  928C               	bcf	140,1,c	;volatile
  5815                           
  5816                           ;motors.c: 619:     T2CONbits.TMR2ON = 1;
  5817  0023BC  84CA               	bsf	202,2,c	;volatile
  5818  0023BE                     l3934:
  5819  0023BE  FFFF               	dw	65535	; assembler added errata NOP
  5820  0023C0  EC47  F012         	call	_stepMade	;wreg free
  5821  0023C4  5012               	movf	?_stepMade^0,w,c
  5822  0023C6  1013               	iorwf	(?_stepMade+1)^0,w,c
  5823  0023C8  B4D8               	btfsc	status,2,c
  5824  0023CA  EFE9  F011         	goto	u3341
  5825  0023CE  EFEC  F011         	goto	u3340
  5826  0023D2                     u3341:
  5827  0023D2  FFFF               	dw	65535	; assembler added errata NOP
  5828  0023D4  EFDF  F011         	goto	l3934
  5829  0023D8                     u3340:
  5830  0023D8  FFFF               	dw	65535	; assembler added errata NOP
  5831  0023DA                     
  5832                           ;motors.c: 621:     T2CONbits.TMR2ON = 1;
  5833  0023DA  84CA               	bsf	202,2,c	;volatile
  5834  0023DC                     
  5835                           ;motors.c: 622:     TMR2 = 0;
  5836  0023DC  0E00               	movlw	0
  5837  0023DE  6ECC               	movwf	204,c	;volatile
  5838  0023E0  0012               	return		;funcret
  5839  0023E2  FFFF               	dw	65535	; errata NOP
  5840  0023E4                     __end_of_releaseObj:
  5841                           	callstack 0
  5842                           
  5843 ;; *************** function _pickObject *****************
  5844 ;; Defined at:
  5845 ;;		line 600 in file "motors.c"
  5846 ;; Parameters:    Size  Location     Type
  5847 ;;		None
  5848 ;; Auto vars:     Size  Location     Type
  5849 ;;		None
  5850 ;; Return value:  Size  Location     Type
  5851 ;;                  1    wreg      void 
  5852 ;; Registers used:
  5853 ;;		wreg, status,2, status,0, cstack
  5854 ;; Tracked objects:
  5855 ;;		On entry : 0/0
  5856 ;;		On exit  : 0/0
  5857 ;;		Unchanged: 0/0
  5858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5859 ;;      Params:         0       0       0       0       0       0       0
  5860 ;;      Locals:         0       0       0       0       0       0       0
  5861 ;;      Temps:          0       0       0       0       0       0       0
  5862 ;;      Totals:         0       0       0       0       0       0       0
  5863 ;;Total ram usage:        0 bytes
  5864 ;; Hardware stack levels used:    1
  5865 ;; Hardware stack levels required when called:    5
  5866 ;; This function calls:
  5867 ;;		_stepMade
  5868 ;; This function is called by:
  5869 ;;		_executeData
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873                           	psect	text34
  5874  0023E4                     __ptext34:
  5875                           	callstack 0
  5876  0023E4                     _pickObject:
  5877                           	callstack 0
  5878  0023E4  FFFF               	dw	65535	; assembler added errata NOP
  5879  0023E6                     
  5880                           ;motors.c: 601:     LATDbits.LATD1 = 1;
  5881  0023E6  828C               	bsf	140,1,c	;volatile
  5882                           
  5883                           ;motors.c: 605:     T2CONbits.TMR2ON = 1;
  5884  0023E8  84CA               	bsf	202,2,c	;volatile
  5885  0023EA                     l3928:
  5886  0023EA  FFFF               	dw	65535	; assembler added errata NOP
  5887  0023EC  EC47  F012         	call	_stepMade	;wreg free
  5888  0023F0  5012               	movf	?_stepMade^0,w,c
  5889  0023F2  1013               	iorwf	(?_stepMade+1)^0,w,c
  5890  0023F4  B4D8               	btfsc	status,2,c
  5891  0023F6  EFFF  F011         	goto	u3331
  5892  0023FA  EF02  F012         	goto	u3330
  5893  0023FE                     u3331:
  5894  0023FE  FFFF               	dw	65535	; assembler added errata NOP
  5895  002400  EFF5  F011         	goto	l3928
  5896  002404                     u3330:
  5897  002404  FFFF               	dw	65535	; assembler added errata NOP
  5898  002406                     
  5899                           ;motors.c: 607:     T2CONbits.TMR2ON = 1;
  5900  002406  84CA               	bsf	202,2,c	;volatile
  5901  002408                     
  5902                           ;motors.c: 608:     TMR2 = 0;
  5903  002408  0E00               	movlw	0
  5904  00240A  6ECC               	movwf	204,c	;volatile
  5905  00240C  0012               	return		;funcret
  5906  00240E  FFFF               	dw	65535	; errata NOP
  5907  002410                     __end_of_pickObject:
  5908                           	callstack 0
  5909                           
  5910 ;; *************** function _moveToPoint *****************
  5911 ;; Defined at:
  5912 ;;		line 264 in file "motors.c"
  5913 ;; Parameters:    Size  Location     Type
  5914 ;;  x1              2   21[COMRAM] unsigned int 
  5915 ;;  y1              2   23[COMRAM] unsigned int 
  5916 ;;  x2              2   25[COMRAM] unsigned int 
  5917 ;;  y2              2   27[COMRAM] unsigned int 
  5918 ;; Auto vars:     Size  Location     Type
  5919 ;;  MOT2Directio    1   34[COMRAM] unsigned char 
  5920 ;;  MOT1Directio    1   33[COMRAM] unsigned char 
  5921 ;;  keepMovingY     1   32[COMRAM] unsigned char 
  5922 ;;  keepMovingX     1   31[COMRAM] unsigned char 
  5923 ;; Return value:  Size  Location     Type
  5924 ;;                  1    wreg      unsigned char 
  5925 ;; Registers used:
  5926 ;;		wreg, status,2, status,0, cstack
  5927 ;; Tracked objects:
  5928 ;;		On entry : 0/0
  5929 ;;		On exit  : 0/0
  5930 ;;		Unchanged: 0/0
  5931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5932 ;;      Params:         8       0       0       0       0       0       0
  5933 ;;      Locals:         4       0       0       0       0       0       0
  5934 ;;      Temps:          2       0       0       0       0       0       0
  5935 ;;      Totals:        14       0       0       0       0       0       0
  5936 ;;Total ram usage:       14 bytes
  5937 ;; Hardware stack levels used:    1
  5938 ;; Hardware stack levels required when called:    5
  5939 ;; This function calls:
  5940 ;;		_resetStep
  5941 ;;		_setDirection
  5942 ;;		_stepCounter
  5943 ;;		_stepMade
  5944 ;; This function is called by:
  5945 ;;		_executeData
  5946 ;; This function uses a non-reentrant model
  5947 ;;
  5948                           
  5949                           	psect	text35
  5950  000A42                     __ptext35:
  5951                           	callstack 0
  5952  000A42                     _moveToPoint:
  5953                           	callstack 0
  5954  000A42  FFFF               	dw	65535	; assembler added errata NOP
  5955  000A44                     
  5956                           ;motors.c: 266:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 269:     if(x2
      +                           > maxX || y2 > maxY){
  5957  000A44  0EE9               	movlw	233
  5958  000A46  5C1A               	subwf	moveToPoint@x2^0,w,c
  5959  000A48  0E03               	movlw	3
  5960  000A4A  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5961  000A4C  B0D8               	btfsc	status,0,c
  5962  000A4E  EF2B  F005         	goto	u2981
  5963  000A52  EF2E  F005         	goto	u2980
  5964  000A56                     u2981:
  5965  000A56  FFFF               	dw	65535	; assembler added errata NOP
  5966  000A58  EF3B  F005         	goto	l3714
  5967  000A5C                     u2980:
  5968  000A5C  FFFF               	dw	65535	; assembler added errata NOP
  5969  000A5E  0EE9               	movlw	233
  5970  000A60  5C1C               	subwf	moveToPoint@y2^0,w,c
  5971  000A62  0E03               	movlw	3
  5972  000A64  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  5973  000A66  A0D8               	btfss	status,0,c
  5974  000A68  EF38  F005         	goto	u2991
  5975  000A6C  EF3B  F005         	goto	u2990
  5976  000A70                     u2991:
  5977  000A70  FFFF               	dw	65535	; assembler added errata NOP
  5978  000A72  EF3F  F005         	goto	l3718
  5979  000A76                     u2990:
  5980  000A76                     l3714:
  5981  000A76  FFFF               	dw	65535	; assembler added errata NOP
  5982                           
  5983                           ;motors.c: 270:         return(5);
  5984  000A78  0E05               	movlw	5
  5985  000A7A  EF7F  F006         	goto	l141
  5986  000A7E                     l3718:
  5987  000A7E  FFFF               	dw	65535	; assembler added errata NOP
  5988                           
  5989                           ;motors.c: 274:     if((x2 - x1) > 0){
  5990  000A80  5016               	movf	moveToPoint@x1^0,w,c
  5991  000A82  5C1A               	subwf	moveToPoint@x2^0,w,c
  5992  000A84  6E1E               	movwf	??_moveToPoint^0,c
  5993  000A86  5017               	movf	(moveToPoint@x1+1)^0,w,c
  5994  000A88  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5995  000A8A  6E1F               	movwf	(??_moveToPoint+1)^0,c
  5996  000A8C  501E               	movf	??_moveToPoint^0,w,c
  5997  000A8E  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  5998  000A90  B4D8               	btfsc	status,2,c
  5999  000A92  EF4D  F005         	goto	u3001
  6000  000A96  EF50  F005         	goto	u3000
  6001  000A9A                     u3001:
  6002  000A9A  FFFF               	dw	65535	; assembler added errata NOP
  6003  000A9C  EF5A  F005         	goto	l3724
  6004  000AA0                     u3000:
  6005  000AA0  FFFF               	dw	65535	; assembler added errata NOP
  6006  000AA2                     
  6007                           ;motors.c: 275:         setDirection(1, 0);
  6008  000AA2  0E00               	movlw	0
  6009  000AA4  6E12               	movwf	setDirection@motor^0,c
  6010  000AA6  0E01               	movlw	1
  6011  000AA8  ECD9  F010         	call	_setDirection
  6012  000AAC                     
  6013                           ;motors.c: 276:         MOT1Direction = 1;
  6014  000AAC  0E01               	movlw	1
  6015  000AAE  6E22               	movwf	moveToPoint@MOT1Direction^0,c
  6016                           
  6017                           ;motors.c: 277:     }else{
  6018  000AB0  EF62  F005         	goto	l3728
  6019  000AB4                     l3724:
  6020  000AB4  FFFF               	dw	65535	; assembler added errata NOP
  6021                           
  6022                           ;motors.c: 278:         setDirection(0, 0);
  6023  000AB6  0E00               	movlw	0
  6024  000AB8  6E12               	movwf	setDirection@motor^0,c
  6025  000ABA  0E00               	movlw	0
  6026  000ABC  ECD9  F010         	call	_setDirection
  6027  000AC0                     
  6028                           ;motors.c: 279:         MOT1Direction = 0;
  6029  000AC0  0E00               	movlw	0
  6030  000AC2  6E22               	movwf	moveToPoint@MOT1Direction^0,c
  6031  000AC4                     l3728:
  6032  000AC4  FFFF               	dw	65535	; assembler added errata NOP
  6033                           
  6034                           ;motors.c: 282:     if((y2 - y1) > 0){
  6035  000AC6  5018               	movf	moveToPoint@y1^0,w,c
  6036  000AC8  5C1C               	subwf	moveToPoint@y2^0,w,c
  6037  000ACA  6E1E               	movwf	??_moveToPoint^0,c
  6038  000ACC  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6039  000ACE  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  6040  000AD0  6E1F               	movwf	(??_moveToPoint+1)^0,c
  6041  000AD2  501E               	movf	??_moveToPoint^0,w,c
  6042  000AD4  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  6043  000AD6  B4D8               	btfsc	status,2,c
  6044  000AD8  EF70  F005         	goto	u3011
  6045  000ADC  EF73  F005         	goto	u3010
  6046  000AE0                     u3011:
  6047  000AE0  FFFF               	dw	65535	; assembler added errata NOP
  6048  000AE2  EF7D  F005         	goto	l3734
  6049  000AE6                     u3010:
  6050  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  6051  000AE8                     
  6052                           ;motors.c: 283:         setDirection(1, 1);
  6053  000AE8  0E01               	movlw	1
  6054  000AEA  6E12               	movwf	setDirection@motor^0,c
  6055  000AEC  0E01               	movlw	1
  6056  000AEE  ECD9  F010         	call	_setDirection
  6057  000AF2                     
  6058                           ;motors.c: 284:         MOT2Direction = 1;
  6059  000AF2  0E01               	movlw	1
  6060  000AF4  6E23               	movwf	moveToPoint@MOT2Direction^0,c
  6061                           
  6062                           ;motors.c: 285:     }else{
  6063  000AF6  EF85  F005         	goto	l3738
  6064  000AFA                     l3734:
  6065  000AFA  FFFF               	dw	65535	; assembler added errata NOP
  6066                           
  6067                           ;motors.c: 286:         setDirection(0, 1);
  6068  000AFC  0E01               	movlw	1
  6069  000AFE  6E12               	movwf	setDirection@motor^0,c
  6070  000B00  0E00               	movlw	0
  6071  000B02  ECD9  F010         	call	_setDirection
  6072  000B06                     
  6073                           ;motors.c: 287:         MOT2Direction = 0;
  6074  000B06  0E00               	movlw	0
  6075  000B08  6E23               	movwf	moveToPoint@MOT2Direction^0,c
  6076  000B0A                     l3738:
  6077  000B0A  FFFF               	dw	65535	; assembler added errata NOP
  6078                           
  6079                           ;motors.c: 290:     unsigned char keepMovingX = 1;
  6080  000B0C  0E01               	movlw	1
  6081  000B0E  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6082  000B10                     
  6083                           ;motors.c: 291:     unsigned char keepMovingY = 1;
  6084  000B10  0E01               	movlw	1
  6085  000B12  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6086  000B14                     
  6087                           ;motors.c: 294:     T2CONbits.TMR2ON = 1;
  6088  000B14  84CA               	bsf	202,2,c	;volatile
  6089  000B16                     
  6090                           ;motors.c: 296:     tm0Error = 0;
  6091  000B16  0E00               	movlw	0
  6092  000B18  6E5C               	movwf	(_tm0Error+1)^0,c
  6093  000B1A  0E00               	movlw	0
  6094  000B1C  6E5B               	movwf	_tm0Error^0,c
  6095  000B1E                     
  6096                           ;motors.c: 297:     tm0Limit = 100;
  6097  000B1E  0E64               	movlw	100
  6098  000B20  6E68               	movwf	_tm0Limit^0,c
  6099  000B22                     
  6100                           ;motors.c: 298:     T0CONbits.TMR0ON = 1;
  6101  000B22  8ED5               	bsf	213,7,c	;volatile
  6102                           
  6103                           ;motors.c: 300:     while(keepMovingX || keepMovingY){
  6104  000B24  EF5F  F006         	goto	l3784
  6105  000B28                     l3750:
  6106  000B28  FFFF               	dw	65535	; assembler added errata NOP
  6107                           
  6108                           ;motors.c: 303:         if(tm0Error){
  6109  000B2A  505B               	movf	_tm0Error^0,w,c
  6110  000B2C  105C               	iorwf	(_tm0Error+1)^0,w,c
  6111  000B2E  B4D8               	btfsc	status,2,c
  6112  000B30  EF9C  F005         	goto	u3021
  6113  000B34  EF9F  F005         	goto	u3020
  6114  000B38                     u3021:
  6115  000B38  FFFF               	dw	65535	; assembler added errata NOP
  6116  000B3A  EFA8  F005         	goto	l3756
  6117  000B3E                     u3020:
  6118  000B3E  FFFF               	dw	65535	; assembler added errata NOP
  6119  000B40                     
  6120                           ;motors.c: 305:             LATAbits.LATA2 = 0;
  6121  000B40  9489               	bcf	137,2,c	;volatile
  6122                           
  6123                           ;motors.c: 306:             LATBbits.LATB4 = 0;
  6124  000B42  988A               	bcf	138,4,c	;volatile
  6125  000B44                     
  6126                           ;motors.c: 307:             tm0Error = 4;
  6127  000B44  0E00               	movlw	0
  6128  000B46  6E5C               	movwf	(_tm0Error+1)^0,c
  6129  000B48  0E04               	movlw	4
  6130  000B4A  6E5B               	movwf	_tm0Error^0,c
  6131                           
  6132                           ;motors.c: 308:             break;
  6133  000B4C  EF73  F006         	goto	l149
  6134  000B50                     l3756:
  6135  000B50  FFFF               	dw	65535	; assembler added errata NOP
  6136                           
  6137                           ;motors.c: 316:         if(MOT1Direction == 1){
  6138  000B52  0422               	decf	moveToPoint@MOT1Direction^0,w,c
  6139  000B54  A4D8               	btfss	status,2,c
  6140  000B56  EFAF  F005         	goto	u3031
  6141  000B5A  EFB2  F005         	goto	u3030
  6142  000B5E                     u3031:
  6143  000B5E  FFFF               	dw	65535	; assembler added errata NOP
  6144  000B60  EFD0  F005         	goto	l3762
  6145  000B64                     u3030:
  6146  000B64  FFFF               	dw	65535	; assembler added errata NOP
  6147  000B66                     
  6148                           ;motors.c: 317:             if(x1 + stepCounter() == x2){
  6149  000B66  EC89  F012         	call	_stepCounter	;wreg free
  6150  000B6A  5016               	movf	moveToPoint@x1^0,w,c
  6151  000B6C  2612               	addwf	?_stepCounter^0,f,c
  6152  000B6E  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6153  000B70  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6154  000B72  501A               	movf	moveToPoint@x2^0,w,c
  6155  000B74  1812               	xorwf	?_stepCounter^0,w,c
  6156  000B76  E107               	bnz	u3041
  6157  000B78  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6158  000B7A  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6159  000B7C  A4D8               	btfss	status,2,c
  6160  000B7E  EFC3  F005         	goto	u3041
  6161  000B82  EFC6  F005         	goto	u3040
  6162  000B86                     u3041:
  6163  000B86  FFFF               	dw	65535	; assembler added errata NOP
  6164  000B88  EFCC  F005         	goto	l151
  6165  000B8C                     u3040:
  6166  000B8C  FFFF               	dw	65535	; assembler added errata NOP
  6167  000B8E                     l3760:
  6168  000B8E  FFFF               	dw	65535	; assembler added errata NOP
  6169                           
  6170                           ;motors.c: 319:                 keepMovingX = 0;
  6171  000B90  0E00               	movlw	0
  6172  000B92  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6173                           
  6174                           ;motors.c: 320:             }else{
  6175  000B94  EFF7  F005         	goto	l3768
  6176  000B98                     l151:
  6177  000B98  FFFF               	dw	65535	; assembler added errata NOP
  6178                           
  6179                           ;motors.c: 322:                 LATAbits.LATA2 = 1;
  6180  000B9A  8489               	bsf	137,2,c	;volatile
  6181  000B9C  EFF7  F005         	goto	l3768
  6182  000BA0                     l3762:
  6183  000BA0  FFFF               	dw	65535	; assembler added errata NOP
  6184  000BA2  5022               	movf	moveToPoint@MOT1Direction^0,w,c
  6185  000BA4  A4D8               	btfss	status,2,c
  6186  000BA6  EFD7  F005         	goto	u3051
  6187  000BAA  EFDA  F005         	goto	u3050
  6188  000BAE                     u3051:
  6189  000BAE  FFFF               	dw	65535	; assembler added errata NOP
  6190  000BB0  EFF7  F005         	goto	l3768
  6191  000BB4                     u3050:
  6192  000BB4  FFFF               	dw	65535	; assembler added errata NOP
  6193  000BB6                     
  6194                           ;motors.c: 325:             if(x1 - stepCounter() == x2){
  6195  000BB6  EC89  F012         	call	_stepCounter	;wreg free
  6196  000BBA  C016  F01E         	movff	moveToPoint@x1,??_moveToPoint
  6197  000BBE  C017  F01F         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6198  000BC2  5012               	movf	?_stepCounter^0,w,c
  6199  000BC4  5E1E               	subwf	??_moveToPoint^0,f,c
  6200  000BC6  5013               	movf	(?_stepCounter+1)^0,w,c
  6201  000BC8  5A1F               	subwfb	(??_moveToPoint+1)^0,f,c
  6202  000BCA  501A               	movf	moveToPoint@x2^0,w,c
  6203  000BCC  181E               	xorwf	??_moveToPoint^0,w,c
  6204  000BCE  E107               	bnz	u3061
  6205  000BD0  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6206  000BD2  181F               	xorwf	(??_moveToPoint+1)^0,w,c
  6207  000BD4  A4D8               	btfss	status,2,c
  6208  000BD6  EFEF  F005         	goto	u3061
  6209  000BDA  EFF2  F005         	goto	u3060
  6210  000BDE                     u3061:
  6211  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  6212  000BE0  EFF5  F005         	goto	l155
  6213  000BE4                     u3060:
  6214  000BE4  FFFF               	dw	65535	; assembler added errata NOP
  6215  000BE6  EFC7  F005         	goto	l3760
  6216  000BEA                     l155:
  6217  000BEA  FFFF               	dw	65535	; assembler added errata NOP
  6218                           
  6219                           ;motors.c: 330:                 LATAbits.LATA2 = 1;
  6220  000BEC  8489               	bsf	137,2,c	;volatile
  6221  000BEE                     l3768:
  6222  000BEE  FFFF               	dw	65535	; assembler added errata NOP
  6223                           
  6224                           ;motors.c: 334:         if(MOT2Direction == 1){
  6225  000BF0  0423               	decf	moveToPoint@MOT2Direction^0,w,c
  6226  000BF2  A4D8               	btfss	status,2,c
  6227  000BF4  EFFE  F005         	goto	u3071
  6228  000BF8  EF01  F006         	goto	u3070
  6229  000BFC                     u3071:
  6230  000BFC  FFFF               	dw	65535	; assembler added errata NOP
  6231  000BFE  EF1F  F006         	goto	l3774
  6232  000C02                     u3070:
  6233  000C02  FFFF               	dw	65535	; assembler added errata NOP
  6234  000C04                     
  6235                           ;motors.c: 336:             if(y1 + stepCounter() == y2){
  6236  000C04  EC89  F012         	call	_stepCounter	;wreg free
  6237  000C08  5018               	movf	moveToPoint@y1^0,w,c
  6238  000C0A  2612               	addwf	?_stepCounter^0,f,c
  6239  000C0C  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6240  000C0E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6241  000C10  501C               	movf	moveToPoint@y2^0,w,c
  6242  000C12  1812               	xorwf	?_stepCounter^0,w,c
  6243  000C14  E107               	bnz	u3081
  6244  000C16  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6245  000C18  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6246  000C1A  A4D8               	btfss	status,2,c
  6247  000C1C  EF12  F006         	goto	u3081
  6248  000C20  EF15  F006         	goto	u3080
  6249  000C24                     u3081:
  6250  000C24  FFFF               	dw	65535	; assembler added errata NOP
  6251  000C26  EF1B  F006         	goto	l158
  6252  000C2A                     u3080:
  6253  000C2A  FFFF               	dw	65535	; assembler added errata NOP
  6254  000C2C                     l3772:
  6255  000C2C  FFFF               	dw	65535	; assembler added errata NOP
  6256                           
  6257                           ;motors.c: 338:                 keepMovingY = 0;
  6258  000C2E  0E00               	movlw	0
  6259  000C30  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6260                           
  6261                           ;motors.c: 339:             }else{
  6262  000C32  EF42  F006         	goto	l3780
  6263  000C36                     l158:
  6264  000C36  FFFF               	dw	65535	; assembler added errata NOP
  6265                           
  6266                           ;motors.c: 341:                 LATBbits.LATB4 = 1;
  6267  000C38  888A               	bsf	138,4,c	;volatile
  6268  000C3A  EF42  F006         	goto	l3780
  6269  000C3E                     l3774:
  6270  000C3E  FFFF               	dw	65535	; assembler added errata NOP
  6271  000C40  5023               	movf	moveToPoint@MOT2Direction^0,w,c
  6272  000C42  A4D8               	btfss	status,2,c
  6273  000C44  EF26  F006         	goto	u3091
  6274  000C48  EF29  F006         	goto	u3090
  6275  000C4C                     u3091:
  6276  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  6277  000C4E  EF42  F006         	goto	l3780
  6278  000C52                     u3090:
  6279  000C52  FFFF               	dw	65535	; assembler added errata NOP
  6280  000C54                     
  6281                           ;motors.c: 345:             if(y1 + stepCounter() == y2){
  6282  000C54  EC89  F012         	call	_stepCounter	;wreg free
  6283  000C58  5018               	movf	moveToPoint@y1^0,w,c
  6284  000C5A  2612               	addwf	?_stepCounter^0,f,c
  6285  000C5C  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6286  000C5E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6287  000C60  501C               	movf	moveToPoint@y2^0,w,c
  6288  000C62  1812               	xorwf	?_stepCounter^0,w,c
  6289  000C64  E107               	bnz	u3101
  6290  000C66  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6291  000C68  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6292  000C6A  A4D8               	btfss	status,2,c
  6293  000C6C  EF3A  F006         	goto	u3101
  6294  000C70  EF3D  F006         	goto	u3100
  6295  000C74                     u3101:
  6296  000C74  FFFF               	dw	65535	; assembler added errata NOP
  6297  000C76  EF40  F006         	goto	l162
  6298  000C7A                     u3100:
  6299  000C7A  FFFF               	dw	65535	; assembler added errata NOP
  6300  000C7C  EF16  F006         	goto	l3772
  6301  000C80                     l162:
  6302  000C80  FFFF               	dw	65535	; assembler added errata NOP
  6303                           
  6304                           ;motors.c: 350:                 LATBbits.LATB4 = 1;
  6305  000C82  888A               	bsf	138,4,c	;volatile
  6306  000C84                     l3780:
  6307  000C84  FFFF               	dw	65535	; assembler added errata NOP
  6308  000C86  EC47  F012         	call	_stepMade	;wreg free
  6309  000C8A  5012               	movf	?_stepMade^0,w,c
  6310  000C8C  1013               	iorwf	(?_stepMade+1)^0,w,c
  6311  000C8E  B4D8               	btfsc	status,2,c
  6312  000C90  EF4C  F006         	goto	u3111
  6313  000C94  EF4F  F006         	goto	u3110
  6314  000C98                     u3111:
  6315  000C98  FFFF               	dw	65535	; assembler added errata NOP
  6316  000C9A  EF42  F006         	goto	l3780
  6317  000C9E                     u3110:
  6318  000C9E  FFFF               	dw	65535	; assembler added errata NOP
  6319  000CA0                     
  6320                           ;motors.c: 358:         LATAbits.LATA2 = 0;
  6321  000CA0  9489               	bcf	137,2,c	;volatile
  6322                           
  6323                           ;motors.c: 359:         LATBbits.LATB4 = 0;
  6324  000CA2  988A               	bcf	138,4,c	;volatile
  6325  000CA4                     l3782:
  6326  000CA4  FFFF               	dw	65535	; assembler added errata NOP
  6327  000CA6  EC47  F012         	call	_stepMade	;wreg free
  6328  000CAA  5012               	movf	?_stepMade^0,w,c
  6329  000CAC  1013               	iorwf	(?_stepMade+1)^0,w,c
  6330  000CAE  B4D8               	btfsc	status,2,c
  6331  000CB0  EF5C  F006         	goto	u3121
  6332  000CB4  EF5F  F006         	goto	u3120
  6333  000CB8                     u3121:
  6334  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6335  000CBA  EF52  F006         	goto	l3782
  6336  000CBE                     u3120:
  6337  000CBE                     l3784:
  6338  000CBE  FFFF               	dw	65535	; assembler added errata NOP
  6339                           
  6340                           ;motors.c: 300:     while(keepMovingX || keepMovingY){
  6341  000CC0  5020               	movf	moveToPoint@keepMovingX^0,w,c
  6342  000CC2  A4D8               	btfss	status,2,c
  6343  000CC4  EF66  F006         	goto	u3131
  6344  000CC8  EF69  F006         	goto	u3130
  6345  000CCC                     u3131:
  6346  000CCC  FFFF               	dw	65535	; assembler added errata NOP
  6347  000CCE  EF94  F005         	goto	l3750
  6348  000CD2                     u3130:
  6349  000CD2  FFFF               	dw	65535	; assembler added errata NOP
  6350  000CD4  5021               	movf	moveToPoint@keepMovingY^0,w,c
  6351  000CD6  A4D8               	btfss	status,2,c
  6352  000CD8  EF70  F006         	goto	u3141
  6353  000CDC  EF73  F006         	goto	u3140
  6354  000CE0                     u3141:
  6355  000CE0  FFFF               	dw	65535	; assembler added errata NOP
  6356  000CE2  EF94  F005         	goto	l3750
  6357  000CE6                     u3140:
  6358  000CE6                     l149:
  6359  000CE6  FFFF               	dw	65535	; assembler added errata NOP
  6360                           
  6361                           ;motors.c: 366:     T0CONbits.TMR0ON = 0;
  6362  000CE8  9ED5               	bcf	213,7,c	;volatile
  6363                           
  6364                           ;motors.c: 367:     T2CONbits.TMR2ON = 0;
  6365  000CEA  94CA               	bcf	202,2,c	;volatile
  6366  000CEC                     
  6367                           ;motors.c: 369:     TMR0 = 0;
  6368  000CEC  0E00               	movlw	0
  6369  000CEE  6ED7               	movwf	215,c	;volatile
  6370  000CF0  0E00               	movlw	0
  6371  000CF2  6ED6               	movwf	214,c	;volatile
  6372                           
  6373                           ;motors.c: 370:     TMR2 = 0;
  6374  000CF4  0E00               	movlw	0
  6375  000CF6  6ECC               	movwf	204,c	;volatile
  6376  000CF8                     
  6377                           ;motors.c: 373:     resetStep();
  6378  000CF8  EC9E  F012         	call	_resetStep	;wreg free
  6379  000CFC                     
  6380                           ;motors.c: 375:     return(tm0Error);
  6381  000CFC  505B               	movf	_tm0Error^0,w,c
  6382  000CFE                     l141:
  6383  000CFE  FFFF               	dw	65535	; assembler added errata NOP
  6384  000D00  0012               	return		;funcret
  6385  000D02  FFFF               	dw	65535	; errata NOP
  6386  000D04                     __end_of_moveToPoint:
  6387                           	callstack 0
  6388                           
  6389 ;; *************** function _stepCounter *****************
  6390 ;; Defined at:
  6391 ;;		line 58 in file "pwm.c"
  6392 ;; Parameters:    Size  Location     Type
  6393 ;;		None
  6394 ;; Auto vars:     Size  Location     Type
  6395 ;;		None
  6396 ;; Return value:  Size  Location     Type
  6397 ;;                  2   17[COMRAM] unsigned int 
  6398 ;; Registers used:
  6399 ;;		None
  6400 ;; Tracked objects:
  6401 ;;		On entry : 0/0
  6402 ;;		On exit  : 0/0
  6403 ;;		Unchanged: 0/0
  6404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6405 ;;      Params:         2       0       0       0       0       0       0
  6406 ;;      Locals:         0       0       0       0       0       0       0
  6407 ;;      Temps:          0       0       0       0       0       0       0
  6408 ;;      Totals:         2       0       0       0       0       0       0
  6409 ;;Total ram usage:        2 bytes
  6410 ;; Hardware stack levels used:    1
  6411 ;; Hardware stack levels required when called:    4
  6412 ;; This function calls:
  6413 ;;		Nothing
  6414 ;; This function is called by:
  6415 ;;		_moveToPoint
  6416 ;; This function uses a non-reentrant model
  6417 ;;
  6418                           
  6419                           	psect	text36
  6420  002512                     __ptext36:
  6421                           	callstack 0
  6422  002512                     _stepCounter:
  6423                           	callstack 0
  6424  002512  FFFF               	dw	65535	; assembler added errata NOP
  6425  002514                     
  6426                           ;pwm.c: 59:     return pwmStep;
  6427  002514  C067  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6428  002518  6A13               	clrf	(?_stepCounter+1)^0,c
  6429  00251A  0012               	return		;funcret
  6430  00251C  FFFF               	dw	65535	; errata NOP
  6431  00251E                     __end_of_stepCounter:
  6432                           	callstack 0
  6433                           
  6434 ;; *************** function _liftArm *****************
  6435 ;; Defined at:
  6436 ;;		line 521 in file "motors.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;		None
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;		None
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  1    wreg      unsigned char 
  6443 ;; Registers used:
  6444 ;;		wreg, status,2, status,0, cstack
  6445 ;; Tracked objects:
  6446 ;;		On entry : 0/0
  6447 ;;		On exit  : 0/0
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6450 ;;      Params:         0       0       0       0       0       0       0
  6451 ;;      Locals:         0       0       0       0       0       0       0
  6452 ;;      Temps:          0       0       0       0       0       0       0
  6453 ;;      Totals:         0       0       0       0       0       0       0
  6454 ;;Total ram usage:        0 bytes
  6455 ;; Hardware stack levels used:    1
  6456 ;; Hardware stack levels required when called:    5
  6457 ;; This function calls:
  6458 ;;		_resetStep
  6459 ;;		_setDirection
  6460 ;;		_stepMade
  6461 ;; This function is called by:
  6462 ;;		_executeData
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           	psect	text37
  6467  001F94                     __ptext37:
  6468                           	callstack 0
  6469  001F94                     _liftArm:
  6470                           	callstack 0
  6471  001F94  FFFF               	dw	65535	; assembler added errata NOP
  6472  001F96                     
  6473                           ;motors.c: 524:     setDirection(0, 2);
  6474  001F96  0E02               	movlw	2
  6475  001F98  6E12               	movwf	setDirection@motor^0,c
  6476  001F9A  0E00               	movlw	0
  6477  001F9C  ECD9  F010         	call	_setDirection
  6478  001FA0                     
  6479                           ;motors.c: 526:     T2CONbits.TMR2ON = 1;
  6480  001FA0  84CA               	bsf	202,2,c	;volatile
  6481  001FA2                     
  6482                           ;motors.c: 528:     tm0Error = 0;
  6483  001FA2  0E00               	movlw	0
  6484  001FA4  6E5C               	movwf	(_tm0Error+1)^0,c
  6485  001FA6  0E00               	movlw	0
  6486  001FA8  6E5B               	movwf	_tm0Error^0,c
  6487  001FAA                     
  6488                           ;motors.c: 529:     tm0Limit = 100;
  6489  001FAA  0E64               	movlw	100
  6490  001FAC  6E68               	movwf	_tm0Limit^0,c
  6491  001FAE                     
  6492                           ;motors.c: 530:     T0CONbits.TMR0ON = 1;
  6493  001FAE  8ED5               	bsf	213,7,c	;volatile
  6494                           
  6495                           ;motors.c: 534:     while(!PORTEbits.RE2){
  6496  001FB0  EF0B  F010         	goto	l200
  6497  001FB4                     l3890:
  6498  001FB4  FFFF               	dw	65535	; assembler added errata NOP
  6499                           
  6500                           ;motors.c: 537:         if(tm0Error){
  6501  001FB6  505B               	movf	_tm0Error^0,w,c
  6502  001FB8  105C               	iorwf	(_tm0Error+1)^0,w,c
  6503  001FBA  B4D8               	btfsc	status,2,c
  6504  001FBC  EFE2  F00F         	goto	u3271
  6505  001FC0  EFE5  F00F         	goto	u3270
  6506  001FC4                     u3271:
  6507  001FC4  FFFF               	dw	65535	; assembler added errata NOP
  6508  001FC6  EFED  F00F         	goto	l202
  6509  001FCA                     u3270:
  6510  001FCA  FFFF               	dw	65535	; assembler added errata NOP
  6511  001FCC                     
  6512                           ;motors.c: 539:             LATCbits.LATC2 = 0;
  6513  001FCC  948B               	bcf	139,2,c	;volatile
  6514  001FCE                     
  6515                           ;motors.c: 540:             tm0Error = 6;
  6516  001FCE  0E00               	movlw	0
  6517  001FD0  6E5C               	movwf	(_tm0Error+1)^0,c
  6518  001FD2  0E06               	movlw	6
  6519  001FD4  6E5B               	movwf	_tm0Error^0,c
  6520                           
  6521                           ;motors.c: 541:             break;
  6522  001FD6  EF14  F010         	goto	l203
  6523  001FDA                     l202:
  6524  001FDA  FFFF               	dw	65535	; assembler added errata NOP
  6525                           
  6526                           ;motors.c: 546:         LATCbits.LATC2 = 1;
  6527  001FDC  848B               	bsf	139,2,c	;volatile
  6528  001FDE                     l3896:
  6529  001FDE  FFFF               	dw	65535	; assembler added errata NOP
  6530  001FE0  EC47  F012         	call	_stepMade	;wreg free
  6531  001FE4  5012               	movf	?_stepMade^0,w,c
  6532  001FE6  1013               	iorwf	(?_stepMade+1)^0,w,c
  6533  001FE8  B4D8               	btfsc	status,2,c
  6534  001FEA  EFF9  F00F         	goto	u3281
  6535  001FEE  EFFC  F00F         	goto	u3280
  6536  001FF2                     u3281:
  6537  001FF2  FFFF               	dw	65535	; assembler added errata NOP
  6538  001FF4  EFEF  F00F         	goto	l3896
  6539  001FF8                     u3280:
  6540  001FF8  FFFF               	dw	65535	; assembler added errata NOP
  6541  001FFA                     
  6542                           ;motors.c: 552:         LATCbits.LATC2 = 0;
  6543  001FFA  948B               	bcf	139,2,c	;volatile
  6544  001FFC                     l3898:
  6545  001FFC  FFFF               	dw	65535	; assembler added errata NOP
  6546  001FFE  EC47  F012         	call	_stepMade	;wreg free
  6547  002002  5012               	movf	?_stepMade^0,w,c
  6548  002004  1013               	iorwf	(?_stepMade+1)^0,w,c
  6549  002006  B4D8               	btfsc	status,2,c
  6550  002008  EF08  F010         	goto	u3291
  6551  00200C  EF0B  F010         	goto	u3290
  6552  002010                     u3291:
  6553  002010  FFFF               	dw	65535	; assembler added errata NOP
  6554  002012  EFFE  F00F         	goto	l3898
  6555  002016                     u3290:
  6556  002016                     l200:
  6557  002016  FFFF               	dw	65535	; assembler added errata NOP
  6558                           
  6559                           ;motors.c: 534:     while(!PORTEbits.RE2){
  6560  002018  A484               	btfss	132,2,c	;volatile
  6561  00201A  EF11  F010         	goto	u3301
  6562  00201E  EF14  F010         	goto	u3300
  6563  002022                     u3301:
  6564  002022  FFFF               	dw	65535	; assembler added errata NOP
  6565  002024  EFDA  F00F         	goto	l3890
  6566  002028                     u3300:
  6567  002028                     l203:
  6568  002028  FFFF               	dw	65535	; assembler added errata NOP
  6569                           
  6570                           ;motors.c: 559:     T0CONbits.TMR0ON = 0;
  6571  00202A  9ED5               	bcf	213,7,c	;volatile
  6572                           
  6573                           ;motors.c: 560:     T2CONbits.TMR2ON = 0;
  6574  00202C  94CA               	bcf	202,2,c	;volatile
  6575  00202E                     
  6576                           ;motors.c: 562:     TMR0 = 0;
  6577  00202E  0E00               	movlw	0
  6578  002030  6ED7               	movwf	215,c	;volatile
  6579  002032  0E00               	movlw	0
  6580  002034  6ED6               	movwf	214,c	;volatile
  6581                           
  6582                           ;motors.c: 563:     TMR2 = 0;
  6583  002036  0E00               	movlw	0
  6584  002038  6ECC               	movwf	204,c	;volatile
  6585  00203A                     
  6586                           ;motors.c: 566:     resetStep();
  6587  00203A  EC9E  F012         	call	_resetStep	;wreg free
  6588  00203E                     
  6589                           ;motors.c: 568:     return(tm0Error);
  6590  00203E  505B               	movf	_tm0Error^0,w,c
  6591  002040  0012               	return		;funcret
  6592  002042  FFFF               	dw	65535	; errata NOP
  6593  002044                     __end_of_liftArm:
  6594                           	callstack 0
  6595                           
  6596 ;; *************** function _stepMade *****************
  6597 ;; Defined at:
  6598 ;;		line 47 in file "pwm.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;		None
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;  temp            1   19[COMRAM] unsigned char 
  6603 ;; Return value:  Size  Location     Type
  6604 ;;                  2   17[COMRAM] unsigned int 
  6605 ;; Registers used:
  6606 ;;		wreg, status,2
  6607 ;; Tracked objects:
  6608 ;;		On entry : 0/0
  6609 ;;		On exit  : 0/0
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6612 ;;      Params:         2       0       0       0       0       0       0
  6613 ;;      Locals:         1       0       0       0       0       0       0
  6614 ;;      Temps:          0       0       0       0       0       0       0
  6615 ;;      Totals:         3       0       0       0       0       0       0
  6616 ;;Total ram usage:        3 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; Hardware stack levels required when called:    4
  6619 ;; This function calls:
  6620 ;;		Nothing
  6621 ;; This function is called by:
  6622 ;;		_resetPosition
  6623 ;;		_moveToPoint
  6624 ;;		_touchObject
  6625 ;;		_touchTherm
  6626 ;;		_liftArm
  6627 ;;		_rotateObj
  6628 ;;		_pickObject
  6629 ;;		_releaseObj
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           	psect	text38
  6634  00248E                     __ptext38:
  6635                           	callstack 0
  6636  00248E                     _stepMade:
  6637                           	callstack 0
  6638  00248E  FFFF               	dw	65535	; assembler added errata NOP
  6639  002490                     
  6640                           ;pwm.c: 48:     unsigned char temp = stepToggle;
  6641  002490  C066  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6642  002494                     
  6643                           ;pwm.c: 50:     stepToggle = 0;
  6644  002494  0E00               	movlw	0
  6645  002496  6E66               	movwf	_stepToggle^0,c	;volatile
  6646  002498                     
  6647                           ;pwm.c: 52:     return temp;
  6648  002498  C014  F012         	movff	stepMade@temp,?_stepMade
  6649  00249C  6A13               	clrf	(?_stepMade+1)^0,c
  6650  00249E  0012               	return		;funcret
  6651  0024A0  FFFF               	dw	65535	; errata NOP
  6652  0024A2                     __end_of_stepMade:
  6653                           	callstack 0
  6654                           
  6655 ;; *************** function _setDirection *****************
  6656 ;; Defined at:
  6657 ;;		line 115 in file "motors.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;  direction       1    wreg     unsigned char 
  6660 ;;  motor           1   17[COMRAM] unsigned char 
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;  direction       1   20[COMRAM] unsigned char 
  6663 ;; Return value:  Size  Location     Type
  6664 ;;                  1    wreg      void 
  6665 ;; Registers used:
  6666 ;;		wreg, status,2, status,0
  6667 ;; Tracked objects:
  6668 ;;		On entry : 0/0
  6669 ;;		On exit  : 0/0
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6672 ;;      Params:         1       0       0       0       0       0       0
  6673 ;;      Locals:         1       0       0       0       0       0       0
  6674 ;;      Temps:          2       0       0       0       0       0       0
  6675 ;;      Totals:         4       0       0       0       0       0       0
  6676 ;;Total ram usage:        4 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:    4
  6679 ;; This function calls:
  6680 ;;		Nothing
  6681 ;; This function is called by:
  6682 ;;		_resetPosition
  6683 ;;		_moveToPoint
  6684 ;;		_touchObject
  6685 ;;		_touchTherm
  6686 ;;		_liftArm
  6687 ;; This function uses a non-reentrant model
  6688 ;;
  6689                           
  6690                           	psect	text39
  6691  0021B2                     __ptext39:
  6692                           	callstack 0
  6693  0021B2                     _setDirection:
  6694                           	callstack 0
  6695  0021B2  FFFF               	dw	65535	; assembler added errata NOP
  6696                           
  6697                           ;incstack = 0
  6698                           ;setDirection@direction stored from wreg
  6699  0021B4  6E15               	movwf	setDirection@direction^0,c
  6700  0021B6                     
  6701                           ;motors.c: 116:     switch(motor){
  6702  0021B6  EFF5  F010         	goto	l3396
  6703  0021BA                     l3388:
  6704  0021BA  FFFF               	dw	65535	; assembler added errata NOP
  6705                           
  6706                           ;motors.c: 118:             LATAbits.LATA1 = direction;
  6707  0021BC  B015               	btfsc	setDirection@direction^0,0,c
  6708  0021BE  D002               	bra	u2475
  6709  0021C0  9289               	bcf	137,1,c	;volatile
  6710  0021C2  D001               	bra	u2476
  6711  0021C4                     u2475:
  6712  0021C4  8289               	bsf	137,1,c	;volatile
  6713  0021C6                     u2476:
  6714                           
  6715                           ;motors.c: 119:             break;
  6716  0021C6  EF10  F011         	goto	l101
  6717  0021CA                     l3390:
  6718  0021CA  FFFF               	dw	65535	; assembler added errata NOP
  6719                           
  6720                           ;motors.c: 121:             LATBbits.LATB3 = direction;
  6721  0021CC  B015               	btfsc	setDirection@direction^0,0,c
  6722  0021CE  D002               	bra	u2485
  6723  0021D0  968A               	bcf	138,3,c	;volatile
  6724  0021D2  D001               	bra	u2486
  6725  0021D4                     u2485:
  6726  0021D4  868A               	bsf	138,3,c	;volatile
  6727  0021D6                     u2486:
  6728                           
  6729                           ;motors.c: 122:             break;
  6730  0021D6  EF10  F011         	goto	l101
  6731  0021DA                     l3392:
  6732  0021DA  FFFF               	dw	65535	; assembler added errata NOP
  6733                           
  6734                           ;motors.c: 124:             LATCbits.LATC1 = direction;
  6735  0021DC  B015               	btfsc	setDirection@direction^0,0,c
  6736  0021DE  D002               	bra	u2495
  6737  0021E0  928B               	bcf	139,1,c	;volatile
  6738  0021E2  D001               	bra	u2496
  6739  0021E4                     u2495:
  6740  0021E4  828B               	bsf	139,1,c	;volatile
  6741  0021E6                     u2496:
  6742                           
  6743                           ;motors.c: 125:             break;
  6744  0021E6  EF10  F011         	goto	l101
  6745  0021EA                     l3396:
  6746  0021EA  FFFF               	dw	65535	; assembler added errata NOP
  6747  0021EC  5012               	movf	setDirection@motor^0,w,c
  6748  0021EE  6E13               	movwf	??_setDirection^0,c
  6749  0021F0  6A14               	clrf	(??_setDirection+1)^0,c
  6750                           
  6751                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6752                           ; Switch size 1, requested type "simple"
  6753                           ; Number of cases is 1, Range of values is 0 to 0
  6754                           ; switch strategies available:
  6755                           ; Name         Instructions Cycles
  6756                           ; simple_byte            4     3 (average)
  6757                           ;	Chosen strategy is simple_byte
  6758  0021F2  5014               	movf	(??_setDirection+1)^0,w,c
  6759  0021F4  0A00               	xorlw	0	; case 0
  6760  0021F6  B4D8               	btfsc	status,2,c
  6761  0021F8  EF00  F011         	goto	l4502
  6762  0021FC  EF10  F011         	goto	l101
  6763  002200                     l4502:
  6764  002200  FFFF               	dw	65535	; assembler added errata NOP
  6765                           
  6766                           ; Switch size 1, requested type "simple"
  6767                           ; Number of cases is 3, Range of values is 0 to 2
  6768                           ; switch strategies available:
  6769                           ; Name         Instructions Cycles
  6770                           ; simple_byte           10     6 (average)
  6771                           ;	Chosen strategy is simple_byte
  6772  002202  5013               	movf	??_setDirection^0,w,c
  6773  002204  0A00               	xorlw	0	; case 0
  6774  002206  B4D8               	btfsc	status,2,c
  6775  002208  EFDD  F010         	goto	l3388
  6776  00220C  0A01               	xorlw	1	; case 1
  6777  00220E  B4D8               	btfsc	status,2,c
  6778  002210  EFE5  F010         	goto	l3390
  6779  002214  0A03               	xorlw	3	; case 2
  6780  002216  B4D8               	btfsc	status,2,c
  6781  002218  EFED  F010         	goto	l3392
  6782  00221C  EF10  F011         	goto	l101
  6783  002220                     l101:
  6784  002220  FFFF               	dw	65535	; assembler added errata NOP
  6785  002222  0012               	return		;funcret
  6786  002224  FFFF               	dw	65535	; errata NOP
  6787  002226                     __end_of_setDirection:
  6788                           	callstack 0
  6789                           
  6790 ;; *************** function _resetStep *****************
  6791 ;; Defined at:
  6792 ;;		line 65 in file "pwm.c"
  6793 ;; Parameters:    Size  Location     Type
  6794 ;;		None
  6795 ;; Auto vars:     Size  Location     Type
  6796 ;;		None
  6797 ;; Return value:  Size  Location     Type
  6798 ;;                  1    wreg      void 
  6799 ;; Registers used:
  6800 ;;		wreg, status,2
  6801 ;; Tracked objects:
  6802 ;;		On entry : 0/0
  6803 ;;		On exit  : 0/0
  6804 ;;		Unchanged: 0/0
  6805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6806 ;;      Params:         0       0       0       0       0       0       0
  6807 ;;      Locals:         0       0       0       0       0       0       0
  6808 ;;      Temps:          0       0       0       0       0       0       0
  6809 ;;      Totals:         0       0       0       0       0       0       0
  6810 ;;Total ram usage:        0 bytes
  6811 ;; Hardware stack levels used:    1
  6812 ;; Hardware stack levels required when called:    4
  6813 ;; This function calls:
  6814 ;;		Nothing
  6815 ;; This function is called by:
  6816 ;;		_resetPosition
  6817 ;;		_moveToPoint
  6818 ;;		_touchObject
  6819 ;;		_touchTherm
  6820 ;;		_liftArm
  6821 ;; This function uses a non-reentrant model
  6822 ;;
  6823                           
  6824                           	psect	text40
  6825  00253C                     __ptext40:
  6826                           	callstack 0
  6827  00253C                     _resetStep:
  6828                           	callstack 0
  6829  00253C  FFFF               	dw	65535	; assembler added errata NOP
  6830  00253E                     
  6831                           ;pwm.c: 66:     pwmStep = 0;
  6832  00253E  0E00               	movlw	0
  6833  002540  6E67               	movwf	_pwmStep^0,c	;volatile
  6834  002542  0012               	return		;funcret
  6835  002544  FFFF               	dw	65535	; errata NOP
  6836  002546                     __end_of_resetStep:
  6837                           	callstack 0
  6838                           
  6839 ;; *************** function _getData *****************
  6840 ;; Defined at:
  6841 ;;		line 205 in file "usart.c"
  6842 ;; Parameters:    Size  Location     Type
  6843 ;;		None
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;		None
  6846 ;; Return value:  Size  Location     Type
  6847 ;;                  2   17[COMRAM] PTR struct .
  6848 ;; Registers used:
  6849 ;;		wreg, status,2, status,0
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6855 ;;      Params:         2       0       0       0       0       0       0
  6856 ;;      Locals:         0       0       0       0       0       0       0
  6857 ;;      Temps:          0       0       0       0       0       0       0
  6858 ;;      Totals:         2       0       0       0       0       0       0
  6859 ;;Total ram usage:        2 bytes
  6860 ;; Hardware stack levels used:    1
  6861 ;; Hardware stack levels required when called:    4
  6862 ;; This function calls:
  6863 ;;		Nothing
  6864 ;; This function is called by:
  6865 ;;		_executeData
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           	psect	text41
  6870  0024C2                     __ptext41:
  6871                           	callstack 0
  6872  0024C2                     _getData:
  6873                           	callstack 0
  6874  0024C2  FFFF               	dw	65535	; assembler added errata NOP
  6875  0024C4                     
  6876                           ;usart.c: 206:     return(&dataSequence[0]);
  6877  0024C4  0EDB               	movlw	low _dataSequence
  6878  0024C6  6E12               	movwf	?_getData^0,c
  6879  0024C8  0E00               	movlw	high _dataSequence
  6880  0024CA  6E13               	movwf	(?_getData+1)^0,c
  6881  0024CC  0012               	return		;funcret
  6882  0024CE  FFFF               	dw	65535	; errata NOP
  6883  0024D0                     __end_of_getData:
  6884                           	callstack 0
  6885                           
  6886 ;; *************** function _clearTM0 *****************
  6887 ;; Defined at:
  6888 ;;		line 28 in file "motors.c"
  6889 ;; Parameters:    Size  Location     Type
  6890 ;;		None
  6891 ;; Auto vars:     Size  Location     Type
  6892 ;;		None
  6893 ;; Return value:  Size  Location     Type
  6894 ;;                  1    wreg      void 
  6895 ;; Registers used:
  6896 ;;		wreg, status,2
  6897 ;; Tracked objects:
  6898 ;;		On entry : 0/0
  6899 ;;		On exit  : 0/0
  6900 ;;		Unchanged: 0/0
  6901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6902 ;;      Params:         0       0       0       0       0       0       0
  6903 ;;      Locals:         0       0       0       0       0       0       0
  6904 ;;      Temps:          0       0       0       0       0       0       0
  6905 ;;      Totals:         0       0       0       0       0       0       0
  6906 ;;Total ram usage:        0 bytes
  6907 ;; Hardware stack levels used:    1
  6908 ;; Hardware stack levels required when called:    4
  6909 ;; This function calls:
  6910 ;;		Nothing
  6911 ;; This function is called by:
  6912 ;;		_main
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           	psect	text42
  6917  0024D0                     __ptext42:
  6918                           	callstack 0
  6919  0024D0                     _clearTM0:
  6920                           	callstack 0
  6921  0024D0  FFFF               	dw	65535	; assembler added errata NOP
  6922  0024D2                     
  6923                           ;motors.c: 29:     tm0Error = 0;
  6924  0024D2  0E00               	movlw	0
  6925  0024D4  6E5C               	movwf	(_tm0Error+1)^0,c
  6926  0024D6  0E00               	movlw	0
  6927  0024D8  6E5B               	movwf	_tm0Error^0,c
  6928  0024DA  0012               	return		;funcret
  6929  0024DC  FFFF               	dw	65535	; errata NOP
  6930  0024DE                     __end_of_clearTM0:
  6931                           	callstack 0
  6932                           
  6933 ;; *************** function _isr *****************
  6934 ;; Defined at:
  6935 ;;		line 17 in file "interrupt.c"
  6936 ;; Parameters:    Size  Location     Type
  6937 ;;		None
  6938 ;; Auto vars:     Size  Location     Type
  6939 ;;  temp            1   16[COMRAM] unsigned char 
  6940 ;; Return value:  Size  Location     Type
  6941 ;;                  1    wreg      void 
  6942 ;; Registers used:
  6943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6944 ;; Tracked objects:
  6945 ;;		On entry : 0/0
  6946 ;;		On exit  : 0/0
  6947 ;;		Unchanged: 0/0
  6948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6949 ;;      Params:         0       0       0       0       0       0       0
  6950 ;;      Locals:         1       0       0       0       0       0       0
  6951 ;;      Temps:          6       0       0       0       0       0       0
  6952 ;;      Totals:         7       0       0       0       0       0       0
  6953 ;;Total ram usage:        7 bytes
  6954 ;; Hardware stack levels used:    1
  6955 ;; Hardware stack levels required when called:    3
  6956 ;; This function calls:
  6957 ;;		_increaseStep
  6958 ;;		_retPeriod
  6959 ;;		_setThermRel
  6960 ;;		_setTouchRel
  6961 ;;		_toggleStep
  6962 ;;		_whatsTM0Limit
  6963 ;;		_writeTM0
  6964 ;;		i2_storeData
  6965 ;; This function is called by:
  6966 ;;		Interrupt level 2
  6967 ;; This function uses a non-reentrant model
  6968 ;;
  6969                           
  6970                           	psect	intcode
  6971  000008                     __pintcode:
  6972                           	callstack 0
  6973  000008                     _isr:
  6974                           	callstack 0
  6975  000008  FFFF               	dw	65535	; assembler added errata NOP
  6976                           
  6977                           ;incstack = 0
  6978  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6979  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6980  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6981  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6982  000018  CFF4 F010          	movff	prodh,??_isr+5
  6983  00001C                     
  6984                           ;interrupt.c: 18:     static unsigned int single_cycle = 0;;interrupt.c: 19:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 20:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 23:     if(INTCONbits.T0IF){
  6985  00001C  A4F2               	btfss	242,2,c	;volatile
  6986  00001E  EF13  F000         	goto	i2u237_41
  6987  000022  EF16  F000         	goto	i2u237_40
  6988  000026                     i2u237_41:
  6989  000026  FFFF               	dw	65535	; assembler added errata NOP
  6990  000028  EF2C  F000         	goto	i2l3304
  6991  00002C                     i2u237_40:
  6992  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6993  00002E                     
  6994                           ;interrupt.c: 24:         INTCONbits.T0IF = 0;
  6995  00002E  94F2               	bcf	242,2,c	;volatile
  6996  000030                     
  6997                           ;interrupt.c: 27:         tm0Count++;
  6998  000030  2A63               	incf	isr@tm0Count^0,f,c
  6999  000032                     
  7000                           ;interrupt.c: 29:         if(tm0Count >= whatsTM0Limit()){
  7001  000032  ECC6  F012         	call	_whatsTM0Limit	;wreg free
  7002  000036  6E0B               	movwf	??_isr^0,c
  7003  000038  500B               	movf	??_isr^0,w,c
  7004  00003A  5C63               	subwf	isr@tm0Count^0,w,c
  7005  00003C  A0D8               	btfss	status,0,c
  7006  00003E  EF23  F000         	goto	i2u238_41
  7007  000042  EF26  F000         	goto	i2u238_40
  7008  000046                     i2u238_41:
  7009  000046  FFFF               	dw	65535	; assembler added errata NOP
  7010  000048  EF2C  F000         	goto	i2l3304
  7011  00004C                     i2u238_40:
  7012  00004C  FFFF               	dw	65535	; assembler added errata NOP
  7013  00004E                     
  7014                           ;interrupt.c: 30:             T0CONbits.TMR0ON = 0;
  7015  00004E  9ED5               	bcf	213,7,c	;volatile
  7016  000050                     
  7017                           ;interrupt.c: 31:             tm0Count = 0;
  7018  000050  0E00               	movlw	0
  7019  000052  6E63               	movwf	isr@tm0Count^0,c
  7020  000054                     
  7021                           ;interrupt.c: 32:             writeTM0();
  7022  000054  EC6F  F012         	call	_writeTM0	;wreg free
  7023  000058                     i2l3304:
  7024  000058  FFFF               	dw	65535	; assembler added errata NOP
  7025                           
  7026                           ;interrupt.c: 37:     if(PIR1bits.TMR2IF){
  7027  00005A  A29E               	btfss	158,1,c	;volatile
  7028  00005C  EF32  F000         	goto	i2u239_41
  7029  000060  EF35  F000         	goto	i2u239_40
  7030  000064                     i2u239_41:
  7031  000064  FFFF               	dw	65535	; assembler added errata NOP
  7032  000066  EF63  F000         	goto	i2l3324
  7033  00006A                     i2u239_40:
  7034  00006A  FFFF               	dw	65535	; assembler added errata NOP
  7035  00006C                     
  7036                           ;interrupt.c: 38:         PIR1bits.TMR2IF = 0;
  7037  00006C  929E               	bcf	158,1,c	;volatile
  7038  00006E                     
  7039                           ;interrupt.c: 39:         single_cycle++;
  7040  00006E  4A51               	infsnz	isr@single_cycle^0,f,c
  7041  000070  2A52               	incf	(isr@single_cycle+1)^0,f,c
  7042  000072                     
  7043                           ;interrupt.c: 42:         if(single_cycle > retPeriod()){
  7044  000072  EC76  F012         	call	_retPeriod	;wreg free
  7045  000076  5051               	movf	isr@single_cycle^0,w,c
  7046  000078  5C01               	subwf	?_retPeriod^0,w,c
  7047  00007A  5052               	movf	(isr@single_cycle+1)^0,w,c
  7048  00007C  5802               	subwfb	(?_retPeriod+1)^0,w,c
  7049  00007E  B0D8               	btfsc	status,0,c
  7050  000080  EF44  F000         	goto	i2u240_41
  7051  000084  EF47  F000         	goto	i2u240_40
  7052  000088                     i2u240_41:
  7053  000088  FFFF               	dw	65535	; assembler added errata NOP
  7054  00008A  EF63  F000         	goto	i2l3324
  7055  00008E                     i2u240_40:
  7056  00008E  FFFF               	dw	65535	; assembler added errata NOP
  7057  000090                     
  7058                           ;interrupt.c: 43:             completeStep++;
  7059  000090  2A62               	incf	isr@completeStep^0,f,c
  7060  000092                     
  7061                           ;interrupt.c: 46:             if(completeStep != 0 && !(completeStep % 2)){
  7062  000092  5062               	movf	isr@completeStep^0,w,c
  7063  000094  B4D8               	btfsc	status,2,c
  7064  000096  EF4F  F000         	goto	i2u241_41
  7065  00009A  EF52  F000         	goto	i2u241_40
  7066  00009E                     i2u241_41:
  7067  00009E  FFFF               	dw	65535	; assembler added errata NOP
  7068  0000A0  EF60  F000         	goto	i2l3322
  7069  0000A4                     i2u241_40:
  7070  0000A4  FFFF               	dw	65535	; assembler added errata NOP
  7071  0000A6  B062               	btfsc	isr@completeStep^0,0,c
  7072  0000A8  EF58  F000         	goto	i2u242_41
  7073  0000AC  EF5B  F000         	goto	i2u242_40
  7074  0000B0                     i2u242_41:
  7075  0000B0  FFFF               	dw	65535	; assembler added errata NOP
  7076  0000B2  EF60  F000         	goto	i2l3322
  7077  0000B6                     i2u242_40:
  7078  0000B6  FFFF               	dw	65535	; assembler added errata NOP
  7079  0000B8                     
  7080                           ;interrupt.c: 48:                 completeStep = 0;
  7081  0000B8  0E00               	movlw	0
  7082  0000BA  6E62               	movwf	isr@completeStep^0,c
  7083  0000BC                     
  7084                           ;interrupt.c: 51:                 increaseStep();
  7085  0000BC  ECCA  F012         	call	_increaseStep	;wreg free
  7086  0000C0                     i2l3322:
  7087  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  7088                           
  7089                           ;interrupt.c: 56:             toggleStep();
  7090  0000C2  ECA3  F012         	call	_toggleStep	;wreg free
  7091  0000C6                     i2l3324:
  7092  0000C6  FFFF               	dw	65535	; assembler added errata NOP
  7093                           
  7094                           ;interrupt.c: 61:     if(PIR1bits.ADIF){
  7095  0000C8  AC9E               	btfss	158,6,c	;volatile
  7096  0000CA  EF69  F000         	goto	i2u243_41
  7097  0000CE  EF6C  F000         	goto	i2u243_40
  7098  0000D2                     i2u243_41:
  7099  0000D2  FFFF               	dw	65535	; assembler added errata NOP
  7100  0000D4  EF99  F000         	goto	i2l3336
  7101  0000D8                     i2u243_40:
  7102  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  7103  0000DA                     
  7104                           ;interrupt.c: 62:         PIR1bits.ADIF = 0;
  7105  0000DA  9C9E               	bcf	158,6,c	;volatile
  7106                           
  7107                           ;interrupt.c: 65:         ADC_res = ADRESL;
  7108  0000DC  CFC3 F053          	movff	4035,_ADC_res	;volatile
  7109  0000E0  6A54               	clrf	(_ADC_res+1)^0,c
  7110  0000E2                     
  7111                           ;interrupt.c: 66:         ADC_res |= (ADRESH << 8);
  7112  0000E2  50C4               	movf	196,w,c	;volatile
  7113  0000E4  6E0C               	movwf	(??_isr+1)^0,c
  7114  0000E6  6A0B               	clrf	??_isr^0,c
  7115  0000E8  500B               	movf	??_isr^0,w,c
  7116  0000EA  1253               	iorwf	_ADC_res^0,f,c
  7117  0000EC  500C               	movf	(??_isr+1)^0,w,c
  7118  0000EE  1254               	iorwf	(_ADC_res+1)^0,f,c
  7119                           
  7120                           ;interrupt.c: 69:         if(ADC_res > therm_pressure){
  7121  0000F0  0453               	decf	_ADC_res^0,w,c
  7122  0000F2  0E04               	movlw	4
  7123  0000F4  5854               	subwfb	(_ADC_res+1)^0,w,c
  7124  0000F6  A0D8               	btfss	status,0,c
  7125  0000F8  EF80  F000         	goto	i2u244_41
  7126  0000FC  EF83  F000         	goto	i2u244_40
  7127  000100                     i2u244_41:
  7128  000100  FFFF               	dw	65535	; assembler added errata NOP
  7129  000102  EF8A  F000         	goto	i2l3332
  7130  000106                     i2u244_40:
  7131  000106  FFFF               	dw	65535	; assembler added errata NOP
  7132  000108                     
  7133                           ;interrupt.c: 71:             setTouchRel();
  7134  000108  ECA8  F012         	call	_setTouchRel	;wreg free
  7135                           
  7136                           ;interrupt.c: 72:             setThermRel();
  7137  00010C  ECAD  F012         	call	_setThermRel	;wreg free
  7138                           
  7139                           ;interrupt.c: 73:         }else if(ADC_res > touch_pressure){
  7140  000110  EF99  F000         	goto	i2l3336
  7141  000114                     i2l3332:
  7142  000114  FFFF               	dw	65535	; assembler added errata NOP
  7143  000116  0453               	decf	_ADC_res^0,w,c
  7144  000118  0E02               	movlw	2
  7145  00011A  5854               	subwfb	(_ADC_res+1)^0,w,c
  7146  00011C  A0D8               	btfss	status,0,c
  7147  00011E  EF93  F000         	goto	i2u245_41
  7148  000122  EF96  F000         	goto	i2u245_40
  7149  000126                     i2u245_41:
  7150  000126  FFFF               	dw	65535	; assembler added errata NOP
  7151  000128  EF99  F000         	goto	i2l3336
  7152  00012C                     i2u245_40:
  7153  00012C  FFFF               	dw	65535	; assembler added errata NOP
  7154  00012E                     
  7155                           ;interrupt.c: 75:             setTouchRel();
  7156  00012E  ECA8  F012         	call	_setTouchRel	;wreg free
  7157  000132                     i2l3336:
  7158  000132  FFFF               	dw	65535	; assembler added errata NOP
  7159                           
  7160                           ;interrupt.c: 80:     if(PIR1bits.RC1IF){
  7161  000134  AA9E               	btfss	158,5,c	;volatile
  7162  000136  EF9F  F000         	goto	i2u246_41
  7163  00013A  EFA2  F000         	goto	i2u246_40
  7164  00013E                     i2u246_41:
  7165  00013E  FFFF               	dw	65535	; assembler added errata NOP
  7166  000140  EFA9  F000         	goto	i2l472
  7167  000144                     i2u246_40:
  7168  000144  FFFF               	dw	65535	; assembler added errata NOP
  7169  000146                     
  7170                           ;interrupt.c: 81:         PIR1bits.RC1IF = 0;
  7171  000146  9A9E               	bcf	158,5,c	;volatile
  7172                           
  7173                           ;interrupt.c: 84:         unsigned char temp = RCREG1;
  7174  000148  CFAE F011          	movff	4014,isr@temp	;volatile
  7175  00014C                     
  7176                           ;interrupt.c: 86:         storeData(temp);
  7177  00014C  5011               	movf	isr@temp^0,w,c
  7178  00014E  EC2C  F00B         	call	i2_storeData
  7179  000152                     i2l472:
  7180  000152  FFFF               	dw	65535	; assembler added errata NOP
  7181  000154  C010  FFF4         	movff	??_isr+5,prodh
  7182  000158  C00F  FFF3         	movff	??_isr+4,prodl
  7183  00015C  C00E  FFDA         	movff	??_isr+3,fsr2h
  7184  000160  C00D  FFD9         	movff	??_isr+2,fsr2l
  7185  000164  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7186  000166  0011               	retfie		f
  7187  000168  FFFF               	dw	65535	; errata NOP
  7188  00016A                     __end_of_isr:
  7189                           	callstack 0
  7190                           
  7191 ;; *************** function i2_storeData *****************
  7192 ;; Defined at:
  7193 ;;		line 131 in file "usart.c"
  7194 ;; Parameters:    Size  Location     Type
  7195 ;;  data            1    wreg     unsigned char 
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;  data            1    9[COMRAM] unsigned char 
  7198 ;; Return value:  Size  Location     Type
  7199 ;;                  1    wreg      void 
  7200 ;; Registers used:
  7201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7202 ;; Tracked objects:
  7203 ;;		On entry : 0/0
  7204 ;;		On exit  : 0/0
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7207 ;;      Params:         0       0       0       0       0       0       0
  7208 ;;      Locals:         1       0       0       0       0       0       0
  7209 ;;      Temps:          2       0       0       0       0       0       0
  7210 ;;      Totals:         3       0       0       0       0       0       0
  7211 ;;Total ram usage:        3 bytes
  7212 ;; Hardware stack levels used:    1
  7213 ;; Hardware stack levels required when called:    2
  7214 ;; This function calls:
  7215 ;;		i2_printError
  7216 ;; This function is called by:
  7217 ;;		_isr
  7218 ;; This function uses a non-reentrant model
  7219 ;;
  7220                           
  7221                           	psect	text44
  7222  001658                     __ptext44:
  7223                           	callstack 0
  7224  001658                     i2_storeData:
  7225                           	callstack 0
  7226  001658  FFFF               	dw	65535	; assembler added errata NOP
  7227                           
  7228                           ;incstack = 0
  7229                           ;i2storeData@data stored from wreg
  7230  00165A  6E0A               	movwf	i2storeData@data^0,c
  7231  00165C                     
  7232                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  7233  00165C  0E45               	movlw	low storeData@receivedMex
  7234  00165E  245E               	addwf	storeData@counter^0,w,c
  7235  001660  6ED9               	movwf	fsr2l,c
  7236  001662  6ADA               	clrf	fsr2h,c
  7237  001664  0E00               	movlw	high storeData@receivedMex
  7238  001666  22DA               	addwfc	fsr2h,f,c
  7239  001668  C00A  FFDF         	movff	i2storeData@data,indf2
  7240  00166C                     
  7241                           ;usart.c: 142:     counter++;
  7242  00166C  2A5E               	incf	storeData@counter^0,f,c
  7243                           
  7244                           ;usart.c: 145:     switch(receivedMex[0]){
  7245  00166E  EF48  F00B         	goto	i2l3202
  7246  001672                     i2l3194:
  7247  001672  FFFF               	dw	65535	; assembler added errata NOP
  7248                           
  7249                           ;usart.c: 147:             mexLength = 5;
  7250  001674  0E05               	movlw	5
  7251  001676  6E6D               	movwf	storeData@mexLength^0,c
  7252                           
  7253                           ;usart.c: 148:             break;
  7254  001678  EF63  F00B         	goto	i2l3204
  7255  00167C                     i2l3196:
  7256  00167C  FFFF               	dw	65535	; assembler added errata NOP
  7257                           
  7258                           ;usart.c: 150:             mexLength = 9;
  7259  00167E  0E09               	movlw	9
  7260  001680  6E6D               	movwf	storeData@mexLength^0,c
  7261                           
  7262                           ;usart.c: 151:             break;
  7263  001682  EF63  F00B         	goto	i2l3204
  7264  001686                     i2l3198:
  7265  001686  FFFF               	dw	65535	; assembler added errata NOP
  7266                           
  7267                           ;usart.c: 153:             mexLength = 1;
  7268  001688  0E01               	movlw	1
  7269  00168A  6E6D               	movwf	storeData@mexLength^0,c
  7270                           
  7271                           ;usart.c: 154:             break;
  7272  00168C  EF63  F00B         	goto	i2l3204
  7273  001690                     i2l3202:
  7274  001690  FFFF               	dw	65535	; assembler added errata NOP
  7275  001692  5045               	movf	storeData@receivedMex^0,w,c
  7276  001694  6E08               	movwf	??i2_storeData^0,c
  7277  001696  6A09               	clrf	(??i2_storeData+1)^0,c
  7278                           
  7279                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7280                           ; Switch size 1, requested type "simple"
  7281                           ; Number of cases is 1, Range of values is 0 to 0
  7282                           ; switch strategies available:
  7283                           ; Name         Instructions Cycles
  7284                           ; simple_byte            4     3 (average)
  7285                           ;	Chosen strategy is simple_byte
  7286  001698  5009               	movf	(??i2_storeData+1)^0,w,c
  7287  00169A  0A00               	xorlw	0	; case 0
  7288  00169C  B4D8               	btfsc	status,2,c
  7289  00169E  EF53  F00B         	goto	i2l4504
  7290  0016A2  EF63  F00B         	goto	i2l3204
  7291  0016A6                     i2l4504:
  7292  0016A6  FFFF               	dw	65535	; assembler added errata NOP
  7293                           
  7294                           ; Switch size 1, requested type "simple"
  7295                           ; Number of cases is 3, Range of values is 0 to 2
  7296                           ; switch strategies available:
  7297                           ; Name         Instructions Cycles
  7298                           ; simple_byte           10     6 (average)
  7299                           ;	Chosen strategy is simple_byte
  7300  0016A8  5008               	movf	??i2_storeData^0,w,c
  7301  0016AA  0A00               	xorlw	0	; case 0
  7302  0016AC  B4D8               	btfsc	status,2,c
  7303  0016AE  EF39  F00B         	goto	i2l3194
  7304  0016B2  0A01               	xorlw	1	; case 1
  7305  0016B4  B4D8               	btfsc	status,2,c
  7306  0016B6  EF3E  F00B         	goto	i2l3196
  7307  0016BA  0A03               	xorlw	3	; case 2
  7308  0016BC  B4D8               	btfsc	status,2,c
  7309  0016BE  EF43  F00B         	goto	i2l3198
  7310  0016C2  EF63  F00B         	goto	i2l3204
  7311  0016C6                     i2l3204:
  7312  0016C6  FFFF               	dw	65535	; assembler added errata NOP
  7313                           
  7314                           ;usart.c: 161:     if(counter >= mexLength){
  7315  0016C8  506D               	movf	storeData@mexLength^0,w,c
  7316  0016CA  5C5E               	subwf	storeData@counter^0,w,c
  7317  0016CC  A0D8               	btfss	status,0,c
  7318  0016CE  EF6B  F00B         	goto	i2u232_41
  7319  0016D2  EF6E  F00B         	goto	i2u232_40
  7320  0016D6                     i2u232_41:
  7321  0016D6  FFFF               	dw	65535	; assembler added errata NOP
  7322  0016D8  EFDA  F00B         	goto	i2l571
  7323  0016DC                     i2u232_40:
  7324  0016DC  FFFF               	dw	65535	; assembler added errata NOP
  7325  0016DE                     
  7326                           ;usart.c: 162:         counter = 0;
  7327  0016DE  0E00               	movlw	0
  7328  0016E0  6E5E               	movwf	storeData@counter^0,c
  7329                           
  7330                           ;usart.c: 166:         switch(receivedMex[0]){
  7331  0016E2  EFBF  F00B         	goto	i2l3220
  7332  0016E6                     i2l3208:
  7333  0016E6  FFFF               	dw	65535	; assembler added errata NOP
  7334                           
  7335                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7336  0016E8  5061               	movf	_dataCounter^0,w,c
  7337  0016EA  0D04               	mullw	4
  7338  0016EC  0EDB               	movlw	low _dataSequence
  7339  0016EE  24F3               	addwf	243,w,c
  7340  0016F0  6ED9               	movwf	fsr2l,c
  7341  0016F2  0E00               	movlw	high _dataSequence
  7342  0016F4  20F4               	addwfc	prodh,w,c
  7343  0016F6  6EDA               	movwf	fsr2h,c
  7344  0016F8  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  7345                           
  7346                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  7347  0016FC  5061               	movf	_dataCounter^0,w,c
  7348  0016FE  0D04               	mullw	4
  7349  001700  0EDC               	movlw	low (_dataSequence+1)
  7350  001702  24F3               	addwf	243,w,c
  7351  001704  6ED9               	movwf	fsr2l,c
  7352  001706  0E00               	movlw	high (_dataSequence+1)
  7353  001708  20F4               	addwfc	prodh,w,c
  7354  00170A  6EDA               	movwf	fsr2h,c
  7355  00170C  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  7356                           
  7357                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  7358  001710  5061               	movf	_dataCounter^0,w,c
  7359  001712  0D04               	mullw	4
  7360  001714  0EDD               	movlw	low (_dataSequence+2)
  7361  001716  24F3               	addwf	243,w,c
  7362  001718  6ED9               	movwf	fsr2l,c
  7363  00171A  0E00               	movlw	high (_dataSequence+2)
  7364  00171C  20F4               	addwfc	prodh,w,c
  7365  00171E  6EDA               	movwf	fsr2h,c
  7366  001720  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  7367                           
  7368                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7369  001724  5061               	movf	_dataCounter^0,w,c
  7370  001726  0D04               	mullw	4
  7371  001728  0EDE               	movlw	low (_dataSequence+3)
  7372  00172A  24F3               	addwf	243,w,c
  7373  00172C  6ED9               	movwf	fsr2l,c
  7374  00172E  0E00               	movlw	high (_dataSequence+3)
  7375  001730  20F4               	addwfc	prodh,w,c
  7376  001732  6EDA               	movwf	fsr2h,c
  7377  001734  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  7378  001738                     
  7379                           ;usart.c: 173:                 dataCounter++;
  7380  001738  2A61               	incf	_dataCounter^0,f,c
  7381                           
  7382                           ;usart.c: 174:                 break;
  7383  00173A  EFDA  F00B         	goto	i2l571
  7384  00173E                     i2l568:
  7385  00173E  FFFF               	dw	65535	; assembler added errata NOP
  7386                           
  7387                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  7388  001740  C046  F0EF         	movff	storeData@receivedMex+1,_newSequenceData
  7389                           
  7390                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  7391  001744  C047  F0F0         	movff	storeData@receivedMex+2,_newSequenceData+1
  7392                           
  7393                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  7394  001748  C048  F0F1         	movff	storeData@receivedMex+3,_newSequenceData+2
  7395                           
  7396                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  7397  00174C  C049  F0F2         	movff	storeData@receivedMex+4,_newSequenceData+3
  7398                           
  7399                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  7400  001750  C04A  F0F3         	movff	storeData@receivedMex+5,_newSequenceData+4
  7401                           
  7402                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  7403  001754  C04B  F0F4         	movff	storeData@receivedMex+6,_newSequenceData+5
  7404                           
  7405                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  7406  001758  C04C  F0F5         	movff	storeData@receivedMex+7,_newSequenceData+6
  7407                           
  7408                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  7409  00175C  C04D  F0F6         	movff	storeData@receivedMex+8,_newSequenceData+7
  7410  001760                     
  7411                           ;usart.c: 186:                 _newSequence = 1;
  7412  001760  0E01               	movlw	1
  7413  001762  6E5F               	movwf	__newSequence^0,c
  7414                           
  7415                           ;usart.c: 187:                 break;
  7416  001764  EFDA  F00B         	goto	i2l571
  7417  001768                     i2l3214:
  7418  001768  FFFF               	dw	65535	; assembler added errata NOP
  7419                           
  7420                           ;usart.c: 190:                 _fatalError = 1;
  7421  00176A  0E01               	movlw	1
  7422  00176C  6E60               	movwf	__fatalError^0,c
  7423                           
  7424                           ;usart.c: 191:                 break;
  7425  00176E  EFDA  F00B         	goto	i2l571
  7426  001772                     i2l3216:
  7427  001772  FFFF               	dw	65535	; assembler added errata NOP
  7428                           
  7429                           ;usart.c: 194:                 printError(8);
  7430  001774  0E08               	movlw	8
  7431  001776  EC06  F00D         	call	i2_printError
  7432                           
  7433                           ;usart.c: 195:                 break;
  7434  00177A  EFDA  F00B         	goto	i2l571
  7435  00177E                     i2l3220:
  7436  00177E  FFFF               	dw	65535	; assembler added errata NOP
  7437  001780  5045               	movf	storeData@receivedMex^0,w,c
  7438  001782  6E08               	movwf	??i2_storeData^0,c
  7439  001784  6A09               	clrf	(??i2_storeData+1)^0,c
  7440                           
  7441                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7442                           ; Switch size 1, requested type "simple"
  7443                           ; Number of cases is 1, Range of values is 0 to 0
  7444                           ; switch strategies available:
  7445                           ; Name         Instructions Cycles
  7446                           ; simple_byte            4     3 (average)
  7447                           ;	Chosen strategy is simple_byte
  7448  001786  5009               	movf	(??i2_storeData+1)^0,w,c
  7449  001788  0A00               	xorlw	0	; case 0
  7450  00178A  B4D8               	btfsc	status,2,c
  7451  00178C  EFCA  F00B         	goto	i2l4506
  7452  001790  EFB9  F00B         	goto	i2l3216
  7453  001794                     i2l4506:
  7454  001794  FFFF               	dw	65535	; assembler added errata NOP
  7455                           
  7456                           ; Switch size 1, requested type "simple"
  7457                           ; Number of cases is 3, Range of values is 0 to 2
  7458                           ; switch strategies available:
  7459                           ; Name         Instructions Cycles
  7460                           ; simple_byte           10     6 (average)
  7461                           ;	Chosen strategy is simple_byte
  7462  001796  5008               	movf	??i2_storeData^0,w,c
  7463  001798  0A00               	xorlw	0	; case 0
  7464  00179A  B4D8               	btfsc	status,2,c
  7465  00179C  EF73  F00B         	goto	i2l3208
  7466  0017A0  0A01               	xorlw	1	; case 1
  7467  0017A2  B4D8               	btfsc	status,2,c
  7468  0017A4  EF9F  F00B         	goto	i2l568
  7469  0017A8  0A03               	xorlw	3	; case 2
  7470  0017AA  B4D8               	btfsc	status,2,c
  7471  0017AC  EFB4  F00B         	goto	i2l3214
  7472  0017B0  EFB9  F00B         	goto	i2l3216
  7473  0017B4                     i2l571:
  7474  0017B4  FFFF               	dw	65535	; assembler added errata NOP
  7475  0017B6  0012               	return		;funcret
  7476  0017B8  FFFF               	dw	65535	; errata NOP
  7477  0017BA                     __end_ofi2_storeData:
  7478                           	callstack 0
  7479                           
  7480 ;; *************** function i2_printError *****************
  7481 ;; Defined at:
  7482 ;;		line 53 in file "usart.c"
  7483 ;; Parameters:    Size  Location     Type
  7484 ;;  errCode         1    wreg     unsigned char 
  7485 ;; Auto vars:     Size  Location     Type
  7486 ;;  errCode         1    6[COMRAM] unsigned char 
  7487 ;; Return value:  Size  Location     Type
  7488 ;;                  1    wreg      void 
  7489 ;; Registers used:
  7490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7491 ;; Tracked objects:
  7492 ;;		On entry : 0/0
  7493 ;;		On exit  : 0/0
  7494 ;;		Unchanged: 0/0
  7495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7496 ;;      Params:         0       0       0       0       0       0       0
  7497 ;;      Locals:         1       0       0       0       0       0       0
  7498 ;;      Temps:          2       0       0       0       0       0       0
  7499 ;;      Totals:         3       0       0       0       0       0       0
  7500 ;;Total ram usage:        3 bytes
  7501 ;; Hardware stack levels used:    1
  7502 ;; Hardware stack levels required when called:    1
  7503 ;; This function calls:
  7504 ;;		i2_uartTx
  7505 ;; This function is called by:
  7506 ;;		i2_storeData
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           	psect	text45
  7511  001A0C                     __ptext45:
  7512                           	callstack 0
  7513  001A0C                     i2_printError:
  7514                           	callstack 0
  7515  001A0C  FFFF               	dw	65535	; assembler added errata NOP
  7516                           
  7517                           ;incstack = 0
  7518                           ;i2printError@errCode stored from wreg
  7519  001A0E  6E07               	movwf	i2printError@errCode^0,c
  7520  001A10                     
  7521                           ;usart.c: 55:     switch(errCode){
  7522  001A10  EF62  F00D         	goto	i2l2942
  7523  001A14                     i2l2924:
  7524  001A14  FFFF               	dw	65535	; assembler added errata NOP
  7525                           
  7526                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7527  001A16  0EA5               	movlw	low _errString_Feed
  7528  001A18  6E01               	movwf	i2uartTx@ptr^0,c
  7529  001A1A  0E00               	movlw	high _errString_Feed
  7530  001A1C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7531  001A1E  0E1E               	movlw	30
  7532  001A20  6E03               	movwf	i2uartTx@length^0,c
  7533  001A22  EC98  F011         	call	i2_uartTx	;wreg free
  7534                           
  7535                           ;usart.c: 58:             break;
  7536  001A26  EF91  F00D         	goto	i2l527
  7537  001A2A                     i2l2926:
  7538  001A2A  FFFF               	dw	65535	; assembler added errata NOP
  7539                           
  7540                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7541  001A2C  0E5E               	movlw	low _errString_ZEND
  7542  001A2E  6E01               	movwf	i2uartTx@ptr^0,c
  7543  001A30  0E01               	movlw	high _errString_ZEND
  7544  001A32  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7545  001A34  0E29               	movlw	41
  7546  001A36  6E03               	movwf	i2uartTx@length^0,c
  7547  001A38  EC98  F011         	call	i2_uartTx	;wreg free
  7548                           
  7549                           ;usart.c: 61:             break;
  7550  001A3C  EF91  F00D         	goto	i2l527
  7551  001A40                     i2l2928:
  7552  001A40  FFFF               	dw	65535	; assembler added errata NOP
  7553                           
  7554                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7555  001A42  0E87               	movlw	low _errString_Reset
  7556  001A44  6E01               	movwf	i2uartTx@ptr^0,c
  7557  001A46  0E01               	movlw	high _errString_Reset
  7558  001A48  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7559  001A4A  0E28               	movlw	40
  7560  001A4C  6E03               	movwf	i2uartTx@length^0,c
  7561  001A4E  EC98  F011         	call	i2_uartTx	;wreg free
  7562                           
  7563                           ;usart.c: 64:             break;
  7564  001A52  EF91  F00D         	goto	i2l527
  7565  001A56                     i2l2930:
  7566  001A56  FFFF               	dw	65535	; assembler added errata NOP
  7567                           
  7568                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7569  001A58  0E35               	movlw	low _errString_Point
  7570  001A5A  6E01               	movwf	i2uartTx@ptr^0,c
  7571  001A5C  0E01               	movlw	high _errString_Point
  7572  001A5E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7573  001A60  0E29               	movlw	41
  7574  001A62  6E03               	movwf	i2uartTx@length^0,c
  7575  001A64  EC98  F011         	call	i2_uartTx	;wreg free
  7576                           
  7577                           ;usart.c: 67:             break;
  7578  001A68  EF91  F00D         	goto	i2l527
  7579  001A6C                     i2l2932:
  7580  001A6C  FFFF               	dw	65535	; assembler added errata NOP
  7581                           
  7582                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7583  001A6E  0E84               	movlw	low _errString_Bound
  7584  001A70  6E01               	movwf	i2uartTx@ptr^0,c
  7585  001A72  0E00               	movlw	high _errString_Bound
  7586  001A74  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7587  001A76  0E21               	movlw	33
  7588  001A78  6E03               	movwf	i2uartTx@length^0,c
  7589  001A7A  EC98  F011         	call	i2_uartTx	;wreg free
  7590                           
  7591                           ;usart.c: 70:             break;
  7592  001A7E  EF91  F00D         	goto	i2l527
  7593  001A82                     i2l2934:
  7594  001A82  FFFF               	dw	65535	; assembler added errata NOP
  7595                           
  7596                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7597  001A84  0E00               	movlw	low _errString_PointZ
  7598  001A86  6E01               	movwf	i2uartTx@ptr^0,c
  7599  001A88  0E01               	movlw	high _errString_PointZ
  7600  001A8A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7601  001A8C  0E35               	movlw	53
  7602  001A8E  6E03               	movwf	i2uartTx@length^0,c
  7603  001A90  EC98  F011         	call	i2_uartTx	;wreg free
  7604                           
  7605                           ;usart.c: 73:             break;
  7606  001A94  EF91  F00D         	goto	i2l527
  7607  001A98                     i2l2936:
  7608  001A98  FFFF               	dw	65535	; assembler added errata NOP
  7609                           
  7610                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7611  001A9A  0EAF               	movlw	low _errString_Fatal
  7612  001A9C  6E01               	movwf	i2uartTx@ptr^0,c
  7613  001A9E  0E01               	movlw	high _errString_Fatal
  7614  001AA0  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7615  001AA2  0E27               	movlw	39
  7616  001AA4  6E03               	movwf	i2uartTx@length^0,c
  7617  001AA6  EC98  F011         	call	i2_uartTx	;wreg free
  7618                           
  7619                           ;usart.c: 76:             break;
  7620  001AAA  EF91  F00D         	goto	i2l527
  7621  001AAE                     i2l2938:
  7622  001AAE  FFFF               	dw	65535	; assembler added errata NOP
  7623                           
  7624                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7625  001AB0  0EC3               	movlw	low _errString_Command
  7626  001AB2  6E01               	movwf	i2uartTx@ptr^0,c
  7627  001AB4  0E00               	movlw	high _errString_Command
  7628  001AB6  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7629  001AB8  0E18               	movlw	24
  7630  001ABA  6E03               	movwf	i2uartTx@length^0,c
  7631  001ABC  EC98  F011         	call	i2_uartTx	;wreg free
  7632                           
  7633                           ;usart.c: 79:             break;
  7634  001AC0  EF91  F00D         	goto	i2l527
  7635  001AC4                     i2l2942:
  7636  001AC4  FFFF               	dw	65535	; assembler added errata NOP
  7637  001AC6  5007               	movf	i2printError@errCode^0,w,c
  7638  001AC8  6E05               	movwf	??i2_printError^0,c
  7639  001ACA  6A06               	clrf	(??i2_printError+1)^0,c
  7640                           
  7641                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7642                           ; Switch size 1, requested type "simple"
  7643                           ; Number of cases is 1, Range of values is 0 to 0
  7644                           ; switch strategies available:
  7645                           ; Name         Instructions Cycles
  7646                           ; simple_byte            4     3 (average)
  7647                           ;	Chosen strategy is simple_byte
  7648  001ACC  5006               	movf	(??i2_printError+1)^0,w,c
  7649  001ACE  0A00               	xorlw	0	; case 0
  7650  001AD0  B4D8               	btfsc	status,2,c
  7651  001AD2  EF6D  F00D         	goto	i2l4508
  7652  001AD6  EF91  F00D         	goto	i2l527
  7653  001ADA                     i2l4508:
  7654  001ADA  FFFF               	dw	65535	; assembler added errata NOP
  7655                           
  7656                           ; Switch size 1, requested type "simple"
  7657                           ; Number of cases is 8, Range of values is 1 to 8
  7658                           ; switch strategies available:
  7659                           ; Name         Instructions Cycles
  7660                           ; simple_byte           25    13 (average)
  7661                           ;	Chosen strategy is simple_byte
  7662  001ADC  5005               	movf	??i2_printError^0,w,c
  7663  001ADE  0A01               	xorlw	1	; case 1
  7664  001AE0  B4D8               	btfsc	status,2,c
  7665  001AE2  EF0A  F00D         	goto	i2l2924
  7666  001AE6  0A03               	xorlw	3	; case 2
  7667  001AE8  B4D8               	btfsc	status,2,c
  7668  001AEA  EF15  F00D         	goto	i2l2926
  7669  001AEE  0A01               	xorlw	1	; case 3
  7670  001AF0  B4D8               	btfsc	status,2,c
  7671  001AF2  EF20  F00D         	goto	i2l2928
  7672  001AF6  0A07               	xorlw	7	; case 4
  7673  001AF8  B4D8               	btfsc	status,2,c
  7674  001AFA  EF2B  F00D         	goto	i2l2930
  7675  001AFE  0A01               	xorlw	1	; case 5
  7676  001B00  B4D8               	btfsc	status,2,c
  7677  001B02  EF36  F00D         	goto	i2l2932
  7678  001B06  0A03               	xorlw	3	; case 6
  7679  001B08  B4D8               	btfsc	status,2,c
  7680  001B0A  EF41  F00D         	goto	i2l2934
  7681  001B0E  0A01               	xorlw	1	; case 7
  7682  001B10  B4D8               	btfsc	status,2,c
  7683  001B12  EF4C  F00D         	goto	i2l2936
  7684  001B16  0A0F               	xorlw	15	; case 8
  7685  001B18  B4D8               	btfsc	status,2,c
  7686  001B1A  EF57  F00D         	goto	i2l2938
  7687  001B1E  EF91  F00D         	goto	i2l527
  7688  001B22                     i2l527:
  7689  001B22  FFFF               	dw	65535	; assembler added errata NOP
  7690  001B24  0012               	return		;funcret
  7691  001B26  FFFF               	dw	65535	; errata NOP
  7692  001B28                     __end_ofi2_printError:
  7693                           	callstack 0
  7694                           
  7695 ;; *************** function i2_uartTx *****************
  7696 ;; Defined at:
  7697 ;;		line 221 in file "usart.c"
  7698 ;; Parameters:    Size  Location     Type
  7699 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7700 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  7701 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  7702 ;;  length          1    2[COMRAM] unsigned char 
  7703 ;; Auto vars:     Size  Location     Type
  7704 ;;  i               1    3[COMRAM] unsigned char 
  7705 ;; Return value:  Size  Location     Type
  7706 ;;                  1    wreg      void 
  7707 ;; Registers used:
  7708 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7709 ;; Tracked objects:
  7710 ;;		On entry : 0/0
  7711 ;;		On exit  : 0/0
  7712 ;;		Unchanged: 0/0
  7713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7714 ;;      Params:         3       0       0       0       0       0       0
  7715 ;;      Locals:         1       0       0       0       0       0       0
  7716 ;;      Temps:          0       0       0       0       0       0       0
  7717 ;;      Totals:         4       0       0       0       0       0       0
  7718 ;;Total ram usage:        4 bytes
  7719 ;; Hardware stack levels used:    1
  7720 ;; This function calls:
  7721 ;;		Nothing
  7722 ;; This function is called by:
  7723 ;;		i2_printError
  7724 ;; This function uses a non-reentrant model
  7725 ;;
  7726                           
  7727                           	psect	text46
  7728  002330                     __ptext46:
  7729                           	callstack 0
  7730  002330                     i2_uartTx:
  7731                           	callstack 0
  7732  002330  FFFF               	dw	65535	; assembler added errata NOP
  7733  002332                     
  7734                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  7735  002332  0E01               	movlw	1
  7736  002334  6E04               	movwf	i2uartTx@i^0,c
  7737  002336  EFB1  F011         	goto	i2l2614
  7738  00233A                     i2l2610:
  7739  00233A  FFFF               	dw	65535	; assembler added errata NOP
  7740                           
  7741                           ;usart.c: 226:         TXREG = *ptr;
  7742  00233C  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  7743  002340  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  7744  002344  50DF               	movf	indf2,w,c
  7745  002346  6EAD               	movwf	173,c	;volatile
  7746  002348                     i2l582:
  7747  002348  FFFF               	dw	65535	; assembler added errata NOP
  7748  00234A  A2AC               	btfss	172,1,c	;volatile
  7749  00234C  EFAA  F011         	goto	i2u169_41
  7750  002350  EFAD  F011         	goto	i2u169_40
  7751  002354                     i2u169_41:
  7752  002354  FFFF               	dw	65535	; assembler added errata NOP
  7753  002356  EFA4  F011         	goto	i2l582
  7754  00235A                     i2u169_40:
  7755  00235A  FFFF               	dw	65535	; assembler added errata NOP
  7756  00235C                     
  7757                           ;usart.c: 230:         ptr++;
  7758  00235C  4A01               	infsnz	i2uartTx@ptr^0,f,c
  7759  00235E  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  7760                           
  7761                           ;usart.c: 231:     }
  7762  002360  2A04               	incf	i2uartTx@i^0,f,c
  7763  002362                     i2l2614:
  7764  002362  FFFF               	dw	65535	; assembler added errata NOP
  7765  002364  5003               	movf	i2uartTx@length^0,w,c
  7766  002366  5C04               	subwf	i2uartTx@i^0,w,c
  7767  002368  A0D8               	btfss	status,0,c
  7768  00236A  EFB9  F011         	goto	i2u170_41
  7769  00236E  EFBC  F011         	goto	i2u170_40
  7770  002372                     i2u170_41:
  7771  002372  FFFF               	dw	65535	; assembler added errata NOP
  7772  002374  EF9D  F011         	goto	i2l2610
  7773  002378                     i2u170_40:
  7774  002378  FFFF               	dw	65535	; assembler added errata NOP
  7775  00237A  0012               	return		;funcret
  7776  00237C  FFFF               	dw	65535	; errata NOP
  7777  00237E                     __end_ofi2_uartTx:
  7778                           	callstack 0
  7779                           
  7780 ;; *************** function _writeTM0 *****************
  7781 ;; Defined at:
  7782 ;;		line 21 in file "motors.c"
  7783 ;; Parameters:    Size  Location     Type
  7784 ;;		None
  7785 ;; Auto vars:     Size  Location     Type
  7786 ;;		None
  7787 ;; Return value:  Size  Location     Type
  7788 ;;                  1    wreg      void 
  7789 ;; Registers used:
  7790 ;;		wreg, status,2
  7791 ;; Tracked objects:
  7792 ;;		On entry : 0/0
  7793 ;;		On exit  : 0/0
  7794 ;;		Unchanged: 0/0
  7795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7796 ;;      Params:         0       0       0       0       0       0       0
  7797 ;;      Locals:         0       0       0       0       0       0       0
  7798 ;;      Temps:          0       0       0       0       0       0       0
  7799 ;;      Totals:         0       0       0       0       0       0       0
  7800 ;;Total ram usage:        0 bytes
  7801 ;; Hardware stack levels used:    1
  7802 ;; This function calls:
  7803 ;;		Nothing
  7804 ;; This function is called by:
  7805 ;;		_isr
  7806 ;; This function uses a non-reentrant model
  7807 ;;
  7808                           
  7809                           	psect	text47
  7810  0024DE                     __ptext47:
  7811                           	callstack 0
  7812  0024DE                     _writeTM0:
  7813                           	callstack 0
  7814  0024DE  FFFF               	dw	65535	; assembler added errata NOP
  7815  0024E0                     
  7816                           ;motors.c: 22:     tm0Error = 1;
  7817  0024E0  0E00               	movlw	0
  7818  0024E2  6E5C               	movwf	(_tm0Error+1)^0,c
  7819  0024E4  0E01               	movlw	1
  7820  0024E6  6E5B               	movwf	_tm0Error^0,c
  7821  0024E8  0012               	return		;funcret
  7822  0024EA  FFFF               	dw	65535	; errata NOP
  7823  0024EC                     __end_of_writeTM0:
  7824                           	callstack 0
  7825                           
  7826 ;; *************** function _whatsTM0Limit *****************
  7827 ;; Defined at:
  7828 ;;		line 35 in file "motors.c"
  7829 ;; Parameters:    Size  Location     Type
  7830 ;;		None
  7831 ;; Auto vars:     Size  Location     Type
  7832 ;;		None
  7833 ;; Return value:  Size  Location     Type
  7834 ;;                  1    wreg      unsigned char 
  7835 ;; Registers used:
  7836 ;;		wreg, status,2
  7837 ;; Tracked objects:
  7838 ;;		On entry : 0/0
  7839 ;;		On exit  : 0/0
  7840 ;;		Unchanged: 0/0
  7841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7842 ;;      Params:         0       0       0       0       0       0       0
  7843 ;;      Locals:         0       0       0       0       0       0       0
  7844 ;;      Temps:          0       0       0       0       0       0       0
  7845 ;;      Totals:         0       0       0       0       0       0       0
  7846 ;;Total ram usage:        0 bytes
  7847 ;; Hardware stack levels used:    1
  7848 ;; This function calls:
  7849 ;;		Nothing
  7850 ;; This function is called by:
  7851 ;;		_isr
  7852 ;; This function uses a non-reentrant model
  7853 ;;
  7854                           
  7855                           	psect	text48
  7856  00258C                     __ptext48:
  7857                           	callstack 0
  7858  00258C                     _whatsTM0Limit:
  7859                           	callstack 0
  7860  00258C  FFFF               	dw	65535	; assembler added errata NOP
  7861  00258E                     
  7862                           ;motors.c: 36:     return(tm0Limit);
  7863  00258E  5068               	movf	_tm0Limit^0,w,c
  7864  002590  0012               	return		;funcret
  7865  002592  FFFF               	dw	65535	; errata NOP
  7866  002594                     __end_of_whatsTM0Limit:
  7867                           	callstack 0
  7868                           
  7869 ;; *************** function _toggleStep *****************
  7870 ;; Defined at:
  7871 ;;		line 80 in file "pwm.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;		None
  7874 ;; Auto vars:     Size  Location     Type
  7875 ;;		None
  7876 ;; Return value:  Size  Location     Type
  7877 ;;                  1    wreg      void 
  7878 ;; Registers used:
  7879 ;;		wreg, status,2
  7880 ;; Tracked objects:
  7881 ;;		On entry : 0/0
  7882 ;;		On exit  : 0/0
  7883 ;;		Unchanged: 0/0
  7884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7885 ;;      Params:         0       0       0       0       0       0       0
  7886 ;;      Locals:         0       0       0       0       0       0       0
  7887 ;;      Temps:          0       0       0       0       0       0       0
  7888 ;;      Totals:         0       0       0       0       0       0       0
  7889 ;;Total ram usage:        0 bytes
  7890 ;; Hardware stack levels used:    1
  7891 ;; This function calls:
  7892 ;;		Nothing
  7893 ;; This function is called by:
  7894 ;;		_isr
  7895 ;; This function uses a non-reentrant model
  7896 ;;
  7897                           
  7898                           	psect	text49
  7899  002546                     __ptext49:
  7900                           	callstack 0
  7901  002546                     _toggleStep:
  7902                           	callstack 0
  7903  002546  FFFF               	dw	65535	; assembler added errata NOP
  7904  002548                     
  7905                           ;pwm.c: 81:     stepToggle = 1;
  7906  002548  0E01               	movlw	1
  7907  00254A  6E66               	movwf	_stepToggle^0,c	;volatile
  7908  00254C  0012               	return		;funcret
  7909  00254E  FFFF               	dw	65535	; errata NOP
  7910  002550                     __end_of_toggleStep:
  7911                           	callstack 0
  7912                           
  7913 ;; *************** function _setTouchRel *****************
  7914 ;; Defined at:
  7915 ;;		line 86 in file "adc.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;		None
  7918 ;; Auto vars:     Size  Location     Type
  7919 ;;		None
  7920 ;; Return value:  Size  Location     Type
  7921 ;;                  1    wreg      void 
  7922 ;; Registers used:
  7923 ;;		wreg, status,2
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7929 ;;      Params:         0       0       0       0       0       0       0
  7930 ;;      Locals:         0       0       0       0       0       0       0
  7931 ;;      Temps:          0       0       0       0       0       0       0
  7932 ;;      Totals:         0       0       0       0       0       0       0
  7933 ;;Total ram usage:        0 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; This function calls:
  7936 ;;		Nothing
  7937 ;; This function is called by:
  7938 ;;		_isr
  7939 ;; This function uses a non-reentrant model
  7940 ;;
  7941                           
  7942                           	psect	text50
  7943  002550                     __ptext50:
  7944                           	callstack 0
  7945  002550                     _setTouchRel:
  7946                           	callstack 0
  7947  002550  FFFF               	dw	65535	; assembler added errata NOP
  7948  002552                     
  7949                           ;adc.c: 87:     touch_rel = 1;
  7950  002552  0E01               	movlw	1
  7951  002554  6E65               	movwf	_touch_rel^0,c	;volatile
  7952  002556  0012               	return		;funcret
  7953  002558  FFFF               	dw	65535	; errata NOP
  7954  00255A                     __end_of_setTouchRel:
  7955                           	callstack 0
  7956                           
  7957 ;; *************** function _setThermRel *****************
  7958 ;; Defined at:
  7959 ;;		line 79 in file "adc.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;		None
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;		None
  7964 ;; Return value:  Size  Location     Type
  7965 ;;                  1    wreg      void 
  7966 ;; Registers used:
  7967 ;;		wreg, status,2
  7968 ;; Tracked objects:
  7969 ;;		On entry : 0/0
  7970 ;;		On exit  : 0/0
  7971 ;;		Unchanged: 0/0
  7972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7973 ;;      Params:         0       0       0       0       0       0       0
  7974 ;;      Locals:         0       0       0       0       0       0       0
  7975 ;;      Temps:          0       0       0       0       0       0       0
  7976 ;;      Totals:         0       0       0       0       0       0       0
  7977 ;;Total ram usage:        0 bytes
  7978 ;; Hardware stack levels used:    1
  7979 ;; This function calls:
  7980 ;;		Nothing
  7981 ;; This function is called by:
  7982 ;;		_isr
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           	psect	text51
  7987  00255A                     __ptext51:
  7988                           	callstack 0
  7989  00255A                     _setThermRel:
  7990                           	callstack 0
  7991  00255A  FFFF               	dw	65535	; assembler added errata NOP
  7992  00255C                     
  7993                           ;adc.c: 80:     therm_rel = 1;
  7994  00255C  0E01               	movlw	1
  7995  00255E  6E64               	movwf	_therm_rel^0,c	;volatile
  7996  002560  0012               	return		;funcret
  7997  002562  FFFF               	dw	65535	; errata NOP
  7998  002564                     __end_of_setThermRel:
  7999                           	callstack 0
  8000                           
  8001 ;; *************** function _retPeriod *****************
  8002 ;; Defined at:
  8003 ;;		line 88 in file "pwm.c"
  8004 ;; Parameters:    Size  Location     Type
  8005 ;;		None
  8006 ;; Auto vars:     Size  Location     Type
  8007 ;;		None
  8008 ;; Return value:  Size  Location     Type
  8009 ;;                  2    0[COMRAM] unsigned int 
  8010 ;; Registers used:
  8011 ;;		None
  8012 ;; Tracked objects:
  8013 ;;		On entry : 0/0
  8014 ;;		On exit  : 0/0
  8015 ;;		Unchanged: 0/0
  8016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8017 ;;      Params:         2       0       0       0       0       0       0
  8018 ;;      Locals:         0       0       0       0       0       0       0
  8019 ;;      Temps:          0       0       0       0       0       0       0
  8020 ;;      Totals:         2       0       0       0       0       0       0
  8021 ;;Total ram usage:        2 bytes
  8022 ;; Hardware stack levels used:    1
  8023 ;; This function calls:
  8024 ;;		Nothing
  8025 ;; This function is called by:
  8026 ;;		_isr
  8027 ;; This function uses a non-reentrant model
  8028 ;;
  8029                           
  8030                           	psect	text52
  8031  0024EC                     __ptext52:
  8032                           	callstack 0
  8033  0024EC                     _retPeriod:
  8034                           	callstack 0
  8035  0024EC  FFFF               	dw	65535	; assembler added errata NOP
  8036  0024EE                     
  8037                           ;pwm.c: 89:     return pwmPeriod;
  8038  0024EE  C055  F001         	movff	_pwmPeriod,?_retPeriod
  8039  0024F2  C056  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  8040  0024F6  0012               	return		;funcret
  8041  0024F8  FFFF               	dw	65535	; errata NOP
  8042  0024FA                     __end_of_retPeriod:
  8043                           	callstack 0
  8044                           
  8045 ;; *************** function _increaseStep *****************
  8046 ;; Defined at:
  8047 ;;		line 72 in file "pwm.c"
  8048 ;; Parameters:    Size  Location     Type
  8049 ;;		None
  8050 ;; Auto vars:     Size  Location     Type
  8051 ;;		None
  8052 ;; Return value:  Size  Location     Type
  8053 ;;                  1    wreg      void 
  8054 ;; Registers used:
  8055 ;;		status,2, status,0
  8056 ;; Tracked objects:
  8057 ;;		On entry : 0/0
  8058 ;;		On exit  : 0/0
  8059 ;;		Unchanged: 0/0
  8060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8061 ;;      Params:         0       0       0       0       0       0       0
  8062 ;;      Locals:         0       0       0       0       0       0       0
  8063 ;;      Temps:          0       0       0       0       0       0       0
  8064 ;;      Totals:         0       0       0       0       0       0       0
  8065 ;;Total ram usage:        0 bytes
  8066 ;; Hardware stack levels used:    1
  8067 ;; This function calls:
  8068 ;;		Nothing
  8069 ;; This function is called by:
  8070 ;;		_isr
  8071 ;; This function uses a non-reentrant model
  8072 ;;
  8073                           
  8074                           	psect	text53
  8075  002594                     __ptext53:
  8076                           	callstack 0
  8077  002594                     _increaseStep:
  8078                           	callstack 0
  8079  002594  FFFF               	dw	65535	; assembler added errata NOP
  8080  002596                     
  8081                           ;pwm.c: 73:     pwmStep++;
  8082  002596  2A67               	incf	_pwmStep^0,f,c	;volatile
  8083  002598  0012               	return		;funcret
  8084  00259A  FFFF               	dw	65535	; errata NOP
  8085  00259C                     __end_of_increaseStep:
  8086                           	callstack 0
  8087                           
  8088                           	psect	rparam
  8089  0000                     
  8090                           	psect	temp
  8091  00006E                     btemp:
  8092                           	callstack 0
  8093  00006E                     	ds	1
  8094  0000                     int$flags	set	btemp
  8095  0000                     wtemp8	set	btemp+1
  8096  0000                     ttemp5	set	btemp+1
  8097  0000                     ttemp6	set	btemp+4
  8098  0000                     ttemp7	set	btemp+8
  8099                           
  8100                           	psect	idloc
  8101                           
  8102                           ;Config register IDLOC0 @ 0x200000
  8103                           ;	unspecified, using default values
  8104  200000                     	org	2097152
  8105  200000  FF                 	db	255
  8106                           
  8107                           ;Config register IDLOC1 @ 0x200001
  8108                           ;	unspecified, using default values
  8109  200001                     	org	2097153
  8110  200001  FF                 	db	255
  8111                           
  8112                           ;Config register IDLOC2 @ 0x200002
  8113                           ;	unspecified, using default values
  8114  200002                     	org	2097154
  8115  200002  FF                 	db	255
  8116                           
  8117                           ;Config register IDLOC3 @ 0x200003
  8118                           ;	unspecified, using default values
  8119  200003                     	org	2097155
  8120  200003  FF                 	db	255
  8121                           
  8122                           ;Config register IDLOC4 @ 0x200004
  8123                           ;	unspecified, using default values
  8124  200004                     	org	2097156
  8125  200004  FF                 	db	255
  8126                           
  8127                           ;Config register IDLOC5 @ 0x200005
  8128                           ;	unspecified, using default values
  8129  200005                     	org	2097157
  8130  200005  FF                 	db	255
  8131                           
  8132                           ;Config register IDLOC6 @ 0x200006
  8133                           ;	unspecified, using default values
  8134  200006                     	org	2097158
  8135  200006  FF                 	db	255
  8136                           
  8137                           ;Config register IDLOC7 @ 0x200007
  8138                           ;	unspecified, using default values
  8139  200007                     	org	2097159
  8140  200007  FF                 	db	255
  8141                           
  8142                           	psect	config
  8143                           
  8144                           ; Padding undefined space
  8145  300000                     	org	3145728
  8146  300000  FF                 	db	255
  8147                           
  8148                           ;Config register CONFIG1H @ 0x300001
  8149                           ;	Oscillator Selection bits
  8150                           ;	OSC = XT, XT oscillator
  8151                           ;	Oscillator System Clock Switch Enable bit
  8152                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8153  300001                     	org	3145729
  8154  300001  21                 	db	33
  8155                           
  8156                           ;Config register CONFIG2L @ 0x300002
  8157                           ;	Power-up Timer Enable bit
  8158                           ;	PWRT = OFF, PWRT disabled
  8159                           ;	Brown-out Reset Enable bit
  8160                           ;	BOR = OFF, Brown-out Reset disabled
  8161                           ;	Brown-out Reset Voltage bits
  8162                           ;	BORV = 20, VBOR set to 2.0V
  8163  300002                     	org	3145730
  8164  300002  0D                 	db	13
  8165                           
  8166                           ;Config register CONFIG2H @ 0x300003
  8167                           ;	Watchdog Timer Enable bit
  8168                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8169                           ;	Watchdog Timer Postscale Select bits
  8170                           ;	WDTPS = 128, 1:128
  8171  300003                     	org	3145731
  8172  300003  0E                 	db	14
  8173                           
  8174                           ; Padding undefined space
  8175  300004                     	org	3145732
  8176  300004  FF                 	db	255
  8177                           
  8178                           ;Config register CONFIG3H @ 0x300005
  8179                           ;	CCP2 Mux bit
  8180                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8181  300005                     	org	3145733
  8182  300005  00                 	db	0
  8183                           
  8184                           ;Config register CONFIG4L @ 0x300006
  8185                           ;	Stack Full/Underflow Reset Enable bit
  8186                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8187                           ;	Low Voltage ICSP Enable bit
  8188                           ;	LVP = OFF, Low Voltage ICSP disabled
  8189                           ;	Background Debugger Enable bit
  8190                           ;	DEBUG = 0x1, unprogrammed default
  8191  300006                     	org	3145734
  8192  300006  80                 	db	128
  8193                           
  8194                           ; Padding undefined space
  8195  300007                     	org	3145735
  8196  300007  FF                 	db	255
  8197                           
  8198                           ;Config register CONFIG5L @ 0x300008
  8199                           ;	Code Protection bit
  8200                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8201                           ;	Code Protection bit
  8202                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8203                           ;	Code Protection bit
  8204                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8205                           ;	Code Protection bit
  8206                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8207  300008                     	org	3145736
  8208  300008  0F                 	db	15
  8209                           
  8210                           ;Config register CONFIG5H @ 0x300009
  8211                           ;	Boot Block Code Protection bit
  8212                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8213                           ;	Data EEPROM Code Protection bit
  8214                           ;	CPD = OFF, Data EEPROM not code protected
  8215  300009                     	org	3145737
  8216  300009  C0                 	db	192
  8217                           
  8218                           ;Config register CONFIG6L @ 0x30000A
  8219                           ;	Write Protection bit
  8220                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8221                           ;	Write Protection bit
  8222                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8223                           ;	Write Protection bit
  8224                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8225                           ;	Write Protection bit
  8226                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8227  30000A                     	org	3145738
  8228  30000A  0F                 	db	15
  8229                           
  8230                           ;Config register CONFIG6H @ 0x30000B
  8231                           ;	Configuration Register Write Protection bit
  8232                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8233                           ;	Boot Block Write Protection bit
  8234                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8235                           ;	Data EEPROM Write Protection bit
  8236                           ;	WRTD = OFF, Data EEPROM not write protected
  8237  30000B                     	org	3145739
  8238  30000B  E0                 	db	224
  8239                           
  8240                           ;Config register CONFIG7L @ 0x30000C
  8241                           ;	Table Read Protection bit
  8242                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8243                           ;	Table Read Protection bit
  8244                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8245                           ;	Table Read Protection bit
  8246                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8247                           ;	Table Read Protection bit
  8248                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8249  30000C                     	org	3145740
  8250  30000C  0F                 	db	15
  8251                           
  8252                           ;Config register CONFIG7H @ 0x30000D
  8253                           ;	Boot Block Table Read Protection bit
  8254                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8255  30000D                     	org	3145741
  8256  30000D  40                 	db	64
  8257                           tosu	equ	0xFFF
  8258                           tosh	equ	0xFFE
  8259                           tosl	equ	0xFFD
  8260                           stkptr	equ	0xFFC
  8261                           pclatu	equ	0xFFB
  8262                           pclath	equ	0xFFA
  8263                           pcl	equ	0xFF9
  8264                           tblptru	equ	0xFF8
  8265                           tblptrh	equ	0xFF7
  8266                           tblptrl	equ	0xFF6
  8267                           tablat	equ	0xFF5
  8268                           prodh	equ	0xFF4
  8269                           prodl	equ	0xFF3
  8270                           indf0	equ	0xFEF
  8271                           postinc0	equ	0xFEE
  8272                           postdec0	equ	0xFED
  8273                           preinc0	equ	0xFEC
  8274                           plusw0	equ	0xFEB
  8275                           fsr0h	equ	0xFEA
  8276                           fsr0l	equ	0xFE9
  8277                           wreg	equ	0xFE8
  8278                           indf1	equ	0xFE7
  8279                           postinc1	equ	0xFE6
  8280                           postdec1	equ	0xFE5
  8281                           preinc1	equ	0xFE4
  8282                           plusw1	equ	0xFE3
  8283                           fsr1h	equ	0xFE2
  8284                           fsr1l	equ	0xFE1
  8285                           bsr	equ	0xFE0
  8286                           indf2	equ	0xFDF
  8287                           postinc2	equ	0xFDE
  8288                           postdec2	equ	0xFDD
  8289                           preinc2	equ	0xFDC
  8290                           plusw2	equ	0xFDB
  8291                           fsr2h	equ	0xFDA
  8292                           fsr2l	equ	0xFD9
  8293                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    14
    Data        310
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     68     109
    BANK0           128      8     127
    BANK1           256      8     222
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK0[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_executeData
    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_enableMotor
    _resetPosition->_setDecay
    _resetPosition->_setDirection
    _resetPosition->_setStep
    _touchTherm->_setDirection
    _touchObject->_setDirection
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_setDirection
    _liftArm->_setDirection

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_executeData

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   17387
                                              3 BANK1      5     5      0
                           _clearTM0
                        _enableMotor
                        _executeData
                         _fatalError
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0    2807
                                             21 COMRAM     3     3      0
                        _enableMotor
                          _resetStep
                           _setDecay
                       _setDirection
                            _setStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _setStep                                              4     3      1     487
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _setDecay                                             4     3      1     394
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _enableMotor                                          4     3      1     664
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0   10197
                                             66 COMRAM     2     2      0
                                              0 BANK1      3     3      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0    1058
                          _resetStep
                         _resetTherm
                        _returnTherm
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0    1058
                          _resetStep
                         _resetTouch
                        _returnTouch
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            8     8      0    3163
                                              0 BANK0      8     8      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    3508
                                             21 COMRAM    14     6      8
                          _resetStep
                       _setDirection
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0    1058
                          _resetStep
                       _setDirection
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _setDirection                                         4     3      1    1024
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0     552
                                             10 COMRAM     7     7      0
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _enableMotor
   _executeData
     _getData
     _liftArm
       _resetStep
       _setDirection
       _stepMade
     _moveToPoint
       _resetStep
       _setDirection
       _stepCounter
       _stepMade
     _pickObject
       _stepMade
     _releaseObj
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _stepMade
     _touchObject
       _resetStep
       _resetTouch
       _returnTouch
       _setDirection
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _setDirection
       _startADC
       _stepMade
       _stopADC
   _fatalError
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetPosition
     _enableMotor
     _resetStep
     _setDecay
     _setDirection
     _setStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      8      DE       7       86.7%
BITBANK0            80      0       0       4        0.0%
BANK0               80      8      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     44      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CA      15        0.0%
DATA                 0      0     1CA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sun Mar 28 10:24:32 2021

                                                  ___fldiv@aexp 0038  
                                                  ___fldiv@bexp 0037  
                                         __end_of_interruptInit 23B8  
                                                  ___fldiv@sign 0030  
                                                            l74 2432  
                                                            l83 1F8E  
                                                            l68 24DA  
                                                            l92 21AC  
                                                           l101 2220  
                                                           l110 2138  
                                                           l200 2016  
                                                           l120 1282  
                                                           l121 12B2  
                                                           l210 2040  
                                                           l202 1FDA  
                                                           l203 2028  
                                                           l131 1306  
                                                           l115 124E  
                                                           l124 12B6  
                                                           l116 1362  
                                                           l141 0CFE  
                                                           l221 1DBC  
                                                           l125 12E6  
                                                           l117 127E  
                                                           l206 1FFA  
                                                           l151 0B98  
                                                           l223 1DE4  
                                                           l135 137A  
                                                           l320 140A  
                                                           l321 140C  
                                                           l162 0C80  
                                                           l234 23DA  
                                                           l402 250E  
                                                           l330 2394  
                                                           l314 13C8  
                                                           l155 0BEA  
                                                           l235 23E0  
                                                           l411 2524  
                                                           l331 23AA  
                                                           l315 13C2  
                                                           l228 2406  
                                                           l332 23B4  
                                                           l316 13C4  
                                                           l149 0CE6  
                                                           l229 240C  
                                                           l405 2502  
                                                           l166 0CA0  
                                                           l158 0C36  
                                                           l182 1D04  
                                                           l174 1C64  
                                                           l183 1D08  
                                                           l408 2538  
                                                           l192 1B92  
                                                           l344 0F8E  
                                                           l360 248A  
                                                           l513 2476  
                                                           l178 1C84  
                                                           l530 2568  
                                                           l363 249E  
                                                           l196 1C12  
                                                           l188 1B72  
                                                           l197 1C16  
                                                           l533 2570  
                                                           l357 24B0  
                                                           l366 251A  
                                                           l527 1A06  
                                                           l536 2580  
                                                           l369 2542  
                                                           l393 2458  
                                                           l539 2578  
                                                           l547 2282  
                                                           l571 1652  
                                                           l396 252E  
                                                           l574 24CC  
                                                           l582 22FA  
                                                           l399 2588  
                                                           l568 15DC  
                                                           l577 24BE  
                                                           l586 232C  
                                                           l886 18EA  
                                                           _isr 0008  
                                                   _touchObject 1C1A  
                                                           prod 000FF3  
                                                           wreg 000FE8  
                                                  ___fltol@exp1 0042  
                                                   main@errCode 01DB  
                                                          l1171 0A3C  
                                                          l1251 109E  
                                                          l1244 0FF2  
                                                          l1173 0854  
                                                          l1182 08AA  
                                                          l1247 1184  
                                                          l1184 093A  
                                                          l1176 080E  
                                                          l4000 121A  
                                                          l1185 0922  
                                                          l1258 110A  
                                                          l4010 1262  
                                                          l4002 121E  
                                                          l4020 12DC  
                                                          l4012 1274  
                                                          l4004 1224  
                                                          l4100 1564  
                                                          l4030 1350  
                                                          l4022 12EA  
                                                          l4014 1296  
                                                          l4006 123C  
                                                          l4110 1606  
                                                          l4102 157C  
                                                          l4040 2380  
                                                          l4032 1368  
                                                          l4024 130C  
                                                          l4016 12A8  
                                                          l4008 1242  
                                                          l4112 1610  
                                                          l4104 1584  
                                                          l3410 253E  
                                                          l3402 2490  
                                                          l4130 0D06  
                                                          l4050 2446  
                                                          l4042 2392  
                                                          l4034 1374  
                                                          l4018 12CA  
                                                          l4026 1326  
                                                          l4202 222C  
                                                          l4106 15D6  
                                                          l4210 137E  
                                                          l3404 2494  
                                                          l3412 2514  
                                                          l3500 07C8  
                                                          l3420 2534  
                                                          l4140 0D74  
                                                          l4132 0D12  
                                                          l4052 2448  
                                                          l4044 23A8  
                                                          l4036 1378  
                                                          l4028 133C  
                                                          l4204 226C  
                                                          l4108 15FE  
                                                          l4116 161C  
                                                          l4060 245E  
                                                          l4220 1394  
                                                          l4212 1384  
                                                          l3406 2498  
                                                          l3510 081A  
                                                          l3502 07D0  
                                                          l3414 252A  
                                                          l3422 24FC  
                                                          l4150 0E1C  
                                                          l4142 0DAE  
                                                          l4134 0D16  
                                                          l4054 244A  
                                                          l4046 2438  
                                                          l4126 256E  
                                                          l4206 226E  
                                                          l3430 230E  
                                                          l4070 247E  
                                                          l4062 2472  
                                                          l4230 13E6  
                                                          l4222 13A0  
                                                          l4214 1388  
                                                          l3520 0884  
                                                          l3512 083E  
                                                          l3504 07E6  
                                                          l3440 0632  
                                                          l3416 2508  
                                                          l3424 2520  
                                                          l4152 0E30  
                                                          l4144 0DBE  
                                                          l4136 0D50  
                                                          l4056 2454  
                                                          l4048 2440  
                                                          l3432 2314  
                                                          l4064 24A4  
                                                          l4072 2482  
                                                          l4240 1448  
                                                          l4232 1404  
                                                          l4224 13A8  
                                                          l4216 138C  
                                                          l4208 137E  
                                                          l3530 08D0  
                                                          l3522 088A  
                                                          l3514 0840  
                                                          l3506 07FA  
                                                          l3442 0648  
                                                          l3450 0678  
                                                          l3434 0612  
                                                          l3610 18C8  
                                                          l3418 2586  
                                                          l4170 0F16  
                                                          l4154 0E52  
                                                          l4146 0DD2  
                                                          l4138 0D60  
                                                          l4162 0E6A  
                                                          l4074 257E  
                                                          l4082 24B6  
                                                          l4058 2456  
                                                          l3426 22E4  
                                                          l4090 1510  
                                                          l4066 24AC  
                                                          l4250 147A  
                                                          l4242 1458  
                                                          l4234 1410  
                                                          l4226 13BC  
                                                          l4218 1390  
                                                          l3540 0950  
                                                          l3532 08D4  
                                                          l3524 0896  
                                                          l3516 0850  
                                                          l3508 080C  
                                                          l3460 06AC  
                                                          l3452 068A  
                                                          l3444 065C  
                                                          l3436 061E  
                                                          l3612 18D8  
                                                          l3604 1890  
                                                          l3620 0FBC  
                                                          l4180 0F7A  
                                                          l4172 0F28  
                                                          l4500 0E88  
                                                          l4156 0E56  
                                                          l4148 0E0C  
                                                          l4164 0EB0  
                                                          l3700 20F2  
                                                          l3428 22EC  
                                                          l4092 151A  
                                                          l4068 247C  
                                                          l4260 14DC  
                                                          l4252 148E  
                                                          l4244 145A  
                                                          l4236 142A  
                                                          l4228 13CC  
                                                          l4502 2200  
                                                          l3390 21CA  
                                                          l3710 0A44  
                                                          l3550 09BC  
                                                          l3542 095C  
                                                          l3534 08E6  
                                                          l3526 08A8  
                                                          l3518 086A  
                                                          l3462 06C2  
                                                          l3470 06F2  
                                                          l3454 0692  
                                                          l3446 066C  
                                                          l3438 0630  
                                                          l3606 189E  
                                                          l3630 103E  
                                                          l3622 1004  
                                                          l4182 0F7E  
                                                          l4174 0F38  
                                                          l4166 0EC6  
                                                          l4158 0E5E  
                                                          l4078 2576  
                                                          l4094 1524  
                                                          l4086 14FA  
                                                          l4262 14E2  
                                                          l4254 14B8  
                                                          l4246 1460  
                                                          l4238 1436  
                                                          l3392 21DA  
                                                          l3720 0AA2  
                                                          l3712 0A5E  
                                                          l3560 0A26  
                                                          l3552 09D2  
                                                          l3544 096E  
                                                          l3536 0918  
                                                          l3528 08BC  
                                                          l3480 073E  
                                                          l3472 0704  
                                                          l3464 06D6  
                                                          l3456 0698  
                                                          l3448 0670  
                                                          l3608 18B2  
                                                          l3640 10D6  
                                                          l3632 104C  
                                                          l3624 1020  
                                                          l3616 0F96  
                                                          l3800 1C28  
                                                          l4184 0F82  
                                                          l4176 0F6A  
                                                          l4168 0EDA  
                                                          l3704 2102  
                                                          l4088 150A  
                                                          l4264 14E6  
                                                          l4248 1466  
                                                          l4256 14BA  
                                                          l3386 21B6  
                                                          l3730 0AE8  
                                                          l3722 0AAC  
                                                          l3714 0A76  
                                                          l3562 0A2C  
                                                          l3554 09F2  
                                                          l3546 0998  
                                                          l3474 0720  
                                                          l3466 06E6  
                                                          l3458 06AA  
                                                          l3650 1126  
                                                          l3642 10E4  
                                                          l3634 1084  
                                                          l3618 0FAA  
                                                          l3810 1C56  
                                                          l3802 1C30  
                                                          l4178 0F72  
                                                          l4186 0F8A  
                                                          l4194 2566  
                                                          l4098 152E  
                                                          l4266 14EA  
                                                          l4258 14D4  
                                                          l3388 21BA  
                                                          l3396 21EA  
                                                          l3900 202E  
                                                          l3740 0B10  
                                                          l3732 0AF2  
                                                          l3724 0AB4  
                                                          l3564 0A30  
                                                          l3556 0A0E  
                                                          l3548 099C  
                                                          l3492 077C  
                                                          l3476 0730  
                                                          l3484 0752  
                                                          l3468 06EA  
                                                          l3580 181C  
                                                          l3572 17BC  
                                                          l3652 114A  
                                                          l3644 10F8  
                                                          l3636 1088  
                                                          l3628 1034  
                                                          l3820 1CBC  
                                                          l3812 1C58  
                                                          l3804 1C34  
                                                          l4196 2228  
                                                          l3902 203A  
                                                          l3750 0B28  
                                                          l3742 0B14  
                                                          l3734 0AFA  
                                                          l3726 0AC0  
                                                          l3718 0A7E  
                                                          l3558 0A14  
                                                          l3494 0798  
                                                          l3486 0768  
                                                          l3478 0738  
                                                          l3582 181E  
                                                          l3574 17D6  
                                                          l3654 115E  
                                                          l3646 111E  
                                                          l3638 1094  
                                                          l3910 1D64  
                                                          l3830 1CE6  
                                                          l3814 1C68  
                                                          l3822 1CCC  
                                                          l3806 1C36  
                                                          l3662 1EC2  
                                                          l3904 203E  
                                                          l3760 0B8E  
                                                          l3752 0B40  
                                                          l3744 0B16  
                                                          l3736 0B06  
                                                          l3728 0AC4  
                                                          l3496 07A8  
                                                          l3488 0768  
                                                          l3584 182E  
                                                          l3656 1170  
                                                          l3648 1120  
                                                          l3920 1DBE  
                                                          l3912 1D72  
                                                          l3832 1CEA  
                                                          l3824 1CD2  
                                                          l3816 1C86  
                                                          l3808 1C3E  
                                                          l3840 1B34  
                                                          l3680 2146  
                                                          l3664 1EC6  
                                                          l3672 1F58  
                                                          l3770 0C04  
                                                          l3762 0BA0  
                                                          l3754 0B44  
                                                          l3746 0B1E  
                                                          l3738 0B0A  
                                                          l3930 2408  
                                                          l3498 07B8  
                                                          l3594 1860  
                                                          l3586 1832  
                                                          l3578 17EC  
                                                          l3658 1172  
                                                          l3922 1DC2  
                                                          l3914 1D78  
                                                          l3834 1CFC  
                                                          l3826 1CD6  
                                                          l3818 1CA0  
                                                          l3850 1B4C  
                                                          l3842 1B36  
                                                          l3682 2156  
                                                          l3666 1EF4  
                                                          l4490 1632  
                                                          l3780 0C84  
                                                          l3772 0C2C  
                                                          l3764 0BB6  
                                                          l3756 0B50  
                                                          l3748 0B22  
                                                          l3932 23BA  
                                                          l3596 186C  
                                                          l3588 1844  
                                                          l3916 1D9E  
                                                          l3924 1DC8  
                                                          l3908 1D12  
                                                          l3828 1CD8  
                                                          l3852 1B64  
                                                          l3860 1BAE  
                                                          l3844 1B3E  
                                                          l3684 2166  
                                                          l3668 1F28  
                                                          l4492 19BE  
                                                          l3940 18F8  
                                                          l3790 0CF8  
                                                          l3782 0CA4  
                                                          l3774 0C3E  
                                                          l3758 0B66  
                                                          l3926 23E6  
                                                          l3934 23BE  
                                                          l3598 1876  
                                                          l3918 1DA0  
                                                          l3870 1BE6  
                                                          l3862 1BCA  
                                                          l3854 1B66  
                                                          l3846 1B42  
                                                          l3838 1B2A  
                                                          l3678 2142  
                                                          l3694 20CE  
                                                          l4494 1F6E  
                                                          l3950 1966  
                                                          l3942 190E  
                                                          l3880 1F96  
                                                          l3792 0CFC  
                                                          l3776 0C54  
                                                          l3768 0BEE  
                                                          l3784 0CBE  
                                                          l3928 23EA  
                                                          l3936 23DC  
                                                          l3872 1BF4  
                                                          l3856 1B76  
                                                          l3864 1BDA  
                                                          l3848 1B44  
                                                          l3688 2176  
                                                          l4496 2118  
                                                          l3696 20D2  
                                                          l3952 197C  
                                                          l3944 1924  
                                                          l4488 1544  
                                                          l3890 1FB4  
                                                          l3882 1FA0  
                                                          l3786 0CD4  
                                                          l3874 1BF8  
                                                          l3866 1BE0  
                                                          l3858 1B94  
                                                          l3970 2412  
                                                          l4498 218C  
                                                          l3698 20E2  
                                                          l3954 1992  
                                                          l3946 193A  
                                                          l3938 18F4  
                                                          l3964 24C4  
                                                          l3892 1FCC  
                                                          l3884 1FA2  
                                                          l3788 0CEC  
                                                          l3796 1C1C  
                                                          l3876 1C0A  
                                                          l3868 1BE4  
                                                          l3980 242A  
                                                          l3972 241A  
                                                          l3948 1950  
                                                          l3894 1FCE  
                                                          l3886 1FAA  
                                                          l3798 1C26  
                                                          l3982 242C  
                                                          l3974 241E  
                                                          l3990 1204  
                                                          l3958 19A8  
                                                          l3968 24D2  
                                                          l3896 1FDE  
                                                          l3888 1FAE  
                                                          l3984 242E  
                                                          l3976 2422  
                                                          l3992 1208  
                                                          l3898 1FFC  
                                                          l3986 2430  
                                                          l3978 2426  
                                                          l3994 120C  
                                                          l3996 1210  
                                                          l3988 118C  
                                                          ?_isr 0001  
                                                          l3998 1212  
                                                          u3000 0AA0  
                                                          u3001 0A9A  
                                                          u3010 0AE6  
                                                          u3011 0AE0  
                                                          u3100 0C7A  
                                                          u3020 0B3E  
                                                          u3101 0C74  
                                                          u3021 0B38  
                                                          u3110 0C9E  
                                                          u3030 0B64  
                                                          u3111 0C98  
                                                          u3031 0B5E  
                                                          u3120 0CBE  
                                                          u3040 0B8C  
                                                          u3200 1CFA  
                                                          _LATD 000F8C  
                                                          u3121 0CB8  
                                                          u3041 0B86  
                                                          u3201 1CF4  
                                                          u3130 0CD2  
                                                          u3050 0BB4  
                                                          u3210 1B62  
                                                          u3131 0CCC  
                                                          u3051 0BAE  
                                                          u3211 1B5C  
                                                          u3300 2028  
                                                          u3140 0CE6  
                                                          u3060 0BE4  
                                                          u3220 1B90  
                                                          u2500 230C  
                                                          u3301 2022  
                                                          u3141 0CE0  
                                                          u3061 0BDE  
                                                          u3221 1B8A  
                                                          u2501 2306  
                                                          u3070 0C02  
                                                          u3310 1DBA  
                                                          u3150 1C54  
                                                          u3230 1BAE  
                                                          u2510 232A  
                                                          u3071 0BFC  
                                                          u3311 1DB4  
                                                          u3151 1C4E  
                                                          u3231 1BA8  
                                                          u2511 2324  
                                                          u3080 0C2A  
                                                          u2600 07E4  
                                                          u2520 062E  
                                                          u3320 1DE2  
                                                          u3160 1C82  
                                                          u3240 1BC8  
                                                          u3400 12C8  
                                                          u3081 0C24  
                                                          u2601 07DE  
                                                          u2521 0628  
                                                          u3321 1DDC  
                                                          u3161 1C7C  
                                                          u3241 1BC2  
                                                          u3401 12C2  
                                                          u3090 0C52  
                                                          u3330 2404  
                                                          u2610 080A  
                                                          u2530 0646  
                                                          u3170 1CA0  
                                                          u3250 1BDA  
                                                          u3410 12DC  
                                                          u3091 0C4C  
                                                          u3331 23FE  
                                                          u2611 0804  
                                                          u2531 0640  
                                                          u3171 1C9A  
                                                          u3251 1BD4  
                                                          u3411 12D6  
                                                          u3340 23D8  
                                                          u2700 094E  
                                                          u2620 083C  
                                                          u2540 065A  
                                                          u3180 1CBA  
                                                          u3260 1C08  
                                                          u3500 0EC4  
                                                          u3420 1304  
                                                          u3341 23D2  
                                                          u2701 0948  
                                                          u2621 0836  
                                                          u2541 0654  
                                                          u3181 1CB4  
                                                          u3261 1C02  
                                                          u3501 0EBE  
                                                          u3421 12FE  
                                                          u3270 1FCA  
                                                          u2710 096C  
                                                          u2630 0868  
                                                          u2550 06A8  
                                                          u3190 1CCC  
                                                          u3510 0F68  
                                                          u3430 1326  
                                                          u3350 123A  
                                                          u3271 1FC4  
                                                          u2711 0966  
                                                          u2631 0862  
                                                          u2551 06A2  
                                                          u3191 1CC6  
                                                          u3511 0F62  
                                                          u3431 1320  
                                                          u3351 1234  
                                                          u3280 1FF8  
                                                          u2720 09BA  
                                                          u2640 0882  
                                                          u2560 06C0  
                                                          u2800 18B2  
                                                          u3440 133A  
                                                          u3360 1260  
                                                          u3520 2280  
                                                          u3281 1FF2  
                                                          u2721 09B4  
                                                          u2641 087C  
                                                          u2561 06BA  
                                                          u2801 18AC  
                                                          u3441 1334  
                                                          u3361 125A  
                                                          u3521 227A  
                                                          u3290 2016  
                                                          u2730 09F0  
                                                          u2650 08A6  
                                                          u2570 06D4  
                                                          u2810 18C6  
                                                          u3450 134E  
                                                          u3370 1274  
                                                          u3530 13BA  
                                                          u2475 21C4  
                                                          u3291 2010  
                                                          u2731 09EA  
                                                          u2651 08A0  
                                                          u2571 06CE  
                                                          u2811 18C0  
                                                          u3451 1348  
                                                          u3371 126E  
                                                          u3531 13B4  
                                                          u2476 21C6  
                                                          u2740 0A24  
                                                          u2660 08CE  
                                                          u2580 071E  
                                                          u2900 115C  
                                                          u2820 0FA8  
                                                          u3460 1362  
                                                          u3380 1294  
                                                          u3540 13E4  
                                                          u2485 21D4  
                                                          u2741 0A1E  
                                                          u2661 08C8  
                                                          u2581 0718  
                                                          u2901 1156  
                                                          u2821 0FA2  
                                                          u3461 135C  
                                                          u3381 128E  
                                                          u3541 13DE  
                                                          u2486 21D6  
                                                          u2670 08E4  
                                                          u2590 0766  
                                                          u2750 17D4  
                                                          u2910 116E  
                                                          u2830 0FBA  
                                                          u3470 2390  
                                                          u3390 12A8  
                                                          u3550 1428  
                                                          u2495 21E4  
                                                          u2671 08DE  
                                                          u2591 0760  
                                                          u2751 17CE  
                                                          u2911 1168  
                                                          u2831 0FB4  
                                                          u3471 238A  
                                                          u3391 12A2  
                                                          u3551 1422  
                                                          u2496 21E6  
                                                          u2680 0916  
                                                          u2760 1810  
                                                          u2840 101E  
                                                          u3480 23A6  
                                                          u3560 14D2  
                                                          u2681 0910  
                                                          u2841 1018  
                                                          u3481 23A0  
                                                          u3561 14CC  
                                                          u2690 0934  
                                                          u2770 1842  
                                                          u2850 107E  
                                                          u3490 157A  
                                                          u2691 092E  
                                                          u2771 183C  
                                                          u2851 1078  
                                                          u3491 1574  
                                                          u2780 185A  
                                                          u2860 10D0  
                                                          u2781 1854  
                                                          u2765 1804  
                                                          u2861 10CA  
                                                          u2925 2150  
                                                          u2790 188A  
                                                          u2870 10F6  
                                                          u2926 2152  
                                                          u2791 1884  
                                                          u2871 10F0  
                                                          u2935 2160  
                                                          u2880 110A  
                                                          u2936 2162  
                                                          u2881 1104  
                                                          u2945 2170  
                                                          u2890 111C  
                                                          u2946 2172  
                                                   main@newData 01DC  
                                                          u2891 1116  
                                                          u2955 20DC  
                                                          u2980 0A5C  
                                                          u2956 20DE  
                                                          u2981 0A56  
                                                          u2965 20EC  
                                                          u2990 0A76  
                                                          u2966 20EE  
                                                          u2991 0A70  
                                                          u2975 20FC  
                                                          u2976 20FE  
                                                          i2l71 2590  
                                                          i2l65 24E8  
                                                          _TMR0 000FD6  
                                                          _TMR2 000FCC  
                                           __end_ofi2_storeData 17BA  
                                                          _main 137E  
                                                          _maxX 006B  
                                                          _maxY 0069  
                                          __end_ofi2_printError 1B28  
                                                          fsr2h 000FDA  
                                                          indf2 000FDF  
                                                          fsr1l 000FE1  
                                                          fsr2l 000FD9  
                                                          btemp 006E  
                                                          prodh 000FF4  
                                                          prodl 000FF3  
                                                          start 016A  
                                               ___fldiv@new_exp 0031  
                                                  ___param_bank 000000  
                                               ??_whatsTM0Limit 0001  
                                                         ??_isr 000B  
                                                  ?_executeData 0001  
                                               executeData@data 01D7  
                                                 ___fltol@sign1 0041  
                                                         ?_main 0001  
                                               __end_of___fldiv 0A42  
                                               __end_of___fltol 18F0  
                                                         i2l414 2560  
                                                         i2l417 2556  
                                                         i2l372 2598  
                                                         i2l375 254C  
                                                         i2l527 1B22  
                                                         i2l472 0152  
                                                         i2l378 24F6  
                                                         i2l571 17B4  
                                                         i2l582 2348  
                                                         i2l568 173E  
                                                         i2l586 237A  
                                          rotateObj@rotSequence 0080  
                                                         _SPBRG 000FAF  
                                                         _TRISA 000F92  
                                                         _TRISB 000F93  
                                                         _TRISC 000F94  
                                                         _TRISD 000F95  
                                                         _TXREG 000FAD  
                                               __end_of_getData 24D0  
                                               i2storeData@data 000A  
                                               __end_of_initADC 245C  
                                                  ?_newSequence 0001  
                                               __end_of_liftArm 2044  
                                               __end_of_readSeq 2574  
                                                  stepMade@temp 0014  
                                               __end_of_setStep 1F94  
                                                         tablat 000FF5  
                                                i2uartTx@length 0003  
                                               __end_of_stopADC 258C  
                                                         ttemp5 006F  
                                                         ttemp6 0072  
                                                         ttemp7 0076  
                                                         status 000FD8  
                                                         wtemp8 006F  
                                              __end_ofi2_uartTx 237E  
                                                 ?_increaseStep 0001  
                                               __initialization 2044  
                                        __size_of_initPinMotors 0026  
                                                  __end_of_main 14F6  
                                      resetPosition@keepMovingX 0016  
                                      resetPosition@keepMovingY 0017  
                                      resetPosition@keepMovingZ 0018  
                                                        ??_main 01D9  
                                                 __activetblptr 000002  
                                                   i2_storeData 1658  
                                          __size_of_enableMotor 0074  
                                                   isr@tm0Count 0063  
                                                  ?_setThermRel 0001  
                                                        _ADRESH 000FC4  
                                                        _ADRESL 000FC3  
                                                  ?_moveToPoint 0016  
                                                        i2l2130 255C  
                                                        i2l2124 2596  
                                                        i2l2132 2552  
                                                        i2l2126 2548  
                                                        i2l3210 1738  
                                                        i2l3202 1690  
                                                        i2l3212 1760  
                                                        i2l3220 177E  
                                                        i2l3204 16C6  
                                                        i2l3300 0050  
                                                        i2l3214 1768  
                                                        i2l3206 16DE  
                                                        i2l3310 0072  
                                                        i2l3302 0054  
                                                        i2l3216 1772  
                                                        i2l3208 16E6  
                                                        i2l3320 00BC  
                                                        i2l3312 0090  
                                                        i2l3304 0058  
                                                        i2l2610 233A  
                                                        i2l3330 0108  
                                                        i2l3322 00C0  
                                                        i2l3314 0092  
                                                        i2l3306 006C  
                                                        i2l2612 235C  
                                                        i2l3340 014C  
                                                        i2l3332 0114  
                                                        i2l3316 00A6  
                                                        i2l3308 006E  
                                                        i2l3324 00C6  
                                                        i2l2614 2362  
                                                        i2l3190 165C  
                                                        i2l3334 012E  
                                                        i2l3326 00DA  
                                                        i2l3318 00B8  
                                                        i2l2608 2332  
                                                        i2l3192 166C  
                                                        i2l3328 00E2  
                                                        i2l3336 0132  
                                                        i2l3194 1672  
                                                        i2l3338 0146  
                                                        i2l3290 001C  
                                                        i2l3188 24EE  
                                                        i2l3196 167C  
                                                        i2l3292 002E  
                                                        i2l3198 1686  
                                                        i2l3294 0030  
                                                        i2l4504 16A6  
                                                        i2l3296 0032  
                                                        i2l1882 258E  
                                                        i2l2930 1A56  
                                                        i2l2922 1A10  
                                                        i2l4506 1794  
                                                        i2l3298 004E  
                                                        i2l4508 1ADA  
                                                        i2l2932 1A6C  
                                                        i2l2924 1A14  
                                                        i2l1878 24E0  
                                                        i2l2934 1A82  
                                                        i2l2926 1A2A  
                                                        i2l2942 1AC4  
                                                        i2l2936 1A98  
                                                        i2l2928 1A40  
                                                        i2l2938 1AAE  
                                                        _RCREG1 000FAE  
                                                  ?_setTouchRel 0001  
                                                 setDecay@decay 0015  
                                              __end_of___xxtofl 118A  
                                                 setDecay@motor 0012  
                                              __end_of_clearTM0 24DE  
                                              _errString_PointZ 0100  
                                                ??_increaseStep 0001  
                                                     ??___fldiv 0028  
                                                     ??___fltol 003D  
                                              __end_of_tim0Init 24B4  
                                              __end_of_tim2Init 248E  
                                                        clear_0 20AA  
                                                        clear_1 20B6  
                                                     ??_getData 0014  
                                                        _uartTx 22E2  
                                              __end_of_setDecay 213E  
                                                     ??_initADC 0012  
                                                     ??_liftArm 0016  
                                                     ??_readSeq 0012  
                                                  __pdataCOMRAM 0069  
                                         __end_of_resetPosition 137E  
                                                  __mediumconst 0000  
                                                     ??_setStep 0013  
                                                        tblptrh 000FF7  
                                                        tblptrl 000FF6  
                                                        tblptru 000FF8  
                                                  ?_returnTherm 0012  
                                              __end_of_startADC 2532  
                                              __end_of_stepMade 24A2  
                                                 _initPinMotors 2410  
                                                  ?_returnTouch 0012  
                                                     ??_stopADC 0012  
                                         __size_ofi2_printError 011C  
                                              __end_of_writeTM0 24EC  
                                                  ___xxtofl@arg 001C  
                                                  ___xxtofl@exp 001B  
                                                  ___xxtofl@val 0012  
                                                    __accesstop 0080  
                                       __end_of__initialization 20BC  
                                                  _dataSequence 00DB  
                                                 ___rparam_used 000001  
                                                    ___fltol@f1 0039  
                                                  ?_stepCounter 0012  
                                                   i2uartTx@ptr 0001  
                                                __pcstackCOMRAM 0001  
                                                  __newSequence 005F  
                                                  __pidataBANK0 2286  
                                                  __pidataBANK1 1DE8  
                                               isr@single_cycle 0051  
                                          __size_of_executeData 028E  
                                                 ?_setDirection 0012  
                                                  i2_printError 1A0C  
                                                  ?_touchObject 0001  
                                                _errString_ZEND 015E  
                                                _errString_Feed 00A5  
                                                ?_initPinMotors 0001  
                                                     ?i2_uartTx 0001  
                                                    __pbssBANK0 00DB  
                                          __size_of_newSequence 0008  
                                                    _feeder1Pos 060D  
                                                    _feeder2Pos 060B  
                                                    _feeder3Pos 0609  
                                       __size_of_getNewSequence 000E  
                                                    _fatalError 257C  
                                            __size_of_reduceSeq 0008  
                                            __size_of_retPeriod 000E  
                                                _touch_pressure 0607  
                                            __size_of_shiftData 0060  
                                            __size_of_resetStep 000A  
                                                       _ADC_res 0053  
                                                       ?_uartTx 0012  
                                                ??_setDirection 0013  
                                                     ?___xxtofl 0012  
                                          __end_of_increaseStep 259C  
                                                     ?_clearTM0 0001  
                                                    ??i2_uartTx 0004  
                                            __size_of_rotateObj 00DC  
                                             _errString_Command 00C3  
                                            __size_of_usartInit 001E  
                                        __size_of_interruptInit 003A  
                                          __size_of_setThermRel 000A  
                                            __size_of_storeData 0162  
                                                     ?_tim0Init 0001  
                                                     ?_tim2Init 0012  
                                          __size_of_moveToPoint 02C2  
                                          storeData@receivedMex 0045  
                                               _newSequenceData 00EF  
                                                     ?_setDecay 0012  
                                          __size_of_setTouchRel 000A  
                                                   setStep@step 0015  
                                                       __Hparam 0000  
                                                       __Lparam 0000  
                                        __end_of_touch_pressure 0609  
                                                       ___fldiv 0610  
                                                     ?_startADC 0001  
                                                     ?_stepMade 0012  
                                                       ___fltol 17BA  
                                                  __psmallconst 0600  
                                                       __pcinit 2044  
                                         __end_of_whatsTM0Limit 2594  
                                                       _getData 24C2  
                                                       __ramtop 0600  
                                                     ?_writeTM0 0001  
                                                    _pickObject 23E4  
                                                       __ptext0 137E  
                                                       __ptext1 245C  
                                                       __ptext2 247A  
                                                       __ptext3 24A2  
                                                       __ptext4 14F6  
                                                       __ptext5 18F0  
                                                       __ptext6 22E2  
                                                       __ptext7 2226  
                                                       __ptext8 118A  
                                                       __ptext9 1EBE  
                                               __size_of_uartTx 004E  
                                                     _T0CONbits 000FD5  
                                                       _initADC 2436  
                                               ??_initPinMotors 0012  
                                                       _liftArm 1F94  
                                                     _T2CONbits 000FCA  
                                                       _readSeq 256C  
                                                  __size_of_isr 0162  
                                                    ??___xxtofl 0016  
                                                  ?i2_storeData 0001  
                                                    ??_clearTM0 0012  
                                                       _setStep 1EBE  
                                                       _pwmStep 0067  
                                                       _stopADC 2584  
                                             __end_of_reduceSeq 256C  
                                             __end_of_retPeriod 24FA  
                                                    _releaseObj 23B8  
                                          __size_of_returnTherm 000C  
                                          end_of_initialization 20BC  
                                          __size_of_returnTouch 000C  
                                              rotateObj@totStep 00FB  
                                             __end_of_shiftData 2286  
                                                       isr@temp 0011  
                                             __end_of_resetStep 2546  
                                                    ??_tim0Init 0012  
                                                 __Lmediumconst 0000  
                                                    ??_tim2Init 0014  
                                              storeData@command 005D  
                                              storeData@counter 005E  
                                                    ??_setDecay 0013  
                                              enableMotor@motor 0012  
                                                    _resetTherm 251E  
                                                    _resetTouch 2532  
                                                       uartTx@i 0015  
                                                   ?_fatalError 0001  
                                                     _RCSTAbits 000FAB  
                                                       postdec1 000FE5  
                                             __end_of_rotateObj 1DE8  
                                                       postinc0 000FEE  
                                                       postinc1 000FE6  
                                                       postinc2 000FDE  
                                                    ??_startADC 0012  
                                                    ??_stepMade 0014  
                                          __size_of_stepCounter 000C  
                                                 _interruptInit 237E  
                                             __end_of_usartInit 247A  
                                             __end_of_storeData 1658  
                                    __end_ofrotateObj@stepAngle 0605  
                                                    ??_writeTM0 0001  
                                                     _PORTDbits 000F83  
                                                    _printError 18F0  
                                                     _PORTEbits 000F84  
                                                 ??_enableMotor 0013  
                                           i2printError@errCode 0007  
                                                    _toggleStep 2546  
                                                 ___xxtofl@sign 001A  
                                                     _TRISCbits 000F94  
                                                     _TRISDbits 000F95  
                                                     _TRISEbits 000F96  
                                                   ___fldiv@grs 0033  
                                                   ___fldiv@rem 002C  
                                          __size_of_touchObject 00F2  
                                                    _stepToggle 0066  
                                                    _touchTherm 1B28  
                                          __end_of_setDirection 2226  
                                                     _TXSTAbits 000FAC  
                                                _getNewSequence 24B4  
                                                ?_interruptInit 0001  
                                                 __pidataCOMRAM 259C  
                                         __size_of_increaseStep 0008  
                                                   ?_pickObject 0001  
                                                   __fatalError 0060  
                                                __end_of_uartTx 2330  
                                                 moveToPoint@x1 0016  
                                                 moveToPoint@x2 001A  
                                                 moveToPoint@y1 0018  
                                                 moveToPoint@y2 001C  
                                           start_initialization 2044  
                                                     i2uartTx@i 0004  
                                                   __end_of_isr 016A  
                                           __size_of_fatalError 0008  
                                           __end_of_enableMotor 21B2  
                                                   ?_releaseObj 0001  
                                             __size_ofi2_uartTx 004E  
                                        __end_of_getNewSequence 24C2  
                                               _errString_Fatal 01AF  
                                               _errString_Bound 0084  
                                                   ?_resetTherm 0001  
                                               _errString_Reset 0187  
                                                   ?_resetTouch 0001  
                                               _errString_Point 0135  
                                                  _increaseStep 2594  
                                        __size_of_resetPosition 01F4  
                                                 ??_executeData 0043  
                                                   __pdataBANK0 0080  
                                                   __pdataBANK1 0100  
                                                   _dataCounter 0061  
                                                      ??_uartTx 0015  
                                        moveToPoint@keepMovingX 0020  
                                        moveToPoint@keepMovingY 0021  
                                                   ?_printError 0001  
                                                     ___fldiv@a 0024  
                                                     ___fldiv@b 0020  
                                                _therm_pressure 0605  
                                                   ?_toggleStep 0001  
                                                   __pbssCOMRAM 0045  
                                                 __pcstackBANK0 00F7  
                                                 __pcstackBANK1 01D6  
                                                 ??_newSequence 0012  
                                             __size_of___xxtofl 01F8  
                                          __size_ofi2_storeData 0162  
                                             __size_of_clearTM0 000E  
                                               ?_getNewSequence 0012  
                                                   ?_touchTherm 0001  
                                           __size_of_pickObject 002C  
                                            executeData@errCode 01D6  
                                             __size_of_tim0Init 0012  
                                             __size_of_tim2Init 0014  
                                               ??_interruptInit 0012  
                                             __size_of_setDecay 0074  
                                                     __pintcode 0008  
                                                      ?___fldiv 0020  
                                                      ?___fltol 0039  
                                           __size_of_releaseObj 002C  
                                                 storeData@data 001B  
                                                      ?_getData 0012  
                                             __size_of_startADC 000A  
                                             __size_of_stepMade 0014  
                                        __end_of_therm_pressure 0607  
                                                      ?_initADC 0001  
                                                   __smallconst 0600  
                                                      ?_liftArm 0001  
                                                   _enableMotor 213E  
                                                      ?_readSeq 0001  
                                             __size_of_writeTM0 000E  
                                           __end_of_executeData 0F92  
                                                    shiftData@i 0014  
                                                      ?_setStep 0012  
                                           __size_of_resetTherm 000A  
                                                     _newFeeder 0057  
                                                 _resetPosition 118A  
                                           __size_of_resetTouch 000A  
                                                 ??_setThermRel 0001  
                                                      ?_stopADC 0001  
                                         __size_of_setDirection 0074  
                                                 ??_moveToPoint 001E  
                                                 ??_setTouchRel 0001  
                                           __end_of_newSequence 257C  
                                                     _reduceSeq 2564  
                                                      _LATAbits 000F89  
                                                      _LATBbits 000F8A  
                                                     _retPeriod 24EC  
                                                      _LATCbits 000F8B  
                                                      _LATDbits 000F8C  
                                           __size_of_printError 011C  
                                                      _IPR1bits 000F9F  
                                                      _PIE1bits 000F9D  
                                                     _shiftData 2226  
                                                      i2u232_40 16DC  
                                                      i2u240_40 008E  
                                                      i2u232_41 16D6  
                                                      i2u240_41 0088  
                                                      i2u241_40 00A4  
                                                      i2u241_41 009E  
                                                      i2u170_40 2378  
                                                      i2u242_40 00B6  
                                                      i2u170_41 2372  
                                                      i2u242_41 00B0  
                                                      i2u243_40 00D8  
                                                      i2u243_41 00D2  
                                                      i2u244_40 0106  
                                                      i2u244_41 0100  
                                                     _resetStep 253C  
                                                      i2u245_40 012C  
                                                      i2u237_40 002C  
                                                      i2u245_41 0126  
                                                      i2u237_41 0026  
                                                      i2u246_40 0144  
                                                      i2u238_40 004C  
                                                      i2u246_41 013E  
                                                      i2u238_41 0046  
                                                      i2u239_40 006A  
                                                      i2u239_41 0064  
                                                      i2u169_40 235A  
                                                      i2u169_41 2354  
                                                      _PIR1bits 000F9E  
                                           __size_of_toggleStep 000A  
                                                  ??_fatalError 0012  
                                                     _posVector 004E  
                                                      _RCONbits 000FD0  
                                                     _therm_rel 0064  
                                                     _pwmPeriod 0055  
                                             setDirection@motor 0012  
                                                     _rotateObj 1D0C  
                                                    _ADCON0bits 000FC2  
                                                    _ADCON1bits 000FC1  
                                           __size_of_touchTherm 00F2  
                                                  _setDirection 21B2  
                                                     _usartInit 245C  
                                                     _touch_rel 0065  
                                            __end_of_feeder1Pos 060F  
                                            __end_of_feeder2Pos 060D  
                                            __end_of_feeder3Pos 060B  
                                                     _storeData 14F6  
                                                ?_resetPosition 0001  
                                         __end_of_initPinMotors 2436  
                                                 ??_returnTherm 0014  
                                                 ??_returnTouch 0014  
                                                      i2_uartTx 2330  
                                                     copy_data0 2058  
                                                     copy_data1 2078  
                                                     copy_data2 2098  
                                            __end_of_fatalError 2584  
                                            rotateObj@stepAngle 0601  
                                                    ?_reduceSeq 0001  
                                                    ?_retPeriod 0001  
                                                  setStep@motor 0012  
                                                    rotateObj@i 00FD  
                                        __size_of_whatsTM0Limit 0008  
                                           __end_of_setThermRel 2564  
                                           __end_of_moveToPoint 0D04  
                                             printError@errCode 0018  
                                                    ?_shiftData 0001  
                                                 ??_stepCounter 0014  
                                                      __Hrparam 0000  
                                                    ?_resetStep 0001  
                                           __end_of_setTouchRel 255A  
                                                      __Lrparam 0000  
                                              __size_of___fldiv 0432  
                                              __size_of___fltol 0136  
                                                   _executeData 0D04  
                                                  ??_pickObject 0015  
                                                    ?_rotateObj 0001  
                                      moveToPoint@MOT1Direction 0022  
                                                 ?i2_printError 0001  
                                              __size_of_getData 000E  
                                      moveToPoint@MOT2Direction 0023  
                                                 ??_touchObject 0016  
                                                    ?_usartInit 0001  
                                              __size_of_initADC 0026  
                                                      ___xxtofl 0F92  
                                              __size_of_liftArm 00B0  
                                                    ?_storeData 0001  
                                                      _clearTM0 24D0  
                                              __size_of_readSeq 0008  
                                            storeData@mexLength 006D  
                                                      _tm0Error 005B  
                                                      _tm0Limit 0068  
                                              __size_of_setStep 00D6  
                                                   _newSequence 2574  
                                                      __ptext10 20CA  
                                                      __ptext11 213E  
                                                      __ptext20 0D04  
                                                      __ptext12 2564  
                                                      __ptext21 1B28  
                                                      __ptext13 256C  
                                                      __ptext30 0F92  
                                                      __ptext22 24FA  
                                                      __ptext14 2574  
                                                      __ptext31 17BA  
                                                      __ptext23 251E  
                                                      __ptext15 237E  
                                                      __ptext40 253C  
                                                      __ptext32 0610  
                                                      __ptext24 1C1A  
                                                      __ptext16 2410  
                                                      __ptext41 24C2  
                                                      __ptext33 23B8  
                                                      __ptext25 2584  
                                                      __ptext17 2436  
                                                      __ptext50 2550  
                                                      __ptext42 24D0  
                                                      __ptext34 23E4  
                                                      __ptext26 2528  
                                                      __ptext18 24B4  
                                                      __ptext51 255A  
                                                      __ptext35 0A42  
                                                      __ptext27 2506  
                                                      __ptext19 257C  
                                                      __ptext52 24EC  
                                                      __ptext44 1658  
                                                      __ptext36 2512  
                                                      __ptext28 2532  
                                                      __ptext53 2594  
                                                      __ptext45 1A0C  
                                                      __ptext37 1F94  
                                                      __ptext29 1D0C  
                                                      __ptext46 2330  
                                                      __ptext38 248E  
                                                      __ptext47 24DE  
                                                      __ptext39 21B2  
                                                      __ptext48 258C  
                                                      __ptext49 2546  
                                                  ??_releaseObj 0015  
                                              __size_of_stopADC 0008  
                                           __end_of_returnTherm 2506  
                                           __end_of_returnTouch 2512  
                                                      _tim0Init 24A2  
                                                      _tim2Init 247A  
                                                 __size_of_main 0178  
                                                      _setDecay 20CA  
                                            __end_of_pickObject 2410  
                                                  ??_resetTherm 0012  
                                                  ??_resetTouch 0012  
                                                     uartTx@ptr 0012  
                                                      _rotAngle 0059  
                                               isr@completeStep 0062  
                                                      int$flags 006E  
                                                      _startADC 2528  
                                                      _stepMade 248E  
                                           __end_of_stepCounter 251E  
                                             rotateObj@rotAngle 00FA  
                                                ??i2_printError 0005  
                                            __end_of_releaseObj 23E4  
                                                      _writeTM0 24DE  
                                                  ??_printError 0016  
                                                 _whatsTM0Limit 258C  
                                               ??_resetPosition 0016  
                                            tim2Init@_pwmPeriod 0012  
                                                    _INTCONbits 000FF2  
                                                  ??_toggleStep 0001  
                                              ??_getNewSequence 0014  
                                            __end_of_resetTherm 2528  
                                            __end_of_resetTouch 253C  
                                                   _setThermRel 255A  
                                                  uartTx@length 0014  
                                                   _moveToPoint 0A42  
                                           __end_of_touchObject 1D0C  
                                                      intlevel2 25A2  
                                             enableMotor@enable 0015  
                                                  ??_touchTherm 0016  
                                                   _setTouchRel 2550  
                                                   ??_reduceSeq 0012  
                                                   ??_retPeriod 0003  
                                                    _RCSTA1bits 000FAB  
                                            __end_of_printError 1A0C  
                                         setDirection@direction 0015  
                                                   ??_shiftData 0012  
                                                   ??_resetStep 0012  
                                            __end_of_toggleStep 2550  
                                                ?_whatsTM0Limit 0001  
                                                   ??_rotateObj 00F7  
                                            __end_of_touchTherm 1C1A  
                                                  ?_enableMotor 0012  
                                                   ??_usartInit 0012  
                                                 ??i2_storeData 0008  
                                                   ??_storeData 0019  
                                                   _returnTherm 24FA  
                                                   _returnTouch 2506  
                                                   _stepCounter 2512  
