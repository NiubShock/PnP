

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Fri Jan 15 11:26:01 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    71                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    72                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    73  0000                     
    74                           ; Version 2.20
    75                           ; Generated 12/02/2020 GMT
    76                           ; 
    77                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18F452 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     
   109                           	psect	idataCOMRAM
   110  002132                     __pidataCOMRAM:
   111                           	callstack 0
   112                           
   113                           ;initializer for rotateObj@rotSequence
   114  002132  09                 	db	9
   115  002133  03                 	db	3
   116  002134  06                 	db	6
   117  002135  0C                 	db	12
   118                           
   119                           ;initializer for _maxY
   120  002136  03E8               	dw	1000
   121                           
   122                           ;initializer for _maxX
   123  002138  03E8               	dw	1000
   124                           
   125                           	psect	idataBANK0
   126  001ECC                     __pidataBANK0:
   127                           	callstack 0
   128                           
   129                           ;initializer for _errString_Bound
   130  001ECC  45                 	db	69
   131  001ECD  72                 	db	114
   132  001ECE  72                 	db	114
   133  001ECF  6F                 	db	111
   134  001ED0  72                 	db	114
   135  001ED1  2C                 	db	44
   136  001ED2  20                 	db	32
   137  001ED3  70                 	db	112
   138  001ED4  6F                 	db	111
   139  001ED5  69                 	db	105
   140  001ED6  6E                 	db	110
   141  001ED7  74                 	db	116
   142  001ED8  20                 	db	32
   143  001ED9  6F                 	db	111
   144  001EDA  75                 	db	117
   145  001EDB  74                 	db	116
   146  001EDC  73                 	db	115
   147  001EDD  69                 	db	105
   148  001EDE  64                 	db	100
   149  001EDF  65                 	db	101
   150  001EE0  20                 	db	32
   151  001EE1  62                 	db	98
   152  001EE2  6F                 	db	111
   153  001EE3  75                 	db	117
   154  001EE4  6E                 	db	110
   155  001EE5  64                 	db	100
   156  001EE6  61                 	db	97
   157  001EE7  72                 	db	114
   158  001EE8  69                 	db	105
   159  001EE9  65                 	db	101
   160  001EEA  73                 	db	115
   161  001EEB  00                 	db	0
   162                           
   163                           ;initializer for _errString_Feed
   164  001EEC  45                 	db	69
   165  001EED  72                 	db	114
   166  001EEE  72                 	db	114
   167  001EEF  6F                 	db	111
   168  001EF0  72                 	db	114
   169  001EF1  2C                 	db	44
   170  001EF2  20                 	db	32
   171  001EF3  66                 	db	102
   172  001EF4  65                 	db	101
   173  001EF5  65                 	db	101
   174  001EF6  64                 	db	100
   175  001EF7  20                 	db	32
   176  001EF8  6C                 	db	108
   177  001EF9  69                 	db	105
   178  001EFA  6E                 	db	110
   179  001EFB  65                 	db	101
   180  001EFC  20                 	db	32
   181  001EFD  6E                 	db	110
   182  001EFE  6F                 	db	111
   183  001EFF  74                 	db	116
   184  001F00  20                 	db	32
   185  001F01  64                 	db	100
   186  001F02  65                 	db	101
   187  001F03  66                 	db	102
   188  001F04  69                 	db	105
   189  001F05  6E                 	db	110
   190  001F06  65                 	db	101
   191  001F07  64                 	db	100
   192  001F08  00                 	db	0
   193                           
   194                           ;initializer for _errString_Command
   195  001F09  43                 	db	67
   196  001F0A  6F                 	db	111
   197  001F0B  6D                 	db	109
   198  001F0C  6D                 	db	109
   199  001F0D  61                 	db	97
   200  001F0E  6E                 	db	110
   201  001F0F  64                 	db	100
   202  001F10  20                 	db	32
   203  001F11  6E                 	db	110
   204  001F12  6F                 	db	111
   205  001F13  74                 	db	116
   206  001F14  20                 	db	32
   207  001F15  72                 	db	114
   208  001F16  65                 	db	101
   209  001F17  63                 	db	99
   210  001F18  6F                 	db	111
   211  001F19  67                 	db	103
   212  001F1A  6E                 	db	110
   213  001F1B  69                 	db	105
   214  001F1C  7A                 	db	122
   215  001F1D  65                 	db	101
   216  001F1E  64                 	db	100
   217  001F1F  00                 	db	0
   218                           
   219                           	psect	idataBANK1
   220  0019A8                     __pidataBANK1:
   221                           	callstack 0
   222                           
   223                           ;initializer for _errString_PointZ
   224  0019A8  45                 	db	69
   225  0019A9  72                 	db	114
   226  0019AA  72                 	db	114
   227  0019AB  6F                 	db	111
   228  0019AC  72                 	db	114
   229  0019AD  2C                 	db	44
   230  0019AE  20                 	db	32
   231  0019AF  74                 	db	116
   232  0019B0  69                 	db	105
   233  0019B1  6D                 	db	109
   234  0019B2  65                 	db	101
   235  0019B3  20                 	db	32
   236  0019B4  65                 	db	101
   237  0019B5  78                 	db	120
   238  0019B6  63                 	db	99
   239  0019B7  65                 	db	101
   240  0019B8  65                 	db	101
   241  0019B9  64                 	db	100
   242  0019BA  65                 	db	101
   243  0019BB  64                 	db	100
   244  0019BC  20                 	db	32
   245  0019BD  74                 	db	116
   246  0019BE  6F                 	db	111
   247  0019BF  20                 	db	32
   248  0019C0  72                 	db	114
   249  0019C1  65                 	db	101
   250  0019C2  61                 	db	97
   251  0019C3  63                 	db	99
   252  0019C4  68                 	db	104
   253  0019C5  20                 	db	32
   254  0019C6  74                 	db	116
   255  0019C7  68                 	db	104
   256  0019C8  65                 	db	101
   257  0019C9  20                 	db	32
   258  0019CA  65                 	db	101
   259  0019CB  6E                 	db	110
   260  0019CC  64                 	db	100
   261  0019CD  20                 	db	32
   262  0019CE  6F                 	db	111
   263  0019CF  66                 	db	102
   264  0019D0  20                 	db	32
   265  0019D1  74                 	db	116
   266  0019D2  68                 	db	104
   267  0019D3  65                 	db	101
   268  0019D4  20                 	db	32
   269  0019D5  5A                 	db	90
   270  0019D6  20                 	db	32
   271  0019D7  41                 	db	65
   272  0019D8  78                 	db	120
   273  0019D9  69                 	db	105
   274  0019DA  73                 	db	115
   275  0019DB  00                 	db	0
   276                           
   277                           ;initializer for _errString_Point
   278  0019DC  45                 	db	69
   279  0019DD  72                 	db	114
   280  0019DE  72                 	db	114
   281  0019DF  6F                 	db	111
   282  0019E0  72                 	db	114
   283  0019E1  2C                 	db	44
   284  0019E2  20                 	db	32
   285  0019E3  74                 	db	116
   286  0019E4  69                 	db	105
   287  0019E5  6D                 	db	109
   288  0019E6  65                 	db	101
   289  0019E7  20                 	db	32
   290  0019E8  65                 	db	101
   291  0019E9  78                 	db	120
   292  0019EA  63                 	db	99
   293  0019EB  65                 	db	101
   294  0019EC  65                 	db	101
   295  0019ED  64                 	db	100
   296  0019EE  65                 	db	101
   297  0019EF  64                 	db	100
   298  0019F0  20                 	db	32
   299  0019F1  74                 	db	116
   300  0019F2  6F                 	db	111
   301  0019F3  20                 	db	32
   302  0019F4  72                 	db	114
   303  0019F5  65                 	db	101
   304  0019F6  61                 	db	97
   305  0019F7  63                 	db	99
   306  0019F8  68                 	db	104
   307  0019F9  20                 	db	32
   308  0019FA  74                 	db	116
   309  0019FB  68                 	db	104
   310  0019FC  65                 	db	101
   311  0019FD  20                 	db	32
   312  0019FE  70                 	db	112
   313  0019FF  6F                 	db	111
   314  001A00  69                 	db	105
   315  001A01  6E                 	db	110
   316  001A02  74                 	db	116
   317  001A03  00                 	db	0
   318                           
   319                           ;initializer for _errString_ZEND
   320  001A04  45                 	db	69
   321  001A05  72                 	db	114
   322  001A06  72                 	db	114
   323  001A07  6F                 	db	111
   324  001A08  72                 	db	114
   325  001A09  2C                 	db	44
   326  001A0A  20                 	db	32
   327  001A0B  6E                 	db	110
   328  001A0C  6F                 	db	111
   329  001A0D  20                 	db	32
   330  001A0E  6F                 	db	111
   331  001A0F  62                 	db	98
   332  001A10  6A                 	db	106
   333  001A11  65                 	db	101
   334  001A12  63                 	db	99
   335  001A13  74                 	db	116
   336  001A14  20                 	db	32
   337  001A15  72                 	db	114
   338  001A16  65                 	db	101
   339  001A17  6C                 	db	108
   340  001A18  65                 	db	101
   341  001A19  76                 	db	118
   342  001A1A  61                 	db	97
   343  001A1B  74                 	db	116
   344  001A1C  65                 	db	101
   345  001A1D  64                 	db	100
   346  001A1E  20                 	db	32
   347  001A1F  61                 	db	97
   348  001A20  6C                 	db	108
   349  001A21  6F                 	db	111
   350  001A22  6E                 	db	110
   351  001A23  67                 	db	103
   352  001A24  20                 	db	32
   353  001A25  5A                 	db	90
   354  001A26  20                 	db	32
   355  001A27  41                 	db	65
   356  001A28  78                 	db	120
   357  001A29  69                 	db	105
   358  001A2A  73                 	db	115
   359  001A2B  00                 	db	0
   360                           
   361                           ;initializer for _errString_Reset
   362  001A2C  45                 	db	69
   363  001A2D  72                 	db	114
   364  001A2E  72                 	db	114
   365  001A2F  6F                 	db	111
   366  001A30  72                 	db	114
   367  001A31  2C                 	db	44
   368  001A32  20                 	db	32
   369  001A33  74                 	db	116
   370  001A34  69                 	db	105
   371  001A35  6D                 	db	109
   372  001A36  65                 	db	101
   373  001A37  20                 	db	32
   374  001A38  65                 	db	101
   375  001A39  78                 	db	120
   376  001A3A  63                 	db	99
   377  001A3B  65                 	db	101
   378  001A3C  65                 	db	101
   379  001A3D  64                 	db	100
   380  001A3E  65                 	db	101
   381  001A3F  64                 	db	100
   382  001A40  20                 	db	32
   383  001A41  74                 	db	116
   384  001A42  6F                 	db	111
   385  001A43  20                 	db	32
   386  001A44  72                 	db	114
   387  001A45  65                 	db	101
   388  001A46  73                 	db	115
   389  001A47  65                 	db	101
   390  001A48  74                 	db	116
   391  001A49  20                 	db	32
   392  001A4A  70                 	db	112
   393  001A4B  6F                 	db	111
   394  001A4C  73                 	db	115
   395  001A4D  69                 	db	105
   396  001A4E  74                 	db	116
   397  001A4F  69                 	db	105
   398  001A50  6F                 	db	111
   399  001A51  6E                 	db	110
   400  001A52  00                 	db	0
   401                           
   402                           ;initializer for _errString_Fatal
   403  001A53  46                 	db	70
   404  001A54  61                 	db	97
   405  001A55  74                 	db	116
   406  001A56  61                 	db	97
   407  001A57  6C                 	db	108
   408  001A58  20                 	db	32
   409  001A59  45                 	db	69
   410  001A5A  72                 	db	114
   411  001A5B  72                 	db	114
   412  001A5C  6F                 	db	111
   413  001A5D  72                 	db	114
   414  001A5E  2C                 	db	44
   415  001A5F  20                 	db	32
   416  001A60  70                 	db	112
   417  001A61  6C                 	db	108
   418  001A62  65                 	db	101
   419  001A63  61                 	db	97
   420  001A64  73                 	db	115
   421  001A65  65                 	db	101
   422  001A66  20                 	db	32
   423  001A67  72                 	db	114
   424  001A68  65                 	db	101
   425  001A69  73                 	db	115
   426  001A6A  65                 	db	101
   427  001A6B  74                 	db	116
   428  001A6C  20                 	db	32
   429  001A6D  74                 	db	116
   430  001A6E  68                 	db	104
   431  001A6F  65                 	db	101
   432  001A70  20                 	db	32
   433  001A71  64                 	db	100
   434  001A72  65                 	db	101
   435  001A73  76                 	db	118
   436  001A74  69                 	db	105
   437  001A75  63                 	db	99
   438  001A76  65                 	db	101
   439  001A77  21                 	db	33
   440  001A78  00                 	db	0
   441                           
   442                           	psect	smallconst
   443  000600                     __psmallconst:
   444                           	callstack 0
   445  000600  00                 	db	0
   446  000601                     storeData@F2373:
   447                           	callstack 0
   448  000601  FF                 	db	255
   449  000602  FF                 	db	255
   450  000603  FF                 	db	255
   451  000604  FF                 	db	255
   452  000605                     __end_ofstoreData@F2373:
   453                           	callstack 0
   454  000605  FFAC               	dw	65452
   455  000607  3DB3               	dw	15795
   456  000609                     __end_ofrotateObj@stepAngle:
   457                           	callstack 0
   458  000609  0400               	dw	1024
   459  00060B                     __end_of_therm_pressure:
   460                           	callstack 0
   461  00060B  0200               	dw	512
   462  00060D                     __end_of_touch_pressure:
   463                           	callstack 0
   464  00060D                     _feeder3Pos:
   465                           	callstack 0
   466  00060D  19                 	db	25
   467  00060E  19                 	db	25
   468  00060F                     __end_of_feeder3Pos:
   469                           	callstack 0
   470  00060F                     _feeder2Pos:
   471                           	callstack 0
   472  00060F  0F                 	db	15
   473  000610  0F                 	db	15
   474  000611                     __end_of_feeder2Pos:
   475                           	callstack 0
   476  000611                     _feeder1Pos:
   477                           	callstack 0
   478  000611  05                 	db	5
   479  000612  05                 	db	5
   480  000613                     __end_of_feeder1Pos:
   481                           	callstack 0
   482  000613  05                 	db	5
   483  000614                     __end_of_mexLength:
   484                           	callstack 0
   485  0000                     _TMR0	set	4054
   486  0000                     _TXREG	set	4013
   487  0000                     _SPBRG	set	4015
   488  0000                     _RCSTAbits	set	4011
   489  0000                     _TXSTAbits	set	4012
   490  0000                     _TRISCbits	set	3988
   491  0000                     _RCREG1	set	4014
   492  0000                     _ADRESH	set	4036
   493  0000                     _ADRESL	set	4035
   494  0000                     _PIR1bits	set	3998
   495  0000                     _IPR1bits	set	3999
   496  0000                     _ADCON0bits	set	4034
   497  0000                     _PIE1bits	set	3997
   498  0000                     _RCONbits	set	4048
   499  0000                     _INTCONbits	set	4082
   500  0000                     _RCSTA1bits	set	4011
   501  0000                     _LATD	set	3980
   502  0000                     _PORTDbits	set	3971
   503  0000                     _TMR2	set	4044
   504  0000                     _PORTEbits	set	3972
   505  0000                     _T0CONbits	set	4053
   506  0000                     _T2CONbits	set	4042
   507  0000                     _LATDbits	set	3980
   508  0000                     _LATCbits	set	3979
   509  0000                     _LATBbits	set	3978
   510  0000                     _LATAbits	set	3977
   511  0000                     _TRISDbits	set	3989
   512  0000                     _TRISEbits	set	3990
   513  0000                     _TRISD	set	3989
   514  0000                     _TRISC	set	3988
   515  0000                     _TRISB	set	3987
   516  0000                     _TRISA	set	3986
   517  0000                     _ADCON1bits	set	4033
   518  000614  00                 	db	0	; dummy byte at the end
   519  0000                     
   520                           ; #config settings
   521                           
   522                           	psect	cinit
   523  001C8A                     __pcinit:
   524                           	callstack 0
   525  001C8A                     start_initialization:
   526                           	callstack 0
   527  001C8A                     __initialization:
   528                           	callstack 0
   529                           
   530                           ; Initialize objects allocated to BANK1 (209 bytes)
   531                           ; load TBLPTR registers with __pidataBANK1
   532  001C8A  0EA8               	movlw	low __pidataBANK1
   533  001C8C  6EF6               	movwf	tblptrl,c
   534  001C8E  0E19               	movlw	high __pidataBANK1
   535  001C90  6EF7               	movwf	tblptrh,c
   536  001C92  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   537  001C94  6EF8               	movwf	tblptru,c
   538  001C96  EE01  F000         	lfsr	0,__pdataBANK1
   539  001C9A  EE10 F0D1          	lfsr	1,209
   540  001C9E                     copy_data0:
   541  001C9E  0009               	tblrd		*+
   542  001CA0  CFF5 FFEE          	movff	tablat,postinc0
   543  001CA4  50E5               	movf	postdec1,w,c
   544  001CA6  50E1               	movf	fsr1l,w,c
   545  001CA8  E1FA               	bnz	copy_data0
   546                           
   547                           ; Initialize objects allocated to BANK0 (84 bytes)
   548                           ; load TBLPTR registers with __pidataBANK0
   549  001CAA  0ECC               	movlw	low __pidataBANK0
   550  001CAC  6EF6               	movwf	tblptrl,c
   551  001CAE  0E1E               	movlw	high __pidataBANK0
   552  001CB0  6EF7               	movwf	tblptrh,c
   553  001CB2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   554  001CB4  6EF8               	movwf	tblptru,c
   555  001CB6  EE00  F080         	lfsr	0,__pdataBANK0
   556  001CBA  EE10 F054          	lfsr	1,84
   557  001CBE                     copy_data1:
   558  001CBE  0009               	tblrd		*+
   559  001CC0  CFF5 FFEE          	movff	tablat,postinc0
   560  001CC4  50E5               	movf	postdec1,w,c
   561  001CC6  50E1               	movf	fsr1l,w,c
   562  001CC8  E1FA               	bnz	copy_data1
   563                           
   564                           ; Initialize objects allocated to COMRAM (8 bytes)
   565                           ; load TBLPTR registers with __pidataCOMRAM
   566  001CCA  0E32               	movlw	low __pidataCOMRAM
   567  001CCC  6EF6               	movwf	tblptrl,c
   568  001CCE  0E21               	movlw	high __pidataCOMRAM
   569  001CD0  6EF7               	movwf	tblptrh,c
   570  001CD2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   571  001CD4  6EF8               	movwf	tblptru,c
   572  001CD6  EE00  F05E         	lfsr	0,__pdataCOMRAM
   573  001CDA  EE10 F008          	lfsr	1,8
   574  001CDE                     copy_data2:
   575  001CDE  0009               	tblrd		*+
   576  001CE0  CFF5 FFEE          	movff	tablat,postinc0
   577  001CE4  50E5               	movf	postdec1,w,c
   578  001CE6  50E1               	movf	fsr1l,w,c
   579  001CE8  E1FA               	bnz	copy_data2
   580                           
   581                           ; Clear objects allocated to BANK0 (20 bytes)
   582  001CEA  EE00  F0EA         	lfsr	0,__pbssBANK0
   583  001CEE  0E14               	movlw	20
   584  001CF0                     clear_0:
   585  001CF0  6AEE               	clrf	postinc0,c
   586  001CF2  06E8               	decf	wreg,f,c
   587  001CF4  E1FD               	bnz	clear_0
   588                           
   589                           ; Clear objects allocated to COMRAM (28 bytes)
   590  001CF6  EE00  F042         	lfsr	0,__pbssCOMRAM
   591  001CFA  0E1C               	movlw	28
   592  001CFC                     clear_1:
   593  001CFC  6AEE               	clrf	postinc0,c
   594  001CFE  06E8               	decf	wreg,f,c
   595  001D00  E1FD               	bnz	clear_1
   596  001D02                     end_of_initialization:
   597                           	callstack 0
   598  001D02                     __end_of__initialization:
   599                           	callstack 0
   600  001D02  9066               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   601  001D04  9266               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   602  001D06  0E00               	movlw	low (__Lmediumconst shr (0+16))
   603  001D08  6EF8               	movwf	tblptru,c
   604  001D0A  0100               	movlb	0
   605  001D0C  EFF2  F00D         	goto	_main	;jump to C main() function
   606                           
   607                           	psect	bssCOMRAM
   608  000042                     __pbssCOMRAM:
   609                           	callstack 0
   610  000042                     storeData@receivedMex:
   611                           	callstack 0
   612  000042                     	ds	5
   613  000047                     _posVector:
   614                           	callstack 0
   615  000047                     	ds	3
   616  00004A                     isr@single_cycle:
   617                           	callstack 0
   618  00004A                     	ds	2
   619  00004C                     _ADC_res:
   620                           	callstack 0
   621  00004C                     	ds	2
   622  00004E                     _pwmPeriod:
   623                           	callstack 0
   624  00004E                     	ds	2
   625  000050                     _rotAngle:
   626                           	callstack 0
   627  000050                     	ds	2
   628  000052                     _tm0Error:
   629                           	callstack 0
   630  000052                     	ds	2
   631  000054                     storeData@counter:
   632                           	callstack 0
   633  000054                     	ds	1
   634  000055                     __fatalError:
   635                           	callstack 0
   636  000055                     	ds	1
   637  000056                     _dataCounter:
   638                           	callstack 0
   639  000056                     	ds	1
   640  000057                     isr@completeStep:
   641                           	callstack 0
   642  000057                     	ds	1
   643  000058                     isr@tm0Count:
   644                           	callstack 0
   645  000058                     	ds	1
   646  000059                     _therm_rel:
   647                           	callstack 0
   648  000059                     	ds	1
   649  00005A                     _touch_rel:
   650                           	callstack 0
   651  00005A                     	ds	1
   652  00005B                     _stepToggle:
   653                           	callstack 0
   654  00005B                     	ds	1
   655  00005C                     _pwmStep:
   656                           	callstack 0
   657  00005C                     	ds	1
   658  00005D                     _tm0Limit:
   659                           	callstack 0
   660  00005D                     	ds	1
   661                           
   662                           	psect	dataCOMRAM
   663  00005E                     __pdataCOMRAM:
   664                           	callstack 0
   665  00005E                     rotateObj@rotSequence:
   666                           	callstack 0
   667  00005E                     	ds	4
   668  000062                     	ds	2
   669  000064                     	ds	2
   670                           
   671                           	psect	bssBANK0
   672  0000EA                     __pbssBANK0:
   673                           	callstack 0
   674  0000EA                     _dataSequence:
   675                           	callstack 0
   676  0000EA                     	ds	20
   677                           
   678                           	psect	dataBANK0
   679  000080                     __pdataBANK0:
   680                           	callstack 0
   681  000080                     _errString_Bound:
   682                           	callstack 0
   683  000080                     	ds	32
   684  0000A0                     _errString_Feed:
   685                           	callstack 0
   686  0000A0                     	ds	29
   687  0000BD                     _errString_Command:
   688                           	callstack 0
   689  0000BD                     	ds	23
   690                           
   691                           	psect	dataBANK1
   692  000100                     __pdataBANK1:
   693                           	callstack 0
   694  000100                     _errString_PointZ:
   695                           	callstack 0
   696  000100                     	ds	52
   697  000134                     _errString_Point:
   698                           	callstack 0
   699  000134                     	ds	40
   700  00015C                     _errString_ZEND:
   701                           	callstack 0
   702  00015C                     	ds	40
   703  000184                     _errString_Reset:
   704                           	callstack 0
   705  000184                     	ds	39
   706  0001AB                     _errString_Fatal:
   707                           	callstack 0
   708  0001AB                     	ds	38
   709                           
   710                           	psect	cstackBANK0
   711  0000D4                     __pcstackBANK0:
   712                           	callstack 0
   713  0000D4                     ?___fltol:
   714                           	callstack 0
   715  0000D4                     ___fltol@f1:
   716                           	callstack 0
   717                           
   718                           ; 4 bytes @ 0x0
   719  0000D4                     	ds	4
   720  0000D8                     ??___fltol:
   721                           
   722                           ; 1 bytes @ 0x4
   723  0000D8                     	ds	4
   724  0000DC                     ___fltol@sign1:
   725                           	callstack 0
   726                           
   727                           ; 1 bytes @ 0x8
   728  0000DC                     	ds	1
   729  0000DD                     ___fltol@exp1:
   730                           	callstack 0
   731                           
   732                           ; 1 bytes @ 0x9
   733  0000DD                     	ds	1
   734  0000DE                     ??_rotateObj:
   735                           
   736                           ; 1 bytes @ 0xA
   737  0000DE                     	ds	3
   738  0000E1                     rotateObj@rotAngle:
   739                           	callstack 0
   740                           
   741                           ; 1 bytes @ 0xD
   742  0000E1                     	ds	1
   743  0000E2                     rotateObj@totStep:
   744                           	callstack 0
   745                           
   746                           ; 2 bytes @ 0xE
   747  0000E2                     	ds	2
   748  0000E4                     rotateObj@i:
   749                           	callstack 0
   750                           
   751                           ; 1 bytes @ 0x10
   752  0000E4                     	ds	1
   753  0000E5                     ??_executeData:
   754                           
   755                           ; 1 bytes @ 0x11
   756  0000E5                     	ds	2
   757  0000E7                     executeData@errCode:
   758                           	callstack 0
   759                           
   760                           ; 1 bytes @ 0x13
   761  0000E7                     	ds	1
   762  0000E8                     executeData@data:
   763                           	callstack 0
   764                           
   765                           ; 2 bytes @ 0x14
   766  0000E8                     	ds	2
   767                           
   768                           	psect	cstackCOMRAM
   769  000001                     __pcstackCOMRAM:
   770                           	callstack 0
   771  000001                     ?_retPeriod:
   772                           	callstack 0
   773  000001                     i2uartTx@ptr:
   774                           	callstack 0
   775                           
   776                           ; 2 bytes @ 0x0
   777  000001                     	ds	2
   778  000003                     i2uartTx@length:
   779                           	callstack 0
   780                           
   781                           ; 1 bytes @ 0x2
   782  000003                     	ds	1
   783  000004                     i2uartTx@i:
   784                           	callstack 0
   785                           
   786                           ; 1 bytes @ 0x3
   787  000004                     	ds	1
   788  000005                     ??i2_printError:
   789                           
   790                           ; 1 bytes @ 0x4
   791  000005                     	ds	2
   792  000007                     i2printError@errCode:
   793                           	callstack 0
   794                           
   795                           ; 1 bytes @ 0x6
   796  000007                     	ds	1
   797  000008                     ??_storeData:
   798                           
   799                           ; 1 bytes @ 0x7
   800  000008                     	ds	2
   801  00000A                     storeData@errSequence:
   802                           	callstack 0
   803                           
   804                           ; 4 bytes @ 0x9
   805  00000A                     	ds	4
   806  00000E                     storeData@data:
   807                           	callstack 0
   808                           
   809                           ; 1 bytes @ 0xD
   810  00000E                     	ds	1
   811  00000F                     ??_isr:
   812                           
   813                           ; 1 bytes @ 0xE
   814  00000F                     	ds	10
   815  000019                     isr@temp:
   816                           	callstack 0
   817                           
   818                           ; 1 bytes @ 0x18
   819  000019                     	ds	1
   820  00001A                     ??_shiftData:
   821  00001A                     ?_stepMade:
   822                           	callstack 0
   823  00001A                     ?_stepCounter:
   824                           	callstack 0
   825  00001A                     ?_returnTouch:
   826                           	callstack 0
   827  00001A                     ?_returnTherm:
   828                           	callstack 0
   829  00001A                     ?_getData:
   830                           	callstack 0
   831  00001A                     ?___xxtofl:
   832                           	callstack 0
   833  00001A                     setStep@motor:
   834                           	callstack 0
   835  00001A                     enableMotor@motor:
   836                           	callstack 0
   837  00001A                     setDirection@motor:
   838                           	callstack 0
   839  00001A                     setDecay@motor:
   840                           	callstack 0
   841  00001A                     tim2Init@_pwmPeriod:
   842                           	callstack 0
   843  00001A                     uartTx@ptr:
   844                           	callstack 0
   845  00001A                     ___xxtofl@val:
   846                           	callstack 0
   847                           
   848                           ; 4 bytes @ 0x19
   849  00001A                     	ds	1
   850  00001B                     ??_setStep:
   851  00001B                     ??_enableMotor:
   852  00001B                     ??_setDirection:
   853  00001B                     ??_setDecay:
   854                           
   855                           ; 1 bytes @ 0x1A
   856  00001B                     	ds	1
   857  00001C                     stepMade@temp:
   858                           	callstack 0
   859  00001C                     shiftData@i:
   860                           	callstack 0
   861  00001C                     uartTx@length:
   862                           	callstack 0
   863                           
   864                           ; 1 bytes @ 0x1B
   865  00001C                     	ds	1
   866  00001D                     setStep@step:
   867                           	callstack 0
   868  00001D                     enableMotor@enable:
   869                           	callstack 0
   870  00001D                     setDirection@direction:
   871                           	callstack 0
   872  00001D                     setDecay@decay:
   873                           	callstack 0
   874  00001D                     uartTx@i:
   875                           	callstack 0
   876                           
   877                           ; 1 bytes @ 0x1C
   878  00001D                     	ds	1
   879  00001E                     ??_printError:
   880  00001E                     ??___xxtofl:
   881  00001E                     resetPosition@keepMovingX:
   882                           	callstack 0
   883  00001E                     moveToPoint@x1:
   884                           	callstack 0
   885                           
   886                           ; 2 bytes @ 0x1D
   887  00001E                     	ds	1
   888  00001F                     resetPosition@keepMovingY:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x1E
   892  00001F                     	ds	1
   893  000020                     resetPosition@keepMovingZ:
   894                           	callstack 0
   895  000020                     printError@errCode:
   896                           	callstack 0
   897  000020                     moveToPoint@y1:
   898                           	callstack 0
   899                           
   900                           ; 2 bytes @ 0x1F
   901  000020                     	ds	2
   902  000022                     ___xxtofl@sign:
   903                           	callstack 0
   904  000022                     moveToPoint@x2:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x21
   908  000022                     	ds	1
   909  000023                     ___xxtofl@exp:
   910                           	callstack 0
   911                           
   912                           ; 1 bytes @ 0x22
   913  000023                     	ds	1
   914  000024                     moveToPoint@y2:
   915                           	callstack 0
   916  000024                     ___xxtofl@arg:
   917                           	callstack 0
   918                           
   919                           ; 4 bytes @ 0x23
   920  000024                     	ds	2
   921  000026                     ??_moveToPoint:
   922                           
   923                           ; 1 bytes @ 0x25
   924  000026                     	ds	2
   925  000028                     ?___fldiv:
   926                           	callstack 0
   927  000028                     moveToPoint@keepMovingX:
   928                           	callstack 0
   929  000028                     ___fldiv@b:
   930                           	callstack 0
   931                           
   932                           ; 4 bytes @ 0x27
   933  000028                     	ds	1
   934  000029                     moveToPoint@keepMovingY:
   935                           	callstack 0
   936                           
   937                           ; 1 bytes @ 0x28
   938  000029                     	ds	3
   939  00002C                     ___fldiv@a:
   940                           	callstack 0
   941                           
   942                           ; 4 bytes @ 0x2B
   943  00002C                     	ds	4
   944  000030                     ??___fldiv:
   945                           
   946                           ; 1 bytes @ 0x2F
   947  000030                     	ds	4
   948  000034                     ___fldiv@rem:
   949                           	callstack 0
   950                           
   951                           ; 4 bytes @ 0x33
   952  000034                     	ds	4
   953  000038                     ___fldiv@sign:
   954                           	callstack 0
   955                           
   956                           ; 1 bytes @ 0x37
   957  000038                     	ds	1
   958  000039                     ___fldiv@new_exp:
   959                           	callstack 0
   960                           
   961                           ; 2 bytes @ 0x38
   962  000039                     	ds	2
   963  00003B                     ___fldiv@grs:
   964                           	callstack 0
   965                           
   966                           ; 4 bytes @ 0x3A
   967  00003B                     	ds	4
   968  00003F                     ___fldiv@bexp:
   969                           	callstack 0
   970                           
   971                           ; 1 bytes @ 0x3E
   972  00003F                     	ds	1
   973  000040                     ___fldiv@aexp:
   974                           	callstack 0
   975                           
   976                           ; 1 bytes @ 0x3F
   977  000040                     	ds	1
   978  000041                     main@errCode:
   979                           	callstack 0
   980                           
   981                           ; 1 bytes @ 0x40
   982  000041                     	ds	1
   983                           
   984 ;;
   985 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   986 ;;
   987 ;; *************** function _main *****************
   988 ;; Defined at:
   989 ;;		line 24 in file "main.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;		None
   992 ;; Auto vars:     Size  Location     Type
   993 ;;  errCode         1   64[COMRAM] unsigned char 
   994 ;; Return value:  Size  Location     Type
   995 ;;                  1    wreg      void 
   996 ;; Registers used:
   997 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   998 ;; Tracked objects:
   999 ;;		On entry : 0/0
  1000 ;;		On exit  : 0/0
  1001 ;;		Unchanged: 0/0
  1002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1003 ;;      Params:         0       0       0       0       0       0       0
  1004 ;;      Locals:         1       0       0       0       0       0       0
  1005 ;;      Temps:          0       0       0       0       0       0       0
  1006 ;;      Totals:         1       0       0       0       0       0       0
  1007 ;;Total ram usage:        1 bytes
  1008 ;; Hardware stack levels required when called:    7
  1009 ;; This function calls:
  1010 ;;		_clearTM0
  1011 ;;		_enableMotor
  1012 ;;		_executeData
  1013 ;;		_fatalError
  1014 ;;		_initADC
  1015 ;;		_initPinMotors
  1016 ;;		_interruptInit
  1017 ;;		_printError
  1018 ;;		_readSeq
  1019 ;;		_reduceSeq
  1020 ;;		_resetPosition
  1021 ;;		_shiftData
  1022 ;;		_tim0Init
  1023 ;;		_tim2Init
  1024 ;;		_usartInit
  1025 ;; This function is called by:
  1026 ;;		Startup code after reset
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           	psect	text0
  1031  001BE4                     __ptext0:
  1032                           	callstack 0
  1033  001BE4                     _main:
  1034                           	callstack 24
  1035  001BE4  FFFF               	dw	65535	; assembler added errata NOP
  1036                           
  1037                           ;main.c: 28:     interruptInit();
  1038  001BE6  ECDE  F00F         	call	_interruptInit	;wreg free
  1039  001BEA                     
  1040                           ;main.c: 29:     initPinMotors();
  1041  001BEA  ECFB  F00F         	call	_initPinMotors	;wreg free
  1042  001BEE                     
  1043                           ;main.c: 30:     initADC();
  1044  001BEE  EC0E  F010         	call	_initADC	;wreg free
  1045  001BF2                     
  1046                           ;main.c: 31:     tim0Init();
  1047  001BF2  EC44  F010         	call	_tim0Init	;wreg free
  1048  001BF6                     
  1049                           ;main.c: 32:     tim2Init(10);
  1050  001BF6  0E00               	movlw	0
  1051  001BF8  6E1B               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1052  001BFA  0E0A               	movlw	10
  1053  001BFC  6E1A               	movwf	tim2Init@_pwmPeriod^0,c
  1054  001BFE  EC30  F010         	call	_tim2Init	;wreg free
  1055                           
  1056                           ;main.c: 35:     resetPosition();
  1057  001C02  EC4F  F007         	call	_resetPosition	;wreg free
  1058  001C06                     
  1059                           ;main.c: 38:     usartInit();
  1060  001C06  EC21  F010         	call	_usartInit	;wreg free
  1061  001C0A                     
  1062                           ;main.c: 39:     RCSTA1bits.CREN = 1;
  1063  001C0A  88AB               	bsf	171,4,c	;volatile
  1064  001C0C                     l3567:
  1065  001C0C  FFFF               	dw	65535	; assembler added errata NOP
  1066                           
  1067                           ;main.c: 42:         if(fatalError()){
  1068  001C0E  ECA5  F010         	call	_fatalError	;wreg free
  1069  001C12  0900               	iorlw	0
  1070  001C14  B4D8               	btfsc	status,2,c
  1071  001C16  EF0F  F00E         	goto	u3061
  1072  001C1A  EF12  F00E         	goto	u3060
  1073  001C1E                     u3061:
  1074  001C1E  FFFF               	dw	65535	; assembler added errata NOP
  1075  001C20  EF28  F00E         	goto	l3573
  1076  001C24                     u3060:
  1077  001C24  FFFF               	dw	65535	; assembler added errata NOP
  1078  001C26                     
  1079                           ;main.c: 44:             enableMotor(1, 0);
  1080  001C26  0E00               	movlw	0
  1081  001C28  6E1A               	movwf	enableMotor@motor^0,c
  1082  001C2A  0E01               	movlw	1
  1083  001C2C  ECC2  F00E         	call	_enableMotor
  1084                           
  1085                           ;main.c: 45:             enableMotor(1, 1);
  1086  001C30  0E01               	movlw	1
  1087  001C32  6E1A               	movwf	enableMotor@motor^0,c
  1088  001C34  0E01               	movlw	1
  1089  001C36  ECC2  F00E         	call	_enableMotor
  1090                           
  1091                           ;main.c: 46:             enableMotor(1, 2);
  1092  001C3A  0E02               	movlw	2
  1093  001C3C  6E1A               	movwf	enableMotor@motor^0,c
  1094  001C3E  0E01               	movlw	1
  1095  001C40  ECC2  F00E         	call	_enableMotor
  1096  001C44                     
  1097                           ;main.c: 48:             printError(7);
  1098  001C44  0E07               	movlw	7
  1099  001C46  ECD9  F009         	call	_printError
  1100  001C4A                     l287:
  1101  001C4A  FFFF               	dw	65535	; assembler added errata NOP
  1102  001C4C  EF25  F00E         	goto	l287
  1103  001C50                     l3573:
  1104  001C50  FFFF               	dw	65535	; assembler added errata NOP
  1105                           
  1106                           ;main.c: 52:         if(readSeq()){
  1107  001C52  ECA1  F010         	call	_readSeq	;wreg free
  1108  001C56  0900               	iorlw	0
  1109  001C58  B4D8               	btfsc	status,2,c
  1110  001C5A  EF31  F00E         	goto	u3071
  1111  001C5E  EF34  F00E         	goto	u3070
  1112  001C62                     u3071:
  1113  001C62  FFFF               	dw	65535	; assembler added errata NOP
  1114  001C64  EF06  F00E         	goto	l3567
  1115  001C68                     u3070:
  1116  001C68  FFFF               	dw	65535	; assembler added errata NOP
  1117  001C6A                     
  1118                           ;main.c: 54:             errCode = executeData();
  1119  001C6A  EC24  F005         	call	_executeData	;wreg free
  1120  001C6E  6E41               	movwf	main@errCode^0,c
  1121  001C70                     
  1122                           ;main.c: 55:             printError(errCode);
  1123  001C70  5041               	movf	main@errCode^0,w,c
  1124  001C72  ECD9  F009         	call	_printError
  1125  001C76                     
  1126                           ;main.c: 56:             clearTM0();
  1127  001C76  EC54  F010         	call	_clearTM0	;wreg free
  1128  001C7A                     
  1129                           ;main.c: 60:             reduceSeq();
  1130  001C7A  EC9D  F010         	call	_reduceSeq	;wreg free
  1131  001C7E                     
  1132                           ;main.c: 61:             shiftData();
  1133  001C7E  EC36  F00F         	call	_shiftData	;wreg free
  1134  001C82  EF06  F00E         	goto	l3567
  1135  001C86  EFC5  F000         	goto	start
  1136  001C8A                     __end_of_main:
  1137                           	callstack 0
  1138                           
  1139 ;; *************** function _usartInit *****************
  1140 ;; Defined at:
  1141 ;;		line 33 in file "usart.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;		None
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;		None
  1146 ;; Return value:  Size  Location     Type
  1147 ;;                  1    wreg      void 
  1148 ;; Registers used:
  1149 ;;		wreg, status,2
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1155 ;;      Params:         0       0       0       0       0       0       0
  1156 ;;      Locals:         0       0       0       0       0       0       0
  1157 ;;      Temps:          0       0       0       0       0       0       0
  1158 ;;      Totals:         0       0       0       0       0       0       0
  1159 ;;Total ram usage:        0 bytes
  1160 ;; Hardware stack levels used:    1
  1161 ;; Hardware stack levels required when called:    4
  1162 ;; This function calls:
  1163 ;;		Nothing
  1164 ;; This function is called by:
  1165 ;;		_main
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           	psect	text1
  1170  002042                     __ptext1:
  1171                           	callstack 0
  1172  002042                     _usartInit:
  1173                           	callstack 0
  1174  002042  FFFF               	dw	65535	; assembler added errata NOP
  1175  002044                     
  1176                           ;usart.c: 35:     TRISCbits.TRISC6 = 0;
  1177  002044  9C94               	bcf	148,6,c	;volatile
  1178                           
  1179                           ;usart.c: 36:     TRISCbits.TRISC7 = 1;
  1180  002046  8E94               	bsf	148,7,c	;volatile
  1181                           
  1182                           ;usart.c: 38:     TXSTAbits.TX9 = 0;
  1183  002048  9CAC               	bcf	172,6,c	;volatile
  1184                           
  1185                           ;usart.c: 39:     TXSTAbits.TXEN = 1;
  1186  00204A  8AAC               	bsf	172,5,c	;volatile
  1187                           
  1188                           ;usart.c: 40:     TXSTAbits.SYNC = 0;
  1189  00204C  98AC               	bcf	172,4,c	;volatile
  1190                           
  1191                           ;usart.c: 41:     TXSTAbits.BRGH = 0;
  1192  00204E  94AC               	bcf	172,2,c	;volatile
  1193                           
  1194                           ;usart.c: 43:     RCSTAbits.SPEN = 1;
  1195  002050  8EAB               	bsf	171,7,c	;volatile
  1196                           
  1197                           ;usart.c: 44:     RCSTAbits.RX9 = 0;
  1198  002052  9CAB               	bcf	171,6,c	;volatile
  1199                           
  1200                           ;usart.c: 45:     RCSTAbits.CREN = 0;
  1201  002054  98AB               	bcf	171,4,c	;volatile
  1202                           
  1203                           ;usart.c: 46:     RCSTAbits.ADDEN = 0;
  1204  002056  96AB               	bcf	171,3,c	;volatile
  1205  002058                     
  1206                           ;usart.c: 49:     SPBRG = 25;
  1207  002058  0E19               	movlw	25
  1208  00205A  6EAF               	movwf	175,c	;volatile
  1209  00205C  0012               	return		;funcret
  1210  00205E  FFFF               	dw	65535	; errata NOP
  1211  002060                     __end_of_usartInit:
  1212                           	callstack 0
  1213                           
  1214 ;; *************** function _tim2Init *****************
  1215 ;; Defined at:
  1216 ;;		line 34 in file "pwm.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;  _pwmPeriod      2   25[COMRAM] unsigned int 
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;		None
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      void 
  1223 ;; Registers used:
  1224 ;;		wreg, status,2
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1230 ;;      Params:         2       0       0       0       0       0       0
  1231 ;;      Locals:         0       0       0       0       0       0       0
  1232 ;;      Temps:          0       0       0       0       0       0       0
  1233 ;;      Totals:         2       0       0       0       0       0       0
  1234 ;;Total ram usage:        2 bytes
  1235 ;; Hardware stack levels used:    1
  1236 ;; Hardware stack levels required when called:    4
  1237 ;; This function calls:
  1238 ;;		Nothing
  1239 ;; This function is called by:
  1240 ;;		_main
  1241 ;; This function uses a non-reentrant model
  1242 ;;
  1243                           
  1244                           	psect	text2
  1245  002060                     __ptext2:
  1246                           	callstack 0
  1247  002060                     _tim2Init:
  1248                           	callstack 0
  1249  002060  FFFF               	dw	65535	; assembler added errata NOP
  1250  002062                     
  1251                           ;pwm.c: 35:     T2CONbits.TMR2ON = 0;
  1252  002062  94CA               	bcf	202,2,c	;volatile
  1253  002064                     
  1254                           ;pwm.c: 36:     T2CONbits.T2CKPS = 0x03;
  1255  002064  0E03               	movlw	3
  1256  002066  12CA               	iorwf	202,f,c	;volatile
  1257  002068                     
  1258                           ;pwm.c: 39:     pwmPeriod = _pwmPeriod;
  1259  002068  C01A  F04E         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1260  00206C  C01B  F04F         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1261  002070  0012               	return		;funcret
  1262  002072  FFFF               	dw	65535	; errata NOP
  1263  002074                     __end_of_tim2Init:
  1264                           	callstack 0
  1265                           
  1266 ;; *************** function _tim0Init *****************
  1267 ;; Defined at:
  1268 ;;		line 21 in file "pwm.c"
  1269 ;; Parameters:    Size  Location     Type
  1270 ;;		None
  1271 ;; Auto vars:     Size  Location     Type
  1272 ;;		None
  1273 ;; Return value:  Size  Location     Type
  1274 ;;                  1    wreg      void 
  1275 ;; Registers used:
  1276 ;;		wreg, status,2
  1277 ;; Tracked objects:
  1278 ;;		On entry : 0/0
  1279 ;;		On exit  : 0/0
  1280 ;;		Unchanged: 0/0
  1281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1282 ;;      Params:         0       0       0       0       0       0       0
  1283 ;;      Locals:         0       0       0       0       0       0       0
  1284 ;;      Temps:          0       0       0       0       0       0       0
  1285 ;;      Totals:         0       0       0       0       0       0       0
  1286 ;;Total ram usage:        0 bytes
  1287 ;; Hardware stack levels used:    1
  1288 ;; Hardware stack levels required when called:    4
  1289 ;; This function calls:
  1290 ;;		Nothing
  1291 ;; This function is called by:
  1292 ;;		_main
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           	psect	text3
  1297  002088                     __ptext3:
  1298                           	callstack 0
  1299  002088                     _tim0Init:
  1300                           	callstack 0
  1301  002088  FFFF               	dw	65535	; assembler added errata NOP
  1302  00208A                     
  1303                           ;pwm.c: 22:     T0CONbits.TMR0ON = 0;
  1304  00208A  9ED5               	bcf	213,7,c	;volatile
  1305                           
  1306                           ;pwm.c: 23:     T0CONbits.T08BIT = 0;
  1307  00208C  9CD5               	bcf	213,6,c	;volatile
  1308                           
  1309                           ;pwm.c: 24:     T0CONbits.T0CS = 0;
  1310  00208E  9AD5               	bcf	213,5,c	;volatile
  1311                           
  1312                           ;pwm.c: 25:     T0CONbits.PSA = 1;
  1313  002090  86D5               	bsf	213,3,c	;volatile
  1314  002092                     
  1315                           ;pwm.c: 26:     T0CONbits.T0PS = 0x07;
  1316  002092  0E07               	movlw	7
  1317  002094  12D5               	iorwf	213,f,c	;volatile
  1318  002096  0012               	return		;funcret
  1319  002098  FFFF               	dw	65535	; errata NOP
  1320  00209A                     __end_of_tim0Init:
  1321                           	callstack 0
  1322                           
  1323 ;; *************** function _shiftData *****************
  1324 ;; Defined at:
  1325 ;;		line 107 in file "usart.c"
  1326 ;; Parameters:    Size  Location     Type
  1327 ;;		None
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;  i               1   27[COMRAM] unsigned char 
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  1    wreg      void 
  1332 ;; Registers used:
  1333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1339 ;;      Params:         0       0       0       0       0       0       0
  1340 ;;      Locals:         1       0       0       0       0       0       0
  1341 ;;      Temps:          2       0       0       0       0       0       0
  1342 ;;      Totals:         3       0       0       0       0       0       0
  1343 ;;Total ram usage:        3 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; Hardware stack levels required when called:    4
  1346 ;; This function calls:
  1347 ;;		Nothing
  1348 ;; This function is called by:
  1349 ;;		_main
  1350 ;; This function uses a non-reentrant model
  1351 ;;
  1352                           
  1353                           	psect	text4
  1354  001E6C                     __ptext4:
  1355                           	callstack 0
  1356  001E6C                     _shiftData:
  1357                           	callstack 0
  1358  001E6C  FFFF               	dw	65535	; assembler added errata NOP
  1359  001E6E                     
  1360                           ;usart.c: 108:     char i;;usart.c: 110:     for(i = 0; i < 4; i++){
  1361  001E6E  0E00               	movlw	0
  1362  001E70  6E1C               	movwf	shiftData@i^0,c
  1363  001E72                     l2829:
  1364  001E72  FFFF               	dw	65535	; assembler added errata NOP
  1365                           
  1366                           ;usart.c: 111:         dataSequence[i] = dataSequence[i+1];
  1367  001E74  501C               	movf	shiftData@i^0,w,c
  1368  001E76  6E1A               	movwf	??_shiftData^0,c
  1369  001E78  6A1B               	clrf	(??_shiftData+1)^0,c
  1370  001E7A  90D8               	bcf	status,0,c
  1371  001E7C  361A               	rlcf	??_shiftData^0,f,c
  1372  001E7E  361B               	rlcf	(??_shiftData+1)^0,f,c
  1373  001E80  90D8               	bcf	status,0,c
  1374  001E82  361A               	rlcf	??_shiftData^0,f,c
  1375  001E84  361B               	rlcf	(??_shiftData+1)^0,f,c
  1376  001E86  0EEE               	movlw	low (_dataSequence+4)
  1377  001E88  241A               	addwf	??_shiftData^0,w,c
  1378  001E8A  6ED9               	movwf	fsr2l,c
  1379  001E8C  0E00               	movlw	high (_dataSequence+4)
  1380  001E8E  201B               	addwfc	(??_shiftData+1)^0,w,c
  1381  001E90  6EDA               	movwf	fsr2h,c
  1382  001E92  501C               	movf	shiftData@i^0,w,c
  1383  001E94  0D04               	mullw	4
  1384  001E96  0EEA               	movlw	low _dataSequence
  1385  001E98  24F3               	addwf	243,w,c
  1386  001E9A  6EE1               	movwf	fsr1l,c
  1387  001E9C  0E00               	movlw	high _dataSequence
  1388  001E9E  20F4               	addwfc	prodh,w,c
  1389  001EA0  6EE2               	movwf	fsr1h,c
  1390  001EA2  CFDE FFE6          	movff	postinc2,postinc1
  1391  001EA6  CFDE FFE6          	movff	postinc2,postinc1
  1392  001EAA  CFDE FFE6          	movff	postinc2,postinc1
  1393  001EAE  CFDE FFE6          	movff	postinc2,postinc1
  1394  001EB2                     
  1395                           ;usart.c: 112:     }
  1396  001EB2  2A1C               	incf	shiftData@i^0,f,c
  1397  001EB4  0E03               	movlw	3
  1398  001EB6  641C               	cpfsgt	shiftData@i^0,c
  1399  001EB8  EF60  F00F         	goto	u2071
  1400  001EBC  EF63  F00F         	goto	u2070
  1401  001EC0                     u2071:
  1402  001EC0  FFFF               	dw	65535	; assembler added errata NOP
  1403  001EC2  EF39  F00F         	goto	l2829
  1404  001EC6                     u2070:
  1405  001EC6  FFFF               	dw	65535	; assembler added errata NOP
  1406  001EC8  0012               	return		;funcret
  1407  001ECA  FFFF               	dw	65535	; errata NOP
  1408  001ECC                     __end_of_shiftData:
  1409                           	callstack 0
  1410                           
  1411 ;; *************** function _resetPosition *****************
  1412 ;; Defined at:
  1413 ;;		line 160 in file "motors.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;		None
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;  keepMovingZ     1   31[COMRAM] unsigned char 
  1418 ;;  keepMovingY     1   30[COMRAM] unsigned char 
  1419 ;;  keepMovingX     1   29[COMRAM] unsigned char 
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  1    wreg      unsigned char 
  1422 ;; Registers used:
  1423 ;;		wreg, status,2, status,0, cstack
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1429 ;;      Params:         0       0       0       0       0       0       0
  1430 ;;      Locals:         3       0       0       0       0       0       0
  1431 ;;      Temps:          0       0       0       0       0       0       0
  1432 ;;      Totals:         3       0       0       0       0       0       0
  1433 ;;Total ram usage:        3 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; Hardware stack levels required when called:    5
  1436 ;; This function calls:
  1437 ;;		_enableMotor
  1438 ;;		_resetStep
  1439 ;;		_setDecay
  1440 ;;		_setDirection
  1441 ;;		_setStep
  1442 ;;		_stepMade
  1443 ;; This function is called by:
  1444 ;;		_main
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text5
  1449  000E9E                     __ptext5:
  1450                           	callstack 0
  1451  000E9E                     _resetPosition:
  1452                           	callstack 0
  1453  000E9E  FFFF               	dw	65535	; assembler added errata NOP
  1454  000EA0                     
  1455                           ;motors.c: 162:     setStep(0, 0);
  1456  000EA0  0E00               	movlw	0
  1457  000EA2  6E1A               	movwf	setStep@motor^0,c
  1458  000EA4  0E00               	movlw	0
  1459  000EA6  EC69  F00C         	call	_setStep
  1460                           
  1461                           ;motors.c: 163:     setStep(1, 0);
  1462  000EAA  0E00               	movlw	0
  1463  000EAC  6E1A               	movwf	setStep@motor^0,c
  1464  000EAE  0E01               	movlw	1
  1465  000EB0  EC69  F00C         	call	_setStep
  1466                           
  1467                           ;motors.c: 164:     setStep(2, 0);
  1468  000EB4  0E00               	movlw	0
  1469  000EB6  6E1A               	movwf	setStep@motor^0,c
  1470  000EB8  0E02               	movlw	2
  1471  000EBA  EC69  F00C         	call	_setStep
  1472                           
  1473                           ;motors.c: 166:     setDirection(0, 0);
  1474  000EBE  0E00               	movlw	0
  1475  000EC0  6E1A               	movwf	setDirection@motor^0,c
  1476  000EC2  0E00               	movlw	0
  1477  000EC4  ECFC  F00E         	call	_setDirection
  1478                           
  1479                           ;motors.c: 167:     setDirection(0, 1);
  1480  000EC8  0E01               	movlw	1
  1481  000ECA  6E1A               	movwf	setDirection@motor^0,c
  1482  000ECC  0E00               	movlw	0
  1483  000ECE  ECFC  F00E         	call	_setDirection
  1484                           
  1485                           ;motors.c: 168:     setDirection(0, 2);
  1486  000ED2  0E02               	movlw	2
  1487  000ED4  6E1A               	movwf	setDirection@motor^0,c
  1488  000ED6  0E00               	movlw	0
  1489  000ED8  ECFC  F00E         	call	_setDirection
  1490                           
  1491                           ;motors.c: 170:     setDecay(1, 0);
  1492  000EDC  0E00               	movlw	0
  1493  000EDE  6E1A               	movwf	setDecay@motor^0,c
  1494  000EE0  0E01               	movlw	1
  1495  000EE2  EC88  F00E         	call	_setDecay
  1496                           
  1497                           ;motors.c: 171:     setDecay(1, 1);
  1498  000EE6  0E01               	movlw	1
  1499  000EE8  6E1A               	movwf	setDecay@motor^0,c
  1500  000EEA  0E01               	movlw	1
  1501  000EEC  EC88  F00E         	call	_setDecay
  1502                           
  1503                           ;motors.c: 172:     setDecay(1, 2);
  1504  000EF0  0E02               	movlw	2
  1505  000EF2  6E1A               	movwf	setDecay@motor^0,c
  1506  000EF4  0E01               	movlw	1
  1507  000EF6  EC88  F00E         	call	_setDecay
  1508                           
  1509                           ;motors.c: 174:     enableMotor(0, 0);
  1510  000EFA  0E00               	movlw	0
  1511  000EFC  6E1A               	movwf	enableMotor@motor^0,c
  1512  000EFE  0E00               	movlw	0
  1513  000F00  ECC2  F00E         	call	_enableMotor
  1514                           
  1515                           ;motors.c: 175:     enableMotor(0, 1);
  1516  000F04  0E01               	movlw	1
  1517  000F06  6E1A               	movwf	enableMotor@motor^0,c
  1518  000F08  0E00               	movlw	0
  1519  000F0A  ECC2  F00E         	call	_enableMotor
  1520                           
  1521                           ;motors.c: 176:     enableMotor(0, 2);
  1522  000F0E  0E02               	movlw	2
  1523  000F10  6E1A               	movwf	enableMotor@motor^0,c
  1524  000F12  0E00               	movlw	0
  1525  000F14  ECC2  F00E         	call	_enableMotor
  1526  000F18                     
  1527                           ;motors.c: 180:     unsigned char keepMovingX = 1;
  1528  000F18  0E01               	movlw	1
  1529  000F1A  6E1E               	movwf	resetPosition@keepMovingX^0,c
  1530  000F1C                     
  1531                           ;motors.c: 181:     unsigned char keepMovingY = 1;
  1532  000F1C  0E01               	movlw	1
  1533  000F1E  6E1F               	movwf	resetPosition@keepMovingY^0,c
  1534  000F20                     
  1535                           ;motors.c: 182:     unsigned char keepMovingZ = 1;
  1536  000F20  0E01               	movlw	1
  1537  000F22  6E20               	movwf	resetPosition@keepMovingZ^0,c
  1538  000F24                     
  1539                           ;motors.c: 185:     T2CONbits.TMR2ON = 1;
  1540  000F24  84CA               	bsf	202,2,c	;volatile
  1541  000F26                     
  1542                           ;motors.c: 187:     tm0Error = 0;
  1543  000F26  0E00               	movlw	0
  1544  000F28  6E53               	movwf	(_tm0Error+1)^0,c
  1545  000F2A  0E00               	movlw	0
  1546  000F2C  6E52               	movwf	_tm0Error^0,c
  1547  000F2E                     
  1548                           ;motors.c: 188:     tm0Limit = 200;
  1549  000F2E  0EC8               	movlw	200
  1550  000F30  6E5D               	movwf	_tm0Limit^0,c
  1551  000F32                     
  1552                           ;motors.c: 189:     T0CONbits.TMR0ON = 1;
  1553  000F32  8ED5               	bsf	213,7,c	;volatile
  1554                           
  1555                           ;motors.c: 191:     while(keepMovingX || keepMovingY || keepMovingZ){
  1556  000F34  EF1D  F008         	goto	l3481
  1557  000F38                     l3459:
  1558  000F38  FFFF               	dw	65535	; assembler added errata NOP
  1559                           
  1560                           ;motors.c: 194:         if(tm0Error){
  1561  000F3A  5052               	movf	_tm0Error^0,w,c
  1562  000F3C  1053               	iorwf	(_tm0Error+1)^0,w,c
  1563  000F3E  B4D8               	btfsc	status,2,c
  1564  000F40  EFA4  F007         	goto	u2921
  1565  000F44  EFA7  F007         	goto	u2920
  1566  000F48                     u2921:
  1567  000F48  FFFF               	dw	65535	; assembler added errata NOP
  1568  000F4A  EFB1  F007         	goto	l115
  1569  000F4E                     u2920:
  1570  000F4E  FFFF               	dw	65535	; assembler added errata NOP
  1571  000F50                     
  1572                           ;motors.c: 196:             LATAbits.LATA2 = 0;
  1573  000F50  9489               	bcf	137,2,c	;volatile
  1574                           
  1575                           ;motors.c: 197:             LATBbits.LATB4 = 0;
  1576  000F52  988A               	bcf	138,4,c	;volatile
  1577                           
  1578                           ;motors.c: 198:             LATCbits.LATC2 = 0;
  1579  000F54  948B               	bcf	139,2,c	;volatile
  1580  000F56                     
  1581                           ;motors.c: 200:             tm0Error = 3;
  1582  000F56  0E00               	movlw	0
  1583  000F58  6E53               	movwf	(_tm0Error+1)^0,c
  1584  000F5A  0E03               	movlw	3
  1585  000F5C  6E52               	movwf	_tm0Error^0,c
  1586                           
  1587                           ;motors.c: 201:             break;
  1588  000F5E  EF3B  F008         	goto	l116
  1589  000F62                     l115:
  1590  000F62  FFFF               	dw	65535	; assembler added errata NOP
  1591                           
  1592                           ;motors.c: 208:         if(PORTEbits.RE0 || !keepMovingX){
  1593  000F64  B084               	btfsc	132,0,c	;volatile
  1594  000F66  EFB7  F007         	goto	u2931
  1595  000F6A  EFBA  F007         	goto	u2930
  1596  000F6E                     u2931:
  1597  000F6E  FFFF               	dw	65535	; assembler added errata NOP
  1598  000F70  EFC4  F007         	goto	l3467
  1599  000F74                     u2930:
  1600  000F74  FFFF               	dw	65535	; assembler added errata NOP
  1601  000F76  501E               	movf	resetPosition@keepMovingX^0,w,c
  1602  000F78  A4D8               	btfss	status,2,c
  1603  000F7A  EFC1  F007         	goto	u2941
  1604  000F7E  EFC4  F007         	goto	u2940
  1605  000F82                     u2941:
  1606  000F82  FFFF               	dw	65535	; assembler added errata NOP
  1607  000F84  EFC9  F007         	goto	l117
  1608  000F88                     u2940:
  1609  000F88                     l3467:
  1610  000F88  FFFF               	dw	65535	; assembler added errata NOP
  1611                           
  1612                           ;motors.c: 210:             keepMovingX = 0;
  1613  000F8A  0E00               	movlw	0
  1614  000F8C  6E1E               	movwf	resetPosition@keepMovingX^0,c
  1615                           
  1616                           ;motors.c: 211:         }else{
  1617  000F8E  EFCB  F007         	goto	l120
  1618  000F92                     l117:
  1619  000F92  FFFF               	dw	65535	; assembler added errata NOP
  1620                           
  1621                           ;motors.c: 213:             LATAbits.LATA2 = 1;
  1622  000F94  8489               	bsf	137,2,c	;volatile
  1623  000F96                     l120:
  1624  000F96  FFFF               	dw	65535	; assembler added errata NOP
  1625                           
  1626                           ;motors.c: 217:         if(PORTEbits.RE1 || !keepMovingY){
  1627  000F98  B284               	btfsc	132,1,c	;volatile
  1628  000F9A  EFD1  F007         	goto	u2951
  1629  000F9E  EFD4  F007         	goto	u2950
  1630  000FA2                     u2951:
  1631  000FA2  FFFF               	dw	65535	; assembler added errata NOP
  1632  000FA4  EFDE  F007         	goto	l3471
  1633  000FA8                     u2950:
  1634  000FA8  FFFF               	dw	65535	; assembler added errata NOP
  1635  000FAA  501F               	movf	resetPosition@keepMovingY^0,w,c
  1636  000FAC  A4D8               	btfss	status,2,c
  1637  000FAE  EFDB  F007         	goto	u2961
  1638  000FB2  EFDE  F007         	goto	u2960
  1639  000FB6                     u2961:
  1640  000FB6  FFFF               	dw	65535	; assembler added errata NOP
  1641  000FB8  EFE3  F007         	goto	l121
  1642  000FBC                     u2960:
  1643  000FBC                     l3471:
  1644  000FBC  FFFF               	dw	65535	; assembler added errata NOP
  1645                           
  1646                           ;motors.c: 219:             keepMovingY = 0;
  1647  000FBE  0E00               	movlw	0
  1648  000FC0  6E1F               	movwf	resetPosition@keepMovingY^0,c
  1649                           
  1650                           ;motors.c: 220:         }else{
  1651  000FC2  EFE5  F007         	goto	l124
  1652  000FC6                     l121:
  1653  000FC6  FFFF               	dw	65535	; assembler added errata NOP
  1654                           
  1655                           ;motors.c: 222:             LATBbits.LATB4 = 1;
  1656  000FC8  888A               	bsf	138,4,c	;volatile
  1657  000FCA                     l124:
  1658  000FCA  FFFF               	dw	65535	; assembler added errata NOP
  1659                           
  1660                           ;motors.c: 226:         if(PORTEbits.RE2 || !keepMovingZ){
  1661  000FCC  B484               	btfsc	132,2,c	;volatile
  1662  000FCE  EFEB  F007         	goto	u2971
  1663  000FD2  EFEE  F007         	goto	u2970
  1664  000FD6                     u2971:
  1665  000FD6  FFFF               	dw	65535	; assembler added errata NOP
  1666  000FD8  EFF8  F007         	goto	l3475
  1667  000FDC                     u2970:
  1668  000FDC  FFFF               	dw	65535	; assembler added errata NOP
  1669  000FDE  5020               	movf	resetPosition@keepMovingZ^0,w,c
  1670  000FE0  A4D8               	btfss	status,2,c
  1671  000FE2  EFF5  F007         	goto	u2981
  1672  000FE6  EFF8  F007         	goto	u2980
  1673  000FEA                     u2981:
  1674  000FEA  FFFF               	dw	65535	; assembler added errata NOP
  1675  000FEC  EFFD  F007         	goto	l125
  1676  000FF0                     u2980:
  1677  000FF0                     l3475:
  1678  000FF0  FFFF               	dw	65535	; assembler added errata NOP
  1679                           
  1680                           ;motors.c: 228:             keepMovingZ = 0;
  1681  000FF2  0E00               	movlw	0
  1682  000FF4  6E20               	movwf	resetPosition@keepMovingZ^0,c
  1683                           
  1684                           ;motors.c: 229:         }else{
  1685  000FF6  EFFF  F007         	goto	l3477
  1686  000FFA                     l125:
  1687  000FFA  FFFF               	dw	65535	; assembler added errata NOP
  1688                           
  1689                           ;motors.c: 231:             LATCbits.LATC2 = 1;
  1690  000FFC  848B               	bsf	139,2,c	;volatile
  1691  000FFE                     l3477:
  1692  000FFE  FFFF               	dw	65535	; assembler added errata NOP
  1693  001000  EC3A  F010         	call	_stepMade	;wreg free
  1694  001004  501A               	movf	?_stepMade^0,w,c
  1695  001006  101B               	iorwf	(?_stepMade+1)^0,w,c
  1696  001008  B4D8               	btfsc	status,2,c
  1697  00100A  EF09  F008         	goto	u2991
  1698  00100E  EF0C  F008         	goto	u2990
  1699  001012                     u2991:
  1700  001012  FFFF               	dw	65535	; assembler added errata NOP
  1701  001014  EFFF  F007         	goto	l3477
  1702  001018                     u2990:
  1703  001018  FFFF               	dw	65535	; assembler added errata NOP
  1704  00101A                     
  1705                           ;motors.c: 238:         LATAbits.LATA2 = 0;
  1706  00101A  9489               	bcf	137,2,c	;volatile
  1707                           
  1708                           ;motors.c: 239:         LATBbits.LATB4 = 0;
  1709  00101C  988A               	bcf	138,4,c	;volatile
  1710                           
  1711                           ;motors.c: 240:         LATCbits.LATC2 = 0;
  1712  00101E  948B               	bcf	139,2,c	;volatile
  1713  001020                     l3479:
  1714  001020  FFFF               	dw	65535	; assembler added errata NOP
  1715  001022  EC3A  F010         	call	_stepMade	;wreg free
  1716  001026  501A               	movf	?_stepMade^0,w,c
  1717  001028  101B               	iorwf	(?_stepMade+1)^0,w,c
  1718  00102A  B4D8               	btfsc	status,2,c
  1719  00102C  EF1A  F008         	goto	u3001
  1720  001030  EF1D  F008         	goto	u3000
  1721  001034                     u3001:
  1722  001034  FFFF               	dw	65535	; assembler added errata NOP
  1723  001036  EF10  F008         	goto	l3479
  1724  00103A                     u3000:
  1725  00103A                     l3481:
  1726  00103A  FFFF               	dw	65535	; assembler added errata NOP
  1727                           
  1728                           ;motors.c: 191:     while(keepMovingX || keepMovingY || keepMovingZ){
  1729  00103C  501E               	movf	resetPosition@keepMovingX^0,w,c
  1730  00103E  A4D8               	btfss	status,2,c
  1731  001040  EF24  F008         	goto	u3011
  1732  001044  EF27  F008         	goto	u3010
  1733  001048                     u3011:
  1734  001048  FFFF               	dw	65535	; assembler added errata NOP
  1735  00104A  EF9C  F007         	goto	l3459
  1736  00104E                     u3010:
  1737  00104E  FFFF               	dw	65535	; assembler added errata NOP
  1738  001050  501F               	movf	resetPosition@keepMovingY^0,w,c
  1739  001052  A4D8               	btfss	status,2,c
  1740  001054  EF2E  F008         	goto	u3021
  1741  001058  EF31  F008         	goto	u3020
  1742  00105C                     u3021:
  1743  00105C  FFFF               	dw	65535	; assembler added errata NOP
  1744  00105E  EF9C  F007         	goto	l3459
  1745  001062                     u3020:
  1746  001062  FFFF               	dw	65535	; assembler added errata NOP
  1747  001064  5020               	movf	resetPosition@keepMovingZ^0,w,c
  1748  001066  A4D8               	btfss	status,2,c
  1749  001068  EF38  F008         	goto	u3031
  1750  00106C  EF3B  F008         	goto	u3030
  1751  001070                     u3031:
  1752  001070  FFFF               	dw	65535	; assembler added errata NOP
  1753  001072  EF9C  F007         	goto	l3459
  1754  001076                     u3030:
  1755  001076                     l116:
  1756  001076  FFFF               	dw	65535	; assembler added errata NOP
  1757                           
  1758                           ;motors.c: 247:     T0CONbits.TMR0ON = 0;
  1759  001078  9ED5               	bcf	213,7,c	;volatile
  1760                           
  1761                           ;motors.c: 248:     T2CONbits.TMR2ON = 0;
  1762  00107A  94CA               	bcf	202,2,c	;volatile
  1763  00107C                     
  1764                           ;motors.c: 250:     TMR0 = 0;
  1765  00107C  0E00               	movlw	0
  1766  00107E  6ED7               	movwf	215,c	;volatile
  1767  001080  0E00               	movlw	0
  1768  001082  6ED6               	movwf	214,c	;volatile
  1769                           
  1770                           ;motors.c: 251:     TMR2 = 0;
  1771  001084  0E00               	movlw	0
  1772  001086  6ECC               	movwf	204,c	;volatile
  1773  001088                     
  1774                           ;motors.c: 254:     resetStep();
  1775  001088  EC85  F010         	call	_resetStep	;wreg free
  1776  00108C  0012               	return		;funcret
  1777  00108E  FFFF               	dw	65535	; errata NOP
  1778  001090                     __end_of_resetPosition:
  1779                           	callstack 0
  1780                           
  1781 ;; *************** function _setStep *****************
  1782 ;; Defined at:
  1783 ;;		line 69 in file "motors.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;  step            1    wreg     unsigned char 
  1786 ;;  motor           1   25[COMRAM] unsigned char 
  1787 ;; Auto vars:     Size  Location     Type
  1788 ;;  step            1   28[COMRAM] unsigned char 
  1789 ;; Return value:  Size  Location     Type
  1790 ;;                  1    wreg      void 
  1791 ;; Registers used:
  1792 ;;		wreg, status,2, status,0
  1793 ;; Tracked objects:
  1794 ;;		On entry : 0/0
  1795 ;;		On exit  : 0/0
  1796 ;;		Unchanged: 0/0
  1797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1798 ;;      Params:         1       0       0       0       0       0       0
  1799 ;;      Locals:         1       0       0       0       0       0       0
  1800 ;;      Temps:          2       0       0       0       0       0       0
  1801 ;;      Totals:         4       0       0       0       0       0       0
  1802 ;;Total ram usage:        4 bytes
  1803 ;; Hardware stack levels used:    1
  1804 ;; Hardware stack levels required when called:    4
  1805 ;; This function calls:
  1806 ;;		Nothing
  1807 ;; This function is called by:
  1808 ;;		_resetPosition
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text6
  1813  0018D2                     __ptext6:
  1814                           	callstack 0
  1815  0018D2                     _setStep:
  1816                           	callstack 0
  1817  0018D2  FFFF               	dw	65535	; assembler added errata NOP
  1818                           
  1819                           ;incstack = 0
  1820                           ;setStep@step stored from wreg
  1821  0018D4  6E1D               	movwf	setStep@step^0,c
  1822  0018D6                     
  1823                           ;motors.c: 70:     switch(motor){
  1824  0018D6  EFB6  F00C         	goto	l2417
  1825  0018DA                     l2409:
  1826  0018DA  FFFF               	dw	65535	; assembler added errata NOP
  1827                           
  1828                           ;motors.c: 73:             LATAbits.LATA5 = (step & 0x01);
  1829  0018DC  C01D  F01B         	movff	setStep@step,??_setStep
  1830  0018E0  0E01               	movlw	1
  1831  0018E2  161B               	andwf	??_setStep^0,f,c
  1832  0018E4  3A1B               	swapf	??_setStep^0,f,c
  1833  0018E6  461B               	rlncf	??_setStep^0,f,c
  1834  0018E8  5089               	movf	137,w,c	;volatile
  1835  0018EA  181B               	xorwf	??_setStep^0,w,c
  1836  0018EC  0BDF               	andlw	-33
  1837  0018EE  181B               	xorwf	??_setStep^0,w,c
  1838  0018F0  6E89               	movwf	137,c	;volatile
  1839                           
  1840                           ;motors.c: 75:             LATBbits.LATB0 = (step & 0x02);
  1841  0018F2  C01D  F01B         	movff	setStep@step,??_setStep
  1842  0018F6  0E02               	movlw	2
  1843  0018F8  161B               	andwf	??_setStep^0,f,c
  1844  0018FA  508A               	movf	138,w,c	;volatile
  1845  0018FC  181B               	xorwf	??_setStep^0,w,c
  1846  0018FE  0BFE               	andlw	-2
  1847  001900  181B               	xorwf	??_setStep^0,w,c
  1848  001902  6E8A               	movwf	138,c	;volatile
  1849                           
  1850                           ;motors.c: 76:             break;
  1851  001904  EFD1  F00C         	goto	l83
  1852  001908                     l2411:
  1853  001908  FFFF               	dw	65535	; assembler added errata NOP
  1854                           
  1855                           ;motors.c: 78:             LATBbits.LATB6 = (step & 0x01);
  1856  00190A  C01D  F01B         	movff	setStep@step,??_setStep
  1857  00190E  0E01               	movlw	1
  1858  001910  161B               	andwf	??_setStep^0,f,c
  1859  001912  3A1B               	swapf	??_setStep^0,f,c
  1860  001914  461B               	rlncf	??_setStep^0,f,c
  1861  001916  461B               	rlncf	??_setStep^0,f,c
  1862  001918  508A               	movf	138,w,c	;volatile
  1863  00191A  181B               	xorwf	??_setStep^0,w,c
  1864  00191C  0BBF               	andlw	-65
  1865  00191E  181B               	xorwf	??_setStep^0,w,c
  1866  001920  6E8A               	movwf	138,c	;volatile
  1867                           
  1868                           ;motors.c: 79:             LATBbits.LATB7 = (step & 0x02);
  1869  001922  C01D  F01B         	movff	setStep@step,??_setStep
  1870  001926  0E02               	movlw	2
  1871  001928  161B               	andwf	??_setStep^0,f,c
  1872  00192A  321B               	rrcf	??_setStep^0,f,c
  1873  00192C  321B               	rrcf	??_setStep^0,f,c
  1874  00192E  508A               	movf	138,w,c	;volatile
  1875  001930  181B               	xorwf	??_setStep^0,w,c
  1876  001932  0B7F               	andlw	-129
  1877  001934  181B               	xorwf	??_setStep^0,w,c
  1878  001936  6E8A               	movwf	138,c	;volatile
  1879                           
  1880                           ;motors.c: 80:             break;
  1881  001938  EFD1  F00C         	goto	l83
  1882  00193C                     l2413:
  1883  00193C  FFFF               	dw	65535	; assembler added errata NOP
  1884                           
  1885                           ;motors.c: 82:             LATCbits.LATC4 = (step & 0x01);
  1886  00193E  C01D  F01B         	movff	setStep@step,??_setStep
  1887  001942  0E01               	movlw	1
  1888  001944  161B               	andwf	??_setStep^0,f,c
  1889  001946  3A1B               	swapf	??_setStep^0,f,c
  1890  001948  508B               	movf	139,w,c	;volatile
  1891  00194A  181B               	xorwf	??_setStep^0,w,c
  1892  00194C  0BEF               	andlw	-17
  1893  00194E  181B               	xorwf	??_setStep^0,w,c
  1894  001950  6E8B               	movwf	139,c	;volatile
  1895                           
  1896                           ;motors.c: 83:             LATCbits.LATC5 = (step & 0x02);
  1897  001952  C01D  F01B         	movff	setStep@step,??_setStep
  1898  001956  0E02               	movlw	2
  1899  001958  161B               	andwf	??_setStep^0,f,c
  1900  00195A  3A1B               	swapf	??_setStep^0,f,c
  1901  00195C  461B               	rlncf	??_setStep^0,f,c
  1902  00195E  508B               	movf	139,w,c	;volatile
  1903  001960  181B               	xorwf	??_setStep^0,w,c
  1904  001962  0BDF               	andlw	-33
  1905  001964  181B               	xorwf	??_setStep^0,w,c
  1906  001966  6E8B               	movwf	139,c	;volatile
  1907                           
  1908                           ;motors.c: 84:             break;
  1909  001968  EFD1  F00C         	goto	l83
  1910  00196C                     l2417:
  1911  00196C  FFFF               	dw	65535	; assembler added errata NOP
  1912  00196E  501A               	movf	setStep@motor^0,w,c
  1913  001970  6E1B               	movwf	??_setStep^0,c
  1914  001972  6A1C               	clrf	(??_setStep+1)^0,c
  1915                           
  1916                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1917                           ; Switch size 1, requested type "simple"
  1918                           ; Number of cases is 1, Range of values is 0 to 0
  1919                           ; switch strategies available:
  1920                           ; Name         Instructions Cycles
  1921                           ; simple_byte            4     3 (average)
  1922                           ;	Chosen strategy is simple_byte
  1923  001974  501C               	movf	(??_setStep+1)^0,w,c
  1924  001976  0A00               	xorlw	0	; case 0
  1925  001978  B4D8               	btfsc	status,2,c
  1926  00197A  EFC1  F00C         	goto	l3745
  1927  00197E  EFD1  F00C         	goto	l83
  1928  001982                     l3745:
  1929  001982  FFFF               	dw	65535	; assembler added errata NOP
  1930                           
  1931                           ; Switch size 1, requested type "simple"
  1932                           ; Number of cases is 3, Range of values is 0 to 2
  1933                           ; switch strategies available:
  1934                           ; Name         Instructions Cycles
  1935                           ; simple_byte           10     6 (average)
  1936                           ;	Chosen strategy is simple_byte
  1937  001984  501B               	movf	??_setStep^0,w,c
  1938  001986  0A00               	xorlw	0	; case 0
  1939  001988  B4D8               	btfsc	status,2,c
  1940  00198A  EF6D  F00C         	goto	l2409
  1941  00198E  0A01               	xorlw	1	; case 1
  1942  001990  B4D8               	btfsc	status,2,c
  1943  001992  EF84  F00C         	goto	l2411
  1944  001996  0A03               	xorlw	3	; case 2
  1945  001998  B4D8               	btfsc	status,2,c
  1946  00199A  EF9E  F00C         	goto	l2413
  1947  00199E  EFD1  F00C         	goto	l83
  1948  0019A2                     l83:
  1949  0019A2  FFFF               	dw	65535	; assembler added errata NOP
  1950  0019A4  0012               	return		;funcret
  1951  0019A6  FFFF               	dw	65535	; errata NOP
  1952  0019A8                     __end_of_setStep:
  1953                           	callstack 0
  1954                           
  1955 ;; *************** function _setDecay *****************
  1956 ;; Defined at:
  1957 ;;		line 138 in file "motors.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;  decay           1    wreg     unsigned char 
  1960 ;;  motor           1   25[COMRAM] unsigned char 
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;  decay           1   28[COMRAM] unsigned char 
  1963 ;; Return value:  Size  Location     Type
  1964 ;;                  1    wreg      void 
  1965 ;; Registers used:
  1966 ;;		wreg, status,2, status,0
  1967 ;; Tracked objects:
  1968 ;;		On entry : 0/0
  1969 ;;		On exit  : 0/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1972 ;;      Params:         1       0       0       0       0       0       0
  1973 ;;      Locals:         1       0       0       0       0       0       0
  1974 ;;      Temps:          2       0       0       0       0       0       0
  1975 ;;      Totals:         4       0       0       0       0       0       0
  1976 ;;Total ram usage:        4 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    4
  1979 ;; This function calls:
  1980 ;;		Nothing
  1981 ;; This function is called by:
  1982 ;;		_resetPosition
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           	psect	text7
  1987  001D10                     __ptext7:
  1988                           	callstack 0
  1989  001D10                     _setDecay:
  1990                           	callstack 0
  1991  001D10  FFFF               	dw	65535	; assembler added errata NOP
  1992                           
  1993                           ;incstack = 0
  1994                           ;setDecay@decay stored from wreg
  1995  001D12  6E1D               	movwf	setDecay@decay^0,c
  1996  001D14                     
  1997                           ;motors.c: 139:     switch(motor){
  1998  001D14  EFA4  F00E         	goto	l2449
  1999  001D18                     l2441:
  2000  001D18  FFFF               	dw	65535	; assembler added errata NOP
  2001                           
  2002                           ;motors.c: 141:             LATBbits.LATB2 = decay;
  2003  001D1A  B01D               	btfsc	setDecay@decay^0,0,c
  2004  001D1C  D002               	bra	u1605
  2005  001D1E  948A               	bcf	138,2,c	;volatile
  2006  001D20  D001               	bra	u1606
  2007  001D22                     u1605:
  2008  001D22  848A               	bsf	138,2,c	;volatile
  2009  001D24                     u1606:
  2010                           
  2011                           ;motors.c: 142:             break;
  2012  001D24  EFBF  F00E         	goto	l110
  2013  001D28                     l2443:
  2014  001D28  FFFF               	dw	65535	; assembler added errata NOP
  2015                           
  2016                           ;motors.c: 144:             LATCbits.LATC0 = decay;
  2017  001D2A  B01D               	btfsc	setDecay@decay^0,0,c
  2018  001D2C  D002               	bra	u1615
  2019  001D2E  908B               	bcf	139,0,c	;volatile
  2020  001D30  D001               	bra	u1616
  2021  001D32                     u1615:
  2022  001D32  808B               	bsf	139,0,c	;volatile
  2023  001D34                     u1616:
  2024                           
  2025                           ;motors.c: 145:             break;
  2026  001D34  EFBF  F00E         	goto	l110
  2027  001D38                     l2445:
  2028  001D38  FFFF               	dw	65535	; assembler added errata NOP
  2029                           
  2030                           ;motors.c: 147:             LATDbits.LATD0 = decay;
  2031  001D3A  B01D               	btfsc	setDecay@decay^0,0,c
  2032  001D3C  D002               	bra	u1625
  2033  001D3E  908C               	bcf	140,0,c	;volatile
  2034  001D40  D001               	bra	u1626
  2035  001D42                     u1625:
  2036  001D42  808C               	bsf	140,0,c	;volatile
  2037  001D44                     u1626:
  2038                           
  2039                           ;motors.c: 148:             break;
  2040  001D44  EFBF  F00E         	goto	l110
  2041  001D48                     l2449:
  2042  001D48  FFFF               	dw	65535	; assembler added errata NOP
  2043  001D4A  501A               	movf	setDecay@motor^0,w,c
  2044  001D4C  6E1B               	movwf	??_setDecay^0,c
  2045  001D4E  6A1C               	clrf	(??_setDecay+1)^0,c
  2046                           
  2047                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2048                           ; Switch size 1, requested type "simple"
  2049                           ; Number of cases is 1, Range of values is 0 to 0
  2050                           ; switch strategies available:
  2051                           ; Name         Instructions Cycles
  2052                           ; simple_byte            4     3 (average)
  2053                           ;	Chosen strategy is simple_byte
  2054  001D50  501C               	movf	(??_setDecay+1)^0,w,c
  2055  001D52  0A00               	xorlw	0	; case 0
  2056  001D54  B4D8               	btfsc	status,2,c
  2057  001D56  EFAF  F00E         	goto	l3747
  2058  001D5A  EFBF  F00E         	goto	l110
  2059  001D5E                     l3747:
  2060  001D5E  FFFF               	dw	65535	; assembler added errata NOP
  2061                           
  2062                           ; Switch size 1, requested type "simple"
  2063                           ; Number of cases is 3, Range of values is 0 to 2
  2064                           ; switch strategies available:
  2065                           ; Name         Instructions Cycles
  2066                           ; simple_byte           10     6 (average)
  2067                           ;	Chosen strategy is simple_byte
  2068  001D60  501B               	movf	??_setDecay^0,w,c
  2069  001D62  0A00               	xorlw	0	; case 0
  2070  001D64  B4D8               	btfsc	status,2,c
  2071  001D66  EF8C  F00E         	goto	l2441
  2072  001D6A  0A01               	xorlw	1	; case 1
  2073  001D6C  B4D8               	btfsc	status,2,c
  2074  001D6E  EF94  F00E         	goto	l2443
  2075  001D72  0A03               	xorlw	3	; case 2
  2076  001D74  B4D8               	btfsc	status,2,c
  2077  001D76  EF9C  F00E         	goto	l2445
  2078  001D7A  EFBF  F00E         	goto	l110
  2079  001D7E                     l110:
  2080  001D7E  FFFF               	dw	65535	; assembler added errata NOP
  2081  001D80  0012               	return		;funcret
  2082  001D82  FFFF               	dw	65535	; errata NOP
  2083  001D84                     __end_of_setDecay:
  2084                           	callstack 0
  2085                           
  2086 ;; *************** function _enableMotor *****************
  2087 ;; Defined at:
  2088 ;;		line 96 in file "motors.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;  enable          1    wreg     unsigned char 
  2091 ;;  motor           1   25[COMRAM] unsigned char 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  enable          1   28[COMRAM] unsigned char 
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  1    wreg      void 
  2096 ;; Registers used:
  2097 ;;		wreg, status,2, status,0
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2103 ;;      Params:         1       0       0       0       0       0       0
  2104 ;;      Locals:         1       0       0       0       0       0       0
  2105 ;;      Temps:          2       0       0       0       0       0       0
  2106 ;;      Totals:         4       0       0       0       0       0       0
  2107 ;;Total ram usage:        4 bytes
  2108 ;; Hardware stack levels used:    1
  2109 ;; Hardware stack levels required when called:    4
  2110 ;; This function calls:
  2111 ;;		Nothing
  2112 ;; This function is called by:
  2113 ;;		_resetPosition
  2114 ;;		_main
  2115 ;; This function uses a non-reentrant model
  2116 ;;
  2117                           
  2118                           	psect	text8
  2119  001D84                     __ptext8:
  2120                           	callstack 0
  2121  001D84                     _enableMotor:
  2122                           	callstack 0
  2123  001D84  FFFF               	dw	65535	; assembler added errata NOP
  2124                           
  2125                           ;incstack = 0
  2126                           ;enableMotor@enable stored from wreg
  2127  001D86  6E1D               	movwf	enableMotor@enable^0,c
  2128  001D88                     
  2129                           ;motors.c: 97:     switch(motor){
  2130  001D88  EFDE  F00E         	goto	l2433
  2131  001D8C                     l2425:
  2132  001D8C  FFFF               	dw	65535	; assembler added errata NOP
  2133                           
  2134                           ;motors.c: 99:             LATAbits.LATA3 = enable;
  2135  001D8E  B01D               	btfsc	enableMotor@enable^0,0,c
  2136  001D90  D002               	bra	u1575
  2137  001D92  9689               	bcf	137,3,c	;volatile
  2138  001D94  D001               	bra	u1576
  2139  001D96                     u1575:
  2140  001D96  8689               	bsf	137,3,c	;volatile
  2141  001D98                     u1576:
  2142                           
  2143                           ;motors.c: 100:             break;
  2144  001D98  EFF9  F00E         	goto	l92
  2145  001D9C                     l2427:
  2146  001D9C  FFFF               	dw	65535	; assembler added errata NOP
  2147                           
  2148                           ;motors.c: 102:             LATBbits.LATB5 = enable;
  2149  001D9E  B01D               	btfsc	enableMotor@enable^0,0,c
  2150  001DA0  D002               	bra	u1585
  2151  001DA2  9A8A               	bcf	138,5,c	;volatile
  2152  001DA4  D001               	bra	u1586
  2153  001DA6                     u1585:
  2154  001DA6  8A8A               	bsf	138,5,c	;volatile
  2155  001DA8                     u1586:
  2156                           
  2157                           ;motors.c: 103:             break;
  2158  001DA8  EFF9  F00E         	goto	l92
  2159  001DAC                     l2429:
  2160  001DAC  FFFF               	dw	65535	; assembler added errata NOP
  2161                           
  2162                           ;motors.c: 105:             LATCbits.LATC3 = enable;
  2163  001DAE  B01D               	btfsc	enableMotor@enable^0,0,c
  2164  001DB0  D002               	bra	u1595
  2165  001DB2  968B               	bcf	139,3,c	;volatile
  2166  001DB4  D001               	bra	u1596
  2167  001DB6                     u1595:
  2168  001DB6  868B               	bsf	139,3,c	;volatile
  2169  001DB8                     u1596:
  2170                           
  2171                           ;motors.c: 106:             break;
  2172  001DB8  EFF9  F00E         	goto	l92
  2173  001DBC                     l2433:
  2174  001DBC  FFFF               	dw	65535	; assembler added errata NOP
  2175  001DBE  501A               	movf	enableMotor@motor^0,w,c
  2176  001DC0  6E1B               	movwf	??_enableMotor^0,c
  2177  001DC2  6A1C               	clrf	(??_enableMotor+1)^0,c
  2178                           
  2179                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2180                           ; Switch size 1, requested type "simple"
  2181                           ; Number of cases is 1, Range of values is 0 to 0
  2182                           ; switch strategies available:
  2183                           ; Name         Instructions Cycles
  2184                           ; simple_byte            4     3 (average)
  2185                           ;	Chosen strategy is simple_byte
  2186  001DC4  501C               	movf	(??_enableMotor+1)^0,w,c
  2187  001DC6  0A00               	xorlw	0	; case 0
  2188  001DC8  B4D8               	btfsc	status,2,c
  2189  001DCA  EFE9  F00E         	goto	l3749
  2190  001DCE  EFF9  F00E         	goto	l92
  2191  001DD2                     l3749:
  2192  001DD2  FFFF               	dw	65535	; assembler added errata NOP
  2193                           
  2194                           ; Switch size 1, requested type "simple"
  2195                           ; Number of cases is 3, Range of values is 0 to 2
  2196                           ; switch strategies available:
  2197                           ; Name         Instructions Cycles
  2198                           ; simple_byte           10     6 (average)
  2199                           ;	Chosen strategy is simple_byte
  2200  001DD4  501B               	movf	??_enableMotor^0,w,c
  2201  001DD6  0A00               	xorlw	0	; case 0
  2202  001DD8  B4D8               	btfsc	status,2,c
  2203  001DDA  EFC6  F00E         	goto	l2425
  2204  001DDE  0A01               	xorlw	1	; case 1
  2205  001DE0  B4D8               	btfsc	status,2,c
  2206  001DE2  EFCE  F00E         	goto	l2427
  2207  001DE6  0A03               	xorlw	3	; case 2
  2208  001DE8  B4D8               	btfsc	status,2,c
  2209  001DEA  EFD6  F00E         	goto	l2429
  2210  001DEE  EFF9  F00E         	goto	l92
  2211  001DF2                     l92:
  2212  001DF2  FFFF               	dw	65535	; assembler added errata NOP
  2213  001DF4  0012               	return		;funcret
  2214  001DF6  FFFF               	dw	65535	; errata NOP
  2215  001DF8                     __end_of_enableMotor:
  2216                           	callstack 0
  2217                           
  2218 ;; *************** function _reduceSeq *****************
  2219 ;; Defined at:
  2220 ;;		line 88 in file "usart.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;		None
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;		None
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  1    wreg      void 
  2227 ;; Registers used:
  2228 ;;		status,2, status,0
  2229 ;; Tracked objects:
  2230 ;;		On entry : 0/0
  2231 ;;		On exit  : 0/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2234 ;;      Params:         0       0       0       0       0       0       0
  2235 ;;      Locals:         0       0       0       0       0       0       0
  2236 ;;      Temps:          0       0       0       0       0       0       0
  2237 ;;      Totals:         0       0       0       0       0       0       0
  2238 ;;Total ram usage:        0 bytes
  2239 ;; Hardware stack levels used:    1
  2240 ;; Hardware stack levels required when called:    4
  2241 ;; This function calls:
  2242 ;;		Nothing
  2243 ;; This function is called by:
  2244 ;;		_main
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           	psect	text9
  2249  00213A                     __ptext9:
  2250                           	callstack 0
  2251  00213A                     _reduceSeq:
  2252                           	callstack 0
  2253  00213A  FFFF               	dw	65535	; assembler added errata NOP
  2254  00213C                     
  2255                           ;usart.c: 89:     dataCounter--;
  2256  00213C  0656               	decf	_dataCounter^0,f,c
  2257  00213E  0012               	return		;funcret
  2258  002140  FFFF               	dw	65535	; errata NOP
  2259  002142                     __end_of_reduceSeq:
  2260                           	callstack 0
  2261                           
  2262 ;; *************** function _readSeq *****************
  2263 ;; Defined at:
  2264 ;;		line 95 in file "usart.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;		None
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;		None
  2269 ;; Return value:  Size  Location     Type
  2270 ;;                  1    wreg      unsigned char 
  2271 ;; Registers used:
  2272 ;;		wreg, status,2
  2273 ;; Tracked objects:
  2274 ;;		On entry : 0/0
  2275 ;;		On exit  : 0/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2278 ;;      Params:         0       0       0       0       0       0       0
  2279 ;;      Locals:         0       0       0       0       0       0       0
  2280 ;;      Temps:          0       0       0       0       0       0       0
  2281 ;;      Totals:         0       0       0       0       0       0       0
  2282 ;;Total ram usage:        0 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:    4
  2285 ;; This function calls:
  2286 ;;		Nothing
  2287 ;; This function is called by:
  2288 ;;		_main
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           	psect	text10
  2293  002142                     __ptext10:
  2294                           	callstack 0
  2295  002142                     _readSeq:
  2296                           	callstack 0
  2297  002142  FFFF               	dw	65535	; assembler added errata NOP
  2298  002144                     
  2299                           ;usart.c: 96:     return dataCounter;
  2300  002144  5056               	movf	_dataCounter^0,w,c
  2301  002146  0012               	return		;funcret
  2302  002148  FFFF               	dw	65535	; errata NOP
  2303  00214A                     __end_of_readSeq:
  2304                           	callstack 0
  2305                           
  2306 ;; *************** function _printError *****************
  2307 ;; Defined at:
  2308 ;;		line 52 in file "usart.c"
  2309 ;; Parameters:    Size  Location     Type
  2310 ;;  errCode         1    wreg     unsigned char 
  2311 ;; Auto vars:     Size  Location     Type
  2312 ;;  errCode         1   31[COMRAM] unsigned char 
  2313 ;; Return value:  Size  Location     Type
  2314 ;;                  1    wreg      void 
  2315 ;; Registers used:
  2316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2317 ;; Tracked objects:
  2318 ;;		On entry : 0/0
  2319 ;;		On exit  : 0/0
  2320 ;;		Unchanged: 0/0
  2321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2322 ;;      Params:         0       0       0       0       0       0       0
  2323 ;;      Locals:         1       0       0       0       0       0       0
  2324 ;;      Temps:          2       0       0       0       0       0       0
  2325 ;;      Totals:         3       0       0       0       0       0       0
  2326 ;;Total ram usage:        3 bytes
  2327 ;; Hardware stack levels used:    1
  2328 ;; Hardware stack levels required when called:    5
  2329 ;; This function calls:
  2330 ;;		_uartTx
  2331 ;; This function is called by:
  2332 ;;		_main
  2333 ;; This function uses a non-reentrant model
  2334 ;;
  2335                           
  2336                           	psect	text11
  2337  0013B2                     __ptext11:
  2338                           	callstack 0
  2339  0013B2                     _printError:
  2340                           	callstack 0
  2341  0013B2  FFFF               	dw	65535	; assembler added errata NOP
  2342                           
  2343                           ;incstack = 0
  2344                           ;printError@errCode stored from wreg
  2345  0013B4  6E20               	movwf	printError@errCode^0,c
  2346  0013B6                     
  2347                           ;usart.c: 54:     switch(errCode){
  2348  0013B6  EF35  F00A         	goto	l2759
  2349  0013BA                     l2741:
  2350  0013BA  FFFF               	dw	65535	; assembler added errata NOP
  2351                           
  2352                           ;usart.c: 56:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  2353  0013BC  0EA0               	movlw	low _errString_Feed
  2354  0013BE  6E1A               	movwf	uartTx@ptr^0,c
  2355  0013C0  0E00               	movlw	high _errString_Feed
  2356  0013C2  6E1B               	movwf	(uartTx@ptr+1)^0,c
  2357  0013C4  0E1D               	movlw	29
  2358  0013C6  6E1C               	movwf	uartTx@length^0,c
  2359  0013C8  EC90  F00F         	call	_uartTx	;wreg free
  2360                           
  2361                           ;usart.c: 57:             break;
  2362  0013CC  EF64  F00A         	goto	l491
  2363  0013D0                     l2743:
  2364  0013D0  FFFF               	dw	65535	; assembler added errata NOP
  2365                           
  2366                           ;usart.c: 59:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  2367  0013D2  0E5C               	movlw	low _errString_ZEND
  2368  0013D4  6E1A               	movwf	uartTx@ptr^0,c
  2369  0013D6  0E01               	movlw	high _errString_ZEND
  2370  0013D8  6E1B               	movwf	(uartTx@ptr+1)^0,c
  2371  0013DA  0E28               	movlw	40
  2372  0013DC  6E1C               	movwf	uartTx@length^0,c
  2373  0013DE  EC90  F00F         	call	_uartTx	;wreg free
  2374                           
  2375                           ;usart.c: 60:             break;
  2376  0013E2  EF64  F00A         	goto	l491
  2377  0013E6                     l2745:
  2378  0013E6  FFFF               	dw	65535	; assembler added errata NOP
  2379                           
  2380                           ;usart.c: 62:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  2381  0013E8  0E84               	movlw	low _errString_Reset
  2382  0013EA  6E1A               	movwf	uartTx@ptr^0,c
  2383  0013EC  0E01               	movlw	high _errString_Reset
  2384  0013EE  6E1B               	movwf	(uartTx@ptr+1)^0,c
  2385  0013F0  0E27               	movlw	39
  2386  0013F2  6E1C               	movwf	uartTx@length^0,c
  2387  0013F4  EC90  F00F         	call	_uartTx	;wreg free
  2388                           
  2389                           ;usart.c: 63:             break;
  2390  0013F8  EF64  F00A         	goto	l491
  2391  0013FC                     l2747:
  2392  0013FC  FFFF               	dw	65535	; assembler added errata NOP
  2393                           
  2394                           ;usart.c: 65:             uartTx(&errString_Point[0], sizeof(errString_Point));
  2395  0013FE  0E34               	movlw	low _errString_Point
  2396  001400  6E1A               	movwf	uartTx@ptr^0,c
  2397  001402  0E01               	movlw	high _errString_Point
  2398  001404  6E1B               	movwf	(uartTx@ptr+1)^0,c
  2399  001406  0E28               	movlw	40
  2400  001408  6E1C               	movwf	uartTx@length^0,c
  2401  00140A  EC90  F00F         	call	_uartTx	;wreg free
  2402                           
  2403                           ;usart.c: 66:             break;
  2404  00140E  EF64  F00A         	goto	l491
  2405  001412                     l2749:
  2406  001412  FFFF               	dw	65535	; assembler added errata NOP
  2407                           
  2408                           ;usart.c: 68:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2409  001414  0E80               	movlw	low _errString_Bound
  2410  001416  6E1A               	movwf	uartTx@ptr^0,c
  2411  001418  0E00               	movlw	high _errString_Bound
  2412  00141A  6E1B               	movwf	(uartTx@ptr+1)^0,c
  2413  00141C  0E20               	movlw	32
  2414  00141E  6E1C               	movwf	uartTx@length^0,c
  2415  001420  EC90  F00F         	call	_uartTx	;wreg free
  2416                           
  2417                           ;usart.c: 69:             break;
  2418  001424  EF64  F00A         	goto	l491
  2419  001428                     l2751:
  2420  001428  FFFF               	dw	65535	; assembler added errata NOP
  2421                           
  2422                           ;usart.c: 71:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2423  00142A  0E00               	movlw	low _errString_PointZ
  2424  00142C  6E1A               	movwf	uartTx@ptr^0,c
  2425  00142E  0E01               	movlw	high _errString_PointZ
  2426  001430  6E1B               	movwf	(uartTx@ptr+1)^0,c
  2427  001432  0E34               	movlw	52
  2428  001434  6E1C               	movwf	uartTx@length^0,c
  2429  001436  EC90  F00F         	call	_uartTx	;wreg free
  2430                           
  2431                           ;usart.c: 72:             break;
  2432  00143A  EF64  F00A         	goto	l491
  2433  00143E                     l2753:
  2434  00143E  FFFF               	dw	65535	; assembler added errata NOP
  2435                           
  2436                           ;usart.c: 74:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2437  001440  0EAB               	movlw	low _errString_Fatal
  2438  001442  6E1A               	movwf	uartTx@ptr^0,c
  2439  001444  0E01               	movlw	high _errString_Fatal
  2440  001446  6E1B               	movwf	(uartTx@ptr+1)^0,c
  2441  001448  0E26               	movlw	38
  2442  00144A  6E1C               	movwf	uartTx@length^0,c
  2443  00144C  EC90  F00F         	call	_uartTx	;wreg free
  2444                           
  2445                           ;usart.c: 75:             break;
  2446  001450  EF64  F00A         	goto	l491
  2447  001454                     l2755:
  2448  001454  FFFF               	dw	65535	; assembler added errata NOP
  2449                           
  2450                           ;usart.c: 77:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2451  001456  0EBD               	movlw	low _errString_Command
  2452  001458  6E1A               	movwf	uartTx@ptr^0,c
  2453  00145A  0E00               	movlw	high _errString_Command
  2454  00145C  6E1B               	movwf	(uartTx@ptr+1)^0,c
  2455  00145E  0E17               	movlw	23
  2456  001460  6E1C               	movwf	uartTx@length^0,c
  2457  001462  EC90  F00F         	call	_uartTx	;wreg free
  2458                           
  2459                           ;usart.c: 78:             break;
  2460  001466  EF64  F00A         	goto	l491
  2461  00146A                     l2759:
  2462  00146A  FFFF               	dw	65535	; assembler added errata NOP
  2463  00146C  5020               	movf	printError@errCode^0,w,c
  2464  00146E  6E1E               	movwf	??_printError^0,c
  2465  001470  6A1F               	clrf	(??_printError+1)^0,c
  2466                           
  2467                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2468                           ; Switch size 1, requested type "simple"
  2469                           ; Number of cases is 1, Range of values is 0 to 0
  2470                           ; switch strategies available:
  2471                           ; Name         Instructions Cycles
  2472                           ; simple_byte            4     3 (average)
  2473                           ;	Chosen strategy is simple_byte
  2474  001472  501F               	movf	(??_printError+1)^0,w,c
  2475  001474  0A00               	xorlw	0	; case 0
  2476  001476  B4D8               	btfsc	status,2,c
  2477  001478  EF40  F00A         	goto	l3751
  2478  00147C  EF64  F00A         	goto	l491
  2479  001480                     l3751:
  2480  001480  FFFF               	dw	65535	; assembler added errata NOP
  2481                           
  2482                           ; Switch size 1, requested type "simple"
  2483                           ; Number of cases is 8, Range of values is 1 to 8
  2484                           ; switch strategies available:
  2485                           ; Name         Instructions Cycles
  2486                           ; simple_byte           25    13 (average)
  2487                           ;	Chosen strategy is simple_byte
  2488  001482  501E               	movf	??_printError^0,w,c
  2489  001484  0A01               	xorlw	1	; case 1
  2490  001486  B4D8               	btfsc	status,2,c
  2491  001488  EFDD  F009         	goto	l2741
  2492  00148C  0A03               	xorlw	3	; case 2
  2493  00148E  B4D8               	btfsc	status,2,c
  2494  001490  EFE8  F009         	goto	l2743
  2495  001494  0A01               	xorlw	1	; case 3
  2496  001496  B4D8               	btfsc	status,2,c
  2497  001498  EFF3  F009         	goto	l2745
  2498  00149C  0A07               	xorlw	7	; case 4
  2499  00149E  B4D8               	btfsc	status,2,c
  2500  0014A0  EFFE  F009         	goto	l2747
  2501  0014A4  0A01               	xorlw	1	; case 5
  2502  0014A6  B4D8               	btfsc	status,2,c
  2503  0014A8  EF09  F00A         	goto	l2749
  2504  0014AC  0A03               	xorlw	3	; case 6
  2505  0014AE  B4D8               	btfsc	status,2,c
  2506  0014B0  EF14  F00A         	goto	l2751
  2507  0014B4  0A01               	xorlw	1	; case 7
  2508  0014B6  B4D8               	btfsc	status,2,c
  2509  0014B8  EF1F  F00A         	goto	l2753
  2510  0014BC  0A0F               	xorlw	15	; case 8
  2511  0014BE  B4D8               	btfsc	status,2,c
  2512  0014C0  EF2A  F00A         	goto	l2755
  2513  0014C4  EF64  F00A         	goto	l491
  2514  0014C8                     l491:
  2515  0014C8  FFFF               	dw	65535	; assembler added errata NOP
  2516  0014CA  0012               	return		;funcret
  2517  0014CC  FFFF               	dw	65535	; errata NOP
  2518  0014CE                     __end_of_printError:
  2519                           	callstack 0
  2520                           
  2521 ;; *************** function _uartTx *****************
  2522 ;; Defined at:
  2523 ;;		line 174 in file "usart.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;  ptr             2   25[COMRAM] PTR unsigned char 
  2526 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  2527 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  2528 ;;  length          1   27[COMRAM] unsigned char 
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;  i               1   28[COMRAM] unsigned char 
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  1    wreg      void 
  2533 ;; Registers used:
  2534 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2540 ;;      Params:         3       0       0       0       0       0       0
  2541 ;;      Locals:         1       0       0       0       0       0       0
  2542 ;;      Temps:          0       0       0       0       0       0       0
  2543 ;;      Totals:         4       0       0       0       0       0       0
  2544 ;;Total ram usage:        4 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:    4
  2547 ;; This function calls:
  2548 ;;		Nothing
  2549 ;; This function is called by:
  2550 ;;		_printError
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           	psect	text12
  2555  001F20                     __ptext12:
  2556                           	callstack 0
  2557  001F20                     _uartTx:
  2558                           	callstack 0
  2559  001F20  FFFF               	dw	65535	; assembler added errata NOP
  2560  001F22                     
  2561                           ;usart.c: 174: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 175: {;usa
      +                          rt.c: 177:     for(char i = 1; i < length; i++){
  2562  001F22  0E01               	movlw	1
  2563  001F24  6E1D               	movwf	uartTx@i^0,c
  2564  001F26  EFA9  F00F         	goto	l2655
  2565  001F2A                     l2651:
  2566  001F2A  FFFF               	dw	65535	; assembler added errata NOP
  2567                           
  2568                           ;usart.c: 179:         TXREG = *ptr;
  2569  001F2C  C01A  FFD9         	movff	uartTx@ptr,fsr2l
  2570  001F30  C01B  FFDA         	movff	uartTx@ptr+1,fsr2h
  2571  001F34  50DF               	movf	indf2,w,c
  2572  001F36  6EAD               	movwf	173,c	;volatile
  2573  001F38                     l529:
  2574  001F38  FFFF               	dw	65535	; assembler added errata NOP
  2575  001F3A  A2AC               	btfss	172,1,c	;volatile
  2576  001F3C  EFA2  F00F         	goto	u1911
  2577  001F40  EFA5  F00F         	goto	u1910
  2578  001F44                     u1911:
  2579  001F44  FFFF               	dw	65535	; assembler added errata NOP
  2580  001F46  EF9C  F00F         	goto	l529
  2581  001F4A                     u1910:
  2582  001F4A  FFFF               	dw	65535	; assembler added errata NOP
  2583  001F4C                     
  2584                           ;usart.c: 183:         ptr++;
  2585  001F4C  4A1A               	infsnz	uartTx@ptr^0,f,c
  2586  001F4E  2A1B               	incf	(uartTx@ptr+1)^0,f,c
  2587                           
  2588                           ;usart.c: 184:     }
  2589  001F50  2A1D               	incf	uartTx@i^0,f,c
  2590  001F52                     l2655:
  2591  001F52  FFFF               	dw	65535	; assembler added errata NOP
  2592  001F54  501C               	movf	uartTx@length^0,w,c
  2593  001F56  5C1D               	subwf	uartTx@i^0,w,c
  2594  001F58  A0D8               	btfss	status,0,c
  2595  001F5A  EFB1  F00F         	goto	u1921
  2596  001F5E  EFB4  F00F         	goto	u1920
  2597  001F62                     u1921:
  2598  001F62  FFFF               	dw	65535	; assembler added errata NOP
  2599  001F64  EF95  F00F         	goto	l2651
  2600  001F68                     u1920:
  2601  001F68  FFFF               	dw	65535	; assembler added errata NOP
  2602  001F6A  0012               	return		;funcret
  2603  001F6C  FFFF               	dw	65535	; errata NOP
  2604  001F6E                     __end_of_uartTx:
  2605                           	callstack 0
  2606                           
  2607 ;; *************** function _interruptInit *****************
  2608 ;; Defined at:
  2609 ;;		line 74 in file "main.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;		None
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      void 
  2616 ;; Registers used:
  2617 ;;		None
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2623 ;;      Params:         0       0       0       0       0       0       0
  2624 ;;      Locals:         0       0       0       0       0       0       0
  2625 ;;      Temps:          0       0       0       0       0       0       0
  2626 ;;      Totals:         0       0       0       0       0       0       0
  2627 ;;Total ram usage:        0 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    4
  2630 ;; This function calls:
  2631 ;;		Nothing
  2632 ;; This function is called by:
  2633 ;;		_main
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text13
  2638  001FBC                     __ptext13:
  2639                           	callstack 0
  2640  001FBC                     _interruptInit:
  2641                           	callstack 0
  2642  001FBC  FFFF               	dw	65535	; assembler added errata NOP
  2643  001FBE                     
  2644                           ;main.c: 76:     if(!INTCONbits.GIE){
  2645  001FBE  BEF2               	btfsc	242,7,c	;volatile
  2646  001FC0  EFE4  F00F         	goto	u941
  2647  001FC4  EFE7  F00F         	goto	u940
  2648  001FC8                     u941:
  2649  001FC8  FFFF               	dw	65535	; assembler added errata NOP
  2650  001FCA  EFE9  F00F         	goto	l296
  2651  001FCE                     u940:
  2652  001FCE  FFFF               	dw	65535	; assembler added errata NOP
  2653  001FD0                     
  2654                           ;main.c: 77:         INTCONbits.GIE = 1;
  2655  001FD0  8EF2               	bsf	242,7,c	;volatile
  2656  001FD2                     l296:
  2657  001FD2  FFFF               	dw	65535	; assembler added errata NOP
  2658                           
  2659                           ;main.c: 79:     if(!INTCONbits.PEIE){
  2660  001FD4  BCF2               	btfsc	242,6,c	;volatile
  2661  001FD6  EFEF  F00F         	goto	u951
  2662  001FDA  EFF2  F00F         	goto	u950
  2663  001FDE                     u951:
  2664  001FDE  FFFF               	dw	65535	; assembler added errata NOP
  2665  001FE0  EFF4  F00F         	goto	l297
  2666  001FE4                     u950:
  2667  001FE4  FFFF               	dw	65535	; assembler added errata NOP
  2668  001FE6                     
  2669                           ;main.c: 80:         INTCONbits.PEIE = 1;
  2670  001FE6  8CF2               	bsf	242,6,c	;volatile
  2671  001FE8                     l297:
  2672  001FE8  FFFF               	dw	65535	; assembler added errata NOP
  2673                           
  2674                           ;main.c: 84:     RCONbits.IPEN = 1;
  2675  001FEA  8ED0               	bsf	208,7,c	;volatile
  2676                           
  2677                           ;main.c: 85:     INTCONbits.T0IE = 1;
  2678  001FEC  8AF2               	bsf	242,5,c	;volatile
  2679                           
  2680                           ;main.c: 86:     PIE1bits.TMR2IE = 1;
  2681  001FEE  829D               	bsf	157,1,c	;volatile
  2682                           
  2683                           ;main.c: 87:     PIE1bits.RC1IE = 1;
  2684  001FF0  8A9D               	bsf	157,5,c	;volatile
  2685  001FF2  0012               	return		;funcret
  2686  001FF4  FFFF               	dw	65535	; errata NOP
  2687  001FF6                     __end_of_interruptInit:
  2688                           	callstack 0
  2689                           
  2690 ;; *************** function _initPinMotors *****************
  2691 ;; Defined at:
  2692 ;;		line 44 in file "motors.c"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;		None
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;		None
  2697 ;; Return value:  Size  Location     Type
  2698 ;;                  1    wreg      void 
  2699 ;; Registers used:
  2700 ;;		wreg, status,2, status,0
  2701 ;; Tracked objects:
  2702 ;;		On entry : 0/0
  2703 ;;		On exit  : 0/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2706 ;;      Params:         0       0       0       0       0       0       0
  2707 ;;      Locals:         0       0       0       0       0       0       0
  2708 ;;      Temps:          0       0       0       0       0       0       0
  2709 ;;      Totals:         0       0       0       0       0       0       0
  2710 ;;Total ram usage:        0 bytes
  2711 ;; Hardware stack levels used:    1
  2712 ;; Hardware stack levels required when called:    4
  2713 ;; This function calls:
  2714 ;;		Nothing
  2715 ;; This function is called by:
  2716 ;;		_main
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text14
  2721  001FF6                     __ptext14:
  2722                           	callstack 0
  2723  001FF6                     _initPinMotors:
  2724                           	callstack 0
  2725  001FF6  FFFF               	dw	65535	; assembler added errata NOP
  2726  001FF8                     
  2727                           ;motors.c: 46:     ADCON1bits.PCFG = 0x06;
  2728  001FF8  50C1               	movf	193,w,c	;volatile
  2729  001FFA  0BF0               	andlw	-16
  2730  001FFC  0906               	iorlw	6
  2731  001FFE  6EC1               	movwf	193,c	;volatile
  2732  002000                     
  2733                           ;motors.c: 47:     TRISA &= 0b11010001;
  2734  002000  0ED1               	movlw	209
  2735  002002  1692               	andwf	146,f,c	;volatile
  2736  002004                     
  2737                           ;motors.c: 49:     TRISB &= 0b00000010;
  2738  002004  0E02               	movlw	2
  2739  002006  1693               	andwf	147,f,c	;volatile
  2740  002008                     
  2741                           ;motors.c: 50:     TRISC &= 0b11000000;
  2742  002008  0EC0               	movlw	192
  2743  00200A  1694               	andwf	148,f,c	;volatile
  2744  00200C                     
  2745                           ;motors.c: 51:     TRISD &= 0b11000000;
  2746  00200C  0EC0               	movlw	192
  2747  00200E  1695               	andwf	149,f,c	;volatile
  2748  002010                     
  2749                           ;motors.c: 54:     TRISEbits.TRISE0 = 1;
  2750  002010  8096               	bsf	150,0,c	;volatile
  2751  002012                     
  2752                           ;motors.c: 55:     TRISEbits.TRISE1 = 1;
  2753  002012  8296               	bsf	150,1,c	;volatile
  2754  002014                     
  2755                           ;motors.c: 56:     TRISEbits.TRISE2 = 1;
  2756  002014  8496               	bsf	150,2,c	;volatile
  2757  002016                     
  2758                           ;motors.c: 59:     TRISDbits.TRISD7 = 1;
  2759  002016  8E95               	bsf	149,7,c	;volatile
  2760  002018  0012               	return		;funcret
  2761  00201A  FFFF               	dw	65535	; errata NOP
  2762  00201C                     __end_of_initPinMotors:
  2763                           	callstack 0
  2764                           
  2765 ;; *************** function _initADC *****************
  2766 ;; Defined at:
  2767 ;;		line 18 in file "adc.c"
  2768 ;; Parameters:    Size  Location     Type
  2769 ;;		None
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;		None
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  1    wreg      void 
  2774 ;; Registers used:
  2775 ;;		wreg, status,2
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2781 ;;      Params:         0       0       0       0       0       0       0
  2782 ;;      Locals:         0       0       0       0       0       0       0
  2783 ;;      Temps:          0       0       0       0       0       0       0
  2784 ;;      Totals:         0       0       0       0       0       0       0
  2785 ;;Total ram usage:        0 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; Hardware stack levels required when called:    4
  2788 ;; This function calls:
  2789 ;;		Nothing
  2790 ;; This function is called by:
  2791 ;;		_main
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           	psect	text15
  2796  00201C                     __ptext15:
  2797                           	callstack 0
  2798  00201C                     _initADC:
  2799                           	callstack 0
  2800  00201C  FFFF               	dw	65535	; assembler added errata NOP
  2801  00201E                     
  2802                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  2803  00201E  50C2               	movf	194,w,c	;volatile
  2804  002020  0B3F               	andlw	-193
  2805  002022  0940               	iorlw	64
  2806  002024  6EC2               	movwf	194,c	;volatile
  2807  002026                     
  2808                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  2809  002026  8CC1               	bsf	193,6,c	;volatile
  2810                           
  2811                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  2812  002028  0EC7               	movlw	-57
  2813  00202A  16C2               	andwf	194,f,c	;volatile
  2814  00202C                     
  2815                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  2816  00202C  94C2               	bcf	194,2,c	;volatile
  2817  00202E                     
  2818                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  2819  00202E  90C2               	bcf	194,0,c	;volatile
  2820  002030                     
  2821                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  2822  002030  9EC1               	bcf	193,7,c	;volatile
  2823                           
  2824                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  2825  002032  50C1               	movf	193,w,c	;volatile
  2826  002034  0BF0               	andlw	-16
  2827  002036  090E               	iorlw	14
  2828  002038  6EC1               	movwf	193,c	;volatile
  2829  00203A                     
  2830                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  2831  00203A  8C9D               	bsf	157,6,c	;volatile
  2832  00203C                     
  2833                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  2834  00203C  8C9F               	bsf	159,6,c	;volatile
  2835  00203E  0012               	return		;funcret
  2836  002040  FFFF               	dw	65535	; errata NOP
  2837  002042                     __end_of_initADC:
  2838                           	callstack 0
  2839                           
  2840 ;; *************** function _fatalError *****************
  2841 ;; Defined at:
  2842 ;;		line 99 in file "usart.c"
  2843 ;; Parameters:    Size  Location     Type
  2844 ;;		None
  2845 ;; Auto vars:     Size  Location     Type
  2846 ;;		None
  2847 ;; Return value:  Size  Location     Type
  2848 ;;                  1    wreg      unsigned char 
  2849 ;; Registers used:
  2850 ;;		wreg, status,2
  2851 ;; Tracked objects:
  2852 ;;		On entry : 0/0
  2853 ;;		On exit  : 0/0
  2854 ;;		Unchanged: 0/0
  2855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2856 ;;      Params:         0       0       0       0       0       0       0
  2857 ;;      Locals:         0       0       0       0       0       0       0
  2858 ;;      Temps:          0       0       0       0       0       0       0
  2859 ;;      Totals:         0       0       0       0       0       0       0
  2860 ;;Total ram usage:        0 bytes
  2861 ;; Hardware stack levels used:    1
  2862 ;; Hardware stack levels required when called:    4
  2863 ;; This function calls:
  2864 ;;		Nothing
  2865 ;; This function is called by:
  2866 ;;		_main
  2867 ;; This function uses a non-reentrant model
  2868 ;;
  2869                           
  2870                           	psect	text16
  2871  00214A                     __ptext16:
  2872                           	callstack 0
  2873  00214A                     _fatalError:
  2874                           	callstack 0
  2875  00214A  FFFF               	dw	65535	; assembler added errata NOP
  2876  00214C                     
  2877                           ;usart.c: 100:     return _fatalError;
  2878  00214C  5055               	movf	__fatalError^0,w,c
  2879  00214E  0012               	return		;funcret
  2880  002150  FFFF               	dw	65535	; errata NOP
  2881  002152                     __end_of_fatalError:
  2882                           	callstack 0
  2883                           
  2884 ;; *************** function _executeData *****************
  2885 ;; Defined at:
  2886 ;;		line 97 in file "main.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;		None
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;  data            2   20[BANK0 ] PTR struct .
  2891 ;;		 -> dataSequence(20), 
  2892 ;;  errCode         1   19[BANK0 ] unsigned char 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      unsigned char 
  2895 ;; Registers used:
  2896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2902 ;;      Params:         0       0       0       0       0       0       0
  2903 ;;      Locals:         0       3       0       0       0       0       0
  2904 ;;      Temps:          0       2       0       0       0       0       0
  2905 ;;      Totals:         0       5       0       0       0       0       0
  2906 ;;Total ram usage:        5 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    6
  2909 ;; This function calls:
  2910 ;;		_getData
  2911 ;;		_liftArm
  2912 ;;		_moveToPoint
  2913 ;;		_pickObject
  2914 ;;		_releaseObj
  2915 ;;		_rotateObj
  2916 ;;		_touchObject
  2917 ;;		_touchTherm
  2918 ;; This function is called by:
  2919 ;;		_main
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           	psect	text17
  2924  000A48                     __ptext17:
  2925                           	callstack 0
  2926  000A48                     _executeData:
  2927                           	callstack 0
  2928  000A48  FFFF               	dw	65535	; assembler added errata NOP
  2929  000A4A                     
  2930                           ;main.c: 98:     t_sequence *data = getData();
  2931  000A4A  EC4D  F010         	call	_getData	;wreg free
  2932  000A4E  C01A  F0E8         	movff	?_getData,executeData@data
  2933  000A52  C01B  F0E9         	movff	?_getData+1,executeData@data+1
  2934  000A56                     
  2935                           ;main.c: 100:     char errCode = 0;
  2936  000A56  0E00               	movlw	0
  2937  000A58  0100               	movlb	0	; () banked
  2938  000A5A  6FE7               	movwf	executeData@errCode& (0+255),b
  2939                           
  2940                           ;main.c: 104:     switch(data->feederLine){
  2941  000A5C  EFC2  F005         	goto	l3519
  2942  000A60                     l3497:
  2943  000A60  FFFF               	dw	65535	; assembler added errata NOP
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;main.c: 107:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  2947  000A62  C047  F01E         	movff	_posVector,moveToPoint@x1
  2948  000A66  6A1F               	clrf	(moveToPoint@x1+1)^0,c
  2949  000A68  C048  F020         	movff	_posVector+1,moveToPoint@y1
  2950  000A6C  6A21               	clrf	(moveToPoint@y1+1)^0,c
  2951  000A6E  0E11               	movlw	low _feeder1Pos
  2952  000A70  6EF6               	movwf	tblptrl,c
  2953  000A72                     	if	1	;There is more than 1 active tblptr byte
  2954  000A72  0E06               	movlw	high _feeder1Pos
  2955  000A74  6EF7               	movwf	tblptrh,c
  2956  000A76                     	endif
  2957  000A76                     	if	0	;There are less than 3 active tblptr bytes
  2958  000A76                     	endif
  2959  000A76  0008               	tblrd		*
  2960  000A78  FFFF               	dw	65535	; errata NOP
  2961  000A7A  50F5               	movf	tablat,w,c
  2962  000A7C  6E22               	movwf	moveToPoint@x2^0,c
  2963  000A7E  6A23               	clrf	(moveToPoint@x2+1)^0,c
  2964  000A80  0E12               	movlw	low (_feeder1Pos+1)
  2965  000A82  6EF6               	movwf	tblptrl,c
  2966  000A84  0E06               	movlw	high (_feeder1Pos+1)
  2967  000A86  6EF7               	movwf	tblptrh,c
  2968  000A88                     	if	0	;tblptru may be non-zero
  2969  000A88                     	endif
  2970  000A88                     	if	0	;tblptru may be non-zero
  2971  000A88                     	endif
  2972  000A88  0008               	tblrd		*
  2973  000A8A  FFFF               	dw	65535	; errata NOP
  2974  000A8C  50F5               	movf	tablat,w,c
  2975  000A8E  6E24               	movwf	moveToPoint@y2^0,c
  2976  000A90  6A25               	clrf	(moveToPoint@y2+1)^0,c
  2977  000A92  EC48  F008         	call	_moveToPoint	;wreg free
  2978  000A96  0100               	movlb	0	; () banked
  2979  000A98  6FE7               	movwf	executeData@errCode& (0+255),b
  2980  000A9A                     
  2981                           ; BSR set to: 0
  2982                           ;main.c: 109:             posVector[0] = feeder1Pos[0];
  2983  000A9A  0E11               	movlw	low _feeder1Pos
  2984  000A9C  6EF6               	movwf	tblptrl,c
  2985  000A9E                     	if	1	;There is more than 1 active tblptr byte
  2986  000A9E  0E06               	movlw	high _feeder1Pos
  2987  000AA0  6EF7               	movwf	tblptrh,c
  2988  000AA2                     	endif
  2989  000AA2                     	if	0	;There are less than 3 active tblptr bytes
  2990  000AA2                     	endif
  2991  000AA2  0008               	tblrd		*
  2992  000AA4  FFFF               	dw	65535	; errata NOP
  2993  000AA6  CFF5 F047          	movff	tablat,_posVector
  2994  000AAA                     
  2995                           ; BSR set to: 0
  2996                           ;main.c: 110:             posVector[1] = feeder1Pos[1];
  2997  000AAA  0E12               	movlw	low (_feeder1Pos+1)
  2998  000AAC  6EF6               	movwf	tblptrl,c
  2999  000AAE  0E06               	movlw	high (_feeder1Pos+1)
  3000  000AB0  6EF7               	movwf	tblptrh,c
  3001  000AB2                     	if	0	;tblptru may be non-zero
  3002  000AB2                     	endif
  3003  000AB2                     	if	0	;tblptru may be non-zero
  3004  000AB2                     	endif
  3005  000AB2  0008               	tblrd		*
  3006  000AB4  FFFF               	dw	65535	; errata NOP
  3007  000AB6  CFF5 F048          	movff	tablat,_posVector+1
  3008                           
  3009                           ;main.c: 111:             break;
  3010  000ABA  EFE5  F005         	goto	l3521
  3011  000ABE                     l3503:
  3012  000ABE  FFFF               	dw	65535	; assembler added errata NOP
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;main.c: 113:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3016  000AC0  C047  F01E         	movff	_posVector,moveToPoint@x1
  3017  000AC4  6A1F               	clrf	(moveToPoint@x1+1)^0,c
  3018  000AC6  C048  F020         	movff	_posVector+1,moveToPoint@y1
  3019  000ACA  6A21               	clrf	(moveToPoint@y1+1)^0,c
  3020  000ACC  0E0F               	movlw	low _feeder2Pos
  3021  000ACE  6EF6               	movwf	tblptrl,c
  3022  000AD0                     	if	1	;There is more than 1 active tblptr byte
  3023  000AD0  0E06               	movlw	high _feeder2Pos
  3024  000AD2  6EF7               	movwf	tblptrh,c
  3025  000AD4                     	endif
  3026  000AD4                     	if	0	;There are less than 3 active tblptr bytes
  3027  000AD4                     	endif
  3028  000AD4  0008               	tblrd		*
  3029  000AD6  FFFF               	dw	65535	; errata NOP
  3030  000AD8  50F5               	movf	tablat,w,c
  3031  000ADA  6E22               	movwf	moveToPoint@x2^0,c
  3032  000ADC  6A23               	clrf	(moveToPoint@x2+1)^0,c
  3033  000ADE  0E10               	movlw	low (_feeder2Pos+1)
  3034  000AE0  6EF6               	movwf	tblptrl,c
  3035  000AE2  0E06               	movlw	high (_feeder2Pos+1)
  3036  000AE4  6EF7               	movwf	tblptrh,c
  3037  000AE6                     	if	0	;tblptru may be non-zero
  3038  000AE6                     	endif
  3039  000AE6                     	if	0	;tblptru may be non-zero
  3040  000AE6                     	endif
  3041  000AE6  0008               	tblrd		*
  3042  000AE8  FFFF               	dw	65535	; errata NOP
  3043  000AEA  50F5               	movf	tablat,w,c
  3044  000AEC  6E24               	movwf	moveToPoint@y2^0,c
  3045  000AEE  6A25               	clrf	(moveToPoint@y2+1)^0,c
  3046  000AF0  EC48  F008         	call	_moveToPoint	;wreg free
  3047  000AF4  0100               	movlb	0	; () banked
  3048  000AF6  6FE7               	movwf	executeData@errCode& (0+255),b
  3049  000AF8                     
  3050                           ; BSR set to: 0
  3051                           ;main.c: 114:             posVector[0] = feeder2Pos[0];
  3052  000AF8  0E0F               	movlw	low _feeder2Pos
  3053  000AFA  6EF6               	movwf	tblptrl,c
  3054  000AFC                     	if	1	;There is more than 1 active tblptr byte
  3055  000AFC  0E06               	movlw	high _feeder2Pos
  3056  000AFE  6EF7               	movwf	tblptrh,c
  3057  000B00                     	endif
  3058  000B00                     	if	0	;There are less than 3 active tblptr bytes
  3059  000B00                     	endif
  3060  000B00  0008               	tblrd		*
  3061  000B02  FFFF               	dw	65535	; errata NOP
  3062  000B04  CFF5 F047          	movff	tablat,_posVector
  3063  000B08                     
  3064                           ; BSR set to: 0
  3065                           ;main.c: 115:             posVector[1] = feeder2Pos[1];
  3066  000B08  0E10               	movlw	low (_feeder2Pos+1)
  3067  000B0A  6EF6               	movwf	tblptrl,c
  3068  000B0C  0E06               	movlw	high (_feeder2Pos+1)
  3069  000B0E  6EF7               	movwf	tblptrh,c
  3070  000B10                     	if	0	;tblptru may be non-zero
  3071  000B10                     	endif
  3072  000B10                     	if	0	;tblptru may be non-zero
  3073  000B10                     	endif
  3074  000B10  0008               	tblrd		*
  3075  000B12  FFFF               	dw	65535	; errata NOP
  3076  000B14  CFF5 F048          	movff	tablat,_posVector+1
  3077                           
  3078                           ;main.c: 116:             break;
  3079  000B18  EFE5  F005         	goto	l3521
  3080  000B1C                     l3509:
  3081  000B1C  FFFF               	dw	65535	; assembler added errata NOP
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;main.c: 118:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3085  000B1E  C047  F01E         	movff	_posVector,moveToPoint@x1
  3086  000B22  6A1F               	clrf	(moveToPoint@x1+1)^0,c
  3087  000B24  C048  F020         	movff	_posVector+1,moveToPoint@y1
  3088  000B28  6A21               	clrf	(moveToPoint@y1+1)^0,c
  3089  000B2A  0E0D               	movlw	low _feeder3Pos
  3090  000B2C  6EF6               	movwf	tblptrl,c
  3091  000B2E                     	if	1	;There is more than 1 active tblptr byte
  3092  000B2E  0E06               	movlw	high _feeder3Pos
  3093  000B30  6EF7               	movwf	tblptrh,c
  3094  000B32                     	endif
  3095  000B32                     	if	0	;There are less than 3 active tblptr bytes
  3096  000B32                     	endif
  3097  000B32  0008               	tblrd		*
  3098  000B34  FFFF               	dw	65535	; errata NOP
  3099  000B36  50F5               	movf	tablat,w,c
  3100  000B38  6E22               	movwf	moveToPoint@x2^0,c
  3101  000B3A  6A23               	clrf	(moveToPoint@x2+1)^0,c
  3102  000B3C  0E0E               	movlw	low (_feeder3Pos+1)
  3103  000B3E  6EF6               	movwf	tblptrl,c
  3104  000B40  0E06               	movlw	high (_feeder3Pos+1)
  3105  000B42  6EF7               	movwf	tblptrh,c
  3106  000B44                     	if	0	;tblptru may be non-zero
  3107  000B44                     	endif
  3108  000B44                     	if	0	;tblptru may be non-zero
  3109  000B44                     	endif
  3110  000B44  0008               	tblrd		*
  3111  000B46  FFFF               	dw	65535	; errata NOP
  3112  000B48  50F5               	movf	tablat,w,c
  3113  000B4A  6E24               	movwf	moveToPoint@y2^0,c
  3114  000B4C  6A25               	clrf	(moveToPoint@y2+1)^0,c
  3115  000B4E  EC48  F008         	call	_moveToPoint	;wreg free
  3116  000B52  0100               	movlb	0	; () banked
  3117  000B54  6FE7               	movwf	executeData@errCode& (0+255),b
  3118  000B56                     
  3119                           ; BSR set to: 0
  3120                           ;main.c: 119:             posVector[0] = feeder3Pos[0];
  3121  000B56  0E0D               	movlw	low _feeder3Pos
  3122  000B58  6EF6               	movwf	tblptrl,c
  3123  000B5A                     	if	1	;There is more than 1 active tblptr byte
  3124  000B5A  0E06               	movlw	high _feeder3Pos
  3125  000B5C  6EF7               	movwf	tblptrh,c
  3126  000B5E                     	endif
  3127  000B5E                     	if	0	;There are less than 3 active tblptr bytes
  3128  000B5E                     	endif
  3129  000B5E  0008               	tblrd		*
  3130  000B60  FFFF               	dw	65535	; errata NOP
  3131  000B62  CFF5 F047          	movff	tablat,_posVector
  3132  000B66                     
  3133                           ; BSR set to: 0
  3134                           ;main.c: 120:             posVector[1] = feeder3Pos[1];
  3135  000B66  0E0E               	movlw	low (_feeder3Pos+1)
  3136  000B68  6EF6               	movwf	tblptrl,c
  3137  000B6A  0E06               	movlw	high (_feeder3Pos+1)
  3138  000B6C  6EF7               	movwf	tblptrh,c
  3139  000B6E                     	if	0	;tblptru may be non-zero
  3140  000B6E                     	endif
  3141  000B6E                     	if	0	;tblptru may be non-zero
  3142  000B6E                     	endif
  3143  000B6E  0008               	tblrd		*
  3144  000B70  FFFF               	dw	65535	; errata NOP
  3145  000B72  CFF5 F048          	movff	tablat,_posVector+1
  3146                           
  3147                           ;main.c: 121:             break;
  3148  000B76  EFE5  F005         	goto	l3521
  3149  000B7A                     l3515:
  3150  000B7A  FFFF               	dw	65535	; assembler added errata NOP
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;main.c: 130:             errCode = 1;
  3154  000B7C  0E01               	movlw	1
  3155  000B7E  6FE7               	movwf	executeData@errCode& (0+255),b
  3156                           
  3157                           ;main.c: 131:             break;
  3158  000B80  EFE5  F005         	goto	l3521
  3159  000B84                     l3519:
  3160  000B84  FFFF               	dw	65535	; assembler added errata NOP
  3161                           
  3162                           ; BSR set to: 0
  3163  000B86  C0E8  FFD9         	movff	executeData@data,fsr2l
  3164  000B8A  C0E9  FFDA         	movff	executeData@data+1,fsr2h
  3165  000B8E  50DF               	movf	indf2,w,c
  3166  000B90  6FE5               	movwf	??_executeData& (0+255),b
  3167  000B92  6BE6               	clrf	(??_executeData+1)& (0+255),b
  3168                           
  3169                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3170                           ; Switch size 1, requested type "simple"
  3171                           ; Number of cases is 1, Range of values is 0 to 0
  3172                           ; switch strategies available:
  3173                           ; Name         Instructions Cycles
  3174                           ; simple_byte            4     3 (average)
  3175                           ;	Chosen strategy is simple_byte
  3176  000B94  51E6               	movf	(??_executeData+1)& (0+255),w,b
  3177  000B96  0A00               	xorlw	0	; case 0
  3178  000B98  B4D8               	btfsc	status,2,c
  3179  000B9A  EFD1  F005         	goto	l3753
  3180  000B9E  EFBD  F005         	goto	l3515
  3181  000BA2                     l3753:
  3182  000BA2  FFFF               	dw	65535	; assembler added errata NOP
  3183                           
  3184                           ; BSR set to: 0
  3185                           ; Switch size 1, requested type "simple"
  3186                           ; Number of cases is 4, Range of values is 48 to 255
  3187                           ; switch strategies available:
  3188                           ; Name         Instructions Cycles
  3189                           ; simple_byte           13     7 (average)
  3190                           ;	Chosen strategy is simple_byte
  3191  000BA4  51E5               	movf	??_executeData& (0+255),w,b
  3192  000BA6  0A30               	xorlw	48	; case 48
  3193  000BA8  B4D8               	btfsc	status,2,c
  3194  000BAA  EF30  F005         	goto	l3497
  3195  000BAE  0A01               	xorlw	1	; case 49
  3196  000BB0  B4D8               	btfsc	status,2,c
  3197  000BB2  EF5F  F005         	goto	l3503
  3198  000BB6  0A03               	xorlw	3	; case 50
  3199  000BB8  B4D8               	btfsc	status,2,c
  3200  000BBA  EF8E  F005         	goto	l3509
  3201  000BBE  0ACD               	xorlw	205	; case 255
  3202  000BC0  B4D8               	btfsc	status,2,c
  3203  000BC2  EFE5  F005         	goto	l3521
  3204  000BC6  EFBD  F005         	goto	l3515
  3205  000BCA                     l3521:
  3206  000BCA  FFFF               	dw	65535	; assembler added errata NOP
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;main.c: 135:     if(!errCode){
  3210  000BCC  51E7               	movf	executeData@errCode& (0+255),w,b
  3211  000BCE  A4D8               	btfss	status,2,c
  3212  000BD0  EFEC  F005         	goto	u3041
  3213  000BD4  EFEF  F005         	goto	u3040
  3214  000BD8                     u3041:
  3215  000BD8  FFFF               	dw	65535	; assembler added errata NOP
  3216  000BDA  EF4F  F006         	goto	l3543
  3217  000BDE                     u3040:
  3218  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  3219  000BE0                     
  3220                           ; BSR set to: 0
  3221  000BE0  ECF0  F00B         	call	_touchObject	;wreg free
  3222  000BE4                     
  3223                           ;main.c: 139:         pickObject();
  3224  000BE4  ECB5  F010         	call	_pickObject	;wreg free
  3225  000BE8  EC9A  F00D         	call	_liftArm	;wreg free
  3226  000BEC  C047  F01E         	movff	_posVector,moveToPoint@x1
  3227  000BF0  6A1F               	clrf	(moveToPoint@x1+1)^0,c
  3228  000BF2  C048  F020         	movff	_posVector+1,moveToPoint@y1
  3229  000BF6  6A21               	clrf	(moveToPoint@y1+1)^0,c
  3230  000BF8  0100               	movlb	0	; () banked
  3231  000BFA  EE20 F001          	lfsr	2,1
  3232  000BFE  51E8               	movf	executeData@data& (0+255),w,b
  3233  000C00  26D9               	addwf	fsr2l,f,c
  3234  000C02  51E9               	movf	(executeData@data+1)& (0+255),w,b
  3235  000C04  22DA               	addwfc	fsr2h,f,c
  3236  000C06  50DF               	movf	indf2,w,c
  3237  000C08  6FE5               	movwf	??_executeData& (0+255),b
  3238  000C0A  51E5               	movf	??_executeData& (0+255),w,b
  3239  000C0C  6E22               	movwf	moveToPoint@x2^0,c
  3240  000C0E  6A23               	clrf	(moveToPoint@x2+1)^0,c
  3241  000C10  EE20 F002          	lfsr	2,2
  3242  000C14  51E8               	movf	executeData@data& (0+255),w,b
  3243  000C16  26D9               	addwf	fsr2l,f,c
  3244  000C18  51E9               	movf	(executeData@data+1)& (0+255),w,b
  3245  000C1A  22DA               	addwfc	fsr2h,f,c
  3246  000C1C  50DF               	movf	indf2,w,c
  3247  000C1E  6FE6               	movwf	(??_executeData+1)& (0+255),b
  3248  000C20  51E6               	movf	(??_executeData+1)& (0+255),w,b
  3249  000C22  6E24               	movwf	moveToPoint@y2^0,c
  3250  000C24  6A25               	clrf	(moveToPoint@y2+1)^0,c
  3251  000C26  EC48  F008         	call	_moveToPoint	;wreg free
  3252                           
  3253                           ;main.c: 146:         posVector[0] = data->posX;
  3254  000C2A  0100               	movlb	0	; () banked
  3255  000C2C  EE20 F001          	lfsr	2,1
  3256  000C30  51E8               	movf	executeData@data& (0+255),w,b
  3257  000C32  26D9               	addwf	fsr2l,f,c
  3258  000C34  51E9               	movf	(executeData@data+1)& (0+255),w,b
  3259  000C36  22DA               	addwfc	fsr2h,f,c
  3260  000C38  50DF               	movf	indf2,w,c
  3261  000C3A  6E47               	movwf	_posVector^0,c
  3262                           
  3263                           ;main.c: 147:         posVector[1] = data->posY;
  3264  000C3C  EE20 F002          	lfsr	2,2
  3265  000C40  51E8               	movf	executeData@data& (0+255),w,b
  3266  000C42  26D9               	addwf	fsr2l,f,c
  3267  000C44  51E9               	movf	(executeData@data+1)& (0+255),w,b
  3268  000C46  22DA               	addwfc	fsr2h,f,c
  3269  000C48  50DF               	movf	indf2,w,c
  3270  000C4A  6E48               	movwf	(_posVector+1)^0,c
  3271                           
  3272                           ;main.c: 150:         rotAngle = data->rotation - rotAngle;
  3273  000C4C  EE20 F003          	lfsr	2,3
  3274  000C50  51E8               	movf	executeData@data& (0+255),w,b
  3275  000C52  26D9               	addwf	fsr2l,f,c
  3276  000C54  51E9               	movf	(executeData@data+1)& (0+255),w,b
  3277  000C56  22DA               	addwfc	fsr2h,f,c
  3278  000C58  50DF               	movf	indf2,w,c
  3279  000C5A  6FE5               	movwf	??_executeData& (0+255),b
  3280  000C5C  5050               	movf	_rotAngle^0,w,c
  3281  000C5E  5DE5               	subwf	??_executeData& (0+255),w,b
  3282  000C60  6E50               	movwf	_rotAngle^0,c
  3283  000C62  5051               	movf	(_rotAngle+1)^0,w,c
  3284  000C64  A0D8               	btfss	status,0,c
  3285  000C66  2851               	incf	(_rotAngle+1)^0,w,c
  3286  000C68  6A51               	clrf	(_rotAngle+1)^0,c
  3287  000C6A  5E51               	subwf	(_rotAngle+1)^0,f,c
  3288  000C6C                     
  3289                           ; BSR set to: 0
  3290                           ;main.c: 152:         if(rotAngle < 0){
  3291  000C6C  BE51               	btfsc	(_rotAngle+1)^0,7,c
  3292  000C6E  EF3E  F006         	goto	u3050
  3293  000C72  EF3B  F006         	goto	u3051
  3294  000C76                     u3051:
  3295  000C76  FFFF               	dw	65535	; assembler added errata NOP
  3296  000C78  EF43  F006         	goto	l3535
  3297  000C7C                     u3050:
  3298  000C7C  FFFF               	dw	65535	; assembler added errata NOP
  3299  000C7E                     
  3300                           ; BSR set to: 0
  3301                           ;main.c: 153:             rotAngle += 360;
  3302  000C7E  0E68               	movlw	104
  3303  000C80  2650               	addwf	_rotAngle^0,f,c
  3304  000C82  0E01               	movlw	1
  3305  000C84  2251               	addwfc	(_rotAngle+1)^0,f,c
  3306  000C86                     l3535:
  3307  000C86  FFFF               	dw	65535	; assembler added errata NOP
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;main.c: 155:         rotateObj(rotAngle);
  3311  000C88  5050               	movf	_rotAngle^0,w,c
  3312  000C8A  EC3D  F00D         	call	_rotateObj
  3313  000C8E  EC77  F00B         	call	_touchTherm	;wreg free
  3314  000C92                     
  3315                           ;main.c: 160:         releaseObj();
  3316  000C92  ECB1  F010         	call	_releaseObj	;wreg free
  3317  000C96                     
  3318                           ;main.c: 163:         errCode = liftArm();
  3319  000C96  EC9A  F00D         	call	_liftArm	;wreg free
  3320  000C9A  0100               	movlb	0	; () banked
  3321  000C9C  6FE7               	movwf	executeData@errCode& (0+255),b
  3322  000C9E                     l3543:
  3323  000C9E  FFFF               	dw	65535	; assembler added errata NOP
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;main.c: 166:     return(errCode);
  3327  000CA0  51E7               	movf	executeData@errCode& (0+255),w,b
  3328  000CA2                     
  3329                           ; BSR set to: 0
  3330  000CA2  0012               	return		;funcret
  3331  000CA4  FFFF               	dw	65535	; errata NOP
  3332  000CA6                     __end_of_executeData:
  3333                           	callstack 0
  3334                           
  3335 ;; *************** function _touchTherm *****************
  3336 ;; Defined at:
  3337 ;;		line 430 in file "motors.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;		None
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;		None
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  1    wreg      unsigned char 
  3344 ;; Registers used:
  3345 ;;		wreg, status,2, status,0, cstack
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3351 ;;      Params:         0       0       0       0       0       0       0
  3352 ;;      Locals:         0       0       0       0       0       0       0
  3353 ;;      Temps:          0       0       0       0       0       0       0
  3354 ;;      Totals:         0       0       0       0       0       0       0
  3355 ;;Total ram usage:        0 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:    5
  3358 ;; This function calls:
  3359 ;;		_resetStep
  3360 ;;		_resetTherm
  3361 ;;		_returnTherm
  3362 ;;		_setDirection
  3363 ;;		_startADC
  3364 ;;		_stepMade
  3365 ;;		_stopADC
  3366 ;; This function is called by:
  3367 ;;		_executeData
  3368 ;; This function uses a non-reentrant model
  3369 ;;
  3370                           
  3371                           	psect	text18
  3372  0016EE                     __ptext18:
  3373                           	callstack 0
  3374  0016EE                     _touchTherm:
  3375                           	callstack 0
  3376  0016EE  FFFF               	dw	65535	; assembler added errata NOP
  3377  0016F0                     
  3378                           ;motors.c: 433:     setDirection(1, 2);
  3379  0016F0  0E02               	movlw	2
  3380  0016F2  6E1A               	movwf	setDirection@motor^0,c
  3381  0016F4  0E01               	movlw	1
  3382  0016F6  ECFC  F00E         	call	_setDirection
  3383  0016FA                     
  3384                           ;motors.c: 435:     T2CONbits.TMR2ON = 1;
  3385  0016FA  84CA               	bsf	202,2,c	;volatile
  3386  0016FC                     
  3387                           ;motors.c: 437:     tm0Error = 0;
  3388  0016FC  0E00               	movlw	0
  3389  0016FE  6E53               	movwf	(_tm0Error+1)^0,c
  3390  001700  0E00               	movlw	0
  3391  001702  6E52               	movwf	_tm0Error^0,c
  3392  001704                     
  3393                           ;motors.c: 438:     tm0Limit = 200;
  3394  001704  0EC8               	movlw	200
  3395  001706  6E5D               	movwf	_tm0Limit^0,c
  3396  001708                     
  3397                           ;motors.c: 439:     T0CONbits.TMR0ON = 1;
  3398  001708  8ED5               	bsf	213,7,c	;volatile
  3399  00170A                     
  3400                           ;motors.c: 442:     startADC();
  3401  00170A  ECAD  F010         	call	_startADC	;wreg free
  3402                           
  3403                           ;motors.c: 445:     while(!returnTherm() || PORTDbits.RD7){
  3404  00170E  EFBA  F00B         	goto	l3375
  3405  001712                     l3365:
  3406  001712  FFFF               	dw	65535	; assembler added errata NOP
  3407                           
  3408                           ;motors.c: 448:         if(tm0Error){
  3409  001714  5052               	movf	_tm0Error^0,w,c
  3410  001716  1053               	iorwf	(_tm0Error+1)^0,w,c
  3411  001718  B4D8               	btfsc	status,2,c
  3412  00171A  EF91  F00B         	goto	u2811
  3413  00171E  EF94  F00B         	goto	u2810
  3414  001722                     u2811:
  3415  001722  FFFF               	dw	65535	; assembler added errata NOP
  3416  001724  EF9C  F00B         	goto	l178
  3417  001728                     u2810:
  3418  001728  FFFF               	dw	65535	; assembler added errata NOP
  3419  00172A                     
  3420                           ;motors.c: 450:             LATCbits.LATC2 = 0;
  3421  00172A  948B               	bcf	139,2,c	;volatile
  3422  00172C                     
  3423                           ;motors.c: 451:             tm0Error = 6;
  3424  00172C  0E00               	movlw	0
  3425  00172E  6E53               	movwf	(_tm0Error+1)^0,c
  3426  001730  0E06               	movlw	6
  3427  001732  6E52               	movwf	_tm0Error^0,c
  3428                           
  3429                           ;motors.c: 452:             break;
  3430  001734  EFD0  F00B         	goto	l3379
  3431  001738                     l178:
  3432  001738  FFFF               	dw	65535	; assembler added errata NOP
  3433                           
  3434                           ;motors.c: 456:         LATCbits.LATC2 = 1;
  3435  00173A  848B               	bsf	139,2,c	;volatile
  3436  00173C                     l3371:
  3437  00173C  FFFF               	dw	65535	; assembler added errata NOP
  3438  00173E  EC3A  F010         	call	_stepMade	;wreg free
  3439  001742  501A               	movf	?_stepMade^0,w,c
  3440  001744  101B               	iorwf	(?_stepMade+1)^0,w,c
  3441  001746  B4D8               	btfsc	status,2,c
  3442  001748  EFA8  F00B         	goto	u2821
  3443  00174C  EFAB  F00B         	goto	u2820
  3444  001750                     u2821:
  3445  001750  FFFF               	dw	65535	; assembler added errata NOP
  3446  001752  EF9E  F00B         	goto	l3371
  3447  001756                     u2820:
  3448  001756  FFFF               	dw	65535	; assembler added errata NOP
  3449  001758                     
  3450                           ;motors.c: 462:         LATCbits.LATC2 = 0;
  3451  001758  948B               	bcf	139,2,c	;volatile
  3452  00175A                     l3373:
  3453  00175A  FFFF               	dw	65535	; assembler added errata NOP
  3454  00175C  EC3A  F010         	call	_stepMade	;wreg free
  3455  001760  501A               	movf	?_stepMade^0,w,c
  3456  001762  101B               	iorwf	(?_stepMade+1)^0,w,c
  3457  001764  B4D8               	btfsc	status,2,c
  3458  001766  EFB7  F00B         	goto	u2831
  3459  00176A  EFBA  F00B         	goto	u2830
  3460  00176E                     u2831:
  3461  00176E  FFFF               	dw	65535	; assembler added errata NOP
  3462  001770  EFAD  F00B         	goto	l3373
  3463  001774                     u2830:
  3464  001774                     l3375:
  3465  001774  FFFF               	dw	65535	; assembler added errata NOP
  3466                           
  3467                           ;motors.c: 445:     while(!returnTherm() || PORTDbits.RD7){
  3468  001776  EC69  F010         	call	_returnTherm	;wreg free
  3469  00177A  501A               	movf	?_returnTherm^0,w,c
  3470  00177C  101B               	iorwf	(?_returnTherm+1)^0,w,c
  3471  00177E  B4D8               	btfsc	status,2,c
  3472  001780  EFC4  F00B         	goto	u2841
  3473  001784  EFC7  F00B         	goto	u2840
  3474  001788                     u2841:
  3475  001788  FFFF               	dw	65535	; assembler added errata NOP
  3476  00178A  EF89  F00B         	goto	l3365
  3477  00178E                     u2840:
  3478  00178E  FFFF               	dw	65535	; assembler added errata NOP
  3479  001790  BE83               	btfsc	131,7,c	;volatile
  3480  001792  EFCD  F00B         	goto	u2851
  3481  001796  EFD0  F00B         	goto	u2850
  3482  00179A                     u2851:
  3483  00179A  FFFF               	dw	65535	; assembler added errata NOP
  3484  00179C  EF89  F00B         	goto	l3365
  3485  0017A0                     u2850:
  3486  0017A0                     l3379:
  3487  0017A0  FFFF               	dw	65535	; assembler added errata NOP
  3488                           
  3489                           ;motors.c: 469:     stopADC();
  3490  0017A2  ECA9  F010         	call	_stopADC	;wreg free
  3491  0017A6                     
  3492                           ;motors.c: 472:     resetTherm();
  3493  0017A6  EC7B  F010         	call	_resetTherm	;wreg free
  3494  0017AA                     
  3495                           ;motors.c: 475:     T0CONbits.TMR0ON = 0;
  3496  0017AA  9ED5               	bcf	213,7,c	;volatile
  3497  0017AC                     
  3498                           ;motors.c: 476:     T2CONbits.TMR2ON = 0;
  3499  0017AC  94CA               	bcf	202,2,c	;volatile
  3500                           
  3501                           ;motors.c: 478:     TMR0 = 0;
  3502  0017AE  0E00               	movlw	0
  3503  0017B0  6ED7               	movwf	215,c	;volatile
  3504  0017B2  0E00               	movlw	0
  3505  0017B4  6ED6               	movwf	214,c	;volatile
  3506                           
  3507                           ;motors.c: 479:     TMR2 = 0;
  3508  0017B6  0E00               	movlw	0
  3509  0017B8  6ECC               	movwf	204,c	;volatile
  3510  0017BA                     
  3511                           ;motors.c: 482:     resetStep();
  3512  0017BA  EC85  F010         	call	_resetStep	;wreg free
  3513  0017BE                     
  3514                           ;motors.c: 485:     if(PORTDbits.RD7){
  3515  0017BE  AE83               	btfss	131,7,c	;volatile
  3516  0017C0  EFE4  F00B         	goto	u2861
  3517  0017C4  EFE7  F00B         	goto	u2860
  3518  0017C8                     u2861:
  3519  0017C8  FFFF               	dw	65535	; assembler added errata NOP
  3520  0017CA  EFEC  F00B         	goto	l186
  3521  0017CE                     u2860:
  3522  0017CE  FFFF               	dw	65535	; assembler added errata NOP
  3523  0017D0                     
  3524                           ;motors.c: 486:         tm0Error = 2;
  3525  0017D0  0E00               	movlw	0
  3526  0017D2  6E53               	movwf	(_tm0Error+1)^0,c
  3527  0017D4  0E02               	movlw	2
  3528  0017D6  6E52               	movwf	_tm0Error^0,c
  3529  0017D8                     l186:
  3530  0017D8  FFFF               	dw	65535	; assembler added errata NOP
  3531                           
  3532                           ;motors.c: 489:     return(tm0Error);
  3533  0017DA  5052               	movf	_tm0Error^0,w,c
  3534  0017DC  0012               	return		;funcret
  3535  0017DE  FFFF               	dw	65535	; errata NOP
  3536  0017E0                     __end_of_touchTherm:
  3537                           	callstack 0
  3538                           
  3539 ;; *************** function _returnTherm *****************
  3540 ;; Defined at:
  3541 ;;		line 57 in file "adc.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;		None
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;		None
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  2   25[COMRAM] unsigned int 
  3548 ;; Registers used:
  3549 ;;		None
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3555 ;;      Params:         2       0       0       0       0       0       0
  3556 ;;      Locals:         0       0       0       0       0       0       0
  3557 ;;      Temps:          0       0       0       0       0       0       0
  3558 ;;      Totals:         2       0       0       0       0       0       0
  3559 ;;Total ram usage:        2 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    4
  3562 ;; This function calls:
  3563 ;;		Nothing
  3564 ;; This function is called by:
  3565 ;;		_touchTherm
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           	psect	text19
  3570  0020D2                     __ptext19:
  3571                           	callstack 0
  3572  0020D2                     _returnTherm:
  3573                           	callstack 0
  3574  0020D2  FFFF               	dw	65535	; assembler added errata NOP
  3575  0020D4                     
  3576                           ;adc.c: 58:     return therm_rel;
  3577  0020D4  C059  F01A         	movff	_therm_rel,?_returnTherm	;volatile
  3578  0020D8  6A1B               	clrf	(?_returnTherm+1)^0,c
  3579  0020DA  0012               	return		;funcret
  3580  0020DC  FFFF               	dw	65535	; errata NOP
  3581  0020DE                     __end_of_returnTherm:
  3582                           	callstack 0
  3583                           
  3584 ;; *************** function _resetTherm *****************
  3585 ;; Defined at:
  3586 ;;		line 71 in file "adc.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;		None
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;		None
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  1    wreg      void 
  3593 ;; Registers used:
  3594 ;;		wreg, status,2
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3600 ;;      Params:         0       0       0       0       0       0       0
  3601 ;;      Locals:         0       0       0       0       0       0       0
  3602 ;;      Temps:          0       0       0       0       0       0       0
  3603 ;;      Totals:         0       0       0       0       0       0       0
  3604 ;;Total ram usage:        0 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    4
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_touchTherm
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           	psect	text20
  3615  0020F6                     __ptext20:
  3616                           	callstack 0
  3617  0020F6                     _resetTherm:
  3618                           	callstack 0
  3619  0020F6  FFFF               	dw	65535	; assembler added errata NOP
  3620  0020F8                     
  3621                           ;adc.c: 72:     therm_rel = 0;
  3622  0020F8  0E00               	movlw	0
  3623  0020FA  6E59               	movwf	_therm_rel^0,c	;volatile
  3624  0020FC  0012               	return		;funcret
  3625  0020FE  FFFF               	dw	65535	; errata NOP
  3626  002100                     __end_of_resetTherm:
  3627                           	callstack 0
  3628                           
  3629 ;; *************** function _touchObject *****************
  3630 ;; Defined at:
  3631 ;;		line 359 in file "motors.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;		None
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;		None
  3636 ;; Return value:  Size  Location     Type
  3637 ;;                  1    wreg      unsigned char 
  3638 ;; Registers used:
  3639 ;;		wreg, status,2, status,0, cstack
  3640 ;; Tracked objects:
  3641 ;;		On entry : 0/0
  3642 ;;		On exit  : 0/0
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3645 ;;      Params:         0       0       0       0       0       0       0
  3646 ;;      Locals:         0       0       0       0       0       0       0
  3647 ;;      Temps:          0       0       0       0       0       0       0
  3648 ;;      Totals:         0       0       0       0       0       0       0
  3649 ;;Total ram usage:        0 bytes
  3650 ;; Hardware stack levels used:    1
  3651 ;; Hardware stack levels required when called:    5
  3652 ;; This function calls:
  3653 ;;		_resetStep
  3654 ;;		_resetTouch
  3655 ;;		_returnTouch
  3656 ;;		_setDirection
  3657 ;;		_startADC
  3658 ;;		_stepMade
  3659 ;;		_stopADC
  3660 ;; This function is called by:
  3661 ;;		_executeData
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           	psect	text21
  3666  0017E0                     __ptext21:
  3667                           	callstack 0
  3668  0017E0                     _touchObject:
  3669                           	callstack 0
  3670  0017E0  FFFF               	dw	65535	; assembler added errata NOP
  3671  0017E2                     
  3672                           ;motors.c: 362:     setDirection(1, 2);
  3673  0017E2  0E02               	movlw	2
  3674  0017E4  6E1A               	movwf	setDirection@motor^0,c
  3675  0017E6  0E01               	movlw	1
  3676  0017E8  ECFC  F00E         	call	_setDirection
  3677  0017EC                     
  3678                           ;motors.c: 364:     T2CONbits.TMR2ON = 1;
  3679  0017EC  84CA               	bsf	202,2,c	;volatile
  3680  0017EE                     
  3681                           ;motors.c: 366:     tm0Error = 0;
  3682  0017EE  0E00               	movlw	0
  3683  0017F0  6E53               	movwf	(_tm0Error+1)^0,c
  3684  0017F2  0E00               	movlw	0
  3685  0017F4  6E52               	movwf	_tm0Error^0,c
  3686  0017F6                     
  3687                           ;motors.c: 367:     tm0Limit = 200;
  3688  0017F6  0EC8               	movlw	200
  3689  0017F8  6E5D               	movwf	_tm0Limit^0,c
  3690  0017FA                     
  3691                           ;motors.c: 368:     T0CONbits.TMR0ON = 1;
  3692  0017FA  8ED5               	bsf	213,7,c	;volatile
  3693  0017FC                     
  3694                           ;motors.c: 371:     startADC();
  3695  0017FC  ECAD  F010         	call	_startADC	;wreg free
  3696                           
  3697                           ;motors.c: 374:     while(!returnTouch() || PORTDbits.RD7){
  3698  001800  EF33  F00C         	goto	l3333
  3699  001804                     l3323:
  3700  001804  FFFF               	dw	65535	; assembler added errata NOP
  3701                           
  3702                           ;motors.c: 377:         if(tm0Error){
  3703  001806  5052               	movf	_tm0Error^0,w,c
  3704  001808  1053               	iorwf	(_tm0Error+1)^0,w,c
  3705  00180A  B4D8               	btfsc	status,2,c
  3706  00180C  EF0A  F00C         	goto	u2751
  3707  001810  EF0D  F00C         	goto	u2750
  3708  001814                     u2751:
  3709  001814  FFFF               	dw	65535	; assembler added errata NOP
  3710  001816  EF15  F00C         	goto	l164
  3711  00181A                     u2750:
  3712  00181A  FFFF               	dw	65535	; assembler added errata NOP
  3713  00181C                     
  3714                           ;motors.c: 379:             LATCbits.LATC2 = 0;
  3715  00181C  948B               	bcf	139,2,c	;volatile
  3716  00181E                     
  3717                           ;motors.c: 380:             tm0Error = 6;
  3718  00181E  0E00               	movlw	0
  3719  001820  6E53               	movwf	(_tm0Error+1)^0,c
  3720  001822  0E06               	movlw	6
  3721  001824  6E52               	movwf	_tm0Error^0,c
  3722                           
  3723                           ;motors.c: 381:             break;
  3724  001826  EF49  F00C         	goto	l3337
  3725  00182A                     l164:
  3726  00182A  FFFF               	dw	65535	; assembler added errata NOP
  3727                           
  3728                           ;motors.c: 385:         LATCbits.LATC2 = 1;
  3729  00182C  848B               	bsf	139,2,c	;volatile
  3730  00182E                     l3329:
  3731  00182E  FFFF               	dw	65535	; assembler added errata NOP
  3732  001830  EC3A  F010         	call	_stepMade	;wreg free
  3733  001834  501A               	movf	?_stepMade^0,w,c
  3734  001836  101B               	iorwf	(?_stepMade+1)^0,w,c
  3735  001838  B4D8               	btfsc	status,2,c
  3736  00183A  EF21  F00C         	goto	u2761
  3737  00183E  EF24  F00C         	goto	u2760
  3738  001842                     u2761:
  3739  001842  FFFF               	dw	65535	; assembler added errata NOP
  3740  001844  EF17  F00C         	goto	l3329
  3741  001848                     u2760:
  3742  001848  FFFF               	dw	65535	; assembler added errata NOP
  3743  00184A                     
  3744                           ;motors.c: 391:         LATCbits.LATC2 = 0;
  3745  00184A  948B               	bcf	139,2,c	;volatile
  3746  00184C                     l3331:
  3747  00184C  FFFF               	dw	65535	; assembler added errata NOP
  3748  00184E  EC3A  F010         	call	_stepMade	;wreg free
  3749  001852  501A               	movf	?_stepMade^0,w,c
  3750  001854  101B               	iorwf	(?_stepMade+1)^0,w,c
  3751  001856  B4D8               	btfsc	status,2,c
  3752  001858  EF30  F00C         	goto	u2771
  3753  00185C  EF33  F00C         	goto	u2770
  3754  001860                     u2771:
  3755  001860  FFFF               	dw	65535	; assembler added errata NOP
  3756  001862  EF26  F00C         	goto	l3331
  3757  001866                     u2770:
  3758  001866                     l3333:
  3759  001866  FFFF               	dw	65535	; assembler added errata NOP
  3760                           
  3761                           ;motors.c: 374:     while(!returnTouch() || PORTDbits.RD7){
  3762  001868  EC6F  F010         	call	_returnTouch	;wreg free
  3763  00186C  501A               	movf	?_returnTouch^0,w,c
  3764  00186E  101B               	iorwf	(?_returnTouch+1)^0,w,c
  3765  001870  B4D8               	btfsc	status,2,c
  3766  001872  EF3D  F00C         	goto	u2781
  3767  001876  EF40  F00C         	goto	u2780
  3768  00187A                     u2781:
  3769  00187A  FFFF               	dw	65535	; assembler added errata NOP
  3770  00187C  EF02  F00C         	goto	l3323
  3771  001880                     u2780:
  3772  001880  FFFF               	dw	65535	; assembler added errata NOP
  3773  001882  BE83               	btfsc	131,7,c	;volatile
  3774  001884  EF46  F00C         	goto	u2791
  3775  001888  EF49  F00C         	goto	u2790
  3776  00188C                     u2791:
  3777  00188C  FFFF               	dw	65535	; assembler added errata NOP
  3778  00188E  EF02  F00C         	goto	l3323
  3779  001892                     u2790:
  3780  001892                     l3337:
  3781  001892  FFFF               	dw	65535	; assembler added errata NOP
  3782                           
  3783                           ;motors.c: 398:     stopADC();
  3784  001894  ECA9  F010         	call	_stopADC	;wreg free
  3785  001898                     
  3786                           ;motors.c: 401:     resetTouch();
  3787  001898  EC80  F010         	call	_resetTouch	;wreg free
  3788  00189C                     
  3789                           ;motors.c: 404:     T0CONbits.TMR0ON = 0;
  3790  00189C  9ED5               	bcf	213,7,c	;volatile
  3791  00189E                     
  3792                           ;motors.c: 405:     T2CONbits.TMR2ON = 0;
  3793  00189E  94CA               	bcf	202,2,c	;volatile
  3794                           
  3795                           ;motors.c: 407:     TMR0 = 0;
  3796  0018A0  0E00               	movlw	0
  3797  0018A2  6ED7               	movwf	215,c	;volatile
  3798  0018A4  0E00               	movlw	0
  3799  0018A6  6ED6               	movwf	214,c	;volatile
  3800                           
  3801                           ;motors.c: 408:     TMR2 = 0;
  3802  0018A8  0E00               	movlw	0
  3803  0018AA  6ECC               	movwf	204,c	;volatile
  3804  0018AC                     
  3805                           ;motors.c: 411:     resetStep();
  3806  0018AC  EC85  F010         	call	_resetStep	;wreg free
  3807  0018B0                     
  3808                           ;motors.c: 414:     if(PORTDbits.RD7){
  3809  0018B0  AE83               	btfss	131,7,c	;volatile
  3810  0018B2  EF5D  F00C         	goto	u2801
  3811  0018B6  EF60  F00C         	goto	u2800
  3812  0018BA                     u2801:
  3813  0018BA  FFFF               	dw	65535	; assembler added errata NOP
  3814  0018BC  EF65  F00C         	goto	l172
  3815  0018C0                     u2800:
  3816  0018C0  FFFF               	dw	65535	; assembler added errata NOP
  3817  0018C2                     
  3818                           ;motors.c: 415:         tm0Error = 2;
  3819  0018C2  0E00               	movlw	0
  3820  0018C4  6E53               	movwf	(_tm0Error+1)^0,c
  3821  0018C6  0E02               	movlw	2
  3822  0018C8  6E52               	movwf	_tm0Error^0,c
  3823  0018CA                     l172:
  3824  0018CA  FFFF               	dw	65535	; assembler added errata NOP
  3825                           
  3826                           ;motors.c: 418:     return(tm0Error);
  3827  0018CC  5052               	movf	_tm0Error^0,w,c
  3828  0018CE  0012               	return		;funcret
  3829  0018D0  FFFF               	dw	65535	; errata NOP
  3830  0018D2                     __end_of_touchObject:
  3831                           	callstack 0
  3832                           
  3833 ;; *************** function _stopADC *****************
  3834 ;; Defined at:
  3835 ;;		line 43 in file "adc.c"
  3836 ;; Parameters:    Size  Location     Type
  3837 ;;		None
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;		None
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  1    wreg      void 
  3842 ;; Registers used:
  3843 ;;		None
  3844 ;; Tracked objects:
  3845 ;;		On entry : 0/0
  3846 ;;		On exit  : 0/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3849 ;;      Params:         0       0       0       0       0       0       0
  3850 ;;      Locals:         0       0       0       0       0       0       0
  3851 ;;      Temps:          0       0       0       0       0       0       0
  3852 ;;      Totals:         0       0       0       0       0       0       0
  3853 ;;Total ram usage:        0 bytes
  3854 ;; Hardware stack levels used:    1
  3855 ;; Hardware stack levels required when called:    4
  3856 ;; This function calls:
  3857 ;;		Nothing
  3858 ;; This function is called by:
  3859 ;;		_touchObject
  3860 ;;		_touchTherm
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           	psect	text22
  3865  002152                     __ptext22:
  3866                           	callstack 0
  3867  002152                     _stopADC:
  3868                           	callstack 0
  3869  002152  FFFF               	dw	65535	; assembler added errata NOP
  3870  002154                     
  3871                           ;adc.c: 44:     ADCON0bits.ADON = 0;
  3872  002154  90C2               	bcf	194,0,c	;volatile
  3873  002156  0012               	return		;funcret
  3874  002158  FFFF               	dw	65535	; errata NOP
  3875  00215A                     __end_of_stopADC:
  3876                           	callstack 0
  3877                           
  3878 ;; *************** function _startADC *****************
  3879 ;; Defined at:
  3880 ;;		line 36 in file "adc.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;		None
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;		None
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  1    wreg      void 
  3887 ;; Registers used:
  3888 ;;		None
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3894 ;;      Params:         0       0       0       0       0       0       0
  3895 ;;      Locals:         0       0       0       0       0       0       0
  3896 ;;      Temps:          0       0       0       0       0       0       0
  3897 ;;      Totals:         0       0       0       0       0       0       0
  3898 ;;Total ram usage:        0 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; Hardware stack levels required when called:    4
  3901 ;; This function calls:
  3902 ;;		Nothing
  3903 ;; This function is called by:
  3904 ;;		_touchObject
  3905 ;;		_touchTherm
  3906 ;; This function uses a non-reentrant model
  3907 ;;
  3908                           
  3909                           	psect	text23
  3910  00215A                     __ptext23:
  3911                           	callstack 0
  3912  00215A                     _startADC:
  3913                           	callstack 0
  3914  00215A  FFFF               	dw	65535	; assembler added errata NOP
  3915  00215C                     
  3916                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  3917  00215C  80C2               	bsf	194,0,c	;volatile
  3918  00215E  0012               	return		;funcret
  3919  002160  FFFF               	dw	65535	; errata NOP
  3920  002162                     __end_of_startADC:
  3921                           	callstack 0
  3922                           
  3923 ;; *************** function _returnTouch *****************
  3924 ;; Defined at:
  3925 ;;		line 50 in file "adc.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;		None
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;		None
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  2   25[COMRAM] unsigned int 
  3932 ;; Registers used:
  3933 ;;		None
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3939 ;;      Params:         2       0       0       0       0       0       0
  3940 ;;      Locals:         0       0       0       0       0       0       0
  3941 ;;      Temps:          0       0       0       0       0       0       0
  3942 ;;      Totals:         2       0       0       0       0       0       0
  3943 ;;Total ram usage:        2 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    4
  3946 ;; This function calls:
  3947 ;;		Nothing
  3948 ;; This function is called by:
  3949 ;;		_touchObject
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           	psect	text24
  3954  0020DE                     __ptext24:
  3955                           	callstack 0
  3956  0020DE                     _returnTouch:
  3957                           	callstack 0
  3958  0020DE  FFFF               	dw	65535	; assembler added errata NOP
  3959  0020E0                     
  3960                           ;adc.c: 51:     return touch_rel;
  3961  0020E0  C05A  F01A         	movff	_touch_rel,?_returnTouch	;volatile
  3962  0020E4  6A1B               	clrf	(?_returnTouch+1)^0,c
  3963  0020E6  0012               	return		;funcret
  3964  0020E8  FFFF               	dw	65535	; errata NOP
  3965  0020EA                     __end_of_returnTouch:
  3966                           	callstack 0
  3967                           
  3968 ;; *************** function _resetTouch *****************
  3969 ;; Defined at:
  3970 ;;		line 64 in file "adc.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;		None
  3973 ;; Auto vars:     Size  Location     Type
  3974 ;;		None
  3975 ;; Return value:  Size  Location     Type
  3976 ;;                  1    wreg      void 
  3977 ;; Registers used:
  3978 ;;		wreg, status,2
  3979 ;; Tracked objects:
  3980 ;;		On entry : 0/0
  3981 ;;		On exit  : 0/0
  3982 ;;		Unchanged: 0/0
  3983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3984 ;;      Params:         0       0       0       0       0       0       0
  3985 ;;      Locals:         0       0       0       0       0       0       0
  3986 ;;      Temps:          0       0       0       0       0       0       0
  3987 ;;      Totals:         0       0       0       0       0       0       0
  3988 ;;Total ram usage:        0 bytes
  3989 ;; Hardware stack levels used:    1
  3990 ;; Hardware stack levels required when called:    4
  3991 ;; This function calls:
  3992 ;;		Nothing
  3993 ;; This function is called by:
  3994 ;;		_touchObject
  3995 ;; This function uses a non-reentrant model
  3996 ;;
  3997                           
  3998                           	psect	text25
  3999  002100                     __ptext25:
  4000                           	callstack 0
  4001  002100                     _resetTouch:
  4002                           	callstack 0
  4003  002100  FFFF               	dw	65535	; assembler added errata NOP
  4004  002102                     
  4005                           ;adc.c: 65:     touch_rel = 0;
  4006  002102  0E00               	movlw	0
  4007  002104  6E5A               	movwf	_touch_rel^0,c	;volatile
  4008  002106  0012               	return		;funcret
  4009  002108  FFFF               	dw	65535	; errata NOP
  4010  00210A                     __end_of_resetTouch:
  4011                           	callstack 0
  4012                           
  4013 ;; *************** function _rotateObj *****************
  4014 ;; Defined at:
  4015 ;;		line 550 in file "motors.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;  rotAngle        1    wreg     unsigned char 
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;  rotAngle        1   13[BANK0 ] unsigned char 
  4020 ;;  totStep         2   14[BANK0 ] int 
  4021 ;;  i               1   16[BANK0 ] unsigned char 
  4022 ;; Return value:  Size  Location     Type
  4023 ;;                  1    wreg      void 
  4024 ;; Registers used:
  4025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4031 ;;      Params:         0       0       0       0       0       0       0
  4032 ;;      Locals:         0       4       0       0       0       0       0
  4033 ;;      Temps:          0       3       0       0       0       0       0
  4034 ;;      Totals:         0       7       0       0       0       0       0
  4035 ;;Total ram usage:        7 bytes
  4036 ;; Hardware stack levels used:    1
  4037 ;; Hardware stack levels required when called:    5
  4038 ;; This function calls:
  4039 ;;		___fldiv
  4040 ;;		___fltol
  4041 ;;		___xxtofl
  4042 ;; This function is called by:
  4043 ;;		_executeData
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           	psect	text26
  4048  001A7A                     __ptext26:
  4049                           	callstack 0
  4050  001A7A                     _rotateObj:
  4051                           	callstack 0
  4052  001A7A  FFFF               	dw	65535	; assembler added errata NOP
  4053                           
  4054                           ;incstack = 0
  4055                           ;rotateObj@rotAngle stored from wreg
  4056  001A7C  0100               	movlb	0	; () banked
  4057  001A7E  6FE1               	movwf	rotateObj@rotAngle& (0+255),b
  4058  001A80                     
  4059                           ;motors.c: 551:     static const float stepAngle = 0.08789;;motors.c: 552:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 553:     unsigned char i;
      +                          ;motors.c: 554:     int totStep = rotAngle/stepAngle;
  4060  001A80  0EAC               	movlw	172
  4061  001A82  6E2C               	movwf	___fldiv@a^0,c
  4062  001A84  0EFF               	movlw	255
  4063  001A86  6E2D               	movwf	(___fldiv@a+1)^0,c
  4064  001A88  0EB3               	movlw	179
  4065  001A8A  6E2E               	movwf	(___fldiv@a+2)^0,c
  4066  001A8C  0E3D               	movlw	61
  4067  001A8E  6E2F               	movwf	(___fldiv@a+3)^0,c
  4068  001A90  0100               	movlb	0	; () banked
  4069  001A92  51E1               	movf	rotateObj@rotAngle& (0+255),w,b
  4070  001A94  6E1A               	movwf	___xxtofl@val^0,c
  4071  001A96  6A1B               	clrf	(___xxtofl@val+1)^0,c
  4072  001A98  6A1C               	clrf	(___xxtofl@val+2)^0,c
  4073  001A9A  6A1D               	clrf	(___xxtofl@val+3)^0,c
  4074  001A9C  0E01               	movlw	1
  4075  001A9E  EC53  F006         	call	___xxtofl
  4076  001AA2  C01A  F028         	movff	?___xxtofl,___fldiv@b
  4077  001AA6  C01B  F029         	movff	?___xxtofl+1,___fldiv@b+1
  4078  001AAA  C01C  F02A         	movff	?___xxtofl+2,___fldiv@b+2
  4079  001AAE  C01D  F02B         	movff	?___xxtofl+3,___fldiv@b+3
  4080  001AB2  EC0B  F003         	call	___fldiv	;wreg free
  4081  001AB6  C028  F0D4         	movff	?___fldiv,___fltol@f1
  4082  001ABA  C029  F0D5         	movff	?___fldiv+1,___fltol@f1+1
  4083  001ABE  C02A  F0D6         	movff	?___fldiv+2,___fltol@f1+2
  4084  001AC2  C02B  F0D7         	movff	?___fldiv+3,___fltol@f1+3
  4085  001AC6  EC3D  F009         	call	___fltol	;wreg free
  4086  001ACA  C0D4  F0E2         	movff	?___fltol,rotateObj@totStep
  4087  001ACE  C0D5  F0E3         	movff	?___fltol+1,rotateObj@totStep+1
  4088  001AD2                     
  4089                           ;motors.c: 557:     for(i = 0; i < totStep; i++){
  4090  001AD2  0E00               	movlw	0
  4091  001AD4  0100               	movlb	0	; () banked
  4092  001AD6  6FE4               	movwf	rotateObj@i& (0+255),b
  4093  001AD8  EF83  F00D         	goto	l3433
  4094  001ADC                     l3427:
  4095  001ADC  FFFF               	dw	65535	; assembler added errata NOP
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;motors.c: 559:         LATD &= 0xC3;
  4099  001ADE  0EC3               	movlw	195
  4100  001AE0  168C               	andwf	140,f,c	;volatile
  4101  001AE2                     
  4102                           ; BSR set to: 0
  4103                           ;motors.c: 561:         LATD |= rotSequence[i%4] << 2;
  4104  001AE2  51E4               	movf	rotateObj@i& (0+255),w,b
  4105  001AE4  0B03               	andlw	3
  4106  001AE6  6FDE               	movwf	??_rotateObj& (0+255),b
  4107  001AE8  6BDF               	clrf	(??_rotateObj+1)& (0+255),b
  4108  001AEA  0E5E               	movlw	low rotateObj@rotSequence
  4109  001AEC  25DE               	addwf	??_rotateObj& (0+255),w,b
  4110  001AEE  6ED9               	movwf	fsr2l,c
  4111  001AF0  0E00               	movlw	high rotateObj@rotSequence
  4112  001AF2  21DF               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4113  001AF4  6EDA               	movwf	fsr2h,c
  4114  001AF6  50DF               	movf	indf2,w,c
  4115  001AF8  6FE0               	movwf	(??_rotateObj+2)& (0+255),b
  4116  001AFA  90D8               	bcf	status,0,c
  4117  001AFC  37E0               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4118  001AFE  90D8               	bcf	status,0,c
  4119  001B00  35E0               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4120  001B02  128C               	iorwf	140,f,c	;volatile
  4121  001B04                     
  4122                           ; BSR set to: 0
  4123                           ;motors.c: 562:     }
  4124  001B04  2BE4               	incf	rotateObj@i& (0+255),f,b
  4125  001B06                     l3433:
  4126  001B06  FFFF               	dw	65535	; assembler added errata NOP
  4127                           
  4128                           ; BSR set to: 0
  4129  001B08  51E4               	movf	rotateObj@i& (0+255),w,b
  4130  001B0A  6FDE               	movwf	??_rotateObj& (0+255),b
  4131  001B0C  6BDF               	clrf	(??_rotateObj+1)& (0+255),b
  4132  001B0E  51E2               	movf	rotateObj@totStep& (0+255),w,b
  4133  001B10  5DDE               	subwf	??_rotateObj& (0+255),w,b
  4134  001B12  51DF               	movf	(??_rotateObj+1)& (0+255),w,b
  4135  001B14  0A80               	xorlw	128
  4136  001B16  6FE0               	movwf	(??_rotateObj+2)& (0+255),b
  4137  001B18  51E3               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4138  001B1A  0A80               	xorlw	128
  4139  001B1C  59E0               	subwfb	(??_rotateObj+2)& (0+255),w,b
  4140  001B1E  A0D8               	btfss	status,0,c
  4141  001B20  EF94  F00D         	goto	u2911
  4142  001B24  EF97  F00D         	goto	u2910
  4143  001B28                     u2911:
  4144  001B28  FFFF               	dw	65535	; assembler added errata NOP
  4145  001B2A  EF6E  F00D         	goto	l3427
  4146  001B2E                     u2910:
  4147  001B2E  FFFF               	dw	65535	; assembler added errata NOP
  4148  001B30                     
  4149                           ; BSR set to: 0
  4150  001B30  0012               	return		;funcret
  4151  001B32  FFFF               	dw	65535	; errata NOP
  4152  001B34                     __end_of_rotateObj:
  4153                           	callstack 0
  4154                           
  4155 ;; *************** function ___xxtofl *****************
  4156 ;; Defined at:
  4157 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;  sign            1    wreg     unsigned char 
  4160 ;;  val             4   25[COMRAM] long 
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  sign            1   33[COMRAM] unsigned char 
  4163 ;;  arg             4   35[COMRAM] unsigned long 
  4164 ;;  exp             1   34[COMRAM] unsigned char 
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  4   25[COMRAM] unsigned char 
  4167 ;; Registers used:
  4168 ;;		wreg, status,2, status,0
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4174 ;;      Params:         4       0       0       0       0       0       0
  4175 ;;      Locals:         6       0       0       0       0       0       0
  4176 ;;      Temps:          4       0       0       0       0       0       0
  4177 ;;      Totals:        14       0       0       0       0       0       0
  4178 ;;Total ram usage:       14 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    4
  4181 ;; This function calls:
  4182 ;;		Nothing
  4183 ;; This function is called by:
  4184 ;;		_rotateObj
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           	psect	text27
  4189  000CA6                     __ptext27:
  4190                           	callstack 0
  4191  000CA6                     ___xxtofl:
  4192                           	callstack 0
  4193  000CA6  FFFF               	dw	65535	; assembler added errata NOP
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;incstack = 0
  4197                           ;___xxtofl@sign stored from wreg
  4198  000CA8  6E22               	movwf	___xxtofl@sign^0,c
  4199  000CAA  5022               	movf	___xxtofl@sign^0,w,c
  4200  000CAC  B4D8               	btfsc	status,2,c
  4201  000CAE  EF5B  F006         	goto	u2541
  4202  000CB2  EF5E  F006         	goto	u2540
  4203  000CB6                     u2541:
  4204  000CB6  FFFF               	dw	65535	; assembler added errata NOP
  4205  000CB8  EF83  F006         	goto	l1191
  4206  000CBC                     u2540:
  4207  000CBC  FFFF               	dw	65535	; assembler added errata NOP
  4208  000CBE  BE1D               	btfsc	(___xxtofl@val+3)^0,7,c
  4209  000CC0  EF67  F006         	goto	u2550
  4210  000CC4  EF64  F006         	goto	u2551
  4211  000CC8                     u2551:
  4212  000CC8  FFFF               	dw	65535	; assembler added errata NOP
  4213  000CCA  EF83  F006         	goto	l1191
  4214  000CCE                     u2550:
  4215  000CCE  FFFF               	dw	65535	; assembler added errata NOP
  4216  000CD0  C01A  F01E         	movff	___xxtofl@val,??___xxtofl
  4217  000CD4  C01B  F01F         	movff	___xxtofl@val+1,??___xxtofl+1
  4218  000CD8  C01C  F020         	movff	___xxtofl@val+2,??___xxtofl+2
  4219  000CDC  C01D  F021         	movff	___xxtofl@val+3,??___xxtofl+3
  4220  000CE0  1E1E               	comf	??___xxtofl^0,f,c
  4221  000CE2  1E1F               	comf	(??___xxtofl+1)^0,f,c
  4222  000CE4  1E20               	comf	(??___xxtofl+2)^0,f,c
  4223  000CE6  1E21               	comf	(??___xxtofl+3)^0,f,c
  4224  000CE8  2A1E               	incf	??___xxtofl^0,f,c
  4225  000CEA  0E00               	movlw	0
  4226  000CEC  221F               	addwfc	(??___xxtofl+1)^0,f,c
  4227  000CEE  2220               	addwfc	(??___xxtofl+2)^0,f,c
  4228  000CF0  2221               	addwfc	(??___xxtofl+3)^0,f,c
  4229  000CF2  C01E  F024         	movff	??___xxtofl,___xxtofl@arg
  4230  000CF6  C01F  F025         	movff	??___xxtofl+1,___xxtofl@arg+1
  4231  000CFA  C020  F026         	movff	??___xxtofl+2,___xxtofl@arg+2
  4232  000CFE  C021  F027         	movff	??___xxtofl+3,___xxtofl@arg+3
  4233  000D02  EF8C  F006         	goto	l3209
  4234  000D06                     l1191:
  4235  000D06  FFFF               	dw	65535	; assembler added errata NOP
  4236  000D08  C01A  F024         	movff	___xxtofl@val,___xxtofl@arg
  4237  000D0C  C01B  F025         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4238  000D10  C01C  F026         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4239  000D14  C01D  F027         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4240  000D18                     l3209:
  4241  000D18  FFFF               	dw	65535	; assembler added errata NOP
  4242  000D1A  501A               	movf	___xxtofl@val^0,w,c
  4243  000D1C  101B               	iorwf	(___xxtofl@val+1)^0,w,c
  4244  000D1E  101C               	iorwf	(___xxtofl@val+2)^0,w,c
  4245  000D20  101D               	iorwf	(___xxtofl@val+3)^0,w,c
  4246  000D22  A4D8               	btfss	status,2,c
  4247  000D24  EF96  F006         	goto	u2561
  4248  000D28  EF99  F006         	goto	u2560
  4249  000D2C                     u2561:
  4250  000D2C  FFFF               	dw	65535	; assembler added errata NOP
  4251  000D2E  EFA4  F006         	goto	l3215
  4252  000D32                     u2560:
  4253  000D32  FFFF               	dw	65535	; assembler added errata NOP
  4254  000D34  0E00               	movlw	0
  4255  000D36  6E1A               	movwf	?___xxtofl^0,c
  4256  000D38  0E00               	movlw	0
  4257  000D3A  6E1B               	movwf	(?___xxtofl+1)^0,c
  4258  000D3C  0E00               	movlw	0
  4259  000D3E  6E1C               	movwf	(?___xxtofl+2)^0,c
  4260  000D40  0E00               	movlw	0
  4261  000D42  6E1D               	movwf	(?___xxtofl+3)^0,c
  4262  000D44  EF4C  F007         	goto	l1194
  4263  000D48                     l3215:
  4264  000D48  FFFF               	dw	65535	; assembler added errata NOP
  4265  000D4A  0E96               	movlw	150
  4266  000D4C  6E23               	movwf	___xxtofl@exp^0,c
  4267  000D4E  EFB0  F006         	goto	l3219
  4268  000D52                     l3217:
  4269  000D52  FFFF               	dw	65535	; assembler added errata NOP
  4270  000D54  2A23               	incf	___xxtofl@exp^0,f,c
  4271  000D56  90D8               	bcf	status,0,c
  4272  000D58  3227               	rrcf	(___xxtofl@arg+3)^0,f,c
  4273  000D5A  3226               	rrcf	(___xxtofl@arg+2)^0,f,c
  4274  000D5C  3225               	rrcf	(___xxtofl@arg+1)^0,f,c
  4275  000D5E  3224               	rrcf	___xxtofl@arg^0,f,c
  4276  000D60                     l3219:
  4277  000D60  FFFF               	dw	65535	; assembler added errata NOP
  4278  000D62  0E00               	movlw	0
  4279  000D64  1424               	andwf	___xxtofl@arg^0,w,c
  4280  000D66  6E1E               	movwf	??___xxtofl^0,c
  4281  000D68  0E00               	movlw	0
  4282  000D6A  1425               	andwf	(___xxtofl@arg+1)^0,w,c
  4283  000D6C  6E1F               	movwf	(??___xxtofl+1)^0,c
  4284  000D6E  0E00               	movlw	0
  4285  000D70  1426               	andwf	(___xxtofl@arg+2)^0,w,c
  4286  000D72  6E20               	movwf	(??___xxtofl+2)^0,c
  4287  000D74  0EFE               	movlw	254
  4288  000D76  1427               	andwf	(___xxtofl@arg+3)^0,w,c
  4289  000D78  6E21               	movwf	(??___xxtofl+3)^0,c
  4290  000D7A  501E               	movf	??___xxtofl^0,w,c
  4291  000D7C  101F               	iorwf	(??___xxtofl+1)^0,w,c
  4292  000D7E  1020               	iorwf	(??___xxtofl+2)^0,w,c
  4293  000D80  1021               	iorwf	(??___xxtofl+3)^0,w,c
  4294  000D82  A4D8               	btfss	status,2,c
  4295  000D84  EFC6  F006         	goto	u2571
  4296  000D88  EFC9  F006         	goto	u2570
  4297  000D8C                     u2571:
  4298  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  4299  000D8E  EFA9  F006         	goto	l3217
  4300  000D92                     u2570:
  4301  000D92  FFFF               	dw	65535	; assembler added errata NOP
  4302  000D94  EFD9  F006         	goto	l1198
  4303  000D98                     l3221:
  4304  000D98  FFFF               	dw	65535	; assembler added errata NOP
  4305  000D9A  2A23               	incf	___xxtofl@exp^0,f,c
  4306  000D9C  0E01               	movlw	1
  4307  000D9E  2624               	addwf	___xxtofl@arg^0,f,c
  4308  000DA0  0E00               	movlw	0
  4309  000DA2  2225               	addwfc	(___xxtofl@arg+1)^0,f,c
  4310  000DA4  2226               	addwfc	(___xxtofl@arg+2)^0,f,c
  4311  000DA6  2227               	addwfc	(___xxtofl@arg+3)^0,f,c
  4312  000DA8  90D8               	bcf	status,0,c
  4313  000DAA  3227               	rrcf	(___xxtofl@arg+3)^0,f,c
  4314  000DAC  3226               	rrcf	(___xxtofl@arg+2)^0,f,c
  4315  000DAE  3225               	rrcf	(___xxtofl@arg+1)^0,f,c
  4316  000DB0  3224               	rrcf	___xxtofl@arg^0,f,c
  4317  000DB2                     l1198:
  4318  000DB2  FFFF               	dw	65535	; assembler added errata NOP
  4319  000DB4  0E00               	movlw	0
  4320  000DB6  1424               	andwf	___xxtofl@arg^0,w,c
  4321  000DB8  6E1E               	movwf	??___xxtofl^0,c
  4322  000DBA  0E00               	movlw	0
  4323  000DBC  1425               	andwf	(___xxtofl@arg+1)^0,w,c
  4324  000DBE  6E1F               	movwf	(??___xxtofl+1)^0,c
  4325  000DC0  0E00               	movlw	0
  4326  000DC2  1426               	andwf	(___xxtofl@arg+2)^0,w,c
  4327  000DC4  6E20               	movwf	(??___xxtofl+2)^0,c
  4328  000DC6  0EFF               	movlw	255
  4329  000DC8  1427               	andwf	(___xxtofl@arg+3)^0,w,c
  4330  000DCA  6E21               	movwf	(??___xxtofl+3)^0,c
  4331  000DCC  501E               	movf	??___xxtofl^0,w,c
  4332  000DCE  101F               	iorwf	(??___xxtofl+1)^0,w,c
  4333  000DD0  1020               	iorwf	(??___xxtofl+2)^0,w,c
  4334  000DD2  1021               	iorwf	(??___xxtofl+3)^0,w,c
  4335  000DD4  A4D8               	btfss	status,2,c
  4336  000DD6  EFEF  F006         	goto	u2581
  4337  000DDA  EFF2  F006         	goto	u2580
  4338  000DDE                     u2581:
  4339  000DDE  FFFF               	dw	65535	; assembler added errata NOP
  4340  000DE0  EFCC  F006         	goto	l3221
  4341  000DE4                     u2580:
  4342  000DE4  FFFF               	dw	65535	; assembler added errata NOP
  4343  000DE6  EFFC  F006         	goto	l3229
  4344  000DEA                     l3227:
  4345  000DEA  FFFF               	dw	65535	; assembler added errata NOP
  4346  000DEC  0623               	decf	___xxtofl@exp^0,f,c
  4347  000DEE  90D8               	bcf	status,0,c
  4348  000DF0  3624               	rlcf	___xxtofl@arg^0,f,c
  4349  000DF2  3625               	rlcf	(___xxtofl@arg+1)^0,f,c
  4350  000DF4  3626               	rlcf	(___xxtofl@arg+2)^0,f,c
  4351  000DF6  3627               	rlcf	(___xxtofl@arg+3)^0,f,c
  4352  000DF8                     l3229:
  4353  000DF8  FFFF               	dw	65535	; assembler added errata NOP
  4354  000DFA  BE26               	btfsc	(___xxtofl@arg+2)^0,7,c
  4355  000DFC  EF02  F007         	goto	u2591
  4356  000E00  EF05  F007         	goto	u2590
  4357  000E04                     u2591:
  4358  000E04  FFFF               	dw	65535	; assembler added errata NOP
  4359  000E06  EF0F  F007         	goto	l1205
  4360  000E0A                     u2590:
  4361  000E0A  FFFF               	dw	65535	; assembler added errata NOP
  4362  000E0C  0E02               	movlw	2
  4363  000E0E  6023               	cpfslt	___xxtofl@exp^0,c
  4364  000E10  EF0C  F007         	goto	u2601
  4365  000E14  EF0F  F007         	goto	u2600
  4366  000E18                     u2601:
  4367  000E18  FFFF               	dw	65535	; assembler added errata NOP
  4368  000E1A  EFF5  F006         	goto	l3227
  4369  000E1E                     u2600:
  4370  000E1E                     l1205:
  4371  000E1E  FFFF               	dw	65535	; assembler added errata NOP
  4372  000E20  B023               	btfsc	___xxtofl@exp^0,0,c
  4373  000E22  EF15  F007         	goto	u2611
  4374  000E26  EF18  F007         	goto	u2610
  4375  000E2A                     u2611:
  4376  000E2A  FFFF               	dw	65535	; assembler added errata NOP
  4377  000E2C  EF1A  F007         	goto	l3235
  4378  000E30                     u2610:
  4379  000E30  FFFF               	dw	65535	; assembler added errata NOP
  4380  000E32  9E26               	bcf	(___xxtofl@arg+2)^0,7,c
  4381  000E34                     l3235:
  4382  000E34  FFFF               	dw	65535	; assembler added errata NOP
  4383  000E36  90D8               	bcf	status,0,c
  4384  000E38  3223               	rrcf	___xxtofl@exp^0,f,c
  4385  000E3A  C023  F01E         	movff	___xxtofl@exp,??___xxtofl
  4386  000E3E  6A1F               	clrf	(??___xxtofl+1)^0,c
  4387  000E40  6A20               	clrf	(??___xxtofl+2)^0,c
  4388  000E42  6A21               	clrf	(??___xxtofl+3)^0,c
  4389  000E44  C01E  F021         	movff	??___xxtofl,??___xxtofl+3
  4390  000E48  6A20               	clrf	(??___xxtofl+2)^0,c
  4391  000E4A  6A1F               	clrf	(??___xxtofl+1)^0,c
  4392  000E4C  6A1E               	clrf	??___xxtofl^0,c
  4393  000E4E  501E               	movf	??___xxtofl^0,w,c
  4394  000E50  1224               	iorwf	___xxtofl@arg^0,f,c
  4395  000E52  501F               	movf	(??___xxtofl+1)^0,w,c
  4396  000E54  1225               	iorwf	(___xxtofl@arg+1)^0,f,c
  4397  000E56  5020               	movf	(??___xxtofl+2)^0,w,c
  4398  000E58  1226               	iorwf	(___xxtofl@arg+2)^0,f,c
  4399  000E5A  5021               	movf	(??___xxtofl+3)^0,w,c
  4400  000E5C  1227               	iorwf	(___xxtofl@arg+3)^0,f,c
  4401  000E5E  5022               	movf	___xxtofl@sign^0,w,c
  4402  000E60  B4D8               	btfsc	status,2,c
  4403  000E62  EF35  F007         	goto	u2621
  4404  000E66  EF38  F007         	goto	u2620
  4405  000E6A                     u2621:
  4406  000E6A  FFFF               	dw	65535	; assembler added errata NOP
  4407  000E6C  EF43  F007         	goto	l3245
  4408  000E70                     u2620:
  4409  000E70  FFFF               	dw	65535	; assembler added errata NOP
  4410  000E72  BE1D               	btfsc	(___xxtofl@val+3)^0,7,c
  4411  000E74  EF41  F007         	goto	u2630
  4412  000E78  EF3E  F007         	goto	u2631
  4413  000E7C                     u2631:
  4414  000E7C  FFFF               	dw	65535	; assembler added errata NOP
  4415  000E7E  EF43  F007         	goto	l3245
  4416  000E82                     u2630:
  4417  000E82  FFFF               	dw	65535	; assembler added errata NOP
  4418  000E84  8E27               	bsf	(___xxtofl@arg+3)^0,7,c
  4419  000E86                     l3245:
  4420  000E86  FFFF               	dw	65535	; assembler added errata NOP
  4421  000E88  C024  F01A         	movff	___xxtofl@arg,?___xxtofl
  4422  000E8C  C025  F01B         	movff	___xxtofl@arg+1,?___xxtofl+1
  4423  000E90  C026  F01C         	movff	___xxtofl@arg+2,?___xxtofl+2
  4424  000E94  C027  F01D         	movff	___xxtofl@arg+3,?___xxtofl+3
  4425  000E98                     l1194:
  4426  000E98  FFFF               	dw	65535	; assembler added errata NOP
  4427  000E9A  0012               	return		;funcret
  4428  000E9C  FFFF               	dw	65535	; errata NOP
  4429  000E9E                     __end_of___xxtofl:
  4430                           	callstack 0
  4431                           
  4432 ;; *************** function ___fltol *****************
  4433 ;; Defined at:
  4434 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;  f1              4    0[BANK0 ] unsigned char 
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  exp1            1    9[BANK0 ] unsigned char 
  4439 ;;  sign1           1    8[BANK0 ] unsigned char 
  4440 ;; Return value:  Size  Location     Type
  4441 ;;                  4    0[BANK0 ] long 
  4442 ;; Registers used:
  4443 ;;		wreg, status,2, status,0
  4444 ;; Tracked objects:
  4445 ;;		On entry : 0/0
  4446 ;;		On exit  : 0/0
  4447 ;;		Unchanged: 0/0
  4448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4449 ;;      Params:         0       4       0       0       0       0       0
  4450 ;;      Locals:         0       2       0       0       0       0       0
  4451 ;;      Temps:          0       4       0       0       0       0       0
  4452 ;;      Totals:         0      10       0       0       0       0       0
  4453 ;;Total ram usage:       10 bytes
  4454 ;; Hardware stack levels used:    1
  4455 ;; Hardware stack levels required when called:    4
  4456 ;; This function calls:
  4457 ;;		Nothing
  4458 ;; This function is called by:
  4459 ;;		_rotateObj
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           	psect	text28
  4464  00127A                     __ptext28:
  4465                           	callstack 0
  4466  00127A                     ___fltol:
  4467                           	callstack 0
  4468  00127A  FFFF               	dw	65535	; assembler added errata NOP
  4469  00127C  0100               	movlb	0	; () banked
  4470  00127E  35D6               	rlcf	(___fltol@f1+2)& (0+255),w,b
  4471  001280  35D7               	rlcf	(___fltol@f1+3)& (0+255),w,b
  4472  001282  6FDD               	movwf	___fltol@exp1& (0+255),b
  4473  001284  51DD               	movf	___fltol@exp1& (0+255),w,b
  4474  001286  A4D8               	btfss	status,2,c
  4475  001288  EF48  F009         	goto	u2471
  4476  00128C  EF4B  F009         	goto	u2470
  4477  001290                     u2471:
  4478  001290  FFFF               	dw	65535	; assembler added errata NOP
  4479  001292  EF57  F009         	goto	l3165
  4480  001296                     u2470:
  4481  001296  FFFF               	dw	65535	; assembler added errata NOP
  4482  001298                     l3161:
  4483  001298  FFFF               	dw	65535	; assembler added errata NOP
  4484                           
  4485                           ; BSR set to: 0
  4486  00129A  0E00               	movlw	0
  4487  00129C  6FD4               	movwf	?___fltol& (0+255),b
  4488  00129E  0E00               	movlw	0
  4489  0012A0  6FD5               	movwf	(?___fltol+1)& (0+255),b
  4490  0012A2  0E00               	movlw	0
  4491  0012A4  6FD6               	movwf	(?___fltol+2)& (0+255),b
  4492  0012A6  0E00               	movlw	0
  4493  0012A8  6FD7               	movwf	(?___fltol+3)& (0+255),b
  4494  0012AA  EFD6  F009         	goto	l833
  4495  0012AE                     l3165:
  4496  0012AE  FFFF               	dw	65535	; assembler added errata NOP
  4497                           
  4498                           ; BSR set to: 0
  4499  0012B0  C0D4  F0D8         	movff	___fltol@f1,??___fltol
  4500  0012B4  C0D5  F0D9         	movff	___fltol@f1+1,??___fltol+1
  4501  0012B8  C0D6  F0DA         	movff	___fltol@f1+2,??___fltol+2
  4502  0012BC  C0D7  F0DB         	movff	___fltol@f1+3,??___fltol+3
  4503  0012C0  0E20               	movlw	32
  4504  0012C2  EF69  F009         	goto	u2480
  4505  0012C6                     u2485:
  4506  0012C6  FFFF               	dw	65535	; assembler added errata NOP
  4507  0012C8  90D8               	bcf	status,0,c
  4508  0012CA  33DB               	rrcf	(??___fltol+3)& (0+255),f,b
  4509  0012CC  33DA               	rrcf	(??___fltol+2)& (0+255),f,b
  4510  0012CE  33D9               	rrcf	(??___fltol+1)& (0+255),f,b
  4511  0012D0  33D8               	rrcf	??___fltol& (0+255),f,b
  4512  0012D2                     u2480:
  4513  0012D2  FFFF               	dw	65535	; assembler added errata NOP
  4514  0012D4  2EE8               	decfsz	wreg,f,c
  4515  0012D6  EF63  F009         	goto	u2485
  4516  0012DA  51D8               	movf	??___fltol& (0+255),w,b
  4517  0012DC  6FDC               	movwf	___fltol@sign1& (0+255),b
  4518  0012DE                     
  4519                           ; BSR set to: 0
  4520  0012DE  8FD6               	bsf	(___fltol@f1+2)& (0+255),7,b
  4521  0012E0                     
  4522                           ; BSR set to: 0
  4523  0012E0  0EFF               	movlw	255
  4524  0012E2  17D4               	andwf	___fltol@f1& (0+255),f,b
  4525  0012E4  0EFF               	movlw	255
  4526  0012E6  17D5               	andwf	(___fltol@f1+1)& (0+255),f,b
  4527  0012E8  0EFF               	movlw	255
  4528  0012EA  17D6               	andwf	(___fltol@f1+2)& (0+255),f,b
  4529  0012EC  0E00               	movlw	0
  4530  0012EE  17D7               	andwf	(___fltol@f1+3)& (0+255),f,b
  4531  0012F0                     
  4532                           ; BSR set to: 0
  4533  0012F0  0E96               	movlw	150
  4534  0012F2  5FDD               	subwf	___fltol@exp1& (0+255),f,b
  4535  0012F4                     
  4536                           ; BSR set to: 0
  4537  0012F4  BFDD               	btfsc	___fltol@exp1& (0+255),7,b
  4538  0012F6  EF82  F009         	goto	u2490
  4539  0012FA  EF7F  F009         	goto	u2491
  4540  0012FE                     u2491:
  4541  0012FE  FFFF               	dw	65535	; assembler added errata NOP
  4542  001300  EF9C  F009         	goto	l3185
  4543  001304                     u2490:
  4544  001304  FFFF               	dw	65535	; assembler added errata NOP
  4545  001306                     
  4546                           ; BSR set to: 0
  4547  001306  51DD               	movf	___fltol@exp1& (0+255),w,b
  4548  001308  0A80               	xorlw	128
  4549  00130A  0F97               	addlw	151
  4550  00130C  B0D8               	btfsc	status,0,c
  4551  00130E  EF8B  F009         	goto	u2501
  4552  001312  EF8E  F009         	goto	u2500
  4553  001316                     u2501:
  4554  001316  FFFF               	dw	65535	; assembler added errata NOP
  4555  001318  EF91  F009         	goto	l3181
  4556  00131C                     u2500:
  4557  00131C  FFFF               	dw	65535	; assembler added errata NOP
  4558  00131E  EF4C  F009         	goto	l3161
  4559  001322                     l3181:
  4560  001322  FFFF               	dw	65535	; assembler added errata NOP
  4561                           
  4562                           ; BSR set to: 0
  4563  001324  90D8               	bcf	status,0,c
  4564  001326  33D7               	rrcf	(___fltol@f1+3)& (0+255),f,b
  4565  001328  33D6               	rrcf	(___fltol@f1+2)& (0+255),f,b
  4566  00132A  33D5               	rrcf	(___fltol@f1+1)& (0+255),f,b
  4567  00132C  33D4               	rrcf	___fltol@f1& (0+255),f,b
  4568  00132E                     
  4569                           ; BSR set to: 0
  4570  00132E  3FDD               	incfsz	___fltol@exp1& (0+255),f,b
  4571  001330  EF91  F009         	goto	l3181
  4572  001334  EFBA  F009         	goto	l3195
  4573  001338                     l3185:
  4574  001338  FFFF               	dw	65535	; assembler added errata NOP
  4575                           
  4576                           ; BSR set to: 0
  4577  00133A  0E1F               	movlw	31
  4578  00133C  65DD               	cpfsgt	___fltol@exp1& (0+255),b
  4579  00133E  EFA3  F009         	goto	u2511
  4580  001342  EFA6  F009         	goto	u2510
  4581  001346                     u2511:
  4582  001346  FFFF               	dw	65535	; assembler added errata NOP
  4583  001348  EFB0  F009         	goto	l3193
  4584  00134C                     u2510:
  4585  00134C  FFFF               	dw	65535	; assembler added errata NOP
  4586  00134E  EF4C  F009         	goto	l3161
  4587  001352                     l3191:
  4588  001352  FFFF               	dw	65535	; assembler added errata NOP
  4589                           
  4590                           ; BSR set to: 0
  4591  001354  90D8               	bcf	status,0,c
  4592  001356  37D4               	rlcf	___fltol@f1& (0+255),f,b
  4593  001358  37D5               	rlcf	(___fltol@f1+1)& (0+255),f,b
  4594  00135A  37D6               	rlcf	(___fltol@f1+2)& (0+255),f,b
  4595  00135C  37D7               	rlcf	(___fltol@f1+3)& (0+255),f,b
  4596  00135E  07DD               	decf	___fltol@exp1& (0+255),f,b
  4597  001360                     l3193:
  4598  001360  FFFF               	dw	65535	; assembler added errata NOP
  4599                           
  4600                           ; BSR set to: 0
  4601  001362  51DD               	movf	___fltol@exp1& (0+255),w,b
  4602  001364  A4D8               	btfss	status,2,c
  4603  001366  EFB7  F009         	goto	u2521
  4604  00136A  EFBA  F009         	goto	u2520
  4605  00136E                     u2521:
  4606  00136E  FFFF               	dw	65535	; assembler added errata NOP
  4607  001370  EFA9  F009         	goto	l3191
  4608  001374                     u2520:
  4609  001374                     l3195:
  4610  001374  FFFF               	dw	65535	; assembler added errata NOP
  4611                           
  4612                           ; BSR set to: 0
  4613  001376  51DC               	movf	___fltol@sign1& (0+255),w,b
  4614  001378  B4D8               	btfsc	status,2,c
  4615  00137A  EFC1  F009         	goto	u2531
  4616  00137E  EFC4  F009         	goto	u2530
  4617  001382                     u2531:
  4618  001382  FFFF               	dw	65535	; assembler added errata NOP
  4619  001384  EFCD  F009         	goto	l3199
  4620  001388                     u2530:
  4621  001388  FFFF               	dw	65535	; assembler added errata NOP
  4622  00138A                     
  4623                           ; BSR set to: 0
  4624  00138A  1FD7               	comf	(___fltol@f1+3)& (0+255),f,b
  4625  00138C  1FD6               	comf	(___fltol@f1+2)& (0+255),f,b
  4626  00138E  1FD5               	comf	(___fltol@f1+1)& (0+255),f,b
  4627  001390  6DD4               	negf	___fltol@f1& (0+255),b
  4628  001392  0E00               	movlw	0
  4629  001394  23D5               	addwfc	(___fltol@f1+1)& (0+255),f,b
  4630  001396  23D6               	addwfc	(___fltol@f1+2)& (0+255),f,b
  4631  001398  23D7               	addwfc	(___fltol@f1+3)& (0+255),f,b
  4632  00139A                     l3199:
  4633  00139A  FFFF               	dw	65535	; assembler added errata NOP
  4634                           
  4635                           ; BSR set to: 0
  4636  00139C  C0D4  F0D4         	movff	___fltol@f1,?___fltol
  4637  0013A0  C0D5  F0D5         	movff	___fltol@f1+1,?___fltol+1
  4638  0013A4  C0D6  F0D6         	movff	___fltol@f1+2,?___fltol+2
  4639  0013A8  C0D7  F0D7         	movff	___fltol@f1+3,?___fltol+3
  4640  0013AC                     l833:
  4641  0013AC  FFFF               	dw	65535	; assembler added errata NOP
  4642                           
  4643                           ; BSR set to: 0
  4644  0013AE  0012               	return		;funcret
  4645  0013B0  FFFF               	dw	65535	; errata NOP
  4646  0013B2                     __end_of___fltol:
  4647                           	callstack 0
  4648                           
  4649 ;; *************** function ___fldiv *****************
  4650 ;; Defined at:
  4651 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;  b               4   39[COMRAM] long 
  4654 ;;  a               4   43[COMRAM] long 
  4655 ;; Auto vars:     Size  Location     Type
  4656 ;;  grs             4   58[COMRAM] unsigned long 
  4657 ;;  rem             4   51[COMRAM] unsigned long 
  4658 ;;  new_exp         2   56[COMRAM] short 
  4659 ;;  aexp            1   63[COMRAM] unsigned char 
  4660 ;;  bexp            1   62[COMRAM] unsigned char 
  4661 ;;  sign            1   55[COMRAM] unsigned char 
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  4   39[COMRAM] unsigned char 
  4664 ;; Registers used:
  4665 ;;		wreg, status,2, status,0
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4671 ;;      Params:         8       0       0       0       0       0       0
  4672 ;;      Locals:        13       0       0       0       0       0       0
  4673 ;;      Temps:          4       0       0       0       0       0       0
  4674 ;;      Totals:        25       0       0       0       0       0       0
  4675 ;;Total ram usage:       25 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; Hardware stack levels required when called:    4
  4678 ;; This function calls:
  4679 ;;		Nothing
  4680 ;; This function is called by:
  4681 ;;		_rotateObj
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685                           	psect	text29
  4686  000616                     __ptext29:
  4687                           	callstack 0
  4688  000616                     ___fldiv:
  4689                           	callstack 0
  4690  000616  FFFF               	dw	65535	; assembler added errata NOP
  4691  000618  502B               	movf	(___fldiv@b+3)^0,w,c
  4692  00061A  0B80               	andlw	128
  4693  00061C  6E38               	movwf	___fldiv@sign^0,c
  4694  00061E  502B               	movf	(___fldiv@b+3)^0,w,c
  4695  000620  242B               	addwf	(___fldiv@b+3)^0,w,c
  4696  000622  6E3F               	movwf	___fldiv@bexp^0,c
  4697  000624  AE2A               	btfss	(___fldiv@b+2)^0,7,c
  4698  000626  EF17  F003         	goto	u2241
  4699  00062A  EF1A  F003         	goto	u2240
  4700  00062E                     u2241:
  4701  00062E  FFFF               	dw	65535	; assembler added errata NOP
  4702  000630  EF1C  F003         	goto	l3027
  4703  000634                     u2240:
  4704  000634  FFFF               	dw	65535	; assembler added errata NOP
  4705  000636  803F               	bsf	___fldiv@bexp^0,0,c
  4706  000638                     l3027:
  4707  000638  FFFF               	dw	65535	; assembler added errata NOP
  4708  00063A  503F               	movf	___fldiv@bexp^0,w,c
  4709  00063C  B4D8               	btfsc	status,2,c
  4710  00063E  EF23  F003         	goto	u2251
  4711  000642  EF26  F003         	goto	u2250
  4712  000646                     u2251:
  4713  000646  FFFF               	dw	65535	; assembler added errata NOP
  4714  000648  EF3F  F003         	goto	l3037
  4715  00064C                     u2250:
  4716  00064C  FFFF               	dw	65535	; assembler added errata NOP
  4717  00064E  283F               	incf	___fldiv@bexp^0,w,c
  4718  000650  A4D8               	btfss	status,2,c
  4719  000652  EF2D  F003         	goto	u2261
  4720  000656  EF30  F003         	goto	u2260
  4721  00065A                     u2261:
  4722  00065A  FFFF               	dw	65535	; assembler added errata NOP
  4723  00065C  EF39  F003         	goto	l3033
  4724  000660                     u2260:
  4725  000660  FFFF               	dw	65535	; assembler added errata NOP
  4726  000662  0E00               	movlw	0
  4727  000664  6E28               	movwf	___fldiv@b^0,c
  4728  000666  0E00               	movlw	0
  4729  000668  6E29               	movwf	(___fldiv@b+1)^0,c
  4730  00066A  0E00               	movlw	0
  4731  00066C  6E2A               	movwf	(___fldiv@b+2)^0,c
  4732  00066E  0E00               	movlw	0
  4733  000670  6E2B               	movwf	(___fldiv@b+3)^0,c
  4734  000672                     l3033:
  4735  000672  FFFF               	dw	65535	; assembler added errata NOP
  4736  000674  8E2A               	bsf	(___fldiv@b+2)^0,7,c
  4737  000676  0E00               	movlw	0
  4738  000678  6E2B               	movwf	(___fldiv@b+3)^0,c
  4739  00067A  EF48  F003         	goto	l3039
  4740  00067E                     l3037:
  4741  00067E  FFFF               	dw	65535	; assembler added errata NOP
  4742  000680  0E00               	movlw	0
  4743  000682  6E28               	movwf	___fldiv@b^0,c
  4744  000684  0E00               	movlw	0
  4745  000686  6E29               	movwf	(___fldiv@b+1)^0,c
  4746  000688  0E00               	movlw	0
  4747  00068A  6E2A               	movwf	(___fldiv@b+2)^0,c
  4748  00068C  0E00               	movlw	0
  4749  00068E  6E2B               	movwf	(___fldiv@b+3)^0,c
  4750  000690                     l3039:
  4751  000690  FFFF               	dw	65535	; assembler added errata NOP
  4752  000692  502F               	movf	(___fldiv@a+3)^0,w,c
  4753  000694  0B80               	andlw	128
  4754  000696  1A38               	xorwf	___fldiv@sign^0,f,c
  4755  000698  502F               	movf	(___fldiv@a+3)^0,w,c
  4756  00069A  242F               	addwf	(___fldiv@a+3)^0,w,c
  4757  00069C  6E40               	movwf	___fldiv@aexp^0,c
  4758  00069E  AE2E               	btfss	(___fldiv@a+2)^0,7,c
  4759  0006A0  EF54  F003         	goto	u2271
  4760  0006A4  EF57  F003         	goto	u2270
  4761  0006A8                     u2271:
  4762  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  4763  0006AA  EF59  F003         	goto	l3047
  4764  0006AE                     u2270:
  4765  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  4766  0006B0  8040               	bsf	___fldiv@aexp^0,0,c
  4767  0006B2                     l3047:
  4768  0006B2  FFFF               	dw	65535	; assembler added errata NOP
  4769  0006B4  5040               	movf	___fldiv@aexp^0,w,c
  4770  0006B6  B4D8               	btfsc	status,2,c
  4771  0006B8  EF60  F003         	goto	u2281
  4772  0006BC  EF63  F003         	goto	u2280
  4773  0006C0                     u2281:
  4774  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  4775  0006C2  EF7C  F003         	goto	l3057
  4776  0006C6                     u2280:
  4777  0006C6  FFFF               	dw	65535	; assembler added errata NOP
  4778  0006C8  2840               	incf	___fldiv@aexp^0,w,c
  4779  0006CA  A4D8               	btfss	status,2,c
  4780  0006CC  EF6A  F003         	goto	u2291
  4781  0006D0  EF6D  F003         	goto	u2290
  4782  0006D4                     u2291:
  4783  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  4784  0006D6  EF76  F003         	goto	l3053
  4785  0006DA                     u2290:
  4786  0006DA  FFFF               	dw	65535	; assembler added errata NOP
  4787  0006DC  0E00               	movlw	0
  4788  0006DE  6E2C               	movwf	___fldiv@a^0,c
  4789  0006E0  0E00               	movlw	0
  4790  0006E2  6E2D               	movwf	(___fldiv@a+1)^0,c
  4791  0006E4  0E00               	movlw	0
  4792  0006E6  6E2E               	movwf	(___fldiv@a+2)^0,c
  4793  0006E8  0E00               	movlw	0
  4794  0006EA  6E2F               	movwf	(___fldiv@a+3)^0,c
  4795  0006EC                     l3053:
  4796  0006EC  FFFF               	dw	65535	; assembler added errata NOP
  4797  0006EE  8E2E               	bsf	(___fldiv@a+2)^0,7,c
  4798  0006F0  0E00               	movlw	0
  4799  0006F2  6E2F               	movwf	(___fldiv@a+3)^0,c
  4800  0006F4  EF85  F003         	goto	l3059
  4801  0006F8                     l3057:
  4802  0006F8  FFFF               	dw	65535	; assembler added errata NOP
  4803  0006FA  0E00               	movlw	0
  4804  0006FC  6E2C               	movwf	___fldiv@a^0,c
  4805  0006FE  0E00               	movlw	0
  4806  000700  6E2D               	movwf	(___fldiv@a+1)^0,c
  4807  000702  0E00               	movlw	0
  4808  000704  6E2E               	movwf	(___fldiv@a+2)^0,c
  4809  000706  0E00               	movlw	0
  4810  000708  6E2F               	movwf	(___fldiv@a+3)^0,c
  4811  00070A                     l3059:
  4812  00070A  FFFF               	dw	65535	; assembler added errata NOP
  4813  00070C  502C               	movf	___fldiv@a^0,w,c
  4814  00070E  102D               	iorwf	(___fldiv@a+1)^0,w,c
  4815  000710  102E               	iorwf	(___fldiv@a+2)^0,w,c
  4816  000712  102F               	iorwf	(___fldiv@a+3)^0,w,c
  4817  000714  A4D8               	btfss	status,2,c
  4818  000716  EF8F  F003         	goto	u2301
  4819  00071A  EF92  F003         	goto	u2300
  4820  00071E                     u2301:
  4821  00071E  FFFF               	dw	65535	; assembler added errata NOP
  4822  000720  EFAC  F003         	goto	l3071
  4823  000724                     u2300:
  4824  000724  FFFF               	dw	65535	; assembler added errata NOP
  4825  000726  0E00               	movlw	0
  4826  000728  6E28               	movwf	___fldiv@b^0,c
  4827  00072A  0E00               	movlw	0
  4828  00072C  6E29               	movwf	(___fldiv@b+1)^0,c
  4829  00072E  0E00               	movlw	0
  4830  000730  6E2A               	movwf	(___fldiv@b+2)^0,c
  4831  000732  0E00               	movlw	0
  4832  000734  6E2B               	movwf	(___fldiv@b+3)^0,c
  4833  000736  0E80               	movlw	128
  4834  000738  122A               	iorwf	(___fldiv@b+2)^0,f,c
  4835  00073A  0E7F               	movlw	127
  4836  00073C  122B               	iorwf	(___fldiv@b+3)^0,f,c
  4837  00073E                     l3065:
  4838  00073E  FFFF               	dw	65535	; assembler added errata NOP
  4839  000740  5038               	movf	___fldiv@sign^0,w,c
  4840  000742  122B               	iorwf	(___fldiv@b+3)^0,f,c
  4841  000744  C028  F028         	movff	___fldiv@b,?___fldiv
  4842  000748  C029  F029         	movff	___fldiv@b+1,?___fldiv+1
  4843  00074C  C02A  F02A         	movff	___fldiv@b+2,?___fldiv+2
  4844  000750  C02B  F02B         	movff	___fldiv@b+3,?___fldiv+3
  4845  000754  EF21  F005         	goto	l1118
  4846  000758                     l3071:
  4847  000758  FFFF               	dw	65535	; assembler added errata NOP
  4848  00075A  503F               	movf	___fldiv@bexp^0,w,c
  4849  00075C  A4D8               	btfss	status,2,c
  4850  00075E  EFB3  F003         	goto	u2311
  4851  000762  EFB6  F003         	goto	u2310
  4852  000766                     u2311:
  4853  000766  FFFF               	dw	65535	; assembler added errata NOP
  4854  000768  EFC1  F003         	goto	l3079
  4855  00076C                     u2310:
  4856  00076C  FFFF               	dw	65535	; assembler added errata NOP
  4857  00076E  0E00               	movlw	0
  4858  000770  6E28               	movwf	?___fldiv^0,c
  4859  000772  0E00               	movlw	0
  4860  000774  6E29               	movwf	(?___fldiv+1)^0,c
  4861  000776  0E00               	movlw	0
  4862  000778  6E2A               	movwf	(?___fldiv+2)^0,c
  4863  00077A  0E00               	movlw	0
  4864  00077C  6E2B               	movwf	(?___fldiv+3)^0,c
  4865  00077E  EF21  F005         	goto	l1118
  4866  000782                     l3079:
  4867  000782  FFFF               	dw	65535	; assembler added errata NOP
  4868  000784  5040               	movf	___fldiv@aexp^0,w,c
  4869  000786  C03F  F030         	movff	___fldiv@bexp,??___fldiv
  4870  00078A  6A31               	clrf	(??___fldiv+1)^0,c
  4871  00078C  5E30               	subwf	??___fldiv^0,f,c
  4872  00078E  0E00               	movlw	0
  4873  000790  5A31               	subwfb	(??___fldiv+1)^0,f,c
  4874  000792  0E7F               	movlw	127
  4875  000794  2430               	addwf	??___fldiv^0,w,c
  4876  000796  6E39               	movwf	___fldiv@new_exp^0,c
  4877  000798  0E00               	movlw	0
  4878  00079A  2031               	addwfc	(??___fldiv+1)^0,w,c
  4879  00079C  6E3A               	movwf	(___fldiv@new_exp+1)^0,c
  4880  00079E  C028  F034         	movff	___fldiv@b,___fldiv@rem
  4881  0007A2  C029  F035         	movff	___fldiv@b+1,___fldiv@rem+1
  4882  0007A6  C02A  F036         	movff	___fldiv@b+2,___fldiv@rem+2
  4883  0007AA  C02B  F037         	movff	___fldiv@b+3,___fldiv@rem+3
  4884  0007AE  0E00               	movlw	0
  4885  0007B0  6E28               	movwf	___fldiv@b^0,c
  4886  0007B2  0E00               	movlw	0
  4887  0007B4  6E29               	movwf	(___fldiv@b+1)^0,c
  4888  0007B6  0E00               	movlw	0
  4889  0007B8  6E2A               	movwf	(___fldiv@b+2)^0,c
  4890  0007BA  0E00               	movlw	0
  4891  0007BC  6E2B               	movwf	(___fldiv@b+3)^0,c
  4892  0007BE  0E00               	movlw	0
  4893  0007C0  6E3B               	movwf	___fldiv@grs^0,c
  4894  0007C2  0E00               	movlw	0
  4895  0007C4  6E3C               	movwf	(___fldiv@grs+1)^0,c
  4896  0007C6  0E00               	movlw	0
  4897  0007C8  6E3D               	movwf	(___fldiv@grs+2)^0,c
  4898  0007CA  0E00               	movlw	0
  4899  0007CC  6E3E               	movwf	(___fldiv@grs+3)^0,c
  4900  0007CE  0E00               	movlw	0
  4901  0007D0  6E40               	movwf	___fldiv@aexp^0,c
  4902  0007D2  EF2D  F004         	goto	l1120
  4903  0007D6                     l3089:
  4904  0007D6  FFFF               	dw	65535	; assembler added errata NOP
  4905  0007D8  5040               	movf	___fldiv@aexp^0,w,c
  4906  0007DA  B4D8               	btfsc	status,2,c
  4907  0007DC  EFF2  F003         	goto	u2321
  4908  0007E0  EFF5  F003         	goto	u2320
  4909  0007E4                     u2321:
  4910  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  4911  0007E6  EF10  F004         	goto	l3097
  4912  0007EA                     u2320:
  4913  0007EA  FFFF               	dw	65535	; assembler added errata NOP
  4914  0007EC  90D8               	bcf	status,0,c
  4915  0007EE  3634               	rlcf	___fldiv@rem^0,f,c
  4916  0007F0  3635               	rlcf	(___fldiv@rem+1)^0,f,c
  4917  0007F2  3636               	rlcf	(___fldiv@rem+2)^0,f,c
  4918  0007F4  3637               	rlcf	(___fldiv@rem+3)^0,f,c
  4919  0007F6  90D8               	bcf	status,0,c
  4920  0007F8  3628               	rlcf	___fldiv@b^0,f,c
  4921  0007FA  3629               	rlcf	(___fldiv@b+1)^0,f,c
  4922  0007FC  362A               	rlcf	(___fldiv@b+2)^0,f,c
  4923  0007FE  362B               	rlcf	(___fldiv@b+3)^0,f,c
  4924  000800  AE3E               	btfss	(___fldiv@grs+3)^0,7,c
  4925  000802  EF05  F004         	goto	u2331
  4926  000806  EF08  F004         	goto	u2330
  4927  00080A                     u2331:
  4928  00080A  FFFF               	dw	65535	; assembler added errata NOP
  4929  00080C  EF0A  F004         	goto	l1123
  4930  000810                     u2330:
  4931  000810  FFFF               	dw	65535	; assembler added errata NOP
  4932  000812  8028               	bsf	___fldiv@b^0,0,c
  4933  000814                     l1123:
  4934  000814  FFFF               	dw	65535	; assembler added errata NOP
  4935  000816  90D8               	bcf	status,0,c
  4936  000818  363B               	rlcf	___fldiv@grs^0,f,c
  4937  00081A  363C               	rlcf	(___fldiv@grs+1)^0,f,c
  4938  00081C  363D               	rlcf	(___fldiv@grs+2)^0,f,c
  4939  00081E  363E               	rlcf	(___fldiv@grs+3)^0,f,c
  4940  000820                     l3097:
  4941  000820  FFFF               	dw	65535	; assembler added errata NOP
  4942  000822  502C               	movf	___fldiv@a^0,w,c
  4943  000824  5C34               	subwf	___fldiv@rem^0,w,c
  4944  000826  502D               	movf	(___fldiv@a+1)^0,w,c
  4945  000828  5835               	subwfb	(___fldiv@rem+1)^0,w,c
  4946  00082A  502E               	movf	(___fldiv@a+2)^0,w,c
  4947  00082C  5836               	subwfb	(___fldiv@rem+2)^0,w,c
  4948  00082E  502F               	movf	(___fldiv@a+3)^0,w,c
  4949  000830  5837               	subwfb	(___fldiv@rem+3)^0,w,c
  4950  000832  A0D8               	btfss	status,0,c
  4951  000834  EF1E  F004         	goto	u2341
  4952  000838  EF21  F004         	goto	u2340
  4953  00083C                     u2341:
  4954  00083C  FFFF               	dw	65535	; assembler added errata NOP
  4955  00083E  EF2B  F004         	goto	l3103
  4956  000842                     u2340:
  4957  000842  FFFF               	dw	65535	; assembler added errata NOP
  4958  000844  8C3E               	bsf	(___fldiv@grs+3)^0,6,c
  4959  000846  502C               	movf	___fldiv@a^0,w,c
  4960  000848  5E34               	subwf	___fldiv@rem^0,f,c
  4961  00084A  502D               	movf	(___fldiv@a+1)^0,w,c
  4962  00084C  5A35               	subwfb	(___fldiv@rem+1)^0,f,c
  4963  00084E  502E               	movf	(___fldiv@a+2)^0,w,c
  4964  000850  5A36               	subwfb	(___fldiv@rem+2)^0,f,c
  4965  000852  502F               	movf	(___fldiv@a+3)^0,w,c
  4966  000854  5A37               	subwfb	(___fldiv@rem+3)^0,f,c
  4967  000856                     l3103:
  4968  000856  FFFF               	dw	65535	; assembler added errata NOP
  4969  000858  2A40               	incf	___fldiv@aexp^0,f,c
  4970  00085A                     l1120:
  4971  00085A  FFFF               	dw	65535	; assembler added errata NOP
  4972  00085C  0E19               	movlw	25
  4973  00085E  6440               	cpfsgt	___fldiv@aexp^0,c
  4974  000860  EF34  F004         	goto	u2351
  4975  000864  EF37  F004         	goto	u2350
  4976  000868                     u2351:
  4977  000868  FFFF               	dw	65535	; assembler added errata NOP
  4978  00086A  EFEB  F003         	goto	l3089
  4979  00086E                     u2350:
  4980  00086E  FFFF               	dw	65535	; assembler added errata NOP
  4981  000870  5034               	movf	___fldiv@rem^0,w,c
  4982  000872  1035               	iorwf	(___fldiv@rem+1)^0,w,c
  4983  000874  1036               	iorwf	(___fldiv@rem+2)^0,w,c
  4984  000876  1037               	iorwf	(___fldiv@rem+3)^0,w,c
  4985  000878  B4D8               	btfsc	status,2,c
  4986  00087A  EF41  F004         	goto	u2361
  4987  00087E  EF44  F004         	goto	u2360
  4988  000882                     u2361:
  4989  000882  FFFF               	dw	65535	; assembler added errata NOP
  4990  000884  EF61  F004         	goto	l3115
  4991  000888                     u2360:
  4992  000888  FFFF               	dw	65535	; assembler added errata NOP
  4993  00088A  803B               	bsf	___fldiv@grs^0,0,c
  4994  00088C  EF61  F004         	goto	l3115
  4995  000890                     l3109:
  4996  000890  FFFF               	dw	65535	; assembler added errata NOP
  4997  000892  90D8               	bcf	status,0,c
  4998  000894  3628               	rlcf	___fldiv@b^0,f,c
  4999  000896  3629               	rlcf	(___fldiv@b+1)^0,f,c
  5000  000898  362A               	rlcf	(___fldiv@b+2)^0,f,c
  5001  00089A  362B               	rlcf	(___fldiv@b+3)^0,f,c
  5002  00089C  AE3E               	btfss	(___fldiv@grs+3)^0,7,c
  5003  00089E  EF53  F004         	goto	u2371
  5004  0008A2  EF56  F004         	goto	u2370
  5005  0008A6                     u2371:
  5006  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5007  0008A8  EF58  F004         	goto	l1129
  5008  0008AC                     u2370:
  5009  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5010  0008AE  8028               	bsf	___fldiv@b^0,0,c
  5011  0008B0                     l1129:
  5012  0008B0  FFFF               	dw	65535	; assembler added errata NOP
  5013  0008B2  90D8               	bcf	status,0,c
  5014  0008B4  363B               	rlcf	___fldiv@grs^0,f,c
  5015  0008B6  363C               	rlcf	(___fldiv@grs+1)^0,f,c
  5016  0008B8  363D               	rlcf	(___fldiv@grs+2)^0,f,c
  5017  0008BA  363E               	rlcf	(___fldiv@grs+3)^0,f,c
  5018  0008BC  0639               	decf	___fldiv@new_exp^0,f,c
  5019  0008BE  A0D8               	btfss	status,0,c
  5020  0008C0  063A               	decf	(___fldiv@new_exp+1)^0,f,c
  5021  0008C2                     l3115:
  5022  0008C2  FFFF               	dw	65535	; assembler added errata NOP
  5023  0008C4  AE2A               	btfss	(___fldiv@b+2)^0,7,c
  5024  0008C6  EF67  F004         	goto	u2381
  5025  0008CA  EF6A  F004         	goto	u2380
  5026  0008CE                     u2381:
  5027  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5028  0008D0  EF48  F004         	goto	l3109
  5029  0008D4                     u2380:
  5030  0008D4  FFFF               	dw	65535	; assembler added errata NOP
  5031  0008D6  0E00               	movlw	0
  5032  0008D8  6E40               	movwf	___fldiv@aexp^0,c
  5033  0008DA  AE3E               	btfss	(___fldiv@grs+3)^0,7,c
  5034  0008DC  EF72  F004         	goto	u2391
  5035  0008E0  EF75  F004         	goto	u2390
  5036  0008E4                     u2391:
  5037  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5038  0008E6  EFA0  F004         	goto	l1131
  5039  0008EA                     u2390:
  5040  0008EA  FFFF               	dw	65535	; assembler added errata NOP
  5041  0008EC  0EFF               	movlw	255
  5042  0008EE  143B               	andwf	___fldiv@grs^0,w,c
  5043  0008F0  6E30               	movwf	??___fldiv^0,c
  5044  0008F2  0EFF               	movlw	255
  5045  0008F4  143C               	andwf	(___fldiv@grs+1)^0,w,c
  5046  0008F6  6E31               	movwf	(??___fldiv+1)^0,c
  5047  0008F8  0EFF               	movlw	255
  5048  0008FA  143D               	andwf	(___fldiv@grs+2)^0,w,c
  5049  0008FC  6E32               	movwf	(??___fldiv+2)^0,c
  5050  0008FE  0E7F               	movlw	127
  5051  000900  143E               	andwf	(___fldiv@grs+3)^0,w,c
  5052  000902  6E33               	movwf	(??___fldiv+3)^0,c
  5053  000904  5030               	movf	??___fldiv^0,w,c
  5054  000906  1031               	iorwf	(??___fldiv+1)^0,w,c
  5055  000908  1032               	iorwf	(??___fldiv+2)^0,w,c
  5056  00090A  1033               	iorwf	(??___fldiv+3)^0,w,c
  5057  00090C  B4D8               	btfsc	status,2,c
  5058  00090E  EF8B  F004         	goto	u2401
  5059  000912  EF8E  F004         	goto	u2400
  5060  000916                     u2401:
  5061  000916  FFFF               	dw	65535	; assembler added errata NOP
  5062  000918  EF94  F004         	goto	l1132
  5063  00091C                     u2400:
  5064  00091C  FFFF               	dw	65535	; assembler added errata NOP
  5065  00091E                     l3123:
  5066  00091E  FFFF               	dw	65535	; assembler added errata NOP
  5067  000920  0E01               	movlw	1
  5068  000922  6E40               	movwf	___fldiv@aexp^0,c
  5069  000924  EFA0  F004         	goto	l1131
  5070  000928                     l1132:
  5071  000928  FFFF               	dw	65535	; assembler added errata NOP
  5072  00092A  A028               	btfss	___fldiv@b^0,0,c
  5073  00092C  EF9A  F004         	goto	u2411
  5074  000930  EF9D  F004         	goto	u2410
  5075  000934                     u2411:
  5076  000934  FFFF               	dw	65535	; assembler added errata NOP
  5077  000936  EFA0  F004         	goto	l1131
  5078  00093A                     u2410:
  5079  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5080  00093C  EF8F  F004         	goto	l3123
  5081  000940                     l1131:
  5082  000940  FFFF               	dw	65535	; assembler added errata NOP
  5083  000942  5040               	movf	___fldiv@aexp^0,w,c
  5084  000944  B4D8               	btfsc	status,2,c
  5085  000946  EFA7  F004         	goto	u2421
  5086  00094A  EFAA  F004         	goto	u2420
  5087  00094E                     u2421:
  5088  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5089  000950  EFD1  F004         	goto	l3135
  5090  000954                     u2420:
  5091  000954  FFFF               	dw	65535	; assembler added errata NOP
  5092  000956  0E01               	movlw	1
  5093  000958  2628               	addwf	___fldiv@b^0,f,c
  5094  00095A  0E00               	movlw	0
  5095  00095C  2229               	addwfc	(___fldiv@b+1)^0,f,c
  5096  00095E  222A               	addwfc	(___fldiv@b+2)^0,f,c
  5097  000960  222B               	addwfc	(___fldiv@b+3)^0,f,c
  5098  000962  A02B               	btfss	(___fldiv@b+3)^0,0,c
  5099  000964  EFB6  F004         	goto	u2431
  5100  000968  EFB9  F004         	goto	u2430
  5101  00096C                     u2431:
  5102  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5103  00096E  EFD1  F004         	goto	l3135
  5104  000972                     u2430:
  5105  000972  FFFF               	dw	65535	; assembler added errata NOP
  5106  000974  C028  F030         	movff	___fldiv@b,??___fldiv
  5107  000978  C029  F031         	movff	___fldiv@b+1,??___fldiv+1
  5108  00097C  C02A  F032         	movff	___fldiv@b+2,??___fldiv+2
  5109  000980  C02B  F033         	movff	___fldiv@b+3,??___fldiv+3
  5110  000984  3433               	rlcf	(??___fldiv+3)^0,w,c
  5111  000986  3233               	rrcf	(??___fldiv+3)^0,f,c
  5112  000988  3232               	rrcf	(??___fldiv+2)^0,f,c
  5113  00098A  3231               	rrcf	(??___fldiv+1)^0,f,c
  5114  00098C  3230               	rrcf	??___fldiv^0,f,c
  5115  00098E  C030  F028         	movff	??___fldiv,___fldiv@b
  5116  000992  C031  F029         	movff	??___fldiv+1,___fldiv@b+1
  5117  000996  C032  F02A         	movff	??___fldiv+2,___fldiv@b+2
  5118  00099A  C033  F02B         	movff	??___fldiv+3,___fldiv@b+3
  5119  00099E  4A39               	infsnz	___fldiv@new_exp^0,f,c
  5120  0009A0  2A3A               	incf	(___fldiv@new_exp+1)^0,f,c
  5121  0009A2                     l3135:
  5122  0009A2  FFFF               	dw	65535	; assembler added errata NOP
  5123  0009A4  BE3A               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5124  0009A6  EFDD  F004         	goto	u2441
  5125  0009AA  503A               	movf	(___fldiv@new_exp+1)^0,w,c
  5126  0009AC  E109               	bnz	u2440
  5127  0009AE  2839               	incf	___fldiv@new_exp^0,w,c
  5128  0009B0  A0D8               	btfss	status,0,c
  5129  0009B2  EFDD  F004         	goto	u2441
  5130  0009B6  EFE0  F004         	goto	u2440
  5131  0009BA                     u2441:
  5132  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5133  0009BC  EFEC  F004         	goto	l3139
  5134  0009C0                     u2440:
  5135  0009C0  FFFF               	dw	65535	; assembler added errata NOP
  5136  0009C2  0E00               	movlw	0
  5137  0009C4  6E3A               	movwf	(___fldiv@new_exp+1)^0,c
  5138  0009C6  6839               	setf	___fldiv@new_exp^0,c
  5139  0009C8  0E00               	movlw	0
  5140  0009CA  6E28               	movwf	___fldiv@b^0,c
  5141  0009CC  0E00               	movlw	0
  5142  0009CE  6E29               	movwf	(___fldiv@b+1)^0,c
  5143  0009D0  0E00               	movlw	0
  5144  0009D2  6E2A               	movwf	(___fldiv@b+2)^0,c
  5145  0009D4  0E00               	movlw	0
  5146  0009D6  6E2B               	movwf	(___fldiv@b+3)^0,c
  5147  0009D8                     l3139:
  5148  0009D8  FFFF               	dw	65535	; assembler added errata NOP
  5149  0009DA  BE3A               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5150  0009DC  EFFB  F004         	goto	u2450
  5151  0009E0  503A               	movf	(___fldiv@new_exp+1)^0,w,c
  5152  0009E2  E106               	bnz	u2451
  5153  0009E4  0439               	decf	___fldiv@new_exp^0,w,c
  5154  0009E6  B0D8               	btfsc	status,0,c
  5155  0009E8  EFF8  F004         	goto	u2451
  5156  0009EC  EFFB  F004         	goto	u2450
  5157  0009F0                     u2451:
  5158  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5159  0009F2  EF0A  F005         	goto	l3143
  5160  0009F6                     u2450:
  5161  0009F6  FFFF               	dw	65535	; assembler added errata NOP
  5162  0009F8  0E00               	movlw	0
  5163  0009FA  6E3A               	movwf	(___fldiv@new_exp+1)^0,c
  5164  0009FC  0E00               	movlw	0
  5165  0009FE  6E39               	movwf	___fldiv@new_exp^0,c
  5166  000A00  0E00               	movlw	0
  5167  000A02  6E28               	movwf	___fldiv@b^0,c
  5168  000A04  0E00               	movlw	0
  5169  000A06  6E29               	movwf	(___fldiv@b+1)^0,c
  5170  000A08  0E00               	movlw	0
  5171  000A0A  6E2A               	movwf	(___fldiv@b+2)^0,c
  5172  000A0C  0E00               	movlw	0
  5173  000A0E  6E2B               	movwf	(___fldiv@b+3)^0,c
  5174  000A10  0E00               	movlw	0
  5175  000A12  6E38               	movwf	___fldiv@sign^0,c
  5176  000A14                     l3143:
  5177  000A14  FFFF               	dw	65535	; assembler added errata NOP
  5178  000A16  C039  F03F         	movff	___fldiv@new_exp,___fldiv@bexp
  5179  000A1A  A03F               	btfss	___fldiv@bexp^0,0,c
  5180  000A1C  EF12  F005         	goto	u2461
  5181  000A20  EF15  F005         	goto	u2460
  5182  000A24                     u2461:
  5183  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5184  000A26  EF19  F005         	goto	l3149
  5185  000A2A                     u2460:
  5186  000A2A  FFFF               	dw	65535	; assembler added errata NOP
  5187  000A2C  8E2A               	bsf	(___fldiv@b+2)^0,7,c
  5188  000A2E  EF1B  F005         	goto	l3151
  5189  000A32                     l3149:
  5190  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5191  000A34  9E2A               	bcf	(___fldiv@b+2)^0,7,c
  5192  000A36                     l3151:
  5193  000A36  FFFF               	dw	65535	; assembler added errata NOP
  5194  000A38  90D8               	bcf	status,0,c
  5195  000A3A  303F               	rrcf	___fldiv@bexp^0,w,c
  5196  000A3C  6E2B               	movwf	(___fldiv@b+3)^0,c
  5197  000A3E  EF9F  F003         	goto	l3065
  5198  000A42                     l1118:
  5199  000A42  FFFF               	dw	65535	; assembler added errata NOP
  5200  000A44  0012               	return		;funcret
  5201  000A46  FFFF               	dw	65535	; errata NOP
  5202  000A48                     __end_of___fldiv:
  5203                           	callstack 0
  5204                           
  5205 ;; *************** function _releaseObj *****************
  5206 ;; Defined at:
  5207 ;;		line 575 in file "motors.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;		None
  5210 ;; Auto vars:     Size  Location     Type
  5211 ;;		None
  5212 ;; Return value:  Size  Location     Type
  5213 ;;                  1    wreg      void 
  5214 ;; Registers used:
  5215 ;;		None
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5221 ;;      Params:         0       0       0       0       0       0       0
  5222 ;;      Locals:         0       0       0       0       0       0       0
  5223 ;;      Temps:          0       0       0       0       0       0       0
  5224 ;;      Totals:         0       0       0       0       0       0       0
  5225 ;;Total ram usage:        0 bytes
  5226 ;; Hardware stack levels used:    1
  5227 ;; Hardware stack levels required when called:    4
  5228 ;; This function calls:
  5229 ;;		Nothing
  5230 ;; This function is called by:
  5231 ;;		_executeData
  5232 ;; This function uses a non-reentrant model
  5233 ;;
  5234                           
  5235                           	psect	text30
  5236  002162                     __ptext30:
  5237                           	callstack 0
  5238  002162                     _releaseObj:
  5239                           	callstack 0
  5240  002162  FFFF               	dw	65535	; assembler added errata NOP
  5241  002164                     
  5242                           ;motors.c: 576:     LATDbits.LATD1 = 0;
  5243  002164  928C               	bcf	140,1,c	;volatile
  5244  002166  0012               	return		;funcret
  5245  002168  FFFF               	dw	65535	; errata NOP
  5246  00216A                     __end_of_releaseObj:
  5247                           	callstack 0
  5248                           
  5249 ;; *************** function _pickObject *****************
  5250 ;; Defined at:
  5251 ;;		line 568 in file "motors.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;		None
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;		None
  5256 ;; Return value:  Size  Location     Type
  5257 ;;                  1    wreg      void 
  5258 ;; Registers used:
  5259 ;;		None
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5265 ;;      Params:         0       0       0       0       0       0       0
  5266 ;;      Locals:         0       0       0       0       0       0       0
  5267 ;;      Temps:          0       0       0       0       0       0       0
  5268 ;;      Totals:         0       0       0       0       0       0       0
  5269 ;;Total ram usage:        0 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:    4
  5272 ;; This function calls:
  5273 ;;		Nothing
  5274 ;; This function is called by:
  5275 ;;		_executeData
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           	psect	text31
  5280  00216A                     __ptext31:
  5281                           	callstack 0
  5282  00216A                     _pickObject:
  5283                           	callstack 0
  5284  00216A  FFFF               	dw	65535	; assembler added errata NOP
  5285  00216C                     
  5286                           ;motors.c: 569:     LATDbits.LATD1 = 1;
  5287  00216C  828C               	bsf	140,1,c	;volatile
  5288  00216E  0012               	return		;funcret
  5289  002170  FFFF               	dw	65535	; errata NOP
  5290  002172                     __end_of_pickObject:
  5291                           	callstack 0
  5292                           
  5293 ;; *************** function _moveToPoint *****************
  5294 ;; Defined at:
  5295 ;;		line 266 in file "motors.c"
  5296 ;; Parameters:    Size  Location     Type
  5297 ;;  x1              2   29[COMRAM] unsigned int 
  5298 ;;  y1              2   31[COMRAM] unsigned int 
  5299 ;;  x2              2   33[COMRAM] unsigned int 
  5300 ;;  y2              2   35[COMRAM] unsigned int 
  5301 ;; Auto vars:     Size  Location     Type
  5302 ;;  keepMovingY     1   40[COMRAM] unsigned char 
  5303 ;;  keepMovingX     1   39[COMRAM] unsigned char 
  5304 ;; Return value:  Size  Location     Type
  5305 ;;                  1    wreg      unsigned char 
  5306 ;; Registers used:
  5307 ;;		wreg, status,2, status,0, cstack
  5308 ;; Tracked objects:
  5309 ;;		On entry : 0/0
  5310 ;;		On exit  : 0/0
  5311 ;;		Unchanged: 0/0
  5312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5313 ;;      Params:         8       0       0       0       0       0       0
  5314 ;;      Locals:         2       0       0       0       0       0       0
  5315 ;;      Temps:          2       0       0       0       0       0       0
  5316 ;;      Totals:        12       0       0       0       0       0       0
  5317 ;;Total ram usage:       12 bytes
  5318 ;; Hardware stack levels used:    1
  5319 ;; Hardware stack levels required when called:    5
  5320 ;; This function calls:
  5321 ;;		_resetStep
  5322 ;;		_setDirection
  5323 ;;		_stepCounter
  5324 ;;		_stepMade
  5325 ;; This function is called by:
  5326 ;;		_executeData
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           	psect	text32
  5331  001090                     __ptext32:
  5332                           	callstack 0
  5333  001090                     _moveToPoint:
  5334                           	callstack 0
  5335  001090  FFFF               	dw	65535	; assembler added errata NOP
  5336  001092                     
  5337                           ;motors.c: 269:     if(x2 > maxX || y2 > maxY){
  5338  001092  0EE9               	movlw	233
  5339  001094  5C22               	subwf	moveToPoint@x2^0,w,c
  5340  001096  0E03               	movlw	3
  5341  001098  5823               	subwfb	(moveToPoint@x2+1)^0,w,c
  5342  00109A  B0D8               	btfsc	status,0,c
  5343  00109C  EF52  F008         	goto	u2641
  5344  0010A0  EF55  F008         	goto	u2640
  5345  0010A4                     u2641:
  5346  0010A4  FFFF               	dw	65535	; assembler added errata NOP
  5347  0010A6  EF62  F008         	goto	l3253
  5348  0010AA                     u2640:
  5349  0010AA  FFFF               	dw	65535	; assembler added errata NOP
  5350  0010AC  0EE9               	movlw	233
  5351  0010AE  5C24               	subwf	moveToPoint@y2^0,w,c
  5352  0010B0  0E03               	movlw	3
  5353  0010B2  5825               	subwfb	(moveToPoint@y2+1)^0,w,c
  5354  0010B4  A0D8               	btfss	status,0,c
  5355  0010B6  EF5F  F008         	goto	u2651
  5356  0010BA  EF62  F008         	goto	u2650
  5357  0010BE                     u2651:
  5358  0010BE  FFFF               	dw	65535	; assembler added errata NOP
  5359  0010C0  EF66  F008         	goto	l3257
  5360  0010C4                     u2650:
  5361  0010C4                     l3253:
  5362  0010C4  FFFF               	dw	65535	; assembler added errata NOP
  5363                           
  5364                           ;motors.c: 270:         return(5);
  5365  0010C6  0E05               	movlw	5
  5366  0010C8  EF3A  F009         	goto	l141
  5367  0010CC                     l3257:
  5368  0010CC  FFFF               	dw	65535	; assembler added errata NOP
  5369                           
  5370                           ;motors.c: 274:     if((x2 - x1) > 0){
  5371  0010CE  501E               	movf	moveToPoint@x1^0,w,c
  5372  0010D0  5C22               	subwf	moveToPoint@x2^0,w,c
  5373  0010D2  6E26               	movwf	??_moveToPoint^0,c
  5374  0010D4  501F               	movf	(moveToPoint@x1+1)^0,w,c
  5375  0010D6  5823               	subwfb	(moveToPoint@x2+1)^0,w,c
  5376  0010D8  6E27               	movwf	(??_moveToPoint+1)^0,c
  5377  0010DA  5026               	movf	??_moveToPoint^0,w,c
  5378  0010DC  1027               	iorwf	(??_moveToPoint+1)^0,w,c
  5379  0010DE  B4D8               	btfsc	status,2,c
  5380  0010E0  EF74  F008         	goto	u2661
  5381  0010E4  EF77  F008         	goto	u2660
  5382  0010E8                     u2661:
  5383  0010E8  FFFF               	dw	65535	; assembler added errata NOP
  5384  0010EA  EF7F  F008         	goto	l3261
  5385  0010EE                     u2660:
  5386  0010EE  FFFF               	dw	65535	; assembler added errata NOP
  5387  0010F0                     
  5388                           ;motors.c: 275:         setDirection(1, 0);
  5389  0010F0  0E00               	movlw	0
  5390  0010F2  6E1A               	movwf	setDirection@motor^0,c
  5391  0010F4  0E01               	movlw	1
  5392  0010F6  ECFC  F00E         	call	_setDirection
  5393                           
  5394                           ;motors.c: 276:     }else{
  5395  0010FA  EF85  F008         	goto	l3263
  5396  0010FE                     l3261:
  5397  0010FE  FFFF               	dw	65535	; assembler added errata NOP
  5398                           
  5399                           ;motors.c: 277:         setDirection(0, 0);
  5400  001100  0E00               	movlw	0
  5401  001102  6E1A               	movwf	setDirection@motor^0,c
  5402  001104  0E00               	movlw	0
  5403  001106  ECFC  F00E         	call	_setDirection
  5404  00110A                     l3263:
  5405  00110A  FFFF               	dw	65535	; assembler added errata NOP
  5406                           
  5407                           ;motors.c: 280:     if((y2 - y1) > 0){
  5408  00110C  5020               	movf	moveToPoint@y1^0,w,c
  5409  00110E  5C24               	subwf	moveToPoint@y2^0,w,c
  5410  001110  6E26               	movwf	??_moveToPoint^0,c
  5411  001112  5021               	movf	(moveToPoint@y1+1)^0,w,c
  5412  001114  5825               	subwfb	(moveToPoint@y2+1)^0,w,c
  5413  001116  6E27               	movwf	(??_moveToPoint+1)^0,c
  5414  001118  5026               	movf	??_moveToPoint^0,w,c
  5415  00111A  1027               	iorwf	(??_moveToPoint+1)^0,w,c
  5416  00111C  B4D8               	btfsc	status,2,c
  5417  00111E  EF93  F008         	goto	u2671
  5418  001122  EF96  F008         	goto	u2670
  5419  001126                     u2671:
  5420  001126  FFFF               	dw	65535	; assembler added errata NOP
  5421  001128  EF9E  F008         	goto	l3267
  5422  00112C                     u2670:
  5423  00112C  FFFF               	dw	65535	; assembler added errata NOP
  5424  00112E                     
  5425                           ;motors.c: 281:         setDirection(1, 1);
  5426  00112E  0E01               	movlw	1
  5427  001130  6E1A               	movwf	setDirection@motor^0,c
  5428  001132  0E01               	movlw	1
  5429  001134  ECFC  F00E         	call	_setDirection
  5430                           
  5431                           ;motors.c: 282:     }else{
  5432  001138  EFA4  F008         	goto	l3269
  5433  00113C                     l3267:
  5434  00113C  FFFF               	dw	65535	; assembler added errata NOP
  5435                           
  5436                           ;motors.c: 283:         setDirection(0, 1);
  5437  00113E  0E01               	movlw	1
  5438  001140  6E1A               	movwf	setDirection@motor^0,c
  5439  001142  0E00               	movlw	0
  5440  001144  ECFC  F00E         	call	_setDirection
  5441  001148                     l3269:
  5442  001148  FFFF               	dw	65535	; assembler added errata NOP
  5443                           
  5444                           ;motors.c: 286:     unsigned char keepMovingX = 1;
  5445  00114A  0E01               	movlw	1
  5446  00114C  6E28               	movwf	moveToPoint@keepMovingX^0,c
  5447  00114E                     
  5448                           ;motors.c: 287:     unsigned char keepMovingY = 1;
  5449  00114E  0E01               	movlw	1
  5450  001150  6E29               	movwf	moveToPoint@keepMovingY^0,c
  5451  001152                     
  5452                           ;motors.c: 290:     T2CONbits.TMR2ON = 1;
  5453  001152  84CA               	bsf	202,2,c	;volatile
  5454  001154                     
  5455                           ;motors.c: 292:     tm0Error = 0;
  5456  001154  0E00               	movlw	0
  5457  001156  6E53               	movwf	(_tm0Error+1)^0,c
  5458  001158  0E00               	movlw	0
  5459  00115A  6E52               	movwf	_tm0Error^0,c
  5460  00115C                     
  5461                           ;motors.c: 293:     tm0Limit = 200;
  5462  00115C  0EC8               	movlw	200
  5463  00115E  6E5D               	movwf	_tm0Limit^0,c
  5464  001160                     
  5465                           ;motors.c: 294:     T0CONbits.TMR0ON = 1;
  5466  001160  8ED5               	bsf	213,7,c	;volatile
  5467                           
  5468                           ;motors.c: 296:     while(keepMovingX || keepMovingY){
  5469  001162  EF1A  F009         	goto	l3299
  5470  001166                     l3281:
  5471  001166  FFFF               	dw	65535	; assembler added errata NOP
  5472                           
  5473                           ;motors.c: 299:         if(tm0Error){
  5474  001168  5052               	movf	_tm0Error^0,w,c
  5475  00116A  1053               	iorwf	(_tm0Error+1)^0,w,c
  5476  00116C  B4D8               	btfsc	status,2,c
  5477  00116E  EFBB  F008         	goto	u2681
  5478  001172  EFBE  F008         	goto	u2680
  5479  001176                     u2681:
  5480  001176  FFFF               	dw	65535	; assembler added errata NOP
  5481  001178  EFC7  F008         	goto	l3287
  5482  00117C                     u2680:
  5483  00117C  FFFF               	dw	65535	; assembler added errata NOP
  5484  00117E                     
  5485                           ;motors.c: 301:             LATAbits.LATA2 = 0;
  5486  00117E  9489               	bcf	137,2,c	;volatile
  5487                           
  5488                           ;motors.c: 302:             LATBbits.LATB4 = 0;
  5489  001180  988A               	bcf	138,4,c	;volatile
  5490  001182                     
  5491                           ;motors.c: 303:             tm0Error = 4;
  5492  001182  0E00               	movlw	0
  5493  001184  6E53               	movwf	(_tm0Error+1)^0,c
  5494  001186  0E04               	movlw	4
  5495  001188  6E52               	movwf	_tm0Error^0,c
  5496                           
  5497                           ;motors.c: 304:             break;
  5498  00118A  EF2E  F009         	goto	l149
  5499  00118E                     l3287:
  5500  00118E  FFFF               	dw	65535	; assembler added errata NOP
  5501                           
  5502                           ;motors.c: 312:         if(x1 + stepCounter() == x2){
  5503  001190  EC75  F010         	call	_stepCounter	;wreg free
  5504  001194  501E               	movf	moveToPoint@x1^0,w,c
  5505  001196  261A               	addwf	?_stepCounter^0,f,c
  5506  001198  501F               	movf	(moveToPoint@x1+1)^0,w,c
  5507  00119A  221B               	addwfc	(?_stepCounter+1)^0,f,c
  5508  00119C  5022               	movf	moveToPoint@x2^0,w,c
  5509  00119E  181A               	xorwf	?_stepCounter^0,w,c
  5510  0011A0  E107               	bnz	u2691
  5511  0011A2  5023               	movf	(moveToPoint@x2+1)^0,w,c
  5512  0011A4  181B               	xorwf	(?_stepCounter+1)^0,w,c
  5513  0011A6  A4D8               	btfss	status,2,c
  5514  0011A8  EFD8  F008         	goto	u2691
  5515  0011AC  EFDB  F008         	goto	u2690
  5516  0011B0                     u2691:
  5517  0011B0  FFFF               	dw	65535	; assembler added errata NOP
  5518  0011B2  EFE0  F008         	goto	l150
  5519  0011B6                     u2690:
  5520  0011B6  FFFF               	dw	65535	; assembler added errata NOP
  5521  0011B8                     
  5522                           ;motors.c: 314:             keepMovingX = 0;
  5523  0011B8  0E00               	movlw	0
  5524  0011BA  6E28               	movwf	moveToPoint@keepMovingX^0,c
  5525                           
  5526                           ;motors.c: 315:         }else{
  5527  0011BC  EFE2  F008         	goto	l3291
  5528  0011C0                     l150:
  5529  0011C0  FFFF               	dw	65535	; assembler added errata NOP
  5530                           
  5531                           ;motors.c: 317:             LATAbits.LATA2 = 1;
  5532  0011C2  8489               	bsf	137,2,c	;volatile
  5533  0011C4                     l3291:
  5534  0011C4  FFFF               	dw	65535	; assembler added errata NOP
  5535                           
  5536                           ;motors.c: 321:         if(y1 + stepCounter() == y2){
  5537  0011C6  EC75  F010         	call	_stepCounter	;wreg free
  5538  0011CA  5020               	movf	moveToPoint@y1^0,w,c
  5539  0011CC  261A               	addwf	?_stepCounter^0,f,c
  5540  0011CE  5021               	movf	(moveToPoint@y1+1)^0,w,c
  5541  0011D0  221B               	addwfc	(?_stepCounter+1)^0,f,c
  5542  0011D2  5024               	movf	moveToPoint@y2^0,w,c
  5543  0011D4  181A               	xorwf	?_stepCounter^0,w,c
  5544  0011D6  E107               	bnz	u2701
  5545  0011D8  5025               	movf	(moveToPoint@y2+1)^0,w,c
  5546  0011DA  181B               	xorwf	(?_stepCounter+1)^0,w,c
  5547  0011DC  A4D8               	btfss	status,2,c
  5548  0011DE  EFF3  F008         	goto	u2701
  5549  0011E2  EFF6  F008         	goto	u2700
  5550  0011E6                     u2701:
  5551  0011E6  FFFF               	dw	65535	; assembler added errata NOP
  5552  0011E8  EFFB  F008         	goto	l152
  5553  0011EC                     u2700:
  5554  0011EC  FFFF               	dw	65535	; assembler added errata NOP
  5555  0011EE                     
  5556                           ;motors.c: 323:             keepMovingY = 0;
  5557  0011EE  0E00               	movlw	0
  5558  0011F0  6E29               	movwf	moveToPoint@keepMovingY^0,c
  5559                           
  5560                           ;motors.c: 324:         }else{
  5561  0011F2  EFFD  F008         	goto	l3295
  5562  0011F6                     l152:
  5563  0011F6  FFFF               	dw	65535	; assembler added errata NOP
  5564                           
  5565                           ;motors.c: 326:             LATBbits.LATB4 = 1;
  5566  0011F8  888A               	bsf	138,4,c	;volatile
  5567  0011FA                     l3295:
  5568  0011FA  FFFF               	dw	65535	; assembler added errata NOP
  5569  0011FC  EC3A  F010         	call	_stepMade	;wreg free
  5570  001200  501A               	movf	?_stepMade^0,w,c
  5571  001202  101B               	iorwf	(?_stepMade+1)^0,w,c
  5572  001204  B4D8               	btfsc	status,2,c
  5573  001206  EF07  F009         	goto	u2711
  5574  00120A  EF0A  F009         	goto	u2710
  5575  00120E                     u2711:
  5576  00120E  FFFF               	dw	65535	; assembler added errata NOP
  5577  001210  EFFD  F008         	goto	l3295
  5578  001214                     u2710:
  5579  001214  FFFF               	dw	65535	; assembler added errata NOP
  5580  001216                     
  5581                           ;motors.c: 333:         LATAbits.LATA2 = 0;
  5582  001216  9489               	bcf	137,2,c	;volatile
  5583                           
  5584                           ;motors.c: 334:         LATBbits.LATB4 = 0;
  5585  001218  988A               	bcf	138,4,c	;volatile
  5586  00121A                     l3297:
  5587  00121A  FFFF               	dw	65535	; assembler added errata NOP
  5588  00121C  EC3A  F010         	call	_stepMade	;wreg free
  5589  001220  501A               	movf	?_stepMade^0,w,c
  5590  001222  101B               	iorwf	(?_stepMade+1)^0,w,c
  5591  001224  B4D8               	btfsc	status,2,c
  5592  001226  EF17  F009         	goto	u2721
  5593  00122A  EF1A  F009         	goto	u2720
  5594  00122E                     u2721:
  5595  00122E  FFFF               	dw	65535	; assembler added errata NOP
  5596  001230  EF0D  F009         	goto	l3297
  5597  001234                     u2720:
  5598  001234                     l3299:
  5599  001234  FFFF               	dw	65535	; assembler added errata NOP
  5600                           
  5601                           ;motors.c: 296:     while(keepMovingX || keepMovingY){
  5602  001236  5028               	movf	moveToPoint@keepMovingX^0,w,c
  5603  001238  A4D8               	btfss	status,2,c
  5604  00123A  EF21  F009         	goto	u2731
  5605  00123E  EF24  F009         	goto	u2730
  5606  001242                     u2731:
  5607  001242  FFFF               	dw	65535	; assembler added errata NOP
  5608  001244  EFB3  F008         	goto	l3281
  5609  001248                     u2730:
  5610  001248  FFFF               	dw	65535	; assembler added errata NOP
  5611  00124A  5029               	movf	moveToPoint@keepMovingY^0,w,c
  5612  00124C  A4D8               	btfss	status,2,c
  5613  00124E  EF2B  F009         	goto	u2741
  5614  001252  EF2E  F009         	goto	u2740
  5615  001256                     u2741:
  5616  001256  FFFF               	dw	65535	; assembler added errata NOP
  5617  001258  EFB3  F008         	goto	l3281
  5618  00125C                     u2740:
  5619  00125C                     l149:
  5620  00125C  FFFF               	dw	65535	; assembler added errata NOP
  5621                           
  5622                           ;motors.c: 341:     T0CONbits.TMR0ON = 0;
  5623  00125E  9ED5               	bcf	213,7,c	;volatile
  5624                           
  5625                           ;motors.c: 342:     T2CONbits.TMR2ON = 0;
  5626  001260  94CA               	bcf	202,2,c	;volatile
  5627  001262                     
  5628                           ;motors.c: 344:     TMR0 = 0;
  5629  001262  0E00               	movlw	0
  5630  001264  6ED7               	movwf	215,c	;volatile
  5631  001266  0E00               	movlw	0
  5632  001268  6ED6               	movwf	214,c	;volatile
  5633                           
  5634                           ;motors.c: 345:     TMR2 = 0;
  5635  00126A  0E00               	movlw	0
  5636  00126C  6ECC               	movwf	204,c	;volatile
  5637  00126E                     
  5638                           ;motors.c: 348:     resetStep();
  5639  00126E  EC85  F010         	call	_resetStep	;wreg free
  5640  001272                     
  5641                           ;motors.c: 350:     return(tm0Error);
  5642  001272  5052               	movf	_tm0Error^0,w,c
  5643  001274                     l141:
  5644  001274  FFFF               	dw	65535	; assembler added errata NOP
  5645  001276  0012               	return		;funcret
  5646  001278  FFFF               	dw	65535	; errata NOP
  5647  00127A                     __end_of_moveToPoint:
  5648                           	callstack 0
  5649                           
  5650 ;; *************** function _stepCounter *****************
  5651 ;; Defined at:
  5652 ;;		line 59 in file "pwm.c"
  5653 ;; Parameters:    Size  Location     Type
  5654 ;;		None
  5655 ;; Auto vars:     Size  Location     Type
  5656 ;;		None
  5657 ;; Return value:  Size  Location     Type
  5658 ;;                  2   25[COMRAM] unsigned int 
  5659 ;; Registers used:
  5660 ;;		None
  5661 ;; Tracked objects:
  5662 ;;		On entry : 0/0
  5663 ;;		On exit  : 0/0
  5664 ;;		Unchanged: 0/0
  5665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5666 ;;      Params:         2       0       0       0       0       0       0
  5667 ;;      Locals:         0       0       0       0       0       0       0
  5668 ;;      Temps:          0       0       0       0       0       0       0
  5669 ;;      Totals:         2       0       0       0       0       0       0
  5670 ;;Total ram usage:        2 bytes
  5671 ;; Hardware stack levels used:    1
  5672 ;; Hardware stack levels required when called:    4
  5673 ;; This function calls:
  5674 ;;		Nothing
  5675 ;; This function is called by:
  5676 ;;		_moveToPoint
  5677 ;; This function uses a non-reentrant model
  5678 ;;
  5679                           
  5680                           	psect	text33
  5681  0020EA                     __ptext33:
  5682                           	callstack 0
  5683  0020EA                     _stepCounter:
  5684                           	callstack 0
  5685  0020EA  FFFF               	dw	65535	; assembler added errata NOP
  5686  0020EC                     
  5687                           ;pwm.c: 60:     return pwmStep;
  5688  0020EC  C05C  F01A         	movff	_pwmStep,?_stepCounter	;volatile
  5689  0020F0  6A1B               	clrf	(?_stepCounter+1)^0,c
  5690  0020F2  0012               	return		;funcret
  5691  0020F4  FFFF               	dw	65535	; errata NOP
  5692  0020F6                     __end_of_stepCounter:
  5693                           	callstack 0
  5694                           
  5695 ;; *************** function _liftArm *****************
  5696 ;; Defined at:
  5697 ;;		line 496 in file "motors.c"
  5698 ;; Parameters:    Size  Location     Type
  5699 ;;		None
  5700 ;; Auto vars:     Size  Location     Type
  5701 ;;		None
  5702 ;; Return value:  Size  Location     Type
  5703 ;;                  1    wreg      unsigned char 
  5704 ;; Registers used:
  5705 ;;		wreg, status,2, status,0, cstack
  5706 ;; Tracked objects:
  5707 ;;		On entry : 0/0
  5708 ;;		On exit  : 0/0
  5709 ;;		Unchanged: 0/0
  5710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5711 ;;      Params:         0       0       0       0       0       0       0
  5712 ;;      Locals:         0       0       0       0       0       0       0
  5713 ;;      Temps:          0       0       0       0       0       0       0
  5714 ;;      Totals:         0       0       0       0       0       0       0
  5715 ;;Total ram usage:        0 bytes
  5716 ;; Hardware stack levels used:    1
  5717 ;; Hardware stack levels required when called:    5
  5718 ;; This function calls:
  5719 ;;		_resetStep
  5720 ;;		_setDirection
  5721 ;;		_stepMade
  5722 ;; This function is called by:
  5723 ;;		_executeData
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text34
  5728  001B34                     __ptext34:
  5729                           	callstack 0
  5730  001B34                     _liftArm:
  5731                           	callstack 0
  5732  001B34  FFFF               	dw	65535	; assembler added errata NOP
  5733  001B36                     
  5734                           ;motors.c: 499:     setDirection(0, 2);
  5735  001B36  0E02               	movlw	2
  5736  001B38  6E1A               	movwf	setDirection@motor^0,c
  5737  001B3A  0E00               	movlw	0
  5738  001B3C  ECFC  F00E         	call	_setDirection
  5739  001B40                     
  5740                           ;motors.c: 501:     T2CONbits.TMR2ON = 1;
  5741  001B40  84CA               	bsf	202,2,c	;volatile
  5742  001B42                     
  5743                           ;motors.c: 503:     tm0Error = 0;
  5744  001B42  0E00               	movlw	0
  5745  001B44  6E53               	movwf	(_tm0Error+1)^0,c
  5746  001B46  0E00               	movlw	0
  5747  001B48  6E52               	movwf	_tm0Error^0,c
  5748  001B4A                     
  5749                           ;motors.c: 504:     tm0Limit = 200;
  5750  001B4A  0EC8               	movlw	200
  5751  001B4C  6E5D               	movwf	_tm0Limit^0,c
  5752  001B4E                     
  5753                           ;motors.c: 505:     T0CONbits.TMR0ON = 1;
  5754  001B4E  8ED5               	bsf	213,7,c	;volatile
  5755                           
  5756                           ;motors.c: 509:     while(!PORTEbits.RE2){
  5757  001B50  EFDB  F00D         	goto	l190
  5758  001B54                     l3405:
  5759  001B54  FFFF               	dw	65535	; assembler added errata NOP
  5760                           
  5761                           ;motors.c: 512:         if(tm0Error){
  5762  001B56  5052               	movf	_tm0Error^0,w,c
  5763  001B58  1053               	iorwf	(_tm0Error+1)^0,w,c
  5764  001B5A  B4D8               	btfsc	status,2,c
  5765  001B5C  EFB2  F00D         	goto	u2871
  5766  001B60  EFB5  F00D         	goto	u2870
  5767  001B64                     u2871:
  5768  001B64  FFFF               	dw	65535	; assembler added errata NOP
  5769  001B66  EFBD  F00D         	goto	l192
  5770  001B6A                     u2870:
  5771  001B6A  FFFF               	dw	65535	; assembler added errata NOP
  5772  001B6C                     
  5773                           ;motors.c: 514:             LATCbits.LATC2 = 0;
  5774  001B6C  948B               	bcf	139,2,c	;volatile
  5775  001B6E                     
  5776                           ;motors.c: 515:             tm0Error = 6;
  5777  001B6E  0E00               	movlw	0
  5778  001B70  6E53               	movwf	(_tm0Error+1)^0,c
  5779  001B72  0E06               	movlw	6
  5780  001B74  6E52               	movwf	_tm0Error^0,c
  5781                           
  5782                           ;motors.c: 516:             break;
  5783  001B76  EFE4  F00D         	goto	l193
  5784  001B7A                     l192:
  5785  001B7A  FFFF               	dw	65535	; assembler added errata NOP
  5786                           
  5787                           ;motors.c: 521:         LATCbits.LATC2 = 1;
  5788  001B7C  848B               	bsf	139,2,c	;volatile
  5789  001B7E                     l3411:
  5790  001B7E  FFFF               	dw	65535	; assembler added errata NOP
  5791  001B80  EC3A  F010         	call	_stepMade	;wreg free
  5792  001B84  501A               	movf	?_stepMade^0,w,c
  5793  001B86  101B               	iorwf	(?_stepMade+1)^0,w,c
  5794  001B88  B4D8               	btfsc	status,2,c
  5795  001B8A  EFC9  F00D         	goto	u2881
  5796  001B8E  EFCC  F00D         	goto	u2880
  5797  001B92                     u2881:
  5798  001B92  FFFF               	dw	65535	; assembler added errata NOP
  5799  001B94  EFBF  F00D         	goto	l3411
  5800  001B98                     u2880:
  5801  001B98  FFFF               	dw	65535	; assembler added errata NOP
  5802  001B9A                     
  5803                           ;motors.c: 527:         LATCbits.LATC2 = 0;
  5804  001B9A  948B               	bcf	139,2,c	;volatile
  5805  001B9C                     l3413:
  5806  001B9C  FFFF               	dw	65535	; assembler added errata NOP
  5807  001B9E  EC3A  F010         	call	_stepMade	;wreg free
  5808  001BA2  501A               	movf	?_stepMade^0,w,c
  5809  001BA4  101B               	iorwf	(?_stepMade+1)^0,w,c
  5810  001BA6  B4D8               	btfsc	status,2,c
  5811  001BA8  EFD8  F00D         	goto	u2891
  5812  001BAC  EFDB  F00D         	goto	u2890
  5813  001BB0                     u2891:
  5814  001BB0  FFFF               	dw	65535	; assembler added errata NOP
  5815  001BB2  EFCE  F00D         	goto	l3413
  5816  001BB6                     u2890:
  5817  001BB6                     l190:
  5818  001BB6  FFFF               	dw	65535	; assembler added errata NOP
  5819                           
  5820                           ;motors.c: 509:     while(!PORTEbits.RE2){
  5821  001BB8  A484               	btfss	132,2,c	;volatile
  5822  001BBA  EFE1  F00D         	goto	u2901
  5823  001BBE  EFE4  F00D         	goto	u2900
  5824  001BC2                     u2901:
  5825  001BC2  FFFF               	dw	65535	; assembler added errata NOP
  5826  001BC4  EFAA  F00D         	goto	l3405
  5827  001BC8                     u2900:
  5828  001BC8                     l193:
  5829  001BC8  FFFF               	dw	65535	; assembler added errata NOP
  5830                           
  5831                           ;motors.c: 534:     T0CONbits.TMR0ON = 0;
  5832  001BCA  9ED5               	bcf	213,7,c	;volatile
  5833                           
  5834                           ;motors.c: 535:     T2CONbits.TMR2ON = 0;
  5835  001BCC  94CA               	bcf	202,2,c	;volatile
  5836  001BCE                     
  5837                           ;motors.c: 537:     TMR0 = 0;
  5838  001BCE  0E00               	movlw	0
  5839  001BD0  6ED7               	movwf	215,c	;volatile
  5840  001BD2  0E00               	movlw	0
  5841  001BD4  6ED6               	movwf	214,c	;volatile
  5842                           
  5843                           ;motors.c: 538:     TMR2 = 0;
  5844  001BD6  0E00               	movlw	0
  5845  001BD8  6ECC               	movwf	204,c	;volatile
  5846  001BDA                     
  5847                           ;motors.c: 541:     resetStep();
  5848  001BDA  EC85  F010         	call	_resetStep	;wreg free
  5849  001BDE                     
  5850                           ;motors.c: 543:     return(tm0Error);
  5851  001BDE  5052               	movf	_tm0Error^0,w,c
  5852  001BE0  0012               	return		;funcret
  5853  001BE2  FFFF               	dw	65535	; errata NOP
  5854  001BE4                     __end_of_liftArm:
  5855                           	callstack 0
  5856                           
  5857 ;; *************** function _stepMade *****************
  5858 ;; Defined at:
  5859 ;;		line 47 in file "pwm.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;		None
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;  temp            1   27[COMRAM] unsigned char 
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  2   25[COMRAM] unsigned int 
  5866 ;; Registers used:
  5867 ;;		wreg, status,2
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5873 ;;      Params:         2       0       0       0       0       0       0
  5874 ;;      Locals:         1       0       0       0       0       0       0
  5875 ;;      Temps:          0       0       0       0       0       0       0
  5876 ;;      Totals:         3       0       0       0       0       0       0
  5877 ;;Total ram usage:        3 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    4
  5880 ;; This function calls:
  5881 ;;		Nothing
  5882 ;; This function is called by:
  5883 ;;		_resetPosition
  5884 ;;		_moveToPoint
  5885 ;;		_touchObject
  5886 ;;		_touchTherm
  5887 ;;		_liftArm
  5888 ;; This function uses a non-reentrant model
  5889 ;;
  5890                           
  5891                           	psect	text35
  5892  002074                     __ptext35:
  5893                           	callstack 0
  5894  002074                     _stepMade:
  5895                           	callstack 0
  5896  002074  FFFF               	dw	65535	; assembler added errata NOP
  5897  002076                     
  5898                           ;pwm.c: 48:     unsigned char temp = stepToggle;
  5899  002076  C05B  F01C         	movff	_stepToggle,stepMade@temp	;volatile
  5900  00207A                     
  5901                           ;pwm.c: 50:     stepToggle = 0;
  5902  00207A  0E00               	movlw	0
  5903  00207C  6E5B               	movwf	_stepToggle^0,c	;volatile
  5904  00207E                     
  5905                           ;pwm.c: 52:     return temp;
  5906  00207E  C01C  F01A         	movff	stepMade@temp,?_stepMade
  5907  002082  6A1B               	clrf	(?_stepMade+1)^0,c
  5908  002084  0012               	return		;funcret
  5909  002086  FFFF               	dw	65535	; errata NOP
  5910  002088                     __end_of_stepMade:
  5911                           	callstack 0
  5912                           
  5913 ;; *************** function _setDirection *****************
  5914 ;; Defined at:
  5915 ;;		line 117 in file "motors.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;  direction       1    wreg     unsigned char 
  5918 ;;  motor           1   25[COMRAM] unsigned char 
  5919 ;; Auto vars:     Size  Location     Type
  5920 ;;  direction       1   28[COMRAM] unsigned char 
  5921 ;; Return value:  Size  Location     Type
  5922 ;;                  1    wreg      void 
  5923 ;; Registers used:
  5924 ;;		wreg, status,2, status,0
  5925 ;; Tracked objects:
  5926 ;;		On entry : 0/0
  5927 ;;		On exit  : 0/0
  5928 ;;		Unchanged: 0/0
  5929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5930 ;;      Params:         1       0       0       0       0       0       0
  5931 ;;      Locals:         1       0       0       0       0       0       0
  5932 ;;      Temps:          2       0       0       0       0       0       0
  5933 ;;      Totals:         4       0       0       0       0       0       0
  5934 ;;Total ram usage:        4 bytes
  5935 ;; Hardware stack levels used:    1
  5936 ;; Hardware stack levels required when called:    4
  5937 ;; This function calls:
  5938 ;;		Nothing
  5939 ;; This function is called by:
  5940 ;;		_resetPosition
  5941 ;;		_moveToPoint
  5942 ;;		_touchObject
  5943 ;;		_touchTherm
  5944 ;;		_liftArm
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           	psect	text36
  5949  001DF8                     __ptext36:
  5950                           	callstack 0
  5951  001DF8                     _setDirection:
  5952                           	callstack 0
  5953  001DF8  FFFF               	dw	65535	; assembler added errata NOP
  5954                           
  5955                           ;incstack = 0
  5956                           ;setDirection@direction stored from wreg
  5957  001DFA  6E1D               	movwf	setDirection@direction^0,c
  5958  001DFC                     
  5959                           ;motors.c: 118:     switch(motor){
  5960  001DFC  EF18  F00F         	goto	l2991
  5961  001E00                     l2983:
  5962  001E00  FFFF               	dw	65535	; assembler added errata NOP
  5963                           
  5964                           ;motors.c: 120:             LATAbits.LATA1 = direction;
  5965  001E02  B01D               	btfsc	setDirection@direction^0,0,c
  5966  001E04  D002               	bra	u2215
  5967  001E06  9289               	bcf	137,1,c	;volatile
  5968  001E08  D001               	bra	u2216
  5969  001E0A                     u2215:
  5970  001E0A  8289               	bsf	137,1,c	;volatile
  5971  001E0C                     u2216:
  5972                           
  5973                           ;motors.c: 121:             break;
  5974  001E0C  EF33  F00F         	goto	l101
  5975  001E10                     l2985:
  5976  001E10  FFFF               	dw	65535	; assembler added errata NOP
  5977                           
  5978                           ;motors.c: 123:             LATBbits.LATB3 = direction;
  5979  001E12  B01D               	btfsc	setDirection@direction^0,0,c
  5980  001E14  D002               	bra	u2225
  5981  001E16  968A               	bcf	138,3,c	;volatile
  5982  001E18  D001               	bra	u2226
  5983  001E1A                     u2225:
  5984  001E1A  868A               	bsf	138,3,c	;volatile
  5985  001E1C                     u2226:
  5986                           
  5987                           ;motors.c: 124:             break;
  5988  001E1C  EF33  F00F         	goto	l101
  5989  001E20                     l2987:
  5990  001E20  FFFF               	dw	65535	; assembler added errata NOP
  5991                           
  5992                           ;motors.c: 126:             LATCbits.LATC1 = direction;
  5993  001E22  B01D               	btfsc	setDirection@direction^0,0,c
  5994  001E24  D002               	bra	u2235
  5995  001E26  928B               	bcf	139,1,c	;volatile
  5996  001E28  D001               	bra	u2236
  5997  001E2A                     u2235:
  5998  001E2A  828B               	bsf	139,1,c	;volatile
  5999  001E2C                     u2236:
  6000                           
  6001                           ;motors.c: 127:             break;
  6002  001E2C  EF33  F00F         	goto	l101
  6003  001E30                     l2991:
  6004  001E30  FFFF               	dw	65535	; assembler added errata NOP
  6005  001E32  501A               	movf	setDirection@motor^0,w,c
  6006  001E34  6E1B               	movwf	??_setDirection^0,c
  6007  001E36  6A1C               	clrf	(??_setDirection+1)^0,c
  6008                           
  6009                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6010                           ; Switch size 1, requested type "simple"
  6011                           ; Number of cases is 1, Range of values is 0 to 0
  6012                           ; switch strategies available:
  6013                           ; Name         Instructions Cycles
  6014                           ; simple_byte            4     3 (average)
  6015                           ;	Chosen strategy is simple_byte
  6016  001E38  501C               	movf	(??_setDirection+1)^0,w,c
  6017  001E3A  0A00               	xorlw	0	; case 0
  6018  001E3C  B4D8               	btfsc	status,2,c
  6019  001E3E  EF23  F00F         	goto	l3755
  6020  001E42  EF33  F00F         	goto	l101
  6021  001E46                     l3755:
  6022  001E46  FFFF               	dw	65535	; assembler added errata NOP
  6023                           
  6024                           ; Switch size 1, requested type "simple"
  6025                           ; Number of cases is 3, Range of values is 0 to 2
  6026                           ; switch strategies available:
  6027                           ; Name         Instructions Cycles
  6028                           ; simple_byte           10     6 (average)
  6029                           ;	Chosen strategy is simple_byte
  6030  001E48  501B               	movf	??_setDirection^0,w,c
  6031  001E4A  0A00               	xorlw	0	; case 0
  6032  001E4C  B4D8               	btfsc	status,2,c
  6033  001E4E  EF00  F00F         	goto	l2983
  6034  001E52  0A01               	xorlw	1	; case 1
  6035  001E54  B4D8               	btfsc	status,2,c
  6036  001E56  EF08  F00F         	goto	l2985
  6037  001E5A  0A03               	xorlw	3	; case 2
  6038  001E5C  B4D8               	btfsc	status,2,c
  6039  001E5E  EF10  F00F         	goto	l2987
  6040  001E62  EF33  F00F         	goto	l101
  6041  001E66                     l101:
  6042  001E66  FFFF               	dw	65535	; assembler added errata NOP
  6043  001E68  0012               	return		;funcret
  6044  001E6A  FFFF               	dw	65535	; errata NOP
  6045  001E6C                     __end_of_setDirection:
  6046                           	callstack 0
  6047                           
  6048 ;; *************** function _resetStep *****************
  6049 ;; Defined at:
  6050 ;;		line 66 in file "pwm.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;		None
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;		None
  6055 ;; Return value:  Size  Location     Type
  6056 ;;                  1    wreg      void 
  6057 ;; Registers used:
  6058 ;;		wreg, status,2
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6064 ;;      Params:         0       0       0       0       0       0       0
  6065 ;;      Locals:         0       0       0       0       0       0       0
  6066 ;;      Temps:          0       0       0       0       0       0       0
  6067 ;;      Totals:         0       0       0       0       0       0       0
  6068 ;;Total ram usage:        0 bytes
  6069 ;; Hardware stack levels used:    1
  6070 ;; Hardware stack levels required when called:    4
  6071 ;; This function calls:
  6072 ;;		Nothing
  6073 ;; This function is called by:
  6074 ;;		_resetPosition
  6075 ;;		_moveToPoint
  6076 ;;		_touchObject
  6077 ;;		_touchTherm
  6078 ;;		_liftArm
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           	psect	text37
  6083  00210A                     __ptext37:
  6084                           	callstack 0
  6085  00210A                     _resetStep:
  6086                           	callstack 0
  6087  00210A  FFFF               	dw	65535	; assembler added errata NOP
  6088  00210C                     
  6089                           ;pwm.c: 67:     pwmStep = 0;
  6090  00210C  0E00               	movlw	0
  6091  00210E  6E5C               	movwf	_pwmStep^0,c	;volatile
  6092  002110  0012               	return		;funcret
  6093  002112  FFFF               	dw	65535	; errata NOP
  6094  002114                     __end_of_resetStep:
  6095                           	callstack 0
  6096                           
  6097 ;; *************** function _getData *****************
  6098 ;; Defined at:
  6099 ;;		line 166 in file "usart.c"
  6100 ;; Parameters:    Size  Location     Type
  6101 ;;		None
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;		None
  6104 ;; Return value:  Size  Location     Type
  6105 ;;                  2   25[COMRAM] PTR struct .
  6106 ;; Registers used:
  6107 ;;		wreg, status,2, status,0
  6108 ;; Tracked objects:
  6109 ;;		On entry : 0/0
  6110 ;;		On exit  : 0/0
  6111 ;;		Unchanged: 0/0
  6112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6113 ;;      Params:         2       0       0       0       0       0       0
  6114 ;;      Locals:         0       0       0       0       0       0       0
  6115 ;;      Temps:          0       0       0       0       0       0       0
  6116 ;;      Totals:         2       0       0       0       0       0       0
  6117 ;;Total ram usage:        2 bytes
  6118 ;; Hardware stack levels used:    1
  6119 ;; Hardware stack levels required when called:    4
  6120 ;; This function calls:
  6121 ;;		Nothing
  6122 ;; This function is called by:
  6123 ;;		_executeData
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           	psect	text38
  6128  00209A                     __ptext38:
  6129                           	callstack 0
  6130  00209A                     _getData:
  6131                           	callstack 0
  6132  00209A  FFFF               	dw	65535	; assembler added errata NOP
  6133  00209C                     
  6134                           ;usart.c: 167:     return(&dataSequence[0]);
  6135  00209C  0EEA               	movlw	low _dataSequence
  6136  00209E  6E1A               	movwf	?_getData^0,c
  6137  0020A0  0E00               	movlw	high _dataSequence
  6138  0020A2  6E1B               	movwf	(?_getData+1)^0,c
  6139  0020A4  0012               	return		;funcret
  6140  0020A6  FFFF               	dw	65535	; errata NOP
  6141  0020A8                     __end_of_getData:
  6142                           	callstack 0
  6143                           
  6144 ;; *************** function _clearTM0 *****************
  6145 ;; Defined at:
  6146 ;;		line 30 in file "motors.c"
  6147 ;; Parameters:    Size  Location     Type
  6148 ;;		None
  6149 ;; Auto vars:     Size  Location     Type
  6150 ;;		None
  6151 ;; Return value:  Size  Location     Type
  6152 ;;                  1    wreg      void 
  6153 ;; Registers used:
  6154 ;;		wreg, status,2
  6155 ;; Tracked objects:
  6156 ;;		On entry : 0/0
  6157 ;;		On exit  : 0/0
  6158 ;;		Unchanged: 0/0
  6159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6160 ;;      Params:         0       0       0       0       0       0       0
  6161 ;;      Locals:         0       0       0       0       0       0       0
  6162 ;;      Temps:          0       0       0       0       0       0       0
  6163 ;;      Totals:         0       0       0       0       0       0       0
  6164 ;;Total ram usage:        0 bytes
  6165 ;; Hardware stack levels used:    1
  6166 ;; Hardware stack levels required when called:    4
  6167 ;; This function calls:
  6168 ;;		Nothing
  6169 ;; This function is called by:
  6170 ;;		_main
  6171 ;; This function uses a non-reentrant model
  6172 ;;
  6173                           
  6174                           	psect	text39
  6175  0020A8                     __ptext39:
  6176                           	callstack 0
  6177  0020A8                     _clearTM0:
  6178                           	callstack 0
  6179  0020A8  FFFF               	dw	65535	; assembler added errata NOP
  6180  0020AA                     
  6181                           ;motors.c: 31:     tm0Error = 0;
  6182  0020AA  0E00               	movlw	0
  6183  0020AC  6E53               	movwf	(_tm0Error+1)^0,c
  6184  0020AE  0E00               	movlw	0
  6185  0020B0  6E52               	movwf	_tm0Error^0,c
  6186  0020B2  0012               	return		;funcret
  6187  0020B4  FFFF               	dw	65535	; errata NOP
  6188  0020B6                     __end_of_clearTM0:
  6189                           	callstack 0
  6190                           
  6191 ;; *************** function _isr *****************
  6192 ;; Defined at:
  6193 ;;		line 17 in file "interrupt.c"
  6194 ;; Parameters:    Size  Location     Type
  6195 ;;		None
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;  temp            1   24[COMRAM] unsigned char 
  6198 ;; Return value:  Size  Location     Type
  6199 ;;                  1    wreg      void 
  6200 ;; Registers used:
  6201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6207 ;;      Params:         0       0       0       0       0       0       0
  6208 ;;      Locals:         1       0       0       0       0       0       0
  6209 ;;      Temps:         10       0       0       0       0       0       0
  6210 ;;      Totals:        11       0       0       0       0       0       0
  6211 ;;Total ram usage:       11 bytes
  6212 ;; Hardware stack levels used:    1
  6213 ;; Hardware stack levels required when called:    3
  6214 ;; This function calls:
  6215 ;;		_increaseStep
  6216 ;;		_retPeriod
  6217 ;;		_setThermRel
  6218 ;;		_setTouchRel
  6219 ;;		_storeData
  6220 ;;		_toggleStep
  6221 ;;		_whatsTM0Limit
  6222 ;;		_writeTM0
  6223 ;; This function is called by:
  6224 ;;		Interrupt level 2
  6225 ;; This function uses a non-reentrant model
  6226 ;;
  6227                           
  6228                           	psect	intcode
  6229  000008                     __pintcode:
  6230                           	callstack 0
  6231  000008                     _isr:
  6232                           	callstack 0
  6233  000008  FFFF               	dw	65535	; assembler added errata NOP
  6234                           
  6235                           ;incstack = 0
  6236  00000A  8266               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6237  00000C  CFD9 F011          	movff	fsr2l,??_isr+2
  6238  000010  CFDA F012          	movff	fsr2h,??_isr+3
  6239  000014  CFF3 F013          	movff	prodl,??_isr+4
  6240  000018  CFF4 F014          	movff	prodh,??_isr+5
  6241  00001C  CFF6 F015          	movff	tblptrl,??_isr+6
  6242  000020  CFF7 F016          	movff	tblptrh,??_isr+7
  6243  000024  CFF8 F017          	movff	tblptru,??_isr+8
  6244  000028  CFF5 F018          	movff	tablat,??_isr+9
  6245  00002C                     
  6246                           ;interrupt.c: 18:     static unsigned int single_cycle = 0;;interrupt.c: 19:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 20:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 23:     if(INTCONbits.T0IF){
  6247  00002C  A4F2               	btfss	242,2,c	;volatile
  6248  00002E  EF1B  F000         	goto	i2u211_41
  6249  000032  EF1E  F000         	goto	i2u211_40
  6250  000036                     i2u211_41:
  6251  000036  FFFF               	dw	65535	; assembler added errata NOP
  6252  000038  EF34  F000         	goto	i2l2911
  6253  00003C                     i2u211_40:
  6254  00003C  FFFF               	dw	65535	; assembler added errata NOP
  6255  00003E                     
  6256                           ;interrupt.c: 24:         INTCONbits.T0IF = 0;
  6257  00003E  94F2               	bcf	242,2,c	;volatile
  6258  000040                     
  6259                           ;interrupt.c: 27:         tm0Count++;
  6260  000040  2A58               	incf	isr@tm0Count^0,f,c
  6261  000042                     
  6262                           ;interrupt.c: 29:         if(tm0Count >= whatsTM0Limit()){
  6263  000042  ECB9  F010         	call	_whatsTM0Limit	;wreg free
  6264  000046  6E0F               	movwf	??_isr^0,c
  6265  000048  500F               	movf	??_isr^0,w,c
  6266  00004A  5C58               	subwf	isr@tm0Count^0,w,c
  6267  00004C  A0D8               	btfss	status,0,c
  6268  00004E  EF2B  F000         	goto	i2u212_41
  6269  000052  EF2E  F000         	goto	i2u212_40
  6270  000056                     i2u212_41:
  6271  000056  FFFF               	dw	65535	; assembler added errata NOP
  6272  000058  EF34  F000         	goto	i2l2911
  6273  00005C                     i2u212_40:
  6274  00005C  FFFF               	dw	65535	; assembler added errata NOP
  6275  00005E                     
  6276                           ;interrupt.c: 30:             T0CONbits.TMR0ON = 0;
  6277  00005E  9ED5               	bcf	213,7,c	;volatile
  6278  000060                     
  6279                           ;interrupt.c: 31:             tm0Count = 0;
  6280  000060  0E00               	movlw	0
  6281  000062  6E58               	movwf	isr@tm0Count^0,c
  6282  000064                     
  6283                           ;interrupt.c: 32:             writeTM0();
  6284  000064  EC5B  F010         	call	_writeTM0	;wreg free
  6285  000068                     i2l2911:
  6286  000068  FFFF               	dw	65535	; assembler added errata NOP
  6287                           
  6288                           ;interrupt.c: 37:     if(PIR1bits.TMR2IF){
  6289  00006A  A29E               	btfss	158,1,c	;volatile
  6290  00006C  EF3A  F000         	goto	i2u213_41
  6291  000070  EF3D  F000         	goto	i2u213_40
  6292  000074                     i2u213_41:
  6293  000074  FFFF               	dw	65535	; assembler added errata NOP
  6294  000076  EF6B  F000         	goto	i2l2931
  6295  00007A                     i2u213_40:
  6296  00007A  FFFF               	dw	65535	; assembler added errata NOP
  6297  00007C                     
  6298                           ;interrupt.c: 38:         PIR1bits.TMR2IF = 0;
  6299  00007C  929E               	bcf	158,1,c	;volatile
  6300  00007E                     
  6301                           ;interrupt.c: 39:         single_cycle++;
  6302  00007E  4A4A               	infsnz	isr@single_cycle^0,f,c
  6303  000080  2A4B               	incf	(isr@single_cycle+1)^0,f,c
  6304  000082                     
  6305                           ;interrupt.c: 42:         if(single_cycle > retPeriod()){
  6306  000082  EC62  F010         	call	_retPeriod	;wreg free
  6307  000086  504A               	movf	isr@single_cycle^0,w,c
  6308  000088  5C01               	subwf	?_retPeriod^0,w,c
  6309  00008A  504B               	movf	(isr@single_cycle+1)^0,w,c
  6310  00008C  5802               	subwfb	(?_retPeriod+1)^0,w,c
  6311  00008E  B0D8               	btfsc	status,0,c
  6312  000090  EF4C  F000         	goto	i2u214_41
  6313  000094  EF4F  F000         	goto	i2u214_40
  6314  000098                     i2u214_41:
  6315  000098  FFFF               	dw	65535	; assembler added errata NOP
  6316  00009A  EF6B  F000         	goto	i2l2931
  6317  00009E                     i2u214_40:
  6318  00009E  FFFF               	dw	65535	; assembler added errata NOP
  6319  0000A0                     
  6320                           ;interrupt.c: 43:             completeStep++;
  6321  0000A0  2A57               	incf	isr@completeStep^0,f,c
  6322  0000A2                     
  6323                           ;interrupt.c: 46:             if(completeStep != 0 && !(completeStep % 2)){
  6324  0000A2  5057               	movf	isr@completeStep^0,w,c
  6325  0000A4  B4D8               	btfsc	status,2,c
  6326  0000A6  EF57  F000         	goto	i2u215_41
  6327  0000AA  EF5A  F000         	goto	i2u215_40
  6328  0000AE                     i2u215_41:
  6329  0000AE  FFFF               	dw	65535	; assembler added errata NOP
  6330  0000B0  EF68  F000         	goto	i2l2929
  6331  0000B4                     i2u215_40:
  6332  0000B4  FFFF               	dw	65535	; assembler added errata NOP
  6333  0000B6  B057               	btfsc	isr@completeStep^0,0,c
  6334  0000B8  EF60  F000         	goto	i2u216_41
  6335  0000BC  EF63  F000         	goto	i2u216_40
  6336  0000C0                     i2u216_41:
  6337  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  6338  0000C2  EF68  F000         	goto	i2l2929
  6339  0000C6                     i2u216_40:
  6340  0000C6  FFFF               	dw	65535	; assembler added errata NOP
  6341  0000C8                     
  6342                           ;interrupt.c: 48:                 completeStep = 0;
  6343  0000C8  0E00               	movlw	0
  6344  0000CA  6E57               	movwf	isr@completeStep^0,c
  6345  0000CC                     
  6346                           ;interrupt.c: 51:                 increaseStep();
  6347  0000CC  ECBD  F010         	call	_increaseStep	;wreg free
  6348  0000D0                     i2l2929:
  6349  0000D0  FFFF               	dw	65535	; assembler added errata NOP
  6350                           
  6351                           ;interrupt.c: 56:             toggleStep();
  6352  0000D2  EC8A  F010         	call	_toggleStep	;wreg free
  6353  0000D6                     i2l2931:
  6354  0000D6  FFFF               	dw	65535	; assembler added errata NOP
  6355                           
  6356                           ;interrupt.c: 61:     if(PIR1bits.ADIF){
  6357  0000D8  AC9E               	btfss	158,6,c	;volatile
  6358  0000DA  EF71  F000         	goto	i2u217_41
  6359  0000DE  EF74  F000         	goto	i2u217_40
  6360  0000E2                     i2u217_41:
  6361  0000E2  FFFF               	dw	65535	; assembler added errata NOP
  6362  0000E4  EFA1  F000         	goto	i2l2943
  6363  0000E8                     i2u217_40:
  6364  0000E8  FFFF               	dw	65535	; assembler added errata NOP
  6365  0000EA                     
  6366                           ;interrupt.c: 62:         PIR1bits.ADIF = 0;
  6367  0000EA  9C9E               	bcf	158,6,c	;volatile
  6368                           
  6369                           ;interrupt.c: 65:         ADC_res = ADRESL;
  6370  0000EC  CFC3 F04C          	movff	4035,_ADC_res	;volatile
  6371  0000F0  6A4D               	clrf	(_ADC_res+1)^0,c
  6372  0000F2                     
  6373                           ;interrupt.c: 66:         ADC_res |= (ADRESH << 8);
  6374  0000F2  50C4               	movf	196,w,c	;volatile
  6375  0000F4  6E10               	movwf	(??_isr+1)^0,c
  6376  0000F6  6A0F               	clrf	??_isr^0,c
  6377  0000F8  500F               	movf	??_isr^0,w,c
  6378  0000FA  124C               	iorwf	_ADC_res^0,f,c
  6379  0000FC  5010               	movf	(??_isr+1)^0,w,c
  6380  0000FE  124D               	iorwf	(_ADC_res+1)^0,f,c
  6381                           
  6382                           ;interrupt.c: 69:         if(ADC_res > therm_pressure){
  6383  000100  044C               	decf	_ADC_res^0,w,c
  6384  000102  0E04               	movlw	4
  6385  000104  584D               	subwfb	(_ADC_res+1)^0,w,c
  6386  000106  A0D8               	btfss	status,0,c
  6387  000108  EF88  F000         	goto	i2u218_41
  6388  00010C  EF8B  F000         	goto	i2u218_40
  6389  000110                     i2u218_41:
  6390  000110  FFFF               	dw	65535	; assembler added errata NOP
  6391  000112  EF92  F000         	goto	i2l2939
  6392  000116                     i2u218_40:
  6393  000116  FFFF               	dw	65535	; assembler added errata NOP
  6394  000118                     
  6395                           ;interrupt.c: 71:             setTouchRel();
  6396  000118  EC8F  F010         	call	_setTouchRel	;wreg free
  6397                           
  6398                           ;interrupt.c: 72:             setThermRel();
  6399  00011C  EC94  F010         	call	_setThermRel	;wreg free
  6400                           
  6401                           ;interrupt.c: 73:         }else if(ADC_res > touch_pressure){
  6402  000120  EFA1  F000         	goto	i2l2943
  6403  000124                     i2l2939:
  6404  000124  FFFF               	dw	65535	; assembler added errata NOP
  6405  000126  044C               	decf	_ADC_res^0,w,c
  6406  000128  0E02               	movlw	2
  6407  00012A  584D               	subwfb	(_ADC_res+1)^0,w,c
  6408  00012C  A0D8               	btfss	status,0,c
  6409  00012E  EF9B  F000         	goto	i2u219_41
  6410  000132  EF9E  F000         	goto	i2u219_40
  6411  000136                     i2u219_41:
  6412  000136  FFFF               	dw	65535	; assembler added errata NOP
  6413  000138  EFA1  F000         	goto	i2l2943
  6414  00013C                     i2u219_40:
  6415  00013C  FFFF               	dw	65535	; assembler added errata NOP
  6416  00013E                     
  6417                           ;interrupt.c: 75:             setTouchRel();
  6418  00013E  EC8F  F010         	call	_setTouchRel	;wreg free
  6419  000142                     i2l2943:
  6420  000142  FFFF               	dw	65535	; assembler added errata NOP
  6421                           
  6422                           ;interrupt.c: 80:     if(PIR1bits.RC1IF){
  6423  000144  AA9E               	btfss	158,5,c	;volatile
  6424  000146  EFA7  F000         	goto	i2u220_41
  6425  00014A  EFAA  F000         	goto	i2u220_40
  6426  00014E                     i2u220_41:
  6427  00014E  FFFF               	dw	65535	; assembler added errata NOP
  6428  000150  EFB1  F000         	goto	i2l438
  6429  000154                     i2u220_40:
  6430  000154  FFFF               	dw	65535	; assembler added errata NOP
  6431  000156                     
  6432                           ;interrupt.c: 81:         PIR1bits.RC1IF = 0;
  6433  000156  9A9E               	bcf	158,5,c	;volatile
  6434                           
  6435                           ;interrupt.c: 84:         unsigned char temp = RCREG1;
  6436  000158  CFAE F019          	movff	4014,isr@temp	;volatile
  6437  00015C                     
  6438                           ;interrupt.c: 86:         storeData(temp);
  6439  00015C  5019               	movf	isr@temp^0,w,c
  6440  00015E  ECF5  F00A         	call	_storeData
  6441  000162                     i2l438:
  6442  000162  FFFF               	dw	65535	; assembler added errata NOP
  6443  000164  C018  FFF5         	movff	??_isr+9,tablat
  6444  000168  C017  FFF8         	movff	??_isr+8,tblptru
  6445  00016C  C016  FFF7         	movff	??_isr+7,tblptrh
  6446  000170  C015  FFF6         	movff	??_isr+6,tblptrl
  6447  000174  C014  FFF4         	movff	??_isr+5,prodh
  6448  000178  C013  FFF3         	movff	??_isr+4,prodl
  6449  00017C  C012  FFDA         	movff	??_isr+3,fsr2h
  6450  000180  C011  FFD9         	movff	??_isr+2,fsr2l
  6451  000184  9266               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6452  000186  0011               	retfie		f
  6453  000188  FFFF               	dw	65535	; errata NOP
  6454  00018A                     __end_of_isr:
  6455                           	callstack 0
  6456                           
  6457 ;; *************** function _writeTM0 *****************
  6458 ;; Defined at:
  6459 ;;		line 23 in file "motors.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;		None
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;		None
  6464 ;; Return value:  Size  Location     Type
  6465 ;;                  1    wreg      void 
  6466 ;; Registers used:
  6467 ;;		wreg, status,2
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6473 ;;      Params:         0       0       0       0       0       0       0
  6474 ;;      Locals:         0       0       0       0       0       0       0
  6475 ;;      Temps:          0       0       0       0       0       0       0
  6476 ;;      Totals:         0       0       0       0       0       0       0
  6477 ;;Total ram usage:        0 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; This function calls:
  6480 ;;		Nothing
  6481 ;; This function is called by:
  6482 ;;		_isr
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486                           	psect	text41
  6487  0020B6                     __ptext41:
  6488                           	callstack 0
  6489  0020B6                     _writeTM0:
  6490                           	callstack 0
  6491  0020B6  FFFF               	dw	65535	; assembler added errata NOP
  6492  0020B8                     
  6493                           ;motors.c: 24:     tm0Error = 1;
  6494  0020B8  0E00               	movlw	0
  6495  0020BA  6E53               	movwf	(_tm0Error+1)^0,c
  6496  0020BC  0E01               	movlw	1
  6497  0020BE  6E52               	movwf	_tm0Error^0,c
  6498  0020C0  0012               	return		;funcret
  6499  0020C2  FFFF               	dw	65535	; errata NOP
  6500  0020C4                     __end_of_writeTM0:
  6501                           	callstack 0
  6502                           
  6503 ;; *************** function _whatsTM0Limit *****************
  6504 ;; Defined at:
  6505 ;;		line 37 in file "motors.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;		None
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;		None
  6510 ;; Return value:  Size  Location     Type
  6511 ;;                  1    wreg      unsigned char 
  6512 ;; Registers used:
  6513 ;;		wreg, status,2
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6519 ;;      Params:         0       0       0       0       0       0       0
  6520 ;;      Locals:         0       0       0       0       0       0       0
  6521 ;;      Temps:          0       0       0       0       0       0       0
  6522 ;;      Totals:         0       0       0       0       0       0       0
  6523 ;;Total ram usage:        0 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; This function calls:
  6526 ;;		Nothing
  6527 ;; This function is called by:
  6528 ;;		_isr
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           	psect	text42
  6533  002172                     __ptext42:
  6534                           	callstack 0
  6535  002172                     _whatsTM0Limit:
  6536                           	callstack 0
  6537  002172  FFFF               	dw	65535	; assembler added errata NOP
  6538  002174                     
  6539                           ;motors.c: 38:     return(tm0Limit);
  6540  002174  505D               	movf	_tm0Limit^0,w,c
  6541  002176  0012               	return		;funcret
  6542  002178  FFFF               	dw	65535	; errata NOP
  6543  00217A                     __end_of_whatsTM0Limit:
  6544                           	callstack 0
  6545                           
  6546 ;; *************** function _toggleStep *****************
  6547 ;; Defined at:
  6548 ;;		line 81 in file "pwm.c"
  6549 ;; Parameters:    Size  Location     Type
  6550 ;;		None
  6551 ;; Auto vars:     Size  Location     Type
  6552 ;;		None
  6553 ;; Return value:  Size  Location     Type
  6554 ;;                  1    wreg      void 
  6555 ;; Registers used:
  6556 ;;		wreg, status,2
  6557 ;; Tracked objects:
  6558 ;;		On entry : 0/0
  6559 ;;		On exit  : 0/0
  6560 ;;		Unchanged: 0/0
  6561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6562 ;;      Params:         0       0       0       0       0       0       0
  6563 ;;      Locals:         0       0       0       0       0       0       0
  6564 ;;      Temps:          0       0       0       0       0       0       0
  6565 ;;      Totals:         0       0       0       0       0       0       0
  6566 ;;Total ram usage:        0 bytes
  6567 ;; Hardware stack levels used:    1
  6568 ;; This function calls:
  6569 ;;		Nothing
  6570 ;; This function is called by:
  6571 ;;		_isr
  6572 ;; This function uses a non-reentrant model
  6573 ;;
  6574                           
  6575                           	psect	text43
  6576  002114                     __ptext43:
  6577                           	callstack 0
  6578  002114                     _toggleStep:
  6579                           	callstack 0
  6580  002114  FFFF               	dw	65535	; assembler added errata NOP
  6581  002116                     
  6582                           ;pwm.c: 82:     stepToggle = 1;
  6583  002116  0E01               	movlw	1
  6584  002118  6E5B               	movwf	_stepToggle^0,c	;volatile
  6585  00211A  0012               	return		;funcret
  6586  00211C  FFFF               	dw	65535	; errata NOP
  6587  00211E                     __end_of_toggleStep:
  6588                           	callstack 0
  6589                           
  6590 ;; *************** function _storeData *****************
  6591 ;; Defined at:
  6592 ;;		line 118 in file "usart.c"
  6593 ;; Parameters:    Size  Location     Type
  6594 ;;  data            1    wreg     unsigned char 
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;  data            1   13[COMRAM] unsigned char 
  6597 ;;  errSequence     4    9[COMRAM] const unsigned char [4]
  6598 ;; Return value:  Size  Location     Type
  6599 ;;                  1    wreg      void 
  6600 ;; Registers used:
  6601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6602 ;; Tracked objects:
  6603 ;;		On entry : 0/0
  6604 ;;		On exit  : 0/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6607 ;;      Params:         0       0       0       0       0       0       0
  6608 ;;      Locals:         5       0       0       0       0       0       0
  6609 ;;      Temps:          2       0       0       0       0       0       0
  6610 ;;      Totals:         7       0       0       0       0       0       0
  6611 ;;Total ram usage:        7 bytes
  6612 ;; Hardware stack levels used:    1
  6613 ;; Hardware stack levels required when called:    2
  6614 ;; This function calls:
  6615 ;;		i2_printError
  6616 ;; This function is called by:
  6617 ;;		_isr
  6618 ;; This function uses a non-reentrant model
  6619 ;;
  6620                           
  6621                           	psect	text44
  6622  0015EA                     __ptext44:
  6623                           	callstack 0
  6624  0015EA                     _storeData:
  6625                           	callstack 0
  6626  0015EA  FFFF               	dw	65535	; assembler added errata NOP
  6627                           
  6628                           ;incstack = 0
  6629                           ;storeData@data stored from wreg
  6630  0015EC  6E0E               	movwf	storeData@data^0,c
  6631  0015EE                     
  6632                           ;usart.c: 120:     static unsigned char counter = 0;;usart.c: 121:     static unsigned c
      +                          har receivedMex[5];;usart.c: 122:     const unsigned char errSequence[] = {0xFF, 0xFF, 0
      +                          xFF, 0xFF};
  6633  0015EE  0E01               	movlw	low storeData@F2373
  6634  0015F0  6EF6               	movwf	tblptrl,c
  6635  0015F2                     	if	1	;There is more than 1 active tblptr byte
  6636  0015F2  0E06               	movlw	high storeData@F2373
  6637  0015F4  6EF7               	movwf	tblptrh,c
  6638  0015F6                     	endif
  6639  0015F6                     	if	0	;There are less than 3 active tblptr bytes
  6640  0015F6                     	endif
  6641  0015F6  0009               	tblrd		*+
  6642  0015F8  FFFF               	dw	65535	; errata NOP
  6643  0015FA  CFF5 F00A          	movff	tablat,storeData@errSequence
  6644  0015FE  0009               	tblrd		*+
  6645  001600  FFFF               	dw	65535	; errata NOP
  6646  001602  CFF5 F00B          	movff	tablat,storeData@errSequence+1
  6647  001606  0009               	tblrd		*+
  6648  001608  FFFF               	dw	65535	; errata NOP
  6649  00160A  CFF5 F00C          	movff	tablat,storeData@errSequence+2
  6650  00160E  000A               	tblrd		*-
  6651  001610  FFFF               	dw	65535	; errata NOP
  6652  001612  CFF5 F00D          	movff	tablat,storeData@errSequence+3
  6653  001616                     
  6654                           ;usart.c: 126:     receivedMex[counter] = data;
  6655  001616  0E42               	movlw	low storeData@receivedMex
  6656  001618  2454               	addwf	storeData@counter^0,w,c
  6657  00161A  6ED9               	movwf	fsr2l,c
  6658  00161C  6ADA               	clrf	fsr2h,c
  6659  00161E  0E00               	movlw	high storeData@receivedMex
  6660  001620  22DA               	addwfc	fsr2h,f,c
  6661  001622  C00E  FFDF         	movff	storeData@data,indf2
  6662  001626                     
  6663                           ;usart.c: 128:     counter++;
  6664  001626  2A54               	incf	storeData@counter^0,f,c
  6665  001628                     
  6666                           ;usart.c: 131:     if(counter >= mexLength){
  6667  001628  0E04               	movlw	4
  6668  00162A  6454               	cpfsgt	storeData@counter^0,c
  6669  00162C  EF1A  F00B         	goto	i2u208_41
  6670  001630  EF1D  F00B         	goto	i2u208_40
  6671  001634                     i2u208_41:
  6672  001634  FFFF               	dw	65535	; assembler added errata NOP
  6673  001636  EF74  F00B         	goto	i2l521
  6674  00163A                     i2u208_40:
  6675  00163A  FFFF               	dw	65535	; assembler added errata NOP
  6676  00163C                     
  6677                           ;usart.c: 132:         counter = 0;
  6678  00163C  0E00               	movlw	0
  6679  00163E  6E54               	movwf	storeData@counter^0,c
  6680                           
  6681                           ;usart.c: 136:         switch(receivedMex[0]){
  6682  001640  EF59  F00B         	goto	i2l2857
  6683  001644                     i2l2847:
  6684  001644  FFFF               	dw	65535	; assembler added errata NOP
  6685                           
  6686                           ;usart.c: 138:                 dataSequence[dataCounter].feederLine = receivedMex[0];
  6687  001646  5056               	movf	_dataCounter^0,w,c
  6688  001648  0D04               	mullw	4
  6689  00164A  0EEA               	movlw	low _dataSequence
  6690  00164C  24F3               	addwf	243,w,c
  6691  00164E  6ED9               	movwf	fsr2l,c
  6692  001650  0E00               	movlw	high _dataSequence
  6693  001652  20F4               	addwfc	prodh,w,c
  6694  001654  6EDA               	movwf	fsr2h,c
  6695  001656  C042  FFDF         	movff	storeData@receivedMex,indf2
  6696                           
  6697                           ;usart.c: 139:                 dataSequence[dataCounter].posX = receivedMex[0];
  6698  00165A  5056               	movf	_dataCounter^0,w,c
  6699  00165C  0D04               	mullw	4
  6700  00165E  0EEB               	movlw	low (_dataSequence+1)
  6701  001660  24F3               	addwf	243,w,c
  6702  001662  6ED9               	movwf	fsr2l,c
  6703  001664  0E00               	movlw	high (_dataSequence+1)
  6704  001666  20F4               	addwfc	prodh,w,c
  6705  001668  6EDA               	movwf	fsr2h,c
  6706  00166A  C042  FFDF         	movff	storeData@receivedMex,indf2
  6707                           
  6708                           ;usart.c: 140:                 dataSequence[dataCounter].posY = receivedMex[0];
  6709  00166E  5056               	movf	_dataCounter^0,w,c
  6710  001670  0D04               	mullw	4
  6711  001672  0EEC               	movlw	low (_dataSequence+2)
  6712  001674  24F3               	addwf	243,w,c
  6713  001676  6ED9               	movwf	fsr2l,c
  6714  001678  0E00               	movlw	high (_dataSequence+2)
  6715  00167A  20F4               	addwfc	prodh,w,c
  6716  00167C  6EDA               	movwf	fsr2h,c
  6717  00167E  C042  FFDF         	movff	storeData@receivedMex,indf2
  6718                           
  6719                           ;usart.c: 141:                 dataSequence[dataCounter].rotation = receivedMex[0];
  6720  001682  5056               	movf	_dataCounter^0,w,c
  6721  001684  0D04               	mullw	4
  6722  001686  0EED               	movlw	low (_dataSequence+3)
  6723  001688  24F3               	addwf	243,w,c
  6724  00168A  6ED9               	movwf	fsr2l,c
  6725  00168C  0E00               	movlw	high (_dataSequence+3)
  6726  00168E  20F4               	addwfc	prodh,w,c
  6727  001690  6EDA               	movwf	fsr2h,c
  6728  001692  C042  FFDF         	movff	storeData@receivedMex,indf2
  6729  001696                     
  6730                           ;usart.c: 143:                 dataCounter++;
  6731  001696  2A56               	incf	_dataCounter^0,f,c
  6732                           
  6733                           ;usart.c: 144:                 break;
  6734  001698  EF74  F00B         	goto	i2l521
  6735  00169C                     i2l2851:
  6736  00169C  FFFF               	dw	65535	; assembler added errata NOP
  6737                           
  6738                           ;usart.c: 151:                 _fatalError = 1;
  6739  00169E  0E01               	movlw	1
  6740  0016A0  6E55               	movwf	__fatalError^0,c
  6741                           
  6742                           ;usart.c: 152:                 break;
  6743  0016A2  EF74  F00B         	goto	i2l521
  6744  0016A6                     i2l2853:
  6745  0016A6  FFFF               	dw	65535	; assembler added errata NOP
  6746                           
  6747                           ;usart.c: 155:                 printError(8);
  6748  0016A8  0E08               	movlw	8
  6749  0016AA  EC67  F00A         	call	i2_printError
  6750                           
  6751                           ;usart.c: 156:                 break;
  6752  0016AE  EF74  F00B         	goto	i2l521
  6753  0016B2                     i2l2857:
  6754  0016B2  FFFF               	dw	65535	; assembler added errata NOP
  6755  0016B4  5042               	movf	storeData@receivedMex^0,w,c
  6756  0016B6  6E08               	movwf	??_storeData^0,c
  6757  0016B8  6A09               	clrf	(??_storeData+1)^0,c
  6758                           
  6759                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6760                           ; Switch size 1, requested type "simple"
  6761                           ; Number of cases is 1, Range of values is 0 to 0
  6762                           ; switch strategies available:
  6763                           ; Name         Instructions Cycles
  6764                           ; simple_byte            4     3 (average)
  6765                           ;	Chosen strategy is simple_byte
  6766  0016BA  5009               	movf	(??_storeData+1)^0,w,c
  6767  0016BC  0A00               	xorlw	0	; case 0
  6768  0016BE  B4D8               	btfsc	status,2,c
  6769  0016C0  EF64  F00B         	goto	i2l3757
  6770  0016C4  EF53  F00B         	goto	i2l2853
  6771  0016C8                     i2l3757:
  6772  0016C8  FFFF               	dw	65535	; assembler added errata NOP
  6773                           
  6774                           ; Switch size 1, requested type "simple"
  6775                           ; Number of cases is 3, Range of values is 0 to 2
  6776                           ; switch strategies available:
  6777                           ; Name         Instructions Cycles
  6778                           ; simple_byte           10     6 (average)
  6779                           ;	Chosen strategy is simple_byte
  6780  0016CA  5008               	movf	??_storeData^0,w,c
  6781  0016CC  0A00               	xorlw	0	; case 0
  6782  0016CE  B4D8               	btfsc	status,2,c
  6783  0016D0  EF22  F00B         	goto	i2l2847
  6784  0016D4  0A01               	xorlw	1	; case 1
  6785  0016D6  B4D8               	btfsc	status,2,c
  6786  0016D8  EF74  F00B         	goto	i2l521
  6787  0016DC  0A03               	xorlw	3	; case 2
  6788  0016DE  B4D8               	btfsc	status,2,c
  6789  0016E0  EF4E  F00B         	goto	i2l2851
  6790  0016E4  EF53  F00B         	goto	i2l2853
  6791  0016E8                     i2l521:
  6792  0016E8  FFFF               	dw	65535	; assembler added errata NOP
  6793  0016EA  0012               	return		;funcret
  6794  0016EC  FFFF               	dw	65535	; errata NOP
  6795  0016EE                     __end_of_storeData:
  6796                           	callstack 0
  6797                           
  6798 ;; *************** function i2_printError *****************
  6799 ;; Defined at:
  6800 ;;		line 52 in file "usart.c"
  6801 ;; Parameters:    Size  Location     Type
  6802 ;;  errCode         1    wreg     unsigned char 
  6803 ;; Auto vars:     Size  Location     Type
  6804 ;;  errCode         1    6[COMRAM] unsigned char 
  6805 ;; Return value:  Size  Location     Type
  6806 ;;                  1    wreg      void 
  6807 ;; Registers used:
  6808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6809 ;; Tracked objects:
  6810 ;;		On entry : 0/0
  6811 ;;		On exit  : 0/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6814 ;;      Params:         0       0       0       0       0       0       0
  6815 ;;      Locals:         1       0       0       0       0       0       0
  6816 ;;      Temps:          2       0       0       0       0       0       0
  6817 ;;      Totals:         3       0       0       0       0       0       0
  6818 ;;Total ram usage:        3 bytes
  6819 ;; Hardware stack levels used:    1
  6820 ;; Hardware stack levels required when called:    1
  6821 ;; This function calls:
  6822 ;;		i2_uartTx
  6823 ;; This function is called by:
  6824 ;;		_storeData
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828                           	psect	text45
  6829  0014CE                     __ptext45:
  6830                           	callstack 0
  6831  0014CE                     i2_printError:
  6832                           	callstack 0
  6833  0014CE  FFFF               	dw	65535	; assembler added errata NOP
  6834                           
  6835                           ;incstack = 0
  6836                           ;i2printError@errCode stored from wreg
  6837  0014D0  6E07               	movwf	i2printError@errCode^0,c
  6838  0014D2                     
  6839                           ;usart.c: 54:     switch(errCode){
  6840  0014D2  EFC3  F00A         	goto	i2l2677
  6841  0014D6                     i2l2659:
  6842  0014D6  FFFF               	dw	65535	; assembler added errata NOP
  6843                           
  6844                           ;usart.c: 56:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  6845  0014D8  0EA0               	movlw	low _errString_Feed
  6846  0014DA  6E01               	movwf	i2uartTx@ptr^0,c
  6847  0014DC  0E00               	movlw	high _errString_Feed
  6848  0014DE  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6849  0014E0  0E1D               	movlw	29
  6850  0014E2  6E03               	movwf	i2uartTx@length^0,c
  6851  0014E4  ECB7  F00F         	call	i2_uartTx	;wreg free
  6852                           
  6853                           ;usart.c: 57:             break;
  6854  0014E8  EFF2  F00A         	goto	i2l491
  6855  0014EC                     i2l2661:
  6856  0014EC  FFFF               	dw	65535	; assembler added errata NOP
  6857                           
  6858                           ;usart.c: 59:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  6859  0014EE  0E5C               	movlw	low _errString_ZEND
  6860  0014F0  6E01               	movwf	i2uartTx@ptr^0,c
  6861  0014F2  0E01               	movlw	high _errString_ZEND
  6862  0014F4  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6863  0014F6  0E28               	movlw	40
  6864  0014F8  6E03               	movwf	i2uartTx@length^0,c
  6865  0014FA  ECB7  F00F         	call	i2_uartTx	;wreg free
  6866                           
  6867                           ;usart.c: 60:             break;
  6868  0014FE  EFF2  F00A         	goto	i2l491
  6869  001502                     i2l2663:
  6870  001502  FFFF               	dw	65535	; assembler added errata NOP
  6871                           
  6872                           ;usart.c: 62:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  6873  001504  0E84               	movlw	low _errString_Reset
  6874  001506  6E01               	movwf	i2uartTx@ptr^0,c
  6875  001508  0E01               	movlw	high _errString_Reset
  6876  00150A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6877  00150C  0E27               	movlw	39
  6878  00150E  6E03               	movwf	i2uartTx@length^0,c
  6879  001510  ECB7  F00F         	call	i2_uartTx	;wreg free
  6880                           
  6881                           ;usart.c: 63:             break;
  6882  001514  EFF2  F00A         	goto	i2l491
  6883  001518                     i2l2665:
  6884  001518  FFFF               	dw	65535	; assembler added errata NOP
  6885                           
  6886                           ;usart.c: 65:             uartTx(&errString_Point[0], sizeof(errString_Point));
  6887  00151A  0E34               	movlw	low _errString_Point
  6888  00151C  6E01               	movwf	i2uartTx@ptr^0,c
  6889  00151E  0E01               	movlw	high _errString_Point
  6890  001520  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6891  001522  0E28               	movlw	40
  6892  001524  6E03               	movwf	i2uartTx@length^0,c
  6893  001526  ECB7  F00F         	call	i2_uartTx	;wreg free
  6894                           
  6895                           ;usart.c: 66:             break;
  6896  00152A  EFF2  F00A         	goto	i2l491
  6897  00152E                     i2l2667:
  6898  00152E  FFFF               	dw	65535	; assembler added errata NOP
  6899                           
  6900                           ;usart.c: 68:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  6901  001530  0E80               	movlw	low _errString_Bound
  6902  001532  6E01               	movwf	i2uartTx@ptr^0,c
  6903  001534  0E00               	movlw	high _errString_Bound
  6904  001536  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6905  001538  0E20               	movlw	32
  6906  00153A  6E03               	movwf	i2uartTx@length^0,c
  6907  00153C  ECB7  F00F         	call	i2_uartTx	;wreg free
  6908                           
  6909                           ;usart.c: 69:             break;
  6910  001540  EFF2  F00A         	goto	i2l491
  6911  001544                     i2l2669:
  6912  001544  FFFF               	dw	65535	; assembler added errata NOP
  6913                           
  6914                           ;usart.c: 71:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  6915  001546  0E00               	movlw	low _errString_PointZ
  6916  001548  6E01               	movwf	i2uartTx@ptr^0,c
  6917  00154A  0E01               	movlw	high _errString_PointZ
  6918  00154C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6919  00154E  0E34               	movlw	52
  6920  001550  6E03               	movwf	i2uartTx@length^0,c
  6921  001552  ECB7  F00F         	call	i2_uartTx	;wreg free
  6922                           
  6923                           ;usart.c: 72:             break;
  6924  001556  EFF2  F00A         	goto	i2l491
  6925  00155A                     i2l2671:
  6926  00155A  FFFF               	dw	65535	; assembler added errata NOP
  6927                           
  6928                           ;usart.c: 74:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  6929  00155C  0EAB               	movlw	low _errString_Fatal
  6930  00155E  6E01               	movwf	i2uartTx@ptr^0,c
  6931  001560  0E01               	movlw	high _errString_Fatal
  6932  001562  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6933  001564  0E26               	movlw	38
  6934  001566  6E03               	movwf	i2uartTx@length^0,c
  6935  001568  ECB7  F00F         	call	i2_uartTx	;wreg free
  6936                           
  6937                           ;usart.c: 75:             break;
  6938  00156C  EFF2  F00A         	goto	i2l491
  6939  001570                     i2l2673:
  6940  001570  FFFF               	dw	65535	; assembler added errata NOP
  6941                           
  6942                           ;usart.c: 77:             uartTx(&errString_Command[0], sizeof(errString_Command));
  6943  001572  0EBD               	movlw	low _errString_Command
  6944  001574  6E01               	movwf	i2uartTx@ptr^0,c
  6945  001576  0E00               	movlw	high _errString_Command
  6946  001578  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6947  00157A  0E17               	movlw	23
  6948  00157C  6E03               	movwf	i2uartTx@length^0,c
  6949  00157E  ECB7  F00F         	call	i2_uartTx	;wreg free
  6950                           
  6951                           ;usart.c: 78:             break;
  6952  001582  EFF2  F00A         	goto	i2l491
  6953  001586                     i2l2677:
  6954  001586  FFFF               	dw	65535	; assembler added errata NOP
  6955  001588  5007               	movf	i2printError@errCode^0,w,c
  6956  00158A  6E05               	movwf	??i2_printError^0,c
  6957  00158C  6A06               	clrf	(??i2_printError+1)^0,c
  6958                           
  6959                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6960                           ; Switch size 1, requested type "simple"
  6961                           ; Number of cases is 1, Range of values is 0 to 0
  6962                           ; switch strategies available:
  6963                           ; Name         Instructions Cycles
  6964                           ; simple_byte            4     3 (average)
  6965                           ;	Chosen strategy is simple_byte
  6966  00158E  5006               	movf	(??i2_printError+1)^0,w,c
  6967  001590  0A00               	xorlw	0	; case 0
  6968  001592  B4D8               	btfsc	status,2,c
  6969  001594  EFCE  F00A         	goto	i2l3759
  6970  001598  EFF2  F00A         	goto	i2l491
  6971  00159C                     i2l3759:
  6972  00159C  FFFF               	dw	65535	; assembler added errata NOP
  6973                           
  6974                           ; Switch size 1, requested type "simple"
  6975                           ; Number of cases is 8, Range of values is 1 to 8
  6976                           ; switch strategies available:
  6977                           ; Name         Instructions Cycles
  6978                           ; simple_byte           25    13 (average)
  6979                           ;	Chosen strategy is simple_byte
  6980  00159E  5005               	movf	??i2_printError^0,w,c
  6981  0015A0  0A01               	xorlw	1	; case 1
  6982  0015A2  B4D8               	btfsc	status,2,c
  6983  0015A4  EF6B  F00A         	goto	i2l2659
  6984  0015A8  0A03               	xorlw	3	; case 2
  6985  0015AA  B4D8               	btfsc	status,2,c
  6986  0015AC  EF76  F00A         	goto	i2l2661
  6987  0015B0  0A01               	xorlw	1	; case 3
  6988  0015B2  B4D8               	btfsc	status,2,c
  6989  0015B4  EF81  F00A         	goto	i2l2663
  6990  0015B8  0A07               	xorlw	7	; case 4
  6991  0015BA  B4D8               	btfsc	status,2,c
  6992  0015BC  EF8C  F00A         	goto	i2l2665
  6993  0015C0  0A01               	xorlw	1	; case 5
  6994  0015C2  B4D8               	btfsc	status,2,c
  6995  0015C4  EF97  F00A         	goto	i2l2667
  6996  0015C8  0A03               	xorlw	3	; case 6
  6997  0015CA  B4D8               	btfsc	status,2,c
  6998  0015CC  EFA2  F00A         	goto	i2l2669
  6999  0015D0  0A01               	xorlw	1	; case 7
  7000  0015D2  B4D8               	btfsc	status,2,c
  7001  0015D4  EFAD  F00A         	goto	i2l2671
  7002  0015D8  0A0F               	xorlw	15	; case 8
  7003  0015DA  B4D8               	btfsc	status,2,c
  7004  0015DC  EFB8  F00A         	goto	i2l2673
  7005  0015E0  EFF2  F00A         	goto	i2l491
  7006  0015E4                     i2l491:
  7007  0015E4  FFFF               	dw	65535	; assembler added errata NOP
  7008  0015E6  0012               	return		;funcret
  7009  0015E8  FFFF               	dw	65535	; errata NOP
  7010  0015EA                     __end_ofi2_printError:
  7011                           	callstack 0
  7012                           
  7013 ;; *************** function i2_uartTx *****************
  7014 ;; Defined at:
  7015 ;;		line 174 in file "usart.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7018 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  7019 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  7020 ;;  length          1    2[COMRAM] unsigned char 
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;  i               1    3[COMRAM] unsigned char 
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  1    wreg      void 
  7025 ;; Registers used:
  7026 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7032 ;;      Params:         3       0       0       0       0       0       0
  7033 ;;      Locals:         1       0       0       0       0       0       0
  7034 ;;      Temps:          0       0       0       0       0       0       0
  7035 ;;      Totals:         4       0       0       0       0       0       0
  7036 ;;Total ram usage:        4 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; This function calls:
  7039 ;;		Nothing
  7040 ;; This function is called by:
  7041 ;;		i2_printError
  7042 ;; This function uses a non-reentrant model
  7043 ;;
  7044                           
  7045                           	psect	text46
  7046  001F6E                     __ptext46:
  7047                           	callstack 0
  7048  001F6E                     i2_uartTx:
  7049                           	callstack 0
  7050  001F6E  FFFF               	dw	65535	; assembler added errata NOP
  7051  001F70                     
  7052                           ;usart.c: 174: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 175: {;usa
      +                          rt.c: 177:     for(char i = 1; i < length; i++){
  7053  001F70  0E01               	movlw	1
  7054  001F72  6E04               	movwf	i2uartTx@i^0,c
  7055  001F74  EFD0  F00F         	goto	i2l2405
  7056  001F78                     i2l2401:
  7057  001F78  FFFF               	dw	65535	; assembler added errata NOP
  7058                           
  7059                           ;usart.c: 179:         TXREG = *ptr;
  7060  001F7A  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  7061  001F7E  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  7062  001F82  50DF               	movf	indf2,w,c
  7063  001F84  6EAD               	movwf	173,c	;volatile
  7064  001F86                     i2l529:
  7065  001F86  FFFF               	dw	65535	; assembler added errata NOP
  7066  001F88  A2AC               	btfss	172,1,c	;volatile
  7067  001F8A  EFC9  F00F         	goto	i2u155_41
  7068  001F8E  EFCC  F00F         	goto	i2u155_40
  7069  001F92                     i2u155_41:
  7070  001F92  FFFF               	dw	65535	; assembler added errata NOP
  7071  001F94  EFC3  F00F         	goto	i2l529
  7072  001F98                     i2u155_40:
  7073  001F98  FFFF               	dw	65535	; assembler added errata NOP
  7074  001F9A                     
  7075                           ;usart.c: 183:         ptr++;
  7076  001F9A  4A01               	infsnz	i2uartTx@ptr^0,f,c
  7077  001F9C  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  7078                           
  7079                           ;usart.c: 184:     }
  7080  001F9E  2A04               	incf	i2uartTx@i^0,f,c
  7081  001FA0                     i2l2405:
  7082  001FA0  FFFF               	dw	65535	; assembler added errata NOP
  7083  001FA2  5003               	movf	i2uartTx@length^0,w,c
  7084  001FA4  5C04               	subwf	i2uartTx@i^0,w,c
  7085  001FA6  A0D8               	btfss	status,0,c
  7086  001FA8  EFD8  F00F         	goto	i2u156_41
  7087  001FAC  EFDB  F00F         	goto	i2u156_40
  7088  001FB0                     i2u156_41:
  7089  001FB0  FFFF               	dw	65535	; assembler added errata NOP
  7090  001FB2  EFBC  F00F         	goto	i2l2401
  7091  001FB6                     i2u156_40:
  7092  001FB6  FFFF               	dw	65535	; assembler added errata NOP
  7093  001FB8  0012               	return		;funcret
  7094  001FBA  FFFF               	dw	65535	; errata NOP
  7095  001FBC                     __end_ofi2_uartTx:
  7096                           	callstack 0
  7097                           
  7098 ;; *************** function _setTouchRel *****************
  7099 ;; Defined at:
  7100 ;;		line 85 in file "adc.c"
  7101 ;; Parameters:    Size  Location     Type
  7102 ;;		None
  7103 ;; Auto vars:     Size  Location     Type
  7104 ;;		None
  7105 ;; Return value:  Size  Location     Type
  7106 ;;                  1    wreg      void 
  7107 ;; Registers used:
  7108 ;;		wreg, status,2
  7109 ;; Tracked objects:
  7110 ;;		On entry : 0/0
  7111 ;;		On exit  : 0/0
  7112 ;;		Unchanged: 0/0
  7113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7114 ;;      Params:         0       0       0       0       0       0       0
  7115 ;;      Locals:         0       0       0       0       0       0       0
  7116 ;;      Temps:          0       0       0       0       0       0       0
  7117 ;;      Totals:         0       0       0       0       0       0       0
  7118 ;;Total ram usage:        0 bytes
  7119 ;; Hardware stack levels used:    1
  7120 ;; This function calls:
  7121 ;;		Nothing
  7122 ;; This function is called by:
  7123 ;;		_isr
  7124 ;; This function uses a non-reentrant model
  7125 ;;
  7126                           
  7127                           	psect	text47
  7128  00211E                     __ptext47:
  7129                           	callstack 0
  7130  00211E                     _setTouchRel:
  7131                           	callstack 0
  7132  00211E  FFFF               	dw	65535	; assembler added errata NOP
  7133  002120                     
  7134                           ;adc.c: 86:     touch_rel = 1;
  7135  002120  0E01               	movlw	1
  7136  002122  6E5A               	movwf	_touch_rel^0,c	;volatile
  7137  002124  0012               	return		;funcret
  7138  002126  FFFF               	dw	65535	; errata NOP
  7139  002128                     __end_of_setTouchRel:
  7140                           	callstack 0
  7141                           
  7142 ;; *************** function _setThermRel *****************
  7143 ;; Defined at:
  7144 ;;		line 78 in file "adc.c"
  7145 ;; Parameters:    Size  Location     Type
  7146 ;;		None
  7147 ;; Auto vars:     Size  Location     Type
  7148 ;;		None
  7149 ;; Return value:  Size  Location     Type
  7150 ;;                  1    wreg      void 
  7151 ;; Registers used:
  7152 ;;		wreg, status,2
  7153 ;; Tracked objects:
  7154 ;;		On entry : 0/0
  7155 ;;		On exit  : 0/0
  7156 ;;		Unchanged: 0/0
  7157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7158 ;;      Params:         0       0       0       0       0       0       0
  7159 ;;      Locals:         0       0       0       0       0       0       0
  7160 ;;      Temps:          0       0       0       0       0       0       0
  7161 ;;      Totals:         0       0       0       0       0       0       0
  7162 ;;Total ram usage:        0 bytes
  7163 ;; Hardware stack levels used:    1
  7164 ;; This function calls:
  7165 ;;		Nothing
  7166 ;; This function is called by:
  7167 ;;		_isr
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171                           	psect	text48
  7172  002128                     __ptext48:
  7173                           	callstack 0
  7174  002128                     _setThermRel:
  7175                           	callstack 0
  7176  002128  FFFF               	dw	65535	; assembler added errata NOP
  7177  00212A                     
  7178                           ;adc.c: 79:     therm_rel = 1;
  7179  00212A  0E01               	movlw	1
  7180  00212C  6E59               	movwf	_therm_rel^0,c	;volatile
  7181  00212E  0012               	return		;funcret
  7182  002130  FFFF               	dw	65535	; errata NOP
  7183  002132                     __end_of_setThermRel:
  7184                           	callstack 0
  7185                           
  7186 ;; *************** function _retPeriod *****************
  7187 ;; Defined at:
  7188 ;;		line 89 in file "pwm.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;		None
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;		None
  7193 ;; Return value:  Size  Location     Type
  7194 ;;                  2    0[COMRAM] unsigned int 
  7195 ;; Registers used:
  7196 ;;		None
  7197 ;; Tracked objects:
  7198 ;;		On entry : 0/0
  7199 ;;		On exit  : 0/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7202 ;;      Params:         2       0       0       0       0       0       0
  7203 ;;      Locals:         0       0       0       0       0       0       0
  7204 ;;      Temps:          0       0       0       0       0       0       0
  7205 ;;      Totals:         2       0       0       0       0       0       0
  7206 ;;Total ram usage:        2 bytes
  7207 ;; Hardware stack levels used:    1
  7208 ;; This function calls:
  7209 ;;		Nothing
  7210 ;; This function is called by:
  7211 ;;		_isr
  7212 ;; This function uses a non-reentrant model
  7213 ;;
  7214                           
  7215                           	psect	text49
  7216  0020C4                     __ptext49:
  7217                           	callstack 0
  7218  0020C4                     _retPeriod:
  7219                           	callstack 0
  7220  0020C4  FFFF               	dw	65535	; assembler added errata NOP
  7221  0020C6                     
  7222                           ;pwm.c: 90:     return pwmPeriod;
  7223  0020C6  C04E  F001         	movff	_pwmPeriod,?_retPeriod
  7224  0020CA  C04F  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7225  0020CE  0012               	return		;funcret
  7226  0020D0  FFFF               	dw	65535	; errata NOP
  7227  0020D2                     __end_of_retPeriod:
  7228                           	callstack 0
  7229                           
  7230 ;; *************** function _increaseStep *****************
  7231 ;; Defined at:
  7232 ;;		line 73 in file "pwm.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;		None
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;		None
  7237 ;; Return value:  Size  Location     Type
  7238 ;;                  1    wreg      void 
  7239 ;; Registers used:
  7240 ;;		status,2, status,0
  7241 ;; Tracked objects:
  7242 ;;		On entry : 0/0
  7243 ;;		On exit  : 0/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7246 ;;      Params:         0       0       0       0       0       0       0
  7247 ;;      Locals:         0       0       0       0       0       0       0
  7248 ;;      Temps:          0       0       0       0       0       0       0
  7249 ;;      Totals:         0       0       0       0       0       0       0
  7250 ;;Total ram usage:        0 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; This function calls:
  7253 ;;		Nothing
  7254 ;; This function is called by:
  7255 ;;		_isr
  7256 ;; This function uses a non-reentrant model
  7257 ;;
  7258                           
  7259                           	psect	text50
  7260  00217A                     __ptext50:
  7261                           	callstack 0
  7262  00217A                     _increaseStep:
  7263                           	callstack 0
  7264  00217A  FFFF               	dw	65535	; assembler added errata NOP
  7265  00217C                     
  7266                           ;pwm.c: 74:     pwmStep++;
  7267  00217C  2A5C               	incf	_pwmStep^0,f,c	;volatile
  7268  00217E  0012               	return		;funcret
  7269  002180  FFFF               	dw	65535	; errata NOP
  7270  002182                     __end_of_increaseStep:
  7271                           	callstack 0
  7272                           
  7273                           	psect	rparam
  7274  0000                     
  7275                           	psect	temp
  7276  000066                     btemp:
  7277                           	callstack 0
  7278  000066                     	ds	1
  7279  0000                     int$flags	set	btemp
  7280  0000                     wtemp8	set	btemp+1
  7281  0000                     ttemp5	set	btemp+1
  7282  0000                     ttemp6	set	btemp+4
  7283  0000                     ttemp7	set	btemp+8
  7284                           
  7285                           	psect	idloc
  7286                           
  7287                           ;Config register IDLOC0 @ 0x200000
  7288                           ;	unspecified, using default values
  7289  200000                     	org	2097152
  7290  200000  FF                 	db	255
  7291                           
  7292                           ;Config register IDLOC1 @ 0x200001
  7293                           ;	unspecified, using default values
  7294  200001                     	org	2097153
  7295  200001  FF                 	db	255
  7296                           
  7297                           ;Config register IDLOC2 @ 0x200002
  7298                           ;	unspecified, using default values
  7299  200002                     	org	2097154
  7300  200002  FF                 	db	255
  7301                           
  7302                           ;Config register IDLOC3 @ 0x200003
  7303                           ;	unspecified, using default values
  7304  200003                     	org	2097155
  7305  200003  FF                 	db	255
  7306                           
  7307                           ;Config register IDLOC4 @ 0x200004
  7308                           ;	unspecified, using default values
  7309  200004                     	org	2097156
  7310  200004  FF                 	db	255
  7311                           
  7312                           ;Config register IDLOC5 @ 0x200005
  7313                           ;	unspecified, using default values
  7314  200005                     	org	2097157
  7315  200005  FF                 	db	255
  7316                           
  7317                           ;Config register IDLOC6 @ 0x200006
  7318                           ;	unspecified, using default values
  7319  200006                     	org	2097158
  7320  200006  FF                 	db	255
  7321                           
  7322                           ;Config register IDLOC7 @ 0x200007
  7323                           ;	unspecified, using default values
  7324  200007                     	org	2097159
  7325  200007  FF                 	db	255
  7326                           
  7327                           	psect	config
  7328                           
  7329                           ; Padding undefined space
  7330  300000                     	org	3145728
  7331  300000  FF                 	db	255
  7332                           
  7333                           ;Config register CONFIG1H @ 0x300001
  7334                           ;	Oscillator Selection bits
  7335                           ;	OSC = XT, XT oscillator
  7336                           ;	Oscillator System Clock Switch Enable bit
  7337                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  7338  300001                     	org	3145729
  7339  300001  21                 	db	33
  7340                           
  7341                           ;Config register CONFIG2L @ 0x300002
  7342                           ;	Power-up Timer Enable bit
  7343                           ;	PWRT = OFF, PWRT disabled
  7344                           ;	Brown-out Reset Enable bit
  7345                           ;	BOR = OFF, Brown-out Reset disabled
  7346                           ;	Brown-out Reset Voltage bits
  7347                           ;	BORV = 20, VBOR set to 2.0V
  7348  300002                     	org	3145730
  7349  300002  0D                 	db	13
  7350                           
  7351                           ;Config register CONFIG2H @ 0x300003
  7352                           ;	Watchdog Timer Enable bit
  7353                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7354                           ;	Watchdog Timer Postscale Select bits
  7355                           ;	WDTPS = 128, 1:128
  7356  300003                     	org	3145731
  7357  300003  0E                 	db	14
  7358                           
  7359                           ; Padding undefined space
  7360  300004                     	org	3145732
  7361  300004  FF                 	db	255
  7362                           
  7363                           ;Config register CONFIG3H @ 0x300005
  7364                           ;	CCP2 Mux bit
  7365                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  7366  300005                     	org	3145733
  7367  300005  00                 	db	0
  7368                           
  7369                           ;Config register CONFIG4L @ 0x300006
  7370                           ;	Stack Full/Underflow Reset Enable bit
  7371                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  7372                           ;	Low Voltage ICSP Enable bit
  7373                           ;	LVP = OFF, Low Voltage ICSP disabled
  7374                           ;	Background Debugger Enable bit
  7375                           ;	DEBUG = 0x1, unprogrammed default
  7376  300006                     	org	3145734
  7377  300006  80                 	db	128
  7378                           
  7379                           ; Padding undefined space
  7380  300007                     	org	3145735
  7381  300007  FF                 	db	255
  7382                           
  7383                           ;Config register CONFIG5L @ 0x300008
  7384                           ;	Code Protection bit
  7385                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  7386                           ;	Code Protection bit
  7387                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  7388                           ;	Code Protection bit
  7389                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  7390                           ;	Code Protection bit
  7391                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  7392  300008                     	org	3145736
  7393  300008  0F                 	db	15
  7394                           
  7395                           ;Config register CONFIG5H @ 0x300009
  7396                           ;	Boot Block Code Protection bit
  7397                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  7398                           ;	Data EEPROM Code Protection bit
  7399                           ;	CPD = OFF, Data EEPROM not code protected
  7400  300009                     	org	3145737
  7401  300009  C0                 	db	192
  7402                           
  7403                           ;Config register CONFIG6L @ 0x30000A
  7404                           ;	Write Protection bit
  7405                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  7406                           ;	Write Protection bit
  7407                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  7408                           ;	Write Protection bit
  7409                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  7410                           ;	Write Protection bit
  7411                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  7412  30000A                     	org	3145738
  7413  30000A  0F                 	db	15
  7414                           
  7415                           ;Config register CONFIG6H @ 0x30000B
  7416                           ;	Configuration Register Write Protection bit
  7417                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  7418                           ;	Boot Block Write Protection bit
  7419                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  7420                           ;	Data EEPROM Write Protection bit
  7421                           ;	WRTD = OFF, Data EEPROM not write protected
  7422  30000B                     	org	3145739
  7423  30000B  E0                 	db	224
  7424                           
  7425                           ;Config register CONFIG7L @ 0x30000C
  7426                           ;	Table Read Protection bit
  7427                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  7428                           ;	Table Read Protection bit
  7429                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  7430                           ;	Table Read Protection bit
  7431                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  7432                           ;	Table Read Protection bit
  7433                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  7434  30000C                     	org	3145740
  7435  30000C  0F                 	db	15
  7436                           
  7437                           ;Config register CONFIG7H @ 0x30000D
  7438                           ;	Boot Block Table Read Protection bit
  7439                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  7440  30000D                     	org	3145741
  7441  30000D  40                 	db	64
  7442                           tosu	equ	0xFFF
  7443                           tosh	equ	0xFFE
  7444                           tosl	equ	0xFFD
  7445                           stkptr	equ	0xFFC
  7446                           pclatu	equ	0xFFB
  7447                           pclath	equ	0xFFA
  7448                           pcl	equ	0xFF9
  7449                           tblptru	equ	0xFF8
  7450                           tblptrh	equ	0xFF7
  7451                           tblptrl	equ	0xFF6
  7452                           tablat	equ	0xFF5
  7453                           prodh	equ	0xFF4
  7454                           prodl	equ	0xFF3
  7455                           indf0	equ	0xFEF
  7456                           postinc0	equ	0xFEE
  7457                           postdec0	equ	0xFED
  7458                           preinc0	equ	0xFEC
  7459                           plusw0	equ	0xFEB
  7460                           fsr0h	equ	0xFEA
  7461                           fsr0l	equ	0xFE9
  7462                           wreg	equ	0xFE8
  7463                           indf1	equ	0xFE7
  7464                           postinc1	equ	0xFE6
  7465                           postdec1	equ	0xFE5
  7466                           preinc1	equ	0xFE4
  7467                           plusw1	equ	0xFE3
  7468                           fsr1h	equ	0xFE2
  7469                           fsr1l	equ	0xFE1
  7470                           bsr	equ	0xFE0
  7471                           indf2	equ	0xFDF
  7472                           postinc2	equ	0xFDE
  7473                           postdec2	equ	0xFDD
  7474                           preinc2	equ	0xFDC
  7475                           plusw2	equ	0xFDB
  7476                           fsr2h	equ	0xFDA
  7477                           fsr2l	equ	0xFD9
  7478                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    19
    Data        301
    BSS         48
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     65     101
    BANK0           128     22     126
    BANK1           256      0     209
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 52
		 -> errString_Command(BANK0[23]), errString_Fatal(BANK1[38]), errString_PointZ(BANK1[52]), errString_Bound(BANK0[32]), 
		 -> errString_Point(BANK1[40]), errString_Reset(BANK1[39]), errString_ZEND(BANK1[40]), errString_Feed(BANK0[29]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 


Critical Paths under _main in COMRAM

    _resetPosition->_enableMotor
    _resetPosition->_setDecay
    _resetPosition->_setDirection
    _resetPosition->_setStep
    _printError->_uartTx
    _touchTherm->_setDirection
    _touchObject->_setDirection
    _rotateObj->___fldiv
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _moveToPoint->_setDirection
    _liftArm->_setDirection

Critical Paths under _isr in COMRAM

    _isr->_storeData
    _storeData->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj
    _rotateObj->___fltol

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   14046
                                             64 COMRAM     1     1      0
                           _clearTM0
                        _enableMotor
                        _executeData
                         _fatalError
                            _initADC
                      _initPinMotors
                      _interruptInit
                         _printError
                            _readSeq
                          _reduceSeq
                      _resetPosition
                          _shiftData
                           _tim0Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2      98
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0      90
                                             25 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0    2504
                                             29 COMRAM     3     3      0
                        _enableMotor
                          _resetStep
                           _setDecay
                       _setDirection
                            _setStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _setStep                                              4     3      1     382
                                             25 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _setDecay                                             4     3      1     316
                                             25 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _enableMotor                                          4     3      1     544
                                             25 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printError                                           3     3      0    1307
                                             29 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (2) _uartTx                                               4     1      3    1285
                                             25 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    9466
                                             17 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0    1058
                          _resetStep
                         _resetTherm
                        _returnTherm
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0    1058
                          _resetStep
                         _resetTouch
                        _returnTouch
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3129
                                             10 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             25 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                              0 BANK0     10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             39 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         12     4      8    2882
                                             29 COMRAM    12     4      8
                          _resetStep
                       _setDirection
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0    1058
                          _resetStep
                       _setDirection
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             25 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _setDirection                                         4     3      1    1024
                                             25 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 11    11      0     553
                                             14 COMRAM    11    11      0
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                          _storeData
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _storeData                                            7     7      0     530
                                              7 COMRAM     7     7      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _enableMotor
   _executeData
     _getData
     _liftArm
       _resetStep
       _setDirection
       _stepMade
     _moveToPoint
       _resetStep
       _setDirection
       _stepCounter
       _stepMade
     _pickObject
     _releaseObj
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _touchObject
       _resetStep
       _resetTouch
       _returnTouch
       _setDirection
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _setDirection
       _startADC
       _stepMade
       _stopADC
   _fatalError
   _initADC
   _initPinMotors
   _interruptInit
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetPosition
     _enableMotor
     _resetStep
     _setDecay
     _setDirection
     _setStep
     _stepMade
   _shiftData
   _tim0Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _storeData
     i2_printError
       i2_uartTx
   _toggleStep
   _whatsTM0Limit
   _writeTM0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      D1       7       81.6%
BITBANK0            80      0       0       4        0.0%
BANK0               80     16      7E       5       98.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     41      65       1       80.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B4      15        0.0%
DATA                 0      0     1B4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Fri Jan 15 11:26:01 2021

                                                  ___fldiv@aexp 0040  
                                                  ___fldiv@bexp 003F  
                                         __end_of_interruptInit 1FF6  
                                                  ___fldiv@sign 0038  
                                                            l74 2018  
                                                            l83 19A2  
                                                            l68 20B2  
                                                            l92 1DF2  
                                                           l101 1E66  
                                                           l110 1D7E  
                                                           l200 1BE0  
                                                           l120 0F96  
                                                           l121 0FC6  
                                                           l210 1B30  
                                                           l131 101A  
                                                           l115 0F62  
                                                           l124 0FCA  
                                                           l116 1076  
                                                           l141 1274  
                                                           l213 216E  
                                                           l125 0FFA  
                                                           l117 0F92  
                                                           l150 11C0  
                                                           l310 0CA2  
                                                           l135 108C  
                                                           l152 11F6  
                                                           l216 2166  
                                                           l323 2096  
                                                           l332 20F2  
                                                           l156 1216  
                                                           l172 18CA  
                                                           l164 182A  
                                                           l500 214E  
                                                           l149 125C  
                                                           l173 18CE  
                                                           l190 1BB6  
                                                           l182 1758  
                                                           l326 2070  
                                                           l335 2110  
                                                           l192 1B7A  
                                                           l168 184A  
                                                           l329 2084  
                                                           l193 1BC8  
                                                           l505 1EC8  
                                                           l362 215E  
                                                           l186 17D8  
                                                           l178 1738  
                                                           l371 20DA  
                                                           l187 17DC  
                                                           l524 20A4  
                                                           l196 1B9A  
                                                           l365 2156  
                                                           l533 1F6A  
                                                           l374 2106  
                                                           l359 203E  
                                                           l287 1C4A  
                                                           l368 20E6  
                                                           l296 1FD2  
                                                           l288 1C4C  
                                                           l377 20FC  
                                                           l297 1FE8  
                                                           l529 1F38  
                                                           l298 1FF2  
                                                           l491 14C8  
                                                           l477 205C  
                                                           l494 213E  
                                                           l833 13AC  
                                                           l497 2146  
                                                           u940 1FCE  
                                                           u941 1FC8  
                                                           u950 1FE4  
                                                           u951 1FDE  
                                                           _isr 0008  
                                                   _touchObject 17E0  
                                                           prod 000FF3  
                                                           wreg 000FE8  
                                                  ___fltol@exp1 00DD  
                                                   main@errCode 0041  
                                                          l1120 085A  
                                                          l1131 0940  
                                                          l1123 0814  
                                                          l1132 0928  
                                                          l1205 0E1E  
                                                          l1118 0A42  
                                                          l3001 207E  
                                                          l1129 08B0  
                                                          l3011 20E0  
                                                          l3005 210C  
                                                          l3101 0846  
                                                          l3021 0618  
                                                          l3013 2154  
                                                          l3007 20EC  
                                                          l3111 089C  
                                                          l3103 0856  
                                                          l3031 0662  
                                                          l3023 0624  
                                                          l1191 0D06  
                                                          l3015 2102  
                                                          l3121 08EC  
                                                          l3113 08AE  
                                                          l3105 0870  
                                                          l3041 0698  
                                                          l3033 0672  
                                                          l3025 0636  
                                                          l3009 215C  
                                                          l3017 20D4  
                                                          l1194 0E98  
                                                          l3131 0974  
                                                          l3123 091E  
                                                          l3107 088A  
                                                          l3115 08C2  
                                                          l3051 06DC  
                                                          l3043 069E  
                                                          l3035 0676  
                                                          l3027 0638  
                                                          l3211 0D34  
                                                          l3203 0CAA  
                                                          l3019 20F8  
                                                          l2411 1908  
                                                          l3301 124A  
                                                          l3141 09F8  
                                                          l3133 099E  
                                                          l3117 08D6  
                                                          l3109 0890  
                                                          l3061 0726  
                                                          l3053 06EC  
                                                          l3045 06B0  
                                                          l3029 064E  
                                                          l3037 067E  
                                                          l3221 0D98  
                                                          l3205 0CBE  
                                                          l2413 193C  
                                                          l1198 0DB2  
                                                          l3303 1262  
                                                          l3151 0A36  
                                                          l3143 0A14  
                                                          l3127 0956  
                                                          l3135 09A2  
                                                          l3119 08DA  
                                                          l3063 0736  
                                                          l3071 0758  
                                                          l3055 06F0  
                                                          l3047 06B2  
                                                          l3039 0690  
                                                          l3231 0E0C  
                                                          l3223 0D9C  
                                                          l3215 0D48  
                                                          l3207 0CD0  
                                                          l3311 17E2  
                                                          l2423 1D88  
                                                          l2407 18D6  
                                                          l3401 1B4A  
                                                          l3305 126E  
                                                          l3145 0A1A  
                                                          l3137 09C2  
                                                          l3129 0962  
                                                          l3081 079E  
                                                          l3073 076E  
                                                          l3065 073E  
                                                          l3049 06C8  
                                                          l3057 06F8  
                                                          l3161 1298  
                                                          l3241 0E72  
                                                          l3233 0E32  
                                                          l3225 0DA8  
                                                          l3217 0D52  
                                                          l3209 0D18  
                                                          l3321 17FC  
                                                          l3313 17EC  
                                                          l2425 1D8C  
                                                          l2433 1DBC  
                                                          l2441 1D18  
                                                          l2409 18DA  
                                                          l2417 196C  
                                                          l3411 1B7E  
                                                          l3403 1B4E  
                                                          l3307 1272  
                                                          l3251 10AC  
                                                          l3147 0A2C  
                                                          l3139 09D8  
                                                          l3091 07EC  
                                                          l3083 07AE  
                                                          l3075 076E  
                                                          l3067 0744  
                                                          l3059 070A  
                                                          l3171 12F0  
                                                          l3243 0E84  
                                                          l3235 0E34  
                                                          l3227 0DEA  
                                                          l3219 0D60  
                                                          l3331 184C  
                                                          l3323 1804  
                                                          l3315 17EE  
                                                          l2427 1D9C  
                                                          l2443 1D28  
                                                          l3413 1B9C  
                                                          l3405 1B54  
                                                          l3261 10FE  
                                                          l3253 10C4  
                                                          l3149 0A32  
                                                          l3093 0800  
                                                          l3085 07BE  
                                                          l3181 1322  
                                                          l3173 12F4  
                                                          l3165 12AE  
                                                          l3245 0E86  
                                                          l3237 0E3A  
                                                          l3229 0DF8  
                                                          l3341 189C  
                                                          l3325 181C  
                                                          l3333 1866  
                                                          l3317 17F6  
                                                          l3501 0AAA  
                                                          l1901 2144  
                                                          l2429 1DAC  
                                                          l2445 1D38  
                                                          l3415 1BCE  
                                                          l3407 1B6C  
                                                          l3271 114E  
                                                          l3263 110A  
                                                          l3095 0812  
                                                          l3087 07CE  
                                                          l3079 0782  
                                                          l3191 1352  
                                                          l3183 132E  
                                                          l3175 1306  
                                                          l3167 12DE  
                                                          l3159 127C  
                                                          l3239 0E5E  
                                                          l3431 1B04  
                                                          l3423 1A80  
                                                          l3343 189E  
                                                          l3335 1882  
                                                          l3327 181E  
                                                          l3319 17FA  
                                                          l3511 0B56  
                                                          l3503 0ABE  
                                                          l2439 1D14  
                                                          l3417 1BDA  
                                                          l3409 1B6E  
                                                          l3281 1166  
                                                          l3273 1152  
                                                          l3265 112E  
                                                          l3257 10CC  
                                                          l3249 1092  
                                                          l3097 0820  
                                                          l3089 07D6  
                                                          l3193 1360  
                                                          l3185 1338  
                                                          l3169 12E0  
                                                          l3433 1B06  
                                                          l3425 1AD2  
                                                          l3345 18AC  
                                                          l3329 182E  
                                                          l3337 1892  
                                                          l3361 1708  
                                                          l3353 16F0  
                                                          l3513 0B66  
                                                          l3505 0AF8  
                                                          l3521 0BCA  
                                                          l1841 1FE6  
                                                          l2449 1D48  
                                                          l1763 20AA  
                                                          l3419 1BDE  
                                                          l3291 11C4  
                                                          l3283 117E  
                                                          l3275 1154  
                                                          l3267 113C  
                                                          l3259 10F0  
                                                          l3435 216C  
                                                          l3099 0844  
                                                          l3195 1374  
                                                          l3427 1ADC  
                                                          l3347 18B0  
                                                          l3339 1898  
                                                          l3371 173C  
                                                          l3363 170A  
                                                          l3355 16FA  
                                                          l3531 0C6C  
                                                          l3523 0BE0  
                                                          l3515 0B7A  
                                                          l3507 0B08  
                                                          l1851 2030  
                                                          l1843 201E  
                                                          l1771 2000  
                                                          l2651 1F2A  
                                                          l3451 0F24  
                                                          l3443 0EA0  
                                                          l3293 11EE  
                                                          l3285 1182  
                                                          l3277 115C  
                                                          l3269 1148  
                                                          l3437 2164  
                                                          l3197 138A  
                                                          l3429 1AE2  
                                                          l3349 18C2  
                                                          l3381 17A6  
                                                          l3373 175A  
                                                          l3365 1712  
                                                          l3357 16FC  
                                                          l3541 0C96  
                                                          l3533 0C7E  
                                                          l3525 0BE4  
                                                          l3509 0B1C  
                                                          l1853 203A  
                                                          l1845 2026  
                                                          l1781 2012  
                                                          l1773 2004  
                                                          l1837 1FBE  
                                                          l2653 1F4C  
                                                          l2741 13BA  
                                                          l3461 0F50  
                                                          l3453 0F26  
                                                          l3445 0F18  
                                                          l2733 2062  
                                                          l3439 209C  
                                                          l3295 11FA  
                                                          l3287 118E  
                                                          l3279 1160  
                                                          l3199 139A  
                                                          l3391 17D0  
                                                          l3383 17AA  
                                                          l3367 172A  
                                                          l3375 1774  
                                                          l3359 1704  
                                                          l3535 0C86  
                                                          l3527 0BE8  
                                                          l3543 0C9E  
                                                          l3519 0B84  
                                                          l1871 214C  
                                                          l1855 203C  
                                                          l1847 202C  
                                                          l1783 2014  
                                                          l1775 2008  
                                                          l1839 1FD0  
                                                          l2655 1F52  
                                                          l2751 1428  
                                                          l2743 13D0  
                                                          l3471 0FBC  
                                                          l3463 0F56  
                                                          l3455 0F2E  
                                                          l3447 0F1C  
                                                          l2831 1EB2  
                                                          l2823 1E6E  
                                                          l2735 2064  
                                                          l3551 1BE4  
                                                          l3297 121A  
                                                          l3289 11B8  
                                                          l3385 17AC  
                                                          l3377 1790  
                                                          l3369 172C  
                                                          l3537 0C8E  
                                                          l3529 0BEC  
                                                          l1849 202E  
                                                          l1785 2016  
                                                          l1777 200C  
                                                          l1769 1FF8  
                                                          l2649 1F22  
                                                          l2753 143E  
                                                          l2745 13E6  
                                                          l3473 0FDE  
                                                          l3465 0F76  
                                                          l3481 103A  
                                                          l3457 0F32  
                                                          l3449 0F20  
                                                          l2833 1EB4  
                                                          l1857 208A  
                                                          l2737 2068  
                                                          l3561 1BF6  
                                                          l3553 1BE4  
                                                          l3395 1B36  
                                                          l3299 1234  
                                                          l3387 17BA  
                                                          l3379 17A0  
                                                          l3539 0C92  
                                                          l1779 2010  
                                                          l2755 1454  
                                                          l2747 13FC  
                                                          l2739 13B6  
                                                          l1963 213C  
                                                          l3483 1050  
                                                          l3475 0FF0  
                                                          l3467 0F88  
                                                          l3459 0F38  
                                                          l1859 2092  
                                                          l1867 2044  
                                                          l3571 1C44  
                                                          l3563 1C06  
                                                          l3555 1BEA  
                                                          l3397 1B40  
                                                          l3389 17BE  
                                                          l3493 0A4A  
                                                          l2749 1412  
                                                          l3485 1064  
                                                          l3477 0FFE  
                                                          l3469 0FAA  
                                                          l2829 1E72  
                                                          l1869 2058  
                                                          l3581 1C7A  
                                                          l3573 1C50  
                                                          l3565 1C0A  
                                                          l3557 1BEE  
                                                          l3399 1B42  
                                                          l3495 0A56  
                                                          l3751 1480  
                                                          l2759 146A  
                                                          l3487 107C  
                                                          l3479 1020  
                                                          l3583 1C7E  
                                                          l3575 1C6A  
                                                          l3567 1C0C  
                                                          l3559 1BF2  
                                                          l3753 0BA2  
                                                          l3497 0A60  
                                                          l3745 1982  
                                                          l3489 1088  
                                                          l3577 1C70  
                                                          l3569 1C26  
                                                          l3755 1E46  
                                                          l3499 0A9A  
                                                          l3747 1D5E  
                                                          l3579 1C76  
                                                          l2981 1DFC  
                                                          l3749 1DD2  
                                                          l2983 1E00  
                                                          l2991 1E30  
                                                          l2985 1E10  
                                                          l2987 1E20  
                                                          l2997 2076  
                                                          l2999 207A  
                                                          ?_isr 0001  
                                                          u3000 103A  
                                                          u3001 1034  
                                                          u3010 104E  
                                                          u3011 1048  
                                                          u2300 0724  
                                                          u3020 1062  
                                                          u2301 071E  
                                                          u3021 105C  
                                                          u2310 076C  
                                                          u3030 1076  
                                                          u2070 1EC6  
                                                          u2215 1E0A  
                                                          u2311 0766  
                                                          u3031 1070  
                                                          u2071 1EC0  
                                                          u2216 1E0C  
                                                          u2400 091C  
                                                          u2320 07EA  
                                                          u2240 0634  
                                                          u3040 0BDE  
                                                          _LATD 000F8C  
                                                          u2225 1E1A  
                                                          u2401 0916  
                                                          u2321 07E4  
                                                          u2241 062E  
                                                          u3041 0BD8  
                                                          u2226 1E1C  
                                                          u2410 093A  
                                                          u2330 0810  
                                                          u2250 064C  
                                                          u3050 0C7C  
                                                          u2235 1E2A  
                                                          u2411 0934  
                                                          u2331 080A  
                                                          u2251 0646  
                                                          u3051 0C76  
                                                          u2236 1E2C  
                                                          u2420 0954  
                                                          u2340 0842  
                                                          u2260 0660  
                                                          u2500 131C  
                                                          u3060 1C24  
                                                          u2421 094E  
                                                          u2341 083C  
                                                          u2261 065A  
                                                          u2501 1316  
                                                          u1605 1D22  
                                                          u3061 1C1E  
                                                          u2430 0972  
                                                          u2350 086E  
                                                          u2270 06AE  
                                                          u2510 134C  
                                                          u1606 1D24  
                                                          u3070 1C68  
                                                          u2431 096C  
                                                          u2351 0868  
                                                          u2271 06A8  
                                                          u2511 1346  
                                                          u1615 1D32  
                                                          u3071 1C62  
                                                          u2440 09C0  
                                                          u2360 0888  
                                                          u2280 06C6  
                                                          u2520 1374  
                                                          u2600 0E1E  
                                                          u1616 1D34  
                                                          u2441 09BA  
                                                          u2361 0882  
                                                          u2281 06C0  
                                                          u2521 136E  
                                                          u2601 0E18  
                                                          u1625 1D42  
                                                          u2450 09F6  
                                                          u2370 08AC  
                                                          u2290 06DA  
                                                          u2530 1388  
                                                          u2610 0E30  
                                                          u1626 1D44  
                                                          u2451 09F0  
                                                          u2371 08A6  
                                                          u2291 06D4  
                                                          u2531 1382  
                                                          u2611 0E2A  
                                                          u2700 11EC  
                                                          u2460 0A2A  
                                                          u2380 08D4  
                                                          u2620 0E70  
                                                          u2540 0CBC  
                                                          u2701 11E6  
                                                          u2461 0A24  
                                                          u2381 08CE  
                                                          u2621 0E6A  
                                                          u2541 0CB6  
                                                          u2710 1214  
                                                          u2390 08EA  
                                                          u2470 1296  
                                                          u2630 0E82  
                                                          u2550 0CCE  
                                                          u1910 1F4A  
                                                          u2711 120E  
                                                          u2391 08E4  
                                                          u2471 1290  
                                                          u2631 0E7C  
                                                          u2551 0CC8  
                                                          u1911 1F44  
                                                          u1575 1D96  
                                                          u2720 1234  
                                                          u2640 10AA  
                                                          u2480 12D2  
                                                          u2560 0D32  
                                                          u2800 18C0  
                                                          u1920 1F68  
                                                          u1576 1D98  
                                                          u2721 122E  
                                                          u2641 10A4  
                                                          u2561 0D2C  
                                                          u2801 18BA  
                                                          u1921 1F62  
                                                          u1585 1DA6  
                                                          u2730 1248  
                                                          u2650 10C4  
                                                          u2490 1304  
                                                          u2570 0D92  
                                                          u2810 1728  
                                                          u1586 1DA8  
                                                          u2731 1242  
                                                          u2651 10BE  
                                                          u2491 12FE  
                                                          u2571 0D8C  
                                                          u2811 1722  
                                                          u1595 1DB6  
                                                          u2900 1BC8  
                                                          u2740 125C  
                                                          u2660 10EE  
                                                          u2580 0DE4  
                                                          u2820 1756  
                                                          u1596 1DB8  
                                                          u2901 1BC2  
                                                          u2741 1256  
                                                          u2661 10E8  
                                                          u2485 12C6  
                                                          u2581 0DDE  
                                                          u2821 1750  
                                                          u2670 112C  
                                                          u2590 0E0A  
                                                          u2910 1B2E  
                                                          u2750 181A  
                                                          u2830 1774  
                                                          u2671 1126  
                                                          u2591 0E04  
                                                          u2911 1B28  
                                                          u2751 1814  
                                                          u2831 176E  
                                                          u2680 117C  
                                                          u2760 1848  
                                                          u2840 178E  
                                                          u2920 0F4E  
                                                          u2681 1176  
                                                          u2761 1842  
                                                          u2841 1788  
                                                          u2921 0F48  
                                                          u2690 11B6  
                                                          u2770 1866  
                                                          u2850 17A0  
                                                          u2930 0F74  
                                                          u2691 11B0  
                                                          u2771 1860  
                                                          u2851 179A  
                                                          u2931 0F6E  
                                                          u2780 1880  
                                                          u2860 17CE  
                                                          u2940 0F88  
                                                          u2781 187A  
                                                          u2861 17C8  
                                                          u2941 0F82  
                                                          u2870 1B6A  
                                                          u2790 1892  
                                                          u2950 0FA8  
                                                          u2871 1B64  
                                                          u2791 188C  
                                                          u2951 0FA2  
                                                          u2880 1B98  
                                                          u2960 0FBC  
                                                          u2881 1B92  
                                                          u2961 0FB6  
                                                          u2890 1BB6  
                                                          u2970 0FDC  
                                                          u2891 1BB0  
                                                          u2971 0FD6  
                                                          u2980 0FF0  
                                                          u2981 0FEA  
                                                          u2990 1018  
                                                          u2991 1012  
                                                          i2l71 2176  
                                                          i2l65 20C0  
                                                          _TMR0 000FD6  
                                                          _TMR2 000FCC  
                                                          _main 1BE4  
                                                          _maxX 0064  
                                                          _maxY 0062  
                                          __end_ofi2_printError 15EA  
                                                          fsr2h 000FDA  
                                                          indf2 000FDF  
                                                          fsr1l 000FE1  
                                                          fsr2l 000FD9  
                                                          btemp 0066  
                                                          prodh 000FF4  
                                                          prodl 000FF3  
                                                          start 018A  
                                               ___fldiv@new_exp 0039  
                                                  ___param_bank 000000  
                                               ??_whatsTM0Limit 0001  
                                                         ??_isr 000F  
                                                  ?_executeData 0001  
                                               executeData@data 00E8  
                                                 ___fltol@sign1 00DC  
                                                         ?_main 0001  
                                               __end_of___fldiv 0A48  
                                               __end_of___fltol 13B2  
                                                         i2l341 211A  
                                                         i2l344 20CE  
                                                         i2l521 16E8  
                                                         i2l338 217E  
                                                         i2l380 212E  
                                                         i2l533 1FB8  
                                                         i2l438 0162  
                                                         i2l383 2124  
                                                         i2l529 1F86  
                                                         i2l491 15E4  
                                          rotateObj@rotSequence 005E  
                                                         _SPBRG 000FAF  
                                                         _TRISA 000F92  
                                                         _TRISB 000F93  
                                                         _TRISC 000F94  
                                                         _TRISD 000F95  
                                                         _TXREG 000FAD  
                                               __end_of_getData 20A8  
                                               __end_of_initADC 2042  
                                               __end_of_liftArm 1BE4  
                                               __end_of_readSeq 214A  
                                                  stepMade@temp 001C  
                                               __end_of_setStep 19A8  
                                                         tablat 000FF5  
                                                i2uartTx@length 0003  
                                               __end_of_stopADC 215A  
                                                         ttemp5 0067  
                                                         ttemp6 006A  
                                                         ttemp7 006E  
                                                         status 000FD8  
                                                         wtemp8 0067  
                                              __end_ofi2_uartTx 1FBC  
                                                 ?_increaseStep 0001  
                                               __initialization 1C8A  
                                        __size_of_initPinMotors 0026  
                                                  __end_of_main 1C8A  
                                      resetPosition@keepMovingX 001E  
                                      resetPosition@keepMovingY 001F  
                                      resetPosition@keepMovingZ 0020  
                                                        ??_main 0041  
                                                 __activetblptr 000002  
                                          __size_of_enableMotor 0074  
                                                   isr@tm0Count 0058  
                                                  ?_setThermRel 0001  
                                                        _ADRESH 000FC4  
                                                        _ADRESL 000FC3  
                                                  ?_moveToPoint 001E  
                                                        i2l2401 1F78  
                                                        i2l2403 1F9A  
                                                        i2l2405 1FA0  
                                                        i2l1761 20B8  
                                                        i2l2661 14EC  
                                                        i2l1765 2174  
                                                        i2l2901 0040  
                                                        i2l2399 1F70  
                                                        i2l2671 155A  
                                                        i2l2663 1502  
                                                        i2l2903 0042  
                                                        i2l2911 0068  
                                                        i2l2673 1570  
                                                        i2l2665 1518  
                                                        i2l2657 14D2  
                                                        i2l2841 1626  
                                                        i2l2921 00A2  
                                                        i2l2913 007C  
                                                        i2l2905 005E  
                                                        i2l2835 20C6  
                                                        i2l2667 152E  
                                                        i2l2659 14D6  
                                                        i2l2851 169C  
                                                        i2l2843 1628  
                                                        i2l2923 00B6  
                                                        i2l2915 007E  
                                                        i2l2931 00D6  
                                                        i2l2907 0060  
                                                        i2l2669 1544  
                                                        i2l2677 1586  
                                                        i2l2853 16A6  
                                                        i2l2845 163C  
                                                        i2l2837 15EE  
                                                        i2l2941 013E  
                                                        i2l2933 00EA  
                                                        i2l2925 00C8  
                                                        i2l2917 0082  
                                                        i2l2909 0064  
                                                        i2l1983 212A  
                                                        i2l2847 1644  
                                                        i2l2839 1616  
                                                        i2l2935 00F2  
                                                        i2l2943 0142  
                                                        i2l2927 00CC  
                                                        i2l2919 00A0  
                                                        i2l1977 217C  
                                                        i2l1985 2120  
                                                        i2l2849 1696  
                                                        i2l2857 16B2  
                                                        i2l2945 0156  
                                                        i2l2937 0118  
                                                        i2l2929 00D0  
                                                        i2l1979 2116  
                                                        i2l2947 015C  
                                                        i2l2939 0124  
                                                        i2l3757 16C8  
                                                        i2l3759 159C  
                                                        i2l2897 002C  
                                                        i2l2899 003E  
                                                        _RCREG1 000FAE  
                                                  ?_setTouchRel 0001  
                                                 setDecay@decay 001D  
                                              __end_of___xxtofl 0E9E  
                                                 setDecay@motor 001A  
                                              __end_of_clearTM0 20B6  
                                              _errString_PointZ 0100  
                                                ??_increaseStep 0001  
                                                     ??___fldiv 0030  
                                                     ??___fltol 00D8  
                                              __end_of_tim0Init 209A  
                                              __end_of_tim2Init 2074  
                                                        clear_0 1CF0  
                                                        clear_1 1CFC  
                                                     ??_getData 001C  
                                                        _uartTx 1F20  
                                              __end_of_setDecay 1D84  
                                                     ??_initADC 001A  
                                                     ??_liftArm 001E  
                                                     ??_readSeq 001A  
                                                  __pdataCOMRAM 005E  
                                         __end_of_resetPosition 1090  
                                                  __mediumconst 0000  
                                                     ??_setStep 001B  
                                                        tblptrh 000FF7  
                                                        tblptrl 000FF6  
                                                        tblptru 000FF8  
                                                  ?_returnTherm 001A  
                                              __end_of_startADC 2162  
                                              __end_of_stepMade 2088  
                                                 _initPinMotors 1FF6  
                                                  ?_returnTouch 001A  
                                                     ??_stopADC 001A  
                                         __size_ofi2_printError 011C  
                                              __end_of_writeTM0 20C4  
                                                  ___xxtofl@arg 0024  
                                                  ___xxtofl@exp 0023  
                                                  ___xxtofl@val 001A  
                                                    __accesstop 0080  
                                       __end_of__initialization 1D02  
                                                  _dataSequence 00EA  
                                                 ___rparam_used 000001  
                                                    ___fltol@f1 00D4  
                                                  ?_stepCounter 001A  
                                                   i2uartTx@ptr 0001  
                                                __pcstackCOMRAM 0001  
                                                  __pidataBANK0 1ECC  
                                                  __pidataBANK1 19A8  
                                               isr@single_cycle 004A  
                                          __size_of_executeData 025E  
                                                 ?_setDirection 001A  
                                                  i2_printError 14CE  
                                                  ?_touchObject 0001  
                                                _errString_ZEND 015C  
                                                _errString_Feed 00A0  
                                                ?_initPinMotors 0001  
                                                     ?i2_uartTx 0001  
                                          storeData@errSequence 000A  
                                                    __pbssBANK0 00EA  
                                                    _feeder1Pos 0611  
                                                    _feeder2Pos 060F  
                                                    _feeder3Pos 060D  
                                                    _fatalError 214A  
                                            __size_of_reduceSeq 0008  
                                            __size_of_retPeriod 000E  
                                                storeData@F2373 0601  
                                                _touch_pressure 060B  
                                            __size_of_shiftData 0060  
                                            __size_of_resetStep 000A  
                                                       _ADC_res 004C  
                                                       ?_uartTx 001A  
                                                ??_setDirection 001B  
                                                     ?___xxtofl 001A  
                                          __end_of_increaseStep 2182  
                                                     ?_clearTM0 0001  
                                                    ??i2_uartTx 0004  
                                            __size_of_rotateObj 00BA  
                                             _errString_Command 00BD  
                                            __size_of_usartInit 001E  
                                        __size_of_interruptInit 003A  
                                          __size_of_setThermRel 000A  
                                            __size_of_storeData 0104  
                                                     ?_tim0Init 0001  
                                                     ?_tim2Init 001A  
                                          __size_of_moveToPoint 01EA  
                                          storeData@receivedMex 0042  
                                                     ?_setDecay 001A  
                                          __size_of_setTouchRel 000A  
                                                   setStep@step 001D  
                                                       __Hparam 0000  
                                                       __Lparam 0000  
                                        __end_ofstoreData@F2373 0605  
                                        __end_of_touch_pressure 060D  
                                                       ___fldiv 0616  
                                                     ?_startADC 0001  
                                                     ?_stepMade 001A  
                                                       ___fltol 127A  
                                                  __psmallconst 0600  
                                                       __pcinit 1C8A  
                                         __end_of_whatsTM0Limit 217A  
                                                       _getData 209A  
                                                       __ramtop 0600  
                                                     ?_writeTM0 0001  
                                                    _pickObject 216A  
                                                       __ptext0 1BE4  
                                                       __ptext1 2042  
                                                       __ptext2 2060  
                                                       __ptext3 2088  
                                                       __ptext4 1E6C  
                                                       __ptext5 0E9E  
                                                       __ptext6 18D2  
                                                       __ptext7 1D10  
                                                       __ptext8 1D84  
                                                       __ptext9 213A  
                                               __size_of_uartTx 004E  
                                                     _T0CONbits 000FD5  
                                             __end_of_mexLength 0614  
                                                       _initADC 201C  
                                               ??_initPinMotors 001A  
                                                       _liftArm 1B34  
                                                     _T2CONbits 000FCA  
                                                       _readSeq 2142  
                                                  __size_of_isr 0182  
                                                    ??___xxtofl 001E  
                                                    ??_clearTM0 001A  
                                                       _setStep 18D2  
                                                       _pwmStep 005C  
                                                       _stopADC 2152  
                                             __end_of_reduceSeq 2142  
                                             __end_of_retPeriod 20D2  
                                                    _releaseObj 2162  
                                          __size_of_returnTherm 000C  
                                          end_of_initialization 1D02  
                                          __size_of_returnTouch 000C  
                                              rotateObj@totStep 00E2  
                                             __end_of_shiftData 1ECC  
                                                       isr@temp 0019  
                                             __end_of_resetStep 2114  
                                                    ??_tim0Init 001A  
                                                 __Lmediumconst 0000  
                                                    ??_tim2Init 001C  
                                              storeData@counter 0054  
                                                    ??_setDecay 001B  
                                              enableMotor@motor 001A  
                                                    _resetTherm 20F6  
                                                    _resetTouch 2100  
                                                       uartTx@i 001D  
                                                   ?_fatalError 0001  
                                                     _RCSTAbits 000FAB  
                                                       postdec1 000FE5  
                                             __end_of_rotateObj 1B34  
                                                       postinc0 000FEE  
                                                       postinc1 000FE6  
                                                       postinc2 000FDE  
                                                    ??_startADC 001A  
                                                    ??_stepMade 001C  
                                          __size_of_stepCounter 000C  
                                                 _interruptInit 1FBC  
                                             __end_of_usartInit 2060  
                                             __end_of_storeData 16EE  
                                    __end_ofrotateObj@stepAngle 0609  
                                                    ??_writeTM0 0001  
                                                     _PORTDbits 000F83  
                                                    _printError 13B2  
                                                     _PORTEbits 000F84  
                                                 ??_enableMotor 001B  
                                           i2printError@errCode 0007  
                                                    _toggleStep 2114  
                                                 ___xxtofl@sign 0022  
                                                     _TRISCbits 000F94  
                                                     _TRISDbits 000F95  
                                                     _TRISEbits 000F96  
                                                   ___fldiv@grs 003B  
                                                   ___fldiv@rem 0034  
                                          __size_of_touchObject 00F2  
                                                    _stepToggle 005B  
                                                    _touchTherm 16EE  
                                          __end_of_setDirection 1E6C  
                                                     _TXSTAbits 000FAC  
                                                ?_interruptInit 0001  
                                                 __pidataCOMRAM 2132  
                                         __size_of_increaseStep 0008  
                                                   ?_pickObject 0001  
                                                   __fatalError 0055  
                                                __end_of_uartTx 1F6E  
                                                 moveToPoint@x1 001E  
                                                 moveToPoint@x2 0022  
                                                 moveToPoint@y1 0020  
                                                 moveToPoint@y2 0024  
                                           start_initialization 1C8A  
                                                     i2uartTx@i 0004  
                                                   __end_of_isr 018A  
                                           __size_of_fatalError 0008  
                                           __end_of_enableMotor 1DF8  
                                                   ?_releaseObj 0001  
                                             __size_ofi2_uartTx 004E  
                                               _errString_Fatal 01AB  
                                               _errString_Bound 0080  
                                                   ?_resetTherm 0001  
                                               _errString_Reset 0184  
                                                   ?_resetTouch 0001  
                                               _errString_Point 0134  
                                                  _increaseStep 217A  
                                        __size_of_resetPosition 01F2  
                                                 ??_executeData 00E5  
                                                   __pdataBANK0 0080  
                                                   __pdataBANK1 0100  
                                                   _dataCounter 0056  
                                                      ??_uartTx 001D  
                                        moveToPoint@keepMovingX 0028  
                                        moveToPoint@keepMovingY 0029  
                                                   ?_printError 0001  
                                                     ___fldiv@a 002C  
                                                     ___fldiv@b 0028  
                                                _therm_pressure 0609  
                                                   ?_toggleStep 0001  
                                                   __pbssCOMRAM 0042  
                                                 __pcstackBANK0 00D4  
                                             __size_of___xxtofl 01F8  
                                             __size_of_clearTM0 000E  
                                                   ?_touchTherm 0001  
                                           __size_of_pickObject 0008  
                                            executeData@errCode 00E7  
                                             __size_of_tim0Init 0012  
                                             __size_of_tim2Init 0014  
                                               ??_interruptInit 001A  
                                             __size_of_setDecay 0074  
                                                     __pintcode 0008  
                                                      ?___fldiv 0028  
                                                      ?___fltol 00D4  
                                           __size_of_releaseObj 0008  
                                                 storeData@data 000E  
                                                      ?_getData 001A  
                                             __size_of_startADC 0008  
                                             __size_of_stepMade 0014  
                                        __end_of_therm_pressure 060B  
                                                      ?_initADC 0001  
                                                   __smallconst 0600  
                                                      ?_liftArm 0001  
                                                   _enableMotor 1D84  
                                                      ?_readSeq 0001  
                                             __size_of_writeTM0 000E  
                                           __end_of_executeData 0CA6  
                                                    shiftData@i 001C  
                                                      ?_setStep 001A  
                                           __size_of_resetTherm 000A  
                                                 _resetPosition 0E9E  
                                           __size_of_resetTouch 000A  
                                                     _mexLength 0613  
                                                 ??_setThermRel 0001  
                                                      ?_stopADC 0001  
                                         __size_of_setDirection 0074  
                                                 ??_moveToPoint 0026  
                                                 ??_setTouchRel 0001  
                                                     _reduceSeq 213A  
                                                      _LATAbits 000F89  
                                                      _LATBbits 000F8A  
                                                     _retPeriod 20C4  
                                                      _LATCbits 000F8B  
                                                      _LATDbits 000F8C  
                                           __size_of_printError 011C  
                                                      _IPR1bits 000F9F  
                                                      _PIE1bits 000F9D  
                                                     _shiftData 1E6C  
                                                      i2u211_40 003C  
                                                      i2u211_41 0036  
                                                      i2u220_40 0154  
                                                      i2u212_40 005C  
                                                      i2u220_41 014E  
                                                      i2u212_41 0056  
                                                      i2u213_40 007A  
                                                      i2u213_41 0074  
                                                      i2u214_40 009E  
                                                      i2u214_41 0098  
                                                      i2u215_40 00B4  
                                                      i2u215_41 00AE  
                                                      i2u208_40 163A  
                                                      i2u216_40 00C6  
                                                      i2u208_41 1634  
                                                      i2u216_41 00C0  
                                                      i2u217_40 00E8  
                                                      i2u217_41 00E2  
                                                      i2u218_40 0116  
                                                      i2u218_41 0110  
                                                      i2u155_40 1F98  
                                                      i2u219_40 013C  
                                                      i2u155_41 1F92  
                                                      i2u219_41 0136  
                                                      i2u156_40 1FB6  
                                                      i2u156_41 1FB0  
                                                     _resetStep 210A  
                                                      _PIR1bits 000F9E  
                                           __size_of_toggleStep 000A  
                                                  ??_fatalError 001A  
                                                     _posVector 0047  
                                                      _RCONbits 000FD0  
                                                     _therm_rel 0059  
                                                     _pwmPeriod 004E  
                                             setDirection@motor 001A  
                                                     _rotateObj 1A7A  
                                                    _ADCON0bits 000FC2  
                                                    _ADCON1bits 000FC1  
                                           __size_of_touchTherm 00F2  
                                                  _setDirection 1DF8  
                                                     _usartInit 2042  
                                                     _touch_rel 005A  
                                            __end_of_feeder1Pos 0613  
                                            __end_of_feeder2Pos 0611  
                                            __end_of_feeder3Pos 060F  
                                                     _storeData 15EA  
                                                ?_resetPosition 0001  
                                         __end_of_initPinMotors 201C  
                                                 ??_returnTherm 001C  
                                                 ??_returnTouch 001C  
                                                      i2_uartTx 1F6E  
                                                     copy_data0 1C9E  
                                                     copy_data1 1CBE  
                                                     copy_data2 1CDE  
                                            __end_of_fatalError 2152  
                                            rotateObj@stepAngle 0605  
                                                    ?_reduceSeq 0001  
                                                    ?_retPeriod 0001  
                                                  setStep@motor 001A  
                                                    rotateObj@i 00E4  
                                        __size_of_whatsTM0Limit 0008  
                                           __end_of_setThermRel 2132  
                                           __end_of_moveToPoint 127A  
                                             printError@errCode 0020  
                                                    ?_shiftData 0001  
                                                 ??_stepCounter 001C  
                                                      __Hrparam 0000  
                                                    ?_resetStep 0001  
                                           __end_of_setTouchRel 2128  
                                                      __Lrparam 0000  
                                              __size_of___fldiv 0432  
                                              __size_of___fltol 0138  
                                                   _executeData 0A48  
                                                  ??_pickObject 001A  
                                                    ?_rotateObj 0001  
                                                 ?i2_printError 0001  
                                              __size_of_getData 000E  
                                                 ??_touchObject 001E  
                                                    ?_usartInit 0001  
                                              __size_of_initADC 0026  
                                                      ___xxtofl 0CA6  
                                              __size_of_liftArm 00B0  
                                                    ?_storeData 0001  
                                                      _clearTM0 20A8  
                                              __size_of_readSeq 0008  
                                                      _tm0Error 0052  
                                                      _tm0Limit 005D  
                                              __size_of_setStep 00D6  
                                                      __ptext10 2142  
                                                      __ptext11 13B2  
                                                      __ptext20 20F6  
                                                      __ptext12 1F20  
                                                      __ptext21 17E0  
                                                      __ptext13 1FBC  
                                                      __ptext30 2162  
                                                      __ptext22 2152  
                                                      __ptext14 1FF6  
                                                      __ptext31 216A  
                                                      __ptext23 215A  
                                                      __ptext15 201C  
                                                      __ptext32 1090  
                                                      __ptext24 20DE  
                                                      __ptext16 214A  
                                                      __ptext41 20B6  
                                                      __ptext33 20EA  
                                                      __ptext25 2100  
                                                      __ptext17 0A48  
                                                      __ptext50 217A  
                                                      __ptext42 2172  
                                                      __ptext34 1B34  
                                                      __ptext26 1A7A  
                                                      __ptext18 16EE  
                                                      __ptext43 2114  
                                                      __ptext35 2074  
                                                      __ptext27 0CA6  
                                                      __ptext19 20D2  
                                                      __ptext44 15EA  
                                                      __ptext36 1DF8  
                                                      __ptext28 127A  
                                                      __ptext45 14CE  
                                                      __ptext37 210A  
                                                      __ptext29 0616  
                                                      __ptext46 1F6E  
                                                      __ptext38 209A  
                                                      __ptext47 211E  
                                                      __ptext39 20A8  
                                                      __ptext48 2128  
                                                      __ptext49 20C4  
                                                  ??_releaseObj 001A  
                                              __size_of_stopADC 0008  
                                           __end_of_returnTherm 20DE  
                                           __end_of_returnTouch 20EA  
                                                      _tim0Init 2088  
                                                      _tim2Init 2060  
                                                 __size_of_main 00A6  
                                                      _setDecay 1D10  
                                            __end_of_pickObject 2172  
                                                  ??_resetTherm 001A  
                                                  ??_resetTouch 001A  
                                                     uartTx@ptr 001A  
                                                      _rotAngle 0050  
                                               isr@completeStep 0057  
                                                      int$flags 0066  
                                                      _startADC 215A  
                                                      _stepMade 2074  
                                           __end_of_stepCounter 20F6  
                                             rotateObj@rotAngle 00E1  
                                                ??i2_printError 0005  
                                            __end_of_releaseObj 216A  
                                                      _writeTM0 20B6  
                                                  ??_printError 001E  
                                                 _whatsTM0Limit 2172  
                                               ??_resetPosition 001E  
                                            tim2Init@_pwmPeriod 001A  
                                                    _INTCONbits 000FF2  
                                                  ??_toggleStep 0001  
                                            __end_of_resetTherm 2100  
                                            __end_of_resetTouch 210A  
                                                   _setThermRel 2128  
                                                  uartTx@length 001C  
                                                   _moveToPoint 1090  
                                           __end_of_touchObject 18D2  
                                                      intlevel2 2182  
                                             enableMotor@enable 001D  
                                                  ??_touchTherm 001E  
                                                   _setTouchRel 211E  
                                                   ??_reduceSeq 001A  
                                                   ??_retPeriod 0003  
                                                    _RCSTA1bits 000FAB  
                                            __end_of_printError 14CE  
                                         setDirection@direction 001D  
                                                   ??_shiftData 001A  
                                                   ??_resetStep 001A  
                                            __end_of_toggleStep 211E  
                                                ?_whatsTM0Limit 0001  
                                                   ??_rotateObj 00DE  
                                            __end_of_touchTherm 17E0  
                                                  ?_enableMotor 001A  
                                                   ??_usartInit 001A  
                                                   ??_storeData 0008  
                                                   _returnTherm 20D2  
                                                   _returnTouch 20DE  
                                                   _stepCounter 20EA  
