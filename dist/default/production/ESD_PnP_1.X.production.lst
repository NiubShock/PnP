

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Feb 01 18:41:59 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    75                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    76                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    77                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    78  0000                     
    79                           ; Version 2.20
    80                           ; Generated 12/02/2020 GMT
    81                           ; 
    82                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F452 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataCOMRAM
   115  00257C                     __pidataCOMRAM:
   116                           	callstack 0
   117                           
   118                           ;initializer for _maxY
   119  00257C  03E8               	dw	1000
   120                           
   121                           ;initializer for _maxX
   122  00257E  03E8               	dw	1000
   123                           
   124                           ;initializer for storeData@mexLength
   125  002580  05                 	db	5
   126                           
   127                           	psect	idataBANK0
   128  002270                     __pidataBANK0:
   129                           	callstack 0
   130                           
   131                           ;initializer for rotateObj@rotSequence
   132  002270  09                 	db	9
   133  002271  03                 	db	3
   134  002272  06                 	db	6
   135  002273  0C                 	db	12
   136                           
   137                           ;initializer for _errString_Bound
   138  002274  45                 	db	69
   139  002275  72                 	db	114
   140  002276  72                 	db	114
   141  002277  6F                 	db	111
   142  002278  72                 	db	114
   143  002279  2C                 	db	44
   144  00227A  20                 	db	32
   145  00227B  70                 	db	112
   146  00227C  6F                 	db	111
   147  00227D  69                 	db	105
   148  00227E  6E                 	db	110
   149  00227F  74                 	db	116
   150  002280  20                 	db	32
   151  002281  6F                 	db	111
   152  002282  75                 	db	117
   153  002283  74                 	db	116
   154  002284  73                 	db	115
   155  002285  69                 	db	105
   156  002286  64                 	db	100
   157  002287  65                 	db	101
   158  002288  20                 	db	32
   159  002289  62                 	db	98
   160  00228A  6F                 	db	111
   161  00228B  75                 	db	117
   162  00228C  6E                 	db	110
   163  00228D  64                 	db	100
   164  00228E  61                 	db	97
   165  00228F  72                 	db	114
   166  002290  69                 	db	105
   167  002291  65                 	db	101
   168  002292  73                 	db	115
   169  002293  00                 	db	0
   170                           
   171                           ;initializer for _errString_Feed
   172  002294  45                 	db	69
   173  002295  72                 	db	114
   174  002296  72                 	db	114
   175  002297  6F                 	db	111
   176  002298  72                 	db	114
   177  002299  2C                 	db	44
   178  00229A  20                 	db	32
   179  00229B  66                 	db	102
   180  00229C  65                 	db	101
   181  00229D  65                 	db	101
   182  00229E  64                 	db	100
   183  00229F  20                 	db	32
   184  0022A0  6C                 	db	108
   185  0022A1  69                 	db	105
   186  0022A2  6E                 	db	110
   187  0022A3  65                 	db	101
   188  0022A4  20                 	db	32
   189  0022A5  6E                 	db	110
   190  0022A6  6F                 	db	111
   191  0022A7  74                 	db	116
   192  0022A8  20                 	db	32
   193  0022A9  64                 	db	100
   194  0022AA  65                 	db	101
   195  0022AB  66                 	db	102
   196  0022AC  69                 	db	105
   197  0022AD  6E                 	db	110
   198  0022AE  65                 	db	101
   199  0022AF  64                 	db	100
   200  0022B0  00                 	db	0
   201                           
   202                           ;initializer for _errString_Command
   203  0022B1  43                 	db	67
   204  0022B2  6F                 	db	111
   205  0022B3  6D                 	db	109
   206  0022B4  6D                 	db	109
   207  0022B5  61                 	db	97
   208  0022B6  6E                 	db	110
   209  0022B7  64                 	db	100
   210  0022B8  20                 	db	32
   211  0022B9  6E                 	db	110
   212  0022BA  6F                 	db	111
   213  0022BB  74                 	db	116
   214  0022BC  20                 	db	32
   215  0022BD  72                 	db	114
   216  0022BE  65                 	db	101
   217  0022BF  63                 	db	99
   218  0022C0  6F                 	db	111
   219  0022C1  67                 	db	103
   220  0022C2  6E                 	db	110
   221  0022C3  69                 	db	105
   222  0022C4  7A                 	db	122
   223  0022C5  65                 	db	101
   224  0022C6  64                 	db	100
   225  0022C7  00                 	db	0
   226                           
   227                           	psect	idataBANK1
   228  001EAC                     __pidataBANK1:
   229                           	callstack 0
   230                           
   231                           ;initializer for _errString_PointZ
   232  001EAC  45                 	db	69
   233  001EAD  72                 	db	114
   234  001EAE  72                 	db	114
   235  001EAF  6F                 	db	111
   236  001EB0  72                 	db	114
   237  001EB1  2C                 	db	44
   238  001EB2  20                 	db	32
   239  001EB3  74                 	db	116
   240  001EB4  69                 	db	105
   241  001EB5  6D                 	db	109
   242  001EB6  65                 	db	101
   243  001EB7  20                 	db	32
   244  001EB8  65                 	db	101
   245  001EB9  78                 	db	120
   246  001EBA  63                 	db	99
   247  001EBB  65                 	db	101
   248  001EBC  65                 	db	101
   249  001EBD  64                 	db	100
   250  001EBE  65                 	db	101
   251  001EBF  64                 	db	100
   252  001EC0  20                 	db	32
   253  001EC1  74                 	db	116
   254  001EC2  6F                 	db	111
   255  001EC3  20                 	db	32
   256  001EC4  72                 	db	114
   257  001EC5  65                 	db	101
   258  001EC6  61                 	db	97
   259  001EC7  63                 	db	99
   260  001EC8  68                 	db	104
   261  001EC9  20                 	db	32
   262  001ECA  74                 	db	116
   263  001ECB  68                 	db	104
   264  001ECC  65                 	db	101
   265  001ECD  20                 	db	32
   266  001ECE  65                 	db	101
   267  001ECF  6E                 	db	110
   268  001ED0  64                 	db	100
   269  001ED1  20                 	db	32
   270  001ED2  6F                 	db	111
   271  001ED3  66                 	db	102
   272  001ED4  20                 	db	32
   273  001ED5  74                 	db	116
   274  001ED6  68                 	db	104
   275  001ED7  65                 	db	101
   276  001ED8  20                 	db	32
   277  001ED9  5A                 	db	90
   278  001EDA  20                 	db	32
   279  001EDB  41                 	db	65
   280  001EDC  78                 	db	120
   281  001EDD  69                 	db	105
   282  001EDE  73                 	db	115
   283  001EDF  00                 	db	0
   284                           
   285                           ;initializer for _errString_Point
   286  001EE0  45                 	db	69
   287  001EE1  72                 	db	114
   288  001EE2  72                 	db	114
   289  001EE3  6F                 	db	111
   290  001EE4  72                 	db	114
   291  001EE5  2C                 	db	44
   292  001EE6  20                 	db	32
   293  001EE7  74                 	db	116
   294  001EE8  69                 	db	105
   295  001EE9  6D                 	db	109
   296  001EEA  65                 	db	101
   297  001EEB  20                 	db	32
   298  001EEC  65                 	db	101
   299  001EED  78                 	db	120
   300  001EEE  63                 	db	99
   301  001EEF  65                 	db	101
   302  001EF0  65                 	db	101
   303  001EF1  64                 	db	100
   304  001EF2  65                 	db	101
   305  001EF3  64                 	db	100
   306  001EF4  20                 	db	32
   307  001EF5  74                 	db	116
   308  001EF6  6F                 	db	111
   309  001EF7  20                 	db	32
   310  001EF8  72                 	db	114
   311  001EF9  65                 	db	101
   312  001EFA  61                 	db	97
   313  001EFB  63                 	db	99
   314  001EFC  68                 	db	104
   315  001EFD  20                 	db	32
   316  001EFE  74                 	db	116
   317  001EFF  68                 	db	104
   318  001F00  65                 	db	101
   319  001F01  20                 	db	32
   320  001F02  70                 	db	112
   321  001F03  6F                 	db	111
   322  001F04  69                 	db	105
   323  001F05  6E                 	db	110
   324  001F06  74                 	db	116
   325  001F07  00                 	db	0
   326                           
   327                           ;initializer for _errString_ZEND
   328  001F08  45                 	db	69
   329  001F09  72                 	db	114
   330  001F0A  72                 	db	114
   331  001F0B  6F                 	db	111
   332  001F0C  72                 	db	114
   333  001F0D  2C                 	db	44
   334  001F0E  20                 	db	32
   335  001F0F  6E                 	db	110
   336  001F10  6F                 	db	111
   337  001F11  20                 	db	32
   338  001F12  6F                 	db	111
   339  001F13  62                 	db	98
   340  001F14  6A                 	db	106
   341  001F15  65                 	db	101
   342  001F16  63                 	db	99
   343  001F17  74                 	db	116
   344  001F18  20                 	db	32
   345  001F19  72                 	db	114
   346  001F1A  65                 	db	101
   347  001F1B  6C                 	db	108
   348  001F1C  65                 	db	101
   349  001F1D  76                 	db	118
   350  001F1E  61                 	db	97
   351  001F1F  74                 	db	116
   352  001F20  65                 	db	101
   353  001F21  64                 	db	100
   354  001F22  20                 	db	32
   355  001F23  61                 	db	97
   356  001F24  6C                 	db	108
   357  001F25  6F                 	db	111
   358  001F26  6E                 	db	110
   359  001F27  67                 	db	103
   360  001F28  20                 	db	32
   361  001F29  5A                 	db	90
   362  001F2A  20                 	db	32
   363  001F2B  41                 	db	65
   364  001F2C  78                 	db	120
   365  001F2D  69                 	db	105
   366  001F2E  73                 	db	115
   367  001F2F  00                 	db	0
   368                           
   369                           ;initializer for _errString_Reset
   370  001F30  45                 	db	69
   371  001F31  72                 	db	114
   372  001F32  72                 	db	114
   373  001F33  6F                 	db	111
   374  001F34  72                 	db	114
   375  001F35  2C                 	db	44
   376  001F36  20                 	db	32
   377  001F37  74                 	db	116
   378  001F38  69                 	db	105
   379  001F39  6D                 	db	109
   380  001F3A  65                 	db	101
   381  001F3B  20                 	db	32
   382  001F3C  65                 	db	101
   383  001F3D  78                 	db	120
   384  001F3E  63                 	db	99
   385  001F3F  65                 	db	101
   386  001F40  65                 	db	101
   387  001F41  64                 	db	100
   388  001F42  65                 	db	101
   389  001F43  64                 	db	100
   390  001F44  20                 	db	32
   391  001F45  74                 	db	116
   392  001F46  6F                 	db	111
   393  001F47  20                 	db	32
   394  001F48  72                 	db	114
   395  001F49  65                 	db	101
   396  001F4A  73                 	db	115
   397  001F4B  65                 	db	101
   398  001F4C  74                 	db	116
   399  001F4D  20                 	db	32
   400  001F4E  70                 	db	112
   401  001F4F  6F                 	db	111
   402  001F50  73                 	db	115
   403  001F51  69                 	db	105
   404  001F52  74                 	db	116
   405  001F53  69                 	db	105
   406  001F54  6F                 	db	111
   407  001F55  6E                 	db	110
   408  001F56  00                 	db	0
   409                           
   410                           ;initializer for _errString_Fatal
   411  001F57  46                 	db	70
   412  001F58  61                 	db	97
   413  001F59  74                 	db	116
   414  001F5A  61                 	db	97
   415  001F5B  6C                 	db	108
   416  001F5C  20                 	db	32
   417  001F5D  45                 	db	69
   418  001F5E  72                 	db	114
   419  001F5F  72                 	db	114
   420  001F60  6F                 	db	111
   421  001F61  72                 	db	114
   422  001F62  2C                 	db	44
   423  001F63  20                 	db	32
   424  001F64  70                 	db	112
   425  001F65  6C                 	db	108
   426  001F66  65                 	db	101
   427  001F67  61                 	db	97
   428  001F68  73                 	db	115
   429  001F69  65                 	db	101
   430  001F6A  20                 	db	32
   431  001F6B  72                 	db	114
   432  001F6C  65                 	db	101
   433  001F6D  73                 	db	115
   434  001F6E  65                 	db	101
   435  001F6F  74                 	db	116
   436  001F70  20                 	db	32
   437  001F71  74                 	db	116
   438  001F72  68                 	db	104
   439  001F73  65                 	db	101
   440  001F74  20                 	db	32
   441  001F75  64                 	db	100
   442  001F76  65                 	db	101
   443  001F77  76                 	db	118
   444  001F78  69                 	db	105
   445  001F79  63                 	db	99
   446  001F7A  65                 	db	101
   447  001F7B  21                 	db	33
   448  001F7C  00                 	db	0
   449                           
   450                           	psect	smallconst
   451  000600                     __psmallconst:
   452                           	callstack 0
   453  000600  00                 	db	0
   454  000601  FFAC               	dw	65452
   455  000603  3DB3               	dw	15795
   456  000605                     __end_ofrotateObj@stepAngle:
   457                           	callstack 0
   458  000605  0400               	dw	1024
   459  000607                     __end_of_therm_pressure:
   460                           	callstack 0
   461  000607  0200               	dw	512
   462  000609                     __end_of_touch_pressure:
   463                           	callstack 0
   464  000609                     _feeder3Pos:
   465                           	callstack 0
   466  000609  19                 	db	25
   467  00060A  19                 	db	25
   468  00060B                     __end_of_feeder3Pos:
   469                           	callstack 0
   470  00060B                     _feeder2Pos:
   471                           	callstack 0
   472  00060B  0F                 	db	15
   473  00060C  0F                 	db	15
   474  00060D                     __end_of_feeder2Pos:
   475                           	callstack 0
   476  00060D                     _feeder1Pos:
   477                           	callstack 0
   478  00060D  05                 	db	5
   479  00060E  05                 	db	5
   480  00060F                     __end_of_feeder1Pos:
   481                           	callstack 0
   482  0000                     _TMR0	set	4054
   483  0000                     _TXREG	set	4013
   484  0000                     _SPBRG	set	4015
   485  0000                     _TXSTAbits	set	4012
   486  0000                     _TRISCbits	set	3988
   487  0000                     _RCREG1	set	4014
   488  0000                     _ADRESH	set	4036
   489  0000                     _ADRESL	set	4035
   490  0000                     _PIR1bits	set	3998
   491  0000                     _IPR1bits	set	3999
   492  0000                     _ADCON0bits	set	4034
   493  0000                     _PIE1bits	set	3997
   494  0000                     _RCONbits	set	4048
   495  0000                     _INTCONbits	set	4082
   496  0000                     _RCSTAbits	set	4011
   497  0000                     _RCSTA1bits	set	4011
   498  0000                     _LATD	set	3980
   499  0000                     _PORTDbits	set	3971
   500  0000                     _TMR2	set	4044
   501  0000                     _PORTEbits	set	3972
   502  0000                     _T0CONbits	set	4053
   503  0000                     _T2CONbits	set	4042
   504  0000                     _LATDbits	set	3980
   505  0000                     _LATCbits	set	3979
   506  0000                     _LATBbits	set	3978
   507  0000                     _LATAbits	set	3977
   508  0000                     _TRISDbits	set	3989
   509  0000                     _TRISEbits	set	3990
   510  0000                     _TRISD	set	3989
   511  0000                     _TRISC	set	3988
   512  0000                     _TRISB	set	3987
   513  0000                     _TRISA	set	3986
   514  0000                     _ADCON1bits	set	4033
   515  00060F  00                 	db	0	; dummy byte at the end
   516  0000                     
   517                           ; #config settings
   518                           
   519                           	psect	cinit
   520  00202E                     __pcinit:
   521                           	callstack 0
   522  00202E                     start_initialization:
   523                           	callstack 0
   524  00202E                     __initialization:
   525                           	callstack 0
   526                           
   527                           ; Initialize objects allocated to BANK1 (209 bytes)
   528                           ; load TBLPTR registers with __pidataBANK1
   529  00202E  0EAC               	movlw	low __pidataBANK1
   530  002030  6EF6               	movwf	tblptrl,c
   531  002032  0E1E               	movlw	high __pidataBANK1
   532  002034  6EF7               	movwf	tblptrh,c
   533  002036  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   534  002038  6EF8               	movwf	tblptru,c
   535  00203A  EE01  F000         	lfsr	0,__pdataBANK1
   536  00203E  EE10 F0D1          	lfsr	1,209
   537  002042                     copy_data0:
   538  002042  0009               	tblrd		*+
   539  002044  CFF5 FFEE          	movff	tablat,postinc0
   540  002048  50E5               	movf	postdec1,w,c
   541  00204A  50E1               	movf	fsr1l,w,c
   542  00204C  E1FA               	bnz	copy_data0
   543                           
   544                           ; Initialize objects allocated to BANK0 (88 bytes)
   545                           ; load TBLPTR registers with __pidataBANK0
   546  00204E  0E70               	movlw	low __pidataBANK0
   547  002050  6EF6               	movwf	tblptrl,c
   548  002052  0E22               	movlw	high __pidataBANK0
   549  002054  6EF7               	movwf	tblptrh,c
   550  002056  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   551  002058  6EF8               	movwf	tblptru,c
   552  00205A  EE00  F080         	lfsr	0,__pdataBANK0
   553  00205E  EE10 F058          	lfsr	1,88
   554  002062                     copy_data1:
   555  002062  0009               	tblrd		*+
   556  002064  CFF5 FFEE          	movff	tablat,postinc0
   557  002068  50E5               	movf	postdec1,w,c
   558  00206A  50E1               	movf	fsr1l,w,c
   559  00206C  E1FA               	bnz	copy_data1
   560                           
   561                           ; Initialize objects allocated to COMRAM (5 bytes)
   562                           ; load TBLPTR registers with __pidataCOMRAM
   563  00206E  0E7C               	movlw	low __pidataCOMRAM
   564  002070  6EF6               	movwf	tblptrl,c
   565  002072  0E25               	movlw	high __pidataCOMRAM
   566  002074  6EF7               	movwf	tblptrh,c
   567  002076  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   568  002078  6EF8               	movwf	tblptru,c
   569  00207A  EE00  F069         	lfsr	0,__pdataCOMRAM
   570  00207E  EE10 F005          	lfsr	1,5
   571  002082                     copy_data2:
   572  002082  0009               	tblrd		*+
   573  002084  CFF5 FFEE          	movff	tablat,postinc0
   574  002088  50E5               	movf	postdec1,w,c
   575  00208A  50E1               	movf	fsr1l,w,c
   576  00208C  E1FA               	bnz	copy_data2
   577                           
   578                           ; Clear objects allocated to BANK0 (28 bytes)
   579  00208E  EE00  F0D8         	lfsr	0,__pbssBANK0
   580  002092  0E1C               	movlw	28
   581  002094                     clear_0:
   582  002094  6AEE               	clrf	postinc0,c
   583  002096  06E8               	decf	wreg,f,c
   584  002098  E1FD               	bnz	clear_0
   585                           
   586                           ; Clear objects allocated to COMRAM (36 bytes)
   587  00209A  EE00  F045         	lfsr	0,__pbssCOMRAM
   588  00209E  0E24               	movlw	36
   589  0020A0                     clear_1:
   590  0020A0  6AEE               	clrf	postinc0,c
   591  0020A2  06E8               	decf	wreg,f,c
   592  0020A4  E1FD               	bnz	clear_1
   593  0020A6                     end_of_initialization:
   594                           	callstack 0
   595  0020A6                     __end_of__initialization:
   596                           	callstack 0
   597  0020A6  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   598  0020A8  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   599  0020AA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   600  0020AC  6EF8               	movwf	tblptru,c
   601  0020AE  0100               	movlb	0
   602  0020B0  EFBE  F009         	goto	_main	;jump to C main() function
   603                           
   604                           	psect	bssCOMRAM
   605  000045                     __pbssCOMRAM:
   606                           	callstack 0
   607  000045                     storeData@receivedMex:
   608                           	callstack 0
   609  000045                     	ds	9
   610  00004E                     _posVector:
   611                           	callstack 0
   612  00004E                     	ds	3
   613  000051                     isr@single_cycle:
   614                           	callstack 0
   615  000051                     	ds	2
   616  000053                     _ADC_res:
   617                           	callstack 0
   618  000053                     	ds	2
   619  000055                     _pwmPeriod:
   620                           	callstack 0
   621  000055                     	ds	2
   622  000057                     _newFeeder:
   623                           	callstack 0
   624  000057                     	ds	2
   625  000059                     _rotAngle:
   626                           	callstack 0
   627  000059                     	ds	2
   628  00005B                     _tm0Error:
   629                           	callstack 0
   630  00005B                     	ds	2
   631  00005D                     	ds	1
   632  00005E                     storeData@counter:
   633                           	callstack 0
   634  00005E                     	ds	1
   635  00005F                     __newSequence:
   636                           	callstack 0
   637  00005F                     	ds	1
   638  000060                     __fatalError:
   639                           	callstack 0
   640  000060                     	ds	1
   641  000061                     _dataCounter:
   642                           	callstack 0
   643  000061                     	ds	1
   644  000062                     isr@completeStep:
   645                           	callstack 0
   646  000062                     	ds	1
   647  000063                     isr@tm0Count:
   648                           	callstack 0
   649  000063                     	ds	1
   650  000064                     _therm_rel:
   651                           	callstack 0
   652  000064                     	ds	1
   653  000065                     _touch_rel:
   654                           	callstack 0
   655  000065                     	ds	1
   656  000066                     _stepToggle:
   657                           	callstack 0
   658  000066                     	ds	1
   659  000067                     _pwmStep:
   660                           	callstack 0
   661  000067                     	ds	1
   662  000068                     _tm0Limit:
   663                           	callstack 0
   664  000068                     	ds	1
   665                           
   666                           	psect	dataCOMRAM
   667  000069                     __pdataCOMRAM:
   668                           	callstack 0
   669  000069                     	ds	2
   670  00006B                     	ds	2
   671  00006D                     storeData@mexLength:
   672                           	callstack 0
   673  00006D                     	ds	1
   674                           
   675                           	psect	bssBANK0
   676  0000D8                     __pbssBANK0:
   677                           	callstack 0
   678  0000D8                     _dataSequence:
   679                           	callstack 0
   680  0000D8                     	ds	20
   681  0000EC                     _newSequenceData:
   682                           	callstack 0
   683  0000EC                     	ds	8
   684                           
   685                           	psect	dataBANK0
   686  000080                     __pdataBANK0:
   687                           	callstack 0
   688  000080                     rotateObj@rotSequence:
   689                           	callstack 0
   690  000080                     	ds	4
   691  000084                     _errString_Bound:
   692                           	callstack 0
   693  000084                     	ds	32
   694  0000A4                     _errString_Feed:
   695                           	callstack 0
   696  0000A4                     	ds	29
   697  0000C1                     _errString_Command:
   698                           	callstack 0
   699  0000C1                     	ds	23
   700                           
   701                           	psect	dataBANK1
   702  000100                     __pdataBANK1:
   703                           	callstack 0
   704  000100                     _errString_PointZ:
   705                           	callstack 0
   706  000100                     	ds	52
   707  000134                     _errString_Point:
   708                           	callstack 0
   709  000134                     	ds	40
   710  00015C                     _errString_ZEND:
   711                           	callstack 0
   712  00015C                     	ds	40
   713  000184                     _errString_Reset:
   714                           	callstack 0
   715  000184                     	ds	39
   716  0001AB                     _errString_Fatal:
   717                           	callstack 0
   718  0001AB                     	ds	38
   719                           
   720                           	psect	cstackBANK1
   721  0001D1                     __pcstackBANK1:
   722                           	callstack 0
   723  0001D1                     ??_main:
   724                           
   725                           ; 1 bytes @ 0x0
   726  0001D1                     	ds	2
   727  0001D3                     main@errCode:
   728                           	callstack 0
   729                           
   730                           ; 1 bytes @ 0x2
   731  0001D3                     	ds	1
   732  0001D4                     main@newData:
   733                           	callstack 0
   734                           
   735                           ; 2 bytes @ 0x3
   736  0001D4                     	ds	2
   737                           
   738                           	psect	cstackBANK0
   739  0000F4                     __pcstackBANK0:
   740                           	callstack 0
   741  0000F4                     ??_rotateObj:
   742                           
   743                           ; 1 bytes @ 0x0
   744  0000F4                     	ds	3
   745  0000F7                     rotateObj@rotAngle:
   746                           	callstack 0
   747                           
   748                           ; 1 bytes @ 0x3
   749  0000F7                     	ds	1
   750  0000F8                     rotateObj@totStep:
   751                           	callstack 0
   752                           
   753                           ; 2 bytes @ 0x4
   754  0000F8                     	ds	2
   755  0000FA                     rotateObj@i:
   756                           	callstack 0
   757                           
   758                           ; 2 bytes @ 0x6
   759  0000FA                     	ds	2
   760  0000FC                     executeData@errCode:
   761                           	callstack 0
   762                           
   763                           ; 1 bytes @ 0x8
   764  0000FC                     	ds	1
   765  0000FD                     executeData@data:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x9
   769  0000FD                     	ds	2
   770                           
   771                           	psect	cstackCOMRAM
   772  000001                     __pcstackCOMRAM:
   773                           	callstack 0
   774  000001                     ?_retPeriod:
   775                           	callstack 0
   776  000001                     i2uartTx@ptr:
   777                           	callstack 0
   778                           
   779                           ; 2 bytes @ 0x0
   780  000001                     	ds	2
   781  000003                     i2uartTx@length:
   782                           	callstack 0
   783                           
   784                           ; 1 bytes @ 0x2
   785  000003                     	ds	1
   786  000004                     i2uartTx@i:
   787                           	callstack 0
   788                           
   789                           ; 1 bytes @ 0x3
   790  000004                     	ds	1
   791  000005                     ??i2_printError:
   792                           
   793                           ; 1 bytes @ 0x4
   794  000005                     	ds	2
   795  000007                     i2printError@errCode:
   796                           	callstack 0
   797                           
   798                           ; 1 bytes @ 0x6
   799  000007                     	ds	1
   800  000008                     ??i2_storeData:
   801                           
   802                           ; 1 bytes @ 0x7
   803  000008                     	ds	2
   804  00000A                     i2storeData@data:
   805                           	callstack 0
   806                           
   807                           ; 1 bytes @ 0x9
   808  00000A                     	ds	1
   809  00000B                     ??_isr:
   810                           
   811                           ; 1 bytes @ 0xA
   812  00000B                     	ds	6
   813  000011                     isr@temp:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0x10
   817  000011                     	ds	1
   818  000012                     ??_shiftData:
   819  000012                     ?_stepMade:
   820                           	callstack 0
   821  000012                     ?_stepCounter:
   822                           	callstack 0
   823  000012                     ?_returnTouch:
   824                           	callstack 0
   825  000012                     ?_returnTherm:
   826                           	callstack 0
   827  000012                     ?_getNewSequence:
   828                           	callstack 0
   829  000012                     ?_getData:
   830                           	callstack 0
   831  000012                     ?___xxtofl:
   832                           	callstack 0
   833  000012                     setStep@motor:
   834                           	callstack 0
   835  000012                     enableMotor@motor:
   836                           	callstack 0
   837  000012                     setDirection@motor:
   838                           	callstack 0
   839  000012                     setDecay@motor:
   840                           	callstack 0
   841  000012                     tim2Init@_pwmPeriod:
   842                           	callstack 0
   843  000012                     uartTx@ptr:
   844                           	callstack 0
   845  000012                     ___xxtofl@val:
   846                           	callstack 0
   847                           
   848                           ; 4 bytes @ 0x11
   849  000012                     	ds	1
   850  000013                     ??_setStep:
   851  000013                     ??_enableMotor:
   852  000013                     ??_setDirection:
   853  000013                     ??_setDecay:
   854                           
   855                           ; 1 bytes @ 0x12
   856  000013                     	ds	1
   857  000014                     stepMade@temp:
   858                           	callstack 0
   859  000014                     shiftData@i:
   860                           	callstack 0
   861  000014                     uartTx@length:
   862                           	callstack 0
   863                           
   864                           ; 1 bytes @ 0x13
   865  000014                     	ds	1
   866  000015                     setStep@step:
   867                           	callstack 0
   868  000015                     enableMotor@enable:
   869                           	callstack 0
   870  000015                     setDirection@direction:
   871                           	callstack 0
   872  000015                     setDecay@decay:
   873                           	callstack 0
   874  000015                     uartTx@i:
   875                           	callstack 0
   876                           
   877                           ; 1 bytes @ 0x14
   878  000015                     	ds	1
   879  000016                     ??_printError:
   880  000016                     ??___xxtofl:
   881  000016                     resetPosition@keepMovingX:
   882                           	callstack 0
   883  000016                     moveToPoint@x1:
   884                           	callstack 0
   885                           
   886                           ; 2 bytes @ 0x15
   887  000016                     	ds	1
   888  000017                     resetPosition@keepMovingY:
   889                           	callstack 0
   890                           
   891                           ; 1 bytes @ 0x16
   892  000017                     	ds	1
   893  000018                     resetPosition@keepMovingZ:
   894                           	callstack 0
   895  000018                     printError@errCode:
   896                           	callstack 0
   897  000018                     moveToPoint@y1:
   898                           	callstack 0
   899                           
   900                           ; 2 bytes @ 0x17
   901  000018                     	ds	1
   902  000019                     ??_storeData:
   903                           
   904                           ; 1 bytes @ 0x18
   905  000019                     	ds	1
   906  00001A                     ___xxtofl@sign:
   907                           	callstack 0
   908  00001A                     moveToPoint@x2:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x19
   912  00001A                     	ds	1
   913  00001B                     storeData@data:
   914                           	callstack 0
   915  00001B                     ___xxtofl@exp:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x1A
   919  00001B                     	ds	1
   920  00001C                     moveToPoint@y2:
   921                           	callstack 0
   922  00001C                     ___xxtofl@arg:
   923                           	callstack 0
   924                           
   925                           ; 4 bytes @ 0x1B
   926  00001C                     	ds	2
   927  00001E                     ??_moveToPoint:
   928                           
   929                           ; 1 bytes @ 0x1D
   930  00001E                     	ds	2
   931  000020                     ?___fldiv:
   932                           	callstack 0
   933  000020                     moveToPoint@keepMovingX:
   934                           	callstack 0
   935  000020                     ___fldiv@b:
   936                           	callstack 0
   937                           
   938                           ; 4 bytes @ 0x1F
   939  000020                     	ds	1
   940  000021                     moveToPoint@keepMovingY:
   941                           	callstack 0
   942                           
   943                           ; 1 bytes @ 0x20
   944  000021                     	ds	1
   945  000022                     moveToPoint@MOT1Direction:
   946                           	callstack 0
   947                           
   948                           ; 1 bytes @ 0x21
   949  000022                     	ds	1
   950  000023                     moveToPoint@MOT2Direction:
   951                           	callstack 0
   952                           
   953                           ; 1 bytes @ 0x22
   954  000023                     	ds	1
   955  000024                     ___fldiv@a:
   956                           	callstack 0
   957                           
   958                           ; 4 bytes @ 0x23
   959  000024                     	ds	4
   960  000028                     ??___fldiv:
   961                           
   962                           ; 1 bytes @ 0x27
   963  000028                     	ds	4
   964  00002C                     ___fldiv@rem:
   965                           	callstack 0
   966                           
   967                           ; 4 bytes @ 0x2B
   968  00002C                     	ds	4
   969  000030                     ___fldiv@sign:
   970                           	callstack 0
   971                           
   972                           ; 1 bytes @ 0x2F
   973  000030                     	ds	1
   974  000031                     ___fldiv@new_exp:
   975                           	callstack 0
   976                           
   977                           ; 2 bytes @ 0x30
   978  000031                     	ds	2
   979  000033                     ___fldiv@grs:
   980                           	callstack 0
   981                           
   982                           ; 4 bytes @ 0x32
   983  000033                     	ds	4
   984  000037                     ___fldiv@bexp:
   985                           	callstack 0
   986                           
   987                           ; 1 bytes @ 0x36
   988  000037                     	ds	1
   989  000038                     ___fldiv@aexp:
   990                           	callstack 0
   991                           
   992                           ; 1 bytes @ 0x37
   993  000038                     	ds	1
   994  000039                     ?___fltol:
   995                           	callstack 0
   996  000039                     ___fltol@f1:
   997                           	callstack 0
   998                           
   999                           ; 4 bytes @ 0x38
  1000  000039                     	ds	4
  1001  00003D                     ??___fltol:
  1002                           
  1003                           ; 1 bytes @ 0x3C
  1004  00003D                     	ds	4
  1005  000041                     ___fltol@sign1:
  1006                           	callstack 0
  1007                           
  1008                           ; 1 bytes @ 0x40
  1009  000041                     	ds	1
  1010  000042                     ___fltol@exp1:
  1011                           	callstack 0
  1012                           
  1013                           ; 1 bytes @ 0x41
  1014  000042                     	ds	1
  1015  000043                     ??_executeData:
  1016                           
  1017                           ; 1 bytes @ 0x42
  1018  000043                     	ds	2
  1019                           
  1020 ;;
  1021 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1022 ;;
  1023 ;; *************** function _main *****************
  1024 ;; Defined at:
  1025 ;;		line 26 in file "main.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;		None
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;  newData         2    3[BANK1 ] PTR struct .
  1030 ;;		 -> newSequenceData(8), 
  1031 ;;  errCode         1    2[BANK1 ] unsigned char 
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  1    wreg      void 
  1034 ;; Registers used:
  1035 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1041 ;;      Params:         0       0       0       0       0       0       0
  1042 ;;      Locals:         0       0       3       0       0       0       0
  1043 ;;      Temps:          0       0       2       0       0       0       0
  1044 ;;      Totals:         0       0       5       0       0       0       0
  1045 ;;Total ram usage:        5 bytes
  1046 ;; Hardware stack levels required when called:    7
  1047 ;; This function calls:
  1048 ;;		_clearTM0
  1049 ;;		_enableMotor
  1050 ;;		_executeData
  1051 ;;		_fatalError
  1052 ;;		_getNewSequence
  1053 ;;		_initADC
  1054 ;;		_initPinMotors
  1055 ;;		_interruptInit
  1056 ;;		_newSequence
  1057 ;;		_printError
  1058 ;;		_readSeq
  1059 ;;		_reduceSeq
  1060 ;;		_resetNewSequence
  1061 ;;		_resetPosition
  1062 ;;		_shiftData
  1063 ;;		_storeData
  1064 ;;		_tim0Init
  1065 ;;		_tim2Init
  1066 ;;		_usartInit
  1067 ;; This function is called by:
  1068 ;;		Startup code after reset
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           	psect	text0
  1073  00137C                     __ptext0:
  1074                           	callstack 0
  1075  00137C                     _main:
  1076                           	callstack 24
  1077  00137C  FFFF               	dw	65535	; assembler added errata NOP
  1078                           
  1079                           ;main.c: 30:     interruptInit();
  1080  00137E  ECB2  F011         	call	_interruptInit	;wreg free
  1081  001382                     
  1082                           ;main.c: 31:     initPinMotors();
  1083  001382  ECCF  F011         	call	_initPinMotors	;wreg free
  1084  001386                     
  1085                           ;main.c: 32:     initADC();
  1086  001386  ECE2  F011         	call	_initADC	;wreg free
  1087  00138A                     
  1088                           ;main.c: 33:     tim0Init();
  1089  00138A  EC3C  F012         	call	_tim0Init	;wreg free
  1090  00138E                     
  1091                           ;main.c: 34:     tim2Init(10);
  1092  00138E  0E00               	movlw	0
  1093  001390  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1094  001392  0E0A               	movlw	10
  1095  001394  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1096  001396  EC28  F012         	call	_tim2Init	;wreg free
  1097                           
  1098                           ;main.c: 37:     resetPosition();
  1099  00139A  ECC5  F008         	call	_resetPosition	;wreg free
  1100  00139E                     
  1101                           ;main.c: 40:     usartInit();
  1102  00139E  EC19  F012         	call	_usartInit	;wreg free
  1103  0013A2                     
  1104                           ;main.c: 41:     RCSTA1bits.CREN = 1;
  1105  0013A2  88AB               	bsf	171,4,c	;volatile
  1106  0013A4                     l4214:
  1107  0013A4  FFFF               	dw	65535	; assembler added errata NOP
  1108                           
  1109                           ;main.c: 44:         if(fatalError()){
  1110  0013A6  ECAE  F012         	call	_fatalError	;wreg free
  1111  0013AA  0900               	iorlw	0
  1112  0013AC  B4D8               	btfsc	status,2,c
  1113  0013AE  EFDB  F009         	goto	u3511
  1114  0013B2  EFDE  F009         	goto	u3510
  1115  0013B6                     u3511:
  1116  0013B6  FFFF               	dw	65535	; assembler added errata NOP
  1117  0013B8  EFF4  F009         	goto	l4220
  1118  0013BC                     u3510:
  1119  0013BC  FFFF               	dw	65535	; assembler added errata NOP
  1120  0013BE                     
  1121                           ;main.c: 46:             enableMotor(1, 0);
  1122  0013BE  0E00               	movlw	0
  1123  0013C0  6E12               	movwf	enableMotor@motor^0,c
  1124  0013C2  0E01               	movlw	1
  1125  0013C4  EC94  F010         	call	_enableMotor
  1126                           
  1127                           ;main.c: 47:             enableMotor(1, 1);
  1128  0013C8  0E01               	movlw	1
  1129  0013CA  6E12               	movwf	enableMotor@motor^0,c
  1130  0013CC  0E01               	movlw	1
  1131  0013CE  EC94  F010         	call	_enableMotor
  1132                           
  1133                           ;main.c: 48:             enableMotor(1, 2);
  1134  0013D2  0E02               	movlw	2
  1135  0013D4  6E12               	movwf	enableMotor@motor^0,c
  1136  0013D6  0E01               	movlw	1
  1137  0013D8  EC94  F010         	call	_enableMotor
  1138  0013DC                     
  1139                           ;main.c: 50:             printError(7);
  1140  0013DC  0E07               	movlw	7
  1141  0013DE  EC73  F00C         	call	_printError
  1142  0013E2                     l318:
  1143  0013E2  FFFF               	dw	65535	; assembler added errata NOP
  1144  0013E4  EFF1  F009         	goto	l318
  1145  0013E8                     l4220:
  1146  0013E8  FFFF               	dw	65535	; assembler added errata NOP
  1147  0013EA  ECAA  F012         	call	_newSequence	;wreg free
  1148  0013EE  0900               	iorlw	0
  1149  0013F0  B4D8               	btfsc	status,2,c
  1150  0013F2  EFFD  F009         	goto	u3521
  1151  0013F6  EF00  F00A         	goto	u3520
  1152  0013FA                     u3521:
  1153  0013FA  FFFF               	dw	65535	; assembler added errata NOP
  1154  0013FC  EF5B  F00A         	goto	l4254
  1155  001400                     u3520:
  1156  001400  FFFF               	dw	65535	; assembler added errata NOP
  1157  001402                     
  1158                           ;main.c: 53:             t_newSequence* newData = getNewSequence();
  1159  001402  EC45  F012         	call	_getNewSequence	;wreg free
  1160  001406  C012  F1D4         	movff	?_getNewSequence,main@newData
  1161  00140A  C013  F1D5         	movff	?_getNewSequence+1,main@newData+1
  1162  00140E                     
  1163                           ;main.c: 55:             newFeeder[0] = newData ->init_posX;
  1164  00140E  0101               	movlb	1	; () banked
  1165  001410  EE20 F002          	lfsr	2,2
  1166  001414  51D4               	movf	main@newData& (0+255),w,b
  1167  001416  26D9               	addwf	fsr2l,f,c
  1168  001418  51D5               	movf	(main@newData+1)& (0+255),w,b
  1169  00141A  22DA               	addwfc	fsr2h,f,c
  1170  00141C  50DF               	movf	indf2,w,c
  1171  00141E  6E57               	movwf	_newFeeder^0,c
  1172  001420                     
  1173                           ; BSR set to: 1
  1174                           ;main.c: 56:             newFeeder[1] = newData ->init_posY;
  1175  001420  EE20 F003          	lfsr	2,3
  1176  001424  51D4               	movf	main@newData& (0+255),w,b
  1177  001426  26D9               	addwf	fsr2l,f,c
  1178  001428  51D5               	movf	(main@newData+1)& (0+255),w,b
  1179  00142A  22DA               	addwfc	fsr2h,f,c
  1180  00142C  50DF               	movf	indf2,w,c
  1181  00142E  6E58               	movwf	(_newFeeder+1)^0,c
  1182  001430                     
  1183                           ; BSR set to: 1
  1184                           ;main.c: 60:             RCSTAbits.CREN = 0;
  1185  001430  98AB               	bcf	171,4,c	;volatile
  1186  001432                     
  1187                           ; BSR set to: 1
  1188                           ;main.c: 63:             storeData(0);
  1189  001432  0E00               	movlw	0
  1190  001434  EC76  F00A         	call	_storeData
  1191  001438                     
  1192                           ;main.c: 64:             storeData(0xFF);
  1193  001438  0EFF               	movlw	255
  1194  00143A  EC76  F00A         	call	_storeData
  1195  00143E                     
  1196                           ;main.c: 65:             storeData(newData ->end_posX);
  1197  00143E  0101               	movlb	1	; () banked
  1198  001440  EE20 F005          	lfsr	2,5
  1199  001444  51D4               	movf	main@newData& (0+255),w,b
  1200  001446  26D9               	addwf	fsr2l,f,c
  1201  001448  51D5               	movf	(main@newData+1)& (0+255),w,b
  1202  00144A  22DA               	addwfc	fsr2h,f,c
  1203  00144C  50DF               	movf	indf2,w,c
  1204  00144E  EC76  F00A         	call	_storeData
  1205  001452                     
  1206                           ;main.c: 66:             storeData(newData ->end_posY);
  1207  001452  0101               	movlb	1	; () banked
  1208  001454  EE20 F006          	lfsr	2,6
  1209  001458  51D4               	movf	main@newData& (0+255),w,b
  1210  00145A  26D9               	addwf	fsr2l,f,c
  1211  00145C  51D5               	movf	(main@newData+1)& (0+255),w,b
  1212  00145E  22DA               	addwfc	fsr2h,f,c
  1213  001460  50DF               	movf	indf2,w,c
  1214  001462  EC76  F00A         	call	_storeData
  1215  001466                     
  1216                           ;main.c: 67:             storeData(newData ->end_rot - newData ->init_rot);
  1217  001466  0101               	movlb	1	; () banked
  1218  001468  EE20 F004          	lfsr	2,4
  1219  00146C  51D4               	movf	main@newData& (0+255),w,b
  1220  00146E  26D9               	addwf	fsr2l,f,c
  1221  001470  51D5               	movf	(main@newData+1)& (0+255),w,b
  1222  001472  22DA               	addwfc	fsr2h,f,c
  1223  001474  50DF               	movf	indf2,w,c
  1224  001476  6FD1               	movwf	??_main& (0+255),b
  1225  001478  EE20 F007          	lfsr	2,7
  1226  00147C  51D4               	movf	main@newData& (0+255),w,b
  1227  00147E  26D9               	addwf	fsr2l,f,c
  1228  001480  51D5               	movf	(main@newData+1)& (0+255),w,b
  1229  001482  22DA               	addwfc	fsr2h,f,c
  1230  001484  50DF               	movf	indf2,w,c
  1231  001486  6FD2               	movwf	(??_main+1)& (0+255),b
  1232  001488  51D1               	movf	??_main& (0+255),w,b
  1233  00148A  5DD2               	subwf	(??_main+1)& (0+255),w,b
  1234  00148C  EC76  F00A         	call	_storeData
  1235  001490                     
  1236                           ;main.c: 70:             RCSTAbits.CREN = 1;
  1237  001490  88AB               	bsf	171,4,c	;volatile
  1238  001492                     
  1239                           ;main.c: 73:             resetNewSequence();
  1240  001492  EC7A  F012         	call	_resetNewSequence	;wreg free
  1241  001496                     
  1242                           ;main.c: 75:             errCode = executeData();
  1243  001496  EC82  F006         	call	_executeData	;wreg free
  1244  00149A  0101               	movlb	1	; () banked
  1245  00149C  6FD3               	movwf	main@errCode& (0+255),b
  1246  00149E                     
  1247                           ; BSR set to: 1
  1248                           ;main.c: 76:             printError(errCode);
  1249  00149E  51D3               	movf	main@errCode& (0+255),w,b
  1250  0014A0  EC73  F00C         	call	_printError
  1251  0014A4                     l4248:
  1252  0014A4  FFFF               	dw	65535	; assembler added errata NOP
  1253                           
  1254                           ;main.c: 77:             clearTM0();
  1255  0014A6  EC53  F012         	call	_clearTM0	;wreg free
  1256  0014AA                     
  1257                           ;main.c: 81:             reduceSeq();
  1258  0014AA  ECA2  F012         	call	_reduceSeq	;wreg free
  1259  0014AE                     
  1260                           ;main.c: 82:             shiftData();
  1261  0014AE  EC08  F011         	call	_shiftData	;wreg free
  1262                           
  1263                           ;main.c: 84:         }else if(readSeq()){
  1264  0014B2  EFD2  F009         	goto	l4214
  1265  0014B6                     l4254:
  1266  0014B6  FFFF               	dw	65535	; assembler added errata NOP
  1267  0014B8  ECA6  F012         	call	_readSeq	;wreg free
  1268  0014BC  0900               	iorlw	0
  1269  0014BE  B4D8               	btfsc	status,2,c
  1270  0014C0  EF64  F00A         	goto	u3531
  1271  0014C4  EF67  F00A         	goto	u3530
  1272  0014C8                     u3531:
  1273  0014C8  FFFF               	dw	65535	; assembler added errata NOP
  1274  0014CA  EF71  F00A         	goto	l321
  1275  0014CE                     u3530:
  1276  0014CE  FFFF               	dw	65535	; assembler added errata NOP
  1277  0014D0                     
  1278                           ;main.c: 87:             errCode = executeData();
  1279  0014D0  EC82  F006         	call	_executeData	;wreg free
  1280  0014D4  0101               	movlb	1	; () banked
  1281  0014D6  6FD3               	movwf	main@errCode& (0+255),b
  1282  0014D8                     
  1283                           ; BSR set to: 1
  1284                           ;main.c: 88:             printError(errCode);
  1285  0014D8  51D3               	movf	main@errCode& (0+255),w,b
  1286  0014DA  EC73  F00C         	call	_printError
  1287  0014DE  EF52  F00A         	goto	l4248
  1288  0014E2                     l321:
  1289  0014E2  FFFF               	dw	65535	; assembler added errata NOP
  1290  0014E4  EFD2  F009         	goto	l4214
  1291  0014E8  EFB5  F000         	goto	start
  1292  0014EC                     __end_of_main:
  1293                           	callstack 0
  1294                           
  1295 ;; *************** function _usartInit *****************
  1296 ;; Defined at:
  1297 ;;		line 34 in file "usart.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;		None
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;		None
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  1    wreg      void 
  1304 ;; Registers used:
  1305 ;;		wreg, status,2
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1311 ;;      Params:         0       0       0       0       0       0       0
  1312 ;;      Locals:         0       0       0       0       0       0       0
  1313 ;;      Temps:          0       0       0       0       0       0       0
  1314 ;;      Totals:         0       0       0       0       0       0       0
  1315 ;;Total ram usage:        0 bytes
  1316 ;; Hardware stack levels used:    1
  1317 ;; Hardware stack levels required when called:    4
  1318 ;; This function calls:
  1319 ;;		Nothing
  1320 ;; This function is called by:
  1321 ;;		_main
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           	psect	text1
  1326  002432                     __ptext1:
  1327                           	callstack 0
  1328  002432                     _usartInit:
  1329                           	callstack 0
  1330  002432  FFFF               	dw	65535	; assembler added errata NOP
  1331  002434                     
  1332                           ;usart.c: 36:     TRISCbits.TRISC6 = 0;
  1333  002434  9C94               	bcf	148,6,c	;volatile
  1334                           
  1335                           ;usart.c: 37:     TRISCbits.TRISC7 = 1;
  1336  002436  8E94               	bsf	148,7,c	;volatile
  1337                           
  1338                           ;usart.c: 39:     TXSTAbits.TX9 = 0;
  1339  002438  9CAC               	bcf	172,6,c	;volatile
  1340                           
  1341                           ;usart.c: 40:     TXSTAbits.TXEN = 1;
  1342  00243A  8AAC               	bsf	172,5,c	;volatile
  1343                           
  1344                           ;usart.c: 41:     TXSTAbits.SYNC = 0;
  1345  00243C  98AC               	bcf	172,4,c	;volatile
  1346                           
  1347                           ;usart.c: 42:     TXSTAbits.BRGH = 0;
  1348  00243E  94AC               	bcf	172,2,c	;volatile
  1349                           
  1350                           ;usart.c: 44:     RCSTAbits.SPEN = 1;
  1351  002440  8EAB               	bsf	171,7,c	;volatile
  1352                           
  1353                           ;usart.c: 45:     RCSTAbits.RX9 = 0;
  1354  002442  9CAB               	bcf	171,6,c	;volatile
  1355                           
  1356                           ;usart.c: 46:     RCSTAbits.CREN = 0;
  1357  002444  98AB               	bcf	171,4,c	;volatile
  1358                           
  1359                           ;usart.c: 47:     RCSTAbits.ADDEN = 0;
  1360  002446  96AB               	bcf	171,3,c	;volatile
  1361  002448                     
  1362                           ;usart.c: 50:     SPBRG = 25;
  1363  002448  0E19               	movlw	25
  1364  00244A  6EAF               	movwf	175,c	;volatile
  1365  00244C  0012               	return		;funcret
  1366  00244E  FFFF               	dw	65535	; errata NOP
  1367  002450                     __end_of_usartInit:
  1368                           	callstack 0
  1369                           
  1370 ;; *************** function _tim2Init *****************
  1371 ;; Defined at:
  1372 ;;		line 34 in file "pwm.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;		None
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg, status,2
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1386 ;;      Params:         2       0       0       0       0       0       0
  1387 ;;      Locals:         0       0       0       0       0       0       0
  1388 ;;      Temps:          0       0       0       0       0       0       0
  1389 ;;      Totals:         2       0       0       0       0       0       0
  1390 ;;Total ram usage:        2 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    4
  1393 ;; This function calls:
  1394 ;;		Nothing
  1395 ;; This function is called by:
  1396 ;;		_main
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           	psect	text2
  1401  002450                     __ptext2:
  1402                           	callstack 0
  1403  002450                     _tim2Init:
  1404                           	callstack 0
  1405  002450  FFFF               	dw	65535	; assembler added errata NOP
  1406  002452                     
  1407                           ;pwm.c: 35:     T2CONbits.TMR2ON = 0;
  1408  002452  94CA               	bcf	202,2,c	;volatile
  1409  002454                     
  1410                           ;pwm.c: 36:     T2CONbits.T2CKPS = 0x03;
  1411  002454  0E03               	movlw	3
  1412  002456  12CA               	iorwf	202,f,c	;volatile
  1413  002458                     
  1414                           ;pwm.c: 39:     pwmPeriod = _pwmPeriod;
  1415  002458  C012  F055         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1416  00245C  C013  F056         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1417  002460  0012               	return		;funcret
  1418  002462  FFFF               	dw	65535	; errata NOP
  1419  002464                     __end_of_tim2Init:
  1420                           	callstack 0
  1421                           
  1422 ;; *************** function _tim0Init *****************
  1423 ;; Defined at:
  1424 ;;		line 21 in file "pwm.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;		None
  1427 ;; Auto vars:     Size  Location     Type
  1428 ;;		None
  1429 ;; Return value:  Size  Location     Type
  1430 ;;                  1    wreg      void 
  1431 ;; Registers used:
  1432 ;;		wreg, status,2
  1433 ;; Tracked objects:
  1434 ;;		On entry : 0/0
  1435 ;;		On exit  : 0/0
  1436 ;;		Unchanged: 0/0
  1437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1438 ;;      Params:         0       0       0       0       0       0       0
  1439 ;;      Locals:         0       0       0       0       0       0       0
  1440 ;;      Temps:          0       0       0       0       0       0       0
  1441 ;;      Totals:         0       0       0       0       0       0       0
  1442 ;;Total ram usage:        0 bytes
  1443 ;; Hardware stack levels used:    1
  1444 ;; Hardware stack levels required when called:    4
  1445 ;; This function calls:
  1446 ;;		Nothing
  1447 ;; This function is called by:
  1448 ;;		_main
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text3
  1453  002478                     __ptext3:
  1454                           	callstack 0
  1455  002478                     _tim0Init:
  1456                           	callstack 0
  1457  002478  FFFF               	dw	65535	; assembler added errata NOP
  1458  00247A                     
  1459                           ;pwm.c: 22:     T0CONbits.TMR0ON = 0;
  1460  00247A  9ED5               	bcf	213,7,c	;volatile
  1461                           
  1462                           ;pwm.c: 23:     T0CONbits.T08BIT = 0;
  1463  00247C  9CD5               	bcf	213,6,c	;volatile
  1464                           
  1465                           ;pwm.c: 24:     T0CONbits.T0CS = 0;
  1466  00247E  9AD5               	bcf	213,5,c	;volatile
  1467                           
  1468                           ;pwm.c: 25:     T0CONbits.PSA = 1;
  1469  002480  86D5               	bsf	213,3,c	;volatile
  1470  002482                     
  1471                           ;pwm.c: 26:     T0CONbits.T0PS = 0x07;
  1472  002482  0E07               	movlw	7
  1473  002484  12D5               	iorwf	213,f,c	;volatile
  1474  002486  0012               	return		;funcret
  1475  002488  FFFF               	dw	65535	; errata NOP
  1476  00248A                     __end_of_tim0Init:
  1477                           	callstack 0
  1478                           
  1479 ;; *************** function _storeData *****************
  1480 ;; Defined at:
  1481 ;;		line 131 in file "usart.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;  data            1    wreg     unsigned char 
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;  data            1   26[COMRAM] unsigned char 
  1486 ;; Return value:  Size  Location     Type
  1487 ;;                  1    wreg      void 
  1488 ;; Registers used:
  1489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1490 ;; Tracked objects:
  1491 ;;		On entry : 0/0
  1492 ;;		On exit  : 0/0
  1493 ;;		Unchanged: 0/0
  1494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1495 ;;      Params:         0       0       0       0       0       0       0
  1496 ;;      Locals:         1       0       0       0       0       0       0
  1497 ;;      Temps:          2       0       0       0       0       0       0
  1498 ;;      Totals:         3       0       0       0       0       0       0
  1499 ;;Total ram usage:        3 bytes
  1500 ;; Hardware stack levels used:    1
  1501 ;; Hardware stack levels required when called:    6
  1502 ;; This function calls:
  1503 ;;		_printError
  1504 ;; This function is called by:
  1505 ;;		_main
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           	psect	text4
  1510  0014EC                     __ptext4:
  1511                           	callstack 0
  1512  0014EC                     _storeData:
  1513                           	callstack 0
  1514  0014EC  FFFF               	dw	65535	; assembler added errata NOP
  1515                           
  1516                           ;incstack = 0
  1517                           ;storeData@data stored from wreg
  1518  0014EE  6E1B               	movwf	storeData@data^0,c
  1519  0014F0                     
  1520                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  1521  0014F0  0E45               	movlw	low storeData@receivedMex
  1522  0014F2  245E               	addwf	storeData@counter^0,w,c
  1523  0014F4  6ED9               	movwf	fsr2l,c
  1524  0014F6  6ADA               	clrf	fsr2h,c
  1525  0014F8  0E00               	movlw	high storeData@receivedMex
  1526  0014FA  22DA               	addwfc	fsr2h,f,c
  1527  0014FC  C01B  FFDF         	movff	storeData@data,indf2
  1528  001500                     
  1529                           ;usart.c: 142:     counter++;
  1530  001500  2A5E               	incf	storeData@counter^0,f,c
  1531                           
  1532                           ;usart.c: 145:     switch(receivedMex[0]){
  1533  001502  EF92  F00A         	goto	l4086
  1534  001506                     l4078:
  1535  001506  FFFF               	dw	65535	; assembler added errata NOP
  1536                           
  1537                           ;usart.c: 147:             mexLength = 5;
  1538  001508  0E05               	movlw	5
  1539  00150A  6E6D               	movwf	storeData@mexLength^0,c
  1540                           
  1541                           ;usart.c: 148:             break;
  1542  00150C  EFAD  F00A         	goto	l4088
  1543  001510                     l4080:
  1544  001510  FFFF               	dw	65535	; assembler added errata NOP
  1545                           
  1546                           ;usart.c: 150:             mexLength = 9;
  1547  001512  0E09               	movlw	9
  1548  001514  6E6D               	movwf	storeData@mexLength^0,c
  1549                           
  1550                           ;usart.c: 151:             break;
  1551  001516  EFAD  F00A         	goto	l4088
  1552  00151A                     l4082:
  1553  00151A  FFFF               	dw	65535	; assembler added errata NOP
  1554                           
  1555                           ;usart.c: 153:             mexLength = 1;
  1556  00151C  0E01               	movlw	1
  1557  00151E  6E6D               	movwf	storeData@mexLength^0,c
  1558                           
  1559                           ;usart.c: 154:             break;
  1560  001520  EFAD  F00A         	goto	l4088
  1561  001524                     l4086:
  1562  001524  FFFF               	dw	65535	; assembler added errata NOP
  1563  001526  5045               	movf	storeData@receivedMex^0,w,c
  1564  001528  6E19               	movwf	??_storeData^0,c
  1565  00152A  6A1A               	clrf	(??_storeData+1)^0,c
  1566                           
  1567                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1568                           ; Switch size 1, requested type "simple"
  1569                           ; Number of cases is 1, Range of values is 0 to 0
  1570                           ; switch strategies available:
  1571                           ; Name         Instructions Cycles
  1572                           ; simple_byte            4     3 (average)
  1573                           ;	Chosen strategy is simple_byte
  1574  00152C  501A               	movf	(??_storeData+1)^0,w,c
  1575  00152E  0A00               	xorlw	0	; case 0
  1576  001530  B4D8               	btfsc	status,2,c
  1577  001532  EF9D  F00A         	goto	l4486
  1578  001536  EFAD  F00A         	goto	l4088
  1579  00153A                     l4486:
  1580  00153A  FFFF               	dw	65535	; assembler added errata NOP
  1581                           
  1582                           ; Switch size 1, requested type "simple"
  1583                           ; Number of cases is 3, Range of values is 0 to 2
  1584                           ; switch strategies available:
  1585                           ; Name         Instructions Cycles
  1586                           ; simple_byte           10     6 (average)
  1587                           ;	Chosen strategy is simple_byte
  1588  00153C  5019               	movf	??_storeData^0,w,c
  1589  00153E  0A00               	xorlw	0	; case 0
  1590  001540  B4D8               	btfsc	status,2,c
  1591  001542  EF83  F00A         	goto	l4078
  1592  001546  0A01               	xorlw	1	; case 1
  1593  001548  B4D8               	btfsc	status,2,c
  1594  00154A  EF88  F00A         	goto	l4080
  1595  00154E  0A03               	xorlw	3	; case 2
  1596  001550  B4D8               	btfsc	status,2,c
  1597  001552  EF8D  F00A         	goto	l4082
  1598  001556  EFAD  F00A         	goto	l4088
  1599  00155A                     l4088:
  1600  00155A  FFFF               	dw	65535	; assembler added errata NOP
  1601                           
  1602                           ;usart.c: 161:     if(counter >= mexLength){
  1603  00155C  506D               	movf	storeData@mexLength^0,w,c
  1604  00155E  5C5E               	subwf	storeData@counter^0,w,c
  1605  001560  A0D8               	btfss	status,0,c
  1606  001562  EFB5  F00A         	goto	u3471
  1607  001566  EFB8  F00A         	goto	u3470
  1608  00156A                     u3471:
  1609  00156A  FFFF               	dw	65535	; assembler added errata NOP
  1610  00156C  EF24  F00B         	goto	l571
  1611  001570                     u3470:
  1612  001570  FFFF               	dw	65535	; assembler added errata NOP
  1613  001572                     
  1614                           ;usart.c: 162:         counter = 0;
  1615  001572  0E00               	movlw	0
  1616  001574  6E5E               	movwf	storeData@counter^0,c
  1617                           
  1618                           ;usart.c: 166:         switch(receivedMex[0]){
  1619  001576  EF09  F00B         	goto	l4104
  1620  00157A                     l4092:
  1621  00157A  FFFF               	dw	65535	; assembler added errata NOP
  1622                           
  1623                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1624  00157C  5061               	movf	_dataCounter^0,w,c
  1625  00157E  0D04               	mullw	4
  1626  001580  0ED8               	movlw	low _dataSequence
  1627  001582  24F3               	addwf	243,w,c
  1628  001584  6ED9               	movwf	fsr2l,c
  1629  001586  0E00               	movlw	high _dataSequence
  1630  001588  20F4               	addwfc	prodh,w,c
  1631  00158A  6EDA               	movwf	fsr2h,c
  1632  00158C  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  1633                           
  1634                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  1635  001590  5061               	movf	_dataCounter^0,w,c
  1636  001592  0D04               	mullw	4
  1637  001594  0ED9               	movlw	low (_dataSequence+1)
  1638  001596  24F3               	addwf	243,w,c
  1639  001598  6ED9               	movwf	fsr2l,c
  1640  00159A  0E00               	movlw	high (_dataSequence+1)
  1641  00159C  20F4               	addwfc	prodh,w,c
  1642  00159E  6EDA               	movwf	fsr2h,c
  1643  0015A0  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  1644                           
  1645                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  1646  0015A4  5061               	movf	_dataCounter^0,w,c
  1647  0015A6  0D04               	mullw	4
  1648  0015A8  0EDA               	movlw	low (_dataSequence+2)
  1649  0015AA  24F3               	addwf	243,w,c
  1650  0015AC  6ED9               	movwf	fsr2l,c
  1651  0015AE  0E00               	movlw	high (_dataSequence+2)
  1652  0015B0  20F4               	addwfc	prodh,w,c
  1653  0015B2  6EDA               	movwf	fsr2h,c
  1654  0015B4  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  1655                           
  1656                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1657  0015B8  5061               	movf	_dataCounter^0,w,c
  1658  0015BA  0D04               	mullw	4
  1659  0015BC  0EDB               	movlw	low (_dataSequence+3)
  1660  0015BE  24F3               	addwf	243,w,c
  1661  0015C0  6ED9               	movwf	fsr2l,c
  1662  0015C2  0E00               	movlw	high (_dataSequence+3)
  1663  0015C4  20F4               	addwfc	prodh,w,c
  1664  0015C6  6EDA               	movwf	fsr2h,c
  1665  0015C8  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  1666  0015CC                     
  1667                           ;usart.c: 173:                 dataCounter++;
  1668  0015CC  2A61               	incf	_dataCounter^0,f,c
  1669                           
  1670                           ;usart.c: 174:                 break;
  1671  0015CE  EF24  F00B         	goto	l571
  1672  0015D2                     l568:
  1673  0015D2  FFFF               	dw	65535	; assembler added errata NOP
  1674                           
  1675                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  1676  0015D4  C046  F0EC         	movff	storeData@receivedMex+1,_newSequenceData
  1677                           
  1678                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  1679  0015D8  C047  F0ED         	movff	storeData@receivedMex+2,_newSequenceData+1
  1680                           
  1681                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  1682  0015DC  C048  F0EE         	movff	storeData@receivedMex+3,_newSequenceData+2
  1683                           
  1684                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  1685  0015E0  C049  F0EF         	movff	storeData@receivedMex+4,_newSequenceData+3
  1686                           
  1687                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  1688  0015E4  C04A  F0F0         	movff	storeData@receivedMex+5,_newSequenceData+4
  1689                           
  1690                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  1691  0015E8  C04B  F0F1         	movff	storeData@receivedMex+6,_newSequenceData+5
  1692                           
  1693                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  1694  0015EC  C04C  F0F2         	movff	storeData@receivedMex+7,_newSequenceData+6
  1695                           
  1696                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  1697  0015F0  C04D  F0F3         	movff	storeData@receivedMex+8,_newSequenceData+7
  1698  0015F4                     
  1699                           ;usart.c: 186:                 _newSequence = 1;
  1700  0015F4  0E01               	movlw	1
  1701  0015F6  6E5F               	movwf	__newSequence^0,c
  1702                           
  1703                           ;usart.c: 187:                 break;
  1704  0015F8  EF24  F00B         	goto	l571
  1705  0015FC                     l4098:
  1706  0015FC  FFFF               	dw	65535	; assembler added errata NOP
  1707                           
  1708                           ;usart.c: 190:                 _fatalError = 1;
  1709  0015FE  0E01               	movlw	1
  1710  001600  6E60               	movwf	__fatalError^0,c
  1711                           
  1712                           ;usart.c: 191:                 break;
  1713  001602  EF24  F00B         	goto	l571
  1714  001606                     l4100:
  1715  001606  FFFF               	dw	65535	; assembler added errata NOP
  1716                           
  1717                           ;usart.c: 194:                 printError(8);
  1718  001608  0E08               	movlw	8
  1719  00160A  EC73  F00C         	call	_printError
  1720                           
  1721                           ;usart.c: 195:                 break;
  1722  00160E  EF24  F00B         	goto	l571
  1723  001612                     l4104:
  1724  001612  FFFF               	dw	65535	; assembler added errata NOP
  1725  001614  5045               	movf	storeData@receivedMex^0,w,c
  1726  001616  6E19               	movwf	??_storeData^0,c
  1727  001618  6A1A               	clrf	(??_storeData+1)^0,c
  1728                           
  1729                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1730                           ; Switch size 1, requested type "simple"
  1731                           ; Number of cases is 1, Range of values is 0 to 0
  1732                           ; switch strategies available:
  1733                           ; Name         Instructions Cycles
  1734                           ; simple_byte            4     3 (average)
  1735                           ;	Chosen strategy is simple_byte
  1736  00161A  501A               	movf	(??_storeData+1)^0,w,c
  1737  00161C  0A00               	xorlw	0	; case 0
  1738  00161E  B4D8               	btfsc	status,2,c
  1739  001620  EF14  F00B         	goto	l4488
  1740  001624  EF03  F00B         	goto	l4100
  1741  001628                     l4488:
  1742  001628  FFFF               	dw	65535	; assembler added errata NOP
  1743                           
  1744                           ; Switch size 1, requested type "simple"
  1745                           ; Number of cases is 3, Range of values is 0 to 2
  1746                           ; switch strategies available:
  1747                           ; Name         Instructions Cycles
  1748                           ; simple_byte           10     6 (average)
  1749                           ;	Chosen strategy is simple_byte
  1750  00162A  5019               	movf	??_storeData^0,w,c
  1751  00162C  0A00               	xorlw	0	; case 0
  1752  00162E  B4D8               	btfsc	status,2,c
  1753  001630  EFBD  F00A         	goto	l4092
  1754  001634  0A01               	xorlw	1	; case 1
  1755  001636  B4D8               	btfsc	status,2,c
  1756  001638  EFE9  F00A         	goto	l568
  1757  00163C  0A03               	xorlw	3	; case 2
  1758  00163E  B4D8               	btfsc	status,2,c
  1759  001640  EFFE  F00A         	goto	l4098
  1760  001644  EF03  F00B         	goto	l4100
  1761  001648                     l571:
  1762  001648  FFFF               	dw	65535	; assembler added errata NOP
  1763  00164A  0012               	return		;funcret
  1764  00164C  FFFF               	dw	65535	; errata NOP
  1765  00164E                     __end_of_storeData:
  1766                           	callstack 0
  1767                           
  1768 ;; *************** function _printError *****************
  1769 ;; Defined at:
  1770 ;;		line 53 in file "usart.c"
  1771 ;; Parameters:    Size  Location     Type
  1772 ;;  errCode         1    wreg     unsigned char 
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;  errCode         1   23[COMRAM] unsigned char 
  1775 ;; Return value:  Size  Location     Type
  1776 ;;                  1    wreg      void 
  1777 ;; Registers used:
  1778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1779 ;; Tracked objects:
  1780 ;;		On entry : 0/0
  1781 ;;		On exit  : 0/0
  1782 ;;		Unchanged: 0/0
  1783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1784 ;;      Params:         0       0       0       0       0       0       0
  1785 ;;      Locals:         1       0       0       0       0       0       0
  1786 ;;      Temps:          2       0       0       0       0       0       0
  1787 ;;      Totals:         3       0       0       0       0       0       0
  1788 ;;Total ram usage:        3 bytes
  1789 ;; Hardware stack levels used:    1
  1790 ;; Hardware stack levels required when called:    5
  1791 ;; This function calls:
  1792 ;;		_uartTx
  1793 ;; This function is called by:
  1794 ;;		_main
  1795 ;;		_storeData
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799                           	psect	text5
  1800  0018E6                     __ptext5:
  1801                           	callstack 0
  1802  0018E6                     _printError:
  1803                           	callstack 0
  1804  0018E6  FFFF               	dw	65535	; assembler added errata NOP
  1805                           
  1806                           ;incstack = 0
  1807                           ;printError@errCode stored from wreg
  1808  0018E8  6E18               	movwf	printError@errCode^0,c
  1809  0018EA                     
  1810                           ;usart.c: 55:     switch(errCode){
  1811  0018EA  EFCF  F00C         	goto	l3948
  1812  0018EE                     l3930:
  1813  0018EE  FFFF               	dw	65535	; assembler added errata NOP
  1814                           
  1815                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1816  0018F0  0EA4               	movlw	low _errString_Feed
  1817  0018F2  6E12               	movwf	uartTx@ptr^0,c
  1818  0018F4  0E00               	movlw	high _errString_Feed
  1819  0018F6  6E13               	movwf	(uartTx@ptr+1)^0,c
  1820  0018F8  0E1D               	movlw	29
  1821  0018FA  6E14               	movwf	uartTx@length^0,c
  1822  0018FC  EC64  F011         	call	_uartTx	;wreg free
  1823                           
  1824                           ;usart.c: 58:             break;
  1825  001900  EFFE  F00C         	goto	l527
  1826  001904                     l3932:
  1827  001904  FFFF               	dw	65535	; assembler added errata NOP
  1828                           
  1829                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1830  001906  0E5C               	movlw	low _errString_ZEND
  1831  001908  6E12               	movwf	uartTx@ptr^0,c
  1832  00190A  0E01               	movlw	high _errString_ZEND
  1833  00190C  6E13               	movwf	(uartTx@ptr+1)^0,c
  1834  00190E  0E28               	movlw	40
  1835  001910  6E14               	movwf	uartTx@length^0,c
  1836  001912  EC64  F011         	call	_uartTx	;wreg free
  1837                           
  1838                           ;usart.c: 61:             break;
  1839  001916  EFFE  F00C         	goto	l527
  1840  00191A                     l3934:
  1841  00191A  FFFF               	dw	65535	; assembler added errata NOP
  1842                           
  1843                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1844  00191C  0E84               	movlw	low _errString_Reset
  1845  00191E  6E12               	movwf	uartTx@ptr^0,c
  1846  001920  0E01               	movlw	high _errString_Reset
  1847  001922  6E13               	movwf	(uartTx@ptr+1)^0,c
  1848  001924  0E27               	movlw	39
  1849  001926  6E14               	movwf	uartTx@length^0,c
  1850  001928  EC64  F011         	call	_uartTx	;wreg free
  1851                           
  1852                           ;usart.c: 64:             break;
  1853  00192C  EFFE  F00C         	goto	l527
  1854  001930                     l3936:
  1855  001930  FFFF               	dw	65535	; assembler added errata NOP
  1856                           
  1857                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1858  001932  0E34               	movlw	low _errString_Point
  1859  001934  6E12               	movwf	uartTx@ptr^0,c
  1860  001936  0E01               	movlw	high _errString_Point
  1861  001938  6E13               	movwf	(uartTx@ptr+1)^0,c
  1862  00193A  0E28               	movlw	40
  1863  00193C  6E14               	movwf	uartTx@length^0,c
  1864  00193E  EC64  F011         	call	_uartTx	;wreg free
  1865                           
  1866                           ;usart.c: 67:             break;
  1867  001942  EFFE  F00C         	goto	l527
  1868  001946                     l3938:
  1869  001946  FFFF               	dw	65535	; assembler added errata NOP
  1870                           
  1871                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  1872  001948  0E84               	movlw	low _errString_Bound
  1873  00194A  6E12               	movwf	uartTx@ptr^0,c
  1874  00194C  0E00               	movlw	high _errString_Bound
  1875  00194E  6E13               	movwf	(uartTx@ptr+1)^0,c
  1876  001950  0E20               	movlw	32
  1877  001952  6E14               	movwf	uartTx@length^0,c
  1878  001954  EC64  F011         	call	_uartTx	;wreg free
  1879                           
  1880                           ;usart.c: 70:             break;
  1881  001958  EFFE  F00C         	goto	l527
  1882  00195C                     l3940:
  1883  00195C  FFFF               	dw	65535	; assembler added errata NOP
  1884                           
  1885                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  1886  00195E  0E00               	movlw	low _errString_PointZ
  1887  001960  6E12               	movwf	uartTx@ptr^0,c
  1888  001962  0E01               	movlw	high _errString_PointZ
  1889  001964  6E13               	movwf	(uartTx@ptr+1)^0,c
  1890  001966  0E34               	movlw	52
  1891  001968  6E14               	movwf	uartTx@length^0,c
  1892  00196A  EC64  F011         	call	_uartTx	;wreg free
  1893                           
  1894                           ;usart.c: 73:             break;
  1895  00196E  EFFE  F00C         	goto	l527
  1896  001972                     l3942:
  1897  001972  FFFF               	dw	65535	; assembler added errata NOP
  1898                           
  1899                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  1900  001974  0EAB               	movlw	low _errString_Fatal
  1901  001976  6E12               	movwf	uartTx@ptr^0,c
  1902  001978  0E01               	movlw	high _errString_Fatal
  1903  00197A  6E13               	movwf	(uartTx@ptr+1)^0,c
  1904  00197C  0E26               	movlw	38
  1905  00197E  6E14               	movwf	uartTx@length^0,c
  1906  001980  EC64  F011         	call	_uartTx	;wreg free
  1907                           
  1908                           ;usart.c: 76:             break;
  1909  001984  EFFE  F00C         	goto	l527
  1910  001988                     l3944:
  1911  001988  FFFF               	dw	65535	; assembler added errata NOP
  1912                           
  1913                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  1914  00198A  0EC1               	movlw	low _errString_Command
  1915  00198C  6E12               	movwf	uartTx@ptr^0,c
  1916  00198E  0E00               	movlw	high _errString_Command
  1917  001990  6E13               	movwf	(uartTx@ptr+1)^0,c
  1918  001992  0E17               	movlw	23
  1919  001994  6E14               	movwf	uartTx@length^0,c
  1920  001996  EC64  F011         	call	_uartTx	;wreg free
  1921                           
  1922                           ;usart.c: 79:             break;
  1923  00199A  EFFE  F00C         	goto	l527
  1924  00199E                     l3948:
  1925  00199E  FFFF               	dw	65535	; assembler added errata NOP
  1926  0019A0  5018               	movf	printError@errCode^0,w,c
  1927  0019A2  6E16               	movwf	??_printError^0,c
  1928  0019A4  6A17               	clrf	(??_printError+1)^0,c
  1929                           
  1930                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1931                           ; Switch size 1, requested type "simple"
  1932                           ; Number of cases is 1, Range of values is 0 to 0
  1933                           ; switch strategies available:
  1934                           ; Name         Instructions Cycles
  1935                           ; simple_byte            4     3 (average)
  1936                           ;	Chosen strategy is simple_byte
  1937  0019A6  5017               	movf	(??_printError+1)^0,w,c
  1938  0019A8  0A00               	xorlw	0	; case 0
  1939  0019AA  B4D8               	btfsc	status,2,c
  1940  0019AC  EFDA  F00C         	goto	l4490
  1941  0019B0  EFFE  F00C         	goto	l527
  1942  0019B4                     l4490:
  1943  0019B4  FFFF               	dw	65535	; assembler added errata NOP
  1944                           
  1945                           ; Switch size 1, requested type "simple"
  1946                           ; Number of cases is 8, Range of values is 1 to 8
  1947                           ; switch strategies available:
  1948                           ; Name         Instructions Cycles
  1949                           ; simple_byte           25    13 (average)
  1950                           ;	Chosen strategy is simple_byte
  1951  0019B6  5016               	movf	??_printError^0,w,c
  1952  0019B8  0A01               	xorlw	1	; case 1
  1953  0019BA  B4D8               	btfsc	status,2,c
  1954  0019BC  EF77  F00C         	goto	l3930
  1955  0019C0  0A03               	xorlw	3	; case 2
  1956  0019C2  B4D8               	btfsc	status,2,c
  1957  0019C4  EF82  F00C         	goto	l3932
  1958  0019C8  0A01               	xorlw	1	; case 3
  1959  0019CA  B4D8               	btfsc	status,2,c
  1960  0019CC  EF8D  F00C         	goto	l3934
  1961  0019D0  0A07               	xorlw	7	; case 4
  1962  0019D2  B4D8               	btfsc	status,2,c
  1963  0019D4  EF98  F00C         	goto	l3936
  1964  0019D8  0A01               	xorlw	1	; case 5
  1965  0019DA  B4D8               	btfsc	status,2,c
  1966  0019DC  EFA3  F00C         	goto	l3938
  1967  0019E0  0A03               	xorlw	3	; case 6
  1968  0019E2  B4D8               	btfsc	status,2,c
  1969  0019E4  EFAE  F00C         	goto	l3940
  1970  0019E8  0A01               	xorlw	1	; case 7
  1971  0019EA  B4D8               	btfsc	status,2,c
  1972  0019EC  EFB9  F00C         	goto	l3942
  1973  0019F0  0A0F               	xorlw	15	; case 8
  1974  0019F2  B4D8               	btfsc	status,2,c
  1975  0019F4  EFC4  F00C         	goto	l3944
  1976  0019F8  EFFE  F00C         	goto	l527
  1977  0019FC                     l527:
  1978  0019FC  FFFF               	dw	65535	; assembler added errata NOP
  1979  0019FE  0012               	return		;funcret
  1980  001A00  FFFF               	dw	65535	; errata NOP
  1981  001A02                     __end_of_printError:
  1982                           	callstack 0
  1983                           
  1984 ;; *************** function _uartTx *****************
  1985 ;; Defined at:
  1986 ;;		line 221 in file "usart.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  1989 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  1990 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  1991 ;;  length          1   19[COMRAM] unsigned char 
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;  i               1   20[COMRAM] unsigned char 
  1994 ;; Return value:  Size  Location     Type
  1995 ;;                  1    wreg      void 
  1996 ;; Registers used:
  1997 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1998 ;; Tracked objects:
  1999 ;;		On entry : 0/0
  2000 ;;		On exit  : 0/0
  2001 ;;		Unchanged: 0/0
  2002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2003 ;;      Params:         3       0       0       0       0       0       0
  2004 ;;      Locals:         1       0       0       0       0       0       0
  2005 ;;      Temps:          0       0       0       0       0       0       0
  2006 ;;      Totals:         4       0       0       0       0       0       0
  2007 ;;Total ram usage:        4 bytes
  2008 ;; Hardware stack levels used:    1
  2009 ;; Hardware stack levels required when called:    4
  2010 ;; This function calls:
  2011 ;;		Nothing
  2012 ;; This function is called by:
  2013 ;;		_printError
  2014 ;; This function uses a non-reentrant model
  2015 ;;
  2016                           
  2017                           	psect	text6
  2018  0022C8                     __ptext6:
  2019                           	callstack 0
  2020  0022C8                     _uartTx:
  2021                           	callstack 0
  2022  0022C8  FFFF               	dw	65535	; assembler added errata NOP
  2023  0022CA                     
  2024                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  2025  0022CA  0E01               	movlw	1
  2026  0022CC  6E15               	movwf	uartTx@i^0,c
  2027  0022CE  EF7D  F011         	goto	l3430
  2028  0022D2                     l3426:
  2029  0022D2  FFFF               	dw	65535	; assembler added errata NOP
  2030                           
  2031                           ;usart.c: 226:         TXREG = *ptr;
  2032  0022D4  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2033  0022D8  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2034  0022DC  50DF               	movf	indf2,w,c
  2035  0022DE  6EAD               	movwf	173,c	;volatile
  2036  0022E0                     l582:
  2037  0022E0  FFFF               	dw	65535	; assembler added errata NOP
  2038  0022E2  A2AC               	btfss	172,1,c	;volatile
  2039  0022E4  EF76  F011         	goto	u2481
  2040  0022E8  EF79  F011         	goto	u2480
  2041  0022EC                     u2481:
  2042  0022EC  FFFF               	dw	65535	; assembler added errata NOP
  2043  0022EE  EF70  F011         	goto	l582
  2044  0022F2                     u2480:
  2045  0022F2  FFFF               	dw	65535	; assembler added errata NOP
  2046  0022F4                     
  2047                           ;usart.c: 230:         ptr++;
  2048  0022F4  4A12               	infsnz	uartTx@ptr^0,f,c
  2049  0022F6  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2050                           
  2051                           ;usart.c: 231:     }
  2052  0022F8  2A15               	incf	uartTx@i^0,f,c
  2053  0022FA                     l3430:
  2054  0022FA  FFFF               	dw	65535	; assembler added errata NOP
  2055  0022FC  5014               	movf	uartTx@length^0,w,c
  2056  0022FE  5C15               	subwf	uartTx@i^0,w,c
  2057  002300  A0D8               	btfss	status,0,c
  2058  002302  EF85  F011         	goto	u2491
  2059  002306  EF88  F011         	goto	u2490
  2060  00230A                     u2491:
  2061  00230A  FFFF               	dw	65535	; assembler added errata NOP
  2062  00230C  EF69  F011         	goto	l3426
  2063  002310                     u2490:
  2064  002310  FFFF               	dw	65535	; assembler added errata NOP
  2065  002312  0012               	return		;funcret
  2066  002314  FFFF               	dw	65535	; errata NOP
  2067  002316                     __end_of_uartTx:
  2068                           	callstack 0
  2069                           
  2070 ;; *************** function _shiftData *****************
  2071 ;; Defined at:
  2072 ;;		line 120 in file "usart.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;		None
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  i               1   19[COMRAM] unsigned char 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      void 
  2079 ;; Registers used:
  2080 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2086 ;;      Params:         0       0       0       0       0       0       0
  2087 ;;      Locals:         1       0       0       0       0       0       0
  2088 ;;      Temps:          2       0       0       0       0       0       0
  2089 ;;      Totals:         3       0       0       0       0       0       0
  2090 ;;Total ram usage:        3 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:    4
  2093 ;; This function calls:
  2094 ;;		Nothing
  2095 ;; This function is called by:
  2096 ;;		_main
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099                           
  2100                           	psect	text7
  2101  002210                     __ptext7:
  2102                           	callstack 0
  2103  002210                     _shiftData:
  2104                           	callstack 0
  2105  002210  FFFF               	dw	65535	; assembler added errata NOP
  2106  002212                     
  2107                           ;usart.c: 121:     char i;;usart.c: 123:     for(i = 0; i < 4; i++){
  2108  002212  0E00               	movlw	0
  2109  002214  6E14               	movwf	shiftData@i^0,c
  2110  002216                     l4188:
  2111  002216  FFFF               	dw	65535	; assembler added errata NOP
  2112                           
  2113                           ;usart.c: 124:         dataSequence[i] = dataSequence[i+1];
  2114  002218  5014               	movf	shiftData@i^0,w,c
  2115  00221A  6E12               	movwf	??_shiftData^0,c
  2116  00221C  6A13               	clrf	(??_shiftData+1)^0,c
  2117  00221E  90D8               	bcf	status,0,c
  2118  002220  3612               	rlcf	??_shiftData^0,f,c
  2119  002222  3613               	rlcf	(??_shiftData+1)^0,f,c
  2120  002224  90D8               	bcf	status,0,c
  2121  002226  3612               	rlcf	??_shiftData^0,f,c
  2122  002228  3613               	rlcf	(??_shiftData+1)^0,f,c
  2123  00222A  0EDC               	movlw	low (_dataSequence+4)
  2124  00222C  2412               	addwf	??_shiftData^0,w,c
  2125  00222E  6ED9               	movwf	fsr2l,c
  2126  002230  0E00               	movlw	high (_dataSequence+4)
  2127  002232  2013               	addwfc	(??_shiftData+1)^0,w,c
  2128  002234  6EDA               	movwf	fsr2h,c
  2129  002236  5014               	movf	shiftData@i^0,w,c
  2130  002238  0D04               	mullw	4
  2131  00223A  0ED8               	movlw	low _dataSequence
  2132  00223C  24F3               	addwf	243,w,c
  2133  00223E  6EE1               	movwf	fsr1l,c
  2134  002240  0E00               	movlw	high _dataSequence
  2135  002242  20F4               	addwfc	prodh,w,c
  2136  002244  6EE2               	movwf	fsr1h,c
  2137  002246  CFDE FFE6          	movff	postinc2,postinc1
  2138  00224A  CFDE FFE6          	movff	postinc2,postinc1
  2139  00224E  CFDE FFE6          	movff	postinc2,postinc1
  2140  002252  CFDE FFE6          	movff	postinc2,postinc1
  2141  002256                     
  2142                           ;usart.c: 125:     }
  2143  002256  2A14               	incf	shiftData@i^0,f,c
  2144  002258  0E03               	movlw	3
  2145  00225A  6414               	cpfsgt	shiftData@i^0,c
  2146  00225C  EF32  F011         	goto	u3501
  2147  002260  EF35  F011         	goto	u3500
  2148  002264                     u3501:
  2149  002264  FFFF               	dw	65535	; assembler added errata NOP
  2150  002266  EF0B  F011         	goto	l4188
  2151  00226A                     u3500:
  2152  00226A  FFFF               	dw	65535	; assembler added errata NOP
  2153  00226C  0012               	return		;funcret
  2154  00226E  FFFF               	dw	65535	; errata NOP
  2155  002270                     __end_of_shiftData:
  2156                           	callstack 0
  2157                           
  2158 ;; *************** function _resetPosition *****************
  2159 ;; Defined at:
  2160 ;;		line 158 in file "motors.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;		None
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;  keepMovingZ     1   23[COMRAM] unsigned char 
  2165 ;;  keepMovingY     1   22[COMRAM] unsigned char 
  2166 ;;  keepMovingX     1   21[COMRAM] unsigned char 
  2167 ;; Return value:  Size  Location     Type
  2168 ;;                  1    wreg      unsigned char 
  2169 ;; Registers used:
  2170 ;;		wreg, status,2, status,0, cstack
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2176 ;;      Params:         0       0       0       0       0       0       0
  2177 ;;      Locals:         3       0       0       0       0       0       0
  2178 ;;      Temps:          0       0       0       0       0       0       0
  2179 ;;      Totals:         3       0       0       0       0       0       0
  2180 ;;Total ram usage:        3 bytes
  2181 ;; Hardware stack levels used:    1
  2182 ;; Hardware stack levels required when called:    5
  2183 ;; This function calls:
  2184 ;;		_enableMotor
  2185 ;;		_resetStep
  2186 ;;		_setDecay
  2187 ;;		_setDirection
  2188 ;;		_setStep
  2189 ;;		_stepMade
  2190 ;; This function is called by:
  2191 ;;		_main
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text8
  2196  00118A                     __ptext8:
  2197                           	callstack 0
  2198  00118A                     _resetPosition:
  2199                           	callstack 0
  2200  00118A  FFFF               	dw	65535	; assembler added errata NOP
  2201  00118C                     
  2202                           ;motors.c: 160:     setStep(0, 0);
  2203  00118C  0E00               	movlw	0
  2204  00118E  6E12               	movwf	setStep@motor^0,c
  2205  001190  0E00               	movlw	0
  2206  001192  EC81  F00E         	call	_setStep
  2207                           
  2208                           ;motors.c: 161:     setStep(1, 0);
  2209  001196  0E00               	movlw	0
  2210  001198  6E12               	movwf	setStep@motor^0,c
  2211  00119A  0E01               	movlw	1
  2212  00119C  EC81  F00E         	call	_setStep
  2213                           
  2214                           ;motors.c: 162:     setStep(2, 0);
  2215  0011A0  0E00               	movlw	0
  2216  0011A2  6E12               	movwf	setStep@motor^0,c
  2217  0011A4  0E02               	movlw	2
  2218  0011A6  EC81  F00E         	call	_setStep
  2219                           
  2220                           ;motors.c: 164:     setDirection(0, 0);
  2221  0011AA  0E00               	movlw	0
  2222  0011AC  6E12               	movwf	setDirection@motor^0,c
  2223  0011AE  0E00               	movlw	0
  2224  0011B0  ECCE  F010         	call	_setDirection
  2225                           
  2226                           ;motors.c: 165:     setDirection(0, 1);
  2227  0011B4  0E01               	movlw	1
  2228  0011B6  6E12               	movwf	setDirection@motor^0,c
  2229  0011B8  0E00               	movlw	0
  2230  0011BA  ECCE  F010         	call	_setDirection
  2231                           
  2232                           ;motors.c: 166:     setDirection(0, 2);
  2233  0011BE  0E02               	movlw	2
  2234  0011C0  6E12               	movwf	setDirection@motor^0,c
  2235  0011C2  0E00               	movlw	0
  2236  0011C4  ECCE  F010         	call	_setDirection
  2237                           
  2238                           ;motors.c: 168:     setDecay(1, 0);
  2239  0011C8  0E00               	movlw	0
  2240  0011CA  6E12               	movwf	setDecay@motor^0,c
  2241  0011CC  0E01               	movlw	1
  2242  0011CE  EC5A  F010         	call	_setDecay
  2243                           
  2244                           ;motors.c: 169:     setDecay(1, 1);
  2245  0011D2  0E01               	movlw	1
  2246  0011D4  6E12               	movwf	setDecay@motor^0,c
  2247  0011D6  0E01               	movlw	1
  2248  0011D8  EC5A  F010         	call	_setDecay
  2249                           
  2250                           ;motors.c: 170:     setDecay(1, 2);
  2251  0011DC  0E02               	movlw	2
  2252  0011DE  6E12               	movwf	setDecay@motor^0,c
  2253  0011E0  0E01               	movlw	1
  2254  0011E2  EC5A  F010         	call	_setDecay
  2255                           
  2256                           ;motors.c: 172:     enableMotor(0, 0);
  2257  0011E6  0E00               	movlw	0
  2258  0011E8  6E12               	movwf	enableMotor@motor^0,c
  2259  0011EA  0E00               	movlw	0
  2260  0011EC  EC94  F010         	call	_enableMotor
  2261                           
  2262                           ;motors.c: 173:     enableMotor(0, 1);
  2263  0011F0  0E01               	movlw	1
  2264  0011F2  6E12               	movwf	enableMotor@motor^0,c
  2265  0011F4  0E00               	movlw	0
  2266  0011F6  EC94  F010         	call	_enableMotor
  2267                           
  2268                           ;motors.c: 174:     enableMotor(0, 2);
  2269  0011FA  0E02               	movlw	2
  2270  0011FC  6E12               	movwf	enableMotor@motor^0,c
  2271  0011FE  0E00               	movlw	0
  2272  001200  EC94  F010         	call	_enableMotor
  2273  001204                     
  2274                           ;motors.c: 178:     unsigned char keepMovingX = 1;
  2275  001204  0E01               	movlw	1
  2276  001206  6E16               	movwf	resetPosition@keepMovingX^0,c
  2277  001208                     
  2278                           ;motors.c: 179:     unsigned char keepMovingY = 1;
  2279  001208  0E01               	movlw	1
  2280  00120A  6E17               	movwf	resetPosition@keepMovingY^0,c
  2281  00120C                     
  2282                           ;motors.c: 180:     unsigned char keepMovingZ = 1;
  2283  00120C  0E01               	movlw	1
  2284  00120E  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2285  001210                     
  2286                           ;motors.c: 183:     T2CONbits.TMR2ON = 1;
  2287  001210  84CA               	bsf	202,2,c	;volatile
  2288  001212                     
  2289                           ;motors.c: 185:     tm0Error = 0;
  2290  001212  0E00               	movlw	0
  2291  001214  6E5C               	movwf	(_tm0Error+1)^0,c
  2292  001216  0E00               	movlw	0
  2293  001218  6E5B               	movwf	_tm0Error^0,c
  2294  00121A                     
  2295                           ;motors.c: 186:     tm0Limit = 200;
  2296  00121A  0EC8               	movlw	200
  2297  00121C  6E68               	movwf	_tm0Limit^0,c
  2298  00121E                     
  2299                           ;motors.c: 187:     T0CONbits.TMR0ON = 1;
  2300  00121E  8ED5               	bsf	213,7,c	;volatile
  2301                           
  2302                           ;motors.c: 189:     while(keepMovingX || keepMovingY || keepMovingZ){
  2303  001220  EF93  F009         	goto	l4016
  2304  001224                     l3994:
  2305  001224  FFFF               	dw	65535	; assembler added errata NOP
  2306                           
  2307                           ;motors.c: 192:         if(tm0Error){
  2308  001226  505B               	movf	_tm0Error^0,w,c
  2309  001228  105C               	iorwf	(_tm0Error+1)^0,w,c
  2310  00122A  B4D8               	btfsc	status,2,c
  2311  00122C  EF1A  F009         	goto	u3331
  2312  001230  EF1D  F009         	goto	u3330
  2313  001234                     u3331:
  2314  001234  FFFF               	dw	65535	; assembler added errata NOP
  2315  001236  EF27  F009         	goto	l115
  2316  00123A                     u3330:
  2317  00123A  FFFF               	dw	65535	; assembler added errata NOP
  2318  00123C                     
  2319                           ;motors.c: 194:             LATAbits.LATA2 = 0;
  2320  00123C  9489               	bcf	137,2,c	;volatile
  2321                           
  2322                           ;motors.c: 195:             LATBbits.LATB4 = 0;
  2323  00123E  988A               	bcf	138,4,c	;volatile
  2324                           
  2325                           ;motors.c: 196:             LATCbits.LATC2 = 0;
  2326  001240  948B               	bcf	139,2,c	;volatile
  2327  001242                     
  2328                           ;motors.c: 198:             tm0Error = 3;
  2329  001242  0E00               	movlw	0
  2330  001244  6E5C               	movwf	(_tm0Error+1)^0,c
  2331  001246  0E03               	movlw	3
  2332  001248  6E5B               	movwf	_tm0Error^0,c
  2333                           
  2334                           ;motors.c: 199:             break;
  2335  00124A  EFB1  F009         	goto	l116
  2336  00124E                     l115:
  2337  00124E  FFFF               	dw	65535	; assembler added errata NOP
  2338                           
  2339                           ;motors.c: 206:         if(PORTEbits.RE0 || !keepMovingX){
  2340  001250  B084               	btfsc	132,0,c	;volatile
  2341  001252  EF2D  F009         	goto	u3341
  2342  001256  EF30  F009         	goto	u3340
  2343  00125A                     u3341:
  2344  00125A  FFFF               	dw	65535	; assembler added errata NOP
  2345  00125C  EF3A  F009         	goto	l4002
  2346  001260                     u3340:
  2347  001260  FFFF               	dw	65535	; assembler added errata NOP
  2348  001262  5016               	movf	resetPosition@keepMovingX^0,w,c
  2349  001264  A4D8               	btfss	status,2,c
  2350  001266  EF37  F009         	goto	u3351
  2351  00126A  EF3A  F009         	goto	u3350
  2352  00126E                     u3351:
  2353  00126E  FFFF               	dw	65535	; assembler added errata NOP
  2354  001270  EF3F  F009         	goto	l117
  2355  001274                     u3350:
  2356  001274                     l4002:
  2357  001274  FFFF               	dw	65535	; assembler added errata NOP
  2358                           
  2359                           ;motors.c: 208:             keepMovingX = 0;
  2360  001276  0E00               	movlw	0
  2361  001278  6E16               	movwf	resetPosition@keepMovingX^0,c
  2362                           
  2363                           ;motors.c: 209:         }else{
  2364  00127A  EF41  F009         	goto	l120
  2365  00127E                     l117:
  2366  00127E  FFFF               	dw	65535	; assembler added errata NOP
  2367                           
  2368                           ;motors.c: 211:             LATAbits.LATA2 = 1;
  2369  001280  8489               	bsf	137,2,c	;volatile
  2370  001282                     l120:
  2371  001282  FFFF               	dw	65535	; assembler added errata NOP
  2372                           
  2373                           ;motors.c: 215:         if(PORTEbits.RE1 || !keepMovingY){
  2374  001284  B284               	btfsc	132,1,c	;volatile
  2375  001286  EF47  F009         	goto	u3361
  2376  00128A  EF4A  F009         	goto	u3360
  2377  00128E                     u3361:
  2378  00128E  FFFF               	dw	65535	; assembler added errata NOP
  2379  001290  EF54  F009         	goto	l4006
  2380  001294                     u3360:
  2381  001294  FFFF               	dw	65535	; assembler added errata NOP
  2382  001296  5017               	movf	resetPosition@keepMovingY^0,w,c
  2383  001298  A4D8               	btfss	status,2,c
  2384  00129A  EF51  F009         	goto	u3371
  2385  00129E  EF54  F009         	goto	u3370
  2386  0012A2                     u3371:
  2387  0012A2  FFFF               	dw	65535	; assembler added errata NOP
  2388  0012A4  EF59  F009         	goto	l121
  2389  0012A8                     u3370:
  2390  0012A8                     l4006:
  2391  0012A8  FFFF               	dw	65535	; assembler added errata NOP
  2392                           
  2393                           ;motors.c: 217:             keepMovingY = 0;
  2394  0012AA  0E00               	movlw	0
  2395  0012AC  6E17               	movwf	resetPosition@keepMovingY^0,c
  2396                           
  2397                           ;motors.c: 218:         }else{
  2398  0012AE  EF5B  F009         	goto	l124
  2399  0012B2                     l121:
  2400  0012B2  FFFF               	dw	65535	; assembler added errata NOP
  2401                           
  2402                           ;motors.c: 220:             LATBbits.LATB4 = 1;
  2403  0012B4  888A               	bsf	138,4,c	;volatile
  2404  0012B6                     l124:
  2405  0012B6  FFFF               	dw	65535	; assembler added errata NOP
  2406                           
  2407                           ;motors.c: 224:         if(PORTEbits.RE2 || !keepMovingZ){
  2408  0012B8  B484               	btfsc	132,2,c	;volatile
  2409  0012BA  EF61  F009         	goto	u3381
  2410  0012BE  EF64  F009         	goto	u3380
  2411  0012C2                     u3381:
  2412  0012C2  FFFF               	dw	65535	; assembler added errata NOP
  2413  0012C4  EF6E  F009         	goto	l4010
  2414  0012C8                     u3380:
  2415  0012C8  FFFF               	dw	65535	; assembler added errata NOP
  2416  0012CA  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2417  0012CC  A4D8               	btfss	status,2,c
  2418  0012CE  EF6B  F009         	goto	u3391
  2419  0012D2  EF6E  F009         	goto	u3390
  2420  0012D6                     u3391:
  2421  0012D6  FFFF               	dw	65535	; assembler added errata NOP
  2422  0012D8  EF73  F009         	goto	l125
  2423  0012DC                     u3390:
  2424  0012DC                     l4010:
  2425  0012DC  FFFF               	dw	65535	; assembler added errata NOP
  2426                           
  2427                           ;motors.c: 226:             keepMovingZ = 0;
  2428  0012DE  0E00               	movlw	0
  2429  0012E0  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2430                           
  2431                           ;motors.c: 227:         }else{
  2432  0012E2  EF75  F009         	goto	l4012
  2433  0012E6                     l125:
  2434  0012E6  FFFF               	dw	65535	; assembler added errata NOP
  2435                           
  2436                           ;motors.c: 229:             LATCbits.LATC2 = 1;
  2437  0012E8  848B               	bsf	139,2,c	;volatile
  2438  0012EA                     l4012:
  2439  0012EA  FFFF               	dw	65535	; assembler added errata NOP
  2440  0012EC  EC32  F012         	call	_stepMade	;wreg free
  2441  0012F0  5012               	movf	?_stepMade^0,w,c
  2442  0012F2  1013               	iorwf	(?_stepMade+1)^0,w,c
  2443  0012F4  B4D8               	btfsc	status,2,c
  2444  0012F6  EF7F  F009         	goto	u3401
  2445  0012FA  EF82  F009         	goto	u3400
  2446  0012FE                     u3401:
  2447  0012FE  FFFF               	dw	65535	; assembler added errata NOP
  2448  001300  EF75  F009         	goto	l4012
  2449  001304                     u3400:
  2450  001304  FFFF               	dw	65535	; assembler added errata NOP
  2451  001306                     
  2452                           ;motors.c: 236:         LATAbits.LATA2 = 0;
  2453  001306  9489               	bcf	137,2,c	;volatile
  2454                           
  2455                           ;motors.c: 237:         LATBbits.LATB4 = 0;
  2456  001308  988A               	bcf	138,4,c	;volatile
  2457                           
  2458                           ;motors.c: 238:         LATCbits.LATC2 = 0;
  2459  00130A  948B               	bcf	139,2,c	;volatile
  2460  00130C                     l4014:
  2461  00130C  FFFF               	dw	65535	; assembler added errata NOP
  2462  00130E  EC32  F012         	call	_stepMade	;wreg free
  2463  001312  5012               	movf	?_stepMade^0,w,c
  2464  001314  1013               	iorwf	(?_stepMade+1)^0,w,c
  2465  001316  B4D8               	btfsc	status,2,c
  2466  001318  EF90  F009         	goto	u3411
  2467  00131C  EF93  F009         	goto	u3410
  2468  001320                     u3411:
  2469  001320  FFFF               	dw	65535	; assembler added errata NOP
  2470  001322  EF86  F009         	goto	l4014
  2471  001326                     u3410:
  2472  001326                     l4016:
  2473  001326  FFFF               	dw	65535	; assembler added errata NOP
  2474                           
  2475                           ;motors.c: 189:     while(keepMovingX || keepMovingY || keepMovingZ){
  2476  001328  5016               	movf	resetPosition@keepMovingX^0,w,c
  2477  00132A  A4D8               	btfss	status,2,c
  2478  00132C  EF9A  F009         	goto	u3421
  2479  001330  EF9D  F009         	goto	u3420
  2480  001334                     u3421:
  2481  001334  FFFF               	dw	65535	; assembler added errata NOP
  2482  001336  EF12  F009         	goto	l3994
  2483  00133A                     u3420:
  2484  00133A  FFFF               	dw	65535	; assembler added errata NOP
  2485  00133C  5017               	movf	resetPosition@keepMovingY^0,w,c
  2486  00133E  A4D8               	btfss	status,2,c
  2487  001340  EFA4  F009         	goto	u3431
  2488  001344  EFA7  F009         	goto	u3430
  2489  001348                     u3431:
  2490  001348  FFFF               	dw	65535	; assembler added errata NOP
  2491  00134A  EF12  F009         	goto	l3994
  2492  00134E                     u3430:
  2493  00134E  FFFF               	dw	65535	; assembler added errata NOP
  2494  001350  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2495  001352  A4D8               	btfss	status,2,c
  2496  001354  EFAE  F009         	goto	u3441
  2497  001358  EFB1  F009         	goto	u3440
  2498  00135C                     u3441:
  2499  00135C  FFFF               	dw	65535	; assembler added errata NOP
  2500  00135E  EF12  F009         	goto	l3994
  2501  001362                     u3440:
  2502  001362                     l116:
  2503  001362  FFFF               	dw	65535	; assembler added errata NOP
  2504                           
  2505                           ;motors.c: 245:     T0CONbits.TMR0ON = 0;
  2506  001364  9ED5               	bcf	213,7,c	;volatile
  2507                           
  2508                           ;motors.c: 246:     T2CONbits.TMR2ON = 0;
  2509  001366  94CA               	bcf	202,2,c	;volatile
  2510  001368                     
  2511                           ;motors.c: 248:     TMR0 = 0;
  2512  001368  0E00               	movlw	0
  2513  00136A  6ED7               	movwf	215,c	;volatile
  2514  00136C  0E00               	movlw	0
  2515  00136E  6ED6               	movwf	214,c	;volatile
  2516                           
  2517                           ;motors.c: 249:     TMR2 = 0;
  2518  001370  0E00               	movlw	0
  2519  001372  6ECC               	movwf	204,c	;volatile
  2520  001374                     
  2521                           ;motors.c: 252:     resetStep();
  2522  001374  EC8E  F012         	call	_resetStep	;wreg free
  2523  001378  0012               	return		;funcret
  2524  00137A  FFFF               	dw	65535	; errata NOP
  2525  00137C                     __end_of_resetPosition:
  2526                           	callstack 0
  2527                           
  2528 ;; *************** function _setStep *****************
  2529 ;; Defined at:
  2530 ;;		line 67 in file "motors.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;  step            1    wreg     unsigned char 
  2533 ;;  motor           1   17[COMRAM] unsigned char 
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  step            1   20[COMRAM] unsigned char 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, status,2, status,0
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2545 ;;      Params:         1       0       0       0       0       0       0
  2546 ;;      Locals:         1       0       0       0       0       0       0
  2547 ;;      Temps:          2       0       0       0       0       0       0
  2548 ;;      Totals:         4       0       0       0       0       0       0
  2549 ;;Total ram usage:        4 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    4
  2552 ;; This function calls:
  2553 ;;		Nothing
  2554 ;; This function is called by:
  2555 ;;		_resetPosition
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           	psect	text9
  2560  001D02                     __ptext9:
  2561                           	callstack 0
  2562  001D02                     _setStep:
  2563                           	callstack 0
  2564  001D02  FFFF               	dw	65535	; assembler added errata NOP
  2565                           
  2566                           ;incstack = 0
  2567                           ;setStep@step stored from wreg
  2568  001D04  6E15               	movwf	setStep@step^0,c
  2569  001D06                     
  2570                           ;motors.c: 68:     switch(motor){
  2571  001D06  EFCE  F00E         	goto	l3670
  2572  001D0A                     l3662:
  2573  001D0A  FFFF               	dw	65535	; assembler added errata NOP
  2574                           
  2575                           ;motors.c: 71:             LATAbits.LATA5 = (step & 0x01);
  2576  001D0C  C015  F013         	movff	setStep@step,??_setStep
  2577  001D10  0E01               	movlw	1
  2578  001D12  1613               	andwf	??_setStep^0,f,c
  2579  001D14  3A13               	swapf	??_setStep^0,f,c
  2580  001D16  4613               	rlncf	??_setStep^0,f,c
  2581  001D18  5089               	movf	137,w,c	;volatile
  2582  001D1A  1813               	xorwf	??_setStep^0,w,c
  2583  001D1C  0BDF               	andlw	-33
  2584  001D1E  1813               	xorwf	??_setStep^0,w,c
  2585  001D20  6E89               	movwf	137,c	;volatile
  2586                           
  2587                           ;motors.c: 73:             LATBbits.LATB0 = (step & 0x02);
  2588  001D22  C015  F013         	movff	setStep@step,??_setStep
  2589  001D26  0E02               	movlw	2
  2590  001D28  1613               	andwf	??_setStep^0,f,c
  2591  001D2A  508A               	movf	138,w,c	;volatile
  2592  001D2C  1813               	xorwf	??_setStep^0,w,c
  2593  001D2E  0BFE               	andlw	-2
  2594  001D30  1813               	xorwf	??_setStep^0,w,c
  2595  001D32  6E8A               	movwf	138,c	;volatile
  2596                           
  2597                           ;motors.c: 74:             break;
  2598  001D34  EFE9  F00E         	goto	l83
  2599  001D38                     l3664:
  2600  001D38  FFFF               	dw	65535	; assembler added errata NOP
  2601                           
  2602                           ;motors.c: 76:             LATBbits.LATB6 = (step & 0x01);
  2603  001D3A  C015  F013         	movff	setStep@step,??_setStep
  2604  001D3E  0E01               	movlw	1
  2605  001D40  1613               	andwf	??_setStep^0,f,c
  2606  001D42  3A13               	swapf	??_setStep^0,f,c
  2607  001D44  4613               	rlncf	??_setStep^0,f,c
  2608  001D46  4613               	rlncf	??_setStep^0,f,c
  2609  001D48  508A               	movf	138,w,c	;volatile
  2610  001D4A  1813               	xorwf	??_setStep^0,w,c
  2611  001D4C  0BBF               	andlw	-65
  2612  001D4E  1813               	xorwf	??_setStep^0,w,c
  2613  001D50  6E8A               	movwf	138,c	;volatile
  2614                           
  2615                           ;motors.c: 77:             LATBbits.LATB7 = (step & 0x02);
  2616  001D52  C015  F013         	movff	setStep@step,??_setStep
  2617  001D56  0E02               	movlw	2
  2618  001D58  1613               	andwf	??_setStep^0,f,c
  2619  001D5A  3213               	rrcf	??_setStep^0,f,c
  2620  001D5C  3213               	rrcf	??_setStep^0,f,c
  2621  001D5E  508A               	movf	138,w,c	;volatile
  2622  001D60  1813               	xorwf	??_setStep^0,w,c
  2623  001D62  0B7F               	andlw	-129
  2624  001D64  1813               	xorwf	??_setStep^0,w,c
  2625  001D66  6E8A               	movwf	138,c	;volatile
  2626                           
  2627                           ;motors.c: 78:             break;
  2628  001D68  EFE9  F00E         	goto	l83
  2629  001D6C                     l3666:
  2630  001D6C  FFFF               	dw	65535	; assembler added errata NOP
  2631                           
  2632                           ;motors.c: 80:             LATCbits.LATC4 = (step & 0x01);
  2633  001D6E  C015  F013         	movff	setStep@step,??_setStep
  2634  001D72  0E01               	movlw	1
  2635  001D74  1613               	andwf	??_setStep^0,f,c
  2636  001D76  3A13               	swapf	??_setStep^0,f,c
  2637  001D78  508B               	movf	139,w,c	;volatile
  2638  001D7A  1813               	xorwf	??_setStep^0,w,c
  2639  001D7C  0BEF               	andlw	-17
  2640  001D7E  1813               	xorwf	??_setStep^0,w,c
  2641  001D80  6E8B               	movwf	139,c	;volatile
  2642                           
  2643                           ;motors.c: 81:             LATCbits.LATC5 = (step & 0x02);
  2644  001D82  C015  F013         	movff	setStep@step,??_setStep
  2645  001D86  0E02               	movlw	2
  2646  001D88  1613               	andwf	??_setStep^0,f,c
  2647  001D8A  3A13               	swapf	??_setStep^0,f,c
  2648  001D8C  4613               	rlncf	??_setStep^0,f,c
  2649  001D8E  508B               	movf	139,w,c	;volatile
  2650  001D90  1813               	xorwf	??_setStep^0,w,c
  2651  001D92  0BDF               	andlw	-33
  2652  001D94  1813               	xorwf	??_setStep^0,w,c
  2653  001D96  6E8B               	movwf	139,c	;volatile
  2654                           
  2655                           ;motors.c: 82:             break;
  2656  001D98  EFE9  F00E         	goto	l83
  2657  001D9C                     l3670:
  2658  001D9C  FFFF               	dw	65535	; assembler added errata NOP
  2659  001D9E  5012               	movf	setStep@motor^0,w,c
  2660  001DA0  6E13               	movwf	??_setStep^0,c
  2661  001DA2  6A14               	clrf	(??_setStep+1)^0,c
  2662                           
  2663                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2664                           ; Switch size 1, requested type "simple"
  2665                           ; Number of cases is 1, Range of values is 0 to 0
  2666                           ; switch strategies available:
  2667                           ; Name         Instructions Cycles
  2668                           ; simple_byte            4     3 (average)
  2669                           ;	Chosen strategy is simple_byte
  2670  001DA4  5014               	movf	(??_setStep+1)^0,w,c
  2671  001DA6  0A00               	xorlw	0	; case 0
  2672  001DA8  B4D8               	btfsc	status,2,c
  2673  001DAA  EFD9  F00E         	goto	l4492
  2674  001DAE  EFE9  F00E         	goto	l83
  2675  001DB2                     l4492:
  2676  001DB2  FFFF               	dw	65535	; assembler added errata NOP
  2677                           
  2678                           ; Switch size 1, requested type "simple"
  2679                           ; Number of cases is 3, Range of values is 0 to 2
  2680                           ; switch strategies available:
  2681                           ; Name         Instructions Cycles
  2682                           ; simple_byte           10     6 (average)
  2683                           ;	Chosen strategy is simple_byte
  2684  001DB4  5013               	movf	??_setStep^0,w,c
  2685  001DB6  0A00               	xorlw	0	; case 0
  2686  001DB8  B4D8               	btfsc	status,2,c
  2687  001DBA  EF85  F00E         	goto	l3662
  2688  001DBE  0A01               	xorlw	1	; case 1
  2689  001DC0  B4D8               	btfsc	status,2,c
  2690  001DC2  EF9C  F00E         	goto	l3664
  2691  001DC6  0A03               	xorlw	3	; case 2
  2692  001DC8  B4D8               	btfsc	status,2,c
  2693  001DCA  EFB6  F00E         	goto	l3666
  2694  001DCE  EFE9  F00E         	goto	l83
  2695  001DD2                     l83:
  2696  001DD2  FFFF               	dw	65535	; assembler added errata NOP
  2697  001DD4  0012               	return		;funcret
  2698  001DD6  FFFF               	dw	65535	; errata NOP
  2699  001DD8                     __end_of_setStep:
  2700                           	callstack 0
  2701                           
  2702 ;; *************** function _setDecay *****************
  2703 ;; Defined at:
  2704 ;;		line 136 in file "motors.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;  decay           1    wreg     unsigned char 
  2707 ;;  motor           1   17[COMRAM] unsigned char 
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;  decay           1   20[COMRAM] unsigned char 
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  1    wreg      void 
  2712 ;; Registers used:
  2713 ;;		wreg, status,2, status,0
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2719 ;;      Params:         1       0       0       0       0       0       0
  2720 ;;      Locals:         1       0       0       0       0       0       0
  2721 ;;      Temps:          2       0       0       0       0       0       0
  2722 ;;      Totals:         4       0       0       0       0       0       0
  2723 ;;Total ram usage:        4 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:    4
  2726 ;; This function calls:
  2727 ;;		Nothing
  2728 ;; This function is called by:
  2729 ;;		_resetPosition
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           	psect	text10
  2734  0020B4                     __ptext10:
  2735                           	callstack 0
  2736  0020B4                     _setDecay:
  2737                           	callstack 0
  2738  0020B4  FFFF               	dw	65535	; assembler added errata NOP
  2739                           
  2740                           ;incstack = 0
  2741                           ;setDecay@decay stored from wreg
  2742  0020B6  6E15               	movwf	setDecay@decay^0,c
  2743  0020B8                     
  2744                           ;motors.c: 137:     switch(motor){
  2745  0020B8  EF76  F010         	goto	l3702
  2746  0020BC                     l3694:
  2747  0020BC  FFFF               	dw	65535	; assembler added errata NOP
  2748                           
  2749                           ;motors.c: 139:             LATBbits.LATB2 = decay;
  2750  0020BE  B015               	btfsc	setDecay@decay^0,0,c
  2751  0020C0  D002               	bra	u2935
  2752  0020C2  948A               	bcf	138,2,c	;volatile
  2753  0020C4  D001               	bra	u2936
  2754  0020C6                     u2935:
  2755  0020C6  848A               	bsf	138,2,c	;volatile
  2756  0020C8                     u2936:
  2757                           
  2758                           ;motors.c: 140:             break;
  2759  0020C8  EF91  F010         	goto	l110
  2760  0020CC                     l3696:
  2761  0020CC  FFFF               	dw	65535	; assembler added errata NOP
  2762                           
  2763                           ;motors.c: 142:             LATCbits.LATC0 = decay;
  2764  0020CE  B015               	btfsc	setDecay@decay^0,0,c
  2765  0020D0  D002               	bra	u2945
  2766  0020D2  908B               	bcf	139,0,c	;volatile
  2767  0020D4  D001               	bra	u2946
  2768  0020D6                     u2945:
  2769  0020D6  808B               	bsf	139,0,c	;volatile
  2770  0020D8                     u2946:
  2771                           
  2772                           ;motors.c: 143:             break;
  2773  0020D8  EF91  F010         	goto	l110
  2774  0020DC                     l3698:
  2775  0020DC  FFFF               	dw	65535	; assembler added errata NOP
  2776                           
  2777                           ;motors.c: 145:             LATDbits.LATD0 = decay;
  2778  0020DE  B015               	btfsc	setDecay@decay^0,0,c
  2779  0020E0  D002               	bra	u2955
  2780  0020E2  908C               	bcf	140,0,c	;volatile
  2781  0020E4  D001               	bra	u2956
  2782  0020E6                     u2955:
  2783  0020E6  808C               	bsf	140,0,c	;volatile
  2784  0020E8                     u2956:
  2785                           
  2786                           ;motors.c: 146:             break;
  2787  0020E8  EF91  F010         	goto	l110
  2788  0020EC                     l3702:
  2789  0020EC  FFFF               	dw	65535	; assembler added errata NOP
  2790  0020EE  5012               	movf	setDecay@motor^0,w,c
  2791  0020F0  6E13               	movwf	??_setDecay^0,c
  2792  0020F2  6A14               	clrf	(??_setDecay+1)^0,c
  2793                           
  2794                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2795                           ; Switch size 1, requested type "simple"
  2796                           ; Number of cases is 1, Range of values is 0 to 0
  2797                           ; switch strategies available:
  2798                           ; Name         Instructions Cycles
  2799                           ; simple_byte            4     3 (average)
  2800                           ;	Chosen strategy is simple_byte
  2801  0020F4  5014               	movf	(??_setDecay+1)^0,w,c
  2802  0020F6  0A00               	xorlw	0	; case 0
  2803  0020F8  B4D8               	btfsc	status,2,c
  2804  0020FA  EF81  F010         	goto	l4494
  2805  0020FE  EF91  F010         	goto	l110
  2806  002102                     l4494:
  2807  002102  FFFF               	dw	65535	; assembler added errata NOP
  2808                           
  2809                           ; Switch size 1, requested type "simple"
  2810                           ; Number of cases is 3, Range of values is 0 to 2
  2811                           ; switch strategies available:
  2812                           ; Name         Instructions Cycles
  2813                           ; simple_byte           10     6 (average)
  2814                           ;	Chosen strategy is simple_byte
  2815  002104  5013               	movf	??_setDecay^0,w,c
  2816  002106  0A00               	xorlw	0	; case 0
  2817  002108  B4D8               	btfsc	status,2,c
  2818  00210A  EF5E  F010         	goto	l3694
  2819  00210E  0A01               	xorlw	1	; case 1
  2820  002110  B4D8               	btfsc	status,2,c
  2821  002112  EF66  F010         	goto	l3696
  2822  002116  0A03               	xorlw	3	; case 2
  2823  002118  B4D8               	btfsc	status,2,c
  2824  00211A  EF6E  F010         	goto	l3698
  2825  00211E  EF91  F010         	goto	l110
  2826  002122                     l110:
  2827  002122  FFFF               	dw	65535	; assembler added errata NOP
  2828  002124  0012               	return		;funcret
  2829  002126  FFFF               	dw	65535	; errata NOP
  2830  002128                     __end_of_setDecay:
  2831                           	callstack 0
  2832                           
  2833 ;; *************** function _enableMotor *****************
  2834 ;; Defined at:
  2835 ;;		line 94 in file "motors.c"
  2836 ;; Parameters:    Size  Location     Type
  2837 ;;  enable          1    wreg     unsigned char 
  2838 ;;  motor           1   17[COMRAM] unsigned char 
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;  enable          1   20[COMRAM] unsigned char 
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  1    wreg      void 
  2843 ;; Registers used:
  2844 ;;		wreg, status,2, status,0
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2850 ;;      Params:         1       0       0       0       0       0       0
  2851 ;;      Locals:         1       0       0       0       0       0       0
  2852 ;;      Temps:          2       0       0       0       0       0       0
  2853 ;;      Totals:         4       0       0       0       0       0       0
  2854 ;;Total ram usage:        4 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; Hardware stack levels required when called:    4
  2857 ;; This function calls:
  2858 ;;		Nothing
  2859 ;; This function is called by:
  2860 ;;		_resetPosition
  2861 ;;		_main
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           	psect	text11
  2866  002128                     __ptext11:
  2867                           	callstack 0
  2868  002128                     _enableMotor:
  2869                           	callstack 0
  2870  002128  FFFF               	dw	65535	; assembler added errata NOP
  2871                           
  2872                           ;incstack = 0
  2873                           ;enableMotor@enable stored from wreg
  2874  00212A  6E15               	movwf	enableMotor@enable^0,c
  2875  00212C                     
  2876                           ;motors.c: 95:     switch(motor){
  2877  00212C  EFB0  F010         	goto	l3686
  2878  002130                     l3678:
  2879  002130  FFFF               	dw	65535	; assembler added errata NOP
  2880                           
  2881                           ;motors.c: 97:             LATAbits.LATA3 = enable;
  2882  002132  B015               	btfsc	enableMotor@enable^0,0,c
  2883  002134  D002               	bra	u2905
  2884  002136  9689               	bcf	137,3,c	;volatile
  2885  002138  D001               	bra	u2906
  2886  00213A                     u2905:
  2887  00213A  8689               	bsf	137,3,c	;volatile
  2888  00213C                     u2906:
  2889                           
  2890                           ;motors.c: 98:             break;
  2891  00213C  EFCB  F010         	goto	l92
  2892  002140                     l3680:
  2893  002140  FFFF               	dw	65535	; assembler added errata NOP
  2894                           
  2895                           ;motors.c: 100:             LATBbits.LATB5 = enable;
  2896  002142  B015               	btfsc	enableMotor@enable^0,0,c
  2897  002144  D002               	bra	u2915
  2898  002146  9A8A               	bcf	138,5,c	;volatile
  2899  002148  D001               	bra	u2916
  2900  00214A                     u2915:
  2901  00214A  8A8A               	bsf	138,5,c	;volatile
  2902  00214C                     u2916:
  2903                           
  2904                           ;motors.c: 101:             break;
  2905  00214C  EFCB  F010         	goto	l92
  2906  002150                     l3682:
  2907  002150  FFFF               	dw	65535	; assembler added errata NOP
  2908                           
  2909                           ;motors.c: 103:             LATCbits.LATC3 = enable;
  2910  002152  B015               	btfsc	enableMotor@enable^0,0,c
  2911  002154  D002               	bra	u2925
  2912  002156  968B               	bcf	139,3,c	;volatile
  2913  002158  D001               	bra	u2926
  2914  00215A                     u2925:
  2915  00215A  868B               	bsf	139,3,c	;volatile
  2916  00215C                     u2926:
  2917                           
  2918                           ;motors.c: 104:             break;
  2919  00215C  EFCB  F010         	goto	l92
  2920  002160                     l3686:
  2921  002160  FFFF               	dw	65535	; assembler added errata NOP
  2922  002162  5012               	movf	enableMotor@motor^0,w,c
  2923  002164  6E13               	movwf	??_enableMotor^0,c
  2924  002166  6A14               	clrf	(??_enableMotor+1)^0,c
  2925                           
  2926                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2927                           ; Switch size 1, requested type "simple"
  2928                           ; Number of cases is 1, Range of values is 0 to 0
  2929                           ; switch strategies available:
  2930                           ; Name         Instructions Cycles
  2931                           ; simple_byte            4     3 (average)
  2932                           ;	Chosen strategy is simple_byte
  2933  002168  5014               	movf	(??_enableMotor+1)^0,w,c
  2934  00216A  0A00               	xorlw	0	; case 0
  2935  00216C  B4D8               	btfsc	status,2,c
  2936  00216E  EFBB  F010         	goto	l4496
  2937  002172  EFCB  F010         	goto	l92
  2938  002176                     l4496:
  2939  002176  FFFF               	dw	65535	; assembler added errata NOP
  2940                           
  2941                           ; Switch size 1, requested type "simple"
  2942                           ; Number of cases is 3, Range of values is 0 to 2
  2943                           ; switch strategies available:
  2944                           ; Name         Instructions Cycles
  2945                           ; simple_byte           10     6 (average)
  2946                           ;	Chosen strategy is simple_byte
  2947  002178  5013               	movf	??_enableMotor^0,w,c
  2948  00217A  0A00               	xorlw	0	; case 0
  2949  00217C  B4D8               	btfsc	status,2,c
  2950  00217E  EF98  F010         	goto	l3678
  2951  002182  0A01               	xorlw	1	; case 1
  2952  002184  B4D8               	btfsc	status,2,c
  2953  002186  EFA0  F010         	goto	l3680
  2954  00218A  0A03               	xorlw	3	; case 2
  2955  00218C  B4D8               	btfsc	status,2,c
  2956  00218E  EFA8  F010         	goto	l3682
  2957  002192  EFCB  F010         	goto	l92
  2958  002196                     l92:
  2959  002196  FFFF               	dw	65535	; assembler added errata NOP
  2960  002198  0012               	return		;funcret
  2961  00219A  FFFF               	dw	65535	; errata NOP
  2962  00219C                     __end_of_enableMotor:
  2963                           	callstack 0
  2964                           
  2965 ;; *************** function _resetNewSequence *****************
  2966 ;; Defined at:
  2967 ;;		line 112 in file "usart.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;		None
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;		None
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  1    wreg      void 
  2974 ;; Registers used:
  2975 ;;		wreg, status,2
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2981 ;;      Params:         0       0       0       0       0       0       0
  2982 ;;      Locals:         0       0       0       0       0       0       0
  2983 ;;      Temps:          0       0       0       0       0       0       0
  2984 ;;      Totals:         0       0       0       0       0       0       0
  2985 ;;Total ram usage:        0 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:    4
  2988 ;; This function calls:
  2989 ;;		Nothing
  2990 ;; This function is called by:
  2991 ;;		_main
  2992 ;; This function uses a non-reentrant model
  2993 ;;
  2994                           
  2995                           	psect	text12
  2996  0024F4                     __ptext12:
  2997                           	callstack 0
  2998  0024F4                     _resetNewSequence:
  2999                           	callstack 0
  3000  0024F4  FFFF               	dw	65535	; assembler added errata NOP
  3001  0024F6                     
  3002                           ;usart.c: 113:     _newSequence = 0;
  3003  0024F6  0E00               	movlw	0
  3004  0024F8  6E5F               	movwf	__newSequence^0,c
  3005  0024FA  0012               	return		;funcret
  3006  0024FC  FFFF               	dw	65535	; errata NOP
  3007  0024FE                     __end_of_resetNewSequence:
  3008                           	callstack 0
  3009                           
  3010 ;; *************** function _reduceSeq *****************
  3011 ;; Defined at:
  3012 ;;		line 89 in file "usart.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;		None
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;		None
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  1    wreg      void 
  3019 ;; Registers used:
  3020 ;;		status,2, status,0
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3026 ;;      Params:         0       0       0       0       0       0       0
  3027 ;;      Locals:         0       0       0       0       0       0       0
  3028 ;;      Temps:          0       0       0       0       0       0       0
  3029 ;;      Totals:         0       0       0       0       0       0       0
  3030 ;;Total ram usage:        0 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:    4
  3033 ;; This function calls:
  3034 ;;		Nothing
  3035 ;; This function is called by:
  3036 ;;		_main
  3037 ;; This function uses a non-reentrant model
  3038 ;;
  3039                           
  3040                           	psect	text13
  3041  002544                     __ptext13:
  3042                           	callstack 0
  3043  002544                     _reduceSeq:
  3044                           	callstack 0
  3045  002544  FFFF               	dw	65535	; assembler added errata NOP
  3046  002546                     
  3047                           ;usart.c: 90:     dataCounter--;
  3048  002546  0661               	decf	_dataCounter^0,f,c
  3049  002548  0012               	return		;funcret
  3050  00254A  FFFF               	dw	65535	; errata NOP
  3051  00254C                     __end_of_reduceSeq:
  3052                           	callstack 0
  3053                           
  3054 ;; *************** function _readSeq *****************
  3055 ;; Defined at:
  3056 ;;		line 96 in file "usart.c"
  3057 ;; Parameters:    Size  Location     Type
  3058 ;;		None
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;		None
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  1    wreg      unsigned char 
  3063 ;; Registers used:
  3064 ;;		wreg, status,2
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3070 ;;      Params:         0       0       0       0       0       0       0
  3071 ;;      Locals:         0       0       0       0       0       0       0
  3072 ;;      Temps:          0       0       0       0       0       0       0
  3073 ;;      Totals:         0       0       0       0       0       0       0
  3074 ;;Total ram usage:        0 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    4
  3077 ;; This function calls:
  3078 ;;		Nothing
  3079 ;; This function is called by:
  3080 ;;		_main
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text14
  3085  00254C                     __ptext14:
  3086                           	callstack 0
  3087  00254C                     _readSeq:
  3088                           	callstack 0
  3089  00254C  FFFF               	dw	65535	; assembler added errata NOP
  3090  00254E                     
  3091                           ;usart.c: 97:     return dataCounter;
  3092  00254E  5061               	movf	_dataCounter^0,w,c
  3093  002550  0012               	return		;funcret
  3094  002552  FFFF               	dw	65535	; errata NOP
  3095  002554                     __end_of_readSeq:
  3096                           	callstack 0
  3097                           
  3098 ;; *************** function _newSequence *****************
  3099 ;; Defined at:
  3100 ;;		line 104 in file "usart.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;		None
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;		None
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  1    wreg      unsigned char 
  3107 ;; Registers used:
  3108 ;;		wreg, status,2
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3114 ;;      Params:         0       0       0       0       0       0       0
  3115 ;;      Locals:         0       0       0       0       0       0       0
  3116 ;;      Temps:          0       0       0       0       0       0       0
  3117 ;;      Totals:         0       0       0       0       0       0       0
  3118 ;;Total ram usage:        0 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    4
  3121 ;; This function calls:
  3122 ;;		Nothing
  3123 ;; This function is called by:
  3124 ;;		_main
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           	psect	text15
  3129  002554                     __ptext15:
  3130                           	callstack 0
  3131  002554                     _newSequence:
  3132                           	callstack 0
  3133  002554  FFFF               	dw	65535	; assembler added errata NOP
  3134  002556                     
  3135                           ;usart.c: 105:     return _newSequence;
  3136  002556  505F               	movf	__newSequence^0,w,c
  3137  002558  0012               	return		;funcret
  3138  00255A  FFFF               	dw	65535	; errata NOP
  3139  00255C                     __end_of_newSequence:
  3140                           	callstack 0
  3141                           
  3142 ;; *************** function _interruptInit *****************
  3143 ;; Defined at:
  3144 ;;		line 107 in file "main.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;		None
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;		None
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  1    wreg      void 
  3151 ;; Registers used:
  3152 ;;		None
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3158 ;;      Params:         0       0       0       0       0       0       0
  3159 ;;      Locals:         0       0       0       0       0       0       0
  3160 ;;      Temps:          0       0       0       0       0       0       0
  3161 ;;      Totals:         0       0       0       0       0       0       0
  3162 ;;Total ram usage:        0 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    4
  3165 ;; This function calls:
  3166 ;;		Nothing
  3167 ;; This function is called by:
  3168 ;;		_main
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text16
  3173  002364                     __ptext16:
  3174                           	callstack 0
  3175  002364                     _interruptInit:
  3176                           	callstack 0
  3177  002364  FFFF               	dw	65535	; assembler added errata NOP
  3178  002366                     
  3179                           ;main.c: 109:     if(!INTCONbits.GIE){
  3180  002366  BEF2               	btfsc	242,7,c	;volatile
  3181  002368  EFB8  F011         	goto	u3451
  3182  00236C  EFBB  F011         	goto	u3450
  3183  002370                     u3451:
  3184  002370  FFFF               	dw	65535	; assembler added errata NOP
  3185  002372  EFBD  F011         	goto	l330
  3186  002376                     u3450:
  3187  002376  FFFF               	dw	65535	; assembler added errata NOP
  3188  002378                     
  3189                           ;main.c: 110:         INTCONbits.GIE = 1;
  3190  002378  8EF2               	bsf	242,7,c	;volatile
  3191  00237A                     l330:
  3192  00237A  FFFF               	dw	65535	; assembler added errata NOP
  3193                           
  3194                           ;main.c: 112:     if(!INTCONbits.PEIE){
  3195  00237C  BCF2               	btfsc	242,6,c	;volatile
  3196  00237E  EFC3  F011         	goto	u3461
  3197  002382  EFC6  F011         	goto	u3460
  3198  002386                     u3461:
  3199  002386  FFFF               	dw	65535	; assembler added errata NOP
  3200  002388  EFC8  F011         	goto	l331
  3201  00238C                     u3460:
  3202  00238C  FFFF               	dw	65535	; assembler added errata NOP
  3203  00238E                     
  3204                           ;main.c: 113:         INTCONbits.PEIE = 1;
  3205  00238E  8CF2               	bsf	242,6,c	;volatile
  3206  002390                     l331:
  3207  002390  FFFF               	dw	65535	; assembler added errata NOP
  3208                           
  3209                           ;main.c: 117:     RCONbits.IPEN = 1;
  3210  002392  8ED0               	bsf	208,7,c	;volatile
  3211                           
  3212                           ;main.c: 118:     INTCONbits.T0IE = 1;
  3213  002394  8AF2               	bsf	242,5,c	;volatile
  3214                           
  3215                           ;main.c: 119:     PIE1bits.TMR2IE = 1;
  3216  002396  829D               	bsf	157,1,c	;volatile
  3217                           
  3218                           ;main.c: 120:     PIE1bits.RC1IE = 1;
  3219  002398  8A9D               	bsf	157,5,c	;volatile
  3220  00239A  0012               	return		;funcret
  3221  00239C  FFFF               	dw	65535	; errata NOP
  3222  00239E                     __end_of_interruptInit:
  3223                           	callstack 0
  3224                           
  3225 ;; *************** function _initPinMotors *****************
  3226 ;; Defined at:
  3227 ;;		line 42 in file "motors.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;		None
  3230 ;; Auto vars:     Size  Location     Type
  3231 ;;		None
  3232 ;; Return value:  Size  Location     Type
  3233 ;;                  1    wreg      void 
  3234 ;; Registers used:
  3235 ;;		wreg, status,2, status,0
  3236 ;; Tracked objects:
  3237 ;;		On entry : 0/0
  3238 ;;		On exit  : 0/0
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3241 ;;      Params:         0       0       0       0       0       0       0
  3242 ;;      Locals:         0       0       0       0       0       0       0
  3243 ;;      Temps:          0       0       0       0       0       0       0
  3244 ;;      Totals:         0       0       0       0       0       0       0
  3245 ;;Total ram usage:        0 bytes
  3246 ;; Hardware stack levels used:    1
  3247 ;; Hardware stack levels required when called:    4
  3248 ;; This function calls:
  3249 ;;		Nothing
  3250 ;; This function is called by:
  3251 ;;		_main
  3252 ;; This function uses a non-reentrant model
  3253 ;;
  3254                           
  3255                           	psect	text17
  3256  00239E                     __ptext17:
  3257                           	callstack 0
  3258  00239E                     _initPinMotors:
  3259                           	callstack 0
  3260  00239E  FFFF               	dw	65535	; assembler added errata NOP
  3261  0023A0                     
  3262                           ;motors.c: 44:     ADCON1bits.PCFG = 0x06;
  3263  0023A0  50C1               	movf	193,w,c	;volatile
  3264  0023A2  0BF0               	andlw	-16
  3265  0023A4  0906               	iorlw	6
  3266  0023A6  6EC1               	movwf	193,c	;volatile
  3267  0023A8                     
  3268                           ;motors.c: 45:     TRISA &= 0b11010001;
  3269  0023A8  0ED1               	movlw	209
  3270  0023AA  1692               	andwf	146,f,c	;volatile
  3271  0023AC                     
  3272                           ;motors.c: 47:     TRISB &= 0b00000010;
  3273  0023AC  0E02               	movlw	2
  3274  0023AE  1693               	andwf	147,f,c	;volatile
  3275  0023B0                     
  3276                           ;motors.c: 48:     TRISC &= 0b11000000;
  3277  0023B0  0EC0               	movlw	192
  3278  0023B2  1694               	andwf	148,f,c	;volatile
  3279  0023B4                     
  3280                           ;motors.c: 49:     TRISD &= 0b11000000;
  3281  0023B4  0EC0               	movlw	192
  3282  0023B6  1695               	andwf	149,f,c	;volatile
  3283  0023B8                     
  3284                           ;motors.c: 52:     TRISEbits.TRISE0 = 1;
  3285  0023B8  8096               	bsf	150,0,c	;volatile
  3286  0023BA                     
  3287                           ;motors.c: 53:     TRISEbits.TRISE1 = 1;
  3288  0023BA  8296               	bsf	150,1,c	;volatile
  3289  0023BC                     
  3290                           ;motors.c: 54:     TRISEbits.TRISE2 = 1;
  3291  0023BC  8496               	bsf	150,2,c	;volatile
  3292  0023BE                     
  3293                           ;motors.c: 57:     TRISDbits.TRISD7 = 1;
  3294  0023BE  8E95               	bsf	149,7,c	;volatile
  3295  0023C0  0012               	return		;funcret
  3296  0023C2  FFFF               	dw	65535	; errata NOP
  3297  0023C4                     __end_of_initPinMotors:
  3298                           	callstack 0
  3299                           
  3300 ;; *************** function _initADC *****************
  3301 ;; Defined at:
  3302 ;;		line 18 in file "adc.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;		None
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;		None
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      void 
  3309 ;; Registers used:
  3310 ;;		wreg, status,2
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3316 ;;      Params:         0       0       0       0       0       0       0
  3317 ;;      Locals:         0       0       0       0       0       0       0
  3318 ;;      Temps:          0       0       0       0       0       0       0
  3319 ;;      Totals:         0       0       0       0       0       0       0
  3320 ;;Total ram usage:        0 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:    4
  3323 ;; This function calls:
  3324 ;;		Nothing
  3325 ;; This function is called by:
  3326 ;;		_main
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           	psect	text18
  3331  0023C4                     __ptext18:
  3332                           	callstack 0
  3333  0023C4                     _initADC:
  3334                           	callstack 0
  3335  0023C4  FFFF               	dw	65535	; assembler added errata NOP
  3336  0023C6                     
  3337                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3338  0023C6  50C2               	movf	194,w,c	;volatile
  3339  0023C8  0B3F               	andlw	-193
  3340  0023CA  0940               	iorlw	64
  3341  0023CC  6EC2               	movwf	194,c	;volatile
  3342  0023CE                     
  3343                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3344  0023CE  8CC1               	bsf	193,6,c	;volatile
  3345                           
  3346                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3347  0023D0  0EC7               	movlw	-57
  3348  0023D2  16C2               	andwf	194,f,c	;volatile
  3349  0023D4                     
  3350                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3351  0023D4  94C2               	bcf	194,2,c	;volatile
  3352  0023D6                     
  3353                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3354  0023D6  90C2               	bcf	194,0,c	;volatile
  3355  0023D8                     
  3356                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3357  0023D8  9EC1               	bcf	193,7,c	;volatile
  3358                           
  3359                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3360  0023DA  50C1               	movf	193,w,c	;volatile
  3361  0023DC  0BF0               	andlw	-16
  3362  0023DE  090E               	iorlw	14
  3363  0023E0  6EC1               	movwf	193,c	;volatile
  3364  0023E2                     
  3365                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3366  0023E2  8C9D               	bsf	157,6,c	;volatile
  3367  0023E4                     
  3368                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3369  0023E4  8C9F               	bsf	159,6,c	;volatile
  3370  0023E6  0012               	return		;funcret
  3371  0023E8  FFFF               	dw	65535	; errata NOP
  3372  0023EA                     __end_of_initADC:
  3373                           	callstack 0
  3374                           
  3375 ;; *************** function _getNewSequence *****************
  3376 ;; Defined at:
  3377 ;;		line 213 in file "usart.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;		None
  3380 ;; Auto vars:     Size  Location     Type
  3381 ;;		None
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  2   17[COMRAM] PTR struct .
  3384 ;; Registers used:
  3385 ;;		wreg, status,2, status,0
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : 0/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3391 ;;      Params:         2       0       0       0       0       0       0
  3392 ;;      Locals:         0       0       0       0       0       0       0
  3393 ;;      Temps:          0       0       0       0       0       0       0
  3394 ;;      Totals:         2       0       0       0       0       0       0
  3395 ;;Total ram usage:        2 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; Hardware stack levels required when called:    4
  3398 ;; This function calls:
  3399 ;;		Nothing
  3400 ;; This function is called by:
  3401 ;;		_main
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text19
  3406  00248A                     __ptext19:
  3407                           	callstack 0
  3408  00248A                     _getNewSequence:
  3409                           	callstack 0
  3410  00248A  FFFF               	dw	65535	; assembler added errata NOP
  3411  00248C                     
  3412                           ;usart.c: 214:     return(&newSequenceData);
  3413  00248C  0EEC               	movlw	low _newSequenceData
  3414  00248E  6E12               	movwf	?_getNewSequence^0,c
  3415  002490  0E00               	movlw	high _newSequenceData
  3416  002492  6E13               	movwf	(?_getNewSequence+1)^0,c
  3417  002494  0012               	return		;funcret
  3418  002496  FFFF               	dw	65535	; errata NOP
  3419  002498                     __end_of_getNewSequence:
  3420                           	callstack 0
  3421                           
  3422 ;; *************** function _fatalError *****************
  3423 ;; Defined at:
  3424 ;;		line 100 in file "usart.c"
  3425 ;; Parameters:    Size  Location     Type
  3426 ;;		None
  3427 ;; Auto vars:     Size  Location     Type
  3428 ;;		None
  3429 ;; Return value:  Size  Location     Type
  3430 ;;                  1    wreg      unsigned char 
  3431 ;; Registers used:
  3432 ;;		wreg, status,2
  3433 ;; Tracked objects:
  3434 ;;		On entry : 0/0
  3435 ;;		On exit  : 0/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3438 ;;      Params:         0       0       0       0       0       0       0
  3439 ;;      Locals:         0       0       0       0       0       0       0
  3440 ;;      Temps:          0       0       0       0       0       0       0
  3441 ;;      Totals:         0       0       0       0       0       0       0
  3442 ;;Total ram usage:        0 bytes
  3443 ;; Hardware stack levels used:    1
  3444 ;; Hardware stack levels required when called:    4
  3445 ;; This function calls:
  3446 ;;		Nothing
  3447 ;; This function is called by:
  3448 ;;		_main
  3449 ;; This function uses a non-reentrant model
  3450 ;;
  3451                           
  3452                           	psect	text20
  3453  00255C                     __ptext20:
  3454                           	callstack 0
  3455  00255C                     _fatalError:
  3456                           	callstack 0
  3457  00255C  FFFF               	dw	65535	; assembler added errata NOP
  3458  00255E                     
  3459                           ;usart.c: 101:     return _fatalError;
  3460  00255E  5060               	movf	__fatalError^0,w,c
  3461  002560  0012               	return		;funcret
  3462  002562  FFFF               	dw	65535	; errata NOP
  3463  002564                     __end_of_fatalError:
  3464                           	callstack 0
  3465                           
  3466 ;; *************** function _executeData *****************
  3467 ;; Defined at:
  3468 ;;		line 130 in file "main.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;		None
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  data            2    9[BANK0 ] PTR struct .
  3473 ;;		 -> dataSequence(20), 
  3474 ;;  errCode         1    8[BANK0 ] unsigned char 
  3475 ;; Return value:  Size  Location     Type
  3476 ;;                  1    wreg      unsigned char 
  3477 ;; Registers used:
  3478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3479 ;; Tracked objects:
  3480 ;;		On entry : 0/0
  3481 ;;		On exit  : 0/0
  3482 ;;		Unchanged: 0/0
  3483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3484 ;;      Params:         0       0       0       0       0       0       0
  3485 ;;      Locals:         0       3       0       0       0       0       0
  3486 ;;      Temps:          2       0       0       0       0       0       0
  3487 ;;      Totals:         2       3       0       0       0       0       0
  3488 ;;Total ram usage:        5 bytes
  3489 ;; Hardware stack levels used:    1
  3490 ;; Hardware stack levels required when called:    6
  3491 ;; This function calls:
  3492 ;;		_getData
  3493 ;;		_liftArm
  3494 ;;		_moveToPoint
  3495 ;;		_pickObject
  3496 ;;		_releaseObj
  3497 ;;		_rotateObj
  3498 ;;		_touchObject
  3499 ;;		_touchTherm
  3500 ;; This function is called by:
  3501 ;;		_main
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           	psect	text21
  3506  000D04                     __ptext21:
  3507                           	callstack 0
  3508  000D04                     _executeData:
  3509                           	callstack 0
  3510  000D04  FFFF               	dw	65535	; assembler added errata NOP
  3511  000D06                     
  3512                           ;main.c: 131:     t_sequence *data = getData();
  3513  000D06  EC4C  F012         	call	_getData	;wreg free
  3514  000D0A  C012  F0FD         	movff	?_getData,executeData@data
  3515  000D0E  C013  F0FE         	movff	?_getData+1,executeData@data+1
  3516  000D12                     
  3517                           ;main.c: 137:     switch(data->feederLine){
  3518  000D12  EF35  F007         	goto	l4148
  3519  000D16                     l4120:
  3520  000D16  FFFF               	dw	65535	; assembler added errata NOP
  3521                           
  3522                           ;main.c: 140:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3523  000D18  C04E  F016         	movff	_posVector,moveToPoint@x1
  3524  000D1C  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3525  000D1E  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3526  000D22  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3527  000D24  0E0D               	movlw	low _feeder1Pos
  3528  000D26  6EF6               	movwf	tblptrl,c
  3529  000D28                     	if	1	;There is more than 1 active tblptr byte
  3530  000D28  0E06               	movlw	high _feeder1Pos
  3531  000D2A  6EF7               	movwf	tblptrh,c
  3532  000D2C                     	endif
  3533  000D2C                     	if	0	;There are less than 3 active tblptr bytes
  3534  000D2C                     	endif
  3535  000D2C  0008               	tblrd		*
  3536  000D2E  FFFF               	dw	65535	; errata NOP
  3537  000D30  50F5               	movf	tablat,w,c
  3538  000D32  6E1A               	movwf	moveToPoint@x2^0,c
  3539  000D34  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3540  000D36  0E0E               	movlw	low (_feeder1Pos+1)
  3541  000D38  6EF6               	movwf	tblptrl,c
  3542  000D3A  0E06               	movlw	high (_feeder1Pos+1)
  3543  000D3C  6EF7               	movwf	tblptrh,c
  3544  000D3E                     	if	0	;tblptru may be non-zero
  3545  000D3E                     	endif
  3546  000D3E                     	if	0	;tblptru may be non-zero
  3547  000D3E                     	endif
  3548  000D3E  0008               	tblrd		*
  3549  000D40  FFFF               	dw	65535	; errata NOP
  3550  000D42  50F5               	movf	tablat,w,c
  3551  000D44  6E1C               	movwf	moveToPoint@y2^0,c
  3552  000D46  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3553  000D48  EC21  F005         	call	_moveToPoint	;wreg free
  3554  000D4C  0100               	movlb	0	; () banked
  3555  000D4E  6FFC               	movwf	executeData@errCode& (0+255),b
  3556  000D50                     
  3557                           ; BSR set to: 0
  3558                           ;main.c: 142:             posVector[0] = feeder1Pos[0];
  3559  000D50  0E0D               	movlw	low _feeder1Pos
  3560  000D52  6EF6               	movwf	tblptrl,c
  3561  000D54                     	if	1	;There is more than 1 active tblptr byte
  3562  000D54  0E06               	movlw	high _feeder1Pos
  3563  000D56  6EF7               	movwf	tblptrh,c
  3564  000D58                     	endif
  3565  000D58                     	if	0	;There are less than 3 active tblptr bytes
  3566  000D58                     	endif
  3567  000D58  0008               	tblrd		*
  3568  000D5A  FFFF               	dw	65535	; errata NOP
  3569  000D5C  CFF5 F04E          	movff	tablat,_posVector
  3570  000D60                     
  3571                           ; BSR set to: 0
  3572                           ;main.c: 143:             posVector[1] = feeder1Pos[1];
  3573  000D60  0E0E               	movlw	low (_feeder1Pos+1)
  3574  000D62  6EF6               	movwf	tblptrl,c
  3575  000D64  0E06               	movlw	high (_feeder1Pos+1)
  3576  000D66  6EF7               	movwf	tblptrh,c
  3577  000D68                     	if	0	;tblptru may be non-zero
  3578  000D68                     	endif
  3579  000D68                     	if	0	;tblptru may be non-zero
  3580  000D68                     	endif
  3581  000D68  0008               	tblrd		*
  3582  000D6A  FFFF               	dw	65535	; errata NOP
  3583  000D6C  CFF5 F04F          	movff	tablat,_posVector+1
  3584                           
  3585                           ;main.c: 144:             break;
  3586  000D70  EF58  F007         	goto	l4150
  3587  000D74                     l4126:
  3588  000D74  FFFF               	dw	65535	; assembler added errata NOP
  3589                           
  3590                           ;main.c: 146:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3591  000D76  C04E  F016         	movff	_posVector,moveToPoint@x1
  3592  000D7A  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3593  000D7C  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3594  000D80  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3595  000D82  0E0B               	movlw	low _feeder2Pos
  3596  000D84  6EF6               	movwf	tblptrl,c
  3597  000D86                     	if	1	;There is more than 1 active tblptr byte
  3598  000D86  0E06               	movlw	high _feeder2Pos
  3599  000D88  6EF7               	movwf	tblptrh,c
  3600  000D8A                     	endif
  3601  000D8A                     	if	0	;There are less than 3 active tblptr bytes
  3602  000D8A                     	endif
  3603  000D8A  0008               	tblrd		*
  3604  000D8C  FFFF               	dw	65535	; errata NOP
  3605  000D8E  50F5               	movf	tablat,w,c
  3606  000D90  6E1A               	movwf	moveToPoint@x2^0,c
  3607  000D92  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3608  000D94  0E0C               	movlw	low (_feeder2Pos+1)
  3609  000D96  6EF6               	movwf	tblptrl,c
  3610  000D98  0E06               	movlw	high (_feeder2Pos+1)
  3611  000D9A  6EF7               	movwf	tblptrh,c
  3612  000D9C                     	if	0	;tblptru may be non-zero
  3613  000D9C                     	endif
  3614  000D9C                     	if	0	;tblptru may be non-zero
  3615  000D9C                     	endif
  3616  000D9C  0008               	tblrd		*
  3617  000D9E  FFFF               	dw	65535	; errata NOP
  3618  000DA0  50F5               	movf	tablat,w,c
  3619  000DA2  6E1C               	movwf	moveToPoint@y2^0,c
  3620  000DA4  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3621  000DA6  EC21  F005         	call	_moveToPoint	;wreg free
  3622  000DAA  0100               	movlb	0	; () banked
  3623  000DAC  6FFC               	movwf	executeData@errCode& (0+255),b
  3624  000DAE                     
  3625                           ; BSR set to: 0
  3626                           ;main.c: 147:             posVector[0] = feeder2Pos[0];
  3627  000DAE  0E0B               	movlw	low _feeder2Pos
  3628  000DB0  6EF6               	movwf	tblptrl,c
  3629  000DB2                     	if	1	;There is more than 1 active tblptr byte
  3630  000DB2  0E06               	movlw	high _feeder2Pos
  3631  000DB4  6EF7               	movwf	tblptrh,c
  3632  000DB6                     	endif
  3633  000DB6                     	if	0	;There are less than 3 active tblptr bytes
  3634  000DB6                     	endif
  3635  000DB6  0008               	tblrd		*
  3636  000DB8  FFFF               	dw	65535	; errata NOP
  3637  000DBA  CFF5 F04E          	movff	tablat,_posVector
  3638  000DBE                     
  3639                           ; BSR set to: 0
  3640                           ;main.c: 148:             posVector[1] = feeder2Pos[1];
  3641  000DBE  0E0C               	movlw	low (_feeder2Pos+1)
  3642  000DC0  6EF6               	movwf	tblptrl,c
  3643  000DC2  0E06               	movlw	high (_feeder2Pos+1)
  3644  000DC4  6EF7               	movwf	tblptrh,c
  3645  000DC6                     	if	0	;tblptru may be non-zero
  3646  000DC6                     	endif
  3647  000DC6                     	if	0	;tblptru may be non-zero
  3648  000DC6                     	endif
  3649  000DC6  0008               	tblrd		*
  3650  000DC8  FFFF               	dw	65535	; errata NOP
  3651  000DCA  CFF5 F04F          	movff	tablat,_posVector+1
  3652                           
  3653                           ;main.c: 149:             break;
  3654  000DCE  EF58  F007         	goto	l4150
  3655  000DD2                     l4132:
  3656  000DD2  FFFF               	dw	65535	; assembler added errata NOP
  3657                           
  3658                           ;main.c: 151:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3659  000DD4  C04E  F016         	movff	_posVector,moveToPoint@x1
  3660  000DD8  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3661  000DDA  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3662  000DDE  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3663  000DE0  0E09               	movlw	low _feeder3Pos
  3664  000DE2  6EF6               	movwf	tblptrl,c
  3665  000DE4                     	if	1	;There is more than 1 active tblptr byte
  3666  000DE4  0E06               	movlw	high _feeder3Pos
  3667  000DE6  6EF7               	movwf	tblptrh,c
  3668  000DE8                     	endif
  3669  000DE8                     	if	0	;There are less than 3 active tblptr bytes
  3670  000DE8                     	endif
  3671  000DE8  0008               	tblrd		*
  3672  000DEA  FFFF               	dw	65535	; errata NOP
  3673  000DEC  50F5               	movf	tablat,w,c
  3674  000DEE  6E1A               	movwf	moveToPoint@x2^0,c
  3675  000DF0  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3676  000DF2  0E0A               	movlw	low (_feeder3Pos+1)
  3677  000DF4  6EF6               	movwf	tblptrl,c
  3678  000DF6  0E06               	movlw	high (_feeder3Pos+1)
  3679  000DF8  6EF7               	movwf	tblptrh,c
  3680  000DFA                     	if	0	;tblptru may be non-zero
  3681  000DFA                     	endif
  3682  000DFA                     	if	0	;tblptru may be non-zero
  3683  000DFA                     	endif
  3684  000DFA  0008               	tblrd		*
  3685  000DFC  FFFF               	dw	65535	; errata NOP
  3686  000DFE  50F5               	movf	tablat,w,c
  3687  000E00  6E1C               	movwf	moveToPoint@y2^0,c
  3688  000E02  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3689  000E04  EC21  F005         	call	_moveToPoint	;wreg free
  3690  000E08  0100               	movlb	0	; () banked
  3691  000E0A  6FFC               	movwf	executeData@errCode& (0+255),b
  3692  000E0C                     
  3693                           ; BSR set to: 0
  3694                           ;main.c: 152:             posVector[0] = feeder3Pos[0];
  3695  000E0C  0E09               	movlw	low _feeder3Pos
  3696  000E0E  6EF6               	movwf	tblptrl,c
  3697  000E10                     	if	1	;There is more than 1 active tblptr byte
  3698  000E10  0E06               	movlw	high _feeder3Pos
  3699  000E12  6EF7               	movwf	tblptrh,c
  3700  000E14                     	endif
  3701  000E14                     	if	0	;There are less than 3 active tblptr bytes
  3702  000E14                     	endif
  3703  000E14  0008               	tblrd		*
  3704  000E16  FFFF               	dw	65535	; errata NOP
  3705  000E18  CFF5 F04E          	movff	tablat,_posVector
  3706  000E1C                     
  3707                           ; BSR set to: 0
  3708                           ;main.c: 153:             posVector[1] = feeder3Pos[1];
  3709  000E1C  0E0A               	movlw	low (_feeder3Pos+1)
  3710  000E1E  6EF6               	movwf	tblptrl,c
  3711  000E20  0E06               	movlw	high (_feeder3Pos+1)
  3712  000E22  6EF7               	movwf	tblptrh,c
  3713  000E24                     	if	0	;tblptru may be non-zero
  3714  000E24                     	endif
  3715  000E24                     	if	0	;tblptru may be non-zero
  3716  000E24                     	endif
  3717  000E24  0008               	tblrd		*
  3718  000E26  FFFF               	dw	65535	; errata NOP
  3719  000E28  CFF5 F04F          	movff	tablat,_posVector+1
  3720                           
  3721                           ;main.c: 154:             break;
  3722  000E2C  EF58  F007         	goto	l4150
  3723  000E30                     l4138:
  3724  000E30  FFFF               	dw	65535	; assembler added errata NOP
  3725                           
  3726                           ;main.c: 158:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3727  000E32  C04E  F016         	movff	_posVector,moveToPoint@x1
  3728  000E36  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3729  000E38  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3730  000E3C  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3731  000E3E  C057  F01A         	movff	_newFeeder,moveToPoint@x2
  3732  000E42  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3733  000E44  C058  F01C         	movff	_newFeeder+1,moveToPoint@y2
  3734  000E48  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3735  000E4A  EC21  F005         	call	_moveToPoint	;wreg free
  3736  000E4E  0100               	movlb	0	; () banked
  3737  000E50  6FFC               	movwf	executeData@errCode& (0+255),b
  3738  000E52                     
  3739                           ; BSR set to: 0
  3740                           ;main.c: 159:             posVector[0] = newFeeder[0];
  3741  000E52  C057  F04E         	movff	_newFeeder,_posVector
  3742  000E56                     
  3743                           ; BSR set to: 0
  3744                           ;main.c: 160:             posVector[1] = newFeeder[1];
  3745  000E56  C058  F04F         	movff	_newFeeder+1,_posVector+1
  3746                           
  3747                           ;main.c: 161:             break;
  3748  000E5A  EF58  F007         	goto	l4150
  3749  000E5E                     l4144:
  3750  000E5E  FFFF               	dw	65535	; assembler added errata NOP
  3751                           
  3752                           ;main.c: 165:             errCode = 1;
  3753  000E60  0E01               	movlw	1
  3754  000E62  0100               	movlb	0	; () banked
  3755  000E64  6FFC               	movwf	executeData@errCode& (0+255),b
  3756                           
  3757                           ;main.c: 166:             break;
  3758  000E66  EF58  F007         	goto	l4150
  3759  000E6A                     l4148:
  3760  000E6A  FFFF               	dw	65535	; assembler added errata NOP
  3761  000E6C  C0FD  FFD9         	movff	executeData@data,fsr2l
  3762  000E70  C0FE  FFDA         	movff	executeData@data+1,fsr2h
  3763  000E74  50DF               	movf	indf2,w,c
  3764  000E76  6E43               	movwf	??_executeData^0,c
  3765  000E78  6A44               	clrf	(??_executeData+1)^0,c
  3766                           
  3767                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3768                           ; Switch size 1, requested type "simple"
  3769                           ; Number of cases is 1, Range of values is 0 to 0
  3770                           ; switch strategies available:
  3771                           ; Name         Instructions Cycles
  3772                           ; simple_byte            4     3 (average)
  3773                           ;	Chosen strategy is simple_byte
  3774  000E7A  5044               	movf	(??_executeData+1)^0,w,c
  3775  000E7C  0A00               	xorlw	0	; case 0
  3776  000E7E  B4D8               	btfsc	status,2,c
  3777  000E80  EF44  F007         	goto	l4498
  3778  000E84  EF2F  F007         	goto	l4144
  3779  000E88                     l4498:
  3780  000E88  FFFF               	dw	65535	; assembler added errata NOP
  3781                           
  3782                           ; Switch size 1, requested type "simple"
  3783                           ; Number of cases is 4, Range of values is 0 to 255
  3784                           ; switch strategies available:
  3785                           ; Name         Instructions Cycles
  3786                           ; simple_byte           13     7 (average)
  3787                           ;	Chosen strategy is simple_byte
  3788  000E8A  5043               	movf	??_executeData^0,w,c
  3789  000E8C  0A00               	xorlw	0	; case 0
  3790  000E8E  B4D8               	btfsc	status,2,c
  3791  000E90  EF8B  F006         	goto	l4120
  3792  000E94  0A01               	xorlw	1	; case 1
  3793  000E96  B4D8               	btfsc	status,2,c
  3794  000E98  EFBA  F006         	goto	l4126
  3795  000E9C  0A03               	xorlw	3	; case 2
  3796  000E9E  B4D8               	btfsc	status,2,c
  3797  000EA0  EFE9  F006         	goto	l4132
  3798  000EA4  0AFD               	xorlw	253	; case 255
  3799  000EA6  B4D8               	btfsc	status,2,c
  3800  000EA8  EF18  F007         	goto	l4138
  3801  000EAC  EF2F  F007         	goto	l4144
  3802  000EB0                     l4150:
  3803  000EB0  FFFF               	dw	65535	; assembler added errata NOP
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;main.c: 170:     if(!errCode){
  3807  000EB2  51FC               	movf	executeData@errCode& (0+255),w,b
  3808  000EB4  A4D8               	btfss	status,2,c
  3809  000EB6  EF5F  F007         	goto	u3481
  3810  000EBA  EF62  F007         	goto	u3480
  3811  000EBE                     u3481:
  3812  000EBE  FFFF               	dw	65535	; assembler added errata NOP
  3813  000EC0  EFC5  F007         	goto	l4172
  3814  000EC4                     u3480:
  3815  000EC4  FFFF               	dw	65535	; assembler added errata NOP
  3816  000EC6                     
  3817                           ; BSR set to: 0
  3818                           ;main.c: 173:         errCode = touchObject();
  3819  000EC6  EC08  F00E         	call	_touchObject	;wreg free
  3820  000ECA  0100               	movlb	0	; () banked
  3821  000ECC  6FFC               	movwf	executeData@errCode& (0+255),b
  3822                           
  3823                           ;main.c: 175:         pickObject();
  3824  000ECE  EC07  F012         	call	_pickObject	;wreg free
  3825                           
  3826                           ;main.c: 178:         errCode = liftArm();
  3827  000ED2  ECBF  F00F         	call	_liftArm	;wreg free
  3828  000ED6  0100               	movlb	0	; () banked
  3829  000ED8  6FFC               	movwf	executeData@errCode& (0+255),b
  3830  000EDA                     
  3831                           ; BSR set to: 0
  3832  000EDA  C04E  F016         	movff	_posVector,moveToPoint@x1
  3833  000EDE  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3834  000EE0  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3835  000EE4  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3836  000EE6  EE20 F001          	lfsr	2,1
  3837  000EEA  51FD               	movf	executeData@data& (0+255),w,b
  3838  000EEC  26D9               	addwf	fsr2l,f,c
  3839  000EEE  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3840  000EF0  22DA               	addwfc	fsr2h,f,c
  3841  000EF2  50DF               	movf	indf2,w,c
  3842  000EF4  6E43               	movwf	??_executeData^0,c
  3843  000EF6  5043               	movf	??_executeData^0,w,c
  3844  000EF8  6E1A               	movwf	moveToPoint@x2^0,c
  3845  000EFA  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3846  000EFC  EE20 F002          	lfsr	2,2
  3847  000F00  51FD               	movf	executeData@data& (0+255),w,b
  3848  000F02  26D9               	addwf	fsr2l,f,c
  3849  000F04  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3850  000F06  22DA               	addwfc	fsr2h,f,c
  3851  000F08  50DF               	movf	indf2,w,c
  3852  000F0A  6E44               	movwf	(??_executeData+1)^0,c
  3853  000F0C  5044               	movf	(??_executeData+1)^0,w,c
  3854  000F0E  6E1C               	movwf	moveToPoint@y2^0,c
  3855  000F10  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3856  000F12  EC21  F005         	call	_moveToPoint	;wreg free
  3857  000F16                     
  3858                           ;main.c: 182:         posVector[0] = data->posX;
  3859  000F16  0100               	movlb	0	; () banked
  3860  000F18  EE20 F001          	lfsr	2,1
  3861  000F1C  51FD               	movf	executeData@data& (0+255),w,b
  3862  000F1E  26D9               	addwf	fsr2l,f,c
  3863  000F20  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3864  000F22  22DA               	addwfc	fsr2h,f,c
  3865  000F24  50DF               	movf	indf2,w,c
  3866  000F26  6E4E               	movwf	_posVector^0,c
  3867  000F28                     
  3868                           ; BSR set to: 0
  3869                           ;main.c: 183:         posVector[1] = data->posY;
  3870  000F28  EE20 F002          	lfsr	2,2
  3871  000F2C  51FD               	movf	executeData@data& (0+255),w,b
  3872  000F2E  26D9               	addwf	fsr2l,f,c
  3873  000F30  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3874  000F32  22DA               	addwfc	fsr2h,f,c
  3875  000F34  50DF               	movf	indf2,w,c
  3876  000F36  6E4F               	movwf	(_posVector+1)^0,c
  3877  000F38                     
  3878                           ; BSR set to: 0
  3879                           ;main.c: 186:         rotAngle = data->rotation - rotAngle;
  3880  000F38  EE20 F003          	lfsr	2,3
  3881  000F3C  51FD               	movf	executeData@data& (0+255),w,b
  3882  000F3E  26D9               	addwf	fsr2l,f,c
  3883  000F40  51FE               	movf	(executeData@data+1)& (0+255),w,b
  3884  000F42  22DA               	addwfc	fsr2h,f,c
  3885  000F44  50DF               	movf	indf2,w,c
  3886  000F46  6E43               	movwf	??_executeData^0,c
  3887  000F48  5059               	movf	_rotAngle^0,w,c
  3888  000F4A  5C43               	subwf	??_executeData^0,w,c
  3889  000F4C  6E59               	movwf	_rotAngle^0,c
  3890  000F4E  505A               	movf	(_rotAngle+1)^0,w,c
  3891  000F50  A0D8               	btfss	status,0,c
  3892  000F52  285A               	incf	(_rotAngle+1)^0,w,c
  3893  000F54  6A5A               	clrf	(_rotAngle+1)^0,c
  3894  000F56  5E5A               	subwf	(_rotAngle+1)^0,f,c
  3895                           
  3896                           ;main.c: 188:         if(rotAngle < 0){
  3897  000F58  BE5A               	btfsc	(_rotAngle+1)^0,7,c
  3898  000F5A  EFB4  F007         	goto	u3490
  3899  000F5E  EFB1  F007         	goto	u3491
  3900  000F62                     u3491:
  3901  000F62  FFFF               	dw	65535	; assembler added errata NOP
  3902  000F64  EFB9  F007         	goto	l4164
  3903  000F68                     u3490:
  3904  000F68  FFFF               	dw	65535	; assembler added errata NOP
  3905  000F6A                     
  3906                           ; BSR set to: 0
  3907                           ;main.c: 189:             rotAngle += 360;
  3908  000F6A  0E68               	movlw	104
  3909  000F6C  2659               	addwf	_rotAngle^0,f,c
  3910  000F6E  0E01               	movlw	1
  3911  000F70  225A               	addwfc	(_rotAngle+1)^0,f,c
  3912  000F72                     l4164:
  3913  000F72  FFFF               	dw	65535	; assembler added errata NOP
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;main.c: 191:         rotateObj(rotAngle);
  3917  000F74  5059               	movf	_rotAngle^0,w,c
  3918  000F76  ECEC  F00E         	call	_rotateObj
  3919  000F7A  EC8F  F00D         	call	_touchTherm	;wreg free
  3920  000F7E                     
  3921                           ;main.c: 196:         releaseObj();
  3922  000F7E  ECF5  F011         	call	_releaseObj	;wreg free
  3923  000F82                     
  3924                           ;main.c: 199:         errCode = liftArm();
  3925  000F82  ECBF  F00F         	call	_liftArm	;wreg free
  3926  000F86  0100               	movlb	0	; () banked
  3927  000F88  6FFC               	movwf	executeData@errCode& (0+255),b
  3928  000F8A                     l4172:
  3929  000F8A  FFFF               	dw	65535	; assembler added errata NOP
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;main.c: 202:     return(errCode);
  3933  000F8C  51FC               	movf	executeData@errCode& (0+255),w,b
  3934  000F8E                     
  3935                           ; BSR set to: 0
  3936  000F8E  0012               	return		;funcret
  3937  000F90  FFFF               	dw	65535	; errata NOP
  3938  000F92                     __end_of_executeData:
  3939                           	callstack 0
  3940                           
  3941 ;; *************** function _touchTherm *****************
  3942 ;; Defined at:
  3943 ;;		line 455 in file "motors.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;		None
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;		None
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  1    wreg      unsigned char 
  3950 ;; Registers used:
  3951 ;;		wreg, status,2, status,0, cstack
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3957 ;;      Params:         0       0       0       0       0       0       0
  3958 ;;      Locals:         0       0       0       0       0       0       0
  3959 ;;      Temps:          0       0       0       0       0       0       0
  3960 ;;      Totals:         0       0       0       0       0       0       0
  3961 ;;Total ram usage:        0 bytes
  3962 ;; Hardware stack levels used:    1
  3963 ;; Hardware stack levels required when called:    5
  3964 ;; This function calls:
  3965 ;;		_resetStep
  3966 ;;		_resetTherm
  3967 ;;		_returnTherm
  3968 ;;		_setDirection
  3969 ;;		_startADC
  3970 ;;		_stepMade
  3971 ;;		_stopADC
  3972 ;; This function is called by:
  3973 ;;		_executeData
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977                           	psect	text22
  3978  001B1E                     __ptext22:
  3979                           	callstack 0
  3980  001B1E                     _touchTherm:
  3981                           	callstack 0
  3982  001B1E  FFFF               	dw	65535	; assembler added errata NOP
  3983  001B20                     
  3984                           ;motors.c: 458:     setDirection(1, 2);
  3985  001B20  0E02               	movlw	2
  3986  001B22  6E12               	movwf	setDirection@motor^0,c
  3987  001B24  0E01               	movlw	1
  3988  001B26  ECCE  F010         	call	_setDirection
  3989  001B2A                     
  3990                           ;motors.c: 460:     T2CONbits.TMR2ON = 1;
  3991  001B2A  84CA               	bsf	202,2,c	;volatile
  3992  001B2C                     
  3993                           ;motors.c: 462:     tm0Error = 0;
  3994  001B2C  0E00               	movlw	0
  3995  001B2E  6E5C               	movwf	(_tm0Error+1)^0,c
  3996  001B30  0E00               	movlw	0
  3997  001B32  6E5B               	movwf	_tm0Error^0,c
  3998  001B34                     
  3999                           ;motors.c: 463:     tm0Limit = 200;
  4000  001B34  0EC8               	movlw	200
  4001  001B36  6E68               	movwf	_tm0Limit^0,c
  4002  001B38                     
  4003                           ;motors.c: 464:     T0CONbits.TMR0ON = 1;
  4004  001B38  8ED5               	bsf	213,7,c	;volatile
  4005  001B3A                     
  4006                           ;motors.c: 467:     startADC();
  4007  001B3A  EC84  F012         	call	_startADC	;wreg free
  4008                           
  4009                           ;motors.c: 470:     while(!returnTherm() || PORTDbits.RD7){
  4010  001B3E  EFD2  F00D         	goto	l3858
  4011  001B42                     l3848:
  4012  001B42  FFFF               	dw	65535	; assembler added errata NOP
  4013                           
  4014                           ;motors.c: 473:         if(tm0Error){
  4015  001B44  505B               	movf	_tm0Error^0,w,c
  4016  001B46  105C               	iorwf	(_tm0Error+1)^0,w,c
  4017  001B48  B4D8               	btfsc	status,2,c
  4018  001B4A  EFA9  F00D         	goto	u3191
  4019  001B4E  EFAC  F00D         	goto	u3190
  4020  001B52                     u3191:
  4021  001B52  FFFF               	dw	65535	; assembler added errata NOP
  4022  001B54  EFB4  F00D         	goto	l188
  4023  001B58                     u3190:
  4024  001B58  FFFF               	dw	65535	; assembler added errata NOP
  4025  001B5A                     
  4026                           ;motors.c: 475:             LATCbits.LATC2 = 0;
  4027  001B5A  948B               	bcf	139,2,c	;volatile
  4028  001B5C                     
  4029                           ;motors.c: 476:             tm0Error = 6;
  4030  001B5C  0E00               	movlw	0
  4031  001B5E  6E5C               	movwf	(_tm0Error+1)^0,c
  4032  001B60  0E06               	movlw	6
  4033  001B62  6E5B               	movwf	_tm0Error^0,c
  4034                           
  4035                           ;motors.c: 477:             break;
  4036  001B64  EFE8  F00D         	goto	l3862
  4037  001B68                     l188:
  4038  001B68  FFFF               	dw	65535	; assembler added errata NOP
  4039                           
  4040                           ;motors.c: 481:         LATCbits.LATC2 = 1;
  4041  001B6A  848B               	bsf	139,2,c	;volatile
  4042  001B6C                     l3854:
  4043  001B6C  FFFF               	dw	65535	; assembler added errata NOP
  4044  001B6E  EC32  F012         	call	_stepMade	;wreg free
  4045  001B72  5012               	movf	?_stepMade^0,w,c
  4046  001B74  1013               	iorwf	(?_stepMade+1)^0,w,c
  4047  001B76  B4D8               	btfsc	status,2,c
  4048  001B78  EFC0  F00D         	goto	u3201
  4049  001B7C  EFC3  F00D         	goto	u3200
  4050  001B80                     u3201:
  4051  001B80  FFFF               	dw	65535	; assembler added errata NOP
  4052  001B82  EFB6  F00D         	goto	l3854
  4053  001B86                     u3200:
  4054  001B86  FFFF               	dw	65535	; assembler added errata NOP
  4055  001B88                     
  4056                           ;motors.c: 487:         LATCbits.LATC2 = 0;
  4057  001B88  948B               	bcf	139,2,c	;volatile
  4058  001B8A                     l3856:
  4059  001B8A  FFFF               	dw	65535	; assembler added errata NOP
  4060  001B8C  EC32  F012         	call	_stepMade	;wreg free
  4061  001B90  5012               	movf	?_stepMade^0,w,c
  4062  001B92  1013               	iorwf	(?_stepMade+1)^0,w,c
  4063  001B94  B4D8               	btfsc	status,2,c
  4064  001B96  EFCF  F00D         	goto	u3211
  4065  001B9A  EFD2  F00D         	goto	u3210
  4066  001B9E                     u3211:
  4067  001B9E  FFFF               	dw	65535	; assembler added errata NOP
  4068  001BA0  EFC5  F00D         	goto	l3856
  4069  001BA4                     u3210:
  4070  001BA4                     l3858:
  4071  001BA4  FFFF               	dw	65535	; assembler added errata NOP
  4072                           
  4073                           ;motors.c: 470:     while(!returnTherm() || PORTDbits.RD7){
  4074  001BA6  EC68  F012         	call	_returnTherm	;wreg free
  4075  001BAA  5012               	movf	?_returnTherm^0,w,c
  4076  001BAC  1013               	iorwf	(?_returnTherm+1)^0,w,c
  4077  001BAE  B4D8               	btfsc	status,2,c
  4078  001BB0  EFDC  F00D         	goto	u3221
  4079  001BB4  EFDF  F00D         	goto	u3220
  4080  001BB8                     u3221:
  4081  001BB8  FFFF               	dw	65535	; assembler added errata NOP
  4082  001BBA  EFA1  F00D         	goto	l3848
  4083  001BBE                     u3220:
  4084  001BBE  FFFF               	dw	65535	; assembler added errata NOP
  4085  001BC0  BE83               	btfsc	131,7,c	;volatile
  4086  001BC2  EFE5  F00D         	goto	u3231
  4087  001BC6  EFE8  F00D         	goto	u3230
  4088  001BCA                     u3231:
  4089  001BCA  FFFF               	dw	65535	; assembler added errata NOP
  4090  001BCC  EFA1  F00D         	goto	l3848
  4091  001BD0                     u3230:
  4092  001BD0                     l3862:
  4093  001BD0  FFFF               	dw	65535	; assembler added errata NOP
  4094                           
  4095                           ;motors.c: 494:     stopADC();
  4096  001BD2  ECB2  F012         	call	_stopADC	;wreg free
  4097  001BD6                     
  4098                           ;motors.c: 497:     resetTherm();
  4099  001BD6  EC7F  F012         	call	_resetTherm	;wreg free
  4100  001BDA                     
  4101                           ;motors.c: 500:     T0CONbits.TMR0ON = 0;
  4102  001BDA  9ED5               	bcf	213,7,c	;volatile
  4103  001BDC                     
  4104                           ;motors.c: 501:     T2CONbits.TMR2ON = 0;
  4105  001BDC  94CA               	bcf	202,2,c	;volatile
  4106                           
  4107                           ;motors.c: 503:     TMR0 = 0;
  4108  001BDE  0E00               	movlw	0
  4109  001BE0  6ED7               	movwf	215,c	;volatile
  4110  001BE2  0E00               	movlw	0
  4111  001BE4  6ED6               	movwf	214,c	;volatile
  4112                           
  4113                           ;motors.c: 504:     TMR2 = 0;
  4114  001BE6  0E00               	movlw	0
  4115  001BE8  6ECC               	movwf	204,c	;volatile
  4116  001BEA                     
  4117                           ;motors.c: 507:     resetStep();
  4118  001BEA  EC8E  F012         	call	_resetStep	;wreg free
  4119  001BEE                     
  4120                           ;motors.c: 510:     if(PORTDbits.RD7){
  4121  001BEE  AE83               	btfss	131,7,c	;volatile
  4122  001BF0  EFFC  F00D         	goto	u3241
  4123  001BF4  EFFF  F00D         	goto	u3240
  4124  001BF8                     u3241:
  4125  001BF8  FFFF               	dw	65535	; assembler added errata NOP
  4126  001BFA  EF04  F00E         	goto	l196
  4127  001BFE                     u3240:
  4128  001BFE  FFFF               	dw	65535	; assembler added errata NOP
  4129  001C00                     
  4130                           ;motors.c: 511:         tm0Error = 2;
  4131  001C00  0E00               	movlw	0
  4132  001C02  6E5C               	movwf	(_tm0Error+1)^0,c
  4133  001C04  0E02               	movlw	2
  4134  001C06  6E5B               	movwf	_tm0Error^0,c
  4135  001C08                     l196:
  4136  001C08  FFFF               	dw	65535	; assembler added errata NOP
  4137                           
  4138                           ;motors.c: 514:     return(tm0Error);
  4139  001C0A  505B               	movf	_tm0Error^0,w,c
  4140  001C0C  0012               	return		;funcret
  4141  001C0E  FFFF               	dw	65535	; errata NOP
  4142  001C10                     __end_of_touchTherm:
  4143                           	callstack 0
  4144                           
  4145 ;; *************** function _returnTherm *****************
  4146 ;; Defined at:
  4147 ;;		line 58 in file "adc.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;		None
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;		None
  4152 ;; Return value:  Size  Location     Type
  4153 ;;                  2   17[COMRAM] unsigned int 
  4154 ;; Registers used:
  4155 ;;		None
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4161 ;;      Params:         2       0       0       0       0       0       0
  4162 ;;      Locals:         0       0       0       0       0       0       0
  4163 ;;      Temps:          0       0       0       0       0       0       0
  4164 ;;      Totals:         2       0       0       0       0       0       0
  4165 ;;Total ram usage:        2 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    4
  4168 ;; This function calls:
  4169 ;;		Nothing
  4170 ;; This function is called by:
  4171 ;;		_touchTherm
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           	psect	text23
  4176  0024D0                     __ptext23:
  4177                           	callstack 0
  4178  0024D0                     _returnTherm:
  4179                           	callstack 0
  4180  0024D0  FFFF               	dw	65535	; assembler added errata NOP
  4181  0024D2                     
  4182                           ;adc.c: 59:     return therm_rel;
  4183  0024D2  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4184  0024D6  6A13               	clrf	(?_returnTherm+1)^0,c
  4185  0024D8  0012               	return		;funcret
  4186  0024DA  FFFF               	dw	65535	; errata NOP
  4187  0024DC                     __end_of_returnTherm:
  4188                           	callstack 0
  4189                           
  4190 ;; *************** function _resetTherm *****************
  4191 ;; Defined at:
  4192 ;;		line 72 in file "adc.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;		None
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;		None
  4197 ;; Return value:  Size  Location     Type
  4198 ;;                  1    wreg      void 
  4199 ;; Registers used:
  4200 ;;		wreg, status,2
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4206 ;;      Params:         0       0       0       0       0       0       0
  4207 ;;      Locals:         0       0       0       0       0       0       0
  4208 ;;      Temps:          0       0       0       0       0       0       0
  4209 ;;      Totals:         0       0       0       0       0       0       0
  4210 ;;Total ram usage:        0 bytes
  4211 ;; Hardware stack levels used:    1
  4212 ;; Hardware stack levels required when called:    4
  4213 ;; This function calls:
  4214 ;;		Nothing
  4215 ;; This function is called by:
  4216 ;;		_touchTherm
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           	psect	text24
  4221  0024FE                     __ptext24:
  4222                           	callstack 0
  4223  0024FE                     _resetTherm:
  4224                           	callstack 0
  4225  0024FE  FFFF               	dw	65535	; assembler added errata NOP
  4226  002500                     
  4227                           ;adc.c: 73:     therm_rel = 0;
  4228  002500  0E00               	movlw	0
  4229  002502  6E64               	movwf	_therm_rel^0,c	;volatile
  4230  002504  0012               	return		;funcret
  4231  002506  FFFF               	dw	65535	; errata NOP
  4232  002508                     __end_of_resetTherm:
  4233                           	callstack 0
  4234                           
  4235 ;; *************** function _touchObject *****************
  4236 ;; Defined at:
  4237 ;;		line 384 in file "motors.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;		None
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;		None
  4242 ;; Return value:  Size  Location     Type
  4243 ;;                  1    wreg      unsigned char 
  4244 ;; Registers used:
  4245 ;;		wreg, status,2, status,0, cstack
  4246 ;; Tracked objects:
  4247 ;;		On entry : 0/0
  4248 ;;		On exit  : 0/0
  4249 ;;		Unchanged: 0/0
  4250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4251 ;;      Params:         0       0       0       0       0       0       0
  4252 ;;      Locals:         0       0       0       0       0       0       0
  4253 ;;      Temps:          0       0       0       0       0       0       0
  4254 ;;      Totals:         0       0       0       0       0       0       0
  4255 ;;Total ram usage:        0 bytes
  4256 ;; Hardware stack levels used:    1
  4257 ;; Hardware stack levels required when called:    5
  4258 ;; This function calls:
  4259 ;;		_resetStep
  4260 ;;		_resetTouch
  4261 ;;		_returnTouch
  4262 ;;		_setDirection
  4263 ;;		_startADC
  4264 ;;		_stepMade
  4265 ;;		_stopADC
  4266 ;; This function is called by:
  4267 ;;		_executeData
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           	psect	text25
  4272  001C10                     __ptext25:
  4273                           	callstack 0
  4274  001C10                     _touchObject:
  4275                           	callstack 0
  4276  001C10  FFFF               	dw	65535	; assembler added errata NOP
  4277  001C12                     
  4278                           ;motors.c: 387:     setDirection(1, 2);
  4279  001C12  0E02               	movlw	2
  4280  001C14  6E12               	movwf	setDirection@motor^0,c
  4281  001C16  0E01               	movlw	1
  4282  001C18  ECCE  F010         	call	_setDirection
  4283  001C1C                     
  4284                           ;motors.c: 389:     T2CONbits.TMR2ON = 1;
  4285  001C1C  84CA               	bsf	202,2,c	;volatile
  4286  001C1E                     
  4287                           ;motors.c: 391:     tm0Error = 0;
  4288  001C1E  0E00               	movlw	0
  4289  001C20  6E5C               	movwf	(_tm0Error+1)^0,c
  4290  001C22  0E00               	movlw	0
  4291  001C24  6E5B               	movwf	_tm0Error^0,c
  4292  001C26                     
  4293                           ;motors.c: 392:     tm0Limit = 200;
  4294  001C26  0EC8               	movlw	200
  4295  001C28  6E68               	movwf	_tm0Limit^0,c
  4296  001C2A                     
  4297                           ;motors.c: 393:     T0CONbits.TMR0ON = 1;
  4298  001C2A  8ED5               	bsf	213,7,c	;volatile
  4299  001C2C                     
  4300                           ;motors.c: 396:     startADC();
  4301  001C2C  EC84  F012         	call	_startADC	;wreg free
  4302                           
  4303                           ;motors.c: 399:     while(!returnTouch() || PORTDbits.RD7){
  4304  001C30  EF4B  F00E         	goto	l3816
  4305  001C34                     l3806:
  4306  001C34  FFFF               	dw	65535	; assembler added errata NOP
  4307                           
  4308                           ;motors.c: 402:         if(tm0Error){
  4309  001C36  505B               	movf	_tm0Error^0,w,c
  4310  001C38  105C               	iorwf	(_tm0Error+1)^0,w,c
  4311  001C3A  B4D8               	btfsc	status,2,c
  4312  001C3C  EF22  F00E         	goto	u3131
  4313  001C40  EF25  F00E         	goto	u3130
  4314  001C44                     u3131:
  4315  001C44  FFFF               	dw	65535	; assembler added errata NOP
  4316  001C46  EF2D  F00E         	goto	l174
  4317  001C4A                     u3130:
  4318  001C4A  FFFF               	dw	65535	; assembler added errata NOP
  4319  001C4C                     
  4320                           ;motors.c: 404:             LATCbits.LATC2 = 0;
  4321  001C4C  948B               	bcf	139,2,c	;volatile
  4322  001C4E                     
  4323                           ;motors.c: 405:             tm0Error = 6;
  4324  001C4E  0E00               	movlw	0
  4325  001C50  6E5C               	movwf	(_tm0Error+1)^0,c
  4326  001C52  0E06               	movlw	6
  4327  001C54  6E5B               	movwf	_tm0Error^0,c
  4328                           
  4329                           ;motors.c: 406:             break;
  4330  001C56  EF61  F00E         	goto	l3820
  4331  001C5A                     l174:
  4332  001C5A  FFFF               	dw	65535	; assembler added errata NOP
  4333                           
  4334                           ;motors.c: 410:         LATCbits.LATC2 = 1;
  4335  001C5C  848B               	bsf	139,2,c	;volatile
  4336  001C5E                     l3812:
  4337  001C5E  FFFF               	dw	65535	; assembler added errata NOP
  4338  001C60  EC32  F012         	call	_stepMade	;wreg free
  4339  001C64  5012               	movf	?_stepMade^0,w,c
  4340  001C66  1013               	iorwf	(?_stepMade+1)^0,w,c
  4341  001C68  B4D8               	btfsc	status,2,c
  4342  001C6A  EF39  F00E         	goto	u3141
  4343  001C6E  EF3C  F00E         	goto	u3140
  4344  001C72                     u3141:
  4345  001C72  FFFF               	dw	65535	; assembler added errata NOP
  4346  001C74  EF2F  F00E         	goto	l3812
  4347  001C78                     u3140:
  4348  001C78  FFFF               	dw	65535	; assembler added errata NOP
  4349  001C7A                     
  4350                           ;motors.c: 416:         LATCbits.LATC2 = 0;
  4351  001C7A  948B               	bcf	139,2,c	;volatile
  4352  001C7C                     l3814:
  4353  001C7C  FFFF               	dw	65535	; assembler added errata NOP
  4354  001C7E  EC32  F012         	call	_stepMade	;wreg free
  4355  001C82  5012               	movf	?_stepMade^0,w,c
  4356  001C84  1013               	iorwf	(?_stepMade+1)^0,w,c
  4357  001C86  B4D8               	btfsc	status,2,c
  4358  001C88  EF48  F00E         	goto	u3151
  4359  001C8C  EF4B  F00E         	goto	u3150
  4360  001C90                     u3151:
  4361  001C90  FFFF               	dw	65535	; assembler added errata NOP
  4362  001C92  EF3E  F00E         	goto	l3814
  4363  001C96                     u3150:
  4364  001C96                     l3816:
  4365  001C96  FFFF               	dw	65535	; assembler added errata NOP
  4366                           
  4367                           ;motors.c: 399:     while(!returnTouch() || PORTDbits.RD7){
  4368  001C98  EC6E  F012         	call	_returnTouch	;wreg free
  4369  001C9C  5012               	movf	?_returnTouch^0,w,c
  4370  001C9E  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4371  001CA0  B4D8               	btfsc	status,2,c
  4372  001CA2  EF55  F00E         	goto	u3161
  4373  001CA6  EF58  F00E         	goto	u3160
  4374  001CAA                     u3161:
  4375  001CAA  FFFF               	dw	65535	; assembler added errata NOP
  4376  001CAC  EF1A  F00E         	goto	l3806
  4377  001CB0                     u3160:
  4378  001CB0  FFFF               	dw	65535	; assembler added errata NOP
  4379  001CB2  BE83               	btfsc	131,7,c	;volatile
  4380  001CB4  EF5E  F00E         	goto	u3171
  4381  001CB8  EF61  F00E         	goto	u3170
  4382  001CBC                     u3171:
  4383  001CBC  FFFF               	dw	65535	; assembler added errata NOP
  4384  001CBE  EF1A  F00E         	goto	l3806
  4385  001CC2                     u3170:
  4386  001CC2                     l3820:
  4387  001CC2  FFFF               	dw	65535	; assembler added errata NOP
  4388                           
  4389                           ;motors.c: 423:     stopADC();
  4390  001CC4  ECB2  F012         	call	_stopADC	;wreg free
  4391  001CC8                     
  4392                           ;motors.c: 426:     resetTouch();
  4393  001CC8  EC89  F012         	call	_resetTouch	;wreg free
  4394  001CCC                     
  4395                           ;motors.c: 429:     T0CONbits.TMR0ON = 0;
  4396  001CCC  9ED5               	bcf	213,7,c	;volatile
  4397  001CCE                     
  4398                           ;motors.c: 430:     T2CONbits.TMR2ON = 0;
  4399  001CCE  94CA               	bcf	202,2,c	;volatile
  4400                           
  4401                           ;motors.c: 432:     TMR0 = 0;
  4402  001CD0  0E00               	movlw	0
  4403  001CD2  6ED7               	movwf	215,c	;volatile
  4404  001CD4  0E00               	movlw	0
  4405  001CD6  6ED6               	movwf	214,c	;volatile
  4406                           
  4407                           ;motors.c: 433:     TMR2 = 0;
  4408  001CD8  0E00               	movlw	0
  4409  001CDA  6ECC               	movwf	204,c	;volatile
  4410  001CDC                     
  4411                           ;motors.c: 436:     resetStep();
  4412  001CDC  EC8E  F012         	call	_resetStep	;wreg free
  4413  001CE0                     
  4414                           ;motors.c: 439:     if(PORTDbits.RD7){
  4415  001CE0  AE83               	btfss	131,7,c	;volatile
  4416  001CE2  EF75  F00E         	goto	u3181
  4417  001CE6  EF78  F00E         	goto	u3180
  4418  001CEA                     u3181:
  4419  001CEA  FFFF               	dw	65535	; assembler added errata NOP
  4420  001CEC  EF7D  F00E         	goto	l182
  4421  001CF0                     u3180:
  4422  001CF0  FFFF               	dw	65535	; assembler added errata NOP
  4423  001CF2                     
  4424                           ;motors.c: 440:         tm0Error = 2;
  4425  001CF2  0E00               	movlw	0
  4426  001CF4  6E5C               	movwf	(_tm0Error+1)^0,c
  4427  001CF6  0E02               	movlw	2
  4428  001CF8  6E5B               	movwf	_tm0Error^0,c
  4429  001CFA                     l182:
  4430  001CFA  FFFF               	dw	65535	; assembler added errata NOP
  4431                           
  4432                           ;motors.c: 443:     return(tm0Error);
  4433  001CFC  505B               	movf	_tm0Error^0,w,c
  4434  001CFE  0012               	return		;funcret
  4435  001D00  FFFF               	dw	65535	; errata NOP
  4436  001D02                     __end_of_touchObject:
  4437                           	callstack 0
  4438                           
  4439 ;; *************** function _stopADC *****************
  4440 ;; Defined at:
  4441 ;;		line 44 in file "adc.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;		None
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;		None
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  1    wreg      void 
  4448 ;; Registers used:
  4449 ;;		None
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4455 ;;      Params:         0       0       0       0       0       0       0
  4456 ;;      Locals:         0       0       0       0       0       0       0
  4457 ;;      Temps:          0       0       0       0       0       0       0
  4458 ;;      Totals:         0       0       0       0       0       0       0
  4459 ;;Total ram usage:        0 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    4
  4462 ;; This function calls:
  4463 ;;		Nothing
  4464 ;; This function is called by:
  4465 ;;		_touchObject
  4466 ;;		_touchTherm
  4467 ;; This function uses a non-reentrant model
  4468 ;;
  4469                           
  4470                           	psect	text26
  4471  002564                     __ptext26:
  4472                           	callstack 0
  4473  002564                     _stopADC:
  4474                           	callstack 0
  4475  002564  FFFF               	dw	65535	; assembler added errata NOP
  4476  002566                     
  4477                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4478  002566  90C2               	bcf	194,0,c	;volatile
  4479  002568  0012               	return		;funcret
  4480  00256A  FFFF               	dw	65535	; errata NOP
  4481  00256C                     __end_of_stopADC:
  4482                           	callstack 0
  4483                           
  4484 ;; *************** function _startADC *****************
  4485 ;; Defined at:
  4486 ;;		line 36 in file "adc.c"
  4487 ;; Parameters:    Size  Location     Type
  4488 ;;		None
  4489 ;; Auto vars:     Size  Location     Type
  4490 ;;		None
  4491 ;; Return value:  Size  Location     Type
  4492 ;;                  1    wreg      void 
  4493 ;; Registers used:
  4494 ;;		None
  4495 ;; Tracked objects:
  4496 ;;		On entry : 0/0
  4497 ;;		On exit  : 0/0
  4498 ;;		Unchanged: 0/0
  4499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4500 ;;      Params:         0       0       0       0       0       0       0
  4501 ;;      Locals:         0       0       0       0       0       0       0
  4502 ;;      Temps:          0       0       0       0       0       0       0
  4503 ;;      Totals:         0       0       0       0       0       0       0
  4504 ;;Total ram usage:        0 bytes
  4505 ;; Hardware stack levels used:    1
  4506 ;; Hardware stack levels required when called:    4
  4507 ;; This function calls:
  4508 ;;		Nothing
  4509 ;; This function is called by:
  4510 ;;		_touchObject
  4511 ;;		_touchTherm
  4512 ;; This function uses a non-reentrant model
  4513 ;;
  4514                           
  4515                           	psect	text27
  4516  002508                     __ptext27:
  4517                           	callstack 0
  4518  002508                     _startADC:
  4519                           	callstack 0
  4520  002508  FFFF               	dw	65535	; assembler added errata NOP
  4521  00250A                     
  4522                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4523  00250A  80C2               	bsf	194,0,c	;volatile
  4524                           
  4525                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4526  00250C  84C2               	bsf	194,2,c	;volatile
  4527  00250E  0012               	return		;funcret
  4528  002510  FFFF               	dw	65535	; errata NOP
  4529  002512                     __end_of_startADC:
  4530                           	callstack 0
  4531                           
  4532 ;; *************** function _returnTouch *****************
  4533 ;; Defined at:
  4534 ;;		line 51 in file "adc.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;		None
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;		None
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  2   17[COMRAM] unsigned int 
  4541 ;; Registers used:
  4542 ;;		None
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4548 ;;      Params:         2       0       0       0       0       0       0
  4549 ;;      Locals:         0       0       0       0       0       0       0
  4550 ;;      Temps:          0       0       0       0       0       0       0
  4551 ;;      Totals:         2       0       0       0       0       0       0
  4552 ;;Total ram usage:        2 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    4
  4555 ;; This function calls:
  4556 ;;		Nothing
  4557 ;; This function is called by:
  4558 ;;		_touchObject
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           	psect	text28
  4563  0024DC                     __ptext28:
  4564                           	callstack 0
  4565  0024DC                     _returnTouch:
  4566                           	callstack 0
  4567  0024DC  FFFF               	dw	65535	; assembler added errata NOP
  4568  0024DE                     
  4569                           ;adc.c: 52:     return touch_rel;
  4570  0024DE  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4571  0024E2  6A13               	clrf	(?_returnTouch+1)^0,c
  4572  0024E4  0012               	return		;funcret
  4573  0024E6  FFFF               	dw	65535	; errata NOP
  4574  0024E8                     __end_of_returnTouch:
  4575                           	callstack 0
  4576                           
  4577 ;; *************** function _resetTouch *****************
  4578 ;; Defined at:
  4579 ;;		line 65 in file "adc.c"
  4580 ;; Parameters:    Size  Location     Type
  4581 ;;		None
  4582 ;; Auto vars:     Size  Location     Type
  4583 ;;		None
  4584 ;; Return value:  Size  Location     Type
  4585 ;;                  1    wreg      void 
  4586 ;; Registers used:
  4587 ;;		wreg, status,2
  4588 ;; Tracked objects:
  4589 ;;		On entry : 0/0
  4590 ;;		On exit  : 0/0
  4591 ;;		Unchanged: 0/0
  4592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4593 ;;      Params:         0       0       0       0       0       0       0
  4594 ;;      Locals:         0       0       0       0       0       0       0
  4595 ;;      Temps:          0       0       0       0       0       0       0
  4596 ;;      Totals:         0       0       0       0       0       0       0
  4597 ;;Total ram usage:        0 bytes
  4598 ;; Hardware stack levels used:    1
  4599 ;; Hardware stack levels required when called:    4
  4600 ;; This function calls:
  4601 ;;		Nothing
  4602 ;; This function is called by:
  4603 ;;		_touchObject
  4604 ;; This function uses a non-reentrant model
  4605 ;;
  4606                           
  4607                           	psect	text29
  4608  002512                     __ptext29:
  4609                           	callstack 0
  4610  002512                     _resetTouch:
  4611                           	callstack 0
  4612  002512  FFFF               	dw	65535	; assembler added errata NOP
  4613  002514                     
  4614                           ;adc.c: 66:     touch_rel = 0;
  4615  002514  0E00               	movlw	0
  4616  002516  6E65               	movwf	_touch_rel^0,c	;volatile
  4617  002518  0012               	return		;funcret
  4618  00251A  FFFF               	dw	65535	; errata NOP
  4619  00251C                     __end_of_resetTouch:
  4620                           	callstack 0
  4621                           
  4622 ;; *************** function _rotateObj *****************
  4623 ;; Defined at:
  4624 ;;		line 575 in file "motors.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;  rotAngle        1    wreg     unsigned char 
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;  rotAngle        1    3[BANK0 ] unsigned char 
  4629 ;;  i               2    6[BANK0 ] unsigned int 
  4630 ;;  totStep         2    4[BANK0 ] int 
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  1    wreg      void 
  4633 ;; Registers used:
  4634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4640 ;;      Params:         0       0       0       0       0       0       0
  4641 ;;      Locals:         0       5       0       0       0       0       0
  4642 ;;      Temps:          0       3       0       0       0       0       0
  4643 ;;      Totals:         0       8       0       0       0       0       0
  4644 ;;Total ram usage:        8 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    5
  4647 ;; This function calls:
  4648 ;;		___fldiv
  4649 ;;		___fltol
  4650 ;;		___xxtofl
  4651 ;;		_stepMade
  4652 ;; This function is called by:
  4653 ;;		_executeData
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           	psect	text30
  4658  001DD8                     __ptext30:
  4659                           	callstack 0
  4660  001DD8                     _rotateObj:
  4661                           	callstack 0
  4662  001DD8  FFFF               	dw	65535	; assembler added errata NOP
  4663                           
  4664                           ;incstack = 0
  4665                           ;rotateObj@rotAngle stored from wreg
  4666  001DDA  0100               	movlb	0	; () banked
  4667  001DDC  6FF7               	movwf	rotateObj@rotAngle& (0+255),b
  4668  001DDE                     
  4669                           ;motors.c: 576:     static const float stepAngle = 0.08789;;motors.c: 577:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 578:     unsigned int i;;
      +                          motors.c: 579:     int totStep = rotAngle/stepAngle;
  4670  001DDE  0EAC               	movlw	172
  4671  001DE0  6E24               	movwf	___fldiv@a^0,c
  4672  001DE2  0EFF               	movlw	255
  4673  001DE4  6E25               	movwf	(___fldiv@a+1)^0,c
  4674  001DE6  0EB3               	movlw	179
  4675  001DE8  6E26               	movwf	(___fldiv@a+2)^0,c
  4676  001DEA  0E3D               	movlw	61
  4677  001DEC  6E27               	movwf	(___fldiv@a+3)^0,c
  4678  001DEE  0100               	movlb	0	; () banked
  4679  001DF0  51F7               	movf	rotateObj@rotAngle& (0+255),w,b
  4680  001DF2  6E12               	movwf	___xxtofl@val^0,c
  4681  001DF4  6A13               	clrf	(___xxtofl@val+1)^0,c
  4682  001DF6  6A14               	clrf	(___xxtofl@val+2)^0,c
  4683  001DF8  6A15               	clrf	(___xxtofl@val+3)^0,c
  4684  001DFA  0E01               	movlw	1
  4685  001DFC  ECC9  F007         	call	___xxtofl
  4686  001E00  C012  F020         	movff	?___xxtofl,___fldiv@b
  4687  001E04  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4688  001E08  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4689  001E0C  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4690  001E10  EC08  F003         	call	___fldiv	;wreg free
  4691  001E14  C020  F039         	movff	?___fldiv,___fltol@f1
  4692  001E18  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4693  001E1C  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4694  001E20  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4695  001E24  ECD8  F00B         	call	___fltol	;wreg free
  4696  001E28  C039  F0F8         	movff	?___fltol,rotateObj@totStep
  4697  001E2C  C03A  F0F9         	movff	?___fltol+1,rotateObj@totStep+1
  4698  001E30                     
  4699                           ;motors.c: 582:     for(i = 0; i < totStep; i++){
  4700  001E30  0E00               	movlw	0
  4701  001E32  0100               	movlb	0	; () banked
  4702  001E34  6FFB               	movwf	(rotateObj@i+1)& (0+255),b
  4703  001E36  0E00               	movlw	0
  4704  001E38  6FFA               	movwf	rotateObj@i& (0+255),b
  4705  001E3A  EF46  F00F         	goto	l3918
  4706  001E3E                     l3910:
  4707  001E3E  FFFF               	dw	65535	; assembler added errata NOP
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;motors.c: 584:         LATD &= 0xC3;
  4711  001E40  0EC3               	movlw	195
  4712  001E42  168C               	andwf	140,f,c	;volatile
  4713  001E44                     
  4714                           ; BSR set to: 0
  4715                           ;motors.c: 586:         LATD |= rotSequence[i%4] << 2;
  4716  001E44  0E03               	movlw	3
  4717  001E46  15FA               	andwf	rotateObj@i& (0+255),w,b
  4718  001E48  6FF4               	movwf	??_rotateObj& (0+255),b
  4719  001E4A  0E00               	movlw	0
  4720  001E4C  15FB               	andwf	(rotateObj@i+1)& (0+255),w,b
  4721  001E4E  6FF5               	movwf	(??_rotateObj+1)& (0+255),b
  4722  001E50  0E80               	movlw	low rotateObj@rotSequence
  4723  001E52  25F4               	addwf	??_rotateObj& (0+255),w,b
  4724  001E54  6ED9               	movwf	fsr2l,c
  4725  001E56  0E00               	movlw	high rotateObj@rotSequence
  4726  001E58  21F5               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4727  001E5A  6EDA               	movwf	fsr2h,c
  4728  001E5C  50DF               	movf	indf2,w,c
  4729  001E5E  6FF6               	movwf	(??_rotateObj+2)& (0+255),b
  4730  001E60  90D8               	bcf	status,0,c
  4731  001E62  37F6               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4732  001E64  90D8               	bcf	status,0,c
  4733  001E66  35F6               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4734  001E68  128C               	iorwf	140,f,c	;volatile
  4735  001E6A                     l3914:
  4736  001E6A  FFFF               	dw	65535	; assembler added errata NOP
  4737  001E6C  EC32  F012         	call	_stepMade	;wreg free
  4738  001E70  5012               	movf	?_stepMade^0,w,c
  4739  001E72  1013               	iorwf	(?_stepMade+1)^0,w,c
  4740  001E74  B4D8               	btfsc	status,2,c
  4741  001E76  EF3F  F00F         	goto	u3291
  4742  001E7A  EF42  F00F         	goto	u3290
  4743  001E7E                     u3291:
  4744  001E7E  FFFF               	dw	65535	; assembler added errata NOP
  4745  001E80  EF35  F00F         	goto	l3914
  4746  001E84                     u3290:
  4747  001E84  FFFF               	dw	65535	; assembler added errata NOP
  4748  001E86                     
  4749                           ;motors.c: 591:     }
  4750  001E86  0100               	movlb	0	; () banked
  4751  001E88  4BFA               	infsnz	rotateObj@i& (0+255),f,b
  4752  001E8A  2BFB               	incf	(rotateObj@i+1)& (0+255),f,b
  4753  001E8C                     l3918:
  4754  001E8C  FFFF               	dw	65535	; assembler added errata NOP
  4755                           
  4756                           ; BSR set to: 0
  4757  001E8E  51F8               	movf	rotateObj@totStep& (0+255),w,b
  4758  001E90  5DFA               	subwf	rotateObj@i& (0+255),w,b
  4759  001E92  51F9               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4760  001E94  59FB               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4761  001E96  A0D8               	btfss	status,0,c
  4762  001E98  EF50  F00F         	goto	u3301
  4763  001E9C  EF53  F00F         	goto	u3300
  4764  001EA0                     u3301:
  4765  001EA0  FFFF               	dw	65535	; assembler added errata NOP
  4766  001EA2  EF1F  F00F         	goto	l3910
  4767  001EA6                     u3300:
  4768  001EA6  FFFF               	dw	65535	; assembler added errata NOP
  4769  001EA8                     
  4770                           ; BSR set to: 0
  4771  001EA8  0012               	return		;funcret
  4772  001EAA  FFFF               	dw	65535	; errata NOP
  4773  001EAC                     __end_of_rotateObj:
  4774                           	callstack 0
  4775                           
  4776 ;; *************** function ___xxtofl *****************
  4777 ;; Defined at:
  4778 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4779 ;; Parameters:    Size  Location     Type
  4780 ;;  sign            1    wreg     unsigned char 
  4781 ;;  val             4   17[COMRAM] long 
  4782 ;; Auto vars:     Size  Location     Type
  4783 ;;  sign            1   25[COMRAM] unsigned char 
  4784 ;;  arg             4   27[COMRAM] unsigned long 
  4785 ;;  exp             1   26[COMRAM] unsigned char 
  4786 ;; Return value:  Size  Location     Type
  4787 ;;                  4   17[COMRAM] unsigned char 
  4788 ;; Registers used:
  4789 ;;		wreg, status,2, status,0
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4795 ;;      Params:         4       0       0       0       0       0       0
  4796 ;;      Locals:         6       0       0       0       0       0       0
  4797 ;;      Temps:          4       0       0       0       0       0       0
  4798 ;;      Totals:        14       0       0       0       0       0       0
  4799 ;;Total ram usage:       14 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; Hardware stack levels required when called:    4
  4802 ;; This function calls:
  4803 ;;		Nothing
  4804 ;; This function is called by:
  4805 ;;		_rotateObj
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           	psect	text31
  4810  000F92                     __ptext31:
  4811                           	callstack 0
  4812  000F92                     ___xxtofl:
  4813                           	callstack 0
  4814  000F92  FFFF               	dw	65535	; assembler added errata NOP
  4815                           
  4816                           ; BSR set to: 0
  4817                           ;incstack = 0
  4818                           ;___xxtofl@sign stored from wreg
  4819  000F94  6E1A               	movwf	___xxtofl@sign^0,c
  4820  000F96  501A               	movf	___xxtofl@sign^0,w,c
  4821  000F98  B4D8               	btfsc	status,2,c
  4822  000F9A  EFD1  F007         	goto	u2801
  4823  000F9E  EFD4  F007         	goto	u2800
  4824  000FA2                     u2801:
  4825  000FA2  FFFF               	dw	65535	; assembler added errata NOP
  4826  000FA4  EFF9  F007         	goto	l1244
  4827  000FA8                     u2800:
  4828  000FA8  FFFF               	dw	65535	; assembler added errata NOP
  4829  000FAA  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4830  000FAC  EFDD  F007         	goto	u2810
  4831  000FB0  EFDA  F007         	goto	u2811
  4832  000FB4                     u2811:
  4833  000FB4  FFFF               	dw	65535	; assembler added errata NOP
  4834  000FB6  EFF9  F007         	goto	l1244
  4835  000FBA                     u2810:
  4836  000FBA  FFFF               	dw	65535	; assembler added errata NOP
  4837  000FBC  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4838  000FC0  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4839  000FC4  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4840  000FC8  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4841  000FCC  1E16               	comf	??___xxtofl^0,f,c
  4842  000FCE  1E17               	comf	(??___xxtofl+1)^0,f,c
  4843  000FD0  1E18               	comf	(??___xxtofl+2)^0,f,c
  4844  000FD2  1E19               	comf	(??___xxtofl+3)^0,f,c
  4845  000FD4  2A16               	incf	??___xxtofl^0,f,c
  4846  000FD6  0E00               	movlw	0
  4847  000FD8  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4848  000FDA  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4849  000FDC  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4850  000FDE  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4851  000FE2  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4852  000FE6  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4853  000FEA  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4854  000FEE  EF02  F008         	goto	l3620
  4855  000FF2                     l1244:
  4856  000FF2  FFFF               	dw	65535	; assembler added errata NOP
  4857  000FF4  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4858  000FF8  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4859  000FFC  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4860  001000  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4861  001004                     l3620:
  4862  001004  FFFF               	dw	65535	; assembler added errata NOP
  4863  001006  5012               	movf	___xxtofl@val^0,w,c
  4864  001008  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4865  00100A  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4866  00100C  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4867  00100E  A4D8               	btfss	status,2,c
  4868  001010  EF0C  F008         	goto	u2821
  4869  001014  EF0F  F008         	goto	u2820
  4870  001018                     u2821:
  4871  001018  FFFF               	dw	65535	; assembler added errata NOP
  4872  00101A  EF1A  F008         	goto	l3626
  4873  00101E                     u2820:
  4874  00101E  FFFF               	dw	65535	; assembler added errata NOP
  4875  001020  0E00               	movlw	0
  4876  001022  6E12               	movwf	?___xxtofl^0,c
  4877  001024  0E00               	movlw	0
  4878  001026  6E13               	movwf	(?___xxtofl+1)^0,c
  4879  001028  0E00               	movlw	0
  4880  00102A  6E14               	movwf	(?___xxtofl+2)^0,c
  4881  00102C  0E00               	movlw	0
  4882  00102E  6E15               	movwf	(?___xxtofl+3)^0,c
  4883  001030  EFC2  F008         	goto	l1247
  4884  001034                     l3626:
  4885  001034  FFFF               	dw	65535	; assembler added errata NOP
  4886  001036  0E96               	movlw	150
  4887  001038  6E1B               	movwf	___xxtofl@exp^0,c
  4888  00103A  EF26  F008         	goto	l3630
  4889  00103E                     l3628:
  4890  00103E  FFFF               	dw	65535	; assembler added errata NOP
  4891  001040  2A1B               	incf	___xxtofl@exp^0,f,c
  4892  001042  90D8               	bcf	status,0,c
  4893  001044  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4894  001046  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4895  001048  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4896  00104A  321C               	rrcf	___xxtofl@arg^0,f,c
  4897  00104C                     l3630:
  4898  00104C  FFFF               	dw	65535	; assembler added errata NOP
  4899  00104E  0E00               	movlw	0
  4900  001050  141C               	andwf	___xxtofl@arg^0,w,c
  4901  001052  6E16               	movwf	??___xxtofl^0,c
  4902  001054  0E00               	movlw	0
  4903  001056  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4904  001058  6E17               	movwf	(??___xxtofl+1)^0,c
  4905  00105A  0E00               	movlw	0
  4906  00105C  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4907  00105E  6E18               	movwf	(??___xxtofl+2)^0,c
  4908  001060  0EFE               	movlw	254
  4909  001062  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4910  001064  6E19               	movwf	(??___xxtofl+3)^0,c
  4911  001066  5016               	movf	??___xxtofl^0,w,c
  4912  001068  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4913  00106A  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4914  00106C  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4915  00106E  A4D8               	btfss	status,2,c
  4916  001070  EF3C  F008         	goto	u2831
  4917  001074  EF3F  F008         	goto	u2830
  4918  001078                     u2831:
  4919  001078  FFFF               	dw	65535	; assembler added errata NOP
  4920  00107A  EF1F  F008         	goto	l3628
  4921  00107E                     u2830:
  4922  00107E  FFFF               	dw	65535	; assembler added errata NOP
  4923  001080  EF4F  F008         	goto	l1251
  4924  001084                     l3632:
  4925  001084  FFFF               	dw	65535	; assembler added errata NOP
  4926  001086  2A1B               	incf	___xxtofl@exp^0,f,c
  4927  001088  0E01               	movlw	1
  4928  00108A  261C               	addwf	___xxtofl@arg^0,f,c
  4929  00108C  0E00               	movlw	0
  4930  00108E  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4931  001090  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4932  001092  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4933  001094  90D8               	bcf	status,0,c
  4934  001096  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4935  001098  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4936  00109A  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4937  00109C  321C               	rrcf	___xxtofl@arg^0,f,c
  4938  00109E                     l1251:
  4939  00109E  FFFF               	dw	65535	; assembler added errata NOP
  4940  0010A0  0E00               	movlw	0
  4941  0010A2  141C               	andwf	___xxtofl@arg^0,w,c
  4942  0010A4  6E16               	movwf	??___xxtofl^0,c
  4943  0010A6  0E00               	movlw	0
  4944  0010A8  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4945  0010AA  6E17               	movwf	(??___xxtofl+1)^0,c
  4946  0010AC  0E00               	movlw	0
  4947  0010AE  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4948  0010B0  6E18               	movwf	(??___xxtofl+2)^0,c
  4949  0010B2  0EFF               	movlw	255
  4950  0010B4  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4951  0010B6  6E19               	movwf	(??___xxtofl+3)^0,c
  4952  0010B8  5016               	movf	??___xxtofl^0,w,c
  4953  0010BA  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4954  0010BC  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4955  0010BE  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4956  0010C0  A4D8               	btfss	status,2,c
  4957  0010C2  EF65  F008         	goto	u2841
  4958  0010C6  EF68  F008         	goto	u2840
  4959  0010CA                     u2841:
  4960  0010CA  FFFF               	dw	65535	; assembler added errata NOP
  4961  0010CC  EF42  F008         	goto	l3632
  4962  0010D0                     u2840:
  4963  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  4964  0010D2  EF72  F008         	goto	l3640
  4965  0010D6                     l3638:
  4966  0010D6  FFFF               	dw	65535	; assembler added errata NOP
  4967  0010D8  061B               	decf	___xxtofl@exp^0,f,c
  4968  0010DA  90D8               	bcf	status,0,c
  4969  0010DC  361C               	rlcf	___xxtofl@arg^0,f,c
  4970  0010DE  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4971  0010E0  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4972  0010E2  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4973  0010E4                     l3640:
  4974  0010E4  FFFF               	dw	65535	; assembler added errata NOP
  4975  0010E6  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4976  0010E8  EF78  F008         	goto	u2851
  4977  0010EC  EF7B  F008         	goto	u2850
  4978  0010F0                     u2851:
  4979  0010F0  FFFF               	dw	65535	; assembler added errata NOP
  4980  0010F2  EF85  F008         	goto	l1258
  4981  0010F6                     u2850:
  4982  0010F6  FFFF               	dw	65535	; assembler added errata NOP
  4983  0010F8  0E02               	movlw	2
  4984  0010FA  601B               	cpfslt	___xxtofl@exp^0,c
  4985  0010FC  EF82  F008         	goto	u2861
  4986  001100  EF85  F008         	goto	u2860
  4987  001104                     u2861:
  4988  001104  FFFF               	dw	65535	; assembler added errata NOP
  4989  001106  EF6B  F008         	goto	l3638
  4990  00110A                     u2860:
  4991  00110A                     l1258:
  4992  00110A  FFFF               	dw	65535	; assembler added errata NOP
  4993  00110C  B01B               	btfsc	___xxtofl@exp^0,0,c
  4994  00110E  EF8B  F008         	goto	u2871
  4995  001112  EF8E  F008         	goto	u2870
  4996  001116                     u2871:
  4997  001116  FFFF               	dw	65535	; assembler added errata NOP
  4998  001118  EF90  F008         	goto	l3646
  4999  00111C                     u2870:
  5000  00111C  FFFF               	dw	65535	; assembler added errata NOP
  5001  00111E  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  5002  001120                     l3646:
  5003  001120  FFFF               	dw	65535	; assembler added errata NOP
  5004  001122  90D8               	bcf	status,0,c
  5005  001124  321B               	rrcf	___xxtofl@exp^0,f,c
  5006  001126  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  5007  00112A  6A17               	clrf	(??___xxtofl+1)^0,c
  5008  00112C  6A18               	clrf	(??___xxtofl+2)^0,c
  5009  00112E  6A19               	clrf	(??___xxtofl+3)^0,c
  5010  001130  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  5011  001134  6A18               	clrf	(??___xxtofl+2)^0,c
  5012  001136  6A17               	clrf	(??___xxtofl+1)^0,c
  5013  001138  6A16               	clrf	??___xxtofl^0,c
  5014  00113A  5016               	movf	??___xxtofl^0,w,c
  5015  00113C  121C               	iorwf	___xxtofl@arg^0,f,c
  5016  00113E  5017               	movf	(??___xxtofl+1)^0,w,c
  5017  001140  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  5018  001142  5018               	movf	(??___xxtofl+2)^0,w,c
  5019  001144  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  5020  001146  5019               	movf	(??___xxtofl+3)^0,w,c
  5021  001148  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  5022  00114A  501A               	movf	___xxtofl@sign^0,w,c
  5023  00114C  B4D8               	btfsc	status,2,c
  5024  00114E  EFAB  F008         	goto	u2881
  5025  001152  EFAE  F008         	goto	u2880
  5026  001156                     u2881:
  5027  001156  FFFF               	dw	65535	; assembler added errata NOP
  5028  001158  EFB9  F008         	goto	l3656
  5029  00115C                     u2880:
  5030  00115C  FFFF               	dw	65535	; assembler added errata NOP
  5031  00115E  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  5032  001160  EFB7  F008         	goto	u2890
  5033  001164  EFB4  F008         	goto	u2891
  5034  001168                     u2891:
  5035  001168  FFFF               	dw	65535	; assembler added errata NOP
  5036  00116A  EFB9  F008         	goto	l3656
  5037  00116E                     u2890:
  5038  00116E  FFFF               	dw	65535	; assembler added errata NOP
  5039  001170  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  5040  001172                     l3656:
  5041  001172  FFFF               	dw	65535	; assembler added errata NOP
  5042  001174  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  5043  001178  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  5044  00117C  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  5045  001180  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5046  001184                     l1247:
  5047  001184  FFFF               	dw	65535	; assembler added errata NOP
  5048  001186  0012               	return		;funcret
  5049  001188  FFFF               	dw	65535	; errata NOP
  5050  00118A                     __end_of___xxtofl:
  5051                           	callstack 0
  5052                           
  5053 ;; *************** function ___fltol *****************
  5054 ;; Defined at:
  5055 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;  f1              4   56[COMRAM] unsigned char 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;  exp1            1   65[COMRAM] unsigned char 
  5060 ;;  sign1           1   64[COMRAM] unsigned char 
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  4   56[COMRAM] long 
  5063 ;; Registers used:
  5064 ;;		wreg, status,2, status,0
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5070 ;;      Params:         4       0       0       0       0       0       0
  5071 ;;      Locals:         2       0       0       0       0       0       0
  5072 ;;      Temps:          4       0       0       0       0       0       0
  5073 ;;      Totals:        10       0       0       0       0       0       0
  5074 ;;Total ram usage:       10 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; Hardware stack levels required when called:    4
  5077 ;; This function calls:
  5078 ;;		Nothing
  5079 ;; This function is called by:
  5080 ;;		_rotateObj
  5081 ;; This function uses a non-reentrant model
  5082 ;;
  5083                           
  5084                           	psect	text32
  5085  0017B0                     __ptext32:
  5086                           	callstack 0
  5087  0017B0                     ___fltol:
  5088                           	callstack 0
  5089  0017B0  FFFF               	dw	65535	; assembler added errata NOP
  5090  0017B2  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5091  0017B4  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5092  0017B6  6E42               	movwf	___fltol@exp1^0,c
  5093  0017B8  5042               	movf	___fltol@exp1^0,w,c
  5094  0017BA  A4D8               	btfss	status,2,c
  5095  0017BC  EFE2  F00B         	goto	u2731
  5096  0017C0  EFE5  F00B         	goto	u2730
  5097  0017C4                     u2731:
  5098  0017C4  FFFF               	dw	65535	; assembler added errata NOP
  5099  0017C6  EFF1  F00B         	goto	l3576
  5100  0017CA                     u2730:
  5101  0017CA  FFFF               	dw	65535	; assembler added errata NOP
  5102  0017CC                     l3572:
  5103  0017CC  FFFF               	dw	65535	; assembler added errata NOP
  5104  0017CE  0E00               	movlw	0
  5105  0017D0  6E39               	movwf	?___fltol^0,c
  5106  0017D2  0E00               	movlw	0
  5107  0017D4  6E3A               	movwf	(?___fltol+1)^0,c
  5108  0017D6  0E00               	movlw	0
  5109  0017D8  6E3B               	movwf	(?___fltol+2)^0,c
  5110  0017DA  0E00               	movlw	0
  5111  0017DC  6E3C               	movwf	(?___fltol+3)^0,c
  5112  0017DE  EF70  F00C         	goto	l886
  5113  0017E2                     l3576:
  5114  0017E2  FFFF               	dw	65535	; assembler added errata NOP
  5115  0017E4  C039  F03D         	movff	___fltol@f1,??___fltol
  5116  0017E8  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5117  0017EC  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5118  0017F0  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5119  0017F4  0E20               	movlw	32
  5120  0017F6  EF03  F00C         	goto	u2740
  5121  0017FA                     u2745:
  5122  0017FA  FFFF               	dw	65535	; assembler added errata NOP
  5123  0017FC  90D8               	bcf	status,0,c
  5124  0017FE  3240               	rrcf	(??___fltol+3)^0,f,c
  5125  001800  323F               	rrcf	(??___fltol+2)^0,f,c
  5126  001802  323E               	rrcf	(??___fltol+1)^0,f,c
  5127  001804  323D               	rrcf	??___fltol^0,f,c
  5128  001806                     u2740:
  5129  001806  FFFF               	dw	65535	; assembler added errata NOP
  5130  001808  2EE8               	decfsz	wreg,f,c
  5131  00180A  EFFD  F00B         	goto	u2745
  5132  00180E  503D               	movf	??___fltol^0,w,c
  5133  001810  6E41               	movwf	___fltol@sign1^0,c
  5134  001812  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5135  001814  0EFF               	movlw	255
  5136  001816  1639               	andwf	___fltol@f1^0,f,c
  5137  001818  0EFF               	movlw	255
  5138  00181A  163A               	andwf	(___fltol@f1+1)^0,f,c
  5139  00181C  0EFF               	movlw	255
  5140  00181E  163B               	andwf	(___fltol@f1+2)^0,f,c
  5141  001820  0E00               	movlw	0
  5142  001822  163C               	andwf	(___fltol@f1+3)^0,f,c
  5143  001824  0E96               	movlw	150
  5144  001826  5E42               	subwf	___fltol@exp1^0,f,c
  5145  001828  BE42               	btfsc	___fltol@exp1^0,7,c
  5146  00182A  EF1C  F00C         	goto	u2750
  5147  00182E  EF19  F00C         	goto	u2751
  5148  001832                     u2751:
  5149  001832  FFFF               	dw	65535	; assembler added errata NOP
  5150  001834  EF36  F00C         	goto	l3596
  5151  001838                     u2750:
  5152  001838  FFFF               	dw	65535	; assembler added errata NOP
  5153  00183A  5042               	movf	___fltol@exp1^0,w,c
  5154  00183C  0A80               	xorlw	128
  5155  00183E  0F97               	addlw	151
  5156  001840  B0D8               	btfsc	status,0,c
  5157  001842  EF25  F00C         	goto	u2761
  5158  001846  EF28  F00C         	goto	u2760
  5159  00184A                     u2761:
  5160  00184A  FFFF               	dw	65535	; assembler added errata NOP
  5161  00184C  EF2B  F00C         	goto	l3592
  5162  001850                     u2760:
  5163  001850  FFFF               	dw	65535	; assembler added errata NOP
  5164  001852  EFE6  F00B         	goto	l3572
  5165  001856                     l3592:
  5166  001856  FFFF               	dw	65535	; assembler added errata NOP
  5167  001858  90D8               	bcf	status,0,c
  5168  00185A  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5169  00185C  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5170  00185E  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5171  001860  3239               	rrcf	___fltol@f1^0,f,c
  5172  001862  3E42               	incfsz	___fltol@exp1^0,f,c
  5173  001864  EF2B  F00C         	goto	l3592
  5174  001868  EF54  F00C         	goto	l3606
  5175  00186C                     l3596:
  5176  00186C  FFFF               	dw	65535	; assembler added errata NOP
  5177  00186E  0E1F               	movlw	31
  5178  001870  6442               	cpfsgt	___fltol@exp1^0,c
  5179  001872  EF3D  F00C         	goto	u2771
  5180  001876  EF40  F00C         	goto	u2770
  5181  00187A                     u2771:
  5182  00187A  FFFF               	dw	65535	; assembler added errata NOP
  5183  00187C  EF4A  F00C         	goto	l3604
  5184  001880                     u2770:
  5185  001880  FFFF               	dw	65535	; assembler added errata NOP
  5186  001882  EFE6  F00B         	goto	l3572
  5187  001886                     l3602:
  5188  001886  FFFF               	dw	65535	; assembler added errata NOP
  5189  001888  90D8               	bcf	status,0,c
  5190  00188A  3639               	rlcf	___fltol@f1^0,f,c
  5191  00188C  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5192  00188E  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5193  001890  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5194  001892  0642               	decf	___fltol@exp1^0,f,c
  5195  001894                     l3604:
  5196  001894  FFFF               	dw	65535	; assembler added errata NOP
  5197  001896  5042               	movf	___fltol@exp1^0,w,c
  5198  001898  A4D8               	btfss	status,2,c
  5199  00189A  EF51  F00C         	goto	u2781
  5200  00189E  EF54  F00C         	goto	u2780
  5201  0018A2                     u2781:
  5202  0018A2  FFFF               	dw	65535	; assembler added errata NOP
  5203  0018A4  EF43  F00C         	goto	l3602
  5204  0018A8                     u2780:
  5205  0018A8                     l3606:
  5206  0018A8  FFFF               	dw	65535	; assembler added errata NOP
  5207  0018AA  5041               	movf	___fltol@sign1^0,w,c
  5208  0018AC  B4D8               	btfsc	status,2,c
  5209  0018AE  EF5B  F00C         	goto	u2791
  5210  0018B2  EF5E  F00C         	goto	u2790
  5211  0018B6                     u2791:
  5212  0018B6  FFFF               	dw	65535	; assembler added errata NOP
  5213  0018B8  EF67  F00C         	goto	l3610
  5214  0018BC                     u2790:
  5215  0018BC  FFFF               	dw	65535	; assembler added errata NOP
  5216  0018BE  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5217  0018C0  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5218  0018C2  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5219  0018C4  6C39               	negf	___fltol@f1^0,c
  5220  0018C6  0E00               	movlw	0
  5221  0018C8  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5222  0018CA  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5223  0018CC  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5224  0018CE                     l3610:
  5225  0018CE  FFFF               	dw	65535	; assembler added errata NOP
  5226  0018D0  C039  F039         	movff	___fltol@f1,?___fltol
  5227  0018D4  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5228  0018D8  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5229  0018DC  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5230  0018E0                     l886:
  5231  0018E0  FFFF               	dw	65535	; assembler added errata NOP
  5232  0018E2  0012               	return		;funcret
  5233  0018E4  FFFF               	dw	65535	; errata NOP
  5234  0018E6                     __end_of___fltol:
  5235                           	callstack 0
  5236                           
  5237 ;; *************** function ___fldiv *****************
  5238 ;; Defined at:
  5239 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;  b               4   31[COMRAM] long 
  5242 ;;  a               4   35[COMRAM] long 
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;  grs             4   50[COMRAM] unsigned long 
  5245 ;;  rem             4   43[COMRAM] unsigned long 
  5246 ;;  new_exp         2   48[COMRAM] short 
  5247 ;;  aexp            1   55[COMRAM] unsigned char 
  5248 ;;  bexp            1   54[COMRAM] unsigned char 
  5249 ;;  sign            1   47[COMRAM] unsigned char 
  5250 ;; Return value:  Size  Location     Type
  5251 ;;                  4   31[COMRAM] unsigned char 
  5252 ;; Registers used:
  5253 ;;		wreg, status,2, status,0
  5254 ;; Tracked objects:
  5255 ;;		On entry : 0/0
  5256 ;;		On exit  : 0/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5259 ;;      Params:         8       0       0       0       0       0       0
  5260 ;;      Locals:        13       0       0       0       0       0       0
  5261 ;;      Temps:          4       0       0       0       0       0       0
  5262 ;;      Totals:        25       0       0       0       0       0       0
  5263 ;;Total ram usage:       25 bytes
  5264 ;; Hardware stack levels used:    1
  5265 ;; Hardware stack levels required when called:    4
  5266 ;; This function calls:
  5267 ;;		Nothing
  5268 ;; This function is called by:
  5269 ;;		_rotateObj
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text33
  5274  000610                     __ptext33:
  5275                           	callstack 0
  5276  000610                     ___fldiv:
  5277                           	callstack 0
  5278  000610  FFFF               	dw	65535	; assembler added errata NOP
  5279  000612  5023               	movf	(___fldiv@b+3)^0,w,c
  5280  000614  0B80               	andlw	128
  5281  000616  6E30               	movwf	___fldiv@sign^0,c
  5282  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  5283  00061A  2423               	addwf	(___fldiv@b+3)^0,w,c
  5284  00061C  6E37               	movwf	___fldiv@bexp^0,c
  5285  00061E  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5286  000620  EF14  F003         	goto	u2501
  5287  000624  EF17  F003         	goto	u2500
  5288  000628                     u2501:
  5289  000628  FFFF               	dw	65535	; assembler added errata NOP
  5290  00062A  EF19  F003         	goto	l3438
  5291  00062E                     u2500:
  5292  00062E  FFFF               	dw	65535	; assembler added errata NOP
  5293  000630  8037               	bsf	___fldiv@bexp^0,0,c
  5294  000632                     l3438:
  5295  000632  FFFF               	dw	65535	; assembler added errata NOP
  5296  000634  5037               	movf	___fldiv@bexp^0,w,c
  5297  000636  B4D8               	btfsc	status,2,c
  5298  000638  EF20  F003         	goto	u2511
  5299  00063C  EF23  F003         	goto	u2510
  5300  000640                     u2511:
  5301  000640  FFFF               	dw	65535	; assembler added errata NOP
  5302  000642  EF3C  F003         	goto	l3448
  5303  000646                     u2510:
  5304  000646  FFFF               	dw	65535	; assembler added errata NOP
  5305  000648  2837               	incf	___fldiv@bexp^0,w,c
  5306  00064A  A4D8               	btfss	status,2,c
  5307  00064C  EF2A  F003         	goto	u2521
  5308  000650  EF2D  F003         	goto	u2520
  5309  000654                     u2521:
  5310  000654  FFFF               	dw	65535	; assembler added errata NOP
  5311  000656  EF36  F003         	goto	l3444
  5312  00065A                     u2520:
  5313  00065A  FFFF               	dw	65535	; assembler added errata NOP
  5314  00065C  0E00               	movlw	0
  5315  00065E  6E20               	movwf	___fldiv@b^0,c
  5316  000660  0E00               	movlw	0
  5317  000662  6E21               	movwf	(___fldiv@b+1)^0,c
  5318  000664  0E00               	movlw	0
  5319  000666  6E22               	movwf	(___fldiv@b+2)^0,c
  5320  000668  0E00               	movlw	0
  5321  00066A  6E23               	movwf	(___fldiv@b+3)^0,c
  5322  00066C                     l3444:
  5323  00066C  FFFF               	dw	65535	; assembler added errata NOP
  5324  00066E  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5325  000670  0E00               	movlw	0
  5326  000672  6E23               	movwf	(___fldiv@b+3)^0,c
  5327  000674  EF45  F003         	goto	l3450
  5328  000678                     l3448:
  5329  000678  FFFF               	dw	65535	; assembler added errata NOP
  5330  00067A  0E00               	movlw	0
  5331  00067C  6E20               	movwf	___fldiv@b^0,c
  5332  00067E  0E00               	movlw	0
  5333  000680  6E21               	movwf	(___fldiv@b+1)^0,c
  5334  000682  0E00               	movlw	0
  5335  000684  6E22               	movwf	(___fldiv@b+2)^0,c
  5336  000686  0E00               	movlw	0
  5337  000688  6E23               	movwf	(___fldiv@b+3)^0,c
  5338  00068A                     l3450:
  5339  00068A  FFFF               	dw	65535	; assembler added errata NOP
  5340  00068C  5027               	movf	(___fldiv@a+3)^0,w,c
  5341  00068E  0B80               	andlw	128
  5342  000690  1A30               	xorwf	___fldiv@sign^0,f,c
  5343  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  5344  000694  2427               	addwf	(___fldiv@a+3)^0,w,c
  5345  000696  6E38               	movwf	___fldiv@aexp^0,c
  5346  000698  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5347  00069A  EF51  F003         	goto	u2531
  5348  00069E  EF54  F003         	goto	u2530
  5349  0006A2                     u2531:
  5350  0006A2  FFFF               	dw	65535	; assembler added errata NOP
  5351  0006A4  EF56  F003         	goto	l3458
  5352  0006A8                     u2530:
  5353  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  5354  0006AA  8038               	bsf	___fldiv@aexp^0,0,c
  5355  0006AC                     l3458:
  5356  0006AC  FFFF               	dw	65535	; assembler added errata NOP
  5357  0006AE  5038               	movf	___fldiv@aexp^0,w,c
  5358  0006B0  B4D8               	btfsc	status,2,c
  5359  0006B2  EF5D  F003         	goto	u2541
  5360  0006B6  EF60  F003         	goto	u2540
  5361  0006BA                     u2541:
  5362  0006BA  FFFF               	dw	65535	; assembler added errata NOP
  5363  0006BC  EF79  F003         	goto	l3468
  5364  0006C0                     u2540:
  5365  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  5366  0006C2  2838               	incf	___fldiv@aexp^0,w,c
  5367  0006C4  A4D8               	btfss	status,2,c
  5368  0006C6  EF67  F003         	goto	u2551
  5369  0006CA  EF6A  F003         	goto	u2550
  5370  0006CE                     u2551:
  5371  0006CE  FFFF               	dw	65535	; assembler added errata NOP
  5372  0006D0  EF73  F003         	goto	l3464
  5373  0006D4                     u2550:
  5374  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  5375  0006D6  0E00               	movlw	0
  5376  0006D8  6E24               	movwf	___fldiv@a^0,c
  5377  0006DA  0E00               	movlw	0
  5378  0006DC  6E25               	movwf	(___fldiv@a+1)^0,c
  5379  0006DE  0E00               	movlw	0
  5380  0006E0  6E26               	movwf	(___fldiv@a+2)^0,c
  5381  0006E2  0E00               	movlw	0
  5382  0006E4  6E27               	movwf	(___fldiv@a+3)^0,c
  5383  0006E6                     l3464:
  5384  0006E6  FFFF               	dw	65535	; assembler added errata NOP
  5385  0006E8  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5386  0006EA  0E00               	movlw	0
  5387  0006EC  6E27               	movwf	(___fldiv@a+3)^0,c
  5388  0006EE  EF82  F003         	goto	l3470
  5389  0006F2                     l3468:
  5390  0006F2  FFFF               	dw	65535	; assembler added errata NOP
  5391  0006F4  0E00               	movlw	0
  5392  0006F6  6E24               	movwf	___fldiv@a^0,c
  5393  0006F8  0E00               	movlw	0
  5394  0006FA  6E25               	movwf	(___fldiv@a+1)^0,c
  5395  0006FC  0E00               	movlw	0
  5396  0006FE  6E26               	movwf	(___fldiv@a+2)^0,c
  5397  000700  0E00               	movlw	0
  5398  000702  6E27               	movwf	(___fldiv@a+3)^0,c
  5399  000704                     l3470:
  5400  000704  FFFF               	dw	65535	; assembler added errata NOP
  5401  000706  5024               	movf	___fldiv@a^0,w,c
  5402  000708  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5403  00070A  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5404  00070C  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5405  00070E  A4D8               	btfss	status,2,c
  5406  000710  EF8C  F003         	goto	u2561
  5407  000714  EF8F  F003         	goto	u2560
  5408  000718                     u2561:
  5409  000718  FFFF               	dw	65535	; assembler added errata NOP
  5410  00071A  EFA9  F003         	goto	l3482
  5411  00071E                     u2560:
  5412  00071E  FFFF               	dw	65535	; assembler added errata NOP
  5413  000720  0E00               	movlw	0
  5414  000722  6E20               	movwf	___fldiv@b^0,c
  5415  000724  0E00               	movlw	0
  5416  000726  6E21               	movwf	(___fldiv@b+1)^0,c
  5417  000728  0E00               	movlw	0
  5418  00072A  6E22               	movwf	(___fldiv@b+2)^0,c
  5419  00072C  0E00               	movlw	0
  5420  00072E  6E23               	movwf	(___fldiv@b+3)^0,c
  5421  000730  0E80               	movlw	128
  5422  000732  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5423  000734  0E7F               	movlw	127
  5424  000736  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5425  000738                     l3476:
  5426  000738  FFFF               	dw	65535	; assembler added errata NOP
  5427  00073A  5030               	movf	___fldiv@sign^0,w,c
  5428  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5429  00073E  C020  F020         	movff	___fldiv@b,?___fldiv
  5430  000742  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5431  000746  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5432  00074A  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5433  00074E  EF1E  F005         	goto	l1171
  5434  000752                     l3482:
  5435  000752  FFFF               	dw	65535	; assembler added errata NOP
  5436  000754  5037               	movf	___fldiv@bexp^0,w,c
  5437  000756  A4D8               	btfss	status,2,c
  5438  000758  EFB0  F003         	goto	u2571
  5439  00075C  EFB3  F003         	goto	u2570
  5440  000760                     u2571:
  5441  000760  FFFF               	dw	65535	; assembler added errata NOP
  5442  000762  EFBE  F003         	goto	l3490
  5443  000766                     u2570:
  5444  000766  FFFF               	dw	65535	; assembler added errata NOP
  5445  000768  0E00               	movlw	0
  5446  00076A  6E20               	movwf	?___fldiv^0,c
  5447  00076C  0E00               	movlw	0
  5448  00076E  6E21               	movwf	(?___fldiv+1)^0,c
  5449  000770  0E00               	movlw	0
  5450  000772  6E22               	movwf	(?___fldiv+2)^0,c
  5451  000774  0E00               	movlw	0
  5452  000776  6E23               	movwf	(?___fldiv+3)^0,c
  5453  000778  EF1E  F005         	goto	l1171
  5454  00077C                     l3490:
  5455  00077C  FFFF               	dw	65535	; assembler added errata NOP
  5456  00077E  5038               	movf	___fldiv@aexp^0,w,c
  5457  000780  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5458  000784  6A29               	clrf	(??___fldiv+1)^0,c
  5459  000786  5E28               	subwf	??___fldiv^0,f,c
  5460  000788  0E00               	movlw	0
  5461  00078A  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5462  00078C  0E7F               	movlw	127
  5463  00078E  2428               	addwf	??___fldiv^0,w,c
  5464  000790  6E31               	movwf	___fldiv@new_exp^0,c
  5465  000792  0E00               	movlw	0
  5466  000794  2029               	addwfc	(??___fldiv+1)^0,w,c
  5467  000796  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5468  000798  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5469  00079C  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5470  0007A0  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5471  0007A4  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5472  0007A8  0E00               	movlw	0
  5473  0007AA  6E20               	movwf	___fldiv@b^0,c
  5474  0007AC  0E00               	movlw	0
  5475  0007AE  6E21               	movwf	(___fldiv@b+1)^0,c
  5476  0007B0  0E00               	movlw	0
  5477  0007B2  6E22               	movwf	(___fldiv@b+2)^0,c
  5478  0007B4  0E00               	movlw	0
  5479  0007B6  6E23               	movwf	(___fldiv@b+3)^0,c
  5480  0007B8  0E00               	movlw	0
  5481  0007BA  6E33               	movwf	___fldiv@grs^0,c
  5482  0007BC  0E00               	movlw	0
  5483  0007BE  6E34               	movwf	(___fldiv@grs+1)^0,c
  5484  0007C0  0E00               	movlw	0
  5485  0007C2  6E35               	movwf	(___fldiv@grs+2)^0,c
  5486  0007C4  0E00               	movlw	0
  5487  0007C6  6E36               	movwf	(___fldiv@grs+3)^0,c
  5488  0007C8  0E00               	movlw	0
  5489  0007CA  6E38               	movwf	___fldiv@aexp^0,c
  5490  0007CC  EF2A  F004         	goto	l1173
  5491  0007D0                     l3500:
  5492  0007D0  FFFF               	dw	65535	; assembler added errata NOP
  5493  0007D2  5038               	movf	___fldiv@aexp^0,w,c
  5494  0007D4  B4D8               	btfsc	status,2,c
  5495  0007D6  EFEF  F003         	goto	u2581
  5496  0007DA  EFF2  F003         	goto	u2580
  5497  0007DE                     u2581:
  5498  0007DE  FFFF               	dw	65535	; assembler added errata NOP
  5499  0007E0  EF0D  F004         	goto	l3508
  5500  0007E4                     u2580:
  5501  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  5502  0007E6  90D8               	bcf	status,0,c
  5503  0007E8  362C               	rlcf	___fldiv@rem^0,f,c
  5504  0007EA  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5505  0007EC  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5506  0007EE  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5507  0007F0  90D8               	bcf	status,0,c
  5508  0007F2  3620               	rlcf	___fldiv@b^0,f,c
  5509  0007F4  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5510  0007F6  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5511  0007F8  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5512  0007FA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5513  0007FC  EF02  F004         	goto	u2591
  5514  000800  EF05  F004         	goto	u2590
  5515  000804                     u2591:
  5516  000804  FFFF               	dw	65535	; assembler added errata NOP
  5517  000806  EF07  F004         	goto	l1176
  5518  00080A                     u2590:
  5519  00080A  FFFF               	dw	65535	; assembler added errata NOP
  5520  00080C  8020               	bsf	___fldiv@b^0,0,c
  5521  00080E                     l1176:
  5522  00080E  FFFF               	dw	65535	; assembler added errata NOP
  5523  000810  90D8               	bcf	status,0,c
  5524  000812  3633               	rlcf	___fldiv@grs^0,f,c
  5525  000814  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5526  000816  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5527  000818  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5528  00081A                     l3508:
  5529  00081A  FFFF               	dw	65535	; assembler added errata NOP
  5530  00081C  5024               	movf	___fldiv@a^0,w,c
  5531  00081E  5C2C               	subwf	___fldiv@rem^0,w,c
  5532  000820  5025               	movf	(___fldiv@a+1)^0,w,c
  5533  000822  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5534  000824  5026               	movf	(___fldiv@a+2)^0,w,c
  5535  000826  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5536  000828  5027               	movf	(___fldiv@a+3)^0,w,c
  5537  00082A  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5538  00082C  A0D8               	btfss	status,0,c
  5539  00082E  EF1B  F004         	goto	u2601
  5540  000832  EF1E  F004         	goto	u2600
  5541  000836                     u2601:
  5542  000836  FFFF               	dw	65535	; assembler added errata NOP
  5543  000838  EF28  F004         	goto	l3514
  5544  00083C                     u2600:
  5545  00083C  FFFF               	dw	65535	; assembler added errata NOP
  5546  00083E  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5547  000840  5024               	movf	___fldiv@a^0,w,c
  5548  000842  5E2C               	subwf	___fldiv@rem^0,f,c
  5549  000844  5025               	movf	(___fldiv@a+1)^0,w,c
  5550  000846  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5551  000848  5026               	movf	(___fldiv@a+2)^0,w,c
  5552  00084A  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5553  00084C  5027               	movf	(___fldiv@a+3)^0,w,c
  5554  00084E  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5555  000850                     l3514:
  5556  000850  FFFF               	dw	65535	; assembler added errata NOP
  5557  000852  2A38               	incf	___fldiv@aexp^0,f,c
  5558  000854                     l1173:
  5559  000854  FFFF               	dw	65535	; assembler added errata NOP
  5560  000856  0E19               	movlw	25
  5561  000858  6438               	cpfsgt	___fldiv@aexp^0,c
  5562  00085A  EF31  F004         	goto	u2611
  5563  00085E  EF34  F004         	goto	u2610
  5564  000862                     u2611:
  5565  000862  FFFF               	dw	65535	; assembler added errata NOP
  5566  000864  EFE8  F003         	goto	l3500
  5567  000868                     u2610:
  5568  000868  FFFF               	dw	65535	; assembler added errata NOP
  5569  00086A  502C               	movf	___fldiv@rem^0,w,c
  5570  00086C  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5571  00086E  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5572  000870  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5573  000872  B4D8               	btfsc	status,2,c
  5574  000874  EF3E  F004         	goto	u2621
  5575  000878  EF41  F004         	goto	u2620
  5576  00087C                     u2621:
  5577  00087C  FFFF               	dw	65535	; assembler added errata NOP
  5578  00087E  EF5E  F004         	goto	l3526
  5579  000882                     u2620:
  5580  000882  FFFF               	dw	65535	; assembler added errata NOP
  5581  000884  8033               	bsf	___fldiv@grs^0,0,c
  5582  000886  EF5E  F004         	goto	l3526
  5583  00088A                     l3520:
  5584  00088A  FFFF               	dw	65535	; assembler added errata NOP
  5585  00088C  90D8               	bcf	status,0,c
  5586  00088E  3620               	rlcf	___fldiv@b^0,f,c
  5587  000890  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5588  000892  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5589  000894  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5590  000896  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5591  000898  EF50  F004         	goto	u2631
  5592  00089C  EF53  F004         	goto	u2630
  5593  0008A0                     u2631:
  5594  0008A0  FFFF               	dw	65535	; assembler added errata NOP
  5595  0008A2  EF55  F004         	goto	l1182
  5596  0008A6                     u2630:
  5597  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5598  0008A8  8020               	bsf	___fldiv@b^0,0,c
  5599  0008AA                     l1182:
  5600  0008AA  FFFF               	dw	65535	; assembler added errata NOP
  5601  0008AC  90D8               	bcf	status,0,c
  5602  0008AE  3633               	rlcf	___fldiv@grs^0,f,c
  5603  0008B0  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5604  0008B2  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5605  0008B4  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5606  0008B6  0631               	decf	___fldiv@new_exp^0,f,c
  5607  0008B8  A0D8               	btfss	status,0,c
  5608  0008BA  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5609  0008BC                     l3526:
  5610  0008BC  FFFF               	dw	65535	; assembler added errata NOP
  5611  0008BE  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5612  0008C0  EF64  F004         	goto	u2641
  5613  0008C4  EF67  F004         	goto	u2640
  5614  0008C8                     u2641:
  5615  0008C8  FFFF               	dw	65535	; assembler added errata NOP
  5616  0008CA  EF45  F004         	goto	l3520
  5617  0008CE                     u2640:
  5618  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5619  0008D0  0E00               	movlw	0
  5620  0008D2  6E38               	movwf	___fldiv@aexp^0,c
  5621  0008D4  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5622  0008D6  EF6F  F004         	goto	u2651
  5623  0008DA  EF72  F004         	goto	u2650
  5624  0008DE                     u2651:
  5625  0008DE  FFFF               	dw	65535	; assembler added errata NOP
  5626  0008E0  EF9D  F004         	goto	l1184
  5627  0008E4                     u2650:
  5628  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5629  0008E6  0EFF               	movlw	255
  5630  0008E8  1433               	andwf	___fldiv@grs^0,w,c
  5631  0008EA  6E28               	movwf	??___fldiv^0,c
  5632  0008EC  0EFF               	movlw	255
  5633  0008EE  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5634  0008F0  6E29               	movwf	(??___fldiv+1)^0,c
  5635  0008F2  0EFF               	movlw	255
  5636  0008F4  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5637  0008F6  6E2A               	movwf	(??___fldiv+2)^0,c
  5638  0008F8  0E7F               	movlw	127
  5639  0008FA  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5640  0008FC  6E2B               	movwf	(??___fldiv+3)^0,c
  5641  0008FE  5028               	movf	??___fldiv^0,w,c
  5642  000900  1029               	iorwf	(??___fldiv+1)^0,w,c
  5643  000902  102A               	iorwf	(??___fldiv+2)^0,w,c
  5644  000904  102B               	iorwf	(??___fldiv+3)^0,w,c
  5645  000906  B4D8               	btfsc	status,2,c
  5646  000908  EF88  F004         	goto	u2661
  5647  00090C  EF8B  F004         	goto	u2660
  5648  000910                     u2661:
  5649  000910  FFFF               	dw	65535	; assembler added errata NOP
  5650  000912  EF91  F004         	goto	l1185
  5651  000916                     u2660:
  5652  000916  FFFF               	dw	65535	; assembler added errata NOP
  5653  000918                     l3534:
  5654  000918  FFFF               	dw	65535	; assembler added errata NOP
  5655  00091A  0E01               	movlw	1
  5656  00091C  6E38               	movwf	___fldiv@aexp^0,c
  5657  00091E  EF9D  F004         	goto	l1184
  5658  000922                     l1185:
  5659  000922  FFFF               	dw	65535	; assembler added errata NOP
  5660  000924  A020               	btfss	___fldiv@b^0,0,c
  5661  000926  EF97  F004         	goto	u2671
  5662  00092A  EF9A  F004         	goto	u2670
  5663  00092E                     u2671:
  5664  00092E  FFFF               	dw	65535	; assembler added errata NOP
  5665  000930  EF9D  F004         	goto	l1184
  5666  000934                     u2670:
  5667  000934  FFFF               	dw	65535	; assembler added errata NOP
  5668  000936  EF8C  F004         	goto	l3534
  5669  00093A                     l1184:
  5670  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5671  00093C  5038               	movf	___fldiv@aexp^0,w,c
  5672  00093E  B4D8               	btfsc	status,2,c
  5673  000940  EFA4  F004         	goto	u2681
  5674  000944  EFA7  F004         	goto	u2680
  5675  000948                     u2681:
  5676  000948  FFFF               	dw	65535	; assembler added errata NOP
  5677  00094A  EFCE  F004         	goto	l3546
  5678  00094E                     u2680:
  5679  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5680  000950  0E01               	movlw	1
  5681  000952  2620               	addwf	___fldiv@b^0,f,c
  5682  000954  0E00               	movlw	0
  5683  000956  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5684  000958  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5685  00095A  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5686  00095C  A023               	btfss	(___fldiv@b+3)^0,0,c
  5687  00095E  EFB3  F004         	goto	u2691
  5688  000962  EFB6  F004         	goto	u2690
  5689  000966                     u2691:
  5690  000966  FFFF               	dw	65535	; assembler added errata NOP
  5691  000968  EFCE  F004         	goto	l3546
  5692  00096C                     u2690:
  5693  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5694  00096E  C020  F028         	movff	___fldiv@b,??___fldiv
  5695  000972  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5696  000976  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5697  00097A  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5698  00097E  342B               	rlcf	(??___fldiv+3)^0,w,c
  5699  000980  322B               	rrcf	(??___fldiv+3)^0,f,c
  5700  000982  322A               	rrcf	(??___fldiv+2)^0,f,c
  5701  000984  3229               	rrcf	(??___fldiv+1)^0,f,c
  5702  000986  3228               	rrcf	??___fldiv^0,f,c
  5703  000988  C028  F020         	movff	??___fldiv,___fldiv@b
  5704  00098C  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5705  000990  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5706  000994  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5707  000998  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5708  00099A  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5709  00099C                     l3546:
  5710  00099C  FFFF               	dw	65535	; assembler added errata NOP
  5711  00099E  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5712  0009A0  EFDA  F004         	goto	u2701
  5713  0009A4  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5714  0009A6  E109               	bnz	u2700
  5715  0009A8  2831               	incf	___fldiv@new_exp^0,w,c
  5716  0009AA  A0D8               	btfss	status,0,c
  5717  0009AC  EFDA  F004         	goto	u2701
  5718  0009B0  EFDD  F004         	goto	u2700
  5719  0009B4                     u2701:
  5720  0009B4  FFFF               	dw	65535	; assembler added errata NOP
  5721  0009B6  EFE9  F004         	goto	l3550
  5722  0009BA                     u2700:
  5723  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5724  0009BC  0E00               	movlw	0
  5725  0009BE  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5726  0009C0  6831               	setf	___fldiv@new_exp^0,c
  5727  0009C2  0E00               	movlw	0
  5728  0009C4  6E20               	movwf	___fldiv@b^0,c
  5729  0009C6  0E00               	movlw	0
  5730  0009C8  6E21               	movwf	(___fldiv@b+1)^0,c
  5731  0009CA  0E00               	movlw	0
  5732  0009CC  6E22               	movwf	(___fldiv@b+2)^0,c
  5733  0009CE  0E00               	movlw	0
  5734  0009D0  6E23               	movwf	(___fldiv@b+3)^0,c
  5735  0009D2                     l3550:
  5736  0009D2  FFFF               	dw	65535	; assembler added errata NOP
  5737  0009D4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5738  0009D6  EFF8  F004         	goto	u2710
  5739  0009DA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5740  0009DC  E106               	bnz	u2711
  5741  0009DE  0431               	decf	___fldiv@new_exp^0,w,c
  5742  0009E0  B0D8               	btfsc	status,0,c
  5743  0009E2  EFF5  F004         	goto	u2711
  5744  0009E6  EFF8  F004         	goto	u2710
  5745  0009EA                     u2711:
  5746  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  5747  0009EC  EF07  F005         	goto	l3554
  5748  0009F0                     u2710:
  5749  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5750  0009F2  0E00               	movlw	0
  5751  0009F4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5752  0009F6  0E00               	movlw	0
  5753  0009F8  6E31               	movwf	___fldiv@new_exp^0,c
  5754  0009FA  0E00               	movlw	0
  5755  0009FC  6E20               	movwf	___fldiv@b^0,c
  5756  0009FE  0E00               	movlw	0
  5757  000A00  6E21               	movwf	(___fldiv@b+1)^0,c
  5758  000A02  0E00               	movlw	0
  5759  000A04  6E22               	movwf	(___fldiv@b+2)^0,c
  5760  000A06  0E00               	movlw	0
  5761  000A08  6E23               	movwf	(___fldiv@b+3)^0,c
  5762  000A0A  0E00               	movlw	0
  5763  000A0C  6E30               	movwf	___fldiv@sign^0,c
  5764  000A0E                     l3554:
  5765  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  5766  000A10  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5767  000A14  A037               	btfss	___fldiv@bexp^0,0,c
  5768  000A16  EF0F  F005         	goto	u2721
  5769  000A1A  EF12  F005         	goto	u2720
  5770  000A1E                     u2721:
  5771  000A1E  FFFF               	dw	65535	; assembler added errata NOP
  5772  000A20  EF16  F005         	goto	l3560
  5773  000A24                     u2720:
  5774  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5775  000A26  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5776  000A28  EF18  F005         	goto	l3562
  5777  000A2C                     l3560:
  5778  000A2C  FFFF               	dw	65535	; assembler added errata NOP
  5779  000A2E  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5780  000A30                     l3562:
  5781  000A30  FFFF               	dw	65535	; assembler added errata NOP
  5782  000A32  90D8               	bcf	status,0,c
  5783  000A34  3037               	rrcf	___fldiv@bexp^0,w,c
  5784  000A36  6E23               	movwf	(___fldiv@b+3)^0,c
  5785  000A38  EF9C  F003         	goto	l3476
  5786  000A3C                     l1171:
  5787  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  5788  000A3E  0012               	return		;funcret
  5789  000A40  FFFF               	dw	65535	; errata NOP
  5790  000A42                     __end_of___fldiv:
  5791                           	callstack 0
  5792                           
  5793 ;; *************** function _releaseObj *****************
  5794 ;; Defined at:
  5795 ;;		line 608 in file "motors.c"
  5796 ;; Parameters:    Size  Location     Type
  5797 ;;		None
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;		None
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  1    wreg      void 
  5802 ;; Registers used:
  5803 ;;		wreg, status,2, status,0, cstack
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5809 ;;      Params:         0       0       0       0       0       0       0
  5810 ;;      Locals:         0       0       0       0       0       0       0
  5811 ;;      Temps:          0       0       0       0       0       0       0
  5812 ;;      Totals:         0       0       0       0       0       0       0
  5813 ;;Total ram usage:        0 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:    5
  5816 ;; This function calls:
  5817 ;;		_stepMade
  5818 ;; This function is called by:
  5819 ;;		_executeData
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           	psect	text34
  5824  0023EA                     __ptext34:
  5825                           	callstack 0
  5826  0023EA                     _releaseObj:
  5827                           	callstack 0
  5828  0023EA  FFFF               	dw	65535	; assembler added errata NOP
  5829  0023EC                     
  5830                           ;motors.c: 609:     LATDbits.LATD1 = 0;
  5831  0023EC  928C               	bcf	140,1,c	;volatile
  5832  0023EE                     l3926:
  5833  0023EE  FFFF               	dw	65535	; assembler added errata NOP
  5834  0023F0  EC32  F012         	call	_stepMade	;wreg free
  5835  0023F4  5012               	movf	?_stepMade^0,w,c
  5836  0023F6  1013               	iorwf	(?_stepMade+1)^0,w,c
  5837  0023F8  B4D8               	btfsc	status,2,c
  5838  0023FA  EF01  F012         	goto	u3321
  5839  0023FE  EF04  F012         	goto	u3320
  5840  002402                     u3321:
  5841  002402  FFFF               	dw	65535	; assembler added errata NOP
  5842  002404  EFF7  F011         	goto	l3926
  5843  002408                     u3320:
  5844  002408  FFFF               	dw	65535	; assembler added errata NOP
  5845  00240A  0012               	return		;funcret
  5846  00240C  FFFF               	dw	65535	; errata NOP
  5847  00240E                     __end_of_releaseObj:
  5848                           	callstack 0
  5849                           
  5850 ;; *************** function _pickObject *****************
  5851 ;; Defined at:
  5852 ;;		line 597 in file "motors.c"
  5853 ;; Parameters:    Size  Location     Type
  5854 ;;		None
  5855 ;; Auto vars:     Size  Location     Type
  5856 ;;		None
  5857 ;; Return value:  Size  Location     Type
  5858 ;;                  1    wreg      void 
  5859 ;; Registers used:
  5860 ;;		wreg, status,2, status,0, cstack
  5861 ;; Tracked objects:
  5862 ;;		On entry : 0/0
  5863 ;;		On exit  : 0/0
  5864 ;;		Unchanged: 0/0
  5865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5866 ;;      Params:         0       0       0       0       0       0       0
  5867 ;;      Locals:         0       0       0       0       0       0       0
  5868 ;;      Temps:          0       0       0       0       0       0       0
  5869 ;;      Totals:         0       0       0       0       0       0       0
  5870 ;;Total ram usage:        0 bytes
  5871 ;; Hardware stack levels used:    1
  5872 ;; Hardware stack levels required when called:    5
  5873 ;; This function calls:
  5874 ;;		_stepMade
  5875 ;; This function is called by:
  5876 ;;		_executeData
  5877 ;; This function uses a non-reentrant model
  5878 ;;
  5879                           
  5880                           	psect	text35
  5881  00240E                     __ptext35:
  5882                           	callstack 0
  5883  00240E                     _pickObject:
  5884                           	callstack 0
  5885  00240E  FFFF               	dw	65535	; assembler added errata NOP
  5886  002410                     
  5887                           ;motors.c: 598:     LATDbits.LATD1 = 1;
  5888  002410  828C               	bsf	140,1,c	;volatile
  5889  002412                     l3922:
  5890  002412  FFFF               	dw	65535	; assembler added errata NOP
  5891  002414  EC32  F012         	call	_stepMade	;wreg free
  5892  002418  5012               	movf	?_stepMade^0,w,c
  5893  00241A  1013               	iorwf	(?_stepMade+1)^0,w,c
  5894  00241C  B4D8               	btfsc	status,2,c
  5895  00241E  EF13  F012         	goto	u3311
  5896  002422  EF16  F012         	goto	u3310
  5897  002426                     u3311:
  5898  002426  FFFF               	dw	65535	; assembler added errata NOP
  5899  002428  EF09  F012         	goto	l3922
  5900  00242C                     u3310:
  5901  00242C  FFFF               	dw	65535	; assembler added errata NOP
  5902  00242E  0012               	return		;funcret
  5903  002430  FFFF               	dw	65535	; errata NOP
  5904  002432                     __end_of_pickObject:
  5905                           	callstack 0
  5906                           
  5907 ;; *************** function _moveToPoint *****************
  5908 ;; Defined at:
  5909 ;;		line 264 in file "motors.c"
  5910 ;; Parameters:    Size  Location     Type
  5911 ;;  x1              2   21[COMRAM] unsigned int 
  5912 ;;  y1              2   23[COMRAM] unsigned int 
  5913 ;;  x2              2   25[COMRAM] unsigned int 
  5914 ;;  y2              2   27[COMRAM] unsigned int 
  5915 ;; Auto vars:     Size  Location     Type
  5916 ;;  MOT2Directio    1   34[COMRAM] unsigned char 
  5917 ;;  MOT1Directio    1   33[COMRAM] unsigned char 
  5918 ;;  keepMovingY     1   32[COMRAM] unsigned char 
  5919 ;;  keepMovingX     1   31[COMRAM] unsigned char 
  5920 ;; Return value:  Size  Location     Type
  5921 ;;                  1    wreg      unsigned char 
  5922 ;; Registers used:
  5923 ;;		wreg, status,2, status,0, cstack
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 0/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5929 ;;      Params:         8       0       0       0       0       0       0
  5930 ;;      Locals:         4       0       0       0       0       0       0
  5931 ;;      Temps:          2       0       0       0       0       0       0
  5932 ;;      Totals:        14       0       0       0       0       0       0
  5933 ;;Total ram usage:       14 bytes
  5934 ;; Hardware stack levels used:    1
  5935 ;; Hardware stack levels required when called:    5
  5936 ;; This function calls:
  5937 ;;		_resetStep
  5938 ;;		_setDirection
  5939 ;;		_stepCounter
  5940 ;;		_stepMade
  5941 ;; This function is called by:
  5942 ;;		_executeData
  5943 ;; This function uses a non-reentrant model
  5944 ;;
  5945                           
  5946                           	psect	text36
  5947  000A42                     __ptext36:
  5948                           	callstack 0
  5949  000A42                     _moveToPoint:
  5950                           	callstack 0
  5951  000A42  FFFF               	dw	65535	; assembler added errata NOP
  5952  000A44                     
  5953                           ;motors.c: 266:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 269:     if(x2
      +                           > maxX || y2 > maxY){
  5954  000A44  0EE9               	movlw	233
  5955  000A46  5C1A               	subwf	moveToPoint@x2^0,w,c
  5956  000A48  0E03               	movlw	3
  5957  000A4A  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5958  000A4C  B0D8               	btfsc	status,0,c
  5959  000A4E  EF2B  F005         	goto	u2961
  5960  000A52  EF2E  F005         	goto	u2960
  5961  000A56                     u2961:
  5962  000A56  FFFF               	dw	65535	; assembler added errata NOP
  5963  000A58  EF3B  F005         	goto	l3712
  5964  000A5C                     u2960:
  5965  000A5C  FFFF               	dw	65535	; assembler added errata NOP
  5966  000A5E  0EE9               	movlw	233
  5967  000A60  5C1C               	subwf	moveToPoint@y2^0,w,c
  5968  000A62  0E03               	movlw	3
  5969  000A64  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  5970  000A66  A0D8               	btfss	status,0,c
  5971  000A68  EF38  F005         	goto	u2971
  5972  000A6C  EF3B  F005         	goto	u2970
  5973  000A70                     u2971:
  5974  000A70  FFFF               	dw	65535	; assembler added errata NOP
  5975  000A72  EF3F  F005         	goto	l3716
  5976  000A76                     u2970:
  5977  000A76                     l3712:
  5978  000A76  FFFF               	dw	65535	; assembler added errata NOP
  5979                           
  5980                           ;motors.c: 270:         return(5);
  5981  000A78  0E05               	movlw	5
  5982  000A7A  EF7F  F006         	goto	l141
  5983  000A7E                     l3716:
  5984  000A7E  FFFF               	dw	65535	; assembler added errata NOP
  5985                           
  5986                           ;motors.c: 274:     if((x2 - x1) > 0){
  5987  000A80  5016               	movf	moveToPoint@x1^0,w,c
  5988  000A82  5C1A               	subwf	moveToPoint@x2^0,w,c
  5989  000A84  6E1E               	movwf	??_moveToPoint^0,c
  5990  000A86  5017               	movf	(moveToPoint@x1+1)^0,w,c
  5991  000A88  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5992  000A8A  6E1F               	movwf	(??_moveToPoint+1)^0,c
  5993  000A8C  501E               	movf	??_moveToPoint^0,w,c
  5994  000A8E  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  5995  000A90  B4D8               	btfsc	status,2,c
  5996  000A92  EF4D  F005         	goto	u2981
  5997  000A96  EF50  F005         	goto	u2980
  5998  000A9A                     u2981:
  5999  000A9A  FFFF               	dw	65535	; assembler added errata NOP
  6000  000A9C  EF5A  F005         	goto	l3722
  6001  000AA0                     u2980:
  6002  000AA0  FFFF               	dw	65535	; assembler added errata NOP
  6003  000AA2                     
  6004                           ;motors.c: 275:         setDirection(1, 0);
  6005  000AA2  0E00               	movlw	0
  6006  000AA4  6E12               	movwf	setDirection@motor^0,c
  6007  000AA6  0E01               	movlw	1
  6008  000AA8  ECCE  F010         	call	_setDirection
  6009  000AAC                     
  6010                           ;motors.c: 276:         MOT1Direction = 1;
  6011  000AAC  0E01               	movlw	1
  6012  000AAE  6E22               	movwf	moveToPoint@MOT1Direction^0,c
  6013                           
  6014                           ;motors.c: 277:     }else{
  6015  000AB0  EF62  F005         	goto	l3726
  6016  000AB4                     l3722:
  6017  000AB4  FFFF               	dw	65535	; assembler added errata NOP
  6018                           
  6019                           ;motors.c: 278:         setDirection(0, 0);
  6020  000AB6  0E00               	movlw	0
  6021  000AB8  6E12               	movwf	setDirection@motor^0,c
  6022  000ABA  0E00               	movlw	0
  6023  000ABC  ECCE  F010         	call	_setDirection
  6024  000AC0                     
  6025                           ;motors.c: 279:         MOT1Direction = 0;
  6026  000AC0  0E00               	movlw	0
  6027  000AC2  6E22               	movwf	moveToPoint@MOT1Direction^0,c
  6028  000AC4                     l3726:
  6029  000AC4  FFFF               	dw	65535	; assembler added errata NOP
  6030                           
  6031                           ;motors.c: 282:     if((y2 - y1) > 0){
  6032  000AC6  5018               	movf	moveToPoint@y1^0,w,c
  6033  000AC8  5C1C               	subwf	moveToPoint@y2^0,w,c
  6034  000ACA  6E1E               	movwf	??_moveToPoint^0,c
  6035  000ACC  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6036  000ACE  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  6037  000AD0  6E1F               	movwf	(??_moveToPoint+1)^0,c
  6038  000AD2  501E               	movf	??_moveToPoint^0,w,c
  6039  000AD4  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  6040  000AD6  B4D8               	btfsc	status,2,c
  6041  000AD8  EF70  F005         	goto	u2991
  6042  000ADC  EF73  F005         	goto	u2990
  6043  000AE0                     u2991:
  6044  000AE0  FFFF               	dw	65535	; assembler added errata NOP
  6045  000AE2  EF7D  F005         	goto	l3732
  6046  000AE6                     u2990:
  6047  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  6048  000AE8                     
  6049                           ;motors.c: 283:         setDirection(1, 1);
  6050  000AE8  0E01               	movlw	1
  6051  000AEA  6E12               	movwf	setDirection@motor^0,c
  6052  000AEC  0E01               	movlw	1
  6053  000AEE  ECCE  F010         	call	_setDirection
  6054  000AF2                     
  6055                           ;motors.c: 284:         MOT2Direction = 1;
  6056  000AF2  0E01               	movlw	1
  6057  000AF4  6E23               	movwf	moveToPoint@MOT2Direction^0,c
  6058                           
  6059                           ;motors.c: 285:     }else{
  6060  000AF6  EF85  F005         	goto	l3736
  6061  000AFA                     l3732:
  6062  000AFA  FFFF               	dw	65535	; assembler added errata NOP
  6063                           
  6064                           ;motors.c: 286:         setDirection(0, 1);
  6065  000AFC  0E01               	movlw	1
  6066  000AFE  6E12               	movwf	setDirection@motor^0,c
  6067  000B00  0E00               	movlw	0
  6068  000B02  ECCE  F010         	call	_setDirection
  6069  000B06                     
  6070                           ;motors.c: 287:         MOT2Direction = 0;
  6071  000B06  0E00               	movlw	0
  6072  000B08  6E23               	movwf	moveToPoint@MOT2Direction^0,c
  6073  000B0A                     l3736:
  6074  000B0A  FFFF               	dw	65535	; assembler added errata NOP
  6075                           
  6076                           ;motors.c: 290:     unsigned char keepMovingX = 1;
  6077  000B0C  0E01               	movlw	1
  6078  000B0E  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6079  000B10                     
  6080                           ;motors.c: 291:     unsigned char keepMovingY = 1;
  6081  000B10  0E01               	movlw	1
  6082  000B12  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6083  000B14                     
  6084                           ;motors.c: 294:     T2CONbits.TMR2ON = 1;
  6085  000B14  84CA               	bsf	202,2,c	;volatile
  6086  000B16                     
  6087                           ;motors.c: 296:     tm0Error = 0;
  6088  000B16  0E00               	movlw	0
  6089  000B18  6E5C               	movwf	(_tm0Error+1)^0,c
  6090  000B1A  0E00               	movlw	0
  6091  000B1C  6E5B               	movwf	_tm0Error^0,c
  6092  000B1E                     
  6093                           ;motors.c: 297:     tm0Limit = 200;
  6094  000B1E  0EC8               	movlw	200
  6095  000B20  6E68               	movwf	_tm0Limit^0,c
  6096  000B22                     
  6097                           ;motors.c: 298:     T0CONbits.TMR0ON = 1;
  6098  000B22  8ED5               	bsf	213,7,c	;volatile
  6099                           
  6100                           ;motors.c: 300:     while(keepMovingX || keepMovingY){
  6101  000B24  EF5F  F006         	goto	l3782
  6102  000B28                     l3748:
  6103  000B28  FFFF               	dw	65535	; assembler added errata NOP
  6104                           
  6105                           ;motors.c: 303:         if(tm0Error){
  6106  000B2A  505B               	movf	_tm0Error^0,w,c
  6107  000B2C  105C               	iorwf	(_tm0Error+1)^0,w,c
  6108  000B2E  B4D8               	btfsc	status,2,c
  6109  000B30  EF9C  F005         	goto	u3001
  6110  000B34  EF9F  F005         	goto	u3000
  6111  000B38                     u3001:
  6112  000B38  FFFF               	dw	65535	; assembler added errata NOP
  6113  000B3A  EFA8  F005         	goto	l3754
  6114  000B3E                     u3000:
  6115  000B3E  FFFF               	dw	65535	; assembler added errata NOP
  6116  000B40                     
  6117                           ;motors.c: 305:             LATAbits.LATA2 = 0;
  6118  000B40  9489               	bcf	137,2,c	;volatile
  6119                           
  6120                           ;motors.c: 306:             LATBbits.LATB4 = 0;
  6121  000B42  988A               	bcf	138,4,c	;volatile
  6122  000B44                     
  6123                           ;motors.c: 307:             tm0Error = 4;
  6124  000B44  0E00               	movlw	0
  6125  000B46  6E5C               	movwf	(_tm0Error+1)^0,c
  6126  000B48  0E04               	movlw	4
  6127  000B4A  6E5B               	movwf	_tm0Error^0,c
  6128                           
  6129                           ;motors.c: 308:             break;
  6130  000B4C  EF73  F006         	goto	l149
  6131  000B50                     l3754:
  6132  000B50  FFFF               	dw	65535	; assembler added errata NOP
  6133                           
  6134                           ;motors.c: 316:         if(MOT1Direction == 1){
  6135  000B52  0422               	decf	moveToPoint@MOT1Direction^0,w,c
  6136  000B54  A4D8               	btfss	status,2,c
  6137  000B56  EFAF  F005         	goto	u3011
  6138  000B5A  EFB2  F005         	goto	u3010
  6139  000B5E                     u3011:
  6140  000B5E  FFFF               	dw	65535	; assembler added errata NOP
  6141  000B60  EFD0  F005         	goto	l3760
  6142  000B64                     u3010:
  6143  000B64  FFFF               	dw	65535	; assembler added errata NOP
  6144  000B66                     
  6145                           ;motors.c: 317:             if(x1 + stepCounter() == x2){
  6146  000B66  EC74  F012         	call	_stepCounter	;wreg free
  6147  000B6A  5016               	movf	moveToPoint@x1^0,w,c
  6148  000B6C  2612               	addwf	?_stepCounter^0,f,c
  6149  000B6E  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6150  000B70  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6151  000B72  501A               	movf	moveToPoint@x2^0,w,c
  6152  000B74  1812               	xorwf	?_stepCounter^0,w,c
  6153  000B76  E107               	bnz	u3021
  6154  000B78  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6155  000B7A  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6156  000B7C  A4D8               	btfss	status,2,c
  6157  000B7E  EFC3  F005         	goto	u3021
  6158  000B82  EFC6  F005         	goto	u3020
  6159  000B86                     u3021:
  6160  000B86  FFFF               	dw	65535	; assembler added errata NOP
  6161  000B88  EFCC  F005         	goto	l151
  6162  000B8C                     u3020:
  6163  000B8C  FFFF               	dw	65535	; assembler added errata NOP
  6164  000B8E                     l3758:
  6165  000B8E  FFFF               	dw	65535	; assembler added errata NOP
  6166                           
  6167                           ;motors.c: 319:                 keepMovingX = 0;
  6168  000B90  0E00               	movlw	0
  6169  000B92  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6170                           
  6171                           ;motors.c: 320:             }else{
  6172  000B94  EFF7  F005         	goto	l3766
  6173  000B98                     l151:
  6174  000B98  FFFF               	dw	65535	; assembler added errata NOP
  6175                           
  6176                           ;motors.c: 322:                 LATAbits.LATA2 = 1;
  6177  000B9A  8489               	bsf	137,2,c	;volatile
  6178  000B9C  EFF7  F005         	goto	l3766
  6179  000BA0                     l3760:
  6180  000BA0  FFFF               	dw	65535	; assembler added errata NOP
  6181  000BA2  5022               	movf	moveToPoint@MOT1Direction^0,w,c
  6182  000BA4  A4D8               	btfss	status,2,c
  6183  000BA6  EFD7  F005         	goto	u3031
  6184  000BAA  EFDA  F005         	goto	u3030
  6185  000BAE                     u3031:
  6186  000BAE  FFFF               	dw	65535	; assembler added errata NOP
  6187  000BB0  EFF7  F005         	goto	l3766
  6188  000BB4                     u3030:
  6189  000BB4  FFFF               	dw	65535	; assembler added errata NOP
  6190  000BB6                     
  6191                           ;motors.c: 325:             if(x1 - stepCounter() == x2){
  6192  000BB6  EC74  F012         	call	_stepCounter	;wreg free
  6193  000BBA  C016  F01E         	movff	moveToPoint@x1,??_moveToPoint
  6194  000BBE  C017  F01F         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6195  000BC2  5012               	movf	?_stepCounter^0,w,c
  6196  000BC4  5E1E               	subwf	??_moveToPoint^0,f,c
  6197  000BC6  5013               	movf	(?_stepCounter+1)^0,w,c
  6198  000BC8  5A1F               	subwfb	(??_moveToPoint+1)^0,f,c
  6199  000BCA  501A               	movf	moveToPoint@x2^0,w,c
  6200  000BCC  181E               	xorwf	??_moveToPoint^0,w,c
  6201  000BCE  E107               	bnz	u3041
  6202  000BD0  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6203  000BD2  181F               	xorwf	(??_moveToPoint+1)^0,w,c
  6204  000BD4  A4D8               	btfss	status,2,c
  6205  000BD6  EFEF  F005         	goto	u3041
  6206  000BDA  EFF2  F005         	goto	u3040
  6207  000BDE                     u3041:
  6208  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  6209  000BE0  EFF5  F005         	goto	l155
  6210  000BE4                     u3040:
  6211  000BE4  FFFF               	dw	65535	; assembler added errata NOP
  6212  000BE6  EFC7  F005         	goto	l3758
  6213  000BEA                     l155:
  6214  000BEA  FFFF               	dw	65535	; assembler added errata NOP
  6215                           
  6216                           ;motors.c: 330:                 LATAbits.LATA2 = 1;
  6217  000BEC  8489               	bsf	137,2,c	;volatile
  6218  000BEE                     l3766:
  6219  000BEE  FFFF               	dw	65535	; assembler added errata NOP
  6220                           
  6221                           ;motors.c: 334:         if(MOT2Direction == 1){
  6222  000BF0  0423               	decf	moveToPoint@MOT2Direction^0,w,c
  6223  000BF2  A4D8               	btfss	status,2,c
  6224  000BF4  EFFE  F005         	goto	u3051
  6225  000BF8  EF01  F006         	goto	u3050
  6226  000BFC                     u3051:
  6227  000BFC  FFFF               	dw	65535	; assembler added errata NOP
  6228  000BFE  EF1F  F006         	goto	l3772
  6229  000C02                     u3050:
  6230  000C02  FFFF               	dw	65535	; assembler added errata NOP
  6231  000C04                     
  6232                           ;motors.c: 336:             if(y1 + stepCounter() == y2){
  6233  000C04  EC74  F012         	call	_stepCounter	;wreg free
  6234  000C08  5018               	movf	moveToPoint@y1^0,w,c
  6235  000C0A  2612               	addwf	?_stepCounter^0,f,c
  6236  000C0C  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6237  000C0E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6238  000C10  501C               	movf	moveToPoint@y2^0,w,c
  6239  000C12  1812               	xorwf	?_stepCounter^0,w,c
  6240  000C14  E107               	bnz	u3061
  6241  000C16  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6242  000C18  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6243  000C1A  A4D8               	btfss	status,2,c
  6244  000C1C  EF12  F006         	goto	u3061
  6245  000C20  EF15  F006         	goto	u3060
  6246  000C24                     u3061:
  6247  000C24  FFFF               	dw	65535	; assembler added errata NOP
  6248  000C26  EF1B  F006         	goto	l158
  6249  000C2A                     u3060:
  6250  000C2A  FFFF               	dw	65535	; assembler added errata NOP
  6251  000C2C                     l3770:
  6252  000C2C  FFFF               	dw	65535	; assembler added errata NOP
  6253                           
  6254                           ;motors.c: 338:                 keepMovingY = 0;
  6255  000C2E  0E00               	movlw	0
  6256  000C30  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6257                           
  6258                           ;motors.c: 339:             }else{
  6259  000C32  EF42  F006         	goto	l3778
  6260  000C36                     l158:
  6261  000C36  FFFF               	dw	65535	; assembler added errata NOP
  6262                           
  6263                           ;motors.c: 341:                 LATBbits.LATB4 = 1;
  6264  000C38  888A               	bsf	138,4,c	;volatile
  6265  000C3A  EF42  F006         	goto	l3778
  6266  000C3E                     l3772:
  6267  000C3E  FFFF               	dw	65535	; assembler added errata NOP
  6268  000C40  5023               	movf	moveToPoint@MOT2Direction^0,w,c
  6269  000C42  A4D8               	btfss	status,2,c
  6270  000C44  EF26  F006         	goto	u3071
  6271  000C48  EF29  F006         	goto	u3070
  6272  000C4C                     u3071:
  6273  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  6274  000C4E  EF42  F006         	goto	l3778
  6275  000C52                     u3070:
  6276  000C52  FFFF               	dw	65535	; assembler added errata NOP
  6277  000C54                     
  6278                           ;motors.c: 345:             if(y1 + stepCounter() == y2){
  6279  000C54  EC74  F012         	call	_stepCounter	;wreg free
  6280  000C58  5018               	movf	moveToPoint@y1^0,w,c
  6281  000C5A  2612               	addwf	?_stepCounter^0,f,c
  6282  000C5C  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6283  000C5E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6284  000C60  501C               	movf	moveToPoint@y2^0,w,c
  6285  000C62  1812               	xorwf	?_stepCounter^0,w,c
  6286  000C64  E107               	bnz	u3081
  6287  000C66  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6288  000C68  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6289  000C6A  A4D8               	btfss	status,2,c
  6290  000C6C  EF3A  F006         	goto	u3081
  6291  000C70  EF3D  F006         	goto	u3080
  6292  000C74                     u3081:
  6293  000C74  FFFF               	dw	65535	; assembler added errata NOP
  6294  000C76  EF40  F006         	goto	l162
  6295  000C7A                     u3080:
  6296  000C7A  FFFF               	dw	65535	; assembler added errata NOP
  6297  000C7C  EF16  F006         	goto	l3770
  6298  000C80                     l162:
  6299  000C80  FFFF               	dw	65535	; assembler added errata NOP
  6300                           
  6301                           ;motors.c: 350:                 LATBbits.LATB4 = 1;
  6302  000C82  888A               	bsf	138,4,c	;volatile
  6303  000C84                     l3778:
  6304  000C84  FFFF               	dw	65535	; assembler added errata NOP
  6305  000C86  EC32  F012         	call	_stepMade	;wreg free
  6306  000C8A  5012               	movf	?_stepMade^0,w,c
  6307  000C8C  1013               	iorwf	(?_stepMade+1)^0,w,c
  6308  000C8E  B4D8               	btfsc	status,2,c
  6309  000C90  EF4C  F006         	goto	u3091
  6310  000C94  EF4F  F006         	goto	u3090
  6311  000C98                     u3091:
  6312  000C98  FFFF               	dw	65535	; assembler added errata NOP
  6313  000C9A  EF42  F006         	goto	l3778
  6314  000C9E                     u3090:
  6315  000C9E  FFFF               	dw	65535	; assembler added errata NOP
  6316  000CA0                     
  6317                           ;motors.c: 358:         LATAbits.LATA2 = 0;
  6318  000CA0  9489               	bcf	137,2,c	;volatile
  6319                           
  6320                           ;motors.c: 359:         LATBbits.LATB4 = 0;
  6321  000CA2  988A               	bcf	138,4,c	;volatile
  6322  000CA4                     l3780:
  6323  000CA4  FFFF               	dw	65535	; assembler added errata NOP
  6324  000CA6  EC32  F012         	call	_stepMade	;wreg free
  6325  000CAA  5012               	movf	?_stepMade^0,w,c
  6326  000CAC  1013               	iorwf	(?_stepMade+1)^0,w,c
  6327  000CAE  B4D8               	btfsc	status,2,c
  6328  000CB0  EF5C  F006         	goto	u3101
  6329  000CB4  EF5F  F006         	goto	u3100
  6330  000CB8                     u3101:
  6331  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6332  000CBA  EF52  F006         	goto	l3780
  6333  000CBE                     u3100:
  6334  000CBE                     l3782:
  6335  000CBE  FFFF               	dw	65535	; assembler added errata NOP
  6336                           
  6337                           ;motors.c: 300:     while(keepMovingX || keepMovingY){
  6338  000CC0  5020               	movf	moveToPoint@keepMovingX^0,w,c
  6339  000CC2  A4D8               	btfss	status,2,c
  6340  000CC4  EF66  F006         	goto	u3111
  6341  000CC8  EF69  F006         	goto	u3110
  6342  000CCC                     u3111:
  6343  000CCC  FFFF               	dw	65535	; assembler added errata NOP
  6344  000CCE  EF94  F005         	goto	l3748
  6345  000CD2                     u3110:
  6346  000CD2  FFFF               	dw	65535	; assembler added errata NOP
  6347  000CD4  5021               	movf	moveToPoint@keepMovingY^0,w,c
  6348  000CD6  A4D8               	btfss	status,2,c
  6349  000CD8  EF70  F006         	goto	u3121
  6350  000CDC  EF73  F006         	goto	u3120
  6351  000CE0                     u3121:
  6352  000CE0  FFFF               	dw	65535	; assembler added errata NOP
  6353  000CE2  EF94  F005         	goto	l3748
  6354  000CE6                     u3120:
  6355  000CE6                     l149:
  6356  000CE6  FFFF               	dw	65535	; assembler added errata NOP
  6357                           
  6358                           ;motors.c: 366:     T0CONbits.TMR0ON = 0;
  6359  000CE8  9ED5               	bcf	213,7,c	;volatile
  6360                           
  6361                           ;motors.c: 367:     T2CONbits.TMR2ON = 0;
  6362  000CEA  94CA               	bcf	202,2,c	;volatile
  6363  000CEC                     
  6364                           ;motors.c: 369:     TMR0 = 0;
  6365  000CEC  0E00               	movlw	0
  6366  000CEE  6ED7               	movwf	215,c	;volatile
  6367  000CF0  0E00               	movlw	0
  6368  000CF2  6ED6               	movwf	214,c	;volatile
  6369                           
  6370                           ;motors.c: 370:     TMR2 = 0;
  6371  000CF4  0E00               	movlw	0
  6372  000CF6  6ECC               	movwf	204,c	;volatile
  6373  000CF8                     
  6374                           ;motors.c: 373:     resetStep();
  6375  000CF8  EC8E  F012         	call	_resetStep	;wreg free
  6376  000CFC                     
  6377                           ;motors.c: 375:     return(tm0Error);
  6378  000CFC  505B               	movf	_tm0Error^0,w,c
  6379  000CFE                     l141:
  6380  000CFE  FFFF               	dw	65535	; assembler added errata NOP
  6381  000D00  0012               	return		;funcret
  6382  000D02  FFFF               	dw	65535	; errata NOP
  6383  000D04                     __end_of_moveToPoint:
  6384                           	callstack 0
  6385                           
  6386 ;; *************** function _stepCounter *****************
  6387 ;; Defined at:
  6388 ;;		line 58 in file "pwm.c"
  6389 ;; Parameters:    Size  Location     Type
  6390 ;;		None
  6391 ;; Auto vars:     Size  Location     Type
  6392 ;;		None
  6393 ;; Return value:  Size  Location     Type
  6394 ;;                  2   17[COMRAM] unsigned int 
  6395 ;; Registers used:
  6396 ;;		None
  6397 ;; Tracked objects:
  6398 ;;		On entry : 0/0
  6399 ;;		On exit  : 0/0
  6400 ;;		Unchanged: 0/0
  6401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6402 ;;      Params:         2       0       0       0       0       0       0
  6403 ;;      Locals:         0       0       0       0       0       0       0
  6404 ;;      Temps:          0       0       0       0       0       0       0
  6405 ;;      Totals:         2       0       0       0       0       0       0
  6406 ;;Total ram usage:        2 bytes
  6407 ;; Hardware stack levels used:    1
  6408 ;; Hardware stack levels required when called:    4
  6409 ;; This function calls:
  6410 ;;		Nothing
  6411 ;; This function is called by:
  6412 ;;		_moveToPoint
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           	psect	text37
  6417  0024E8                     __ptext37:
  6418                           	callstack 0
  6419  0024E8                     _stepCounter:
  6420                           	callstack 0
  6421  0024E8  FFFF               	dw	65535	; assembler added errata NOP
  6422  0024EA                     
  6423                           ;pwm.c: 59:     return pwmStep;
  6424  0024EA  C067  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6425  0024EE  6A13               	clrf	(?_stepCounter+1)^0,c
  6426  0024F0  0012               	return		;funcret
  6427  0024F2  FFFF               	dw	65535	; errata NOP
  6428  0024F4                     __end_of_stepCounter:
  6429                           	callstack 0
  6430                           
  6431 ;; *************** function _liftArm *****************
  6432 ;; Defined at:
  6433 ;;		line 521 in file "motors.c"
  6434 ;; Parameters:    Size  Location     Type
  6435 ;;		None
  6436 ;; Auto vars:     Size  Location     Type
  6437 ;;		None
  6438 ;; Return value:  Size  Location     Type
  6439 ;;                  1    wreg      unsigned char 
  6440 ;; Registers used:
  6441 ;;		wreg, status,2, status,0, cstack
  6442 ;; Tracked objects:
  6443 ;;		On entry : 0/0
  6444 ;;		On exit  : 0/0
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6447 ;;      Params:         0       0       0       0       0       0       0
  6448 ;;      Locals:         0       0       0       0       0       0       0
  6449 ;;      Temps:          0       0       0       0       0       0       0
  6450 ;;      Totals:         0       0       0       0       0       0       0
  6451 ;;Total ram usage:        0 bytes
  6452 ;; Hardware stack levels used:    1
  6453 ;; Hardware stack levels required when called:    5
  6454 ;; This function calls:
  6455 ;;		_resetStep
  6456 ;;		_setDirection
  6457 ;;		_stepMade
  6458 ;; This function is called by:
  6459 ;;		_executeData
  6460 ;; This function uses a non-reentrant model
  6461 ;;
  6462                           
  6463                           	psect	text38
  6464  001F7E                     __ptext38:
  6465                           	callstack 0
  6466  001F7E                     _liftArm:
  6467                           	callstack 0
  6468  001F7E  FFFF               	dw	65535	; assembler added errata NOP
  6469  001F80                     
  6470                           ;motors.c: 524:     setDirection(0, 2);
  6471  001F80  0E02               	movlw	2
  6472  001F82  6E12               	movwf	setDirection@motor^0,c
  6473  001F84  0E00               	movlw	0
  6474  001F86  ECCE  F010         	call	_setDirection
  6475  001F8A                     
  6476                           ;motors.c: 526:     T2CONbits.TMR2ON = 1;
  6477  001F8A  84CA               	bsf	202,2,c	;volatile
  6478  001F8C                     
  6479                           ;motors.c: 528:     tm0Error = 0;
  6480  001F8C  0E00               	movlw	0
  6481  001F8E  6E5C               	movwf	(_tm0Error+1)^0,c
  6482  001F90  0E00               	movlw	0
  6483  001F92  6E5B               	movwf	_tm0Error^0,c
  6484  001F94                     
  6485                           ;motors.c: 529:     tm0Limit = 200;
  6486  001F94  0EC8               	movlw	200
  6487  001F96  6E68               	movwf	_tm0Limit^0,c
  6488  001F98                     
  6489                           ;motors.c: 530:     T0CONbits.TMR0ON = 1;
  6490  001F98  8ED5               	bsf	213,7,c	;volatile
  6491                           
  6492                           ;motors.c: 534:     while(!PORTEbits.RE2){
  6493  001F9A  EF00  F010         	goto	l200
  6494  001F9E                     l3888:
  6495  001F9E  FFFF               	dw	65535	; assembler added errata NOP
  6496                           
  6497                           ;motors.c: 537:         if(tm0Error){
  6498  001FA0  505B               	movf	_tm0Error^0,w,c
  6499  001FA2  105C               	iorwf	(_tm0Error+1)^0,w,c
  6500  001FA4  B4D8               	btfsc	status,2,c
  6501  001FA6  EFD7  F00F         	goto	u3251
  6502  001FAA  EFDA  F00F         	goto	u3250
  6503  001FAE                     u3251:
  6504  001FAE  FFFF               	dw	65535	; assembler added errata NOP
  6505  001FB0  EFE2  F00F         	goto	l202
  6506  001FB4                     u3250:
  6507  001FB4  FFFF               	dw	65535	; assembler added errata NOP
  6508  001FB6                     
  6509                           ;motors.c: 539:             LATCbits.LATC2 = 0;
  6510  001FB6  948B               	bcf	139,2,c	;volatile
  6511  001FB8                     
  6512                           ;motors.c: 540:             tm0Error = 6;
  6513  001FB8  0E00               	movlw	0
  6514  001FBA  6E5C               	movwf	(_tm0Error+1)^0,c
  6515  001FBC  0E06               	movlw	6
  6516  001FBE  6E5B               	movwf	_tm0Error^0,c
  6517                           
  6518                           ;motors.c: 541:             break;
  6519  001FC0  EF09  F010         	goto	l203
  6520  001FC4                     l202:
  6521  001FC4  FFFF               	dw	65535	; assembler added errata NOP
  6522                           
  6523                           ;motors.c: 546:         LATCbits.LATC2 = 1;
  6524  001FC6  848B               	bsf	139,2,c	;volatile
  6525  001FC8                     l3894:
  6526  001FC8  FFFF               	dw	65535	; assembler added errata NOP
  6527  001FCA  EC32  F012         	call	_stepMade	;wreg free
  6528  001FCE  5012               	movf	?_stepMade^0,w,c
  6529  001FD0  1013               	iorwf	(?_stepMade+1)^0,w,c
  6530  001FD2  B4D8               	btfsc	status,2,c
  6531  001FD4  EFEE  F00F         	goto	u3261
  6532  001FD8  EFF1  F00F         	goto	u3260
  6533  001FDC                     u3261:
  6534  001FDC  FFFF               	dw	65535	; assembler added errata NOP
  6535  001FDE  EFE4  F00F         	goto	l3894
  6536  001FE2                     u3260:
  6537  001FE2  FFFF               	dw	65535	; assembler added errata NOP
  6538  001FE4                     
  6539                           ;motors.c: 552:         LATCbits.LATC2 = 0;
  6540  001FE4  948B               	bcf	139,2,c	;volatile
  6541  001FE6                     l3896:
  6542  001FE6  FFFF               	dw	65535	; assembler added errata NOP
  6543  001FE8  EC32  F012         	call	_stepMade	;wreg free
  6544  001FEC  5012               	movf	?_stepMade^0,w,c
  6545  001FEE  1013               	iorwf	(?_stepMade+1)^0,w,c
  6546  001FF0  B4D8               	btfsc	status,2,c
  6547  001FF2  EFFD  F00F         	goto	u3271
  6548  001FF6  EF00  F010         	goto	u3270
  6549  001FFA                     u3271:
  6550  001FFA  FFFF               	dw	65535	; assembler added errata NOP
  6551  001FFC  EFF3  F00F         	goto	l3896
  6552  002000                     u3270:
  6553  002000                     l200:
  6554  002000  FFFF               	dw	65535	; assembler added errata NOP
  6555                           
  6556                           ;motors.c: 534:     while(!PORTEbits.RE2){
  6557  002002  A484               	btfss	132,2,c	;volatile
  6558  002004  EF06  F010         	goto	u3281
  6559  002008  EF09  F010         	goto	u3280
  6560  00200C                     u3281:
  6561  00200C  FFFF               	dw	65535	; assembler added errata NOP
  6562  00200E  EFCF  F00F         	goto	l3888
  6563  002012                     u3280:
  6564  002012                     l203:
  6565  002012  FFFF               	dw	65535	; assembler added errata NOP
  6566                           
  6567                           ;motors.c: 559:     T0CONbits.TMR0ON = 0;
  6568  002014  9ED5               	bcf	213,7,c	;volatile
  6569                           
  6570                           ;motors.c: 560:     T2CONbits.TMR2ON = 0;
  6571  002016  94CA               	bcf	202,2,c	;volatile
  6572  002018                     
  6573                           ;motors.c: 562:     TMR0 = 0;
  6574  002018  0E00               	movlw	0
  6575  00201A  6ED7               	movwf	215,c	;volatile
  6576  00201C  0E00               	movlw	0
  6577  00201E  6ED6               	movwf	214,c	;volatile
  6578                           
  6579                           ;motors.c: 563:     TMR2 = 0;
  6580  002020  0E00               	movlw	0
  6581  002022  6ECC               	movwf	204,c	;volatile
  6582  002024                     
  6583                           ;motors.c: 566:     resetStep();
  6584  002024  EC8E  F012         	call	_resetStep	;wreg free
  6585  002028                     
  6586                           ;motors.c: 568:     return(tm0Error);
  6587  002028  505B               	movf	_tm0Error^0,w,c
  6588  00202A  0012               	return		;funcret
  6589  00202C  FFFF               	dw	65535	; errata NOP
  6590  00202E                     __end_of_liftArm:
  6591                           	callstack 0
  6592                           
  6593 ;; *************** function _stepMade *****************
  6594 ;; Defined at:
  6595 ;;		line 47 in file "pwm.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;		None
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;  temp            1   19[COMRAM] unsigned char 
  6600 ;; Return value:  Size  Location     Type
  6601 ;;                  2   17[COMRAM] unsigned int 
  6602 ;; Registers used:
  6603 ;;		wreg, status,2
  6604 ;; Tracked objects:
  6605 ;;		On entry : 0/0
  6606 ;;		On exit  : 0/0
  6607 ;;		Unchanged: 0/0
  6608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6609 ;;      Params:         2       0       0       0       0       0       0
  6610 ;;      Locals:         1       0       0       0       0       0       0
  6611 ;;      Temps:          0       0       0       0       0       0       0
  6612 ;;      Totals:         3       0       0       0       0       0       0
  6613 ;;Total ram usage:        3 bytes
  6614 ;; Hardware stack levels used:    1
  6615 ;; Hardware stack levels required when called:    4
  6616 ;; This function calls:
  6617 ;;		Nothing
  6618 ;; This function is called by:
  6619 ;;		_resetPosition
  6620 ;;		_moveToPoint
  6621 ;;		_touchObject
  6622 ;;		_touchTherm
  6623 ;;		_liftArm
  6624 ;;		_rotateObj
  6625 ;;		_pickObject
  6626 ;;		_releaseObj
  6627 ;; This function uses a non-reentrant model
  6628 ;;
  6629                           
  6630                           	psect	text39
  6631  002464                     __ptext39:
  6632                           	callstack 0
  6633  002464                     _stepMade:
  6634                           	callstack 0
  6635  002464  FFFF               	dw	65535	; assembler added errata NOP
  6636  002466                     
  6637                           ;pwm.c: 48:     unsigned char temp = stepToggle;
  6638  002466  C066  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6639  00246A                     
  6640                           ;pwm.c: 50:     stepToggle = 0;
  6641  00246A  0E00               	movlw	0
  6642  00246C  6E66               	movwf	_stepToggle^0,c	;volatile
  6643  00246E                     
  6644                           ;pwm.c: 52:     return temp;
  6645  00246E  C014  F012         	movff	stepMade@temp,?_stepMade
  6646  002472  6A13               	clrf	(?_stepMade+1)^0,c
  6647  002474  0012               	return		;funcret
  6648  002476  FFFF               	dw	65535	; errata NOP
  6649  002478                     __end_of_stepMade:
  6650                           	callstack 0
  6651                           
  6652 ;; *************** function _setDirection *****************
  6653 ;; Defined at:
  6654 ;;		line 115 in file "motors.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;  direction       1    wreg     unsigned char 
  6657 ;;  motor           1   17[COMRAM] unsigned char 
  6658 ;; Auto vars:     Size  Location     Type
  6659 ;;  direction       1   20[COMRAM] unsigned char 
  6660 ;; Return value:  Size  Location     Type
  6661 ;;                  1    wreg      void 
  6662 ;; Registers used:
  6663 ;;		wreg, status,2, status,0
  6664 ;; Tracked objects:
  6665 ;;		On entry : 0/0
  6666 ;;		On exit  : 0/0
  6667 ;;		Unchanged: 0/0
  6668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6669 ;;      Params:         1       0       0       0       0       0       0
  6670 ;;      Locals:         1       0       0       0       0       0       0
  6671 ;;      Temps:          2       0       0       0       0       0       0
  6672 ;;      Totals:         4       0       0       0       0       0       0
  6673 ;;Total ram usage:        4 bytes
  6674 ;; Hardware stack levels used:    1
  6675 ;; Hardware stack levels required when called:    4
  6676 ;; This function calls:
  6677 ;;		Nothing
  6678 ;; This function is called by:
  6679 ;;		_resetPosition
  6680 ;;		_moveToPoint
  6681 ;;		_touchObject
  6682 ;;		_touchTherm
  6683 ;;		_liftArm
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           	psect	text40
  6688  00219C                     __ptext40:
  6689                           	callstack 0
  6690  00219C                     _setDirection:
  6691                           	callstack 0
  6692  00219C  FFFF               	dw	65535	; assembler added errata NOP
  6693                           
  6694                           ;incstack = 0
  6695                           ;setDirection@direction stored from wreg
  6696  00219E  6E15               	movwf	setDirection@direction^0,c
  6697  0021A0                     
  6698                           ;motors.c: 116:     switch(motor){
  6699  0021A0  EFEA  F010         	goto	l3394
  6700  0021A4                     l3386:
  6701  0021A4  FFFF               	dw	65535	; assembler added errata NOP
  6702                           
  6703                           ;motors.c: 118:             LATAbits.LATA1 = direction;
  6704  0021A6  B015               	btfsc	setDirection@direction^0,0,c
  6705  0021A8  D002               	bra	u2455
  6706  0021AA  9289               	bcf	137,1,c	;volatile
  6707  0021AC  D001               	bra	u2456
  6708  0021AE                     u2455:
  6709  0021AE  8289               	bsf	137,1,c	;volatile
  6710  0021B0                     u2456:
  6711                           
  6712                           ;motors.c: 119:             break;
  6713  0021B0  EF05  F011         	goto	l101
  6714  0021B4                     l3388:
  6715  0021B4  FFFF               	dw	65535	; assembler added errata NOP
  6716                           
  6717                           ;motors.c: 121:             LATBbits.LATB3 = direction;
  6718  0021B6  B015               	btfsc	setDirection@direction^0,0,c
  6719  0021B8  D002               	bra	u2465
  6720  0021BA  968A               	bcf	138,3,c	;volatile
  6721  0021BC  D001               	bra	u2466
  6722  0021BE                     u2465:
  6723  0021BE  868A               	bsf	138,3,c	;volatile
  6724  0021C0                     u2466:
  6725                           
  6726                           ;motors.c: 122:             break;
  6727  0021C0  EF05  F011         	goto	l101
  6728  0021C4                     l3390:
  6729  0021C4  FFFF               	dw	65535	; assembler added errata NOP
  6730                           
  6731                           ;motors.c: 124:             LATCbits.LATC1 = direction;
  6732  0021C6  B015               	btfsc	setDirection@direction^0,0,c
  6733  0021C8  D002               	bra	u2475
  6734  0021CA  928B               	bcf	139,1,c	;volatile
  6735  0021CC  D001               	bra	u2476
  6736  0021CE                     u2475:
  6737  0021CE  828B               	bsf	139,1,c	;volatile
  6738  0021D0                     u2476:
  6739                           
  6740                           ;motors.c: 125:             break;
  6741  0021D0  EF05  F011         	goto	l101
  6742  0021D4                     l3394:
  6743  0021D4  FFFF               	dw	65535	; assembler added errata NOP
  6744  0021D6  5012               	movf	setDirection@motor^0,w,c
  6745  0021D8  6E13               	movwf	??_setDirection^0,c
  6746  0021DA  6A14               	clrf	(??_setDirection+1)^0,c
  6747                           
  6748                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6749                           ; Switch size 1, requested type "simple"
  6750                           ; Number of cases is 1, Range of values is 0 to 0
  6751                           ; switch strategies available:
  6752                           ; Name         Instructions Cycles
  6753                           ; simple_byte            4     3 (average)
  6754                           ;	Chosen strategy is simple_byte
  6755  0021DC  5014               	movf	(??_setDirection+1)^0,w,c
  6756  0021DE  0A00               	xorlw	0	; case 0
  6757  0021E0  B4D8               	btfsc	status,2,c
  6758  0021E2  EFF5  F010         	goto	l4500
  6759  0021E6  EF05  F011         	goto	l101
  6760  0021EA                     l4500:
  6761  0021EA  FFFF               	dw	65535	; assembler added errata NOP
  6762                           
  6763                           ; Switch size 1, requested type "simple"
  6764                           ; Number of cases is 3, Range of values is 0 to 2
  6765                           ; switch strategies available:
  6766                           ; Name         Instructions Cycles
  6767                           ; simple_byte           10     6 (average)
  6768                           ;	Chosen strategy is simple_byte
  6769  0021EC  5013               	movf	??_setDirection^0,w,c
  6770  0021EE  0A00               	xorlw	0	; case 0
  6771  0021F0  B4D8               	btfsc	status,2,c
  6772  0021F2  EFD2  F010         	goto	l3386
  6773  0021F6  0A01               	xorlw	1	; case 1
  6774  0021F8  B4D8               	btfsc	status,2,c
  6775  0021FA  EFDA  F010         	goto	l3388
  6776  0021FE  0A03               	xorlw	3	; case 2
  6777  002200  B4D8               	btfsc	status,2,c
  6778  002202  EFE2  F010         	goto	l3390
  6779  002206  EF05  F011         	goto	l101
  6780  00220A                     l101:
  6781  00220A  FFFF               	dw	65535	; assembler added errata NOP
  6782  00220C  0012               	return		;funcret
  6783  00220E  FFFF               	dw	65535	; errata NOP
  6784  002210                     __end_of_setDirection:
  6785                           	callstack 0
  6786                           
  6787 ;; *************** function _resetStep *****************
  6788 ;; Defined at:
  6789 ;;		line 65 in file "pwm.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;		None
  6792 ;; Auto vars:     Size  Location     Type
  6793 ;;		None
  6794 ;; Return value:  Size  Location     Type
  6795 ;;                  1    wreg      void 
  6796 ;; Registers used:
  6797 ;;		wreg, status,2
  6798 ;; Tracked objects:
  6799 ;;		On entry : 0/0
  6800 ;;		On exit  : 0/0
  6801 ;;		Unchanged: 0/0
  6802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6803 ;;      Params:         0       0       0       0       0       0       0
  6804 ;;      Locals:         0       0       0       0       0       0       0
  6805 ;;      Temps:          0       0       0       0       0       0       0
  6806 ;;      Totals:         0       0       0       0       0       0       0
  6807 ;;Total ram usage:        0 bytes
  6808 ;; Hardware stack levels used:    1
  6809 ;; Hardware stack levels required when called:    4
  6810 ;; This function calls:
  6811 ;;		Nothing
  6812 ;; This function is called by:
  6813 ;;		_resetPosition
  6814 ;;		_moveToPoint
  6815 ;;		_touchObject
  6816 ;;		_touchTherm
  6817 ;;		_liftArm
  6818 ;; This function uses a non-reentrant model
  6819 ;;
  6820                           
  6821                           	psect	text41
  6822  00251C                     __ptext41:
  6823                           	callstack 0
  6824  00251C                     _resetStep:
  6825                           	callstack 0
  6826  00251C  FFFF               	dw	65535	; assembler added errata NOP
  6827  00251E                     
  6828                           ;pwm.c: 66:     pwmStep = 0;
  6829  00251E  0E00               	movlw	0
  6830  002520  6E67               	movwf	_pwmStep^0,c	;volatile
  6831  002522  0012               	return		;funcret
  6832  002524  FFFF               	dw	65535	; errata NOP
  6833  002526                     __end_of_resetStep:
  6834                           	callstack 0
  6835                           
  6836 ;; *************** function _getData *****************
  6837 ;; Defined at:
  6838 ;;		line 205 in file "usart.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;		None
  6841 ;; Auto vars:     Size  Location     Type
  6842 ;;		None
  6843 ;; Return value:  Size  Location     Type
  6844 ;;                  2   17[COMRAM] PTR struct .
  6845 ;; Registers used:
  6846 ;;		wreg, status,2, status,0
  6847 ;; Tracked objects:
  6848 ;;		On entry : 0/0
  6849 ;;		On exit  : 0/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6852 ;;      Params:         2       0       0       0       0       0       0
  6853 ;;      Locals:         0       0       0       0       0       0       0
  6854 ;;      Temps:          0       0       0       0       0       0       0
  6855 ;;      Totals:         2       0       0       0       0       0       0
  6856 ;;Total ram usage:        2 bytes
  6857 ;; Hardware stack levels used:    1
  6858 ;; Hardware stack levels required when called:    4
  6859 ;; This function calls:
  6860 ;;		Nothing
  6861 ;; This function is called by:
  6862 ;;		_executeData
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865                           
  6866                           	psect	text42
  6867  002498                     __ptext42:
  6868                           	callstack 0
  6869  002498                     _getData:
  6870                           	callstack 0
  6871  002498  FFFF               	dw	65535	; assembler added errata NOP
  6872  00249A                     
  6873                           ;usart.c: 206:     return(&dataSequence[0]);
  6874  00249A  0ED8               	movlw	low _dataSequence
  6875  00249C  6E12               	movwf	?_getData^0,c
  6876  00249E  0E00               	movlw	high _dataSequence
  6877  0024A0  6E13               	movwf	(?_getData+1)^0,c
  6878  0024A2  0012               	return		;funcret
  6879  0024A4  FFFF               	dw	65535	; errata NOP
  6880  0024A6                     __end_of_getData:
  6881                           	callstack 0
  6882                           
  6883 ;; *************** function _clearTM0 *****************
  6884 ;; Defined at:
  6885 ;;		line 28 in file "motors.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;		None
  6888 ;; Auto vars:     Size  Location     Type
  6889 ;;		None
  6890 ;; Return value:  Size  Location     Type
  6891 ;;                  1    wreg      void 
  6892 ;; Registers used:
  6893 ;;		wreg, status,2
  6894 ;; Tracked objects:
  6895 ;;		On entry : 0/0
  6896 ;;		On exit  : 0/0
  6897 ;;		Unchanged: 0/0
  6898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6899 ;;      Params:         0       0       0       0       0       0       0
  6900 ;;      Locals:         0       0       0       0       0       0       0
  6901 ;;      Temps:          0       0       0       0       0       0       0
  6902 ;;      Totals:         0       0       0       0       0       0       0
  6903 ;;Total ram usage:        0 bytes
  6904 ;; Hardware stack levels used:    1
  6905 ;; Hardware stack levels required when called:    4
  6906 ;; This function calls:
  6907 ;;		Nothing
  6908 ;; This function is called by:
  6909 ;;		_main
  6910 ;; This function uses a non-reentrant model
  6911 ;;
  6912                           
  6913                           	psect	text43
  6914  0024A6                     __ptext43:
  6915                           	callstack 0
  6916  0024A6                     _clearTM0:
  6917                           	callstack 0
  6918  0024A6  FFFF               	dw	65535	; assembler added errata NOP
  6919  0024A8                     
  6920                           ;motors.c: 29:     tm0Error = 0;
  6921  0024A8  0E00               	movlw	0
  6922  0024AA  6E5C               	movwf	(_tm0Error+1)^0,c
  6923  0024AC  0E00               	movlw	0
  6924  0024AE  6E5B               	movwf	_tm0Error^0,c
  6925  0024B0  0012               	return		;funcret
  6926  0024B2  FFFF               	dw	65535	; errata NOP
  6927  0024B4                     __end_of_clearTM0:
  6928                           	callstack 0
  6929                           
  6930 ;; *************** function _isr *****************
  6931 ;; Defined at:
  6932 ;;		line 17 in file "interrupt.c"
  6933 ;; Parameters:    Size  Location     Type
  6934 ;;		None
  6935 ;; Auto vars:     Size  Location     Type
  6936 ;;  temp            1   16[COMRAM] unsigned char 
  6937 ;; Return value:  Size  Location     Type
  6938 ;;                  1    wreg      void 
  6939 ;; Registers used:
  6940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6941 ;; Tracked objects:
  6942 ;;		On entry : 0/0
  6943 ;;		On exit  : 0/0
  6944 ;;		Unchanged: 0/0
  6945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6946 ;;      Params:         0       0       0       0       0       0       0
  6947 ;;      Locals:         1       0       0       0       0       0       0
  6948 ;;      Temps:          6       0       0       0       0       0       0
  6949 ;;      Totals:         7       0       0       0       0       0       0
  6950 ;;Total ram usage:        7 bytes
  6951 ;; Hardware stack levels used:    1
  6952 ;; Hardware stack levels required when called:    3
  6953 ;; This function calls:
  6954 ;;		_increaseStep
  6955 ;;		_retPeriod
  6956 ;;		_setThermRel
  6957 ;;		_setTouchRel
  6958 ;;		_toggleStep
  6959 ;;		_whatsTM0Limit
  6960 ;;		_writeTM0
  6961 ;;		i2_storeData
  6962 ;; This function is called by:
  6963 ;;		Interrupt level 2
  6964 ;; This function uses a non-reentrant model
  6965 ;;
  6966                           
  6967                           	psect	intcode
  6968  000008                     __pintcode:
  6969                           	callstack 0
  6970  000008                     _isr:
  6971                           	callstack 0
  6972  000008  FFFF               	dw	65535	; assembler added errata NOP
  6973                           
  6974                           ;incstack = 0
  6975  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6976  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6977  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6978  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6979  000018  CFF4 F010          	movff	prodh,??_isr+5
  6980  00001C                     
  6981                           ;interrupt.c: 18:     static unsigned int single_cycle = 0;;interrupt.c: 19:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 20:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 23:     if(INTCONbits.T0IF){
  6982  00001C  A4F2               	btfss	242,2,c	;volatile
  6983  00001E  EF13  F000         	goto	i2u235_41
  6984  000022  EF16  F000         	goto	i2u235_40
  6985  000026                     i2u235_41:
  6986  000026  FFFF               	dw	65535	; assembler added errata NOP
  6987  000028  EF2C  F000         	goto	i2l3302
  6988  00002C                     i2u235_40:
  6989  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6990  00002E                     
  6991                           ;interrupt.c: 24:         INTCONbits.T0IF = 0;
  6992  00002E  94F2               	bcf	242,2,c	;volatile
  6993  000030                     
  6994                           ;interrupt.c: 27:         tm0Count++;
  6995  000030  2A63               	incf	isr@tm0Count^0,f,c
  6996  000032                     
  6997                           ;interrupt.c: 29:         if(tm0Count >= whatsTM0Limit()){
  6998  000032  ECB6  F012         	call	_whatsTM0Limit	;wreg free
  6999  000036  6E0B               	movwf	??_isr^0,c
  7000  000038  500B               	movf	??_isr^0,w,c
  7001  00003A  5C63               	subwf	isr@tm0Count^0,w,c
  7002  00003C  A0D8               	btfss	status,0,c
  7003  00003E  EF23  F000         	goto	i2u236_41
  7004  000042  EF26  F000         	goto	i2u236_40
  7005  000046                     i2u236_41:
  7006  000046  FFFF               	dw	65535	; assembler added errata NOP
  7007  000048  EF2C  F000         	goto	i2l3302
  7008  00004C                     i2u236_40:
  7009  00004C  FFFF               	dw	65535	; assembler added errata NOP
  7010  00004E                     
  7011                           ;interrupt.c: 30:             T0CONbits.TMR0ON = 0;
  7012  00004E  9ED5               	bcf	213,7,c	;volatile
  7013  000050                     
  7014                           ;interrupt.c: 31:             tm0Count = 0;
  7015  000050  0E00               	movlw	0
  7016  000052  6E63               	movwf	isr@tm0Count^0,c
  7017  000054                     
  7018                           ;interrupt.c: 32:             writeTM0();
  7019  000054  EC5A  F012         	call	_writeTM0	;wreg free
  7020  000058                     i2l3302:
  7021  000058  FFFF               	dw	65535	; assembler added errata NOP
  7022                           
  7023                           ;interrupt.c: 37:     if(PIR1bits.TMR2IF){
  7024  00005A  A29E               	btfss	158,1,c	;volatile
  7025  00005C  EF32  F000         	goto	i2u237_41
  7026  000060  EF35  F000         	goto	i2u237_40
  7027  000064                     i2u237_41:
  7028  000064  FFFF               	dw	65535	; assembler added errata NOP
  7029  000066  EF63  F000         	goto	i2l3322
  7030  00006A                     i2u237_40:
  7031  00006A  FFFF               	dw	65535	; assembler added errata NOP
  7032  00006C                     
  7033                           ;interrupt.c: 38:         PIR1bits.TMR2IF = 0;
  7034  00006C  929E               	bcf	158,1,c	;volatile
  7035  00006E                     
  7036                           ;interrupt.c: 39:         single_cycle++;
  7037  00006E  4A51               	infsnz	isr@single_cycle^0,f,c
  7038  000070  2A52               	incf	(isr@single_cycle+1)^0,f,c
  7039  000072                     
  7040                           ;interrupt.c: 42:         if(single_cycle > retPeriod()){
  7041  000072  EC61  F012         	call	_retPeriod	;wreg free
  7042  000076  5051               	movf	isr@single_cycle^0,w,c
  7043  000078  5C01               	subwf	?_retPeriod^0,w,c
  7044  00007A  5052               	movf	(isr@single_cycle+1)^0,w,c
  7045  00007C  5802               	subwfb	(?_retPeriod+1)^0,w,c
  7046  00007E  B0D8               	btfsc	status,0,c
  7047  000080  EF44  F000         	goto	i2u238_41
  7048  000084  EF47  F000         	goto	i2u238_40
  7049  000088                     i2u238_41:
  7050  000088  FFFF               	dw	65535	; assembler added errata NOP
  7051  00008A  EF63  F000         	goto	i2l3322
  7052  00008E                     i2u238_40:
  7053  00008E  FFFF               	dw	65535	; assembler added errata NOP
  7054  000090                     
  7055                           ;interrupt.c: 43:             completeStep++;
  7056  000090  2A62               	incf	isr@completeStep^0,f,c
  7057  000092                     
  7058                           ;interrupt.c: 46:             if(completeStep != 0 && !(completeStep % 2)){
  7059  000092  5062               	movf	isr@completeStep^0,w,c
  7060  000094  B4D8               	btfsc	status,2,c
  7061  000096  EF4F  F000         	goto	i2u239_41
  7062  00009A  EF52  F000         	goto	i2u239_40
  7063  00009E                     i2u239_41:
  7064  00009E  FFFF               	dw	65535	; assembler added errata NOP
  7065  0000A0  EF60  F000         	goto	i2l3320
  7066  0000A4                     i2u239_40:
  7067  0000A4  FFFF               	dw	65535	; assembler added errata NOP
  7068  0000A6  B062               	btfsc	isr@completeStep^0,0,c
  7069  0000A8  EF58  F000         	goto	i2u240_41
  7070  0000AC  EF5B  F000         	goto	i2u240_40
  7071  0000B0                     i2u240_41:
  7072  0000B0  FFFF               	dw	65535	; assembler added errata NOP
  7073  0000B2  EF60  F000         	goto	i2l3320
  7074  0000B6                     i2u240_40:
  7075  0000B6  FFFF               	dw	65535	; assembler added errata NOP
  7076  0000B8                     
  7077                           ;interrupt.c: 48:                 completeStep = 0;
  7078  0000B8  0E00               	movlw	0
  7079  0000BA  6E62               	movwf	isr@completeStep^0,c
  7080  0000BC                     
  7081                           ;interrupt.c: 51:                 increaseStep();
  7082  0000BC  ECBA  F012         	call	_increaseStep	;wreg free
  7083  0000C0                     i2l3320:
  7084  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  7085                           
  7086                           ;interrupt.c: 56:             toggleStep();
  7087  0000C2  EC93  F012         	call	_toggleStep	;wreg free
  7088  0000C6                     i2l3322:
  7089  0000C6  FFFF               	dw	65535	; assembler added errata NOP
  7090                           
  7091                           ;interrupt.c: 61:     if(PIR1bits.ADIF){
  7092  0000C8  AC9E               	btfss	158,6,c	;volatile
  7093  0000CA  EF69  F000         	goto	i2u241_41
  7094  0000CE  EF6C  F000         	goto	i2u241_40
  7095  0000D2                     i2u241_41:
  7096  0000D2  FFFF               	dw	65535	; assembler added errata NOP
  7097  0000D4  EF99  F000         	goto	i2l3334
  7098  0000D8                     i2u241_40:
  7099  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  7100  0000DA                     
  7101                           ;interrupt.c: 62:         PIR1bits.ADIF = 0;
  7102  0000DA  9C9E               	bcf	158,6,c	;volatile
  7103                           
  7104                           ;interrupt.c: 65:         ADC_res = ADRESL;
  7105  0000DC  CFC3 F053          	movff	4035,_ADC_res	;volatile
  7106  0000E0  6A54               	clrf	(_ADC_res+1)^0,c
  7107  0000E2                     
  7108                           ;interrupt.c: 66:         ADC_res |= (ADRESH << 8);
  7109  0000E2  50C4               	movf	196,w,c	;volatile
  7110  0000E4  6E0C               	movwf	(??_isr+1)^0,c
  7111  0000E6  6A0B               	clrf	??_isr^0,c
  7112  0000E8  500B               	movf	??_isr^0,w,c
  7113  0000EA  1253               	iorwf	_ADC_res^0,f,c
  7114  0000EC  500C               	movf	(??_isr+1)^0,w,c
  7115  0000EE  1254               	iorwf	(_ADC_res+1)^0,f,c
  7116                           
  7117                           ;interrupt.c: 69:         if(ADC_res > therm_pressure){
  7118  0000F0  0453               	decf	_ADC_res^0,w,c
  7119  0000F2  0E04               	movlw	4
  7120  0000F4  5854               	subwfb	(_ADC_res+1)^0,w,c
  7121  0000F6  A0D8               	btfss	status,0,c
  7122  0000F8  EF80  F000         	goto	i2u242_41
  7123  0000FC  EF83  F000         	goto	i2u242_40
  7124  000100                     i2u242_41:
  7125  000100  FFFF               	dw	65535	; assembler added errata NOP
  7126  000102  EF8A  F000         	goto	i2l3330
  7127  000106                     i2u242_40:
  7128  000106  FFFF               	dw	65535	; assembler added errata NOP
  7129  000108                     
  7130                           ;interrupt.c: 71:             setTouchRel();
  7131  000108  EC98  F012         	call	_setTouchRel	;wreg free
  7132                           
  7133                           ;interrupt.c: 72:             setThermRel();
  7134  00010C  EC9D  F012         	call	_setThermRel	;wreg free
  7135                           
  7136                           ;interrupt.c: 73:         }else if(ADC_res > touch_pressure){
  7137  000110  EF99  F000         	goto	i2l3334
  7138  000114                     i2l3330:
  7139  000114  FFFF               	dw	65535	; assembler added errata NOP
  7140  000116  0453               	decf	_ADC_res^0,w,c
  7141  000118  0E02               	movlw	2
  7142  00011A  5854               	subwfb	(_ADC_res+1)^0,w,c
  7143  00011C  A0D8               	btfss	status,0,c
  7144  00011E  EF93  F000         	goto	i2u243_41
  7145  000122  EF96  F000         	goto	i2u243_40
  7146  000126                     i2u243_41:
  7147  000126  FFFF               	dw	65535	; assembler added errata NOP
  7148  000128  EF99  F000         	goto	i2l3334
  7149  00012C                     i2u243_40:
  7150  00012C  FFFF               	dw	65535	; assembler added errata NOP
  7151  00012E                     
  7152                           ;interrupt.c: 75:             setTouchRel();
  7153  00012E  EC98  F012         	call	_setTouchRel	;wreg free
  7154  000132                     i2l3334:
  7155  000132  FFFF               	dw	65535	; assembler added errata NOP
  7156                           
  7157                           ;interrupt.c: 80:     if(PIR1bits.RC1IF){
  7158  000134  AA9E               	btfss	158,5,c	;volatile
  7159  000136  EF9F  F000         	goto	i2u244_41
  7160  00013A  EFA2  F000         	goto	i2u244_40
  7161  00013E                     i2u244_41:
  7162  00013E  FFFF               	dw	65535	; assembler added errata NOP
  7163  000140  EFA9  F000         	goto	i2l472
  7164  000144                     i2u244_40:
  7165  000144  FFFF               	dw	65535	; assembler added errata NOP
  7166  000146                     
  7167                           ;interrupt.c: 81:         PIR1bits.RC1IF = 0;
  7168  000146  9A9E               	bcf	158,5,c	;volatile
  7169                           
  7170                           ;interrupt.c: 84:         unsigned char temp = RCREG1;
  7171  000148  CFAE F011          	movff	4014,isr@temp	;volatile
  7172  00014C                     
  7173                           ;interrupt.c: 86:         storeData(temp);
  7174  00014C  5011               	movf	isr@temp^0,w,c
  7175  00014E  EC27  F00B         	call	i2_storeData
  7176  000152                     i2l472:
  7177  000152  FFFF               	dw	65535	; assembler added errata NOP
  7178  000154  C010  FFF4         	movff	??_isr+5,prodh
  7179  000158  C00F  FFF3         	movff	??_isr+4,prodl
  7180  00015C  C00E  FFDA         	movff	??_isr+3,fsr2h
  7181  000160  C00D  FFD9         	movff	??_isr+2,fsr2l
  7182  000164  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7183  000166  0011               	retfie		f
  7184  000168  FFFF               	dw	65535	; errata NOP
  7185  00016A                     __end_of_isr:
  7186                           	callstack 0
  7187                           
  7188 ;; *************** function i2_storeData *****************
  7189 ;; Defined at:
  7190 ;;		line 131 in file "usart.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;  data            1    wreg     unsigned char 
  7193 ;; Auto vars:     Size  Location     Type
  7194 ;;  data            1    9[COMRAM] unsigned char 
  7195 ;; Return value:  Size  Location     Type
  7196 ;;                  1    wreg      void 
  7197 ;; Registers used:
  7198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7199 ;; Tracked objects:
  7200 ;;		On entry : 0/0
  7201 ;;		On exit  : 0/0
  7202 ;;		Unchanged: 0/0
  7203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7204 ;;      Params:         0       0       0       0       0       0       0
  7205 ;;      Locals:         1       0       0       0       0       0       0
  7206 ;;      Temps:          2       0       0       0       0       0       0
  7207 ;;      Totals:         3       0       0       0       0       0       0
  7208 ;;Total ram usage:        3 bytes
  7209 ;; Hardware stack levels used:    1
  7210 ;; Hardware stack levels required when called:    2
  7211 ;; This function calls:
  7212 ;;		i2_printError
  7213 ;; This function is called by:
  7214 ;;		_isr
  7215 ;; This function uses a non-reentrant model
  7216 ;;
  7217                           
  7218                           	psect	text45
  7219  00164E                     __ptext45:
  7220                           	callstack 0
  7221  00164E                     i2_storeData:
  7222                           	callstack 0
  7223  00164E  FFFF               	dw	65535	; assembler added errata NOP
  7224                           
  7225                           ;incstack = 0
  7226                           ;i2storeData@data stored from wreg
  7227  001650  6E0A               	movwf	i2storeData@data^0,c
  7228  001652                     
  7229                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  7230  001652  0E45               	movlw	low storeData@receivedMex
  7231  001654  245E               	addwf	storeData@counter^0,w,c
  7232  001656  6ED9               	movwf	fsr2l,c
  7233  001658  6ADA               	clrf	fsr2h,c
  7234  00165A  0E00               	movlw	high storeData@receivedMex
  7235  00165C  22DA               	addwfc	fsr2h,f,c
  7236  00165E  C00A  FFDF         	movff	i2storeData@data,indf2
  7237  001662                     
  7238                           ;usart.c: 142:     counter++;
  7239  001662  2A5E               	incf	storeData@counter^0,f,c
  7240                           
  7241                           ;usart.c: 145:     switch(receivedMex[0]){
  7242  001664  EF43  F00B         	goto	i2l3192
  7243  001668                     i2l3184:
  7244  001668  FFFF               	dw	65535	; assembler added errata NOP
  7245                           
  7246                           ;usart.c: 147:             mexLength = 5;
  7247  00166A  0E05               	movlw	5
  7248  00166C  6E6D               	movwf	storeData@mexLength^0,c
  7249                           
  7250                           ;usart.c: 148:             break;
  7251  00166E  EF5E  F00B         	goto	i2l3194
  7252  001672                     i2l3186:
  7253  001672  FFFF               	dw	65535	; assembler added errata NOP
  7254                           
  7255                           ;usart.c: 150:             mexLength = 9;
  7256  001674  0E09               	movlw	9
  7257  001676  6E6D               	movwf	storeData@mexLength^0,c
  7258                           
  7259                           ;usart.c: 151:             break;
  7260  001678  EF5E  F00B         	goto	i2l3194
  7261  00167C                     i2l3188:
  7262  00167C  FFFF               	dw	65535	; assembler added errata NOP
  7263                           
  7264                           ;usart.c: 153:             mexLength = 1;
  7265  00167E  0E01               	movlw	1
  7266  001680  6E6D               	movwf	storeData@mexLength^0,c
  7267                           
  7268                           ;usart.c: 154:             break;
  7269  001682  EF5E  F00B         	goto	i2l3194
  7270  001686                     i2l3192:
  7271  001686  FFFF               	dw	65535	; assembler added errata NOP
  7272  001688  5045               	movf	storeData@receivedMex^0,w,c
  7273  00168A  6E08               	movwf	??i2_storeData^0,c
  7274  00168C  6A09               	clrf	(??i2_storeData+1)^0,c
  7275                           
  7276                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7277                           ; Switch size 1, requested type "simple"
  7278                           ; Number of cases is 1, Range of values is 0 to 0
  7279                           ; switch strategies available:
  7280                           ; Name         Instructions Cycles
  7281                           ; simple_byte            4     3 (average)
  7282                           ;	Chosen strategy is simple_byte
  7283  00168E  5009               	movf	(??i2_storeData+1)^0,w,c
  7284  001690  0A00               	xorlw	0	; case 0
  7285  001692  B4D8               	btfsc	status,2,c
  7286  001694  EF4E  F00B         	goto	i2l4502
  7287  001698  EF5E  F00B         	goto	i2l3194
  7288  00169C                     i2l4502:
  7289  00169C  FFFF               	dw	65535	; assembler added errata NOP
  7290                           
  7291                           ; Switch size 1, requested type "simple"
  7292                           ; Number of cases is 3, Range of values is 0 to 2
  7293                           ; switch strategies available:
  7294                           ; Name         Instructions Cycles
  7295                           ; simple_byte           10     6 (average)
  7296                           ;	Chosen strategy is simple_byte
  7297  00169E  5008               	movf	??i2_storeData^0,w,c
  7298  0016A0  0A00               	xorlw	0	; case 0
  7299  0016A2  B4D8               	btfsc	status,2,c
  7300  0016A4  EF34  F00B         	goto	i2l3184
  7301  0016A8  0A01               	xorlw	1	; case 1
  7302  0016AA  B4D8               	btfsc	status,2,c
  7303  0016AC  EF39  F00B         	goto	i2l3186
  7304  0016B0  0A03               	xorlw	3	; case 2
  7305  0016B2  B4D8               	btfsc	status,2,c
  7306  0016B4  EF3E  F00B         	goto	i2l3188
  7307  0016B8  EF5E  F00B         	goto	i2l3194
  7308  0016BC                     i2l3194:
  7309  0016BC  FFFF               	dw	65535	; assembler added errata NOP
  7310                           
  7311                           ;usart.c: 161:     if(counter >= mexLength){
  7312  0016BE  506D               	movf	storeData@mexLength^0,w,c
  7313  0016C0  5C5E               	subwf	storeData@counter^0,w,c
  7314  0016C2  A0D8               	btfss	status,0,c
  7315  0016C4  EF66  F00B         	goto	i2u231_41
  7316  0016C8  EF69  F00B         	goto	i2u231_40
  7317  0016CC                     i2u231_41:
  7318  0016CC  FFFF               	dw	65535	; assembler added errata NOP
  7319  0016CE  EFD5  F00B         	goto	i2l571
  7320  0016D2                     i2u231_40:
  7321  0016D2  FFFF               	dw	65535	; assembler added errata NOP
  7322  0016D4                     
  7323                           ;usart.c: 162:         counter = 0;
  7324  0016D4  0E00               	movlw	0
  7325  0016D6  6E5E               	movwf	storeData@counter^0,c
  7326                           
  7327                           ;usart.c: 166:         switch(receivedMex[0]){
  7328  0016D8  EFBA  F00B         	goto	i2l3210
  7329  0016DC                     i2l3198:
  7330  0016DC  FFFF               	dw	65535	; assembler added errata NOP
  7331                           
  7332                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7333  0016DE  5061               	movf	_dataCounter^0,w,c
  7334  0016E0  0D04               	mullw	4
  7335  0016E2  0ED8               	movlw	low _dataSequence
  7336  0016E4  24F3               	addwf	243,w,c
  7337  0016E6  6ED9               	movwf	fsr2l,c
  7338  0016E8  0E00               	movlw	high _dataSequence
  7339  0016EA  20F4               	addwfc	prodh,w,c
  7340  0016EC  6EDA               	movwf	fsr2h,c
  7341  0016EE  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  7342                           
  7343                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  7344  0016F2  5061               	movf	_dataCounter^0,w,c
  7345  0016F4  0D04               	mullw	4
  7346  0016F6  0ED9               	movlw	low (_dataSequence+1)
  7347  0016F8  24F3               	addwf	243,w,c
  7348  0016FA  6ED9               	movwf	fsr2l,c
  7349  0016FC  0E00               	movlw	high (_dataSequence+1)
  7350  0016FE  20F4               	addwfc	prodh,w,c
  7351  001700  6EDA               	movwf	fsr2h,c
  7352  001702  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  7353                           
  7354                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  7355  001706  5061               	movf	_dataCounter^0,w,c
  7356  001708  0D04               	mullw	4
  7357  00170A  0EDA               	movlw	low (_dataSequence+2)
  7358  00170C  24F3               	addwf	243,w,c
  7359  00170E  6ED9               	movwf	fsr2l,c
  7360  001710  0E00               	movlw	high (_dataSequence+2)
  7361  001712  20F4               	addwfc	prodh,w,c
  7362  001714  6EDA               	movwf	fsr2h,c
  7363  001716  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  7364                           
  7365                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7366  00171A  5061               	movf	_dataCounter^0,w,c
  7367  00171C  0D04               	mullw	4
  7368  00171E  0EDB               	movlw	low (_dataSequence+3)
  7369  001720  24F3               	addwf	243,w,c
  7370  001722  6ED9               	movwf	fsr2l,c
  7371  001724  0E00               	movlw	high (_dataSequence+3)
  7372  001726  20F4               	addwfc	prodh,w,c
  7373  001728  6EDA               	movwf	fsr2h,c
  7374  00172A  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  7375  00172E                     
  7376                           ;usart.c: 173:                 dataCounter++;
  7377  00172E  2A61               	incf	_dataCounter^0,f,c
  7378                           
  7379                           ;usart.c: 174:                 break;
  7380  001730  EFD5  F00B         	goto	i2l571
  7381  001734                     i2l568:
  7382  001734  FFFF               	dw	65535	; assembler added errata NOP
  7383                           
  7384                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  7385  001736  C046  F0EC         	movff	storeData@receivedMex+1,_newSequenceData
  7386                           
  7387                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  7388  00173A  C047  F0ED         	movff	storeData@receivedMex+2,_newSequenceData+1
  7389                           
  7390                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  7391  00173E  C048  F0EE         	movff	storeData@receivedMex+3,_newSequenceData+2
  7392                           
  7393                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  7394  001742  C049  F0EF         	movff	storeData@receivedMex+4,_newSequenceData+3
  7395                           
  7396                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  7397  001746  C04A  F0F0         	movff	storeData@receivedMex+5,_newSequenceData+4
  7398                           
  7399                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  7400  00174A  C04B  F0F1         	movff	storeData@receivedMex+6,_newSequenceData+5
  7401                           
  7402                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  7403  00174E  C04C  F0F2         	movff	storeData@receivedMex+7,_newSequenceData+6
  7404                           
  7405                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  7406  001752  C04D  F0F3         	movff	storeData@receivedMex+8,_newSequenceData+7
  7407  001756                     
  7408                           ;usart.c: 186:                 _newSequence = 1;
  7409  001756  0E01               	movlw	1
  7410  001758  6E5F               	movwf	__newSequence^0,c
  7411                           
  7412                           ;usart.c: 187:                 break;
  7413  00175A  EFD5  F00B         	goto	i2l571
  7414  00175E                     i2l3204:
  7415  00175E  FFFF               	dw	65535	; assembler added errata NOP
  7416                           
  7417                           ;usart.c: 190:                 _fatalError = 1;
  7418  001760  0E01               	movlw	1
  7419  001762  6E60               	movwf	__fatalError^0,c
  7420                           
  7421                           ;usart.c: 191:                 break;
  7422  001764  EFD5  F00B         	goto	i2l571
  7423  001768                     i2l3206:
  7424  001768  FFFF               	dw	65535	; assembler added errata NOP
  7425                           
  7426                           ;usart.c: 194:                 printError(8);
  7427  00176A  0E08               	movlw	8
  7428  00176C  EC01  F00D         	call	i2_printError
  7429                           
  7430                           ;usart.c: 195:                 break;
  7431  001770  EFD5  F00B         	goto	i2l571
  7432  001774                     i2l3210:
  7433  001774  FFFF               	dw	65535	; assembler added errata NOP
  7434  001776  5045               	movf	storeData@receivedMex^0,w,c
  7435  001778  6E08               	movwf	??i2_storeData^0,c
  7436  00177A  6A09               	clrf	(??i2_storeData+1)^0,c
  7437                           
  7438                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7439                           ; Switch size 1, requested type "simple"
  7440                           ; Number of cases is 1, Range of values is 0 to 0
  7441                           ; switch strategies available:
  7442                           ; Name         Instructions Cycles
  7443                           ; simple_byte            4     3 (average)
  7444                           ;	Chosen strategy is simple_byte
  7445  00177C  5009               	movf	(??i2_storeData+1)^0,w,c
  7446  00177E  0A00               	xorlw	0	; case 0
  7447  001780  B4D8               	btfsc	status,2,c
  7448  001782  EFC5  F00B         	goto	i2l4504
  7449  001786  EFB4  F00B         	goto	i2l3206
  7450  00178A                     i2l4504:
  7451  00178A  FFFF               	dw	65535	; assembler added errata NOP
  7452                           
  7453                           ; Switch size 1, requested type "simple"
  7454                           ; Number of cases is 3, Range of values is 0 to 2
  7455                           ; switch strategies available:
  7456                           ; Name         Instructions Cycles
  7457                           ; simple_byte           10     6 (average)
  7458                           ;	Chosen strategy is simple_byte
  7459  00178C  5008               	movf	??i2_storeData^0,w,c
  7460  00178E  0A00               	xorlw	0	; case 0
  7461  001790  B4D8               	btfsc	status,2,c
  7462  001792  EF6E  F00B         	goto	i2l3198
  7463  001796  0A01               	xorlw	1	; case 1
  7464  001798  B4D8               	btfsc	status,2,c
  7465  00179A  EF9A  F00B         	goto	i2l568
  7466  00179E  0A03               	xorlw	3	; case 2
  7467  0017A0  B4D8               	btfsc	status,2,c
  7468  0017A2  EFAF  F00B         	goto	i2l3204
  7469  0017A6  EFB4  F00B         	goto	i2l3206
  7470  0017AA                     i2l571:
  7471  0017AA  FFFF               	dw	65535	; assembler added errata NOP
  7472  0017AC  0012               	return		;funcret
  7473  0017AE  FFFF               	dw	65535	; errata NOP
  7474  0017B0                     __end_ofi2_storeData:
  7475                           	callstack 0
  7476                           
  7477 ;; *************** function i2_printError *****************
  7478 ;; Defined at:
  7479 ;;		line 53 in file "usart.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;  errCode         1    wreg     unsigned char 
  7482 ;; Auto vars:     Size  Location     Type
  7483 ;;  errCode         1    6[COMRAM] unsigned char 
  7484 ;; Return value:  Size  Location     Type
  7485 ;;                  1    wreg      void 
  7486 ;; Registers used:
  7487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7488 ;; Tracked objects:
  7489 ;;		On entry : 0/0
  7490 ;;		On exit  : 0/0
  7491 ;;		Unchanged: 0/0
  7492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7493 ;;      Params:         0       0       0       0       0       0       0
  7494 ;;      Locals:         1       0       0       0       0       0       0
  7495 ;;      Temps:          2       0       0       0       0       0       0
  7496 ;;      Totals:         3       0       0       0       0       0       0
  7497 ;;Total ram usage:        3 bytes
  7498 ;; Hardware stack levels used:    1
  7499 ;; Hardware stack levels required when called:    1
  7500 ;; This function calls:
  7501 ;;		i2_uartTx
  7502 ;; This function is called by:
  7503 ;;		i2_storeData
  7504 ;; This function uses a non-reentrant model
  7505 ;;
  7506                           
  7507                           	psect	text46
  7508  001A02                     __ptext46:
  7509                           	callstack 0
  7510  001A02                     i2_printError:
  7511                           	callstack 0
  7512  001A02  FFFF               	dw	65535	; assembler added errata NOP
  7513                           
  7514                           ;incstack = 0
  7515                           ;i2printError@errCode stored from wreg
  7516  001A04  6E07               	movwf	i2printError@errCode^0,c
  7517  001A06                     
  7518                           ;usart.c: 55:     switch(errCode){
  7519  001A06  EF5D  F00D         	goto	i2l2932
  7520  001A0A                     i2l2914:
  7521  001A0A  FFFF               	dw	65535	; assembler added errata NOP
  7522                           
  7523                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7524  001A0C  0EA4               	movlw	low _errString_Feed
  7525  001A0E  6E01               	movwf	i2uartTx@ptr^0,c
  7526  001A10  0E00               	movlw	high _errString_Feed
  7527  001A12  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7528  001A14  0E1D               	movlw	29
  7529  001A16  6E03               	movwf	i2uartTx@length^0,c
  7530  001A18  EC8B  F011         	call	i2_uartTx	;wreg free
  7531                           
  7532                           ;usart.c: 58:             break;
  7533  001A1C  EF8C  F00D         	goto	i2l527
  7534  001A20                     i2l2916:
  7535  001A20  FFFF               	dw	65535	; assembler added errata NOP
  7536                           
  7537                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7538  001A22  0E5C               	movlw	low _errString_ZEND
  7539  001A24  6E01               	movwf	i2uartTx@ptr^0,c
  7540  001A26  0E01               	movlw	high _errString_ZEND
  7541  001A28  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7542  001A2A  0E28               	movlw	40
  7543  001A2C  6E03               	movwf	i2uartTx@length^0,c
  7544  001A2E  EC8B  F011         	call	i2_uartTx	;wreg free
  7545                           
  7546                           ;usart.c: 61:             break;
  7547  001A32  EF8C  F00D         	goto	i2l527
  7548  001A36                     i2l2918:
  7549  001A36  FFFF               	dw	65535	; assembler added errata NOP
  7550                           
  7551                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7552  001A38  0E84               	movlw	low _errString_Reset
  7553  001A3A  6E01               	movwf	i2uartTx@ptr^0,c
  7554  001A3C  0E01               	movlw	high _errString_Reset
  7555  001A3E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7556  001A40  0E27               	movlw	39
  7557  001A42  6E03               	movwf	i2uartTx@length^0,c
  7558  001A44  EC8B  F011         	call	i2_uartTx	;wreg free
  7559                           
  7560                           ;usart.c: 64:             break;
  7561  001A48  EF8C  F00D         	goto	i2l527
  7562  001A4C                     i2l2920:
  7563  001A4C  FFFF               	dw	65535	; assembler added errata NOP
  7564                           
  7565                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7566  001A4E  0E34               	movlw	low _errString_Point
  7567  001A50  6E01               	movwf	i2uartTx@ptr^0,c
  7568  001A52  0E01               	movlw	high _errString_Point
  7569  001A54  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7570  001A56  0E28               	movlw	40
  7571  001A58  6E03               	movwf	i2uartTx@length^0,c
  7572  001A5A  EC8B  F011         	call	i2_uartTx	;wreg free
  7573                           
  7574                           ;usart.c: 67:             break;
  7575  001A5E  EF8C  F00D         	goto	i2l527
  7576  001A62                     i2l2922:
  7577  001A62  FFFF               	dw	65535	; assembler added errata NOP
  7578                           
  7579                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7580  001A64  0E84               	movlw	low _errString_Bound
  7581  001A66  6E01               	movwf	i2uartTx@ptr^0,c
  7582  001A68  0E00               	movlw	high _errString_Bound
  7583  001A6A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7584  001A6C  0E20               	movlw	32
  7585  001A6E  6E03               	movwf	i2uartTx@length^0,c
  7586  001A70  EC8B  F011         	call	i2_uartTx	;wreg free
  7587                           
  7588                           ;usart.c: 70:             break;
  7589  001A74  EF8C  F00D         	goto	i2l527
  7590  001A78                     i2l2924:
  7591  001A78  FFFF               	dw	65535	; assembler added errata NOP
  7592                           
  7593                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7594  001A7A  0E00               	movlw	low _errString_PointZ
  7595  001A7C  6E01               	movwf	i2uartTx@ptr^0,c
  7596  001A7E  0E01               	movlw	high _errString_PointZ
  7597  001A80  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7598  001A82  0E34               	movlw	52
  7599  001A84  6E03               	movwf	i2uartTx@length^0,c
  7600  001A86  EC8B  F011         	call	i2_uartTx	;wreg free
  7601                           
  7602                           ;usart.c: 73:             break;
  7603  001A8A  EF8C  F00D         	goto	i2l527
  7604  001A8E                     i2l2926:
  7605  001A8E  FFFF               	dw	65535	; assembler added errata NOP
  7606                           
  7607                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7608  001A90  0EAB               	movlw	low _errString_Fatal
  7609  001A92  6E01               	movwf	i2uartTx@ptr^0,c
  7610  001A94  0E01               	movlw	high _errString_Fatal
  7611  001A96  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7612  001A98  0E26               	movlw	38
  7613  001A9A  6E03               	movwf	i2uartTx@length^0,c
  7614  001A9C  EC8B  F011         	call	i2_uartTx	;wreg free
  7615                           
  7616                           ;usart.c: 76:             break;
  7617  001AA0  EF8C  F00D         	goto	i2l527
  7618  001AA4                     i2l2928:
  7619  001AA4  FFFF               	dw	65535	; assembler added errata NOP
  7620                           
  7621                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7622  001AA6  0EC1               	movlw	low _errString_Command
  7623  001AA8  6E01               	movwf	i2uartTx@ptr^0,c
  7624  001AAA  0E00               	movlw	high _errString_Command
  7625  001AAC  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7626  001AAE  0E17               	movlw	23
  7627  001AB0  6E03               	movwf	i2uartTx@length^0,c
  7628  001AB2  EC8B  F011         	call	i2_uartTx	;wreg free
  7629                           
  7630                           ;usart.c: 79:             break;
  7631  001AB6  EF8C  F00D         	goto	i2l527
  7632  001ABA                     i2l2932:
  7633  001ABA  FFFF               	dw	65535	; assembler added errata NOP
  7634  001ABC  5007               	movf	i2printError@errCode^0,w,c
  7635  001ABE  6E05               	movwf	??i2_printError^0,c
  7636  001AC0  6A06               	clrf	(??i2_printError+1)^0,c
  7637                           
  7638                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7639                           ; Switch size 1, requested type "simple"
  7640                           ; Number of cases is 1, Range of values is 0 to 0
  7641                           ; switch strategies available:
  7642                           ; Name         Instructions Cycles
  7643                           ; simple_byte            4     3 (average)
  7644                           ;	Chosen strategy is simple_byte
  7645  001AC2  5006               	movf	(??i2_printError+1)^0,w,c
  7646  001AC4  0A00               	xorlw	0	; case 0
  7647  001AC6  B4D8               	btfsc	status,2,c
  7648  001AC8  EF68  F00D         	goto	i2l4506
  7649  001ACC  EF8C  F00D         	goto	i2l527
  7650  001AD0                     i2l4506:
  7651  001AD0  FFFF               	dw	65535	; assembler added errata NOP
  7652                           
  7653                           ; Switch size 1, requested type "simple"
  7654                           ; Number of cases is 8, Range of values is 1 to 8
  7655                           ; switch strategies available:
  7656                           ; Name         Instructions Cycles
  7657                           ; simple_byte           25    13 (average)
  7658                           ;	Chosen strategy is simple_byte
  7659  001AD2  5005               	movf	??i2_printError^0,w,c
  7660  001AD4  0A01               	xorlw	1	; case 1
  7661  001AD6  B4D8               	btfsc	status,2,c
  7662  001AD8  EF05  F00D         	goto	i2l2914
  7663  001ADC  0A03               	xorlw	3	; case 2
  7664  001ADE  B4D8               	btfsc	status,2,c
  7665  001AE0  EF10  F00D         	goto	i2l2916
  7666  001AE4  0A01               	xorlw	1	; case 3
  7667  001AE6  B4D8               	btfsc	status,2,c
  7668  001AE8  EF1B  F00D         	goto	i2l2918
  7669  001AEC  0A07               	xorlw	7	; case 4
  7670  001AEE  B4D8               	btfsc	status,2,c
  7671  001AF0  EF26  F00D         	goto	i2l2920
  7672  001AF4  0A01               	xorlw	1	; case 5
  7673  001AF6  B4D8               	btfsc	status,2,c
  7674  001AF8  EF31  F00D         	goto	i2l2922
  7675  001AFC  0A03               	xorlw	3	; case 6
  7676  001AFE  B4D8               	btfsc	status,2,c
  7677  001B00  EF3C  F00D         	goto	i2l2924
  7678  001B04  0A01               	xorlw	1	; case 7
  7679  001B06  B4D8               	btfsc	status,2,c
  7680  001B08  EF47  F00D         	goto	i2l2926
  7681  001B0C  0A0F               	xorlw	15	; case 8
  7682  001B0E  B4D8               	btfsc	status,2,c
  7683  001B10  EF52  F00D         	goto	i2l2928
  7684  001B14  EF8C  F00D         	goto	i2l527
  7685  001B18                     i2l527:
  7686  001B18  FFFF               	dw	65535	; assembler added errata NOP
  7687  001B1A  0012               	return		;funcret
  7688  001B1C  FFFF               	dw	65535	; errata NOP
  7689  001B1E                     __end_ofi2_printError:
  7690                           	callstack 0
  7691                           
  7692 ;; *************** function i2_uartTx *****************
  7693 ;; Defined at:
  7694 ;;		line 221 in file "usart.c"
  7695 ;; Parameters:    Size  Location     Type
  7696 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7697 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  7698 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  7699 ;;  length          1    2[COMRAM] unsigned char 
  7700 ;; Auto vars:     Size  Location     Type
  7701 ;;  i               1    3[COMRAM] unsigned char 
  7702 ;; Return value:  Size  Location     Type
  7703 ;;                  1    wreg      void 
  7704 ;; Registers used:
  7705 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7706 ;; Tracked objects:
  7707 ;;		On entry : 0/0
  7708 ;;		On exit  : 0/0
  7709 ;;		Unchanged: 0/0
  7710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7711 ;;      Params:         3       0       0       0       0       0       0
  7712 ;;      Locals:         1       0       0       0       0       0       0
  7713 ;;      Temps:          0       0       0       0       0       0       0
  7714 ;;      Totals:         4       0       0       0       0       0       0
  7715 ;;Total ram usage:        4 bytes
  7716 ;; Hardware stack levels used:    1
  7717 ;; This function calls:
  7718 ;;		Nothing
  7719 ;; This function is called by:
  7720 ;;		i2_printError
  7721 ;; This function uses a non-reentrant model
  7722 ;;
  7723                           
  7724                           	psect	text47
  7725  002316                     __ptext47:
  7726                           	callstack 0
  7727  002316                     i2_uartTx:
  7728                           	callstack 0
  7729  002316  FFFF               	dw	65535	; assembler added errata NOP
  7730  002318                     
  7731                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  7732  002318  0E01               	movlw	1
  7733  00231A  6E04               	movwf	i2uartTx@i^0,c
  7734  00231C  EFA4  F011         	goto	i2l2612
  7735  002320                     i2l2608:
  7736  002320  FFFF               	dw	65535	; assembler added errata NOP
  7737                           
  7738                           ;usart.c: 226:         TXREG = *ptr;
  7739  002322  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  7740  002326  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  7741  00232A  50DF               	movf	indf2,w,c
  7742  00232C  6EAD               	movwf	173,c	;volatile
  7743  00232E                     i2l582:
  7744  00232E  FFFF               	dw	65535	; assembler added errata NOP
  7745  002330  A2AC               	btfss	172,1,c	;volatile
  7746  002332  EF9D  F011         	goto	i2u168_41
  7747  002336  EFA0  F011         	goto	i2u168_40
  7748  00233A                     i2u168_41:
  7749  00233A  FFFF               	dw	65535	; assembler added errata NOP
  7750  00233C  EF97  F011         	goto	i2l582
  7751  002340                     i2u168_40:
  7752  002340  FFFF               	dw	65535	; assembler added errata NOP
  7753  002342                     
  7754                           ;usart.c: 230:         ptr++;
  7755  002342  4A01               	infsnz	i2uartTx@ptr^0,f,c
  7756  002344  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  7757                           
  7758                           ;usart.c: 231:     }
  7759  002346  2A04               	incf	i2uartTx@i^0,f,c
  7760  002348                     i2l2612:
  7761  002348  FFFF               	dw	65535	; assembler added errata NOP
  7762  00234A  5003               	movf	i2uartTx@length^0,w,c
  7763  00234C  5C04               	subwf	i2uartTx@i^0,w,c
  7764  00234E  A0D8               	btfss	status,0,c
  7765  002350  EFAC  F011         	goto	i2u169_41
  7766  002354  EFAF  F011         	goto	i2u169_40
  7767  002358                     i2u169_41:
  7768  002358  FFFF               	dw	65535	; assembler added errata NOP
  7769  00235A  EF90  F011         	goto	i2l2608
  7770  00235E                     i2u169_40:
  7771  00235E  FFFF               	dw	65535	; assembler added errata NOP
  7772  002360  0012               	return		;funcret
  7773  002362  FFFF               	dw	65535	; errata NOP
  7774  002364                     __end_ofi2_uartTx:
  7775                           	callstack 0
  7776                           
  7777 ;; *************** function _writeTM0 *****************
  7778 ;; Defined at:
  7779 ;;		line 21 in file "motors.c"
  7780 ;; Parameters:    Size  Location     Type
  7781 ;;		None
  7782 ;; Auto vars:     Size  Location     Type
  7783 ;;		None
  7784 ;; Return value:  Size  Location     Type
  7785 ;;                  1    wreg      void 
  7786 ;; Registers used:
  7787 ;;		wreg, status,2
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7793 ;;      Params:         0       0       0       0       0       0       0
  7794 ;;      Locals:         0       0       0       0       0       0       0
  7795 ;;      Temps:          0       0       0       0       0       0       0
  7796 ;;      Totals:         0       0       0       0       0       0       0
  7797 ;;Total ram usage:        0 bytes
  7798 ;; Hardware stack levels used:    1
  7799 ;; This function calls:
  7800 ;;		Nothing
  7801 ;; This function is called by:
  7802 ;;		_isr
  7803 ;; This function uses a non-reentrant model
  7804 ;;
  7805                           
  7806                           	psect	text48
  7807  0024B4                     __ptext48:
  7808                           	callstack 0
  7809  0024B4                     _writeTM0:
  7810                           	callstack 0
  7811  0024B4  FFFF               	dw	65535	; assembler added errata NOP
  7812  0024B6                     
  7813                           ;motors.c: 22:     tm0Error = 1;
  7814  0024B6  0E00               	movlw	0
  7815  0024B8  6E5C               	movwf	(_tm0Error+1)^0,c
  7816  0024BA  0E01               	movlw	1
  7817  0024BC  6E5B               	movwf	_tm0Error^0,c
  7818  0024BE  0012               	return		;funcret
  7819  0024C0  FFFF               	dw	65535	; errata NOP
  7820  0024C2                     __end_of_writeTM0:
  7821                           	callstack 0
  7822                           
  7823 ;; *************** function _whatsTM0Limit *****************
  7824 ;; Defined at:
  7825 ;;		line 35 in file "motors.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;		None
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;		None
  7830 ;; Return value:  Size  Location     Type
  7831 ;;                  1    wreg      unsigned char 
  7832 ;; Registers used:
  7833 ;;		wreg, status,2
  7834 ;; Tracked objects:
  7835 ;;		On entry : 0/0
  7836 ;;		On exit  : 0/0
  7837 ;;		Unchanged: 0/0
  7838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7839 ;;      Params:         0       0       0       0       0       0       0
  7840 ;;      Locals:         0       0       0       0       0       0       0
  7841 ;;      Temps:          0       0       0       0       0       0       0
  7842 ;;      Totals:         0       0       0       0       0       0       0
  7843 ;;Total ram usage:        0 bytes
  7844 ;; Hardware stack levels used:    1
  7845 ;; This function calls:
  7846 ;;		Nothing
  7847 ;; This function is called by:
  7848 ;;		_isr
  7849 ;; This function uses a non-reentrant model
  7850 ;;
  7851                           
  7852                           	psect	text49
  7853  00256C                     __ptext49:
  7854                           	callstack 0
  7855  00256C                     _whatsTM0Limit:
  7856                           	callstack 0
  7857  00256C  FFFF               	dw	65535	; assembler added errata NOP
  7858  00256E                     
  7859                           ;motors.c: 36:     return(tm0Limit);
  7860  00256E  5068               	movf	_tm0Limit^0,w,c
  7861  002570  0012               	return		;funcret
  7862  002572  FFFF               	dw	65535	; errata NOP
  7863  002574                     __end_of_whatsTM0Limit:
  7864                           	callstack 0
  7865                           
  7866 ;; *************** function _toggleStep *****************
  7867 ;; Defined at:
  7868 ;;		line 80 in file "pwm.c"
  7869 ;; Parameters:    Size  Location     Type
  7870 ;;		None
  7871 ;; Auto vars:     Size  Location     Type
  7872 ;;		None
  7873 ;; Return value:  Size  Location     Type
  7874 ;;                  1    wreg      void 
  7875 ;; Registers used:
  7876 ;;		wreg, status,2
  7877 ;; Tracked objects:
  7878 ;;		On entry : 0/0
  7879 ;;		On exit  : 0/0
  7880 ;;		Unchanged: 0/0
  7881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7882 ;;      Params:         0       0       0       0       0       0       0
  7883 ;;      Locals:         0       0       0       0       0       0       0
  7884 ;;      Temps:          0       0       0       0       0       0       0
  7885 ;;      Totals:         0       0       0       0       0       0       0
  7886 ;;Total ram usage:        0 bytes
  7887 ;; Hardware stack levels used:    1
  7888 ;; This function calls:
  7889 ;;		Nothing
  7890 ;; This function is called by:
  7891 ;;		_isr
  7892 ;; This function uses a non-reentrant model
  7893 ;;
  7894                           
  7895                           	psect	text50
  7896  002526                     __ptext50:
  7897                           	callstack 0
  7898  002526                     _toggleStep:
  7899                           	callstack 0
  7900  002526  FFFF               	dw	65535	; assembler added errata NOP
  7901  002528                     
  7902                           ;pwm.c: 81:     stepToggle = 1;
  7903  002528  0E01               	movlw	1
  7904  00252A  6E66               	movwf	_stepToggle^0,c	;volatile
  7905  00252C  0012               	return		;funcret
  7906  00252E  FFFF               	dw	65535	; errata NOP
  7907  002530                     __end_of_toggleStep:
  7908                           	callstack 0
  7909                           
  7910 ;; *************** function _setTouchRel *****************
  7911 ;; Defined at:
  7912 ;;		line 86 in file "adc.c"
  7913 ;; Parameters:    Size  Location     Type
  7914 ;;		None
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;		None
  7917 ;; Return value:  Size  Location     Type
  7918 ;;                  1    wreg      void 
  7919 ;; Registers used:
  7920 ;;		wreg, status,2
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7926 ;;      Params:         0       0       0       0       0       0       0
  7927 ;;      Locals:         0       0       0       0       0       0       0
  7928 ;;      Temps:          0       0       0       0       0       0       0
  7929 ;;      Totals:         0       0       0       0       0       0       0
  7930 ;;Total ram usage:        0 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; This function calls:
  7933 ;;		Nothing
  7934 ;; This function is called by:
  7935 ;;		_isr
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           	psect	text51
  7940  002530                     __ptext51:
  7941                           	callstack 0
  7942  002530                     _setTouchRel:
  7943                           	callstack 0
  7944  002530  FFFF               	dw	65535	; assembler added errata NOP
  7945  002532                     
  7946                           ;adc.c: 87:     touch_rel = 1;
  7947  002532  0E01               	movlw	1
  7948  002534  6E65               	movwf	_touch_rel^0,c	;volatile
  7949  002536  0012               	return		;funcret
  7950  002538  FFFF               	dw	65535	; errata NOP
  7951  00253A                     __end_of_setTouchRel:
  7952                           	callstack 0
  7953                           
  7954 ;; *************** function _setThermRel *****************
  7955 ;; Defined at:
  7956 ;;		line 79 in file "adc.c"
  7957 ;; Parameters:    Size  Location     Type
  7958 ;;		None
  7959 ;; Auto vars:     Size  Location     Type
  7960 ;;		None
  7961 ;; Return value:  Size  Location     Type
  7962 ;;                  1    wreg      void 
  7963 ;; Registers used:
  7964 ;;		wreg, status,2
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7970 ;;      Params:         0       0       0       0       0       0       0
  7971 ;;      Locals:         0       0       0       0       0       0       0
  7972 ;;      Temps:          0       0       0       0       0       0       0
  7973 ;;      Totals:         0       0       0       0       0       0       0
  7974 ;;Total ram usage:        0 bytes
  7975 ;; Hardware stack levels used:    1
  7976 ;; This function calls:
  7977 ;;		Nothing
  7978 ;; This function is called by:
  7979 ;;		_isr
  7980 ;; This function uses a non-reentrant model
  7981 ;;
  7982                           
  7983                           	psect	text52
  7984  00253A                     __ptext52:
  7985                           	callstack 0
  7986  00253A                     _setThermRel:
  7987                           	callstack 0
  7988  00253A  FFFF               	dw	65535	; assembler added errata NOP
  7989  00253C                     
  7990                           ;adc.c: 80:     therm_rel = 1;
  7991  00253C  0E01               	movlw	1
  7992  00253E  6E64               	movwf	_therm_rel^0,c	;volatile
  7993  002540  0012               	return		;funcret
  7994  002542  FFFF               	dw	65535	; errata NOP
  7995  002544                     __end_of_setThermRel:
  7996                           	callstack 0
  7997                           
  7998 ;; *************** function _retPeriod *****************
  7999 ;; Defined at:
  8000 ;;		line 88 in file "pwm.c"
  8001 ;; Parameters:    Size  Location     Type
  8002 ;;		None
  8003 ;; Auto vars:     Size  Location     Type
  8004 ;;		None
  8005 ;; Return value:  Size  Location     Type
  8006 ;;                  2    0[COMRAM] unsigned int 
  8007 ;; Registers used:
  8008 ;;		None
  8009 ;; Tracked objects:
  8010 ;;		On entry : 0/0
  8011 ;;		On exit  : 0/0
  8012 ;;		Unchanged: 0/0
  8013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8014 ;;      Params:         2       0       0       0       0       0       0
  8015 ;;      Locals:         0       0       0       0       0       0       0
  8016 ;;      Temps:          0       0       0       0       0       0       0
  8017 ;;      Totals:         2       0       0       0       0       0       0
  8018 ;;Total ram usage:        2 bytes
  8019 ;; Hardware stack levels used:    1
  8020 ;; This function calls:
  8021 ;;		Nothing
  8022 ;; This function is called by:
  8023 ;;		_isr
  8024 ;; This function uses a non-reentrant model
  8025 ;;
  8026                           
  8027                           	psect	text53
  8028  0024C2                     __ptext53:
  8029                           	callstack 0
  8030  0024C2                     _retPeriod:
  8031                           	callstack 0
  8032  0024C2  FFFF               	dw	65535	; assembler added errata NOP
  8033  0024C4                     
  8034                           ;pwm.c: 89:     return pwmPeriod;
  8035  0024C4  C055  F001         	movff	_pwmPeriod,?_retPeriod
  8036  0024C8  C056  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  8037  0024CC  0012               	return		;funcret
  8038  0024CE  FFFF               	dw	65535	; errata NOP
  8039  0024D0                     __end_of_retPeriod:
  8040                           	callstack 0
  8041                           
  8042 ;; *************** function _increaseStep *****************
  8043 ;; Defined at:
  8044 ;;		line 72 in file "pwm.c"
  8045 ;; Parameters:    Size  Location     Type
  8046 ;;		None
  8047 ;; Auto vars:     Size  Location     Type
  8048 ;;		None
  8049 ;; Return value:  Size  Location     Type
  8050 ;;                  1    wreg      void 
  8051 ;; Registers used:
  8052 ;;		status,2, status,0
  8053 ;; Tracked objects:
  8054 ;;		On entry : 0/0
  8055 ;;		On exit  : 0/0
  8056 ;;		Unchanged: 0/0
  8057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8058 ;;      Params:         0       0       0       0       0       0       0
  8059 ;;      Locals:         0       0       0       0       0       0       0
  8060 ;;      Temps:          0       0       0       0       0       0       0
  8061 ;;      Totals:         0       0       0       0       0       0       0
  8062 ;;Total ram usage:        0 bytes
  8063 ;; Hardware stack levels used:    1
  8064 ;; This function calls:
  8065 ;;		Nothing
  8066 ;; This function is called by:
  8067 ;;		_isr
  8068 ;; This function uses a non-reentrant model
  8069 ;;
  8070                           
  8071                           	psect	text54
  8072  002574                     __ptext54:
  8073                           	callstack 0
  8074  002574                     _increaseStep:
  8075                           	callstack 0
  8076  002574  FFFF               	dw	65535	; assembler added errata NOP
  8077  002576                     
  8078                           ;pwm.c: 73:     pwmStep++;
  8079  002576  2A67               	incf	_pwmStep^0,f,c	;volatile
  8080  002578  0012               	return		;funcret
  8081  00257A  FFFF               	dw	65535	; errata NOP
  8082  00257C                     __end_of_increaseStep:
  8083                           	callstack 0
  8084                           
  8085                           	psect	rparam
  8086  0000                     
  8087                           	psect	temp
  8088  00006E                     btemp:
  8089                           	callstack 0
  8090  00006E                     	ds	1
  8091  0000                     int$flags	set	btemp
  8092  0000                     wtemp8	set	btemp+1
  8093  0000                     ttemp5	set	btemp+1
  8094  0000                     ttemp6	set	btemp+4
  8095  0000                     ttemp7	set	btemp+8
  8096                           
  8097                           	psect	idloc
  8098                           
  8099                           ;Config register IDLOC0 @ 0x200000
  8100                           ;	unspecified, using default values
  8101  200000                     	org	2097152
  8102  200000  FF                 	db	255
  8103                           
  8104                           ;Config register IDLOC1 @ 0x200001
  8105                           ;	unspecified, using default values
  8106  200001                     	org	2097153
  8107  200001  FF                 	db	255
  8108                           
  8109                           ;Config register IDLOC2 @ 0x200002
  8110                           ;	unspecified, using default values
  8111  200002                     	org	2097154
  8112  200002  FF                 	db	255
  8113                           
  8114                           ;Config register IDLOC3 @ 0x200003
  8115                           ;	unspecified, using default values
  8116  200003                     	org	2097155
  8117  200003  FF                 	db	255
  8118                           
  8119                           ;Config register IDLOC4 @ 0x200004
  8120                           ;	unspecified, using default values
  8121  200004                     	org	2097156
  8122  200004  FF                 	db	255
  8123                           
  8124                           ;Config register IDLOC5 @ 0x200005
  8125                           ;	unspecified, using default values
  8126  200005                     	org	2097157
  8127  200005  FF                 	db	255
  8128                           
  8129                           ;Config register IDLOC6 @ 0x200006
  8130                           ;	unspecified, using default values
  8131  200006                     	org	2097158
  8132  200006  FF                 	db	255
  8133                           
  8134                           ;Config register IDLOC7 @ 0x200007
  8135                           ;	unspecified, using default values
  8136  200007                     	org	2097159
  8137  200007  FF                 	db	255
  8138                           
  8139                           	psect	config
  8140                           
  8141                           ; Padding undefined space
  8142  300000                     	org	3145728
  8143  300000  FF                 	db	255
  8144                           
  8145                           ;Config register CONFIG1H @ 0x300001
  8146                           ;	Oscillator Selection bits
  8147                           ;	OSC = XT, XT oscillator
  8148                           ;	Oscillator System Clock Switch Enable bit
  8149                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8150  300001                     	org	3145729
  8151  300001  21                 	db	33
  8152                           
  8153                           ;Config register CONFIG2L @ 0x300002
  8154                           ;	Power-up Timer Enable bit
  8155                           ;	PWRT = OFF, PWRT disabled
  8156                           ;	Brown-out Reset Enable bit
  8157                           ;	BOR = OFF, Brown-out Reset disabled
  8158                           ;	Brown-out Reset Voltage bits
  8159                           ;	BORV = 20, VBOR set to 2.0V
  8160  300002                     	org	3145730
  8161  300002  0D                 	db	13
  8162                           
  8163                           ;Config register CONFIG2H @ 0x300003
  8164                           ;	Watchdog Timer Enable bit
  8165                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8166                           ;	Watchdog Timer Postscale Select bits
  8167                           ;	WDTPS = 128, 1:128
  8168  300003                     	org	3145731
  8169  300003  0E                 	db	14
  8170                           
  8171                           ; Padding undefined space
  8172  300004                     	org	3145732
  8173  300004  FF                 	db	255
  8174                           
  8175                           ;Config register CONFIG3H @ 0x300005
  8176                           ;	CCP2 Mux bit
  8177                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8178  300005                     	org	3145733
  8179  300005  00                 	db	0
  8180                           
  8181                           ;Config register CONFIG4L @ 0x300006
  8182                           ;	Stack Full/Underflow Reset Enable bit
  8183                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8184                           ;	Low Voltage ICSP Enable bit
  8185                           ;	LVP = OFF, Low Voltage ICSP disabled
  8186                           ;	Background Debugger Enable bit
  8187                           ;	DEBUG = 0x1, unprogrammed default
  8188  300006                     	org	3145734
  8189  300006  80                 	db	128
  8190                           
  8191                           ; Padding undefined space
  8192  300007                     	org	3145735
  8193  300007  FF                 	db	255
  8194                           
  8195                           ;Config register CONFIG5L @ 0x300008
  8196                           ;	Code Protection bit
  8197                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8198                           ;	Code Protection bit
  8199                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8200                           ;	Code Protection bit
  8201                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8202                           ;	Code Protection bit
  8203                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8204  300008                     	org	3145736
  8205  300008  0F                 	db	15
  8206                           
  8207                           ;Config register CONFIG5H @ 0x300009
  8208                           ;	Boot Block Code Protection bit
  8209                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8210                           ;	Data EEPROM Code Protection bit
  8211                           ;	CPD = OFF, Data EEPROM not code protected
  8212  300009                     	org	3145737
  8213  300009  C0                 	db	192
  8214                           
  8215                           ;Config register CONFIG6L @ 0x30000A
  8216                           ;	Write Protection bit
  8217                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8218                           ;	Write Protection bit
  8219                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8220                           ;	Write Protection bit
  8221                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8222                           ;	Write Protection bit
  8223                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8224  30000A                     	org	3145738
  8225  30000A  0F                 	db	15
  8226                           
  8227                           ;Config register CONFIG6H @ 0x30000B
  8228                           ;	Configuration Register Write Protection bit
  8229                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8230                           ;	Boot Block Write Protection bit
  8231                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8232                           ;	Data EEPROM Write Protection bit
  8233                           ;	WRTD = OFF, Data EEPROM not write protected
  8234  30000B                     	org	3145739
  8235  30000B  E0                 	db	224
  8236                           
  8237                           ;Config register CONFIG7L @ 0x30000C
  8238                           ;	Table Read Protection bit
  8239                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8240                           ;	Table Read Protection bit
  8241                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8242                           ;	Table Read Protection bit
  8243                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8244                           ;	Table Read Protection bit
  8245                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8246  30000C                     	org	3145740
  8247  30000C  0F                 	db	15
  8248                           
  8249                           ;Config register CONFIG7H @ 0x30000D
  8250                           ;	Boot Block Table Read Protection bit
  8251                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8252  30000D                     	org	3145741
  8253  30000D  40                 	db	64
  8254                           tosu	equ	0xFFF
  8255                           tosh	equ	0xFFE
  8256                           tosl	equ	0xFFD
  8257                           stkptr	equ	0xFFC
  8258                           pclatu	equ	0xFFB
  8259                           pclath	equ	0xFFA
  8260                           pcl	equ	0xFF9
  8261                           tblptru	equ	0xFF8
  8262                           tblptrh	equ	0xFF7
  8263                           tblptrl	equ	0xFF6
  8264                           tablat	equ	0xFF5
  8265                           prodh	equ	0xFF4
  8266                           prodl	equ	0xFF3
  8267                           indf0	equ	0xFEF
  8268                           postinc0	equ	0xFEE
  8269                           postdec0	equ	0xFED
  8270                           preinc0	equ	0xFEC
  8271                           plusw0	equ	0xFEB
  8272                           fsr0h	equ	0xFEA
  8273                           fsr0l	equ	0xFE9
  8274                           wreg	equ	0xFE8
  8275                           indf1	equ	0xFE7
  8276                           postinc1	equ	0xFE6
  8277                           postdec1	equ	0xFE5
  8278                           preinc1	equ	0xFE4
  8279                           plusw1	equ	0xFE3
  8280                           fsr1h	equ	0xFE2
  8281                           fsr1l	equ	0xFE1
  8282                           bsr	equ	0xFE0
  8283                           indf2	equ	0xFDF
  8284                           postinc2	equ	0xFDE
  8285                           postdec2	equ	0xFDD
  8286                           preinc2	equ	0xFDC
  8287                           plusw2	equ	0xFDB
  8288                           fsr2h	equ	0xFDA
  8289                           fsr2l	equ	0xFD9
  8290                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    14
    Data        302
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     68     109
    BANK0           128     11     127
    BANK1           256      5     214
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 52
		 -> errString_Command(BANK0[23]), errString_Fatal(BANK1[38]), errString_PointZ(BANK1[52]), errString_Bound(BANK0[32]), 
		 -> errString_Point(BANK1[40]), errString_Reset(BANK1[39]), errString_ZEND(BANK1[40]), errString_Feed(BANK0[29]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_executeData
    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_enableMotor
    _resetPosition->_setDecay
    _resetPosition->_setDirection
    _resetPosition->_setStep
    _touchTherm->_setDirection
    _touchObject->_setDirection
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_setDirection
    _liftArm->_setDirection

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   17356
                                              0 BANK1      5     5      0
                           _clearTM0
                        _enableMotor
                        _executeData
                         _fatalError
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0    2807
                                             21 COMRAM     3     3      0
                        _enableMotor
                          _resetStep
                           _setDecay
                       _setDirection
                            _setStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _setStep                                              4     3      1     487
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _setDecay                                             4     3      1     394
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _enableMotor                                          4     3      1     664
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0   10197
                                             66 COMRAM     2     2      0
                                              8 BANK0      3     3      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0    1058
                          _resetStep
                         _resetTherm
                        _returnTherm
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0    1058
                          _resetStep
                         _resetTouch
                        _returnTouch
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            8     8      0    3163
                                              0 BANK0      8     8      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    3508
                                             21 COMRAM    14     6      8
                          _resetStep
                       _setDirection
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0    1058
                          _resetStep
                       _setDirection
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _setDirection                                         4     3      1    1024
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0     552
                                             10 COMRAM     7     7      0
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _enableMotor
   _executeData
     _getData
     _liftArm
       _resetStep
       _setDirection
       _stepMade
     _moveToPoint
       _resetStep
       _setDirection
       _stepCounter
       _stepMade
     _pickObject
       _stepMade
     _releaseObj
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _stepMade
     _touchObject
       _resetStep
       _resetTouch
       _returnTouch
       _setDirection
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _setDirection
       _startADC
       _stepMade
       _stopADC
   _fatalError
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _enableMotor
     _resetStep
     _setDecay
     _setDirection
     _setStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      5      D6       7       83.6%
BITBANK0            80      0       0       4        0.0%
BANK0               80      B      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     44      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C2      15        0.0%
DATA                 0      0     1C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Feb 01 18:41:59 2021

                                                  ___fldiv@aexp 0038  
                                                  ___fldiv@bexp 0037  
                                         __end_of_interruptInit 239E  
                                                  ___fldiv@sign 0030  
                                                            l74 23C0  
                                                            l83 1DD2  
                                                            l68 24B0  
                                                            l92 2196  
                                                           l101 220A  
                                                           l110 2122  
                                                           l200 2000  
                                                           l120 1282  
                                                           l121 12B2  
                                                           l210 202A  
                                                           l202 1FC4  
                                                           l203 2012  
                                                           l131 1306  
                                                           l115 124E  
                                                           l124 12B6  
                                                           l116 1362  
                                                           l141 0CFE  
                                                           l125 12E6  
                                                           l117 127E  
                                                           l206 1FE4  
                                                           l151 0B98  
                                                           l223 1EA8  
                                                           l135 1378  
                                                           l321 14E2  
                                                           l162 0C80  
                                                           l402 24E4  
                                                           l330 237A  
                                                           l155 0BEA  
                                                           l235 240A  
                                                           l411 2504  
                                                           l331 2390  
                                                           l332 239A  
                                                           l149 0CE6  
                                                           l229 242E  
                                                           l405 24D8  
                                                           l166 0CA0  
                                                           l158 0C36  
                                                           l182 1CFA  
                                                           l174 1C5A  
                                                           l318 13E2  
                                                           l183 1CFE  
                                                           l319 13E4  
                                                           l408 2518  
                                                           l192 1B88  
                                                           l344 0F8E  
                                                           l360 2460  
                                                           l513 244C  
                                                           l178 1C7A  
                                                           l530 2548  
                                                           l363 2474  
                                                           l196 1C08  
                                                           l188 1B68  
                                                           l197 1C0C  
                                                           l533 2550  
                                                           l357 2486  
                                                           l366 24F0  
                                                           l542 24FA  
                                                           l527 19FC  
                                                           l536 2560  
                                                           l369 2522  
                                                           l393 23E6  
                                                           l539 2558  
                                                           l547 226C  
                                                           l571 1648  
                                                           l396 250E  
                                                           l574 24A2  
                                                           l582 22E0  
                                                           l399 2568  
                                                           l568 15D2  
                                                           l577 2494  
                                                           l586 2312  
                                                           l886 18E0  
                                                           _isr 0008  
                                                   _touchObject 1C10  
                                                           prod 000FF3  
                                                           wreg 000FE8  
                                                  ___fltol@exp1 0042  
                                                   main@errCode 01D3  
                                                          l1171 0A3C  
                                                          l1251 109E  
                                                          l1244 0FF2  
                                                          l1173 0854  
                                                          l1182 08AA  
                                                          l1247 1184  
                                                          l1184 093A  
                                                          l1176 080E  
                                                          l4000 1262  
                                                          l1185 0922  
                                                          l1258 110A  
                                                          l4010 12DC  
                                                          l4002 1274  
                                                          l4020 1350  
                                                          l4012 12EA  
                                                          l4004 1296  
                                                          l4100 1606  
                                                          l4030 2378  
                                                          l4022 1368  
                                                          l4014 130C  
                                                          l4006 12A8  
                                                          l3400 2466  
                                                          l4120 0D16  
                                                          l4040 23D6  
                                                          l4032 238E  
                                                          l4024 1374  
                                                          l4008 12CA  
                                                          l4016 1326  
                                                          l4104 1612  
                                                          l4200 137C  
                                                          l3402 246A  
                                                          l3410 24EA  
                                                          l4130 0DBE  
                                                          l4122 0D50  
                                                          l4042 23D8  
                                                          l4034 23C6  
                                                          l4114 24F6  
                                                          l4018 133C  
                                                          l4050 2482  
                                                          l4210 139E  
                                                          l4202 1382  
                                                          l3404 246E  
                                                          l3500 07D0  
                                                          l3412 250A  
                                                          l3420 24D2  
                                                          l4140 0E52  
                                                          l4132 0DD2  
                                                          l4124 0D60  
                                                          l4116 0D06  
                                                          l4044 23E2  
                                                          l4036 23CE  
                                                          l4028 2366  
                                                          l4052 2452  
                                                          l4060 2448  
                                                          l4220 13E8  
                                                          l4212 13A2  
                                                          l4204 1386  
                                                          l3510 083E  
                                                          l3502 07E6  
                                                          l3414 24DE  
                                                          l3422 2500  
                                                          l4142 0E56  
                                                          l4134 0E0C  
                                                          l4126 0D74  
                                                          l4150 0EB0  
                                                          l4118 0D12  
                                                          l4062 255E  
                                                          l4070 248C  
                                                          l4046 23E4  
                                                          l4038 23D4  
                                                          l3430 22FA  
                                                          l4054 2454  
                                                          l4230 1432  
                                                          l4222 1402  
                                                          l4214 13A4  
                                                          l4206 138A  
                                                          l3408 251E  
                                                          l3520 088A  
                                                          l3512 0840  
                                                          l3504 07FA  
                                                          l3440 0648  
                                                          l3432 0612  
                                                          l3416 2566  
                                                          l4160 0F38  
                                                          l4152 0EC6  
                                                          l4144 0E5E  
                                                          l4136 0E1C  
                                                          l4128 0DAE  
                                                          l3424 22CA  
                                                          l4080 1510  
                                                          l4048 247A  
                                                          l4056 2458  
                                                          l4240 1490  
                                                          l4232 1438  
                                                          l4224 140E  
                                                          l4216 13BE  
                                                          l4208 138E  
                                                          l3530 08D4  
                                                          l3522 0896  
                                                          l3514 0850  
                                                          l3506 080C  
                                                          l3450 068A  
                                                          l3442 065C  
                                                          l3434 061E  
                                                          l3610 18CE  
                                                          l3602 1886  
                                                          l3418 2514  
                                                          l4170 0F82  
                                                          l4162 0F6A  
                                                          l4154 0EDA  
                                                          l4138 0E30  
                                                          l4066 2556  
                                                          l3426 22D2  
                                                          l4090 1572  
                                                          l4082 151A  
                                                          l4074 14F0  
                                                          l4058 2434  
                                                          l4250 14AA  
                                                          l4242 1492  
                                                          l4234 143E  
                                                          l4226 1420  
                                                          l4218 13DC  
                                                          l4500 21EA  
                                                          l3540 095C  
                                                          l3532 08E6  
                                                          l3524 08A8  
                                                          l3516 086A  
                                                          l3508 081A  
                                                          l3460 06C2  
                                                          l3452 0692  
                                                          l3444 066C  
                                                          l3436 0630  
                                                          l3604 1894  
                                                          l3620 1004  
                                                          l4164 0F72  
                                                          l4156 0F16  
                                                          l4172 0F8A  
                                                          l4148 0E6A  
                                                          l4180 2546  
                                                          l3428 22F4  
                                                          l4092 157A  
                                                          l4076 1500  
                                                          l4252 14AE  
                                                          l4244 1496  
                                                          l4236 1452  
                                                          l4228 1430  
                                                          l3390 21C4  
                                                          l3710 0A5E  
                                                          l3550 09D2  
                                                          l3542 096E  
                                                          l3534 0918  
                                                          l3518 0884  
                                                          l3526 08BC  
                                                          l3470 0704  
                                                          l3462 06D6  
                                                          l3454 0698  
                                                          l3446 0670  
                                                          l3438 0632  
                                                          l3606 18A8  
                                                          l3630 104C  
                                                          l3622 1020  
                                                          l3614 0F96  
                                                          l4166 0F7A  
                                                          l4158 0F28  
                                                          l3702 20EC  
                                                          l4190 2256  
                                                          l4182 2212  
                                                          l4094 15CC  
                                                          l4078 1506  
                                                          l4086 1524  
                                                          l4246 149E  
                                                          l4238 1466  
                                                          l4254 14B6  
                                                          l3384 21A0  
                                                          l3720 0AAC  
                                                          l3712 0A76  
                                                          l3560 0A2C  
                                                          l3552 09F2  
                                                          l3544 0998  
                                                          l3528 08D0  
                                                          l3472 0720  
                                                          l3464 06E6  
                                                          l3456 06AA  
                                                          l3448 0678  
                                                          l3608 18BE  
                                                          l3640 10E4  
                                                          l3632 1084  
                                                          l3616 0FAA  
                                                          l3800 1C26  
                                                          l4168 0F7E  
                                                          l4192 2258  
                                                          l4096 15F4  
                                                          l4088 155A  
                                                          l4256 14D0  
                                                          l4248 14A4  
                                                          l3386 21A4  
                                                          l3394 21D4  
                                                          l3730 0AF2  
                                                          l3722 0AB4  
                                                          l3562 0A30  
                                                          l3554 0A0E  
                                                          l3538 0950  
                                                          l3546 099C  
                                                          l3490 077C  
                                                          l3474 0730  
                                                          l3482 0752  
                                                          l3466 06EA  
                                                          l3458 06AC  
                                                          l3570 17B2  
                                                          l3650 114A  
                                                          l3642 10F8  
                                                          l3634 1088  
                                                          l3626 1034  
                                                          l3618 0FBC  
                                                          l3810 1C4E  
                                                          l3802 1C2A  
                                                          l4194 254E  
                                                          l4098 15FC  
                                                          l4258 14D8  
                                                          l3388 21B4  
                                                          l3900 2024  
                                                          l3740 0B14  
                                                          l3732 0AFA  
                                                          l3724 0AC0  
                                                          l3716 0A7E  
                                                          l3708 0A44  
                                                          l3556 0A14  
                                                          l3548 09BC  
                                                          l3492 0798  
                                                          l3484 0768  
                                                          l3476 0738  
                                                          l3468 06F2  
                                                          l3580 1814  
                                                          l3572 17CC  
                                                          l3652 115E  
                                                          l3644 111E  
                                                          l3636 1094  
                                                          l3628 103E  
                                                          l3812 1C5E  
                                                          l3820 1CC2  
                                                          l3804 1C2C  
                                                          l3660 1D06  
                                                          l4188 2216  
                                                          l3902 2028  
                                                          l3750 0B40  
                                                          l3742 0B16  
                                                          l3734 0B06  
                                                          l3726 0AC4  
                                                          l3718 0AA2  
                                                          l3558 0A26  
                                                          l3494 07A8  
                                                          l3486 0768  
                                                          l3478 073E  
                                                          l3582 1824  
                                                          l3654 1170  
                                                          l3646 1120  
                                                          l3638 10D6  
                                                          l3910 1E3E  
                                                          l3830 1CE0  
                                                          l3822 1CC8  
                                                          l3814 1C7C  
                                                          l3806 1C34  
                                                          l3662 1D0A  
                                                          l3670 1D9C  
                                                          l4198 137C  
                                                          l3760 0BA0  
                                                          l3752 0B44  
                                                          l3744 0B1E  
                                                          l3736 0B0A  
                                                          l3728 0AE8  
                                                          l3920 2410  
                                                          l3496 07B8  
                                                          l3592 1856  
                                                          l3584 1828  
                                                          l3576 17E2  
                                                          l3656 1172  
                                                          l3648 1126  
                                                          l3912 1E44  
                                                          l3832 1CF2  
                                                          l3824 1CCC  
                                                          l3808 1C4C  
                                                          l3816 1C96  
                                                          l3840 1B2C  
                                                          l3680 2140  
                                                          l3664 1D38  
                                                          l3770 0C2C  
                                                          l3762 0BB6  
                                                          l3754 0B50  
                                                          l3746 0B22  
                                                          l3738 0B10  
                                                          l3922 2412  
                                                          l3498 07C8  
                                                          l3594 1862  
                                                          l3586 183A  
                                                          l3578 1812  
                                                          l3914 1E6A  
                                                          l3906 1DDE  
                                                          l3826 1CCE  
                                                          l3818 1CB2  
                                                          l3850 1B5A  
                                                          l3842 1B34  
                                                          l3682 2150  
                                                          l3666 1D6C  
                                                          l4490 19B4  
                                                          l3930 18EE  
                                                          l3780 0CA4  
                                                          l3772 0C3E  
                                                          l3756 0B66  
                                                          l3748 0B28  
                                                          l3924 23EC  
                                                          l3596 186C  
                                                          l3916 1E86  
                                                          l3908 1E30  
                                                          l3828 1CDC  
                                                          l3860 1BC0  
                                                          l3852 1B5C  
                                                          l3844 1B38  
                                                          l3836 1B20  
                                                          l3676 212C  
                                                          l3692 20B8  
                                                          l4492 1DB2  
                                                          l3940 195C  
                                                          l3932 1904  
                                                          l3790 0CFC  
                                                          l3774 0C54  
                                                          l3766 0BEE  
                                                          l3758 0B8E  
                                                          l3782 0CBE  
                                                          l3926 23EE  
                                                          l3918 1E8C  
                                                          l3870 1BEA  
                                                          l3854 1B6C  
                                                          l3862 1BD0  
                                                          l3846 1B3A  
                                                          l3838 1B2A  
                                                          l3678 2130  
                                                          l3686 2160  
                                                          l4494 2102  
                                                          l3694 20BC  
                                                          l3942 1972  
                                                          l3934 191A  
                                                          l4486 153A  
                                                          l3880 1F8A  
                                                          l3784 0CD4  
                                                          l3768 0C04  
                                                          l3872 1BEE  
                                                          l3864 1BD6  
                                                          l3856 1B8A  
                                                          l3848 1B42  
                                                          l3960 23A0  
                                                          l4496 2176  
                                                          l3696 20CC  
                                                          l3944 1988  
                                                          l3936 1930  
                                                          l3928 18EA  
                                                          l4488 1628  
                                                          l3954 249A  
                                                          l3890 1FB6  
                                                          l3882 1F8C  
                                                          l3786 0CEC  
                                                          l3778 0C84  
                                                          l3794 1C12  
                                                          l3874 1C00  
                                                          l3866 1BDA  
                                                          l3858 1BA4  
                                                          l4498 0E88  
                                                          l3970 23B8  
                                                          l3962 23A8  
                                                          l3698 20DC  
                                                          l3938 1946  
                                                          l3892 1FB8  
                                                          l3884 1F94  
                                                          l3788 0CF8  
                                                          l3796 1C1C  
                                                          l3868 1BDC  
                                                          l3972 23BA  
                                                          l3964 23AC  
                                                          l3980 1204  
                                                          l3948 199E  
                                                          l3958 24A8  
                                                          l3894 1FC8  
                                                          l3886 1F98  
                                                          l3878 1F80  
                                                          l3798 1C1E  
                                                          l3974 23BC  
                                                          l3966 23B0  
                                                          l3990 121A  
                                                          l3982 1208  
                                                          l3896 1FE6  
                                                          l3888 1F9E  
                                                          l3976 23BE  
                                                          l3968 23B4  
                                                          l3992 121E  
                                                          l3984 120C  
                                                          l3898 2018  
                                                          l3994 1224  
                                                          l3986 1210  
                                                          l3978 118C  
                                                          l3996 123C  
                                                          l3988 1212  
                                                          ?_isr 0001  
                                                          l3998 1242  
                                                          u3000 0B3E  
                                                          u3001 0B38  
                                                          u3010 0B64  
                                                          u3011 0B5E  
                                                          u3100 0CBE  
                                                          u3020 0B8C  
                                                          u3101 0CB8  
                                                          u3021 0B86  
                                                          u3110 0CD2  
                                                          u3030 0BB4  
                                                          u3111 0CCC  
                                                          u3031 0BAE  
                                                          u3120 0CE6  
                                                          u3040 0BE4  
                                                          u3200 1B86  
                                                          _LATD 000F8C  
                                                          u3121 0CE0  
                                                          u3041 0BDE  
                                                          u3201 1B80  
                                                          u3050 0C02  
                                                          u3130 1C4A  
                                                          u3210 1BA4  
                                                          u3051 0BFC  
                                                          u3131 1C44  
                                                          u3211 1B9E  
                                                          u3060 0C2A  
                                                          u2500 062E  
                                                          u3300 1EA6  
                                                          u3140 1C78  
                                                          u3220 1BBE  
                                                          u3061 0C24  
                                                          u2501 0628  
                                                          u3301 1EA0  
                                                          u3141 1C72  
                                                          u3221 1BB8  
                                                          u3070 0C52  
                                                          u3310 242C  
                                                          u2510 0646  
                                                          u3150 1C96  
                                                          u3230 1BD0  
                                                          u3071 0C4C  
                                                          u3311 2426  
                                                          u2511 0640  
                                                          u3151 1C90  
                                                          u3231 1BCA  
                                                          u3080 0C7A  
                                                          u3320 2408  
                                                          u2600 083C  
                                                          u2520 065A  
                                                          u3160 1CB0  
                                                          u3240 1BFE  
                                                          u3400 1304  
                                                          u3081 0C74  
                                                          u3321 2402  
                                                          u2601 0836  
                                                          u2521 0654  
                                                          u3161 1CAA  
                                                          u3241 1BF8  
                                                          u3401 12FE  
                                                          u3250 1FB4  
                                                          u3090 0C9E  
                                                          u2610 0868  
                                                          u2530 06A8  
                                                          u3170 1CC2  
                                                          u3410 1326  
                                                          u3330 123A  
                                                          u3251 1FAE  
                                                          u3091 0C98  
                                                          u2611 0862  
                                                          u2531 06A2  
                                                          u3171 1CBC  
                                                          u3411 1320  
                                                          u3331 1234  
                                                          u3260 1FE2  
                                                          u2700 09BA  
                                                          u2620 0882  
                                                          u2540 06C0  
                                                          u3180 1CF0  
                                                          u3420 133A  
                                                          u3340 1260  
                                                          u3500 226A  
                                                          u3261 1FDC  
                                                          u2701 09B4  
                                                          u2621 087C  
                                                          u2541 06BA  
                                                          u3181 1CEA  
                                                          u3421 1334  
                                                          u3341 125A  
                                                          u3501 2264  
                                                          u3270 2000  
                                                          u2710 09F0  
                                                          u2630 08A6  
                                                          u2550 06D4  
                                                          u3190 1B58  
                                                          u3430 134E  
                                                          u3350 1274  
                                                          u3510 13BC  
                                                          u2455 21AE  
                                                          u3271 1FFA  
                                                          u2711 09EA  
                                                          u2631 08A0  
                                                          u2551 06CE  
                                                          u3191 1B52  
                                                          u3431 1348  
                                                          u3351 126E  
                                                          u3511 13B6  
                                                          u2456 21B0  
                                                          u3280 2012  
                                                          u2720 0A24  
                                                          u2640 08CE  
                                                          u2560 071E  
                                                          u2800 0FA8  
                                                          u3440 1362  
                                                          u3360 1294  
                                                          u2480 22F2  
                                                          u3520 1400  
                                                          u2465 21BE  
                                                          u3281 200C  
                                                          u2721 0A1E  
                                                          u2641 08C8  
                                                          u2561 0718  
                                                          u2801 0FA2  
                                                          u3441 135C  
                                                          u3361 128E  
                                                          u2481 22EC  
                                                          u3521 13FA  
                                                          u2466 21C0  
                                                          u2650 08E4  
                                                          u2570 0766  
                                                          u2730 17CA  
                                                          u2810 0FBA  
                                                          u3290 1E84  
                                                          u3450 2376  
                                                          u3370 12A8  
                                                          u2490 2310  
                                                          u3530 14CE  
                                                          u2475 21CE  
                                                          u2651 08DE  
                                                          u2571 0760  
                                                          u2731 17C4  
                                                          u2811 0FB4  
                                                          u3291 1E7E  
                                                          u3451 2370  
                                                          u3371 12A2  
                                                          u2491 230A  
                                                          u3531 14C8  
                                                          u2476 21D0  
                                                          u2660 0916  
                                                          u2580 07E4  
                                                          u2740 1806  
                                                          u2820 101E  
                                                          u3460 238C  
                                                          u3380 12C8  
                                                          u2661 0910  
                                                          u2581 07DE  
                                                          u2821 1018  
                                                          u3461 2386  
                                                          u3381 12C2  
                                                          u2670 0934  
                                                          u2590 080A  
                                                          u2750 1838  
                                                          u2830 107E  
                                                          u3390 12DC  
                                                          u3470 1570  
                                                          u2671 092E  
                                                          u2591 0804  
                                                          u2751 1832  
                                                          u2831 1078  
                                                          u3391 12D6  
                                                          u3471 156A  
                                                          u2680 094E  
                                                          u2760 1850  
                                                          u2840 10D0  
                                                          u3480 0EC4  
                                                          u2681 0948  
                                                          u2761 184A  
                                                          u2745 17FA  
                                                          u2841 10CA  
                                                          u3481 0EBE  
                                                          u2905 213A  
                                                          u2690 096C  
                                                          u2770 1880  
                                                          u2850 10F6  
                                                          u3490 0F68  
                                                          u2906 213C  
                                                          u2691 0966  
                                                          u2771 187A  
                                                          u2851 10F0  
                                                          u3491 0F62  
                                                          u2915 214A  
                                                          u2780 18A8  
                                                          u2860 110A  
                                                          u2916 214C  
                                                          u2781 18A2  
                                                          u2861 1104  
                                                          u2925 215A  
                                                          u2790 18BC  
                                                          u2870 111C  
                                                          u2926 215C  
                                                          u2791 18B6  
                                                          u2871 1116  
                                                          u2935 20C6  
                                                          u2960 0A5C  
                                                          u2880 115C  
                                                          u2936 20C8  
                                                          u2961 0A56  
                                                          u2881 1156  
                                                          u2945 20D6  
                                                          u2970 0A76  
                                                          u2890 116E  
                                                          u2946 20D8  
                                                   main@newData 01D4  
                                                          u2971 0A70  
                                                          u2891 1168  
                                                          u2955 20E6  
                                                          u2980 0AA0  
                                                          u2956 20E8  
                                                          u2981 0A9A  
                                                          u2990 0AE6  
                                                          u2991 0AE0  
                                                          i2l71 2570  
                                                          i2l65 24BE  
                                                          _TMR0 000FD6  
                                                          _TMR2 000FCC  
                                           __end_ofi2_storeData 17B0  
                                                          _main 137C  
                                                          _maxX 006B  
                                                          _maxY 0069  
                                          __end_ofi2_printError 1B1E  
                                                          fsr2h 000FDA  
                                                          indf2 000FDF  
                                                          fsr1l 000FE1  
                                                          fsr2l 000FD9  
                                                          btemp 006E  
                                                          prodh 000FF4  
                                                          prodl 000FF3  
                                                          start 016A  
                                               ___fldiv@new_exp 0031  
                                                  ___param_bank 000000  
                                               ??_whatsTM0Limit 0001  
                                                         ??_isr 000B  
                                                  ?_executeData 0001  
                                               executeData@data 00FD  
                                                 ___fltol@sign1 0041  
                                                         ?_main 0001  
                                               __end_of___fldiv 0A42  
                                               __end_of___fltol 18E6  
                                                         i2l414 2540  
                                                         i2l417 2536  
                                                         i2l372 2578  
                                                         i2l375 252C  
                                                         i2l527 1B18  
                                                         i2l472 0152  
                                                         i2l378 24CC  
                                                         i2l571 17AA  
                                                         i2l582 232E  
                                                         i2l568 1734  
                                                         i2l586 2360  
                                          rotateObj@rotSequence 0080  
                                                         _SPBRG 000FAF  
                                                         _TRISA 000F92  
                                                         _TRISB 000F93  
                                                         _TRISC 000F94  
                                                         _TRISD 000F95  
                                                         _TXREG 000FAD  
                                               __end_of_getData 24A6  
                                               i2storeData@data 000A  
                                               __end_of_initADC 23EA  
                                                  ?_newSequence 0001  
                                               __end_of_liftArm 202E  
                                               __end_of_readSeq 2554  
                                                  stepMade@temp 0014  
                                               __end_of_setStep 1DD8  
                                                         tablat 000FF5  
                                                i2uartTx@length 0003  
                                               __end_of_stopADC 256C  
                                                         ttemp5 006F  
                                                         ttemp6 0072  
                                                         ttemp7 0076  
                                                         status 000FD8  
                                                         wtemp8 006F  
                                              __end_ofi2_uartTx 2364  
                                                 ?_increaseStep 0001  
                                               __initialization 202E  
                                        __size_of_initPinMotors 0026  
                                                  __end_of_main 14EC  
                                      resetPosition@keepMovingX 0016  
                                      resetPosition@keepMovingY 0017  
                                      resetPosition@keepMovingZ 0018  
                                                        ??_main 01D1  
                                                 __activetblptr 000002  
                                                   i2_storeData 164E  
                                          __size_of_enableMotor 0074  
                                                   isr@tm0Count 0063  
                                                  ?_setThermRel 0001  
                                                        _ADRESH 000FC4  
                                                        _ADRESL 000FC3  
                                                  ?_moveToPoint 0016  
                                                        i2l2122 253C  
                                                        i2l2116 2576  
                                                        i2l2124 2532  
                                                        i2l2118 2528  
                                                        i2l3200 172E  
                                                        i2l3202 1756  
                                                        i2l3210 1774  
                                                        i2l3204 175E  
                                                        i2l3300 0054  
                                                        i2l3206 1768  
                                                        i2l3310 0090  
                                                        i2l3302 0058  
                                                        i2l3320 00C0  
                                                        i2l3312 0092  
                                                        i2l3304 006C  
                                                        i2l2610 2342  
                                                        i2l3330 0114  
                                                        i2l3314 00A6  
                                                        i2l3306 006E  
                                                        i2l3322 00C6  
                                                        i2l2612 2348  
                                                        i2l3180 1652  
                                                        i2l3332 012E  
                                                        i2l3324 00DA  
                                                        i2l3316 00B8  
                                                        i2l3308 0072  
                                                        i2l2606 2318  
                                                        i2l3182 1662  
                                                        i2l3326 00E2  
                                                        i2l3334 0132  
                                                        i2l3318 00BC  
                                                        i2l2608 2320  
                                                        i2l3184 1668  
                                                        i2l3192 1686  
                                                        i2l3336 0146  
                                                        i2l3328 0108  
                                                        i2l3178 24C4  
                                                        i2l3186 1672  
                                                        i2l3194 16BC  
                                                        i2l3338 014C  
                                                        i2l3290 002E  
                                                        i2l3196 16D4  
                                                        i2l3188 167C  
                                                        i2l3292 0030  
                                                        i2l1870 24B6  
                                                        i2l3198 16DC  
                                                        i2l4502 169C  
                                                        i2l3294 0032  
                                                        i2l2920 1A4C  
                                                        i2l2912 1A06  
                                                        i2l4504 178A  
                                                        i2l3296 004E  
                                                        i2l3288 001C  
                                                        i2l1874 256E  
                                                        i2l4506 1AD0  
                                                        i2l2922 1A62  
                                                        i2l2914 1A0A  
                                                        i2l3298 0050  
                                                        i2l2924 1A78  
                                                        i2l2916 1A20  
                                                        i2l2932 1ABA  
                                                        i2l2926 1A8E  
                                                        i2l2918 1A36  
                                                        i2l2928 1AA4  
                                                        _RCREG1 000FAE  
                                                  ?_setTouchRel 0001  
                                                 setDecay@decay 0015  
                                              __end_of___xxtofl 118A  
                                                 setDecay@motor 0012  
                                              __end_of_clearTM0 24B4  
                                              _errString_PointZ 0100  
                                                ??_increaseStep 0001  
                                                     ??___fldiv 0028  
                                                     ??___fltol 003D  
                                              __end_of_tim0Init 248A  
                                              __end_of_tim2Init 2464  
                                                        clear_0 2094  
                                                        clear_1 20A0  
                                                     ??_getData 0014  
                                                        _uartTx 22C8  
                                              __end_of_setDecay 2128  
                                                     ??_initADC 0012  
                                                     ??_liftArm 0016  
                                                     ??_readSeq 0012  
                                                  __pdataCOMRAM 0069  
                                         __end_of_resetPosition 137C  
                                                  __mediumconst 0000  
                                                     ??_setStep 0013  
                                                        tblptrh 000FF7  
                                                        tblptrl 000FF6  
                                                        tblptru 000FF8  
                                                  ?_returnTherm 0012  
                                              __end_of_startADC 2512  
                                              __end_of_stepMade 2478  
                                                 _initPinMotors 239E  
                                                  ?_returnTouch 0012  
                                                     ??_stopADC 0012  
                                         __size_ofi2_printError 011C  
                                              __end_of_writeTM0 24C2  
                                     __size_of_resetNewSequence 000A  
                                                  ___xxtofl@arg 001C  
                                                  ___xxtofl@exp 001B  
                                                  ___xxtofl@val 0012  
                                                    __accesstop 0080  
                                       __end_of__initialization 20A6  
                                                  _dataSequence 00D8  
                                                 ___rparam_used 000001  
                                                    ___fltol@f1 0039  
                                                  ?_stepCounter 0012  
                                                   i2uartTx@ptr 0001  
                                                __pcstackCOMRAM 0001  
                                                  __newSequence 005F  
                                                  __pidataBANK0 2270  
                                                  __pidataBANK1 1EAC  
                                               isr@single_cycle 0051  
                                          __size_of_executeData 028E  
                                                 ?_setDirection 0012  
                                                  i2_printError 1A02  
                                                  ?_touchObject 0001  
                                                _errString_ZEND 015C  
                                                _errString_Feed 00A4  
                                                ?_initPinMotors 0001  
                                                     ?i2_uartTx 0001  
                                                    __pbssBANK0 00D8  
                                          __size_of_newSequence 0008  
                                                    _feeder1Pos 060D  
                                                    _feeder2Pos 060B  
                                                    _feeder3Pos 0609  
                                       __size_of_getNewSequence 000E  
                                                    _fatalError 255C  
                                            __size_of_reduceSeq 0008  
                                            __size_of_retPeriod 000E  
                                                _touch_pressure 0607  
                                            __size_of_shiftData 0060  
                                            __size_of_resetStep 000A  
                                                       _ADC_res 0053  
                                                       ?_uartTx 0012  
                                                ??_setDirection 0013  
                                                     ?___xxtofl 0012  
                                          __end_of_increaseStep 257C  
                                                     ?_clearTM0 0001  
                                                    ??i2_uartTx 0004  
                                            __size_of_rotateObj 00D4  
                                             _errString_Command 00C1  
                                            __size_of_usartInit 001E  
                                        __size_of_interruptInit 003A  
                                          __size_of_setThermRel 000A  
                                            __size_of_storeData 0162  
                                                     ?_tim0Init 0001  
                                                     ?_tim2Init 0012  
                                          __size_of_moveToPoint 02C2  
                                          storeData@receivedMex 0045  
                                               _newSequenceData 00EC  
                                                     ?_setDecay 0012  
                                          __size_of_setTouchRel 000A  
                                                   setStep@step 0015  
                                                       __Hparam 0000  
                                                       __Lparam 0000  
                                        __end_of_touch_pressure 0609  
                                                       ___fldiv 0610  
                                                     ?_startADC 0001  
                                                     ?_stepMade 0012  
                                                       ___fltol 17B0  
                                                  __psmallconst 0600  
                                                       __pcinit 202E  
                                         __end_of_whatsTM0Limit 2574  
                                                       _getData 2498  
                                                       __ramtop 0600  
                                                     ?_writeTM0 0001  
                                                    _pickObject 240E  
                                                       __ptext0 137C  
                                                       __ptext1 2432  
                                                       __ptext2 2450  
                                                       __ptext3 2478  
                                                       __ptext4 14EC  
                                                       __ptext5 18E6  
                                                       __ptext6 22C8  
                                                       __ptext7 2210  
                                                       __ptext8 118A  
                                                       __ptext9 1D02  
                                               __size_of_uartTx 004E  
                                                     _T0CONbits 000FD5  
                                                       _initADC 23C4  
                                               ??_initPinMotors 0012  
                                                       _liftArm 1F7E  
                                                     _T2CONbits 000FCA  
                                                       _readSeq 254C  
                                                  __size_of_isr 0162  
                                                    ??___xxtofl 0016  
                                                  ?i2_storeData 0001  
                                                    ??_clearTM0 0012  
                                                       _setStep 1D02  
                                                       _pwmStep 0067  
                                                       _stopADC 2564  
                                             __end_of_reduceSeq 254C  
                                             __end_of_retPeriod 24D0  
                                                    _releaseObj 23EA  
                                          __size_of_returnTherm 000C  
                                          end_of_initialization 20A6  
                                          __size_of_returnTouch 000C  
                                              _resetNewSequence 24F4  
                                              rotateObj@totStep 00F8  
                                             __end_of_shiftData 2270  
                                                       isr@temp 0011  
                                             __end_of_resetStep 2526  
                                                    ??_tim0Init 0012  
                                                 __Lmediumconst 0000  
                                                    ??_tim2Init 0014  
                                              storeData@command 005D  
                                              storeData@counter 005E  
                                                    ??_setDecay 0013  
                                              enableMotor@motor 0012  
                                                    _resetTherm 24FE  
                                                    _resetTouch 2512  
                                                       uartTx@i 0015  
                                                   ?_fatalError 0001  
                                                     _RCSTAbits 000FAB  
                                                       postdec1 000FE5  
                                             __end_of_rotateObj 1EAC  
                                                       postinc0 000FEE  
                                                       postinc1 000FE6  
                                                       postinc2 000FDE  
                                                    ??_startADC 0012  
                                                    ??_stepMade 0014  
                                          __size_of_stepCounter 000C  
                                                 _interruptInit 2364  
                                             __end_of_usartInit 2450  
                                             __end_of_storeData 164E  
                                    __end_ofrotateObj@stepAngle 0605  
                                                    ??_writeTM0 0001  
                                                     _PORTDbits 000F83  
                                                    _printError 18E6  
                                                     _PORTEbits 000F84  
                                                 ??_enableMotor 0013  
                                           i2printError@errCode 0007  
                                                    _toggleStep 2526  
                                                 ___xxtofl@sign 001A  
                                                     _TRISCbits 000F94  
                                                     _TRISDbits 000F95  
                                                     _TRISEbits 000F96  
                                                   ___fldiv@grs 0033  
                                                   ___fldiv@rem 002C  
                                          __size_of_touchObject 00F2  
                                                    _stepToggle 0066  
                                                    _touchTherm 1B1E  
                                          __end_of_setDirection 2210  
                                                     _TXSTAbits 000FAC  
                                                _getNewSequence 248A  
                                                ?_interruptInit 0001  
                                                 __pidataCOMRAM 257C  
                                         __size_of_increaseStep 0008  
                                                   ?_pickObject 0001  
                                                   __fatalError 0060  
                                                __end_of_uartTx 2316  
                                                 moveToPoint@x1 0016  
                                                 moveToPoint@x2 001A  
                                                 moveToPoint@y1 0018  
                                                 moveToPoint@y2 001C  
                                           start_initialization 202E  
                                                     i2uartTx@i 0004  
                                                   __end_of_isr 016A  
                                           __size_of_fatalError 0008  
                                           __end_of_enableMotor 219C  
                                                   ?_releaseObj 0001  
                                             __size_ofi2_uartTx 004E  
                                        __end_of_getNewSequence 2498  
                                               _errString_Fatal 01AB  
                                               _errString_Bound 0084  
                                                   ?_resetTherm 0001  
                                               _errString_Reset 0184  
                                                   ?_resetTouch 0001  
                                               _errString_Point 0134  
                                                  _increaseStep 2574  
                                        __size_of_resetPosition 01F2  
                                                 ??_executeData 0043  
                                                   __pdataBANK0 0080  
                                                   __pdataBANK1 0100  
                                                   _dataCounter 0061  
                                                      ??_uartTx 0015  
                                        moveToPoint@keepMovingX 0020  
                                        moveToPoint@keepMovingY 0021  
                                                   ?_printError 0001  
                                                     ___fldiv@a 0024  
                                                     ___fldiv@b 0020  
                                                _therm_pressure 0605  
                                                   ?_toggleStep 0001  
                                                   __pbssCOMRAM 0045  
                                                 __pcstackBANK0 00F4  
                                                 __pcstackBANK1 01D1  
                                                 ??_newSequence 0012  
                                             __size_of___xxtofl 01F8  
                                          __size_ofi2_storeData 0162  
                                             __size_of_clearTM0 000E  
                                               ?_getNewSequence 0012  
                                                   ?_touchTherm 0001  
                                           __size_of_pickObject 0024  
                                            executeData@errCode 00FC  
                                             __size_of_tim0Init 0012  
                                             __size_of_tim2Init 0014  
                                               ??_interruptInit 0012  
                                             __size_of_setDecay 0074  
                                                     __pintcode 0008  
                                                      ?___fldiv 0020  
                                                      ?___fltol 0039  
                                      __end_of_resetNewSequence 24FE  
                                           __size_of_releaseObj 0024  
                                                 storeData@data 001B  
                                                      ?_getData 0012  
                                             __size_of_startADC 000A  
                                             __size_of_stepMade 0014  
                                        __end_of_therm_pressure 0607  
                                                      ?_initADC 0001  
                                                   __smallconst 0600  
                                                      ?_liftArm 0001  
                                                   _enableMotor 2128  
                                                      ?_readSeq 0001  
                                             __size_of_writeTM0 000E  
                                           __end_of_executeData 0F92  
                                                    shiftData@i 0014  
                                                      ?_setStep 0012  
                                           __size_of_resetTherm 000A  
                                                     _newFeeder 0057  
                                                 _resetPosition 118A  
                                           __size_of_resetTouch 000A  
                                                 ??_setThermRel 0001  
                                                      ?_stopADC 0001  
                                         __size_of_setDirection 0074  
                                                 ??_moveToPoint 001E  
                                                 ??_setTouchRel 0001  
                                           __end_of_newSequence 255C  
                                                     _reduceSeq 2544  
                                                      _LATAbits 000F89  
                                                      _LATBbits 000F8A  
                                                     _retPeriod 24C2  
                                                      _LATCbits 000F8B  
                                                      _LATDbits 000F8C  
                                           __size_of_printError 011C  
                                                      _IPR1bits 000F9F  
                                                      _PIE1bits 000F9D  
                                                     _shiftData 2210  
                                                      i2u231_40 16D2  
                                                      i2u231_41 16CC  
                                                      i2u240_40 00B6  
                                                      i2u240_41 00B0  
                                                      i2u241_40 00D8  
                                                      i2u241_41 00D2  
                                                      i2u242_40 0106  
                                                      i2u242_41 0100  
                                                      i2u243_40 012C  
                                                      i2u235_40 002C  
                                                      i2u243_41 0126  
                                                      i2u235_41 0026  
                                                      i2u244_40 0144  
                                                      i2u236_40 004C  
                                                      i2u244_41 013E  
                                                      i2u236_41 0046  
                                                     _resetStep 251C  
                                                      i2u237_40 006A  
                                                      i2u237_41 0064  
                                                      i2u238_40 008E  
                                                      i2u238_41 0088  
                                                      i2u239_40 00A4  
                                                      i2u239_41 009E  
                                                      i2u168_40 2340  
                                                      i2u168_41 233A  
                                                      i2u169_40 235E  
                                                      i2u169_41 2358  
                                                      _PIR1bits 000F9E  
                                           __size_of_toggleStep 000A  
                                                  ??_fatalError 0012  
                                                     _posVector 004E  
                                                      _RCONbits 000FD0  
                                                     _therm_rel 0064  
                                                     _pwmPeriod 0055  
                                             setDirection@motor 0012  
                                                     _rotateObj 1DD8  
                                                    _ADCON0bits 000FC2  
                                                    _ADCON1bits 000FC1  
                                           __size_of_touchTherm 00F2  
                                                  _setDirection 219C  
                                                     _usartInit 2432  
                                                     _touch_rel 0065  
                                            __end_of_feeder1Pos 060F  
                                            __end_of_feeder2Pos 060D  
                                            __end_of_feeder3Pos 060B  
                                                     _storeData 14EC  
                                                ?_resetPosition 0001  
                                         __end_of_initPinMotors 23C4  
                                                 ??_returnTherm 0014  
                                                 ??_returnTouch 0014  
                                                      i2_uartTx 2316  
                                                     copy_data0 2042  
                                                     copy_data1 2062  
                                                     copy_data2 2082  
                                            __end_of_fatalError 2564  
                                            rotateObj@stepAngle 0601  
                                                    ?_reduceSeq 0001  
                                                    ?_retPeriod 0001  
                                                  setStep@motor 0012  
                                                    rotateObj@i 00FA  
                                        __size_of_whatsTM0Limit 0008  
                                           __end_of_setThermRel 2544  
                                           __end_of_moveToPoint 0D04  
                                             printError@errCode 0018  
                                                    ?_shiftData 0001  
                                                 ??_stepCounter 0014  
                                                      __Hrparam 0000  
                                                    ?_resetStep 0001  
                                           __end_of_setTouchRel 253A  
                                                      __Lrparam 0000  
                                              __size_of___fldiv 0432  
                                              __size_of___fltol 0136  
                                                   _executeData 0D04  
                                                  ??_pickObject 0015  
                                                    ?_rotateObj 0001  
                                      moveToPoint@MOT1Direction 0022  
                                                 ?i2_printError 0001  
                                              __size_of_getData 000E  
                                      moveToPoint@MOT2Direction 0023  
                                                 ??_touchObject 0016  
                                                    ?_usartInit 0001  
                                              __size_of_initADC 0026  
                                                      ___xxtofl 0F92  
                                              __size_of_liftArm 00B0  
                                                    ?_storeData 0001  
                                                      _clearTM0 24A6  
                                              __size_of_readSeq 0008  
                                            storeData@mexLength 006D  
                                                      _tm0Error 005B  
                                                      _tm0Limit 0068  
                                              __size_of_setStep 00D6  
                                                   _newSequence 2554  
                                                      __ptext10 20B4  
                                                      __ptext11 2128  
                                                      __ptext20 255C  
                                                      __ptext12 24F4  
                                                      __ptext21 0D04  
                                                      __ptext13 2544  
                                                      __ptext30 1DD8  
                                                      __ptext22 1B1E  
                                                      __ptext14 254C  
                                                      __ptext31 0F92  
                                                      __ptext23 24D0  
                                                      __ptext15 2554  
                                                      __ptext40 219C  
                                                      __ptext32 17B0  
                                                      __ptext24 24FE  
                                                      __ptext16 2364  
                                                      __ptext41 251C  
                                                      __ptext33 0610  
                                                      __ptext25 1C10  
                                                      __ptext17 239E  
                                                      __ptext50 2526  
                                                      __ptext42 2498  
                                                      __ptext34 23EA  
                                                      __ptext26 2564  
                                                      __ptext18 23C4  
                                                      __ptext51 2530  
                                                      __ptext43 24A6  
                                                      __ptext35 240E  
                                                      __ptext27 2508  
                                                      __ptext19 248A  
                                                      __ptext52 253A  
                                                      __ptext36 0A42  
                                                      __ptext28 24DC  
                                                      __ptext53 24C2  
                                                      __ptext45 164E  
                                                      __ptext37 24E8  
                                                      __ptext29 2512  
                                                      __ptext54 2574  
                                                      __ptext46 1A02  
                                                      __ptext38 1F7E  
                                                      __ptext47 2316  
                                                      __ptext39 2464  
                                                      __ptext48 24B4  
                                                      __ptext49 256C  
                                                  ??_releaseObj 0015  
                                              __size_of_stopADC 0008  
                                           __end_of_returnTherm 24DC  
                                           __end_of_returnTouch 24E8  
                                                      _tim0Init 2478  
                                                      _tim2Init 2450  
                                                 __size_of_main 0170  
                                                      _setDecay 20B4  
                                            __end_of_pickObject 2432  
                                                  ??_resetTherm 0012  
                                                  ??_resetTouch 0012  
                                                     uartTx@ptr 0012  
                                                      _rotAngle 0059  
                                               isr@completeStep 0062  
                                                      int$flags 006E  
                                                      _startADC 2508  
                                                      _stepMade 2464  
                                           __end_of_stepCounter 24F4  
                                             rotateObj@rotAngle 00F7  
                                                ??i2_printError 0005  
                                            __end_of_releaseObj 240E  
                                                      _writeTM0 24B4  
                                                  ??_printError 0016  
                                                 _whatsTM0Limit 256C  
                                               ??_resetPosition 0016  
                                            tim2Init@_pwmPeriod 0012  
                                                    _INTCONbits 000FF2  
                                                  ??_toggleStep 0001  
                                              ??_getNewSequence 0014  
                                            __end_of_resetTherm 2508  
                                            __end_of_resetTouch 251C  
                                                   _setThermRel 253A  
                                                  uartTx@length 0014  
                                                   _moveToPoint 0A42  
                                           __end_of_touchObject 1D02  
                                                      intlevel2 2582  
                                             enableMotor@enable 0015  
                                                  ??_touchTherm 0016  
                                                   _setTouchRel 2530  
                                                   ??_reduceSeq 0012  
                                                   ??_retPeriod 0003  
                                                    _RCSTA1bits 000FAB  
                                            __end_of_printError 1A02  
                                         setDirection@direction 0015  
                                                   ??_shiftData 0012  
                                                   ??_resetStep 0012  
                                            __end_of_toggleStep 2530  
                                             ?_resetNewSequence 0001  
                                                ?_whatsTM0Limit 0001  
                                                   ??_rotateObj 00F4  
                                            ??_resetNewSequence 0012  
                                            __end_of_touchTherm 1C10  
                                                  ?_enableMotor 0012  
                                                   ??_usartInit 0012  
                                                 ??i2_storeData 0008  
                                                   ??_storeData 0019  
                                                   _returnTherm 24D0  
                                                   _returnTouch 24DC  
                                                   _stepCounter 24E8  
