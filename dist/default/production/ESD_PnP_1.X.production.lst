

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Mar 29 10:03:34 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    80                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    81  0000                     
    82                           ; Version 2.20
    83                           ; Generated 12/02/2020 GMT
    84                           ; 
    85                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F452 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     
   117                           	psect	idataCOMRAM
   118  00261E                     __pidataCOMRAM:
   119                           	callstack 0
   120                           
   121                           ;initializer for _maxY
   122  00261E  03E8               	dw	1000
   123                           
   124                           ;initializer for _maxX
   125  002620  03E8               	dw	1000
   126                           
   127                           ;initializer for storeData@mexLength
   128  002622  05                 	db	5
   129                           
   130                           	psect	idataBANK0
   131  0022BE                     __pidataBANK0:
   132                           	callstack 0
   133                           
   134                           ;initializer for rotateObj@rotSequence
   135  0022BE  09                 	db	9
   136  0022BF  03                 	db	3
   137  0022C0  06                 	db	6
   138  0022C1  0C                 	db	12
   139                           
   140                           ;initializer for _errString_Bound
   141  0022C2  45                 	db	69
   142  0022C3  72                 	db	114
   143  0022C4  72                 	db	114
   144  0022C5  6F                 	db	111
   145  0022C6  72                 	db	114
   146  0022C7  2C                 	db	44
   147  0022C8  20                 	db	32
   148  0022C9  70                 	db	112
   149  0022CA  6F                 	db	111
   150  0022CB  69                 	db	105
   151  0022CC  6E                 	db	110
   152  0022CD  74                 	db	116
   153  0022CE  20                 	db	32
   154  0022CF  6F                 	db	111
   155  0022D0  75                 	db	117
   156  0022D1  74                 	db	116
   157  0022D2  73                 	db	115
   158  0022D3  69                 	db	105
   159  0022D4  64                 	db	100
   160  0022D5  65                 	db	101
   161  0022D6  20                 	db	32
   162  0022D7  62                 	db	98
   163  0022D8  6F                 	db	111
   164  0022D9  75                 	db	117
   165  0022DA  6E                 	db	110
   166  0022DB  64                 	db	100
   167  0022DC  61                 	db	97
   168  0022DD  72                 	db	114
   169  0022DE  69                 	db	105
   170  0022DF  65                 	db	101
   171  0022E0  73                 	db	115
   172  0022E1  0A                 	db	10
   173  0022E2  00                 	db	0
   174                           
   175                           ;initializer for _errString_Feed
   176  0022E3  45                 	db	69
   177  0022E4  72                 	db	114
   178  0022E5  72                 	db	114
   179  0022E6  6F                 	db	111
   180  0022E7  72                 	db	114
   181  0022E8  2C                 	db	44
   182  0022E9  20                 	db	32
   183  0022EA  66                 	db	102
   184  0022EB  65                 	db	101
   185  0022EC  65                 	db	101
   186  0022ED  64                 	db	100
   187  0022EE  20                 	db	32
   188  0022EF  6C                 	db	108
   189  0022F0  69                 	db	105
   190  0022F1  6E                 	db	110
   191  0022F2  65                 	db	101
   192  0022F3  20                 	db	32
   193  0022F4  6E                 	db	110
   194  0022F5  6F                 	db	111
   195  0022F6  74                 	db	116
   196  0022F7  20                 	db	32
   197  0022F8  64                 	db	100
   198  0022F9  65                 	db	101
   199  0022FA  66                 	db	102
   200  0022FB  69                 	db	105
   201  0022FC  6E                 	db	110
   202  0022FD  65                 	db	101
   203  0022FE  64                 	db	100
   204  0022FF  0A                 	db	10
   205  002300  00                 	db	0
   206                           
   207                           ;initializer for _errString_Command
   208  002301  43                 	db	67
   209  002302  6F                 	db	111
   210  002303  6D                 	db	109
   211  002304  6D                 	db	109
   212  002305  61                 	db	97
   213  002306  6E                 	db	110
   214  002307  64                 	db	100
   215  002308  20                 	db	32
   216  002309  6E                 	db	110
   217  00230A  6F                 	db	111
   218  00230B  74                 	db	116
   219  00230C  20                 	db	32
   220  00230D  72                 	db	114
   221  00230E  65                 	db	101
   222  00230F  63                 	db	99
   223  002310  6F                 	db	111
   224  002311  67                 	db	103
   225  002312  6E                 	db	110
   226  002313  69                 	db	105
   227  002314  7A                 	db	122
   228  002315  65                 	db	101
   229  002316  64                 	db	100
   230  002317  0A                 	db	10
   231  002318  00                 	db	0
   232                           
   233                           	psect	idataBANK1
   234  001DAC                     __pidataBANK1:
   235                           	callstack 0
   236                           
   237                           ;initializer for _errString_PointZ
   238  001DAC  45                 	db	69
   239  001DAD  72                 	db	114
   240  001DAE  72                 	db	114
   241  001DAF  6F                 	db	111
   242  001DB0  72                 	db	114
   243  001DB1  2C                 	db	44
   244  001DB2  20                 	db	32
   245  001DB3  74                 	db	116
   246  001DB4  69                 	db	105
   247  001DB5  6D                 	db	109
   248  001DB6  65                 	db	101
   249  001DB7  20                 	db	32
   250  001DB8  65                 	db	101
   251  001DB9  78                 	db	120
   252  001DBA  63                 	db	99
   253  001DBB  65                 	db	101
   254  001DBC  65                 	db	101
   255  001DBD  64                 	db	100
   256  001DBE  65                 	db	101
   257  001DBF  64                 	db	100
   258  001DC0  20                 	db	32
   259  001DC1  74                 	db	116
   260  001DC2  6F                 	db	111
   261  001DC3  20                 	db	32
   262  001DC4  72                 	db	114
   263  001DC5  65                 	db	101
   264  001DC6  61                 	db	97
   265  001DC7  63                 	db	99
   266  001DC8  68                 	db	104
   267  001DC9  20                 	db	32
   268  001DCA  74                 	db	116
   269  001DCB  68                 	db	104
   270  001DCC  65                 	db	101
   271  001DCD  20                 	db	32
   272  001DCE  65                 	db	101
   273  001DCF  6E                 	db	110
   274  001DD0  64                 	db	100
   275  001DD1  20                 	db	32
   276  001DD2  6F                 	db	111
   277  001DD3  66                 	db	102
   278  001DD4  20                 	db	32
   279  001DD5  74                 	db	116
   280  001DD6  68                 	db	104
   281  001DD7  65                 	db	101
   282  001DD8  20                 	db	32
   283  001DD9  5A                 	db	90
   284  001DDA  20                 	db	32
   285  001DDB  41                 	db	65
   286  001DDC  78                 	db	120
   287  001DDD  69                 	db	105
   288  001DDE  73                 	db	115
   289  001DDF  0A                 	db	10
   290  001DE0  00                 	db	0
   291                           
   292                           ;initializer for _errString_Point
   293  001DE1  45                 	db	69
   294  001DE2  72                 	db	114
   295  001DE3  72                 	db	114
   296  001DE4  6F                 	db	111
   297  001DE5  72                 	db	114
   298  001DE6  2C                 	db	44
   299  001DE7  20                 	db	32
   300  001DE8  74                 	db	116
   301  001DE9  69                 	db	105
   302  001DEA  6D                 	db	109
   303  001DEB  65                 	db	101
   304  001DEC  20                 	db	32
   305  001DED  65                 	db	101
   306  001DEE  78                 	db	120
   307  001DEF  63                 	db	99
   308  001DF0  65                 	db	101
   309  001DF1  65                 	db	101
   310  001DF2  64                 	db	100
   311  001DF3  65                 	db	101
   312  001DF4  64                 	db	100
   313  001DF5  20                 	db	32
   314  001DF6  74                 	db	116
   315  001DF7  6F                 	db	111
   316  001DF8  20                 	db	32
   317  001DF9  72                 	db	114
   318  001DFA  65                 	db	101
   319  001DFB  61                 	db	97
   320  001DFC  63                 	db	99
   321  001DFD  68                 	db	104
   322  001DFE  20                 	db	32
   323  001DFF  74                 	db	116
   324  001E00  68                 	db	104
   325  001E01  65                 	db	101
   326  001E02  20                 	db	32
   327  001E03  70                 	db	112
   328  001E04  6F                 	db	111
   329  001E05  69                 	db	105
   330  001E06  6E                 	db	110
   331  001E07  74                 	db	116
   332  001E08  0A                 	db	10
   333  001E09  00                 	db	0
   334                           
   335                           ;initializer for _errString_ZEND
   336  001E0A  45                 	db	69
   337  001E0B  72                 	db	114
   338  001E0C  72                 	db	114
   339  001E0D  6F                 	db	111
   340  001E0E  72                 	db	114
   341  001E0F  2C                 	db	44
   342  001E10  20                 	db	32
   343  001E11  6E                 	db	110
   344  001E12  6F                 	db	111
   345  001E13  20                 	db	32
   346  001E14  6F                 	db	111
   347  001E15  62                 	db	98
   348  001E16  6A                 	db	106
   349  001E17  65                 	db	101
   350  001E18  63                 	db	99
   351  001E19  74                 	db	116
   352  001E1A  20                 	db	32
   353  001E1B  72                 	db	114
   354  001E1C  65                 	db	101
   355  001E1D  6C                 	db	108
   356  001E1E  65                 	db	101
   357  001E1F  76                 	db	118
   358  001E20  61                 	db	97
   359  001E21  74                 	db	116
   360  001E22  65                 	db	101
   361  001E23  64                 	db	100
   362  001E24  20                 	db	32
   363  001E25  61                 	db	97
   364  001E26  6C                 	db	108
   365  001E27  6F                 	db	111
   366  001E28  6E                 	db	110
   367  001E29  67                 	db	103
   368  001E2A  20                 	db	32
   369  001E2B  5A                 	db	90
   370  001E2C  20                 	db	32
   371  001E2D  41                 	db	65
   372  001E2E  78                 	db	120
   373  001E2F  69                 	db	105
   374  001E30  73                 	db	115
   375  001E31  0A                 	db	10
   376  001E32  00                 	db	0
   377                           
   378                           ;initializer for _errString_Reset
   379  001E33  45                 	db	69
   380  001E34  72                 	db	114
   381  001E35  72                 	db	114
   382  001E36  6F                 	db	111
   383  001E37  72                 	db	114
   384  001E38  2C                 	db	44
   385  001E39  20                 	db	32
   386  001E3A  74                 	db	116
   387  001E3B  69                 	db	105
   388  001E3C  6D                 	db	109
   389  001E3D  65                 	db	101
   390  001E3E  20                 	db	32
   391  001E3F  65                 	db	101
   392  001E40  78                 	db	120
   393  001E41  63                 	db	99
   394  001E42  65                 	db	101
   395  001E43  65                 	db	101
   396  001E44  64                 	db	100
   397  001E45  65                 	db	101
   398  001E46  64                 	db	100
   399  001E47  20                 	db	32
   400  001E48  74                 	db	116
   401  001E49  6F                 	db	111
   402  001E4A  20                 	db	32
   403  001E4B  72                 	db	114
   404  001E4C  65                 	db	101
   405  001E4D  73                 	db	115
   406  001E4E  65                 	db	101
   407  001E4F  74                 	db	116
   408  001E50  20                 	db	32
   409  001E51  70                 	db	112
   410  001E52  6F                 	db	111
   411  001E53  73                 	db	115
   412  001E54  69                 	db	105
   413  001E55  74                 	db	116
   414  001E56  69                 	db	105
   415  001E57  6F                 	db	111
   416  001E58  6E                 	db	110
   417  001E59  0A                 	db	10
   418  001E5A  00                 	db	0
   419                           
   420                           ;initializer for _errString_Fatal
   421  001E5B  46                 	db	70
   422  001E5C  61                 	db	97
   423  001E5D  74                 	db	116
   424  001E5E  61                 	db	97
   425  001E5F  6C                 	db	108
   426  001E60  20                 	db	32
   427  001E61  45                 	db	69
   428  001E62  72                 	db	114
   429  001E63  72                 	db	114
   430  001E64  6F                 	db	111
   431  001E65  72                 	db	114
   432  001E66  2C                 	db	44
   433  001E67  20                 	db	32
   434  001E68  70                 	db	112
   435  001E69  6C                 	db	108
   436  001E6A  65                 	db	101
   437  001E6B  61                 	db	97
   438  001E6C  73                 	db	115
   439  001E6D  65                 	db	101
   440  001E6E  20                 	db	32
   441  001E6F  72                 	db	114
   442  001E70  65                 	db	101
   443  001E71  73                 	db	115
   444  001E72  65                 	db	101
   445  001E73  74                 	db	116
   446  001E74  20                 	db	32
   447  001E75  74                 	db	116
   448  001E76  68                 	db	104
   449  001E77  65                 	db	101
   450  001E78  20                 	db	32
   451  001E79  64                 	db	100
   452  001E7A  65                 	db	101
   453  001E7B  76                 	db	118
   454  001E7C  69                 	db	105
   455  001E7D  63                 	db	99
   456  001E7E  65                 	db	101
   457  001E7F  21                 	db	33
   458  001E80  0A                 	db	10
   459  001E81  00                 	db	0
   460                           
   461                           	psect	smallconst
   462  000600                     __psmallconst:
   463                           	callstack 0
   464  000600  00                 	db	0
   465  000601  FFAC               	dw	65452
   466  000603  3DB3               	dw	15795
   467  000605                     __end_ofrotateObj@stepAngle:
   468                           	callstack 0
   469  000605  0400               	dw	1024
   470  000607                     __end_of_therm_pressure:
   471                           	callstack 0
   472  000607  0200               	dw	512
   473  000609                     __end_of_touch_pressure:
   474                           	callstack 0
   475  000609                     _feeder3Pos:
   476                           	callstack 0
   477  000609  19                 	db	25
   478  00060A  19                 	db	25
   479  00060B                     __end_of_feeder3Pos:
   480                           	callstack 0
   481  00060B                     _feeder2Pos:
   482                           	callstack 0
   483  00060B  0F                 	db	15
   484  00060C  0F                 	db	15
   485  00060D                     __end_of_feeder2Pos:
   486                           	callstack 0
   487  00060D                     _feeder1Pos:
   488                           	callstack 0
   489  00060D  05                 	db	5
   490  00060E  05                 	db	5
   491  00060F                     __end_of_feeder1Pos:
   492                           	callstack 0
   493  0000                     _TMR0	set	4054
   494  0000                     _TXREG	set	4013
   495  0000                     _SPBRG	set	4015
   496  0000                     _TXSTAbits	set	4012
   497  0000                     _TRISCbits	set	3988
   498  0000                     _RCREG1	set	4014
   499  0000                     _ADRESH	set	4036
   500  0000                     _ADRESL	set	4035
   501  0000                     _PIR1bits	set	3998
   502  0000                     _IPR1bits	set	3999
   503  0000                     _ADCON0bits	set	4034
   504  0000                     _T1CONbits	set	4045
   505  0000                     _PIE1bits	set	3997
   506  0000                     _RCONbits	set	4048
   507  0000                     _INTCONbits	set	4082
   508  0000                     _RCSTAbits	set	4011
   509  0000                     _RCSTA1bits	set	4011
   510  0000                     _LATD	set	3980
   511  0000                     _PORTDbits	set	3971
   512  0000                     _TMR2	set	4044
   513  0000                     _PORTEbits	set	3972
   514  0000                     _T0CONbits	set	4053
   515  0000                     _T2CONbits	set	4042
   516  0000                     _LATDbits	set	3980
   517  0000                     _LATCbits	set	3979
   518  0000                     _LATBbits	set	3978
   519  0000                     _LATAbits	set	3977
   520  0000                     _TRISDbits	set	3989
   521  0000                     _TRISEbits	set	3990
   522  0000                     _TRISD	set	3989
   523  0000                     _TRISC	set	3988
   524  0000                     _TRISB	set	3987
   525  0000                     _TRISA	set	3986
   526  0000                     _ADCON1bits	set	4033
   527  00060F  00                 	db	0	; dummy byte at the end
   528  0000                     
   529                           ; #config settings
   530                           
   531                           	psect	cinit
   532  002008                     __pcinit:
   533                           	callstack 0
   534  002008                     start_initialization:
   535                           	callstack 0
   536  002008                     __initialization:
   537                           	callstack 0
   538                           
   539                           ; Initialize objects allocated to BANK1 (214 bytes)
   540                           ; load TBLPTR registers with __pidataBANK1
   541  002008  0EAC               	movlw	low __pidataBANK1
   542  00200A  6EF6               	movwf	tblptrl,c
   543  00200C  0E1D               	movlw	high __pidataBANK1
   544  00200E  6EF7               	movwf	tblptrh,c
   545  002010  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   546  002012  6EF8               	movwf	tblptru,c
   547  002014  EE01  F000         	lfsr	0,__pdataBANK1
   548  002018  EE10 F0D6          	lfsr	1,214
   549  00201C                     copy_data0:
   550  00201C  0009               	tblrd		*+
   551  00201E  CFF5 FFEE          	movff	tablat,postinc0
   552  002022  50E5               	movf	postdec1,w,c
   553  002024  50E1               	movf	fsr1l,w,c
   554  002026  E1FA               	bnz	copy_data0
   555                           
   556                           ; Initialize objects allocated to BANK0 (91 bytes)
   557                           ; load TBLPTR registers with __pidataBANK0
   558  002028  0EBE               	movlw	low __pidataBANK0
   559  00202A  6EF6               	movwf	tblptrl,c
   560  00202C  0E22               	movlw	high __pidataBANK0
   561  00202E  6EF7               	movwf	tblptrh,c
   562  002030  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   563  002032  6EF8               	movwf	tblptru,c
   564  002034  EE00  F080         	lfsr	0,__pdataBANK0
   565  002038  EE10 F05B          	lfsr	1,91
   566  00203C                     copy_data1:
   567  00203C  0009               	tblrd		*+
   568  00203E  CFF5 FFEE          	movff	tablat,postinc0
   569  002042  50E5               	movf	postdec1,w,c
   570  002044  50E1               	movf	fsr1l,w,c
   571  002046  E1FA               	bnz	copy_data1
   572                           
   573                           ; Initialize objects allocated to COMRAM (5 bytes)
   574                           ; load TBLPTR registers with __pidataCOMRAM
   575  002048  0E1E               	movlw	low __pidataCOMRAM
   576  00204A  6EF6               	movwf	tblptrl,c
   577  00204C  0E26               	movlw	high __pidataCOMRAM
   578  00204E  6EF7               	movwf	tblptrh,c
   579  002050  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   580  002052  6EF8               	movwf	tblptru,c
   581  002054  EE00  F069         	lfsr	0,__pdataCOMRAM
   582  002058  EE10 F005          	lfsr	1,5
   583  00205C                     copy_data2:
   584  00205C  0009               	tblrd		*+
   585  00205E  CFF5 FFEE          	movff	tablat,postinc0
   586  002062  50E5               	movf	postdec1,w,c
   587  002064  50E1               	movf	fsr1l,w,c
   588  002066  E1FA               	bnz	copy_data2
   589                           
   590                           ; Clear objects allocated to BANK0 (28 bytes)
   591  002068  EE00  F0DB         	lfsr	0,__pbssBANK0
   592  00206C  0E1C               	movlw	28
   593  00206E                     clear_0:
   594  00206E  6AEE               	clrf	postinc0,c
   595  002070  06E8               	decf	wreg,f,c
   596  002072  E1FD               	bnz	clear_0
   597                           
   598                           ; Clear objects allocated to COMRAM (36 bytes)
   599  002074  EE00  F045         	lfsr	0,__pbssCOMRAM
   600  002078  0E24               	movlw	36
   601  00207A                     clear_1:
   602  00207A  6AEE               	clrf	postinc0,c
   603  00207C  06E8               	decf	wreg,f,c
   604  00207E  E1FD               	bnz	clear_1
   605  002080                     end_of_initialization:
   606                           	callstack 0
   607  002080                     __end_of__initialization:
   608                           	callstack 0
   609  002080  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   610  002082  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   611  002084  0E00               	movlw	low (__Lmediumconst shr (0+16))
   612  002086  6EF8               	movwf	tblptru,c
   613  002088  0100               	movlb	0
   614  00208A  EF21  F00B         	goto	_main	;jump to C main() function
   615                           
   616                           	psect	bssCOMRAM
   617  000045                     __pbssCOMRAM:
   618                           	callstack 0
   619  000045                     storeData@receivedMex:
   620                           	callstack 0
   621  000045                     	ds	9
   622  00004E                     _posVector:
   623                           	callstack 0
   624  00004E                     	ds	3
   625  000051                     isr@single_cycle:
   626                           	callstack 0
   627  000051                     	ds	2
   628  000053                     _ADC_res:
   629                           	callstack 0
   630  000053                     	ds	2
   631  000055                     _pwmPeriod:
   632                           	callstack 0
   633  000055                     	ds	2
   634  000057                     _newFeeder:
   635                           	callstack 0
   636  000057                     	ds	2
   637  000059                     _rotAngle:
   638                           	callstack 0
   639  000059                     	ds	2
   640  00005B                     _tm0Error:
   641                           	callstack 0
   642  00005B                     	ds	2
   643  00005D                     	ds	1
   644  00005E                     storeData@counter:
   645                           	callstack 0
   646  00005E                     	ds	1
   647  00005F                     __newSequence:
   648                           	callstack 0
   649  00005F                     	ds	1
   650  000060                     __fatalError:
   651                           	callstack 0
   652  000060                     	ds	1
   653  000061                     _dataCounter:
   654                           	callstack 0
   655  000061                     	ds	1
   656  000062                     isr@completeStep:
   657                           	callstack 0
   658  000062                     	ds	1
   659  000063                     isr@tm0Count:
   660                           	callstack 0
   661  000063                     	ds	1
   662  000064                     _therm_rel:
   663                           	callstack 0
   664  000064                     	ds	1
   665  000065                     _touch_rel:
   666                           	callstack 0
   667  000065                     	ds	1
   668  000066                     _stepToggle:
   669                           	callstack 0
   670  000066                     	ds	1
   671  000067                     _pwmStep:
   672                           	callstack 0
   673  000067                     	ds	1
   674  000068                     _tm0Limit:
   675                           	callstack 0
   676  000068                     	ds	1
   677                           
   678                           	psect	dataCOMRAM
   679  000069                     __pdataCOMRAM:
   680                           	callstack 0
   681  000069                     	ds	2
   682  00006B                     	ds	2
   683  00006D                     storeData@mexLength:
   684                           	callstack 0
   685  00006D                     	ds	1
   686                           
   687                           	psect	bssBANK0
   688  0000DB                     __pbssBANK0:
   689                           	callstack 0
   690  0000DB                     _dataSequence:
   691                           	callstack 0
   692  0000DB                     	ds	20
   693  0000EF                     _newSequenceData:
   694                           	callstack 0
   695  0000EF                     	ds	8
   696                           
   697                           	psect	dataBANK0
   698  000080                     __pdataBANK0:
   699                           	callstack 0
   700  000080                     rotateObj@rotSequence:
   701                           	callstack 0
   702  000080                     	ds	4
   703  000084                     _errString_Bound:
   704                           	callstack 0
   705  000084                     	ds	33
   706  0000A5                     _errString_Feed:
   707                           	callstack 0
   708  0000A5                     	ds	30
   709  0000C3                     _errString_Command:
   710                           	callstack 0
   711  0000C3                     	ds	24
   712                           
   713                           	psect	dataBANK1
   714  000100                     __pdataBANK1:
   715                           	callstack 0
   716  000100                     _errString_PointZ:
   717                           	callstack 0
   718  000100                     	ds	53
   719  000135                     _errString_Point:
   720                           	callstack 0
   721  000135                     	ds	41
   722  00015E                     _errString_ZEND:
   723                           	callstack 0
   724  00015E                     	ds	41
   725  000187                     _errString_Reset:
   726                           	callstack 0
   727  000187                     	ds	40
   728  0001AF                     _errString_Fatal:
   729                           	callstack 0
   730  0001AF                     	ds	39
   731                           
   732                           	psect	cstackBANK1
   733  0001D6                     __pcstackBANK1:
   734                           	callstack 0
   735  0001D6                     executeData@errCode:
   736                           	callstack 0
   737                           
   738                           ; 1 bytes @ 0x0
   739  0001D6                     	ds	1
   740  0001D7                     executeData@data:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0x1
   744  0001D7                     	ds	2
   745  0001D9                     ??_main:
   746                           
   747                           ; 1 bytes @ 0x3
   748  0001D9                     	ds	2
   749  0001DB                     main@errCode:
   750                           	callstack 0
   751                           
   752                           ; 1 bytes @ 0x5
   753  0001DB                     	ds	1
   754  0001DC                     main@newData:
   755                           	callstack 0
   756                           
   757                           ; 2 bytes @ 0x6
   758  0001DC                     	ds	2
   759                           
   760                           	psect	cstackBANK0
   761  0000F7                     __pcstackBANK0:
   762                           	callstack 0
   763  0000F7                     ??_rotateObj:
   764                           
   765                           ; 1 bytes @ 0x0
   766  0000F7                     	ds	3
   767  0000FA                     rotateObj@rotAngle:
   768                           	callstack 0
   769                           
   770                           ; 1 bytes @ 0x3
   771  0000FA                     	ds	1
   772  0000FB                     rotateObj@totStep:
   773                           	callstack 0
   774                           
   775                           ; 2 bytes @ 0x4
   776  0000FB                     	ds	2
   777  0000FD                     rotateObj@i:
   778                           	callstack 0
   779                           
   780                           ; 2 bytes @ 0x6
   781  0000FD                     	ds	2
   782                           
   783                           	psect	cstackCOMRAM
   784  000001                     __pcstackCOMRAM:
   785                           	callstack 0
   786  000001                     ?_retPeriod:
   787                           	callstack 0
   788  000001                     i2enableMotor@motor:
   789                           	callstack 0
   790  000001                     i2uartTx@ptr:
   791                           	callstack 0
   792                           
   793                           ; 2 bytes @ 0x0
   794  000001                     	ds	1
   795  000002                     ??i2_enableMotor:
   796                           
   797                           ; 1 bytes @ 0x1
   798  000002                     	ds	1
   799  000003                     i2uartTx@length:
   800                           	callstack 0
   801                           
   802                           ; 1 bytes @ 0x2
   803  000003                     	ds	1
   804  000004                     i2enableMotor@enable:
   805                           	callstack 0
   806  000004                     i2uartTx@i:
   807                           	callstack 0
   808                           
   809                           ; 1 bytes @ 0x3
   810  000004                     	ds	1
   811  000005                     ??i2_printError:
   812                           
   813                           ; 1 bytes @ 0x4
   814  000005                     	ds	2
   815  000007                     i2printError@errCode:
   816                           	callstack 0
   817                           
   818                           ; 1 bytes @ 0x6
   819  000007                     	ds	1
   820  000008                     ??i2_storeData:
   821                           
   822                           ; 1 bytes @ 0x7
   823  000008                     	ds	2
   824  00000A                     i2storeData@data:
   825                           	callstack 0
   826                           
   827                           ; 1 bytes @ 0x9
   828  00000A                     	ds	1
   829  00000B                     ??_isr:
   830                           
   831                           ; 1 bytes @ 0xA
   832  00000B                     	ds	6
   833  000011                     isr@temp:
   834                           	callstack 0
   835                           
   836                           ; 1 bytes @ 0x10
   837  000011                     	ds	1
   838  000012                     ??_shiftData:
   839  000012                     ?_stepMade:
   840                           	callstack 0
   841  000012                     ?_stepCounter:
   842                           	callstack 0
   843  000012                     ?_returnTouch:
   844                           	callstack 0
   845  000012                     ?_returnTherm:
   846                           	callstack 0
   847  000012                     ?_getNewSequence:
   848                           	callstack 0
   849  000012                     ?_getData:
   850                           	callstack 0
   851  000012                     ?___xxtofl:
   852                           	callstack 0
   853  000012                     setStep@motor:
   854                           	callstack 0
   855  000012                     enableMotor@motor:
   856                           	callstack 0
   857  000012                     setDirection@motor:
   858                           	callstack 0
   859  000012                     setDecay@motor:
   860                           	callstack 0
   861  000012                     tim2Init@_pwmPeriod:
   862                           	callstack 0
   863  000012                     uartTx@ptr:
   864                           	callstack 0
   865  000012                     ___xxtofl@val:
   866                           	callstack 0
   867                           
   868                           ; 4 bytes @ 0x11
   869  000012                     	ds	1
   870  000013                     ??_setStep:
   871  000013                     ??_enableMotor:
   872  000013                     ??_setDirection:
   873  000013                     ??_setDecay:
   874                           
   875                           ; 1 bytes @ 0x12
   876  000013                     	ds	1
   877  000014                     stepMade@temp:
   878                           	callstack 0
   879  000014                     shiftData@i:
   880                           	callstack 0
   881  000014                     uartTx@length:
   882                           	callstack 0
   883                           
   884                           ; 1 bytes @ 0x13
   885  000014                     	ds	1
   886  000015                     setStep@step:
   887                           	callstack 0
   888  000015                     enableMotor@enable:
   889                           	callstack 0
   890  000015                     setDirection@direction:
   891                           	callstack 0
   892  000015                     setDecay@decay:
   893                           	callstack 0
   894  000015                     uartTx@i:
   895                           	callstack 0
   896                           
   897                           ; 1 bytes @ 0x14
   898  000015                     	ds	1
   899  000016                     ??_printError:
   900  000016                     ??___xxtofl:
   901  000016                     resetPosition@keepMovingX:
   902                           	callstack 0
   903  000016                     moveToPoint@x1:
   904                           	callstack 0
   905                           
   906                           ; 2 bytes @ 0x15
   907  000016                     	ds	1
   908  000017                     resetPosition@keepMovingY:
   909                           	callstack 0
   910                           
   911                           ; 1 bytes @ 0x16
   912  000017                     	ds	1
   913  000018                     resetPosition@keepMovingZ:
   914                           	callstack 0
   915  000018                     printError@errCode:
   916                           	callstack 0
   917  000018                     moveToPoint@y1:
   918                           	callstack 0
   919                           
   920                           ; 2 bytes @ 0x17
   921  000018                     	ds	1
   922  000019                     ??_storeData:
   923                           
   924                           ; 1 bytes @ 0x18
   925  000019                     	ds	1
   926  00001A                     ___xxtofl@sign:
   927                           	callstack 0
   928  00001A                     moveToPoint@x2:
   929                           	callstack 0
   930                           
   931                           ; 2 bytes @ 0x19
   932  00001A                     	ds	1
   933  00001B                     storeData@data:
   934                           	callstack 0
   935  00001B                     ___xxtofl@exp:
   936                           	callstack 0
   937                           
   938                           ; 1 bytes @ 0x1A
   939  00001B                     	ds	1
   940  00001C                     moveToPoint@y2:
   941                           	callstack 0
   942  00001C                     ___xxtofl@arg:
   943                           	callstack 0
   944                           
   945                           ; 4 bytes @ 0x1B
   946  00001C                     	ds	2
   947  00001E                     ??_moveToPoint:
   948                           
   949                           ; 1 bytes @ 0x1D
   950  00001E                     	ds	2
   951  000020                     ?___fldiv:
   952                           	callstack 0
   953  000020                     moveToPoint@keepMovingX:
   954                           	callstack 0
   955  000020                     ___fldiv@b:
   956                           	callstack 0
   957                           
   958                           ; 4 bytes @ 0x1F
   959  000020                     	ds	1
   960  000021                     moveToPoint@keepMovingY:
   961                           	callstack 0
   962                           
   963                           ; 1 bytes @ 0x20
   964  000021                     	ds	1
   965  000022                     moveToPoint@MOT1Direction:
   966                           	callstack 0
   967                           
   968                           ; 1 bytes @ 0x21
   969  000022                     	ds	1
   970  000023                     moveToPoint@MOT2Direction:
   971                           	callstack 0
   972                           
   973                           ; 1 bytes @ 0x22
   974  000023                     	ds	1
   975  000024                     ___fldiv@a:
   976                           	callstack 0
   977                           
   978                           ; 4 bytes @ 0x23
   979  000024                     	ds	4
   980  000028                     ??___fldiv:
   981                           
   982                           ; 1 bytes @ 0x27
   983  000028                     	ds	4
   984  00002C                     ___fldiv@rem:
   985                           	callstack 0
   986                           
   987                           ; 4 bytes @ 0x2B
   988  00002C                     	ds	4
   989  000030                     ___fldiv@sign:
   990                           	callstack 0
   991                           
   992                           ; 1 bytes @ 0x2F
   993  000030                     	ds	1
   994  000031                     ___fldiv@new_exp:
   995                           	callstack 0
   996                           
   997                           ; 2 bytes @ 0x30
   998  000031                     	ds	2
   999  000033                     ___fldiv@grs:
  1000                           	callstack 0
  1001                           
  1002                           ; 4 bytes @ 0x32
  1003  000033                     	ds	4
  1004  000037                     ___fldiv@bexp:
  1005                           	callstack 0
  1006                           
  1007                           ; 1 bytes @ 0x36
  1008  000037                     	ds	1
  1009  000038                     ___fldiv@aexp:
  1010                           	callstack 0
  1011                           
  1012                           ; 1 bytes @ 0x37
  1013  000038                     	ds	1
  1014  000039                     ?___fltol:
  1015                           	callstack 0
  1016  000039                     ___fltol@f1:
  1017                           	callstack 0
  1018                           
  1019                           ; 4 bytes @ 0x38
  1020  000039                     	ds	4
  1021  00003D                     ??___fltol:
  1022                           
  1023                           ; 1 bytes @ 0x3C
  1024  00003D                     	ds	4
  1025  000041                     ___fltol@sign1:
  1026                           	callstack 0
  1027                           
  1028                           ; 1 bytes @ 0x40
  1029  000041                     	ds	1
  1030  000042                     ___fltol@exp1:
  1031                           	callstack 0
  1032                           
  1033                           ; 1 bytes @ 0x41
  1034  000042                     	ds	1
  1035  000043                     ??_executeData:
  1036                           
  1037                           ; 1 bytes @ 0x42
  1038  000043                     	ds	2
  1039                           
  1040 ;;
  1041 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1042 ;;
  1043 ;; *************** function _main *****************
  1044 ;; Defined at:
  1045 ;;		line 17 in file "main.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;		None
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;  newData         2    6[BANK1 ] PTR struct .
  1050 ;;		 -> newSequenceData(8), 
  1051 ;;  errCode         1    5[BANK1 ] unsigned char 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1061 ;;      Params:         0       0       0       0       0       0       0
  1062 ;;      Locals:         0       0       3       0       0       0       0
  1063 ;;      Temps:          0       0       2       0       0       0       0
  1064 ;;      Totals:         0       0       5       0       0       0       0
  1065 ;;Total ram usage:        5 bytes
  1066 ;; Hardware stack levels required when called:    7
  1067 ;; This function calls:
  1068 ;;		_clearTM0
  1069 ;;		_executeData
  1070 ;;		_getNewSequence
  1071 ;;		_initADC
  1072 ;;		_initPinMotors
  1073 ;;		_interruptInit
  1074 ;;		_newSequence
  1075 ;;		_printError
  1076 ;;		_readSeq
  1077 ;;		_reduceSeq
  1078 ;;		_resetNewSequence
  1079 ;;		_resetPosition
  1080 ;;		_shiftData
  1081 ;;		_storeData
  1082 ;;		_tim0Init
  1083 ;;		_tim1Init
  1084 ;;		_tim2Init
  1085 ;;		_usartInit
  1086 ;; This function is called by:
  1087 ;;		Startup code after reset
  1088 ;; This function uses a non-reentrant model
  1089 ;;
  1090                           
  1091                           	psect	text0
  1092  001642                     __ptext0:
  1093                           	callstack 0
  1094  001642                     _main:
  1095                           	callstack 24
  1096  001642  FFFF               	dw	65535	; assembler added errata NOP
  1097                           
  1098                           ;main.c: 21:     interruptInit();
  1099  001644  ECDB  F011         	call	_interruptInit	;wreg free
  1100  001648                     
  1101                           ;main.c: 22:     initPinMotors();
  1102  001648  EC3C  F012         	call	_initPinMotors	;wreg free
  1103  00164C                     
  1104                           ;main.c: 23:     initADC();
  1105  00164C  EC4F  F012         	call	_initADC	;wreg free
  1106  001650                     
  1107                           ;main.c: 24:     usartInit();
  1108  001650  EC62  F012         	call	_usartInit	;wreg free
  1109  001654                     
  1110                           ;main.c: 25:     tim0Init();
  1111  001654  EC85  F012         	call	_tim0Init	;wreg free
  1112  001658                     
  1113                           ;main.c: 26:     tim1Init();
  1114  001658  EC8E  F012         	call	_tim1Init	;wreg free
  1115  00165C                     
  1116                           ;main.c: 27:     tim2Init(10);
  1117  00165C  0E00               	movlw	0
  1118  00165E  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1119  001660  0E0A               	movlw	10
  1120  001662  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1121  001664  EC71  F012         	call	_tim2Init	;wreg free
  1122                           
  1123                           ;main.c: 30:     errCode = resetPosition();
  1124  001668  ECC5  F008         	call	_resetPosition	;wreg free
  1125  00166C  0101               	movlb	1	; () banked
  1126  00166E  6FDB               	movwf	main@errCode& (0+255),b
  1127  001670                     
  1128                           ; BSR set to: 1
  1129                           ;main.c: 31:     if(errCode != 0){
  1130  001670  51DB               	movf	main@errCode& (0+255),w,b
  1131  001672  B4D8               	btfsc	status,2,c
  1132  001674  EF3E  F00B         	goto	u3611
  1133  001678  EF41  F00B         	goto	u3610
  1134  00167C                     u3611:
  1135  00167C  FFFF               	dw	65535	; assembler added errata NOP
  1136  00167E  EF48  F00B         	goto	l322
  1137  001682                     u3610:
  1138  001682  FFFF               	dw	65535	; assembler added errata NOP
  1139  001684                     
  1140                           ; BSR set to: 1
  1141                           ;main.c: 32:         printError(errCode);
  1142  001684  51DB               	movf	main@errCode& (0+255),w,b
  1143  001686  EC5A  F00C         	call	_printError
  1144  00168A                     l323:
  1145  00168A  FFFF               	dw	65535	; assembler added errata NOP
  1146  00168C  EF45  F00B         	goto	l323
  1147  001690                     l322:
  1148  001690  FFFF               	dw	65535	; assembler added errata NOP
  1149                           
  1150                           ; BSR set to: 1
  1151                           ;main.c: 37:     RCSTA1bits.CREN = 1;
  1152  001692  88AB               	bsf	171,4,c	;volatile
  1153  001694                     l4321:
  1154  001694  FFFF               	dw	65535	; assembler added errata NOP
  1155                           
  1156                           ;main.c: 40:         if(newSequence()){
  1157  001696  ECFB  F012         	call	_newSequence	;wreg free
  1158  00169A  0900               	iorlw	0
  1159  00169C  B4D8               	btfsc	status,2,c
  1160  00169E  EF53  F00B         	goto	u3621
  1161  0016A2  EF56  F00B         	goto	u3620
  1162  0016A6                     u3621:
  1163  0016A6  FFFF               	dw	65535	; assembler added errata NOP
  1164  0016A8  EFA1  F00B         	goto	l4345
  1165  0016AC                     u3620:
  1166  0016AC  FFFF               	dw	65535	; assembler added errata NOP
  1167  0016AE                     
  1168                           ;main.c: 41:             t_newSequence* newData = getNewSequence();
  1169  0016AE  EC96  F012         	call	_getNewSequence	;wreg free
  1170  0016B2  C012  F1DC         	movff	?_getNewSequence,main@newData
  1171  0016B6  C013  F1DD         	movff	?_getNewSequence+1,main@newData+1
  1172  0016BA                     
  1173                           ;main.c: 43:             newFeeder[0] = newData ->init_posX;
  1174  0016BA  0101               	movlb	1	; () banked
  1175  0016BC  EE20 F002          	lfsr	2,2
  1176  0016C0  51DC               	movf	main@newData& (0+255),w,b
  1177  0016C2  26D9               	addwf	fsr2l,f,c
  1178  0016C4  51DD               	movf	(main@newData+1)& (0+255),w,b
  1179  0016C6  22DA               	addwfc	fsr2h,f,c
  1180  0016C8  50DF               	movf	indf2,w,c
  1181  0016CA  6E57               	movwf	_newFeeder^0,c
  1182  0016CC                     
  1183                           ; BSR set to: 1
  1184                           ;main.c: 44:             newFeeder[1] = newData ->init_posY;
  1185  0016CC  EE20 F003          	lfsr	2,3
  1186  0016D0  51DC               	movf	main@newData& (0+255),w,b
  1187  0016D2  26D9               	addwf	fsr2l,f,c
  1188  0016D4  51DD               	movf	(main@newData+1)& (0+255),w,b
  1189  0016D6  22DA               	addwfc	fsr2h,f,c
  1190  0016D8  50DF               	movf	indf2,w,c
  1191  0016DA  6E58               	movwf	(_newFeeder+1)^0,c
  1192  0016DC                     
  1193                           ; BSR set to: 1
  1194                           ;main.c: 48:             RCSTAbits.CREN = 0;
  1195  0016DC  98AB               	bcf	171,4,c	;volatile
  1196  0016DE                     
  1197                           ; BSR set to: 1
  1198                           ;main.c: 51:             storeData(0);
  1199  0016DE  0E00               	movlw	0
  1200  0016E0  ECBF  F009         	call	_storeData
  1201  0016E4                     
  1202                           ;main.c: 52:             storeData(0xFF);
  1203  0016E4  0EFF               	movlw	255
  1204  0016E6  ECBF  F009         	call	_storeData
  1205  0016EA                     
  1206                           ;main.c: 53:             storeData(newData ->end_posX);
  1207  0016EA  0101               	movlb	1	; () banked
  1208  0016EC  EE20 F005          	lfsr	2,5
  1209  0016F0  51DC               	movf	main@newData& (0+255),w,b
  1210  0016F2  26D9               	addwf	fsr2l,f,c
  1211  0016F4  51DD               	movf	(main@newData+1)& (0+255),w,b
  1212  0016F6  22DA               	addwfc	fsr2h,f,c
  1213  0016F8  50DF               	movf	indf2,w,c
  1214  0016FA  ECBF  F009         	call	_storeData
  1215  0016FE                     
  1216                           ;main.c: 54:             storeData(newData ->end_posY);
  1217  0016FE  0101               	movlb	1	; () banked
  1218  001700  EE20 F006          	lfsr	2,6
  1219  001704  51DC               	movf	main@newData& (0+255),w,b
  1220  001706  26D9               	addwf	fsr2l,f,c
  1221  001708  51DD               	movf	(main@newData+1)& (0+255),w,b
  1222  00170A  22DA               	addwfc	fsr2h,f,c
  1223  00170C  50DF               	movf	indf2,w,c
  1224  00170E  ECBF  F009         	call	_storeData
  1225  001712                     
  1226                           ;main.c: 55:             storeData(newData ->end_rot - newData ->init_rot);
  1227  001712  0101               	movlb	1	; () banked
  1228  001714  EE20 F004          	lfsr	2,4
  1229  001718  51DC               	movf	main@newData& (0+255),w,b
  1230  00171A  26D9               	addwf	fsr2l,f,c
  1231  00171C  51DD               	movf	(main@newData+1)& (0+255),w,b
  1232  00171E  22DA               	addwfc	fsr2h,f,c
  1233  001720  50DF               	movf	indf2,w,c
  1234  001722  6FD9               	movwf	??_main& (0+255),b
  1235  001724  EE20 F007          	lfsr	2,7
  1236  001728  51DC               	movf	main@newData& (0+255),w,b
  1237  00172A  26D9               	addwf	fsr2l,f,c
  1238  00172C  51DD               	movf	(main@newData+1)& (0+255),w,b
  1239  00172E  22DA               	addwfc	fsr2h,f,c
  1240  001730  50DF               	movf	indf2,w,c
  1241  001732  6FDA               	movwf	(??_main+1)& (0+255),b
  1242  001734  51D9               	movf	??_main& (0+255),w,b
  1243  001736  5DDA               	subwf	(??_main+1)& (0+255),w,b
  1244  001738  ECBF  F009         	call	_storeData
  1245  00173C                     
  1246                           ;main.c: 58:             RCSTAbits.CREN = 1;
  1247  00173C  88AB               	bsf	171,4,c	;volatile
  1248  00173E                     
  1249                           ;main.c: 61:             resetNewSequence();
  1250  00173E  ECCB  F012         	call	_resetNewSequence	;wreg free
  1251  001742                     l4345:
  1252  001742  FFFF               	dw	65535	; assembler added errata NOP
  1253                           
  1254                           ;main.c: 73:         if(readSeq()){
  1255  001744  ECF7  F012         	call	_readSeq	;wreg free
  1256  001748  0900               	iorlw	0
  1257  00174A  B4D8               	btfsc	status,2,c
  1258  00174C  EFAA  F00B         	goto	u3631
  1259  001750  EFAD  F00B         	goto	u3630
  1260  001754                     u3631:
  1261  001754  FFFF               	dw	65535	; assembler added errata NOP
  1262  001756  EF4A  F00B         	goto	l4321
  1263  00175A                     u3630:
  1264  00175A  FFFF               	dw	65535	; assembler added errata NOP
  1265  00175C                     
  1266                           ;main.c: 76:             errCode = executeData();
  1267  00175C  EC82  F006         	call	_executeData	;wreg free
  1268  001760  0101               	movlb	1	; () banked
  1269  001762  6FDB               	movwf	main@errCode& (0+255),b
  1270  001764                     
  1271                           ; BSR set to: 1
  1272                           ;main.c: 77:             printError(errCode);
  1273  001764  51DB               	movf	main@errCode& (0+255),w,b
  1274  001766  EC5A  F00C         	call	_printError
  1275  00176A                     
  1276                           ;main.c: 78:             clearTM0();
  1277  00176A  ECA4  F012         	call	_clearTM0	;wreg free
  1278  00176E                     
  1279                           ;main.c: 82:             reduceSeq();
  1280  00176E  ECF3  F012         	call	_reduceSeq	;wreg free
  1281  001772                     
  1282                           ;main.c: 83:             shiftData();
  1283  001772  EC2F  F011         	call	_shiftData	;wreg free
  1284  001776  EF4A  F00B         	goto	l4321
  1285  00177A  EFCE  F000         	goto	start
  1286  00177E                     __end_of_main:
  1287                           	callstack 0
  1288                           
  1289 ;; *************** function _usartInit *****************
  1290 ;; Defined at:
  1291 ;;		line 34 in file "usart.c"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;		None
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;		None
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      void 
  1298 ;; Registers used:
  1299 ;;		wreg, status,2
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1305 ;;      Params:         0       0       0       0       0       0       0
  1306 ;;      Locals:         0       0       0       0       0       0       0
  1307 ;;      Temps:          0       0       0       0       0       0       0
  1308 ;;      Totals:         0       0       0       0       0       0       0
  1309 ;;Total ram usage:        0 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    4
  1312 ;; This function calls:
  1313 ;;		Nothing
  1314 ;; This function is called by:
  1315 ;;		_main
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319                           	psect	text1
  1320  0024C4                     __ptext1:
  1321                           	callstack 0
  1322  0024C4                     _usartInit:
  1323                           	callstack 0
  1324  0024C4  FFFF               	dw	65535	; assembler added errata NOP
  1325  0024C6                     
  1326                           ;usart.c: 36:     TRISCbits.TRISC6 = 0;
  1327  0024C6  9C94               	bcf	148,6,c	;volatile
  1328                           
  1329                           ;usart.c: 37:     TRISCbits.TRISC7 = 1;
  1330  0024C8  8E94               	bsf	148,7,c	;volatile
  1331                           
  1332                           ;usart.c: 39:     TXSTAbits.TX9 = 0;
  1333  0024CA  9CAC               	bcf	172,6,c	;volatile
  1334                           
  1335                           ;usart.c: 40:     TXSTAbits.TXEN = 1;
  1336  0024CC  8AAC               	bsf	172,5,c	;volatile
  1337                           
  1338                           ;usart.c: 41:     TXSTAbits.SYNC = 0;
  1339  0024CE  98AC               	bcf	172,4,c	;volatile
  1340                           
  1341                           ;usart.c: 42:     TXSTAbits.BRGH = 0;
  1342  0024D0  94AC               	bcf	172,2,c	;volatile
  1343                           
  1344                           ;usart.c: 44:     RCSTAbits.SPEN = 1;
  1345  0024D2  8EAB               	bsf	171,7,c	;volatile
  1346                           
  1347                           ;usart.c: 45:     RCSTAbits.RX9 = 0;
  1348  0024D4  9CAB               	bcf	171,6,c	;volatile
  1349                           
  1350                           ;usart.c: 46:     RCSTAbits.CREN = 0;
  1351  0024D6  98AB               	bcf	171,4,c	;volatile
  1352                           
  1353                           ;usart.c: 47:     RCSTAbits.ADDEN = 0;
  1354  0024D8  96AB               	bcf	171,3,c	;volatile
  1355  0024DA                     
  1356                           ;usart.c: 50:     SPBRG = 25;
  1357  0024DA  0E19               	movlw	25
  1358  0024DC  6EAF               	movwf	175,c	;volatile
  1359  0024DE  0012               	return		;funcret
  1360  0024E0  FFFF               	dw	65535	; errata NOP
  1361  0024E2                     __end_of_usartInit:
  1362                           	callstack 0
  1363                           
  1364 ;; *************** function _tim2Init *****************
  1365 ;; Defined at:
  1366 ;;		line 48 in file "pwm.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;		None
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  1    wreg      void 
  1373 ;; Registers used:
  1374 ;;		wreg, status,2
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1380 ;;      Params:         2       0       0       0       0       0       0
  1381 ;;      Locals:         0       0       0       0       0       0       0
  1382 ;;      Temps:          0       0       0       0       0       0       0
  1383 ;;      Totals:         2       0       0       0       0       0       0
  1384 ;;Total ram usage:        2 bytes
  1385 ;; Hardware stack levels used:    1
  1386 ;; Hardware stack levels required when called:    4
  1387 ;; This function calls:
  1388 ;;		Nothing
  1389 ;; This function is called by:
  1390 ;;		_main
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           	psect	text2
  1395  0024E2                     __ptext2:
  1396                           	callstack 0
  1397  0024E2                     _tim2Init:
  1398                           	callstack 0
  1399  0024E2  FFFF               	dw	65535	; assembler added errata NOP
  1400  0024E4                     
  1401                           ;pwm.c: 49:     T2CONbits.TMR2ON = 0;
  1402  0024E4  94CA               	bcf	202,2,c	;volatile
  1403  0024E6                     
  1404                           ;pwm.c: 50:     T2CONbits.T2CKPS = 0x03;
  1405  0024E6  0E03               	movlw	3
  1406  0024E8  12CA               	iorwf	202,f,c	;volatile
  1407  0024EA                     
  1408                           ;pwm.c: 53:     pwmPeriod = _pwmPeriod;
  1409  0024EA  C012  F055         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1410  0024EE  C013  F056         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1411  0024F2  0012               	return		;funcret
  1412  0024F4  FFFF               	dw	65535	; errata NOP
  1413  0024F6                     __end_of_tim2Init:
  1414                           	callstack 0
  1415                           
  1416 ;; *************** function _tim1Init *****************
  1417 ;; Defined at:
  1418 ;;		line 33 in file "pwm.c"
  1419 ;; Parameters:    Size  Location     Type
  1420 ;;		None
  1421 ;; Auto vars:     Size  Location     Type
  1422 ;;		None
  1423 ;; Return value:  Size  Location     Type
  1424 ;;                  1    wreg      void 
  1425 ;; Registers used:
  1426 ;;		wreg, status,2
  1427 ;; Tracked objects:
  1428 ;;		On entry : 0/0
  1429 ;;		On exit  : 0/0
  1430 ;;		Unchanged: 0/0
  1431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1432 ;;      Params:         0       0       0       0       0       0       0
  1433 ;;      Locals:         0       0       0       0       0       0       0
  1434 ;;      Temps:          0       0       0       0       0       0       0
  1435 ;;      Totals:         0       0       0       0       0       0       0
  1436 ;;Total ram usage:        0 bytes
  1437 ;; Hardware stack levels used:    1
  1438 ;; Hardware stack levels required when called:    4
  1439 ;; This function calls:
  1440 ;;		Nothing
  1441 ;; This function is called by:
  1442 ;;		_main
  1443 ;; This function uses a non-reentrant model
  1444 ;;
  1445                           
  1446                           	psect	text3
  1447  00251C                     __ptext3:
  1448                           	callstack 0
  1449  00251C                     _tim1Init:
  1450                           	callstack 0
  1451  00251C  FFFF               	dw	65535	; assembler added errata NOP
  1452  00251E                     
  1453                           ;pwm.c: 34:     T1CONbits.T1CKPS = 0x03;
  1454  00251E  0E30               	movlw	48
  1455  002520  12CD               	iorwf	205,f,c	;volatile
  1456  002522                     
  1457                           ;pwm.c: 35:     T1CONbits.TMR1CS = 0;
  1458  002522  92CD               	bcf	205,1,c	;volatile
  1459  002524                     
  1460                           ;pwm.c: 37:     PIE1bits.TMR1IE = 1;
  1461  002524  809D               	bsf	157,0,c	;volatile
  1462  002526                     
  1463                           ;pwm.c: 39:     T1CONbits.TMR1ON = 1;
  1464  002526  80CD               	bsf	205,0,c	;volatile
  1465  002528  0012               	return		;funcret
  1466  00252A  FFFF               	dw	65535	; errata NOP
  1467  00252C                     __end_of_tim1Init:
  1468                           	callstack 0
  1469                           
  1470 ;; *************** function _tim0Init *****************
  1471 ;; Defined at:
  1472 ;;		line 21 in file "pwm.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;		None
  1475 ;; Auto vars:     Size  Location     Type
  1476 ;;		None
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  1    wreg      void 
  1479 ;; Registers used:
  1480 ;;		wreg, status,2
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1486 ;;      Params:         0       0       0       0       0       0       0
  1487 ;;      Locals:         0       0       0       0       0       0       0
  1488 ;;      Temps:          0       0       0       0       0       0       0
  1489 ;;      Totals:         0       0       0       0       0       0       0
  1490 ;;Total ram usage:        0 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; Hardware stack levels required when called:    4
  1493 ;; This function calls:
  1494 ;;		Nothing
  1495 ;; This function is called by:
  1496 ;;		_main
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500                           	psect	text4
  1501  00250A                     __ptext4:
  1502                           	callstack 0
  1503  00250A                     _tim0Init:
  1504                           	callstack 0
  1505  00250A  FFFF               	dw	65535	; assembler added errata NOP
  1506  00250C                     
  1507                           ;pwm.c: 22:     T0CONbits.TMR0ON = 0;
  1508  00250C  9ED5               	bcf	213,7,c	;volatile
  1509                           
  1510                           ;pwm.c: 23:     T0CONbits.T08BIT = 0;
  1511  00250E  9CD5               	bcf	213,6,c	;volatile
  1512                           
  1513                           ;pwm.c: 24:     T0CONbits.T0CS = 0;
  1514  002510  9AD5               	bcf	213,5,c	;volatile
  1515                           
  1516                           ;pwm.c: 25:     T0CONbits.PSA = 1;
  1517  002512  86D5               	bsf	213,3,c	;volatile
  1518  002514                     
  1519                           ;pwm.c: 26:     T0CONbits.T0PS = 0x07;
  1520  002514  0E07               	movlw	7
  1521  002516  12D5               	iorwf	213,f,c	;volatile
  1522  002518  0012               	return		;funcret
  1523  00251A  FFFF               	dw	65535	; errata NOP
  1524  00251C                     __end_of_tim0Init:
  1525                           	callstack 0
  1526                           
  1527 ;; *************** function _storeData *****************
  1528 ;; Defined at:
  1529 ;;		line 131 in file "usart.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;  data            1    wreg     unsigned char 
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;  data            1   26[COMRAM] unsigned char 
  1534 ;; Return value:  Size  Location     Type
  1535 ;;                  1    wreg      void 
  1536 ;; Registers used:
  1537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1538 ;; Tracked objects:
  1539 ;;		On entry : 0/0
  1540 ;;		On exit  : 0/0
  1541 ;;		Unchanged: 0/0
  1542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1543 ;;      Params:         0       0       0       0       0       0       0
  1544 ;;      Locals:         1       0       0       0       0       0       0
  1545 ;;      Temps:          2       0       0       0       0       0       0
  1546 ;;      Totals:         3       0       0       0       0       0       0
  1547 ;;Total ram usage:        3 bytes
  1548 ;; Hardware stack levels used:    1
  1549 ;; Hardware stack levels required when called:    6
  1550 ;; This function calls:
  1551 ;;		_printError
  1552 ;; This function is called by:
  1553 ;;		_main
  1554 ;; This function uses a non-reentrant model
  1555 ;;
  1556                           
  1557                           	psect	text5
  1558  00137E                     __ptext5:
  1559                           	callstack 0
  1560  00137E                     _storeData:
  1561                           	callstack 0
  1562  00137E  FFFF               	dw	65535	; assembler added errata NOP
  1563                           
  1564                           ;incstack = 0
  1565                           ;storeData@data stored from wreg
  1566  001380  6E1B               	movwf	storeData@data^0,c
  1567  001382                     
  1568                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  1569  001382  0E45               	movlw	low storeData@receivedMex
  1570  001384  245E               	addwf	storeData@counter^0,w,c
  1571  001386  6ED9               	movwf	fsr2l,c
  1572  001388  6ADA               	clrf	fsr2h,c
  1573  00138A  0E00               	movlw	high storeData@receivedMex
  1574  00138C  22DA               	addwfc	fsr2h,f,c
  1575  00138E  C01B  FFDF         	movff	storeData@data,indf2
  1576  001392                     
  1577                           ;usart.c: 142:     counter++;
  1578  001392  2A5E               	incf	storeData@counter^0,f,c
  1579                           
  1580                           ;usart.c: 145:     switch(receivedMex[0]){
  1581  001394  EFDB  F009         	goto	l4189
  1582  001398                     l4181:
  1583  001398  FFFF               	dw	65535	; assembler added errata NOP
  1584                           
  1585                           ;usart.c: 147:             mexLength = 5;
  1586  00139A  0E05               	movlw	5
  1587  00139C  6E6D               	movwf	storeData@mexLength^0,c
  1588                           
  1589                           ;usart.c: 148:             break;
  1590  00139E  EFF6  F009         	goto	l4191
  1591  0013A2                     l4183:
  1592  0013A2  FFFF               	dw	65535	; assembler added errata NOP
  1593                           
  1594                           ;usart.c: 150:             mexLength = 9;
  1595  0013A4  0E09               	movlw	9
  1596  0013A6  6E6D               	movwf	storeData@mexLength^0,c
  1597                           
  1598                           ;usart.c: 151:             break;
  1599  0013A8  EFF6  F009         	goto	l4191
  1600  0013AC                     l4185:
  1601  0013AC  FFFF               	dw	65535	; assembler added errata NOP
  1602                           
  1603                           ;usart.c: 153:             mexLength = 1;
  1604  0013AE  0E01               	movlw	1
  1605  0013B0  6E6D               	movwf	storeData@mexLength^0,c
  1606                           
  1607                           ;usart.c: 154:             break;
  1608  0013B2  EFF6  F009         	goto	l4191
  1609  0013B6                     l4189:
  1610  0013B6  FFFF               	dw	65535	; assembler added errata NOP
  1611  0013B8  5045               	movf	storeData@receivedMex^0,w,c
  1612  0013BA  6E19               	movwf	??_storeData^0,c
  1613  0013BC  6A1A               	clrf	(??_storeData+1)^0,c
  1614                           
  1615                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1616                           ; Switch size 1, requested type "simple"
  1617                           ; Number of cases is 1, Range of values is 0 to 0
  1618                           ; switch strategies available:
  1619                           ; Name         Instructions Cycles
  1620                           ; simple_byte            4     3 (average)
  1621                           ;	Chosen strategy is simple_byte
  1622  0013BE  501A               	movf	(??_storeData+1)^0,w,c
  1623  0013C0  0A00               	xorlw	0	; case 0
  1624  0013C2  B4D8               	btfsc	status,2,c
  1625  0013C4  EFE6  F009         	goto	l4597
  1626  0013C8  EFF6  F009         	goto	l4191
  1627  0013CC                     l4597:
  1628  0013CC  FFFF               	dw	65535	; assembler added errata NOP
  1629                           
  1630                           ; Switch size 1, requested type "simple"
  1631                           ; Number of cases is 3, Range of values is 0 to 2
  1632                           ; switch strategies available:
  1633                           ; Name         Instructions Cycles
  1634                           ; simple_byte           10     6 (average)
  1635                           ;	Chosen strategy is simple_byte
  1636  0013CE  5019               	movf	??_storeData^0,w,c
  1637  0013D0  0A00               	xorlw	0	; case 0
  1638  0013D2  B4D8               	btfsc	status,2,c
  1639  0013D4  EFCC  F009         	goto	l4181
  1640  0013D8  0A01               	xorlw	1	; case 1
  1641  0013DA  B4D8               	btfsc	status,2,c
  1642  0013DC  EFD1  F009         	goto	l4183
  1643  0013E0  0A03               	xorlw	3	; case 2
  1644  0013E2  B4D8               	btfsc	status,2,c
  1645  0013E4  EFD6  F009         	goto	l4185
  1646  0013E8  EFF6  F009         	goto	l4191
  1647  0013EC                     l4191:
  1648  0013EC  FFFF               	dw	65535	; assembler added errata NOP
  1649                           
  1650                           ;usart.c: 161:     if(counter >= mexLength){
  1651  0013EE  506D               	movf	storeData@mexLength^0,w,c
  1652  0013F0  5C5E               	subwf	storeData@counter^0,w,c
  1653  0013F2  A0D8               	btfss	status,0,c
  1654  0013F4  EFFE  F009         	goto	u3571
  1655  0013F8  EF01  F00A         	goto	u3570
  1656  0013FC                     u3571:
  1657  0013FC  FFFF               	dw	65535	; assembler added errata NOP
  1658  0013FE  EF6D  F00A         	goto	l588
  1659  001402                     u3570:
  1660  001402  FFFF               	dw	65535	; assembler added errata NOP
  1661  001404                     
  1662                           ;usart.c: 162:         counter = 0;
  1663  001404  0E00               	movlw	0
  1664  001406  6E5E               	movwf	storeData@counter^0,c
  1665                           
  1666                           ;usart.c: 166:         switch(receivedMex[0]){
  1667  001408  EF52  F00A         	goto	l4207
  1668  00140C                     l4195:
  1669  00140C  FFFF               	dw	65535	; assembler added errata NOP
  1670                           
  1671                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1672  00140E  5061               	movf	_dataCounter^0,w,c
  1673  001410  0D04               	mullw	4
  1674  001412  0EDB               	movlw	low _dataSequence
  1675  001414  24F3               	addwf	243,w,c
  1676  001416  6ED9               	movwf	fsr2l,c
  1677  001418  0E00               	movlw	high _dataSequence
  1678  00141A  20F4               	addwfc	prodh,w,c
  1679  00141C  6EDA               	movwf	fsr2h,c
  1680  00141E  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  1681                           
  1682                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  1683  001422  5061               	movf	_dataCounter^0,w,c
  1684  001424  0D04               	mullw	4
  1685  001426  0EDC               	movlw	low (_dataSequence+1)
  1686  001428  24F3               	addwf	243,w,c
  1687  00142A  6ED9               	movwf	fsr2l,c
  1688  00142C  0E00               	movlw	high (_dataSequence+1)
  1689  00142E  20F4               	addwfc	prodh,w,c
  1690  001430  6EDA               	movwf	fsr2h,c
  1691  001432  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  1692                           
  1693                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  1694  001436  5061               	movf	_dataCounter^0,w,c
  1695  001438  0D04               	mullw	4
  1696  00143A  0EDD               	movlw	low (_dataSequence+2)
  1697  00143C  24F3               	addwf	243,w,c
  1698  00143E  6ED9               	movwf	fsr2l,c
  1699  001440  0E00               	movlw	high (_dataSequence+2)
  1700  001442  20F4               	addwfc	prodh,w,c
  1701  001444  6EDA               	movwf	fsr2h,c
  1702  001446  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  1703                           
  1704                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1705  00144A  5061               	movf	_dataCounter^0,w,c
  1706  00144C  0D04               	mullw	4
  1707  00144E  0EDE               	movlw	low (_dataSequence+3)
  1708  001450  24F3               	addwf	243,w,c
  1709  001452  6ED9               	movwf	fsr2l,c
  1710  001454  0E00               	movlw	high (_dataSequence+3)
  1711  001456  20F4               	addwfc	prodh,w,c
  1712  001458  6EDA               	movwf	fsr2h,c
  1713  00145A  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  1714  00145E                     
  1715                           ;usart.c: 173:                 dataCounter++;
  1716  00145E  2A61               	incf	_dataCounter^0,f,c
  1717                           
  1718                           ;usart.c: 174:                 break;
  1719  001460  EF6D  F00A         	goto	l588
  1720  001464                     l585:
  1721  001464  FFFF               	dw	65535	; assembler added errata NOP
  1722                           
  1723                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  1724  001466  C046  F0EF         	movff	storeData@receivedMex+1,_newSequenceData
  1725                           
  1726                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  1727  00146A  C047  F0F0         	movff	storeData@receivedMex+2,_newSequenceData+1
  1728                           
  1729                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  1730  00146E  C048  F0F1         	movff	storeData@receivedMex+3,_newSequenceData+2
  1731                           
  1732                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  1733  001472  C049  F0F2         	movff	storeData@receivedMex+4,_newSequenceData+3
  1734                           
  1735                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  1736  001476  C04A  F0F3         	movff	storeData@receivedMex+5,_newSequenceData+4
  1737                           
  1738                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  1739  00147A  C04B  F0F4         	movff	storeData@receivedMex+6,_newSequenceData+5
  1740                           
  1741                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  1742  00147E  C04C  F0F5         	movff	storeData@receivedMex+7,_newSequenceData+6
  1743                           
  1744                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  1745  001482  C04D  F0F6         	movff	storeData@receivedMex+8,_newSequenceData+7
  1746  001486                     
  1747                           ;usart.c: 186:                 _newSequence = 1;
  1748  001486  0E01               	movlw	1
  1749  001488  6E5F               	movwf	__newSequence^0,c
  1750                           
  1751                           ;usart.c: 187:                 break;
  1752  00148A  EF6D  F00A         	goto	l588
  1753  00148E                     l4201:
  1754  00148E  FFFF               	dw	65535	; assembler added errata NOP
  1755                           
  1756                           ;usart.c: 190:                 _fatalError = 1;
  1757  001490  0E01               	movlw	1
  1758  001492  6E60               	movwf	__fatalError^0,c
  1759                           
  1760                           ;usart.c: 191:                 break;
  1761  001494  EF6D  F00A         	goto	l588
  1762  001498                     l4203:
  1763  001498  FFFF               	dw	65535	; assembler added errata NOP
  1764                           
  1765                           ;usart.c: 194:                 printError(8);
  1766  00149A  0E08               	movlw	8
  1767  00149C  EC5A  F00C         	call	_printError
  1768                           
  1769                           ;usart.c: 195:                 break;
  1770  0014A0  EF6D  F00A         	goto	l588
  1771  0014A4                     l4207:
  1772  0014A4  FFFF               	dw	65535	; assembler added errata NOP
  1773  0014A6  5045               	movf	storeData@receivedMex^0,w,c
  1774  0014A8  6E19               	movwf	??_storeData^0,c
  1775  0014AA  6A1A               	clrf	(??_storeData+1)^0,c
  1776                           
  1777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1778                           ; Switch size 1, requested type "simple"
  1779                           ; Number of cases is 1, Range of values is 0 to 0
  1780                           ; switch strategies available:
  1781                           ; Name         Instructions Cycles
  1782                           ; simple_byte            4     3 (average)
  1783                           ;	Chosen strategy is simple_byte
  1784  0014AC  501A               	movf	(??_storeData+1)^0,w,c
  1785  0014AE  0A00               	xorlw	0	; case 0
  1786  0014B0  B4D8               	btfsc	status,2,c
  1787  0014B2  EF5D  F00A         	goto	l4599
  1788  0014B6  EF4C  F00A         	goto	l4203
  1789  0014BA                     l4599:
  1790  0014BA  FFFF               	dw	65535	; assembler added errata NOP
  1791                           
  1792                           ; Switch size 1, requested type "simple"
  1793                           ; Number of cases is 3, Range of values is 0 to 2
  1794                           ; switch strategies available:
  1795                           ; Name         Instructions Cycles
  1796                           ; simple_byte           10     6 (average)
  1797                           ;	Chosen strategy is simple_byte
  1798  0014BC  5019               	movf	??_storeData^0,w,c
  1799  0014BE  0A00               	xorlw	0	; case 0
  1800  0014C0  B4D8               	btfsc	status,2,c
  1801  0014C2  EF06  F00A         	goto	l4195
  1802  0014C6  0A01               	xorlw	1	; case 1
  1803  0014C8  B4D8               	btfsc	status,2,c
  1804  0014CA  EF32  F00A         	goto	l585
  1805  0014CE  0A03               	xorlw	3	; case 2
  1806  0014D0  B4D8               	btfsc	status,2,c
  1807  0014D2  EF47  F00A         	goto	l4201
  1808  0014D6  EF4C  F00A         	goto	l4203
  1809  0014DA                     l588:
  1810  0014DA  FFFF               	dw	65535	; assembler added errata NOP
  1811  0014DC  0012               	return		;funcret
  1812  0014DE  FFFF               	dw	65535	; errata NOP
  1813  0014E0                     __end_of_storeData:
  1814                           	callstack 0
  1815                           
  1816 ;; *************** function _printError *****************
  1817 ;; Defined at:
  1818 ;;		line 53 in file "usart.c"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;  errCode         1    wreg     unsigned char 
  1821 ;; Auto vars:     Size  Location     Type
  1822 ;;  errCode         1   23[COMRAM] unsigned char 
  1823 ;; Return value:  Size  Location     Type
  1824 ;;                  1    wreg      void 
  1825 ;; Registers used:
  1826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1827 ;; Tracked objects:
  1828 ;;		On entry : 0/0
  1829 ;;		On exit  : 0/0
  1830 ;;		Unchanged: 0/0
  1831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1832 ;;      Params:         0       0       0       0       0       0       0
  1833 ;;      Locals:         1       0       0       0       0       0       0
  1834 ;;      Temps:          2       0       0       0       0       0       0
  1835 ;;      Totals:         3       0       0       0       0       0       0
  1836 ;;Total ram usage:        3 bytes
  1837 ;; Hardware stack levels used:    1
  1838 ;; Hardware stack levels required when called:    5
  1839 ;; This function calls:
  1840 ;;		_uartTx
  1841 ;; This function is called by:
  1842 ;;		_main
  1843 ;;		_storeData
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           	psect	text6
  1848  0018B4                     __ptext6:
  1849                           	callstack 0
  1850  0018B4                     _printError:
  1851                           	callstack 0
  1852  0018B4  FFFF               	dw	65535	; assembler added errata NOP
  1853                           
  1854                           ;incstack = 0
  1855                           ;printError@errCode stored from wreg
  1856  0018B6  6E18               	movwf	printError@errCode^0,c
  1857  0018B8                     
  1858                           ;usart.c: 55:     switch(errCode){
  1859  0018B8  EFB6  F00C         	goto	l4045
  1860  0018BC                     l4027:
  1861  0018BC  FFFF               	dw	65535	; assembler added errata NOP
  1862                           
  1863                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1864  0018BE  0EA5               	movlw	low _errString_Feed
  1865  0018C0  6E12               	movwf	uartTx@ptr^0,c
  1866  0018C2  0E00               	movlw	high _errString_Feed
  1867  0018C4  6E13               	movwf	(uartTx@ptr+1)^0,c
  1868  0018C6  0E1E               	movlw	30
  1869  0018C8  6E14               	movwf	uartTx@length^0,c
  1870  0018CA  EC8D  F011         	call	_uartTx	;wreg free
  1871                           
  1872                           ;usart.c: 58:             break;
  1873  0018CE  EFE5  F00C         	goto	l544
  1874  0018D2                     l4029:
  1875  0018D2  FFFF               	dw	65535	; assembler added errata NOP
  1876                           
  1877                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1878  0018D4  0E5E               	movlw	low _errString_ZEND
  1879  0018D6  6E12               	movwf	uartTx@ptr^0,c
  1880  0018D8  0E01               	movlw	high _errString_ZEND
  1881  0018DA  6E13               	movwf	(uartTx@ptr+1)^0,c
  1882  0018DC  0E29               	movlw	41
  1883  0018DE  6E14               	movwf	uartTx@length^0,c
  1884  0018E0  EC8D  F011         	call	_uartTx	;wreg free
  1885                           
  1886                           ;usart.c: 61:             break;
  1887  0018E4  EFE5  F00C         	goto	l544
  1888  0018E8                     l4031:
  1889  0018E8  FFFF               	dw	65535	; assembler added errata NOP
  1890                           
  1891                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1892  0018EA  0E87               	movlw	low _errString_Reset
  1893  0018EC  6E12               	movwf	uartTx@ptr^0,c
  1894  0018EE  0E01               	movlw	high _errString_Reset
  1895  0018F0  6E13               	movwf	(uartTx@ptr+1)^0,c
  1896  0018F2  0E28               	movlw	40
  1897  0018F4  6E14               	movwf	uartTx@length^0,c
  1898  0018F6  EC8D  F011         	call	_uartTx	;wreg free
  1899                           
  1900                           ;usart.c: 64:             break;
  1901  0018FA  EFE5  F00C         	goto	l544
  1902  0018FE                     l4033:
  1903  0018FE  FFFF               	dw	65535	; assembler added errata NOP
  1904                           
  1905                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1906  001900  0E35               	movlw	low _errString_Point
  1907  001902  6E12               	movwf	uartTx@ptr^0,c
  1908  001904  0E01               	movlw	high _errString_Point
  1909  001906  6E13               	movwf	(uartTx@ptr+1)^0,c
  1910  001908  0E29               	movlw	41
  1911  00190A  6E14               	movwf	uartTx@length^0,c
  1912  00190C  EC8D  F011         	call	_uartTx	;wreg free
  1913                           
  1914                           ;usart.c: 67:             break;
  1915  001910  EFE5  F00C         	goto	l544
  1916  001914                     l4035:
  1917  001914  FFFF               	dw	65535	; assembler added errata NOP
  1918                           
  1919                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  1920  001916  0E84               	movlw	low _errString_Bound
  1921  001918  6E12               	movwf	uartTx@ptr^0,c
  1922  00191A  0E00               	movlw	high _errString_Bound
  1923  00191C  6E13               	movwf	(uartTx@ptr+1)^0,c
  1924  00191E  0E21               	movlw	33
  1925  001920  6E14               	movwf	uartTx@length^0,c
  1926  001922  EC8D  F011         	call	_uartTx	;wreg free
  1927                           
  1928                           ;usart.c: 70:             break;
  1929  001926  EFE5  F00C         	goto	l544
  1930  00192A                     l4037:
  1931  00192A  FFFF               	dw	65535	; assembler added errata NOP
  1932                           
  1933                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  1934  00192C  0E00               	movlw	low _errString_PointZ
  1935  00192E  6E12               	movwf	uartTx@ptr^0,c
  1936  001930  0E01               	movlw	high _errString_PointZ
  1937  001932  6E13               	movwf	(uartTx@ptr+1)^0,c
  1938  001934  0E35               	movlw	53
  1939  001936  6E14               	movwf	uartTx@length^0,c
  1940  001938  EC8D  F011         	call	_uartTx	;wreg free
  1941                           
  1942                           ;usart.c: 73:             break;
  1943  00193C  EFE5  F00C         	goto	l544
  1944  001940                     l4039:
  1945  001940  FFFF               	dw	65535	; assembler added errata NOP
  1946                           
  1947                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  1948  001942  0EAF               	movlw	low _errString_Fatal
  1949  001944  6E12               	movwf	uartTx@ptr^0,c
  1950  001946  0E01               	movlw	high _errString_Fatal
  1951  001948  6E13               	movwf	(uartTx@ptr+1)^0,c
  1952  00194A  0E27               	movlw	39
  1953  00194C  6E14               	movwf	uartTx@length^0,c
  1954  00194E  EC8D  F011         	call	_uartTx	;wreg free
  1955                           
  1956                           ;usart.c: 76:             break;
  1957  001952  EFE5  F00C         	goto	l544
  1958  001956                     l4041:
  1959  001956  FFFF               	dw	65535	; assembler added errata NOP
  1960                           
  1961                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  1962  001958  0EC3               	movlw	low _errString_Command
  1963  00195A  6E12               	movwf	uartTx@ptr^0,c
  1964  00195C  0E00               	movlw	high _errString_Command
  1965  00195E  6E13               	movwf	(uartTx@ptr+1)^0,c
  1966  001960  0E18               	movlw	24
  1967  001962  6E14               	movwf	uartTx@length^0,c
  1968  001964  EC8D  F011         	call	_uartTx	;wreg free
  1969                           
  1970                           ;usart.c: 79:             break;
  1971  001968  EFE5  F00C         	goto	l544
  1972  00196C                     l4045:
  1973  00196C  FFFF               	dw	65535	; assembler added errata NOP
  1974  00196E  5018               	movf	printError@errCode^0,w,c
  1975  001970  6E16               	movwf	??_printError^0,c
  1976  001972  6A17               	clrf	(??_printError+1)^0,c
  1977                           
  1978                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1979                           ; Switch size 1, requested type "simple"
  1980                           ; Number of cases is 1, Range of values is 0 to 0
  1981                           ; switch strategies available:
  1982                           ; Name         Instructions Cycles
  1983                           ; simple_byte            4     3 (average)
  1984                           ;	Chosen strategy is simple_byte
  1985  001974  5017               	movf	(??_printError+1)^0,w,c
  1986  001976  0A00               	xorlw	0	; case 0
  1987  001978  B4D8               	btfsc	status,2,c
  1988  00197A  EFC1  F00C         	goto	l4601
  1989  00197E  EFE5  F00C         	goto	l544
  1990  001982                     l4601:
  1991  001982  FFFF               	dw	65535	; assembler added errata NOP
  1992                           
  1993                           ; Switch size 1, requested type "simple"
  1994                           ; Number of cases is 8, Range of values is 1 to 8
  1995                           ; switch strategies available:
  1996                           ; Name         Instructions Cycles
  1997                           ; simple_byte           25    13 (average)
  1998                           ;	Chosen strategy is simple_byte
  1999  001984  5016               	movf	??_printError^0,w,c
  2000  001986  0A01               	xorlw	1	; case 1
  2001  001988  B4D8               	btfsc	status,2,c
  2002  00198A  EF5E  F00C         	goto	l4027
  2003  00198E  0A03               	xorlw	3	; case 2
  2004  001990  B4D8               	btfsc	status,2,c
  2005  001992  EF69  F00C         	goto	l4029
  2006  001996  0A01               	xorlw	1	; case 3
  2007  001998  B4D8               	btfsc	status,2,c
  2008  00199A  EF74  F00C         	goto	l4031
  2009  00199E  0A07               	xorlw	7	; case 4
  2010  0019A0  B4D8               	btfsc	status,2,c
  2011  0019A2  EF7F  F00C         	goto	l4033
  2012  0019A6  0A01               	xorlw	1	; case 5
  2013  0019A8  B4D8               	btfsc	status,2,c
  2014  0019AA  EF8A  F00C         	goto	l4035
  2015  0019AE  0A03               	xorlw	3	; case 6
  2016  0019B0  B4D8               	btfsc	status,2,c
  2017  0019B2  EF95  F00C         	goto	l4037
  2018  0019B6  0A01               	xorlw	1	; case 7
  2019  0019B8  B4D8               	btfsc	status,2,c
  2020  0019BA  EFA0  F00C         	goto	l4039
  2021  0019BE  0A0F               	xorlw	15	; case 8
  2022  0019C0  B4D8               	btfsc	status,2,c
  2023  0019C2  EFAB  F00C         	goto	l4041
  2024  0019C6  EFE5  F00C         	goto	l544
  2025  0019CA                     l544:
  2026  0019CA  FFFF               	dw	65535	; assembler added errata NOP
  2027  0019CC  0012               	return		;funcret
  2028  0019CE  FFFF               	dw	65535	; errata NOP
  2029  0019D0                     __end_of_printError:
  2030                           	callstack 0
  2031                           
  2032 ;; *************** function _uartTx *****************
  2033 ;; Defined at:
  2034 ;;		line 221 in file "usart.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2037 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2038 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2039 ;;  length          1   19[COMRAM] unsigned char 
  2040 ;; Auto vars:     Size  Location     Type
  2041 ;;  i               1   20[COMRAM] unsigned char 
  2042 ;; Return value:  Size  Location     Type
  2043 ;;                  1    wreg      void 
  2044 ;; Registers used:
  2045 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2046 ;; Tracked objects:
  2047 ;;		On entry : 0/0
  2048 ;;		On exit  : 0/0
  2049 ;;		Unchanged: 0/0
  2050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2051 ;;      Params:         3       0       0       0       0       0       0
  2052 ;;      Locals:         1       0       0       0       0       0       0
  2053 ;;      Temps:          0       0       0       0       0       0       0
  2054 ;;      Totals:         4       0       0       0       0       0       0
  2055 ;;Total ram usage:        4 bytes
  2056 ;; Hardware stack levels used:    1
  2057 ;; Hardware stack levels required when called:    4
  2058 ;; This function calls:
  2059 ;;		Nothing
  2060 ;; This function is called by:
  2061 ;;		_printError
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064                           
  2065                           	psect	text7
  2066  00231A                     __ptext7:
  2067                           	callstack 0
  2068  00231A                     _uartTx:
  2069                           	callstack 0
  2070  00231A  FFFF               	dw	65535	; assembler added errata NOP
  2071  00231C                     
  2072                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  2073  00231C  0E01               	movlw	1
  2074  00231E  6E15               	movwf	uartTx@i^0,c
  2075  002320  EFA6  F011         	goto	l3519
  2076  002324                     l3515:
  2077  002324  FFFF               	dw	65535	; assembler added errata NOP
  2078                           
  2079                           ;usart.c: 226:         TXREG = *ptr;
  2080  002326  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2081  00232A  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2082  00232E  50DF               	movf	indf2,w,c
  2083  002330  6EAD               	movwf	173,c	;volatile
  2084  002332                     l599:
  2085  002332  FFFF               	dw	65535	; assembler added errata NOP
  2086  002334  A2AC               	btfss	172,1,c	;volatile
  2087  002336  EF9F  F011         	goto	u2581
  2088  00233A  EFA2  F011         	goto	u2580
  2089  00233E                     u2581:
  2090  00233E  FFFF               	dw	65535	; assembler added errata NOP
  2091  002340  EF99  F011         	goto	l599
  2092  002344                     u2580:
  2093  002344  FFFF               	dw	65535	; assembler added errata NOP
  2094  002346                     
  2095                           ;usart.c: 230:         ptr++;
  2096  002346  4A12               	infsnz	uartTx@ptr^0,f,c
  2097  002348  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2098                           
  2099                           ;usart.c: 231:     }
  2100  00234A  2A15               	incf	uartTx@i^0,f,c
  2101  00234C                     l3519:
  2102  00234C  FFFF               	dw	65535	; assembler added errata NOP
  2103  00234E  5014               	movf	uartTx@length^0,w,c
  2104  002350  5C15               	subwf	uartTx@i^0,w,c
  2105  002352  A0D8               	btfss	status,0,c
  2106  002354  EFAE  F011         	goto	u2591
  2107  002358  EFB1  F011         	goto	u2590
  2108  00235C                     u2591:
  2109  00235C  FFFF               	dw	65535	; assembler added errata NOP
  2110  00235E  EF92  F011         	goto	l3515
  2111  002362                     u2590:
  2112  002362  FFFF               	dw	65535	; assembler added errata NOP
  2113  002364  0012               	return		;funcret
  2114  002366  FFFF               	dw	65535	; errata NOP
  2115  002368                     __end_of_uartTx:
  2116                           	callstack 0
  2117                           
  2118 ;; *************** function _shiftData *****************
  2119 ;; Defined at:
  2120 ;;		line 120 in file "usart.c"
  2121 ;; Parameters:    Size  Location     Type
  2122 ;;		None
  2123 ;; Auto vars:     Size  Location     Type
  2124 ;;  i               1   19[COMRAM] unsigned char 
  2125 ;; Return value:  Size  Location     Type
  2126 ;;                  1    wreg      void 
  2127 ;; Registers used:
  2128 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2129 ;; Tracked objects:
  2130 ;;		On entry : 0/0
  2131 ;;		On exit  : 0/0
  2132 ;;		Unchanged: 0/0
  2133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2134 ;;      Params:         0       0       0       0       0       0       0
  2135 ;;      Locals:         1       0       0       0       0       0       0
  2136 ;;      Temps:          2       0       0       0       0       0       0
  2137 ;;      Totals:         3       0       0       0       0       0       0
  2138 ;;Total ram usage:        3 bytes
  2139 ;; Hardware stack levels used:    1
  2140 ;; Hardware stack levels required when called:    4
  2141 ;; This function calls:
  2142 ;;		Nothing
  2143 ;; This function is called by:
  2144 ;;		_main
  2145 ;; This function uses a non-reentrant model
  2146 ;;
  2147                           
  2148                           	psect	text8
  2149  00225E                     __ptext8:
  2150                           	callstack 0
  2151  00225E                     _shiftData:
  2152                           	callstack 0
  2153  00225E  FFFF               	dw	65535	; assembler added errata NOP
  2154  002260                     
  2155                           ;usart.c: 121:     char i;;usart.c: 123:     for(i = 0; i < 4; i++){
  2156  002260  0E00               	movlw	0
  2157  002262  6E14               	movwf	shiftData@i^0,c
  2158  002264                     l4295:
  2159  002264  FFFF               	dw	65535	; assembler added errata NOP
  2160                           
  2161                           ;usart.c: 124:         dataSequence[i] = dataSequence[i+1];
  2162  002266  5014               	movf	shiftData@i^0,w,c
  2163  002268  6E12               	movwf	??_shiftData^0,c
  2164  00226A  6A13               	clrf	(??_shiftData+1)^0,c
  2165  00226C  90D8               	bcf	status,0,c
  2166  00226E  3612               	rlcf	??_shiftData^0,f,c
  2167  002270  3613               	rlcf	(??_shiftData+1)^0,f,c
  2168  002272  90D8               	bcf	status,0,c
  2169  002274  3612               	rlcf	??_shiftData^0,f,c
  2170  002276  3613               	rlcf	(??_shiftData+1)^0,f,c
  2171  002278  0EDF               	movlw	low (_dataSequence+4)
  2172  00227A  2412               	addwf	??_shiftData^0,w,c
  2173  00227C  6ED9               	movwf	fsr2l,c
  2174  00227E  0E00               	movlw	high (_dataSequence+4)
  2175  002280  2013               	addwfc	(??_shiftData+1)^0,w,c
  2176  002282  6EDA               	movwf	fsr2h,c
  2177  002284  5014               	movf	shiftData@i^0,w,c
  2178  002286  0D04               	mullw	4
  2179  002288  0EDB               	movlw	low _dataSequence
  2180  00228A  24F3               	addwf	243,w,c
  2181  00228C  6EE1               	movwf	fsr1l,c
  2182  00228E  0E00               	movlw	high _dataSequence
  2183  002290  20F4               	addwfc	prodh,w,c
  2184  002292  6EE2               	movwf	fsr1h,c
  2185  002294  CFDE FFE6          	movff	postinc2,postinc1
  2186  002298  CFDE FFE6          	movff	postinc2,postinc1
  2187  00229C  CFDE FFE6          	movff	postinc2,postinc1
  2188  0022A0  CFDE FFE6          	movff	postinc2,postinc1
  2189  0022A4                     
  2190                           ;usart.c: 125:     }
  2191  0022A4  2A14               	incf	shiftData@i^0,f,c
  2192  0022A6  0E03               	movlw	3
  2193  0022A8  6414               	cpfsgt	shiftData@i^0,c
  2194  0022AA  EF59  F011         	goto	u3601
  2195  0022AE  EF5C  F011         	goto	u3600
  2196  0022B2                     u3601:
  2197  0022B2  FFFF               	dw	65535	; assembler added errata NOP
  2198  0022B4  EF32  F011         	goto	l4295
  2199  0022B8                     u3600:
  2200  0022B8  FFFF               	dw	65535	; assembler added errata NOP
  2201  0022BA  0012               	return		;funcret
  2202  0022BC  FFFF               	dw	65535	; errata NOP
  2203  0022BE                     __end_of_shiftData:
  2204                           	callstack 0
  2205                           
  2206 ;; *************** function _resetPosition *****************
  2207 ;; Defined at:
  2208 ;;		line 158 in file "motors.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;		None
  2211 ;; Auto vars:     Size  Location     Type
  2212 ;;  keepMovingZ     1   23[COMRAM] unsigned char 
  2213 ;;  keepMovingY     1   22[COMRAM] unsigned char 
  2214 ;;  keepMovingX     1   21[COMRAM] unsigned char 
  2215 ;; Return value:  Size  Location     Type
  2216 ;;                  1    wreg      unsigned char 
  2217 ;; Registers used:
  2218 ;;		wreg, status,2, status,0, cstack
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2224 ;;      Params:         0       0       0       0       0       0       0
  2225 ;;      Locals:         3       0       0       0       0       0       0
  2226 ;;      Temps:          0       0       0       0       0       0       0
  2227 ;;      Totals:         3       0       0       0       0       0       0
  2228 ;;Total ram usage:        3 bytes
  2229 ;; Hardware stack levels used:    1
  2230 ;; Hardware stack levels required when called:    5
  2231 ;; This function calls:
  2232 ;;		_enableMotor
  2233 ;;		_resetStep
  2234 ;;		_setDecay
  2235 ;;		_setDirection
  2236 ;;		_setStep
  2237 ;;		_stepMade
  2238 ;; This function is called by:
  2239 ;;		_main
  2240 ;; This function uses a non-reentrant model
  2241 ;;
  2242                           
  2243                           	psect	text9
  2244  00118A                     __ptext9:
  2245                           	callstack 0
  2246  00118A                     _resetPosition:
  2247                           	callstack 0
  2248  00118A  FFFF               	dw	65535	; assembler added errata NOP
  2249  00118C                     
  2250                           ;motors.c: 160:     setStep(0, 0);
  2251  00118C  0E00               	movlw	0
  2252  00118E  6E12               	movwf	setStep@motor^0,c
  2253  001190  0E00               	movlw	0
  2254  001192  EC41  F00F         	call	_setStep
  2255                           
  2256                           ;motors.c: 161:     setStep(1, 0);
  2257  001196  0E00               	movlw	0
  2258  001198  6E12               	movwf	setStep@motor^0,c
  2259  00119A  0E01               	movlw	1
  2260  00119C  EC41  F00F         	call	_setStep
  2261                           
  2262                           ;motors.c: 162:     setStep(2, 0);
  2263  0011A0  0E00               	movlw	0
  2264  0011A2  6E12               	movwf	setStep@motor^0,c
  2265  0011A4  0E02               	movlw	2
  2266  0011A6  EC41  F00F         	call	_setStep
  2267                           
  2268                           ;motors.c: 164:     setDirection(0, 0);
  2269  0011AA  0E00               	movlw	0
  2270  0011AC  6E12               	movwf	setDirection@motor^0,c
  2271  0011AE  0E00               	movlw	0
  2272  0011B0  ECBB  F010         	call	_setDirection
  2273                           
  2274                           ;motors.c: 165:     setDirection(0, 1);
  2275  0011B4  0E01               	movlw	1
  2276  0011B6  6E12               	movwf	setDirection@motor^0,c
  2277  0011B8  0E00               	movlw	0
  2278  0011BA  ECBB  F010         	call	_setDirection
  2279                           
  2280                           ;motors.c: 166:     setDirection(0, 2);
  2281  0011BE  0E02               	movlw	2
  2282  0011C0  6E12               	movwf	setDirection@motor^0,c
  2283  0011C2  0E00               	movlw	0
  2284  0011C4  ECBB  F010         	call	_setDirection
  2285                           
  2286                           ;motors.c: 168:     setDecay(1, 0);
  2287  0011C8  0E00               	movlw	0
  2288  0011CA  6E12               	movwf	setDecay@motor^0,c
  2289  0011CC  0E01               	movlw	1
  2290  0011CE  EC47  F010         	call	_setDecay
  2291                           
  2292                           ;motors.c: 169:     setDecay(1, 1);
  2293  0011D2  0E01               	movlw	1
  2294  0011D4  6E12               	movwf	setDecay@motor^0,c
  2295  0011D6  0E01               	movlw	1
  2296  0011D8  EC47  F010         	call	_setDecay
  2297                           
  2298                           ;motors.c: 170:     setDecay(1, 2);
  2299  0011DC  0E02               	movlw	2
  2300  0011DE  6E12               	movwf	setDecay@motor^0,c
  2301  0011E0  0E01               	movlw	1
  2302  0011E2  EC47  F010         	call	_setDecay
  2303                           
  2304                           ;motors.c: 172:     enableMotor(0, 0);
  2305  0011E6  0E00               	movlw	0
  2306  0011E8  6E12               	movwf	enableMotor@motor^0,c
  2307  0011EA  0E00               	movlw	0
  2308  0011EC  EC81  F010         	call	_enableMotor
  2309                           
  2310                           ;motors.c: 173:     enableMotor(0, 1);
  2311  0011F0  0E01               	movlw	1
  2312  0011F2  6E12               	movwf	enableMotor@motor^0,c
  2313  0011F4  0E00               	movlw	0
  2314  0011F6  EC81  F010         	call	_enableMotor
  2315                           
  2316                           ;motors.c: 174:     enableMotor(0, 2);
  2317  0011FA  0E02               	movlw	2
  2318  0011FC  6E12               	movwf	enableMotor@motor^0,c
  2319  0011FE  0E00               	movlw	0
  2320  001200  EC81  F010         	call	_enableMotor
  2321  001204                     
  2322                           ;motors.c: 178:     unsigned char keepMovingX = 1;
  2323  001204  0E01               	movlw	1
  2324  001206  6E16               	movwf	resetPosition@keepMovingX^0,c
  2325  001208                     
  2326                           ;motors.c: 179:     unsigned char keepMovingY = 1;
  2327  001208  0E01               	movlw	1
  2328  00120A  6E17               	movwf	resetPosition@keepMovingY^0,c
  2329  00120C                     
  2330                           ;motors.c: 180:     unsigned char keepMovingZ = 1;
  2331  00120C  0E01               	movlw	1
  2332  00120E  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2333  001210                     
  2334                           ;motors.c: 183:     T2CONbits.TMR2ON = 1;
  2335  001210  84CA               	bsf	202,2,c	;volatile
  2336  001212                     
  2337                           ;motors.c: 185:     tm0Error = 0;
  2338  001212  0E00               	movlw	0
  2339  001214  6E5C               	movwf	(_tm0Error+1)^0,c
  2340  001216  0E00               	movlw	0
  2341  001218  6E5B               	movwf	_tm0Error^0,c
  2342  00121A                     
  2343                           ;motors.c: 186:     tm0Limit = 100;
  2344  00121A  0E64               	movlw	100
  2345  00121C  6E68               	movwf	_tm0Limit^0,c
  2346  00121E                     
  2347                           ;motors.c: 187:     T0CONbits.TMR0ON = 1;
  2348  00121E  8ED5               	bsf	213,7,c	;volatile
  2349                           
  2350                           ;motors.c: 189:     while(keepMovingX || keepMovingY || keepMovingZ){
  2351  001220  EF93  F009         	goto	l4113
  2352  001224                     l4091:
  2353  001224  FFFF               	dw	65535	; assembler added errata NOP
  2354                           
  2355                           ;motors.c: 192:         if(tm0Error){
  2356  001226  505B               	movf	_tm0Error^0,w,c
  2357  001228  105C               	iorwf	(_tm0Error+1)^0,w,c
  2358  00122A  B4D8               	btfsc	status,2,c
  2359  00122C  EF1A  F009         	goto	u3431
  2360  001230  EF1D  F009         	goto	u3430
  2361  001234                     u3431:
  2362  001234  FFFF               	dw	65535	; assembler added errata NOP
  2363  001236  EF27  F009         	goto	l117
  2364  00123A                     u3430:
  2365  00123A  FFFF               	dw	65535	; assembler added errata NOP
  2366  00123C                     
  2367                           ;motors.c: 194:             LATAbits.LATA2 = 0;
  2368  00123C  9489               	bcf	137,2,c	;volatile
  2369                           
  2370                           ;motors.c: 195:             LATBbits.LATB4 = 0;
  2371  00123E  988A               	bcf	138,4,c	;volatile
  2372                           
  2373                           ;motors.c: 196:             LATCbits.LATC2 = 0;
  2374  001240  948B               	bcf	139,2,c	;volatile
  2375  001242                     
  2376                           ;motors.c: 198:             tm0Error = 3;
  2377  001242  0E00               	movlw	0
  2378  001244  6E5C               	movwf	(_tm0Error+1)^0,c
  2379  001246  0E03               	movlw	3
  2380  001248  6E5B               	movwf	_tm0Error^0,c
  2381                           
  2382                           ;motors.c: 199:             break;
  2383  00124A  EFB1  F009         	goto	l118
  2384  00124E                     l117:
  2385  00124E  FFFF               	dw	65535	; assembler added errata NOP
  2386                           
  2387                           ;motors.c: 206:         if(PORTEbits.RE0 || !keepMovingX){
  2388  001250  B084               	btfsc	132,0,c	;volatile
  2389  001252  EF2D  F009         	goto	u3441
  2390  001256  EF30  F009         	goto	u3440
  2391  00125A                     u3441:
  2392  00125A  FFFF               	dw	65535	; assembler added errata NOP
  2393  00125C  EF3A  F009         	goto	l4099
  2394  001260                     u3440:
  2395  001260  FFFF               	dw	65535	; assembler added errata NOP
  2396  001262  5016               	movf	resetPosition@keepMovingX^0,w,c
  2397  001264  A4D8               	btfss	status,2,c
  2398  001266  EF37  F009         	goto	u3451
  2399  00126A  EF3A  F009         	goto	u3450
  2400  00126E                     u3451:
  2401  00126E  FFFF               	dw	65535	; assembler added errata NOP
  2402  001270  EF3F  F009         	goto	l119
  2403  001274                     u3450:
  2404  001274                     l4099:
  2405  001274  FFFF               	dw	65535	; assembler added errata NOP
  2406                           
  2407                           ;motors.c: 208:             keepMovingX = 0;
  2408  001276  0E00               	movlw	0
  2409  001278  6E16               	movwf	resetPosition@keepMovingX^0,c
  2410                           
  2411                           ;motors.c: 209:         }else{
  2412  00127A  EF41  F009         	goto	l122
  2413  00127E                     l119:
  2414  00127E  FFFF               	dw	65535	; assembler added errata NOP
  2415                           
  2416                           ;motors.c: 211:             LATAbits.LATA2 = 1;
  2417  001280  8489               	bsf	137,2,c	;volatile
  2418  001282                     l122:
  2419  001282  FFFF               	dw	65535	; assembler added errata NOP
  2420                           
  2421                           ;motors.c: 215:         if(PORTEbits.RE1 || !keepMovingY){
  2422  001284  B284               	btfsc	132,1,c	;volatile
  2423  001286  EF47  F009         	goto	u3461
  2424  00128A  EF4A  F009         	goto	u3460
  2425  00128E                     u3461:
  2426  00128E  FFFF               	dw	65535	; assembler added errata NOP
  2427  001290  EF54  F009         	goto	l4103
  2428  001294                     u3460:
  2429  001294  FFFF               	dw	65535	; assembler added errata NOP
  2430  001296  5017               	movf	resetPosition@keepMovingY^0,w,c
  2431  001298  A4D8               	btfss	status,2,c
  2432  00129A  EF51  F009         	goto	u3471
  2433  00129E  EF54  F009         	goto	u3470
  2434  0012A2                     u3471:
  2435  0012A2  FFFF               	dw	65535	; assembler added errata NOP
  2436  0012A4  EF59  F009         	goto	l123
  2437  0012A8                     u3470:
  2438  0012A8                     l4103:
  2439  0012A8  FFFF               	dw	65535	; assembler added errata NOP
  2440                           
  2441                           ;motors.c: 217:             keepMovingY = 0;
  2442  0012AA  0E00               	movlw	0
  2443  0012AC  6E17               	movwf	resetPosition@keepMovingY^0,c
  2444                           
  2445                           ;motors.c: 218:         }else{
  2446  0012AE  EF5B  F009         	goto	l126
  2447  0012B2                     l123:
  2448  0012B2  FFFF               	dw	65535	; assembler added errata NOP
  2449                           
  2450                           ;motors.c: 220:             LATBbits.LATB4 = 1;
  2451  0012B4  888A               	bsf	138,4,c	;volatile
  2452  0012B6                     l126:
  2453  0012B6  FFFF               	dw	65535	; assembler added errata NOP
  2454                           
  2455                           ;motors.c: 224:         if(PORTEbits.RE2 || !keepMovingZ){
  2456  0012B8  B484               	btfsc	132,2,c	;volatile
  2457  0012BA  EF61  F009         	goto	u3481
  2458  0012BE  EF64  F009         	goto	u3480
  2459  0012C2                     u3481:
  2460  0012C2  FFFF               	dw	65535	; assembler added errata NOP
  2461  0012C4  EF6E  F009         	goto	l4107
  2462  0012C8                     u3480:
  2463  0012C8  FFFF               	dw	65535	; assembler added errata NOP
  2464  0012CA  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2465  0012CC  A4D8               	btfss	status,2,c
  2466  0012CE  EF6B  F009         	goto	u3491
  2467  0012D2  EF6E  F009         	goto	u3490
  2468  0012D6                     u3491:
  2469  0012D6  FFFF               	dw	65535	; assembler added errata NOP
  2470  0012D8  EF73  F009         	goto	l127
  2471  0012DC                     u3490:
  2472  0012DC                     l4107:
  2473  0012DC  FFFF               	dw	65535	; assembler added errata NOP
  2474                           
  2475                           ;motors.c: 226:             keepMovingZ = 0;
  2476  0012DE  0E00               	movlw	0
  2477  0012E0  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2478                           
  2479                           ;motors.c: 227:         }else{
  2480  0012E2  EF75  F009         	goto	l4109
  2481  0012E6                     l127:
  2482  0012E6  FFFF               	dw	65535	; assembler added errata NOP
  2483                           
  2484                           ;motors.c: 229:             LATCbits.LATC2 = 1;
  2485  0012E8  848B               	bsf	139,2,c	;volatile
  2486  0012EA                     l4109:
  2487  0012EA  FFFF               	dw	65535	; assembler added errata NOP
  2488  0012EC  EC7B  F012         	call	_stepMade	;wreg free
  2489  0012F0  5012               	movf	?_stepMade^0,w,c
  2490  0012F2  1013               	iorwf	(?_stepMade+1)^0,w,c
  2491  0012F4  B4D8               	btfsc	status,2,c
  2492  0012F6  EF7F  F009         	goto	u3501
  2493  0012FA  EF82  F009         	goto	u3500
  2494  0012FE                     u3501:
  2495  0012FE  FFFF               	dw	65535	; assembler added errata NOP
  2496  001300  EF75  F009         	goto	l4109
  2497  001304                     u3500:
  2498  001304  FFFF               	dw	65535	; assembler added errata NOP
  2499  001306                     
  2500                           ;motors.c: 236:         LATAbits.LATA2 = 0;
  2501  001306  9489               	bcf	137,2,c	;volatile
  2502                           
  2503                           ;motors.c: 237:         LATBbits.LATB4 = 0;
  2504  001308  988A               	bcf	138,4,c	;volatile
  2505                           
  2506                           ;motors.c: 238:         LATCbits.LATC2 = 0;
  2507  00130A  948B               	bcf	139,2,c	;volatile
  2508  00130C                     l4111:
  2509  00130C  FFFF               	dw	65535	; assembler added errata NOP
  2510  00130E  EC7B  F012         	call	_stepMade	;wreg free
  2511  001312  5012               	movf	?_stepMade^0,w,c
  2512  001314  1013               	iorwf	(?_stepMade+1)^0,w,c
  2513  001316  B4D8               	btfsc	status,2,c
  2514  001318  EF90  F009         	goto	u3511
  2515  00131C  EF93  F009         	goto	u3510
  2516  001320                     u3511:
  2517  001320  FFFF               	dw	65535	; assembler added errata NOP
  2518  001322  EF86  F009         	goto	l4111
  2519  001326                     u3510:
  2520  001326                     l4113:
  2521  001326  FFFF               	dw	65535	; assembler added errata NOP
  2522                           
  2523                           ;motors.c: 189:     while(keepMovingX || keepMovingY || keepMovingZ){
  2524  001328  5016               	movf	resetPosition@keepMovingX^0,w,c
  2525  00132A  A4D8               	btfss	status,2,c
  2526  00132C  EF9A  F009         	goto	u3521
  2527  001330  EF9D  F009         	goto	u3520
  2528  001334                     u3521:
  2529  001334  FFFF               	dw	65535	; assembler added errata NOP
  2530  001336  EF12  F009         	goto	l4091
  2531  00133A                     u3520:
  2532  00133A  FFFF               	dw	65535	; assembler added errata NOP
  2533  00133C  5017               	movf	resetPosition@keepMovingY^0,w,c
  2534  00133E  A4D8               	btfss	status,2,c
  2535  001340  EFA4  F009         	goto	u3531
  2536  001344  EFA7  F009         	goto	u3530
  2537  001348                     u3531:
  2538  001348  FFFF               	dw	65535	; assembler added errata NOP
  2539  00134A  EF12  F009         	goto	l4091
  2540  00134E                     u3530:
  2541  00134E  FFFF               	dw	65535	; assembler added errata NOP
  2542  001350  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2543  001352  A4D8               	btfss	status,2,c
  2544  001354  EFAE  F009         	goto	u3541
  2545  001358  EFB1  F009         	goto	u3540
  2546  00135C                     u3541:
  2547  00135C  FFFF               	dw	65535	; assembler added errata NOP
  2548  00135E  EF12  F009         	goto	l4091
  2549  001362                     u3540:
  2550  001362                     l118:
  2551  001362  FFFF               	dw	65535	; assembler added errata NOP
  2552                           
  2553                           ;motors.c: 245:     T0CONbits.TMR0ON = 0;
  2554  001364  9ED5               	bcf	213,7,c	;volatile
  2555                           
  2556                           ;motors.c: 246:     T2CONbits.TMR2ON = 0;
  2557  001366  94CA               	bcf	202,2,c	;volatile
  2558  001368                     
  2559                           ;motors.c: 248:     TMR0 = 0;
  2560  001368  0E00               	movlw	0
  2561  00136A  6ED7               	movwf	215,c	;volatile
  2562  00136C  0E00               	movlw	0
  2563  00136E  6ED6               	movwf	214,c	;volatile
  2564                           
  2565                           ;motors.c: 249:     TMR2 = 0;
  2566  001370  0E00               	movlw	0
  2567  001372  6ECC               	movwf	204,c	;volatile
  2568  001374                     
  2569                           ;motors.c: 252:     resetStep();
  2570  001374  ECDF  F012         	call	_resetStep	;wreg free
  2571  001378                     
  2572                           ;motors.c: 255:     return(tm0Error);
  2573  001378  505B               	movf	_tm0Error^0,w,c
  2574  00137A  0012               	return		;funcret
  2575  00137C  FFFF               	dw	65535	; errata NOP
  2576  00137E                     __end_of_resetPosition:
  2577                           	callstack 0
  2578                           
  2579 ;; *************** function _setStep *****************
  2580 ;; Defined at:
  2581 ;;		line 67 in file "motors.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;  step            1    wreg     unsigned char 
  2584 ;;  motor           1   17[COMRAM] unsigned char 
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;  step            1   20[COMRAM] unsigned char 
  2587 ;; Return value:  Size  Location     Type
  2588 ;;                  1    wreg      void 
  2589 ;; Registers used:
  2590 ;;		wreg, status,2, status,0
  2591 ;; Tracked objects:
  2592 ;;		On entry : 0/0
  2593 ;;		On exit  : 0/0
  2594 ;;		Unchanged: 0/0
  2595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2596 ;;      Params:         1       0       0       0       0       0       0
  2597 ;;      Locals:         1       0       0       0       0       0       0
  2598 ;;      Temps:          2       0       0       0       0       0       0
  2599 ;;      Totals:         4       0       0       0       0       0       0
  2600 ;;Total ram usage:        4 bytes
  2601 ;; Hardware stack levels used:    1
  2602 ;; Hardware stack levels required when called:    4
  2603 ;; This function calls:
  2604 ;;		Nothing
  2605 ;; This function is called by:
  2606 ;;		_resetPosition
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           	psect	text10
  2611  001E82                     __ptext10:
  2612                           	callstack 0
  2613  001E82                     _setStep:
  2614                           	callstack 0
  2615  001E82  FFFF               	dw	65535	; assembler added errata NOP
  2616                           
  2617                           ;incstack = 0
  2618                           ;setStep@step stored from wreg
  2619  001E84  6E15               	movwf	setStep@step^0,c
  2620  001E86                     
  2621                           ;motors.c: 68:     switch(motor){
  2622  001E86  EF8E  F00F         	goto	l3759
  2623  001E8A                     l3751:
  2624  001E8A  FFFF               	dw	65535	; assembler added errata NOP
  2625                           
  2626                           ;motors.c: 71:             LATAbits.LATA5 = (step & 0x01);
  2627  001E8C  C015  F013         	movff	setStep@step,??_setStep
  2628  001E90  0E01               	movlw	1
  2629  001E92  1613               	andwf	??_setStep^0,f,c
  2630  001E94  3A13               	swapf	??_setStep^0,f,c
  2631  001E96  4613               	rlncf	??_setStep^0,f,c
  2632  001E98  5089               	movf	137,w,c	;volatile
  2633  001E9A  1813               	xorwf	??_setStep^0,w,c
  2634  001E9C  0BDF               	andlw	-33
  2635  001E9E  1813               	xorwf	??_setStep^0,w,c
  2636  001EA0  6E89               	movwf	137,c	;volatile
  2637                           
  2638                           ;motors.c: 73:             LATBbits.LATB0 = (step & 0x02);
  2639  001EA2  C015  F013         	movff	setStep@step,??_setStep
  2640  001EA6  0E02               	movlw	2
  2641  001EA8  1613               	andwf	??_setStep^0,f,c
  2642  001EAA  508A               	movf	138,w,c	;volatile
  2643  001EAC  1813               	xorwf	??_setStep^0,w,c
  2644  001EAE  0BFE               	andlw	-2
  2645  001EB0  1813               	xorwf	??_setStep^0,w,c
  2646  001EB2  6E8A               	movwf	138,c	;volatile
  2647                           
  2648                           ;motors.c: 74:             break;
  2649  001EB4  EFA9  F00F         	goto	l85
  2650  001EB8                     l3753:
  2651  001EB8  FFFF               	dw	65535	; assembler added errata NOP
  2652                           
  2653                           ;motors.c: 76:             LATBbits.LATB6 = (step & 0x01);
  2654  001EBA  C015  F013         	movff	setStep@step,??_setStep
  2655  001EBE  0E01               	movlw	1
  2656  001EC0  1613               	andwf	??_setStep^0,f,c
  2657  001EC2  3A13               	swapf	??_setStep^0,f,c
  2658  001EC4  4613               	rlncf	??_setStep^0,f,c
  2659  001EC6  4613               	rlncf	??_setStep^0,f,c
  2660  001EC8  508A               	movf	138,w,c	;volatile
  2661  001ECA  1813               	xorwf	??_setStep^0,w,c
  2662  001ECC  0BBF               	andlw	-65
  2663  001ECE  1813               	xorwf	??_setStep^0,w,c
  2664  001ED0  6E8A               	movwf	138,c	;volatile
  2665                           
  2666                           ;motors.c: 77:             LATBbits.LATB7 = (step & 0x02);
  2667  001ED2  C015  F013         	movff	setStep@step,??_setStep
  2668  001ED6  0E02               	movlw	2
  2669  001ED8  1613               	andwf	??_setStep^0,f,c
  2670  001EDA  3213               	rrcf	??_setStep^0,f,c
  2671  001EDC  3213               	rrcf	??_setStep^0,f,c
  2672  001EDE  508A               	movf	138,w,c	;volatile
  2673  001EE0  1813               	xorwf	??_setStep^0,w,c
  2674  001EE2  0B7F               	andlw	-129
  2675  001EE4  1813               	xorwf	??_setStep^0,w,c
  2676  001EE6  6E8A               	movwf	138,c	;volatile
  2677                           
  2678                           ;motors.c: 78:             break;
  2679  001EE8  EFA9  F00F         	goto	l85
  2680  001EEC                     l3755:
  2681  001EEC  FFFF               	dw	65535	; assembler added errata NOP
  2682                           
  2683                           ;motors.c: 80:             LATCbits.LATC4 = (step & 0x01);
  2684  001EEE  C015  F013         	movff	setStep@step,??_setStep
  2685  001EF2  0E01               	movlw	1
  2686  001EF4  1613               	andwf	??_setStep^0,f,c
  2687  001EF6  3A13               	swapf	??_setStep^0,f,c
  2688  001EF8  508B               	movf	139,w,c	;volatile
  2689  001EFA  1813               	xorwf	??_setStep^0,w,c
  2690  001EFC  0BEF               	andlw	-17
  2691  001EFE  1813               	xorwf	??_setStep^0,w,c
  2692  001F00  6E8B               	movwf	139,c	;volatile
  2693                           
  2694                           ;motors.c: 81:             LATCbits.LATC5 = (step & 0x02);
  2695  001F02  C015  F013         	movff	setStep@step,??_setStep
  2696  001F06  0E02               	movlw	2
  2697  001F08  1613               	andwf	??_setStep^0,f,c
  2698  001F0A  3A13               	swapf	??_setStep^0,f,c
  2699  001F0C  4613               	rlncf	??_setStep^0,f,c
  2700  001F0E  508B               	movf	139,w,c	;volatile
  2701  001F10  1813               	xorwf	??_setStep^0,w,c
  2702  001F12  0BDF               	andlw	-33
  2703  001F14  1813               	xorwf	??_setStep^0,w,c
  2704  001F16  6E8B               	movwf	139,c	;volatile
  2705                           
  2706                           ;motors.c: 82:             break;
  2707  001F18  EFA9  F00F         	goto	l85
  2708  001F1C                     l3759:
  2709  001F1C  FFFF               	dw	65535	; assembler added errata NOP
  2710  001F1E  5012               	movf	setStep@motor^0,w,c
  2711  001F20  6E13               	movwf	??_setStep^0,c
  2712  001F22  6A14               	clrf	(??_setStep+1)^0,c
  2713                           
  2714                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2715                           ; Switch size 1, requested type "simple"
  2716                           ; Number of cases is 1, Range of values is 0 to 0
  2717                           ; switch strategies available:
  2718                           ; Name         Instructions Cycles
  2719                           ; simple_byte            4     3 (average)
  2720                           ;	Chosen strategy is simple_byte
  2721  001F24  5014               	movf	(??_setStep+1)^0,w,c
  2722  001F26  0A00               	xorlw	0	; case 0
  2723  001F28  B4D8               	btfsc	status,2,c
  2724  001F2A  EF99  F00F         	goto	l4603
  2725  001F2E  EFA9  F00F         	goto	l85
  2726  001F32                     l4603:
  2727  001F32  FFFF               	dw	65535	; assembler added errata NOP
  2728                           
  2729                           ; Switch size 1, requested type "simple"
  2730                           ; Number of cases is 3, Range of values is 0 to 2
  2731                           ; switch strategies available:
  2732                           ; Name         Instructions Cycles
  2733                           ; simple_byte           10     6 (average)
  2734                           ;	Chosen strategy is simple_byte
  2735  001F34  5013               	movf	??_setStep^0,w,c
  2736  001F36  0A00               	xorlw	0	; case 0
  2737  001F38  B4D8               	btfsc	status,2,c
  2738  001F3A  EF45  F00F         	goto	l3751
  2739  001F3E  0A01               	xorlw	1	; case 1
  2740  001F40  B4D8               	btfsc	status,2,c
  2741  001F42  EF5C  F00F         	goto	l3753
  2742  001F46  0A03               	xorlw	3	; case 2
  2743  001F48  B4D8               	btfsc	status,2,c
  2744  001F4A  EF76  F00F         	goto	l3755
  2745  001F4E  EFA9  F00F         	goto	l85
  2746  001F52                     l85:
  2747  001F52  FFFF               	dw	65535	; assembler added errata NOP
  2748  001F54  0012               	return		;funcret
  2749  001F56  FFFF               	dw	65535	; errata NOP
  2750  001F58                     __end_of_setStep:
  2751                           	callstack 0
  2752                           
  2753 ;; *************** function _setDecay *****************
  2754 ;; Defined at:
  2755 ;;		line 136 in file "motors.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;  decay           1    wreg     unsigned char 
  2758 ;;  motor           1   17[COMRAM] unsigned char 
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;  decay           1   20[COMRAM] unsigned char 
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  1    wreg      void 
  2763 ;; Registers used:
  2764 ;;		wreg, status,2, status,0
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2770 ;;      Params:         1       0       0       0       0       0       0
  2771 ;;      Locals:         1       0       0       0       0       0       0
  2772 ;;      Temps:          2       0       0       0       0       0       0
  2773 ;;      Totals:         4       0       0       0       0       0       0
  2774 ;;Total ram usage:        4 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    4
  2777 ;; This function calls:
  2778 ;;		Nothing
  2779 ;; This function is called by:
  2780 ;;		_resetPosition
  2781 ;; This function uses a non-reentrant model
  2782 ;;
  2783                           
  2784                           	psect	text11
  2785  00208E                     __ptext11:
  2786                           	callstack 0
  2787  00208E                     _setDecay:
  2788                           	callstack 0
  2789  00208E  FFFF               	dw	65535	; assembler added errata NOP
  2790                           
  2791                           ;incstack = 0
  2792                           ;setDecay@decay stored from wreg
  2793  002090  6E15               	movwf	setDecay@decay^0,c
  2794  002092                     
  2795                           ;motors.c: 137:     switch(motor){
  2796  002092  EF63  F010         	goto	l3791
  2797  002096                     l3783:
  2798  002096  FFFF               	dw	65535	; assembler added errata NOP
  2799                           
  2800                           ;motors.c: 139:             LATBbits.LATB2 = decay;
  2801  002098  B015               	btfsc	setDecay@decay^0,0,c
  2802  00209A  D002               	bra	u3035
  2803  00209C  948A               	bcf	138,2,c	;volatile
  2804  00209E  D001               	bra	u3036
  2805  0020A0                     u3035:
  2806  0020A0  848A               	bsf	138,2,c	;volatile
  2807  0020A2                     u3036:
  2808                           
  2809                           ;motors.c: 140:             break;
  2810  0020A2  EF7E  F010         	goto	l112
  2811  0020A6                     l3785:
  2812  0020A6  FFFF               	dw	65535	; assembler added errata NOP
  2813                           
  2814                           ;motors.c: 142:             LATCbits.LATC0 = decay;
  2815  0020A8  B015               	btfsc	setDecay@decay^0,0,c
  2816  0020AA  D002               	bra	u3045
  2817  0020AC  908B               	bcf	139,0,c	;volatile
  2818  0020AE  D001               	bra	u3046
  2819  0020B0                     u3045:
  2820  0020B0  808B               	bsf	139,0,c	;volatile
  2821  0020B2                     u3046:
  2822                           
  2823                           ;motors.c: 143:             break;
  2824  0020B2  EF7E  F010         	goto	l112
  2825  0020B6                     l3787:
  2826  0020B6  FFFF               	dw	65535	; assembler added errata NOP
  2827                           
  2828                           ;motors.c: 145:             LATDbits.LATD0 = decay;
  2829  0020B8  B015               	btfsc	setDecay@decay^0,0,c
  2830  0020BA  D002               	bra	u3055
  2831  0020BC  908C               	bcf	140,0,c	;volatile
  2832  0020BE  D001               	bra	u3056
  2833  0020C0                     u3055:
  2834  0020C0  808C               	bsf	140,0,c	;volatile
  2835  0020C2                     u3056:
  2836                           
  2837                           ;motors.c: 146:             break;
  2838  0020C2  EF7E  F010         	goto	l112
  2839  0020C6                     l3791:
  2840  0020C6  FFFF               	dw	65535	; assembler added errata NOP
  2841  0020C8  5012               	movf	setDecay@motor^0,w,c
  2842  0020CA  6E13               	movwf	??_setDecay^0,c
  2843  0020CC  6A14               	clrf	(??_setDecay+1)^0,c
  2844                           
  2845                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2846                           ; Switch size 1, requested type "simple"
  2847                           ; Number of cases is 1, Range of values is 0 to 0
  2848                           ; switch strategies available:
  2849                           ; Name         Instructions Cycles
  2850                           ; simple_byte            4     3 (average)
  2851                           ;	Chosen strategy is simple_byte
  2852  0020CE  5014               	movf	(??_setDecay+1)^0,w,c
  2853  0020D0  0A00               	xorlw	0	; case 0
  2854  0020D2  B4D8               	btfsc	status,2,c
  2855  0020D4  EF6E  F010         	goto	l4605
  2856  0020D8  EF7E  F010         	goto	l112
  2857  0020DC                     l4605:
  2858  0020DC  FFFF               	dw	65535	; assembler added errata NOP
  2859                           
  2860                           ; Switch size 1, requested type "simple"
  2861                           ; Number of cases is 3, Range of values is 0 to 2
  2862                           ; switch strategies available:
  2863                           ; Name         Instructions Cycles
  2864                           ; simple_byte           10     6 (average)
  2865                           ;	Chosen strategy is simple_byte
  2866  0020DE  5013               	movf	??_setDecay^0,w,c
  2867  0020E0  0A00               	xorlw	0	; case 0
  2868  0020E2  B4D8               	btfsc	status,2,c
  2869  0020E4  EF4B  F010         	goto	l3783
  2870  0020E8  0A01               	xorlw	1	; case 1
  2871  0020EA  B4D8               	btfsc	status,2,c
  2872  0020EC  EF53  F010         	goto	l3785
  2873  0020F0  0A03               	xorlw	3	; case 2
  2874  0020F2  B4D8               	btfsc	status,2,c
  2875  0020F4  EF5B  F010         	goto	l3787
  2876  0020F8  EF7E  F010         	goto	l112
  2877  0020FC                     l112:
  2878  0020FC  FFFF               	dw	65535	; assembler added errata NOP
  2879  0020FE  0012               	return		;funcret
  2880  002100  FFFF               	dw	65535	; errata NOP
  2881  002102                     __end_of_setDecay:
  2882                           	callstack 0
  2883                           
  2884 ;; *************** function _enableMotor *****************
  2885 ;; Defined at:
  2886 ;;		line 94 in file "motors.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  enable          1    wreg     unsigned char 
  2889 ;;  motor           1   17[COMRAM] unsigned char 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  enable          1   20[COMRAM] unsigned char 
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  1    wreg      void 
  2894 ;; Registers used:
  2895 ;;		wreg, status,2, status,0
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2901 ;;      Params:         1       0       0       0       0       0       0
  2902 ;;      Locals:         1       0       0       0       0       0       0
  2903 ;;      Temps:          2       0       0       0       0       0       0
  2904 ;;      Totals:         4       0       0       0       0       0       0
  2905 ;;Total ram usage:        4 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; Hardware stack levels required when called:    4
  2908 ;; This function calls:
  2909 ;;		Nothing
  2910 ;; This function is called by:
  2911 ;;		_resetPosition
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           	psect	text12
  2916  002102                     __ptext12:
  2917                           	callstack 0
  2918  002102                     _enableMotor:
  2919                           	callstack 0
  2920  002102  FFFF               	dw	65535	; assembler added errata NOP
  2921                           
  2922                           ;incstack = 0
  2923                           ;enableMotor@enable stored from wreg
  2924  002104  6E15               	movwf	enableMotor@enable^0,c
  2925  002106                     
  2926                           ;motors.c: 95:     switch(motor){
  2927  002106  EF9D  F010         	goto	l3775
  2928  00210A                     l3767:
  2929  00210A  FFFF               	dw	65535	; assembler added errata NOP
  2930                           
  2931                           ;motors.c: 97:             LATAbits.LATA3 = enable;
  2932  00210C  B015               	btfsc	enableMotor@enable^0,0,c
  2933  00210E  D002               	bra	u3005
  2934  002110  9689               	bcf	137,3,c	;volatile
  2935  002112  D001               	bra	u3006
  2936  002114                     u3005:
  2937  002114  8689               	bsf	137,3,c	;volatile
  2938  002116                     u3006:
  2939                           
  2940                           ;motors.c: 98:             break;
  2941  002116  EFB8  F010         	goto	l94
  2942  00211A                     l3769:
  2943  00211A  FFFF               	dw	65535	; assembler added errata NOP
  2944                           
  2945                           ;motors.c: 100:             LATBbits.LATB5 = enable;
  2946  00211C  B015               	btfsc	enableMotor@enable^0,0,c
  2947  00211E  D002               	bra	u3015
  2948  002120  9A8A               	bcf	138,5,c	;volatile
  2949  002122  D001               	bra	u3016
  2950  002124                     u3015:
  2951  002124  8A8A               	bsf	138,5,c	;volatile
  2952  002126                     u3016:
  2953                           
  2954                           ;motors.c: 101:             break;
  2955  002126  EFB8  F010         	goto	l94
  2956  00212A                     l3771:
  2957  00212A  FFFF               	dw	65535	; assembler added errata NOP
  2958                           
  2959                           ;motors.c: 103:             LATCbits.LATC3 = enable;
  2960  00212C  B015               	btfsc	enableMotor@enable^0,0,c
  2961  00212E  D002               	bra	u3025
  2962  002130  968B               	bcf	139,3,c	;volatile
  2963  002132  D001               	bra	u3026
  2964  002134                     u3025:
  2965  002134  868B               	bsf	139,3,c	;volatile
  2966  002136                     u3026:
  2967                           
  2968                           ;motors.c: 104:             break;
  2969  002136  EFB8  F010         	goto	l94
  2970  00213A                     l3775:
  2971  00213A  FFFF               	dw	65535	; assembler added errata NOP
  2972  00213C  5012               	movf	enableMotor@motor^0,w,c
  2973  00213E  6E13               	movwf	??_enableMotor^0,c
  2974  002140  6A14               	clrf	(??_enableMotor+1)^0,c
  2975                           
  2976                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2977                           ; Switch size 1, requested type "simple"
  2978                           ; Number of cases is 1, Range of values is 0 to 0
  2979                           ; switch strategies available:
  2980                           ; Name         Instructions Cycles
  2981                           ; simple_byte            4     3 (average)
  2982                           ;	Chosen strategy is simple_byte
  2983  002142  5014               	movf	(??_enableMotor+1)^0,w,c
  2984  002144  0A00               	xorlw	0	; case 0
  2985  002146  B4D8               	btfsc	status,2,c
  2986  002148  EFA8  F010         	goto	l4607
  2987  00214C  EFB8  F010         	goto	l94
  2988  002150                     l4607:
  2989  002150  FFFF               	dw	65535	; assembler added errata NOP
  2990                           
  2991                           ; Switch size 1, requested type "simple"
  2992                           ; Number of cases is 3, Range of values is 0 to 2
  2993                           ; switch strategies available:
  2994                           ; Name         Instructions Cycles
  2995                           ; simple_byte           10     6 (average)
  2996                           ;	Chosen strategy is simple_byte
  2997  002152  5013               	movf	??_enableMotor^0,w,c
  2998  002154  0A00               	xorlw	0	; case 0
  2999  002156  B4D8               	btfsc	status,2,c
  3000  002158  EF85  F010         	goto	l3767
  3001  00215C  0A01               	xorlw	1	; case 1
  3002  00215E  B4D8               	btfsc	status,2,c
  3003  002160  EF8D  F010         	goto	l3769
  3004  002164  0A03               	xorlw	3	; case 2
  3005  002166  B4D8               	btfsc	status,2,c
  3006  002168  EF95  F010         	goto	l3771
  3007  00216C  EFB8  F010         	goto	l94
  3008  002170                     l94:
  3009  002170  FFFF               	dw	65535	; assembler added errata NOP
  3010  002172  0012               	return		;funcret
  3011  002174  FFFF               	dw	65535	; errata NOP
  3012  002176                     __end_of_enableMotor:
  3013                           	callstack 0
  3014                           
  3015 ;; *************** function _resetNewSequence *****************
  3016 ;; Defined at:
  3017 ;;		line 112 in file "usart.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;		None
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;		None
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  1    wreg      void 
  3024 ;; Registers used:
  3025 ;;		wreg, status,2
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3031 ;;      Params:         0       0       0       0       0       0       0
  3032 ;;      Locals:         0       0       0       0       0       0       0
  3033 ;;      Temps:          0       0       0       0       0       0       0
  3034 ;;      Totals:         0       0       0       0       0       0       0
  3035 ;;Total ram usage:        0 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    4
  3038 ;; This function calls:
  3039 ;;		Nothing
  3040 ;; This function is called by:
  3041 ;;		_main
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           	psect	text13
  3046  002596                     __ptext13:
  3047                           	callstack 0
  3048  002596                     _resetNewSequence:
  3049                           	callstack 0
  3050  002596  FFFF               	dw	65535	; assembler added errata NOP
  3051  002598                     
  3052                           ;usart.c: 113:     _newSequence = 0;
  3053  002598  0E00               	movlw	0
  3054  00259A  6E5F               	movwf	__newSequence^0,c
  3055  00259C  0012               	return		;funcret
  3056  00259E  FFFF               	dw	65535	; errata NOP
  3057  0025A0                     __end_of_resetNewSequence:
  3058                           	callstack 0
  3059                           
  3060 ;; *************** function _reduceSeq *****************
  3061 ;; Defined at:
  3062 ;;		line 89 in file "usart.c"
  3063 ;; Parameters:    Size  Location     Type
  3064 ;;		None
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;		None
  3067 ;; Return value:  Size  Location     Type
  3068 ;;                  1    wreg      void 
  3069 ;; Registers used:
  3070 ;;		status,2, status,0
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3076 ;;      Params:         0       0       0       0       0       0       0
  3077 ;;      Locals:         0       0       0       0       0       0       0
  3078 ;;      Temps:          0       0       0       0       0       0       0
  3079 ;;      Totals:         0       0       0       0       0       0       0
  3080 ;;Total ram usage:        0 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; Hardware stack levels required when called:    4
  3083 ;; This function calls:
  3084 ;;		Nothing
  3085 ;; This function is called by:
  3086 ;;		_main
  3087 ;; This function uses a non-reentrant model
  3088 ;;
  3089                           
  3090                           	psect	text14
  3091  0025E6                     __ptext14:
  3092                           	callstack 0
  3093  0025E6                     _reduceSeq:
  3094                           	callstack 0
  3095  0025E6  FFFF               	dw	65535	; assembler added errata NOP
  3096  0025E8                     
  3097                           ;usart.c: 90:     dataCounter--;
  3098  0025E8  0661               	decf	_dataCounter^0,f,c
  3099  0025EA  0012               	return		;funcret
  3100  0025EC  FFFF               	dw	65535	; errata NOP
  3101  0025EE                     __end_of_reduceSeq:
  3102                           	callstack 0
  3103                           
  3104 ;; *************** function _readSeq *****************
  3105 ;; Defined at:
  3106 ;;		line 96 in file "usart.c"
  3107 ;; Parameters:    Size  Location     Type
  3108 ;;		None
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;		None
  3111 ;; Return value:  Size  Location     Type
  3112 ;;                  1    wreg      unsigned char 
  3113 ;; Registers used:
  3114 ;;		wreg, status,2
  3115 ;; Tracked objects:
  3116 ;;		On entry : 0/0
  3117 ;;		On exit  : 0/0
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3120 ;;      Params:         0       0       0       0       0       0       0
  3121 ;;      Locals:         0       0       0       0       0       0       0
  3122 ;;      Temps:          0       0       0       0       0       0       0
  3123 ;;      Totals:         0       0       0       0       0       0       0
  3124 ;;Total ram usage:        0 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; Hardware stack levels required when called:    4
  3127 ;; This function calls:
  3128 ;;		Nothing
  3129 ;; This function is called by:
  3130 ;;		_main
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           	psect	text15
  3135  0025EE                     __ptext15:
  3136                           	callstack 0
  3137  0025EE                     _readSeq:
  3138                           	callstack 0
  3139  0025EE  FFFF               	dw	65535	; assembler added errata NOP
  3140  0025F0                     
  3141                           ;usart.c: 97:     return dataCounter;
  3142  0025F0  5061               	movf	_dataCounter^0,w,c
  3143  0025F2  0012               	return		;funcret
  3144  0025F4  FFFF               	dw	65535	; errata NOP
  3145  0025F6                     __end_of_readSeq:
  3146                           	callstack 0
  3147                           
  3148 ;; *************** function _newSequence *****************
  3149 ;; Defined at:
  3150 ;;		line 104 in file "usart.c"
  3151 ;; Parameters:    Size  Location     Type
  3152 ;;		None
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;		None
  3155 ;; Return value:  Size  Location     Type
  3156 ;;                  1    wreg      unsigned char 
  3157 ;; Registers used:
  3158 ;;		wreg, status,2
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3164 ;;      Params:         0       0       0       0       0       0       0
  3165 ;;      Locals:         0       0       0       0       0       0       0
  3166 ;;      Temps:          0       0       0       0       0       0       0
  3167 ;;      Totals:         0       0       0       0       0       0       0
  3168 ;;Total ram usage:        0 bytes
  3169 ;; Hardware stack levels used:    1
  3170 ;; Hardware stack levels required when called:    4
  3171 ;; This function calls:
  3172 ;;		Nothing
  3173 ;; This function is called by:
  3174 ;;		_main
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           	psect	text16
  3179  0025F6                     __ptext16:
  3180                           	callstack 0
  3181  0025F6                     _newSequence:
  3182                           	callstack 0
  3183  0025F6  FFFF               	dw	65535	; assembler added errata NOP
  3184  0025F8                     
  3185                           ;usart.c: 105:     return _newSequence;
  3186  0025F8  505F               	movf	__newSequence^0,w,c
  3187  0025FA  0012               	return		;funcret
  3188  0025FC  FFFF               	dw	65535	; errata NOP
  3189  0025FE                     __end_of_newSequence:
  3190                           	callstack 0
  3191                           
  3192 ;; *************** function _interruptInit *****************
  3193 ;; Defined at:
  3194 ;;		line 96 in file "main.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;		None
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;		None
  3199 ;; Return value:  Size  Location     Type
  3200 ;;                  1    wreg      void 
  3201 ;; Registers used:
  3202 ;;		None
  3203 ;; Tracked objects:
  3204 ;;		On entry : 0/0
  3205 ;;		On exit  : 0/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3208 ;;      Params:         0       0       0       0       0       0       0
  3209 ;;      Locals:         0       0       0       0       0       0       0
  3210 ;;      Temps:          0       0       0       0       0       0       0
  3211 ;;      Totals:         0       0       0       0       0       0       0
  3212 ;;Total ram usage:        0 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; Hardware stack levels required when called:    4
  3215 ;; This function calls:
  3216 ;;		Nothing
  3217 ;; This function is called by:
  3218 ;;		_main
  3219 ;; This function uses a non-reentrant model
  3220 ;;
  3221                           
  3222                           	psect	text17
  3223  0023B6                     __ptext17:
  3224                           	callstack 0
  3225  0023B6                     _interruptInit:
  3226                           	callstack 0
  3227  0023B6  FFFF               	dw	65535	; assembler added errata NOP
  3228  0023B8                     
  3229                           ;main.c: 98:     if(!INTCONbits.GIE){
  3230  0023B8  BEF2               	btfsc	242,7,c	;volatile
  3231  0023BA  EFE1  F011         	goto	u3551
  3232  0023BE  EFE4  F011         	goto	u3550
  3233  0023C2                     u3551:
  3234  0023C2  FFFF               	dw	65535	; assembler added errata NOP
  3235  0023C4  EFE6  F011         	goto	l334
  3236  0023C8                     u3550:
  3237  0023C8  FFFF               	dw	65535	; assembler added errata NOP
  3238  0023CA                     
  3239                           ;main.c: 99:         INTCONbits.GIE = 1;
  3240  0023CA  8EF2               	bsf	242,7,c	;volatile
  3241  0023CC                     l334:
  3242  0023CC  FFFF               	dw	65535	; assembler added errata NOP
  3243                           
  3244                           ;main.c: 101:     if(!INTCONbits.PEIE){
  3245  0023CE  BCF2               	btfsc	242,6,c	;volatile
  3246  0023D0  EFEC  F011         	goto	u3561
  3247  0023D4  EFEF  F011         	goto	u3560
  3248  0023D8                     u3561:
  3249  0023D8  FFFF               	dw	65535	; assembler added errata NOP
  3250  0023DA  EFF1  F011         	goto	l335
  3251  0023DE                     u3560:
  3252  0023DE  FFFF               	dw	65535	; assembler added errata NOP
  3253  0023E0                     
  3254                           ;main.c: 102:         INTCONbits.PEIE = 1;
  3255  0023E0  8CF2               	bsf	242,6,c	;volatile
  3256  0023E2                     l335:
  3257  0023E2  FFFF               	dw	65535	; assembler added errata NOP
  3258                           
  3259                           ;main.c: 106:     RCONbits.IPEN = 1;
  3260  0023E4  8ED0               	bsf	208,7,c	;volatile
  3261                           
  3262                           ;main.c: 107:     INTCONbits.T0IE = 1;
  3263  0023E6  8AF2               	bsf	242,5,c	;volatile
  3264                           
  3265                           ;main.c: 108:     PIE1bits.TMR2IE = 1;
  3266  0023E8  829D               	bsf	157,1,c	;volatile
  3267                           
  3268                           ;main.c: 109:     PIE1bits.RC1IE = 1;
  3269  0023EA  8A9D               	bsf	157,5,c	;volatile
  3270  0023EC  0012               	return		;funcret
  3271  0023EE  FFFF               	dw	65535	; errata NOP
  3272  0023F0                     __end_of_interruptInit:
  3273                           	callstack 0
  3274                           
  3275 ;; *************** function _initPinMotors *****************
  3276 ;; Defined at:
  3277 ;;		line 42 in file "motors.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;		None
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;		None
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      void 
  3284 ;; Registers used:
  3285 ;;		wreg, status,2, status,0
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3291 ;;      Params:         0       0       0       0       0       0       0
  3292 ;;      Locals:         0       0       0       0       0       0       0
  3293 ;;      Temps:          0       0       0       0       0       0       0
  3294 ;;      Totals:         0       0       0       0       0       0       0
  3295 ;;Total ram usage:        0 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:    4
  3298 ;; This function calls:
  3299 ;;		Nothing
  3300 ;; This function is called by:
  3301 ;;		_main
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           	psect	text18
  3306  002478                     __ptext18:
  3307                           	callstack 0
  3308  002478                     _initPinMotors:
  3309                           	callstack 0
  3310  002478  FFFF               	dw	65535	; assembler added errata NOP
  3311  00247A                     
  3312                           ;motors.c: 44:     ADCON1bits.PCFG = 0x06;
  3313  00247A  50C1               	movf	193,w,c	;volatile
  3314  00247C  0BF0               	andlw	-16
  3315  00247E  0906               	iorlw	6
  3316  002480  6EC1               	movwf	193,c	;volatile
  3317  002482                     
  3318                           ;motors.c: 45:     TRISA &= 0b11010001;
  3319  002482  0ED1               	movlw	209
  3320  002484  1692               	andwf	146,f,c	;volatile
  3321  002486                     
  3322                           ;motors.c: 47:     TRISB &= 0b00000010;
  3323  002486  0E02               	movlw	2
  3324  002488  1693               	andwf	147,f,c	;volatile
  3325  00248A                     
  3326                           ;motors.c: 48:     TRISC &= 0b11000000;
  3327  00248A  0EC0               	movlw	192
  3328  00248C  1694               	andwf	148,f,c	;volatile
  3329  00248E                     
  3330                           ;motors.c: 49:     TRISD &= 0b11000000;
  3331  00248E  0EC0               	movlw	192
  3332  002490  1695               	andwf	149,f,c	;volatile
  3333  002492                     
  3334                           ;motors.c: 52:     TRISEbits.TRISE0 = 1;
  3335  002492  8096               	bsf	150,0,c	;volatile
  3336  002494                     
  3337                           ;motors.c: 53:     TRISEbits.TRISE1 = 1;
  3338  002494  8296               	bsf	150,1,c	;volatile
  3339  002496                     
  3340                           ;motors.c: 54:     TRISEbits.TRISE2 = 1;
  3341  002496  8496               	bsf	150,2,c	;volatile
  3342  002498                     
  3343                           ;motors.c: 57:     TRISDbits.TRISD7 = 1;
  3344  002498  8E95               	bsf	149,7,c	;volatile
  3345  00249A  0012               	return		;funcret
  3346  00249C  FFFF               	dw	65535	; errata NOP
  3347  00249E                     __end_of_initPinMotors:
  3348                           	callstack 0
  3349                           
  3350 ;; *************** function _initADC *****************
  3351 ;; Defined at:
  3352 ;;		line 18 in file "adc.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;		None
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;		None
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  1    wreg      void 
  3359 ;; Registers used:
  3360 ;;		wreg, status,2
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3366 ;;      Params:         0       0       0       0       0       0       0
  3367 ;;      Locals:         0       0       0       0       0       0       0
  3368 ;;      Temps:          0       0       0       0       0       0       0
  3369 ;;      Totals:         0       0       0       0       0       0       0
  3370 ;;Total ram usage:        0 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:    4
  3373 ;; This function calls:
  3374 ;;		Nothing
  3375 ;; This function is called by:
  3376 ;;		_main
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           	psect	text19
  3381  00249E                     __ptext19:
  3382                           	callstack 0
  3383  00249E                     _initADC:
  3384                           	callstack 0
  3385  00249E  FFFF               	dw	65535	; assembler added errata NOP
  3386  0024A0                     
  3387                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3388  0024A0  50C2               	movf	194,w,c	;volatile
  3389  0024A2  0B3F               	andlw	-193
  3390  0024A4  0940               	iorlw	64
  3391  0024A6  6EC2               	movwf	194,c	;volatile
  3392  0024A8                     
  3393                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3394  0024A8  8CC1               	bsf	193,6,c	;volatile
  3395                           
  3396                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3397  0024AA  0EC7               	movlw	-57
  3398  0024AC  16C2               	andwf	194,f,c	;volatile
  3399  0024AE                     
  3400                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3401  0024AE  94C2               	bcf	194,2,c	;volatile
  3402  0024B0                     
  3403                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3404  0024B0  90C2               	bcf	194,0,c	;volatile
  3405  0024B2                     
  3406                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3407  0024B2  9EC1               	bcf	193,7,c	;volatile
  3408                           
  3409                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3410  0024B4  50C1               	movf	193,w,c	;volatile
  3411  0024B6  0BF0               	andlw	-16
  3412  0024B8  090E               	iorlw	14
  3413  0024BA  6EC1               	movwf	193,c	;volatile
  3414  0024BC                     
  3415                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3416  0024BC  8C9D               	bsf	157,6,c	;volatile
  3417  0024BE                     
  3418                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3419  0024BE  8C9F               	bsf	159,6,c	;volatile
  3420  0024C0  0012               	return		;funcret
  3421  0024C2  FFFF               	dw	65535	; errata NOP
  3422  0024C4                     __end_of_initADC:
  3423                           	callstack 0
  3424                           
  3425 ;; *************** function _getNewSequence *****************
  3426 ;; Defined at:
  3427 ;;		line 213 in file "usart.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;		None
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;		None
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  2   17[COMRAM] PTR struct .
  3434 ;; Registers used:
  3435 ;;		wreg, status,2, status,0
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3441 ;;      Params:         2       0       0       0       0       0       0
  3442 ;;      Locals:         0       0       0       0       0       0       0
  3443 ;;      Temps:          0       0       0       0       0       0       0
  3444 ;;      Totals:         2       0       0       0       0       0       0
  3445 ;;Total ram usage:        2 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    4
  3448 ;; This function calls:
  3449 ;;		Nothing
  3450 ;; This function is called by:
  3451 ;;		_main
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           	psect	text20
  3456  00252C                     __ptext20:
  3457                           	callstack 0
  3458  00252C                     _getNewSequence:
  3459                           	callstack 0
  3460  00252C  FFFF               	dw	65535	; assembler added errata NOP
  3461  00252E                     
  3462                           ;usart.c: 214:     return(&newSequenceData);
  3463  00252E  0EEF               	movlw	low _newSequenceData
  3464  002530  6E12               	movwf	?_getNewSequence^0,c
  3465  002532  0E00               	movlw	high _newSequenceData
  3466  002534  6E13               	movwf	(?_getNewSequence+1)^0,c
  3467  002536  0012               	return		;funcret
  3468  002538  FFFF               	dw	65535	; errata NOP
  3469  00253A                     __end_of_getNewSequence:
  3470                           	callstack 0
  3471                           
  3472 ;; *************** function _executeData *****************
  3473 ;; Defined at:
  3474 ;;		line 119 in file "main.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;  data            2    1[BANK1 ] PTR struct .
  3479 ;;		 -> dataSequence(20), 
  3480 ;;  errCode         1    0[BANK1 ] unsigned char 
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  1    wreg      unsigned char 
  3483 ;; Registers used:
  3484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3490 ;;      Params:         0       0       0       0       0       0       0
  3491 ;;      Locals:         0       0       3       0       0       0       0
  3492 ;;      Temps:          2       0       0       0       0       0       0
  3493 ;;      Totals:         2       0       3       0       0       0       0
  3494 ;;Total ram usage:        5 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    6
  3497 ;; This function calls:
  3498 ;;		_getData
  3499 ;;		_liftArm
  3500 ;;		_moveToPoint
  3501 ;;		_pickObject
  3502 ;;		_releaseObj
  3503 ;;		_rotateObj
  3504 ;;		_touchObject
  3505 ;;		_touchTherm
  3506 ;; This function is called by:
  3507 ;;		_main
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           	psect	text21
  3512  000D04                     __ptext21:
  3513                           	callstack 0
  3514  000D04                     _executeData:
  3515                           	callstack 0
  3516  000D04  FFFF               	dw	65535	; assembler added errata NOP
  3517  000D06                     
  3518                           ;main.c: 120:     t_sequence *data = getData();
  3519  000D06  EC9D  F012         	call	_getData	;wreg free
  3520  000D0A  C012  F1D7         	movff	?_getData,executeData@data
  3521  000D0E  C013  F1D8         	movff	?_getData+1,executeData@data+1
  3522  000D12                     
  3523                           ;main.c: 126:     switch(data->feederLine){
  3524  000D12  EF35  F007         	goto	l4255
  3525  000D16                     l4227:
  3526  000D16  FFFF               	dw	65535	; assembler added errata NOP
  3527                           
  3528                           ;main.c: 129:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3529  000D18  C04E  F016         	movff	_posVector,moveToPoint@x1
  3530  000D1C  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3531  000D1E  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3532  000D22  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3533  000D24  0E0D               	movlw	low _feeder1Pos
  3534  000D26  6EF6               	movwf	tblptrl,c
  3535  000D28                     	if	1	;There is more than 1 active tblptr byte
  3536  000D28  0E06               	movlw	high _feeder1Pos
  3537  000D2A  6EF7               	movwf	tblptrh,c
  3538  000D2C                     	endif
  3539  000D2C                     	if	0	;There are less than 3 active tblptr bytes
  3540  000D2C                     	endif
  3541  000D2C  0008               	tblrd		*
  3542  000D2E  FFFF               	dw	65535	; errata NOP
  3543  000D30  50F5               	movf	tablat,w,c
  3544  000D32  6E1A               	movwf	moveToPoint@x2^0,c
  3545  000D34  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3546  000D36  0E0E               	movlw	low (_feeder1Pos+1)
  3547  000D38  6EF6               	movwf	tblptrl,c
  3548  000D3A  0E06               	movlw	high (_feeder1Pos+1)
  3549  000D3C  6EF7               	movwf	tblptrh,c
  3550  000D3E                     	if	0	;tblptru may be non-zero
  3551  000D3E                     	endif
  3552  000D3E                     	if	0	;tblptru may be non-zero
  3553  000D3E                     	endif
  3554  000D3E  0008               	tblrd		*
  3555  000D40  FFFF               	dw	65535	; errata NOP
  3556  000D42  50F5               	movf	tablat,w,c
  3557  000D44  6E1C               	movwf	moveToPoint@y2^0,c
  3558  000D46  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3559  000D48  EC21  F005         	call	_moveToPoint	;wreg free
  3560  000D4C  0101               	movlb	1	; () banked
  3561  000D4E  6FD6               	movwf	executeData@errCode& (0+255),b
  3562  000D50                     
  3563                           ; BSR set to: 1
  3564                           ;main.c: 131:             posVector[0] = feeder1Pos[0];
  3565  000D50  0E0D               	movlw	low _feeder1Pos
  3566  000D52  6EF6               	movwf	tblptrl,c
  3567  000D54                     	if	1	;There is more than 1 active tblptr byte
  3568  000D54  0E06               	movlw	high _feeder1Pos
  3569  000D56  6EF7               	movwf	tblptrh,c
  3570  000D58                     	endif
  3571  000D58                     	if	0	;There are less than 3 active tblptr bytes
  3572  000D58                     	endif
  3573  000D58  0008               	tblrd		*
  3574  000D5A  FFFF               	dw	65535	; errata NOP
  3575  000D5C  CFF5 F04E          	movff	tablat,_posVector
  3576  000D60                     
  3577                           ; BSR set to: 1
  3578                           ;main.c: 132:             posVector[1] = feeder1Pos[1];
  3579  000D60  0E0E               	movlw	low (_feeder1Pos+1)
  3580  000D62  6EF6               	movwf	tblptrl,c
  3581  000D64  0E06               	movlw	high (_feeder1Pos+1)
  3582  000D66  6EF7               	movwf	tblptrh,c
  3583  000D68                     	if	0	;tblptru may be non-zero
  3584  000D68                     	endif
  3585  000D68                     	if	0	;tblptru may be non-zero
  3586  000D68                     	endif
  3587  000D68  0008               	tblrd		*
  3588  000D6A  FFFF               	dw	65535	; errata NOP
  3589  000D6C  CFF5 F04F          	movff	tablat,_posVector+1
  3590                           
  3591                           ;main.c: 133:             break;
  3592  000D70  EF58  F007         	goto	l4257
  3593  000D74                     l4233:
  3594  000D74  FFFF               	dw	65535	; assembler added errata NOP
  3595                           
  3596                           ;main.c: 135:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3597  000D76  C04E  F016         	movff	_posVector,moveToPoint@x1
  3598  000D7A  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3599  000D7C  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3600  000D80  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3601  000D82  0E0B               	movlw	low _feeder2Pos
  3602  000D84  6EF6               	movwf	tblptrl,c
  3603  000D86                     	if	1	;There is more than 1 active tblptr byte
  3604  000D86  0E06               	movlw	high _feeder2Pos
  3605  000D88  6EF7               	movwf	tblptrh,c
  3606  000D8A                     	endif
  3607  000D8A                     	if	0	;There are less than 3 active tblptr bytes
  3608  000D8A                     	endif
  3609  000D8A  0008               	tblrd		*
  3610  000D8C  FFFF               	dw	65535	; errata NOP
  3611  000D8E  50F5               	movf	tablat,w,c
  3612  000D90  6E1A               	movwf	moveToPoint@x2^0,c
  3613  000D92  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3614  000D94  0E0C               	movlw	low (_feeder2Pos+1)
  3615  000D96  6EF6               	movwf	tblptrl,c
  3616  000D98  0E06               	movlw	high (_feeder2Pos+1)
  3617  000D9A  6EF7               	movwf	tblptrh,c
  3618  000D9C                     	if	0	;tblptru may be non-zero
  3619  000D9C                     	endif
  3620  000D9C                     	if	0	;tblptru may be non-zero
  3621  000D9C                     	endif
  3622  000D9C  0008               	tblrd		*
  3623  000D9E  FFFF               	dw	65535	; errata NOP
  3624  000DA0  50F5               	movf	tablat,w,c
  3625  000DA2  6E1C               	movwf	moveToPoint@y2^0,c
  3626  000DA4  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3627  000DA6  EC21  F005         	call	_moveToPoint	;wreg free
  3628  000DAA  0101               	movlb	1	; () banked
  3629  000DAC  6FD6               	movwf	executeData@errCode& (0+255),b
  3630  000DAE                     
  3631                           ; BSR set to: 1
  3632                           ;main.c: 136:             posVector[0] = feeder2Pos[0];
  3633  000DAE  0E0B               	movlw	low _feeder2Pos
  3634  000DB0  6EF6               	movwf	tblptrl,c
  3635  000DB2                     	if	1	;There is more than 1 active tblptr byte
  3636  000DB2  0E06               	movlw	high _feeder2Pos
  3637  000DB4  6EF7               	movwf	tblptrh,c
  3638  000DB6                     	endif
  3639  000DB6                     	if	0	;There are less than 3 active tblptr bytes
  3640  000DB6                     	endif
  3641  000DB6  0008               	tblrd		*
  3642  000DB8  FFFF               	dw	65535	; errata NOP
  3643  000DBA  CFF5 F04E          	movff	tablat,_posVector
  3644  000DBE                     
  3645                           ; BSR set to: 1
  3646                           ;main.c: 137:             posVector[1] = feeder2Pos[1];
  3647  000DBE  0E0C               	movlw	low (_feeder2Pos+1)
  3648  000DC0  6EF6               	movwf	tblptrl,c
  3649  000DC2  0E06               	movlw	high (_feeder2Pos+1)
  3650  000DC4  6EF7               	movwf	tblptrh,c
  3651  000DC6                     	if	0	;tblptru may be non-zero
  3652  000DC6                     	endif
  3653  000DC6                     	if	0	;tblptru may be non-zero
  3654  000DC6                     	endif
  3655  000DC6  0008               	tblrd		*
  3656  000DC8  FFFF               	dw	65535	; errata NOP
  3657  000DCA  CFF5 F04F          	movff	tablat,_posVector+1
  3658                           
  3659                           ;main.c: 138:             break;
  3660  000DCE  EF58  F007         	goto	l4257
  3661  000DD2                     l4239:
  3662  000DD2  FFFF               	dw	65535	; assembler added errata NOP
  3663                           
  3664                           ;main.c: 140:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3665  000DD4  C04E  F016         	movff	_posVector,moveToPoint@x1
  3666  000DD8  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3667  000DDA  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3668  000DDE  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3669  000DE0  0E09               	movlw	low _feeder3Pos
  3670  000DE2  6EF6               	movwf	tblptrl,c
  3671  000DE4                     	if	1	;There is more than 1 active tblptr byte
  3672  000DE4  0E06               	movlw	high _feeder3Pos
  3673  000DE6  6EF7               	movwf	tblptrh,c
  3674  000DE8                     	endif
  3675  000DE8                     	if	0	;There are less than 3 active tblptr bytes
  3676  000DE8                     	endif
  3677  000DE8  0008               	tblrd		*
  3678  000DEA  FFFF               	dw	65535	; errata NOP
  3679  000DEC  50F5               	movf	tablat,w,c
  3680  000DEE  6E1A               	movwf	moveToPoint@x2^0,c
  3681  000DF0  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3682  000DF2  0E0A               	movlw	low (_feeder3Pos+1)
  3683  000DF4  6EF6               	movwf	tblptrl,c
  3684  000DF6  0E06               	movlw	high (_feeder3Pos+1)
  3685  000DF8  6EF7               	movwf	tblptrh,c
  3686  000DFA                     	if	0	;tblptru may be non-zero
  3687  000DFA                     	endif
  3688  000DFA                     	if	0	;tblptru may be non-zero
  3689  000DFA                     	endif
  3690  000DFA  0008               	tblrd		*
  3691  000DFC  FFFF               	dw	65535	; errata NOP
  3692  000DFE  50F5               	movf	tablat,w,c
  3693  000E00  6E1C               	movwf	moveToPoint@y2^0,c
  3694  000E02  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3695  000E04  EC21  F005         	call	_moveToPoint	;wreg free
  3696  000E08  0101               	movlb	1	; () banked
  3697  000E0A  6FD6               	movwf	executeData@errCode& (0+255),b
  3698  000E0C                     
  3699                           ; BSR set to: 1
  3700                           ;main.c: 141:             posVector[0] = feeder3Pos[0];
  3701  000E0C  0E09               	movlw	low _feeder3Pos
  3702  000E0E  6EF6               	movwf	tblptrl,c
  3703  000E10                     	if	1	;There is more than 1 active tblptr byte
  3704  000E10  0E06               	movlw	high _feeder3Pos
  3705  000E12  6EF7               	movwf	tblptrh,c
  3706  000E14                     	endif
  3707  000E14                     	if	0	;There are less than 3 active tblptr bytes
  3708  000E14                     	endif
  3709  000E14  0008               	tblrd		*
  3710  000E16  FFFF               	dw	65535	; errata NOP
  3711  000E18  CFF5 F04E          	movff	tablat,_posVector
  3712  000E1C                     
  3713                           ; BSR set to: 1
  3714                           ;main.c: 142:             posVector[1] = feeder3Pos[1];
  3715  000E1C  0E0A               	movlw	low (_feeder3Pos+1)
  3716  000E1E  6EF6               	movwf	tblptrl,c
  3717  000E20  0E06               	movlw	high (_feeder3Pos+1)
  3718  000E22  6EF7               	movwf	tblptrh,c
  3719  000E24                     	if	0	;tblptru may be non-zero
  3720  000E24                     	endif
  3721  000E24                     	if	0	;tblptru may be non-zero
  3722  000E24                     	endif
  3723  000E24  0008               	tblrd		*
  3724  000E26  FFFF               	dw	65535	; errata NOP
  3725  000E28  CFF5 F04F          	movff	tablat,_posVector+1
  3726                           
  3727                           ;main.c: 143:             break;
  3728  000E2C  EF58  F007         	goto	l4257
  3729  000E30                     l4245:
  3730  000E30  FFFF               	dw	65535	; assembler added errata NOP
  3731                           
  3732                           ;main.c: 147:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3733  000E32  C04E  F016         	movff	_posVector,moveToPoint@x1
  3734  000E36  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3735  000E38  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3736  000E3C  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3737  000E3E  C057  F01A         	movff	_newFeeder,moveToPoint@x2
  3738  000E42  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3739  000E44  C058  F01C         	movff	_newFeeder+1,moveToPoint@y2
  3740  000E48  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3741  000E4A  EC21  F005         	call	_moveToPoint	;wreg free
  3742  000E4E  0101               	movlb	1	; () banked
  3743  000E50  6FD6               	movwf	executeData@errCode& (0+255),b
  3744  000E52                     
  3745                           ; BSR set to: 1
  3746                           ;main.c: 148:             posVector[0] = newFeeder[0];
  3747  000E52  C057  F04E         	movff	_newFeeder,_posVector
  3748  000E56                     
  3749                           ; BSR set to: 1
  3750                           ;main.c: 149:             posVector[1] = newFeeder[1];
  3751  000E56  C058  F04F         	movff	_newFeeder+1,_posVector+1
  3752                           
  3753                           ;main.c: 150:             break;
  3754  000E5A  EF58  F007         	goto	l4257
  3755  000E5E                     l4251:
  3756  000E5E  FFFF               	dw	65535	; assembler added errata NOP
  3757                           
  3758                           ;main.c: 154:             errCode = 1;
  3759  000E60  0E01               	movlw	1
  3760  000E62  0101               	movlb	1	; () banked
  3761  000E64  6FD6               	movwf	executeData@errCode& (0+255),b
  3762                           
  3763                           ;main.c: 155:             break;
  3764  000E66  EF58  F007         	goto	l4257
  3765  000E6A                     l4255:
  3766  000E6A  FFFF               	dw	65535	; assembler added errata NOP
  3767  000E6C  C1D7  FFD9         	movff	executeData@data,fsr2l
  3768  000E70  C1D8  FFDA         	movff	executeData@data+1,fsr2h
  3769  000E74  50DF               	movf	indf2,w,c
  3770  000E76  6E43               	movwf	??_executeData^0,c
  3771  000E78  6A44               	clrf	(??_executeData+1)^0,c
  3772                           
  3773                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3774                           ; Switch size 1, requested type "simple"
  3775                           ; Number of cases is 1, Range of values is 0 to 0
  3776                           ; switch strategies available:
  3777                           ; Name         Instructions Cycles
  3778                           ; simple_byte            4     3 (average)
  3779                           ;	Chosen strategy is simple_byte
  3780  000E7A  5044               	movf	(??_executeData+1)^0,w,c
  3781  000E7C  0A00               	xorlw	0	; case 0
  3782  000E7E  B4D8               	btfsc	status,2,c
  3783  000E80  EF44  F007         	goto	l4609
  3784  000E84  EF2F  F007         	goto	l4251
  3785  000E88                     l4609:
  3786  000E88  FFFF               	dw	65535	; assembler added errata NOP
  3787                           
  3788                           ; Switch size 1, requested type "simple"
  3789                           ; Number of cases is 4, Range of values is 0 to 255
  3790                           ; switch strategies available:
  3791                           ; Name         Instructions Cycles
  3792                           ; simple_byte           13     7 (average)
  3793                           ;	Chosen strategy is simple_byte
  3794  000E8A  5043               	movf	??_executeData^0,w,c
  3795  000E8C  0A00               	xorlw	0	; case 0
  3796  000E8E  B4D8               	btfsc	status,2,c
  3797  000E90  EF8B  F006         	goto	l4227
  3798  000E94  0A01               	xorlw	1	; case 1
  3799  000E96  B4D8               	btfsc	status,2,c
  3800  000E98  EFBA  F006         	goto	l4233
  3801  000E9C  0A03               	xorlw	3	; case 2
  3802  000E9E  B4D8               	btfsc	status,2,c
  3803  000EA0  EFE9  F006         	goto	l4239
  3804  000EA4  0AFD               	xorlw	253	; case 255
  3805  000EA6  B4D8               	btfsc	status,2,c
  3806  000EA8  EF18  F007         	goto	l4245
  3807  000EAC  EF2F  F007         	goto	l4251
  3808  000EB0                     l4257:
  3809  000EB0  FFFF               	dw	65535	; assembler added errata NOP
  3810                           
  3811                           ; BSR set to: 1
  3812                           ;main.c: 159:     if(!errCode){
  3813  000EB2  51D6               	movf	executeData@errCode& (0+255),w,b
  3814  000EB4  A4D8               	btfss	status,2,c
  3815  000EB6  EF5F  F007         	goto	u3581
  3816  000EBA  EF62  F007         	goto	u3580
  3817  000EBE                     u3581:
  3818  000EBE  FFFF               	dw	65535	; assembler added errata NOP
  3819  000EC0  EFC5  F007         	goto	l4279
  3820  000EC4                     u3580:
  3821  000EC4  FFFF               	dw	65535	; assembler added errata NOP
  3822  000EC6                     
  3823                           ; BSR set to: 1
  3824                           ;main.c: 162:         errCode = touchObject();
  3825  000EC6  ECEF  F00D         	call	_touchObject	;wreg free
  3826  000ECA  0101               	movlb	1	; () banked
  3827  000ECC  6FD6               	movwf	executeData@errCode& (0+255),b
  3828                           
  3829                           ;main.c: 164:         pickObject();
  3830  000ECE  EC26  F012         	call	_pickObject	;wreg free
  3831                           
  3832                           ;main.c: 167:         errCode = liftArm();
  3833  000ED2  ECAC  F00F         	call	_liftArm	;wreg free
  3834  000ED6  0101               	movlb	1	; () banked
  3835  000ED8  6FD6               	movwf	executeData@errCode& (0+255),b
  3836  000EDA                     
  3837                           ; BSR set to: 1
  3838  000EDA  C04E  F016         	movff	_posVector,moveToPoint@x1
  3839  000EDE  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3840  000EE0  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3841  000EE4  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3842  000EE6  EE20 F001          	lfsr	2,1
  3843  000EEA  51D7               	movf	executeData@data& (0+255),w,b
  3844  000EEC  26D9               	addwf	fsr2l,f,c
  3845  000EEE  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3846  000EF0  22DA               	addwfc	fsr2h,f,c
  3847  000EF2  50DF               	movf	indf2,w,c
  3848  000EF4  6E43               	movwf	??_executeData^0,c
  3849  000EF6  5043               	movf	??_executeData^0,w,c
  3850  000EF8  6E1A               	movwf	moveToPoint@x2^0,c
  3851  000EFA  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3852  000EFC  EE20 F002          	lfsr	2,2
  3853  000F00  51D7               	movf	executeData@data& (0+255),w,b
  3854  000F02  26D9               	addwf	fsr2l,f,c
  3855  000F04  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3856  000F06  22DA               	addwfc	fsr2h,f,c
  3857  000F08  50DF               	movf	indf2,w,c
  3858  000F0A  6E44               	movwf	(??_executeData+1)^0,c
  3859  000F0C  5044               	movf	(??_executeData+1)^0,w,c
  3860  000F0E  6E1C               	movwf	moveToPoint@y2^0,c
  3861  000F10  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3862  000F12  EC21  F005         	call	_moveToPoint	;wreg free
  3863  000F16                     
  3864                           ;main.c: 171:         posVector[0] = data->posX;
  3865  000F16  0101               	movlb	1	; () banked
  3866  000F18  EE20 F001          	lfsr	2,1
  3867  000F1C  51D7               	movf	executeData@data& (0+255),w,b
  3868  000F1E  26D9               	addwf	fsr2l,f,c
  3869  000F20  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3870  000F22  22DA               	addwfc	fsr2h,f,c
  3871  000F24  50DF               	movf	indf2,w,c
  3872  000F26  6E4E               	movwf	_posVector^0,c
  3873  000F28                     
  3874                           ; BSR set to: 1
  3875                           ;main.c: 172:         posVector[1] = data->posY;
  3876  000F28  EE20 F002          	lfsr	2,2
  3877  000F2C  51D7               	movf	executeData@data& (0+255),w,b
  3878  000F2E  26D9               	addwf	fsr2l,f,c
  3879  000F30  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3880  000F32  22DA               	addwfc	fsr2h,f,c
  3881  000F34  50DF               	movf	indf2,w,c
  3882  000F36  6E4F               	movwf	(_posVector+1)^0,c
  3883  000F38                     
  3884                           ; BSR set to: 1
  3885                           ;main.c: 175:         rotAngle = data->rotation - rotAngle;
  3886  000F38  EE20 F003          	lfsr	2,3
  3887  000F3C  51D7               	movf	executeData@data& (0+255),w,b
  3888  000F3E  26D9               	addwf	fsr2l,f,c
  3889  000F40  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3890  000F42  22DA               	addwfc	fsr2h,f,c
  3891  000F44  50DF               	movf	indf2,w,c
  3892  000F46  6E43               	movwf	??_executeData^0,c
  3893  000F48  5059               	movf	_rotAngle^0,w,c
  3894  000F4A  5C43               	subwf	??_executeData^0,w,c
  3895  000F4C  6E59               	movwf	_rotAngle^0,c
  3896  000F4E  505A               	movf	(_rotAngle+1)^0,w,c
  3897  000F50  A0D8               	btfss	status,0,c
  3898  000F52  285A               	incf	(_rotAngle+1)^0,w,c
  3899  000F54  6A5A               	clrf	(_rotAngle+1)^0,c
  3900  000F56  5E5A               	subwf	(_rotAngle+1)^0,f,c
  3901                           
  3902                           ;main.c: 177:         if(rotAngle < 0){
  3903  000F58  BE5A               	btfsc	(_rotAngle+1)^0,7,c
  3904  000F5A  EFB4  F007         	goto	u3590
  3905  000F5E  EFB1  F007         	goto	u3591
  3906  000F62                     u3591:
  3907  000F62  FFFF               	dw	65535	; assembler added errata NOP
  3908  000F64  EFB9  F007         	goto	l4271
  3909  000F68                     u3590:
  3910  000F68  FFFF               	dw	65535	; assembler added errata NOP
  3911  000F6A                     
  3912                           ; BSR set to: 1
  3913                           ;main.c: 178:             rotAngle += 360;
  3914  000F6A  0E68               	movlw	104
  3915  000F6C  2659               	addwf	_rotAngle^0,f,c
  3916  000F6E  0E01               	movlw	1
  3917  000F70  225A               	addwfc	(_rotAngle+1)^0,f,c
  3918  000F72                     l4271:
  3919  000F72  FFFF               	dw	65535	; assembler added errata NOP
  3920                           
  3921                           ; BSR set to: 1
  3922                           ;main.c: 180:         rotateObj(rotAngle);
  3923  000F74  5059               	movf	_rotAngle^0,w,c
  3924  000F76  EC68  F00E         	call	_rotateObj
  3925  000F7A  EC76  F00D         	call	_touchTherm	;wreg free
  3926  000F7E                     
  3927                           ;main.c: 185:         releaseObj();
  3928  000F7E  EC10  F012         	call	_releaseObj	;wreg free
  3929  000F82                     
  3930                           ;main.c: 188:         errCode = liftArm();
  3931  000F82  ECAC  F00F         	call	_liftArm	;wreg free
  3932  000F86  0101               	movlb	1	; () banked
  3933  000F88  6FD6               	movwf	executeData@errCode& (0+255),b
  3934  000F8A                     l4279:
  3935  000F8A  FFFF               	dw	65535	; assembler added errata NOP
  3936                           
  3937                           ; BSR set to: 1
  3938                           ;main.c: 191:     return(errCode);
  3939  000F8C  51D6               	movf	executeData@errCode& (0+255),w,b
  3940  000F8E                     
  3941                           ; BSR set to: 1
  3942  000F8E  0012               	return		;funcret
  3943  000F90  FFFF               	dw	65535	; errata NOP
  3944  000F92                     __end_of_executeData:
  3945                           	callstack 0
  3946                           
  3947 ;; *************** function _touchTherm *****************
  3948 ;; Defined at:
  3949 ;;		line 455 in file "motors.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;		None
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;		None
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  1    wreg      unsigned char 
  3956 ;; Registers used:
  3957 ;;		wreg, status,2, status,0, cstack
  3958 ;; Tracked objects:
  3959 ;;		On entry : 0/0
  3960 ;;		On exit  : 0/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3963 ;;      Params:         0       0       0       0       0       0       0
  3964 ;;      Locals:         0       0       0       0       0       0       0
  3965 ;;      Temps:          0       0       0       0       0       0       0
  3966 ;;      Totals:         0       0       0       0       0       0       0
  3967 ;;Total ram usage:        0 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; Hardware stack levels required when called:    5
  3970 ;; This function calls:
  3971 ;;		_resetStep
  3972 ;;		_resetTherm
  3973 ;;		_returnTherm
  3974 ;;		_setDirection
  3975 ;;		_startADC
  3976 ;;		_stepMade
  3977 ;;		_stopADC
  3978 ;; This function is called by:
  3979 ;;		_executeData
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           	psect	text22
  3984  001AEC                     __ptext22:
  3985                           	callstack 0
  3986  001AEC                     _touchTherm:
  3987                           	callstack 0
  3988  001AEC  FFFF               	dw	65535	; assembler added errata NOP
  3989  001AEE                     
  3990                           ;motors.c: 458:     setDirection(1, 2);
  3991  001AEE  0E02               	movlw	2
  3992  001AF0  6E12               	movwf	setDirection@motor^0,c
  3993  001AF2  0E01               	movlw	1
  3994  001AF4  ECBB  F010         	call	_setDirection
  3995  001AF8                     
  3996                           ;motors.c: 460:     T2CONbits.TMR2ON = 1;
  3997  001AF8  84CA               	bsf	202,2,c	;volatile
  3998  001AFA                     
  3999                           ;motors.c: 462:     tm0Error = 0;
  4000  001AFA  0E00               	movlw	0
  4001  001AFC  6E5C               	movwf	(_tm0Error+1)^0,c
  4002  001AFE  0E00               	movlw	0
  4003  001B00  6E5B               	movwf	_tm0Error^0,c
  4004  001B02                     
  4005                           ;motors.c: 463:     tm0Limit = 100;
  4006  001B02  0E64               	movlw	100
  4007  001B04  6E68               	movwf	_tm0Limit^0,c
  4008  001B06                     
  4009                           ;motors.c: 464:     T0CONbits.TMR0ON = 1;
  4010  001B06  8ED5               	bsf	213,7,c	;volatile
  4011  001B08                     
  4012                           ;motors.c: 467:     startADC();
  4013  001B08  ECD5  F012         	call	_startADC	;wreg free
  4014                           
  4015                           ;motors.c: 470:     while(!returnTherm() || PORTDbits.RD7){
  4016  001B0C  EFB9  F00D         	goto	l3947
  4017  001B10                     l3937:
  4018  001B10  FFFF               	dw	65535	; assembler added errata NOP
  4019                           
  4020                           ;motors.c: 473:         if(tm0Error){
  4021  001B12  505B               	movf	_tm0Error^0,w,c
  4022  001B14  105C               	iorwf	(_tm0Error+1)^0,w,c
  4023  001B16  B4D8               	btfsc	status,2,c
  4024  001B18  EF90  F00D         	goto	u3291
  4025  001B1C  EF93  F00D         	goto	u3290
  4026  001B20                     u3291:
  4027  001B20  FFFF               	dw	65535	; assembler added errata NOP
  4028  001B22  EF9B  F00D         	goto	l190
  4029  001B26                     u3290:
  4030  001B26  FFFF               	dw	65535	; assembler added errata NOP
  4031  001B28                     
  4032                           ;motors.c: 475:             LATCbits.LATC2 = 0;
  4033  001B28  948B               	bcf	139,2,c	;volatile
  4034  001B2A                     
  4035                           ;motors.c: 476:             tm0Error = 6;
  4036  001B2A  0E00               	movlw	0
  4037  001B2C  6E5C               	movwf	(_tm0Error+1)^0,c
  4038  001B2E  0E06               	movlw	6
  4039  001B30  6E5B               	movwf	_tm0Error^0,c
  4040                           
  4041                           ;motors.c: 477:             break;
  4042  001B32  EFCF  F00D         	goto	l3951
  4043  001B36                     l190:
  4044  001B36  FFFF               	dw	65535	; assembler added errata NOP
  4045                           
  4046                           ;motors.c: 481:         LATCbits.LATC2 = 1;
  4047  001B38  848B               	bsf	139,2,c	;volatile
  4048  001B3A                     l3943:
  4049  001B3A  FFFF               	dw	65535	; assembler added errata NOP
  4050  001B3C  EC7B  F012         	call	_stepMade	;wreg free
  4051  001B40  5012               	movf	?_stepMade^0,w,c
  4052  001B42  1013               	iorwf	(?_stepMade+1)^0,w,c
  4053  001B44  B4D8               	btfsc	status,2,c
  4054  001B46  EFA7  F00D         	goto	u3301
  4055  001B4A  EFAA  F00D         	goto	u3300
  4056  001B4E                     u3301:
  4057  001B4E  FFFF               	dw	65535	; assembler added errata NOP
  4058  001B50  EF9D  F00D         	goto	l3943
  4059  001B54                     u3300:
  4060  001B54  FFFF               	dw	65535	; assembler added errata NOP
  4061  001B56                     
  4062                           ;motors.c: 487:         LATCbits.LATC2 = 0;
  4063  001B56  948B               	bcf	139,2,c	;volatile
  4064  001B58                     l3945:
  4065  001B58  FFFF               	dw	65535	; assembler added errata NOP
  4066  001B5A  EC7B  F012         	call	_stepMade	;wreg free
  4067  001B5E  5012               	movf	?_stepMade^0,w,c
  4068  001B60  1013               	iorwf	(?_stepMade+1)^0,w,c
  4069  001B62  B4D8               	btfsc	status,2,c
  4070  001B64  EFB6  F00D         	goto	u3311
  4071  001B68  EFB9  F00D         	goto	u3310
  4072  001B6C                     u3311:
  4073  001B6C  FFFF               	dw	65535	; assembler added errata NOP
  4074  001B6E  EFAC  F00D         	goto	l3945
  4075  001B72                     u3310:
  4076  001B72                     l3947:
  4077  001B72  FFFF               	dw	65535	; assembler added errata NOP
  4078                           
  4079                           ;motors.c: 470:     while(!returnTherm() || PORTDbits.RD7){
  4080  001B74  ECB9  F012         	call	_returnTherm	;wreg free
  4081  001B78  5012               	movf	?_returnTherm^0,w,c
  4082  001B7A  1013               	iorwf	(?_returnTherm+1)^0,w,c
  4083  001B7C  B4D8               	btfsc	status,2,c
  4084  001B7E  EFC3  F00D         	goto	u3321
  4085  001B82  EFC6  F00D         	goto	u3320
  4086  001B86                     u3321:
  4087  001B86  FFFF               	dw	65535	; assembler added errata NOP
  4088  001B88  EF88  F00D         	goto	l3937
  4089  001B8C                     u3320:
  4090  001B8C  FFFF               	dw	65535	; assembler added errata NOP
  4091  001B8E  BE83               	btfsc	131,7,c	;volatile
  4092  001B90  EFCC  F00D         	goto	u3331
  4093  001B94  EFCF  F00D         	goto	u3330
  4094  001B98                     u3331:
  4095  001B98  FFFF               	dw	65535	; assembler added errata NOP
  4096  001B9A  EF88  F00D         	goto	l3937
  4097  001B9E                     u3330:
  4098  001B9E                     l3951:
  4099  001B9E  FFFF               	dw	65535	; assembler added errata NOP
  4100                           
  4101                           ;motors.c: 494:     stopADC();
  4102  001BA0  ECFF  F012         	call	_stopADC	;wreg free
  4103  001BA4                     
  4104                           ;motors.c: 497:     resetTherm();
  4105  001BA4  ECD0  F012         	call	_resetTherm	;wreg free
  4106  001BA8                     
  4107                           ;motors.c: 500:     T0CONbits.TMR0ON = 0;
  4108  001BA8  9ED5               	bcf	213,7,c	;volatile
  4109  001BAA                     
  4110                           ;motors.c: 501:     T2CONbits.TMR2ON = 0;
  4111  001BAA  94CA               	bcf	202,2,c	;volatile
  4112                           
  4113                           ;motors.c: 503:     TMR0 = 0;
  4114  001BAC  0E00               	movlw	0
  4115  001BAE  6ED7               	movwf	215,c	;volatile
  4116  001BB0  0E00               	movlw	0
  4117  001BB2  6ED6               	movwf	214,c	;volatile
  4118                           
  4119                           ;motors.c: 504:     TMR2 = 0;
  4120  001BB4  0E00               	movlw	0
  4121  001BB6  6ECC               	movwf	204,c	;volatile
  4122  001BB8                     
  4123                           ;motors.c: 507:     resetStep();
  4124  001BB8  ECDF  F012         	call	_resetStep	;wreg free
  4125  001BBC                     
  4126                           ;motors.c: 510:     if(PORTDbits.RD7){
  4127  001BBC  AE83               	btfss	131,7,c	;volatile
  4128  001BBE  EFE3  F00D         	goto	u3341
  4129  001BC2  EFE6  F00D         	goto	u3340
  4130  001BC6                     u3341:
  4131  001BC6  FFFF               	dw	65535	; assembler added errata NOP
  4132  001BC8  EFEB  F00D         	goto	l198
  4133  001BCC                     u3340:
  4134  001BCC  FFFF               	dw	65535	; assembler added errata NOP
  4135  001BCE                     
  4136                           ;motors.c: 511:         tm0Error = 2;
  4137  001BCE  0E00               	movlw	0
  4138  001BD0  6E5C               	movwf	(_tm0Error+1)^0,c
  4139  001BD2  0E02               	movlw	2
  4140  001BD4  6E5B               	movwf	_tm0Error^0,c
  4141  001BD6                     l198:
  4142  001BD6  FFFF               	dw	65535	; assembler added errata NOP
  4143                           
  4144                           ;motors.c: 514:     return(tm0Error);
  4145  001BD8  505B               	movf	_tm0Error^0,w,c
  4146  001BDA  0012               	return		;funcret
  4147  001BDC  FFFF               	dw	65535	; errata NOP
  4148  001BDE                     __end_of_touchTherm:
  4149                           	callstack 0
  4150                           
  4151 ;; *************** function _returnTherm *****************
  4152 ;; Defined at:
  4153 ;;		line 58 in file "adc.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;		None
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;		None
  4158 ;; Return value:  Size  Location     Type
  4159 ;;                  2   17[COMRAM] unsigned int 
  4160 ;; Registers used:
  4161 ;;		None
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4167 ;;      Params:         2       0       0       0       0       0       0
  4168 ;;      Locals:         0       0       0       0       0       0       0
  4169 ;;      Temps:          0       0       0       0       0       0       0
  4170 ;;      Totals:         2       0       0       0       0       0       0
  4171 ;;Total ram usage:        2 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    4
  4174 ;; This function calls:
  4175 ;;		Nothing
  4176 ;; This function is called by:
  4177 ;;		_touchTherm
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           	psect	text23
  4182  002572                     __ptext23:
  4183                           	callstack 0
  4184  002572                     _returnTherm:
  4185                           	callstack 0
  4186  002572  FFFF               	dw	65535	; assembler added errata NOP
  4187  002574                     
  4188                           ;adc.c: 59:     return therm_rel;
  4189  002574  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4190  002578  6A13               	clrf	(?_returnTherm+1)^0,c
  4191  00257A  0012               	return		;funcret
  4192  00257C  FFFF               	dw	65535	; errata NOP
  4193  00257E                     __end_of_returnTherm:
  4194                           	callstack 0
  4195                           
  4196 ;; *************** function _resetTherm *****************
  4197 ;; Defined at:
  4198 ;;		line 72 in file "adc.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;		None
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;		None
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  1    wreg      void 
  4205 ;; Registers used:
  4206 ;;		wreg, status,2
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4212 ;;      Params:         0       0       0       0       0       0       0
  4213 ;;      Locals:         0       0       0       0       0       0       0
  4214 ;;      Temps:          0       0       0       0       0       0       0
  4215 ;;      Totals:         0       0       0       0       0       0       0
  4216 ;;Total ram usage:        0 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; Hardware stack levels required when called:    4
  4219 ;; This function calls:
  4220 ;;		Nothing
  4221 ;; This function is called by:
  4222 ;;		_touchTherm
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226                           	psect	text24
  4227  0025A0                     __ptext24:
  4228                           	callstack 0
  4229  0025A0                     _resetTherm:
  4230                           	callstack 0
  4231  0025A0  FFFF               	dw	65535	; assembler added errata NOP
  4232  0025A2                     
  4233                           ;adc.c: 73:     therm_rel = 0;
  4234  0025A2  0E00               	movlw	0
  4235  0025A4  6E64               	movwf	_therm_rel^0,c	;volatile
  4236  0025A6  0012               	return		;funcret
  4237  0025A8  FFFF               	dw	65535	; errata NOP
  4238  0025AA                     __end_of_resetTherm:
  4239                           	callstack 0
  4240                           
  4241 ;; *************** function _touchObject *****************
  4242 ;; Defined at:
  4243 ;;		line 384 in file "motors.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;		None
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;		None
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  1    wreg      unsigned char 
  4250 ;; Registers used:
  4251 ;;		wreg, status,2, status,0, cstack
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4257 ;;      Params:         0       0       0       0       0       0       0
  4258 ;;      Locals:         0       0       0       0       0       0       0
  4259 ;;      Temps:          0       0       0       0       0       0       0
  4260 ;;      Totals:         0       0       0       0       0       0       0
  4261 ;;Total ram usage:        0 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    5
  4264 ;; This function calls:
  4265 ;;		_resetStep
  4266 ;;		_resetTouch
  4267 ;;		_returnTouch
  4268 ;;		_setDirection
  4269 ;;		_startADC
  4270 ;;		_stepMade
  4271 ;;		_stopADC
  4272 ;; This function is called by:
  4273 ;;		_executeData
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           	psect	text25
  4278  001BDE                     __ptext25:
  4279                           	callstack 0
  4280  001BDE                     _touchObject:
  4281                           	callstack 0
  4282  001BDE  FFFF               	dw	65535	; assembler added errata NOP
  4283  001BE0                     
  4284                           ;motors.c: 387:     setDirection(1, 2);
  4285  001BE0  0E02               	movlw	2
  4286  001BE2  6E12               	movwf	setDirection@motor^0,c
  4287  001BE4  0E01               	movlw	1
  4288  001BE6  ECBB  F010         	call	_setDirection
  4289  001BEA                     
  4290                           ;motors.c: 389:     T2CONbits.TMR2ON = 1;
  4291  001BEA  84CA               	bsf	202,2,c	;volatile
  4292  001BEC                     
  4293                           ;motors.c: 391:     tm0Error = 0;
  4294  001BEC  0E00               	movlw	0
  4295  001BEE  6E5C               	movwf	(_tm0Error+1)^0,c
  4296  001BF0  0E00               	movlw	0
  4297  001BF2  6E5B               	movwf	_tm0Error^0,c
  4298  001BF4                     
  4299                           ;motors.c: 392:     tm0Limit = 100;
  4300  001BF4  0E64               	movlw	100
  4301  001BF6  6E68               	movwf	_tm0Limit^0,c
  4302  001BF8                     
  4303                           ;motors.c: 393:     T0CONbits.TMR0ON = 1;
  4304  001BF8  8ED5               	bsf	213,7,c	;volatile
  4305  001BFA                     
  4306                           ;motors.c: 396:     startADC();
  4307  001BFA  ECD5  F012         	call	_startADC	;wreg free
  4308                           
  4309                           ;motors.c: 399:     while(!returnTouch() || PORTDbits.RD7){
  4310  001BFE  EF32  F00E         	goto	l3905
  4311  001C02                     l3895:
  4312  001C02  FFFF               	dw	65535	; assembler added errata NOP
  4313                           
  4314                           ;motors.c: 402:         if(tm0Error){
  4315  001C04  505B               	movf	_tm0Error^0,w,c
  4316  001C06  105C               	iorwf	(_tm0Error+1)^0,w,c
  4317  001C08  B4D8               	btfsc	status,2,c
  4318  001C0A  EF09  F00E         	goto	u3231
  4319  001C0E  EF0C  F00E         	goto	u3230
  4320  001C12                     u3231:
  4321  001C12  FFFF               	dw	65535	; assembler added errata NOP
  4322  001C14  EF14  F00E         	goto	l176
  4323  001C18                     u3230:
  4324  001C18  FFFF               	dw	65535	; assembler added errata NOP
  4325  001C1A                     
  4326                           ;motors.c: 404:             LATCbits.LATC2 = 0;
  4327  001C1A  948B               	bcf	139,2,c	;volatile
  4328  001C1C                     
  4329                           ;motors.c: 405:             tm0Error = 6;
  4330  001C1C  0E00               	movlw	0
  4331  001C1E  6E5C               	movwf	(_tm0Error+1)^0,c
  4332  001C20  0E06               	movlw	6
  4333  001C22  6E5B               	movwf	_tm0Error^0,c
  4334                           
  4335                           ;motors.c: 406:             break;
  4336  001C24  EF48  F00E         	goto	l3909
  4337  001C28                     l176:
  4338  001C28  FFFF               	dw	65535	; assembler added errata NOP
  4339                           
  4340                           ;motors.c: 410:         LATCbits.LATC2 = 1;
  4341  001C2A  848B               	bsf	139,2,c	;volatile
  4342  001C2C                     l3901:
  4343  001C2C  FFFF               	dw	65535	; assembler added errata NOP
  4344  001C2E  EC7B  F012         	call	_stepMade	;wreg free
  4345  001C32  5012               	movf	?_stepMade^0,w,c
  4346  001C34  1013               	iorwf	(?_stepMade+1)^0,w,c
  4347  001C36  B4D8               	btfsc	status,2,c
  4348  001C38  EF20  F00E         	goto	u3241
  4349  001C3C  EF23  F00E         	goto	u3240
  4350  001C40                     u3241:
  4351  001C40  FFFF               	dw	65535	; assembler added errata NOP
  4352  001C42  EF16  F00E         	goto	l3901
  4353  001C46                     u3240:
  4354  001C46  FFFF               	dw	65535	; assembler added errata NOP
  4355  001C48                     
  4356                           ;motors.c: 416:         LATCbits.LATC2 = 0;
  4357  001C48  948B               	bcf	139,2,c	;volatile
  4358  001C4A                     l3903:
  4359  001C4A  FFFF               	dw	65535	; assembler added errata NOP
  4360  001C4C  EC7B  F012         	call	_stepMade	;wreg free
  4361  001C50  5012               	movf	?_stepMade^0,w,c
  4362  001C52  1013               	iorwf	(?_stepMade+1)^0,w,c
  4363  001C54  B4D8               	btfsc	status,2,c
  4364  001C56  EF2F  F00E         	goto	u3251
  4365  001C5A  EF32  F00E         	goto	u3250
  4366  001C5E                     u3251:
  4367  001C5E  FFFF               	dw	65535	; assembler added errata NOP
  4368  001C60  EF25  F00E         	goto	l3903
  4369  001C64                     u3250:
  4370  001C64                     l3905:
  4371  001C64  FFFF               	dw	65535	; assembler added errata NOP
  4372                           
  4373                           ;motors.c: 399:     while(!returnTouch() || PORTDbits.RD7){
  4374  001C66  ECBF  F012         	call	_returnTouch	;wreg free
  4375  001C6A  5012               	movf	?_returnTouch^0,w,c
  4376  001C6C  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4377  001C6E  B4D8               	btfsc	status,2,c
  4378  001C70  EF3C  F00E         	goto	u3261
  4379  001C74  EF3F  F00E         	goto	u3260
  4380  001C78                     u3261:
  4381  001C78  FFFF               	dw	65535	; assembler added errata NOP
  4382  001C7A  EF01  F00E         	goto	l3895
  4383  001C7E                     u3260:
  4384  001C7E  FFFF               	dw	65535	; assembler added errata NOP
  4385  001C80  BE83               	btfsc	131,7,c	;volatile
  4386  001C82  EF45  F00E         	goto	u3271
  4387  001C86  EF48  F00E         	goto	u3270
  4388  001C8A                     u3271:
  4389  001C8A  FFFF               	dw	65535	; assembler added errata NOP
  4390  001C8C  EF01  F00E         	goto	l3895
  4391  001C90                     u3270:
  4392  001C90                     l3909:
  4393  001C90  FFFF               	dw	65535	; assembler added errata NOP
  4394                           
  4395                           ;motors.c: 423:     stopADC();
  4396  001C92  ECFF  F012         	call	_stopADC	;wreg free
  4397  001C96                     
  4398                           ;motors.c: 426:     resetTouch();
  4399  001C96  ECDA  F012         	call	_resetTouch	;wreg free
  4400  001C9A                     
  4401                           ;motors.c: 429:     T0CONbits.TMR0ON = 0;
  4402  001C9A  9ED5               	bcf	213,7,c	;volatile
  4403  001C9C                     
  4404                           ;motors.c: 430:     T2CONbits.TMR2ON = 0;
  4405  001C9C  94CA               	bcf	202,2,c	;volatile
  4406                           
  4407                           ;motors.c: 432:     TMR0 = 0;
  4408  001C9E  0E00               	movlw	0
  4409  001CA0  6ED7               	movwf	215,c	;volatile
  4410  001CA2  0E00               	movlw	0
  4411  001CA4  6ED6               	movwf	214,c	;volatile
  4412                           
  4413                           ;motors.c: 433:     TMR2 = 0;
  4414  001CA6  0E00               	movlw	0
  4415  001CA8  6ECC               	movwf	204,c	;volatile
  4416  001CAA                     
  4417                           ;motors.c: 436:     resetStep();
  4418  001CAA  ECDF  F012         	call	_resetStep	;wreg free
  4419  001CAE                     
  4420                           ;motors.c: 439:     if(PORTDbits.RD7){
  4421  001CAE  AE83               	btfss	131,7,c	;volatile
  4422  001CB0  EF5C  F00E         	goto	u3281
  4423  001CB4  EF5F  F00E         	goto	u3280
  4424  001CB8                     u3281:
  4425  001CB8  FFFF               	dw	65535	; assembler added errata NOP
  4426  001CBA  EF64  F00E         	goto	l184
  4427  001CBE                     u3280:
  4428  001CBE  FFFF               	dw	65535	; assembler added errata NOP
  4429  001CC0                     
  4430                           ;motors.c: 440:         tm0Error = 2;
  4431  001CC0  0E00               	movlw	0
  4432  001CC2  6E5C               	movwf	(_tm0Error+1)^0,c
  4433  001CC4  0E02               	movlw	2
  4434  001CC6  6E5B               	movwf	_tm0Error^0,c
  4435  001CC8                     l184:
  4436  001CC8  FFFF               	dw	65535	; assembler added errata NOP
  4437                           
  4438                           ;motors.c: 443:     return(tm0Error);
  4439  001CCA  505B               	movf	_tm0Error^0,w,c
  4440  001CCC  0012               	return		;funcret
  4441  001CCE  FFFF               	dw	65535	; errata NOP
  4442  001CD0                     __end_of_touchObject:
  4443                           	callstack 0
  4444                           
  4445 ;; *************** function _stopADC *****************
  4446 ;; Defined at:
  4447 ;;		line 44 in file "adc.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;		None
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;		None
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  1    wreg      void 
  4454 ;; Registers used:
  4455 ;;		None
  4456 ;; Tracked objects:
  4457 ;;		On entry : 0/0
  4458 ;;		On exit  : 0/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4461 ;;      Params:         0       0       0       0       0       0       0
  4462 ;;      Locals:         0       0       0       0       0       0       0
  4463 ;;      Temps:          0       0       0       0       0       0       0
  4464 ;;      Totals:         0       0       0       0       0       0       0
  4465 ;;Total ram usage:        0 bytes
  4466 ;; Hardware stack levels used:    1
  4467 ;; Hardware stack levels required when called:    4
  4468 ;; This function calls:
  4469 ;;		Nothing
  4470 ;; This function is called by:
  4471 ;;		_touchObject
  4472 ;;		_touchTherm
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           	psect	text26
  4477  0025FE                     __ptext26:
  4478                           	callstack 0
  4479  0025FE                     _stopADC:
  4480                           	callstack 0
  4481  0025FE  FFFF               	dw	65535	; assembler added errata NOP
  4482  002600                     
  4483                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4484  002600  90C2               	bcf	194,0,c	;volatile
  4485  002602  0012               	return		;funcret
  4486  002604  FFFF               	dw	65535	; errata NOP
  4487  002606                     __end_of_stopADC:
  4488                           	callstack 0
  4489                           
  4490 ;; *************** function _startADC *****************
  4491 ;; Defined at:
  4492 ;;		line 36 in file "adc.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;		None
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;		None
  4497 ;; Return value:  Size  Location     Type
  4498 ;;                  1    wreg      void 
  4499 ;; Registers used:
  4500 ;;		None
  4501 ;; Tracked objects:
  4502 ;;		On entry : 0/0
  4503 ;;		On exit  : 0/0
  4504 ;;		Unchanged: 0/0
  4505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4506 ;;      Params:         0       0       0       0       0       0       0
  4507 ;;      Locals:         0       0       0       0       0       0       0
  4508 ;;      Temps:          0       0       0       0       0       0       0
  4509 ;;      Totals:         0       0       0       0       0       0       0
  4510 ;;Total ram usage:        0 bytes
  4511 ;; Hardware stack levels used:    1
  4512 ;; Hardware stack levels required when called:    4
  4513 ;; This function calls:
  4514 ;;		Nothing
  4515 ;; This function is called by:
  4516 ;;		_touchObject
  4517 ;;		_touchTherm
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           	psect	text27
  4522  0025AA                     __ptext27:
  4523                           	callstack 0
  4524  0025AA                     _startADC:
  4525                           	callstack 0
  4526  0025AA  FFFF               	dw	65535	; assembler added errata NOP
  4527  0025AC                     
  4528                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4529  0025AC  80C2               	bsf	194,0,c	;volatile
  4530                           
  4531                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4532  0025AE  84C2               	bsf	194,2,c	;volatile
  4533  0025B0  0012               	return		;funcret
  4534  0025B2  FFFF               	dw	65535	; errata NOP
  4535  0025B4                     __end_of_startADC:
  4536                           	callstack 0
  4537                           
  4538 ;; *************** function _returnTouch *****************
  4539 ;; Defined at:
  4540 ;;		line 51 in file "adc.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;		None
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;		None
  4545 ;; Return value:  Size  Location     Type
  4546 ;;                  2   17[COMRAM] unsigned int 
  4547 ;; Registers used:
  4548 ;;		None
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4554 ;;      Params:         2       0       0       0       0       0       0
  4555 ;;      Locals:         0       0       0       0       0       0       0
  4556 ;;      Temps:          0       0       0       0       0       0       0
  4557 ;;      Totals:         2       0       0       0       0       0       0
  4558 ;;Total ram usage:        2 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; Hardware stack levels required when called:    4
  4561 ;; This function calls:
  4562 ;;		Nothing
  4563 ;; This function is called by:
  4564 ;;		_touchObject
  4565 ;; This function uses a non-reentrant model
  4566 ;;
  4567                           
  4568                           	psect	text28
  4569  00257E                     __ptext28:
  4570                           	callstack 0
  4571  00257E                     _returnTouch:
  4572                           	callstack 0
  4573  00257E  FFFF               	dw	65535	; assembler added errata NOP
  4574  002580                     
  4575                           ;adc.c: 52:     return touch_rel;
  4576  002580  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4577  002584  6A13               	clrf	(?_returnTouch+1)^0,c
  4578  002586  0012               	return		;funcret
  4579  002588  FFFF               	dw	65535	; errata NOP
  4580  00258A                     __end_of_returnTouch:
  4581                           	callstack 0
  4582                           
  4583 ;; *************** function _resetTouch *****************
  4584 ;; Defined at:
  4585 ;;		line 65 in file "adc.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;		None
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;		None
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  1    wreg      void 
  4592 ;; Registers used:
  4593 ;;		wreg, status,2
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4599 ;;      Params:         0       0       0       0       0       0       0
  4600 ;;      Locals:         0       0       0       0       0       0       0
  4601 ;;      Temps:          0       0       0       0       0       0       0
  4602 ;;      Totals:         0       0       0       0       0       0       0
  4603 ;;Total ram usage:        0 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    4
  4606 ;; This function calls:
  4607 ;;		Nothing
  4608 ;; This function is called by:
  4609 ;;		_touchObject
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text29
  4614  0025B4                     __ptext29:
  4615                           	callstack 0
  4616  0025B4                     _resetTouch:
  4617                           	callstack 0
  4618  0025B4  FFFF               	dw	65535	; assembler added errata NOP
  4619  0025B6                     
  4620                           ;adc.c: 66:     touch_rel = 0;
  4621  0025B6  0E00               	movlw	0
  4622  0025B8  6E65               	movwf	_touch_rel^0,c	;volatile
  4623  0025BA  0012               	return		;funcret
  4624  0025BC  FFFF               	dw	65535	; errata NOP
  4625  0025BE                     __end_of_resetTouch:
  4626                           	callstack 0
  4627                           
  4628 ;; *************** function _rotateObj *****************
  4629 ;; Defined at:
  4630 ;;		line 575 in file "motors.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;  rotAngle        1    wreg     unsigned char 
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;  rotAngle        1    3[BANK0 ] unsigned char 
  4635 ;;  i               2    6[BANK0 ] unsigned int 
  4636 ;;  totStep         2    4[BANK0 ] int 
  4637 ;; Return value:  Size  Location     Type
  4638 ;;                  1    wreg      void 
  4639 ;; Registers used:
  4640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4641 ;; Tracked objects:
  4642 ;;		On entry : 0/0
  4643 ;;		On exit  : 0/0
  4644 ;;		Unchanged: 0/0
  4645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4646 ;;      Params:         0       0       0       0       0       0       0
  4647 ;;      Locals:         0       5       0       0       0       0       0
  4648 ;;      Temps:          0       3       0       0       0       0       0
  4649 ;;      Totals:         0       8       0       0       0       0       0
  4650 ;;Total ram usage:        8 bytes
  4651 ;; Hardware stack levels used:    1
  4652 ;; Hardware stack levels required when called:    5
  4653 ;; This function calls:
  4654 ;;		___fldiv
  4655 ;;		___fltol
  4656 ;;		___xxtofl
  4657 ;;		_stepMade
  4658 ;; This function is called by:
  4659 ;;		_executeData
  4660 ;; This function uses a non-reentrant model
  4661 ;;
  4662                           
  4663                           	psect	text30
  4664  001CD0                     __ptext30:
  4665                           	callstack 0
  4666  001CD0                     _rotateObj:
  4667                           	callstack 0
  4668  001CD0  FFFF               	dw	65535	; assembler added errata NOP
  4669                           
  4670                           ;incstack = 0
  4671                           ;rotateObj@rotAngle stored from wreg
  4672  001CD2  0100               	movlb	0	; () banked
  4673  001CD4  6FFA               	movwf	rotateObj@rotAngle& (0+255),b
  4674  001CD6                     
  4675                           ;motors.c: 576:     static const float stepAngle = 0.08789;;motors.c: 577:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 578:     unsigned int i;;
      +                          motors.c: 579:     int totStep = rotAngle/stepAngle;
  4676  001CD6  0EAC               	movlw	172
  4677  001CD8  6E24               	movwf	___fldiv@a^0,c
  4678  001CDA  0EFF               	movlw	255
  4679  001CDC  6E25               	movwf	(___fldiv@a+1)^0,c
  4680  001CDE  0EB3               	movlw	179
  4681  001CE0  6E26               	movwf	(___fldiv@a+2)^0,c
  4682  001CE2  0E3D               	movlw	61
  4683  001CE4  6E27               	movwf	(___fldiv@a+3)^0,c
  4684  001CE6  0100               	movlb	0	; () banked
  4685  001CE8  51FA               	movf	rotateObj@rotAngle& (0+255),w,b
  4686  001CEA  6E12               	movwf	___xxtofl@val^0,c
  4687  001CEC  6A13               	clrf	(___xxtofl@val+1)^0,c
  4688  001CEE  6A14               	clrf	(___xxtofl@val+2)^0,c
  4689  001CF0  6A15               	clrf	(___xxtofl@val+3)^0,c
  4690  001CF2  0E01               	movlw	1
  4691  001CF4  ECC9  F007         	call	___xxtofl
  4692  001CF8  C012  F020         	movff	?___xxtofl,___fldiv@b
  4693  001CFC  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4694  001D00  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4695  001D04  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4696  001D08  EC08  F003         	call	___fldiv	;wreg free
  4697  001D0C  C020  F039         	movff	?___fldiv,___fltol@f1
  4698  001D10  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4699  001D14  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4700  001D18  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4701  001D1C  ECBF  F00B         	call	___fltol	;wreg free
  4702  001D20  C039  F0FB         	movff	?___fltol,rotateObj@totStep
  4703  001D24  C03A  F0FC         	movff	?___fltol+1,rotateObj@totStep+1
  4704  001D28                     
  4705                           ;motors.c: 582:     for(i = 0; i < totStep; i++){
  4706  001D28  0E00               	movlw	0
  4707  001D2A  0100               	movlb	0	; () banked
  4708  001D2C  6FFE               	movwf	(rotateObj@i+1)& (0+255),b
  4709  001D2E  0E00               	movlw	0
  4710  001D30  6FFD               	movwf	rotateObj@i& (0+255),b
  4711  001D32  EFC6  F00E         	goto	l4011
  4712  001D36                     l3999:
  4713  001D36  FFFF               	dw	65535	; assembler added errata NOP
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;motors.c: 584:         LATD &= 0xC3;
  4717  001D38  0EC3               	movlw	195
  4718  001D3A  168C               	andwf	140,f,c	;volatile
  4719  001D3C                     
  4720                           ; BSR set to: 0
  4721                           ;motors.c: 586:         LATD |= rotSequence[i%4] << 2;
  4722  001D3C  0E03               	movlw	3
  4723  001D3E  15FD               	andwf	rotateObj@i& (0+255),w,b
  4724  001D40  6FF7               	movwf	??_rotateObj& (0+255),b
  4725  001D42  0E00               	movlw	0
  4726  001D44  15FE               	andwf	(rotateObj@i+1)& (0+255),w,b
  4727  001D46  6FF8               	movwf	(??_rotateObj+1)& (0+255),b
  4728  001D48  0E80               	movlw	low rotateObj@rotSequence
  4729  001D4A  25F7               	addwf	??_rotateObj& (0+255),w,b
  4730  001D4C  6ED9               	movwf	fsr2l,c
  4731  001D4E  0E00               	movlw	high rotateObj@rotSequence
  4732  001D50  21F8               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4733  001D52  6EDA               	movwf	fsr2h,c
  4734  001D54  50DF               	movf	indf2,w,c
  4735  001D56  6FF9               	movwf	(??_rotateObj+2)& (0+255),b
  4736  001D58  90D8               	bcf	status,0,c
  4737  001D5A  37F9               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4738  001D5C  90D8               	bcf	status,0,c
  4739  001D5E  35F9               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4740  001D60  128C               	iorwf	140,f,c	;volatile
  4741  001D62                     
  4742                           ; BSR set to: 0
  4743                           ;motors.c: 590:         T2CONbits.TMR2ON = 1;
  4744  001D62  84CA               	bsf	202,2,c	;volatile
  4745  001D64                     l4005:
  4746  001D64  FFFF               	dw	65535	; assembler added errata NOP
  4747  001D66  EC7B  F012         	call	_stepMade	;wreg free
  4748  001D6A  5012               	movf	?_stepMade^0,w,c
  4749  001D6C  1013               	iorwf	(?_stepMade+1)^0,w,c
  4750  001D6E  B4D8               	btfsc	status,2,c
  4751  001D70  EFBC  F00E         	goto	u3391
  4752  001D74  EFBF  F00E         	goto	u3390
  4753  001D78                     u3391:
  4754  001D78  FFFF               	dw	65535	; assembler added errata NOP
  4755  001D7A  EFB2  F00E         	goto	l4005
  4756  001D7E                     u3390:
  4757  001D7E  FFFF               	dw	65535	; assembler added errata NOP
  4758  001D80                     
  4759                           ;motors.c: 592:         T2CONbits.TMR2ON = 1;
  4760  001D80  84CA               	bsf	202,2,c	;volatile
  4761  001D82                     
  4762                           ;motors.c: 593:         TMR2 = 0;
  4763  001D82  0E00               	movlw	0
  4764  001D84  6ECC               	movwf	204,c	;volatile
  4765  001D86                     
  4766                           ;motors.c: 594:     }
  4767  001D86  0100               	movlb	0	; () banked
  4768  001D88  4BFD               	infsnz	rotateObj@i& (0+255),f,b
  4769  001D8A  2BFE               	incf	(rotateObj@i+1)& (0+255),f,b
  4770  001D8C                     l4011:
  4771  001D8C  FFFF               	dw	65535	; assembler added errata NOP
  4772                           
  4773                           ; BSR set to: 0
  4774  001D8E  51FB               	movf	rotateObj@totStep& (0+255),w,b
  4775  001D90  5DFD               	subwf	rotateObj@i& (0+255),w,b
  4776  001D92  51FC               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4777  001D94  59FE               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4778  001D96  A0D8               	btfss	status,0,c
  4779  001D98  EFD0  F00E         	goto	u3401
  4780  001D9C  EFD3  F00E         	goto	u3400
  4781  001DA0                     u3401:
  4782  001DA0  FFFF               	dw	65535	; assembler added errata NOP
  4783  001DA2  EF9B  F00E         	goto	l3999
  4784  001DA6                     u3400:
  4785  001DA6  FFFF               	dw	65535	; assembler added errata NOP
  4786  001DA8                     
  4787                           ; BSR set to: 0
  4788  001DA8  0012               	return		;funcret
  4789  001DAA  FFFF               	dw	65535	; errata NOP
  4790  001DAC                     __end_of_rotateObj:
  4791                           	callstack 0
  4792                           
  4793 ;; *************** function ___xxtofl *****************
  4794 ;; Defined at:
  4795 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;  sign            1    wreg     unsigned char 
  4798 ;;  val             4   17[COMRAM] long 
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;  sign            1   25[COMRAM] unsigned char 
  4801 ;;  arg             4   27[COMRAM] unsigned long 
  4802 ;;  exp             1   26[COMRAM] unsigned char 
  4803 ;; Return value:  Size  Location     Type
  4804 ;;                  4   17[COMRAM] unsigned char 
  4805 ;; Registers used:
  4806 ;;		wreg, status,2, status,0
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/0
  4809 ;;		On exit  : 0/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4812 ;;      Params:         4       0       0       0       0       0       0
  4813 ;;      Locals:         6       0       0       0       0       0       0
  4814 ;;      Temps:          4       0       0       0       0       0       0
  4815 ;;      Totals:        14       0       0       0       0       0       0
  4816 ;;Total ram usage:       14 bytes
  4817 ;; Hardware stack levels used:    1
  4818 ;; Hardware stack levels required when called:    4
  4819 ;; This function calls:
  4820 ;;		Nothing
  4821 ;; This function is called by:
  4822 ;;		_rotateObj
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           	psect	text31
  4827  000F92                     __ptext31:
  4828                           	callstack 0
  4829  000F92                     ___xxtofl:
  4830                           	callstack 0
  4831  000F92  FFFF               	dw	65535	; assembler added errata NOP
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;incstack = 0
  4835                           ;___xxtofl@sign stored from wreg
  4836  000F94  6E1A               	movwf	___xxtofl@sign^0,c
  4837  000F96  501A               	movf	___xxtofl@sign^0,w,c
  4838  000F98  B4D8               	btfsc	status,2,c
  4839  000F9A  EFD1  F007         	goto	u2901
  4840  000F9E  EFD4  F007         	goto	u2900
  4841  000FA2                     u2901:
  4842  000FA2  FFFF               	dw	65535	; assembler added errata NOP
  4843  000FA4  EFF9  F007         	goto	l1261
  4844  000FA8                     u2900:
  4845  000FA8  FFFF               	dw	65535	; assembler added errata NOP
  4846  000FAA  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4847  000FAC  EFDD  F007         	goto	u2910
  4848  000FB0  EFDA  F007         	goto	u2911
  4849  000FB4                     u2911:
  4850  000FB4  FFFF               	dw	65535	; assembler added errata NOP
  4851  000FB6  EFF9  F007         	goto	l1261
  4852  000FBA                     u2910:
  4853  000FBA  FFFF               	dw	65535	; assembler added errata NOP
  4854  000FBC  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4855  000FC0  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4856  000FC4  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4857  000FC8  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4858  000FCC  1E16               	comf	??___xxtofl^0,f,c
  4859  000FCE  1E17               	comf	(??___xxtofl+1)^0,f,c
  4860  000FD0  1E18               	comf	(??___xxtofl+2)^0,f,c
  4861  000FD2  1E19               	comf	(??___xxtofl+3)^0,f,c
  4862  000FD4  2A16               	incf	??___xxtofl^0,f,c
  4863  000FD6  0E00               	movlw	0
  4864  000FD8  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4865  000FDA  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4866  000FDC  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4867  000FDE  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4868  000FE2  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4869  000FE6  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4870  000FEA  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4871  000FEE  EF02  F008         	goto	l3709
  4872  000FF2                     l1261:
  4873  000FF2  FFFF               	dw	65535	; assembler added errata NOP
  4874  000FF4  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4875  000FF8  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4876  000FFC  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4877  001000  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4878  001004                     l3709:
  4879  001004  FFFF               	dw	65535	; assembler added errata NOP
  4880  001006  5012               	movf	___xxtofl@val^0,w,c
  4881  001008  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4882  00100A  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4883  00100C  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4884  00100E  A4D8               	btfss	status,2,c
  4885  001010  EF0C  F008         	goto	u2921
  4886  001014  EF0F  F008         	goto	u2920
  4887  001018                     u2921:
  4888  001018  FFFF               	dw	65535	; assembler added errata NOP
  4889  00101A  EF1A  F008         	goto	l3715
  4890  00101E                     u2920:
  4891  00101E  FFFF               	dw	65535	; assembler added errata NOP
  4892  001020  0E00               	movlw	0
  4893  001022  6E12               	movwf	?___xxtofl^0,c
  4894  001024  0E00               	movlw	0
  4895  001026  6E13               	movwf	(?___xxtofl+1)^0,c
  4896  001028  0E00               	movlw	0
  4897  00102A  6E14               	movwf	(?___xxtofl+2)^0,c
  4898  00102C  0E00               	movlw	0
  4899  00102E  6E15               	movwf	(?___xxtofl+3)^0,c
  4900  001030  EFC2  F008         	goto	l1264
  4901  001034                     l3715:
  4902  001034  FFFF               	dw	65535	; assembler added errata NOP
  4903  001036  0E96               	movlw	150
  4904  001038  6E1B               	movwf	___xxtofl@exp^0,c
  4905  00103A  EF26  F008         	goto	l3719
  4906  00103E                     l3717:
  4907  00103E  FFFF               	dw	65535	; assembler added errata NOP
  4908  001040  2A1B               	incf	___xxtofl@exp^0,f,c
  4909  001042  90D8               	bcf	status,0,c
  4910  001044  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4911  001046  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4912  001048  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4913  00104A  321C               	rrcf	___xxtofl@arg^0,f,c
  4914  00104C                     l3719:
  4915  00104C  FFFF               	dw	65535	; assembler added errata NOP
  4916  00104E  0E00               	movlw	0
  4917  001050  141C               	andwf	___xxtofl@arg^0,w,c
  4918  001052  6E16               	movwf	??___xxtofl^0,c
  4919  001054  0E00               	movlw	0
  4920  001056  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4921  001058  6E17               	movwf	(??___xxtofl+1)^0,c
  4922  00105A  0E00               	movlw	0
  4923  00105C  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4924  00105E  6E18               	movwf	(??___xxtofl+2)^0,c
  4925  001060  0EFE               	movlw	254
  4926  001062  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4927  001064  6E19               	movwf	(??___xxtofl+3)^0,c
  4928  001066  5016               	movf	??___xxtofl^0,w,c
  4929  001068  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4930  00106A  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4931  00106C  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4932  00106E  A4D8               	btfss	status,2,c
  4933  001070  EF3C  F008         	goto	u2931
  4934  001074  EF3F  F008         	goto	u2930
  4935  001078                     u2931:
  4936  001078  FFFF               	dw	65535	; assembler added errata NOP
  4937  00107A  EF1F  F008         	goto	l3717
  4938  00107E                     u2930:
  4939  00107E  FFFF               	dw	65535	; assembler added errata NOP
  4940  001080  EF4F  F008         	goto	l1268
  4941  001084                     l3721:
  4942  001084  FFFF               	dw	65535	; assembler added errata NOP
  4943  001086  2A1B               	incf	___xxtofl@exp^0,f,c
  4944  001088  0E01               	movlw	1
  4945  00108A  261C               	addwf	___xxtofl@arg^0,f,c
  4946  00108C  0E00               	movlw	0
  4947  00108E  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4948  001090  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4949  001092  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4950  001094  90D8               	bcf	status,0,c
  4951  001096  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4952  001098  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4953  00109A  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4954  00109C  321C               	rrcf	___xxtofl@arg^0,f,c
  4955  00109E                     l1268:
  4956  00109E  FFFF               	dw	65535	; assembler added errata NOP
  4957  0010A0  0E00               	movlw	0
  4958  0010A2  141C               	andwf	___xxtofl@arg^0,w,c
  4959  0010A4  6E16               	movwf	??___xxtofl^0,c
  4960  0010A6  0E00               	movlw	0
  4961  0010A8  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4962  0010AA  6E17               	movwf	(??___xxtofl+1)^0,c
  4963  0010AC  0E00               	movlw	0
  4964  0010AE  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4965  0010B0  6E18               	movwf	(??___xxtofl+2)^0,c
  4966  0010B2  0EFF               	movlw	255
  4967  0010B4  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4968  0010B6  6E19               	movwf	(??___xxtofl+3)^0,c
  4969  0010B8  5016               	movf	??___xxtofl^0,w,c
  4970  0010BA  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4971  0010BC  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4972  0010BE  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4973  0010C0  A4D8               	btfss	status,2,c
  4974  0010C2  EF65  F008         	goto	u2941
  4975  0010C6  EF68  F008         	goto	u2940
  4976  0010CA                     u2941:
  4977  0010CA  FFFF               	dw	65535	; assembler added errata NOP
  4978  0010CC  EF42  F008         	goto	l3721
  4979  0010D0                     u2940:
  4980  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  4981  0010D2  EF72  F008         	goto	l3729
  4982  0010D6                     l3727:
  4983  0010D6  FFFF               	dw	65535	; assembler added errata NOP
  4984  0010D8  061B               	decf	___xxtofl@exp^0,f,c
  4985  0010DA  90D8               	bcf	status,0,c
  4986  0010DC  361C               	rlcf	___xxtofl@arg^0,f,c
  4987  0010DE  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4988  0010E0  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4989  0010E2  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4990  0010E4                     l3729:
  4991  0010E4  FFFF               	dw	65535	; assembler added errata NOP
  4992  0010E6  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4993  0010E8  EF78  F008         	goto	u2951
  4994  0010EC  EF7B  F008         	goto	u2950
  4995  0010F0                     u2951:
  4996  0010F0  FFFF               	dw	65535	; assembler added errata NOP
  4997  0010F2  EF85  F008         	goto	l1275
  4998  0010F6                     u2950:
  4999  0010F6  FFFF               	dw	65535	; assembler added errata NOP
  5000  0010F8  0E02               	movlw	2
  5001  0010FA  601B               	cpfslt	___xxtofl@exp^0,c
  5002  0010FC  EF82  F008         	goto	u2961
  5003  001100  EF85  F008         	goto	u2960
  5004  001104                     u2961:
  5005  001104  FFFF               	dw	65535	; assembler added errata NOP
  5006  001106  EF6B  F008         	goto	l3727
  5007  00110A                     u2960:
  5008  00110A                     l1275:
  5009  00110A  FFFF               	dw	65535	; assembler added errata NOP
  5010  00110C  B01B               	btfsc	___xxtofl@exp^0,0,c
  5011  00110E  EF8B  F008         	goto	u2971
  5012  001112  EF8E  F008         	goto	u2970
  5013  001116                     u2971:
  5014  001116  FFFF               	dw	65535	; assembler added errata NOP
  5015  001118  EF90  F008         	goto	l3735
  5016  00111C                     u2970:
  5017  00111C  FFFF               	dw	65535	; assembler added errata NOP
  5018  00111E  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  5019  001120                     l3735:
  5020  001120  FFFF               	dw	65535	; assembler added errata NOP
  5021  001122  90D8               	bcf	status,0,c
  5022  001124  321B               	rrcf	___xxtofl@exp^0,f,c
  5023  001126  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  5024  00112A  6A17               	clrf	(??___xxtofl+1)^0,c
  5025  00112C  6A18               	clrf	(??___xxtofl+2)^0,c
  5026  00112E  6A19               	clrf	(??___xxtofl+3)^0,c
  5027  001130  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  5028  001134  6A18               	clrf	(??___xxtofl+2)^0,c
  5029  001136  6A17               	clrf	(??___xxtofl+1)^0,c
  5030  001138  6A16               	clrf	??___xxtofl^0,c
  5031  00113A  5016               	movf	??___xxtofl^0,w,c
  5032  00113C  121C               	iorwf	___xxtofl@arg^0,f,c
  5033  00113E  5017               	movf	(??___xxtofl+1)^0,w,c
  5034  001140  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  5035  001142  5018               	movf	(??___xxtofl+2)^0,w,c
  5036  001144  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  5037  001146  5019               	movf	(??___xxtofl+3)^0,w,c
  5038  001148  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  5039  00114A  501A               	movf	___xxtofl@sign^0,w,c
  5040  00114C  B4D8               	btfsc	status,2,c
  5041  00114E  EFAB  F008         	goto	u2981
  5042  001152  EFAE  F008         	goto	u2980
  5043  001156                     u2981:
  5044  001156  FFFF               	dw	65535	; assembler added errata NOP
  5045  001158  EFB9  F008         	goto	l3745
  5046  00115C                     u2980:
  5047  00115C  FFFF               	dw	65535	; assembler added errata NOP
  5048  00115E  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  5049  001160  EFB7  F008         	goto	u2990
  5050  001164  EFB4  F008         	goto	u2991
  5051  001168                     u2991:
  5052  001168  FFFF               	dw	65535	; assembler added errata NOP
  5053  00116A  EFB9  F008         	goto	l3745
  5054  00116E                     u2990:
  5055  00116E  FFFF               	dw	65535	; assembler added errata NOP
  5056  001170  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  5057  001172                     l3745:
  5058  001172  FFFF               	dw	65535	; assembler added errata NOP
  5059  001174  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  5060  001178  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  5061  00117C  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  5062  001180  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5063  001184                     l1264:
  5064  001184  FFFF               	dw	65535	; assembler added errata NOP
  5065  001186  0012               	return		;funcret
  5066  001188  FFFF               	dw	65535	; errata NOP
  5067  00118A                     __end_of___xxtofl:
  5068                           	callstack 0
  5069                           
  5070 ;; *************** function ___fltol *****************
  5071 ;; Defined at:
  5072 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;  f1              4   56[COMRAM] unsigned char 
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;  exp1            1   65[COMRAM] unsigned char 
  5077 ;;  sign1           1   64[COMRAM] unsigned char 
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  4   56[COMRAM] long 
  5080 ;; Registers used:
  5081 ;;		wreg, status,2, status,0
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5087 ;;      Params:         4       0       0       0       0       0       0
  5088 ;;      Locals:         2       0       0       0       0       0       0
  5089 ;;      Temps:          4       0       0       0       0       0       0
  5090 ;;      Totals:        10       0       0       0       0       0       0
  5091 ;;Total ram usage:       10 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    4
  5094 ;; This function calls:
  5095 ;;		Nothing
  5096 ;; This function is called by:
  5097 ;;		_rotateObj
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           	psect	text32
  5102  00177E                     __ptext32:
  5103                           	callstack 0
  5104  00177E                     ___fltol:
  5105                           	callstack 0
  5106  00177E  FFFF               	dw	65535	; assembler added errata NOP
  5107  001780  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5108  001782  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5109  001784  6E42               	movwf	___fltol@exp1^0,c
  5110  001786  5042               	movf	___fltol@exp1^0,w,c
  5111  001788  A4D8               	btfss	status,2,c
  5112  00178A  EFC9  F00B         	goto	u2831
  5113  00178E  EFCC  F00B         	goto	u2830
  5114  001792                     u2831:
  5115  001792  FFFF               	dw	65535	; assembler added errata NOP
  5116  001794  EFD8  F00B         	goto	l3665
  5117  001798                     u2830:
  5118  001798  FFFF               	dw	65535	; assembler added errata NOP
  5119  00179A                     l3661:
  5120  00179A  FFFF               	dw	65535	; assembler added errata NOP
  5121  00179C  0E00               	movlw	0
  5122  00179E  6E39               	movwf	?___fltol^0,c
  5123  0017A0  0E00               	movlw	0
  5124  0017A2  6E3A               	movwf	(?___fltol+1)^0,c
  5125  0017A4  0E00               	movlw	0
  5126  0017A6  6E3B               	movwf	(?___fltol+2)^0,c
  5127  0017A8  0E00               	movlw	0
  5128  0017AA  6E3C               	movwf	(?___fltol+3)^0,c
  5129  0017AC  EF57  F00C         	goto	l903
  5130  0017B0                     l3665:
  5131  0017B0  FFFF               	dw	65535	; assembler added errata NOP
  5132  0017B2  C039  F03D         	movff	___fltol@f1,??___fltol
  5133  0017B6  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5134  0017BA  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5135  0017BE  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5136  0017C2  0E20               	movlw	32
  5137  0017C4  EFEA  F00B         	goto	u2840
  5138  0017C8                     u2845:
  5139  0017C8  FFFF               	dw	65535	; assembler added errata NOP
  5140  0017CA  90D8               	bcf	status,0,c
  5141  0017CC  3240               	rrcf	(??___fltol+3)^0,f,c
  5142  0017CE  323F               	rrcf	(??___fltol+2)^0,f,c
  5143  0017D0  323E               	rrcf	(??___fltol+1)^0,f,c
  5144  0017D2  323D               	rrcf	??___fltol^0,f,c
  5145  0017D4                     u2840:
  5146  0017D4  FFFF               	dw	65535	; assembler added errata NOP
  5147  0017D6  2EE8               	decfsz	wreg,f,c
  5148  0017D8  EFE4  F00B         	goto	u2845
  5149  0017DC  503D               	movf	??___fltol^0,w,c
  5150  0017DE  6E41               	movwf	___fltol@sign1^0,c
  5151  0017E0  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5152  0017E2  0EFF               	movlw	255
  5153  0017E4  1639               	andwf	___fltol@f1^0,f,c
  5154  0017E6  0EFF               	movlw	255
  5155  0017E8  163A               	andwf	(___fltol@f1+1)^0,f,c
  5156  0017EA  0EFF               	movlw	255
  5157  0017EC  163B               	andwf	(___fltol@f1+2)^0,f,c
  5158  0017EE  0E00               	movlw	0
  5159  0017F0  163C               	andwf	(___fltol@f1+3)^0,f,c
  5160  0017F2  0E96               	movlw	150
  5161  0017F4  5E42               	subwf	___fltol@exp1^0,f,c
  5162  0017F6  BE42               	btfsc	___fltol@exp1^0,7,c
  5163  0017F8  EF03  F00C         	goto	u2850
  5164  0017FC  EF00  F00C         	goto	u2851
  5165  001800                     u2851:
  5166  001800  FFFF               	dw	65535	; assembler added errata NOP
  5167  001802  EF1D  F00C         	goto	l3685
  5168  001806                     u2850:
  5169  001806  FFFF               	dw	65535	; assembler added errata NOP
  5170  001808  5042               	movf	___fltol@exp1^0,w,c
  5171  00180A  0A80               	xorlw	128
  5172  00180C  0F97               	addlw	151
  5173  00180E  B0D8               	btfsc	status,0,c
  5174  001810  EF0C  F00C         	goto	u2861
  5175  001814  EF0F  F00C         	goto	u2860
  5176  001818                     u2861:
  5177  001818  FFFF               	dw	65535	; assembler added errata NOP
  5178  00181A  EF12  F00C         	goto	l3681
  5179  00181E                     u2860:
  5180  00181E  FFFF               	dw	65535	; assembler added errata NOP
  5181  001820  EFCD  F00B         	goto	l3661
  5182  001824                     l3681:
  5183  001824  FFFF               	dw	65535	; assembler added errata NOP
  5184  001826  90D8               	bcf	status,0,c
  5185  001828  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5186  00182A  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5187  00182C  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5188  00182E  3239               	rrcf	___fltol@f1^0,f,c
  5189  001830  3E42               	incfsz	___fltol@exp1^0,f,c
  5190  001832  EF12  F00C         	goto	l3681
  5191  001836  EF3B  F00C         	goto	l3695
  5192  00183A                     l3685:
  5193  00183A  FFFF               	dw	65535	; assembler added errata NOP
  5194  00183C  0E1F               	movlw	31
  5195  00183E  6442               	cpfsgt	___fltol@exp1^0,c
  5196  001840  EF24  F00C         	goto	u2871
  5197  001844  EF27  F00C         	goto	u2870
  5198  001848                     u2871:
  5199  001848  FFFF               	dw	65535	; assembler added errata NOP
  5200  00184A  EF31  F00C         	goto	l3693
  5201  00184E                     u2870:
  5202  00184E  FFFF               	dw	65535	; assembler added errata NOP
  5203  001850  EFCD  F00B         	goto	l3661
  5204  001854                     l3691:
  5205  001854  FFFF               	dw	65535	; assembler added errata NOP
  5206  001856  90D8               	bcf	status,0,c
  5207  001858  3639               	rlcf	___fltol@f1^0,f,c
  5208  00185A  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5209  00185C  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5210  00185E  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5211  001860  0642               	decf	___fltol@exp1^0,f,c
  5212  001862                     l3693:
  5213  001862  FFFF               	dw	65535	; assembler added errata NOP
  5214  001864  5042               	movf	___fltol@exp1^0,w,c
  5215  001866  A4D8               	btfss	status,2,c
  5216  001868  EF38  F00C         	goto	u2881
  5217  00186C  EF3B  F00C         	goto	u2880
  5218  001870                     u2881:
  5219  001870  FFFF               	dw	65535	; assembler added errata NOP
  5220  001872  EF2A  F00C         	goto	l3691
  5221  001876                     u2880:
  5222  001876                     l3695:
  5223  001876  FFFF               	dw	65535	; assembler added errata NOP
  5224  001878  5041               	movf	___fltol@sign1^0,w,c
  5225  00187A  B4D8               	btfsc	status,2,c
  5226  00187C  EF42  F00C         	goto	u2891
  5227  001880  EF45  F00C         	goto	u2890
  5228  001884                     u2891:
  5229  001884  FFFF               	dw	65535	; assembler added errata NOP
  5230  001886  EF4E  F00C         	goto	l3699
  5231  00188A                     u2890:
  5232  00188A  FFFF               	dw	65535	; assembler added errata NOP
  5233  00188C  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5234  00188E  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5235  001890  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5236  001892  6C39               	negf	___fltol@f1^0,c
  5237  001894  0E00               	movlw	0
  5238  001896  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5239  001898  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5240  00189A  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5241  00189C                     l3699:
  5242  00189C  FFFF               	dw	65535	; assembler added errata NOP
  5243  00189E  C039  F039         	movff	___fltol@f1,?___fltol
  5244  0018A2  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5245  0018A6  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5246  0018AA  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5247  0018AE                     l903:
  5248  0018AE  FFFF               	dw	65535	; assembler added errata NOP
  5249  0018B0  0012               	return		;funcret
  5250  0018B2  FFFF               	dw	65535	; errata NOP
  5251  0018B4                     __end_of___fltol:
  5252                           	callstack 0
  5253                           
  5254 ;; *************** function ___fldiv *****************
  5255 ;; Defined at:
  5256 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;  b               4   31[COMRAM] long 
  5259 ;;  a               4   35[COMRAM] long 
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;  grs             4   50[COMRAM] unsigned long 
  5262 ;;  rem             4   43[COMRAM] unsigned long 
  5263 ;;  new_exp         2   48[COMRAM] short 
  5264 ;;  aexp            1   55[COMRAM] unsigned char 
  5265 ;;  bexp            1   54[COMRAM] unsigned char 
  5266 ;;  sign            1   47[COMRAM] unsigned char 
  5267 ;; Return value:  Size  Location     Type
  5268 ;;                  4   31[COMRAM] unsigned char 
  5269 ;; Registers used:
  5270 ;;		wreg, status,2, status,0
  5271 ;; Tracked objects:
  5272 ;;		On entry : 0/0
  5273 ;;		On exit  : 0/0
  5274 ;;		Unchanged: 0/0
  5275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5276 ;;      Params:         8       0       0       0       0       0       0
  5277 ;;      Locals:        13       0       0       0       0       0       0
  5278 ;;      Temps:          4       0       0       0       0       0       0
  5279 ;;      Totals:        25       0       0       0       0       0       0
  5280 ;;Total ram usage:       25 bytes
  5281 ;; Hardware stack levels used:    1
  5282 ;; Hardware stack levels required when called:    4
  5283 ;; This function calls:
  5284 ;;		Nothing
  5285 ;; This function is called by:
  5286 ;;		_rotateObj
  5287 ;; This function uses a non-reentrant model
  5288 ;;
  5289                           
  5290                           	psect	text33
  5291  000610                     __ptext33:
  5292                           	callstack 0
  5293  000610                     ___fldiv:
  5294                           	callstack 0
  5295  000610  FFFF               	dw	65535	; assembler added errata NOP
  5296  000612  5023               	movf	(___fldiv@b+3)^0,w,c
  5297  000614  0B80               	andlw	128
  5298  000616  6E30               	movwf	___fldiv@sign^0,c
  5299  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  5300  00061A  2423               	addwf	(___fldiv@b+3)^0,w,c
  5301  00061C  6E37               	movwf	___fldiv@bexp^0,c
  5302  00061E  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5303  000620  EF14  F003         	goto	u2601
  5304  000624  EF17  F003         	goto	u2600
  5305  000628                     u2601:
  5306  000628  FFFF               	dw	65535	; assembler added errata NOP
  5307  00062A  EF19  F003         	goto	l3527
  5308  00062E                     u2600:
  5309  00062E  FFFF               	dw	65535	; assembler added errata NOP
  5310  000630  8037               	bsf	___fldiv@bexp^0,0,c
  5311  000632                     l3527:
  5312  000632  FFFF               	dw	65535	; assembler added errata NOP
  5313  000634  5037               	movf	___fldiv@bexp^0,w,c
  5314  000636  B4D8               	btfsc	status,2,c
  5315  000638  EF20  F003         	goto	u2611
  5316  00063C  EF23  F003         	goto	u2610
  5317  000640                     u2611:
  5318  000640  FFFF               	dw	65535	; assembler added errata NOP
  5319  000642  EF3C  F003         	goto	l3537
  5320  000646                     u2610:
  5321  000646  FFFF               	dw	65535	; assembler added errata NOP
  5322  000648  2837               	incf	___fldiv@bexp^0,w,c
  5323  00064A  A4D8               	btfss	status,2,c
  5324  00064C  EF2A  F003         	goto	u2621
  5325  000650  EF2D  F003         	goto	u2620
  5326  000654                     u2621:
  5327  000654  FFFF               	dw	65535	; assembler added errata NOP
  5328  000656  EF36  F003         	goto	l3533
  5329  00065A                     u2620:
  5330  00065A  FFFF               	dw	65535	; assembler added errata NOP
  5331  00065C  0E00               	movlw	0
  5332  00065E  6E20               	movwf	___fldiv@b^0,c
  5333  000660  0E00               	movlw	0
  5334  000662  6E21               	movwf	(___fldiv@b+1)^0,c
  5335  000664  0E00               	movlw	0
  5336  000666  6E22               	movwf	(___fldiv@b+2)^0,c
  5337  000668  0E00               	movlw	0
  5338  00066A  6E23               	movwf	(___fldiv@b+3)^0,c
  5339  00066C                     l3533:
  5340  00066C  FFFF               	dw	65535	; assembler added errata NOP
  5341  00066E  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5342  000670  0E00               	movlw	0
  5343  000672  6E23               	movwf	(___fldiv@b+3)^0,c
  5344  000674  EF45  F003         	goto	l3539
  5345  000678                     l3537:
  5346  000678  FFFF               	dw	65535	; assembler added errata NOP
  5347  00067A  0E00               	movlw	0
  5348  00067C  6E20               	movwf	___fldiv@b^0,c
  5349  00067E  0E00               	movlw	0
  5350  000680  6E21               	movwf	(___fldiv@b+1)^0,c
  5351  000682  0E00               	movlw	0
  5352  000684  6E22               	movwf	(___fldiv@b+2)^0,c
  5353  000686  0E00               	movlw	0
  5354  000688  6E23               	movwf	(___fldiv@b+3)^0,c
  5355  00068A                     l3539:
  5356  00068A  FFFF               	dw	65535	; assembler added errata NOP
  5357  00068C  5027               	movf	(___fldiv@a+3)^0,w,c
  5358  00068E  0B80               	andlw	128
  5359  000690  1A30               	xorwf	___fldiv@sign^0,f,c
  5360  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  5361  000694  2427               	addwf	(___fldiv@a+3)^0,w,c
  5362  000696  6E38               	movwf	___fldiv@aexp^0,c
  5363  000698  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5364  00069A  EF51  F003         	goto	u2631
  5365  00069E  EF54  F003         	goto	u2630
  5366  0006A2                     u2631:
  5367  0006A2  FFFF               	dw	65535	; assembler added errata NOP
  5368  0006A4  EF56  F003         	goto	l3547
  5369  0006A8                     u2630:
  5370  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  5371  0006AA  8038               	bsf	___fldiv@aexp^0,0,c
  5372  0006AC                     l3547:
  5373  0006AC  FFFF               	dw	65535	; assembler added errata NOP
  5374  0006AE  5038               	movf	___fldiv@aexp^0,w,c
  5375  0006B0  B4D8               	btfsc	status,2,c
  5376  0006B2  EF5D  F003         	goto	u2641
  5377  0006B6  EF60  F003         	goto	u2640
  5378  0006BA                     u2641:
  5379  0006BA  FFFF               	dw	65535	; assembler added errata NOP
  5380  0006BC  EF79  F003         	goto	l3557
  5381  0006C0                     u2640:
  5382  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  5383  0006C2  2838               	incf	___fldiv@aexp^0,w,c
  5384  0006C4  A4D8               	btfss	status,2,c
  5385  0006C6  EF67  F003         	goto	u2651
  5386  0006CA  EF6A  F003         	goto	u2650
  5387  0006CE                     u2651:
  5388  0006CE  FFFF               	dw	65535	; assembler added errata NOP
  5389  0006D0  EF73  F003         	goto	l3553
  5390  0006D4                     u2650:
  5391  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  5392  0006D6  0E00               	movlw	0
  5393  0006D8  6E24               	movwf	___fldiv@a^0,c
  5394  0006DA  0E00               	movlw	0
  5395  0006DC  6E25               	movwf	(___fldiv@a+1)^0,c
  5396  0006DE  0E00               	movlw	0
  5397  0006E0  6E26               	movwf	(___fldiv@a+2)^0,c
  5398  0006E2  0E00               	movlw	0
  5399  0006E4  6E27               	movwf	(___fldiv@a+3)^0,c
  5400  0006E6                     l3553:
  5401  0006E6  FFFF               	dw	65535	; assembler added errata NOP
  5402  0006E8  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5403  0006EA  0E00               	movlw	0
  5404  0006EC  6E27               	movwf	(___fldiv@a+3)^0,c
  5405  0006EE  EF82  F003         	goto	l3559
  5406  0006F2                     l3557:
  5407  0006F2  FFFF               	dw	65535	; assembler added errata NOP
  5408  0006F4  0E00               	movlw	0
  5409  0006F6  6E24               	movwf	___fldiv@a^0,c
  5410  0006F8  0E00               	movlw	0
  5411  0006FA  6E25               	movwf	(___fldiv@a+1)^0,c
  5412  0006FC  0E00               	movlw	0
  5413  0006FE  6E26               	movwf	(___fldiv@a+2)^0,c
  5414  000700  0E00               	movlw	0
  5415  000702  6E27               	movwf	(___fldiv@a+3)^0,c
  5416  000704                     l3559:
  5417  000704  FFFF               	dw	65535	; assembler added errata NOP
  5418  000706  5024               	movf	___fldiv@a^0,w,c
  5419  000708  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5420  00070A  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5421  00070C  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5422  00070E  A4D8               	btfss	status,2,c
  5423  000710  EF8C  F003         	goto	u2661
  5424  000714  EF8F  F003         	goto	u2660
  5425  000718                     u2661:
  5426  000718  FFFF               	dw	65535	; assembler added errata NOP
  5427  00071A  EFA9  F003         	goto	l3571
  5428  00071E                     u2660:
  5429  00071E  FFFF               	dw	65535	; assembler added errata NOP
  5430  000720  0E00               	movlw	0
  5431  000722  6E20               	movwf	___fldiv@b^0,c
  5432  000724  0E00               	movlw	0
  5433  000726  6E21               	movwf	(___fldiv@b+1)^0,c
  5434  000728  0E00               	movlw	0
  5435  00072A  6E22               	movwf	(___fldiv@b+2)^0,c
  5436  00072C  0E00               	movlw	0
  5437  00072E  6E23               	movwf	(___fldiv@b+3)^0,c
  5438  000730  0E80               	movlw	128
  5439  000732  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5440  000734  0E7F               	movlw	127
  5441  000736  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5442  000738                     l3565:
  5443  000738  FFFF               	dw	65535	; assembler added errata NOP
  5444  00073A  5030               	movf	___fldiv@sign^0,w,c
  5445  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5446  00073E  C020  F020         	movff	___fldiv@b,?___fldiv
  5447  000742  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5448  000746  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5449  00074A  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5450  00074E  EF1E  F005         	goto	l1188
  5451  000752                     l3571:
  5452  000752  FFFF               	dw	65535	; assembler added errata NOP
  5453  000754  5037               	movf	___fldiv@bexp^0,w,c
  5454  000756  A4D8               	btfss	status,2,c
  5455  000758  EFB0  F003         	goto	u2671
  5456  00075C  EFB3  F003         	goto	u2670
  5457  000760                     u2671:
  5458  000760  FFFF               	dw	65535	; assembler added errata NOP
  5459  000762  EFBE  F003         	goto	l3579
  5460  000766                     u2670:
  5461  000766  FFFF               	dw	65535	; assembler added errata NOP
  5462  000768  0E00               	movlw	0
  5463  00076A  6E20               	movwf	?___fldiv^0,c
  5464  00076C  0E00               	movlw	0
  5465  00076E  6E21               	movwf	(?___fldiv+1)^0,c
  5466  000770  0E00               	movlw	0
  5467  000772  6E22               	movwf	(?___fldiv+2)^0,c
  5468  000774  0E00               	movlw	0
  5469  000776  6E23               	movwf	(?___fldiv+3)^0,c
  5470  000778  EF1E  F005         	goto	l1188
  5471  00077C                     l3579:
  5472  00077C  FFFF               	dw	65535	; assembler added errata NOP
  5473  00077E  5038               	movf	___fldiv@aexp^0,w,c
  5474  000780  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5475  000784  6A29               	clrf	(??___fldiv+1)^0,c
  5476  000786  5E28               	subwf	??___fldiv^0,f,c
  5477  000788  0E00               	movlw	0
  5478  00078A  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5479  00078C  0E7F               	movlw	127
  5480  00078E  2428               	addwf	??___fldiv^0,w,c
  5481  000790  6E31               	movwf	___fldiv@new_exp^0,c
  5482  000792  0E00               	movlw	0
  5483  000794  2029               	addwfc	(??___fldiv+1)^0,w,c
  5484  000796  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5485  000798  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5486  00079C  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5487  0007A0  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5488  0007A4  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5489  0007A8  0E00               	movlw	0
  5490  0007AA  6E20               	movwf	___fldiv@b^0,c
  5491  0007AC  0E00               	movlw	0
  5492  0007AE  6E21               	movwf	(___fldiv@b+1)^0,c
  5493  0007B0  0E00               	movlw	0
  5494  0007B2  6E22               	movwf	(___fldiv@b+2)^0,c
  5495  0007B4  0E00               	movlw	0
  5496  0007B6  6E23               	movwf	(___fldiv@b+3)^0,c
  5497  0007B8  0E00               	movlw	0
  5498  0007BA  6E33               	movwf	___fldiv@grs^0,c
  5499  0007BC  0E00               	movlw	0
  5500  0007BE  6E34               	movwf	(___fldiv@grs+1)^0,c
  5501  0007C0  0E00               	movlw	0
  5502  0007C2  6E35               	movwf	(___fldiv@grs+2)^0,c
  5503  0007C4  0E00               	movlw	0
  5504  0007C6  6E36               	movwf	(___fldiv@grs+3)^0,c
  5505  0007C8  0E00               	movlw	0
  5506  0007CA  6E38               	movwf	___fldiv@aexp^0,c
  5507  0007CC  EF2A  F004         	goto	l1190
  5508  0007D0                     l3589:
  5509  0007D0  FFFF               	dw	65535	; assembler added errata NOP
  5510  0007D2  5038               	movf	___fldiv@aexp^0,w,c
  5511  0007D4  B4D8               	btfsc	status,2,c
  5512  0007D6  EFEF  F003         	goto	u2681
  5513  0007DA  EFF2  F003         	goto	u2680
  5514  0007DE                     u2681:
  5515  0007DE  FFFF               	dw	65535	; assembler added errata NOP
  5516  0007E0  EF0D  F004         	goto	l3597
  5517  0007E4                     u2680:
  5518  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  5519  0007E6  90D8               	bcf	status,0,c
  5520  0007E8  362C               	rlcf	___fldiv@rem^0,f,c
  5521  0007EA  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5522  0007EC  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5523  0007EE  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5524  0007F0  90D8               	bcf	status,0,c
  5525  0007F2  3620               	rlcf	___fldiv@b^0,f,c
  5526  0007F4  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5527  0007F6  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5528  0007F8  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5529  0007FA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5530  0007FC  EF02  F004         	goto	u2691
  5531  000800  EF05  F004         	goto	u2690
  5532  000804                     u2691:
  5533  000804  FFFF               	dw	65535	; assembler added errata NOP
  5534  000806  EF07  F004         	goto	l1193
  5535  00080A                     u2690:
  5536  00080A  FFFF               	dw	65535	; assembler added errata NOP
  5537  00080C  8020               	bsf	___fldiv@b^0,0,c
  5538  00080E                     l1193:
  5539  00080E  FFFF               	dw	65535	; assembler added errata NOP
  5540  000810  90D8               	bcf	status,0,c
  5541  000812  3633               	rlcf	___fldiv@grs^0,f,c
  5542  000814  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5543  000816  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5544  000818  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5545  00081A                     l3597:
  5546  00081A  FFFF               	dw	65535	; assembler added errata NOP
  5547  00081C  5024               	movf	___fldiv@a^0,w,c
  5548  00081E  5C2C               	subwf	___fldiv@rem^0,w,c
  5549  000820  5025               	movf	(___fldiv@a+1)^0,w,c
  5550  000822  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5551  000824  5026               	movf	(___fldiv@a+2)^0,w,c
  5552  000826  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5553  000828  5027               	movf	(___fldiv@a+3)^0,w,c
  5554  00082A  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5555  00082C  A0D8               	btfss	status,0,c
  5556  00082E  EF1B  F004         	goto	u2701
  5557  000832  EF1E  F004         	goto	u2700
  5558  000836                     u2701:
  5559  000836  FFFF               	dw	65535	; assembler added errata NOP
  5560  000838  EF28  F004         	goto	l3603
  5561  00083C                     u2700:
  5562  00083C  FFFF               	dw	65535	; assembler added errata NOP
  5563  00083E  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5564  000840  5024               	movf	___fldiv@a^0,w,c
  5565  000842  5E2C               	subwf	___fldiv@rem^0,f,c
  5566  000844  5025               	movf	(___fldiv@a+1)^0,w,c
  5567  000846  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5568  000848  5026               	movf	(___fldiv@a+2)^0,w,c
  5569  00084A  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5570  00084C  5027               	movf	(___fldiv@a+3)^0,w,c
  5571  00084E  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5572  000850                     l3603:
  5573  000850  FFFF               	dw	65535	; assembler added errata NOP
  5574  000852  2A38               	incf	___fldiv@aexp^0,f,c
  5575  000854                     l1190:
  5576  000854  FFFF               	dw	65535	; assembler added errata NOP
  5577  000856  0E19               	movlw	25
  5578  000858  6438               	cpfsgt	___fldiv@aexp^0,c
  5579  00085A  EF31  F004         	goto	u2711
  5580  00085E  EF34  F004         	goto	u2710
  5581  000862                     u2711:
  5582  000862  FFFF               	dw	65535	; assembler added errata NOP
  5583  000864  EFE8  F003         	goto	l3589
  5584  000868                     u2710:
  5585  000868  FFFF               	dw	65535	; assembler added errata NOP
  5586  00086A  502C               	movf	___fldiv@rem^0,w,c
  5587  00086C  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5588  00086E  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5589  000870  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5590  000872  B4D8               	btfsc	status,2,c
  5591  000874  EF3E  F004         	goto	u2721
  5592  000878  EF41  F004         	goto	u2720
  5593  00087C                     u2721:
  5594  00087C  FFFF               	dw	65535	; assembler added errata NOP
  5595  00087E  EF5E  F004         	goto	l3615
  5596  000882                     u2720:
  5597  000882  FFFF               	dw	65535	; assembler added errata NOP
  5598  000884  8033               	bsf	___fldiv@grs^0,0,c
  5599  000886  EF5E  F004         	goto	l3615
  5600  00088A                     l3609:
  5601  00088A  FFFF               	dw	65535	; assembler added errata NOP
  5602  00088C  90D8               	bcf	status,0,c
  5603  00088E  3620               	rlcf	___fldiv@b^0,f,c
  5604  000890  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5605  000892  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5606  000894  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5607  000896  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5608  000898  EF50  F004         	goto	u2731
  5609  00089C  EF53  F004         	goto	u2730
  5610  0008A0                     u2731:
  5611  0008A0  FFFF               	dw	65535	; assembler added errata NOP
  5612  0008A2  EF55  F004         	goto	l1199
  5613  0008A6                     u2730:
  5614  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5615  0008A8  8020               	bsf	___fldiv@b^0,0,c
  5616  0008AA                     l1199:
  5617  0008AA  FFFF               	dw	65535	; assembler added errata NOP
  5618  0008AC  90D8               	bcf	status,0,c
  5619  0008AE  3633               	rlcf	___fldiv@grs^0,f,c
  5620  0008B0  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5621  0008B2  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5622  0008B4  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5623  0008B6  0631               	decf	___fldiv@new_exp^0,f,c
  5624  0008B8  A0D8               	btfss	status,0,c
  5625  0008BA  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5626  0008BC                     l3615:
  5627  0008BC  FFFF               	dw	65535	; assembler added errata NOP
  5628  0008BE  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5629  0008C0  EF64  F004         	goto	u2741
  5630  0008C4  EF67  F004         	goto	u2740
  5631  0008C8                     u2741:
  5632  0008C8  FFFF               	dw	65535	; assembler added errata NOP
  5633  0008CA  EF45  F004         	goto	l3609
  5634  0008CE                     u2740:
  5635  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5636  0008D0  0E00               	movlw	0
  5637  0008D2  6E38               	movwf	___fldiv@aexp^0,c
  5638  0008D4  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5639  0008D6  EF6F  F004         	goto	u2751
  5640  0008DA  EF72  F004         	goto	u2750
  5641  0008DE                     u2751:
  5642  0008DE  FFFF               	dw	65535	; assembler added errata NOP
  5643  0008E0  EF9D  F004         	goto	l1201
  5644  0008E4                     u2750:
  5645  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5646  0008E6  0EFF               	movlw	255
  5647  0008E8  1433               	andwf	___fldiv@grs^0,w,c
  5648  0008EA  6E28               	movwf	??___fldiv^0,c
  5649  0008EC  0EFF               	movlw	255
  5650  0008EE  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5651  0008F0  6E29               	movwf	(??___fldiv+1)^0,c
  5652  0008F2  0EFF               	movlw	255
  5653  0008F4  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5654  0008F6  6E2A               	movwf	(??___fldiv+2)^0,c
  5655  0008F8  0E7F               	movlw	127
  5656  0008FA  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5657  0008FC  6E2B               	movwf	(??___fldiv+3)^0,c
  5658  0008FE  5028               	movf	??___fldiv^0,w,c
  5659  000900  1029               	iorwf	(??___fldiv+1)^0,w,c
  5660  000902  102A               	iorwf	(??___fldiv+2)^0,w,c
  5661  000904  102B               	iorwf	(??___fldiv+3)^0,w,c
  5662  000906  B4D8               	btfsc	status,2,c
  5663  000908  EF88  F004         	goto	u2761
  5664  00090C  EF8B  F004         	goto	u2760
  5665  000910                     u2761:
  5666  000910  FFFF               	dw	65535	; assembler added errata NOP
  5667  000912  EF91  F004         	goto	l1202
  5668  000916                     u2760:
  5669  000916  FFFF               	dw	65535	; assembler added errata NOP
  5670  000918                     l3623:
  5671  000918  FFFF               	dw	65535	; assembler added errata NOP
  5672  00091A  0E01               	movlw	1
  5673  00091C  6E38               	movwf	___fldiv@aexp^0,c
  5674  00091E  EF9D  F004         	goto	l1201
  5675  000922                     l1202:
  5676  000922  FFFF               	dw	65535	; assembler added errata NOP
  5677  000924  A020               	btfss	___fldiv@b^0,0,c
  5678  000926  EF97  F004         	goto	u2771
  5679  00092A  EF9A  F004         	goto	u2770
  5680  00092E                     u2771:
  5681  00092E  FFFF               	dw	65535	; assembler added errata NOP
  5682  000930  EF9D  F004         	goto	l1201
  5683  000934                     u2770:
  5684  000934  FFFF               	dw	65535	; assembler added errata NOP
  5685  000936  EF8C  F004         	goto	l3623
  5686  00093A                     l1201:
  5687  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5688  00093C  5038               	movf	___fldiv@aexp^0,w,c
  5689  00093E  B4D8               	btfsc	status,2,c
  5690  000940  EFA4  F004         	goto	u2781
  5691  000944  EFA7  F004         	goto	u2780
  5692  000948                     u2781:
  5693  000948  FFFF               	dw	65535	; assembler added errata NOP
  5694  00094A  EFCE  F004         	goto	l3635
  5695  00094E                     u2780:
  5696  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5697  000950  0E01               	movlw	1
  5698  000952  2620               	addwf	___fldiv@b^0,f,c
  5699  000954  0E00               	movlw	0
  5700  000956  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5701  000958  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5702  00095A  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5703  00095C  A023               	btfss	(___fldiv@b+3)^0,0,c
  5704  00095E  EFB3  F004         	goto	u2791
  5705  000962  EFB6  F004         	goto	u2790
  5706  000966                     u2791:
  5707  000966  FFFF               	dw	65535	; assembler added errata NOP
  5708  000968  EFCE  F004         	goto	l3635
  5709  00096C                     u2790:
  5710  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5711  00096E  C020  F028         	movff	___fldiv@b,??___fldiv
  5712  000972  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5713  000976  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5714  00097A  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5715  00097E  342B               	rlcf	(??___fldiv+3)^0,w,c
  5716  000980  322B               	rrcf	(??___fldiv+3)^0,f,c
  5717  000982  322A               	rrcf	(??___fldiv+2)^0,f,c
  5718  000984  3229               	rrcf	(??___fldiv+1)^0,f,c
  5719  000986  3228               	rrcf	??___fldiv^0,f,c
  5720  000988  C028  F020         	movff	??___fldiv,___fldiv@b
  5721  00098C  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5722  000990  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5723  000994  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5724  000998  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5725  00099A  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5726  00099C                     l3635:
  5727  00099C  FFFF               	dw	65535	; assembler added errata NOP
  5728  00099E  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5729  0009A0  EFDA  F004         	goto	u2801
  5730  0009A4  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5731  0009A6  E109               	bnz	u2800
  5732  0009A8  2831               	incf	___fldiv@new_exp^0,w,c
  5733  0009AA  A0D8               	btfss	status,0,c
  5734  0009AC  EFDA  F004         	goto	u2801
  5735  0009B0  EFDD  F004         	goto	u2800
  5736  0009B4                     u2801:
  5737  0009B4  FFFF               	dw	65535	; assembler added errata NOP
  5738  0009B6  EFE9  F004         	goto	l3639
  5739  0009BA                     u2800:
  5740  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5741  0009BC  0E00               	movlw	0
  5742  0009BE  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5743  0009C0  6831               	setf	___fldiv@new_exp^0,c
  5744  0009C2  0E00               	movlw	0
  5745  0009C4  6E20               	movwf	___fldiv@b^0,c
  5746  0009C6  0E00               	movlw	0
  5747  0009C8  6E21               	movwf	(___fldiv@b+1)^0,c
  5748  0009CA  0E00               	movlw	0
  5749  0009CC  6E22               	movwf	(___fldiv@b+2)^0,c
  5750  0009CE  0E00               	movlw	0
  5751  0009D0  6E23               	movwf	(___fldiv@b+3)^0,c
  5752  0009D2                     l3639:
  5753  0009D2  FFFF               	dw	65535	; assembler added errata NOP
  5754  0009D4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5755  0009D6  EFF8  F004         	goto	u2810
  5756  0009DA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5757  0009DC  E106               	bnz	u2811
  5758  0009DE  0431               	decf	___fldiv@new_exp^0,w,c
  5759  0009E0  B0D8               	btfsc	status,0,c
  5760  0009E2  EFF5  F004         	goto	u2811
  5761  0009E6  EFF8  F004         	goto	u2810
  5762  0009EA                     u2811:
  5763  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  5764  0009EC  EF07  F005         	goto	l3643
  5765  0009F0                     u2810:
  5766  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5767  0009F2  0E00               	movlw	0
  5768  0009F4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5769  0009F6  0E00               	movlw	0
  5770  0009F8  6E31               	movwf	___fldiv@new_exp^0,c
  5771  0009FA  0E00               	movlw	0
  5772  0009FC  6E20               	movwf	___fldiv@b^0,c
  5773  0009FE  0E00               	movlw	0
  5774  000A00  6E21               	movwf	(___fldiv@b+1)^0,c
  5775  000A02  0E00               	movlw	0
  5776  000A04  6E22               	movwf	(___fldiv@b+2)^0,c
  5777  000A06  0E00               	movlw	0
  5778  000A08  6E23               	movwf	(___fldiv@b+3)^0,c
  5779  000A0A  0E00               	movlw	0
  5780  000A0C  6E30               	movwf	___fldiv@sign^0,c
  5781  000A0E                     l3643:
  5782  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  5783  000A10  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5784  000A14  A037               	btfss	___fldiv@bexp^0,0,c
  5785  000A16  EF0F  F005         	goto	u2821
  5786  000A1A  EF12  F005         	goto	u2820
  5787  000A1E                     u2821:
  5788  000A1E  FFFF               	dw	65535	; assembler added errata NOP
  5789  000A20  EF16  F005         	goto	l3649
  5790  000A24                     u2820:
  5791  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5792  000A26  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5793  000A28  EF18  F005         	goto	l3651
  5794  000A2C                     l3649:
  5795  000A2C  FFFF               	dw	65535	; assembler added errata NOP
  5796  000A2E  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5797  000A30                     l3651:
  5798  000A30  FFFF               	dw	65535	; assembler added errata NOP
  5799  000A32  90D8               	bcf	status,0,c
  5800  000A34  3037               	rrcf	___fldiv@bexp^0,w,c
  5801  000A36  6E23               	movwf	(___fldiv@b+3)^0,c
  5802  000A38  EF9C  F003         	goto	l3565
  5803  000A3C                     l1188:
  5804  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  5805  000A3E  0012               	return		;funcret
  5806  000A40  FFFF               	dw	65535	; errata NOP
  5807  000A42                     __end_of___fldiv:
  5808                           	callstack 0
  5809                           
  5810 ;; *************** function _releaseObj *****************
  5811 ;; Defined at:
  5812 ;;		line 614 in file "motors.c"
  5813 ;; Parameters:    Size  Location     Type
  5814 ;;		None
  5815 ;; Auto vars:     Size  Location     Type
  5816 ;;		None
  5817 ;; Return value:  Size  Location     Type
  5818 ;;                  1    wreg      void 
  5819 ;; Registers used:
  5820 ;;		wreg, status,2, status,0, cstack
  5821 ;; Tracked objects:
  5822 ;;		On entry : 0/0
  5823 ;;		On exit  : 0/0
  5824 ;;		Unchanged: 0/0
  5825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5826 ;;      Params:         0       0       0       0       0       0       0
  5827 ;;      Locals:         0       0       0       0       0       0       0
  5828 ;;      Temps:          0       0       0       0       0       0       0
  5829 ;;      Totals:         0       0       0       0       0       0       0
  5830 ;;Total ram usage:        0 bytes
  5831 ;; Hardware stack levels used:    1
  5832 ;; Hardware stack levels required when called:    5
  5833 ;; This function calls:
  5834 ;;		_stepMade
  5835 ;; This function is called by:
  5836 ;;		_executeData
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           	psect	text34
  5841  002420                     __ptext34:
  5842                           	callstack 0
  5843  002420                     _releaseObj:
  5844                           	callstack 0
  5845  002420  FFFF               	dw	65535	; assembler added errata NOP
  5846  002422                     
  5847                           ;motors.c: 615:     LATDbits.LATD1 = 0;
  5848  002422  928C               	bcf	140,1,c	;volatile
  5849                           
  5850                           ;motors.c: 619:     T2CONbits.TMR2ON = 1;
  5851  002424  84CA               	bsf	202,2,c	;volatile
  5852  002426                     l4021:
  5853  002426  FFFF               	dw	65535	; assembler added errata NOP
  5854  002428  EC7B  F012         	call	_stepMade	;wreg free
  5855  00242C  5012               	movf	?_stepMade^0,w,c
  5856  00242E  1013               	iorwf	(?_stepMade+1)^0,w,c
  5857  002430  B4D8               	btfsc	status,2,c
  5858  002432  EF1D  F012         	goto	u3421
  5859  002436  EF20  F012         	goto	u3420
  5860  00243A                     u3421:
  5861  00243A  FFFF               	dw	65535	; assembler added errata NOP
  5862  00243C  EF13  F012         	goto	l4021
  5863  002440                     u3420:
  5864  002440  FFFF               	dw	65535	; assembler added errata NOP
  5865  002442                     
  5866                           ;motors.c: 621:     T2CONbits.TMR2ON = 1;
  5867  002442  84CA               	bsf	202,2,c	;volatile
  5868  002444                     
  5869                           ;motors.c: 622:     TMR2 = 0;
  5870  002444  0E00               	movlw	0
  5871  002446  6ECC               	movwf	204,c	;volatile
  5872  002448  0012               	return		;funcret
  5873  00244A  FFFF               	dw	65535	; errata NOP
  5874  00244C                     __end_of_releaseObj:
  5875                           	callstack 0
  5876                           
  5877 ;; *************** function _pickObject *****************
  5878 ;; Defined at:
  5879 ;;		line 600 in file "motors.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;		None
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;		None
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  1    wreg      void 
  5886 ;; Registers used:
  5887 ;;		wreg, status,2, status,0, cstack
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5893 ;;      Params:         0       0       0       0       0       0       0
  5894 ;;      Locals:         0       0       0       0       0       0       0
  5895 ;;      Temps:          0       0       0       0       0       0       0
  5896 ;;      Totals:         0       0       0       0       0       0       0
  5897 ;;Total ram usage:        0 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; Hardware stack levels required when called:    5
  5900 ;; This function calls:
  5901 ;;		_stepMade
  5902 ;; This function is called by:
  5903 ;;		_executeData
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text35
  5908  00244C                     __ptext35:
  5909                           	callstack 0
  5910  00244C                     _pickObject:
  5911                           	callstack 0
  5912  00244C  FFFF               	dw	65535	; assembler added errata NOP
  5913  00244E                     
  5914                           ;motors.c: 601:     LATDbits.LATD1 = 1;
  5915  00244E  828C               	bsf	140,1,c	;volatile
  5916                           
  5917                           ;motors.c: 605:     T2CONbits.TMR2ON = 1;
  5918  002450  84CA               	bsf	202,2,c	;volatile
  5919  002452                     l4015:
  5920  002452  FFFF               	dw	65535	; assembler added errata NOP
  5921  002454  EC7B  F012         	call	_stepMade	;wreg free
  5922  002458  5012               	movf	?_stepMade^0,w,c
  5923  00245A  1013               	iorwf	(?_stepMade+1)^0,w,c
  5924  00245C  B4D8               	btfsc	status,2,c
  5925  00245E  EF33  F012         	goto	u3411
  5926  002462  EF36  F012         	goto	u3410
  5927  002466                     u3411:
  5928  002466  FFFF               	dw	65535	; assembler added errata NOP
  5929  002468  EF29  F012         	goto	l4015
  5930  00246C                     u3410:
  5931  00246C  FFFF               	dw	65535	; assembler added errata NOP
  5932  00246E                     
  5933                           ;motors.c: 607:     T2CONbits.TMR2ON = 1;
  5934  00246E  84CA               	bsf	202,2,c	;volatile
  5935  002470                     
  5936                           ;motors.c: 608:     TMR2 = 0;
  5937  002470  0E00               	movlw	0
  5938  002472  6ECC               	movwf	204,c	;volatile
  5939  002474  0012               	return		;funcret
  5940  002476  FFFF               	dw	65535	; errata NOP
  5941  002478                     __end_of_pickObject:
  5942                           	callstack 0
  5943                           
  5944 ;; *************** function _moveToPoint *****************
  5945 ;; Defined at:
  5946 ;;		line 264 in file "motors.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;  x1              2   21[COMRAM] unsigned int 
  5949 ;;  y1              2   23[COMRAM] unsigned int 
  5950 ;;  x2              2   25[COMRAM] unsigned int 
  5951 ;;  y2              2   27[COMRAM] unsigned int 
  5952 ;; Auto vars:     Size  Location     Type
  5953 ;;  MOT2Directio    1   34[COMRAM] unsigned char 
  5954 ;;  MOT1Directio    1   33[COMRAM] unsigned char 
  5955 ;;  keepMovingY     1   32[COMRAM] unsigned char 
  5956 ;;  keepMovingX     1   31[COMRAM] unsigned char 
  5957 ;; Return value:  Size  Location     Type
  5958 ;;                  1    wreg      unsigned char 
  5959 ;; Registers used:
  5960 ;;		wreg, status,2, status,0, cstack
  5961 ;; Tracked objects:
  5962 ;;		On entry : 0/0
  5963 ;;		On exit  : 0/0
  5964 ;;		Unchanged: 0/0
  5965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5966 ;;      Params:         8       0       0       0       0       0       0
  5967 ;;      Locals:         4       0       0       0       0       0       0
  5968 ;;      Temps:          2       0       0       0       0       0       0
  5969 ;;      Totals:        14       0       0       0       0       0       0
  5970 ;;Total ram usage:       14 bytes
  5971 ;; Hardware stack levels used:    1
  5972 ;; Hardware stack levels required when called:    5
  5973 ;; This function calls:
  5974 ;;		_resetStep
  5975 ;;		_setDirection
  5976 ;;		_stepCounter
  5977 ;;		_stepMade
  5978 ;; This function is called by:
  5979 ;;		_executeData
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           	psect	text36
  5984  000A42                     __ptext36:
  5985                           	callstack 0
  5986  000A42                     _moveToPoint:
  5987                           	callstack 0
  5988  000A42  FFFF               	dw	65535	; assembler added errata NOP
  5989  000A44                     
  5990                           ;motors.c: 266:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 269:     if(x2
      +                           > maxX || y2 > maxY){
  5991  000A44  0EE9               	movlw	233
  5992  000A46  5C1A               	subwf	moveToPoint@x2^0,w,c
  5993  000A48  0E03               	movlw	3
  5994  000A4A  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5995  000A4C  B0D8               	btfsc	status,0,c
  5996  000A4E  EF2B  F005         	goto	u3061
  5997  000A52  EF2E  F005         	goto	u3060
  5998  000A56                     u3061:
  5999  000A56  FFFF               	dw	65535	; assembler added errata NOP
  6000  000A58  EF3B  F005         	goto	l3801
  6001  000A5C                     u3060:
  6002  000A5C  FFFF               	dw	65535	; assembler added errata NOP
  6003  000A5E  0EE9               	movlw	233
  6004  000A60  5C1C               	subwf	moveToPoint@y2^0,w,c
  6005  000A62  0E03               	movlw	3
  6006  000A64  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  6007  000A66  A0D8               	btfss	status,0,c
  6008  000A68  EF38  F005         	goto	u3071
  6009  000A6C  EF3B  F005         	goto	u3070
  6010  000A70                     u3071:
  6011  000A70  FFFF               	dw	65535	; assembler added errata NOP
  6012  000A72  EF3F  F005         	goto	l3805
  6013  000A76                     u3070:
  6014  000A76                     l3801:
  6015  000A76  FFFF               	dw	65535	; assembler added errata NOP
  6016                           
  6017                           ;motors.c: 270:         return(5);
  6018  000A78  0E05               	movlw	5
  6019  000A7A  EF7F  F006         	goto	l143
  6020  000A7E                     l3805:
  6021  000A7E  FFFF               	dw	65535	; assembler added errata NOP
  6022                           
  6023                           ;motors.c: 274:     if((x2 - x1) > 0){
  6024  000A80  5016               	movf	moveToPoint@x1^0,w,c
  6025  000A82  5C1A               	subwf	moveToPoint@x2^0,w,c
  6026  000A84  6E1E               	movwf	??_moveToPoint^0,c
  6027  000A86  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6028  000A88  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  6029  000A8A  6E1F               	movwf	(??_moveToPoint+1)^0,c
  6030  000A8C  501E               	movf	??_moveToPoint^0,w,c
  6031  000A8E  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  6032  000A90  B4D8               	btfsc	status,2,c
  6033  000A92  EF4D  F005         	goto	u3081
  6034  000A96  EF50  F005         	goto	u3080
  6035  000A9A                     u3081:
  6036  000A9A  FFFF               	dw	65535	; assembler added errata NOP
  6037  000A9C  EF5A  F005         	goto	l3811
  6038  000AA0                     u3080:
  6039  000AA0  FFFF               	dw	65535	; assembler added errata NOP
  6040  000AA2                     
  6041                           ;motors.c: 275:         setDirection(1, 0);
  6042  000AA2  0E00               	movlw	0
  6043  000AA4  6E12               	movwf	setDirection@motor^0,c
  6044  000AA6  0E01               	movlw	1
  6045  000AA8  ECBB  F010         	call	_setDirection
  6046  000AAC                     
  6047                           ;motors.c: 276:         MOT1Direction = 1;
  6048  000AAC  0E01               	movlw	1
  6049  000AAE  6E22               	movwf	moveToPoint@MOT1Direction^0,c
  6050                           
  6051                           ;motors.c: 277:     }else{
  6052  000AB0  EF62  F005         	goto	l3815
  6053  000AB4                     l3811:
  6054  000AB4  FFFF               	dw	65535	; assembler added errata NOP
  6055                           
  6056                           ;motors.c: 278:         setDirection(0, 0);
  6057  000AB6  0E00               	movlw	0
  6058  000AB8  6E12               	movwf	setDirection@motor^0,c
  6059  000ABA  0E00               	movlw	0
  6060  000ABC  ECBB  F010         	call	_setDirection
  6061  000AC0                     
  6062                           ;motors.c: 279:         MOT1Direction = 0;
  6063  000AC0  0E00               	movlw	0
  6064  000AC2  6E22               	movwf	moveToPoint@MOT1Direction^0,c
  6065  000AC4                     l3815:
  6066  000AC4  FFFF               	dw	65535	; assembler added errata NOP
  6067                           
  6068                           ;motors.c: 282:     if((y2 - y1) > 0){
  6069  000AC6  5018               	movf	moveToPoint@y1^0,w,c
  6070  000AC8  5C1C               	subwf	moveToPoint@y2^0,w,c
  6071  000ACA  6E1E               	movwf	??_moveToPoint^0,c
  6072  000ACC  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6073  000ACE  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  6074  000AD0  6E1F               	movwf	(??_moveToPoint+1)^0,c
  6075  000AD2  501E               	movf	??_moveToPoint^0,w,c
  6076  000AD4  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  6077  000AD6  B4D8               	btfsc	status,2,c
  6078  000AD8  EF70  F005         	goto	u3091
  6079  000ADC  EF73  F005         	goto	u3090
  6080  000AE0                     u3091:
  6081  000AE0  FFFF               	dw	65535	; assembler added errata NOP
  6082  000AE2  EF7D  F005         	goto	l3821
  6083  000AE6                     u3090:
  6084  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  6085  000AE8                     
  6086                           ;motors.c: 283:         setDirection(1, 1);
  6087  000AE8  0E01               	movlw	1
  6088  000AEA  6E12               	movwf	setDirection@motor^0,c
  6089  000AEC  0E01               	movlw	1
  6090  000AEE  ECBB  F010         	call	_setDirection
  6091  000AF2                     
  6092                           ;motors.c: 284:         MOT2Direction = 1;
  6093  000AF2  0E01               	movlw	1
  6094  000AF4  6E23               	movwf	moveToPoint@MOT2Direction^0,c
  6095                           
  6096                           ;motors.c: 285:     }else{
  6097  000AF6  EF85  F005         	goto	l3825
  6098  000AFA                     l3821:
  6099  000AFA  FFFF               	dw	65535	; assembler added errata NOP
  6100                           
  6101                           ;motors.c: 286:         setDirection(0, 1);
  6102  000AFC  0E01               	movlw	1
  6103  000AFE  6E12               	movwf	setDirection@motor^0,c
  6104  000B00  0E00               	movlw	0
  6105  000B02  ECBB  F010         	call	_setDirection
  6106  000B06                     
  6107                           ;motors.c: 287:         MOT2Direction = 0;
  6108  000B06  0E00               	movlw	0
  6109  000B08  6E23               	movwf	moveToPoint@MOT2Direction^0,c
  6110  000B0A                     l3825:
  6111  000B0A  FFFF               	dw	65535	; assembler added errata NOP
  6112                           
  6113                           ;motors.c: 290:     unsigned char keepMovingX = 1;
  6114  000B0C  0E01               	movlw	1
  6115  000B0E  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6116  000B10                     
  6117                           ;motors.c: 291:     unsigned char keepMovingY = 1;
  6118  000B10  0E01               	movlw	1
  6119  000B12  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6120  000B14                     
  6121                           ;motors.c: 294:     T2CONbits.TMR2ON = 1;
  6122  000B14  84CA               	bsf	202,2,c	;volatile
  6123  000B16                     
  6124                           ;motors.c: 296:     tm0Error = 0;
  6125  000B16  0E00               	movlw	0
  6126  000B18  6E5C               	movwf	(_tm0Error+1)^0,c
  6127  000B1A  0E00               	movlw	0
  6128  000B1C  6E5B               	movwf	_tm0Error^0,c
  6129  000B1E                     
  6130                           ;motors.c: 297:     tm0Limit = 100;
  6131  000B1E  0E64               	movlw	100
  6132  000B20  6E68               	movwf	_tm0Limit^0,c
  6133  000B22                     
  6134                           ;motors.c: 298:     T0CONbits.TMR0ON = 1;
  6135  000B22  8ED5               	bsf	213,7,c	;volatile
  6136                           
  6137                           ;motors.c: 300:     while(keepMovingX || keepMovingY){
  6138  000B24  EF5F  F006         	goto	l3871
  6139  000B28                     l3837:
  6140  000B28  FFFF               	dw	65535	; assembler added errata NOP
  6141                           
  6142                           ;motors.c: 303:         if(tm0Error){
  6143  000B2A  505B               	movf	_tm0Error^0,w,c
  6144  000B2C  105C               	iorwf	(_tm0Error+1)^0,w,c
  6145  000B2E  B4D8               	btfsc	status,2,c
  6146  000B30  EF9C  F005         	goto	u3101
  6147  000B34  EF9F  F005         	goto	u3100
  6148  000B38                     u3101:
  6149  000B38  FFFF               	dw	65535	; assembler added errata NOP
  6150  000B3A  EFA8  F005         	goto	l3843
  6151  000B3E                     u3100:
  6152  000B3E  FFFF               	dw	65535	; assembler added errata NOP
  6153  000B40                     
  6154                           ;motors.c: 305:             LATAbits.LATA2 = 0;
  6155  000B40  9489               	bcf	137,2,c	;volatile
  6156                           
  6157                           ;motors.c: 306:             LATBbits.LATB4 = 0;
  6158  000B42  988A               	bcf	138,4,c	;volatile
  6159  000B44                     
  6160                           ;motors.c: 307:             tm0Error = 4;
  6161  000B44  0E00               	movlw	0
  6162  000B46  6E5C               	movwf	(_tm0Error+1)^0,c
  6163  000B48  0E04               	movlw	4
  6164  000B4A  6E5B               	movwf	_tm0Error^0,c
  6165                           
  6166                           ;motors.c: 308:             break;
  6167  000B4C  EF73  F006         	goto	l151
  6168  000B50                     l3843:
  6169  000B50  FFFF               	dw	65535	; assembler added errata NOP
  6170                           
  6171                           ;motors.c: 316:         if(MOT1Direction == 1){
  6172  000B52  0422               	decf	moveToPoint@MOT1Direction^0,w,c
  6173  000B54  A4D8               	btfss	status,2,c
  6174  000B56  EFAF  F005         	goto	u3111
  6175  000B5A  EFB2  F005         	goto	u3110
  6176  000B5E                     u3111:
  6177  000B5E  FFFF               	dw	65535	; assembler added errata NOP
  6178  000B60  EFD0  F005         	goto	l3849
  6179  000B64                     u3110:
  6180  000B64  FFFF               	dw	65535	; assembler added errata NOP
  6181  000B66                     
  6182                           ;motors.c: 317:             if(x1 + stepCounter() == x2){
  6183  000B66  ECC5  F012         	call	_stepCounter	;wreg free
  6184  000B6A  5016               	movf	moveToPoint@x1^0,w,c
  6185  000B6C  2612               	addwf	?_stepCounter^0,f,c
  6186  000B6E  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6187  000B70  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6188  000B72  501A               	movf	moveToPoint@x2^0,w,c
  6189  000B74  1812               	xorwf	?_stepCounter^0,w,c
  6190  000B76  E107               	bnz	u3121
  6191  000B78  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6192  000B7A  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6193  000B7C  A4D8               	btfss	status,2,c
  6194  000B7E  EFC3  F005         	goto	u3121
  6195  000B82  EFC6  F005         	goto	u3120
  6196  000B86                     u3121:
  6197  000B86  FFFF               	dw	65535	; assembler added errata NOP
  6198  000B88  EFCC  F005         	goto	l153
  6199  000B8C                     u3120:
  6200  000B8C  FFFF               	dw	65535	; assembler added errata NOP
  6201  000B8E                     l3847:
  6202  000B8E  FFFF               	dw	65535	; assembler added errata NOP
  6203                           
  6204                           ;motors.c: 319:                 keepMovingX = 0;
  6205  000B90  0E00               	movlw	0
  6206  000B92  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6207                           
  6208                           ;motors.c: 320:             }else{
  6209  000B94  EFF7  F005         	goto	l3855
  6210  000B98                     l153:
  6211  000B98  FFFF               	dw	65535	; assembler added errata NOP
  6212                           
  6213                           ;motors.c: 322:                 LATAbits.LATA2 = 1;
  6214  000B9A  8489               	bsf	137,2,c	;volatile
  6215  000B9C  EFF7  F005         	goto	l3855
  6216  000BA0                     l3849:
  6217  000BA0  FFFF               	dw	65535	; assembler added errata NOP
  6218  000BA2  5022               	movf	moveToPoint@MOT1Direction^0,w,c
  6219  000BA4  A4D8               	btfss	status,2,c
  6220  000BA6  EFD7  F005         	goto	u3131
  6221  000BAA  EFDA  F005         	goto	u3130
  6222  000BAE                     u3131:
  6223  000BAE  FFFF               	dw	65535	; assembler added errata NOP
  6224  000BB0  EFF7  F005         	goto	l3855
  6225  000BB4                     u3130:
  6226  000BB4  FFFF               	dw	65535	; assembler added errata NOP
  6227  000BB6                     
  6228                           ;motors.c: 325:             if(x1 - stepCounter() == x2){
  6229  000BB6  ECC5  F012         	call	_stepCounter	;wreg free
  6230  000BBA  C016  F01E         	movff	moveToPoint@x1,??_moveToPoint
  6231  000BBE  C017  F01F         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6232  000BC2  5012               	movf	?_stepCounter^0,w,c
  6233  000BC4  5E1E               	subwf	??_moveToPoint^0,f,c
  6234  000BC6  5013               	movf	(?_stepCounter+1)^0,w,c
  6235  000BC8  5A1F               	subwfb	(??_moveToPoint+1)^0,f,c
  6236  000BCA  501A               	movf	moveToPoint@x2^0,w,c
  6237  000BCC  181E               	xorwf	??_moveToPoint^0,w,c
  6238  000BCE  E107               	bnz	u3141
  6239  000BD0  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6240  000BD2  181F               	xorwf	(??_moveToPoint+1)^0,w,c
  6241  000BD4  A4D8               	btfss	status,2,c
  6242  000BD6  EFEF  F005         	goto	u3141
  6243  000BDA  EFF2  F005         	goto	u3140
  6244  000BDE                     u3141:
  6245  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  6246  000BE0  EFF5  F005         	goto	l157
  6247  000BE4                     u3140:
  6248  000BE4  FFFF               	dw	65535	; assembler added errata NOP
  6249  000BE6  EFC7  F005         	goto	l3847
  6250  000BEA                     l157:
  6251  000BEA  FFFF               	dw	65535	; assembler added errata NOP
  6252                           
  6253                           ;motors.c: 330:                 LATAbits.LATA2 = 1;
  6254  000BEC  8489               	bsf	137,2,c	;volatile
  6255  000BEE                     l3855:
  6256  000BEE  FFFF               	dw	65535	; assembler added errata NOP
  6257                           
  6258                           ;motors.c: 334:         if(MOT2Direction == 1){
  6259  000BF0  0423               	decf	moveToPoint@MOT2Direction^0,w,c
  6260  000BF2  A4D8               	btfss	status,2,c
  6261  000BF4  EFFE  F005         	goto	u3151
  6262  000BF8  EF01  F006         	goto	u3150
  6263  000BFC                     u3151:
  6264  000BFC  FFFF               	dw	65535	; assembler added errata NOP
  6265  000BFE  EF1F  F006         	goto	l3861
  6266  000C02                     u3150:
  6267  000C02  FFFF               	dw	65535	; assembler added errata NOP
  6268  000C04                     
  6269                           ;motors.c: 336:             if(y1 + stepCounter() == y2){
  6270  000C04  ECC5  F012         	call	_stepCounter	;wreg free
  6271  000C08  5018               	movf	moveToPoint@y1^0,w,c
  6272  000C0A  2612               	addwf	?_stepCounter^0,f,c
  6273  000C0C  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6274  000C0E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6275  000C10  501C               	movf	moveToPoint@y2^0,w,c
  6276  000C12  1812               	xorwf	?_stepCounter^0,w,c
  6277  000C14  E107               	bnz	u3161
  6278  000C16  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6279  000C18  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6280  000C1A  A4D8               	btfss	status,2,c
  6281  000C1C  EF12  F006         	goto	u3161
  6282  000C20  EF15  F006         	goto	u3160
  6283  000C24                     u3161:
  6284  000C24  FFFF               	dw	65535	; assembler added errata NOP
  6285  000C26  EF1B  F006         	goto	l160
  6286  000C2A                     u3160:
  6287  000C2A  FFFF               	dw	65535	; assembler added errata NOP
  6288  000C2C                     l3859:
  6289  000C2C  FFFF               	dw	65535	; assembler added errata NOP
  6290                           
  6291                           ;motors.c: 338:                 keepMovingY = 0;
  6292  000C2E  0E00               	movlw	0
  6293  000C30  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6294                           
  6295                           ;motors.c: 339:             }else{
  6296  000C32  EF42  F006         	goto	l3867
  6297  000C36                     l160:
  6298  000C36  FFFF               	dw	65535	; assembler added errata NOP
  6299                           
  6300                           ;motors.c: 341:                 LATBbits.LATB4 = 1;
  6301  000C38  888A               	bsf	138,4,c	;volatile
  6302  000C3A  EF42  F006         	goto	l3867
  6303  000C3E                     l3861:
  6304  000C3E  FFFF               	dw	65535	; assembler added errata NOP
  6305  000C40  5023               	movf	moveToPoint@MOT2Direction^0,w,c
  6306  000C42  A4D8               	btfss	status,2,c
  6307  000C44  EF26  F006         	goto	u3171
  6308  000C48  EF29  F006         	goto	u3170
  6309  000C4C                     u3171:
  6310  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  6311  000C4E  EF42  F006         	goto	l3867
  6312  000C52                     u3170:
  6313  000C52  FFFF               	dw	65535	; assembler added errata NOP
  6314  000C54                     
  6315                           ;motors.c: 345:             if(y1 + stepCounter() == y2){
  6316  000C54  ECC5  F012         	call	_stepCounter	;wreg free
  6317  000C58  5018               	movf	moveToPoint@y1^0,w,c
  6318  000C5A  2612               	addwf	?_stepCounter^0,f,c
  6319  000C5C  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6320  000C5E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6321  000C60  501C               	movf	moveToPoint@y2^0,w,c
  6322  000C62  1812               	xorwf	?_stepCounter^0,w,c
  6323  000C64  E107               	bnz	u3181
  6324  000C66  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6325  000C68  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6326  000C6A  A4D8               	btfss	status,2,c
  6327  000C6C  EF3A  F006         	goto	u3181
  6328  000C70  EF3D  F006         	goto	u3180
  6329  000C74                     u3181:
  6330  000C74  FFFF               	dw	65535	; assembler added errata NOP
  6331  000C76  EF40  F006         	goto	l164
  6332  000C7A                     u3180:
  6333  000C7A  FFFF               	dw	65535	; assembler added errata NOP
  6334  000C7C  EF16  F006         	goto	l3859
  6335  000C80                     l164:
  6336  000C80  FFFF               	dw	65535	; assembler added errata NOP
  6337                           
  6338                           ;motors.c: 350:                 LATBbits.LATB4 = 1;
  6339  000C82  888A               	bsf	138,4,c	;volatile
  6340  000C84                     l3867:
  6341  000C84  FFFF               	dw	65535	; assembler added errata NOP
  6342  000C86  EC7B  F012         	call	_stepMade	;wreg free
  6343  000C8A  5012               	movf	?_stepMade^0,w,c
  6344  000C8C  1013               	iorwf	(?_stepMade+1)^0,w,c
  6345  000C8E  B4D8               	btfsc	status,2,c
  6346  000C90  EF4C  F006         	goto	u3191
  6347  000C94  EF4F  F006         	goto	u3190
  6348  000C98                     u3191:
  6349  000C98  FFFF               	dw	65535	; assembler added errata NOP
  6350  000C9A  EF42  F006         	goto	l3867
  6351  000C9E                     u3190:
  6352  000C9E  FFFF               	dw	65535	; assembler added errata NOP
  6353  000CA0                     
  6354                           ;motors.c: 358:         LATAbits.LATA2 = 0;
  6355  000CA0  9489               	bcf	137,2,c	;volatile
  6356                           
  6357                           ;motors.c: 359:         LATBbits.LATB4 = 0;
  6358  000CA2  988A               	bcf	138,4,c	;volatile
  6359  000CA4                     l3869:
  6360  000CA4  FFFF               	dw	65535	; assembler added errata NOP
  6361  000CA6  EC7B  F012         	call	_stepMade	;wreg free
  6362  000CAA  5012               	movf	?_stepMade^0,w,c
  6363  000CAC  1013               	iorwf	(?_stepMade+1)^0,w,c
  6364  000CAE  B4D8               	btfsc	status,2,c
  6365  000CB0  EF5C  F006         	goto	u3201
  6366  000CB4  EF5F  F006         	goto	u3200
  6367  000CB8                     u3201:
  6368  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6369  000CBA  EF52  F006         	goto	l3869
  6370  000CBE                     u3200:
  6371  000CBE                     l3871:
  6372  000CBE  FFFF               	dw	65535	; assembler added errata NOP
  6373                           
  6374                           ;motors.c: 300:     while(keepMovingX || keepMovingY){
  6375  000CC0  5020               	movf	moveToPoint@keepMovingX^0,w,c
  6376  000CC2  A4D8               	btfss	status,2,c
  6377  000CC4  EF66  F006         	goto	u3211
  6378  000CC8  EF69  F006         	goto	u3210
  6379  000CCC                     u3211:
  6380  000CCC  FFFF               	dw	65535	; assembler added errata NOP
  6381  000CCE  EF94  F005         	goto	l3837
  6382  000CD2                     u3210:
  6383  000CD2  FFFF               	dw	65535	; assembler added errata NOP
  6384  000CD4  5021               	movf	moveToPoint@keepMovingY^0,w,c
  6385  000CD6  A4D8               	btfss	status,2,c
  6386  000CD8  EF70  F006         	goto	u3221
  6387  000CDC  EF73  F006         	goto	u3220
  6388  000CE0                     u3221:
  6389  000CE0  FFFF               	dw	65535	; assembler added errata NOP
  6390  000CE2  EF94  F005         	goto	l3837
  6391  000CE6                     u3220:
  6392  000CE6                     l151:
  6393  000CE6  FFFF               	dw	65535	; assembler added errata NOP
  6394                           
  6395                           ;motors.c: 366:     T0CONbits.TMR0ON = 0;
  6396  000CE8  9ED5               	bcf	213,7,c	;volatile
  6397                           
  6398                           ;motors.c: 367:     T2CONbits.TMR2ON = 0;
  6399  000CEA  94CA               	bcf	202,2,c	;volatile
  6400  000CEC                     
  6401                           ;motors.c: 369:     TMR0 = 0;
  6402  000CEC  0E00               	movlw	0
  6403  000CEE  6ED7               	movwf	215,c	;volatile
  6404  000CF0  0E00               	movlw	0
  6405  000CF2  6ED6               	movwf	214,c	;volatile
  6406                           
  6407                           ;motors.c: 370:     TMR2 = 0;
  6408  000CF4  0E00               	movlw	0
  6409  000CF6  6ECC               	movwf	204,c	;volatile
  6410  000CF8                     
  6411                           ;motors.c: 373:     resetStep();
  6412  000CF8  ECDF  F012         	call	_resetStep	;wreg free
  6413  000CFC                     
  6414                           ;motors.c: 375:     return(tm0Error);
  6415  000CFC  505B               	movf	_tm0Error^0,w,c
  6416  000CFE                     l143:
  6417  000CFE  FFFF               	dw	65535	; assembler added errata NOP
  6418  000D00  0012               	return		;funcret
  6419  000D02  FFFF               	dw	65535	; errata NOP
  6420  000D04                     __end_of_moveToPoint:
  6421                           	callstack 0
  6422                           
  6423 ;; *************** function _stepCounter *****************
  6424 ;; Defined at:
  6425 ;;		line 72 in file "pwm.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;		None
  6428 ;; Auto vars:     Size  Location     Type
  6429 ;;		None
  6430 ;; Return value:  Size  Location     Type
  6431 ;;                  2   17[COMRAM] unsigned int 
  6432 ;; Registers used:
  6433 ;;		None
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6439 ;;      Params:         2       0       0       0       0       0       0
  6440 ;;      Locals:         0       0       0       0       0       0       0
  6441 ;;      Temps:          0       0       0       0       0       0       0
  6442 ;;      Totals:         2       0       0       0       0       0       0
  6443 ;;Total ram usage:        2 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; Hardware stack levels required when called:    4
  6446 ;; This function calls:
  6447 ;;		Nothing
  6448 ;; This function is called by:
  6449 ;;		_moveToPoint
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           	psect	text37
  6454  00258A                     __ptext37:
  6455                           	callstack 0
  6456  00258A                     _stepCounter:
  6457                           	callstack 0
  6458  00258A  FFFF               	dw	65535	; assembler added errata NOP
  6459  00258C                     
  6460                           ;pwm.c: 73:     return pwmStep;
  6461  00258C  C067  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6462  002590  6A13               	clrf	(?_stepCounter+1)^0,c
  6463  002592  0012               	return		;funcret
  6464  002594  FFFF               	dw	65535	; errata NOP
  6465  002596                     __end_of_stepCounter:
  6466                           	callstack 0
  6467                           
  6468 ;; *************** function _liftArm *****************
  6469 ;; Defined at:
  6470 ;;		line 521 in file "motors.c"
  6471 ;; Parameters:    Size  Location     Type
  6472 ;;		None
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;		None
  6475 ;; Return value:  Size  Location     Type
  6476 ;;                  1    wreg      unsigned char 
  6477 ;; Registers used:
  6478 ;;		wreg, status,2, status,0, cstack
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6484 ;;      Params:         0       0       0       0       0       0       0
  6485 ;;      Locals:         0       0       0       0       0       0       0
  6486 ;;      Temps:          0       0       0       0       0       0       0
  6487 ;;      Totals:         0       0       0       0       0       0       0
  6488 ;;Total ram usage:        0 bytes
  6489 ;; Hardware stack levels used:    1
  6490 ;; Hardware stack levels required when called:    5
  6491 ;; This function calls:
  6492 ;;		_resetStep
  6493 ;;		_setDirection
  6494 ;;		_stepMade
  6495 ;; This function is called by:
  6496 ;;		_executeData
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           	psect	text38
  6501  001F58                     __ptext38:
  6502                           	callstack 0
  6503  001F58                     _liftArm:
  6504                           	callstack 0
  6505  001F58  FFFF               	dw	65535	; assembler added errata NOP
  6506  001F5A                     
  6507                           ;motors.c: 524:     setDirection(0, 2);
  6508  001F5A  0E02               	movlw	2
  6509  001F5C  6E12               	movwf	setDirection@motor^0,c
  6510  001F5E  0E00               	movlw	0
  6511  001F60  ECBB  F010         	call	_setDirection
  6512  001F64                     
  6513                           ;motors.c: 526:     T2CONbits.TMR2ON = 1;
  6514  001F64  84CA               	bsf	202,2,c	;volatile
  6515  001F66                     
  6516                           ;motors.c: 528:     tm0Error = 0;
  6517  001F66  0E00               	movlw	0
  6518  001F68  6E5C               	movwf	(_tm0Error+1)^0,c
  6519  001F6A  0E00               	movlw	0
  6520  001F6C  6E5B               	movwf	_tm0Error^0,c
  6521  001F6E                     
  6522                           ;motors.c: 529:     tm0Limit = 100;
  6523  001F6E  0E64               	movlw	100
  6524  001F70  6E68               	movwf	_tm0Limit^0,c
  6525  001F72                     
  6526                           ;motors.c: 530:     T0CONbits.TMR0ON = 1;
  6527  001F72  8ED5               	bsf	213,7,c	;volatile
  6528                           
  6529                           ;motors.c: 534:     while(!PORTEbits.RE2){
  6530  001F74  EFED  F00F         	goto	l202
  6531  001F78                     l3977:
  6532  001F78  FFFF               	dw	65535	; assembler added errata NOP
  6533                           
  6534                           ;motors.c: 537:         if(tm0Error){
  6535  001F7A  505B               	movf	_tm0Error^0,w,c
  6536  001F7C  105C               	iorwf	(_tm0Error+1)^0,w,c
  6537  001F7E  B4D8               	btfsc	status,2,c
  6538  001F80  EFC4  F00F         	goto	u3351
  6539  001F84  EFC7  F00F         	goto	u3350
  6540  001F88                     u3351:
  6541  001F88  FFFF               	dw	65535	; assembler added errata NOP
  6542  001F8A  EFCF  F00F         	goto	l204
  6543  001F8E                     u3350:
  6544  001F8E  FFFF               	dw	65535	; assembler added errata NOP
  6545  001F90                     
  6546                           ;motors.c: 539:             LATCbits.LATC2 = 0;
  6547  001F90  948B               	bcf	139,2,c	;volatile
  6548  001F92                     
  6549                           ;motors.c: 540:             tm0Error = 6;
  6550  001F92  0E00               	movlw	0
  6551  001F94  6E5C               	movwf	(_tm0Error+1)^0,c
  6552  001F96  0E06               	movlw	6
  6553  001F98  6E5B               	movwf	_tm0Error^0,c
  6554                           
  6555                           ;motors.c: 541:             break;
  6556  001F9A  EFF6  F00F         	goto	l205
  6557  001F9E                     l204:
  6558  001F9E  FFFF               	dw	65535	; assembler added errata NOP
  6559                           
  6560                           ;motors.c: 546:         LATCbits.LATC2 = 1;
  6561  001FA0  848B               	bsf	139,2,c	;volatile
  6562  001FA2                     l3983:
  6563  001FA2  FFFF               	dw	65535	; assembler added errata NOP
  6564  001FA4  EC7B  F012         	call	_stepMade	;wreg free
  6565  001FA8  5012               	movf	?_stepMade^0,w,c
  6566  001FAA  1013               	iorwf	(?_stepMade+1)^0,w,c
  6567  001FAC  B4D8               	btfsc	status,2,c
  6568  001FAE  EFDB  F00F         	goto	u3361
  6569  001FB2  EFDE  F00F         	goto	u3360
  6570  001FB6                     u3361:
  6571  001FB6  FFFF               	dw	65535	; assembler added errata NOP
  6572  001FB8  EFD1  F00F         	goto	l3983
  6573  001FBC                     u3360:
  6574  001FBC  FFFF               	dw	65535	; assembler added errata NOP
  6575  001FBE                     
  6576                           ;motors.c: 552:         LATCbits.LATC2 = 0;
  6577  001FBE  948B               	bcf	139,2,c	;volatile
  6578  001FC0                     l3985:
  6579  001FC0  FFFF               	dw	65535	; assembler added errata NOP
  6580  001FC2  EC7B  F012         	call	_stepMade	;wreg free
  6581  001FC6  5012               	movf	?_stepMade^0,w,c
  6582  001FC8  1013               	iorwf	(?_stepMade+1)^0,w,c
  6583  001FCA  B4D8               	btfsc	status,2,c
  6584  001FCC  EFEA  F00F         	goto	u3371
  6585  001FD0  EFED  F00F         	goto	u3370
  6586  001FD4                     u3371:
  6587  001FD4  FFFF               	dw	65535	; assembler added errata NOP
  6588  001FD6  EFE0  F00F         	goto	l3985
  6589  001FDA                     u3370:
  6590  001FDA                     l202:
  6591  001FDA  FFFF               	dw	65535	; assembler added errata NOP
  6592                           
  6593                           ;motors.c: 534:     while(!PORTEbits.RE2){
  6594  001FDC  A484               	btfss	132,2,c	;volatile
  6595  001FDE  EFF3  F00F         	goto	u3381
  6596  001FE2  EFF6  F00F         	goto	u3380
  6597  001FE6                     u3381:
  6598  001FE6  FFFF               	dw	65535	; assembler added errata NOP
  6599  001FE8  EFBC  F00F         	goto	l3977
  6600  001FEC                     u3380:
  6601  001FEC                     l205:
  6602  001FEC  FFFF               	dw	65535	; assembler added errata NOP
  6603                           
  6604                           ;motors.c: 559:     T0CONbits.TMR0ON = 0;
  6605  001FEE  9ED5               	bcf	213,7,c	;volatile
  6606                           
  6607                           ;motors.c: 560:     T2CONbits.TMR2ON = 0;
  6608  001FF0  94CA               	bcf	202,2,c	;volatile
  6609  001FF2                     
  6610                           ;motors.c: 562:     TMR0 = 0;
  6611  001FF2  0E00               	movlw	0
  6612  001FF4  6ED7               	movwf	215,c	;volatile
  6613  001FF6  0E00               	movlw	0
  6614  001FF8  6ED6               	movwf	214,c	;volatile
  6615                           
  6616                           ;motors.c: 563:     TMR2 = 0;
  6617  001FFA  0E00               	movlw	0
  6618  001FFC  6ECC               	movwf	204,c	;volatile
  6619  001FFE                     
  6620                           ;motors.c: 566:     resetStep();
  6621  001FFE  ECDF  F012         	call	_resetStep	;wreg free
  6622  002002                     
  6623                           ;motors.c: 568:     return(tm0Error);
  6624  002002  505B               	movf	_tm0Error^0,w,c
  6625  002004  0012               	return		;funcret
  6626  002006  FFFF               	dw	65535	; errata NOP
  6627  002008                     __end_of_liftArm:
  6628                           	callstack 0
  6629                           
  6630 ;; *************** function _stepMade *****************
  6631 ;; Defined at:
  6632 ;;		line 61 in file "pwm.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;		None
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;  temp            1   19[COMRAM] unsigned char 
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  2   17[COMRAM] unsigned int 
  6639 ;; Registers used:
  6640 ;;		wreg, status,2
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6646 ;;      Params:         2       0       0       0       0       0       0
  6647 ;;      Locals:         1       0       0       0       0       0       0
  6648 ;;      Temps:          0       0       0       0       0       0       0
  6649 ;;      Totals:         3       0       0       0       0       0       0
  6650 ;;Total ram usage:        3 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    4
  6653 ;; This function calls:
  6654 ;;		Nothing
  6655 ;; This function is called by:
  6656 ;;		_resetPosition
  6657 ;;		_moveToPoint
  6658 ;;		_touchObject
  6659 ;;		_touchTherm
  6660 ;;		_liftArm
  6661 ;;		_rotateObj
  6662 ;;		_pickObject
  6663 ;;		_releaseObj
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           	psect	text39
  6668  0024F6                     __ptext39:
  6669                           	callstack 0
  6670  0024F6                     _stepMade:
  6671                           	callstack 0
  6672  0024F6  FFFF               	dw	65535	; assembler added errata NOP
  6673  0024F8                     
  6674                           ;pwm.c: 62:     unsigned char temp = stepToggle;
  6675  0024F8  C066  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6676  0024FC                     
  6677                           ;pwm.c: 64:     stepToggle = 0;
  6678  0024FC  0E00               	movlw	0
  6679  0024FE  6E66               	movwf	_stepToggle^0,c	;volatile
  6680  002500                     
  6681                           ;pwm.c: 66:     return temp;
  6682  002500  C014  F012         	movff	stepMade@temp,?_stepMade
  6683  002504  6A13               	clrf	(?_stepMade+1)^0,c
  6684  002506  0012               	return		;funcret
  6685  002508  FFFF               	dw	65535	; errata NOP
  6686  00250A                     __end_of_stepMade:
  6687                           	callstack 0
  6688                           
  6689 ;; *************** function _setDirection *****************
  6690 ;; Defined at:
  6691 ;;		line 115 in file "motors.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;  direction       1    wreg     unsigned char 
  6694 ;;  motor           1   17[COMRAM] unsigned char 
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;  direction       1   20[COMRAM] unsigned char 
  6697 ;; Return value:  Size  Location     Type
  6698 ;;                  1    wreg      void 
  6699 ;; Registers used:
  6700 ;;		wreg, status,2, status,0
  6701 ;; Tracked objects:
  6702 ;;		On entry : 0/0
  6703 ;;		On exit  : 0/0
  6704 ;;		Unchanged: 0/0
  6705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6706 ;;      Params:         1       0       0       0       0       0       0
  6707 ;;      Locals:         1       0       0       0       0       0       0
  6708 ;;      Temps:          2       0       0       0       0       0       0
  6709 ;;      Totals:         4       0       0       0       0       0       0
  6710 ;;Total ram usage:        4 bytes
  6711 ;; Hardware stack levels used:    1
  6712 ;; Hardware stack levels required when called:    4
  6713 ;; This function calls:
  6714 ;;		Nothing
  6715 ;; This function is called by:
  6716 ;;		_resetPosition
  6717 ;;		_moveToPoint
  6718 ;;		_touchObject
  6719 ;;		_touchTherm
  6720 ;;		_liftArm
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           	psect	text40
  6725  002176                     __ptext40:
  6726                           	callstack 0
  6727  002176                     _setDirection:
  6728                           	callstack 0
  6729  002176  FFFF               	dw	65535	; assembler added errata NOP
  6730                           
  6731                           ;incstack = 0
  6732                           ;setDirection@direction stored from wreg
  6733  002178  6E15               	movwf	setDirection@direction^0,c
  6734  00217A                     
  6735                           ;motors.c: 116:     switch(motor){
  6736  00217A  EFD7  F010         	goto	l3483
  6737  00217E                     l3475:
  6738  00217E  FFFF               	dw	65535	; assembler added errata NOP
  6739                           
  6740                           ;motors.c: 118:             LATAbits.LATA1 = direction;
  6741  002180  B015               	btfsc	setDirection@direction^0,0,c
  6742  002182  D002               	bra	u2555
  6743  002184  9289               	bcf	137,1,c	;volatile
  6744  002186  D001               	bra	u2556
  6745  002188                     u2555:
  6746  002188  8289               	bsf	137,1,c	;volatile
  6747  00218A                     u2556:
  6748                           
  6749                           ;motors.c: 119:             break;
  6750  00218A  EFF2  F010         	goto	l103
  6751  00218E                     l3477:
  6752  00218E  FFFF               	dw	65535	; assembler added errata NOP
  6753                           
  6754                           ;motors.c: 121:             LATBbits.LATB3 = direction;
  6755  002190  B015               	btfsc	setDirection@direction^0,0,c
  6756  002192  D002               	bra	u2565
  6757  002194  968A               	bcf	138,3,c	;volatile
  6758  002196  D001               	bra	u2566
  6759  002198                     u2565:
  6760  002198  868A               	bsf	138,3,c	;volatile
  6761  00219A                     u2566:
  6762                           
  6763                           ;motors.c: 122:             break;
  6764  00219A  EFF2  F010         	goto	l103
  6765  00219E                     l3479:
  6766  00219E  FFFF               	dw	65535	; assembler added errata NOP
  6767                           
  6768                           ;motors.c: 124:             LATCbits.LATC1 = direction;
  6769  0021A0  B015               	btfsc	setDirection@direction^0,0,c
  6770  0021A2  D002               	bra	u2575
  6771  0021A4  928B               	bcf	139,1,c	;volatile
  6772  0021A6  D001               	bra	u2576
  6773  0021A8                     u2575:
  6774  0021A8  828B               	bsf	139,1,c	;volatile
  6775  0021AA                     u2576:
  6776                           
  6777                           ;motors.c: 125:             break;
  6778  0021AA  EFF2  F010         	goto	l103
  6779  0021AE                     l3483:
  6780  0021AE  FFFF               	dw	65535	; assembler added errata NOP
  6781  0021B0  5012               	movf	setDirection@motor^0,w,c
  6782  0021B2  6E13               	movwf	??_setDirection^0,c
  6783  0021B4  6A14               	clrf	(??_setDirection+1)^0,c
  6784                           
  6785                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6786                           ; Switch size 1, requested type "simple"
  6787                           ; Number of cases is 1, Range of values is 0 to 0
  6788                           ; switch strategies available:
  6789                           ; Name         Instructions Cycles
  6790                           ; simple_byte            4     3 (average)
  6791                           ;	Chosen strategy is simple_byte
  6792  0021B6  5014               	movf	(??_setDirection+1)^0,w,c
  6793  0021B8  0A00               	xorlw	0	; case 0
  6794  0021BA  B4D8               	btfsc	status,2,c
  6795  0021BC  EFE2  F010         	goto	l4611
  6796  0021C0  EFF2  F010         	goto	l103
  6797  0021C4                     l4611:
  6798  0021C4  FFFF               	dw	65535	; assembler added errata NOP
  6799                           
  6800                           ; Switch size 1, requested type "simple"
  6801                           ; Number of cases is 3, Range of values is 0 to 2
  6802                           ; switch strategies available:
  6803                           ; Name         Instructions Cycles
  6804                           ; simple_byte           10     6 (average)
  6805                           ;	Chosen strategy is simple_byte
  6806  0021C6  5013               	movf	??_setDirection^0,w,c
  6807  0021C8  0A00               	xorlw	0	; case 0
  6808  0021CA  B4D8               	btfsc	status,2,c
  6809  0021CC  EFBF  F010         	goto	l3475
  6810  0021D0  0A01               	xorlw	1	; case 1
  6811  0021D2  B4D8               	btfsc	status,2,c
  6812  0021D4  EFC7  F010         	goto	l3477
  6813  0021D8  0A03               	xorlw	3	; case 2
  6814  0021DA  B4D8               	btfsc	status,2,c
  6815  0021DC  EFCF  F010         	goto	l3479
  6816  0021E0  EFF2  F010         	goto	l103
  6817  0021E4                     l103:
  6818  0021E4  FFFF               	dw	65535	; assembler added errata NOP
  6819  0021E6  0012               	return		;funcret
  6820  0021E8  FFFF               	dw	65535	; errata NOP
  6821  0021EA                     __end_of_setDirection:
  6822                           	callstack 0
  6823                           
  6824 ;; *************** function _resetStep *****************
  6825 ;; Defined at:
  6826 ;;		line 79 in file "pwm.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;		None
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;		None
  6831 ;; Return value:  Size  Location     Type
  6832 ;;                  1    wreg      void 
  6833 ;; Registers used:
  6834 ;;		wreg, status,2
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6840 ;;      Params:         0       0       0       0       0       0       0
  6841 ;;      Locals:         0       0       0       0       0       0       0
  6842 ;;      Temps:          0       0       0       0       0       0       0
  6843 ;;      Totals:         0       0       0       0       0       0       0
  6844 ;;Total ram usage:        0 bytes
  6845 ;; Hardware stack levels used:    1
  6846 ;; Hardware stack levels required when called:    4
  6847 ;; This function calls:
  6848 ;;		Nothing
  6849 ;; This function is called by:
  6850 ;;		_resetPosition
  6851 ;;		_moveToPoint
  6852 ;;		_touchObject
  6853 ;;		_touchTherm
  6854 ;;		_liftArm
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857                           
  6858                           	psect	text41
  6859  0025BE                     __ptext41:
  6860                           	callstack 0
  6861  0025BE                     _resetStep:
  6862                           	callstack 0
  6863  0025BE  FFFF               	dw	65535	; assembler added errata NOP
  6864  0025C0                     
  6865                           ;pwm.c: 80:     pwmStep = 0;
  6866  0025C0  0E00               	movlw	0
  6867  0025C2  6E67               	movwf	_pwmStep^0,c	;volatile
  6868  0025C4  0012               	return		;funcret
  6869  0025C6  FFFF               	dw	65535	; errata NOP
  6870  0025C8                     __end_of_resetStep:
  6871                           	callstack 0
  6872                           
  6873 ;; *************** function _getData *****************
  6874 ;; Defined at:
  6875 ;;		line 205 in file "usart.c"
  6876 ;; Parameters:    Size  Location     Type
  6877 ;;		None
  6878 ;; Auto vars:     Size  Location     Type
  6879 ;;		None
  6880 ;; Return value:  Size  Location     Type
  6881 ;;                  2   17[COMRAM] PTR struct .
  6882 ;; Registers used:
  6883 ;;		wreg, status,2, status,0
  6884 ;; Tracked objects:
  6885 ;;		On entry : 0/0
  6886 ;;		On exit  : 0/0
  6887 ;;		Unchanged: 0/0
  6888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6889 ;;      Params:         2       0       0       0       0       0       0
  6890 ;;      Locals:         0       0       0       0       0       0       0
  6891 ;;      Temps:          0       0       0       0       0       0       0
  6892 ;;      Totals:         2       0       0       0       0       0       0
  6893 ;;Total ram usage:        2 bytes
  6894 ;; Hardware stack levels used:    1
  6895 ;; Hardware stack levels required when called:    4
  6896 ;; This function calls:
  6897 ;;		Nothing
  6898 ;; This function is called by:
  6899 ;;		_executeData
  6900 ;; This function uses a non-reentrant model
  6901 ;;
  6902                           
  6903                           	psect	text42
  6904  00253A                     __ptext42:
  6905                           	callstack 0
  6906  00253A                     _getData:
  6907                           	callstack 0
  6908  00253A  FFFF               	dw	65535	; assembler added errata NOP
  6909  00253C                     
  6910                           ;usart.c: 206:     return(&dataSequence[0]);
  6911  00253C  0EDB               	movlw	low _dataSequence
  6912  00253E  6E12               	movwf	?_getData^0,c
  6913  002540  0E00               	movlw	high _dataSequence
  6914  002542  6E13               	movwf	(?_getData+1)^0,c
  6915  002544  0012               	return		;funcret
  6916  002546  FFFF               	dw	65535	; errata NOP
  6917  002548                     __end_of_getData:
  6918                           	callstack 0
  6919                           
  6920 ;; *************** function _clearTM0 *****************
  6921 ;; Defined at:
  6922 ;;		line 28 in file "motors.c"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;		None
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;		None
  6927 ;; Return value:  Size  Location     Type
  6928 ;;                  1    wreg      void 
  6929 ;; Registers used:
  6930 ;;		wreg, status,2
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6936 ;;      Params:         0       0       0       0       0       0       0
  6937 ;;      Locals:         0       0       0       0       0       0       0
  6938 ;;      Temps:          0       0       0       0       0       0       0
  6939 ;;      Totals:         0       0       0       0       0       0       0
  6940 ;;Total ram usage:        0 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:    4
  6943 ;; This function calls:
  6944 ;;		Nothing
  6945 ;; This function is called by:
  6946 ;;		_main
  6947 ;; This function uses a non-reentrant model
  6948 ;;
  6949                           
  6950                           	psect	text43
  6951  002548                     __ptext43:
  6952                           	callstack 0
  6953  002548                     _clearTM0:
  6954                           	callstack 0
  6955  002548  FFFF               	dw	65535	; assembler added errata NOP
  6956  00254A                     
  6957                           ;motors.c: 29:     tm0Error = 0;
  6958  00254A  0E00               	movlw	0
  6959  00254C  6E5C               	movwf	(_tm0Error+1)^0,c
  6960  00254E  0E00               	movlw	0
  6961  002550  6E5B               	movwf	_tm0Error^0,c
  6962  002552  0012               	return		;funcret
  6963  002554  FFFF               	dw	65535	; errata NOP
  6964  002556                     __end_of_clearTM0:
  6965                           	callstack 0
  6966                           
  6967 ;; *************** function _isr *****************
  6968 ;; Defined at:
  6969 ;;		line 17 in file "interrupt.c"
  6970 ;; Parameters:    Size  Location     Type
  6971 ;;		None
  6972 ;; Auto vars:     Size  Location     Type
  6973 ;;  temp            1   16[COMRAM] unsigned char 
  6974 ;; Return value:  Size  Location     Type
  6975 ;;                  1    wreg      void 
  6976 ;; Registers used:
  6977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6978 ;; Tracked objects:
  6979 ;;		On entry : 0/0
  6980 ;;		On exit  : 0/0
  6981 ;;		Unchanged: 0/0
  6982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6983 ;;      Params:         0       0       0       0       0       0       0
  6984 ;;      Locals:         1       0       0       0       0       0       0
  6985 ;;      Temps:          6       0       0       0       0       0       0
  6986 ;;      Totals:         7       0       0       0       0       0       0
  6987 ;;Total ram usage:        7 bytes
  6988 ;; Hardware stack levels used:    1
  6989 ;; Hardware stack levels required when called:    3
  6990 ;; This function calls:
  6991 ;;		_abortAll
  6992 ;;		_fatalError
  6993 ;;		_increaseStep
  6994 ;;		_retPeriod
  6995 ;;		_setThermRel
  6996 ;;		_setTouchRel
  6997 ;;		_toggleStep
  6998 ;;		_whatsTM0Limit
  6999 ;;		_writeTM0
  7000 ;;		i2_storeData
  7001 ;; This function is called by:
  7002 ;;		Interrupt level 2
  7003 ;; This function uses a non-reentrant model
  7004 ;;
  7005                           
  7006                           	psect	intcode
  7007  000008                     __pintcode:
  7008                           	callstack 0
  7009  000008                     _isr:
  7010                           	callstack 0
  7011  000008  FFFF               	dw	65535	; assembler added errata NOP
  7012                           
  7013                           ;incstack = 0
  7014  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7015  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  7016  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  7017  000014  CFF3 F00F          	movff	prodl,??_isr+4
  7018  000018  CFF4 F010          	movff	prodh,??_isr+5
  7019  00001C                     
  7020                           ;interrupt.c: 18:     static unsigned int single_cycle = 0;;interrupt.c: 19:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 20:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 23:     if(INTCONbits.T0IF){
  7021  00001C  A4F2               	btfss	242,2,c	;volatile
  7022  00001E  EF13  F000         	goto	i2u243_41
  7023  000022  EF16  F000         	goto	i2u243_40
  7024  000026                     i2u243_41:
  7025  000026  FFFF               	dw	65535	; assembler added errata NOP
  7026  000028  EF2C  F000         	goto	i2l3379
  7027  00002C                     i2u243_40:
  7028  00002C  FFFF               	dw	65535	; assembler added errata NOP
  7029  00002E                     
  7030                           ;interrupt.c: 24:         INTCONbits.T0IF = 0;
  7031  00002E  94F2               	bcf	242,2,c	;volatile
  7032  000030                     
  7033                           ;interrupt.c: 27:         tm0Count++;
  7034  000030  2A63               	incf	isr@tm0Count^0,f,c
  7035  000032                     
  7036                           ;interrupt.c: 29:         if(tm0Count >= whatsTM0Limit()){
  7037  000032  EC03  F013         	call	_whatsTM0Limit	;wreg free
  7038  000036  6E0B               	movwf	??_isr^0,c
  7039  000038  500B               	movf	??_isr^0,w,c
  7040  00003A  5C63               	subwf	isr@tm0Count^0,w,c
  7041  00003C  A0D8               	btfss	status,0,c
  7042  00003E  EF23  F000         	goto	i2u244_41
  7043  000042  EF26  F000         	goto	i2u244_40
  7044  000046                     i2u244_41:
  7045  000046  FFFF               	dw	65535	; assembler added errata NOP
  7046  000048  EF2C  F000         	goto	i2l3379
  7047  00004C                     i2u244_40:
  7048  00004C  FFFF               	dw	65535	; assembler added errata NOP
  7049  00004E                     
  7050                           ;interrupt.c: 30:             T0CONbits.TMR0ON = 0;
  7051  00004E  9ED5               	bcf	213,7,c	;volatile
  7052  000050                     
  7053                           ;interrupt.c: 31:             tm0Count = 0;
  7054  000050  0E00               	movlw	0
  7055  000052  6E63               	movwf	isr@tm0Count^0,c
  7056  000054                     
  7057                           ;interrupt.c: 32:             writeTM0();
  7058  000054  ECAB  F012         	call	_writeTM0	;wreg free
  7059  000058                     i2l3379:
  7060  000058  FFFF               	dw	65535	; assembler added errata NOP
  7061                           
  7062                           ;interrupt.c: 37:     if(PIR1bits.TMR1IF){
  7063  00005A  A09E               	btfss	158,0,c	;volatile
  7064  00005C  EF32  F000         	goto	i2u245_41
  7065  000060  EF35  F000         	goto	i2u245_40
  7066  000064                     i2u245_41:
  7067  000064  FFFF               	dw	65535	; assembler added errata NOP
  7068  000066  EF45  F000         	goto	i2l3387
  7069  00006A                     i2u245_40:
  7070  00006A  FFFF               	dw	65535	; assembler added errata NOP
  7071  00006C                     
  7072                           ;interrupt.c: 38:         PIR1bits.TMR1IF = 0;
  7073  00006C  909E               	bcf	158,0,c	;volatile
  7074  00006E                     
  7075                           ;interrupt.c: 39:         if(fatalError()){
  7076  00006E  EC0B  F013         	call	_fatalError	;wreg free
  7077  000072  0900               	iorlw	0
  7078  000074  B4D8               	btfsc	status,2,c
  7079  000076  EF3F  F000         	goto	i2u246_41
  7080  00007A  EF42  F000         	goto	i2u246_40
  7081  00007E                     i2u246_41:
  7082  00007E  FFFF               	dw	65535	; assembler added errata NOP
  7083  000080  EF45  F000         	goto	i2l3387
  7084  000084                     i2u246_40:
  7085  000084  FFFF               	dw	65535	; assembler added errata NOP
  7086  000086                     
  7087                           ;interrupt.c: 40:             abortAll();
  7088  000086  ECF8  F011         	call	_abortAll	;wreg free
  7089  00008A                     i2l3387:
  7090  00008A  FFFF               	dw	65535	; assembler added errata NOP
  7091                           
  7092                           ;interrupt.c: 45:     if(PIR1bits.TMR2IF){
  7093  00008C  A29E               	btfss	158,1,c	;volatile
  7094  00008E  EF4B  F000         	goto	i2u247_41
  7095  000092  EF4E  F000         	goto	i2u247_40
  7096  000096                     i2u247_41:
  7097  000096  FFFF               	dw	65535	; assembler added errata NOP
  7098  000098  EF7C  F000         	goto	i2l3407
  7099  00009C                     i2u247_40:
  7100  00009C  FFFF               	dw	65535	; assembler added errata NOP
  7101  00009E                     
  7102                           ;interrupt.c: 46:         PIR1bits.TMR2IF = 0;
  7103  00009E  929E               	bcf	158,1,c	;volatile
  7104  0000A0                     
  7105                           ;interrupt.c: 47:         single_cycle++;
  7106  0000A0  4A51               	infsnz	isr@single_cycle^0,f,c
  7107  0000A2  2A52               	incf	(isr@single_cycle+1)^0,f,c
  7108  0000A4                     
  7109                           ;interrupt.c: 50:         if(single_cycle > retPeriod()){
  7110  0000A4  ECB2  F012         	call	_retPeriod	;wreg free
  7111  0000A8  5051               	movf	isr@single_cycle^0,w,c
  7112  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  7113  0000AC  5052               	movf	(isr@single_cycle+1)^0,w,c
  7114  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  7115  0000B0  B0D8               	btfsc	status,0,c
  7116  0000B2  EF5D  F000         	goto	i2u248_41
  7117  0000B6  EF60  F000         	goto	i2u248_40
  7118  0000BA                     i2u248_41:
  7119  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  7120  0000BC  EF7C  F000         	goto	i2l3407
  7121  0000C0                     i2u248_40:
  7122  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  7123  0000C2                     
  7124                           ;interrupt.c: 51:             completeStep++;
  7125  0000C2  2A62               	incf	isr@completeStep^0,f,c
  7126  0000C4                     
  7127                           ;interrupt.c: 54:             if(completeStep != 0 && !(completeStep % 2)){
  7128  0000C4  5062               	movf	isr@completeStep^0,w,c
  7129  0000C6  B4D8               	btfsc	status,2,c
  7130  0000C8  EF68  F000         	goto	i2u249_41
  7131  0000CC  EF6B  F000         	goto	i2u249_40
  7132  0000D0                     i2u249_41:
  7133  0000D0  FFFF               	dw	65535	; assembler added errata NOP
  7134  0000D2  EF79  F000         	goto	i2l3405
  7135  0000D6                     i2u249_40:
  7136  0000D6  FFFF               	dw	65535	; assembler added errata NOP
  7137  0000D8  B062               	btfsc	isr@completeStep^0,0,c
  7138  0000DA  EF71  F000         	goto	i2u250_41
  7139  0000DE  EF74  F000         	goto	i2u250_40
  7140  0000E2                     i2u250_41:
  7141  0000E2  FFFF               	dw	65535	; assembler added errata NOP
  7142  0000E4  EF79  F000         	goto	i2l3405
  7143  0000E8                     i2u250_40:
  7144  0000E8  FFFF               	dw	65535	; assembler added errata NOP
  7145  0000EA                     
  7146                           ;interrupt.c: 56:                 completeStep = 0;
  7147  0000EA  0E00               	movlw	0
  7148  0000EC  6E62               	movwf	isr@completeStep^0,c
  7149  0000EE                     
  7150                           ;interrupt.c: 59:                 increaseStep();
  7151  0000EE  EC07  F013         	call	_increaseStep	;wreg free
  7152  0000F2                     i2l3405:
  7153  0000F2  FFFF               	dw	65535	; assembler added errata NOP
  7154                           
  7155                           ;interrupt.c: 64:             toggleStep();
  7156  0000F4  ECE4  F012         	call	_toggleStep	;wreg free
  7157  0000F8                     i2l3407:
  7158  0000F8  FFFF               	dw	65535	; assembler added errata NOP
  7159                           
  7160                           ;interrupt.c: 69:     if(PIR1bits.ADIF){
  7161  0000FA  AC9E               	btfss	158,6,c	;volatile
  7162  0000FC  EF82  F000         	goto	i2u251_41
  7163  000100  EF85  F000         	goto	i2u251_40
  7164  000104                     i2u251_41:
  7165  000104  FFFF               	dw	65535	; assembler added errata NOP
  7166  000106  EFB2  F000         	goto	i2l3419
  7167  00010A                     i2u251_40:
  7168  00010A  FFFF               	dw	65535	; assembler added errata NOP
  7169  00010C                     
  7170                           ;interrupt.c: 70:         PIR1bits.ADIF = 0;
  7171  00010C  9C9E               	bcf	158,6,c	;volatile
  7172                           
  7173                           ;interrupt.c: 73:         ADC_res = ADRESL;
  7174  00010E  CFC3 F053          	movff	4035,_ADC_res	;volatile
  7175  000112  6A54               	clrf	(_ADC_res+1)^0,c
  7176  000114                     
  7177                           ;interrupt.c: 74:         ADC_res |= (ADRESH << 8);
  7178  000114  50C4               	movf	196,w,c	;volatile
  7179  000116  6E0C               	movwf	(??_isr+1)^0,c
  7180  000118  6A0B               	clrf	??_isr^0,c
  7181  00011A  500B               	movf	??_isr^0,w,c
  7182  00011C  1253               	iorwf	_ADC_res^0,f,c
  7183  00011E  500C               	movf	(??_isr+1)^0,w,c
  7184  000120  1254               	iorwf	(_ADC_res+1)^0,f,c
  7185                           
  7186                           ;interrupt.c: 77:         if(ADC_res > therm_pressure){
  7187  000122  0453               	decf	_ADC_res^0,w,c
  7188  000124  0E04               	movlw	4
  7189  000126  5854               	subwfb	(_ADC_res+1)^0,w,c
  7190  000128  A0D8               	btfss	status,0,c
  7191  00012A  EF99  F000         	goto	i2u252_41
  7192  00012E  EF9C  F000         	goto	i2u252_40
  7193  000132                     i2u252_41:
  7194  000132  FFFF               	dw	65535	; assembler added errata NOP
  7195  000134  EFA3  F000         	goto	i2l3415
  7196  000138                     i2u252_40:
  7197  000138  FFFF               	dw	65535	; assembler added errata NOP
  7198  00013A                     
  7199                           ;interrupt.c: 79:             setTouchRel();
  7200  00013A  ECE9  F012         	call	_setTouchRel	;wreg free
  7201                           
  7202                           ;interrupt.c: 80:             setThermRel();
  7203  00013E  ECEE  F012         	call	_setThermRel	;wreg free
  7204                           
  7205                           ;interrupt.c: 81:         }else if(ADC_res > touch_pressure){
  7206  000142  EFB2  F000         	goto	i2l3419
  7207  000146                     i2l3415:
  7208  000146  FFFF               	dw	65535	; assembler added errata NOP
  7209  000148  0453               	decf	_ADC_res^0,w,c
  7210  00014A  0E02               	movlw	2
  7211  00014C  5854               	subwfb	(_ADC_res+1)^0,w,c
  7212  00014E  A0D8               	btfss	status,0,c
  7213  000150  EFAC  F000         	goto	i2u253_41
  7214  000154  EFAF  F000         	goto	i2u253_40
  7215  000158                     i2u253_41:
  7216  000158  FFFF               	dw	65535	; assembler added errata NOP
  7217  00015A  EFB2  F000         	goto	i2l3419
  7218  00015E                     i2u253_40:
  7219  00015E  FFFF               	dw	65535	; assembler added errata NOP
  7220  000160                     
  7221                           ;interrupt.c: 83:             setTouchRel();
  7222  000160  ECE9  F012         	call	_setTouchRel	;wreg free
  7223  000164                     i2l3419:
  7224  000164  FFFF               	dw	65535	; assembler added errata NOP
  7225                           
  7226                           ;interrupt.c: 88:     if(PIR1bits.RC1IF){
  7227  000166  AA9E               	btfss	158,5,c	;volatile
  7228  000168  EFB8  F000         	goto	i2u254_41
  7229  00016C  EFBB  F000         	goto	i2u254_40
  7230  000170                     i2u254_41:
  7231  000170  FFFF               	dw	65535	; assembler added errata NOP
  7232  000172  EFC2  F000         	goto	i2l489
  7233  000176                     i2u254_40:
  7234  000176  FFFF               	dw	65535	; assembler added errata NOP
  7235  000178                     
  7236                           ;interrupt.c: 89:         PIR1bits.RC1IF = 0;
  7237  000178  9A9E               	bcf	158,5,c	;volatile
  7238                           
  7239                           ;interrupt.c: 92:         unsigned char temp = RCREG1;
  7240  00017A  CFAE F011          	movff	4014,isr@temp	;volatile
  7241  00017E                     
  7242                           ;interrupt.c: 94:         storeData(temp);
  7243  00017E  5011               	movf	isr@temp^0,w,c
  7244  000180  EC70  F00A         	call	i2_storeData
  7245  000184                     i2l489:
  7246  000184  FFFF               	dw	65535	; assembler added errata NOP
  7247  000186  C010  FFF4         	movff	??_isr+5,prodh
  7248  00018A  C00F  FFF3         	movff	??_isr+4,prodl
  7249  00018E  C00E  FFDA         	movff	??_isr+3,fsr2h
  7250  000192  C00D  FFD9         	movff	??_isr+2,fsr2l
  7251  000196  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7252  000198  0011               	retfie		f
  7253  00019A  FFFF               	dw	65535	; errata NOP
  7254  00019C                     __end_of_isr:
  7255                           	callstack 0
  7256                           
  7257 ;; *************** function i2_storeData *****************
  7258 ;; Defined at:
  7259 ;;		line 131 in file "usart.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;  data            1    wreg     unsigned char 
  7262 ;; Auto vars:     Size  Location     Type
  7263 ;;  data            1    9[COMRAM] unsigned char 
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  1    wreg      void 
  7266 ;; Registers used:
  7267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7268 ;; Tracked objects:
  7269 ;;		On entry : 0/0
  7270 ;;		On exit  : 0/0
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7273 ;;      Params:         0       0       0       0       0       0       0
  7274 ;;      Locals:         1       0       0       0       0       0       0
  7275 ;;      Temps:          2       0       0       0       0       0       0
  7276 ;;      Totals:         3       0       0       0       0       0       0
  7277 ;;Total ram usage:        3 bytes
  7278 ;; Hardware stack levels used:    1
  7279 ;; Hardware stack levels required when called:    2
  7280 ;; This function calls:
  7281 ;;		i2_printError
  7282 ;; This function is called by:
  7283 ;;		_isr
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           	psect	text45
  7288  0014E0                     __ptext45:
  7289                           	callstack 0
  7290  0014E0                     i2_storeData:
  7291                           	callstack 0
  7292  0014E0  FFFF               	dw	65535	; assembler added errata NOP
  7293                           
  7294                           ;incstack = 0
  7295                           ;i2storeData@data stored from wreg
  7296  0014E2  6E0A               	movwf	i2storeData@data^0,c
  7297  0014E4                     
  7298                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  7299  0014E4  0E45               	movlw	low storeData@receivedMex
  7300  0014E6  245E               	addwf	storeData@counter^0,w,c
  7301  0014E8  6ED9               	movwf	fsr2l,c
  7302  0014EA  6ADA               	clrf	fsr2h,c
  7303  0014EC  0E00               	movlw	high storeData@receivedMex
  7304  0014EE  22DA               	addwfc	fsr2h,f,c
  7305  0014F0  C00A  FFDF         	movff	i2storeData@data,indf2
  7306  0014F4                     
  7307                           ;usart.c: 142:     counter++;
  7308  0014F4  2A5E               	incf	storeData@counter^0,f,c
  7309                           
  7310                           ;usart.c: 145:     switch(receivedMex[0]){
  7311  0014F6  EF8C  F00A         	goto	i2l3281
  7312  0014FA                     i2l3273:
  7313  0014FA  FFFF               	dw	65535	; assembler added errata NOP
  7314                           
  7315                           ;usart.c: 147:             mexLength = 5;
  7316  0014FC  0E05               	movlw	5
  7317  0014FE  6E6D               	movwf	storeData@mexLength^0,c
  7318                           
  7319                           ;usart.c: 148:             break;
  7320  001500  EFA7  F00A         	goto	i2l3283
  7321  001504                     i2l3275:
  7322  001504  FFFF               	dw	65535	; assembler added errata NOP
  7323                           
  7324                           ;usart.c: 150:             mexLength = 9;
  7325  001506  0E09               	movlw	9
  7326  001508  6E6D               	movwf	storeData@mexLength^0,c
  7327                           
  7328                           ;usart.c: 151:             break;
  7329  00150A  EFA7  F00A         	goto	i2l3283
  7330  00150E                     i2l3277:
  7331  00150E  FFFF               	dw	65535	; assembler added errata NOP
  7332                           
  7333                           ;usart.c: 153:             mexLength = 1;
  7334  001510  0E01               	movlw	1
  7335  001512  6E6D               	movwf	storeData@mexLength^0,c
  7336                           
  7337                           ;usart.c: 154:             break;
  7338  001514  EFA7  F00A         	goto	i2l3283
  7339  001518                     i2l3281:
  7340  001518  FFFF               	dw	65535	; assembler added errata NOP
  7341  00151A  5045               	movf	storeData@receivedMex^0,w,c
  7342  00151C  6E08               	movwf	??i2_storeData^0,c
  7343  00151E  6A09               	clrf	(??i2_storeData+1)^0,c
  7344                           
  7345                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7346                           ; Switch size 1, requested type "simple"
  7347                           ; Number of cases is 1, Range of values is 0 to 0
  7348                           ; switch strategies available:
  7349                           ; Name         Instructions Cycles
  7350                           ; simple_byte            4     3 (average)
  7351                           ;	Chosen strategy is simple_byte
  7352  001520  5009               	movf	(??i2_storeData+1)^0,w,c
  7353  001522  0A00               	xorlw	0	; case 0
  7354  001524  B4D8               	btfsc	status,2,c
  7355  001526  EF97  F00A         	goto	i2l4613
  7356  00152A  EFA7  F00A         	goto	i2l3283
  7357  00152E                     i2l4613:
  7358  00152E  FFFF               	dw	65535	; assembler added errata NOP
  7359                           
  7360                           ; Switch size 1, requested type "simple"
  7361                           ; Number of cases is 3, Range of values is 0 to 2
  7362                           ; switch strategies available:
  7363                           ; Name         Instructions Cycles
  7364                           ; simple_byte           10     6 (average)
  7365                           ;	Chosen strategy is simple_byte
  7366  001530  5008               	movf	??i2_storeData^0,w,c
  7367  001532  0A00               	xorlw	0	; case 0
  7368  001534  B4D8               	btfsc	status,2,c
  7369  001536  EF7D  F00A         	goto	i2l3273
  7370  00153A  0A01               	xorlw	1	; case 1
  7371  00153C  B4D8               	btfsc	status,2,c
  7372  00153E  EF82  F00A         	goto	i2l3275
  7373  001542  0A03               	xorlw	3	; case 2
  7374  001544  B4D8               	btfsc	status,2,c
  7375  001546  EF87  F00A         	goto	i2l3277
  7376  00154A  EFA7  F00A         	goto	i2l3283
  7377  00154E                     i2l3283:
  7378  00154E  FFFF               	dw	65535	; assembler added errata NOP
  7379                           
  7380                           ;usart.c: 161:     if(counter >= mexLength){
  7381  001550  506D               	movf	storeData@mexLength^0,w,c
  7382  001552  5C5E               	subwf	storeData@counter^0,w,c
  7383  001554  A0D8               	btfss	status,0,c
  7384  001556  EFAF  F00A         	goto	i2u239_41
  7385  00155A  EFB2  F00A         	goto	i2u239_40
  7386  00155E                     i2u239_41:
  7387  00155E  FFFF               	dw	65535	; assembler added errata NOP
  7388  001560  EF1E  F00B         	goto	i2l588
  7389  001564                     i2u239_40:
  7390  001564  FFFF               	dw	65535	; assembler added errata NOP
  7391  001566                     
  7392                           ;usart.c: 162:         counter = 0;
  7393  001566  0E00               	movlw	0
  7394  001568  6E5E               	movwf	storeData@counter^0,c
  7395                           
  7396                           ;usart.c: 166:         switch(receivedMex[0]){
  7397  00156A  EF03  F00B         	goto	i2l3299
  7398  00156E                     i2l3287:
  7399  00156E  FFFF               	dw	65535	; assembler added errata NOP
  7400                           
  7401                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7402  001570  5061               	movf	_dataCounter^0,w,c
  7403  001572  0D04               	mullw	4
  7404  001574  0EDB               	movlw	low _dataSequence
  7405  001576  24F3               	addwf	243,w,c
  7406  001578  6ED9               	movwf	fsr2l,c
  7407  00157A  0E00               	movlw	high _dataSequence
  7408  00157C  20F4               	addwfc	prodh,w,c
  7409  00157E  6EDA               	movwf	fsr2h,c
  7410  001580  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  7411                           
  7412                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  7413  001584  5061               	movf	_dataCounter^0,w,c
  7414  001586  0D04               	mullw	4
  7415  001588  0EDC               	movlw	low (_dataSequence+1)
  7416  00158A  24F3               	addwf	243,w,c
  7417  00158C  6ED9               	movwf	fsr2l,c
  7418  00158E  0E00               	movlw	high (_dataSequence+1)
  7419  001590  20F4               	addwfc	prodh,w,c
  7420  001592  6EDA               	movwf	fsr2h,c
  7421  001594  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  7422                           
  7423                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  7424  001598  5061               	movf	_dataCounter^0,w,c
  7425  00159A  0D04               	mullw	4
  7426  00159C  0EDD               	movlw	low (_dataSequence+2)
  7427  00159E  24F3               	addwf	243,w,c
  7428  0015A0  6ED9               	movwf	fsr2l,c
  7429  0015A2  0E00               	movlw	high (_dataSequence+2)
  7430  0015A4  20F4               	addwfc	prodh,w,c
  7431  0015A6  6EDA               	movwf	fsr2h,c
  7432  0015A8  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  7433                           
  7434                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7435  0015AC  5061               	movf	_dataCounter^0,w,c
  7436  0015AE  0D04               	mullw	4
  7437  0015B0  0EDE               	movlw	low (_dataSequence+3)
  7438  0015B2  24F3               	addwf	243,w,c
  7439  0015B4  6ED9               	movwf	fsr2l,c
  7440  0015B6  0E00               	movlw	high (_dataSequence+3)
  7441  0015B8  20F4               	addwfc	prodh,w,c
  7442  0015BA  6EDA               	movwf	fsr2h,c
  7443  0015BC  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  7444  0015C0                     
  7445                           ;usart.c: 173:                 dataCounter++;
  7446  0015C0  2A61               	incf	_dataCounter^0,f,c
  7447                           
  7448                           ;usart.c: 174:                 break;
  7449  0015C2  EF1E  F00B         	goto	i2l588
  7450  0015C6                     i2l585:
  7451  0015C6  FFFF               	dw	65535	; assembler added errata NOP
  7452                           
  7453                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  7454  0015C8  C046  F0EF         	movff	storeData@receivedMex+1,_newSequenceData
  7455                           
  7456                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  7457  0015CC  C047  F0F0         	movff	storeData@receivedMex+2,_newSequenceData+1
  7458                           
  7459                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  7460  0015D0  C048  F0F1         	movff	storeData@receivedMex+3,_newSequenceData+2
  7461                           
  7462                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  7463  0015D4  C049  F0F2         	movff	storeData@receivedMex+4,_newSequenceData+3
  7464                           
  7465                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  7466  0015D8  C04A  F0F3         	movff	storeData@receivedMex+5,_newSequenceData+4
  7467                           
  7468                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  7469  0015DC  C04B  F0F4         	movff	storeData@receivedMex+6,_newSequenceData+5
  7470                           
  7471                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  7472  0015E0  C04C  F0F5         	movff	storeData@receivedMex+7,_newSequenceData+6
  7473                           
  7474                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  7475  0015E4  C04D  F0F6         	movff	storeData@receivedMex+8,_newSequenceData+7
  7476  0015E8                     
  7477                           ;usart.c: 186:                 _newSequence = 1;
  7478  0015E8  0E01               	movlw	1
  7479  0015EA  6E5F               	movwf	__newSequence^0,c
  7480                           
  7481                           ;usart.c: 187:                 break;
  7482  0015EC  EF1E  F00B         	goto	i2l588
  7483  0015F0                     i2l3293:
  7484  0015F0  FFFF               	dw	65535	; assembler added errata NOP
  7485                           
  7486                           ;usart.c: 190:                 _fatalError = 1;
  7487  0015F2  0E01               	movlw	1
  7488  0015F4  6E60               	movwf	__fatalError^0,c
  7489                           
  7490                           ;usart.c: 191:                 break;
  7491  0015F6  EF1E  F00B         	goto	i2l588
  7492  0015FA                     i2l3295:
  7493  0015FA  FFFF               	dw	65535	; assembler added errata NOP
  7494                           
  7495                           ;usart.c: 194:                 printError(8);
  7496  0015FC  0E08               	movlw	8
  7497  0015FE  ECE8  F00C         	call	i2_printError
  7498                           
  7499                           ;usart.c: 195:                 break;
  7500  001602  EF1E  F00B         	goto	i2l588
  7501  001606                     i2l3299:
  7502  001606  FFFF               	dw	65535	; assembler added errata NOP
  7503  001608  5045               	movf	storeData@receivedMex^0,w,c
  7504  00160A  6E08               	movwf	??i2_storeData^0,c
  7505  00160C  6A09               	clrf	(??i2_storeData+1)^0,c
  7506                           
  7507                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7508                           ; Switch size 1, requested type "simple"
  7509                           ; Number of cases is 1, Range of values is 0 to 0
  7510                           ; switch strategies available:
  7511                           ; Name         Instructions Cycles
  7512                           ; simple_byte            4     3 (average)
  7513                           ;	Chosen strategy is simple_byte
  7514  00160E  5009               	movf	(??i2_storeData+1)^0,w,c
  7515  001610  0A00               	xorlw	0	; case 0
  7516  001612  B4D8               	btfsc	status,2,c
  7517  001614  EF0E  F00B         	goto	i2l4615
  7518  001618  EFFD  F00A         	goto	i2l3295
  7519  00161C                     i2l4615:
  7520  00161C  FFFF               	dw	65535	; assembler added errata NOP
  7521                           
  7522                           ; Switch size 1, requested type "simple"
  7523                           ; Number of cases is 3, Range of values is 0 to 2
  7524                           ; switch strategies available:
  7525                           ; Name         Instructions Cycles
  7526                           ; simple_byte           10     6 (average)
  7527                           ;	Chosen strategy is simple_byte
  7528  00161E  5008               	movf	??i2_storeData^0,w,c
  7529  001620  0A00               	xorlw	0	; case 0
  7530  001622  B4D8               	btfsc	status,2,c
  7531  001624  EFB7  F00A         	goto	i2l3287
  7532  001628  0A01               	xorlw	1	; case 1
  7533  00162A  B4D8               	btfsc	status,2,c
  7534  00162C  EFE3  F00A         	goto	i2l585
  7535  001630  0A03               	xorlw	3	; case 2
  7536  001632  B4D8               	btfsc	status,2,c
  7537  001634  EFF8  F00A         	goto	i2l3293
  7538  001638  EFFD  F00A         	goto	i2l3295
  7539  00163C                     i2l588:
  7540  00163C  FFFF               	dw	65535	; assembler added errata NOP
  7541  00163E  0012               	return		;funcret
  7542  001640  FFFF               	dw	65535	; errata NOP
  7543  001642                     __end_ofi2_storeData:
  7544                           	callstack 0
  7545                           
  7546 ;; *************** function _writeTM0 *****************
  7547 ;; Defined at:
  7548 ;;		line 21 in file "motors.c"
  7549 ;; Parameters:    Size  Location     Type
  7550 ;;		None
  7551 ;; Auto vars:     Size  Location     Type
  7552 ;;		None
  7553 ;; Return value:  Size  Location     Type
  7554 ;;                  1    wreg      void 
  7555 ;; Registers used:
  7556 ;;		wreg, status,2
  7557 ;; Tracked objects:
  7558 ;;		On entry : 0/0
  7559 ;;		On exit  : 0/0
  7560 ;;		Unchanged: 0/0
  7561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7562 ;;      Params:         0       0       0       0       0       0       0
  7563 ;;      Locals:         0       0       0       0       0       0       0
  7564 ;;      Temps:          0       0       0       0       0       0       0
  7565 ;;      Totals:         0       0       0       0       0       0       0
  7566 ;;Total ram usage:        0 bytes
  7567 ;; Hardware stack levels used:    1
  7568 ;; This function calls:
  7569 ;;		Nothing
  7570 ;; This function is called by:
  7571 ;;		_isr
  7572 ;; This function uses a non-reentrant model
  7573 ;;
  7574                           
  7575                           	psect	text46
  7576  002556                     __ptext46:
  7577                           	callstack 0
  7578  002556                     _writeTM0:
  7579                           	callstack 0
  7580  002556  FFFF               	dw	65535	; assembler added errata NOP
  7581  002558                     
  7582                           ;motors.c: 22:     tm0Error = 1;
  7583  002558  0E00               	movlw	0
  7584  00255A  6E5C               	movwf	(_tm0Error+1)^0,c
  7585  00255C  0E01               	movlw	1
  7586  00255E  6E5B               	movwf	_tm0Error^0,c
  7587  002560  0012               	return		;funcret
  7588  002562  FFFF               	dw	65535	; errata NOP
  7589  002564                     __end_of_writeTM0:
  7590                           	callstack 0
  7591                           
  7592 ;; *************** function _whatsTM0Limit *****************
  7593 ;; Defined at:
  7594 ;;		line 35 in file "motors.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;		None
  7597 ;; Auto vars:     Size  Location     Type
  7598 ;;		None
  7599 ;; Return value:  Size  Location     Type
  7600 ;;                  1    wreg      unsigned char 
  7601 ;; Registers used:
  7602 ;;		wreg, status,2
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7608 ;;      Params:         0       0       0       0       0       0       0
  7609 ;;      Locals:         0       0       0       0       0       0       0
  7610 ;;      Temps:          0       0       0       0       0       0       0
  7611 ;;      Totals:         0       0       0       0       0       0       0
  7612 ;;Total ram usage:        0 bytes
  7613 ;; Hardware stack levels used:    1
  7614 ;; This function calls:
  7615 ;;		Nothing
  7616 ;; This function is called by:
  7617 ;;		_isr
  7618 ;; This function uses a non-reentrant model
  7619 ;;
  7620                           
  7621                           	psect	text47
  7622  002606                     __ptext47:
  7623                           	callstack 0
  7624  002606                     _whatsTM0Limit:
  7625                           	callstack 0
  7626  002606  FFFF               	dw	65535	; assembler added errata NOP
  7627  002608                     
  7628                           ;motors.c: 36:     return(tm0Limit);
  7629  002608  5068               	movf	_tm0Limit^0,w,c
  7630  00260A  0012               	return		;funcret
  7631  00260C  FFFF               	dw	65535	; errata NOP
  7632  00260E                     __end_of_whatsTM0Limit:
  7633                           	callstack 0
  7634                           
  7635 ;; *************** function _toggleStep *****************
  7636 ;; Defined at:
  7637 ;;		line 94 in file "pwm.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;		None
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;		None
  7642 ;; Return value:  Size  Location     Type
  7643 ;;                  1    wreg      void 
  7644 ;; Registers used:
  7645 ;;		wreg, status,2
  7646 ;; Tracked objects:
  7647 ;;		On entry : 0/0
  7648 ;;		On exit  : 0/0
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7651 ;;      Params:         0       0       0       0       0       0       0
  7652 ;;      Locals:         0       0       0       0       0       0       0
  7653 ;;      Temps:          0       0       0       0       0       0       0
  7654 ;;      Totals:         0       0       0       0       0       0       0
  7655 ;;Total ram usage:        0 bytes
  7656 ;; Hardware stack levels used:    1
  7657 ;; This function calls:
  7658 ;;		Nothing
  7659 ;; This function is called by:
  7660 ;;		_isr
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           	psect	text48
  7665  0025C8                     __ptext48:
  7666                           	callstack 0
  7667  0025C8                     _toggleStep:
  7668                           	callstack 0
  7669  0025C8  FFFF               	dw	65535	; assembler added errata NOP
  7670  0025CA                     
  7671                           ;pwm.c: 95:     stepToggle = 1;
  7672  0025CA  0E01               	movlw	1
  7673  0025CC  6E66               	movwf	_stepToggle^0,c	;volatile
  7674  0025CE  0012               	return		;funcret
  7675  0025D0  FFFF               	dw	65535	; errata NOP
  7676  0025D2                     __end_of_toggleStep:
  7677                           	callstack 0
  7678                           
  7679 ;; *************** function _setTouchRel *****************
  7680 ;; Defined at:
  7681 ;;		line 86 in file "adc.c"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;		None
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;		None
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  1    wreg      void 
  7688 ;; Registers used:
  7689 ;;		wreg, status,2
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7695 ;;      Params:         0       0       0       0       0       0       0
  7696 ;;      Locals:         0       0       0       0       0       0       0
  7697 ;;      Temps:          0       0       0       0       0       0       0
  7698 ;;      Totals:         0       0       0       0       0       0       0
  7699 ;;Total ram usage:        0 bytes
  7700 ;; Hardware stack levels used:    1
  7701 ;; This function calls:
  7702 ;;		Nothing
  7703 ;; This function is called by:
  7704 ;;		_isr
  7705 ;; This function uses a non-reentrant model
  7706 ;;
  7707                           
  7708                           	psect	text49
  7709  0025D2                     __ptext49:
  7710                           	callstack 0
  7711  0025D2                     _setTouchRel:
  7712                           	callstack 0
  7713  0025D2  FFFF               	dw	65535	; assembler added errata NOP
  7714  0025D4                     
  7715                           ;adc.c: 87:     touch_rel = 1;
  7716  0025D4  0E01               	movlw	1
  7717  0025D6  6E65               	movwf	_touch_rel^0,c	;volatile
  7718  0025D8  0012               	return		;funcret
  7719  0025DA  FFFF               	dw	65535	; errata NOP
  7720  0025DC                     __end_of_setTouchRel:
  7721                           	callstack 0
  7722                           
  7723 ;; *************** function _setThermRel *****************
  7724 ;; Defined at:
  7725 ;;		line 79 in file "adc.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;		None
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;		None
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  1    wreg      void 
  7732 ;; Registers used:
  7733 ;;		wreg, status,2
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7739 ;;      Params:         0       0       0       0       0       0       0
  7740 ;;      Locals:         0       0       0       0       0       0       0
  7741 ;;      Temps:          0       0       0       0       0       0       0
  7742 ;;      Totals:         0       0       0       0       0       0       0
  7743 ;;Total ram usage:        0 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; This function calls:
  7746 ;;		Nothing
  7747 ;; This function is called by:
  7748 ;;		_isr
  7749 ;; This function uses a non-reentrant model
  7750 ;;
  7751                           
  7752                           	psect	text50
  7753  0025DC                     __ptext50:
  7754                           	callstack 0
  7755  0025DC                     _setThermRel:
  7756                           	callstack 0
  7757  0025DC  FFFF               	dw	65535	; assembler added errata NOP
  7758  0025DE                     
  7759                           ;adc.c: 80:     therm_rel = 1;
  7760  0025DE  0E01               	movlw	1
  7761  0025E0  6E64               	movwf	_therm_rel^0,c	;volatile
  7762  0025E2  0012               	return		;funcret
  7763  0025E4  FFFF               	dw	65535	; errata NOP
  7764  0025E6                     __end_of_setThermRel:
  7765                           	callstack 0
  7766                           
  7767 ;; *************** function _retPeriod *****************
  7768 ;; Defined at:
  7769 ;;		line 102 in file "pwm.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;		None
  7772 ;; Auto vars:     Size  Location     Type
  7773 ;;		None
  7774 ;; Return value:  Size  Location     Type
  7775 ;;                  2    0[COMRAM] unsigned int 
  7776 ;; Registers used:
  7777 ;;		None
  7778 ;; Tracked objects:
  7779 ;;		On entry : 0/0
  7780 ;;		On exit  : 0/0
  7781 ;;		Unchanged: 0/0
  7782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7783 ;;      Params:         2       0       0       0       0       0       0
  7784 ;;      Locals:         0       0       0       0       0       0       0
  7785 ;;      Temps:          0       0       0       0       0       0       0
  7786 ;;      Totals:         2       0       0       0       0       0       0
  7787 ;;Total ram usage:        2 bytes
  7788 ;; Hardware stack levels used:    1
  7789 ;; This function calls:
  7790 ;;		Nothing
  7791 ;; This function is called by:
  7792 ;;		_isr
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text51
  7797  002564                     __ptext51:
  7798                           	callstack 0
  7799  002564                     _retPeriod:
  7800                           	callstack 0
  7801  002564  FFFF               	dw	65535	; assembler added errata NOP
  7802  002566                     
  7803                           ;pwm.c: 103:     return pwmPeriod;
  7804  002566  C055  F001         	movff	_pwmPeriod,?_retPeriod
  7805  00256A  C056  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7806  00256E  0012               	return		;funcret
  7807  002570  FFFF               	dw	65535	; errata NOP
  7808  002572                     __end_of_retPeriod:
  7809                           	callstack 0
  7810                           
  7811 ;; *************** function _increaseStep *****************
  7812 ;; Defined at:
  7813 ;;		line 86 in file "pwm.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;		None
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;		None
  7818 ;; Return value:  Size  Location     Type
  7819 ;;                  1    wreg      void 
  7820 ;; Registers used:
  7821 ;;		status,2, status,0
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7827 ;;      Params:         0       0       0       0       0       0       0
  7828 ;;      Locals:         0       0       0       0       0       0       0
  7829 ;;      Temps:          0       0       0       0       0       0       0
  7830 ;;      Totals:         0       0       0       0       0       0       0
  7831 ;;Total ram usage:        0 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; This function calls:
  7834 ;;		Nothing
  7835 ;; This function is called by:
  7836 ;;		_isr
  7837 ;; This function uses a non-reentrant model
  7838 ;;
  7839                           
  7840                           	psect	text52
  7841  00260E                     __ptext52:
  7842                           	callstack 0
  7843  00260E                     _increaseStep:
  7844                           	callstack 0
  7845  00260E  FFFF               	dw	65535	; assembler added errata NOP
  7846  002610                     
  7847                           ;pwm.c: 87:     pwmStep++;
  7848  002610  2A67               	incf	_pwmStep^0,f,c	;volatile
  7849  002612  0012               	return		;funcret
  7850  002614  FFFF               	dw	65535	; errata NOP
  7851  002616                     __end_of_increaseStep:
  7852                           	callstack 0
  7853                           
  7854 ;; *************** function _fatalError *****************
  7855 ;; Defined at:
  7856 ;;		line 100 in file "usart.c"
  7857 ;; Parameters:    Size  Location     Type
  7858 ;;		None
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;		None
  7861 ;; Return value:  Size  Location     Type
  7862 ;;                  1    wreg      unsigned char 
  7863 ;; Registers used:
  7864 ;;		wreg, status,2
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7870 ;;      Params:         0       0       0       0       0       0       0
  7871 ;;      Locals:         0       0       0       0       0       0       0
  7872 ;;      Temps:          0       0       0       0       0       0       0
  7873 ;;      Totals:         0       0       0       0       0       0       0
  7874 ;;Total ram usage:        0 bytes
  7875 ;; Hardware stack levels used:    1
  7876 ;; This function calls:
  7877 ;;		Nothing
  7878 ;; This function is called by:
  7879 ;;		_isr
  7880 ;; This function uses a non-reentrant model
  7881 ;;
  7882                           
  7883                           	psect	text53
  7884  002616                     __ptext53:
  7885                           	callstack 0
  7886  002616                     _fatalError:
  7887                           	callstack 0
  7888  002616  FFFF               	dw	65535	; assembler added errata NOP
  7889  002618                     
  7890                           ;usart.c: 101:     return _fatalError;
  7891  002618  5060               	movf	__fatalError^0,w,c
  7892  00261A  0012               	return		;funcret
  7893  00261C  FFFF               	dw	65535	; errata NOP
  7894  00261E                     __end_of_fatalError:
  7895                           	callstack 0
  7896                           
  7897 ;; *************** function _abortAll *****************
  7898 ;; Defined at:
  7899 ;;		line 629 in file "motors.c"
  7900 ;; Parameters:    Size  Location     Type
  7901 ;;		None
  7902 ;; Auto vars:     Size  Location     Type
  7903 ;;		None
  7904 ;; Return value:  Size  Location     Type
  7905 ;;                  1    wreg      void 
  7906 ;; Registers used:
  7907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7908 ;; Tracked objects:
  7909 ;;		On entry : 0/0
  7910 ;;		On exit  : 0/0
  7911 ;;		Unchanged: 0/0
  7912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7913 ;;      Params:         0       0       0       0       0       0       0
  7914 ;;      Locals:         0       0       0       0       0       0       0
  7915 ;;      Temps:          0       0       0       0       0       0       0
  7916 ;;      Totals:         0       0       0       0       0       0       0
  7917 ;;Total ram usage:        0 bytes
  7918 ;; Hardware stack levels used:    1
  7919 ;; Hardware stack levels required when called:    2
  7920 ;; This function calls:
  7921 ;;		i2_enableMotor
  7922 ;;		i2_printError
  7923 ;; This function is called by:
  7924 ;;		_isr
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           	psect	text54
  7929  0023F0                     __ptext54:
  7930                           	callstack 0
  7931  0023F0                     _abortAll:
  7932                           	callstack 0
  7933  0023F0  FFFF               	dw	65535	; assembler added errata NOP
  7934  0023F2                     
  7935                           ;motors.c: 631:     enableMotor(1, 0);
  7936  0023F2  0E00               	movlw	0
  7937  0023F4  6E01               	movwf	i2enableMotor@motor^0,c
  7938  0023F6  0E01               	movlw	1
  7939  0023F8  ECF5  F010         	call	i2_enableMotor
  7940                           
  7941                           ;motors.c: 632:     enableMotor(1, 1);
  7942  0023FC  0E01               	movlw	1
  7943  0023FE  6E01               	movwf	i2enableMotor@motor^0,c
  7944  002400  0E01               	movlw	1
  7945  002402  ECF5  F010         	call	i2_enableMotor
  7946                           
  7947                           ;motors.c: 633:     enableMotor(1, 2);
  7948  002406  0E02               	movlw	2
  7949  002408  6E01               	movwf	i2enableMotor@motor^0,c
  7950  00240A  0E01               	movlw	1
  7951  00240C  ECF5  F010         	call	i2_enableMotor
  7952  002410                     
  7953                           ;motors.c: 635:     printError(7);
  7954  002410  0E07               	movlw	7
  7955  002412  ECE8  F00C         	call	i2_printError
  7956  002416                     i2l240:
  7957  002416  FFFF               	dw	65535	; assembler added errata NOP
  7958  002418  EF0B  F012         	goto	i2l240
  7959  00241C  0012               	return		;funcret
  7960  00241E  FFFF               	dw	65535	; errata NOP
  7961  002420                     __end_of_abortAll:
  7962                           	callstack 0
  7963                           
  7964 ;; *************** function i2_printError *****************
  7965 ;; Defined at:
  7966 ;;		line 53 in file "usart.c"
  7967 ;; Parameters:    Size  Location     Type
  7968 ;;  errCode         1    wreg     unsigned char 
  7969 ;; Auto vars:     Size  Location     Type
  7970 ;;  errCode         1    6[COMRAM] unsigned char 
  7971 ;; Return value:  Size  Location     Type
  7972 ;;                  1    wreg      void 
  7973 ;; Registers used:
  7974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7975 ;; Tracked objects:
  7976 ;;		On entry : 0/0
  7977 ;;		On exit  : 0/0
  7978 ;;		Unchanged: 0/0
  7979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7980 ;;      Params:         0       0       0       0       0       0       0
  7981 ;;      Locals:         1       0       0       0       0       0       0
  7982 ;;      Temps:          2       0       0       0       0       0       0
  7983 ;;      Totals:         3       0       0       0       0       0       0
  7984 ;;Total ram usage:        3 bytes
  7985 ;; Hardware stack levels used:    1
  7986 ;; Hardware stack levels required when called:    1
  7987 ;; This function calls:
  7988 ;;		i2_uartTx
  7989 ;; This function is called by:
  7990 ;;		_abortAll
  7991 ;;		i2_storeData
  7992 ;; This function uses a non-reentrant model
  7993 ;;
  7994                           
  7995                           	psect	text55
  7996  0019D0                     __ptext55:
  7997                           	callstack 0
  7998  0019D0                     i2_printError:
  7999                           	callstack 0
  8000  0019D0  FFFF               	dw	65535	; assembler added errata NOP
  8001                           
  8002                           ;incstack = 0
  8003                           ;i2printError@errCode stored from wreg
  8004  0019D2  6E07               	movwf	i2printError@errCode^0,c
  8005  0019D4                     
  8006                           ;usart.c: 55:     switch(errCode){
  8007  0019D4  EF44  F00D         	goto	i2l3011
  8008  0019D8                     i2l2993:
  8009  0019D8  FFFF               	dw	65535	; assembler added errata NOP
  8010                           
  8011                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  8012  0019DA  0EA5               	movlw	low _errString_Feed
  8013  0019DC  6E01               	movwf	i2uartTx@ptr^0,c
  8014  0019DE  0E00               	movlw	high _errString_Feed
  8015  0019E0  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8016  0019E2  0E1E               	movlw	30
  8017  0019E4  6E03               	movwf	i2uartTx@length^0,c
  8018  0019E6  ECB4  F011         	call	i2_uartTx	;wreg free
  8019                           
  8020                           ;usart.c: 58:             break;
  8021  0019EA  EF73  F00D         	goto	i2l544
  8022  0019EE                     i2l2995:
  8023  0019EE  FFFF               	dw	65535	; assembler added errata NOP
  8024                           
  8025                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  8026  0019F0  0E5E               	movlw	low _errString_ZEND
  8027  0019F2  6E01               	movwf	i2uartTx@ptr^0,c
  8028  0019F4  0E01               	movlw	high _errString_ZEND
  8029  0019F6  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8030  0019F8  0E29               	movlw	41
  8031  0019FA  6E03               	movwf	i2uartTx@length^0,c
  8032  0019FC  ECB4  F011         	call	i2_uartTx	;wreg free
  8033                           
  8034                           ;usart.c: 61:             break;
  8035  001A00  EF73  F00D         	goto	i2l544
  8036  001A04                     i2l2997:
  8037  001A04  FFFF               	dw	65535	; assembler added errata NOP
  8038                           
  8039                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  8040  001A06  0E87               	movlw	low _errString_Reset
  8041  001A08  6E01               	movwf	i2uartTx@ptr^0,c
  8042  001A0A  0E01               	movlw	high _errString_Reset
  8043  001A0C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8044  001A0E  0E28               	movlw	40
  8045  001A10  6E03               	movwf	i2uartTx@length^0,c
  8046  001A12  ECB4  F011         	call	i2_uartTx	;wreg free
  8047                           
  8048                           ;usart.c: 64:             break;
  8049  001A16  EF73  F00D         	goto	i2l544
  8050  001A1A                     i2l2999:
  8051  001A1A  FFFF               	dw	65535	; assembler added errata NOP
  8052                           
  8053                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  8054  001A1C  0E35               	movlw	low _errString_Point
  8055  001A1E  6E01               	movwf	i2uartTx@ptr^0,c
  8056  001A20  0E01               	movlw	high _errString_Point
  8057  001A22  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8058  001A24  0E29               	movlw	41
  8059  001A26  6E03               	movwf	i2uartTx@length^0,c
  8060  001A28  ECB4  F011         	call	i2_uartTx	;wreg free
  8061                           
  8062                           ;usart.c: 67:             break;
  8063  001A2C  EF73  F00D         	goto	i2l544
  8064  001A30                     i2l3001:
  8065  001A30  FFFF               	dw	65535	; assembler added errata NOP
  8066                           
  8067                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  8068  001A32  0E84               	movlw	low _errString_Bound
  8069  001A34  6E01               	movwf	i2uartTx@ptr^0,c
  8070  001A36  0E00               	movlw	high _errString_Bound
  8071  001A38  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8072  001A3A  0E21               	movlw	33
  8073  001A3C  6E03               	movwf	i2uartTx@length^0,c
  8074  001A3E  ECB4  F011         	call	i2_uartTx	;wreg free
  8075                           
  8076                           ;usart.c: 70:             break;
  8077  001A42  EF73  F00D         	goto	i2l544
  8078  001A46                     i2l3003:
  8079  001A46  FFFF               	dw	65535	; assembler added errata NOP
  8080                           
  8081                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  8082  001A48  0E00               	movlw	low _errString_PointZ
  8083  001A4A  6E01               	movwf	i2uartTx@ptr^0,c
  8084  001A4C  0E01               	movlw	high _errString_PointZ
  8085  001A4E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8086  001A50  0E35               	movlw	53
  8087  001A52  6E03               	movwf	i2uartTx@length^0,c
  8088  001A54  ECB4  F011         	call	i2_uartTx	;wreg free
  8089                           
  8090                           ;usart.c: 73:             break;
  8091  001A58  EF73  F00D         	goto	i2l544
  8092  001A5C                     i2l3005:
  8093  001A5C  FFFF               	dw	65535	; assembler added errata NOP
  8094                           
  8095                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  8096  001A5E  0EAF               	movlw	low _errString_Fatal
  8097  001A60  6E01               	movwf	i2uartTx@ptr^0,c
  8098  001A62  0E01               	movlw	high _errString_Fatal
  8099  001A64  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8100  001A66  0E27               	movlw	39
  8101  001A68  6E03               	movwf	i2uartTx@length^0,c
  8102  001A6A  ECB4  F011         	call	i2_uartTx	;wreg free
  8103                           
  8104                           ;usart.c: 76:             break;
  8105  001A6E  EF73  F00D         	goto	i2l544
  8106  001A72                     i2l3007:
  8107  001A72  FFFF               	dw	65535	; assembler added errata NOP
  8108                           
  8109                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  8110  001A74  0EC3               	movlw	low _errString_Command
  8111  001A76  6E01               	movwf	i2uartTx@ptr^0,c
  8112  001A78  0E00               	movlw	high _errString_Command
  8113  001A7A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8114  001A7C  0E18               	movlw	24
  8115  001A7E  6E03               	movwf	i2uartTx@length^0,c
  8116  001A80  ECB4  F011         	call	i2_uartTx	;wreg free
  8117                           
  8118                           ;usart.c: 79:             break;
  8119  001A84  EF73  F00D         	goto	i2l544
  8120  001A88                     i2l3011:
  8121  001A88  FFFF               	dw	65535	; assembler added errata NOP
  8122  001A8A  5007               	movf	i2printError@errCode^0,w,c
  8123  001A8C  6E05               	movwf	??i2_printError^0,c
  8124  001A8E  6A06               	clrf	(??i2_printError+1)^0,c
  8125                           
  8126                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8127                           ; Switch size 1, requested type "simple"
  8128                           ; Number of cases is 1, Range of values is 0 to 0
  8129                           ; switch strategies available:
  8130                           ; Name         Instructions Cycles
  8131                           ; simple_byte            4     3 (average)
  8132                           ;	Chosen strategy is simple_byte
  8133  001A90  5006               	movf	(??i2_printError+1)^0,w,c
  8134  001A92  0A00               	xorlw	0	; case 0
  8135  001A94  B4D8               	btfsc	status,2,c
  8136  001A96  EF4F  F00D         	goto	i2l4617
  8137  001A9A  EF73  F00D         	goto	i2l544
  8138  001A9E                     i2l4617:
  8139  001A9E  FFFF               	dw	65535	; assembler added errata NOP
  8140                           
  8141                           ; Switch size 1, requested type "simple"
  8142                           ; Number of cases is 8, Range of values is 1 to 8
  8143                           ; switch strategies available:
  8144                           ; Name         Instructions Cycles
  8145                           ; simple_byte           25    13 (average)
  8146                           ;	Chosen strategy is simple_byte
  8147  001AA0  5005               	movf	??i2_printError^0,w,c
  8148  001AA2  0A01               	xorlw	1	; case 1
  8149  001AA4  B4D8               	btfsc	status,2,c
  8150  001AA6  EFEC  F00C         	goto	i2l2993
  8151  001AAA  0A03               	xorlw	3	; case 2
  8152  001AAC  B4D8               	btfsc	status,2,c
  8153  001AAE  EFF7  F00C         	goto	i2l2995
  8154  001AB2  0A01               	xorlw	1	; case 3
  8155  001AB4  B4D8               	btfsc	status,2,c
  8156  001AB6  EF02  F00D         	goto	i2l2997
  8157  001ABA  0A07               	xorlw	7	; case 4
  8158  001ABC  B4D8               	btfsc	status,2,c
  8159  001ABE  EF0D  F00D         	goto	i2l2999
  8160  001AC2  0A01               	xorlw	1	; case 5
  8161  001AC4  B4D8               	btfsc	status,2,c
  8162  001AC6  EF18  F00D         	goto	i2l3001
  8163  001ACA  0A03               	xorlw	3	; case 6
  8164  001ACC  B4D8               	btfsc	status,2,c
  8165  001ACE  EF23  F00D         	goto	i2l3003
  8166  001AD2  0A01               	xorlw	1	; case 7
  8167  001AD4  B4D8               	btfsc	status,2,c
  8168  001AD6  EF2E  F00D         	goto	i2l3005
  8169  001ADA  0A0F               	xorlw	15	; case 8
  8170  001ADC  B4D8               	btfsc	status,2,c
  8171  001ADE  EF39  F00D         	goto	i2l3007
  8172  001AE2  EF73  F00D         	goto	i2l544
  8173  001AE6                     i2l544:
  8174  001AE6  FFFF               	dw	65535	; assembler added errata NOP
  8175  001AE8  0012               	return		;funcret
  8176  001AEA  FFFF               	dw	65535	; errata NOP
  8177  001AEC                     __end_ofi2_printError:
  8178                           	callstack 0
  8179                           
  8180 ;; *************** function i2_uartTx *****************
  8181 ;; Defined at:
  8182 ;;		line 221 in file "usart.c"
  8183 ;; Parameters:    Size  Location     Type
  8184 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  8185 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  8186 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  8187 ;;  length          1    2[COMRAM] unsigned char 
  8188 ;; Auto vars:     Size  Location     Type
  8189 ;;  i               1    3[COMRAM] unsigned char 
  8190 ;; Return value:  Size  Location     Type
  8191 ;;                  1    wreg      void 
  8192 ;; Registers used:
  8193 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8194 ;; Tracked objects:
  8195 ;;		On entry : 0/0
  8196 ;;		On exit  : 0/0
  8197 ;;		Unchanged: 0/0
  8198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8199 ;;      Params:         3       0       0       0       0       0       0
  8200 ;;      Locals:         1       0       0       0       0       0       0
  8201 ;;      Temps:          0       0       0       0       0       0       0
  8202 ;;      Totals:         4       0       0       0       0       0       0
  8203 ;;Total ram usage:        4 bytes
  8204 ;; Hardware stack levels used:    1
  8205 ;; This function calls:
  8206 ;;		Nothing
  8207 ;; This function is called by:
  8208 ;;		i2_printError
  8209 ;; This function uses a non-reentrant model
  8210 ;;
  8211                           
  8212                           	psect	text56
  8213  002368                     __ptext56:
  8214                           	callstack 0
  8215  002368                     i2_uartTx:
  8216                           	callstack 0
  8217  002368  FFFF               	dw	65535	; assembler added errata NOP
  8218  00236A                     
  8219                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  8220  00236A  0E01               	movlw	1
  8221  00236C  6E04               	movwf	i2uartTx@i^0,c
  8222  00236E  EFCD  F011         	goto	i2l2667
  8223  002372                     i2l2663:
  8224  002372  FFFF               	dw	65535	; assembler added errata NOP
  8225                           
  8226                           ;usart.c: 226:         TXREG = *ptr;
  8227  002374  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  8228  002378  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  8229  00237C  50DF               	movf	indf2,w,c
  8230  00237E  6EAD               	movwf	173,c	;volatile
  8231  002380                     i2l599:
  8232  002380  FFFF               	dw	65535	; assembler added errata NOP
  8233  002382  A2AC               	btfss	172,1,c	;volatile
  8234  002384  EFC6  F011         	goto	i2u173_41
  8235  002388  EFC9  F011         	goto	i2u173_40
  8236  00238C                     i2u173_41:
  8237  00238C  FFFF               	dw	65535	; assembler added errata NOP
  8238  00238E  EFC0  F011         	goto	i2l599
  8239  002392                     i2u173_40:
  8240  002392  FFFF               	dw	65535	; assembler added errata NOP
  8241  002394                     
  8242                           ;usart.c: 230:         ptr++;
  8243  002394  4A01               	infsnz	i2uartTx@ptr^0,f,c
  8244  002396  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  8245                           
  8246                           ;usart.c: 231:     }
  8247  002398  2A04               	incf	i2uartTx@i^0,f,c
  8248  00239A                     i2l2667:
  8249  00239A  FFFF               	dw	65535	; assembler added errata NOP
  8250  00239C  5003               	movf	i2uartTx@length^0,w,c
  8251  00239E  5C04               	subwf	i2uartTx@i^0,w,c
  8252  0023A0  A0D8               	btfss	status,0,c
  8253  0023A2  EFD5  F011         	goto	i2u174_41
  8254  0023A6  EFD8  F011         	goto	i2u174_40
  8255  0023AA                     i2u174_41:
  8256  0023AA  FFFF               	dw	65535	; assembler added errata NOP
  8257  0023AC  EFB9  F011         	goto	i2l2663
  8258  0023B0                     i2u174_40:
  8259  0023B0  FFFF               	dw	65535	; assembler added errata NOP
  8260  0023B2  0012               	return		;funcret
  8261  0023B4  FFFF               	dw	65535	; errata NOP
  8262  0023B6                     __end_ofi2_uartTx:
  8263                           	callstack 0
  8264                           
  8265 ;; *************** function i2_enableMotor *****************
  8266 ;; Defined at:
  8267 ;;		line 94 in file "motors.c"
  8268 ;; Parameters:    Size  Location     Type
  8269 ;;  enable          1    wreg     unsigned char 
  8270 ;;  motor           1    0[COMRAM] unsigned char 
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;  enable          1    3[COMRAM] unsigned char 
  8273 ;; Return value:  Size  Location     Type
  8274 ;;                  1    wreg      void 
  8275 ;; Registers used:
  8276 ;;		wreg, status,2, status,0
  8277 ;; Tracked objects:
  8278 ;;		On entry : 0/0
  8279 ;;		On exit  : 0/0
  8280 ;;		Unchanged: 0/0
  8281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8282 ;;      Params:         1       0       0       0       0       0       0
  8283 ;;      Locals:         1       0       0       0       0       0       0
  8284 ;;      Temps:          2       0       0       0       0       0       0
  8285 ;;      Totals:         4       0       0       0       0       0       0
  8286 ;;Total ram usage:        4 bytes
  8287 ;; Hardware stack levels used:    1
  8288 ;; This function calls:
  8289 ;;		Nothing
  8290 ;; This function is called by:
  8291 ;;		_abortAll
  8292 ;; This function uses a non-reentrant model
  8293 ;;
  8294                           
  8295                           	psect	text57
  8296  0021EA                     __ptext57:
  8297                           	callstack 0
  8298  0021EA                     i2_enableMotor:
  8299                           	callstack 0
  8300  0021EA  FFFF               	dw	65535	; assembler added errata NOP
  8301                           
  8302                           ;incstack = 0
  8303                           ;i2enableMotor@enable stored from wreg
  8304  0021EC  6E04               	movwf	i2enableMotor@enable^0,c
  8305  0021EE                     
  8306                           ;motors.c: 95:     switch(motor){
  8307  0021EE  EF11  F011         	goto	i2l2985
  8308  0021F2                     i2l2977:
  8309  0021F2  FFFF               	dw	65535	; assembler added errata NOP
  8310                           
  8311                           ;motors.c: 97:             LATAbits.LATA3 = enable;
  8312  0021F4  B004               	btfsc	i2enableMotor@enable^0,0,c
  8313  0021F6  D002               	bra	i2u218_45
  8314  0021F8  9689               	bcf	137,3,c	;volatile
  8315  0021FA  D001               	bra	i2u218_46
  8316  0021FC                     i2u218_45:
  8317  0021FC  8689               	bsf	137,3,c	;volatile
  8318  0021FE                     i2u218_46:
  8319                           
  8320                           ;motors.c: 98:             break;
  8321  0021FE  EF2C  F011         	goto	i2l94
  8322  002202                     i2l2979:
  8323  002202  FFFF               	dw	65535	; assembler added errata NOP
  8324                           
  8325                           ;motors.c: 100:             LATBbits.LATB5 = enable;
  8326  002204  B004               	btfsc	i2enableMotor@enable^0,0,c
  8327  002206  D002               	bra	i2u219_45
  8328  002208  9A8A               	bcf	138,5,c	;volatile
  8329  00220A  D001               	bra	i2u219_46
  8330  00220C                     i2u219_45:
  8331  00220C  8A8A               	bsf	138,5,c	;volatile
  8332  00220E                     i2u219_46:
  8333                           
  8334                           ;motors.c: 101:             break;
  8335  00220E  EF2C  F011         	goto	i2l94
  8336  002212                     i2l2981:
  8337  002212  FFFF               	dw	65535	; assembler added errata NOP
  8338                           
  8339                           ;motors.c: 103:             LATCbits.LATC3 = enable;
  8340  002214  B004               	btfsc	i2enableMotor@enable^0,0,c
  8341  002216  D002               	bra	i2u220_45
  8342  002218  968B               	bcf	139,3,c	;volatile
  8343  00221A  D001               	bra	i2u220_46
  8344  00221C                     i2u220_45:
  8345  00221C  868B               	bsf	139,3,c	;volatile
  8346  00221E                     i2u220_46:
  8347                           
  8348                           ;motors.c: 104:             break;
  8349  00221E  EF2C  F011         	goto	i2l94
  8350  002222                     i2l2985:
  8351  002222  FFFF               	dw	65535	; assembler added errata NOP
  8352  002224  5001               	movf	i2enableMotor@motor^0,w,c
  8353  002226  6E02               	movwf	??i2_enableMotor^0,c
  8354  002228  6A03               	clrf	(??i2_enableMotor+1)^0,c
  8355                           
  8356                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8357                           ; Switch size 1, requested type "simple"
  8358                           ; Number of cases is 1, Range of values is 0 to 0
  8359                           ; switch strategies available:
  8360                           ; Name         Instructions Cycles
  8361                           ; simple_byte            4     3 (average)
  8362                           ;	Chosen strategy is simple_byte
  8363  00222A  5003               	movf	(??i2_enableMotor+1)^0,w,c
  8364  00222C  0A00               	xorlw	0	; case 0
  8365  00222E  B4D8               	btfsc	status,2,c
  8366  002230  EF1C  F011         	goto	i2l4619
  8367  002234  EF2C  F011         	goto	i2l94
  8368  002238                     i2l4619:
  8369  002238  FFFF               	dw	65535	; assembler added errata NOP
  8370                           
  8371                           ; Switch size 1, requested type "simple"
  8372                           ; Number of cases is 3, Range of values is 0 to 2
  8373                           ; switch strategies available:
  8374                           ; Name         Instructions Cycles
  8375                           ; simple_byte           10     6 (average)
  8376                           ;	Chosen strategy is simple_byte
  8377  00223A  5002               	movf	??i2_enableMotor^0,w,c
  8378  00223C  0A00               	xorlw	0	; case 0
  8379  00223E  B4D8               	btfsc	status,2,c
  8380  002240  EFF9  F010         	goto	i2l2977
  8381  002244  0A01               	xorlw	1	; case 1
  8382  002246  B4D8               	btfsc	status,2,c
  8383  002248  EF01  F011         	goto	i2l2979
  8384  00224C  0A03               	xorlw	3	; case 2
  8385  00224E  B4D8               	btfsc	status,2,c
  8386  002250  EF09  F011         	goto	i2l2981
  8387  002254  EF2C  F011         	goto	i2l94
  8388  002258                     i2l94:
  8389  002258  FFFF               	dw	65535	; assembler added errata NOP
  8390  00225A  0012               	return		;funcret
  8391  00225C  FFFF               	dw	65535	; errata NOP
  8392  00225E                     __end_ofi2_enableMotor:
  8393                           	callstack 0
  8394                           
  8395                           	psect	rparam
  8396  0000                     
  8397                           	psect	temp
  8398  00006E                     btemp:
  8399                           	callstack 0
  8400  00006E                     	ds	1
  8401  0000                     int$flags	set	btemp
  8402  0000                     wtemp8	set	btemp+1
  8403  0000                     ttemp5	set	btemp+1
  8404  0000                     ttemp6	set	btemp+4
  8405  0000                     ttemp7	set	btemp+8
  8406                           
  8407                           	psect	idloc
  8408                           
  8409                           ;Config register IDLOC0 @ 0x200000
  8410                           ;	unspecified, using default values
  8411  200000                     	org	2097152
  8412  200000  FF                 	db	255
  8413                           
  8414                           ;Config register IDLOC1 @ 0x200001
  8415                           ;	unspecified, using default values
  8416  200001                     	org	2097153
  8417  200001  FF                 	db	255
  8418                           
  8419                           ;Config register IDLOC2 @ 0x200002
  8420                           ;	unspecified, using default values
  8421  200002                     	org	2097154
  8422  200002  FF                 	db	255
  8423                           
  8424                           ;Config register IDLOC3 @ 0x200003
  8425                           ;	unspecified, using default values
  8426  200003                     	org	2097155
  8427  200003  FF                 	db	255
  8428                           
  8429                           ;Config register IDLOC4 @ 0x200004
  8430                           ;	unspecified, using default values
  8431  200004                     	org	2097156
  8432  200004  FF                 	db	255
  8433                           
  8434                           ;Config register IDLOC5 @ 0x200005
  8435                           ;	unspecified, using default values
  8436  200005                     	org	2097157
  8437  200005  FF                 	db	255
  8438                           
  8439                           ;Config register IDLOC6 @ 0x200006
  8440                           ;	unspecified, using default values
  8441  200006                     	org	2097158
  8442  200006  FF                 	db	255
  8443                           
  8444                           ;Config register IDLOC7 @ 0x200007
  8445                           ;	unspecified, using default values
  8446  200007                     	org	2097159
  8447  200007  FF                 	db	255
  8448                           
  8449                           	psect	config
  8450                           
  8451                           ; Padding undefined space
  8452  300000                     	org	3145728
  8453  300000  FF                 	db	255
  8454                           
  8455                           ;Config register CONFIG1H @ 0x300001
  8456                           ;	Oscillator Selection bits
  8457                           ;	OSC = XT, XT oscillator
  8458                           ;	Oscillator System Clock Switch Enable bit
  8459                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8460  300001                     	org	3145729
  8461  300001  21                 	db	33
  8462                           
  8463                           ;Config register CONFIG2L @ 0x300002
  8464                           ;	Power-up Timer Enable bit
  8465                           ;	PWRT = OFF, PWRT disabled
  8466                           ;	Brown-out Reset Enable bit
  8467                           ;	BOR = OFF, Brown-out Reset disabled
  8468                           ;	Brown-out Reset Voltage bits
  8469                           ;	BORV = 20, VBOR set to 2.0V
  8470  300002                     	org	3145730
  8471  300002  0D                 	db	13
  8472                           
  8473                           ;Config register CONFIG2H @ 0x300003
  8474                           ;	Watchdog Timer Enable bit
  8475                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8476                           ;	Watchdog Timer Postscale Select bits
  8477                           ;	WDTPS = 128, 1:128
  8478  300003                     	org	3145731
  8479  300003  0E                 	db	14
  8480                           
  8481                           ; Padding undefined space
  8482  300004                     	org	3145732
  8483  300004  FF                 	db	255
  8484                           
  8485                           ;Config register CONFIG3H @ 0x300005
  8486                           ;	CCP2 Mux bit
  8487                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8488  300005                     	org	3145733
  8489  300005  00                 	db	0
  8490                           
  8491                           ;Config register CONFIG4L @ 0x300006
  8492                           ;	Stack Full/Underflow Reset Enable bit
  8493                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8494                           ;	Low Voltage ICSP Enable bit
  8495                           ;	LVP = OFF, Low Voltage ICSP disabled
  8496                           ;	Background Debugger Enable bit
  8497                           ;	DEBUG = 0x1, unprogrammed default
  8498  300006                     	org	3145734
  8499  300006  80                 	db	128
  8500                           
  8501                           ; Padding undefined space
  8502  300007                     	org	3145735
  8503  300007  FF                 	db	255
  8504                           
  8505                           ;Config register CONFIG5L @ 0x300008
  8506                           ;	Code Protection bit
  8507                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8508                           ;	Code Protection bit
  8509                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8510                           ;	Code Protection bit
  8511                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8512                           ;	Code Protection bit
  8513                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8514  300008                     	org	3145736
  8515  300008  0F                 	db	15
  8516                           
  8517                           ;Config register CONFIG5H @ 0x300009
  8518                           ;	Boot Block Code Protection bit
  8519                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8520                           ;	Data EEPROM Code Protection bit
  8521                           ;	CPD = OFF, Data EEPROM not code protected
  8522  300009                     	org	3145737
  8523  300009  C0                 	db	192
  8524                           
  8525                           ;Config register CONFIG6L @ 0x30000A
  8526                           ;	Write Protection bit
  8527                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8528                           ;	Write Protection bit
  8529                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8530                           ;	Write Protection bit
  8531                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8532                           ;	Write Protection bit
  8533                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8534  30000A                     	org	3145738
  8535  30000A  0F                 	db	15
  8536                           
  8537                           ;Config register CONFIG6H @ 0x30000B
  8538                           ;	Configuration Register Write Protection bit
  8539                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8540                           ;	Boot Block Write Protection bit
  8541                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8542                           ;	Data EEPROM Write Protection bit
  8543                           ;	WRTD = OFF, Data EEPROM not write protected
  8544  30000B                     	org	3145739
  8545  30000B  E0                 	db	224
  8546                           
  8547                           ;Config register CONFIG7L @ 0x30000C
  8548                           ;	Table Read Protection bit
  8549                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8550                           ;	Table Read Protection bit
  8551                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8552                           ;	Table Read Protection bit
  8553                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8554                           ;	Table Read Protection bit
  8555                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8556  30000C                     	org	3145740
  8557  30000C  0F                 	db	15
  8558                           
  8559                           ;Config register CONFIG7H @ 0x30000D
  8560                           ;	Boot Block Table Read Protection bit
  8561                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8562  30000D                     	org	3145741
  8563  30000D  40                 	db	64
  8564                           tosu	equ	0xFFF
  8565                           tosh	equ	0xFFE
  8566                           tosl	equ	0xFFD
  8567                           stkptr	equ	0xFFC
  8568                           pclatu	equ	0xFFB
  8569                           pclath	equ	0xFFA
  8570                           pcl	equ	0xFF9
  8571                           tblptru	equ	0xFF8
  8572                           tblptrh	equ	0xFF7
  8573                           tblptrl	equ	0xFF6
  8574                           tablat	equ	0xFF5
  8575                           prodh	equ	0xFF4
  8576                           prodl	equ	0xFF3
  8577                           indf0	equ	0xFEF
  8578                           postinc0	equ	0xFEE
  8579                           postdec0	equ	0xFED
  8580                           preinc0	equ	0xFEC
  8581                           plusw0	equ	0xFEB
  8582                           fsr0h	equ	0xFEA
  8583                           fsr0l	equ	0xFE9
  8584                           wreg	equ	0xFE8
  8585                           indf1	equ	0xFE7
  8586                           postinc1	equ	0xFE6
  8587                           postdec1	equ	0xFE5
  8588                           preinc1	equ	0xFE4
  8589                           plusw1	equ	0xFE3
  8590                           fsr1h	equ	0xFE2
  8591                           fsr1l	equ	0xFE1
  8592                           bsr	equ	0xFE0
  8593                           indf2	equ	0xFDF
  8594                           postinc2	equ	0xFDE
  8595                           postdec2	equ	0xFDD
  8596                           preinc2	equ	0xFDC
  8597                           plusw2	equ	0xFDB
  8598                           fsr2h	equ	0xFDA
  8599                           fsr2l	equ	0xFD9
  8600                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    14
    Data        310
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     68     109
    BANK0           128      8     127
    BANK1           256      8     222
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK0[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_executeData
    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_enableMotor
    _resetPosition->_setDecay
    _resetPosition->_setDirection
    _resetPosition->_setStep
    _touchTherm->_setDirection
    _touchObject->_setDirection
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_setDirection
    _liftArm->_setDirection

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_executeData

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   16618
                                              3 BANK1      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0    2702
                                             21 COMRAM     3     3      0
                        _enableMotor
                          _resetStep
                           _setDecay
                       _setDirection
                            _setStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _setStep                                              4     3      1     487
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _setDecay                                             4     3      1     394
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _enableMotor                                          4     3      1     559
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0   10197
                                             66 COMRAM     2     2      0
                                              0 BANK1      3     3      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0    1058
                          _resetStep
                         _resetTherm
                        _returnTherm
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0    1058
                          _resetStep
                         _resetTouch
                        _returnTouch
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            8     8      0    3163
                                              0 BANK0      8     8      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    3508
                                             21 COMRAM    14     6      8
                          _resetStep
                       _setDirection
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0    1058
                          _resetStep
                       _setDirection
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _setDirection                                         4     3      1    1024
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1225
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     673
                      i2_enableMotor
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (6) i2_enableMotor                                        4     3      1     166
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _setDirection
       _stepMade
     _moveToPoint
       _resetStep
       _setDirection
       _stepCounter
       _stepMade
     _pickObject
       _stepMade
     _releaseObj
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _stepMade
     _touchObject
       _resetStep
       _resetTouch
       _returnTouch
       _setDirection
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _setDirection
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _enableMotor
     _resetStep
     _setDecay
     _setDirection
     _setStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_enableMotor
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      8      DE       7       86.7%
BITBANK0            80      0       0       4        0.0%
BANK0               80      8      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     44      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CA      15        0.0%
DATA                 0      0     1CA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Mar 29 10:03:34 2021

                                                  ___fldiv@aexp 0038  
                                                  ___fldiv@bexp 0037  
                                         __end_of_interruptInit 23F0  
                                                  ___fldiv@sign 0030  
                                                            l70 2552  
                                                            l76 249A  
                                                            l85 1F52  
                                                            l94 2170  
                                                           l103 21E4  
                                                           l112 20FC  
                                                           l202 1FDA  
                                                           l122 1282  
                                                           l123 12B2  
                                                           l212 2004  
                                                           l204 1F9E  
                                                           l205 1FEC  
                                                           l133 1306  
                                                           l117 124E  
                                                           l230 246E  
                                                           l126 12B6  
                                                           l118 1362  
                                                           l151 0CE6  
                                                           l143 0CFE  
                                                           l231 2474  
                                                           l223 1D80  
                                                           l127 12E6  
                                                           l119 127E  
                                                           l208 1FBE  
                                                           l160 0C36  
                                                           l153 0B98  
                                                           l225 1DA8  
                                                           l137 137A  
                                                           l410 2602  
                                                           l322 1690  
                                                           l323 168A  
                                                           l164 0C80  
                                                           l236 2442  
                                                           l180 1C48  
                                                           l404 24C0  
                                                           l324 168C  
                                                           l157 0BEA  
                                                           l237 2448  
                                                           l413 2586  
                                                           l422 25A6  
                                                           l190 1B36  
                                                           l334 23CC  
                                                           l407 25B0  
                                                           l335 23E2  
                                                           l168 0CA0  
                                                           l184 1CC8  
                                                           l176 1C28  
                                                           l416 257A  
                                                           l336 23EC  
                                                           l185 1CCC  
                                                           l194 1B56  
                                                           l530 24DE  
                                                           l419 25BA  
                                                           l603 2364  
                                                           l371 24F2  
                                                           l380 25C4  
                                                           l348 0F8E  
                                                           l365 2518  
                                                           l374 2506  
                                                           l198 1BD6  
                                                           l550 25F2  
                                                           l199 1BDA  
                                                           l544 19CA  
                                                           l368 2528  
                                                           l377 2592  
                                                           l547 25EA  
                                                           l556 25FA  
                                                           l564 22BA  
                                                           l591 2544  
                                                           l903 18AE  
                                                           l559 259C  
                                                           l585 1464  
                                                           l594 2536  
                                                           l588 14DA  
                                                           l599 2332  
                                                           _isr 0008  
                                                   _touchObject 1BDE  
                                                           prod 000FF3  
                                                           wreg 000FE8  
                                                  ___fltol@exp1 0042  
                                                   main@errCode 01DB  
                                                          l1201 093A  
                                                          l1202 0922  
                                                          l1261 0FF2  
                                                          l1190 0854  
                                                          l1264 1184  
                                                          l1193 080E  
                                                          l4001 1D3C  
                                                          l1275 110A  
                                                          l4003 1D62  
                                                          l4011 1D8C  
                                                          l1188 0A3C  
                                                          l1268 109E  
                                                          l4013 244E  
                                                          l4021 2426  
                                                          l4005 1D64  
                                                          l4101 1296  
                                                          l4015 2452  
                                                          l4023 2444  
                                                          l1199 08AA  
                                                          l4007 1D82  
                                                          l4111 130C  
                                                          l4103 12A8  
                                                          l4031 18E8  
                                                          l4017 2470  
                                                          l4009 1D86  
                                                          l4121 1374  
                                                          l4105 12CA  
                                                          l4113 1326  
                                                          l4041 1956  
                                                          l4033 18FE  
                                                          l4025 18B8  
                                                          l4201 148E  
                                                          l4051 253C  
                                                          l4019 2422  
                                                          l4131 23E0  
                                                          l4123 1378  
                                                          l4115 133C  
                                                          l4107 12DC  
                                                          l4035 1914  
                                                          l4027 18BC  
                                                          l4203 1498  
                                                          l3501 25AC  
                                                          l4141 24B2  
                                                          l4133 24A0  
                                                          l4061 2486  
                                                          l4117 1350  
                                                          l4109 12EA  
                                                          l4037 192A  
                                                          l4029 18D2  
                                                          l4045 196C  
                                                          l4301 1642  
                                                          l4055 254A  
                                                          l3503 2580  
                                                          l3511 25A2  
                                                          l4231 0D60  
                                                          l4223 0D06  
                                                          l4143 24BC  
                                                          l4135 24A8  
                                                          l4071 2496  
                                                          l4063 248A  
                                                          l4127 23B8  
                                                          l4119 1368  
                                                          l4039 1940  
                                                          l4207 14A4  
                                                          l4151 250C  
                                                          l4311 1654  
                                                          l4303 1642  
                                                          l3601 0840  
                                                          l3521 0612  
                                                          l3505 2600  
                                                          l4241 0E0C  
                                                          l4233 0D74  
                                                          l4225 0D12  
                                                          l4145 24BE  
                                                          l4137 24AE  
                                                          l4073 2498  
                                                          l4065 248E  
                                                          l4057 247A  
                                                          l4129 23CA  
                                                          l4217 2598  
                                                          l4081 120C  
                                                          l3513 231C  
                                                          l4153 2514  
                                                          l4161 2526  
                                                          l4321 1694  
                                                          l4313 1658  
                                                          l4305 1648  
                                                          l3611 0896  
                                                          l3603 0850  
                                                          l3531 065C  
                                                          l3523 061E  
                                                          l3507 25B6  
                                                          l4251 0E5E  
                                                          l4243 0E1C  
                                                          l4235 0DAE  
                                                          l4227 0D16  
                                                          l4139 24B0  
                                                          l4067 2492  
                                                          l4059 2482  
                                                          l4219 25F0  
                                                          l4091 1224  
                                                          l4083 1210  
                                                          l4075 118C  
                                                          l3515 2324  
                                                          l4155 251E  
                                                          l4163 24E4  
                                                          l4147 24C6  
                                                          l4331 16DE  
                                                          l4323 16AE  
                                                          l4315 165C  
                                                          l4307 164C  
                                                          l3621 08E6  
                                                          l3613 08A8  
                                                          l3605 086A  
                                                          l3541 0692  
                                                          l3533 066C  
                                                          l3525 0630  
                                                          l3509 2574  
                                                          l4261 0EDA  
                                                          l4245 0E30  
                                                          l4237 0DBE  
                                                          l4229 0D50  
                                                          l4173 252E  
                                                          l4069 2494  
                                                          l4093 123C  
                                                          l4085 1212  
                                                          l4077 1204  
                                                          l3517 2346  
                                                          l4181 1398  
                                                          l4157 2522  
                                                          l4165 24E6  
                                                          l4149 24DA  
                                                          l4341 173C  
                                                          l4333 16E4  
                                                          l4325 16BA  
                                                          l4317 1670  
                                                          l4309 1650  
                                                          l3631 096E  
                                                          l3623 0918  
                                                          l3607 0884  
                                                          l3615 08BC  
                                                          l3551 06D6  
                                                          l3543 0698  
                                                          l3535 0670  
                                                          l3527 0632  
                                                          l3711 1020  
                                                          l3703 0F96  
                                                          l4271 0F72  
                                                          l4263 0F16  
                                                          l4247 0E52  
                                                          l4239 0DD2  
                                                          l4255 0E6A  
                                                          l4095 1242  
                                                          l4087 121A  
                                                          l4079 1208  
                                                          l3519 234C  
                                                          l4183 13A2  
                                                          l4191 13EC  
                                                          l4159 2524  
                                                          l4167 24EA  
                                                          l4351 176A  
                                                          l4343 173E  
                                                          l4335 16EA  
                                                          l4327 16CC  
                                                          l4319 1684  
                                                          l3473 217A  
                                                          l3801 0A76  
                                                          l3641 09F2  
                                                          l3633 0998  
                                                          l3617 08D0  
                                                          l3609 088A  
                                                          l3561 0720  
                                                          l3553 06E6  
                                                          l3545 06AA  
                                                          l3529 0648  
                                                          l3537 0678  
                                                          l3721 1084  
                                                          l3705 0FAA  
                                                          l4273 0F7A  
                                                          l4265 0F28  
                                                          l4249 0E56  
                                                          l4257 0EB0  
                                                          l4169 25F8  
                                                          l4097 1262  
                                                          l4089 121E  
                                                          l4601 1982  
                                                          l4193 1404  
                                                          l4185 13AC  
                                                          l4177 1382  
                                                          l4353 176E  
                                                          l4337 16FE  
                                                          l4329 16DC  
                                                          l4345 1742  
                                                          l4611 21C4  
                                                          l3475 217E  
                                                          l3483 21AE  
                                                          l3491 24FC  
                                                          l3811 0AB4  
                                                          l3651 0A30  
                                                          l3643 0A0E  
                                                          l3627 0950  
                                                          l3635 099C  
                                                          l3619 08D4  
                                                          l3563 0730  
                                                          l3571 0752  
                                                          l3555 06EA  
                                                          l3547 06AC  
                                                          l3539 068A  
                                                          l3731 10F8  
                                                          l3723 1088  
                                                          l3715 1034  
                                                          l3707 0FBC  
                                                          l4275 0F7E  
                                                          l4267 0F38  
                                                          l4259 0EC6  
                                                          l4603 1F32  
                                                          l4099 1274  
                                                          l4195 140C  
                                                          l4179 1392  
                                                          l4355 1772  
                                                          l4347 175C  
                                                          l4339 1712  
                                                          l3477 218E  
                                                          l3493 2500  
                                                          l3821 0AFA  
                                                          l3813 0AC0  
                                                          l3805 0A7E  
                                                          l3645 0A14  
                                                          l3637 09BC  
                                                          l3629 095C  
                                                          l3581 0798  
                                                          l3573 0768  
                                                          l3565 0738  
                                                          l3549 06C2  
                                                          l3557 06F2  
                                                          l3661 179A  
                                                          l3741 115E  
                                                          l3733 111E  
                                                          l3725 1094  
                                                          l3717 103E  
                                                          l3709 1004  
                                                          l3901 1C2C  
                                                          l4277 0F82  
                                                          l4269 0F6A  
                                                          l4605 20DC  
                                                          l4197 145E  
                                                          l4189 13B6  
                                                          l4349 1764  
                                                          l3479 219E  
                                                          l3831 0B16  
                                                          l3823 0B06  
                                                          l3815 0AC4  
                                                          l3807 0AA2  
                                                          l3647 0A26  
                                                          l3639 09D2  
                                                          l3591 07E6  
                                                          l3583 07A8  
                                                          l3575 0768  
                                                          l3567 073E  
                                                          l3559 0704  
                                                          l3671 17F2  
                                                          l3743 1170  
                                                          l3735 1120  
                                                          l3727 10D6  
                                                          l3719 104C  
                                                          l3911 1C96  
                                                          l3903 1C4A  
                                                          l4279 0F8A  
                                                          l4287 25E8  
                                                          l4607 2150  
                                                          l3751 1E8A  
                                                          l4295 2264  
                                                          l4199 1486  
                                                          l3497 25C0  
                                                          l3489 24F8  
                                                          l3841 0B44  
                                                          l3833 0B1E  
                                                          l3825 0B0A  
                                                          l3817 0AE8  
                                                          l3809 0AAC  
                                                          l3649 0A2C  
                                                          l3593 07FA  
                                                          l3585 07B8  
                                                          l3681 1824  
                                                          l3673 17F6  
                                                          l3665 17B0  
                                                          l3745 1172  
                                                          l3737 1126  
                                                          l3729 10E4  
                                                          l3921 1CC0  
                                                          l3913 1C9A  
                                                          l3905 1C64  
                                                          l4609 0E88  
                                                          l3753 1EB8  
                                                          l4297 22A4  
                                                          l4289 2260  
                                                          l3499 258C  
                                                          l3851 0BB6  
                                                          l3843 0B50  
                                                          l3835 0B22  
                                                          l3827 0B10  
                                                          l3819 0AF2  
                                                          l3595 080C  
                                                          l3587 07C8  
                                                          l3579 077C  
                                                          l3691 1854  
                                                          l3683 1830  
                                                          l3675 1808  
                                                          l3667 17E0  
                                                          l3659 1780  
                                                          l3739 114A  
                                                          l3915 1C9C  
                                                          l3907 1C80  
                                                          l3931 1B02  
                                                          l3771 212A  
                                                          l3755 1EEC  
                                                          l4299 22A6  
                                                          l3861 0C3E  
                                                          l3845 0B66  
                                                          l3837 0B28  
                                                          l3829 0B14  
                                                          l3597 081A  
                                                          l3589 07D0  
                                                          l3693 1862  
                                                          l3685 183A  
                                                          l3669 17E2  
                                                          l3917 1CAA  
                                                          l3909 1C90  
                                                          l3941 1B2A  
                                                          l3933 1B06  
                                                          l3925 1AEE  
                                                          l3765 2106  
                                                          l3781 2092  
                                                          l3749 1E86  
                                                          l3863 0C54  
                                                          l3855 0BEE  
                                                          l3847 0B8E  
                                                          l3839 0B40  
                                                          l3871 0CBE  
                                                          l3599 083E  
                                                          l3695 1876  
                                                          l3919 1CAE  
                                                          l3943 1B3A  
                                                          l3951 1B9E  
                                                          l3935 1B08  
                                                          l3927 1AF8  
                                                          l3767 210A  
                                                          l3775 213A  
                                                          l3783 2096  
                                                          l3791 20C6  
                                                          l3759 1F1C  
                                                          l3873 0CD4  
                                                          l3857 0C04  
                                                          l3849 0BA0  
                                                          l3697 188C  
                                                          l3961 1BBC  
                                                          l3953 1BA4  
                                                          l3945 1B58  
                                                          l3937 1B10  
                                                          l3929 1AFA  
                                                          l3769 211A  
                                                          l3785 20A6  
                                                          l3971 1F66  
                                                          l3875 0CEC  
                                                          l3867 0C84  
                                                          l3859 0C2C  
                                                          l3699 189C  
                                                          l3891 1BF8  
                                                          l3883 1BE0  
                                                          l3963 1BCE  
                                                          l3955 1BA8  
                                                          l3939 1B28  
                                                          l3947 1B72  
                                                          l3787 20B6  
                                                          l3981 1F92  
                                                          l3973 1F6E  
                                                          l3877 0CF8  
                                                          l3869 0CA4  
                                                          l3797 0A44  
                                                          l3893 1BFA  
                                                          l3885 1BEA  
                                                          l3957 1BAA  
                                                          l3949 1B8E  
                                                          l4597 13CC  
                                                          l3991 2002  
                                                          l3983 1FA2  
                                                          l3975 1F72  
                                                          l3967 1F5A  
                                                          l3879 0CFC  
                                                          l3799 0A5E  
                                                          l3895 1C02  
                                                          l3887 1BEC  
                                                          l3959 1BB8  
                                                          l4599 14BA  
                                                          l3985 1FC0  
                                                          l3977 1F78  
                                                          l3969 1F64  
                                                          l3897 1C1A  
                                                          l3889 1BF4  
                                                          l3987 1FF2  
                                                          l3979 1F90  
                                                          l3995 1CD6  
                                                          l3899 1C1C  
                                                          ?_isr 0001  
                                                          l3989 1FFE  
                                                          l3997 1D28  
                                                          l3999 1D36  
                                                          u3100 0B3E  
                                                          u3101 0B38  
                                                          u3005 2114  
                                                          u3110 0B64  
                                                          u3006 2116  
                                                          u3111 0B5E  
                                                          u3015 2124  
                                                          u3200 0CBE  
                                                          u3120 0B8C  
                                                          u3016 2126  
                                                          _LATD 000F8C  
                                                          u3201 0CB8  
                                                          u3121 0B86  
                                                          u3025 2134  
                                                          u3210 0CD2  
                                                          u3130 0BB4  
                                                          u3026 2136  
                                                          u3211 0CCC  
                                                          u3131 0BAE  
                                                          u3035 20A0  
                                                          u3220 0CE6  
                                                          u3140 0BE4  
                                                          u3060 0A5C  
                                                          u3300 1B54  
                                                          u3036 20A2  
                                                          u3221 0CE0  
                                                          u3141 0BDE  
                                                          u3061 0A56  
                                                          u3301 1B4E  
                                                          u3045 20B0  
                                                          u3150 0C02  
                                                          u3070 0A76  
                                                          u3230 1C18  
                                                          u3310 1B72  
                                                          u3046 20B2  
                                                          u3151 0BFC  
                                                          u3071 0A70  
                                                          u3231 1C12  
                                                          u3311 1B6C  
                                                          u3055 20C0  
                                                          u3160 0C2A  
                                                          u3080 0AA0  
                                                          u2600 062E  
                                                          u3400 1DA6  
                                                          u3240 1C46  
                                                          u3320 1B8C  
                                                          u3056 20C2  
                                                          u3161 0C24  
                                                          u3081 0A9A  
                                                          u2601 0628  
                                                          u3401 1DA0  
                                                          u3241 1C40  
                                                          u3321 1B86  
                                                          u3170 0C52  
                                                          u3090 0AE6  
                                                          u3410 246C  
                                                          u2610 0646  
                                                          u3250 1C64  
                                                          u3330 1B9E  
                                                          u3171 0C4C  
                                                          u3091 0AE0  
                                                          u3411 2466  
                                                          u2611 0640  
                                                          u3251 1C5E  
                                                          u3331 1B98  
                                                          u3180 0C7A  
                                                          u3420 2440  
                                                          u2700 083C  
                                                          u2620 065A  
                                                          u3260 1C7E  
                                                          u3340 1BCC  
                                                          u3500 1304  
                                                          u3181 0C74  
                                                          u3421 243A  
                                                          u2701 0836  
                                                          u2621 0654  
                                                          u3261 1C78  
                                                          u3341 1BC6  
                                                          u3501 12FE  
                                                          u3350 1F8E  
                                                          u3190 0C9E  
                                                          u2710 0868  
                                                          u2630 06A8  
                                                          u3270 1C90  
                                                          u3510 1326  
                                                          u3430 123A  
                                                          u3351 1F88  
                                                          u3191 0C98  
                                                          u2711 0862  
                                                          u2631 06A2  
                                                          u3271 1C8A  
                                                          u3511 1320  
                                                          u3431 1234  
                                                          u3360 1FBC  
                                                          u2800 09BA  
                                                          u2720 0882  
                                                          u2640 06C0  
                                                          u3280 1CBE  
                                                          u3520 133A  
                                                          u3440 1260  
                                                          u3600 22B8  
                                                          u3361 1FB6  
                                                          u2801 09B4  
                                                          u2721 087C  
                                                          u2641 06BA  
                                                          u3281 1CB8  
                                                          u3521 1334  
                                                          u3441 125A  
                                                          u3601 22B2  
                                                          u3370 1FDA  
                                                          u2810 09F0  
                                                          u2730 08A6  
                                                          u2650 06D4  
                                                          u3290 1B26  
                                                          u3530 134E  
                                                          u3450 1274  
                                                          u3610 1682  
                                                          u2555 2188  
                                                          u3371 1FD4  
                                                          u2811 09EA  
                                                          u2731 08A0  
                                                          u2651 06CE  
                                                          u3291 1B20  
                                                          u3531 1348  
                                                          u3451 126E  
                                                          u3611 167C  
                                                          u2556 218A  
                                                          u3380 1FEC  
                                                          u2820 0A24  
                                                          u2740 08CE  
                                                          u2660 071E  
                                                          u2900 0FA8  
                                                          u3540 1362  
                                                          u3460 1294  
                                                          u2580 2344  
                                                          u3620 16AC  
                                                          u2565 2198  
                                                          u3381 1FE6  
                                                          u2821 0A1E  
                                                          u2741 08C8  
                                                          u2661 0718  
                                                          u2901 0FA2  
                                                          u3541 135C  
                                                          u3461 128E  
                                                          u2581 233E  
                                                          u3621 16A6  
                                                          u2566 219A  
                                                          u2750 08E4  
                                                          u2670 0766  
                                                          u2830 1798  
                                                          u2910 0FBA  
                                                          u3390 1D7E  
                                                          u3550 23C8  
                                                          u3470 12A8  
                                                          u2590 2362  
                                                          u3630 175A  
                                                          u2575 21A8  
                                                          u2751 08DE  
                                                          u2671 0760  
                                                          u2831 1792  
                                                          u2911 0FB4  
                                                          u3391 1D78  
                                                          u3551 23C2  
                                                          u3471 12A2  
                                                          u2591 235C  
                                                          u3631 1754  
                                                          u2576 21AA  
                                                          u2760 0916  
                                                          u2680 07E4  
                                                          u2840 17D4  
                                                          u2920 101E  
                                                          u3560 23DE  
                                                          u3480 12C8  
                                                          u2761 0910  
                                                          u2681 07DE  
                                                          u2921 1018  
                                                          u3561 23D8  
                                                          u3481 12C2  
                                                          u2770 0934  
                                                          u2690 080A  
                                                          u2850 1806  
                                                          u2930 107E  
                                                          u3490 12DC  
                                                          u3570 1402  
                                                          u2771 092E  
                                                          u2691 0804  
                                                          u2851 1800  
                                                          u2931 1078  
                                                          u3491 12D6  
                                                          u3571 13FC  
                                                          u2780 094E  
                                                          u2860 181E  
                                                          u2940 10D0  
                                                          u3580 0EC4  
                                                          u2781 0948  
                                                          u2861 1818  
                                                          u2845 17C8  
                                                          u2941 10CA  
                                                          u3581 0EBE  
                                                          u2790 096C  
                                                          u2870 184E  
                                                          u2950 10F6  
                                                          u3590 0F68  
                                                          u2791 0966  
                                                          u2871 1848  
                                                          u2951 10F0  
                                                          u3591 0F62  
                                                          u2880 1876  
                                                          u2960 110A  
                                                          u2881 1870  
                                                          u2961 1104  
                                                          u2890 188A  
                                                          u2970 111C  
                                                   main@newData 01DC  
                                                          u2891 1884  
                                                          u2971 1116  
                                                          u2980 115C  
                                                          u2981 1156  
                                                          u2990 116E  
                                                          u2991 1168  
                                                          i2l73 260A  
                                                          i2l67 2560  
                                                          i2l94 2258  
                                                          _TMR0 000FD6  
                                                          _TMR2 000FCC  
                                           __end_ofi2_storeData 1642  
                                                          _main 1642  
                                                          _maxX 006B  
                                                          _maxY 0069  
                                          __end_ofi2_printError 1AEC  
                                                          fsr2h 000FDA  
                                                          indf2 000FDF  
                                                          fsr1l 000FE1  
                                                          fsr2l 000FD9  
                                                          btemp 006E  
                                                          prodh 000FF4  
                                                          prodl 000FF3  
                                                          start 019C  
                                               ___fldiv@new_exp 0031  
                                                  ___param_bank 000000  
                                               ??_whatsTM0Limit 0001  
                                                         ??_isr 000B  
                                                  ?_executeData 0001  
                                               executeData@data 01D7  
                                                 ___fltol@sign1 0041  
                                                         ?_main 0001  
                                               __end_of___fldiv 0A42  
                                               __end_of___fltol 18B4  
                                                         i2l240 2416  
                                                         i2l241 2418  
                                                         i2l425 25E2  
                                                         i2l603 23B2  
                                                         i2l428 25D8  
                                                         i2l383 2612  
                                                         i2l544 1AE6  
                                                         i2l553 261A  
                                                         i2l386 25CE  
                                                         i2l389 256E  
                                                         i2l585 15C6  
                                                         i2l489 0184  
                                                         i2l588 163C  
                                                         i2l599 2380  
                                          rotateObj@rotSequence 0080  
                                                         _SPBRG 000FAF  
                                                         _TRISA 000F92  
                                                         _TRISB 000F93  
                                                         _TRISC 000F94  
                                                         _TRISD 000F95  
                                                         _TXREG 000FAD  
                                               __end_of_getData 2548  
                                               i2storeData@data 000A  
                                               __end_of_initADC 24C4  
                                                  ?_newSequence 0001  
                                               __end_of_liftArm 2008  
                                               __end_of_readSeq 25F6  
                                                  stepMade@temp 0014  
                                               __end_of_setStep 1F58  
                                                         tablat 000FF5  
                                                i2uartTx@length 0003  
                                               __end_of_stopADC 2606  
                                                         ttemp5 006F  
                                                         ttemp6 0072  
                                                         ttemp7 0076  
                                                         status 000FD8  
                                                         wtemp8 006F  
                                              __end_ofi2_uartTx 23B6  
                                                 ?_increaseStep 0001  
                                               __initialization 2008  
                                        __size_of_initPinMotors 0026  
                                                  __end_of_main 177E  
                                      resetPosition@keepMovingX 0016  
                                      resetPosition@keepMovingY 0017  
                                      resetPosition@keepMovingZ 0018  
                                                        ??_main 01D9  
                                                 __activetblptr 000002  
                                                   i2_storeData 14E0  
                                          __size_of_enableMotor 0074  
                                                   isr@tm0Count 0063  
                                                  ?_setThermRel 0001  
                                                        _ADRESH 000FC4  
                                                        _ADRESL 000FC3  
                                                  ?_moveToPoint 0016  
                                                        i2l3001 1A30  
                                                        i2l3003 1A46  
                                                        i2l3011 1A88  
                                                        i2l3005 1A5C  
                                                        i2l3007 1A72  
                                                        i2l2173 25DE  
                                                        i2l2167 2610  
                                                        i2l2175 25D4  
                                                        i2l2177 2618  
                                                        i2l2169 25CA  
                                                        i2l3401 00EA  
                                                        i2l3091 2410  
                                                        i2l3411 0114  
                                                        i2l3403 00EE  
                                                        i2l3421 0178  
                                                        i2l3413 013A  
                                                        i2l3405 00F2  
                                                        i2l1911 2558  
                                                        i2l3271 14F4  
                                                        i2l3423 017E  
                                                        i2l3415 0146  
                                                        i2l3407 00F8  
                                                        i2l3089 23F2  
                                                        i2l3273 14FA  
                                                        i2l3281 1518  
                                                        i2l3417 0160  
                                                        i2l3409 010C  
                                                        i2l3267 2566  
                                                        i2l1915 2608  
                                                        i2l3291 15E8  
                                                        i2l3275 1504  
                                                        i2l3283 154E  
                                                        i2l3419 0164  
                                                        i2l3371 0032  
                                                        i2l2661 236A  
                                                        i2l3293 15F0  
                                                        i2l3285 1566  
                                                        i2l3277 150E  
                                                        i2l3269 14E4  
                                                        i2l3381 006C  
                                                        i2l3373 004E  
                                                        i2l3365 001C  
                                                        i2l2663 2372  
                                                        i2l3295 15FA  
                                                        i2l3287 156E  
                                                        i2l3391 00A0  
                                                        i2l3383 006E  
                                                        i2l3375 0050  
                                                        i2l3367 002E  
                                                        i2l2665 2394  
                                                        i2l3289 15C0  
                                                        i2l3393 00A4  
                                                        i2l3385 0086  
                                                        i2l3377 0054  
                                                        i2l3369 0030  
                                                        i2l2667 239A  
                                                        i2l3299 1606  
                                                        i2l3395 00C2  
                                                        i2l3387 008A  
                                                        i2l3379 0058  
                                                        i2l4613 152E  
                                                        i2l3397 00C4  
                                                        i2l3389 009E  
                                                        i2l4615 161C  
                                                        i2l3399 00D8  
                                                        i2l4617 1A9E  
                                                        i2l4619 2238  
                                                        i2l2981 2212  
                                                        i2l2975 21EE  
                                                        i2l2991 19D4  
                                                        i2l2977 21F2  
                                                        i2l2985 2222  
                                                        i2l2993 19D8  
                                                        i2l2979 2202  
                                                        i2l2995 19EE  
                                                        i2l2997 1A04  
                                                        i2l2999 1A1A  
                                                        _RCREG1 000FAE  
                                                  ?_setTouchRel 0001  
                                                 setDecay@decay 0015  
                                              __end_of_abortAll 2420  
                                              __end_of___xxtofl 118A  
                                                 setDecay@motor 0012  
                                              __end_of_clearTM0 2556  
                                              _errString_PointZ 0100  
                                                ??_increaseStep 0001  
                                        __size_ofi2_enableMotor 0074  
                                                     ??___fldiv 0028  
                                                     ??___fltol 003D  
                                              __end_of_tim0Init 251C  
                                              __end_of_tim1Init 252C  
                                              __end_of_tim2Init 24F6  
                                                        clear_0 206E  
                                                        clear_1 207A  
                                                     ??_getData 0014  
                                                        _uartTx 231A  
                                              __end_of_setDecay 2102  
                                                     ??_initADC 0012  
                                                     ??_liftArm 0016  
                                                     ??_readSeq 0012  
                                                  __pdataCOMRAM 0069  
                                         __end_of_resetPosition 137E  
                                                  __mediumconst 0000  
                                                     ??_setStep 0013  
                                                        tblptrh 000FF7  
                                                        tblptrl 000FF6  
                                                        tblptru 000FF8  
                                                  ?_returnTherm 0012  
                                              __end_of_startADC 25B4  
                                              __end_of_stepMade 250A  
                                                 _initPinMotors 2478  
                                                  ?_returnTouch 0012  
                                                     ??_stopADC 0012  
                                         __size_ofi2_printError 011C  
                                              __end_of_writeTM0 2564  
                                     __size_of_resetNewSequence 000A  
                                                  ___xxtofl@arg 001C  
                                                  ___xxtofl@exp 001B  
                                                  ___xxtofl@val 0012  
                                                    __accesstop 0080  
                                       __end_of__initialization 2080  
                                                  _dataSequence 00DB  
                                                 ___rparam_used 000001  
                                                    ___fltol@f1 0039  
                                                  ?_stepCounter 0012  
                                                   i2uartTx@ptr 0001  
                                                __pcstackCOMRAM 0001  
                                                  __newSequence 005F  
                                                  __pidataBANK0 22BE  
                                                  __pidataBANK1 1DAC  
                                               isr@single_cycle 0051  
                                          __size_of_executeData 028E  
                                                 ?_setDirection 0012  
                                                  i2_printError 19D0  
                                                  ?_touchObject 0001  
                                                _errString_ZEND 015E  
                                                _errString_Feed 00A5  
                                                 i2_enableMotor 21EA  
                                                ?_initPinMotors 0001  
                                                     ?i2_uartTx 0001  
                                                    __pbssBANK0 00DB  
                                          __size_of_newSequence 0008  
                                                    _feeder1Pos 060D  
                                                    _feeder2Pos 060B  
                                                    _feeder3Pos 0609  
                                       __size_of_getNewSequence 000E  
                                                    _fatalError 2616  
                                            __size_of_reduceSeq 0008  
                                            __size_of_retPeriod 000E  
                                                _touch_pressure 0607  
                                            __size_of_shiftData 0060  
                                            __size_of_resetStep 000A  
                                                       _ADC_res 0053  
                                                       ?_uartTx 0012  
                                                ??_setDirection 0013  
                                                     ?_abortAll 0001  
                                                ?i2_enableMotor 0001  
                                                     ?___xxtofl 0012  
                                          __end_of_increaseStep 2616  
                                                     ?_clearTM0 0001  
                                                    ??i2_uartTx 0004  
                                            __size_of_rotateObj 00DC  
                                             _errString_Command 00C3  
                                            __size_of_usartInit 001E  
                                        __size_of_interruptInit 003A  
                                          __size_of_setThermRel 000A  
                                            __size_of_storeData 0162  
                                                     ?_tim0Init 0001  
                                                     ?_tim1Init 0001  
                                                     ?_tim2Init 0012  
                                          __size_of_moveToPoint 02C2  
                                          storeData@receivedMex 0045  
                                               _newSequenceData 00EF  
                                                     ?_setDecay 0012  
                                          __size_of_setTouchRel 000A  
                                                   setStep@step 0015  
                                                       __Hparam 0000  
                                                       __Lparam 0000  
                                        __end_of_touch_pressure 0609  
                                                       ___fldiv 0610  
                                                     ?_startADC 0001  
                                                     ?_stepMade 0012  
                                                       ___fltol 177E  
                                                  __psmallconst 0600  
                                                       __pcinit 2008  
                                         __end_of_whatsTM0Limit 260E  
                                                       _getData 253A  
                                                       __ramtop 0600  
                                                     ?_writeTM0 0001  
                                                    _pickObject 244C  
                                                       __ptext0 1642  
                                                       __ptext1 24C4  
                                                       __ptext2 24E2  
                                                       __ptext3 251C  
                                                       __ptext4 250A  
                                                       __ptext5 137E  
                                                       __ptext6 18B4  
                                                       __ptext7 231A  
                                                       __ptext8 225E  
                                                       __ptext9 118A  
                                               __size_of_uartTx 004E  
                                                     _T0CONbits 000FD5  
                                                       _initADC 249E  
                                                     _T1CONbits 000FCD  
                                               ??_initPinMotors 0012  
                                                       _liftArm 1F58  
                                                     _T2CONbits 000FCA  
                                                    ??_abortAll 0008  
                                                       _readSeq 25EE  
                                                  __size_of_isr 0194  
                                                    ??___xxtofl 0016  
                                                  ?i2_storeData 0001  
                                                    ??_clearTM0 0012  
                                                       _setStep 1E82  
                                                       _pwmStep 0067  
                                                       _stopADC 25FE  
                                             __end_of_reduceSeq 25EE  
                                             __end_of_retPeriod 2572  
                                                    _releaseObj 2420  
                                          __size_of_returnTherm 000C  
                                          end_of_initialization 2080  
                                          __size_of_returnTouch 000C  
                                              _resetNewSequence 2596  
                                              rotateObj@totStep 00FB  
                                             __end_of_shiftData 22BE  
                                                       isr@temp 0011  
                                             __end_of_resetStep 25C8  
                                                    ??_tim0Init 0012  
                                                 __Lmediumconst 0000  
                                                    ??_tim1Init 0012  
                                                    ??_tim2Init 0014  
                                              storeData@command 005D  
                                              storeData@counter 005E  
                                                    ??_setDecay 0013  
                                              enableMotor@motor 0012  
                                                    _resetTherm 25A0  
                                                    _resetTouch 25B4  
                                                       uartTx@i 0015  
                                                   ?_fatalError 0001  
                                                     _RCSTAbits 000FAB  
                                                       postdec1 000FE5  
                                             __end_of_rotateObj 1DAC  
                                                       postinc0 000FEE  
                                                       postinc1 000FE6  
                                                       postinc2 000FDE  
                                                    ??_startADC 0012  
                                                    ??_stepMade 0014  
                                          __size_of_stepCounter 000C  
                                                 _interruptInit 23B6  
                                             __end_of_usartInit 24E2  
                                             __end_of_storeData 14E0  
                                    __end_ofrotateObj@stepAngle 0605  
                                                    ??_writeTM0 0001  
                                               ??i2_enableMotor 0002  
                                                     _PORTDbits 000F83  
                                                    _printError 18B4  
                                                     _PORTEbits 000F84  
                                                 ??_enableMotor 0013  
                                           i2printError@errCode 0007  
                                                    _toggleStep 25C8  
                                                 ___xxtofl@sign 001A  
                                                     _TRISCbits 000F94  
                                                     _TRISDbits 000F95  
                                                     _TRISEbits 000F96  
                                                   ___fldiv@grs 0033  
                                                   ___fldiv@rem 002C  
                                          __size_of_touchObject 00F2  
                                                    _stepToggle 0066  
                                                    _touchTherm 1AEC  
                                          __end_of_setDirection 21EA  
                                                     _TXSTAbits 000FAC  
                                                _getNewSequence 252C  
                                                ?_interruptInit 0001  
                                                 __pidataCOMRAM 261E  
                                         __size_of_increaseStep 0008  
                                                   ?_pickObject 0001  
                                                   __fatalError 0060  
                                                __end_of_uartTx 2368  
                                                 moveToPoint@x1 0016  
                                                 moveToPoint@x2 001A  
                                                 moveToPoint@y1 0018  
                                                 moveToPoint@y2 001C  
                                           start_initialization 2008  
                                                     i2uartTx@i 0004  
                                                   __end_of_isr 019C  
                                           __size_of_fatalError 0008  
                                           __end_of_enableMotor 2176  
                                                   ?_releaseObj 0001  
                                             __size_ofi2_uartTx 004E  
                                        __end_of_getNewSequence 253A  
                                               _errString_Fatal 01AF  
                                               _errString_Bound 0084  
                                                   ?_resetTherm 0001  
                                               _errString_Reset 0187  
                                                   ?_resetTouch 0001  
                                               _errString_Point 0135  
                                                  _increaseStep 260E  
                                        __size_of_resetPosition 01F4  
                                                 ??_executeData 0043  
                                                   __pdataBANK0 0080  
                                                   __pdataBANK1 0100  
                                           i2enableMotor@enable 0004  
                                                   _dataCounter 0061  
                                                      ??_uartTx 0015  
                                        moveToPoint@keepMovingX 0020  
                                        moveToPoint@keepMovingY 0021  
                                                   ?_printError 0001  
                                                     ___fldiv@a 0024  
                                                     ___fldiv@b 0020  
                                                _therm_pressure 0605  
                                                   ?_toggleStep 0001  
                                                   __pbssCOMRAM 0045  
                                                 __pcstackBANK0 00F7  
                                                 __pcstackBANK1 01D6  
                                                 ??_newSequence 0012  
                                             __size_of_abortAll 0030  
                                             __size_of___xxtofl 01F8  
                                          __size_ofi2_storeData 0162  
                                             __size_of_clearTM0 000E  
                                               ?_getNewSequence 0012  
                                                   ?_touchTherm 0001  
                                           __size_of_pickObject 002C  
                                            executeData@errCode 01D6  
                                             __size_of_tim0Init 0012  
                                             __size_of_tim1Init 0010  
                                             __size_of_tim2Init 0014  
                                               ??_interruptInit 0012  
                                             __size_of_setDecay 0074  
                                                     __pintcode 0008  
                                                      ?___fldiv 0020  
                                                      ?___fltol 0039  
                                      __end_of_resetNewSequence 25A0  
                                           __size_of_releaseObj 002C  
                                                 storeData@data 001B  
                                                      ?_getData 0012  
                                             __size_of_startADC 000A  
                                             __size_of_stepMade 0014  
                                        __end_of_therm_pressure 0607  
                                                      ?_initADC 0001  
                                                   __smallconst 0600  
                                                      ?_liftArm 0001  
                                                   _enableMotor 2102  
                                                      ?_readSeq 0001  
                                             __size_of_writeTM0 000E  
                                           __end_of_executeData 0F92  
                                                    shiftData@i 0014  
                                                      ?_setStep 0012  
                                           __size_of_resetTherm 000A  
                                                     _newFeeder 0057  
                                                 _resetPosition 118A  
                                           __size_of_resetTouch 000A  
                                                 ??_setThermRel 0001  
                                                      ?_stopADC 0001  
                                         __size_of_setDirection 0074  
                                                 ??_moveToPoint 001E  
                                                 ??_setTouchRel 0001  
                                           __end_of_newSequence 25FE  
                                                     _reduceSeq 25E6  
                                                      _LATAbits 000F89  
                                                      _LATBbits 000F8A  
                                                     _retPeriod 2564  
                                                      _LATCbits 000F8B  
                                                      _LATDbits 000F8C  
                                           __size_of_printError 011C  
                                                      _IPR1bits 000F9F  
                                                      _PIE1bits 000F9D  
                                                     _shiftData 225E  
                                                      i2u220_45 221C  
                                                      i2u220_46 221E  
                                                      i2u250_40 00E8  
                                                      i2u250_41 00E2  
                                                      i2u218_45 21FC  
                                                      i2u218_46 21FE  
                                                      i2u251_40 010A  
                                                      i2u243_40 002C  
                                                      i2u251_41 0104  
                                                      i2u243_41 0026  
                                                      i2u219_45 220C  
                                                      i2u219_46 220E  
                                                      i2u252_40 0138  
                                                      i2u244_40 004C  
                                                      i2u252_41 0132  
                                                      i2u244_41 0046  
                                                     _resetStep 25BE  
                                                      i2u173_40 2392  
                                                      i2u253_40 015E  
                                                      i2u245_40 006A  
                                                      i2u173_41 238C  
                                                      i2u253_41 0158  
                                                      i2u245_41 0064  
                                                      i2u174_40 23B0  
                                                      i2u254_40 0176  
                                                      i2u246_40 0084  
                                                      i2u174_41 23AA  
                                                      i2u254_41 0170  
                                                      i2u246_41 007E  
                                                      i2u239_40 1564  
                                                      i2u247_40 009C  
                                                      i2u239_41 155E  
                                                      i2u247_41 0096  
                                                      i2u248_40 00C0  
                                                      i2u248_41 00BA  
                                                      i2u249_40 00D6  
                                                      i2u249_41 00D0  
                                                      _PIR1bits 000F9E  
                                           __size_of_toggleStep 000A  
                                                  ??_fatalError 0001  
                                                     _posVector 004E  
                                                      _RCONbits 000FD0  
                                                     _therm_rel 0064  
                                                     _pwmPeriod 0055  
                                             setDirection@motor 0012  
                                                     _rotateObj 1CD0  
                                                    _ADCON0bits 000FC2  
                                                    _ADCON1bits 000FC1  
                                           __size_of_touchTherm 00F2  
                                                  _setDirection 2176  
                                                     _usartInit 24C4  
                                                     _touch_rel 0065  
                                            __end_of_feeder1Pos 060F  
                                            __end_of_feeder2Pos 060D  
                                            __end_of_feeder3Pos 060B  
                                                     _storeData 137E  
                                                ?_resetPosition 0001  
                                         __end_of_initPinMotors 249E  
                                                 ??_returnTherm 0014  
                                                 ??_returnTouch 0014  
                                                      i2_uartTx 2368  
                                                     copy_data0 201C  
                                                     copy_data1 203C  
                                                     copy_data2 205C  
                                            __end_of_fatalError 261E  
                                            rotateObj@stepAngle 0601  
                                                    ?_reduceSeq 0001  
                                                    ?_retPeriod 0001  
                                                  setStep@motor 0012  
                                                    rotateObj@i 00FD  
                                        __size_of_whatsTM0Limit 0008  
                                           __end_of_setThermRel 25E6  
                                           __end_of_moveToPoint 0D04  
                                             printError@errCode 0018  
                                                    ?_shiftData 0001  
                                                 ??_stepCounter 0014  
                                                      __Hrparam 0000  
                                                    ?_resetStep 0001  
                                           __end_of_setTouchRel 25DC  
                                                      __Lrparam 0000  
                                            i2enableMotor@motor 0001  
                                              __size_of___fldiv 0432  
                                              __size_of___fltol 0136  
                                                   _executeData 0D04  
                                                  ??_pickObject 0015  
                                                    ?_rotateObj 0001  
                                      moveToPoint@MOT1Direction 0022  
                                                 ?i2_printError 0001  
                                              __size_of_getData 000E  
                                         __end_ofi2_enableMotor 225E  
                                      moveToPoint@MOT2Direction 0023  
                                                 ??_touchObject 0016  
                                                      _abortAll 23F0  
                                                    ?_usartInit 0001  
                                              __size_of_initADC 0026  
                                                      ___xxtofl 0F92  
                                              __size_of_liftArm 00B0  
                                                    ?_storeData 0001  
                                                      _clearTM0 2548  
                                              __size_of_readSeq 0008  
                                            storeData@mexLength 006D  
                                                      _tm0Error 005B  
                                                      _tm0Limit 0068  
                                              __size_of_setStep 00D6  
                                                   _newSequence 25F6  
                                                      __ptext10 1E82  
                                                      __ptext11 208E  
                                                      __ptext20 252C  
                                                      __ptext12 2102  
                                                      __ptext21 0D04  
                                                      __ptext13 2596  
                                                      __ptext30 1CD0  
                                                      __ptext22 1AEC  
                                                      __ptext14 25E6  
                                                      __ptext31 0F92  
                                                      __ptext23 2572  
                                                      __ptext15 25EE  
                                                      __ptext40 2176  
                                                      __ptext32 177E  
                                                      __ptext24 25A0  
                                                      __ptext16 25F6  
                                                      __ptext41 25BE  
                                                      __ptext33 0610  
                                                      __ptext25 1BDE  
                                                      __ptext17 23B6  
                                                      __ptext50 25DC  
                                                      __ptext42 253A  
                                                      __ptext34 2420  
                                                      __ptext26 25FE  
                                                      __ptext18 2478  
                                                      __ptext51 2564  
                                                      __ptext43 2548  
                                                      __ptext35 244C  
                                                      __ptext27 25AA  
                                                      __ptext19 249E  
                                                      __ptext52 260E  
                                                      __ptext36 0A42  
                                                      __ptext28 257E  
                                                      __ptext53 2616  
                                                      __ptext45 14E0  
                                                      __ptext37 258A  
                                                      __ptext29 25B4  
                                                      __ptext54 23F0  
                                                      __ptext46 2556  
                                                      __ptext38 1F58  
                                                      __ptext55 19D0  
                                                      __ptext47 2606  
                                                      __ptext39 24F6  
                                                      __ptext56 2368  
                                                      __ptext48 25C8  
                                                      __ptext57 21EA  
                                                      __ptext49 25D2  
                                                  ??_releaseObj 0015  
                                              __size_of_stopADC 0008  
                                           __end_of_returnTherm 257E  
                                           __end_of_returnTouch 258A  
                                                      _tim0Init 250A  
                                                      _tim1Init 251C  
                                                      _tim2Init 24E2  
                                                 __size_of_main 013C  
                                                      _setDecay 208E  
                                            __end_of_pickObject 2478  
                                                  ??_resetTherm 0012  
                                                  ??_resetTouch 0012  
                                                     uartTx@ptr 0012  
                                                      _rotAngle 0059  
                                               isr@completeStep 0062  
                                                      int$flags 006E  
                                                      _startADC 25AA  
                                                      _stepMade 24F6  
                                           __end_of_stepCounter 2596  
                                             rotateObj@rotAngle 00FA  
                                                ??i2_printError 0005  
                                            __end_of_releaseObj 244C  
                                                      _writeTM0 2556  
                                                  ??_printError 0016  
                                                 _whatsTM0Limit 2606  
                                               ??_resetPosition 0016  
                                            tim2Init@_pwmPeriod 0012  
                                                    _INTCONbits 000FF2  
                                                  ??_toggleStep 0001  
                                              ??_getNewSequence 0014  
                                            __end_of_resetTherm 25AA  
                                            __end_of_resetTouch 25BE  
                                                   _setThermRel 25DC  
                                                  uartTx@length 0014  
                                                   _moveToPoint 0A42  
                                           __end_of_touchObject 1CD0  
                                                      intlevel2 2624  
                                             enableMotor@enable 0015  
                                                  ??_touchTherm 0016  
                                                   _setTouchRel 25D2  
                                                   ??_reduceSeq 0012  
                                                   ??_retPeriod 0003  
                                                    _RCSTA1bits 000FAB  
                                            __end_of_printError 19D0  
                                         setDirection@direction 0015  
                                                   ??_shiftData 0012  
                                                   ??_resetStep 0012  
                                            __end_of_toggleStep 25D2  
                                             ?_resetNewSequence 0001  
                                                ?_whatsTM0Limit 0001  
                                                   ??_rotateObj 00F7  
                                            ??_resetNewSequence 0012  
                                            __end_of_touchTherm 1BDE  
                                                  ?_enableMotor 0012  
                                                   ??_usartInit 0012  
                                                 ??i2_storeData 0008  
                                                   ??_storeData 0019  
                                                   _returnTherm 2572  
                                                   _returnTouch 257E  
                                                   _stepCounter 258A  
