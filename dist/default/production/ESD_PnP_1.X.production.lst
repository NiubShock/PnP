

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu Jan 28 11:37:45 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    69                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    70  0000                     
    71                           ; Version 2.20
    72                           ; Generated 12/02/2020 GMT
    73                           ; 
    74                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC18F452 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     
   106                           	psect	idataCOMRAM
   107  002228                     __pidataCOMRAM:
   108                           	callstack 0
   109                           
   110                           ;initializer for _maxY
   111  002228  03E8               	dw	1000
   112                           
   113                           ;initializer for _maxX
   114  00222A  03E8               	dw	1000
   115                           
   116                           ;initializer for storeData@mexLength
   117  00222C  05                 	db	5
   118                           
   119                           	psect	idataBANK0
   120  001F92                     __pidataBANK0:
   121                           	callstack 0
   122                           
   123                           ;initializer for rotateObj@rotSequence
   124  001F92  09                 	db	9
   125  001F93  03                 	db	3
   126  001F94  06                 	db	6
   127  001F95  0C                 	db	12
   128                           
   129                           ;initializer for _errString_Bound
   130  001F96  45                 	db	69
   131  001F97  72                 	db	114
   132  001F98  72                 	db	114
   133  001F99  6F                 	db	111
   134  001F9A  72                 	db	114
   135  001F9B  2C                 	db	44
   136  001F9C  20                 	db	32
   137  001F9D  70                 	db	112
   138  001F9E  6F                 	db	111
   139  001F9F  69                 	db	105
   140  001FA0  6E                 	db	110
   141  001FA1  74                 	db	116
   142  001FA2  20                 	db	32
   143  001FA3  6F                 	db	111
   144  001FA4  75                 	db	117
   145  001FA5  74                 	db	116
   146  001FA6  73                 	db	115
   147  001FA7  69                 	db	105
   148  001FA8  64                 	db	100
   149  001FA9  65                 	db	101
   150  001FAA  20                 	db	32
   151  001FAB  62                 	db	98
   152  001FAC  6F                 	db	111
   153  001FAD  75                 	db	117
   154  001FAE  6E                 	db	110
   155  001FAF  64                 	db	100
   156  001FB0  61                 	db	97
   157  001FB1  72                 	db	114
   158  001FB2  69                 	db	105
   159  001FB3  65                 	db	101
   160  001FB4  73                 	db	115
   161  001FB5  00                 	db	0
   162                           
   163                           ;initializer for _errString_Feed
   164  001FB6  45                 	db	69
   165  001FB7  72                 	db	114
   166  001FB8  72                 	db	114
   167  001FB9  6F                 	db	111
   168  001FBA  72                 	db	114
   169  001FBB  2C                 	db	44
   170  001FBC  20                 	db	32
   171  001FBD  66                 	db	102
   172  001FBE  65                 	db	101
   173  001FBF  65                 	db	101
   174  001FC0  64                 	db	100
   175  001FC1  20                 	db	32
   176  001FC2  6C                 	db	108
   177  001FC3  69                 	db	105
   178  001FC4  6E                 	db	110
   179  001FC5  65                 	db	101
   180  001FC6  20                 	db	32
   181  001FC7  6E                 	db	110
   182  001FC8  6F                 	db	111
   183  001FC9  74                 	db	116
   184  001FCA  20                 	db	32
   185  001FCB  64                 	db	100
   186  001FCC  65                 	db	101
   187  001FCD  66                 	db	102
   188  001FCE  69                 	db	105
   189  001FCF  6E                 	db	110
   190  001FD0  65                 	db	101
   191  001FD1  64                 	db	100
   192  001FD2  00                 	db	0
   193                           
   194                           ;initializer for _errString_Command
   195  001FD3  43                 	db	67
   196  001FD4  6F                 	db	111
   197  001FD5  6D                 	db	109
   198  001FD6  6D                 	db	109
   199  001FD7  61                 	db	97
   200  001FD8  6E                 	db	110
   201  001FD9  64                 	db	100
   202  001FDA  20                 	db	32
   203  001FDB  6E                 	db	110
   204  001FDC  6F                 	db	111
   205  001FDD  74                 	db	116
   206  001FDE  20                 	db	32
   207  001FDF  72                 	db	114
   208  001FE0  65                 	db	101
   209  001FE1  63                 	db	99
   210  001FE2  6F                 	db	111
   211  001FE3  67                 	db	103
   212  001FE4  6E                 	db	110
   213  001FE5  69                 	db	105
   214  001FE6  7A                 	db	122
   215  001FE7  65                 	db	101
   216  001FE8  64                 	db	100
   217  001FE9  00                 	db	0
   218                           
   219                           	psect	idataBANK1
   220  001B14                     __pidataBANK1:
   221                           	callstack 0
   222                           
   223                           ;initializer for _errString_PointZ
   224  001B14  45                 	db	69
   225  001B15  72                 	db	114
   226  001B16  72                 	db	114
   227  001B17  6F                 	db	111
   228  001B18  72                 	db	114
   229  001B19  2C                 	db	44
   230  001B1A  20                 	db	32
   231  001B1B  74                 	db	116
   232  001B1C  69                 	db	105
   233  001B1D  6D                 	db	109
   234  001B1E  65                 	db	101
   235  001B1F  20                 	db	32
   236  001B20  65                 	db	101
   237  001B21  78                 	db	120
   238  001B22  63                 	db	99
   239  001B23  65                 	db	101
   240  001B24  65                 	db	101
   241  001B25  64                 	db	100
   242  001B26  65                 	db	101
   243  001B27  64                 	db	100
   244  001B28  20                 	db	32
   245  001B29  74                 	db	116
   246  001B2A  6F                 	db	111
   247  001B2B  20                 	db	32
   248  001B2C  72                 	db	114
   249  001B2D  65                 	db	101
   250  001B2E  61                 	db	97
   251  001B2F  63                 	db	99
   252  001B30  68                 	db	104
   253  001B31  20                 	db	32
   254  001B32  74                 	db	116
   255  001B33  68                 	db	104
   256  001B34  65                 	db	101
   257  001B35  20                 	db	32
   258  001B36  65                 	db	101
   259  001B37  6E                 	db	110
   260  001B38  64                 	db	100
   261  001B39  20                 	db	32
   262  001B3A  6F                 	db	111
   263  001B3B  66                 	db	102
   264  001B3C  20                 	db	32
   265  001B3D  74                 	db	116
   266  001B3E  68                 	db	104
   267  001B3F  65                 	db	101
   268  001B40  20                 	db	32
   269  001B41  5A                 	db	90
   270  001B42  20                 	db	32
   271  001B43  41                 	db	65
   272  001B44  78                 	db	120
   273  001B45  69                 	db	105
   274  001B46  73                 	db	115
   275  001B47  00                 	db	0
   276                           
   277                           ;initializer for _errString_Point
   278  001B48  45                 	db	69
   279  001B49  72                 	db	114
   280  001B4A  72                 	db	114
   281  001B4B  6F                 	db	111
   282  001B4C  72                 	db	114
   283  001B4D  2C                 	db	44
   284  001B4E  20                 	db	32
   285  001B4F  74                 	db	116
   286  001B50  69                 	db	105
   287  001B51  6D                 	db	109
   288  001B52  65                 	db	101
   289  001B53  20                 	db	32
   290  001B54  65                 	db	101
   291  001B55  78                 	db	120
   292  001B56  63                 	db	99
   293  001B57  65                 	db	101
   294  001B58  65                 	db	101
   295  001B59  64                 	db	100
   296  001B5A  65                 	db	101
   297  001B5B  64                 	db	100
   298  001B5C  20                 	db	32
   299  001B5D  74                 	db	116
   300  001B5E  6F                 	db	111
   301  001B5F  20                 	db	32
   302  001B60  72                 	db	114
   303  001B61  65                 	db	101
   304  001B62  61                 	db	97
   305  001B63  63                 	db	99
   306  001B64  68                 	db	104
   307  001B65  20                 	db	32
   308  001B66  74                 	db	116
   309  001B67  68                 	db	104
   310  001B68  65                 	db	101
   311  001B69  20                 	db	32
   312  001B6A  70                 	db	112
   313  001B6B  6F                 	db	111
   314  001B6C  69                 	db	105
   315  001B6D  6E                 	db	110
   316  001B6E  74                 	db	116
   317  001B6F  00                 	db	0
   318                           
   319                           ;initializer for _errString_ZEND
   320  001B70  45                 	db	69
   321  001B71  72                 	db	114
   322  001B72  72                 	db	114
   323  001B73  6F                 	db	111
   324  001B74  72                 	db	114
   325  001B75  2C                 	db	44
   326  001B76  20                 	db	32
   327  001B77  6E                 	db	110
   328  001B78  6F                 	db	111
   329  001B79  20                 	db	32
   330  001B7A  6F                 	db	111
   331  001B7B  62                 	db	98
   332  001B7C  6A                 	db	106
   333  001B7D  65                 	db	101
   334  001B7E  63                 	db	99
   335  001B7F  74                 	db	116
   336  001B80  20                 	db	32
   337  001B81  72                 	db	114
   338  001B82  65                 	db	101
   339  001B83  6C                 	db	108
   340  001B84  65                 	db	101
   341  001B85  76                 	db	118
   342  001B86  61                 	db	97
   343  001B87  74                 	db	116
   344  001B88  65                 	db	101
   345  001B89  64                 	db	100
   346  001B8A  20                 	db	32
   347  001B8B  61                 	db	97
   348  001B8C  6C                 	db	108
   349  001B8D  6F                 	db	111
   350  001B8E  6E                 	db	110
   351  001B8F  67                 	db	103
   352  001B90  20                 	db	32
   353  001B91  5A                 	db	90
   354  001B92  20                 	db	32
   355  001B93  41                 	db	65
   356  001B94  78                 	db	120
   357  001B95  69                 	db	105
   358  001B96  73                 	db	115
   359  001B97  00                 	db	0
   360                           
   361                           ;initializer for _errString_Reset
   362  001B98  45                 	db	69
   363  001B99  72                 	db	114
   364  001B9A  72                 	db	114
   365  001B9B  6F                 	db	111
   366  001B9C  72                 	db	114
   367  001B9D  2C                 	db	44
   368  001B9E  20                 	db	32
   369  001B9F  74                 	db	116
   370  001BA0  69                 	db	105
   371  001BA1  6D                 	db	109
   372  001BA2  65                 	db	101
   373  001BA3  20                 	db	32
   374  001BA4  65                 	db	101
   375  001BA5  78                 	db	120
   376  001BA6  63                 	db	99
   377  001BA7  65                 	db	101
   378  001BA8  65                 	db	101
   379  001BA9  64                 	db	100
   380  001BAA  65                 	db	101
   381  001BAB  64                 	db	100
   382  001BAC  20                 	db	32
   383  001BAD  74                 	db	116
   384  001BAE  6F                 	db	111
   385  001BAF  20                 	db	32
   386  001BB0  72                 	db	114
   387  001BB1  65                 	db	101
   388  001BB2  73                 	db	115
   389  001BB3  65                 	db	101
   390  001BB4  74                 	db	116
   391  001BB5  20                 	db	32
   392  001BB6  70                 	db	112
   393  001BB7  6F                 	db	111
   394  001BB8  73                 	db	115
   395  001BB9  69                 	db	105
   396  001BBA  74                 	db	116
   397  001BBB  69                 	db	105
   398  001BBC  6F                 	db	111
   399  001BBD  6E                 	db	110
   400  001BBE  00                 	db	0
   401                           
   402                           ;initializer for _errString_Fatal
   403  001BBF  46                 	db	70
   404  001BC0  61                 	db	97
   405  001BC1  74                 	db	116
   406  001BC2  61                 	db	97
   407  001BC3  6C                 	db	108
   408  001BC4  20                 	db	32
   409  001BC5  45                 	db	69
   410  001BC6  72                 	db	114
   411  001BC7  72                 	db	114
   412  001BC8  6F                 	db	111
   413  001BC9  72                 	db	114
   414  001BCA  2C                 	db	44
   415  001BCB  20                 	db	32
   416  001BCC  70                 	db	112
   417  001BCD  6C                 	db	108
   418  001BCE  65                 	db	101
   419  001BCF  61                 	db	97
   420  001BD0  73                 	db	115
   421  001BD1  65                 	db	101
   422  001BD2  20                 	db	32
   423  001BD3  72                 	db	114
   424  001BD4  65                 	db	101
   425  001BD5  73                 	db	115
   426  001BD6  65                 	db	101
   427  001BD7  74                 	db	116
   428  001BD8  20                 	db	32
   429  001BD9  74                 	db	116
   430  001BDA  68                 	db	104
   431  001BDB  65                 	db	101
   432  001BDC  20                 	db	32
   433  001BDD  64                 	db	100
   434  001BDE  65                 	db	101
   435  001BDF  76                 	db	118
   436  001BE0  69                 	db	105
   437  001BE1  63                 	db	99
   438  001BE2  65                 	db	101
   439  001BE3  21                 	db	33
   440  001BE4  00                 	db	0
   441                           
   442                           	psect	smallconst
   443  000600                     __psmallconst:
   444                           	callstack 0
   445  000600  00                 	db	0
   446  000601  FFAC               	dw	65452
   447  000603  3DB3               	dw	15795
   448  000605                     __end_ofrotateObj@stepAngle:
   449                           	callstack 0
   450  000605  0400               	dw	1024
   451  000607                     __end_of_therm_pressure:
   452                           	callstack 0
   453  000607  0200               	dw	512
   454  000609                     __end_of_touch_pressure:
   455                           	callstack 0
   456  000609                     _feeder3Pos:
   457                           	callstack 0
   458  000609  19                 	db	25
   459  00060A  19                 	db	25
   460  00060B                     __end_of_feeder3Pos:
   461                           	callstack 0
   462  00060B                     _feeder2Pos:
   463                           	callstack 0
   464  00060B  0F                 	db	15
   465  00060C  0F                 	db	15
   466  00060D                     __end_of_feeder2Pos:
   467                           	callstack 0
   468  00060D                     _feeder1Pos:
   469                           	callstack 0
   470  00060D  05                 	db	5
   471  00060E  05                 	db	5
   472  00060F                     __end_of_feeder1Pos:
   473                           	callstack 0
   474  0000                     _TMR0	set	4054
   475  0000                     _TXREG	set	4013
   476  0000                     _SPBRG	set	4015
   477  0000                     _TXSTAbits	set	4012
   478  0000                     _TRISCbits	set	3988
   479  0000                     _RCREG1	set	4014
   480  0000                     _ADRESH	set	4036
   481  0000                     _ADRESL	set	4035
   482  0000                     _PIR1bits	set	3998
   483  0000                     _IPR1bits	set	3999
   484  0000                     _ADCON0bits	set	4034
   485  0000                     _PIE1bits	set	3997
   486  0000                     _RCONbits	set	4048
   487  0000                     _INTCONbits	set	4082
   488  0000                     _RCSTAbits	set	4011
   489  0000                     _RCSTA1bits	set	4011
   490  0000                     _LATD	set	3980
   491  0000                     _PORTDbits	set	3971
   492  0000                     _TMR2	set	4044
   493  0000                     _PORTEbits	set	3972
   494  0000                     _T0CONbits	set	4053
   495  0000                     _T2CONbits	set	4042
   496  0000                     _LATDbits	set	3980
   497  0000                     _LATCbits	set	3979
   498  0000                     _LATBbits	set	3978
   499  0000                     _LATAbits	set	3977
   500  0000                     _TRISDbits	set	3989
   501  0000                     _TRISEbits	set	3990
   502  0000                     _TRISD	set	3989
   503  0000                     _TRISC	set	3988
   504  0000                     _TRISB	set	3987
   505  0000                     _TRISA	set	3986
   506  0000                     _ADCON1bits	set	4033
   507  00060F  00                 	db	0	; dummy byte at the end
   508  0000                     
   509                           ; #config settings
   510                           
   511                           	psect	cinit
   512  001D50                     __pcinit:
   513                           	callstack 0
   514  001D50                     start_initialization:
   515                           	callstack 0
   516  001D50                     __initialization:
   517                           	callstack 0
   518                           
   519                           ; Initialize objects allocated to BANK1 (209 bytes)
   520                           ; load TBLPTR registers with __pidataBANK1
   521  001D50  0E14               	movlw	low __pidataBANK1
   522  001D52  6EF6               	movwf	tblptrl,c
   523  001D54  0E1B               	movlw	high __pidataBANK1
   524  001D56  6EF7               	movwf	tblptrh,c
   525  001D58  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   526  001D5A  6EF8               	movwf	tblptru,c
   527  001D5C  EE01  F000         	lfsr	0,__pdataBANK1
   528  001D60  EE10 F0D1          	lfsr	1,209
   529  001D64                     copy_data0:
   530  001D64  0009               	tblrd		*+
   531  001D66  CFF5 FFEE          	movff	tablat,postinc0
   532  001D6A  50E5               	movf	postdec1,w,c
   533  001D6C  50E1               	movf	fsr1l,w,c
   534  001D6E  E1FA               	bnz	copy_data0
   535                           
   536                           ; Initialize objects allocated to BANK0 (88 bytes)
   537                           ; load TBLPTR registers with __pidataBANK0
   538  001D70  0E92               	movlw	low __pidataBANK0
   539  001D72  6EF6               	movwf	tblptrl,c
   540  001D74  0E1F               	movlw	high __pidataBANK0
   541  001D76  6EF7               	movwf	tblptrh,c
   542  001D78  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   543  001D7A  6EF8               	movwf	tblptru,c
   544  001D7C  EE00  F080         	lfsr	0,__pdataBANK0
   545  001D80  EE10 F058          	lfsr	1,88
   546  001D84                     copy_data1:
   547  001D84  0009               	tblrd		*+
   548  001D86  CFF5 FFEE          	movff	tablat,postinc0
   549  001D8A  50E5               	movf	postdec1,w,c
   550  001D8C  50E1               	movf	fsr1l,w,c
   551  001D8E  E1FA               	bnz	copy_data1
   552                           
   553                           ; Initialize objects allocated to COMRAM (5 bytes)
   554                           ; load TBLPTR registers with __pidataCOMRAM
   555  001D90  0E28               	movlw	low __pidataCOMRAM
   556  001D92  6EF6               	movwf	tblptrl,c
   557  001D94  0E22               	movlw	high __pidataCOMRAM
   558  001D96  6EF7               	movwf	tblptrh,c
   559  001D98  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   560  001D9A  6EF8               	movwf	tblptru,c
   561  001D9C  EE00  F069         	lfsr	0,__pdataCOMRAM
   562  001DA0  EE10 F005          	lfsr	1,5
   563  001DA4                     copy_data2:
   564  001DA4  0009               	tblrd		*+
   565  001DA6  CFF5 FFEE          	movff	tablat,postinc0
   566  001DAA  50E5               	movf	postdec1,w,c
   567  001DAC  50E1               	movf	fsr1l,w,c
   568  001DAE  E1FA               	bnz	copy_data2
   569                           
   570                           ; Clear objects allocated to BANK0 (28 bytes)
   571  001DB0  EE00  F0D8         	lfsr	0,__pbssBANK0
   572  001DB4  0E1C               	movlw	28
   573  001DB6                     clear_0:
   574  001DB6  6AEE               	clrf	postinc0,c
   575  001DB8  06E8               	decf	wreg,f,c
   576  001DBA  E1FD               	bnz	clear_0
   577                           
   578                           ; Clear objects allocated to COMRAM (36 bytes)
   579  001DBC  EE00  F045         	lfsr	0,__pbssCOMRAM
   580  001DC0  0E24               	movlw	36
   581  001DC2                     clear_1:
   582  001DC2  6AEE               	clrf	postinc0,c
   583  001DC4  06E8               	decf	wreg,f,c
   584  001DC6  E1FD               	bnz	clear_1
   585  001DC8                     end_of_initialization:
   586                           	callstack 0
   587  001DC8                     __end_of__initialization:
   588                           	callstack 0
   589  001DC8  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   590  001DCA  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   591  001DCC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   592  001DCE  6EF8               	movwf	tblptru,c
   593  001DD0  0100               	movlb	0
   594  001DD2  EF4B  F009         	goto	_main	;jump to C main() function
   595                           
   596                           	psect	bssCOMRAM
   597  000045                     __pbssCOMRAM:
   598                           	callstack 0
   599  000045                     storeData@receivedMex:
   600                           	callstack 0
   601  000045                     	ds	9
   602  00004E                     _posVector:
   603                           	callstack 0
   604  00004E                     	ds	3
   605  000051                     isr@single_cycle:
   606                           	callstack 0
   607  000051                     	ds	2
   608  000053                     _ADC_res:
   609                           	callstack 0
   610  000053                     	ds	2
   611  000055                     _pwmPeriod:
   612                           	callstack 0
   613  000055                     	ds	2
   614  000057                     _newFeeder:
   615                           	callstack 0
   616  000057                     	ds	2
   617  000059                     _rotAngle:
   618                           	callstack 0
   619  000059                     	ds	2
   620  00005B                     _tm0Error:
   621                           	callstack 0
   622  00005B                     	ds	2
   623  00005D                     	ds	1
   624  00005E                     storeData@counter:
   625                           	callstack 0
   626  00005E                     	ds	1
   627  00005F                     __newSequence:
   628                           	callstack 0
   629  00005F                     	ds	1
   630  000060                     __fatalError:
   631                           	callstack 0
   632  000060                     	ds	1
   633  000061                     _dataCounter:
   634                           	callstack 0
   635  000061                     	ds	1
   636  000062                     isr@completeStep:
   637                           	callstack 0
   638  000062                     	ds	1
   639  000063                     isr@tm0Count:
   640                           	callstack 0
   641  000063                     	ds	1
   642  000064                     _therm_rel:
   643                           	callstack 0
   644  000064                     	ds	1
   645  000065                     _touch_rel:
   646                           	callstack 0
   647  000065                     	ds	1
   648  000066                     _stepToggle:
   649                           	callstack 0
   650  000066                     	ds	1
   651  000067                     _pwmStep:
   652                           	callstack 0
   653  000067                     	ds	1
   654  000068                     _tm0Limit:
   655                           	callstack 0
   656  000068                     	ds	1
   657                           
   658                           	psect	dataCOMRAM
   659  000069                     __pdataCOMRAM:
   660                           	callstack 0
   661  000069                     	ds	2
   662  00006B                     	ds	2
   663  00006D                     storeData@mexLength:
   664                           	callstack 0
   665  00006D                     	ds	1
   666                           
   667                           	psect	bssBANK0
   668  0000D8                     __pbssBANK0:
   669                           	callstack 0
   670  0000D8                     _dataSequence:
   671                           	callstack 0
   672  0000D8                     	ds	20
   673  0000EC                     _newSequenceData:
   674                           	callstack 0
   675  0000EC                     	ds	8
   676                           
   677                           	psect	dataBANK0
   678  000080                     __pdataBANK0:
   679                           	callstack 0
   680  000080                     rotateObj@rotSequence:
   681                           	callstack 0
   682  000080                     	ds	4
   683  000084                     _errString_Bound:
   684                           	callstack 0
   685  000084                     	ds	32
   686  0000A4                     _errString_Feed:
   687                           	callstack 0
   688  0000A4                     	ds	29
   689  0000C1                     _errString_Command:
   690                           	callstack 0
   691  0000C1                     	ds	23
   692                           
   693                           	psect	dataBANK1
   694  000100                     __pdataBANK1:
   695                           	callstack 0
   696  000100                     _errString_PointZ:
   697                           	callstack 0
   698  000100                     	ds	52
   699  000134                     _errString_Point:
   700                           	callstack 0
   701  000134                     	ds	40
   702  00015C                     _errString_ZEND:
   703                           	callstack 0
   704  00015C                     	ds	40
   705  000184                     _errString_Reset:
   706                           	callstack 0
   707  000184                     	ds	39
   708  0001AB                     _errString_Fatal:
   709                           	callstack 0
   710  0001AB                     	ds	38
   711                           
   712                           	psect	cstackBANK1
   713  0001D1                     __pcstackBANK1:
   714                           	callstack 0
   715  0001D1                     main@errCode:
   716                           	callstack 0
   717                           
   718                           ; 1 bytes @ 0x0
   719  0001D1                     	ds	1
   720  0001D2                     main@newData:
   721                           	callstack 0
   722                           
   723                           ; 2 bytes @ 0x1
   724  0001D2                     	ds	2
   725                           
   726                           	psect	cstackBANK0
   727  0000F4                     __pcstackBANK0:
   728                           	callstack 0
   729  0000F4                     ??_rotateObj:
   730                           
   731                           ; 1 bytes @ 0x0
   732  0000F4                     	ds	3
   733  0000F7                     rotateObj@rotAngle:
   734                           	callstack 0
   735                           
   736                           ; 1 bytes @ 0x3
   737  0000F7                     	ds	1
   738  0000F8                     rotateObj@totStep:
   739                           	callstack 0
   740                           
   741                           ; 2 bytes @ 0x4
   742  0000F8                     	ds	2
   743  0000FA                     rotateObj@i:
   744                           	callstack 0
   745                           
   746                           ; 1 bytes @ 0x6
   747  0000FA                     	ds	1
   748  0000FB                     executeData@errCode:
   749                           	callstack 0
   750                           
   751                           ; 1 bytes @ 0x7
   752  0000FB                     	ds	1
   753  0000FC                     executeData@data:
   754                           	callstack 0
   755                           
   756                           ; 2 bytes @ 0x8
   757  0000FC                     	ds	2
   758  0000FE                     ??_main:
   759                           
   760                           ; 1 bytes @ 0xA
   761  0000FE                     	ds	2
   762                           
   763                           	psect	cstackCOMRAM
   764  000001                     __pcstackCOMRAM:
   765                           	callstack 0
   766  000001                     ?_retPeriod:
   767                           	callstack 0
   768  000001                     i2uartTx@ptr:
   769                           	callstack 0
   770                           
   771                           ; 2 bytes @ 0x0
   772  000001                     	ds	2
   773  000003                     i2uartTx@length:
   774                           	callstack 0
   775                           
   776                           ; 1 bytes @ 0x2
   777  000003                     	ds	1
   778  000004                     i2uartTx@i:
   779                           	callstack 0
   780                           
   781                           ; 1 bytes @ 0x3
   782  000004                     	ds	1
   783  000005                     ??i2_printError:
   784                           
   785                           ; 1 bytes @ 0x4
   786  000005                     	ds	2
   787  000007                     i2printError@errCode:
   788                           	callstack 0
   789                           
   790                           ; 1 bytes @ 0x6
   791  000007                     	ds	1
   792  000008                     ??i2_storeData:
   793                           
   794                           ; 1 bytes @ 0x7
   795  000008                     	ds	2
   796  00000A                     i2storeData@data:
   797                           	callstack 0
   798                           
   799                           ; 1 bytes @ 0x9
   800  00000A                     	ds	1
   801  00000B                     ??_isr:
   802                           
   803                           ; 1 bytes @ 0xA
   804  00000B                     	ds	6
   805  000011                     isr@temp:
   806                           	callstack 0
   807                           
   808                           ; 1 bytes @ 0x10
   809  000011                     	ds	1
   810  000012                     ??_shiftData:
   811  000012                     ?_stepMade:
   812                           	callstack 0
   813  000012                     ?_stepCounter:
   814                           	callstack 0
   815  000012                     ?_getNewSequence:
   816                           	callstack 0
   817  000012                     ?_getData:
   818                           	callstack 0
   819  000012                     ?___xxtofl:
   820                           	callstack 0
   821  000012                     setStep@motor:
   822                           	callstack 0
   823  000012                     enableMotor@motor:
   824                           	callstack 0
   825  000012                     setDirection@motor:
   826                           	callstack 0
   827  000012                     setDecay@motor:
   828                           	callstack 0
   829  000012                     tim2Init@_pwmPeriod:
   830                           	callstack 0
   831  000012                     uartTx@ptr:
   832                           	callstack 0
   833  000012                     ___xxtofl@val:
   834                           	callstack 0
   835                           
   836                           ; 4 bytes @ 0x11
   837  000012                     	ds	1
   838  000013                     ??_setStep:
   839  000013                     ??_enableMotor:
   840  000013                     ??_setDirection:
   841  000013                     ??_setDecay:
   842                           
   843                           ; 1 bytes @ 0x12
   844  000013                     	ds	1
   845  000014                     stepMade@temp:
   846                           	callstack 0
   847  000014                     shiftData@i:
   848                           	callstack 0
   849  000014                     uartTx@length:
   850                           	callstack 0
   851                           
   852                           ; 1 bytes @ 0x13
   853  000014                     	ds	1
   854  000015                     setStep@step:
   855                           	callstack 0
   856  000015                     enableMotor@enable:
   857                           	callstack 0
   858  000015                     setDirection@direction:
   859                           	callstack 0
   860  000015                     setDecay@decay:
   861                           	callstack 0
   862  000015                     uartTx@i:
   863                           	callstack 0
   864                           
   865                           ; 1 bytes @ 0x14
   866  000015                     	ds	1
   867  000016                     ??_printError:
   868  000016                     ??___xxtofl:
   869  000016                     resetPosition@keepMovingX:
   870                           	callstack 0
   871  000016                     moveToPoint@x1:
   872                           	callstack 0
   873                           
   874                           ; 2 bytes @ 0x15
   875  000016                     	ds	1
   876  000017                     resetPosition@keepMovingY:
   877                           	callstack 0
   878                           
   879                           ; 1 bytes @ 0x16
   880  000017                     	ds	1
   881  000018                     resetPosition@keepMovingZ:
   882                           	callstack 0
   883  000018                     printError@errCode:
   884                           	callstack 0
   885  000018                     moveToPoint@y1:
   886                           	callstack 0
   887                           
   888                           ; 2 bytes @ 0x17
   889  000018                     	ds	1
   890  000019                     ??_storeData:
   891                           
   892                           ; 1 bytes @ 0x18
   893  000019                     	ds	1
   894  00001A                     ___xxtofl@sign:
   895                           	callstack 0
   896  00001A                     moveToPoint@x2:
   897                           	callstack 0
   898                           
   899                           ; 2 bytes @ 0x19
   900  00001A                     	ds	1
   901  00001B                     storeData@data:
   902                           	callstack 0
   903  00001B                     ___xxtofl@exp:
   904                           	callstack 0
   905                           
   906                           ; 1 bytes @ 0x1A
   907  00001B                     	ds	1
   908  00001C                     moveToPoint@y2:
   909                           	callstack 0
   910  00001C                     ___xxtofl@arg:
   911                           	callstack 0
   912                           
   913                           ; 4 bytes @ 0x1B
   914  00001C                     	ds	2
   915  00001E                     ??_moveToPoint:
   916                           
   917                           ; 1 bytes @ 0x1D
   918  00001E                     	ds	2
   919  000020                     ?___fldiv:
   920                           	callstack 0
   921  000020                     moveToPoint@keepMovingX:
   922                           	callstack 0
   923  000020                     ___fldiv@b:
   924                           	callstack 0
   925                           
   926                           ; 4 bytes @ 0x1F
   927  000020                     	ds	1
   928  000021                     moveToPoint@keepMovingY:
   929                           	callstack 0
   930                           
   931                           ; 1 bytes @ 0x20
   932  000021                     	ds	3
   933  000024                     ___fldiv@a:
   934                           	callstack 0
   935                           
   936                           ; 4 bytes @ 0x23
   937  000024                     	ds	4
   938  000028                     ??___fldiv:
   939                           
   940                           ; 1 bytes @ 0x27
   941  000028                     	ds	4
   942  00002C                     ___fldiv@rem:
   943                           	callstack 0
   944                           
   945                           ; 4 bytes @ 0x2B
   946  00002C                     	ds	4
   947  000030                     ___fldiv@sign:
   948                           	callstack 0
   949                           
   950                           ; 1 bytes @ 0x2F
   951  000030                     	ds	1
   952  000031                     ___fldiv@new_exp:
   953                           	callstack 0
   954                           
   955                           ; 2 bytes @ 0x30
   956  000031                     	ds	2
   957  000033                     ___fldiv@grs:
   958                           	callstack 0
   959                           
   960                           ; 4 bytes @ 0x32
   961  000033                     	ds	4
   962  000037                     ___fldiv@bexp:
   963                           	callstack 0
   964                           
   965                           ; 1 bytes @ 0x36
   966  000037                     	ds	1
   967  000038                     ___fldiv@aexp:
   968                           	callstack 0
   969                           
   970                           ; 1 bytes @ 0x37
   971  000038                     	ds	1
   972  000039                     ?___fltol:
   973                           	callstack 0
   974  000039                     ___fltol@f1:
   975                           	callstack 0
   976                           
   977                           ; 4 bytes @ 0x38
   978  000039                     	ds	4
   979  00003D                     ??___fltol:
   980                           
   981                           ; 1 bytes @ 0x3C
   982  00003D                     	ds	4
   983  000041                     ___fltol@sign1:
   984                           	callstack 0
   985                           
   986                           ; 1 bytes @ 0x40
   987  000041                     	ds	1
   988  000042                     ___fltol@exp1:
   989                           	callstack 0
   990                           
   991                           ; 1 bytes @ 0x41
   992  000042                     	ds	1
   993  000043                     ??_executeData:
   994                           
   995                           ; 1 bytes @ 0x42
   996  000043                     	ds	2
   997                           
   998 ;;
   999 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1000 ;;
  1001 ;; *************** function _main *****************
  1002 ;; Defined at:
  1003 ;;		line 26 in file "main.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;		None
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;  newData         2    1[BANK1 ] PTR struct .
  1008 ;;		 -> newSequenceData(8), 
  1009 ;;  errCode         1    0[BANK1 ] unsigned char 
  1010 ;; Return value:  Size  Location     Type
  1011 ;;                  1    wreg      void 
  1012 ;; Registers used:
  1013 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1014 ;; Tracked objects:
  1015 ;;		On entry : 0/0
  1016 ;;		On exit  : 0/0
  1017 ;;		Unchanged: 0/0
  1018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1019 ;;      Params:         0       0       0       0       0       0       0
  1020 ;;      Locals:         0       0       3       0       0       0       0
  1021 ;;      Temps:          0       2       0       0       0       0       0
  1022 ;;      Totals:         0       2       3       0       0       0       0
  1023 ;;Total ram usage:        5 bytes
  1024 ;; Hardware stack levels required when called:    7
  1025 ;; This function calls:
  1026 ;;		_clearTM0
  1027 ;;		_enableMotor
  1028 ;;		_executeData
  1029 ;;		_fatalError
  1030 ;;		_getNewSequence
  1031 ;;		_initADC
  1032 ;;		_initPinMotors
  1033 ;;		_interruptInit
  1034 ;;		_newSequence
  1035 ;;		_printError
  1036 ;;		_readSeq
  1037 ;;		_reduceSeq
  1038 ;;		_resetNewSequence
  1039 ;;		_resetPosition
  1040 ;;		_shiftData
  1041 ;;		_storeData
  1042 ;;		_tim0Init
  1043 ;;		_tim2Init
  1044 ;;		_usartInit
  1045 ;; This function is called by:
  1046 ;;		Startup code after reset
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050                           	psect	text0
  1051  001296                     __ptext0:
  1052                           	callstack 0
  1053  001296                     _main:
  1054                           	callstack 24
  1055  001296  FFFF               	dw	65535	; assembler added errata NOP
  1056                           
  1057                           ;main.c: 30:     interruptInit();
  1058  001298  EC43  F010         	call	_interruptInit	;wreg free
  1059  00129C                     
  1060                           ;main.c: 31:     initPinMotors();
  1061  00129C  EC60  F010         	call	_initPinMotors	;wreg free
  1062  0012A0                     
  1063                           ;main.c: 32:     initADC();
  1064  0012A0  EC73  F010         	call	_initADC	;wreg free
  1065  0012A4                     
  1066                           ;main.c: 33:     tim0Init();
  1067  0012A4  ECA9  F010         	call	_tim0Init	;wreg free
  1068  0012A8                     
  1069                           ;main.c: 34:     tim2Init(10);
  1070  0012A8  0E00               	movlw	0
  1071  0012AA  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1072  0012AC  0E0A               	movlw	10
  1073  0012AE  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1074  0012B0  EC95  F010         	call	_tim2Init	;wreg free
  1075                           
  1076                           ;main.c: 37:     resetPosition();
  1077  0012B4  EC5D  F007         	call	_resetPosition	;wreg free
  1078  0012B8                     
  1079                           ;main.c: 40:     usartInit();
  1080  0012B8  EC86  F010         	call	_usartInit	;wreg free
  1081  0012BC                     
  1082                           ;main.c: 41:     RCSTA1bits.CREN = 1;
  1083  0012BC  88AB               	bsf	171,4,c	;volatile
  1084  0012BE                     l4089:
  1085  0012BE  FFFF               	dw	65535	; assembler added errata NOP
  1086                           
  1087                           ;main.c: 44:         if(fatalError()){
  1088  0012C0  EC00  F011         	call	_fatalError	;wreg free
  1089  0012C4  0900               	iorlw	0
  1090  0012C6  B4D8               	btfsc	status,2,c
  1091  0012C8  EF68  F009         	goto	u3241
  1092  0012CC  EF6B  F009         	goto	u3240
  1093  0012D0                     u3241:
  1094  0012D0  FFFF               	dw	65535	; assembler added errata NOP
  1095  0012D2  EF81  F009         	goto	l4095
  1096  0012D6                     u3240:
  1097  0012D6  FFFF               	dw	65535	; assembler added errata NOP
  1098  0012D8                     
  1099                           ;main.c: 46:             enableMotor(1, 0);
  1100  0012D8  0E00               	movlw	0
  1101  0012DA  6E12               	movwf	enableMotor@motor^0,c
  1102  0012DC  0E01               	movlw	1
  1103  0012DE  EC25  F00F         	call	_enableMotor
  1104                           
  1105                           ;main.c: 47:             enableMotor(1, 1);
  1106  0012E2  0E01               	movlw	1
  1107  0012E4  6E12               	movwf	enableMotor@motor^0,c
  1108  0012E6  0E01               	movlw	1
  1109  0012E8  EC25  F00F         	call	_enableMotor
  1110                           
  1111                           ;main.c: 48:             enableMotor(1, 2);
  1112  0012EC  0E02               	movlw	2
  1113  0012EE  6E12               	movwf	enableMotor@motor^0,c
  1114  0012F0  0E01               	movlw	1
  1115  0012F2  EC25  F00F         	call	_enableMotor
  1116  0012F6                     
  1117                           ;main.c: 50:             printError(7);
  1118  0012F6  0E07               	movlw	7
  1119  0012F8  EC03  F00C         	call	_printError
  1120  0012FC                     l295:
  1121  0012FC  FFFF               	dw	65535	; assembler added errata NOP
  1122  0012FE  EF7E  F009         	goto	l295
  1123  001302                     l4095:
  1124  001302  FFFF               	dw	65535	; assembler added errata NOP
  1125  001304  ECFC  F010         	call	_newSequence	;wreg free
  1126  001308  0900               	iorlw	0
  1127  00130A  B4D8               	btfsc	status,2,c
  1128  00130C  EF8A  F009         	goto	u3251
  1129  001310  EF8D  F009         	goto	u3250
  1130  001314                     u3251:
  1131  001314  FFFF               	dw	65535	; assembler added errata NOP
  1132  001316  EFEB  F009         	goto	l4129
  1133  00131A                     u3250:
  1134  00131A  FFFF               	dw	65535	; assembler added errata NOP
  1135  00131C                     
  1136                           ;main.c: 53:             t_newSequence* newData = getNewSequence();
  1137  00131C  ECB2  F010         	call	_getNewSequence	;wreg free
  1138  001320  C012  F1D2         	movff	?_getNewSequence,main@newData
  1139  001324  C013  F1D3         	movff	?_getNewSequence+1,main@newData+1
  1140  001328                     
  1141                           ;main.c: 55:             newFeeder[0] = newData ->init_posX;
  1142  001328  0101               	movlb	1	; () banked
  1143  00132A  EE20 F002          	lfsr	2,2
  1144  00132E  51D2               	movf	main@newData& (0+255),w,b
  1145  001330  26D9               	addwf	fsr2l,f,c
  1146  001332  51D3               	movf	(main@newData+1)& (0+255),w,b
  1147  001334  22DA               	addwfc	fsr2h,f,c
  1148  001336  50DF               	movf	indf2,w,c
  1149  001338  6E57               	movwf	_newFeeder^0,c
  1150  00133A                     
  1151                           ; BSR set to: 1
  1152                           ;main.c: 56:             newFeeder[1] = newData ->init_posY;
  1153  00133A  EE20 F003          	lfsr	2,3
  1154  00133E  51D2               	movf	main@newData& (0+255),w,b
  1155  001340  26D9               	addwf	fsr2l,f,c
  1156  001342  51D3               	movf	(main@newData+1)& (0+255),w,b
  1157  001344  22DA               	addwfc	fsr2h,f,c
  1158  001346  50DF               	movf	indf2,w,c
  1159  001348  6E58               	movwf	(_newFeeder+1)^0,c
  1160  00134A                     
  1161                           ; BSR set to: 1
  1162                           ;main.c: 60:             RCSTAbits.CREN = 0;
  1163  00134A  98AB               	bcf	171,4,c	;volatile
  1164  00134C                     
  1165                           ; BSR set to: 1
  1166                           ;main.c: 63:             storeData(0);
  1167  00134C  0E00               	movlw	0
  1168  00134E  EC06  F00A         	call	_storeData
  1169  001352                     
  1170                           ;main.c: 64:             storeData(0xFF);
  1171  001352  0EFF               	movlw	255
  1172  001354  EC06  F00A         	call	_storeData
  1173  001358                     
  1174                           ;main.c: 65:             storeData(newData ->end_posX);
  1175  001358  0101               	movlb	1	; () banked
  1176  00135A  EE20 F005          	lfsr	2,5
  1177  00135E  51D2               	movf	main@newData& (0+255),w,b
  1178  001360  26D9               	addwf	fsr2l,f,c
  1179  001362  51D3               	movf	(main@newData+1)& (0+255),w,b
  1180  001364  22DA               	addwfc	fsr2h,f,c
  1181  001366  50DF               	movf	indf2,w,c
  1182  001368  EC06  F00A         	call	_storeData
  1183  00136C                     
  1184                           ;main.c: 66:             storeData(newData ->end_posY);
  1185  00136C  0101               	movlb	1	; () banked
  1186  00136E  EE20 F006          	lfsr	2,6
  1187  001372  51D2               	movf	main@newData& (0+255),w,b
  1188  001374  26D9               	addwf	fsr2l,f,c
  1189  001376  51D3               	movf	(main@newData+1)& (0+255),w,b
  1190  001378  22DA               	addwfc	fsr2h,f,c
  1191  00137A  50DF               	movf	indf2,w,c
  1192  00137C  EC06  F00A         	call	_storeData
  1193  001380                     
  1194                           ;main.c: 67:             storeData(newData ->end_rot - newData ->init_rot);
  1195  001380  0101               	movlb	1	; () banked
  1196  001382  EE20 F004          	lfsr	2,4
  1197  001386  51D2               	movf	main@newData& (0+255),w,b
  1198  001388  26D9               	addwf	fsr2l,f,c
  1199  00138A  51D3               	movf	(main@newData+1)& (0+255),w,b
  1200  00138C  22DA               	addwfc	fsr2h,f,c
  1201  00138E  50DF               	movf	indf2,w,c
  1202  001390  0100               	movlb	0	; () banked
  1203  001392  6FFE               	movwf	??_main& (0+255),b
  1204  001394  0101               	movlb	1	; () banked
  1205  001396  EE20 F007          	lfsr	2,7
  1206  00139A  51D2               	movf	main@newData& (0+255),w,b
  1207  00139C  26D9               	addwf	fsr2l,f,c
  1208  00139E  51D3               	movf	(main@newData+1)& (0+255),w,b
  1209  0013A0  22DA               	addwfc	fsr2h,f,c
  1210  0013A2  50DF               	movf	indf2,w,c
  1211  0013A4  0100               	movlb	0	; () banked
  1212  0013A6  6FFF               	movwf	(??_main+1)& (0+255),b
  1213  0013A8  51FE               	movf	??_main& (0+255),w,b
  1214  0013AA  5DFF               	subwf	(??_main+1)& (0+255),w,b
  1215  0013AC  EC06  F00A         	call	_storeData
  1216  0013B0                     
  1217                           ;main.c: 70:             RCSTAbits.CREN = 1;
  1218  0013B0  88AB               	bsf	171,4,c	;volatile
  1219  0013B2                     
  1220                           ;main.c: 73:             resetNewSequence();
  1221  0013B2  ECDB  F010         	call	_resetNewSequence	;wreg free
  1222  0013B6                     
  1223                           ;main.c: 75:             errCode = executeData();
  1224  0013B6  EC21  F005         	call	_executeData	;wreg free
  1225  0013BA  0101               	movlb	1	; () banked
  1226  0013BC  6FD1               	movwf	main@errCode& (0+255),b
  1227  0013BE                     
  1228                           ; BSR set to: 1
  1229                           ;main.c: 76:             printError(errCode);
  1230  0013BE  51D1               	movf	main@errCode& (0+255),w,b
  1231  0013C0  EC03  F00C         	call	_printError
  1232  0013C4                     l4123:
  1233  0013C4  FFFF               	dw	65535	; assembler added errata NOP
  1234                           
  1235                           ;main.c: 77:             clearTM0();
  1236  0013C6  ECC0  F010         	call	_clearTM0	;wreg free
  1237  0013CA                     
  1238                           ;main.c: 81:             reduceSeq();
  1239  0013CA  ECF4  F010         	call	_reduceSeq	;wreg free
  1240  0013CE                     
  1241                           ;main.c: 82:             shiftData();
  1242  0013CE  EC99  F00F         	call	_shiftData	;wreg free
  1243                           
  1244                           ;main.c: 84:         }else if(readSeq()){
  1245  0013D2  EF5F  F009         	goto	l4089
  1246  0013D6                     l4129:
  1247  0013D6  FFFF               	dw	65535	; assembler added errata NOP
  1248  0013D8  ECF8  F010         	call	_readSeq	;wreg free
  1249  0013DC  0900               	iorlw	0
  1250  0013DE  B4D8               	btfsc	status,2,c
  1251  0013E0  EFF4  F009         	goto	u3261
  1252  0013E4  EFF7  F009         	goto	u3260
  1253  0013E8                     u3261:
  1254  0013E8  FFFF               	dw	65535	; assembler added errata NOP
  1255  0013EA  EF01  F00A         	goto	l298
  1256  0013EE                     u3260:
  1257  0013EE  FFFF               	dw	65535	; assembler added errata NOP
  1258  0013F0                     
  1259                           ;main.c: 87:             errCode = executeData();
  1260  0013F0  EC21  F005         	call	_executeData	;wreg free
  1261  0013F4  0101               	movlb	1	; () banked
  1262  0013F6  6FD1               	movwf	main@errCode& (0+255),b
  1263  0013F8                     
  1264                           ; BSR set to: 1
  1265                           ;main.c: 88:             printError(errCode);
  1266  0013F8  51D1               	movf	main@errCode& (0+255),w,b
  1267  0013FA  EC03  F00C         	call	_printError
  1268  0013FE  EFE2  F009         	goto	l4123
  1269  001402                     l298:
  1270  001402  FFFF               	dw	65535	; assembler added errata NOP
  1271  001404  EF5F  F009         	goto	l4089
  1272  001408  EFB5  F000         	goto	start
  1273  00140C                     __end_of_main:
  1274                           	callstack 0
  1275                           
  1276 ;; *************** function _usartInit *****************
  1277 ;; Defined at:
  1278 ;;		line 34 in file "usart.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;		None
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;		None
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg, status,2
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1292 ;;      Params:         0       0       0       0       0       0       0
  1293 ;;      Locals:         0       0       0       0       0       0       0
  1294 ;;      Temps:          0       0       0       0       0       0       0
  1295 ;;      Totals:         0       0       0       0       0       0       0
  1296 ;;Total ram usage:        0 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    4
  1299 ;; This function calls:
  1300 ;;		Nothing
  1301 ;; This function is called by:
  1302 ;;		_main
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           	psect	text1
  1307  00210C                     __ptext1:
  1308                           	callstack 0
  1309  00210C                     _usartInit:
  1310                           	callstack 0
  1311  00210C  FFFF               	dw	65535	; assembler added errata NOP
  1312  00210E                     
  1313                           ;usart.c: 36:     TRISCbits.TRISC6 = 0;
  1314  00210E  9C94               	bcf	148,6,c	;volatile
  1315                           
  1316                           ;usart.c: 37:     TRISCbits.TRISC7 = 1;
  1317  002110  8E94               	bsf	148,7,c	;volatile
  1318                           
  1319                           ;usart.c: 39:     TXSTAbits.TX9 = 0;
  1320  002112  9CAC               	bcf	172,6,c	;volatile
  1321                           
  1322                           ;usart.c: 40:     TXSTAbits.TXEN = 1;
  1323  002114  8AAC               	bsf	172,5,c	;volatile
  1324                           
  1325                           ;usart.c: 41:     TXSTAbits.SYNC = 0;
  1326  002116  98AC               	bcf	172,4,c	;volatile
  1327                           
  1328                           ;usart.c: 42:     TXSTAbits.BRGH = 0;
  1329  002118  94AC               	bcf	172,2,c	;volatile
  1330                           
  1331                           ;usart.c: 44:     RCSTAbits.SPEN = 1;
  1332  00211A  8EAB               	bsf	171,7,c	;volatile
  1333                           
  1334                           ;usart.c: 45:     RCSTAbits.RX9 = 0;
  1335  00211C  9CAB               	bcf	171,6,c	;volatile
  1336                           
  1337                           ;usart.c: 46:     RCSTAbits.CREN = 0;
  1338  00211E  98AB               	bcf	171,4,c	;volatile
  1339                           
  1340                           ;usart.c: 47:     RCSTAbits.ADDEN = 0;
  1341  002120  96AB               	bcf	171,3,c	;volatile
  1342  002122                     
  1343                           ;usart.c: 50:     SPBRG = 25;
  1344  002122  0E19               	movlw	25
  1345  002124  6EAF               	movwf	175,c	;volatile
  1346  002126  0012               	return		;funcret
  1347  002128  FFFF               	dw	65535	; errata NOP
  1348  00212A                     __end_of_usartInit:
  1349                           	callstack 0
  1350                           
  1351 ;; *************** function _tim2Init *****************
  1352 ;; Defined at:
  1353 ;;		line 34 in file "pwm.c"
  1354 ;; Parameters:    Size  Location     Type
  1355 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1356 ;; Auto vars:     Size  Location     Type
  1357 ;;		None
  1358 ;; Return value:  Size  Location     Type
  1359 ;;                  1    wreg      void 
  1360 ;; Registers used:
  1361 ;;		wreg, status,2
  1362 ;; Tracked objects:
  1363 ;;		On entry : 0/0
  1364 ;;		On exit  : 0/0
  1365 ;;		Unchanged: 0/0
  1366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1367 ;;      Params:         2       0       0       0       0       0       0
  1368 ;;      Locals:         0       0       0       0       0       0       0
  1369 ;;      Temps:          0       0       0       0       0       0       0
  1370 ;;      Totals:         2       0       0       0       0       0       0
  1371 ;;Total ram usage:        2 bytes
  1372 ;; Hardware stack levels used:    1
  1373 ;; Hardware stack levels required when called:    4
  1374 ;; This function calls:
  1375 ;;		Nothing
  1376 ;; This function is called by:
  1377 ;;		_main
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text2
  1382  00212A                     __ptext2:
  1383                           	callstack 0
  1384  00212A                     _tim2Init:
  1385                           	callstack 0
  1386  00212A  FFFF               	dw	65535	; assembler added errata NOP
  1387  00212C                     
  1388                           ;pwm.c: 35:     T2CONbits.TMR2ON = 0;
  1389  00212C  94CA               	bcf	202,2,c	;volatile
  1390  00212E                     
  1391                           ;pwm.c: 36:     T2CONbits.T2CKPS = 0x03;
  1392  00212E  0E03               	movlw	3
  1393  002130  12CA               	iorwf	202,f,c	;volatile
  1394  002132                     
  1395                           ;pwm.c: 39:     pwmPeriod = _pwmPeriod;
  1396  002132  C012  F055         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1397  002136  C013  F056         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1398  00213A  0012               	return		;funcret
  1399  00213C  FFFF               	dw	65535	; errata NOP
  1400  00213E                     __end_of_tim2Init:
  1401                           	callstack 0
  1402                           
  1403 ;; *************** function _tim0Init *****************
  1404 ;; Defined at:
  1405 ;;		line 21 in file "pwm.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;		None
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;		None
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  1    wreg      void 
  1412 ;; Registers used:
  1413 ;;		wreg, status,2
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 0/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1419 ;;      Params:         0       0       0       0       0       0       0
  1420 ;;      Locals:         0       0       0       0       0       0       0
  1421 ;;      Temps:          0       0       0       0       0       0       0
  1422 ;;      Totals:         0       0       0       0       0       0       0
  1423 ;;Total ram usage:        0 bytes
  1424 ;; Hardware stack levels used:    1
  1425 ;; Hardware stack levels required when called:    4
  1426 ;; This function calls:
  1427 ;;		Nothing
  1428 ;; This function is called by:
  1429 ;;		_main
  1430 ;; This function uses a non-reentrant model
  1431 ;;
  1432                           
  1433                           	psect	text3
  1434  002152                     __ptext3:
  1435                           	callstack 0
  1436  002152                     _tim0Init:
  1437                           	callstack 0
  1438  002152  FFFF               	dw	65535	; assembler added errata NOP
  1439  002154                     
  1440                           ;pwm.c: 22:     T0CONbits.TMR0ON = 0;
  1441  002154  9ED5               	bcf	213,7,c	;volatile
  1442                           
  1443                           ;pwm.c: 23:     T0CONbits.T08BIT = 0;
  1444  002156  9CD5               	bcf	213,6,c	;volatile
  1445                           
  1446                           ;pwm.c: 24:     T0CONbits.T0CS = 0;
  1447  002158  9AD5               	bcf	213,5,c	;volatile
  1448                           
  1449                           ;pwm.c: 25:     T0CONbits.PSA = 1;
  1450  00215A  86D5               	bsf	213,3,c	;volatile
  1451  00215C                     
  1452                           ;pwm.c: 26:     T0CONbits.T0PS = 0x07;
  1453  00215C  0E07               	movlw	7
  1454  00215E  12D5               	iorwf	213,f,c	;volatile
  1455  002160  0012               	return		;funcret
  1456  002162  FFFF               	dw	65535	; errata NOP
  1457  002164                     __end_of_tim0Init:
  1458                           	callstack 0
  1459                           
  1460 ;; *************** function _storeData *****************
  1461 ;; Defined at:
  1462 ;;		line 131 in file "usart.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;  data            1    wreg     unsigned char 
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;  data            1   26[COMRAM] unsigned char 
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  1    wreg      void 
  1469 ;; Registers used:
  1470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1476 ;;      Params:         0       0       0       0       0       0       0
  1477 ;;      Locals:         1       0       0       0       0       0       0
  1478 ;;      Temps:          2       0       0       0       0       0       0
  1479 ;;      Totals:         3       0       0       0       0       0       0
  1480 ;;Total ram usage:        3 bytes
  1481 ;; Hardware stack levels used:    1
  1482 ;; Hardware stack levels required when called:    6
  1483 ;; This function calls:
  1484 ;;		_printError
  1485 ;; This function is called by:
  1486 ;;		_main
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           	psect	text4
  1491  00140C                     __ptext4:
  1492                           	callstack 0
  1493  00140C                     _storeData:
  1494                           	callstack 0
  1495  00140C  FFFF               	dw	65535	; assembler added errata NOP
  1496                           
  1497                           ;incstack = 0
  1498                           ;storeData@data stored from wreg
  1499  00140E  6E1B               	movwf	storeData@data^0,c
  1500  001410                     
  1501                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  1502  001410  0E45               	movlw	low storeData@receivedMex
  1503  001412  245E               	addwf	storeData@counter^0,w,c
  1504  001414  6ED9               	movwf	fsr2l,c
  1505  001416  6ADA               	clrf	fsr2h,c
  1506  001418  0E00               	movlw	high storeData@receivedMex
  1507  00141A  22DA               	addwfc	fsr2h,f,c
  1508  00141C  C01B  FFDF         	movff	storeData@data,indf2
  1509  001420                     
  1510                           ;usart.c: 142:     counter++;
  1511  001420  2A5E               	incf	storeData@counter^0,f,c
  1512                           
  1513                           ;usart.c: 145:     switch(receivedMex[0]){
  1514  001422  EF22  F00A         	goto	l3875
  1515  001426                     l3867:
  1516  001426  FFFF               	dw	65535	; assembler added errata NOP
  1517                           
  1518                           ;usart.c: 147:             mexLength = 5;
  1519  001428  0E05               	movlw	5
  1520  00142A  6E6D               	movwf	storeData@mexLength^0,c
  1521                           
  1522                           ;usart.c: 148:             break;
  1523  00142C  EF3D  F00A         	goto	l3877
  1524  001430                     l3869:
  1525  001430  FFFF               	dw	65535	; assembler added errata NOP
  1526                           
  1527                           ;usart.c: 150:             mexLength = 9;
  1528  001432  0E09               	movlw	9
  1529  001434  6E6D               	movwf	storeData@mexLength^0,c
  1530                           
  1531                           ;usart.c: 151:             break;
  1532  001436  EF3D  F00A         	goto	l3877
  1533  00143A                     l3871:
  1534  00143A  FFFF               	dw	65535	; assembler added errata NOP
  1535                           
  1536                           ;usart.c: 153:             mexLength = 1;
  1537  00143C  0E01               	movlw	1
  1538  00143E  6E6D               	movwf	storeData@mexLength^0,c
  1539                           
  1540                           ;usart.c: 154:             break;
  1541  001440  EF3D  F00A         	goto	l3877
  1542  001444                     l3875:
  1543  001444  FFFF               	dw	65535	; assembler added errata NOP
  1544  001446  5045               	movf	storeData@receivedMex^0,w,c
  1545  001448  6E19               	movwf	??_storeData^0,c
  1546  00144A  6A1A               	clrf	(??_storeData+1)^0,c
  1547                           
  1548                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1549                           ; Switch size 1, requested type "simple"
  1550                           ; Number of cases is 1, Range of values is 0 to 0
  1551                           ; switch strategies available:
  1552                           ; Name         Instructions Cycles
  1553                           ; simple_byte            4     3 (average)
  1554                           ;	Chosen strategy is simple_byte
  1555  00144C  501A               	movf	(??_storeData+1)^0,w,c
  1556  00144E  0A00               	xorlw	0	; case 0
  1557  001450  B4D8               	btfsc	status,2,c
  1558  001452  EF2D  F00A         	goto	l4361
  1559  001456  EF3D  F00A         	goto	l3877
  1560  00145A                     l4361:
  1561  00145A  FFFF               	dw	65535	; assembler added errata NOP
  1562                           
  1563                           ; Switch size 1, requested type "simple"
  1564                           ; Number of cases is 3, Range of values is 0 to 2
  1565                           ; switch strategies available:
  1566                           ; Name         Instructions Cycles
  1567                           ; simple_byte           10     6 (average)
  1568                           ;	Chosen strategy is simple_byte
  1569  00145C  5019               	movf	??_storeData^0,w,c
  1570  00145E  0A00               	xorlw	0	; case 0
  1571  001460  B4D8               	btfsc	status,2,c
  1572  001462  EF13  F00A         	goto	l3867
  1573  001466  0A01               	xorlw	1	; case 1
  1574  001468  B4D8               	btfsc	status,2,c
  1575  00146A  EF18  F00A         	goto	l3869
  1576  00146E  0A03               	xorlw	3	; case 2
  1577  001470  B4D8               	btfsc	status,2,c
  1578  001472  EF1D  F00A         	goto	l3871
  1579  001476  EF3D  F00A         	goto	l3877
  1580  00147A                     l3877:
  1581  00147A  FFFF               	dw	65535	; assembler added errata NOP
  1582                           
  1583                           ;usart.c: 161:     if(counter >= mexLength){
  1584  00147C  506D               	movf	storeData@mexLength^0,w,c
  1585  00147E  5C5E               	subwf	storeData@counter^0,w,c
  1586  001480  A0D8               	btfss	status,0,c
  1587  001482  EF45  F00A         	goto	u3081
  1588  001486  EF48  F00A         	goto	u3080
  1589  00148A                     u3081:
  1590  00148A  FFFF               	dw	65535	; assembler added errata NOP
  1591  00148C  EFB4  F00A         	goto	l548
  1592  001490                     u3080:
  1593  001490  FFFF               	dw	65535	; assembler added errata NOP
  1594  001492                     
  1595                           ;usart.c: 162:         counter = 0;
  1596  001492  0E00               	movlw	0
  1597  001494  6E5E               	movwf	storeData@counter^0,c
  1598                           
  1599                           ;usart.c: 166:         switch(receivedMex[0]){
  1600  001496  EF99  F00A         	goto	l3893
  1601  00149A                     l3881:
  1602  00149A  FFFF               	dw	65535	; assembler added errata NOP
  1603                           
  1604                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1605  00149C  5061               	movf	_dataCounter^0,w,c
  1606  00149E  0D04               	mullw	4
  1607  0014A0  0ED8               	movlw	low _dataSequence
  1608  0014A2  24F3               	addwf	243,w,c
  1609  0014A4  6ED9               	movwf	fsr2l,c
  1610  0014A6  0E00               	movlw	high _dataSequence
  1611  0014A8  20F4               	addwfc	prodh,w,c
  1612  0014AA  6EDA               	movwf	fsr2h,c
  1613  0014AC  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  1614                           
  1615                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  1616  0014B0  5061               	movf	_dataCounter^0,w,c
  1617  0014B2  0D04               	mullw	4
  1618  0014B4  0ED9               	movlw	low (_dataSequence+1)
  1619  0014B6  24F3               	addwf	243,w,c
  1620  0014B8  6ED9               	movwf	fsr2l,c
  1621  0014BA  0E00               	movlw	high (_dataSequence+1)
  1622  0014BC  20F4               	addwfc	prodh,w,c
  1623  0014BE  6EDA               	movwf	fsr2h,c
  1624  0014C0  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  1625                           
  1626                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  1627  0014C4  5061               	movf	_dataCounter^0,w,c
  1628  0014C6  0D04               	mullw	4
  1629  0014C8  0EDA               	movlw	low (_dataSequence+2)
  1630  0014CA  24F3               	addwf	243,w,c
  1631  0014CC  6ED9               	movwf	fsr2l,c
  1632  0014CE  0E00               	movlw	high (_dataSequence+2)
  1633  0014D0  20F4               	addwfc	prodh,w,c
  1634  0014D2  6EDA               	movwf	fsr2h,c
  1635  0014D4  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  1636                           
  1637                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1638  0014D8  5061               	movf	_dataCounter^0,w,c
  1639  0014DA  0D04               	mullw	4
  1640  0014DC  0EDB               	movlw	low (_dataSequence+3)
  1641  0014DE  24F3               	addwf	243,w,c
  1642  0014E0  6ED9               	movwf	fsr2l,c
  1643  0014E2  0E00               	movlw	high (_dataSequence+3)
  1644  0014E4  20F4               	addwfc	prodh,w,c
  1645  0014E6  6EDA               	movwf	fsr2h,c
  1646  0014E8  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  1647  0014EC                     
  1648                           ;usart.c: 173:                 dataCounter++;
  1649  0014EC  2A61               	incf	_dataCounter^0,f,c
  1650                           
  1651                           ;usart.c: 174:                 break;
  1652  0014EE  EFB4  F00A         	goto	l548
  1653  0014F2                     l545:
  1654  0014F2  FFFF               	dw	65535	; assembler added errata NOP
  1655                           
  1656                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  1657  0014F4  C046  F0EC         	movff	storeData@receivedMex+1,_newSequenceData
  1658                           
  1659                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  1660  0014F8  C047  F0ED         	movff	storeData@receivedMex+2,_newSequenceData+1
  1661                           
  1662                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  1663  0014FC  C048  F0EE         	movff	storeData@receivedMex+3,_newSequenceData+2
  1664                           
  1665                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  1666  001500  C049  F0EF         	movff	storeData@receivedMex+4,_newSequenceData+3
  1667                           
  1668                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  1669  001504  C04A  F0F0         	movff	storeData@receivedMex+5,_newSequenceData+4
  1670                           
  1671                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  1672  001508  C04B  F0F1         	movff	storeData@receivedMex+6,_newSequenceData+5
  1673                           
  1674                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  1675  00150C  C04C  F0F2         	movff	storeData@receivedMex+7,_newSequenceData+6
  1676                           
  1677                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  1678  001510  C04D  F0F3         	movff	storeData@receivedMex+8,_newSequenceData+7
  1679  001514                     
  1680                           ;usart.c: 186:                 _newSequence = 1;
  1681  001514  0E01               	movlw	1
  1682  001516  6E5F               	movwf	__newSequence^0,c
  1683                           
  1684                           ;usart.c: 187:                 break;
  1685  001518  EFB4  F00A         	goto	l548
  1686  00151C                     l3887:
  1687  00151C  FFFF               	dw	65535	; assembler added errata NOP
  1688                           
  1689                           ;usart.c: 190:                 _fatalError = 1;
  1690  00151E  0E01               	movlw	1
  1691  001520  6E60               	movwf	__fatalError^0,c
  1692                           
  1693                           ;usart.c: 191:                 break;
  1694  001522  EFB4  F00A         	goto	l548
  1695  001526                     l3889:
  1696  001526  FFFF               	dw	65535	; assembler added errata NOP
  1697                           
  1698                           ;usart.c: 194:                 printError(8);
  1699  001528  0E08               	movlw	8
  1700  00152A  EC03  F00C         	call	_printError
  1701                           
  1702                           ;usart.c: 195:                 break;
  1703  00152E  EFB4  F00A         	goto	l548
  1704  001532                     l3893:
  1705  001532  FFFF               	dw	65535	; assembler added errata NOP
  1706  001534  5045               	movf	storeData@receivedMex^0,w,c
  1707  001536  6E19               	movwf	??_storeData^0,c
  1708  001538  6A1A               	clrf	(??_storeData+1)^0,c
  1709                           
  1710                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1711                           ; Switch size 1, requested type "simple"
  1712                           ; Number of cases is 1, Range of values is 0 to 0
  1713                           ; switch strategies available:
  1714                           ; Name         Instructions Cycles
  1715                           ; simple_byte            4     3 (average)
  1716                           ;	Chosen strategy is simple_byte
  1717  00153A  501A               	movf	(??_storeData+1)^0,w,c
  1718  00153C  0A00               	xorlw	0	; case 0
  1719  00153E  B4D8               	btfsc	status,2,c
  1720  001540  EFA4  F00A         	goto	l4363
  1721  001544  EF93  F00A         	goto	l3889
  1722  001548                     l4363:
  1723  001548  FFFF               	dw	65535	; assembler added errata NOP
  1724                           
  1725                           ; Switch size 1, requested type "simple"
  1726                           ; Number of cases is 3, Range of values is 0 to 2
  1727                           ; switch strategies available:
  1728                           ; Name         Instructions Cycles
  1729                           ; simple_byte           10     6 (average)
  1730                           ;	Chosen strategy is simple_byte
  1731  00154A  5019               	movf	??_storeData^0,w,c
  1732  00154C  0A00               	xorlw	0	; case 0
  1733  00154E  B4D8               	btfsc	status,2,c
  1734  001550  EF4D  F00A         	goto	l3881
  1735  001554  0A01               	xorlw	1	; case 1
  1736  001556  B4D8               	btfsc	status,2,c
  1737  001558  EF79  F00A         	goto	l545
  1738  00155C  0A03               	xorlw	3	; case 2
  1739  00155E  B4D8               	btfsc	status,2,c
  1740  001560  EF8E  F00A         	goto	l3887
  1741  001564  EF93  F00A         	goto	l3889
  1742  001568                     l548:
  1743  001568  FFFF               	dw	65535	; assembler added errata NOP
  1744  00156A  0012               	return		;funcret
  1745  00156C  FFFF               	dw	65535	; errata NOP
  1746  00156E                     __end_of_storeData:
  1747                           	callstack 0
  1748                           
  1749 ;; *************** function _printError *****************
  1750 ;; Defined at:
  1751 ;;		line 53 in file "usart.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;  errCode         1    wreg     unsigned char 
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;  errCode         1   23[COMRAM] unsigned char 
  1756 ;; Return value:  Size  Location     Type
  1757 ;;                  1    wreg      void 
  1758 ;; Registers used:
  1759 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1765 ;;      Params:         0       0       0       0       0       0       0
  1766 ;;      Locals:         1       0       0       0       0       0       0
  1767 ;;      Temps:          2       0       0       0       0       0       0
  1768 ;;      Totals:         3       0       0       0       0       0       0
  1769 ;;Total ram usage:        3 bytes
  1770 ;; Hardware stack levels used:    1
  1771 ;; Hardware stack levels required when called:    5
  1772 ;; This function calls:
  1773 ;;		_uartTx
  1774 ;; This function is called by:
  1775 ;;		_main
  1776 ;;		_storeData
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           	psect	text5
  1781  001806                     __ptext5:
  1782                           	callstack 0
  1783  001806                     _printError:
  1784                           	callstack 0
  1785  001806  FFFF               	dw	65535	; assembler added errata NOP
  1786                           
  1787                           ;incstack = 0
  1788                           ;printError@errCode stored from wreg
  1789  001808  6E18               	movwf	printError@errCode^0,c
  1790  00180A                     
  1791                           ;usart.c: 55:     switch(errCode){
  1792  00180A  EF5F  F00C         	goto	l3737
  1793  00180E                     l3719:
  1794  00180E  FFFF               	dw	65535	; assembler added errata NOP
  1795                           
  1796                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1797  001810  0EA4               	movlw	low _errString_Feed
  1798  001812  6E12               	movwf	uartTx@ptr^0,c
  1799  001814  0E00               	movlw	high _errString_Feed
  1800  001816  6E13               	movwf	(uartTx@ptr+1)^0,c
  1801  001818  0E1D               	movlw	29
  1802  00181A  6E14               	movwf	uartTx@length^0,c
  1803  00181C  ECF5  F00F         	call	_uartTx	;wreg free
  1804                           
  1805                           ;usart.c: 58:             break;
  1806  001820  EF8E  F00C         	goto	l504
  1807  001824                     l3721:
  1808  001824  FFFF               	dw	65535	; assembler added errata NOP
  1809                           
  1810                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1811  001826  0E5C               	movlw	low _errString_ZEND
  1812  001828  6E12               	movwf	uartTx@ptr^0,c
  1813  00182A  0E01               	movlw	high _errString_ZEND
  1814  00182C  6E13               	movwf	(uartTx@ptr+1)^0,c
  1815  00182E  0E28               	movlw	40
  1816  001830  6E14               	movwf	uartTx@length^0,c
  1817  001832  ECF5  F00F         	call	_uartTx	;wreg free
  1818                           
  1819                           ;usart.c: 61:             break;
  1820  001836  EF8E  F00C         	goto	l504
  1821  00183A                     l3723:
  1822  00183A  FFFF               	dw	65535	; assembler added errata NOP
  1823                           
  1824                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1825  00183C  0E84               	movlw	low _errString_Reset
  1826  00183E  6E12               	movwf	uartTx@ptr^0,c
  1827  001840  0E01               	movlw	high _errString_Reset
  1828  001842  6E13               	movwf	(uartTx@ptr+1)^0,c
  1829  001844  0E27               	movlw	39
  1830  001846  6E14               	movwf	uartTx@length^0,c
  1831  001848  ECF5  F00F         	call	_uartTx	;wreg free
  1832                           
  1833                           ;usart.c: 64:             break;
  1834  00184C  EF8E  F00C         	goto	l504
  1835  001850                     l3725:
  1836  001850  FFFF               	dw	65535	; assembler added errata NOP
  1837                           
  1838                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1839  001852  0E34               	movlw	low _errString_Point
  1840  001854  6E12               	movwf	uartTx@ptr^0,c
  1841  001856  0E01               	movlw	high _errString_Point
  1842  001858  6E13               	movwf	(uartTx@ptr+1)^0,c
  1843  00185A  0E28               	movlw	40
  1844  00185C  6E14               	movwf	uartTx@length^0,c
  1845  00185E  ECF5  F00F         	call	_uartTx	;wreg free
  1846                           
  1847                           ;usart.c: 67:             break;
  1848  001862  EF8E  F00C         	goto	l504
  1849  001866                     l3727:
  1850  001866  FFFF               	dw	65535	; assembler added errata NOP
  1851                           
  1852                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  1853  001868  0E84               	movlw	low _errString_Bound
  1854  00186A  6E12               	movwf	uartTx@ptr^0,c
  1855  00186C  0E00               	movlw	high _errString_Bound
  1856  00186E  6E13               	movwf	(uartTx@ptr+1)^0,c
  1857  001870  0E20               	movlw	32
  1858  001872  6E14               	movwf	uartTx@length^0,c
  1859  001874  ECF5  F00F         	call	_uartTx	;wreg free
  1860                           
  1861                           ;usart.c: 70:             break;
  1862  001878  EF8E  F00C         	goto	l504
  1863  00187C                     l3729:
  1864  00187C  FFFF               	dw	65535	; assembler added errata NOP
  1865                           
  1866                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  1867  00187E  0E00               	movlw	low _errString_PointZ
  1868  001880  6E12               	movwf	uartTx@ptr^0,c
  1869  001882  0E01               	movlw	high _errString_PointZ
  1870  001884  6E13               	movwf	(uartTx@ptr+1)^0,c
  1871  001886  0E34               	movlw	52
  1872  001888  6E14               	movwf	uartTx@length^0,c
  1873  00188A  ECF5  F00F         	call	_uartTx	;wreg free
  1874                           
  1875                           ;usart.c: 73:             break;
  1876  00188E  EF8E  F00C         	goto	l504
  1877  001892                     l3731:
  1878  001892  FFFF               	dw	65535	; assembler added errata NOP
  1879                           
  1880                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  1881  001894  0EAB               	movlw	low _errString_Fatal
  1882  001896  6E12               	movwf	uartTx@ptr^0,c
  1883  001898  0E01               	movlw	high _errString_Fatal
  1884  00189A  6E13               	movwf	(uartTx@ptr+1)^0,c
  1885  00189C  0E26               	movlw	38
  1886  00189E  6E14               	movwf	uartTx@length^0,c
  1887  0018A0  ECF5  F00F         	call	_uartTx	;wreg free
  1888                           
  1889                           ;usart.c: 76:             break;
  1890  0018A4  EF8E  F00C         	goto	l504
  1891  0018A8                     l3733:
  1892  0018A8  FFFF               	dw	65535	; assembler added errata NOP
  1893                           
  1894                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  1895  0018AA  0EC1               	movlw	low _errString_Command
  1896  0018AC  6E12               	movwf	uartTx@ptr^0,c
  1897  0018AE  0E00               	movlw	high _errString_Command
  1898  0018B0  6E13               	movwf	(uartTx@ptr+1)^0,c
  1899  0018B2  0E17               	movlw	23
  1900  0018B4  6E14               	movwf	uartTx@length^0,c
  1901  0018B6  ECF5  F00F         	call	_uartTx	;wreg free
  1902                           
  1903                           ;usart.c: 79:             break;
  1904  0018BA  EF8E  F00C         	goto	l504
  1905  0018BE                     l3737:
  1906  0018BE  FFFF               	dw	65535	; assembler added errata NOP
  1907  0018C0  5018               	movf	printError@errCode^0,w,c
  1908  0018C2  6E16               	movwf	??_printError^0,c
  1909  0018C4  6A17               	clrf	(??_printError+1)^0,c
  1910                           
  1911                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1912                           ; Switch size 1, requested type "simple"
  1913                           ; Number of cases is 1, Range of values is 0 to 0
  1914                           ; switch strategies available:
  1915                           ; Name         Instructions Cycles
  1916                           ; simple_byte            4     3 (average)
  1917                           ;	Chosen strategy is simple_byte
  1918  0018C6  5017               	movf	(??_printError+1)^0,w,c
  1919  0018C8  0A00               	xorlw	0	; case 0
  1920  0018CA  B4D8               	btfsc	status,2,c
  1921  0018CC  EF6A  F00C         	goto	l4365
  1922  0018D0  EF8E  F00C         	goto	l504
  1923  0018D4                     l4365:
  1924  0018D4  FFFF               	dw	65535	; assembler added errata NOP
  1925                           
  1926                           ; Switch size 1, requested type "simple"
  1927                           ; Number of cases is 8, Range of values is 1 to 8
  1928                           ; switch strategies available:
  1929                           ; Name         Instructions Cycles
  1930                           ; simple_byte           25    13 (average)
  1931                           ;	Chosen strategy is simple_byte
  1932  0018D6  5016               	movf	??_printError^0,w,c
  1933  0018D8  0A01               	xorlw	1	; case 1
  1934  0018DA  B4D8               	btfsc	status,2,c
  1935  0018DC  EF07  F00C         	goto	l3719
  1936  0018E0  0A03               	xorlw	3	; case 2
  1937  0018E2  B4D8               	btfsc	status,2,c
  1938  0018E4  EF12  F00C         	goto	l3721
  1939  0018E8  0A01               	xorlw	1	; case 3
  1940  0018EA  B4D8               	btfsc	status,2,c
  1941  0018EC  EF1D  F00C         	goto	l3723
  1942  0018F0  0A07               	xorlw	7	; case 4
  1943  0018F2  B4D8               	btfsc	status,2,c
  1944  0018F4  EF28  F00C         	goto	l3725
  1945  0018F8  0A01               	xorlw	1	; case 5
  1946  0018FA  B4D8               	btfsc	status,2,c
  1947  0018FC  EF33  F00C         	goto	l3727
  1948  001900  0A03               	xorlw	3	; case 6
  1949  001902  B4D8               	btfsc	status,2,c
  1950  001904  EF3E  F00C         	goto	l3729
  1951  001908  0A01               	xorlw	1	; case 7
  1952  00190A  B4D8               	btfsc	status,2,c
  1953  00190C  EF49  F00C         	goto	l3731
  1954  001910  0A0F               	xorlw	15	; case 8
  1955  001912  B4D8               	btfsc	status,2,c
  1956  001914  EF54  F00C         	goto	l3733
  1957  001918  EF8E  F00C         	goto	l504
  1958  00191C                     l504:
  1959  00191C  FFFF               	dw	65535	; assembler added errata NOP
  1960  00191E  0012               	return		;funcret
  1961  001920  FFFF               	dw	65535	; errata NOP
  1962  001922                     __end_of_printError:
  1963                           	callstack 0
  1964                           
  1965 ;; *************** function _uartTx *****************
  1966 ;; Defined at:
  1967 ;;		line 221 in file "usart.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  1970 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  1971 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  1972 ;;  length          1   19[COMRAM] unsigned char 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  i               1   20[COMRAM] unsigned char 
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  1    wreg      void 
  1977 ;; Registers used:
  1978 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1984 ;;      Params:         3       0       0       0       0       0       0
  1985 ;;      Locals:         1       0       0       0       0       0       0
  1986 ;;      Temps:          0       0       0       0       0       0       0
  1987 ;;      Totals:         4       0       0       0       0       0       0
  1988 ;;Total ram usage:        4 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; Hardware stack levels required when called:    4
  1991 ;; This function calls:
  1992 ;;		Nothing
  1993 ;; This function is called by:
  1994 ;;		_printError
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           	psect	text6
  1999  001FEA                     __ptext6:
  2000                           	callstack 0
  2001  001FEA                     _uartTx:
  2002                           	callstack 0
  2003  001FEA  FFFF               	dw	65535	; assembler added errata NOP
  2004  001FEC                     
  2005                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  2006  001FEC  0E01               	movlw	1
  2007  001FEE  6E15               	movwf	uartTx@i^0,c
  2008  001FF0  EF0E  F010         	goto	l3333
  2009  001FF4                     l3329:
  2010  001FF4  FFFF               	dw	65535	; assembler added errata NOP
  2011                           
  2012                           ;usart.c: 226:         TXREG = *ptr;
  2013  001FF6  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2014  001FFA  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2015  001FFE  50DF               	movf	indf2,w,c
  2016  002000  6EAD               	movwf	173,c	;volatile
  2017  002002                     l559:
  2018  002002  FFFF               	dw	65535	; assembler added errata NOP
  2019  002004  A2AC               	btfss	172,1,c	;volatile
  2020  002006  EF07  F010         	goto	u2301
  2021  00200A  EF0A  F010         	goto	u2300
  2022  00200E                     u2301:
  2023  00200E  FFFF               	dw	65535	; assembler added errata NOP
  2024  002010  EF01  F010         	goto	l559
  2025  002014                     u2300:
  2026  002014  FFFF               	dw	65535	; assembler added errata NOP
  2027  002016                     
  2028                           ;usart.c: 230:         ptr++;
  2029  002016  4A12               	infsnz	uartTx@ptr^0,f,c
  2030  002018  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2031                           
  2032                           ;usart.c: 231:     }
  2033  00201A  2A15               	incf	uartTx@i^0,f,c
  2034  00201C                     l3333:
  2035  00201C  FFFF               	dw	65535	; assembler added errata NOP
  2036  00201E  5014               	movf	uartTx@length^0,w,c
  2037  002020  5C15               	subwf	uartTx@i^0,w,c
  2038  002022  A0D8               	btfss	status,0,c
  2039  002024  EF16  F010         	goto	u2311
  2040  002028  EF19  F010         	goto	u2310
  2041  00202C                     u2311:
  2042  00202C  FFFF               	dw	65535	; assembler added errata NOP
  2043  00202E  EFFA  F00F         	goto	l3329
  2044  002032                     u2310:
  2045  002032  FFFF               	dw	65535	; assembler added errata NOP
  2046  002034  0012               	return		;funcret
  2047  002036  FFFF               	dw	65535	; errata NOP
  2048  002038                     __end_of_uartTx:
  2049                           	callstack 0
  2050                           
  2051 ;; *************** function _shiftData *****************
  2052 ;; Defined at:
  2053 ;;		line 120 in file "usart.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;		None
  2056 ;; Auto vars:     Size  Location     Type
  2057 ;;  i               1   19[COMRAM] unsigned char 
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  1    wreg      void 
  2060 ;; Registers used:
  2061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2067 ;;      Params:         0       0       0       0       0       0       0
  2068 ;;      Locals:         1       0       0       0       0       0       0
  2069 ;;      Temps:          2       0       0       0       0       0       0
  2070 ;;      Totals:         3       0       0       0       0       0       0
  2071 ;;Total ram usage:        3 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; Hardware stack levels required when called:    4
  2074 ;; This function calls:
  2075 ;;		Nothing
  2076 ;; This function is called by:
  2077 ;;		_main
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           	psect	text7
  2082  001F32                     __ptext7:
  2083                           	callstack 0
  2084  001F32                     _shiftData:
  2085                           	callstack 0
  2086  001F32  FFFF               	dw	65535	; assembler added errata NOP
  2087  001F34                     
  2088                           ;usart.c: 121:     char i;;usart.c: 123:     for(i = 0; i < 4; i++){
  2089  001F34  0E00               	movlw	0
  2090  001F36  6E14               	movwf	shiftData@i^0,c
  2091  001F38                     l3979:
  2092  001F38  FFFF               	dw	65535	; assembler added errata NOP
  2093                           
  2094                           ;usart.c: 124:         dataSequence[i] = dataSequence[i+1];
  2095  001F3A  5014               	movf	shiftData@i^0,w,c
  2096  001F3C  6E12               	movwf	??_shiftData^0,c
  2097  001F3E  6A13               	clrf	(??_shiftData+1)^0,c
  2098  001F40  90D8               	bcf	status,0,c
  2099  001F42  3612               	rlcf	??_shiftData^0,f,c
  2100  001F44  3613               	rlcf	(??_shiftData+1)^0,f,c
  2101  001F46  90D8               	bcf	status,0,c
  2102  001F48  3612               	rlcf	??_shiftData^0,f,c
  2103  001F4A  3613               	rlcf	(??_shiftData+1)^0,f,c
  2104  001F4C  0EDC               	movlw	low (_dataSequence+4)
  2105  001F4E  2412               	addwf	??_shiftData^0,w,c
  2106  001F50  6ED9               	movwf	fsr2l,c
  2107  001F52  0E00               	movlw	high (_dataSequence+4)
  2108  001F54  2013               	addwfc	(??_shiftData+1)^0,w,c
  2109  001F56  6EDA               	movwf	fsr2h,c
  2110  001F58  5014               	movf	shiftData@i^0,w,c
  2111  001F5A  0D04               	mullw	4
  2112  001F5C  0ED8               	movlw	low _dataSequence
  2113  001F5E  24F3               	addwf	243,w,c
  2114  001F60  6EE1               	movwf	fsr1l,c
  2115  001F62  0E00               	movlw	high _dataSequence
  2116  001F64  20F4               	addwfc	prodh,w,c
  2117  001F66  6EE2               	movwf	fsr1h,c
  2118  001F68  CFDE FFE6          	movff	postinc2,postinc1
  2119  001F6C  CFDE FFE6          	movff	postinc2,postinc1
  2120  001F70  CFDE FFE6          	movff	postinc2,postinc1
  2121  001F74  CFDE FFE6          	movff	postinc2,postinc1
  2122  001F78                     
  2123                           ;usart.c: 125:     }
  2124  001F78  2A14               	incf	shiftData@i^0,f,c
  2125  001F7A  0E03               	movlw	3
  2126  001F7C  6414               	cpfsgt	shiftData@i^0,c
  2127  001F7E  EFC3  F00F         	goto	u3111
  2128  001F82  EFC6  F00F         	goto	u3110
  2129  001F86                     u3111:
  2130  001F86  FFFF               	dw	65535	; assembler added errata NOP
  2131  001F88  EF9C  F00F         	goto	l3979
  2132  001F8C                     u3110:
  2133  001F8C  FFFF               	dw	65535	; assembler added errata NOP
  2134  001F8E  0012               	return		;funcret
  2135  001F90  FFFF               	dw	65535	; errata NOP
  2136  001F92                     __end_of_shiftData:
  2137                           	callstack 0
  2138                           
  2139 ;; *************** function _resetPosition *****************
  2140 ;; Defined at:
  2141 ;;		line 160 in file "motors.c"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;		None
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;  keepMovingZ     1   23[COMRAM] unsigned char 
  2146 ;;  keepMovingY     1   22[COMRAM] unsigned char 
  2147 ;;  keepMovingX     1   21[COMRAM] unsigned char 
  2148 ;; Return value:  Size  Location     Type
  2149 ;;                  1    wreg      unsigned char 
  2150 ;; Registers used:
  2151 ;;		wreg, status,2, status,0, cstack
  2152 ;; Tracked objects:
  2153 ;;		On entry : 0/0
  2154 ;;		On exit  : 0/0
  2155 ;;		Unchanged: 0/0
  2156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2157 ;;      Params:         0       0       0       0       0       0       0
  2158 ;;      Locals:         3       0       0       0       0       0       0
  2159 ;;      Temps:          0       0       0       0       0       0       0
  2160 ;;      Totals:         3       0       0       0       0       0       0
  2161 ;;Total ram usage:        3 bytes
  2162 ;; Hardware stack levels used:    1
  2163 ;; Hardware stack levels required when called:    5
  2164 ;; This function calls:
  2165 ;;		_enableMotor
  2166 ;;		_resetStep
  2167 ;;		_setDecay
  2168 ;;		_setDirection
  2169 ;;		_setStep
  2170 ;;		_stepMade
  2171 ;; This function is called by:
  2172 ;;		_main
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text8
  2177  000EBA                     __ptext8:
  2178                           	callstack 0
  2179  000EBA                     _resetPosition:
  2180                           	callstack 0
  2181  000EBA  FFFF               	dw	65535	; assembler added errata NOP
  2182  000EBC                     
  2183                           ;motors.c: 162:     setStep(0, 0);
  2184  000EBC  0E00               	movlw	0
  2185  000EBE  6E12               	movwf	setStep@motor^0,c
  2186  000EC0  0E00               	movlw	0
  2187  000EC2  EC1F  F00D         	call	_setStep
  2188                           
  2189                           ;motors.c: 163:     setStep(1, 0);
  2190  000EC6  0E00               	movlw	0
  2191  000EC8  6E12               	movwf	setStep@motor^0,c
  2192  000ECA  0E01               	movlw	1
  2193  000ECC  EC1F  F00D         	call	_setStep
  2194                           
  2195                           ;motors.c: 164:     setStep(2, 0);
  2196  000ED0  0E00               	movlw	0
  2197  000ED2  6E12               	movwf	setStep@motor^0,c
  2198  000ED4  0E02               	movlw	2
  2199  000ED6  EC1F  F00D         	call	_setStep
  2200                           
  2201                           ;motors.c: 166:     setDirection(0, 0);
  2202  000EDA  0E00               	movlw	0
  2203  000EDC  6E12               	movwf	setDirection@motor^0,c
  2204  000EDE  0E00               	movlw	0
  2205  000EE0  EC5F  F00F         	call	_setDirection
  2206                           
  2207                           ;motors.c: 167:     setDirection(0, 1);
  2208  000EE4  0E01               	movlw	1
  2209  000EE6  6E12               	movwf	setDirection@motor^0,c
  2210  000EE8  0E00               	movlw	0
  2211  000EEA  EC5F  F00F         	call	_setDirection
  2212                           
  2213                           ;motors.c: 168:     setDirection(0, 2);
  2214  000EEE  0E02               	movlw	2
  2215  000EF0  6E12               	movwf	setDirection@motor^0,c
  2216  000EF2  0E00               	movlw	0
  2217  000EF4  EC5F  F00F         	call	_setDirection
  2218                           
  2219                           ;motors.c: 170:     setDecay(1, 0);
  2220  000EF8  0E00               	movlw	0
  2221  000EFA  6E12               	movwf	setDecay@motor^0,c
  2222  000EFC  0E01               	movlw	1
  2223  000EFE  ECEB  F00E         	call	_setDecay
  2224                           
  2225                           ;motors.c: 171:     setDecay(1, 1);
  2226  000F02  0E01               	movlw	1
  2227  000F04  6E12               	movwf	setDecay@motor^0,c
  2228  000F06  0E01               	movlw	1
  2229  000F08  ECEB  F00E         	call	_setDecay
  2230                           
  2231                           ;motors.c: 172:     setDecay(1, 2);
  2232  000F0C  0E02               	movlw	2
  2233  000F0E  6E12               	movwf	setDecay@motor^0,c
  2234  000F10  0E01               	movlw	1
  2235  000F12  ECEB  F00E         	call	_setDecay
  2236                           
  2237                           ;motors.c: 174:     enableMotor(0, 0);
  2238  000F16  0E00               	movlw	0
  2239  000F18  6E12               	movwf	enableMotor@motor^0,c
  2240  000F1A  0E00               	movlw	0
  2241  000F1C  EC25  F00F         	call	_enableMotor
  2242                           
  2243                           ;motors.c: 175:     enableMotor(0, 1);
  2244  000F20  0E01               	movlw	1
  2245  000F22  6E12               	movwf	enableMotor@motor^0,c
  2246  000F24  0E00               	movlw	0
  2247  000F26  EC25  F00F         	call	_enableMotor
  2248                           
  2249                           ;motors.c: 176:     enableMotor(0, 2);
  2250  000F2A  0E02               	movlw	2
  2251  000F2C  6E12               	movwf	enableMotor@motor^0,c
  2252  000F2E  0E00               	movlw	0
  2253  000F30  EC25  F00F         	call	_enableMotor
  2254  000F34                     
  2255                           ;motors.c: 180:     unsigned char keepMovingX = 1;
  2256  000F34  0E01               	movlw	1
  2257  000F36  6E16               	movwf	resetPosition@keepMovingX^0,c
  2258  000F38                     
  2259                           ;motors.c: 181:     unsigned char keepMovingY = 1;
  2260  000F38  0E01               	movlw	1
  2261  000F3A  6E17               	movwf	resetPosition@keepMovingY^0,c
  2262  000F3C                     
  2263                           ;motors.c: 182:     unsigned char keepMovingZ = 1;
  2264  000F3C  0E01               	movlw	1
  2265  000F3E  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2266  000F40                     
  2267                           ;motors.c: 185:     T2CONbits.TMR2ON = 1;
  2268  000F40  84CA               	bsf	202,2,c	;volatile
  2269  000F42                     
  2270                           ;motors.c: 187:     tm0Error = 0;
  2271  000F42  0E00               	movlw	0
  2272  000F44  6E5C               	movwf	(_tm0Error+1)^0,c
  2273  000F46  0E00               	movlw	0
  2274  000F48  6E5B               	movwf	_tm0Error^0,c
  2275  000F4A                     
  2276                           ;motors.c: 188:     tm0Limit = 200;
  2277  000F4A  0EC8               	movlw	200
  2278  000F4C  6E68               	movwf	_tm0Limit^0,c
  2279  000F4E                     
  2280                           ;motors.c: 189:     T0CONbits.TMR0ON = 1;
  2281  000F4E  8ED5               	bsf	213,7,c	;volatile
  2282                           
  2283                           ;motors.c: 191:     while(keepMovingX || keepMovingY || keepMovingZ){
  2284  000F50  EF2B  F008         	goto	l3805
  2285  000F54                     l3783:
  2286  000F54  FFFF               	dw	65535	; assembler added errata NOP
  2287                           
  2288                           ;motors.c: 194:         if(tm0Error){
  2289  000F56  505B               	movf	_tm0Error^0,w,c
  2290  000F58  105C               	iorwf	(_tm0Error+1)^0,w,c
  2291  000F5A  B4D8               	btfsc	status,2,c
  2292  000F5C  EFB2  F007         	goto	u2941
  2293  000F60  EFB5  F007         	goto	u2940
  2294  000F64                     u2941:
  2295  000F64  FFFF               	dw	65535	; assembler added errata NOP
  2296  000F66  EFBF  F007         	goto	l115
  2297  000F6A                     u2940:
  2298  000F6A  FFFF               	dw	65535	; assembler added errata NOP
  2299  000F6C                     
  2300                           ;motors.c: 196:             LATAbits.LATA2 = 0;
  2301  000F6C  9489               	bcf	137,2,c	;volatile
  2302                           
  2303                           ;motors.c: 197:             LATBbits.LATB4 = 0;
  2304  000F6E  988A               	bcf	138,4,c	;volatile
  2305                           
  2306                           ;motors.c: 198:             LATCbits.LATC2 = 0;
  2307  000F70  948B               	bcf	139,2,c	;volatile
  2308  000F72                     
  2309                           ;motors.c: 200:             tm0Error = 3;
  2310  000F72  0E00               	movlw	0
  2311  000F74  6E5C               	movwf	(_tm0Error+1)^0,c
  2312  000F76  0E03               	movlw	3
  2313  000F78  6E5B               	movwf	_tm0Error^0,c
  2314                           
  2315                           ;motors.c: 201:             break;
  2316  000F7A  EF49  F008         	goto	l116
  2317  000F7E                     l115:
  2318  000F7E  FFFF               	dw	65535	; assembler added errata NOP
  2319                           
  2320                           ;motors.c: 208:         if(PORTEbits.RE0 || !keepMovingX){
  2321  000F80  B084               	btfsc	132,0,c	;volatile
  2322  000F82  EFC5  F007         	goto	u2951
  2323  000F86  EFC8  F007         	goto	u2950
  2324  000F8A                     u2951:
  2325  000F8A  FFFF               	dw	65535	; assembler added errata NOP
  2326  000F8C  EFD2  F007         	goto	l3791
  2327  000F90                     u2950:
  2328  000F90  FFFF               	dw	65535	; assembler added errata NOP
  2329  000F92  5016               	movf	resetPosition@keepMovingX^0,w,c
  2330  000F94  A4D8               	btfss	status,2,c
  2331  000F96  EFCF  F007         	goto	u2961
  2332  000F9A  EFD2  F007         	goto	u2960
  2333  000F9E                     u2961:
  2334  000F9E  FFFF               	dw	65535	; assembler added errata NOP
  2335  000FA0  EFD7  F007         	goto	l117
  2336  000FA4                     u2960:
  2337  000FA4                     l3791:
  2338  000FA4  FFFF               	dw	65535	; assembler added errata NOP
  2339                           
  2340                           ;motors.c: 210:             keepMovingX = 0;
  2341  000FA6  0E00               	movlw	0
  2342  000FA8  6E16               	movwf	resetPosition@keepMovingX^0,c
  2343                           
  2344                           ;motors.c: 211:         }else{
  2345  000FAA  EFD9  F007         	goto	l120
  2346  000FAE                     l117:
  2347  000FAE  FFFF               	dw	65535	; assembler added errata NOP
  2348                           
  2349                           ;motors.c: 213:             LATAbits.LATA2 = 1;
  2350  000FB0  8489               	bsf	137,2,c	;volatile
  2351  000FB2                     l120:
  2352  000FB2  FFFF               	dw	65535	; assembler added errata NOP
  2353                           
  2354                           ;motors.c: 217:         if(PORTEbits.RE1 || !keepMovingY){
  2355  000FB4  B284               	btfsc	132,1,c	;volatile
  2356  000FB6  EFDF  F007         	goto	u2971
  2357  000FBA  EFE2  F007         	goto	u2970
  2358  000FBE                     u2971:
  2359  000FBE  FFFF               	dw	65535	; assembler added errata NOP
  2360  000FC0  EFEC  F007         	goto	l3795
  2361  000FC4                     u2970:
  2362  000FC4  FFFF               	dw	65535	; assembler added errata NOP
  2363  000FC6  5017               	movf	resetPosition@keepMovingY^0,w,c
  2364  000FC8  A4D8               	btfss	status,2,c
  2365  000FCA  EFE9  F007         	goto	u2981
  2366  000FCE  EFEC  F007         	goto	u2980
  2367  000FD2                     u2981:
  2368  000FD2  FFFF               	dw	65535	; assembler added errata NOP
  2369  000FD4  EFF1  F007         	goto	l121
  2370  000FD8                     u2980:
  2371  000FD8                     l3795:
  2372  000FD8  FFFF               	dw	65535	; assembler added errata NOP
  2373                           
  2374                           ;motors.c: 219:             keepMovingY = 0;
  2375  000FDA  0E00               	movlw	0
  2376  000FDC  6E17               	movwf	resetPosition@keepMovingY^0,c
  2377                           
  2378                           ;motors.c: 220:         }else{
  2379  000FDE  EFF3  F007         	goto	l124
  2380  000FE2                     l121:
  2381  000FE2  FFFF               	dw	65535	; assembler added errata NOP
  2382                           
  2383                           ;motors.c: 222:             LATBbits.LATB4 = 1;
  2384  000FE4  888A               	bsf	138,4,c	;volatile
  2385  000FE6                     l124:
  2386  000FE6  FFFF               	dw	65535	; assembler added errata NOP
  2387                           
  2388                           ;motors.c: 226:         if(PORTEbits.RE2 || !keepMovingZ){
  2389  000FE8  B484               	btfsc	132,2,c	;volatile
  2390  000FEA  EFF9  F007         	goto	u2991
  2391  000FEE  EFFC  F007         	goto	u2990
  2392  000FF2                     u2991:
  2393  000FF2  FFFF               	dw	65535	; assembler added errata NOP
  2394  000FF4  EF06  F008         	goto	l3799
  2395  000FF8                     u2990:
  2396  000FF8  FFFF               	dw	65535	; assembler added errata NOP
  2397  000FFA  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2398  000FFC  A4D8               	btfss	status,2,c
  2399  000FFE  EF03  F008         	goto	u3001
  2400  001002  EF06  F008         	goto	u3000
  2401  001006                     u3001:
  2402  001006  FFFF               	dw	65535	; assembler added errata NOP
  2403  001008  EF0B  F008         	goto	l125
  2404  00100C                     u3000:
  2405  00100C                     l3799:
  2406  00100C  FFFF               	dw	65535	; assembler added errata NOP
  2407                           
  2408                           ;motors.c: 228:             keepMovingZ = 0;
  2409  00100E  0E00               	movlw	0
  2410  001010  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2411                           
  2412                           ;motors.c: 229:         }else{
  2413  001012  EF0D  F008         	goto	l3801
  2414  001016                     l125:
  2415  001016  FFFF               	dw	65535	; assembler added errata NOP
  2416                           
  2417                           ;motors.c: 231:             LATCbits.LATC2 = 1;
  2418  001018  848B               	bsf	139,2,c	;volatile
  2419  00101A                     l3801:
  2420  00101A  FFFF               	dw	65535	; assembler added errata NOP
  2421  00101C  EC9F  F010         	call	_stepMade	;wreg free
  2422  001020  5012               	movf	?_stepMade^0,w,c
  2423  001022  1013               	iorwf	(?_stepMade+1)^0,w,c
  2424  001024  B4D8               	btfsc	status,2,c
  2425  001026  EF17  F008         	goto	u3011
  2426  00102A  EF1A  F008         	goto	u3010
  2427  00102E                     u3011:
  2428  00102E  FFFF               	dw	65535	; assembler added errata NOP
  2429  001030  EF0D  F008         	goto	l3801
  2430  001034                     u3010:
  2431  001034  FFFF               	dw	65535	; assembler added errata NOP
  2432  001036                     
  2433                           ;motors.c: 238:         LATAbits.LATA2 = 0;
  2434  001036  9489               	bcf	137,2,c	;volatile
  2435                           
  2436                           ;motors.c: 239:         LATBbits.LATB4 = 0;
  2437  001038  988A               	bcf	138,4,c	;volatile
  2438                           
  2439                           ;motors.c: 240:         LATCbits.LATC2 = 0;
  2440  00103A  948B               	bcf	139,2,c	;volatile
  2441  00103C                     l3803:
  2442  00103C  FFFF               	dw	65535	; assembler added errata NOP
  2443  00103E  EC9F  F010         	call	_stepMade	;wreg free
  2444  001042  5012               	movf	?_stepMade^0,w,c
  2445  001044  1013               	iorwf	(?_stepMade+1)^0,w,c
  2446  001046  B4D8               	btfsc	status,2,c
  2447  001048  EF28  F008         	goto	u3021
  2448  00104C  EF2B  F008         	goto	u3020
  2449  001050                     u3021:
  2450  001050  FFFF               	dw	65535	; assembler added errata NOP
  2451  001052  EF1E  F008         	goto	l3803
  2452  001056                     u3020:
  2453  001056                     l3805:
  2454  001056  FFFF               	dw	65535	; assembler added errata NOP
  2455                           
  2456                           ;motors.c: 191:     while(keepMovingX || keepMovingY || keepMovingZ){
  2457  001058  5016               	movf	resetPosition@keepMovingX^0,w,c
  2458  00105A  A4D8               	btfss	status,2,c
  2459  00105C  EF32  F008         	goto	u3031
  2460  001060  EF35  F008         	goto	u3030
  2461  001064                     u3031:
  2462  001064  FFFF               	dw	65535	; assembler added errata NOP
  2463  001066  EFAA  F007         	goto	l3783
  2464  00106A                     u3030:
  2465  00106A  FFFF               	dw	65535	; assembler added errata NOP
  2466  00106C  5017               	movf	resetPosition@keepMovingY^0,w,c
  2467  00106E  A4D8               	btfss	status,2,c
  2468  001070  EF3C  F008         	goto	u3041
  2469  001074  EF3F  F008         	goto	u3040
  2470  001078                     u3041:
  2471  001078  FFFF               	dw	65535	; assembler added errata NOP
  2472  00107A  EFAA  F007         	goto	l3783
  2473  00107E                     u3040:
  2474  00107E  FFFF               	dw	65535	; assembler added errata NOP
  2475  001080  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2476  001082  A4D8               	btfss	status,2,c
  2477  001084  EF46  F008         	goto	u3051
  2478  001088  EF49  F008         	goto	u3050
  2479  00108C                     u3051:
  2480  00108C  FFFF               	dw	65535	; assembler added errata NOP
  2481  00108E  EFAA  F007         	goto	l3783
  2482  001092                     u3050:
  2483  001092                     l116:
  2484  001092  FFFF               	dw	65535	; assembler added errata NOP
  2485                           
  2486                           ;motors.c: 247:     T0CONbits.TMR0ON = 0;
  2487  001094  9ED5               	bcf	213,7,c	;volatile
  2488                           
  2489                           ;motors.c: 248:     T2CONbits.TMR2ON = 0;
  2490  001096  94CA               	bcf	202,2,c	;volatile
  2491  001098                     
  2492                           ;motors.c: 250:     TMR0 = 0;
  2493  001098  0E00               	movlw	0
  2494  00109A  6ED7               	movwf	215,c	;volatile
  2495  00109C  0E00               	movlw	0
  2496  00109E  6ED6               	movwf	214,c	;volatile
  2497                           
  2498                           ;motors.c: 251:     TMR2 = 0;
  2499  0010A0  0E00               	movlw	0
  2500  0010A2  6ECC               	movwf	204,c	;volatile
  2501  0010A4                     
  2502                           ;motors.c: 254:     resetStep();
  2503  0010A4  ECE0  F010         	call	_resetStep	;wreg free
  2504  0010A8  0012               	return		;funcret
  2505  0010AA  FFFF               	dw	65535	; errata NOP
  2506  0010AC                     __end_of_resetPosition:
  2507                           	callstack 0
  2508                           
  2509 ;; *************** function _setStep *****************
  2510 ;; Defined at:
  2511 ;;		line 69 in file "motors.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;  step            1    wreg     unsigned char 
  2514 ;;  motor           1   17[COMRAM] unsigned char 
  2515 ;; Auto vars:     Size  Location     Type
  2516 ;;  step            1   20[COMRAM] unsigned char 
  2517 ;; Return value:  Size  Location     Type
  2518 ;;                  1    wreg      void 
  2519 ;; Registers used:
  2520 ;;		wreg, status,2, status,0
  2521 ;; Tracked objects:
  2522 ;;		On entry : 0/0
  2523 ;;		On exit  : 0/0
  2524 ;;		Unchanged: 0/0
  2525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2526 ;;      Params:         1       0       0       0       0       0       0
  2527 ;;      Locals:         1       0       0       0       0       0       0
  2528 ;;      Temps:          2       0       0       0       0       0       0
  2529 ;;      Totals:         4       0       0       0       0       0       0
  2530 ;;Total ram usage:        4 bytes
  2531 ;; Hardware stack levels used:    1
  2532 ;; Hardware stack levels required when called:    4
  2533 ;; This function calls:
  2534 ;;		Nothing
  2535 ;; This function is called by:
  2536 ;;		_resetPosition
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text9
  2541  001A3E                     __ptext9:
  2542                           	callstack 0
  2543  001A3E                     _setStep:
  2544                           	callstack 0
  2545  001A3E  FFFF               	dw	65535	; assembler added errata NOP
  2546                           
  2547                           ;incstack = 0
  2548                           ;setStep@step stored from wreg
  2549  001A40  6E15               	movwf	setStep@step^0,c
  2550  001A42                     
  2551                           ;motors.c: 70:     switch(motor){
  2552  001A42  EF6C  F00D         	goto	l3573
  2553  001A46                     l3565:
  2554  001A46  FFFF               	dw	65535	; assembler added errata NOP
  2555                           
  2556                           ;motors.c: 73:             LATAbits.LATA5 = (step & 0x01);
  2557  001A48  C015  F013         	movff	setStep@step,??_setStep
  2558  001A4C  0E01               	movlw	1
  2559  001A4E  1613               	andwf	??_setStep^0,f,c
  2560  001A50  3A13               	swapf	??_setStep^0,f,c
  2561  001A52  4613               	rlncf	??_setStep^0,f,c
  2562  001A54  5089               	movf	137,w,c	;volatile
  2563  001A56  1813               	xorwf	??_setStep^0,w,c
  2564  001A58  0BDF               	andlw	-33
  2565  001A5A  1813               	xorwf	??_setStep^0,w,c
  2566  001A5C  6E89               	movwf	137,c	;volatile
  2567                           
  2568                           ;motors.c: 75:             LATBbits.LATB0 = (step & 0x02);
  2569  001A5E  C015  F013         	movff	setStep@step,??_setStep
  2570  001A62  0E02               	movlw	2
  2571  001A64  1613               	andwf	??_setStep^0,f,c
  2572  001A66  508A               	movf	138,w,c	;volatile
  2573  001A68  1813               	xorwf	??_setStep^0,w,c
  2574  001A6A  0BFE               	andlw	-2
  2575  001A6C  1813               	xorwf	??_setStep^0,w,c
  2576  001A6E  6E8A               	movwf	138,c	;volatile
  2577                           
  2578                           ;motors.c: 76:             break;
  2579  001A70  EF87  F00D         	goto	l83
  2580  001A74                     l3567:
  2581  001A74  FFFF               	dw	65535	; assembler added errata NOP
  2582                           
  2583                           ;motors.c: 78:             LATBbits.LATB6 = (step & 0x01);
  2584  001A76  C015  F013         	movff	setStep@step,??_setStep
  2585  001A7A  0E01               	movlw	1
  2586  001A7C  1613               	andwf	??_setStep^0,f,c
  2587  001A7E  3A13               	swapf	??_setStep^0,f,c
  2588  001A80  4613               	rlncf	??_setStep^0,f,c
  2589  001A82  4613               	rlncf	??_setStep^0,f,c
  2590  001A84  508A               	movf	138,w,c	;volatile
  2591  001A86  1813               	xorwf	??_setStep^0,w,c
  2592  001A88  0BBF               	andlw	-65
  2593  001A8A  1813               	xorwf	??_setStep^0,w,c
  2594  001A8C  6E8A               	movwf	138,c	;volatile
  2595                           
  2596                           ;motors.c: 79:             LATBbits.LATB7 = (step & 0x02);
  2597  001A8E  C015  F013         	movff	setStep@step,??_setStep
  2598  001A92  0E02               	movlw	2
  2599  001A94  1613               	andwf	??_setStep^0,f,c
  2600  001A96  3213               	rrcf	??_setStep^0,f,c
  2601  001A98  3213               	rrcf	??_setStep^0,f,c
  2602  001A9A  508A               	movf	138,w,c	;volatile
  2603  001A9C  1813               	xorwf	??_setStep^0,w,c
  2604  001A9E  0B7F               	andlw	-129
  2605  001AA0  1813               	xorwf	??_setStep^0,w,c
  2606  001AA2  6E8A               	movwf	138,c	;volatile
  2607                           
  2608                           ;motors.c: 80:             break;
  2609  001AA4  EF87  F00D         	goto	l83
  2610  001AA8                     l3569:
  2611  001AA8  FFFF               	dw	65535	; assembler added errata NOP
  2612                           
  2613                           ;motors.c: 82:             LATCbits.LATC4 = (step & 0x01);
  2614  001AAA  C015  F013         	movff	setStep@step,??_setStep
  2615  001AAE  0E01               	movlw	1
  2616  001AB0  1613               	andwf	??_setStep^0,f,c
  2617  001AB2  3A13               	swapf	??_setStep^0,f,c
  2618  001AB4  508B               	movf	139,w,c	;volatile
  2619  001AB6  1813               	xorwf	??_setStep^0,w,c
  2620  001AB8  0BEF               	andlw	-17
  2621  001ABA  1813               	xorwf	??_setStep^0,w,c
  2622  001ABC  6E8B               	movwf	139,c	;volatile
  2623                           
  2624                           ;motors.c: 83:             LATCbits.LATC5 = (step & 0x02);
  2625  001ABE  C015  F013         	movff	setStep@step,??_setStep
  2626  001AC2  0E02               	movlw	2
  2627  001AC4  1613               	andwf	??_setStep^0,f,c
  2628  001AC6  3A13               	swapf	??_setStep^0,f,c
  2629  001AC8  4613               	rlncf	??_setStep^0,f,c
  2630  001ACA  508B               	movf	139,w,c	;volatile
  2631  001ACC  1813               	xorwf	??_setStep^0,w,c
  2632  001ACE  0BDF               	andlw	-33
  2633  001AD0  1813               	xorwf	??_setStep^0,w,c
  2634  001AD2  6E8B               	movwf	139,c	;volatile
  2635                           
  2636                           ;motors.c: 84:             break;
  2637  001AD4  EF87  F00D         	goto	l83
  2638  001AD8                     l3573:
  2639  001AD8  FFFF               	dw	65535	; assembler added errata NOP
  2640  001ADA  5012               	movf	setStep@motor^0,w,c
  2641  001ADC  6E13               	movwf	??_setStep^0,c
  2642  001ADE  6A14               	clrf	(??_setStep+1)^0,c
  2643                           
  2644                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2645                           ; Switch size 1, requested type "simple"
  2646                           ; Number of cases is 1, Range of values is 0 to 0
  2647                           ; switch strategies available:
  2648                           ; Name         Instructions Cycles
  2649                           ; simple_byte            4     3 (average)
  2650                           ;	Chosen strategy is simple_byte
  2651  001AE0  5014               	movf	(??_setStep+1)^0,w,c
  2652  001AE2  0A00               	xorlw	0	; case 0
  2653  001AE4  B4D8               	btfsc	status,2,c
  2654  001AE6  EF77  F00D         	goto	l4367
  2655  001AEA  EF87  F00D         	goto	l83
  2656  001AEE                     l4367:
  2657  001AEE  FFFF               	dw	65535	; assembler added errata NOP
  2658                           
  2659                           ; Switch size 1, requested type "simple"
  2660                           ; Number of cases is 3, Range of values is 0 to 2
  2661                           ; switch strategies available:
  2662                           ; Name         Instructions Cycles
  2663                           ; simple_byte           10     6 (average)
  2664                           ;	Chosen strategy is simple_byte
  2665  001AF0  5013               	movf	??_setStep^0,w,c
  2666  001AF2  0A00               	xorlw	0	; case 0
  2667  001AF4  B4D8               	btfsc	status,2,c
  2668  001AF6  EF23  F00D         	goto	l3565
  2669  001AFA  0A01               	xorlw	1	; case 1
  2670  001AFC  B4D8               	btfsc	status,2,c
  2671  001AFE  EF3A  F00D         	goto	l3567
  2672  001B02  0A03               	xorlw	3	; case 2
  2673  001B04  B4D8               	btfsc	status,2,c
  2674  001B06  EF54  F00D         	goto	l3569
  2675  001B0A  EF87  F00D         	goto	l83
  2676  001B0E                     l83:
  2677  001B0E  FFFF               	dw	65535	; assembler added errata NOP
  2678  001B10  0012               	return		;funcret
  2679  001B12  FFFF               	dw	65535	; errata NOP
  2680  001B14                     __end_of_setStep:
  2681                           	callstack 0
  2682                           
  2683 ;; *************** function _setDecay *****************
  2684 ;; Defined at:
  2685 ;;		line 138 in file "motors.c"
  2686 ;; Parameters:    Size  Location     Type
  2687 ;;  decay           1    wreg     unsigned char 
  2688 ;;  motor           1   17[COMRAM] unsigned char 
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;  decay           1   20[COMRAM] unsigned char 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, status,2, status,0
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2700 ;;      Params:         1       0       0       0       0       0       0
  2701 ;;      Locals:         1       0       0       0       0       0       0
  2702 ;;      Temps:          2       0       0       0       0       0       0
  2703 ;;      Totals:         4       0       0       0       0       0       0
  2704 ;;Total ram usage:        4 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    4
  2707 ;; This function calls:
  2708 ;;		Nothing
  2709 ;; This function is called by:
  2710 ;;		_resetPosition
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text10
  2715  001DD6                     __ptext10:
  2716                           	callstack 0
  2717  001DD6                     _setDecay:
  2718                           	callstack 0
  2719  001DD6  FFFF               	dw	65535	; assembler added errata NOP
  2720                           
  2721                           ;incstack = 0
  2722                           ;setDecay@decay stored from wreg
  2723  001DD8  6E15               	movwf	setDecay@decay^0,c
  2724  001DDA                     
  2725                           ;motors.c: 139:     switch(motor){
  2726  001DDA  EF07  F00F         	goto	l3605
  2727  001DDE                     l3597:
  2728  001DDE  FFFF               	dw	65535	; assembler added errata NOP
  2729                           
  2730                           ;motors.c: 141:             LATBbits.LATB2 = decay;
  2731  001DE0  B015               	btfsc	setDecay@decay^0,0,c
  2732  001DE2  D002               	bra	u2755
  2733  001DE4  948A               	bcf	138,2,c	;volatile
  2734  001DE6  D001               	bra	u2756
  2735  001DE8                     u2755:
  2736  001DE8  848A               	bsf	138,2,c	;volatile
  2737  001DEA                     u2756:
  2738                           
  2739                           ;motors.c: 142:             break;
  2740  001DEA  EF22  F00F         	goto	l110
  2741  001DEE                     l3599:
  2742  001DEE  FFFF               	dw	65535	; assembler added errata NOP
  2743                           
  2744                           ;motors.c: 144:             LATCbits.LATC0 = decay;
  2745  001DF0  B015               	btfsc	setDecay@decay^0,0,c
  2746  001DF2  D002               	bra	u2765
  2747  001DF4  908B               	bcf	139,0,c	;volatile
  2748  001DF6  D001               	bra	u2766
  2749  001DF8                     u2765:
  2750  001DF8  808B               	bsf	139,0,c	;volatile
  2751  001DFA                     u2766:
  2752                           
  2753                           ;motors.c: 145:             break;
  2754  001DFA  EF22  F00F         	goto	l110
  2755  001DFE                     l3601:
  2756  001DFE  FFFF               	dw	65535	; assembler added errata NOP
  2757                           
  2758                           ;motors.c: 147:             LATDbits.LATD0 = decay;
  2759  001E00  B015               	btfsc	setDecay@decay^0,0,c
  2760  001E02  D002               	bra	u2775
  2761  001E04  908C               	bcf	140,0,c	;volatile
  2762  001E06  D001               	bra	u2776
  2763  001E08                     u2775:
  2764  001E08  808C               	bsf	140,0,c	;volatile
  2765  001E0A                     u2776:
  2766                           
  2767                           ;motors.c: 148:             break;
  2768  001E0A  EF22  F00F         	goto	l110
  2769  001E0E                     l3605:
  2770  001E0E  FFFF               	dw	65535	; assembler added errata NOP
  2771  001E10  5012               	movf	setDecay@motor^0,w,c
  2772  001E12  6E13               	movwf	??_setDecay^0,c
  2773  001E14  6A14               	clrf	(??_setDecay+1)^0,c
  2774                           
  2775                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2776                           ; Switch size 1, requested type "simple"
  2777                           ; Number of cases is 1, Range of values is 0 to 0
  2778                           ; switch strategies available:
  2779                           ; Name         Instructions Cycles
  2780                           ; simple_byte            4     3 (average)
  2781                           ;	Chosen strategy is simple_byte
  2782  001E16  5014               	movf	(??_setDecay+1)^0,w,c
  2783  001E18  0A00               	xorlw	0	; case 0
  2784  001E1A  B4D8               	btfsc	status,2,c
  2785  001E1C  EF12  F00F         	goto	l4369
  2786  001E20  EF22  F00F         	goto	l110
  2787  001E24                     l4369:
  2788  001E24  FFFF               	dw	65535	; assembler added errata NOP
  2789                           
  2790                           ; Switch size 1, requested type "simple"
  2791                           ; Number of cases is 3, Range of values is 0 to 2
  2792                           ; switch strategies available:
  2793                           ; Name         Instructions Cycles
  2794                           ; simple_byte           10     6 (average)
  2795                           ;	Chosen strategy is simple_byte
  2796  001E26  5013               	movf	??_setDecay^0,w,c
  2797  001E28  0A00               	xorlw	0	; case 0
  2798  001E2A  B4D8               	btfsc	status,2,c
  2799  001E2C  EFEF  F00E         	goto	l3597
  2800  001E30  0A01               	xorlw	1	; case 1
  2801  001E32  B4D8               	btfsc	status,2,c
  2802  001E34  EFF7  F00E         	goto	l3599
  2803  001E38  0A03               	xorlw	3	; case 2
  2804  001E3A  B4D8               	btfsc	status,2,c
  2805  001E3C  EFFF  F00E         	goto	l3601
  2806  001E40  EF22  F00F         	goto	l110
  2807  001E44                     l110:
  2808  001E44  FFFF               	dw	65535	; assembler added errata NOP
  2809  001E46  0012               	return		;funcret
  2810  001E48  FFFF               	dw	65535	; errata NOP
  2811  001E4A                     __end_of_setDecay:
  2812                           	callstack 0
  2813                           
  2814 ;; *************** function _enableMotor *****************
  2815 ;; Defined at:
  2816 ;;		line 96 in file "motors.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  enable          1    wreg     unsigned char 
  2819 ;;  motor           1   17[COMRAM] unsigned char 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  enable          1   20[COMRAM] unsigned char 
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  1    wreg      void 
  2824 ;; Registers used:
  2825 ;;		wreg, status,2, status,0
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2831 ;;      Params:         1       0       0       0       0       0       0
  2832 ;;      Locals:         1       0       0       0       0       0       0
  2833 ;;      Temps:          2       0       0       0       0       0       0
  2834 ;;      Totals:         4       0       0       0       0       0       0
  2835 ;;Total ram usage:        4 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    4
  2838 ;; This function calls:
  2839 ;;		Nothing
  2840 ;; This function is called by:
  2841 ;;		_resetPosition
  2842 ;;		_main
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           	psect	text11
  2847  001E4A                     __ptext11:
  2848                           	callstack 0
  2849  001E4A                     _enableMotor:
  2850                           	callstack 0
  2851  001E4A  FFFF               	dw	65535	; assembler added errata NOP
  2852                           
  2853                           ;incstack = 0
  2854                           ;enableMotor@enable stored from wreg
  2855  001E4C  6E15               	movwf	enableMotor@enable^0,c
  2856  001E4E                     
  2857                           ;motors.c: 97:     switch(motor){
  2858  001E4E  EF41  F00F         	goto	l3589
  2859  001E52                     l3581:
  2860  001E52  FFFF               	dw	65535	; assembler added errata NOP
  2861                           
  2862                           ;motors.c: 99:             LATAbits.LATA3 = enable;
  2863  001E54  B015               	btfsc	enableMotor@enable^0,0,c
  2864  001E56  D002               	bra	u2725
  2865  001E58  9689               	bcf	137,3,c	;volatile
  2866  001E5A  D001               	bra	u2726
  2867  001E5C                     u2725:
  2868  001E5C  8689               	bsf	137,3,c	;volatile
  2869  001E5E                     u2726:
  2870                           
  2871                           ;motors.c: 100:             break;
  2872  001E5E  EF5C  F00F         	goto	l92
  2873  001E62                     l3583:
  2874  001E62  FFFF               	dw	65535	; assembler added errata NOP
  2875                           
  2876                           ;motors.c: 102:             LATBbits.LATB5 = enable;
  2877  001E64  B015               	btfsc	enableMotor@enable^0,0,c
  2878  001E66  D002               	bra	u2735
  2879  001E68  9A8A               	bcf	138,5,c	;volatile
  2880  001E6A  D001               	bra	u2736
  2881  001E6C                     u2735:
  2882  001E6C  8A8A               	bsf	138,5,c	;volatile
  2883  001E6E                     u2736:
  2884                           
  2885                           ;motors.c: 103:             break;
  2886  001E6E  EF5C  F00F         	goto	l92
  2887  001E72                     l3585:
  2888  001E72  FFFF               	dw	65535	; assembler added errata NOP
  2889                           
  2890                           ;motors.c: 105:             LATCbits.LATC3 = enable;
  2891  001E74  B015               	btfsc	enableMotor@enable^0,0,c
  2892  001E76  D002               	bra	u2745
  2893  001E78  968B               	bcf	139,3,c	;volatile
  2894  001E7A  D001               	bra	u2746
  2895  001E7C                     u2745:
  2896  001E7C  868B               	bsf	139,3,c	;volatile
  2897  001E7E                     u2746:
  2898                           
  2899                           ;motors.c: 106:             break;
  2900  001E7E  EF5C  F00F         	goto	l92
  2901  001E82                     l3589:
  2902  001E82  FFFF               	dw	65535	; assembler added errata NOP
  2903  001E84  5012               	movf	enableMotor@motor^0,w,c
  2904  001E86  6E13               	movwf	??_enableMotor^0,c
  2905  001E88  6A14               	clrf	(??_enableMotor+1)^0,c
  2906                           
  2907                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2908                           ; Switch size 1, requested type "simple"
  2909                           ; Number of cases is 1, Range of values is 0 to 0
  2910                           ; switch strategies available:
  2911                           ; Name         Instructions Cycles
  2912                           ; simple_byte            4     3 (average)
  2913                           ;	Chosen strategy is simple_byte
  2914  001E8A  5014               	movf	(??_enableMotor+1)^0,w,c
  2915  001E8C  0A00               	xorlw	0	; case 0
  2916  001E8E  B4D8               	btfsc	status,2,c
  2917  001E90  EF4C  F00F         	goto	l4371
  2918  001E94  EF5C  F00F         	goto	l92
  2919  001E98                     l4371:
  2920  001E98  FFFF               	dw	65535	; assembler added errata NOP
  2921                           
  2922                           ; Switch size 1, requested type "simple"
  2923                           ; Number of cases is 3, Range of values is 0 to 2
  2924                           ; switch strategies available:
  2925                           ; Name         Instructions Cycles
  2926                           ; simple_byte           10     6 (average)
  2927                           ;	Chosen strategy is simple_byte
  2928  001E9A  5013               	movf	??_enableMotor^0,w,c
  2929  001E9C  0A00               	xorlw	0	; case 0
  2930  001E9E  B4D8               	btfsc	status,2,c
  2931  001EA0  EF29  F00F         	goto	l3581
  2932  001EA4  0A01               	xorlw	1	; case 1
  2933  001EA6  B4D8               	btfsc	status,2,c
  2934  001EA8  EF31  F00F         	goto	l3583
  2935  001EAC  0A03               	xorlw	3	; case 2
  2936  001EAE  B4D8               	btfsc	status,2,c
  2937  001EB0  EF39  F00F         	goto	l3585
  2938  001EB4  EF5C  F00F         	goto	l92
  2939  001EB8                     l92:
  2940  001EB8  FFFF               	dw	65535	; assembler added errata NOP
  2941  001EBA  0012               	return		;funcret
  2942  001EBC  FFFF               	dw	65535	; errata NOP
  2943  001EBE                     __end_of_enableMotor:
  2944                           	callstack 0
  2945                           
  2946 ;; *************** function _resetNewSequence *****************
  2947 ;; Defined at:
  2948 ;;		line 112 in file "usart.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;		None
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;		None
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      void 
  2955 ;; Registers used:
  2956 ;;		wreg, status,2
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2962 ;;      Params:         0       0       0       0       0       0       0
  2963 ;;      Locals:         0       0       0       0       0       0       0
  2964 ;;      Temps:          0       0       0       0       0       0       0
  2965 ;;      Totals:         0       0       0       0       0       0       0
  2966 ;;Total ram usage:        0 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    4
  2969 ;; This function calls:
  2970 ;;		Nothing
  2971 ;; This function is called by:
  2972 ;;		_main
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text12
  2977  0021B6                     __ptext12:
  2978                           	callstack 0
  2979  0021B6                     _resetNewSequence:
  2980                           	callstack 0
  2981  0021B6  FFFF               	dw	65535	; assembler added errata NOP
  2982  0021B8                     
  2983                           ;usart.c: 113:     _newSequence = 0;
  2984  0021B8  0E00               	movlw	0
  2985  0021BA  6E5F               	movwf	__newSequence^0,c
  2986  0021BC  0012               	return		;funcret
  2987  0021BE  FFFF               	dw	65535	; errata NOP
  2988  0021C0                     __end_of_resetNewSequence:
  2989                           	callstack 0
  2990                           
  2991 ;; *************** function _reduceSeq *****************
  2992 ;; Defined at:
  2993 ;;		line 89 in file "usart.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;		None
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;		None
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		status,2, status,0
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3007 ;;      Params:         0       0       0       0       0       0       0
  3008 ;;      Locals:         0       0       0       0       0       0       0
  3009 ;;      Temps:          0       0       0       0       0       0       0
  3010 ;;      Totals:         0       0       0       0       0       0       0
  3011 ;;Total ram usage:        0 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    4
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		_main
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text13
  3022  0021E8                     __ptext13:
  3023                           	callstack 0
  3024  0021E8                     _reduceSeq:
  3025                           	callstack 0
  3026  0021E8  FFFF               	dw	65535	; assembler added errata NOP
  3027  0021EA                     
  3028                           ;usart.c: 90:     dataCounter--;
  3029  0021EA  0661               	decf	_dataCounter^0,f,c
  3030  0021EC  0012               	return		;funcret
  3031  0021EE  FFFF               	dw	65535	; errata NOP
  3032  0021F0                     __end_of_reduceSeq:
  3033                           	callstack 0
  3034                           
  3035 ;; *************** function _readSeq *****************
  3036 ;; Defined at:
  3037 ;;		line 96 in file "usart.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;		None
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;		None
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  1    wreg      unsigned char 
  3044 ;; Registers used:
  3045 ;;		wreg, status,2
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3051 ;;      Params:         0       0       0       0       0       0       0
  3052 ;;      Locals:         0       0       0       0       0       0       0
  3053 ;;      Temps:          0       0       0       0       0       0       0
  3054 ;;      Totals:         0       0       0       0       0       0       0
  3055 ;;Total ram usage:        0 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:    4
  3058 ;; This function calls:
  3059 ;;		Nothing
  3060 ;; This function is called by:
  3061 ;;		_main
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text14
  3066  0021F0                     __ptext14:
  3067                           	callstack 0
  3068  0021F0                     _readSeq:
  3069                           	callstack 0
  3070  0021F0  FFFF               	dw	65535	; assembler added errata NOP
  3071  0021F2                     
  3072                           ;usart.c: 97:     return dataCounter;
  3073  0021F2  5061               	movf	_dataCounter^0,w,c
  3074  0021F4  0012               	return		;funcret
  3075  0021F6  FFFF               	dw	65535	; errata NOP
  3076  0021F8                     __end_of_readSeq:
  3077                           	callstack 0
  3078                           
  3079 ;; *************** function _newSequence *****************
  3080 ;; Defined at:
  3081 ;;		line 104 in file "usart.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;		None
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;		None
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      unsigned char 
  3088 ;; Registers used:
  3089 ;;		wreg, status,2
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3095 ;;      Params:         0       0       0       0       0       0       0
  3096 ;;      Locals:         0       0       0       0       0       0       0
  3097 ;;      Temps:          0       0       0       0       0       0       0
  3098 ;;      Totals:         0       0       0       0       0       0       0
  3099 ;;Total ram usage:        0 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    4
  3102 ;; This function calls:
  3103 ;;		Nothing
  3104 ;; This function is called by:
  3105 ;;		_main
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           	psect	text15
  3110  0021F8                     __ptext15:
  3111                           	callstack 0
  3112  0021F8                     _newSequence:
  3113                           	callstack 0
  3114  0021F8  FFFF               	dw	65535	; assembler added errata NOP
  3115  0021FA                     
  3116                           ;usart.c: 105:     return _newSequence;
  3117  0021FA  505F               	movf	__newSequence^0,w,c
  3118  0021FC  0012               	return		;funcret
  3119  0021FE  FFFF               	dw	65535	; errata NOP
  3120  002200                     __end_of_newSequence:
  3121                           	callstack 0
  3122                           
  3123 ;; *************** function _interruptInit *****************
  3124 ;; Defined at:
  3125 ;;		line 107 in file "main.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;		None
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;		None
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      void 
  3132 ;; Registers used:
  3133 ;;		None
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3139 ;;      Params:         0       0       0       0       0       0       0
  3140 ;;      Locals:         0       0       0       0       0       0       0
  3141 ;;      Temps:          0       0       0       0       0       0       0
  3142 ;;      Totals:         0       0       0       0       0       0       0
  3143 ;;Total ram usage:        0 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:    4
  3146 ;; This function calls:
  3147 ;;		Nothing
  3148 ;; This function is called by:
  3149 ;;		_main
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           	psect	text16
  3154  002086                     __ptext16:
  3155                           	callstack 0
  3156  002086                     _interruptInit:
  3157                           	callstack 0
  3158  002086  FFFF               	dw	65535	; assembler added errata NOP
  3159  002088                     
  3160                           ;main.c: 109:     if(!INTCONbits.GIE){
  3161  002088  BEF2               	btfsc	242,7,c	;volatile
  3162  00208A  EF49  F010         	goto	u3061
  3163  00208E  EF4C  F010         	goto	u3060
  3164  002092                     u3061:
  3165  002092  FFFF               	dw	65535	; assembler added errata NOP
  3166  002094  EF4E  F010         	goto	l307
  3167  002098                     u3060:
  3168  002098  FFFF               	dw	65535	; assembler added errata NOP
  3169  00209A                     
  3170                           ;main.c: 110:         INTCONbits.GIE = 1;
  3171  00209A  8EF2               	bsf	242,7,c	;volatile
  3172  00209C                     l307:
  3173  00209C  FFFF               	dw	65535	; assembler added errata NOP
  3174                           
  3175                           ;main.c: 112:     if(!INTCONbits.PEIE){
  3176  00209E  BCF2               	btfsc	242,6,c	;volatile
  3177  0020A0  EF54  F010         	goto	u3071
  3178  0020A4  EF57  F010         	goto	u3070
  3179  0020A8                     u3071:
  3180  0020A8  FFFF               	dw	65535	; assembler added errata NOP
  3181  0020AA  EF59  F010         	goto	l308
  3182  0020AE                     u3070:
  3183  0020AE  FFFF               	dw	65535	; assembler added errata NOP
  3184  0020B0                     
  3185                           ;main.c: 113:         INTCONbits.PEIE = 1;
  3186  0020B0  8CF2               	bsf	242,6,c	;volatile
  3187  0020B2                     l308:
  3188  0020B2  FFFF               	dw	65535	; assembler added errata NOP
  3189                           
  3190                           ;main.c: 117:     RCONbits.IPEN = 1;
  3191  0020B4  8ED0               	bsf	208,7,c	;volatile
  3192                           
  3193                           ;main.c: 118:     INTCONbits.T0IE = 1;
  3194  0020B6  8AF2               	bsf	242,5,c	;volatile
  3195                           
  3196                           ;main.c: 119:     PIE1bits.TMR2IE = 1;
  3197  0020B8  829D               	bsf	157,1,c	;volatile
  3198                           
  3199                           ;main.c: 120:     PIE1bits.RC1IE = 1;
  3200  0020BA  8A9D               	bsf	157,5,c	;volatile
  3201  0020BC  0012               	return		;funcret
  3202  0020BE  FFFF               	dw	65535	; errata NOP
  3203  0020C0                     __end_of_interruptInit:
  3204                           	callstack 0
  3205                           
  3206 ;; *************** function _initPinMotors *****************
  3207 ;; Defined at:
  3208 ;;		line 44 in file "motors.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;		None
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;		None
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  1    wreg      void 
  3215 ;; Registers used:
  3216 ;;		wreg, status,2, status,0
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3222 ;;      Params:         0       0       0       0       0       0       0
  3223 ;;      Locals:         0       0       0       0       0       0       0
  3224 ;;      Temps:          0       0       0       0       0       0       0
  3225 ;;      Totals:         0       0       0       0       0       0       0
  3226 ;;Total ram usage:        0 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    4
  3229 ;; This function calls:
  3230 ;;		Nothing
  3231 ;; This function is called by:
  3232 ;;		_main
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text17
  3237  0020C0                     __ptext17:
  3238                           	callstack 0
  3239  0020C0                     _initPinMotors:
  3240                           	callstack 0
  3241  0020C0  FFFF               	dw	65535	; assembler added errata NOP
  3242  0020C2                     
  3243                           ;motors.c: 46:     ADCON1bits.PCFG = 0x06;
  3244  0020C2  50C1               	movf	193,w,c	;volatile
  3245  0020C4  0BF0               	andlw	-16
  3246  0020C6  0906               	iorlw	6
  3247  0020C8  6EC1               	movwf	193,c	;volatile
  3248  0020CA                     
  3249                           ;motors.c: 47:     TRISA &= 0b11010001;
  3250  0020CA  0ED1               	movlw	209
  3251  0020CC  1692               	andwf	146,f,c	;volatile
  3252  0020CE                     
  3253                           ;motors.c: 49:     TRISB &= 0b00000010;
  3254  0020CE  0E02               	movlw	2
  3255  0020D0  1693               	andwf	147,f,c	;volatile
  3256  0020D2                     
  3257                           ;motors.c: 50:     TRISC &= 0b11000000;
  3258  0020D2  0EC0               	movlw	192
  3259  0020D4  1694               	andwf	148,f,c	;volatile
  3260  0020D6                     
  3261                           ;motors.c: 51:     TRISD &= 0b11000000;
  3262  0020D6  0EC0               	movlw	192
  3263  0020D8  1695               	andwf	149,f,c	;volatile
  3264  0020DA                     
  3265                           ;motors.c: 54:     TRISEbits.TRISE0 = 1;
  3266  0020DA  8096               	bsf	150,0,c	;volatile
  3267  0020DC                     
  3268                           ;motors.c: 55:     TRISEbits.TRISE1 = 1;
  3269  0020DC  8296               	bsf	150,1,c	;volatile
  3270  0020DE                     
  3271                           ;motors.c: 56:     TRISEbits.TRISE2 = 1;
  3272  0020DE  8496               	bsf	150,2,c	;volatile
  3273  0020E0                     
  3274                           ;motors.c: 59:     TRISDbits.TRISD7 = 1;
  3275  0020E0  8E95               	bsf	149,7,c	;volatile
  3276  0020E2  0012               	return		;funcret
  3277  0020E4  FFFF               	dw	65535	; errata NOP
  3278  0020E6                     __end_of_initPinMotors:
  3279                           	callstack 0
  3280                           
  3281 ;; *************** function _initADC *****************
  3282 ;; Defined at:
  3283 ;;		line 18 in file "adc.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;		None
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;		None
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  1    wreg      void 
  3290 ;; Registers used:
  3291 ;;		wreg, status,2
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3297 ;;      Params:         0       0       0       0       0       0       0
  3298 ;;      Locals:         0       0       0       0       0       0       0
  3299 ;;      Temps:          0       0       0       0       0       0       0
  3300 ;;      Totals:         0       0       0       0       0       0       0
  3301 ;;Total ram usage:        0 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; Hardware stack levels required when called:    4
  3304 ;; This function calls:
  3305 ;;		Nothing
  3306 ;; This function is called by:
  3307 ;;		_main
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           	psect	text18
  3312  0020E6                     __ptext18:
  3313                           	callstack 0
  3314  0020E6                     _initADC:
  3315                           	callstack 0
  3316  0020E6  FFFF               	dw	65535	; assembler added errata NOP
  3317  0020E8                     
  3318                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3319  0020E8  50C2               	movf	194,w,c	;volatile
  3320  0020EA  0B3F               	andlw	-193
  3321  0020EC  0940               	iorlw	64
  3322  0020EE  6EC2               	movwf	194,c	;volatile
  3323  0020F0                     
  3324                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3325  0020F0  8CC1               	bsf	193,6,c	;volatile
  3326                           
  3327                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3328  0020F2  0EC7               	movlw	-57
  3329  0020F4  16C2               	andwf	194,f,c	;volatile
  3330  0020F6                     
  3331                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3332  0020F6  94C2               	bcf	194,2,c	;volatile
  3333  0020F8                     
  3334                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3335  0020F8  90C2               	bcf	194,0,c	;volatile
  3336  0020FA                     
  3337                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3338  0020FA  9EC1               	bcf	193,7,c	;volatile
  3339                           
  3340                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3341  0020FC  50C1               	movf	193,w,c	;volatile
  3342  0020FE  0BF0               	andlw	-16
  3343  002100  090E               	iorlw	14
  3344  002102  6EC1               	movwf	193,c	;volatile
  3345  002104                     
  3346                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3347  002104  8C9D               	bsf	157,6,c	;volatile
  3348  002106                     
  3349                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3350  002106  8C9F               	bsf	159,6,c	;volatile
  3351  002108  0012               	return		;funcret
  3352  00210A  FFFF               	dw	65535	; errata NOP
  3353  00210C                     __end_of_initADC:
  3354                           	callstack 0
  3355                           
  3356 ;; *************** function _getNewSequence *****************
  3357 ;; Defined at:
  3358 ;;		line 213 in file "usart.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;		None
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;		None
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  2   17[COMRAM] PTR struct .
  3365 ;; Registers used:
  3366 ;;		wreg, status,2, status,0
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3372 ;;      Params:         2       0       0       0       0       0       0
  3373 ;;      Locals:         0       0       0       0       0       0       0
  3374 ;;      Temps:          0       0       0       0       0       0       0
  3375 ;;      Totals:         2       0       0       0       0       0       0
  3376 ;;Total ram usage:        2 bytes
  3377 ;; Hardware stack levels used:    1
  3378 ;; Hardware stack levels required when called:    4
  3379 ;; This function calls:
  3380 ;;		Nothing
  3381 ;; This function is called by:
  3382 ;;		_main
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           	psect	text19
  3387  002164                     __ptext19:
  3388                           	callstack 0
  3389  002164                     _getNewSequence:
  3390                           	callstack 0
  3391  002164  FFFF               	dw	65535	; assembler added errata NOP
  3392  002166                     
  3393                           ;usart.c: 214:     return(&newSequenceData);
  3394  002166  0EEC               	movlw	low _newSequenceData
  3395  002168  6E12               	movwf	?_getNewSequence^0,c
  3396  00216A  0E00               	movlw	high _newSequenceData
  3397  00216C  6E13               	movwf	(?_getNewSequence+1)^0,c
  3398  00216E  0012               	return		;funcret
  3399  002170  FFFF               	dw	65535	; errata NOP
  3400  002172                     __end_of_getNewSequence:
  3401                           	callstack 0
  3402                           
  3403 ;; *************** function _fatalError *****************
  3404 ;; Defined at:
  3405 ;;		line 100 in file "usart.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;		None
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;		None
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  1    wreg      unsigned char 
  3412 ;; Registers used:
  3413 ;;		wreg, status,2
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3419 ;;      Params:         0       0       0       0       0       0       0
  3420 ;;      Locals:         0       0       0       0       0       0       0
  3421 ;;      Temps:          0       0       0       0       0       0       0
  3422 ;;      Totals:         0       0       0       0       0       0       0
  3423 ;;Total ram usage:        0 bytes
  3424 ;; Hardware stack levels used:    1
  3425 ;; Hardware stack levels required when called:    4
  3426 ;; This function calls:
  3427 ;;		Nothing
  3428 ;; This function is called by:
  3429 ;;		_main
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	text20
  3434  002200                     __ptext20:
  3435                           	callstack 0
  3436  002200                     _fatalError:
  3437                           	callstack 0
  3438  002200  FFFF               	dw	65535	; assembler added errata NOP
  3439  002202                     
  3440                           ;usart.c: 101:     return _fatalError;
  3441  002202  5060               	movf	__fatalError^0,w,c
  3442  002204  0012               	return		;funcret
  3443  002206  FFFF               	dw	65535	; errata NOP
  3444  002208                     __end_of_fatalError:
  3445                           	callstack 0
  3446                           
  3447 ;; *************** function _executeData *****************
  3448 ;; Defined at:
  3449 ;;		line 130 in file "main.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;		None
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;  data            2    8[BANK0 ] PTR struct .
  3454 ;;		 -> dataSequence(20), 
  3455 ;;  errCode         1    7[BANK0 ] unsigned char 
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  1    wreg      unsigned char 
  3458 ;; Registers used:
  3459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3465 ;;      Params:         0       0       0       0       0       0       0
  3466 ;;      Locals:         0       3       0       0       0       0       0
  3467 ;;      Temps:          2       0       0       0       0       0       0
  3468 ;;      Totals:         2       3       0       0       0       0       0
  3469 ;;Total ram usage:        5 bytes
  3470 ;; Hardware stack levels used:    1
  3471 ;; Hardware stack levels required when called:    6
  3472 ;; This function calls:
  3473 ;;		_getData
  3474 ;;		_liftArm
  3475 ;;		_moveToPoint
  3476 ;;		_pickObject
  3477 ;;		_releaseObj
  3478 ;;		_rotateObj
  3479 ;; This function is called by:
  3480 ;;		_main
  3481 ;; This function uses a non-reentrant model
  3482 ;;
  3483                           
  3484                           	psect	text21
  3485  000A42                     __ptext21:
  3486                           	callstack 0
  3487  000A42                     _executeData:
  3488                           	callstack 0
  3489  000A42  FFFF               	dw	65535	; assembler added errata NOP
  3490  000A44                     
  3491                           ;main.c: 131:     t_sequence *data = getData();
  3492  000A44  ECB9  F010         	call	_getData	;wreg free
  3493  000A48  C012  F0FC         	movff	?_getData,executeData@data
  3494  000A4C  C013  F0FD         	movff	?_getData+1,executeData@data+1
  3495  000A50                     
  3496                           ;main.c: 137:     switch(data->feederLine){
  3497  000A50  EFD4  F005         	goto	l3937
  3498  000A54                     l3909:
  3499  000A54  FFFF               	dw	65535	; assembler added errata NOP
  3500                           
  3501                           ;main.c: 140:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3502  000A56  C04E  F016         	movff	_posVector,moveToPoint@x1
  3503  000A5A  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3504  000A5C  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3505  000A60  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3506  000A62  0E0D               	movlw	low _feeder1Pos
  3507  000A64  6EF6               	movwf	tblptrl,c
  3508  000A66                     	if	1	;There is more than 1 active tblptr byte
  3509  000A66  0E06               	movlw	high _feeder1Pos
  3510  000A68  6EF7               	movwf	tblptrh,c
  3511  000A6A                     	endif
  3512  000A6A                     	if	0	;There are less than 3 active tblptr bytes
  3513  000A6A                     	endif
  3514  000A6A  0008               	tblrd		*
  3515  000A6C  FFFF               	dw	65535	; errata NOP
  3516  000A6E  50F5               	movf	tablat,w,c
  3517  000A70  6E1A               	movwf	moveToPoint@x2^0,c
  3518  000A72  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3519  000A74  0E0E               	movlw	low (_feeder1Pos+1)
  3520  000A76  6EF6               	movwf	tblptrl,c
  3521  000A78  0E06               	movlw	high (_feeder1Pos+1)
  3522  000A7A  6EF7               	movwf	tblptrh,c
  3523  000A7C                     	if	0	;tblptru may be non-zero
  3524  000A7C                     	endif
  3525  000A7C                     	if	0	;tblptru may be non-zero
  3526  000A7C                     	endif
  3527  000A7C  0008               	tblrd		*
  3528  000A7E  FFFF               	dw	65535	; errata NOP
  3529  000A80  50F5               	movf	tablat,w,c
  3530  000A82  6E1C               	movwf	moveToPoint@y2^0,c
  3531  000A84  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3532  000A86  EC56  F008         	call	_moveToPoint	;wreg free
  3533  000A8A  0100               	movlb	0	; () banked
  3534  000A8C  6FFB               	movwf	executeData@errCode& (0+255),b
  3535  000A8E                     
  3536                           ; BSR set to: 0
  3537                           ;main.c: 142:             posVector[0] = feeder1Pos[0];
  3538  000A8E  0E0D               	movlw	low _feeder1Pos
  3539  000A90  6EF6               	movwf	tblptrl,c
  3540  000A92                     	if	1	;There is more than 1 active tblptr byte
  3541  000A92  0E06               	movlw	high _feeder1Pos
  3542  000A94  6EF7               	movwf	tblptrh,c
  3543  000A96                     	endif
  3544  000A96                     	if	0	;There are less than 3 active tblptr bytes
  3545  000A96                     	endif
  3546  000A96  0008               	tblrd		*
  3547  000A98  FFFF               	dw	65535	; errata NOP
  3548  000A9A  CFF5 F04E          	movff	tablat,_posVector
  3549  000A9E                     
  3550                           ; BSR set to: 0
  3551                           ;main.c: 143:             posVector[1] = feeder1Pos[1];
  3552  000A9E  0E0E               	movlw	low (_feeder1Pos+1)
  3553  000AA0  6EF6               	movwf	tblptrl,c
  3554  000AA2  0E06               	movlw	high (_feeder1Pos+1)
  3555  000AA4  6EF7               	movwf	tblptrh,c
  3556  000AA6                     	if	0	;tblptru may be non-zero
  3557  000AA6                     	endif
  3558  000AA6                     	if	0	;tblptru may be non-zero
  3559  000AA6                     	endif
  3560  000AA6  0008               	tblrd		*
  3561  000AA8  FFFF               	dw	65535	; errata NOP
  3562  000AAA  CFF5 F04F          	movff	tablat,_posVector+1
  3563                           
  3564                           ;main.c: 144:             break;
  3565  000AAE  EFF7  F005         	goto	l3939
  3566  000AB2                     l3915:
  3567  000AB2  FFFF               	dw	65535	; assembler added errata NOP
  3568                           
  3569                           ;main.c: 146:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3570  000AB4  C04E  F016         	movff	_posVector,moveToPoint@x1
  3571  000AB8  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3572  000ABA  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3573  000ABE  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3574  000AC0  0E0B               	movlw	low _feeder2Pos
  3575  000AC2  6EF6               	movwf	tblptrl,c
  3576  000AC4                     	if	1	;There is more than 1 active tblptr byte
  3577  000AC4  0E06               	movlw	high _feeder2Pos
  3578  000AC6  6EF7               	movwf	tblptrh,c
  3579  000AC8                     	endif
  3580  000AC8                     	if	0	;There are less than 3 active tblptr bytes
  3581  000AC8                     	endif
  3582  000AC8  0008               	tblrd		*
  3583  000ACA  FFFF               	dw	65535	; errata NOP
  3584  000ACC  50F5               	movf	tablat,w,c
  3585  000ACE  6E1A               	movwf	moveToPoint@x2^0,c
  3586  000AD0  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3587  000AD2  0E0C               	movlw	low (_feeder2Pos+1)
  3588  000AD4  6EF6               	movwf	tblptrl,c
  3589  000AD6  0E06               	movlw	high (_feeder2Pos+1)
  3590  000AD8  6EF7               	movwf	tblptrh,c
  3591  000ADA                     	if	0	;tblptru may be non-zero
  3592  000ADA                     	endif
  3593  000ADA                     	if	0	;tblptru may be non-zero
  3594  000ADA                     	endif
  3595  000ADA  0008               	tblrd		*
  3596  000ADC  FFFF               	dw	65535	; errata NOP
  3597  000ADE  50F5               	movf	tablat,w,c
  3598  000AE0  6E1C               	movwf	moveToPoint@y2^0,c
  3599  000AE2  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3600  000AE4  EC56  F008         	call	_moveToPoint	;wreg free
  3601  000AE8  0100               	movlb	0	; () banked
  3602  000AEA  6FFB               	movwf	executeData@errCode& (0+255),b
  3603  000AEC                     
  3604                           ; BSR set to: 0
  3605                           ;main.c: 147:             posVector[0] = feeder2Pos[0];
  3606  000AEC  0E0B               	movlw	low _feeder2Pos
  3607  000AEE  6EF6               	movwf	tblptrl,c
  3608  000AF0                     	if	1	;There is more than 1 active tblptr byte
  3609  000AF0  0E06               	movlw	high _feeder2Pos
  3610  000AF2  6EF7               	movwf	tblptrh,c
  3611  000AF4                     	endif
  3612  000AF4                     	if	0	;There are less than 3 active tblptr bytes
  3613  000AF4                     	endif
  3614  000AF4  0008               	tblrd		*
  3615  000AF6  FFFF               	dw	65535	; errata NOP
  3616  000AF8  CFF5 F04E          	movff	tablat,_posVector
  3617  000AFC                     
  3618                           ; BSR set to: 0
  3619                           ;main.c: 148:             posVector[1] = feeder2Pos[1];
  3620  000AFC  0E0C               	movlw	low (_feeder2Pos+1)
  3621  000AFE  6EF6               	movwf	tblptrl,c
  3622  000B00  0E06               	movlw	high (_feeder2Pos+1)
  3623  000B02  6EF7               	movwf	tblptrh,c
  3624  000B04                     	if	0	;tblptru may be non-zero
  3625  000B04                     	endif
  3626  000B04                     	if	0	;tblptru may be non-zero
  3627  000B04                     	endif
  3628  000B04  0008               	tblrd		*
  3629  000B06  FFFF               	dw	65535	; errata NOP
  3630  000B08  CFF5 F04F          	movff	tablat,_posVector+1
  3631                           
  3632                           ;main.c: 149:             break;
  3633  000B0C  EFF7  F005         	goto	l3939
  3634  000B10                     l3921:
  3635  000B10  FFFF               	dw	65535	; assembler added errata NOP
  3636                           
  3637                           ;main.c: 151:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3638  000B12  C04E  F016         	movff	_posVector,moveToPoint@x1
  3639  000B16  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3640  000B18  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3641  000B1C  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3642  000B1E  0E09               	movlw	low _feeder3Pos
  3643  000B20  6EF6               	movwf	tblptrl,c
  3644  000B22                     	if	1	;There is more than 1 active tblptr byte
  3645  000B22  0E06               	movlw	high _feeder3Pos
  3646  000B24  6EF7               	movwf	tblptrh,c
  3647  000B26                     	endif
  3648  000B26                     	if	0	;There are less than 3 active tblptr bytes
  3649  000B26                     	endif
  3650  000B26  0008               	tblrd		*
  3651  000B28  FFFF               	dw	65535	; errata NOP
  3652  000B2A  50F5               	movf	tablat,w,c
  3653  000B2C  6E1A               	movwf	moveToPoint@x2^0,c
  3654  000B2E  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3655  000B30  0E0A               	movlw	low (_feeder3Pos+1)
  3656  000B32  6EF6               	movwf	tblptrl,c
  3657  000B34  0E06               	movlw	high (_feeder3Pos+1)
  3658  000B36  6EF7               	movwf	tblptrh,c
  3659  000B38                     	if	0	;tblptru may be non-zero
  3660  000B38                     	endif
  3661  000B38                     	if	0	;tblptru may be non-zero
  3662  000B38                     	endif
  3663  000B38  0008               	tblrd		*
  3664  000B3A  FFFF               	dw	65535	; errata NOP
  3665  000B3C  50F5               	movf	tablat,w,c
  3666  000B3E  6E1C               	movwf	moveToPoint@y2^0,c
  3667  000B40  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3668  000B42  EC56  F008         	call	_moveToPoint	;wreg free
  3669  000B46  0100               	movlb	0	; () banked
  3670  000B48  6FFB               	movwf	executeData@errCode& (0+255),b
  3671  000B4A                     
  3672                           ; BSR set to: 0
  3673                           ;main.c: 152:             posVector[0] = feeder3Pos[0];
  3674  000B4A  0E09               	movlw	low _feeder3Pos
  3675  000B4C  6EF6               	movwf	tblptrl,c
  3676  000B4E                     	if	1	;There is more than 1 active tblptr byte
  3677  000B4E  0E06               	movlw	high _feeder3Pos
  3678  000B50  6EF7               	movwf	tblptrh,c
  3679  000B52                     	endif
  3680  000B52                     	if	0	;There are less than 3 active tblptr bytes
  3681  000B52                     	endif
  3682  000B52  0008               	tblrd		*
  3683  000B54  FFFF               	dw	65535	; errata NOP
  3684  000B56  CFF5 F04E          	movff	tablat,_posVector
  3685  000B5A                     
  3686                           ; BSR set to: 0
  3687                           ;main.c: 153:             posVector[1] = feeder3Pos[1];
  3688  000B5A  0E0A               	movlw	low (_feeder3Pos+1)
  3689  000B5C  6EF6               	movwf	tblptrl,c
  3690  000B5E  0E06               	movlw	high (_feeder3Pos+1)
  3691  000B60  6EF7               	movwf	tblptrh,c
  3692  000B62                     	if	0	;tblptru may be non-zero
  3693  000B62                     	endif
  3694  000B62                     	if	0	;tblptru may be non-zero
  3695  000B62                     	endif
  3696  000B62  0008               	tblrd		*
  3697  000B64  FFFF               	dw	65535	; errata NOP
  3698  000B66  CFF5 F04F          	movff	tablat,_posVector+1
  3699                           
  3700                           ;main.c: 154:             break;
  3701  000B6A  EFF7  F005         	goto	l3939
  3702  000B6E                     l3927:
  3703  000B6E  FFFF               	dw	65535	; assembler added errata NOP
  3704                           
  3705                           ;main.c: 158:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3706  000B70  C04E  F016         	movff	_posVector,moveToPoint@x1
  3707  000B74  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3708  000B76  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3709  000B7A  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3710  000B7C  C057  F01A         	movff	_newFeeder,moveToPoint@x2
  3711  000B80  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3712  000B82  C058  F01C         	movff	_newFeeder+1,moveToPoint@y2
  3713  000B86  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3714  000B88  EC56  F008         	call	_moveToPoint	;wreg free
  3715  000B8C  0100               	movlb	0	; () banked
  3716  000B8E  6FFB               	movwf	executeData@errCode& (0+255),b
  3717  000B90                     
  3718                           ; BSR set to: 0
  3719                           ;main.c: 159:             posVector[0] = newFeeder[0];
  3720  000B90  C057  F04E         	movff	_newFeeder,_posVector
  3721  000B94                     
  3722                           ; BSR set to: 0
  3723                           ;main.c: 160:             posVector[1] = newFeeder[1];
  3724  000B94  C058  F04F         	movff	_newFeeder+1,_posVector+1
  3725                           
  3726                           ;main.c: 161:             break;
  3727  000B98  EFF7  F005         	goto	l3939
  3728  000B9C                     l3933:
  3729  000B9C  FFFF               	dw	65535	; assembler added errata NOP
  3730                           
  3731                           ;main.c: 165:             errCode = 1;
  3732  000B9E  0E01               	movlw	1
  3733  000BA0  0100               	movlb	0	; () banked
  3734  000BA2  6FFB               	movwf	executeData@errCode& (0+255),b
  3735                           
  3736                           ;main.c: 166:             break;
  3737  000BA4  EFF7  F005         	goto	l3939
  3738  000BA8                     l3937:
  3739  000BA8  FFFF               	dw	65535	; assembler added errata NOP
  3740  000BAA  C0FC  FFD9         	movff	executeData@data,fsr2l
  3741  000BAE  C0FD  FFDA         	movff	executeData@data+1,fsr2h
  3742  000BB2  50DF               	movf	indf2,w,c
  3743  000BB4  6E43               	movwf	??_executeData^0,c
  3744  000BB6  6A44               	clrf	(??_executeData+1)^0,c
  3745                           
  3746                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3747                           ; Switch size 1, requested type "simple"
  3748                           ; Number of cases is 1, Range of values is 0 to 0
  3749                           ; switch strategies available:
  3750                           ; Name         Instructions Cycles
  3751                           ; simple_byte            4     3 (average)
  3752                           ;	Chosen strategy is simple_byte
  3753  000BB8  5044               	movf	(??_executeData+1)^0,w,c
  3754  000BBA  0A00               	xorlw	0	; case 0
  3755  000BBC  B4D8               	btfsc	status,2,c
  3756  000BBE  EFE3  F005         	goto	l4373
  3757  000BC2  EFCE  F005         	goto	l3933
  3758  000BC6                     l4373:
  3759  000BC6  FFFF               	dw	65535	; assembler added errata NOP
  3760                           
  3761                           ; Switch size 1, requested type "simple"
  3762                           ; Number of cases is 4, Range of values is 0 to 255
  3763                           ; switch strategies available:
  3764                           ; Name         Instructions Cycles
  3765                           ; simple_byte           13     7 (average)
  3766                           ;	Chosen strategy is simple_byte
  3767  000BC8  5043               	movf	??_executeData^0,w,c
  3768  000BCA  0A00               	xorlw	0	; case 0
  3769  000BCC  B4D8               	btfsc	status,2,c
  3770  000BCE  EF2A  F005         	goto	l3909
  3771  000BD2  0A01               	xorlw	1	; case 1
  3772  000BD4  B4D8               	btfsc	status,2,c
  3773  000BD6  EF59  F005         	goto	l3915
  3774  000BDA  0A03               	xorlw	3	; case 2
  3775  000BDC  B4D8               	btfsc	status,2,c
  3776  000BDE  EF88  F005         	goto	l3921
  3777  000BE2  0AFD               	xorlw	253	; case 255
  3778  000BE4  B4D8               	btfsc	status,2,c
  3779  000BE6  EFB7  F005         	goto	l3927
  3780  000BEA  EFCE  F005         	goto	l3933
  3781  000BEE                     l3939:
  3782  000BEE  FFFF               	dw	65535	; assembler added errata NOP
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;main.c: 170:     if(!errCode){
  3786  000BF0  51FB               	movf	executeData@errCode& (0+255),w,b
  3787  000BF2  A4D8               	btfss	status,2,c
  3788  000BF4  EFFE  F005         	goto	u3091
  3789  000BF8  EF01  F006         	goto	u3090
  3790  000BFC                     u3091:
  3791  000BFC  FFFF               	dw	65535	; assembler added errata NOP
  3792  000BFE  EF5D  F006         	goto	l3963
  3793  000C02                     u3090:
  3794  000C02  FFFF               	dw	65535	; assembler added errata NOP
  3795  000C04                     
  3796                           ; BSR set to: 0
  3797                           ;main.c: 176:         pickObject();
  3798  000C04  EC08  F011         	call	_pickObject	;wreg free
  3799  000C08  EC50  F00E         	call	_liftArm	;wreg free
  3800  000C0C  C04E  F016         	movff	_posVector,moveToPoint@x1
  3801  000C10  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3802  000C12  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3803  000C16  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3804  000C18  0100               	movlb	0	; () banked
  3805  000C1A  EE20 F001          	lfsr	2,1
  3806  000C1E  51FC               	movf	executeData@data& (0+255),w,b
  3807  000C20  26D9               	addwf	fsr2l,f,c
  3808  000C22  51FD               	movf	(executeData@data+1)& (0+255),w,b
  3809  000C24  22DA               	addwfc	fsr2h,f,c
  3810  000C26  50DF               	movf	indf2,w,c
  3811  000C28  6E43               	movwf	??_executeData^0,c
  3812  000C2A  5043               	movf	??_executeData^0,w,c
  3813  000C2C  6E1A               	movwf	moveToPoint@x2^0,c
  3814  000C2E  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3815  000C30  EE20 F002          	lfsr	2,2
  3816  000C34  51FC               	movf	executeData@data& (0+255),w,b
  3817  000C36  26D9               	addwf	fsr2l,f,c
  3818  000C38  51FD               	movf	(executeData@data+1)& (0+255),w,b
  3819  000C3A  22DA               	addwfc	fsr2h,f,c
  3820  000C3C  50DF               	movf	indf2,w,c
  3821  000C3E  6E44               	movwf	(??_executeData+1)^0,c
  3822  000C40  5044               	movf	(??_executeData+1)^0,w,c
  3823  000C42  6E1C               	movwf	moveToPoint@y2^0,c
  3824  000C44  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3825  000C46  EC56  F008         	call	_moveToPoint	;wreg free
  3826  000C4A                     
  3827                           ;main.c: 183:         posVector[0] = data->posX;
  3828  000C4A  0100               	movlb	0	; () banked
  3829  000C4C  EE20 F001          	lfsr	2,1
  3830  000C50  51FC               	movf	executeData@data& (0+255),w,b
  3831  000C52  26D9               	addwf	fsr2l,f,c
  3832  000C54  51FD               	movf	(executeData@data+1)& (0+255),w,b
  3833  000C56  22DA               	addwfc	fsr2h,f,c
  3834  000C58  50DF               	movf	indf2,w,c
  3835  000C5A  6E4E               	movwf	_posVector^0,c
  3836  000C5C                     
  3837                           ; BSR set to: 0
  3838                           ;main.c: 184:         posVector[1] = data->posY;
  3839  000C5C  EE20 F002          	lfsr	2,2
  3840  000C60  51FC               	movf	executeData@data& (0+255),w,b
  3841  000C62  26D9               	addwf	fsr2l,f,c
  3842  000C64  51FD               	movf	(executeData@data+1)& (0+255),w,b
  3843  000C66  22DA               	addwfc	fsr2h,f,c
  3844  000C68  50DF               	movf	indf2,w,c
  3845  000C6A  6E4F               	movwf	(_posVector+1)^0,c
  3846  000C6C                     
  3847                           ; BSR set to: 0
  3848                           ;main.c: 187:         rotAngle = data->rotation - rotAngle;
  3849  000C6C  EE20 F003          	lfsr	2,3
  3850  000C70  51FC               	movf	executeData@data& (0+255),w,b
  3851  000C72  26D9               	addwf	fsr2l,f,c
  3852  000C74  51FD               	movf	(executeData@data+1)& (0+255),w,b
  3853  000C76  22DA               	addwfc	fsr2h,f,c
  3854  000C78  50DF               	movf	indf2,w,c
  3855  000C7A  6E43               	movwf	??_executeData^0,c
  3856  000C7C  5059               	movf	_rotAngle^0,w,c
  3857  000C7E  5C43               	subwf	??_executeData^0,w,c
  3858  000C80  6E59               	movwf	_rotAngle^0,c
  3859  000C82  505A               	movf	(_rotAngle+1)^0,w,c
  3860  000C84  A0D8               	btfss	status,0,c
  3861  000C86  285A               	incf	(_rotAngle+1)^0,w,c
  3862  000C88  6A5A               	clrf	(_rotAngle+1)^0,c
  3863  000C8A  5E5A               	subwf	(_rotAngle+1)^0,f,c
  3864  000C8C                     
  3865                           ; BSR set to: 0
  3866                           ;main.c: 189:         if(rotAngle < 0){
  3867  000C8C  BE5A               	btfsc	(_rotAngle+1)^0,7,c
  3868  000C8E  EF4E  F006         	goto	u3100
  3869  000C92  EF4B  F006         	goto	u3101
  3870  000C96                     u3101:
  3871  000C96  FFFF               	dw	65535	; assembler added errata NOP
  3872  000C98  EF53  F006         	goto	l3957
  3873  000C9C                     u3100:
  3874  000C9C  FFFF               	dw	65535	; assembler added errata NOP
  3875  000C9E                     
  3876                           ; BSR set to: 0
  3877                           ;main.c: 190:             rotAngle += 360;
  3878  000C9E  0E68               	movlw	104
  3879  000CA0  2659               	addwf	_rotAngle^0,f,c
  3880  000CA2  0E01               	movlw	1
  3881  000CA4  225A               	addwfc	(_rotAngle+1)^0,f,c
  3882  000CA6                     l3957:
  3883  000CA6  FFFF               	dw	65535	; assembler added errata NOP
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;main.c: 192:         rotateObj(rotAngle);
  3887  000CA8  5059               	movf	_rotAngle^0,w,c
  3888  000CAA  ECF3  F00D         	call	_rotateObj
  3889  000CAE                     
  3890                           ;main.c: 198:         releaseObj();
  3891  000CAE  EC04  F011         	call	_releaseObj	;wreg free
  3892  000CB2                     
  3893                           ;main.c: 201:         errCode = liftArm();
  3894  000CB2  EC50  F00E         	call	_liftArm	;wreg free
  3895  000CB6  0100               	movlb	0	; () banked
  3896  000CB8  6FFB               	movwf	executeData@errCode& (0+255),b
  3897  000CBA                     l3963:
  3898  000CBA  FFFF               	dw	65535	; assembler added errata NOP
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;main.c: 204:     return(errCode);
  3902  000CBC  51FB               	movf	executeData@errCode& (0+255),w,b
  3903  000CBE                     
  3904                           ; BSR set to: 0
  3905  000CBE  0012               	return		;funcret
  3906  000CC0  FFFF               	dw	65535	; errata NOP
  3907  000CC2                     __end_of_executeData:
  3908                           	callstack 0
  3909                           
  3910 ;; *************** function _rotateObj *****************
  3911 ;; Defined at:
  3912 ;;		line 550 in file "motors.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;  rotAngle        1    wreg     unsigned char 
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;  rotAngle        1    3[BANK0 ] unsigned char 
  3917 ;;  totStep         2    4[BANK0 ] int 
  3918 ;;  i               1    6[BANK0 ] unsigned char 
  3919 ;; Return value:  Size  Location     Type
  3920 ;;                  1    wreg      void 
  3921 ;; Registers used:
  3922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3923 ;; Tracked objects:
  3924 ;;		On entry : 0/0
  3925 ;;		On exit  : 0/0
  3926 ;;		Unchanged: 0/0
  3927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3928 ;;      Params:         0       0       0       0       0       0       0
  3929 ;;      Locals:         0       4       0       0       0       0       0
  3930 ;;      Temps:          0       3       0       0       0       0       0
  3931 ;;      Totals:         0       7       0       0       0       0       0
  3932 ;;Total ram usage:        7 bytes
  3933 ;; Hardware stack levels used:    1
  3934 ;; Hardware stack levels required when called:    5
  3935 ;; This function calls:
  3936 ;;		___fldiv
  3937 ;;		___fltol
  3938 ;;		___xxtofl
  3939 ;; This function is called by:
  3940 ;;		_executeData
  3941 ;; This function uses a non-reentrant model
  3942 ;;
  3943                           
  3944                           	psect	text22
  3945  001BE6                     __ptext22:
  3946                           	callstack 0
  3947  001BE6                     _rotateObj:
  3948                           	callstack 0
  3949  001BE6  FFFF               	dw	65535	; assembler added errata NOP
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;incstack = 0
  3953                           ;rotateObj@rotAngle stored from wreg
  3954  001BE8  0100               	movlb	0	; () banked
  3955  001BEA  6FF7               	movwf	rotateObj@rotAngle& (0+255),b
  3956  001BEC                     
  3957                           ;motors.c: 551:     static const float stepAngle = 0.08789;;motors.c: 552:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 553:     unsigned char i;
      +                          ;motors.c: 554:     int totStep = rotAngle/stepAngle;
  3958  001BEC  0EAC               	movlw	172
  3959  001BEE  6E24               	movwf	___fldiv@a^0,c
  3960  001BF0  0EFF               	movlw	255
  3961  001BF2  6E25               	movwf	(___fldiv@a+1)^0,c
  3962  001BF4  0EB3               	movlw	179
  3963  001BF6  6E26               	movwf	(___fldiv@a+2)^0,c
  3964  001BF8  0E3D               	movlw	61
  3965  001BFA  6E27               	movwf	(___fldiv@a+3)^0,c
  3966  001BFC  0100               	movlb	0	; () banked
  3967  001BFE  51F7               	movf	rotateObj@rotAngle& (0+255),w,b
  3968  001C00  6E12               	movwf	___xxtofl@val^0,c
  3969  001C02  6A13               	clrf	(___xxtofl@val+1)^0,c
  3970  001C04  6A14               	clrf	(___xxtofl@val+2)^0,c
  3971  001C06  6A15               	clrf	(___xxtofl@val+3)^0,c
  3972  001C08  0E01               	movlw	1
  3973  001C0A  EC61  F006         	call	___xxtofl
  3974  001C0E  C012  F020         	movff	?___xxtofl,___fldiv@b
  3975  001C12  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  3976  001C16  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  3977  001C1A  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  3978  001C1E  EC08  F003         	call	___fldiv	;wreg free
  3979  001C22  C020  F039         	movff	?___fldiv,___fltol@f1
  3980  001C26  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  3981  001C2A  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  3982  001C2E  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  3983  001C32  EC68  F00B         	call	___fltol	;wreg free
  3984  001C36  C039  F0F8         	movff	?___fltol,rotateObj@totStep
  3985  001C3A  C03A  F0F9         	movff	?___fltol+1,rotateObj@totStep+1
  3986  001C3E                     
  3987                           ;motors.c: 557:     for(i = 0; i < totStep; i++){
  3988  001C3E  0E00               	movlw	0
  3989  001C40  0100               	movlb	0	; () banked
  3990  001C42  6FFA               	movwf	rotateObj@i& (0+255),b
  3991  001C44  EF39  F00E         	goto	l3711
  3992  001C48                     l3705:
  3993  001C48  FFFF               	dw	65535	; assembler added errata NOP
  3994                           
  3995                           ; BSR set to: 0
  3996                           ;motors.c: 559:         LATD &= 0xC3;
  3997  001C4A  0EC3               	movlw	195
  3998  001C4C  168C               	andwf	140,f,c	;volatile
  3999  001C4E                     
  4000                           ; BSR set to: 0
  4001                           ;motors.c: 561:         LATD |= rotSequence[i%4] << 2;
  4002  001C4E  51FA               	movf	rotateObj@i& (0+255),w,b
  4003  001C50  0B03               	andlw	3
  4004  001C52  6FF4               	movwf	??_rotateObj& (0+255),b
  4005  001C54  6BF5               	clrf	(??_rotateObj+1)& (0+255),b
  4006  001C56  0E80               	movlw	low rotateObj@rotSequence
  4007  001C58  25F4               	addwf	??_rotateObj& (0+255),w,b
  4008  001C5A  6ED9               	movwf	fsr2l,c
  4009  001C5C  0E00               	movlw	high rotateObj@rotSequence
  4010  001C5E  21F5               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4011  001C60  6EDA               	movwf	fsr2h,c
  4012  001C62  50DF               	movf	indf2,w,c
  4013  001C64  6FF6               	movwf	(??_rotateObj+2)& (0+255),b
  4014  001C66  90D8               	bcf	status,0,c
  4015  001C68  37F6               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4016  001C6A  90D8               	bcf	status,0,c
  4017  001C6C  35F6               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4018  001C6E  128C               	iorwf	140,f,c	;volatile
  4019  001C70                     
  4020                           ; BSR set to: 0
  4021                           ;motors.c: 562:     }
  4022  001C70  2BFA               	incf	rotateObj@i& (0+255),f,b
  4023  001C72                     l3711:
  4024  001C72  FFFF               	dw	65535	; assembler added errata NOP
  4025                           
  4026                           ; BSR set to: 0
  4027  001C74  51FA               	movf	rotateObj@i& (0+255),w,b
  4028  001C76  6FF4               	movwf	??_rotateObj& (0+255),b
  4029  001C78  6BF5               	clrf	(??_rotateObj+1)& (0+255),b
  4030  001C7A  51F8               	movf	rotateObj@totStep& (0+255),w,b
  4031  001C7C  5DF4               	subwf	??_rotateObj& (0+255),w,b
  4032  001C7E  51F5               	movf	(??_rotateObj+1)& (0+255),w,b
  4033  001C80  0A80               	xorlw	128
  4034  001C82  6FF6               	movwf	(??_rotateObj+2)& (0+255),b
  4035  001C84  51F9               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4036  001C86  0A80               	xorlw	128
  4037  001C88  59F6               	subwfb	(??_rotateObj+2)& (0+255),w,b
  4038  001C8A  A0D8               	btfss	status,0,c
  4039  001C8C  EF4A  F00E         	goto	u2931
  4040  001C90  EF4D  F00E         	goto	u2930
  4041  001C94                     u2931:
  4042  001C94  FFFF               	dw	65535	; assembler added errata NOP
  4043  001C96  EF24  F00E         	goto	l3705
  4044  001C9A                     u2930:
  4045  001C9A  FFFF               	dw	65535	; assembler added errata NOP
  4046  001C9C                     
  4047                           ; BSR set to: 0
  4048  001C9C  0012               	return		;funcret
  4049  001C9E  FFFF               	dw	65535	; errata NOP
  4050  001CA0                     __end_of_rotateObj:
  4051                           	callstack 0
  4052                           
  4053 ;; *************** function ___xxtofl *****************
  4054 ;; Defined at:
  4055 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4056 ;; Parameters:    Size  Location     Type
  4057 ;;  sign            1    wreg     unsigned char 
  4058 ;;  val             4   17[COMRAM] long 
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;  sign            1   25[COMRAM] unsigned char 
  4061 ;;  arg             4   27[COMRAM] unsigned long 
  4062 ;;  exp             1   26[COMRAM] unsigned char 
  4063 ;; Return value:  Size  Location     Type
  4064 ;;                  4   17[COMRAM] unsigned char 
  4065 ;; Registers used:
  4066 ;;		wreg, status,2, status,0
  4067 ;; Tracked objects:
  4068 ;;		On entry : 0/0
  4069 ;;		On exit  : 0/0
  4070 ;;		Unchanged: 0/0
  4071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4072 ;;      Params:         4       0       0       0       0       0       0
  4073 ;;      Locals:         6       0       0       0       0       0       0
  4074 ;;      Temps:          4       0       0       0       0       0       0
  4075 ;;      Totals:        14       0       0       0       0       0       0
  4076 ;;Total ram usage:       14 bytes
  4077 ;; Hardware stack levels used:    1
  4078 ;; Hardware stack levels required when called:    4
  4079 ;; This function calls:
  4080 ;;		Nothing
  4081 ;; This function is called by:
  4082 ;;		_rotateObj
  4083 ;; This function uses a non-reentrant model
  4084 ;;
  4085                           
  4086                           	psect	text23
  4087  000CC2                     __ptext23:
  4088                           	callstack 0
  4089  000CC2                     ___xxtofl:
  4090                           	callstack 0
  4091  000CC2  FFFF               	dw	65535	; assembler added errata NOP
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;incstack = 0
  4095                           ;___xxtofl@sign stored from wreg
  4096  000CC4  6E1A               	movwf	___xxtofl@sign^0,c
  4097  000CC6  501A               	movf	___xxtofl@sign^0,w,c
  4098  000CC8  B4D8               	btfsc	status,2,c
  4099  000CCA  EF69  F006         	goto	u2621
  4100  000CCE  EF6C  F006         	goto	u2620
  4101  000CD2                     u2621:
  4102  000CD2  FFFF               	dw	65535	; assembler added errata NOP
  4103  000CD4  EF91  F006         	goto	l1221
  4104  000CD8                     u2620:
  4105  000CD8  FFFF               	dw	65535	; assembler added errata NOP
  4106  000CDA  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4107  000CDC  EF75  F006         	goto	u2630
  4108  000CE0  EF72  F006         	goto	u2631
  4109  000CE4                     u2631:
  4110  000CE4  FFFF               	dw	65535	; assembler added errata NOP
  4111  000CE6  EF91  F006         	goto	l1221
  4112  000CEA                     u2630:
  4113  000CEA  FFFF               	dw	65535	; assembler added errata NOP
  4114  000CEC  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4115  000CF0  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4116  000CF4  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4117  000CF8  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4118  000CFC  1E16               	comf	??___xxtofl^0,f,c
  4119  000CFE  1E17               	comf	(??___xxtofl+1)^0,f,c
  4120  000D00  1E18               	comf	(??___xxtofl+2)^0,f,c
  4121  000D02  1E19               	comf	(??___xxtofl+3)^0,f,c
  4122  000D04  2A16               	incf	??___xxtofl^0,f,c
  4123  000D06  0E00               	movlw	0
  4124  000D08  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4125  000D0A  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4126  000D0C  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4127  000D0E  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4128  000D12  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4129  000D16  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4130  000D1A  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4131  000D1E  EF9A  F006         	goto	l3523
  4132  000D22                     l1221:
  4133  000D22  FFFF               	dw	65535	; assembler added errata NOP
  4134  000D24  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4135  000D28  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4136  000D2C  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4137  000D30  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4138  000D34                     l3523:
  4139  000D34  FFFF               	dw	65535	; assembler added errata NOP
  4140  000D36  5012               	movf	___xxtofl@val^0,w,c
  4141  000D38  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4142  000D3A  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4143  000D3C  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4144  000D3E  A4D8               	btfss	status,2,c
  4145  000D40  EFA4  F006         	goto	u2641
  4146  000D44  EFA7  F006         	goto	u2640
  4147  000D48                     u2641:
  4148  000D48  FFFF               	dw	65535	; assembler added errata NOP
  4149  000D4A  EFB2  F006         	goto	l3529
  4150  000D4E                     u2640:
  4151  000D4E  FFFF               	dw	65535	; assembler added errata NOP
  4152  000D50  0E00               	movlw	0
  4153  000D52  6E12               	movwf	?___xxtofl^0,c
  4154  000D54  0E00               	movlw	0
  4155  000D56  6E13               	movwf	(?___xxtofl+1)^0,c
  4156  000D58  0E00               	movlw	0
  4157  000D5A  6E14               	movwf	(?___xxtofl+2)^0,c
  4158  000D5C  0E00               	movlw	0
  4159  000D5E  6E15               	movwf	(?___xxtofl+3)^0,c
  4160  000D60  EF5A  F007         	goto	l1224
  4161  000D64                     l3529:
  4162  000D64  FFFF               	dw	65535	; assembler added errata NOP
  4163  000D66  0E96               	movlw	150
  4164  000D68  6E1B               	movwf	___xxtofl@exp^0,c
  4165  000D6A  EFBE  F006         	goto	l3533
  4166  000D6E                     l3531:
  4167  000D6E  FFFF               	dw	65535	; assembler added errata NOP
  4168  000D70  2A1B               	incf	___xxtofl@exp^0,f,c
  4169  000D72  90D8               	bcf	status,0,c
  4170  000D74  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4171  000D76  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4172  000D78  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4173  000D7A  321C               	rrcf	___xxtofl@arg^0,f,c
  4174  000D7C                     l3533:
  4175  000D7C  FFFF               	dw	65535	; assembler added errata NOP
  4176  000D7E  0E00               	movlw	0
  4177  000D80  141C               	andwf	___xxtofl@arg^0,w,c
  4178  000D82  6E16               	movwf	??___xxtofl^0,c
  4179  000D84  0E00               	movlw	0
  4180  000D86  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4181  000D88  6E17               	movwf	(??___xxtofl+1)^0,c
  4182  000D8A  0E00               	movlw	0
  4183  000D8C  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4184  000D8E  6E18               	movwf	(??___xxtofl+2)^0,c
  4185  000D90  0EFE               	movlw	254
  4186  000D92  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4187  000D94  6E19               	movwf	(??___xxtofl+3)^0,c
  4188  000D96  5016               	movf	??___xxtofl^0,w,c
  4189  000D98  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4190  000D9A  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4191  000D9C  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4192  000D9E  A4D8               	btfss	status,2,c
  4193  000DA0  EFD4  F006         	goto	u2651
  4194  000DA4  EFD7  F006         	goto	u2650
  4195  000DA8                     u2651:
  4196  000DA8  FFFF               	dw	65535	; assembler added errata NOP
  4197  000DAA  EFB7  F006         	goto	l3531
  4198  000DAE                     u2650:
  4199  000DAE  FFFF               	dw	65535	; assembler added errata NOP
  4200  000DB0  EFE7  F006         	goto	l1228
  4201  000DB4                     l3535:
  4202  000DB4  FFFF               	dw	65535	; assembler added errata NOP
  4203  000DB6  2A1B               	incf	___xxtofl@exp^0,f,c
  4204  000DB8  0E01               	movlw	1
  4205  000DBA  261C               	addwf	___xxtofl@arg^0,f,c
  4206  000DBC  0E00               	movlw	0
  4207  000DBE  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4208  000DC0  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4209  000DC2  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4210  000DC4  90D8               	bcf	status,0,c
  4211  000DC6  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4212  000DC8  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4213  000DCA  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4214  000DCC  321C               	rrcf	___xxtofl@arg^0,f,c
  4215  000DCE                     l1228:
  4216  000DCE  FFFF               	dw	65535	; assembler added errata NOP
  4217  000DD0  0E00               	movlw	0
  4218  000DD2  141C               	andwf	___xxtofl@arg^0,w,c
  4219  000DD4  6E16               	movwf	??___xxtofl^0,c
  4220  000DD6  0E00               	movlw	0
  4221  000DD8  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4222  000DDA  6E17               	movwf	(??___xxtofl+1)^0,c
  4223  000DDC  0E00               	movlw	0
  4224  000DDE  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4225  000DE0  6E18               	movwf	(??___xxtofl+2)^0,c
  4226  000DE2  0EFF               	movlw	255
  4227  000DE4  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4228  000DE6  6E19               	movwf	(??___xxtofl+3)^0,c
  4229  000DE8  5016               	movf	??___xxtofl^0,w,c
  4230  000DEA  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4231  000DEC  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4232  000DEE  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4233  000DF0  A4D8               	btfss	status,2,c
  4234  000DF2  EFFD  F006         	goto	u2661
  4235  000DF6  EF00  F007         	goto	u2660
  4236  000DFA                     u2661:
  4237  000DFA  FFFF               	dw	65535	; assembler added errata NOP
  4238  000DFC  EFDA  F006         	goto	l3535
  4239  000E00                     u2660:
  4240  000E00  FFFF               	dw	65535	; assembler added errata NOP
  4241  000E02  EF0A  F007         	goto	l3543
  4242  000E06                     l3541:
  4243  000E06  FFFF               	dw	65535	; assembler added errata NOP
  4244  000E08  061B               	decf	___xxtofl@exp^0,f,c
  4245  000E0A  90D8               	bcf	status,0,c
  4246  000E0C  361C               	rlcf	___xxtofl@arg^0,f,c
  4247  000E0E  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4248  000E10  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4249  000E12  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4250  000E14                     l3543:
  4251  000E14  FFFF               	dw	65535	; assembler added errata NOP
  4252  000E16  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4253  000E18  EF10  F007         	goto	u2671
  4254  000E1C  EF13  F007         	goto	u2670
  4255  000E20                     u2671:
  4256  000E20  FFFF               	dw	65535	; assembler added errata NOP
  4257  000E22  EF1D  F007         	goto	l1235
  4258  000E26                     u2670:
  4259  000E26  FFFF               	dw	65535	; assembler added errata NOP
  4260  000E28  0E02               	movlw	2
  4261  000E2A  601B               	cpfslt	___xxtofl@exp^0,c
  4262  000E2C  EF1A  F007         	goto	u2681
  4263  000E30  EF1D  F007         	goto	u2680
  4264  000E34                     u2681:
  4265  000E34  FFFF               	dw	65535	; assembler added errata NOP
  4266  000E36  EF03  F007         	goto	l3541
  4267  000E3A                     u2680:
  4268  000E3A                     l1235:
  4269  000E3A  FFFF               	dw	65535	; assembler added errata NOP
  4270  000E3C  B01B               	btfsc	___xxtofl@exp^0,0,c
  4271  000E3E  EF23  F007         	goto	u2691
  4272  000E42  EF26  F007         	goto	u2690
  4273  000E46                     u2691:
  4274  000E46  FFFF               	dw	65535	; assembler added errata NOP
  4275  000E48  EF28  F007         	goto	l3549
  4276  000E4C                     u2690:
  4277  000E4C  FFFF               	dw	65535	; assembler added errata NOP
  4278  000E4E  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4279  000E50                     l3549:
  4280  000E50  FFFF               	dw	65535	; assembler added errata NOP
  4281  000E52  90D8               	bcf	status,0,c
  4282  000E54  321B               	rrcf	___xxtofl@exp^0,f,c
  4283  000E56  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4284  000E5A  6A17               	clrf	(??___xxtofl+1)^0,c
  4285  000E5C  6A18               	clrf	(??___xxtofl+2)^0,c
  4286  000E5E  6A19               	clrf	(??___xxtofl+3)^0,c
  4287  000E60  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4288  000E64  6A18               	clrf	(??___xxtofl+2)^0,c
  4289  000E66  6A17               	clrf	(??___xxtofl+1)^0,c
  4290  000E68  6A16               	clrf	??___xxtofl^0,c
  4291  000E6A  5016               	movf	??___xxtofl^0,w,c
  4292  000E6C  121C               	iorwf	___xxtofl@arg^0,f,c
  4293  000E6E  5017               	movf	(??___xxtofl+1)^0,w,c
  4294  000E70  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4295  000E72  5018               	movf	(??___xxtofl+2)^0,w,c
  4296  000E74  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4297  000E76  5019               	movf	(??___xxtofl+3)^0,w,c
  4298  000E78  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4299  000E7A  501A               	movf	___xxtofl@sign^0,w,c
  4300  000E7C  B4D8               	btfsc	status,2,c
  4301  000E7E  EF43  F007         	goto	u2701
  4302  000E82  EF46  F007         	goto	u2700
  4303  000E86                     u2701:
  4304  000E86  FFFF               	dw	65535	; assembler added errata NOP
  4305  000E88  EF51  F007         	goto	l3559
  4306  000E8C                     u2700:
  4307  000E8C  FFFF               	dw	65535	; assembler added errata NOP
  4308  000E8E  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4309  000E90  EF4F  F007         	goto	u2710
  4310  000E94  EF4C  F007         	goto	u2711
  4311  000E98                     u2711:
  4312  000E98  FFFF               	dw	65535	; assembler added errata NOP
  4313  000E9A  EF51  F007         	goto	l3559
  4314  000E9E                     u2710:
  4315  000E9E  FFFF               	dw	65535	; assembler added errata NOP
  4316  000EA0  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4317  000EA2                     l3559:
  4318  000EA2  FFFF               	dw	65535	; assembler added errata NOP
  4319  000EA4  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4320  000EA8  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4321  000EAC  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4322  000EB0  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  4323  000EB4                     l1224:
  4324  000EB4  FFFF               	dw	65535	; assembler added errata NOP
  4325  000EB6  0012               	return		;funcret
  4326  000EB8  FFFF               	dw	65535	; errata NOP
  4327  000EBA                     __end_of___xxtofl:
  4328                           	callstack 0
  4329                           
  4330 ;; *************** function ___fltol *****************
  4331 ;; Defined at:
  4332 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;  f1              4   56[COMRAM] unsigned char 
  4335 ;; Auto vars:     Size  Location     Type
  4336 ;;  exp1            1   65[COMRAM] unsigned char 
  4337 ;;  sign1           1   64[COMRAM] unsigned char 
  4338 ;; Return value:  Size  Location     Type
  4339 ;;                  4   56[COMRAM] long 
  4340 ;; Registers used:
  4341 ;;		wreg, status,2, status,0
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4347 ;;      Params:         4       0       0       0       0       0       0
  4348 ;;      Locals:         2       0       0       0       0       0       0
  4349 ;;      Temps:          4       0       0       0       0       0       0
  4350 ;;      Totals:        10       0       0       0       0       0       0
  4351 ;;Total ram usage:       10 bytes
  4352 ;; Hardware stack levels used:    1
  4353 ;; Hardware stack levels required when called:    4
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		_rotateObj
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           	psect	text24
  4362  0016D0                     __ptext24:
  4363                           	callstack 0
  4364  0016D0                     ___fltol:
  4365                           	callstack 0
  4366  0016D0  FFFF               	dw	65535	; assembler added errata NOP
  4367  0016D2  343B               	rlcf	(___fltol@f1+2)^0,w,c
  4368  0016D4  343C               	rlcf	(___fltol@f1+3)^0,w,c
  4369  0016D6  6E42               	movwf	___fltol@exp1^0,c
  4370  0016D8  5042               	movf	___fltol@exp1^0,w,c
  4371  0016DA  A4D8               	btfss	status,2,c
  4372  0016DC  EF72  F00B         	goto	u2551
  4373  0016E0  EF75  F00B         	goto	u2550
  4374  0016E4                     u2551:
  4375  0016E4  FFFF               	dw	65535	; assembler added errata NOP
  4376  0016E6  EF81  F00B         	goto	l3479
  4377  0016EA                     u2550:
  4378  0016EA  FFFF               	dw	65535	; assembler added errata NOP
  4379  0016EC                     l3475:
  4380  0016EC  FFFF               	dw	65535	; assembler added errata NOP
  4381  0016EE  0E00               	movlw	0
  4382  0016F0  6E39               	movwf	?___fltol^0,c
  4383  0016F2  0E00               	movlw	0
  4384  0016F4  6E3A               	movwf	(?___fltol+1)^0,c
  4385  0016F6  0E00               	movlw	0
  4386  0016F8  6E3B               	movwf	(?___fltol+2)^0,c
  4387  0016FA  0E00               	movlw	0
  4388  0016FC  6E3C               	movwf	(?___fltol+3)^0,c
  4389  0016FE  EF00  F00C         	goto	l863
  4390  001702                     l3479:
  4391  001702  FFFF               	dw	65535	; assembler added errata NOP
  4392  001704  C039  F03D         	movff	___fltol@f1,??___fltol
  4393  001708  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  4394  00170C  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  4395  001710  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  4396  001714  0E20               	movlw	32
  4397  001716  EF93  F00B         	goto	u2560
  4398  00171A                     u2565:
  4399  00171A  FFFF               	dw	65535	; assembler added errata NOP
  4400  00171C  90D8               	bcf	status,0,c
  4401  00171E  3240               	rrcf	(??___fltol+3)^0,f,c
  4402  001720  323F               	rrcf	(??___fltol+2)^0,f,c
  4403  001722  323E               	rrcf	(??___fltol+1)^0,f,c
  4404  001724  323D               	rrcf	??___fltol^0,f,c
  4405  001726                     u2560:
  4406  001726  FFFF               	dw	65535	; assembler added errata NOP
  4407  001728  2EE8               	decfsz	wreg,f,c
  4408  00172A  EF8D  F00B         	goto	u2565
  4409  00172E  503D               	movf	??___fltol^0,w,c
  4410  001730  6E41               	movwf	___fltol@sign1^0,c
  4411  001732  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  4412  001734  0EFF               	movlw	255
  4413  001736  1639               	andwf	___fltol@f1^0,f,c
  4414  001738  0EFF               	movlw	255
  4415  00173A  163A               	andwf	(___fltol@f1+1)^0,f,c
  4416  00173C  0EFF               	movlw	255
  4417  00173E  163B               	andwf	(___fltol@f1+2)^0,f,c
  4418  001740  0E00               	movlw	0
  4419  001742  163C               	andwf	(___fltol@f1+3)^0,f,c
  4420  001744  0E96               	movlw	150
  4421  001746  5E42               	subwf	___fltol@exp1^0,f,c
  4422  001748  BE42               	btfsc	___fltol@exp1^0,7,c
  4423  00174A  EFAC  F00B         	goto	u2570
  4424  00174E  EFA9  F00B         	goto	u2571
  4425  001752                     u2571:
  4426  001752  FFFF               	dw	65535	; assembler added errata NOP
  4427  001754  EFC6  F00B         	goto	l3499
  4428  001758                     u2570:
  4429  001758  FFFF               	dw	65535	; assembler added errata NOP
  4430  00175A  5042               	movf	___fltol@exp1^0,w,c
  4431  00175C  0A80               	xorlw	128
  4432  00175E  0F97               	addlw	151
  4433  001760  B0D8               	btfsc	status,0,c
  4434  001762  EFB5  F00B         	goto	u2581
  4435  001766  EFB8  F00B         	goto	u2580
  4436  00176A                     u2581:
  4437  00176A  FFFF               	dw	65535	; assembler added errata NOP
  4438  00176C  EFBB  F00B         	goto	l3495
  4439  001770                     u2580:
  4440  001770  FFFF               	dw	65535	; assembler added errata NOP
  4441  001772  EF76  F00B         	goto	l3475
  4442  001776                     l3495:
  4443  001776  FFFF               	dw	65535	; assembler added errata NOP
  4444  001778  90D8               	bcf	status,0,c
  4445  00177A  323C               	rrcf	(___fltol@f1+3)^0,f,c
  4446  00177C  323B               	rrcf	(___fltol@f1+2)^0,f,c
  4447  00177E  323A               	rrcf	(___fltol@f1+1)^0,f,c
  4448  001780  3239               	rrcf	___fltol@f1^0,f,c
  4449  001782  3E42               	incfsz	___fltol@exp1^0,f,c
  4450  001784  EFBB  F00B         	goto	l3495
  4451  001788  EFE4  F00B         	goto	l3509
  4452  00178C                     l3499:
  4453  00178C  FFFF               	dw	65535	; assembler added errata NOP
  4454  00178E  0E1F               	movlw	31
  4455  001790  6442               	cpfsgt	___fltol@exp1^0,c
  4456  001792  EFCD  F00B         	goto	u2591
  4457  001796  EFD0  F00B         	goto	u2590
  4458  00179A                     u2591:
  4459  00179A  FFFF               	dw	65535	; assembler added errata NOP
  4460  00179C  EFDA  F00B         	goto	l3507
  4461  0017A0                     u2590:
  4462  0017A0  FFFF               	dw	65535	; assembler added errata NOP
  4463  0017A2  EF76  F00B         	goto	l3475
  4464  0017A6                     l3505:
  4465  0017A6  FFFF               	dw	65535	; assembler added errata NOP
  4466  0017A8  90D8               	bcf	status,0,c
  4467  0017AA  3639               	rlcf	___fltol@f1^0,f,c
  4468  0017AC  363A               	rlcf	(___fltol@f1+1)^0,f,c
  4469  0017AE  363B               	rlcf	(___fltol@f1+2)^0,f,c
  4470  0017B0  363C               	rlcf	(___fltol@f1+3)^0,f,c
  4471  0017B2  0642               	decf	___fltol@exp1^0,f,c
  4472  0017B4                     l3507:
  4473  0017B4  FFFF               	dw	65535	; assembler added errata NOP
  4474  0017B6  5042               	movf	___fltol@exp1^0,w,c
  4475  0017B8  A4D8               	btfss	status,2,c
  4476  0017BA  EFE1  F00B         	goto	u2601
  4477  0017BE  EFE4  F00B         	goto	u2600
  4478  0017C2                     u2601:
  4479  0017C2  FFFF               	dw	65535	; assembler added errata NOP
  4480  0017C4  EFD3  F00B         	goto	l3505
  4481  0017C8                     u2600:
  4482  0017C8                     l3509:
  4483  0017C8  FFFF               	dw	65535	; assembler added errata NOP
  4484  0017CA  5041               	movf	___fltol@sign1^0,w,c
  4485  0017CC  B4D8               	btfsc	status,2,c
  4486  0017CE  EFEB  F00B         	goto	u2611
  4487  0017D2  EFEE  F00B         	goto	u2610
  4488  0017D6                     u2611:
  4489  0017D6  FFFF               	dw	65535	; assembler added errata NOP
  4490  0017D8  EFF7  F00B         	goto	l3513
  4491  0017DC                     u2610:
  4492  0017DC  FFFF               	dw	65535	; assembler added errata NOP
  4493  0017DE  1E3C               	comf	(___fltol@f1+3)^0,f,c
  4494  0017E0  1E3B               	comf	(___fltol@f1+2)^0,f,c
  4495  0017E2  1E3A               	comf	(___fltol@f1+1)^0,f,c
  4496  0017E4  6C39               	negf	___fltol@f1^0,c
  4497  0017E6  0E00               	movlw	0
  4498  0017E8  223A               	addwfc	(___fltol@f1+1)^0,f,c
  4499  0017EA  223B               	addwfc	(___fltol@f1+2)^0,f,c
  4500  0017EC  223C               	addwfc	(___fltol@f1+3)^0,f,c
  4501  0017EE                     l3513:
  4502  0017EE  FFFF               	dw	65535	; assembler added errata NOP
  4503  0017F0  C039  F039         	movff	___fltol@f1,?___fltol
  4504  0017F4  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  4505  0017F8  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  4506  0017FC  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  4507  001800                     l863:
  4508  001800  FFFF               	dw	65535	; assembler added errata NOP
  4509  001802  0012               	return		;funcret
  4510  001804  FFFF               	dw	65535	; errata NOP
  4511  001806                     __end_of___fltol:
  4512                           	callstack 0
  4513                           
  4514 ;; *************** function ___fldiv *****************
  4515 ;; Defined at:
  4516 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;  b               4   31[COMRAM] long 
  4519 ;;  a               4   35[COMRAM] long 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  grs             4   50[COMRAM] unsigned long 
  4522 ;;  rem             4   43[COMRAM] unsigned long 
  4523 ;;  new_exp         2   48[COMRAM] short 
  4524 ;;  aexp            1   55[COMRAM] unsigned char 
  4525 ;;  bexp            1   54[COMRAM] unsigned char 
  4526 ;;  sign            1   47[COMRAM] unsigned char 
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  4   31[COMRAM] unsigned char 
  4529 ;; Registers used:
  4530 ;;		wreg, status,2, status,0
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4536 ;;      Params:         8       0       0       0       0       0       0
  4537 ;;      Locals:        13       0       0       0       0       0       0
  4538 ;;      Temps:          4       0       0       0       0       0       0
  4539 ;;      Totals:        25       0       0       0       0       0       0
  4540 ;;Total ram usage:       25 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    4
  4543 ;; This function calls:
  4544 ;;		Nothing
  4545 ;; This function is called by:
  4546 ;;		_rotateObj
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           	psect	text25
  4551  000610                     __ptext25:
  4552                           	callstack 0
  4553  000610                     ___fldiv:
  4554                           	callstack 0
  4555  000610  FFFF               	dw	65535	; assembler added errata NOP
  4556  000612  5023               	movf	(___fldiv@b+3)^0,w,c
  4557  000614  0B80               	andlw	128
  4558  000616  6E30               	movwf	___fldiv@sign^0,c
  4559  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  4560  00061A  2423               	addwf	(___fldiv@b+3)^0,w,c
  4561  00061C  6E37               	movwf	___fldiv@bexp^0,c
  4562  00061E  AE22               	btfss	(___fldiv@b+2)^0,7,c
  4563  000620  EF14  F003         	goto	u2321
  4564  000624  EF17  F003         	goto	u2320
  4565  000628                     u2321:
  4566  000628  FFFF               	dw	65535	; assembler added errata NOP
  4567  00062A  EF19  F003         	goto	l3341
  4568  00062E                     u2320:
  4569  00062E  FFFF               	dw	65535	; assembler added errata NOP
  4570  000630  8037               	bsf	___fldiv@bexp^0,0,c
  4571  000632                     l3341:
  4572  000632  FFFF               	dw	65535	; assembler added errata NOP
  4573  000634  5037               	movf	___fldiv@bexp^0,w,c
  4574  000636  B4D8               	btfsc	status,2,c
  4575  000638  EF20  F003         	goto	u2331
  4576  00063C  EF23  F003         	goto	u2330
  4577  000640                     u2331:
  4578  000640  FFFF               	dw	65535	; assembler added errata NOP
  4579  000642  EF3C  F003         	goto	l3351
  4580  000646                     u2330:
  4581  000646  FFFF               	dw	65535	; assembler added errata NOP
  4582  000648  2837               	incf	___fldiv@bexp^0,w,c
  4583  00064A  A4D8               	btfss	status,2,c
  4584  00064C  EF2A  F003         	goto	u2341
  4585  000650  EF2D  F003         	goto	u2340
  4586  000654                     u2341:
  4587  000654  FFFF               	dw	65535	; assembler added errata NOP
  4588  000656  EF36  F003         	goto	l3347
  4589  00065A                     u2340:
  4590  00065A  FFFF               	dw	65535	; assembler added errata NOP
  4591  00065C  0E00               	movlw	0
  4592  00065E  6E20               	movwf	___fldiv@b^0,c
  4593  000660  0E00               	movlw	0
  4594  000662  6E21               	movwf	(___fldiv@b+1)^0,c
  4595  000664  0E00               	movlw	0
  4596  000666  6E22               	movwf	(___fldiv@b+2)^0,c
  4597  000668  0E00               	movlw	0
  4598  00066A  6E23               	movwf	(___fldiv@b+3)^0,c
  4599  00066C                     l3347:
  4600  00066C  FFFF               	dw	65535	; assembler added errata NOP
  4601  00066E  8E22               	bsf	(___fldiv@b+2)^0,7,c
  4602  000670  0E00               	movlw	0
  4603  000672  6E23               	movwf	(___fldiv@b+3)^0,c
  4604  000674  EF45  F003         	goto	l3353
  4605  000678                     l3351:
  4606  000678  FFFF               	dw	65535	; assembler added errata NOP
  4607  00067A  0E00               	movlw	0
  4608  00067C  6E20               	movwf	___fldiv@b^0,c
  4609  00067E  0E00               	movlw	0
  4610  000680  6E21               	movwf	(___fldiv@b+1)^0,c
  4611  000682  0E00               	movlw	0
  4612  000684  6E22               	movwf	(___fldiv@b+2)^0,c
  4613  000686  0E00               	movlw	0
  4614  000688  6E23               	movwf	(___fldiv@b+3)^0,c
  4615  00068A                     l3353:
  4616  00068A  FFFF               	dw	65535	; assembler added errata NOP
  4617  00068C  5027               	movf	(___fldiv@a+3)^0,w,c
  4618  00068E  0B80               	andlw	128
  4619  000690  1A30               	xorwf	___fldiv@sign^0,f,c
  4620  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  4621  000694  2427               	addwf	(___fldiv@a+3)^0,w,c
  4622  000696  6E38               	movwf	___fldiv@aexp^0,c
  4623  000698  AE26               	btfss	(___fldiv@a+2)^0,7,c
  4624  00069A  EF51  F003         	goto	u2351
  4625  00069E  EF54  F003         	goto	u2350
  4626  0006A2                     u2351:
  4627  0006A2  FFFF               	dw	65535	; assembler added errata NOP
  4628  0006A4  EF56  F003         	goto	l3361
  4629  0006A8                     u2350:
  4630  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  4631  0006AA  8038               	bsf	___fldiv@aexp^0,0,c
  4632  0006AC                     l3361:
  4633  0006AC  FFFF               	dw	65535	; assembler added errata NOP
  4634  0006AE  5038               	movf	___fldiv@aexp^0,w,c
  4635  0006B0  B4D8               	btfsc	status,2,c
  4636  0006B2  EF5D  F003         	goto	u2361
  4637  0006B6  EF60  F003         	goto	u2360
  4638  0006BA                     u2361:
  4639  0006BA  FFFF               	dw	65535	; assembler added errata NOP
  4640  0006BC  EF79  F003         	goto	l3371
  4641  0006C0                     u2360:
  4642  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  4643  0006C2  2838               	incf	___fldiv@aexp^0,w,c
  4644  0006C4  A4D8               	btfss	status,2,c
  4645  0006C6  EF67  F003         	goto	u2371
  4646  0006CA  EF6A  F003         	goto	u2370
  4647  0006CE                     u2371:
  4648  0006CE  FFFF               	dw	65535	; assembler added errata NOP
  4649  0006D0  EF73  F003         	goto	l3367
  4650  0006D4                     u2370:
  4651  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  4652  0006D6  0E00               	movlw	0
  4653  0006D8  6E24               	movwf	___fldiv@a^0,c
  4654  0006DA  0E00               	movlw	0
  4655  0006DC  6E25               	movwf	(___fldiv@a+1)^0,c
  4656  0006DE  0E00               	movlw	0
  4657  0006E0  6E26               	movwf	(___fldiv@a+2)^0,c
  4658  0006E2  0E00               	movlw	0
  4659  0006E4  6E27               	movwf	(___fldiv@a+3)^0,c
  4660  0006E6                     l3367:
  4661  0006E6  FFFF               	dw	65535	; assembler added errata NOP
  4662  0006E8  8E26               	bsf	(___fldiv@a+2)^0,7,c
  4663  0006EA  0E00               	movlw	0
  4664  0006EC  6E27               	movwf	(___fldiv@a+3)^0,c
  4665  0006EE  EF82  F003         	goto	l3373
  4666  0006F2                     l3371:
  4667  0006F2  FFFF               	dw	65535	; assembler added errata NOP
  4668  0006F4  0E00               	movlw	0
  4669  0006F6  6E24               	movwf	___fldiv@a^0,c
  4670  0006F8  0E00               	movlw	0
  4671  0006FA  6E25               	movwf	(___fldiv@a+1)^0,c
  4672  0006FC  0E00               	movlw	0
  4673  0006FE  6E26               	movwf	(___fldiv@a+2)^0,c
  4674  000700  0E00               	movlw	0
  4675  000702  6E27               	movwf	(___fldiv@a+3)^0,c
  4676  000704                     l3373:
  4677  000704  FFFF               	dw	65535	; assembler added errata NOP
  4678  000706  5024               	movf	___fldiv@a^0,w,c
  4679  000708  1025               	iorwf	(___fldiv@a+1)^0,w,c
  4680  00070A  1026               	iorwf	(___fldiv@a+2)^0,w,c
  4681  00070C  1027               	iorwf	(___fldiv@a+3)^0,w,c
  4682  00070E  A4D8               	btfss	status,2,c
  4683  000710  EF8C  F003         	goto	u2381
  4684  000714  EF8F  F003         	goto	u2380
  4685  000718                     u2381:
  4686  000718  FFFF               	dw	65535	; assembler added errata NOP
  4687  00071A  EFA9  F003         	goto	l3385
  4688  00071E                     u2380:
  4689  00071E  FFFF               	dw	65535	; assembler added errata NOP
  4690  000720  0E00               	movlw	0
  4691  000722  6E20               	movwf	___fldiv@b^0,c
  4692  000724  0E00               	movlw	0
  4693  000726  6E21               	movwf	(___fldiv@b+1)^0,c
  4694  000728  0E00               	movlw	0
  4695  00072A  6E22               	movwf	(___fldiv@b+2)^0,c
  4696  00072C  0E00               	movlw	0
  4697  00072E  6E23               	movwf	(___fldiv@b+3)^0,c
  4698  000730  0E80               	movlw	128
  4699  000732  1222               	iorwf	(___fldiv@b+2)^0,f,c
  4700  000734  0E7F               	movlw	127
  4701  000736  1223               	iorwf	(___fldiv@b+3)^0,f,c
  4702  000738                     l3379:
  4703  000738  FFFF               	dw	65535	; assembler added errata NOP
  4704  00073A  5030               	movf	___fldiv@sign^0,w,c
  4705  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  4706  00073E  C020  F020         	movff	___fldiv@b,?___fldiv
  4707  000742  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  4708  000746  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  4709  00074A  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  4710  00074E  EF1E  F005         	goto	l1148
  4711  000752                     l3385:
  4712  000752  FFFF               	dw	65535	; assembler added errata NOP
  4713  000754  5037               	movf	___fldiv@bexp^0,w,c
  4714  000756  A4D8               	btfss	status,2,c
  4715  000758  EFB0  F003         	goto	u2391
  4716  00075C  EFB3  F003         	goto	u2390
  4717  000760                     u2391:
  4718  000760  FFFF               	dw	65535	; assembler added errata NOP
  4719  000762  EFBE  F003         	goto	l3393
  4720  000766                     u2390:
  4721  000766  FFFF               	dw	65535	; assembler added errata NOP
  4722  000768  0E00               	movlw	0
  4723  00076A  6E20               	movwf	?___fldiv^0,c
  4724  00076C  0E00               	movlw	0
  4725  00076E  6E21               	movwf	(?___fldiv+1)^0,c
  4726  000770  0E00               	movlw	0
  4727  000772  6E22               	movwf	(?___fldiv+2)^0,c
  4728  000774  0E00               	movlw	0
  4729  000776  6E23               	movwf	(?___fldiv+3)^0,c
  4730  000778  EF1E  F005         	goto	l1148
  4731  00077C                     l3393:
  4732  00077C  FFFF               	dw	65535	; assembler added errata NOP
  4733  00077E  5038               	movf	___fldiv@aexp^0,w,c
  4734  000780  C037  F028         	movff	___fldiv@bexp,??___fldiv
  4735  000784  6A29               	clrf	(??___fldiv+1)^0,c
  4736  000786  5E28               	subwf	??___fldiv^0,f,c
  4737  000788  0E00               	movlw	0
  4738  00078A  5A29               	subwfb	(??___fldiv+1)^0,f,c
  4739  00078C  0E7F               	movlw	127
  4740  00078E  2428               	addwf	??___fldiv^0,w,c
  4741  000790  6E31               	movwf	___fldiv@new_exp^0,c
  4742  000792  0E00               	movlw	0
  4743  000794  2029               	addwfc	(??___fldiv+1)^0,w,c
  4744  000796  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  4745  000798  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  4746  00079C  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  4747  0007A0  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  4748  0007A4  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  4749  0007A8  0E00               	movlw	0
  4750  0007AA  6E20               	movwf	___fldiv@b^0,c
  4751  0007AC  0E00               	movlw	0
  4752  0007AE  6E21               	movwf	(___fldiv@b+1)^0,c
  4753  0007B0  0E00               	movlw	0
  4754  0007B2  6E22               	movwf	(___fldiv@b+2)^0,c
  4755  0007B4  0E00               	movlw	0
  4756  0007B6  6E23               	movwf	(___fldiv@b+3)^0,c
  4757  0007B8  0E00               	movlw	0
  4758  0007BA  6E33               	movwf	___fldiv@grs^0,c
  4759  0007BC  0E00               	movlw	0
  4760  0007BE  6E34               	movwf	(___fldiv@grs+1)^0,c
  4761  0007C0  0E00               	movlw	0
  4762  0007C2  6E35               	movwf	(___fldiv@grs+2)^0,c
  4763  0007C4  0E00               	movlw	0
  4764  0007C6  6E36               	movwf	(___fldiv@grs+3)^0,c
  4765  0007C8  0E00               	movlw	0
  4766  0007CA  6E38               	movwf	___fldiv@aexp^0,c
  4767  0007CC  EF2A  F004         	goto	l1150
  4768  0007D0                     l3403:
  4769  0007D0  FFFF               	dw	65535	; assembler added errata NOP
  4770  0007D2  5038               	movf	___fldiv@aexp^0,w,c
  4771  0007D4  B4D8               	btfsc	status,2,c
  4772  0007D6  EFEF  F003         	goto	u2401
  4773  0007DA  EFF2  F003         	goto	u2400
  4774  0007DE                     u2401:
  4775  0007DE  FFFF               	dw	65535	; assembler added errata NOP
  4776  0007E0  EF0D  F004         	goto	l3411
  4777  0007E4                     u2400:
  4778  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  4779  0007E6  90D8               	bcf	status,0,c
  4780  0007E8  362C               	rlcf	___fldiv@rem^0,f,c
  4781  0007EA  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  4782  0007EC  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  4783  0007EE  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  4784  0007F0  90D8               	bcf	status,0,c
  4785  0007F2  3620               	rlcf	___fldiv@b^0,f,c
  4786  0007F4  3621               	rlcf	(___fldiv@b+1)^0,f,c
  4787  0007F6  3622               	rlcf	(___fldiv@b+2)^0,f,c
  4788  0007F8  3623               	rlcf	(___fldiv@b+3)^0,f,c
  4789  0007FA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  4790  0007FC  EF02  F004         	goto	u2411
  4791  000800  EF05  F004         	goto	u2410
  4792  000804                     u2411:
  4793  000804  FFFF               	dw	65535	; assembler added errata NOP
  4794  000806  EF07  F004         	goto	l1153
  4795  00080A                     u2410:
  4796  00080A  FFFF               	dw	65535	; assembler added errata NOP
  4797  00080C  8020               	bsf	___fldiv@b^0,0,c
  4798  00080E                     l1153:
  4799  00080E  FFFF               	dw	65535	; assembler added errata NOP
  4800  000810  90D8               	bcf	status,0,c
  4801  000812  3633               	rlcf	___fldiv@grs^0,f,c
  4802  000814  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  4803  000816  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  4804  000818  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  4805  00081A                     l3411:
  4806  00081A  FFFF               	dw	65535	; assembler added errata NOP
  4807  00081C  5024               	movf	___fldiv@a^0,w,c
  4808  00081E  5C2C               	subwf	___fldiv@rem^0,w,c
  4809  000820  5025               	movf	(___fldiv@a+1)^0,w,c
  4810  000822  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  4811  000824  5026               	movf	(___fldiv@a+2)^0,w,c
  4812  000826  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  4813  000828  5027               	movf	(___fldiv@a+3)^0,w,c
  4814  00082A  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  4815  00082C  A0D8               	btfss	status,0,c
  4816  00082E  EF1B  F004         	goto	u2421
  4817  000832  EF1E  F004         	goto	u2420
  4818  000836                     u2421:
  4819  000836  FFFF               	dw	65535	; assembler added errata NOP
  4820  000838  EF28  F004         	goto	l3417
  4821  00083C                     u2420:
  4822  00083C  FFFF               	dw	65535	; assembler added errata NOP
  4823  00083E  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  4824  000840  5024               	movf	___fldiv@a^0,w,c
  4825  000842  5E2C               	subwf	___fldiv@rem^0,f,c
  4826  000844  5025               	movf	(___fldiv@a+1)^0,w,c
  4827  000846  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  4828  000848  5026               	movf	(___fldiv@a+2)^0,w,c
  4829  00084A  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  4830  00084C  5027               	movf	(___fldiv@a+3)^0,w,c
  4831  00084E  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  4832  000850                     l3417:
  4833  000850  FFFF               	dw	65535	; assembler added errata NOP
  4834  000852  2A38               	incf	___fldiv@aexp^0,f,c
  4835  000854                     l1150:
  4836  000854  FFFF               	dw	65535	; assembler added errata NOP
  4837  000856  0E19               	movlw	25
  4838  000858  6438               	cpfsgt	___fldiv@aexp^0,c
  4839  00085A  EF31  F004         	goto	u2431
  4840  00085E  EF34  F004         	goto	u2430
  4841  000862                     u2431:
  4842  000862  FFFF               	dw	65535	; assembler added errata NOP
  4843  000864  EFE8  F003         	goto	l3403
  4844  000868                     u2430:
  4845  000868  FFFF               	dw	65535	; assembler added errata NOP
  4846  00086A  502C               	movf	___fldiv@rem^0,w,c
  4847  00086C  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  4848  00086E  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  4849  000870  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  4850  000872  B4D8               	btfsc	status,2,c
  4851  000874  EF3E  F004         	goto	u2441
  4852  000878  EF41  F004         	goto	u2440
  4853  00087C                     u2441:
  4854  00087C  FFFF               	dw	65535	; assembler added errata NOP
  4855  00087E  EF5E  F004         	goto	l3429
  4856  000882                     u2440:
  4857  000882  FFFF               	dw	65535	; assembler added errata NOP
  4858  000884  8033               	bsf	___fldiv@grs^0,0,c
  4859  000886  EF5E  F004         	goto	l3429
  4860  00088A                     l3423:
  4861  00088A  FFFF               	dw	65535	; assembler added errata NOP
  4862  00088C  90D8               	bcf	status,0,c
  4863  00088E  3620               	rlcf	___fldiv@b^0,f,c
  4864  000890  3621               	rlcf	(___fldiv@b+1)^0,f,c
  4865  000892  3622               	rlcf	(___fldiv@b+2)^0,f,c
  4866  000894  3623               	rlcf	(___fldiv@b+3)^0,f,c
  4867  000896  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  4868  000898  EF50  F004         	goto	u2451
  4869  00089C  EF53  F004         	goto	u2450
  4870  0008A0                     u2451:
  4871  0008A0  FFFF               	dw	65535	; assembler added errata NOP
  4872  0008A2  EF55  F004         	goto	l1159
  4873  0008A6                     u2450:
  4874  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  4875  0008A8  8020               	bsf	___fldiv@b^0,0,c
  4876  0008AA                     l1159:
  4877  0008AA  FFFF               	dw	65535	; assembler added errata NOP
  4878  0008AC  90D8               	bcf	status,0,c
  4879  0008AE  3633               	rlcf	___fldiv@grs^0,f,c
  4880  0008B0  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  4881  0008B2  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  4882  0008B4  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  4883  0008B6  0631               	decf	___fldiv@new_exp^0,f,c
  4884  0008B8  A0D8               	btfss	status,0,c
  4885  0008BA  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  4886  0008BC                     l3429:
  4887  0008BC  FFFF               	dw	65535	; assembler added errata NOP
  4888  0008BE  AE22               	btfss	(___fldiv@b+2)^0,7,c
  4889  0008C0  EF64  F004         	goto	u2461
  4890  0008C4  EF67  F004         	goto	u2460
  4891  0008C8                     u2461:
  4892  0008C8  FFFF               	dw	65535	; assembler added errata NOP
  4893  0008CA  EF45  F004         	goto	l3423
  4894  0008CE                     u2460:
  4895  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  4896  0008D0  0E00               	movlw	0
  4897  0008D2  6E38               	movwf	___fldiv@aexp^0,c
  4898  0008D4  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  4899  0008D6  EF6F  F004         	goto	u2471
  4900  0008DA  EF72  F004         	goto	u2470
  4901  0008DE                     u2471:
  4902  0008DE  FFFF               	dw	65535	; assembler added errata NOP
  4903  0008E0  EF9D  F004         	goto	l1161
  4904  0008E4                     u2470:
  4905  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  4906  0008E6  0EFF               	movlw	255
  4907  0008E8  1433               	andwf	___fldiv@grs^0,w,c
  4908  0008EA  6E28               	movwf	??___fldiv^0,c
  4909  0008EC  0EFF               	movlw	255
  4910  0008EE  1434               	andwf	(___fldiv@grs+1)^0,w,c
  4911  0008F0  6E29               	movwf	(??___fldiv+1)^0,c
  4912  0008F2  0EFF               	movlw	255
  4913  0008F4  1435               	andwf	(___fldiv@grs+2)^0,w,c
  4914  0008F6  6E2A               	movwf	(??___fldiv+2)^0,c
  4915  0008F8  0E7F               	movlw	127
  4916  0008FA  1436               	andwf	(___fldiv@grs+3)^0,w,c
  4917  0008FC  6E2B               	movwf	(??___fldiv+3)^0,c
  4918  0008FE  5028               	movf	??___fldiv^0,w,c
  4919  000900  1029               	iorwf	(??___fldiv+1)^0,w,c
  4920  000902  102A               	iorwf	(??___fldiv+2)^0,w,c
  4921  000904  102B               	iorwf	(??___fldiv+3)^0,w,c
  4922  000906  B4D8               	btfsc	status,2,c
  4923  000908  EF88  F004         	goto	u2481
  4924  00090C  EF8B  F004         	goto	u2480
  4925  000910                     u2481:
  4926  000910  FFFF               	dw	65535	; assembler added errata NOP
  4927  000912  EF91  F004         	goto	l1162
  4928  000916                     u2480:
  4929  000916  FFFF               	dw	65535	; assembler added errata NOP
  4930  000918                     l3437:
  4931  000918  FFFF               	dw	65535	; assembler added errata NOP
  4932  00091A  0E01               	movlw	1
  4933  00091C  6E38               	movwf	___fldiv@aexp^0,c
  4934  00091E  EF9D  F004         	goto	l1161
  4935  000922                     l1162:
  4936  000922  FFFF               	dw	65535	; assembler added errata NOP
  4937  000924  A020               	btfss	___fldiv@b^0,0,c
  4938  000926  EF97  F004         	goto	u2491
  4939  00092A  EF9A  F004         	goto	u2490
  4940  00092E                     u2491:
  4941  00092E  FFFF               	dw	65535	; assembler added errata NOP
  4942  000930  EF9D  F004         	goto	l1161
  4943  000934                     u2490:
  4944  000934  FFFF               	dw	65535	; assembler added errata NOP
  4945  000936  EF8C  F004         	goto	l3437
  4946  00093A                     l1161:
  4947  00093A  FFFF               	dw	65535	; assembler added errata NOP
  4948  00093C  5038               	movf	___fldiv@aexp^0,w,c
  4949  00093E  B4D8               	btfsc	status,2,c
  4950  000940  EFA4  F004         	goto	u2501
  4951  000944  EFA7  F004         	goto	u2500
  4952  000948                     u2501:
  4953  000948  FFFF               	dw	65535	; assembler added errata NOP
  4954  00094A  EFCE  F004         	goto	l3449
  4955  00094E                     u2500:
  4956  00094E  FFFF               	dw	65535	; assembler added errata NOP
  4957  000950  0E01               	movlw	1
  4958  000952  2620               	addwf	___fldiv@b^0,f,c
  4959  000954  0E00               	movlw	0
  4960  000956  2221               	addwfc	(___fldiv@b+1)^0,f,c
  4961  000958  2222               	addwfc	(___fldiv@b+2)^0,f,c
  4962  00095A  2223               	addwfc	(___fldiv@b+3)^0,f,c
  4963  00095C  A023               	btfss	(___fldiv@b+3)^0,0,c
  4964  00095E  EFB3  F004         	goto	u2511
  4965  000962  EFB6  F004         	goto	u2510
  4966  000966                     u2511:
  4967  000966  FFFF               	dw	65535	; assembler added errata NOP
  4968  000968  EFCE  F004         	goto	l3449
  4969  00096C                     u2510:
  4970  00096C  FFFF               	dw	65535	; assembler added errata NOP
  4971  00096E  C020  F028         	movff	___fldiv@b,??___fldiv
  4972  000972  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  4973  000976  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  4974  00097A  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  4975  00097E  342B               	rlcf	(??___fldiv+3)^0,w,c
  4976  000980  322B               	rrcf	(??___fldiv+3)^0,f,c
  4977  000982  322A               	rrcf	(??___fldiv+2)^0,f,c
  4978  000984  3229               	rrcf	(??___fldiv+1)^0,f,c
  4979  000986  3228               	rrcf	??___fldiv^0,f,c
  4980  000988  C028  F020         	movff	??___fldiv,___fldiv@b
  4981  00098C  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  4982  000990  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  4983  000994  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  4984  000998  4A31               	infsnz	___fldiv@new_exp^0,f,c
  4985  00099A  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  4986  00099C                     l3449:
  4987  00099C  FFFF               	dw	65535	; assembler added errata NOP
  4988  00099E  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  4989  0009A0  EFDA  F004         	goto	u2521
  4990  0009A4  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  4991  0009A6  E109               	bnz	u2520
  4992  0009A8  2831               	incf	___fldiv@new_exp^0,w,c
  4993  0009AA  A0D8               	btfss	status,0,c
  4994  0009AC  EFDA  F004         	goto	u2521
  4995  0009B0  EFDD  F004         	goto	u2520
  4996  0009B4                     u2521:
  4997  0009B4  FFFF               	dw	65535	; assembler added errata NOP
  4998  0009B6  EFE9  F004         	goto	l3453
  4999  0009BA                     u2520:
  5000  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5001  0009BC  0E00               	movlw	0
  5002  0009BE  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5003  0009C0  6831               	setf	___fldiv@new_exp^0,c
  5004  0009C2  0E00               	movlw	0
  5005  0009C4  6E20               	movwf	___fldiv@b^0,c
  5006  0009C6  0E00               	movlw	0
  5007  0009C8  6E21               	movwf	(___fldiv@b+1)^0,c
  5008  0009CA  0E00               	movlw	0
  5009  0009CC  6E22               	movwf	(___fldiv@b+2)^0,c
  5010  0009CE  0E00               	movlw	0
  5011  0009D0  6E23               	movwf	(___fldiv@b+3)^0,c
  5012  0009D2                     l3453:
  5013  0009D2  FFFF               	dw	65535	; assembler added errata NOP
  5014  0009D4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5015  0009D6  EFF8  F004         	goto	u2530
  5016  0009DA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5017  0009DC  E106               	bnz	u2531
  5018  0009DE  0431               	decf	___fldiv@new_exp^0,w,c
  5019  0009E0  B0D8               	btfsc	status,0,c
  5020  0009E2  EFF5  F004         	goto	u2531
  5021  0009E6  EFF8  F004         	goto	u2530
  5022  0009EA                     u2531:
  5023  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  5024  0009EC  EF07  F005         	goto	l3457
  5025  0009F0                     u2530:
  5026  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5027  0009F2  0E00               	movlw	0
  5028  0009F4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5029  0009F6  0E00               	movlw	0
  5030  0009F8  6E31               	movwf	___fldiv@new_exp^0,c
  5031  0009FA  0E00               	movlw	0
  5032  0009FC  6E20               	movwf	___fldiv@b^0,c
  5033  0009FE  0E00               	movlw	0
  5034  000A00  6E21               	movwf	(___fldiv@b+1)^0,c
  5035  000A02  0E00               	movlw	0
  5036  000A04  6E22               	movwf	(___fldiv@b+2)^0,c
  5037  000A06  0E00               	movlw	0
  5038  000A08  6E23               	movwf	(___fldiv@b+3)^0,c
  5039  000A0A  0E00               	movlw	0
  5040  000A0C  6E30               	movwf	___fldiv@sign^0,c
  5041  000A0E                     l3457:
  5042  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  5043  000A10  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5044  000A14  A037               	btfss	___fldiv@bexp^0,0,c
  5045  000A16  EF0F  F005         	goto	u2541
  5046  000A1A  EF12  F005         	goto	u2540
  5047  000A1E                     u2541:
  5048  000A1E  FFFF               	dw	65535	; assembler added errata NOP
  5049  000A20  EF16  F005         	goto	l3463
  5050  000A24                     u2540:
  5051  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5052  000A26  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5053  000A28  EF18  F005         	goto	l3465
  5054  000A2C                     l3463:
  5055  000A2C  FFFF               	dw	65535	; assembler added errata NOP
  5056  000A2E  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5057  000A30                     l3465:
  5058  000A30  FFFF               	dw	65535	; assembler added errata NOP
  5059  000A32  90D8               	bcf	status,0,c
  5060  000A34  3037               	rrcf	___fldiv@bexp^0,w,c
  5061  000A36  6E23               	movwf	(___fldiv@b+3)^0,c
  5062  000A38  EF9C  F003         	goto	l3379
  5063  000A3C                     l1148:
  5064  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  5065  000A3E  0012               	return		;funcret
  5066  000A40  FFFF               	dw	65535	; errata NOP
  5067  000A42                     __end_of___fldiv:
  5068                           	callstack 0
  5069                           
  5070 ;; *************** function _releaseObj *****************
  5071 ;; Defined at:
  5072 ;;		line 575 in file "motors.c"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;		None
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;		None
  5077 ;; Return value:  Size  Location     Type
  5078 ;;                  1    wreg      void 
  5079 ;; Registers used:
  5080 ;;		None
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5086 ;;      Params:         0       0       0       0       0       0       0
  5087 ;;      Locals:         0       0       0       0       0       0       0
  5088 ;;      Temps:          0       0       0       0       0       0       0
  5089 ;;      Totals:         0       0       0       0       0       0       0
  5090 ;;Total ram usage:        0 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; Hardware stack levels required when called:    4
  5093 ;; This function calls:
  5094 ;;		Nothing
  5095 ;; This function is called by:
  5096 ;;		_executeData
  5097 ;; This function uses a non-reentrant model
  5098 ;;
  5099                           
  5100                           	psect	text26
  5101  002208                     __ptext26:
  5102                           	callstack 0
  5103  002208                     _releaseObj:
  5104                           	callstack 0
  5105  002208  FFFF               	dw	65535	; assembler added errata NOP
  5106  00220A                     
  5107                           ;motors.c: 576:     LATDbits.LATD1 = 0;
  5108  00220A  928C               	bcf	140,1,c	;volatile
  5109  00220C  0012               	return		;funcret
  5110  00220E  FFFF               	dw	65535	; errata NOP
  5111  002210                     __end_of_releaseObj:
  5112                           	callstack 0
  5113                           
  5114 ;; *************** function _pickObject *****************
  5115 ;; Defined at:
  5116 ;;		line 568 in file "motors.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;		None
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;		None
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  1    wreg      void 
  5123 ;; Registers used:
  5124 ;;		None
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5130 ;;      Params:         0       0       0       0       0       0       0
  5131 ;;      Locals:         0       0       0       0       0       0       0
  5132 ;;      Temps:          0       0       0       0       0       0       0
  5133 ;;      Totals:         0       0       0       0       0       0       0
  5134 ;;Total ram usage:        0 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:    4
  5137 ;; This function calls:
  5138 ;;		Nothing
  5139 ;; This function is called by:
  5140 ;;		_executeData
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text27
  5145  002210                     __ptext27:
  5146                           	callstack 0
  5147  002210                     _pickObject:
  5148                           	callstack 0
  5149  002210  FFFF               	dw	65535	; assembler added errata NOP
  5150  002212                     
  5151                           ;motors.c: 569:     LATDbits.LATD1 = 1;
  5152  002212  828C               	bsf	140,1,c	;volatile
  5153  002214  0012               	return		;funcret
  5154  002216  FFFF               	dw	65535	; errata NOP
  5155  002218                     __end_of_pickObject:
  5156                           	callstack 0
  5157                           
  5158 ;; *************** function _moveToPoint *****************
  5159 ;; Defined at:
  5160 ;;		line 266 in file "motors.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;  x1              2   21[COMRAM] unsigned int 
  5163 ;;  y1              2   23[COMRAM] unsigned int 
  5164 ;;  x2              2   25[COMRAM] unsigned int 
  5165 ;;  y2              2   27[COMRAM] unsigned int 
  5166 ;; Auto vars:     Size  Location     Type
  5167 ;;  keepMovingY     1   32[COMRAM] unsigned char 
  5168 ;;  keepMovingX     1   31[COMRAM] unsigned char 
  5169 ;; Return value:  Size  Location     Type
  5170 ;;                  1    wreg      unsigned char 
  5171 ;; Registers used:
  5172 ;;		wreg, status,2, status,0, cstack
  5173 ;; Tracked objects:
  5174 ;;		On entry : 0/0
  5175 ;;		On exit  : 0/0
  5176 ;;		Unchanged: 0/0
  5177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5178 ;;      Params:         8       0       0       0       0       0       0
  5179 ;;      Locals:         2       0       0       0       0       0       0
  5180 ;;      Temps:          2       0       0       0       0       0       0
  5181 ;;      Totals:        12       0       0       0       0       0       0
  5182 ;;Total ram usage:       12 bytes
  5183 ;; Hardware stack levels used:    1
  5184 ;; Hardware stack levels required when called:    5
  5185 ;; This function calls:
  5186 ;;		_resetStep
  5187 ;;		_setDirection
  5188 ;;		_stepCounter
  5189 ;;		_stepMade
  5190 ;; This function is called by:
  5191 ;;		_executeData
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           	psect	text28
  5196  0010AC                     __ptext28:
  5197                           	callstack 0
  5198  0010AC                     _moveToPoint:
  5199                           	callstack 0
  5200  0010AC  FFFF               	dw	65535	; assembler added errata NOP
  5201  0010AE                     
  5202                           ;motors.c: 269:     if(x2 > maxX || y2 > maxY){
  5203  0010AE  0EE9               	movlw	233
  5204  0010B0  5C1A               	subwf	moveToPoint@x2^0,w,c
  5205  0010B2  0E03               	movlw	3
  5206  0010B4  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5207  0010B6  B0D8               	btfsc	status,0,c
  5208  0010B8  EF60  F008         	goto	u2781
  5209  0010BC  EF63  F008         	goto	u2780
  5210  0010C0                     u2781:
  5211  0010C0  FFFF               	dw	65535	; assembler added errata NOP
  5212  0010C2  EF70  F008         	goto	l3615
  5213  0010C6                     u2780:
  5214  0010C6  FFFF               	dw	65535	; assembler added errata NOP
  5215  0010C8  0EE9               	movlw	233
  5216  0010CA  5C1C               	subwf	moveToPoint@y2^0,w,c
  5217  0010CC  0E03               	movlw	3
  5218  0010CE  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  5219  0010D0  A0D8               	btfss	status,0,c
  5220  0010D2  EF6D  F008         	goto	u2791
  5221  0010D6  EF70  F008         	goto	u2790
  5222  0010DA                     u2791:
  5223  0010DA  FFFF               	dw	65535	; assembler added errata NOP
  5224  0010DC  EF74  F008         	goto	l3619
  5225  0010E0                     u2790:
  5226  0010E0                     l3615:
  5227  0010E0  FFFF               	dw	65535	; assembler added errata NOP
  5228                           
  5229                           ;motors.c: 270:         return(5);
  5230  0010E2  0E05               	movlw	5
  5231  0010E4  EF48  F009         	goto	l141
  5232  0010E8                     l3619:
  5233  0010E8  FFFF               	dw	65535	; assembler added errata NOP
  5234                           
  5235                           ;motors.c: 274:     if((x2 - x1) > 0){
  5236  0010EA  5016               	movf	moveToPoint@x1^0,w,c
  5237  0010EC  5C1A               	subwf	moveToPoint@x2^0,w,c
  5238  0010EE  6E1E               	movwf	??_moveToPoint^0,c
  5239  0010F0  5017               	movf	(moveToPoint@x1+1)^0,w,c
  5240  0010F2  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5241  0010F4  6E1F               	movwf	(??_moveToPoint+1)^0,c
  5242  0010F6  501E               	movf	??_moveToPoint^0,w,c
  5243  0010F8  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  5244  0010FA  B4D8               	btfsc	status,2,c
  5245  0010FC  EF82  F008         	goto	u2801
  5246  001100  EF85  F008         	goto	u2800
  5247  001104                     u2801:
  5248  001104  FFFF               	dw	65535	; assembler added errata NOP
  5249  001106  EF8D  F008         	goto	l3623
  5250  00110A                     u2800:
  5251  00110A  FFFF               	dw	65535	; assembler added errata NOP
  5252  00110C                     
  5253                           ;motors.c: 275:         setDirection(1, 0);
  5254  00110C  0E00               	movlw	0
  5255  00110E  6E12               	movwf	setDirection@motor^0,c
  5256  001110  0E01               	movlw	1
  5257  001112  EC5F  F00F         	call	_setDirection
  5258                           
  5259                           ;motors.c: 276:     }else{
  5260  001116  EF93  F008         	goto	l3625
  5261  00111A                     l3623:
  5262  00111A  FFFF               	dw	65535	; assembler added errata NOP
  5263                           
  5264                           ;motors.c: 277:         setDirection(0, 0);
  5265  00111C  0E00               	movlw	0
  5266  00111E  6E12               	movwf	setDirection@motor^0,c
  5267  001120  0E00               	movlw	0
  5268  001122  EC5F  F00F         	call	_setDirection
  5269  001126                     l3625:
  5270  001126  FFFF               	dw	65535	; assembler added errata NOP
  5271                           
  5272                           ;motors.c: 280:     if((y2 - y1) > 0){
  5273  001128  5018               	movf	moveToPoint@y1^0,w,c
  5274  00112A  5C1C               	subwf	moveToPoint@y2^0,w,c
  5275  00112C  6E1E               	movwf	??_moveToPoint^0,c
  5276  00112E  5019               	movf	(moveToPoint@y1+1)^0,w,c
  5277  001130  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  5278  001132  6E1F               	movwf	(??_moveToPoint+1)^0,c
  5279  001134  501E               	movf	??_moveToPoint^0,w,c
  5280  001136  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  5281  001138  B4D8               	btfsc	status,2,c
  5282  00113A  EFA1  F008         	goto	u2811
  5283  00113E  EFA4  F008         	goto	u2810
  5284  001142                     u2811:
  5285  001142  FFFF               	dw	65535	; assembler added errata NOP
  5286  001144  EFAC  F008         	goto	l3629
  5287  001148                     u2810:
  5288  001148  FFFF               	dw	65535	; assembler added errata NOP
  5289  00114A                     
  5290                           ;motors.c: 281:         setDirection(1, 1);
  5291  00114A  0E01               	movlw	1
  5292  00114C  6E12               	movwf	setDirection@motor^0,c
  5293  00114E  0E01               	movlw	1
  5294  001150  EC5F  F00F         	call	_setDirection
  5295                           
  5296                           ;motors.c: 282:     }else{
  5297  001154  EFB2  F008         	goto	l3631
  5298  001158                     l3629:
  5299  001158  FFFF               	dw	65535	; assembler added errata NOP
  5300                           
  5301                           ;motors.c: 283:         setDirection(0, 1);
  5302  00115A  0E01               	movlw	1
  5303  00115C  6E12               	movwf	setDirection@motor^0,c
  5304  00115E  0E00               	movlw	0
  5305  001160  EC5F  F00F         	call	_setDirection
  5306  001164                     l3631:
  5307  001164  FFFF               	dw	65535	; assembler added errata NOP
  5308                           
  5309                           ;motors.c: 286:     unsigned char keepMovingX = 1;
  5310  001166  0E01               	movlw	1
  5311  001168  6E20               	movwf	moveToPoint@keepMovingX^0,c
  5312  00116A                     
  5313                           ;motors.c: 287:     unsigned char keepMovingY = 1;
  5314  00116A  0E01               	movlw	1
  5315  00116C  6E21               	movwf	moveToPoint@keepMovingY^0,c
  5316  00116E                     
  5317                           ;motors.c: 290:     T2CONbits.TMR2ON = 1;
  5318  00116E  84CA               	bsf	202,2,c	;volatile
  5319  001170                     
  5320                           ;motors.c: 292:     tm0Error = 0;
  5321  001170  0E00               	movlw	0
  5322  001172  6E5C               	movwf	(_tm0Error+1)^0,c
  5323  001174  0E00               	movlw	0
  5324  001176  6E5B               	movwf	_tm0Error^0,c
  5325  001178                     
  5326                           ;motors.c: 293:     tm0Limit = 200;
  5327  001178  0EC8               	movlw	200
  5328  00117A  6E68               	movwf	_tm0Limit^0,c
  5329  00117C                     
  5330                           ;motors.c: 294:     T0CONbits.TMR0ON = 1;
  5331  00117C  8ED5               	bsf	213,7,c	;volatile
  5332                           
  5333                           ;motors.c: 296:     while(keepMovingX || keepMovingY){
  5334  00117E  EF28  F009         	goto	l3661
  5335  001182                     l3643:
  5336  001182  FFFF               	dw	65535	; assembler added errata NOP
  5337                           
  5338                           ;motors.c: 299:         if(tm0Error){
  5339  001184  505B               	movf	_tm0Error^0,w,c
  5340  001186  105C               	iorwf	(_tm0Error+1)^0,w,c
  5341  001188  B4D8               	btfsc	status,2,c
  5342  00118A  EFC9  F008         	goto	u2821
  5343  00118E  EFCC  F008         	goto	u2820
  5344  001192                     u2821:
  5345  001192  FFFF               	dw	65535	; assembler added errata NOP
  5346  001194  EFD5  F008         	goto	l3649
  5347  001198                     u2820:
  5348  001198  FFFF               	dw	65535	; assembler added errata NOP
  5349  00119A                     
  5350                           ;motors.c: 301:             LATAbits.LATA2 = 0;
  5351  00119A  9489               	bcf	137,2,c	;volatile
  5352                           
  5353                           ;motors.c: 302:             LATBbits.LATB4 = 0;
  5354  00119C  988A               	bcf	138,4,c	;volatile
  5355  00119E                     
  5356                           ;motors.c: 303:             tm0Error = 4;
  5357  00119E  0E00               	movlw	0
  5358  0011A0  6E5C               	movwf	(_tm0Error+1)^0,c
  5359  0011A2  0E04               	movlw	4
  5360  0011A4  6E5B               	movwf	_tm0Error^0,c
  5361                           
  5362                           ;motors.c: 304:             break;
  5363  0011A6  EF3C  F009         	goto	l149
  5364  0011AA                     l3649:
  5365  0011AA  FFFF               	dw	65535	; assembler added errata NOP
  5366                           
  5367                           ;motors.c: 312:         if(x1 + stepCounter() == x2){
  5368  0011AC  ECD5  F010         	call	_stepCounter	;wreg free
  5369  0011B0  5016               	movf	moveToPoint@x1^0,w,c
  5370  0011B2  2612               	addwf	?_stepCounter^0,f,c
  5371  0011B4  5017               	movf	(moveToPoint@x1+1)^0,w,c
  5372  0011B6  2213               	addwfc	(?_stepCounter+1)^0,f,c
  5373  0011B8  501A               	movf	moveToPoint@x2^0,w,c
  5374  0011BA  1812               	xorwf	?_stepCounter^0,w,c
  5375  0011BC  E107               	bnz	u2831
  5376  0011BE  501B               	movf	(moveToPoint@x2+1)^0,w,c
  5377  0011C0  1813               	xorwf	(?_stepCounter+1)^0,w,c
  5378  0011C2  A4D8               	btfss	status,2,c
  5379  0011C4  EFE6  F008         	goto	u2831
  5380  0011C8  EFE9  F008         	goto	u2830
  5381  0011CC                     u2831:
  5382  0011CC  FFFF               	dw	65535	; assembler added errata NOP
  5383  0011CE  EFEE  F008         	goto	l150
  5384  0011D2                     u2830:
  5385  0011D2  FFFF               	dw	65535	; assembler added errata NOP
  5386  0011D4                     
  5387                           ;motors.c: 314:             keepMovingX = 0;
  5388  0011D4  0E00               	movlw	0
  5389  0011D6  6E20               	movwf	moveToPoint@keepMovingX^0,c
  5390                           
  5391                           ;motors.c: 315:         }else{
  5392  0011D8  EFF0  F008         	goto	l3653
  5393  0011DC                     l150:
  5394  0011DC  FFFF               	dw	65535	; assembler added errata NOP
  5395                           
  5396                           ;motors.c: 317:             LATAbits.LATA2 = 1;
  5397  0011DE  8489               	bsf	137,2,c	;volatile
  5398  0011E0                     l3653:
  5399  0011E0  FFFF               	dw	65535	; assembler added errata NOP
  5400                           
  5401                           ;motors.c: 321:         if(y1 + stepCounter() == y2){
  5402  0011E2  ECD5  F010         	call	_stepCounter	;wreg free
  5403  0011E6  5018               	movf	moveToPoint@y1^0,w,c
  5404  0011E8  2612               	addwf	?_stepCounter^0,f,c
  5405  0011EA  5019               	movf	(moveToPoint@y1+1)^0,w,c
  5406  0011EC  2213               	addwfc	(?_stepCounter+1)^0,f,c
  5407  0011EE  501C               	movf	moveToPoint@y2^0,w,c
  5408  0011F0  1812               	xorwf	?_stepCounter^0,w,c
  5409  0011F2  E107               	bnz	u2841
  5410  0011F4  501D               	movf	(moveToPoint@y2+1)^0,w,c
  5411  0011F6  1813               	xorwf	(?_stepCounter+1)^0,w,c
  5412  0011F8  A4D8               	btfss	status,2,c
  5413  0011FA  EF01  F009         	goto	u2841
  5414  0011FE  EF04  F009         	goto	u2840
  5415  001202                     u2841:
  5416  001202  FFFF               	dw	65535	; assembler added errata NOP
  5417  001204  EF09  F009         	goto	l152
  5418  001208                     u2840:
  5419  001208  FFFF               	dw	65535	; assembler added errata NOP
  5420  00120A                     
  5421                           ;motors.c: 323:             keepMovingY = 0;
  5422  00120A  0E00               	movlw	0
  5423  00120C  6E21               	movwf	moveToPoint@keepMovingY^0,c
  5424                           
  5425                           ;motors.c: 324:         }else{
  5426  00120E  EF0B  F009         	goto	l3657
  5427  001212                     l152:
  5428  001212  FFFF               	dw	65535	; assembler added errata NOP
  5429                           
  5430                           ;motors.c: 326:             LATBbits.LATB4 = 1;
  5431  001214  888A               	bsf	138,4,c	;volatile
  5432  001216                     l3657:
  5433  001216  FFFF               	dw	65535	; assembler added errata NOP
  5434  001218  EC9F  F010         	call	_stepMade	;wreg free
  5435  00121C  5012               	movf	?_stepMade^0,w,c
  5436  00121E  1013               	iorwf	(?_stepMade+1)^0,w,c
  5437  001220  B4D8               	btfsc	status,2,c
  5438  001222  EF15  F009         	goto	u2851
  5439  001226  EF18  F009         	goto	u2850
  5440  00122A                     u2851:
  5441  00122A  FFFF               	dw	65535	; assembler added errata NOP
  5442  00122C  EF0B  F009         	goto	l3657
  5443  001230                     u2850:
  5444  001230  FFFF               	dw	65535	; assembler added errata NOP
  5445  001232                     
  5446                           ;motors.c: 333:         LATAbits.LATA2 = 0;
  5447  001232  9489               	bcf	137,2,c	;volatile
  5448                           
  5449                           ;motors.c: 334:         LATBbits.LATB4 = 0;
  5450  001234  988A               	bcf	138,4,c	;volatile
  5451  001236                     l3659:
  5452  001236  FFFF               	dw	65535	; assembler added errata NOP
  5453  001238  EC9F  F010         	call	_stepMade	;wreg free
  5454  00123C  5012               	movf	?_stepMade^0,w,c
  5455  00123E  1013               	iorwf	(?_stepMade+1)^0,w,c
  5456  001240  B4D8               	btfsc	status,2,c
  5457  001242  EF25  F009         	goto	u2861
  5458  001246  EF28  F009         	goto	u2860
  5459  00124A                     u2861:
  5460  00124A  FFFF               	dw	65535	; assembler added errata NOP
  5461  00124C  EF1B  F009         	goto	l3659
  5462  001250                     u2860:
  5463  001250                     l3661:
  5464  001250  FFFF               	dw	65535	; assembler added errata NOP
  5465                           
  5466                           ;motors.c: 296:     while(keepMovingX || keepMovingY){
  5467  001252  5020               	movf	moveToPoint@keepMovingX^0,w,c
  5468  001254  A4D8               	btfss	status,2,c
  5469  001256  EF2F  F009         	goto	u2871
  5470  00125A  EF32  F009         	goto	u2870
  5471  00125E                     u2871:
  5472  00125E  FFFF               	dw	65535	; assembler added errata NOP
  5473  001260  EFC1  F008         	goto	l3643
  5474  001264                     u2870:
  5475  001264  FFFF               	dw	65535	; assembler added errata NOP
  5476  001266  5021               	movf	moveToPoint@keepMovingY^0,w,c
  5477  001268  A4D8               	btfss	status,2,c
  5478  00126A  EF39  F009         	goto	u2881
  5479  00126E  EF3C  F009         	goto	u2880
  5480  001272                     u2881:
  5481  001272  FFFF               	dw	65535	; assembler added errata NOP
  5482  001274  EFC1  F008         	goto	l3643
  5483  001278                     u2880:
  5484  001278                     l149:
  5485  001278  FFFF               	dw	65535	; assembler added errata NOP
  5486                           
  5487                           ;motors.c: 341:     T0CONbits.TMR0ON = 0;
  5488  00127A  9ED5               	bcf	213,7,c	;volatile
  5489                           
  5490                           ;motors.c: 342:     T2CONbits.TMR2ON = 0;
  5491  00127C  94CA               	bcf	202,2,c	;volatile
  5492  00127E                     
  5493                           ;motors.c: 344:     TMR0 = 0;
  5494  00127E  0E00               	movlw	0
  5495  001280  6ED7               	movwf	215,c	;volatile
  5496  001282  0E00               	movlw	0
  5497  001284  6ED6               	movwf	214,c	;volatile
  5498                           
  5499                           ;motors.c: 345:     TMR2 = 0;
  5500  001286  0E00               	movlw	0
  5501  001288  6ECC               	movwf	204,c	;volatile
  5502  00128A                     
  5503                           ;motors.c: 348:     resetStep();
  5504  00128A  ECE0  F010         	call	_resetStep	;wreg free
  5505  00128E                     
  5506                           ;motors.c: 350:     return(tm0Error);
  5507  00128E  505B               	movf	_tm0Error^0,w,c
  5508  001290                     l141:
  5509  001290  FFFF               	dw	65535	; assembler added errata NOP
  5510  001292  0012               	return		;funcret
  5511  001294  FFFF               	dw	65535	; errata NOP
  5512  001296                     __end_of_moveToPoint:
  5513                           	callstack 0
  5514                           
  5515 ;; *************** function _stepCounter *****************
  5516 ;; Defined at:
  5517 ;;		line 59 in file "pwm.c"
  5518 ;; Parameters:    Size  Location     Type
  5519 ;;		None
  5520 ;; Auto vars:     Size  Location     Type
  5521 ;;		None
  5522 ;; Return value:  Size  Location     Type
  5523 ;;                  2   17[COMRAM] unsigned int 
  5524 ;; Registers used:
  5525 ;;		None
  5526 ;; Tracked objects:
  5527 ;;		On entry : 0/0
  5528 ;;		On exit  : 0/0
  5529 ;;		Unchanged: 0/0
  5530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5531 ;;      Params:         2       0       0       0       0       0       0
  5532 ;;      Locals:         0       0       0       0       0       0       0
  5533 ;;      Temps:          0       0       0       0       0       0       0
  5534 ;;      Totals:         2       0       0       0       0       0       0
  5535 ;;Total ram usage:        2 bytes
  5536 ;; Hardware stack levels used:    1
  5537 ;; Hardware stack levels required when called:    4
  5538 ;; This function calls:
  5539 ;;		Nothing
  5540 ;; This function is called by:
  5541 ;;		_moveToPoint
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545                           	psect	text29
  5546  0021AA                     __ptext29:
  5547                           	callstack 0
  5548  0021AA                     _stepCounter:
  5549                           	callstack 0
  5550  0021AA  FFFF               	dw	65535	; assembler added errata NOP
  5551  0021AC                     
  5552                           ;pwm.c: 60:     return pwmStep;
  5553  0021AC  C067  F012         	movff	_pwmStep,?_stepCounter	;volatile
  5554  0021B0  6A13               	clrf	(?_stepCounter+1)^0,c
  5555  0021B2  0012               	return		;funcret
  5556  0021B4  FFFF               	dw	65535	; errata NOP
  5557  0021B6                     __end_of_stepCounter:
  5558                           	callstack 0
  5559                           
  5560 ;; *************** function _liftArm *****************
  5561 ;; Defined at:
  5562 ;;		line 496 in file "motors.c"
  5563 ;; Parameters:    Size  Location     Type
  5564 ;;		None
  5565 ;; Auto vars:     Size  Location     Type
  5566 ;;		None
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  1    wreg      unsigned char 
  5569 ;; Registers used:
  5570 ;;		wreg, status,2, status,0, cstack
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5576 ;;      Params:         0       0       0       0       0       0       0
  5577 ;;      Locals:         0       0       0       0       0       0       0
  5578 ;;      Temps:          0       0       0       0       0       0       0
  5579 ;;      Totals:         0       0       0       0       0       0       0
  5580 ;;Total ram usage:        0 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    5
  5583 ;; This function calls:
  5584 ;;		_resetStep
  5585 ;;		_setDirection
  5586 ;;		_stepMade
  5587 ;; This function is called by:
  5588 ;;		_executeData
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           	psect	text30
  5593  001CA0                     __ptext30:
  5594                           	callstack 0
  5595  001CA0                     _liftArm:
  5596                           	callstack 0
  5597  001CA0  FFFF               	dw	65535	; assembler added errata NOP
  5598  001CA2                     
  5599                           ;motors.c: 499:     setDirection(0, 2);
  5600  001CA2  0E02               	movlw	2
  5601  001CA4  6E12               	movwf	setDirection@motor^0,c
  5602  001CA6  0E00               	movlw	0
  5603  001CA8  EC5F  F00F         	call	_setDirection
  5604  001CAC                     
  5605                           ;motors.c: 501:     T2CONbits.TMR2ON = 1;
  5606  001CAC  84CA               	bsf	202,2,c	;volatile
  5607  001CAE                     
  5608                           ;motors.c: 503:     tm0Error = 0;
  5609  001CAE  0E00               	movlw	0
  5610  001CB0  6E5C               	movwf	(_tm0Error+1)^0,c
  5611  001CB2  0E00               	movlw	0
  5612  001CB4  6E5B               	movwf	_tm0Error^0,c
  5613  001CB6                     
  5614                           ;motors.c: 504:     tm0Limit = 200;
  5615  001CB6  0EC8               	movlw	200
  5616  001CB8  6E68               	movwf	_tm0Limit^0,c
  5617  001CBA                     
  5618                           ;motors.c: 505:     T0CONbits.TMR0ON = 1;
  5619  001CBA  8ED5               	bsf	213,7,c	;volatile
  5620                           
  5621                           ;motors.c: 509:     while(!PORTEbits.RE2){
  5622  001CBC  EF91  F00E         	goto	l190
  5623  001CC0                     l3683:
  5624  001CC0  FFFF               	dw	65535	; assembler added errata NOP
  5625                           
  5626                           ;motors.c: 512:         if(tm0Error){
  5627  001CC2  505B               	movf	_tm0Error^0,w,c
  5628  001CC4  105C               	iorwf	(_tm0Error+1)^0,w,c
  5629  001CC6  B4D8               	btfsc	status,2,c
  5630  001CC8  EF68  F00E         	goto	u2891
  5631  001CCC  EF6B  F00E         	goto	u2890
  5632  001CD0                     u2891:
  5633  001CD0  FFFF               	dw	65535	; assembler added errata NOP
  5634  001CD2  EF73  F00E         	goto	l192
  5635  001CD6                     u2890:
  5636  001CD6  FFFF               	dw	65535	; assembler added errata NOP
  5637  001CD8                     
  5638                           ;motors.c: 514:             LATCbits.LATC2 = 0;
  5639  001CD8  948B               	bcf	139,2,c	;volatile
  5640  001CDA                     
  5641                           ;motors.c: 515:             tm0Error = 6;
  5642  001CDA  0E00               	movlw	0
  5643  001CDC  6E5C               	movwf	(_tm0Error+1)^0,c
  5644  001CDE  0E06               	movlw	6
  5645  001CE0  6E5B               	movwf	_tm0Error^0,c
  5646                           
  5647                           ;motors.c: 516:             break;
  5648  001CE2  EF9A  F00E         	goto	l193
  5649  001CE6                     l192:
  5650  001CE6  FFFF               	dw	65535	; assembler added errata NOP
  5651                           
  5652                           ;motors.c: 521:         LATCbits.LATC2 = 1;
  5653  001CE8  848B               	bsf	139,2,c	;volatile
  5654  001CEA                     l3689:
  5655  001CEA  FFFF               	dw	65535	; assembler added errata NOP
  5656  001CEC  EC9F  F010         	call	_stepMade	;wreg free
  5657  001CF0  5012               	movf	?_stepMade^0,w,c
  5658  001CF2  1013               	iorwf	(?_stepMade+1)^0,w,c
  5659  001CF4  B4D8               	btfsc	status,2,c
  5660  001CF6  EF7F  F00E         	goto	u2901
  5661  001CFA  EF82  F00E         	goto	u2900
  5662  001CFE                     u2901:
  5663  001CFE  FFFF               	dw	65535	; assembler added errata NOP
  5664  001D00  EF75  F00E         	goto	l3689
  5665  001D04                     u2900:
  5666  001D04  FFFF               	dw	65535	; assembler added errata NOP
  5667  001D06                     
  5668                           ;motors.c: 527:         LATCbits.LATC2 = 0;
  5669  001D06  948B               	bcf	139,2,c	;volatile
  5670  001D08                     l3691:
  5671  001D08  FFFF               	dw	65535	; assembler added errata NOP
  5672  001D0A  EC9F  F010         	call	_stepMade	;wreg free
  5673  001D0E  5012               	movf	?_stepMade^0,w,c
  5674  001D10  1013               	iorwf	(?_stepMade+1)^0,w,c
  5675  001D12  B4D8               	btfsc	status,2,c
  5676  001D14  EF8E  F00E         	goto	u2911
  5677  001D18  EF91  F00E         	goto	u2910
  5678  001D1C                     u2911:
  5679  001D1C  FFFF               	dw	65535	; assembler added errata NOP
  5680  001D1E  EF84  F00E         	goto	l3691
  5681  001D22                     u2910:
  5682  001D22                     l190:
  5683  001D22  FFFF               	dw	65535	; assembler added errata NOP
  5684                           
  5685                           ;motors.c: 509:     while(!PORTEbits.RE2){
  5686  001D24  A484               	btfss	132,2,c	;volatile
  5687  001D26  EF97  F00E         	goto	u2921
  5688  001D2A  EF9A  F00E         	goto	u2920
  5689  001D2E                     u2921:
  5690  001D2E  FFFF               	dw	65535	; assembler added errata NOP
  5691  001D30  EF60  F00E         	goto	l3683
  5692  001D34                     u2920:
  5693  001D34                     l193:
  5694  001D34  FFFF               	dw	65535	; assembler added errata NOP
  5695                           
  5696                           ;motors.c: 534:     T0CONbits.TMR0ON = 0;
  5697  001D36  9ED5               	bcf	213,7,c	;volatile
  5698                           
  5699                           ;motors.c: 535:     T2CONbits.TMR2ON = 0;
  5700  001D38  94CA               	bcf	202,2,c	;volatile
  5701  001D3A                     
  5702                           ;motors.c: 537:     TMR0 = 0;
  5703  001D3A  0E00               	movlw	0
  5704  001D3C  6ED7               	movwf	215,c	;volatile
  5705  001D3E  0E00               	movlw	0
  5706  001D40  6ED6               	movwf	214,c	;volatile
  5707                           
  5708                           ;motors.c: 538:     TMR2 = 0;
  5709  001D42  0E00               	movlw	0
  5710  001D44  6ECC               	movwf	204,c	;volatile
  5711  001D46                     
  5712                           ;motors.c: 541:     resetStep();
  5713  001D46  ECE0  F010         	call	_resetStep	;wreg free
  5714  001D4A                     
  5715                           ;motors.c: 543:     return(tm0Error);
  5716  001D4A  505B               	movf	_tm0Error^0,w,c
  5717  001D4C  0012               	return		;funcret
  5718  001D4E  FFFF               	dw	65535	; errata NOP
  5719  001D50                     __end_of_liftArm:
  5720                           	callstack 0
  5721                           
  5722 ;; *************** function _stepMade *****************
  5723 ;; Defined at:
  5724 ;;		line 47 in file "pwm.c"
  5725 ;; Parameters:    Size  Location     Type
  5726 ;;		None
  5727 ;; Auto vars:     Size  Location     Type
  5728 ;;  temp            1   19[COMRAM] unsigned char 
  5729 ;; Return value:  Size  Location     Type
  5730 ;;                  2   17[COMRAM] unsigned int 
  5731 ;; Registers used:
  5732 ;;		wreg, status,2
  5733 ;; Tracked objects:
  5734 ;;		On entry : 0/0
  5735 ;;		On exit  : 0/0
  5736 ;;		Unchanged: 0/0
  5737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5738 ;;      Params:         2       0       0       0       0       0       0
  5739 ;;      Locals:         1       0       0       0       0       0       0
  5740 ;;      Temps:          0       0       0       0       0       0       0
  5741 ;;      Totals:         3       0       0       0       0       0       0
  5742 ;;Total ram usage:        3 bytes
  5743 ;; Hardware stack levels used:    1
  5744 ;; Hardware stack levels required when called:    4
  5745 ;; This function calls:
  5746 ;;		Nothing
  5747 ;; This function is called by:
  5748 ;;		_resetPosition
  5749 ;;		_moveToPoint
  5750 ;;		_liftArm
  5751 ;;		_touchObject
  5752 ;;		_touchTherm
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           	psect	text31
  5757  00213E                     __ptext31:
  5758                           	callstack 0
  5759  00213E                     _stepMade:
  5760                           	callstack 0
  5761  00213E  FFFF               	dw	65535	; assembler added errata NOP
  5762  002140                     
  5763                           ;pwm.c: 48:     unsigned char temp = stepToggle;
  5764  002140  C066  F014         	movff	_stepToggle,stepMade@temp	;volatile
  5765  002144                     
  5766                           ;pwm.c: 50:     stepToggle = 0;
  5767  002144  0E00               	movlw	0
  5768  002146  6E66               	movwf	_stepToggle^0,c	;volatile
  5769  002148                     
  5770                           ;pwm.c: 52:     return temp;
  5771  002148  C014  F012         	movff	stepMade@temp,?_stepMade
  5772  00214C  6A13               	clrf	(?_stepMade+1)^0,c
  5773  00214E  0012               	return		;funcret
  5774  002150  FFFF               	dw	65535	; errata NOP
  5775  002152                     __end_of_stepMade:
  5776                           	callstack 0
  5777                           
  5778 ;; *************** function _setDirection *****************
  5779 ;; Defined at:
  5780 ;;		line 117 in file "motors.c"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;  direction       1    wreg     unsigned char 
  5783 ;;  motor           1   17[COMRAM] unsigned char 
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;  direction       1   20[COMRAM] unsigned char 
  5786 ;; Return value:  Size  Location     Type
  5787 ;;                  1    wreg      void 
  5788 ;; Registers used:
  5789 ;;		wreg, status,2, status,0
  5790 ;; Tracked objects:
  5791 ;;		On entry : 0/0
  5792 ;;		On exit  : 0/0
  5793 ;;		Unchanged: 0/0
  5794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5795 ;;      Params:         1       0       0       0       0       0       0
  5796 ;;      Locals:         1       0       0       0       0       0       0
  5797 ;;      Temps:          2       0       0       0       0       0       0
  5798 ;;      Totals:         4       0       0       0       0       0       0
  5799 ;;Total ram usage:        4 bytes
  5800 ;; Hardware stack levels used:    1
  5801 ;; Hardware stack levels required when called:    4
  5802 ;; This function calls:
  5803 ;;		Nothing
  5804 ;; This function is called by:
  5805 ;;		_resetPosition
  5806 ;;		_moveToPoint
  5807 ;;		_liftArm
  5808 ;;		_touchObject
  5809 ;;		_touchTherm
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           	psect	text32
  5814  001EBE                     __ptext32:
  5815                           	callstack 0
  5816  001EBE                     _setDirection:
  5817                           	callstack 0
  5818  001EBE  FFFF               	dw	65535	; assembler added errata NOP
  5819                           
  5820                           ;incstack = 0
  5821                           ;setDirection@direction stored from wreg
  5822  001EC0  6E15               	movwf	setDirection@direction^0,c
  5823  001EC2                     
  5824                           ;motors.c: 118:     switch(motor){
  5825  001EC2  EF7B  F00F         	goto	l3309
  5826  001EC6                     l3301:
  5827  001EC6  FFFF               	dw	65535	; assembler added errata NOP
  5828                           
  5829                           ;motors.c: 120:             LATAbits.LATA1 = direction;
  5830  001EC8  B015               	btfsc	setDirection@direction^0,0,c
  5831  001ECA  D002               	bra	u2275
  5832  001ECC  9289               	bcf	137,1,c	;volatile
  5833  001ECE  D001               	bra	u2276
  5834  001ED0                     u2275:
  5835  001ED0  8289               	bsf	137,1,c	;volatile
  5836  001ED2                     u2276:
  5837                           
  5838                           ;motors.c: 121:             break;
  5839  001ED2  EF96  F00F         	goto	l101
  5840  001ED6                     l3303:
  5841  001ED6  FFFF               	dw	65535	; assembler added errata NOP
  5842                           
  5843                           ;motors.c: 123:             LATBbits.LATB3 = direction;
  5844  001ED8  B015               	btfsc	setDirection@direction^0,0,c
  5845  001EDA  D002               	bra	u2285
  5846  001EDC  968A               	bcf	138,3,c	;volatile
  5847  001EDE  D001               	bra	u2286
  5848  001EE0                     u2285:
  5849  001EE0  868A               	bsf	138,3,c	;volatile
  5850  001EE2                     u2286:
  5851                           
  5852                           ;motors.c: 124:             break;
  5853  001EE2  EF96  F00F         	goto	l101
  5854  001EE6                     l3305:
  5855  001EE6  FFFF               	dw	65535	; assembler added errata NOP
  5856                           
  5857                           ;motors.c: 126:             LATCbits.LATC1 = direction;
  5858  001EE8  B015               	btfsc	setDirection@direction^0,0,c
  5859  001EEA  D002               	bra	u2295
  5860  001EEC  928B               	bcf	139,1,c	;volatile
  5861  001EEE  D001               	bra	u2296
  5862  001EF0                     u2295:
  5863  001EF0  828B               	bsf	139,1,c	;volatile
  5864  001EF2                     u2296:
  5865                           
  5866                           ;motors.c: 127:             break;
  5867  001EF2  EF96  F00F         	goto	l101
  5868  001EF6                     l3309:
  5869  001EF6  FFFF               	dw	65535	; assembler added errata NOP
  5870  001EF8  5012               	movf	setDirection@motor^0,w,c
  5871  001EFA  6E13               	movwf	??_setDirection^0,c
  5872  001EFC  6A14               	clrf	(??_setDirection+1)^0,c
  5873                           
  5874                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5875                           ; Switch size 1, requested type "simple"
  5876                           ; Number of cases is 1, Range of values is 0 to 0
  5877                           ; switch strategies available:
  5878                           ; Name         Instructions Cycles
  5879                           ; simple_byte            4     3 (average)
  5880                           ;	Chosen strategy is simple_byte
  5881  001EFE  5014               	movf	(??_setDirection+1)^0,w,c
  5882  001F00  0A00               	xorlw	0	; case 0
  5883  001F02  B4D8               	btfsc	status,2,c
  5884  001F04  EF86  F00F         	goto	l4375
  5885  001F08  EF96  F00F         	goto	l101
  5886  001F0C                     l4375:
  5887  001F0C  FFFF               	dw	65535	; assembler added errata NOP
  5888                           
  5889                           ; Switch size 1, requested type "simple"
  5890                           ; Number of cases is 3, Range of values is 0 to 2
  5891                           ; switch strategies available:
  5892                           ; Name         Instructions Cycles
  5893                           ; simple_byte           10     6 (average)
  5894                           ;	Chosen strategy is simple_byte
  5895  001F0E  5013               	movf	??_setDirection^0,w,c
  5896  001F10  0A00               	xorlw	0	; case 0
  5897  001F12  B4D8               	btfsc	status,2,c
  5898  001F14  EF63  F00F         	goto	l3301
  5899  001F18  0A01               	xorlw	1	; case 1
  5900  001F1A  B4D8               	btfsc	status,2,c
  5901  001F1C  EF6B  F00F         	goto	l3303
  5902  001F20  0A03               	xorlw	3	; case 2
  5903  001F22  B4D8               	btfsc	status,2,c
  5904  001F24  EF73  F00F         	goto	l3305
  5905  001F28  EF96  F00F         	goto	l101
  5906  001F2C                     l101:
  5907  001F2C  FFFF               	dw	65535	; assembler added errata NOP
  5908  001F2E  0012               	return		;funcret
  5909  001F30  FFFF               	dw	65535	; errata NOP
  5910  001F32                     __end_of_setDirection:
  5911                           	callstack 0
  5912                           
  5913 ;; *************** function _resetStep *****************
  5914 ;; Defined at:
  5915 ;;		line 66 in file "pwm.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;		None
  5918 ;; Auto vars:     Size  Location     Type
  5919 ;;		None
  5920 ;; Return value:  Size  Location     Type
  5921 ;;                  1    wreg      void 
  5922 ;; Registers used:
  5923 ;;		wreg, status,2
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 0/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5929 ;;      Params:         0       0       0       0       0       0       0
  5930 ;;      Locals:         0       0       0       0       0       0       0
  5931 ;;      Temps:          0       0       0       0       0       0       0
  5932 ;;      Totals:         0       0       0       0       0       0       0
  5933 ;;Total ram usage:        0 bytes
  5934 ;; Hardware stack levels used:    1
  5935 ;; Hardware stack levels required when called:    4
  5936 ;; This function calls:
  5937 ;;		Nothing
  5938 ;; This function is called by:
  5939 ;;		_resetPosition
  5940 ;;		_moveToPoint
  5941 ;;		_liftArm
  5942 ;;		_touchObject
  5943 ;;		_touchTherm
  5944 ;; This function uses a non-reentrant model
  5945 ;;
  5946                           
  5947                           	psect	text33
  5948  0021C0                     __ptext33:
  5949                           	callstack 0
  5950  0021C0                     _resetStep:
  5951                           	callstack 0
  5952  0021C0  FFFF               	dw	65535	; assembler added errata NOP
  5953  0021C2                     
  5954                           ;pwm.c: 67:     pwmStep = 0;
  5955  0021C2  0E00               	movlw	0
  5956  0021C4  6E67               	movwf	_pwmStep^0,c	;volatile
  5957  0021C6  0012               	return		;funcret
  5958  0021C8  FFFF               	dw	65535	; errata NOP
  5959  0021CA                     __end_of_resetStep:
  5960                           	callstack 0
  5961                           
  5962 ;; *************** function _getData *****************
  5963 ;; Defined at:
  5964 ;;		line 205 in file "usart.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;		None
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;		None
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  2   17[COMRAM] PTR struct .
  5971 ;; Registers used:
  5972 ;;		wreg, status,2, status,0
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5978 ;;      Params:         2       0       0       0       0       0       0
  5979 ;;      Locals:         0       0       0       0       0       0       0
  5980 ;;      Temps:          0       0       0       0       0       0       0
  5981 ;;      Totals:         2       0       0       0       0       0       0
  5982 ;;Total ram usage:        2 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:    4
  5985 ;; This function calls:
  5986 ;;		Nothing
  5987 ;; This function is called by:
  5988 ;;		_executeData
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           	psect	text34
  5993  002172                     __ptext34:
  5994                           	callstack 0
  5995  002172                     _getData:
  5996                           	callstack 0
  5997  002172  FFFF               	dw	65535	; assembler added errata NOP
  5998  002174                     
  5999                           ;usart.c: 206:     return(&dataSequence[0]);
  6000  002174  0ED8               	movlw	low _dataSequence
  6001  002176  6E12               	movwf	?_getData^0,c
  6002  002178  0E00               	movlw	high _dataSequence
  6003  00217A  6E13               	movwf	(?_getData+1)^0,c
  6004  00217C  0012               	return		;funcret
  6005  00217E  FFFF               	dw	65535	; errata NOP
  6006  002180                     __end_of_getData:
  6007                           	callstack 0
  6008                           
  6009 ;; *************** function _clearTM0 *****************
  6010 ;; Defined at:
  6011 ;;		line 30 in file "motors.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;		None
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;		None
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  1    wreg      void 
  6018 ;; Registers used:
  6019 ;;		wreg, status,2
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6025 ;;      Params:         0       0       0       0       0       0       0
  6026 ;;      Locals:         0       0       0       0       0       0       0
  6027 ;;      Temps:          0       0       0       0       0       0       0
  6028 ;;      Totals:         0       0       0       0       0       0       0
  6029 ;;Total ram usage:        0 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:    4
  6032 ;; This function calls:
  6033 ;;		Nothing
  6034 ;; This function is called by:
  6035 ;;		_main
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           	psect	text35
  6040  002180                     __ptext35:
  6041                           	callstack 0
  6042  002180                     _clearTM0:
  6043                           	callstack 0
  6044  002180  FFFF               	dw	65535	; assembler added errata NOP
  6045  002182                     
  6046                           ;motors.c: 31:     tm0Error = 0;
  6047  002182  0E00               	movlw	0
  6048  002184  6E5C               	movwf	(_tm0Error+1)^0,c
  6049  002186  0E00               	movlw	0
  6050  002188  6E5B               	movwf	_tm0Error^0,c
  6051  00218A  0012               	return		;funcret
  6052  00218C  FFFF               	dw	65535	; errata NOP
  6053  00218E                     __end_of_clearTM0:
  6054                           	callstack 0
  6055                           
  6056 ;; *************** function _isr *****************
  6057 ;; Defined at:
  6058 ;;		line 17 in file "interrupt.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;		None
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;  temp            1   16[COMRAM] unsigned char 
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  1    wreg      void 
  6065 ;; Registers used:
  6066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6072 ;;      Params:         0       0       0       0       0       0       0
  6073 ;;      Locals:         1       0       0       0       0       0       0
  6074 ;;      Temps:          6       0       0       0       0       0       0
  6075 ;;      Totals:         7       0       0       0       0       0       0
  6076 ;;Total ram usage:        7 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:    3
  6079 ;; This function calls:
  6080 ;;		_increaseStep
  6081 ;;		_retPeriod
  6082 ;;		_setThermRel
  6083 ;;		_setTouchRel
  6084 ;;		_toggleStep
  6085 ;;		_whatsTM0Limit
  6086 ;;		_writeTM0
  6087 ;;		i2_storeData
  6088 ;; This function is called by:
  6089 ;;		Interrupt level 2
  6090 ;; This function uses a non-reentrant model
  6091 ;;
  6092                           
  6093                           	psect	intcode
  6094  000008                     __pintcode:
  6095                           	callstack 0
  6096  000008                     _isr:
  6097                           	callstack 0
  6098  000008  FFFF               	dw	65535	; assembler added errata NOP
  6099                           
  6100                           ;incstack = 0
  6101  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6102  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6103  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6104  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6105  000018  CFF4 F010          	movff	prodh,??_isr+5
  6106  00001C                     
  6107                           ;interrupt.c: 18:     static unsigned int single_cycle = 0;;interrupt.c: 19:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 20:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 23:     if(INTCONbits.T0IF){
  6108  00001C  A4F2               	btfss	242,2,c	;volatile
  6109  00001E  EF13  F000         	goto	i2u217_41
  6110  000022  EF16  F000         	goto	i2u217_40
  6111  000026                     i2u217_41:
  6112  000026  FFFF               	dw	65535	; assembler added errata NOP
  6113  000028  EF2C  F000         	goto	i2l3217
  6114  00002C                     i2u217_40:
  6115  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6116  00002E                     
  6117                           ;interrupt.c: 24:         INTCONbits.T0IF = 0;
  6118  00002E  94F2               	bcf	242,2,c	;volatile
  6119  000030                     
  6120                           ;interrupt.c: 27:         tm0Count++;
  6121  000030  2A63               	incf	isr@tm0Count^0,f,c
  6122  000032                     
  6123                           ;interrupt.c: 29:         if(tm0Count >= whatsTM0Limit()){
  6124  000032  EC0C  F011         	call	_whatsTM0Limit	;wreg free
  6125  000036  6E0B               	movwf	??_isr^0,c
  6126  000038  500B               	movf	??_isr^0,w,c
  6127  00003A  5C63               	subwf	isr@tm0Count^0,w,c
  6128  00003C  A0D8               	btfss	status,0,c
  6129  00003E  EF23  F000         	goto	i2u218_41
  6130  000042  EF26  F000         	goto	i2u218_40
  6131  000046                     i2u218_41:
  6132  000046  FFFF               	dw	65535	; assembler added errata NOP
  6133  000048  EF2C  F000         	goto	i2l3217
  6134  00004C                     i2u218_40:
  6135  00004C  FFFF               	dw	65535	; assembler added errata NOP
  6136  00004E                     
  6137                           ;interrupt.c: 30:             T0CONbits.TMR0ON = 0;
  6138  00004E  9ED5               	bcf	213,7,c	;volatile
  6139  000050                     
  6140                           ;interrupt.c: 31:             tm0Count = 0;
  6141  000050  0E00               	movlw	0
  6142  000052  6E63               	movwf	isr@tm0Count^0,c
  6143  000054                     
  6144                           ;interrupt.c: 32:             writeTM0();
  6145  000054  ECC7  F010         	call	_writeTM0	;wreg free
  6146  000058                     i2l3217:
  6147  000058  FFFF               	dw	65535	; assembler added errata NOP
  6148                           
  6149                           ;interrupt.c: 37:     if(PIR1bits.TMR2IF){
  6150  00005A  A29E               	btfss	158,1,c	;volatile
  6151  00005C  EF32  F000         	goto	i2u219_41
  6152  000060  EF35  F000         	goto	i2u219_40
  6153  000064                     i2u219_41:
  6154  000064  FFFF               	dw	65535	; assembler added errata NOP
  6155  000066  EF63  F000         	goto	i2l3237
  6156  00006A                     i2u219_40:
  6157  00006A  FFFF               	dw	65535	; assembler added errata NOP
  6158  00006C                     
  6159                           ;interrupt.c: 38:         PIR1bits.TMR2IF = 0;
  6160  00006C  929E               	bcf	158,1,c	;volatile
  6161  00006E                     
  6162                           ;interrupt.c: 39:         single_cycle++;
  6163  00006E  4A51               	infsnz	isr@single_cycle^0,f,c
  6164  000070  2A52               	incf	(isr@single_cycle+1)^0,f,c
  6165  000072                     
  6166                           ;interrupt.c: 42:         if(single_cycle > retPeriod()){
  6167  000072  ECCE  F010         	call	_retPeriod	;wreg free
  6168  000076  5051               	movf	isr@single_cycle^0,w,c
  6169  000078  5C01               	subwf	?_retPeriod^0,w,c
  6170  00007A  5052               	movf	(isr@single_cycle+1)^0,w,c
  6171  00007C  5802               	subwfb	(?_retPeriod+1)^0,w,c
  6172  00007E  B0D8               	btfsc	status,0,c
  6173  000080  EF44  F000         	goto	i2u220_41
  6174  000084  EF47  F000         	goto	i2u220_40
  6175  000088                     i2u220_41:
  6176  000088  FFFF               	dw	65535	; assembler added errata NOP
  6177  00008A  EF63  F000         	goto	i2l3237
  6178  00008E                     i2u220_40:
  6179  00008E  FFFF               	dw	65535	; assembler added errata NOP
  6180  000090                     
  6181                           ;interrupt.c: 43:             completeStep++;
  6182  000090  2A62               	incf	isr@completeStep^0,f,c
  6183  000092                     
  6184                           ;interrupt.c: 46:             if(completeStep != 0 && !(completeStep % 2)){
  6185  000092  5062               	movf	isr@completeStep^0,w,c
  6186  000094  B4D8               	btfsc	status,2,c
  6187  000096  EF4F  F000         	goto	i2u221_41
  6188  00009A  EF52  F000         	goto	i2u221_40
  6189  00009E                     i2u221_41:
  6190  00009E  FFFF               	dw	65535	; assembler added errata NOP
  6191  0000A0  EF60  F000         	goto	i2l3235
  6192  0000A4                     i2u221_40:
  6193  0000A4  FFFF               	dw	65535	; assembler added errata NOP
  6194  0000A6  B062               	btfsc	isr@completeStep^0,0,c
  6195  0000A8  EF58  F000         	goto	i2u222_41
  6196  0000AC  EF5B  F000         	goto	i2u222_40
  6197  0000B0                     i2u222_41:
  6198  0000B0  FFFF               	dw	65535	; assembler added errata NOP
  6199  0000B2  EF60  F000         	goto	i2l3235
  6200  0000B6                     i2u222_40:
  6201  0000B6  FFFF               	dw	65535	; assembler added errata NOP
  6202  0000B8                     
  6203                           ;interrupt.c: 48:                 completeStep = 0;
  6204  0000B8  0E00               	movlw	0
  6205  0000BA  6E62               	movwf	isr@completeStep^0,c
  6206  0000BC                     
  6207                           ;interrupt.c: 51:                 increaseStep();
  6208  0000BC  EC10  F011         	call	_increaseStep	;wreg free
  6209  0000C0                     i2l3235:
  6210  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  6211                           
  6212                           ;interrupt.c: 56:             toggleStep();
  6213  0000C2  ECE5  F010         	call	_toggleStep	;wreg free
  6214  0000C6                     i2l3237:
  6215  0000C6  FFFF               	dw	65535	; assembler added errata NOP
  6216                           
  6217                           ;interrupt.c: 61:     if(PIR1bits.ADIF){
  6218  0000C8  AC9E               	btfss	158,6,c	;volatile
  6219  0000CA  EF69  F000         	goto	i2u223_41
  6220  0000CE  EF6C  F000         	goto	i2u223_40
  6221  0000D2                     i2u223_41:
  6222  0000D2  FFFF               	dw	65535	; assembler added errata NOP
  6223  0000D4  EF99  F000         	goto	i2l3249
  6224  0000D8                     i2u223_40:
  6225  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  6226  0000DA                     
  6227                           ;interrupt.c: 62:         PIR1bits.ADIF = 0;
  6228  0000DA  9C9E               	bcf	158,6,c	;volatile
  6229                           
  6230                           ;interrupt.c: 65:         ADC_res = ADRESL;
  6231  0000DC  CFC3 F053          	movff	4035,_ADC_res	;volatile
  6232  0000E0  6A54               	clrf	(_ADC_res+1)^0,c
  6233  0000E2                     
  6234                           ;interrupt.c: 66:         ADC_res |= (ADRESH << 8);
  6235  0000E2  50C4               	movf	196,w,c	;volatile
  6236  0000E4  6E0C               	movwf	(??_isr+1)^0,c
  6237  0000E6  6A0B               	clrf	??_isr^0,c
  6238  0000E8  500B               	movf	??_isr^0,w,c
  6239  0000EA  1253               	iorwf	_ADC_res^0,f,c
  6240  0000EC  500C               	movf	(??_isr+1)^0,w,c
  6241  0000EE  1254               	iorwf	(_ADC_res+1)^0,f,c
  6242                           
  6243                           ;interrupt.c: 69:         if(ADC_res > therm_pressure){
  6244  0000F0  0453               	decf	_ADC_res^0,w,c
  6245  0000F2  0E04               	movlw	4
  6246  0000F4  5854               	subwfb	(_ADC_res+1)^0,w,c
  6247  0000F6  A0D8               	btfss	status,0,c
  6248  0000F8  EF80  F000         	goto	i2u224_41
  6249  0000FC  EF83  F000         	goto	i2u224_40
  6250  000100                     i2u224_41:
  6251  000100  FFFF               	dw	65535	; assembler added errata NOP
  6252  000102  EF8A  F000         	goto	i2l3245
  6253  000106                     i2u224_40:
  6254  000106  FFFF               	dw	65535	; assembler added errata NOP
  6255  000108                     
  6256                           ;interrupt.c: 71:             setTouchRel();
  6257  000108  ECEA  F010         	call	_setTouchRel	;wreg free
  6258                           
  6259                           ;interrupt.c: 72:             setThermRel();
  6260  00010C  ECEF  F010         	call	_setThermRel	;wreg free
  6261                           
  6262                           ;interrupt.c: 73:         }else if(ADC_res > touch_pressure){
  6263  000110  EF99  F000         	goto	i2l3249
  6264  000114                     i2l3245:
  6265  000114  FFFF               	dw	65535	; assembler added errata NOP
  6266  000116  0453               	decf	_ADC_res^0,w,c
  6267  000118  0E02               	movlw	2
  6268  00011A  5854               	subwfb	(_ADC_res+1)^0,w,c
  6269  00011C  A0D8               	btfss	status,0,c
  6270  00011E  EF93  F000         	goto	i2u225_41
  6271  000122  EF96  F000         	goto	i2u225_40
  6272  000126                     i2u225_41:
  6273  000126  FFFF               	dw	65535	; assembler added errata NOP
  6274  000128  EF99  F000         	goto	i2l3249
  6275  00012C                     i2u225_40:
  6276  00012C  FFFF               	dw	65535	; assembler added errata NOP
  6277  00012E                     
  6278                           ;interrupt.c: 75:             setTouchRel();
  6279  00012E  ECEA  F010         	call	_setTouchRel	;wreg free
  6280  000132                     i2l3249:
  6281  000132  FFFF               	dw	65535	; assembler added errata NOP
  6282                           
  6283                           ;interrupt.c: 80:     if(PIR1bits.RC1IF){
  6284  000134  AA9E               	btfss	158,5,c	;volatile
  6285  000136  EF9F  F000         	goto	i2u226_41
  6286  00013A  EFA2  F000         	goto	i2u226_40
  6287  00013E                     i2u226_41:
  6288  00013E  FFFF               	dw	65535	; assembler added errata NOP
  6289  000140  EFA9  F000         	goto	i2l449
  6290  000144                     i2u226_40:
  6291  000144  FFFF               	dw	65535	; assembler added errata NOP
  6292  000146                     
  6293                           ;interrupt.c: 81:         PIR1bits.RC1IF = 0;
  6294  000146  9A9E               	bcf	158,5,c	;volatile
  6295                           
  6296                           ;interrupt.c: 84:         unsigned char temp = RCREG1;
  6297  000148  CFAE F011          	movff	4014,isr@temp	;volatile
  6298  00014C                     
  6299                           ;interrupt.c: 86:         storeData(temp);
  6300  00014C  5011               	movf	isr@temp^0,w,c
  6301  00014E  ECB7  F00A         	call	i2_storeData
  6302  000152                     i2l449:
  6303  000152  FFFF               	dw	65535	; assembler added errata NOP
  6304  000154  C010  FFF4         	movff	??_isr+5,prodh
  6305  000158  C00F  FFF3         	movff	??_isr+4,prodl
  6306  00015C  C00E  FFDA         	movff	??_isr+3,fsr2h
  6307  000160  C00D  FFD9         	movff	??_isr+2,fsr2l
  6308  000164  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6309  000166  0011               	retfie		f
  6310  000168  FFFF               	dw	65535	; errata NOP
  6311  00016A                     __end_of_isr:
  6312                           	callstack 0
  6313                           
  6314 ;; *************** function i2_storeData *****************
  6315 ;; Defined at:
  6316 ;;		line 131 in file "usart.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;  data            1    wreg     unsigned char 
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;  data            1    9[COMRAM] unsigned char 
  6321 ;; Return value:  Size  Location     Type
  6322 ;;                  1    wreg      void 
  6323 ;; Registers used:
  6324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6330 ;;      Params:         0       0       0       0       0       0       0
  6331 ;;      Locals:         1       0       0       0       0       0       0
  6332 ;;      Temps:          2       0       0       0       0       0       0
  6333 ;;      Totals:         3       0       0       0       0       0       0
  6334 ;;Total ram usage:        3 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; Hardware stack levels required when called:    2
  6337 ;; This function calls:
  6338 ;;		i2_printError
  6339 ;; This function is called by:
  6340 ;;		_isr
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           
  6344                           	psect	text37
  6345  00156E                     __ptext37:
  6346                           	callstack 0
  6347  00156E                     i2_storeData:
  6348                           	callstack 0
  6349  00156E  FFFF               	dw	65535	; assembler added errata NOP
  6350                           
  6351                           ;incstack = 0
  6352                           ;i2storeData@data stored from wreg
  6353  001570  6E0A               	movwf	i2storeData@data^0,c
  6354  001572                     
  6355                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  6356  001572  0E45               	movlw	low storeData@receivedMex
  6357  001574  245E               	addwf	storeData@counter^0,w,c
  6358  001576  6ED9               	movwf	fsr2l,c
  6359  001578  6ADA               	clrf	fsr2h,c
  6360  00157A  0E00               	movlw	high storeData@receivedMex
  6361  00157C  22DA               	addwfc	fsr2h,f,c
  6362  00157E  C00A  FFDF         	movff	i2storeData@data,indf2
  6363  001582                     
  6364                           ;usart.c: 142:     counter++;
  6365  001582  2A5E               	incf	storeData@counter^0,f,c
  6366                           
  6367                           ;usart.c: 145:     switch(receivedMex[0]){
  6368  001584  EFD3  F00A         	goto	i2l3023
  6369  001588                     i2l3015:
  6370  001588  FFFF               	dw	65535	; assembler added errata NOP
  6371                           
  6372                           ;usart.c: 147:             mexLength = 5;
  6373  00158A  0E05               	movlw	5
  6374  00158C  6E6D               	movwf	storeData@mexLength^0,c
  6375                           
  6376                           ;usart.c: 148:             break;
  6377  00158E  EFEE  F00A         	goto	i2l3025
  6378  001592                     i2l3017:
  6379  001592  FFFF               	dw	65535	; assembler added errata NOP
  6380                           
  6381                           ;usart.c: 150:             mexLength = 9;
  6382  001594  0E09               	movlw	9
  6383  001596  6E6D               	movwf	storeData@mexLength^0,c
  6384                           
  6385                           ;usart.c: 151:             break;
  6386  001598  EFEE  F00A         	goto	i2l3025
  6387  00159C                     i2l3019:
  6388  00159C  FFFF               	dw	65535	; assembler added errata NOP
  6389                           
  6390                           ;usart.c: 153:             mexLength = 1;
  6391  00159E  0E01               	movlw	1
  6392  0015A0  6E6D               	movwf	storeData@mexLength^0,c
  6393                           
  6394                           ;usart.c: 154:             break;
  6395  0015A2  EFEE  F00A         	goto	i2l3025
  6396  0015A6                     i2l3023:
  6397  0015A6  FFFF               	dw	65535	; assembler added errata NOP
  6398  0015A8  5045               	movf	storeData@receivedMex^0,w,c
  6399  0015AA  6E08               	movwf	??i2_storeData^0,c
  6400  0015AC  6A09               	clrf	(??i2_storeData+1)^0,c
  6401                           
  6402                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6403                           ; Switch size 1, requested type "simple"
  6404                           ; Number of cases is 1, Range of values is 0 to 0
  6405                           ; switch strategies available:
  6406                           ; Name         Instructions Cycles
  6407                           ; simple_byte            4     3 (average)
  6408                           ;	Chosen strategy is simple_byte
  6409  0015AE  5009               	movf	(??i2_storeData+1)^0,w,c
  6410  0015B0  0A00               	xorlw	0	; case 0
  6411  0015B2  B4D8               	btfsc	status,2,c
  6412  0015B4  EFDE  F00A         	goto	i2l4377
  6413  0015B8  EFEE  F00A         	goto	i2l3025
  6414  0015BC                     i2l4377:
  6415  0015BC  FFFF               	dw	65535	; assembler added errata NOP
  6416                           
  6417                           ; Switch size 1, requested type "simple"
  6418                           ; Number of cases is 3, Range of values is 0 to 2
  6419                           ; switch strategies available:
  6420                           ; Name         Instructions Cycles
  6421                           ; simple_byte           10     6 (average)
  6422                           ;	Chosen strategy is simple_byte
  6423  0015BE  5008               	movf	??i2_storeData^0,w,c
  6424  0015C0  0A00               	xorlw	0	; case 0
  6425  0015C2  B4D8               	btfsc	status,2,c
  6426  0015C4  EFC4  F00A         	goto	i2l3015
  6427  0015C8  0A01               	xorlw	1	; case 1
  6428  0015CA  B4D8               	btfsc	status,2,c
  6429  0015CC  EFC9  F00A         	goto	i2l3017
  6430  0015D0  0A03               	xorlw	3	; case 2
  6431  0015D2  B4D8               	btfsc	status,2,c
  6432  0015D4  EFCE  F00A         	goto	i2l3019
  6433  0015D8  EFEE  F00A         	goto	i2l3025
  6434  0015DC                     i2l3025:
  6435  0015DC  FFFF               	dw	65535	; assembler added errata NOP
  6436                           
  6437                           ;usart.c: 161:     if(counter >= mexLength){
  6438  0015DE  506D               	movf	storeData@mexLength^0,w,c
  6439  0015E0  5C5E               	subwf	storeData@counter^0,w,c
  6440  0015E2  A0D8               	btfss	status,0,c
  6441  0015E4  EFF6  F00A         	goto	i2u201_41
  6442  0015E8  EFF9  F00A         	goto	i2u201_40
  6443  0015EC                     i2u201_41:
  6444  0015EC  FFFF               	dw	65535	; assembler added errata NOP
  6445  0015EE  EF65  F00B         	goto	i2l548
  6446  0015F2                     i2u201_40:
  6447  0015F2  FFFF               	dw	65535	; assembler added errata NOP
  6448  0015F4                     
  6449                           ;usart.c: 162:         counter = 0;
  6450  0015F4  0E00               	movlw	0
  6451  0015F6  6E5E               	movwf	storeData@counter^0,c
  6452                           
  6453                           ;usart.c: 166:         switch(receivedMex[0]){
  6454  0015F8  EF4A  F00B         	goto	i2l3041
  6455  0015FC                     i2l3029:
  6456  0015FC  FFFF               	dw	65535	; assembler added errata NOP
  6457                           
  6458                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  6459  0015FE  5061               	movf	_dataCounter^0,w,c
  6460  001600  0D04               	mullw	4
  6461  001602  0ED8               	movlw	low _dataSequence
  6462  001604  24F3               	addwf	243,w,c
  6463  001606  6ED9               	movwf	fsr2l,c
  6464  001608  0E00               	movlw	high _dataSequence
  6465  00160A  20F4               	addwfc	prodh,w,c
  6466  00160C  6EDA               	movwf	fsr2h,c
  6467  00160E  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  6468                           
  6469                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  6470  001612  5061               	movf	_dataCounter^0,w,c
  6471  001614  0D04               	mullw	4
  6472  001616  0ED9               	movlw	low (_dataSequence+1)
  6473  001618  24F3               	addwf	243,w,c
  6474  00161A  6ED9               	movwf	fsr2l,c
  6475  00161C  0E00               	movlw	high (_dataSequence+1)
  6476  00161E  20F4               	addwfc	prodh,w,c
  6477  001620  6EDA               	movwf	fsr2h,c
  6478  001622  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  6479                           
  6480                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  6481  001626  5061               	movf	_dataCounter^0,w,c
  6482  001628  0D04               	mullw	4
  6483  00162A  0EDA               	movlw	low (_dataSequence+2)
  6484  00162C  24F3               	addwf	243,w,c
  6485  00162E  6ED9               	movwf	fsr2l,c
  6486  001630  0E00               	movlw	high (_dataSequence+2)
  6487  001632  20F4               	addwfc	prodh,w,c
  6488  001634  6EDA               	movwf	fsr2h,c
  6489  001636  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  6490                           
  6491                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  6492  00163A  5061               	movf	_dataCounter^0,w,c
  6493  00163C  0D04               	mullw	4
  6494  00163E  0EDB               	movlw	low (_dataSequence+3)
  6495  001640  24F3               	addwf	243,w,c
  6496  001642  6ED9               	movwf	fsr2l,c
  6497  001644  0E00               	movlw	high (_dataSequence+3)
  6498  001646  20F4               	addwfc	prodh,w,c
  6499  001648  6EDA               	movwf	fsr2h,c
  6500  00164A  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  6501  00164E                     
  6502                           ;usart.c: 173:                 dataCounter++;
  6503  00164E  2A61               	incf	_dataCounter^0,f,c
  6504                           
  6505                           ;usart.c: 174:                 break;
  6506  001650  EF65  F00B         	goto	i2l548
  6507  001654                     i2l545:
  6508  001654  FFFF               	dw	65535	; assembler added errata NOP
  6509                           
  6510                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  6511  001656  C046  F0EC         	movff	storeData@receivedMex+1,_newSequenceData
  6512                           
  6513                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  6514  00165A  C047  F0ED         	movff	storeData@receivedMex+2,_newSequenceData+1
  6515                           
  6516                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  6517  00165E  C048  F0EE         	movff	storeData@receivedMex+3,_newSequenceData+2
  6518                           
  6519                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  6520  001662  C049  F0EF         	movff	storeData@receivedMex+4,_newSequenceData+3
  6521                           
  6522                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  6523  001666  C04A  F0F0         	movff	storeData@receivedMex+5,_newSequenceData+4
  6524                           
  6525                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  6526  00166A  C04B  F0F1         	movff	storeData@receivedMex+6,_newSequenceData+5
  6527                           
  6528                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  6529  00166E  C04C  F0F2         	movff	storeData@receivedMex+7,_newSequenceData+6
  6530                           
  6531                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  6532  001672  C04D  F0F3         	movff	storeData@receivedMex+8,_newSequenceData+7
  6533  001676                     
  6534                           ;usart.c: 186:                 _newSequence = 1;
  6535  001676  0E01               	movlw	1
  6536  001678  6E5F               	movwf	__newSequence^0,c
  6537                           
  6538                           ;usart.c: 187:                 break;
  6539  00167A  EF65  F00B         	goto	i2l548
  6540  00167E                     i2l3035:
  6541  00167E  FFFF               	dw	65535	; assembler added errata NOP
  6542                           
  6543                           ;usart.c: 190:                 _fatalError = 1;
  6544  001680  0E01               	movlw	1
  6545  001682  6E60               	movwf	__fatalError^0,c
  6546                           
  6547                           ;usart.c: 191:                 break;
  6548  001684  EF65  F00B         	goto	i2l548
  6549  001688                     i2l3037:
  6550  001688  FFFF               	dw	65535	; assembler added errata NOP
  6551                           
  6552                           ;usart.c: 194:                 printError(8);
  6553  00168A  0E08               	movlw	8
  6554  00168C  EC91  F00C         	call	i2_printError
  6555                           
  6556                           ;usart.c: 195:                 break;
  6557  001690  EF65  F00B         	goto	i2l548
  6558  001694                     i2l3041:
  6559  001694  FFFF               	dw	65535	; assembler added errata NOP
  6560  001696  5045               	movf	storeData@receivedMex^0,w,c
  6561  001698  6E08               	movwf	??i2_storeData^0,c
  6562  00169A  6A09               	clrf	(??i2_storeData+1)^0,c
  6563                           
  6564                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6565                           ; Switch size 1, requested type "simple"
  6566                           ; Number of cases is 1, Range of values is 0 to 0
  6567                           ; switch strategies available:
  6568                           ; Name         Instructions Cycles
  6569                           ; simple_byte            4     3 (average)
  6570                           ;	Chosen strategy is simple_byte
  6571  00169C  5009               	movf	(??i2_storeData+1)^0,w,c
  6572  00169E  0A00               	xorlw	0	; case 0
  6573  0016A0  B4D8               	btfsc	status,2,c
  6574  0016A2  EF55  F00B         	goto	i2l4379
  6575  0016A6  EF44  F00B         	goto	i2l3037
  6576  0016AA                     i2l4379:
  6577  0016AA  FFFF               	dw	65535	; assembler added errata NOP
  6578                           
  6579                           ; Switch size 1, requested type "simple"
  6580                           ; Number of cases is 3, Range of values is 0 to 2
  6581                           ; switch strategies available:
  6582                           ; Name         Instructions Cycles
  6583                           ; simple_byte           10     6 (average)
  6584                           ;	Chosen strategy is simple_byte
  6585  0016AC  5008               	movf	??i2_storeData^0,w,c
  6586  0016AE  0A00               	xorlw	0	; case 0
  6587  0016B0  B4D8               	btfsc	status,2,c
  6588  0016B2  EFFE  F00A         	goto	i2l3029
  6589  0016B6  0A01               	xorlw	1	; case 1
  6590  0016B8  B4D8               	btfsc	status,2,c
  6591  0016BA  EF2A  F00B         	goto	i2l545
  6592  0016BE  0A03               	xorlw	3	; case 2
  6593  0016C0  B4D8               	btfsc	status,2,c
  6594  0016C2  EF3F  F00B         	goto	i2l3035
  6595  0016C6  EF44  F00B         	goto	i2l3037
  6596  0016CA                     i2l548:
  6597  0016CA  FFFF               	dw	65535	; assembler added errata NOP
  6598  0016CC  0012               	return		;funcret
  6599  0016CE  FFFF               	dw	65535	; errata NOP
  6600  0016D0                     __end_ofi2_storeData:
  6601                           	callstack 0
  6602                           
  6603 ;; *************** function i2_printError *****************
  6604 ;; Defined at:
  6605 ;;		line 53 in file "usart.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;  errCode         1    wreg     unsigned char 
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;  errCode         1    6[COMRAM] unsigned char 
  6610 ;; Return value:  Size  Location     Type
  6611 ;;                  1    wreg      void 
  6612 ;; Registers used:
  6613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6619 ;;      Params:         0       0       0       0       0       0       0
  6620 ;;      Locals:         1       0       0       0       0       0       0
  6621 ;;      Temps:          2       0       0       0       0       0       0
  6622 ;;      Totals:         3       0       0       0       0       0       0
  6623 ;;Total ram usage:        3 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; Hardware stack levels required when called:    1
  6626 ;; This function calls:
  6627 ;;		i2_uartTx
  6628 ;; This function is called by:
  6629 ;;		i2_storeData
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           	psect	text38
  6634  001922                     __ptext38:
  6635                           	callstack 0
  6636  001922                     i2_printError:
  6637                           	callstack 0
  6638  001922  FFFF               	dw	65535	; assembler added errata NOP
  6639                           
  6640                           ;incstack = 0
  6641                           ;i2printError@errCode stored from wreg
  6642  001924  6E07               	movwf	i2printError@errCode^0,c
  6643  001926                     
  6644                           ;usart.c: 55:     switch(errCode){
  6645  001926  EFED  F00C         	goto	i2l2761
  6646  00192A                     i2l2743:
  6647  00192A  FFFF               	dw	65535	; assembler added errata NOP
  6648                           
  6649                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  6650  00192C  0EA4               	movlw	low _errString_Feed
  6651  00192E  6E01               	movwf	i2uartTx@ptr^0,c
  6652  001930  0E00               	movlw	high _errString_Feed
  6653  001932  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6654  001934  0E1D               	movlw	29
  6655  001936  6E03               	movwf	i2uartTx@length^0,c
  6656  001938  EC1C  F010         	call	i2_uartTx	;wreg free
  6657                           
  6658                           ;usart.c: 58:             break;
  6659  00193C  EF1C  F00D         	goto	i2l504
  6660  001940                     i2l2745:
  6661  001940  FFFF               	dw	65535	; assembler added errata NOP
  6662                           
  6663                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  6664  001942  0E5C               	movlw	low _errString_ZEND
  6665  001944  6E01               	movwf	i2uartTx@ptr^0,c
  6666  001946  0E01               	movlw	high _errString_ZEND
  6667  001948  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6668  00194A  0E28               	movlw	40
  6669  00194C  6E03               	movwf	i2uartTx@length^0,c
  6670  00194E  EC1C  F010         	call	i2_uartTx	;wreg free
  6671                           
  6672                           ;usart.c: 61:             break;
  6673  001952  EF1C  F00D         	goto	i2l504
  6674  001956                     i2l2747:
  6675  001956  FFFF               	dw	65535	; assembler added errata NOP
  6676                           
  6677                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  6678  001958  0E84               	movlw	low _errString_Reset
  6679  00195A  6E01               	movwf	i2uartTx@ptr^0,c
  6680  00195C  0E01               	movlw	high _errString_Reset
  6681  00195E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6682  001960  0E27               	movlw	39
  6683  001962  6E03               	movwf	i2uartTx@length^0,c
  6684  001964  EC1C  F010         	call	i2_uartTx	;wreg free
  6685                           
  6686                           ;usart.c: 64:             break;
  6687  001968  EF1C  F00D         	goto	i2l504
  6688  00196C                     i2l2749:
  6689  00196C  FFFF               	dw	65535	; assembler added errata NOP
  6690                           
  6691                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  6692  00196E  0E34               	movlw	low _errString_Point
  6693  001970  6E01               	movwf	i2uartTx@ptr^0,c
  6694  001972  0E01               	movlw	high _errString_Point
  6695  001974  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6696  001976  0E28               	movlw	40
  6697  001978  6E03               	movwf	i2uartTx@length^0,c
  6698  00197A  EC1C  F010         	call	i2_uartTx	;wreg free
  6699                           
  6700                           ;usart.c: 67:             break;
  6701  00197E  EF1C  F00D         	goto	i2l504
  6702  001982                     i2l2751:
  6703  001982  FFFF               	dw	65535	; assembler added errata NOP
  6704                           
  6705                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  6706  001984  0E84               	movlw	low _errString_Bound
  6707  001986  6E01               	movwf	i2uartTx@ptr^0,c
  6708  001988  0E00               	movlw	high _errString_Bound
  6709  00198A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6710  00198C  0E20               	movlw	32
  6711  00198E  6E03               	movwf	i2uartTx@length^0,c
  6712  001990  EC1C  F010         	call	i2_uartTx	;wreg free
  6713                           
  6714                           ;usart.c: 70:             break;
  6715  001994  EF1C  F00D         	goto	i2l504
  6716  001998                     i2l2753:
  6717  001998  FFFF               	dw	65535	; assembler added errata NOP
  6718                           
  6719                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  6720  00199A  0E00               	movlw	low _errString_PointZ
  6721  00199C  6E01               	movwf	i2uartTx@ptr^0,c
  6722  00199E  0E01               	movlw	high _errString_PointZ
  6723  0019A0  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6724  0019A2  0E34               	movlw	52
  6725  0019A4  6E03               	movwf	i2uartTx@length^0,c
  6726  0019A6  EC1C  F010         	call	i2_uartTx	;wreg free
  6727                           
  6728                           ;usart.c: 73:             break;
  6729  0019AA  EF1C  F00D         	goto	i2l504
  6730  0019AE                     i2l2755:
  6731  0019AE  FFFF               	dw	65535	; assembler added errata NOP
  6732                           
  6733                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  6734  0019B0  0EAB               	movlw	low _errString_Fatal
  6735  0019B2  6E01               	movwf	i2uartTx@ptr^0,c
  6736  0019B4  0E01               	movlw	high _errString_Fatal
  6737  0019B6  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6738  0019B8  0E26               	movlw	38
  6739  0019BA  6E03               	movwf	i2uartTx@length^0,c
  6740  0019BC  EC1C  F010         	call	i2_uartTx	;wreg free
  6741                           
  6742                           ;usart.c: 76:             break;
  6743  0019C0  EF1C  F00D         	goto	i2l504
  6744  0019C4                     i2l2757:
  6745  0019C4  FFFF               	dw	65535	; assembler added errata NOP
  6746                           
  6747                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  6748  0019C6  0EC1               	movlw	low _errString_Command
  6749  0019C8  6E01               	movwf	i2uartTx@ptr^0,c
  6750  0019CA  0E00               	movlw	high _errString_Command
  6751  0019CC  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6752  0019CE  0E17               	movlw	23
  6753  0019D0  6E03               	movwf	i2uartTx@length^0,c
  6754  0019D2  EC1C  F010         	call	i2_uartTx	;wreg free
  6755                           
  6756                           ;usart.c: 79:             break;
  6757  0019D6  EF1C  F00D         	goto	i2l504
  6758  0019DA                     i2l2761:
  6759  0019DA  FFFF               	dw	65535	; assembler added errata NOP
  6760  0019DC  5007               	movf	i2printError@errCode^0,w,c
  6761  0019DE  6E05               	movwf	??i2_printError^0,c
  6762  0019E0  6A06               	clrf	(??i2_printError+1)^0,c
  6763                           
  6764                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6765                           ; Switch size 1, requested type "simple"
  6766                           ; Number of cases is 1, Range of values is 0 to 0
  6767                           ; switch strategies available:
  6768                           ; Name         Instructions Cycles
  6769                           ; simple_byte            4     3 (average)
  6770                           ;	Chosen strategy is simple_byte
  6771  0019E2  5006               	movf	(??i2_printError+1)^0,w,c
  6772  0019E4  0A00               	xorlw	0	; case 0
  6773  0019E6  B4D8               	btfsc	status,2,c
  6774  0019E8  EFF8  F00C         	goto	i2l4381
  6775  0019EC  EF1C  F00D         	goto	i2l504
  6776  0019F0                     i2l4381:
  6777  0019F0  FFFF               	dw	65535	; assembler added errata NOP
  6778                           
  6779                           ; Switch size 1, requested type "simple"
  6780                           ; Number of cases is 8, Range of values is 1 to 8
  6781                           ; switch strategies available:
  6782                           ; Name         Instructions Cycles
  6783                           ; simple_byte           25    13 (average)
  6784                           ;	Chosen strategy is simple_byte
  6785  0019F2  5005               	movf	??i2_printError^0,w,c
  6786  0019F4  0A01               	xorlw	1	; case 1
  6787  0019F6  B4D8               	btfsc	status,2,c
  6788  0019F8  EF95  F00C         	goto	i2l2743
  6789  0019FC  0A03               	xorlw	3	; case 2
  6790  0019FE  B4D8               	btfsc	status,2,c
  6791  001A00  EFA0  F00C         	goto	i2l2745
  6792  001A04  0A01               	xorlw	1	; case 3
  6793  001A06  B4D8               	btfsc	status,2,c
  6794  001A08  EFAB  F00C         	goto	i2l2747
  6795  001A0C  0A07               	xorlw	7	; case 4
  6796  001A0E  B4D8               	btfsc	status,2,c
  6797  001A10  EFB6  F00C         	goto	i2l2749
  6798  001A14  0A01               	xorlw	1	; case 5
  6799  001A16  B4D8               	btfsc	status,2,c
  6800  001A18  EFC1  F00C         	goto	i2l2751
  6801  001A1C  0A03               	xorlw	3	; case 6
  6802  001A1E  B4D8               	btfsc	status,2,c
  6803  001A20  EFCC  F00C         	goto	i2l2753
  6804  001A24  0A01               	xorlw	1	; case 7
  6805  001A26  B4D8               	btfsc	status,2,c
  6806  001A28  EFD7  F00C         	goto	i2l2755
  6807  001A2C  0A0F               	xorlw	15	; case 8
  6808  001A2E  B4D8               	btfsc	status,2,c
  6809  001A30  EFE2  F00C         	goto	i2l2757
  6810  001A34  EF1C  F00D         	goto	i2l504
  6811  001A38                     i2l504:
  6812  001A38  FFFF               	dw	65535	; assembler added errata NOP
  6813  001A3A  0012               	return		;funcret
  6814  001A3C  FFFF               	dw	65535	; errata NOP
  6815  001A3E                     __end_ofi2_printError:
  6816                           	callstack 0
  6817                           
  6818 ;; *************** function i2_uartTx *****************
  6819 ;; Defined at:
  6820 ;;		line 221 in file "usart.c"
  6821 ;; Parameters:    Size  Location     Type
  6822 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  6823 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  6824 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  6825 ;;  length          1    2[COMRAM] unsigned char 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  i               1    3[COMRAM] unsigned char 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  1    wreg      void 
  6830 ;; Registers used:
  6831 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6837 ;;      Params:         3       0       0       0       0       0       0
  6838 ;;      Locals:         1       0       0       0       0       0       0
  6839 ;;      Temps:          0       0       0       0       0       0       0
  6840 ;;      Totals:         4       0       0       0       0       0       0
  6841 ;;Total ram usage:        4 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; This function calls:
  6844 ;;		Nothing
  6845 ;; This function is called by:
  6846 ;;		i2_printError
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           	psect	text39
  6851  002038                     __ptext39:
  6852                           	callstack 0
  6853  002038                     i2_uartTx:
  6854                           	callstack 0
  6855  002038  FFFF               	dw	65535	; assembler added errata NOP
  6856  00203A                     
  6857                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  6858  00203A  0E01               	movlw	1
  6859  00203C  6E04               	movwf	i2uartTx@i^0,c
  6860  00203E  EF35  F010         	goto	i2l2555
  6861  002042                     i2l2551:
  6862  002042  FFFF               	dw	65535	; assembler added errata NOP
  6863                           
  6864                           ;usart.c: 226:         TXREG = *ptr;
  6865  002044  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  6866  002048  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  6867  00204C  50DF               	movf	indf2,w,c
  6868  00204E  6EAD               	movwf	173,c	;volatile
  6869  002050                     i2l559:
  6870  002050  FFFF               	dw	65535	; assembler added errata NOP
  6871  002052  A2AC               	btfss	172,1,c	;volatile
  6872  002054  EF2E  F010         	goto	i2u159_41
  6873  002058  EF31  F010         	goto	i2u159_40
  6874  00205C                     i2u159_41:
  6875  00205C  FFFF               	dw	65535	; assembler added errata NOP
  6876  00205E  EF28  F010         	goto	i2l559
  6877  002062                     i2u159_40:
  6878  002062  FFFF               	dw	65535	; assembler added errata NOP
  6879  002064                     
  6880                           ;usart.c: 230:         ptr++;
  6881  002064  4A01               	infsnz	i2uartTx@ptr^0,f,c
  6882  002066  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  6883                           
  6884                           ;usart.c: 231:     }
  6885  002068  2A04               	incf	i2uartTx@i^0,f,c
  6886  00206A                     i2l2555:
  6887  00206A  FFFF               	dw	65535	; assembler added errata NOP
  6888  00206C  5003               	movf	i2uartTx@length^0,w,c
  6889  00206E  5C04               	subwf	i2uartTx@i^0,w,c
  6890  002070  A0D8               	btfss	status,0,c
  6891  002072  EF3D  F010         	goto	i2u160_41
  6892  002076  EF40  F010         	goto	i2u160_40
  6893  00207A                     i2u160_41:
  6894  00207A  FFFF               	dw	65535	; assembler added errata NOP
  6895  00207C  EF21  F010         	goto	i2l2551
  6896  002080                     i2u160_40:
  6897  002080  FFFF               	dw	65535	; assembler added errata NOP
  6898  002082  0012               	return		;funcret
  6899  002084  FFFF               	dw	65535	; errata NOP
  6900  002086                     __end_ofi2_uartTx:
  6901                           	callstack 0
  6902                           
  6903 ;; *************** function _writeTM0 *****************
  6904 ;; Defined at:
  6905 ;;		line 23 in file "motors.c"
  6906 ;; Parameters:    Size  Location     Type
  6907 ;;		None
  6908 ;; Auto vars:     Size  Location     Type
  6909 ;;		None
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  1    wreg      void 
  6912 ;; Registers used:
  6913 ;;		wreg, status,2
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6919 ;;      Params:         0       0       0       0       0       0       0
  6920 ;;      Locals:         0       0       0       0       0       0       0
  6921 ;;      Temps:          0       0       0       0       0       0       0
  6922 ;;      Totals:         0       0       0       0       0       0       0
  6923 ;;Total ram usage:        0 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; This function calls:
  6926 ;;		Nothing
  6927 ;; This function is called by:
  6928 ;;		_isr
  6929 ;; This function uses a non-reentrant model
  6930 ;;
  6931                           
  6932                           	psect	text40
  6933  00218E                     __ptext40:
  6934                           	callstack 0
  6935  00218E                     _writeTM0:
  6936                           	callstack 0
  6937  00218E  FFFF               	dw	65535	; assembler added errata NOP
  6938  002190                     
  6939                           ;motors.c: 24:     tm0Error = 1;
  6940  002190  0E00               	movlw	0
  6941  002192  6E5C               	movwf	(_tm0Error+1)^0,c
  6942  002194  0E01               	movlw	1
  6943  002196  6E5B               	movwf	_tm0Error^0,c
  6944  002198  0012               	return		;funcret
  6945  00219A  FFFF               	dw	65535	; errata NOP
  6946  00219C                     __end_of_writeTM0:
  6947                           	callstack 0
  6948                           
  6949 ;; *************** function _whatsTM0Limit *****************
  6950 ;; Defined at:
  6951 ;;		line 37 in file "motors.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;		None
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;		None
  6956 ;; Return value:  Size  Location     Type
  6957 ;;                  1    wreg      unsigned char 
  6958 ;; Registers used:
  6959 ;;		wreg, status,2
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6965 ;;      Params:         0       0       0       0       0       0       0
  6966 ;;      Locals:         0       0       0       0       0       0       0
  6967 ;;      Temps:          0       0       0       0       0       0       0
  6968 ;;      Totals:         0       0       0       0       0       0       0
  6969 ;;Total ram usage:        0 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; This function calls:
  6972 ;;		Nothing
  6973 ;; This function is called by:
  6974 ;;		_isr
  6975 ;; This function uses a non-reentrant model
  6976 ;;
  6977                           
  6978                           	psect	text41
  6979  002218                     __ptext41:
  6980                           	callstack 0
  6981  002218                     _whatsTM0Limit:
  6982                           	callstack 0
  6983  002218  FFFF               	dw	65535	; assembler added errata NOP
  6984  00221A                     
  6985                           ;motors.c: 38:     return(tm0Limit);
  6986  00221A  5068               	movf	_tm0Limit^0,w,c
  6987  00221C  0012               	return		;funcret
  6988  00221E  FFFF               	dw	65535	; errata NOP
  6989  002220                     __end_of_whatsTM0Limit:
  6990                           	callstack 0
  6991                           
  6992 ;; *************** function _toggleStep *****************
  6993 ;; Defined at:
  6994 ;;		line 81 in file "pwm.c"
  6995 ;; Parameters:    Size  Location     Type
  6996 ;;		None
  6997 ;; Auto vars:     Size  Location     Type
  6998 ;;		None
  6999 ;; Return value:  Size  Location     Type
  7000 ;;                  1    wreg      void 
  7001 ;; Registers used:
  7002 ;;		wreg, status,2
  7003 ;; Tracked objects:
  7004 ;;		On entry : 0/0
  7005 ;;		On exit  : 0/0
  7006 ;;		Unchanged: 0/0
  7007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7008 ;;      Params:         0       0       0       0       0       0       0
  7009 ;;      Locals:         0       0       0       0       0       0       0
  7010 ;;      Temps:          0       0       0       0       0       0       0
  7011 ;;      Totals:         0       0       0       0       0       0       0
  7012 ;;Total ram usage:        0 bytes
  7013 ;; Hardware stack levels used:    1
  7014 ;; This function calls:
  7015 ;;		Nothing
  7016 ;; This function is called by:
  7017 ;;		_isr
  7018 ;; This function uses a non-reentrant model
  7019 ;;
  7020                           
  7021                           	psect	text42
  7022  0021CA                     __ptext42:
  7023                           	callstack 0
  7024  0021CA                     _toggleStep:
  7025                           	callstack 0
  7026  0021CA  FFFF               	dw	65535	; assembler added errata NOP
  7027  0021CC                     
  7028                           ;pwm.c: 82:     stepToggle = 1;
  7029  0021CC  0E01               	movlw	1
  7030  0021CE  6E66               	movwf	_stepToggle^0,c	;volatile
  7031  0021D0  0012               	return		;funcret
  7032  0021D2  FFFF               	dw	65535	; errata NOP
  7033  0021D4                     __end_of_toggleStep:
  7034                           	callstack 0
  7035                           
  7036 ;; *************** function _setTouchRel *****************
  7037 ;; Defined at:
  7038 ;;		line 85 in file "adc.c"
  7039 ;; Parameters:    Size  Location     Type
  7040 ;;		None
  7041 ;; Auto vars:     Size  Location     Type
  7042 ;;		None
  7043 ;; Return value:  Size  Location     Type
  7044 ;;                  1    wreg      void 
  7045 ;; Registers used:
  7046 ;;		wreg, status,2
  7047 ;; Tracked objects:
  7048 ;;		On entry : 0/0
  7049 ;;		On exit  : 0/0
  7050 ;;		Unchanged: 0/0
  7051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7052 ;;      Params:         0       0       0       0       0       0       0
  7053 ;;      Locals:         0       0       0       0       0       0       0
  7054 ;;      Temps:          0       0       0       0       0       0       0
  7055 ;;      Totals:         0       0       0       0       0       0       0
  7056 ;;Total ram usage:        0 bytes
  7057 ;; Hardware stack levels used:    1
  7058 ;; This function calls:
  7059 ;;		Nothing
  7060 ;; This function is called by:
  7061 ;;		_isr
  7062 ;; This function uses a non-reentrant model
  7063 ;;
  7064                           
  7065                           	psect	text43
  7066  0021D4                     __ptext43:
  7067                           	callstack 0
  7068  0021D4                     _setTouchRel:
  7069                           	callstack 0
  7070  0021D4  FFFF               	dw	65535	; assembler added errata NOP
  7071  0021D6                     
  7072                           ;adc.c: 86:     touch_rel = 1;
  7073  0021D6  0E01               	movlw	1
  7074  0021D8  6E65               	movwf	_touch_rel^0,c	;volatile
  7075  0021DA  0012               	return		;funcret
  7076  0021DC  FFFF               	dw	65535	; errata NOP
  7077  0021DE                     __end_of_setTouchRel:
  7078                           	callstack 0
  7079                           
  7080 ;; *************** function _setThermRel *****************
  7081 ;; Defined at:
  7082 ;;		line 78 in file "adc.c"
  7083 ;; Parameters:    Size  Location     Type
  7084 ;;		None
  7085 ;; Auto vars:     Size  Location     Type
  7086 ;;		None
  7087 ;; Return value:  Size  Location     Type
  7088 ;;                  1    wreg      void 
  7089 ;; Registers used:
  7090 ;;		wreg, status,2
  7091 ;; Tracked objects:
  7092 ;;		On entry : 0/0
  7093 ;;		On exit  : 0/0
  7094 ;;		Unchanged: 0/0
  7095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7096 ;;      Params:         0       0       0       0       0       0       0
  7097 ;;      Locals:         0       0       0       0       0       0       0
  7098 ;;      Temps:          0       0       0       0       0       0       0
  7099 ;;      Totals:         0       0       0       0       0       0       0
  7100 ;;Total ram usage:        0 bytes
  7101 ;; Hardware stack levels used:    1
  7102 ;; This function calls:
  7103 ;;		Nothing
  7104 ;; This function is called by:
  7105 ;;		_isr
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           	psect	text44
  7110  0021DE                     __ptext44:
  7111                           	callstack 0
  7112  0021DE                     _setThermRel:
  7113                           	callstack 0
  7114  0021DE  FFFF               	dw	65535	; assembler added errata NOP
  7115  0021E0                     
  7116                           ;adc.c: 79:     therm_rel = 1;
  7117  0021E0  0E01               	movlw	1
  7118  0021E2  6E64               	movwf	_therm_rel^0,c	;volatile
  7119  0021E4  0012               	return		;funcret
  7120  0021E6  FFFF               	dw	65535	; errata NOP
  7121  0021E8                     __end_of_setThermRel:
  7122                           	callstack 0
  7123                           
  7124 ;; *************** function _retPeriod *****************
  7125 ;; Defined at:
  7126 ;;		line 89 in file "pwm.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;		None
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;		None
  7131 ;; Return value:  Size  Location     Type
  7132 ;;                  2    0[COMRAM] unsigned int 
  7133 ;; Registers used:
  7134 ;;		None
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7140 ;;      Params:         2       0       0       0       0       0       0
  7141 ;;      Locals:         0       0       0       0       0       0       0
  7142 ;;      Temps:          0       0       0       0       0       0       0
  7143 ;;      Totals:         2       0       0       0       0       0       0
  7144 ;;Total ram usage:        2 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; This function calls:
  7147 ;;		Nothing
  7148 ;; This function is called by:
  7149 ;;		_isr
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           	psect	text45
  7154  00219C                     __ptext45:
  7155                           	callstack 0
  7156  00219C                     _retPeriod:
  7157                           	callstack 0
  7158  00219C  FFFF               	dw	65535	; assembler added errata NOP
  7159  00219E                     
  7160                           ;pwm.c: 90:     return pwmPeriod;
  7161  00219E  C055  F001         	movff	_pwmPeriod,?_retPeriod
  7162  0021A2  C056  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7163  0021A6  0012               	return		;funcret
  7164  0021A8  FFFF               	dw	65535	; errata NOP
  7165  0021AA                     __end_of_retPeriod:
  7166                           	callstack 0
  7167                           
  7168 ;; *************** function _increaseStep *****************
  7169 ;; Defined at:
  7170 ;;		line 73 in file "pwm.c"
  7171 ;; Parameters:    Size  Location     Type
  7172 ;;		None
  7173 ;; Auto vars:     Size  Location     Type
  7174 ;;		None
  7175 ;; Return value:  Size  Location     Type
  7176 ;;                  1    wreg      void 
  7177 ;; Registers used:
  7178 ;;		status,2, status,0
  7179 ;; Tracked objects:
  7180 ;;		On entry : 0/0
  7181 ;;		On exit  : 0/0
  7182 ;;		Unchanged: 0/0
  7183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7184 ;;      Params:         0       0       0       0       0       0       0
  7185 ;;      Locals:         0       0       0       0       0       0       0
  7186 ;;      Temps:          0       0       0       0       0       0       0
  7187 ;;      Totals:         0       0       0       0       0       0       0
  7188 ;;Total ram usage:        0 bytes
  7189 ;; Hardware stack levels used:    1
  7190 ;; This function calls:
  7191 ;;		Nothing
  7192 ;; This function is called by:
  7193 ;;		_isr
  7194 ;; This function uses a non-reentrant model
  7195 ;;
  7196                           
  7197                           	psect	text46
  7198  002220                     __ptext46:
  7199                           	callstack 0
  7200  002220                     _increaseStep:
  7201                           	callstack 0
  7202  002220  FFFF               	dw	65535	; assembler added errata NOP
  7203  002222                     
  7204                           ;pwm.c: 74:     pwmStep++;
  7205  002222  2A67               	incf	_pwmStep^0,f,c	;volatile
  7206  002224  0012               	return		;funcret
  7207  002226  FFFF               	dw	65535	; errata NOP
  7208  002228                     __end_of_increaseStep:
  7209                           	callstack 0
  7210                           
  7211                           	psect	rparam
  7212  0000                     
  7213                           	psect	temp
  7214  00006E                     btemp:
  7215                           	callstack 0
  7216  00006E                     	ds	1
  7217  0000                     int$flags	set	btemp
  7218  0000                     wtemp8	set	btemp+1
  7219  0000                     ttemp5	set	btemp+1
  7220  0000                     ttemp6	set	btemp+4
  7221  0000                     ttemp7	set	btemp+8
  7222                           
  7223                           	psect	idloc
  7224                           
  7225                           ;Config register IDLOC0 @ 0x200000
  7226                           ;	unspecified, using default values
  7227  200000                     	org	2097152
  7228  200000  FF                 	db	255
  7229                           
  7230                           ;Config register IDLOC1 @ 0x200001
  7231                           ;	unspecified, using default values
  7232  200001                     	org	2097153
  7233  200001  FF                 	db	255
  7234                           
  7235                           ;Config register IDLOC2 @ 0x200002
  7236                           ;	unspecified, using default values
  7237  200002                     	org	2097154
  7238  200002  FF                 	db	255
  7239                           
  7240                           ;Config register IDLOC3 @ 0x200003
  7241                           ;	unspecified, using default values
  7242  200003                     	org	2097155
  7243  200003  FF                 	db	255
  7244                           
  7245                           ;Config register IDLOC4 @ 0x200004
  7246                           ;	unspecified, using default values
  7247  200004                     	org	2097156
  7248  200004  FF                 	db	255
  7249                           
  7250                           ;Config register IDLOC5 @ 0x200005
  7251                           ;	unspecified, using default values
  7252  200005                     	org	2097157
  7253  200005  FF                 	db	255
  7254                           
  7255                           ;Config register IDLOC6 @ 0x200006
  7256                           ;	unspecified, using default values
  7257  200006                     	org	2097158
  7258  200006  FF                 	db	255
  7259                           
  7260                           ;Config register IDLOC7 @ 0x200007
  7261                           ;	unspecified, using default values
  7262  200007                     	org	2097159
  7263  200007  FF                 	db	255
  7264                           
  7265                           	psect	config
  7266                           
  7267                           ; Padding undefined space
  7268  300000                     	org	3145728
  7269  300000  FF                 	db	255
  7270                           
  7271                           ;Config register CONFIG1H @ 0x300001
  7272                           ;	Oscillator Selection bits
  7273                           ;	OSC = XT, XT oscillator
  7274                           ;	Oscillator System Clock Switch Enable bit
  7275                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  7276  300001                     	org	3145729
  7277  300001  21                 	db	33
  7278                           
  7279                           ;Config register CONFIG2L @ 0x300002
  7280                           ;	Power-up Timer Enable bit
  7281                           ;	PWRT = OFF, PWRT disabled
  7282                           ;	Brown-out Reset Enable bit
  7283                           ;	BOR = OFF, Brown-out Reset disabled
  7284                           ;	Brown-out Reset Voltage bits
  7285                           ;	BORV = 20, VBOR set to 2.0V
  7286  300002                     	org	3145730
  7287  300002  0D                 	db	13
  7288                           
  7289                           ;Config register CONFIG2H @ 0x300003
  7290                           ;	Watchdog Timer Enable bit
  7291                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7292                           ;	Watchdog Timer Postscale Select bits
  7293                           ;	WDTPS = 128, 1:128
  7294  300003                     	org	3145731
  7295  300003  0E                 	db	14
  7296                           
  7297                           ; Padding undefined space
  7298  300004                     	org	3145732
  7299  300004  FF                 	db	255
  7300                           
  7301                           ;Config register CONFIG3H @ 0x300005
  7302                           ;	CCP2 Mux bit
  7303                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  7304  300005                     	org	3145733
  7305  300005  00                 	db	0
  7306                           
  7307                           ;Config register CONFIG4L @ 0x300006
  7308                           ;	Stack Full/Underflow Reset Enable bit
  7309                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  7310                           ;	Low Voltage ICSP Enable bit
  7311                           ;	LVP = OFF, Low Voltage ICSP disabled
  7312                           ;	Background Debugger Enable bit
  7313                           ;	DEBUG = 0x1, unprogrammed default
  7314  300006                     	org	3145734
  7315  300006  80                 	db	128
  7316                           
  7317                           ; Padding undefined space
  7318  300007                     	org	3145735
  7319  300007  FF                 	db	255
  7320                           
  7321                           ;Config register CONFIG5L @ 0x300008
  7322                           ;	Code Protection bit
  7323                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  7324                           ;	Code Protection bit
  7325                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  7326                           ;	Code Protection bit
  7327                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  7328                           ;	Code Protection bit
  7329                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  7330  300008                     	org	3145736
  7331  300008  0F                 	db	15
  7332                           
  7333                           ;Config register CONFIG5H @ 0x300009
  7334                           ;	Boot Block Code Protection bit
  7335                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  7336                           ;	Data EEPROM Code Protection bit
  7337                           ;	CPD = OFF, Data EEPROM not code protected
  7338  300009                     	org	3145737
  7339  300009  C0                 	db	192
  7340                           
  7341                           ;Config register CONFIG6L @ 0x30000A
  7342                           ;	Write Protection bit
  7343                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  7344                           ;	Write Protection bit
  7345                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  7346                           ;	Write Protection bit
  7347                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  7348                           ;	Write Protection bit
  7349                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  7350  30000A                     	org	3145738
  7351  30000A  0F                 	db	15
  7352                           
  7353                           ;Config register CONFIG6H @ 0x30000B
  7354                           ;	Configuration Register Write Protection bit
  7355                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  7356                           ;	Boot Block Write Protection bit
  7357                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  7358                           ;	Data EEPROM Write Protection bit
  7359                           ;	WRTD = OFF, Data EEPROM not write protected
  7360  30000B                     	org	3145739
  7361  30000B  E0                 	db	224
  7362                           
  7363                           ;Config register CONFIG7L @ 0x30000C
  7364                           ;	Table Read Protection bit
  7365                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  7366                           ;	Table Read Protection bit
  7367                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  7368                           ;	Table Read Protection bit
  7369                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  7370                           ;	Table Read Protection bit
  7371                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  7372  30000C                     	org	3145740
  7373  30000C  0F                 	db	15
  7374                           
  7375                           ;Config register CONFIG7H @ 0x30000D
  7376                           ;	Boot Block Table Read Protection bit
  7377                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  7378  30000D                     	org	3145741
  7379  30000D  40                 	db	64
  7380                           tosu	equ	0xFFF
  7381                           tosh	equ	0xFFE
  7382                           tosl	equ	0xFFD
  7383                           stkptr	equ	0xFFC
  7384                           pclatu	equ	0xFFB
  7385                           pclath	equ	0xFFA
  7386                           pcl	equ	0xFF9
  7387                           tblptru	equ	0xFF8
  7388                           tblptrh	equ	0xFF7
  7389                           tblptrl	equ	0xFF6
  7390                           tablat	equ	0xFF5
  7391                           prodh	equ	0xFF4
  7392                           prodl	equ	0xFF3
  7393                           indf0	equ	0xFEF
  7394                           postinc0	equ	0xFEE
  7395                           postdec0	equ	0xFED
  7396                           preinc0	equ	0xFEC
  7397                           plusw0	equ	0xFEB
  7398                           fsr0h	equ	0xFEA
  7399                           fsr0l	equ	0xFE9
  7400                           wreg	equ	0xFE8
  7401                           indf1	equ	0xFE7
  7402                           postinc1	equ	0xFE6
  7403                           postdec1	equ	0xFE5
  7404                           preinc1	equ	0xFE4
  7405                           plusw1	equ	0xFE3
  7406                           fsr1h	equ	0xFE2
  7407                           fsr1l	equ	0xFE1
  7408                           bsr	equ	0xFE0
  7409                           indf2	equ	0xFDF
  7410                           postinc2	equ	0xFDE
  7411                           postdec2	equ	0xFDD
  7412                           preinc2	equ	0xFDC
  7413                           plusw2	equ	0xFDB
  7414                           fsr2h	equ	0xFDA
  7415                           fsr2l	equ	0xFD9
  7416                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    14
    Data        302
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     68     109
    BANK0           128     12     128
    BANK1           256      3     212
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 52
		 -> errString_Command(BANK0[23]), errString_Fatal(BANK1[38]), errString_PointZ(BANK1[52]), errString_Bound(BANK0[32]), 
		 -> errString_Point(BANK1[40]), errString_Reset(BANK1[39]), errString_ZEND(BANK1[40]), errString_Feed(BANK0[29]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_executeData
    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_enableMotor
    _resetPosition->_setDecay
    _resetPosition->_setDirection
    _resetPosition->_setStep
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _moveToPoint->_setDirection
    _liftArm->_setDirection

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   14866
                                             10 BANK0      2     2      0
                                              0 BANK1      3     3      0
                           _clearTM0
                        _enableMotor
                        _executeData
                         _fatalError
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0    2807
                                             21 COMRAM     3     3      0
                        _enableMotor
                          _resetStep
                           _setDecay
                       _setDirection
                            _setStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _setStep                                              4     3      1     487
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _setDecay                                             4     3      1     394
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _enableMotor                                          4     3      1     664
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    7707
                                             66 COMRAM     2     2      0
                                              7 BANK0      3     3      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3129
                                              0 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         12     4      8    3242
                                             21 COMRAM    12     4      8
                          _resetStep
                       _setDirection
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0    1058
                          _resetStep
                       _setDirection
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _setDirection                                         4     3      1    1024
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0     552
                                             10 COMRAM     7     7      0
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _enableMotor
   _executeData
     _getData
     _liftArm
       _resetStep
       _setDirection
       _stepMade
     _moveToPoint
       _resetStep
       _setDirection
       _stepCounter
       _stepMade
     _pickObject
     _releaseObj
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
   _fatalError
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _enableMotor
     _resetStep
     _setDecay
     _setDirection
     _setStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      3      D4       7       82.8%
BITBANK0            80      0       0       4        0.0%
BANK0               80      C      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     44      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C1      15        0.0%
DATA                 0      0     1C1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu Jan 28 11:37:45 2021

                                                  ___fldiv@aexp 0038  
                                                  ___fldiv@bexp 0037  
                                         __end_of_interruptInit 20C0  
                                                  ___fldiv@sign 0030  
                                                            l74 20E2  
                                                            l83 1B0E  
                                                            l68 218A  
                                                            l92 1EB8  
                                                           l101 1F2C  
                                                           l110 1E44  
                                                           l200 1D4C  
                                                           l120 0FB2  
                                                           l121 0FE2  
                                                           l210 1C9C  
                                                           l131 1036  
                                                           l115 0F7E  
                                                           l124 0FE6  
                                                           l116 1092  
                                                           l141 1290  
                                                           l213 2214  
                                                           l125 1016  
                                                           l117 0FAE  
                                                           l150 11DC  
                                                           l135 10A8  
                                                           l152 1212  
                                                           l216 220C  
                                                           l321 0CBE  
                                                           l307 209C  
                                                           l340 214E  
                                                           l156 1232  
                                                           l308 20B2  
                                                           l149 1278  
                                                           l309 20BC  
                                                           l190 1D22  
                                                           l510 21F4  
                                                           l334 2160  
                                                           l343 21B2  
                                                           l192 1CE6  
                                                           l504 191C  
                                                           l193 1D34  
                                                           l513 2204  
                                                           l337 213A  
                                                           l346 21C6  
                                                           l370 2108  
                                                           l507 21EC  
                                                           l196 1D06  
                                                           l516 21FC  
                                                           l524 1F8E  
                                                           l551 217C  
                                                           l519 21BC  
                                                           l295 12FC  
                                                           l296 12FE  
                                                           l545 14F2  
                                                           l554 216E  
                                                           l490 2126  
                                                           l298 1402  
                                                           l563 2034  
                                                           l548 1568  
                                                           l559 2002  
                                                           l863 1800  
                                                           _isr 0008  
                                                           prod 000FF3  
                                                           wreg 000FE8  
                                                  ___fltol@exp1 0042  
                                                   main@errCode 01D1  
                                                          l1221 0D22  
                                                          l1150 0854  
                                                          l1224 0EB4  
                                                          l1161 093A  
                                                          l1153 080E  
                                                          l1162 0922  
                                                          l1235 0E3A  
                                                          l1148 0A3C  
                                                          l1228 0DCE  
                                                          l1159 08AA  
                                                          l3301 1EC6  
                                                          l4101 133A  
                                                          l3303 1ED6  
                                                          l4111 136C  
                                                          l4103 134A  
                                                          l3305 1EE6  
                                                          l3401 07C8  
                                                          l4121 13BE  
                                                          l4113 1380  
                                                          l4105 134C  
                                                          l3323 21C2  
                                                          l3315 2140  
                                                          l3411 081A  
                                                          l3403 07D0  
                                                          l3331 2016  
                                                          l4131 13F0  
                                                          l4123 13C4  
                                                          l4115 13B0  
                                                          l4107 1352  
                                                          l3309 1EF6  
                                                          l3317 2144  
                                                          l3325 21AC  
                                                          l3421 0884  
                                                          l3413 083E  
                                                          l3405 07E6  
                                                          l3341 0632  
                                                          l3333 201C  
                                                          l4133 13F8  
                                                          l4125 13CA  
                                                          l4117 13B2  
                                                          l4109 1358  
                                                          l3319 2148  
                                                          l3431 08D0  
                                                          l3423 088A  
                                                          l3415 0840  
                                                          l3407 07FA  
                                                          l3343 0648  
                                                          l3351 0678  
                                                          l3335 0612  
                                                          l3511 17DE  
                                                          l3327 1FEC  
                                                          l4127 13CE  
                                                          l4119 13B6  
                                                          l3441 0950  
                                                          l3433 08D4  
                                                          l3425 0896  
                                                          l3417 0850  
                                                          l3409 080C  
                                                          l3361 06AC  
                                                          l3353 068A  
                                                          l3345 065C  
                                                          l3337 061E  
                                                          l3513 17EE  
                                                          l3505 17A6  
                                                          l3521 0CEC  
                                                          l3601 1DFE  
                                                          l3329 1FF4  
                                                          l4129 13D6  
                                                          l4081 12A4  
                                                          l4073 1296  
                                                          l3611 10AE  
                                                          l3451 09BC  
                                                          l3443 095C  
                                                          l3435 08E6  
                                                          l3427 08A8  
                                                          l3419 086A  
                                                          l3363 06C2  
                                                          l3371 06F2  
                                                          l3355 0692  
                                                          l3347 066C  
                                                          l3339 0630  
                                                          l3507 17B4  
                                                          l3531 0D6E  
                                                          l3523 0D34  
                                                          l4091 12D8  
                                                          l4083 12A8  
                                                          l4075 1296  
                                                          l3621 110C  
                                                          l3613 10C8  
                                                          l3461 0A26  
                                                          l3453 09D2  
                                                          l3445 096E  
                                                          l3437 0918  
                                                          l3429 08BC  
                                                          l3381 073E  
                                                          l3373 0704  
                                                          l3365 06D6  
                                                          l3357 0698  
                                                          l3349 0670  
                                                          l3509 17C8  
                                                          l3541 0E06  
                                                          l3533 0D7C  
                                                          l3525 0D50  
                                                          l3517 0CC6  
                                                          l3701 1BEC  
                                                          l3605 1E0E  
                                                          l4093 12F6  
                                                          l4085 12B8  
                                                          l4077 129C  
                                                          l3631 1164  
                                                          l3623 111A  
                                                          l3615 10E0  
                                                          l3463 0A2C  
                                                          l3455 09F2  
                                                          l3447 0998  
                                                          l3375 0720  
                                                          l3367 06E6  
                                                          l3359 06AA  
                                                          l3551 0E56  
                                                          l3543 0E14  
                                                          l3535 0DB4  
                                                          l3519 0CDA  
                                                          l3711 1C72  
                                                          l3703 1C3E  
                                                          l4095 1302  
                                                          l4087 12BC  
                                                          l4079 12A0  
                                                          l3641 117C  
                                                          l3633 116A  
                                                          l3625 1126  
                                                          l3713 2212  
                                                          l3465 0A30  
                                                          l3457 0A0E  
                                                          l3449 099C  
                                                          l3393 077C  
                                                          l3377 0730  
                                                          l3385 0752  
                                                          l3369 06EA  
                                                          l3481 1732  
                                                          l3473 16D2  
                                                          l3553 0E7A  
                                                          l3545 0E28  
                                                          l3537 0DB8  
                                                          l3529 0D64  
                                                          l3705 1C48  
                                                          l3801 101A  
                                                          l3721 1824  
                                                          l4361 145A  
                                                          l4097 131C  
                                                          l4089 12BE  
                                                          l3299 1EC2  
                                                          l3651 11D4  
                                                          l3643 1182  
                                                          l3635 116E  
                                                          l3627 114A  
                                                          l3619 10E8  
                                                          l3715 220A  
                                                          l3459 0A14  
                                                          l3395 0798  
                                                          l3387 0768  
                                                          l3379 0738  
                                                          l3483 1734  
                                                          l3475 16EC  
                                                          l3555 0E8E  
                                                          l3547 0E4E  
                                                          l3539 0DC4  
                                                          l3707 1C4E  
                                                          l4371 1E98  
                                                          l3563 1A42  
                                                          l3811 1098  
                                                          l3803 103C  
                                                          l3731 1892  
                                                          l3723 183A  
                                                          l4363 1548  
                                                          l4099 1328  
                                                          l3653 11E0  
                                                          l3645 119A  
                                                          l3661 1250  
                                                          l3637 1170  
                                                          l3629 1158  
                                                          l3397 07A8  
                                                          l3389 0768  
                                                          l3485 1744  
                                                          l3557 0EA0  
                                                          l3549 0E50  
                                                          l3709 1C70  
                                                          l4373 0BC6  
                                                          l3821 20B0  
                                                          l3581 1E52  
                                                          l3565 1A46  
                                                          l3573 1AD8  
                                                          l3813 10A4  
                                                          l3805 1056  
                                                          l4365 18D4  
                                                          l3733 18A8  
                                                          l3725 1850  
                                                          l3717 180A  
                                                          l3743 2174  
                                                          l4375 1F0C  
                                                          l3663 1266  
                                                          l3655 120A  
                                                          l3647 119E  
                                                          l3639 1178  
                                                          l3399 07B8  
                                                          l3495 1776  
                                                          l3487 1748  
                                                          l3479 1702  
                                                          l3559 0EA2  
                                                          l3911 0A8E  
                                                          l3831 20FA  
                                                          l3823 20E8  
                                                          l3751 20CA  
                                                          l3903 21B8  
                                                          l3583 1E62  
                                                          l4367 1AEE  
                                                          l3567 1A74  
                                                          l3807 106C  
                                                          l3727 1866  
                                                          l3719 180E  
                                                          l3681 1CBA  
                                                          l3673 1CA2  
                                                          l3665 127E  
                                                          l3657 1216  
                                                          l3649 11AA  
                                                          l3497 1782  
                                                          l3489 175A  
                                                          l3921 0B10  
                                                          l3913 0A9E  
                                                          l3905 0A44  
                                                          l3833 2104  
                                                          l3825 20F0  
                                                          l3761 20DC  
                                                          l3753 20CE  
                                                          l3817 2088  
                                                          l3585 1E72  
                                                          l4369 1E24  
                                                          l3569 1AA8  
                                                          l3809 1080  
                                                          l3729 187C  
                                                          l3737 18BE  
                                                          l3841 212C  
                                                          l3747 2182  
                                                          l3691 1D08  
                                                          l3683 1CC0  
                                                          l3675 1CAC  
                                                          l3667 128A  
                                                          l3659 1236  
                                                          l3499 178C  
                                                          l3931 0B94  
                                                          l3923 0B4A  
                                                          l3915 0AB2  
                                                          l3907 0A50  
                                                          l3851 2202  
                                                          l3835 2106  
                                                          l3827 20F6  
                                                          l3763 20DE  
                                                          l3755 20D2  
                                                          l3819 209A  
                                                          l3579 1E4E  
                                                          l3595 1DDA  
                                                          l3771 0F38  
                                                          l3843 212E  
                                                          l3693 1D3A  
                                                          l3685 1CD8  
                                                          l3677 1CAE  
                                                          l3669 128E  
                                                          l3941 0C04  
                                                          l3933 0B9C  
                                                          l3925 0B5A  
                                                          l3917 0AEC  
                                                          l3909 0A54  
                                                          l3829 20F8  
                                                          l3765 20E0  
                                                          l3757 20D6  
                                                          l3749 20C2  
                                                          l3589 1E82  
                                                          l3597 1DDE  
                                                          l3781 0F4E  
                                                          l3773 0F3C  
                                                          l3837 2154  
                                                          l3845 2132  
                                                          l3695 1D46  
                                                          l3687 1CDA  
                                                          l3679 1CB6  
                                                          l3951 0C6C  
                                                          l3943 0C08  
                                                          l3927 0B6E  
                                                          l3919 0AFC  
                                                          l3759 20DA  
                                                          l3855 21FA  
                                                          l3599 1DEE  
                                                          l3791 0FA4  
                                                          l3783 0F54  
                                                          l3775 0F40  
                                                          l3767 0EBC  
                                                          l3871 143A  
                                                          l3863 1410  
                                                          l3839 215C  
                                                          l3847 210E  
                                                          l3697 1D4A  
                                                          l3689 1CEA  
                                                          l3961 0CB2  
                                                          l3953 0C8C  
                                                          l3945 0C0C  
                                                          l3929 0B90  
                                                          l3937 0BA8  
                                                          l3793 0FC6  
                                                          l3785 0F6C  
                                                          l3777 0F42  
                                                          l3769 0F34  
                                                          l3881 149A  
                                                          l3865 1420  
                                                          l3849 2122  
                                                          l3955 0C9E  
                                                          l3947 0C4A  
                                                          l3963 0CBA  
                                                          l3939 0BEE  
                                                          l3859 2166  
                                                          l3971 21EA  
                                                          l3795 0FD8  
                                                          l3787 0F72  
                                                          l3779 0F4A  
                                                          l3883 14EC  
                                                          l3867 1426  
                                                          l3875 1444  
                                                          l3957 0CA6  
                                                          l3949 0C5C  
                                                          l3797 0FFA  
                                                          l3789 0F92  
                                                          l3981 1F78  
                                                          l3973 1F34  
                                                          l3885 1514  
                                                          l3893 1532  
                                                          l3869 1430  
                                                          l3877 147A  
                                                          l3959 0CAE  
                                                          l3799 100C  
                                                          l3983 1F7A  
                                                          l3887 151C  
                                                          l3879 1492  
                                                          l3985 21F2  
                                                          l3889 1526  
                                                          l3979 1F38  
                                                          ?_isr 0001  
                                                          u3000 100C  
                                                          u3001 1006  
                                                          u3010 1034  
                                                          u3011 102E  
                                                          u3100 0C9C  
                                                          u3020 1056  
                                                          u2300 2014  
                                                          u3101 0C96  
                                                          u3021 1050  
                                                          u2301 200E  
                                                          u3030 106A  
                                                          u3110 1F8C  
                                                          u2310 2032  
                                                          u3031 1064  
                                                          u3111 1F86  
                                                          u2311 202C  
                                                          u2400 07E4  
                                                          u2320 062E  
                                                          u3040 107E  
                                                          _LATD 000F8C  
                                                          u2401 07DE  
                                                          u2321 0628  
                                                          u3041 1078  
                                                          u2410 080A  
                                                          u2330 0646  
                                                          u3050 1092  
                                                          u2411 0804  
                                                          u2331 0640  
                                                          u3051 108C  
                                                          u2500 094E  
                                                          u2420 083C  
                                                          u2340 065A  
                                                          u3060 2098  
                                                          u2501 0948  
                                                          u2421 0836  
                                                          u2341 0654  
                                                          u3061 2092  
                                                          u2510 096C  
                                                          u2430 0868  
                                                          u2350 06A8  
                                                          u3070 20AE  
                                                          u2511 0966  
                                                          u2431 0862  
                                                          u2351 06A2  
                                                          u3071 20A8  
                                                          u2520 09BA  
                                                          u2440 0882  
                                                          u2360 06C0  
                                                          u2600 17C8  
                                                          u3080 1490  
                                                          u3240 12D6  
                                                          u2521 09B4  
                                                          u2441 087C  
                                                          u2361 06BA  
                                                          u2601 17C2  
                                                          u3081 148A  
                                                          u3241 12D0  
                                                          u2530 09F0  
                                                          u2450 08A6  
                                                          u2370 06D4  
                                                          u2610 17DC  
                                                          u3090 0C02  
                                                          u3250 131A  
                                                          u2275 1ED0  
                                                          u2531 09EA  
                                                          u2451 08A0  
                                                          u2371 06CE  
                                                          u2611 17D6  
                                                          u3091 0BFC  
                                                          u3251 1314  
                                                          u2276 1ED2  
                                                          u2540 0A24  
                                                          u2460 08CE  
                                                          u2380 071E  
                                                          u2700 0E8C  
                                                          u2620 0CD8  
                                                          u3260 13EE  
                                                          u2285 1EE0  
                                                          u2541 0A1E  
                                                          u2461 08C8  
                                                          u2381 0718  
                                                          u2701 0E86  
                                                          u2621 0CD2  
                                                          u3261 13E8  
                                                          u2286 1EE2  
                                                          u2470 08E4  
                                                          u2390 0766  
                                                          u2550 16EA  
                                                          u2710 0E9E  
                                                          u2630 0CEA  
                                                          u2295 1EF0  
                                                          u2471 08DE  
                                                          u2391 0760  
                                                          u2551 16E4  
                                                          u2711 0E98  
                                                          u2631 0CE4  
                                                          u2296 1EF2  
                                                          u2800 110A  
                                                          u2480 0916  
                                                          u2560 1726  
                                                          u2640 0D4E  
                                                          u2801 1104  
                                                          u2481 0910  
                                                          u2641 0D48  
                                                          u2810 1148  
                                                          u2490 0934  
                                                          u2570 1758  
                                                          u2650 0DAE  
                                                          u2811 1142  
                                                          u2491 092E  
                                                          u2571 1752  
                                                          u2651 0DA8  
                                                          u2900 1D04  
                                                          u2820 1198  
                                                          u2580 1770  
                                                          u2660 0E00  
                                                          u2901 1CFE  
                                                          u2821 1192  
                                                          u2581 176A  
                                                          u2565 171A  
                                                          u2661 0DFA  
                                                          u2725 1E5C  
                                                          u2910 1D22  
                                                          u2830 11D2  
                                                          u2590 17A0  
                                                          u2670 0E26  
                                                          u2726 1E5E  
                                                          u2911 1D1C  
                                                          u2831 11CC  
                                                          u2591 179A  
                                                          u2671 0E20  
                                                          u2735 1E6C  
                                                          u2920 1D34  
                                                          u2840 1208  
                                                          u2680 0E3A  
                                                          u2736 1E6E  
                                                          u2921 1D2E  
                                                          u2841 1202  
                                                          u2681 0E34  
                                                          u2745 1E7C  
                                                          u2850 1230  
                                                          u2690 0E4C  
                                                          u2930 1C9A  
                                                          u2746 1E7E  
                                                          u2851 122A  
                                                          u2691 0E46  
                                                          u2931 1C94  
                                                          u2755 1DE8  
                                                          u2860 1250  
                                                          u2780 10C6  
                                                          u2756 1DEA  
                                                          u2940 0F6A  
                                                          u2861 124A  
                                                          u2781 10C0  
                                                          u2765 1DF8  
                                                          u2941 0F64  
                                                          u2870 1264  
                                                          u2790 10E0  
                                                          u2766 1DFA  
                                                          u2950 0F90  
                                                          u2871 125E  
                                                          u2791 10DA  
                                                          u2775 1E08  
                                                          u2951 0F8A  
                                                          u2880 1278  
                                                          u2776 1E0A  
                                                          u2960 0FA4  
                                                          u2881 1272  
                                                          u2961 0F9E  
                                                          u2890 1CD6  
                                                          u2970 0FC4  
                                                   main@newData 01D2  
                                                          u2891 1CD0  
                                                          u2971 0FBE  
                                                          u2980 0FD8  
                                                          u2981 0FD2  
                                                          u2990 0FF8  
                                                          u2991 0FF2  
                                                          i2l71 221C  
                                                          i2l65 2198  
                                                          _TMR0 000FD6  
                                                          _TMR2 000FCC  
                                           __end_ofi2_storeData 16D0  
                                                          _main 1296  
                                                          _maxX 006B  
                                                          _maxY 0069  
                                          __end_ofi2_printError 1A3E  
                                                          fsr2h 000FDA  
                                                          indf2 000FDF  
                                                          fsr1l 000FE1  
                                                          fsr2l 000FD9  
                                                          btemp 006E  
                                                          prodh 000FF4  
                                                          prodl 000FF3  
                                                          start 016A  
                                               ___fldiv@new_exp 0031  
                                                  ___param_bank 000000  
                                               ??_whatsTM0Limit 0001  
                                                         ??_isr 000B  
                                                  ?_executeData 0001  
                                               executeData@data 00FC  
                                                 ___fltol@sign1 0041  
                                                         ?_main 0001  
                                               __end_of___fldiv 0A42  
                                               __end_of___fltol 1806  
                                                         i2l352 21D0  
                                                         i2l504 1A38  
                                                         i2l355 21A6  
                                                         i2l349 2224  
                                                         i2l391 21E4  
                                                         i2l545 1654  
                                                         i2l449 0152  
                                                         i2l394 21DA  
                                                         i2l563 2082  
                                                         i2l548 16CA  
                                                         i2l559 2050  
                                          rotateObj@rotSequence 0080  
                                                         _SPBRG 000FAF  
                                                         _TRISA 000F92  
                                                         _TRISB 000F93  
                                                         _TRISC 000F94  
                                                         _TRISD 000F95  
                                                         _TXREG 000FAD  
                                               __end_of_getData 2180  
                                               i2storeData@data 000A  
                                               __end_of_initADC 210C  
                                                  ?_newSequence 0001  
                                               __end_of_liftArm 1D50  
                                               __end_of_readSeq 21F8  
                                                  stepMade@temp 0014  
                                               __end_of_setStep 1B14  
                                                         tablat 000FF5  
                                                i2uartTx@length 0003  
                                                         ttemp5 006F  
                                                         ttemp6 0072  
                                                         ttemp7 0076  
                                                         status 000FD8  
                                                         wtemp8 006F  
                                              __end_ofi2_uartTx 2086  
                                                 ?_increaseStep 0001  
                                               __initialization 1D50  
                                        __size_of_initPinMotors 0026  
                                                  __end_of_main 140C  
                                      resetPosition@keepMovingX 0016  
                                      resetPosition@keepMovingY 0017  
                                      resetPosition@keepMovingZ 0018  
                                                        ??_main 00FE  
                                                 __activetblptr 000002  
                                                   i2_storeData 156E  
                                          __size_of_enableMotor 0074  
                                                   isr@tm0Count 0063  
                                                  ?_setThermRel 0001  
                                                        _ADRESH 000FC4  
                                                        _ADRESL 000FC3  
                                                  ?_moveToPoint 0016  
                                                        i2l3011 1572  
                                                        i2l3013 1582  
                                                        i2l3031 164E  
                                                        i2l3015 1588  
                                                        i2l3023 15A6  
                                                        i2l3009 219E  
                                                        i2l3033 1676  
                                                        i2l3041 1694  
                                                        i2l3017 1592  
                                                        i2l3025 15DC  
                                                        i2l3035 167E  
                                                        i2l3027 15F4  
                                                        i2l3019 159C  
                                                        i2l3211 004E  
                                                        i2l3203 001C  
                                                        i2l3037 1688  
                                                        i2l3029 15FC  
                                                        i2l3221 006E  
                                                        i2l3213 0050  
                                                        i2l3205 002E  
                                                        i2l3231 00B8  
                                                        i2l3223 0072  
                                                        i2l3215 0054  
                                                        i2l3207 0030  
                                                        i2l1721 2190  
                                                        i2l3241 00E2  
                                                        i2l3233 00BC  
                                                        i2l3225 0090  
                                                        i2l3209 0032  
                                                        i2l3217 0058  
                                                        i2l3251 0146  
                                                        i2l3243 0108  
                                                        i2l3235 00C0  
                                                        i2l3227 0092  
                                                        i2l3219 006C  
                                                        i2l1725 221A  
                                                        i2l3253 014C  
                                                        i2l3245 0114  
                                                        i2l3229 00A6  
                                                        i2l3237 00C6  
                                                        i2l2551 2042  
                                                        i2l3247 012E  
                                                        i2l3239 00DA  
                                                        i2l2553 2064  
                                                        i2l3249 0132  
                                                        i2l2555 206A  
                                                        i2l2549 203A  
                                                        i2l2741 1926  
                                                        i2l2751 1982  
                                                        i2l2743 192A  
                                                        i2l2753 1998  
                                                        i2l2745 1940  
                                                        i2l2761 19DA  
                                                        i2l1971 21CC  
                                                        i2l2755 19AE  
                                                        i2l2747 1956  
                                                        i2l4381 19F0  
                                                        i2l2757 19C4  
                                                        i2l2749 196C  
                                                        i2l1975 21E0  
                                                        i2l1969 2222  
                                                        i2l1977 21D6  
                                                        i2l4377 15BC  
                                                        i2l4379 16AA  
                                                        _RCREG1 000FAE  
                                                  ?_setTouchRel 0001  
                                                 setDecay@decay 0015  
                                              __end_of___xxtofl 0EBA  
                                                 setDecay@motor 0012  
                                              __end_of_clearTM0 218E  
                                              _errString_PointZ 0100  
                                                ??_increaseStep 0001  
                                                     ??___fldiv 0028  
                                                     ??___fltol 003D  
                                              __end_of_tim0Init 2164  
                                              __end_of_tim2Init 213E  
                                                        clear_0 1DB6  
                                                        clear_1 1DC2  
                                                     ??_getData 0014  
                                                        _uartTx 1FEA  
                                              __end_of_setDecay 1E4A  
                                                     ??_initADC 0012  
                                                     ??_liftArm 0016  
                                                     ??_readSeq 0012  
                                                  __pdataCOMRAM 0069  
                                         __end_of_resetPosition 10AC  
                                                  __mediumconst 0000  
                                                     ??_setStep 0013  
                                                        tblptrh 000FF7  
                                                        tblptrl 000FF6  
                                                        tblptru 000FF8  
                                              __end_of_stepMade 2152  
                                                 _initPinMotors 20C0  
                                         __size_ofi2_printError 011C  
                                              __end_of_writeTM0 219C  
                                     __size_of_resetNewSequence 000A  
                                                  ___xxtofl@arg 001C  
                                                  ___xxtofl@exp 001B  
                                                  ___xxtofl@val 0012  
                                                    __accesstop 0080  
                                       __end_of__initialization 1DC8  
                                                  _dataSequence 00D8  
                                                 ___rparam_used 000001  
                                                    ___fltol@f1 0039  
                                                  ?_stepCounter 0012  
                                                   i2uartTx@ptr 0001  
                                                __pcstackCOMRAM 0001  
                                                  __newSequence 005F  
                                                  __pidataBANK0 1F92  
                                                  __pidataBANK1 1B14  
                                               isr@single_cycle 0051  
                                          __size_of_executeData 0280  
                                                 ?_setDirection 0012  
                                                  i2_printError 1922  
                                                _errString_ZEND 015C  
                                                _errString_Feed 00A4  
                                                ?_initPinMotors 0001  
                                                     ?i2_uartTx 0001  
                                                    __pbssBANK0 00D8  
                                          __size_of_newSequence 0008  
                                                    _feeder1Pos 060D  
                                                    _feeder2Pos 060B  
                                                    _feeder3Pos 0609  
                                       __size_of_getNewSequence 000E  
                                                    _fatalError 2200  
                                            __size_of_reduceSeq 0008  
                                            __size_of_retPeriod 000E  
                                                _touch_pressure 0607  
                                            __size_of_shiftData 0060  
                                            __size_of_resetStep 000A  
                                                       _ADC_res 0053  
                                                       ?_uartTx 0012  
                                                ??_setDirection 0013  
                                                     ?___xxtofl 0012  
                                          __end_of_increaseStep 2228  
                                                     ?_clearTM0 0001  
                                                    ??i2_uartTx 0004  
                                            __size_of_rotateObj 00BA  
                                             _errString_Command 00C1  
                                            __size_of_usartInit 001E  
                                        __size_of_interruptInit 003A  
                                          __size_of_setThermRel 000A  
                                            __size_of_storeData 0162  
                                                     ?_tim0Init 0001  
                                                     ?_tim2Init 0012  
                                          __size_of_moveToPoint 01EA  
                                          storeData@receivedMex 0045  
                                               _newSequenceData 00EC  
                                                     ?_setDecay 0012  
                                          __size_of_setTouchRel 000A  
                                                   setStep@step 0015  
                                                       __Hparam 0000  
                                                       __Lparam 0000  
                                        __end_of_touch_pressure 0609  
                                                       ___fldiv 0610  
                                                     ?_stepMade 0012  
                                                       ___fltol 16D0  
                                                  __psmallconst 0600  
                                                       __pcinit 1D50  
                                         __end_of_whatsTM0Limit 2220  
                                                       _getData 2172  
                                                       __ramtop 0600  
                                                     ?_writeTM0 0001  
                                                    _pickObject 2210  
                                                       __ptext0 1296  
                                                       __ptext1 210C  
                                                       __ptext2 212A  
                                                       __ptext3 2152  
                                                       __ptext4 140C  
                                                       __ptext5 1806  
                                                       __ptext6 1FEA  
                                                       __ptext7 1F32  
                                                       __ptext8 0EBA  
                                                       __ptext9 1A3E  
                                               __size_of_uartTx 004E  
                                                     _T0CONbits 000FD5  
                                                       _initADC 20E6  
                                               ??_initPinMotors 0012  
                                                       _liftArm 1CA0  
                                                     _T2CONbits 000FCA  
                                                       _readSeq 21F0  
                                                  __size_of_isr 0162  
                                                    ??___xxtofl 0016  
                                                  ?i2_storeData 0001  
                                                    ??_clearTM0 0012  
                                                       _setStep 1A3E  
                                                       _pwmStep 0067  
                                             __end_of_reduceSeq 21F0  
                                             __end_of_retPeriod 21AA  
                                                    _releaseObj 2208  
                                          end_of_initialization 1DC8  
                                              _resetNewSequence 21B6  
                                              rotateObj@totStep 00F8  
                                             __end_of_shiftData 1F92  
                                                       isr@temp 0011  
                                             __end_of_resetStep 21CA  
                                                    ??_tim0Init 0012  
                                                 __Lmediumconst 0000  
                                                    ??_tim2Init 0014  
                                              storeData@command 005D  
                                              storeData@counter 005E  
                                                    ??_setDecay 0013  
                                              enableMotor@motor 0012  
                                                       uartTx@i 0015  
                                                   ?_fatalError 0001  
                                                     _RCSTAbits 000FAB  
                                                       postdec1 000FE5  
                                             __end_of_rotateObj 1CA0  
                                                       postinc0 000FEE  
                                                       postinc1 000FE6  
                                                       postinc2 000FDE  
                                                    ??_stepMade 0014  
                                          __size_of_stepCounter 000C  
                                                 _interruptInit 2086  
                                             __end_of_usartInit 212A  
                                             __end_of_storeData 156E  
                                    __end_ofrotateObj@stepAngle 0605  
                                                    ??_writeTM0 0001  
                                                     _PORTDbits 000F83  
                                                    _printError 1806  
                                                     _PORTEbits 000F84  
                                                 ??_enableMotor 0013  
                                           i2printError@errCode 0007  
                                                    _toggleStep 21CA  
                                                 ___xxtofl@sign 001A  
                                                     _TRISCbits 000F94  
                                                     _TRISDbits 000F95  
                                                     _TRISEbits 000F96  
                                                   ___fldiv@grs 0033  
                                                   ___fldiv@rem 002C  
                                                    _stepToggle 0066  
                                          __end_of_setDirection 1F32  
                                                     _TXSTAbits 000FAC  
                                                _getNewSequence 2164  
                                                ?_interruptInit 0001  
                                                 __pidataCOMRAM 2228  
                                         __size_of_increaseStep 0008  
                                                   ?_pickObject 0001  
                                                   __fatalError 0060  
                                                __end_of_uartTx 2038  
                                                 moveToPoint@x1 0016  
                                                 moveToPoint@x2 001A  
                                                 moveToPoint@y1 0018  
                                                 moveToPoint@y2 001C  
                                           start_initialization 1D50  
                                                     i2uartTx@i 0004  
                                                   __end_of_isr 016A  
                                           __size_of_fatalError 0008  
                                           __end_of_enableMotor 1EBE  
                                                   ?_releaseObj 0001  
                                             __size_ofi2_uartTx 004E  
                                        __end_of_getNewSequence 2172  
                                               _errString_Fatal 01AB  
                                               _errString_Bound 0084  
                                               _errString_Reset 0184  
                                               _errString_Point 0134  
                                                  _increaseStep 2220  
                                        __size_of_resetPosition 01F2  
                                                 ??_executeData 0043  
                                                   __pdataBANK0 0080  
                                                   __pdataBANK1 0100  
                                                   _dataCounter 0061  
                                                      ??_uartTx 0015  
                                        moveToPoint@keepMovingX 0020  
                                        moveToPoint@keepMovingY 0021  
                                                   ?_printError 0001  
                                                     ___fldiv@a 0024  
                                                     ___fldiv@b 0020  
                                                _therm_pressure 0605  
                                                   ?_toggleStep 0001  
                                                   __pbssCOMRAM 0045  
                                                 __pcstackBANK0 00F4  
                                                 __pcstackBANK1 01D1  
                                                 ??_newSequence 0012  
                                             __size_of___xxtofl 01F8  
                                          __size_ofi2_storeData 0162  
                                             __size_of_clearTM0 000E  
                                               ?_getNewSequence 0012  
                                           __size_of_pickObject 0008  
                                            executeData@errCode 00FB  
                                             __size_of_tim0Init 0012  
                                             __size_of_tim2Init 0014  
                                               ??_interruptInit 0012  
                                             __size_of_setDecay 0074  
                                                     __pintcode 0008  
                                                      ?___fldiv 0020  
                                                      ?___fltol 0039  
                                      __end_of_resetNewSequence 21C0  
                                           __size_of_releaseObj 0008  
                                                 storeData@data 001B  
                                                      ?_getData 0012  
                                             __size_of_stepMade 0014  
                                        __end_of_therm_pressure 0607  
                                                      ?_initADC 0001  
                                                   __smallconst 0600  
                                                      ?_liftArm 0001  
                                                   _enableMotor 1E4A  
                                                      ?_readSeq 0001  
                                             __size_of_writeTM0 000E  
                                           __end_of_executeData 0CC2  
                                                    shiftData@i 0014  
                                                      ?_setStep 0012  
                                                     _newFeeder 0057  
                                                 _resetPosition 0EBA  
                                                 ??_setThermRel 0001  
                                         __size_of_setDirection 0074  
                                                 ??_moveToPoint 001E  
                                                 ??_setTouchRel 0001  
                                           __end_of_newSequence 2200  
                                                     _reduceSeq 21E8  
                                                      _LATAbits 000F89  
                                                      _LATBbits 000F8A  
                                                     _retPeriod 219C  
                                                      _LATCbits 000F8B  
                                                      _LATDbits 000F8C  
                                           __size_of_printError 011C  
                                                      _IPR1bits 000F9F  
                                                      _PIE1bits 000F9D  
                                                     _shiftData 1F32  
                                                      i2u201_40 15F2  
                                                      i2u201_41 15EC  
                                                      i2u220_40 008E  
                                                      i2u220_41 0088  
                                                      i2u221_40 00A4  
                                                      i2u221_41 009E  
                                                      i2u222_40 00B6  
                                                      i2u222_41 00B0  
                                                      i2u223_40 00D8  
                                                      i2u223_41 00D2  
                                                      i2u160_40 2080  
                                                      i2u224_40 0106  
                                                      i2u160_41 207A  
                                                      i2u224_41 0100  
                                                      i2u225_40 012C  
                                                      i2u217_40 002C  
                                                      i2u225_41 0126  
                                                      i2u217_41 0026  
                                                      i2u226_40 0144  
                                                      i2u218_40 004C  
                                                      i2u226_41 013E  
                                                      i2u218_41 0046  
                                                      i2u219_40 006A  
                                                      i2u219_41 0064  
                                                     _resetStep 21C0  
                                                      i2u159_40 2062  
                                                      i2u159_41 205C  
                                                      _PIR1bits 000F9E  
                                           __size_of_toggleStep 000A  
                                                  ??_fatalError 0012  
                                                     _posVector 004E  
                                                      _RCONbits 000FD0  
                                                     _therm_rel 0064  
                                                     _pwmPeriod 0055  
                                             setDirection@motor 0012  
                                                     _rotateObj 1BE6  
                                                    _ADCON0bits 000FC2  
                                                    _ADCON1bits 000FC1  
                                                  _setDirection 1EBE  
                                                     _usartInit 210C  
                                                     _touch_rel 0065  
                                            __end_of_feeder1Pos 060F  
                                            __end_of_feeder2Pos 060D  
                                            __end_of_feeder3Pos 060B  
                                                     _storeData 140C  
                                                ?_resetPosition 0001  
                                         __end_of_initPinMotors 20E6  
                                                      i2_uartTx 2038  
                                                     copy_data0 1D64  
                                                     copy_data1 1D84  
                                                     copy_data2 1DA4  
                                            __end_of_fatalError 2208  
                                            rotateObj@stepAngle 0601  
                                                    ?_reduceSeq 0001  
                                                    ?_retPeriod 0001  
                                                  setStep@motor 0012  
                                                    rotateObj@i 00FA  
                                        __size_of_whatsTM0Limit 0008  
                                           __end_of_setThermRel 21E8  
                                           __end_of_moveToPoint 1296  
                                             printError@errCode 0018  
                                                    ?_shiftData 0001  
                                                 ??_stepCounter 0014  
                                                      __Hrparam 0000  
                                                    ?_resetStep 0001  
                                           __end_of_setTouchRel 21DE  
                                                      __Lrparam 0000  
                                              __size_of___fldiv 0432  
                                              __size_of___fltol 0136  
                                                   _executeData 0A42  
                                                  ??_pickObject 0012  
                                                    ?_rotateObj 0001  
                                                 ?i2_printError 0001  
                                              __size_of_getData 000E  
                                                    ?_usartInit 0001  
                                              __size_of_initADC 0026  
                                                      ___xxtofl 0CC2  
                                              __size_of_liftArm 00B0  
                                                    ?_storeData 0001  
                                                      _clearTM0 2180  
                                              __size_of_readSeq 0008  
                                            storeData@mexLength 006D  
                                                      _tm0Error 005B  
                                                      _tm0Limit 0068  
                                              __size_of_setStep 00D6  
                                                   _newSequence 21F8  
                                                      __ptext10 1DD6  
                                                      __ptext11 1E4A  
                                                      __ptext20 2200  
                                                      __ptext12 21B6  
                                                      __ptext21 0A42  
                                                      __ptext13 21E8  
                                                      __ptext30 1CA0  
                                                      __ptext22 1BE6  
                                                      __ptext14 21F0  
                                                      __ptext31 213E  
                                                      __ptext23 0CC2  
                                                      __ptext15 21F8  
                                                      __ptext40 218E  
                                                      __ptext32 1EBE  
                                                      __ptext24 16D0  
                                                      __ptext16 2086  
                                                      __ptext41 2218  
                                                      __ptext33 21C0  
                                                      __ptext25 0610  
                                                      __ptext17 20C0  
                                                      __ptext42 21CA  
                                                      __ptext34 2172  
                                                      __ptext26 2208  
                                                      __ptext18 20E6  
                                                      __ptext43 21D4  
                                                      __ptext35 2180  
                                                      __ptext27 2210  
                                                      __ptext19 2164  
                                                      __ptext44 21DE  
                                                      __ptext28 10AC  
                                                      __ptext45 219C  
                                                      __ptext37 156E  
                                                      __ptext29 21AA  
                                                      __ptext46 2220  
                                                      __ptext38 1922  
                                                      __ptext39 2038  
                                                  ??_releaseObj 0012  
                                                      _tim0Init 2152  
                                                      _tim2Init 212A  
                                                 __size_of_main 0176  
                                                      _setDecay 1DD6  
                                            __end_of_pickObject 2218  
                                                     uartTx@ptr 0012  
                                                      _rotAngle 0059  
                                               isr@completeStep 0062  
                                                      int$flags 006E  
                                                      _stepMade 213E  
                                           __end_of_stepCounter 21B6  
                                             rotateObj@rotAngle 00F7  
                                                ??i2_printError 0005  
                                            __end_of_releaseObj 2210  
                                                      _writeTM0 218E  
                                                  ??_printError 0016  
                                                 _whatsTM0Limit 2218  
                                               ??_resetPosition 0016  
                                            tim2Init@_pwmPeriod 0012  
                                                    _INTCONbits 000FF2  
                                                  ??_toggleStep 0001  
                                              ??_getNewSequence 0014  
                                                   _setThermRel 21DE  
                                                  uartTx@length 0014  
                                                   _moveToPoint 10AC  
                                                      intlevel2 222E  
                                             enableMotor@enable 0015  
                                                   _setTouchRel 21D4  
                                                   ??_reduceSeq 0012  
                                                   ??_retPeriod 0003  
                                                    _RCSTA1bits 000FAB  
                                            __end_of_printError 1922  
                                         setDirection@direction 0015  
                                                   ??_shiftData 0012  
                                                   ??_resetStep 0012  
                                            __end_of_toggleStep 21D4  
                                             ?_resetNewSequence 0001  
                                                ?_whatsTM0Limit 0001  
                                                   ??_rotateObj 00F4  
                                            ??_resetNewSequence 0012  
                                                  ?_enableMotor 0012  
                                                   ??_usartInit 0012  
                                                 ??i2_storeData 0008  
                                                   ??_storeData 0019  
                                                   _stepCounter 21AA  
