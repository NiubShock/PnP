

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sun Mar 28 10:29:01 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    75                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    76                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    77                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    78  0000                     
    79                           ; Version 2.20
    80                           ; Generated 12/02/2020 GMT
    81                           ; 
    82                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F452 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataCOMRAM
   115  0025AA                     __pidataCOMRAM:
   116                           	callstack 0
   117                           
   118                           ;initializer for _maxY
   119  0025AA  03E8               	dw	1000
   120                           
   121                           ;initializer for _maxX
   122  0025AC  03E8               	dw	1000
   123                           
   124                           ;initializer for storeData@mexLength
   125  0025AE  05                 	db	5
   126                           
   127                           	psect	idataBANK0
   128  00228A                     __pidataBANK0:
   129                           	callstack 0
   130                           
   131                           ;initializer for rotateObj@rotSequence
   132  00228A  09                 	db	9
   133  00228B  03                 	db	3
   134  00228C  06                 	db	6
   135  00228D  0C                 	db	12
   136                           
   137                           ;initializer for _errString_Bound
   138  00228E  45                 	db	69
   139  00228F  72                 	db	114
   140  002290  72                 	db	114
   141  002291  6F                 	db	111
   142  002292  72                 	db	114
   143  002293  2C                 	db	44
   144  002294  20                 	db	32
   145  002295  70                 	db	112
   146  002296  6F                 	db	111
   147  002297  69                 	db	105
   148  002298  6E                 	db	110
   149  002299  74                 	db	116
   150  00229A  20                 	db	32
   151  00229B  6F                 	db	111
   152  00229C  75                 	db	117
   153  00229D  74                 	db	116
   154  00229E  73                 	db	115
   155  00229F  69                 	db	105
   156  0022A0  64                 	db	100
   157  0022A1  65                 	db	101
   158  0022A2  20                 	db	32
   159  0022A3  62                 	db	98
   160  0022A4  6F                 	db	111
   161  0022A5  75                 	db	117
   162  0022A6  6E                 	db	110
   163  0022A7  64                 	db	100
   164  0022A8  61                 	db	97
   165  0022A9  72                 	db	114
   166  0022AA  69                 	db	105
   167  0022AB  65                 	db	101
   168  0022AC  73                 	db	115
   169  0022AD  0A                 	db	10
   170  0022AE  00                 	db	0
   171                           
   172                           ;initializer for _errString_Feed
   173  0022AF  45                 	db	69
   174  0022B0  72                 	db	114
   175  0022B1  72                 	db	114
   176  0022B2  6F                 	db	111
   177  0022B3  72                 	db	114
   178  0022B4  2C                 	db	44
   179  0022B5  20                 	db	32
   180  0022B6  66                 	db	102
   181  0022B7  65                 	db	101
   182  0022B8  65                 	db	101
   183  0022B9  64                 	db	100
   184  0022BA  20                 	db	32
   185  0022BB  6C                 	db	108
   186  0022BC  69                 	db	105
   187  0022BD  6E                 	db	110
   188  0022BE  65                 	db	101
   189  0022BF  20                 	db	32
   190  0022C0  6E                 	db	110
   191  0022C1  6F                 	db	111
   192  0022C2  74                 	db	116
   193  0022C3  20                 	db	32
   194  0022C4  64                 	db	100
   195  0022C5  65                 	db	101
   196  0022C6  66                 	db	102
   197  0022C7  69                 	db	105
   198  0022C8  6E                 	db	110
   199  0022C9  65                 	db	101
   200  0022CA  64                 	db	100
   201  0022CB  0A                 	db	10
   202  0022CC  00                 	db	0
   203                           
   204                           ;initializer for _errString_Command
   205  0022CD  43                 	db	67
   206  0022CE  6F                 	db	111
   207  0022CF  6D                 	db	109
   208  0022D0  6D                 	db	109
   209  0022D1  61                 	db	97
   210  0022D2  6E                 	db	110
   211  0022D3  64                 	db	100
   212  0022D4  20                 	db	32
   213  0022D5  6E                 	db	110
   214  0022D6  6F                 	db	111
   215  0022D7  74                 	db	116
   216  0022D8  20                 	db	32
   217  0022D9  72                 	db	114
   218  0022DA  65                 	db	101
   219  0022DB  63                 	db	99
   220  0022DC  6F                 	db	111
   221  0022DD  67                 	db	103
   222  0022DE  6E                 	db	110
   223  0022DF  69                 	db	105
   224  0022E0  7A                 	db	122
   225  0022E1  65                 	db	101
   226  0022E2  64                 	db	100
   227  0022E3  0A                 	db	10
   228  0022E4  00                 	db	0
   229                           
   230                           	psect	idataBANK1
   231  001DEC                     __pidataBANK1:
   232                           	callstack 0
   233                           
   234                           ;initializer for _errString_PointZ
   235  001DEC  45                 	db	69
   236  001DED  72                 	db	114
   237  001DEE  72                 	db	114
   238  001DEF  6F                 	db	111
   239  001DF0  72                 	db	114
   240  001DF1  2C                 	db	44
   241  001DF2  20                 	db	32
   242  001DF3  74                 	db	116
   243  001DF4  69                 	db	105
   244  001DF5  6D                 	db	109
   245  001DF6  65                 	db	101
   246  001DF7  20                 	db	32
   247  001DF8  65                 	db	101
   248  001DF9  78                 	db	120
   249  001DFA  63                 	db	99
   250  001DFB  65                 	db	101
   251  001DFC  65                 	db	101
   252  001DFD  64                 	db	100
   253  001DFE  65                 	db	101
   254  001DFF  64                 	db	100
   255  001E00  20                 	db	32
   256  001E01  74                 	db	116
   257  001E02  6F                 	db	111
   258  001E03  20                 	db	32
   259  001E04  72                 	db	114
   260  001E05  65                 	db	101
   261  001E06  61                 	db	97
   262  001E07  63                 	db	99
   263  001E08  68                 	db	104
   264  001E09  20                 	db	32
   265  001E0A  74                 	db	116
   266  001E0B  68                 	db	104
   267  001E0C  65                 	db	101
   268  001E0D  20                 	db	32
   269  001E0E  65                 	db	101
   270  001E0F  6E                 	db	110
   271  001E10  64                 	db	100
   272  001E11  20                 	db	32
   273  001E12  6F                 	db	111
   274  001E13  66                 	db	102
   275  001E14  20                 	db	32
   276  001E15  74                 	db	116
   277  001E16  68                 	db	104
   278  001E17  65                 	db	101
   279  001E18  20                 	db	32
   280  001E19  5A                 	db	90
   281  001E1A  20                 	db	32
   282  001E1B  41                 	db	65
   283  001E1C  78                 	db	120
   284  001E1D  69                 	db	105
   285  001E1E  73                 	db	115
   286  001E1F  0A                 	db	10
   287  001E20  00                 	db	0
   288                           
   289                           ;initializer for _errString_Point
   290  001E21  45                 	db	69
   291  001E22  72                 	db	114
   292  001E23  72                 	db	114
   293  001E24  6F                 	db	111
   294  001E25  72                 	db	114
   295  001E26  2C                 	db	44
   296  001E27  20                 	db	32
   297  001E28  74                 	db	116
   298  001E29  69                 	db	105
   299  001E2A  6D                 	db	109
   300  001E2B  65                 	db	101
   301  001E2C  20                 	db	32
   302  001E2D  65                 	db	101
   303  001E2E  78                 	db	120
   304  001E2F  63                 	db	99
   305  001E30  65                 	db	101
   306  001E31  65                 	db	101
   307  001E32  64                 	db	100
   308  001E33  65                 	db	101
   309  001E34  64                 	db	100
   310  001E35  20                 	db	32
   311  001E36  74                 	db	116
   312  001E37  6F                 	db	111
   313  001E38  20                 	db	32
   314  001E39  72                 	db	114
   315  001E3A  65                 	db	101
   316  001E3B  61                 	db	97
   317  001E3C  63                 	db	99
   318  001E3D  68                 	db	104
   319  001E3E  20                 	db	32
   320  001E3F  74                 	db	116
   321  001E40  68                 	db	104
   322  001E41  65                 	db	101
   323  001E42  20                 	db	32
   324  001E43  70                 	db	112
   325  001E44  6F                 	db	111
   326  001E45  69                 	db	105
   327  001E46  6E                 	db	110
   328  001E47  74                 	db	116
   329  001E48  0A                 	db	10
   330  001E49  00                 	db	0
   331                           
   332                           ;initializer for _errString_ZEND
   333  001E4A  45                 	db	69
   334  001E4B  72                 	db	114
   335  001E4C  72                 	db	114
   336  001E4D  6F                 	db	111
   337  001E4E  72                 	db	114
   338  001E4F  2C                 	db	44
   339  001E50  20                 	db	32
   340  001E51  6E                 	db	110
   341  001E52  6F                 	db	111
   342  001E53  20                 	db	32
   343  001E54  6F                 	db	111
   344  001E55  62                 	db	98
   345  001E56  6A                 	db	106
   346  001E57  65                 	db	101
   347  001E58  63                 	db	99
   348  001E59  74                 	db	116
   349  001E5A  20                 	db	32
   350  001E5B  72                 	db	114
   351  001E5C  65                 	db	101
   352  001E5D  6C                 	db	108
   353  001E5E  65                 	db	101
   354  001E5F  76                 	db	118
   355  001E60  61                 	db	97
   356  001E61  74                 	db	116
   357  001E62  65                 	db	101
   358  001E63  64                 	db	100
   359  001E64  20                 	db	32
   360  001E65  61                 	db	97
   361  001E66  6C                 	db	108
   362  001E67  6F                 	db	111
   363  001E68  6E                 	db	110
   364  001E69  67                 	db	103
   365  001E6A  20                 	db	32
   366  001E6B  5A                 	db	90
   367  001E6C  20                 	db	32
   368  001E6D  41                 	db	65
   369  001E6E  78                 	db	120
   370  001E6F  69                 	db	105
   371  001E70  73                 	db	115
   372  001E71  0A                 	db	10
   373  001E72  00                 	db	0
   374                           
   375                           ;initializer for _errString_Reset
   376  001E73  45                 	db	69
   377  001E74  72                 	db	114
   378  001E75  72                 	db	114
   379  001E76  6F                 	db	111
   380  001E77  72                 	db	114
   381  001E78  2C                 	db	44
   382  001E79  20                 	db	32
   383  001E7A  74                 	db	116
   384  001E7B  69                 	db	105
   385  001E7C  6D                 	db	109
   386  001E7D  65                 	db	101
   387  001E7E  20                 	db	32
   388  001E7F  65                 	db	101
   389  001E80  78                 	db	120
   390  001E81  63                 	db	99
   391  001E82  65                 	db	101
   392  001E83  65                 	db	101
   393  001E84  64                 	db	100
   394  001E85  65                 	db	101
   395  001E86  64                 	db	100
   396  001E87  20                 	db	32
   397  001E88  74                 	db	116
   398  001E89  6F                 	db	111
   399  001E8A  20                 	db	32
   400  001E8B  72                 	db	114
   401  001E8C  65                 	db	101
   402  001E8D  73                 	db	115
   403  001E8E  65                 	db	101
   404  001E8F  74                 	db	116
   405  001E90  20                 	db	32
   406  001E91  70                 	db	112
   407  001E92  6F                 	db	111
   408  001E93  73                 	db	115
   409  001E94  69                 	db	105
   410  001E95  74                 	db	116
   411  001E96  69                 	db	105
   412  001E97  6F                 	db	111
   413  001E98  6E                 	db	110
   414  001E99  0A                 	db	10
   415  001E9A  00                 	db	0
   416                           
   417                           ;initializer for _errString_Fatal
   418  001E9B  46                 	db	70
   419  001E9C  61                 	db	97
   420  001E9D  74                 	db	116
   421  001E9E  61                 	db	97
   422  001E9F  6C                 	db	108
   423  001EA0  20                 	db	32
   424  001EA1  45                 	db	69
   425  001EA2  72                 	db	114
   426  001EA3  72                 	db	114
   427  001EA4  6F                 	db	111
   428  001EA5  72                 	db	114
   429  001EA6  2C                 	db	44
   430  001EA7  20                 	db	32
   431  001EA8  70                 	db	112
   432  001EA9  6C                 	db	108
   433  001EAA  65                 	db	101
   434  001EAB  61                 	db	97
   435  001EAC  73                 	db	115
   436  001EAD  65                 	db	101
   437  001EAE  20                 	db	32
   438  001EAF  72                 	db	114
   439  001EB0  65                 	db	101
   440  001EB1  73                 	db	115
   441  001EB2  65                 	db	101
   442  001EB3  74                 	db	116
   443  001EB4  20                 	db	32
   444  001EB5  74                 	db	116
   445  001EB6  68                 	db	104
   446  001EB7  65                 	db	101
   447  001EB8  20                 	db	32
   448  001EB9  64                 	db	100
   449  001EBA  65                 	db	101
   450  001EBB  76                 	db	118
   451  001EBC  69                 	db	105
   452  001EBD  63                 	db	99
   453  001EBE  65                 	db	101
   454  001EBF  21                 	db	33
   455  001EC0  0A                 	db	10
   456  001EC1  00                 	db	0
   457                           
   458                           	psect	smallconst
   459  000600                     __psmallconst:
   460                           	callstack 0
   461  000600  00                 	db	0
   462  000601  FFAC               	dw	65452
   463  000603  3DB3               	dw	15795
   464  000605                     __end_ofrotateObj@stepAngle:
   465                           	callstack 0
   466  000605  0400               	dw	1024
   467  000607                     __end_of_therm_pressure:
   468                           	callstack 0
   469  000607  0200               	dw	512
   470  000609                     __end_of_touch_pressure:
   471                           	callstack 0
   472  000609                     _feeder3Pos:
   473                           	callstack 0
   474  000609  19                 	db	25
   475  00060A  19                 	db	25
   476  00060B                     __end_of_feeder3Pos:
   477                           	callstack 0
   478  00060B                     _feeder2Pos:
   479                           	callstack 0
   480  00060B  0F                 	db	15
   481  00060C  0F                 	db	15
   482  00060D                     __end_of_feeder2Pos:
   483                           	callstack 0
   484  00060D                     _feeder1Pos:
   485                           	callstack 0
   486  00060D  05                 	db	5
   487  00060E  05                 	db	5
   488  00060F                     __end_of_feeder1Pos:
   489                           	callstack 0
   490  0000                     _TMR0	set	4054
   491  0000                     _TXREG	set	4013
   492  0000                     _SPBRG	set	4015
   493  0000                     _TXSTAbits	set	4012
   494  0000                     _TRISCbits	set	3988
   495  0000                     _RCREG1	set	4014
   496  0000                     _ADRESH	set	4036
   497  0000                     _ADRESL	set	4035
   498  0000                     _PIR1bits	set	3998
   499  0000                     _IPR1bits	set	3999
   500  0000                     _ADCON0bits	set	4034
   501  0000                     _PIE1bits	set	3997
   502  0000                     _RCONbits	set	4048
   503  0000                     _INTCONbits	set	4082
   504  0000                     _RCSTAbits	set	4011
   505  0000                     _RCSTA1bits	set	4011
   506  0000                     _LATD	set	3980
   507  0000                     _PORTDbits	set	3971
   508  0000                     _TMR2	set	4044
   509  0000                     _PORTEbits	set	3972
   510  0000                     _T0CONbits	set	4053
   511  0000                     _T2CONbits	set	4042
   512  0000                     _LATDbits	set	3980
   513  0000                     _LATCbits	set	3979
   514  0000                     _LATBbits	set	3978
   515  0000                     _LATAbits	set	3977
   516  0000                     _TRISDbits	set	3989
   517  0000                     _TRISEbits	set	3990
   518  0000                     _TRISD	set	3989
   519  0000                     _TRISC	set	3988
   520  0000                     _TRISB	set	3987
   521  0000                     _TRISA	set	3986
   522  0000                     _ADCON1bits	set	4033
   523  00060F  00                 	db	0	; dummy byte at the end
   524  0000                     
   525                           ; #config settings
   526                           
   527                           	psect	cinit
   528  002048                     __pcinit:
   529                           	callstack 0
   530  002048                     start_initialization:
   531                           	callstack 0
   532  002048                     __initialization:
   533                           	callstack 0
   534                           
   535                           ; Initialize objects allocated to BANK1 (214 bytes)
   536                           ; load TBLPTR registers with __pidataBANK1
   537  002048  0EEC               	movlw	low __pidataBANK1
   538  00204A  6EF6               	movwf	tblptrl,c
   539  00204C  0E1D               	movlw	high __pidataBANK1
   540  00204E  6EF7               	movwf	tblptrh,c
   541  002050  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   542  002052  6EF8               	movwf	tblptru,c
   543  002054  EE01  F000         	lfsr	0,__pdataBANK1
   544  002058  EE10 F0D6          	lfsr	1,214
   545  00205C                     copy_data0:
   546  00205C  0009               	tblrd		*+
   547  00205E  CFF5 FFEE          	movff	tablat,postinc0
   548  002062  50E5               	movf	postdec1,w,c
   549  002064  50E1               	movf	fsr1l,w,c
   550  002066  E1FA               	bnz	copy_data0
   551                           
   552                           ; Initialize objects allocated to BANK0 (91 bytes)
   553                           ; load TBLPTR registers with __pidataBANK0
   554  002068  0E8A               	movlw	low __pidataBANK0
   555  00206A  6EF6               	movwf	tblptrl,c
   556  00206C  0E22               	movlw	high __pidataBANK0
   557  00206E  6EF7               	movwf	tblptrh,c
   558  002070  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   559  002072  6EF8               	movwf	tblptru,c
   560  002074  EE00  F080         	lfsr	0,__pdataBANK0
   561  002078  EE10 F05B          	lfsr	1,91
   562  00207C                     copy_data1:
   563  00207C  0009               	tblrd		*+
   564  00207E  CFF5 FFEE          	movff	tablat,postinc0
   565  002082  50E5               	movf	postdec1,w,c
   566  002084  50E1               	movf	fsr1l,w,c
   567  002086  E1FA               	bnz	copy_data1
   568                           
   569                           ; Initialize objects allocated to COMRAM (5 bytes)
   570                           ; load TBLPTR registers with __pidataCOMRAM
   571  002088  0EAA               	movlw	low __pidataCOMRAM
   572  00208A  6EF6               	movwf	tblptrl,c
   573  00208C  0E25               	movlw	high __pidataCOMRAM
   574  00208E  6EF7               	movwf	tblptrh,c
   575  002090  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   576  002092  6EF8               	movwf	tblptru,c
   577  002094  EE00  F069         	lfsr	0,__pdataCOMRAM
   578  002098  EE10 F005          	lfsr	1,5
   579  00209C                     copy_data2:
   580  00209C  0009               	tblrd		*+
   581  00209E  CFF5 FFEE          	movff	tablat,postinc0
   582  0020A2  50E5               	movf	postdec1,w,c
   583  0020A4  50E1               	movf	fsr1l,w,c
   584  0020A6  E1FA               	bnz	copy_data2
   585                           
   586                           ; Clear objects allocated to BANK0 (28 bytes)
   587  0020A8  EE00  F0DB         	lfsr	0,__pbssBANK0
   588  0020AC  0E1C               	movlw	28
   589  0020AE                     clear_0:
   590  0020AE  6AEE               	clrf	postinc0,c
   591  0020B0  06E8               	decf	wreg,f,c
   592  0020B2  E1FD               	bnz	clear_0
   593                           
   594                           ; Clear objects allocated to COMRAM (36 bytes)
   595  0020B4  EE00  F045         	lfsr	0,__pbssCOMRAM
   596  0020B8  0E24               	movlw	36
   597  0020BA                     clear_1:
   598  0020BA  6AEE               	clrf	postinc0,c
   599  0020BC  06E8               	decf	wreg,f,c
   600  0020BE  E1FD               	bnz	clear_1
   601  0020C0                     end_of_initialization:
   602                           	callstack 0
   603  0020C0                     __end_of__initialization:
   604                           	callstack 0
   605  0020C0  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   606  0020C2  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   607  0020C4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   608  0020C6  6EF8               	movwf	tblptru,c
   609  0020C8  0100               	movlb	0
   610  0020CA  EFBF  F009         	goto	_main	;jump to C main() function
   611                           
   612                           	psect	bssCOMRAM
   613  000045                     __pbssCOMRAM:
   614                           	callstack 0
   615  000045                     storeData@receivedMex:
   616                           	callstack 0
   617  000045                     	ds	9
   618  00004E                     _posVector:
   619                           	callstack 0
   620  00004E                     	ds	3
   621  000051                     isr@single_cycle:
   622                           	callstack 0
   623  000051                     	ds	2
   624  000053                     _ADC_res:
   625                           	callstack 0
   626  000053                     	ds	2
   627  000055                     _pwmPeriod:
   628                           	callstack 0
   629  000055                     	ds	2
   630  000057                     _newFeeder:
   631                           	callstack 0
   632  000057                     	ds	2
   633  000059                     _rotAngle:
   634                           	callstack 0
   635  000059                     	ds	2
   636  00005B                     _tm0Error:
   637                           	callstack 0
   638  00005B                     	ds	2
   639  00005D                     	ds	1
   640  00005E                     storeData@counter:
   641                           	callstack 0
   642  00005E                     	ds	1
   643  00005F                     __newSequence:
   644                           	callstack 0
   645  00005F                     	ds	1
   646  000060                     __fatalError:
   647                           	callstack 0
   648  000060                     	ds	1
   649  000061                     _dataCounter:
   650                           	callstack 0
   651  000061                     	ds	1
   652  000062                     isr@completeStep:
   653                           	callstack 0
   654  000062                     	ds	1
   655  000063                     isr@tm0Count:
   656                           	callstack 0
   657  000063                     	ds	1
   658  000064                     _therm_rel:
   659                           	callstack 0
   660  000064                     	ds	1
   661  000065                     _touch_rel:
   662                           	callstack 0
   663  000065                     	ds	1
   664  000066                     _stepToggle:
   665                           	callstack 0
   666  000066                     	ds	1
   667  000067                     _pwmStep:
   668                           	callstack 0
   669  000067                     	ds	1
   670  000068                     _tm0Limit:
   671                           	callstack 0
   672  000068                     	ds	1
   673                           
   674                           	psect	dataCOMRAM
   675  000069                     __pdataCOMRAM:
   676                           	callstack 0
   677  000069                     	ds	2
   678  00006B                     	ds	2
   679  00006D                     storeData@mexLength:
   680                           	callstack 0
   681  00006D                     	ds	1
   682                           
   683                           	psect	bssBANK0
   684  0000DB                     __pbssBANK0:
   685                           	callstack 0
   686  0000DB                     _dataSequence:
   687                           	callstack 0
   688  0000DB                     	ds	20
   689  0000EF                     _newSequenceData:
   690                           	callstack 0
   691  0000EF                     	ds	8
   692                           
   693                           	psect	dataBANK0
   694  000080                     __pdataBANK0:
   695                           	callstack 0
   696  000080                     rotateObj@rotSequence:
   697                           	callstack 0
   698  000080                     	ds	4
   699  000084                     _errString_Bound:
   700                           	callstack 0
   701  000084                     	ds	33
   702  0000A5                     _errString_Feed:
   703                           	callstack 0
   704  0000A5                     	ds	30
   705  0000C3                     _errString_Command:
   706                           	callstack 0
   707  0000C3                     	ds	24
   708                           
   709                           	psect	dataBANK1
   710  000100                     __pdataBANK1:
   711                           	callstack 0
   712  000100                     _errString_PointZ:
   713                           	callstack 0
   714  000100                     	ds	53
   715  000135                     _errString_Point:
   716                           	callstack 0
   717  000135                     	ds	41
   718  00015E                     _errString_ZEND:
   719                           	callstack 0
   720  00015E                     	ds	41
   721  000187                     _errString_Reset:
   722                           	callstack 0
   723  000187                     	ds	40
   724  0001AF                     _errString_Fatal:
   725                           	callstack 0
   726  0001AF                     	ds	39
   727                           
   728                           	psect	cstackBANK1
   729  0001D6                     __pcstackBANK1:
   730                           	callstack 0
   731  0001D6                     executeData@errCode:
   732                           	callstack 0
   733                           
   734                           ; 1 bytes @ 0x0
   735  0001D6                     	ds	1
   736  0001D7                     executeData@data:
   737                           	callstack 0
   738                           
   739                           ; 2 bytes @ 0x1
   740  0001D7                     	ds	2
   741  0001D9                     ??_main:
   742                           
   743                           ; 1 bytes @ 0x3
   744  0001D9                     	ds	2
   745  0001DB                     main@errCode:
   746                           	callstack 0
   747                           
   748                           ; 1 bytes @ 0x5
   749  0001DB                     	ds	1
   750  0001DC                     main@newData:
   751                           	callstack 0
   752                           
   753                           ; 2 bytes @ 0x6
   754  0001DC                     	ds	2
   755                           
   756                           	psect	cstackBANK0
   757  0000F7                     __pcstackBANK0:
   758                           	callstack 0
   759  0000F7                     ??_rotateObj:
   760                           
   761                           ; 1 bytes @ 0x0
   762  0000F7                     	ds	3
   763  0000FA                     rotateObj@rotAngle:
   764                           	callstack 0
   765                           
   766                           ; 1 bytes @ 0x3
   767  0000FA                     	ds	1
   768  0000FB                     rotateObj@totStep:
   769                           	callstack 0
   770                           
   771                           ; 2 bytes @ 0x4
   772  0000FB                     	ds	2
   773  0000FD                     rotateObj@i:
   774                           	callstack 0
   775                           
   776                           ; 2 bytes @ 0x6
   777  0000FD                     	ds	2
   778                           
   779                           	psect	cstackCOMRAM
   780  000001                     __pcstackCOMRAM:
   781                           	callstack 0
   782  000001                     ?_retPeriod:
   783                           	callstack 0
   784  000001                     i2uartTx@ptr:
   785                           	callstack 0
   786                           
   787                           ; 2 bytes @ 0x0
   788  000001                     	ds	2
   789  000003                     i2uartTx@length:
   790                           	callstack 0
   791                           
   792                           ; 1 bytes @ 0x2
   793  000003                     	ds	1
   794  000004                     i2uartTx@i:
   795                           	callstack 0
   796                           
   797                           ; 1 bytes @ 0x3
   798  000004                     	ds	1
   799  000005                     ??i2_printError:
   800                           
   801                           ; 1 bytes @ 0x4
   802  000005                     	ds	2
   803  000007                     i2printError@errCode:
   804                           	callstack 0
   805                           
   806                           ; 1 bytes @ 0x6
   807  000007                     	ds	1
   808  000008                     ??i2_storeData:
   809                           
   810                           ; 1 bytes @ 0x7
   811  000008                     	ds	2
   812  00000A                     i2storeData@data:
   813                           	callstack 0
   814                           
   815                           ; 1 bytes @ 0x9
   816  00000A                     	ds	1
   817  00000B                     ??_isr:
   818                           
   819                           ; 1 bytes @ 0xA
   820  00000B                     	ds	6
   821  000011                     isr@temp:
   822                           	callstack 0
   823                           
   824                           ; 1 bytes @ 0x10
   825  000011                     	ds	1
   826  000012                     ??_shiftData:
   827  000012                     ?_stepMade:
   828                           	callstack 0
   829  000012                     ?_stepCounter:
   830                           	callstack 0
   831  000012                     ?_returnTouch:
   832                           	callstack 0
   833  000012                     ?_returnTherm:
   834                           	callstack 0
   835  000012                     ?_getNewSequence:
   836                           	callstack 0
   837  000012                     ?_getData:
   838                           	callstack 0
   839  000012                     ?___xxtofl:
   840                           	callstack 0
   841  000012                     setStep@motor:
   842                           	callstack 0
   843  000012                     enableMotor@motor:
   844                           	callstack 0
   845  000012                     setDirection@motor:
   846                           	callstack 0
   847  000012                     setDecay@motor:
   848                           	callstack 0
   849  000012                     tim2Init@_pwmPeriod:
   850                           	callstack 0
   851  000012                     uartTx@ptr:
   852                           	callstack 0
   853  000012                     ___xxtofl@val:
   854                           	callstack 0
   855                           
   856                           ; 4 bytes @ 0x11
   857  000012                     	ds	1
   858  000013                     ??_setStep:
   859  000013                     ??_enableMotor:
   860  000013                     ??_setDirection:
   861  000013                     ??_setDecay:
   862                           
   863                           ; 1 bytes @ 0x12
   864  000013                     	ds	1
   865  000014                     stepMade@temp:
   866                           	callstack 0
   867  000014                     shiftData@i:
   868                           	callstack 0
   869  000014                     uartTx@length:
   870                           	callstack 0
   871                           
   872                           ; 1 bytes @ 0x13
   873  000014                     	ds	1
   874  000015                     setStep@step:
   875                           	callstack 0
   876  000015                     enableMotor@enable:
   877                           	callstack 0
   878  000015                     setDirection@direction:
   879                           	callstack 0
   880  000015                     setDecay@decay:
   881                           	callstack 0
   882  000015                     uartTx@i:
   883                           	callstack 0
   884                           
   885                           ; 1 bytes @ 0x14
   886  000015                     	ds	1
   887  000016                     ??_printError:
   888  000016                     ??___xxtofl:
   889  000016                     resetPosition@keepMovingX:
   890                           	callstack 0
   891  000016                     moveToPoint@x1:
   892                           	callstack 0
   893                           
   894                           ; 2 bytes @ 0x15
   895  000016                     	ds	1
   896  000017                     resetPosition@keepMovingY:
   897                           	callstack 0
   898                           
   899                           ; 1 bytes @ 0x16
   900  000017                     	ds	1
   901  000018                     resetPosition@keepMovingZ:
   902                           	callstack 0
   903  000018                     printError@errCode:
   904                           	callstack 0
   905  000018                     moveToPoint@y1:
   906                           	callstack 0
   907                           
   908                           ; 2 bytes @ 0x17
   909  000018                     	ds	1
   910  000019                     ??_storeData:
   911                           
   912                           ; 1 bytes @ 0x18
   913  000019                     	ds	1
   914  00001A                     ___xxtofl@sign:
   915                           	callstack 0
   916  00001A                     moveToPoint@x2:
   917                           	callstack 0
   918                           
   919                           ; 2 bytes @ 0x19
   920  00001A                     	ds	1
   921  00001B                     storeData@data:
   922                           	callstack 0
   923  00001B                     ___xxtofl@exp:
   924                           	callstack 0
   925                           
   926                           ; 1 bytes @ 0x1A
   927  00001B                     	ds	1
   928  00001C                     moveToPoint@y2:
   929                           	callstack 0
   930  00001C                     ___xxtofl@arg:
   931                           	callstack 0
   932                           
   933                           ; 4 bytes @ 0x1B
   934  00001C                     	ds	2
   935  00001E                     ??_moveToPoint:
   936                           
   937                           ; 1 bytes @ 0x1D
   938  00001E                     	ds	2
   939  000020                     ?___fldiv:
   940                           	callstack 0
   941  000020                     moveToPoint@keepMovingX:
   942                           	callstack 0
   943  000020                     ___fldiv@b:
   944                           	callstack 0
   945                           
   946                           ; 4 bytes @ 0x1F
   947  000020                     	ds	1
   948  000021                     moveToPoint@keepMovingY:
   949                           	callstack 0
   950                           
   951                           ; 1 bytes @ 0x20
   952  000021                     	ds	1
   953  000022                     moveToPoint@MOT1Direction:
   954                           	callstack 0
   955                           
   956                           ; 1 bytes @ 0x21
   957  000022                     	ds	1
   958  000023                     moveToPoint@MOT2Direction:
   959                           	callstack 0
   960                           
   961                           ; 1 bytes @ 0x22
   962  000023                     	ds	1
   963  000024                     ___fldiv@a:
   964                           	callstack 0
   965                           
   966                           ; 4 bytes @ 0x23
   967  000024                     	ds	4
   968  000028                     ??___fldiv:
   969                           
   970                           ; 1 bytes @ 0x27
   971  000028                     	ds	4
   972  00002C                     ___fldiv@rem:
   973                           	callstack 0
   974                           
   975                           ; 4 bytes @ 0x2B
   976  00002C                     	ds	4
   977  000030                     ___fldiv@sign:
   978                           	callstack 0
   979                           
   980                           ; 1 bytes @ 0x2F
   981  000030                     	ds	1
   982  000031                     ___fldiv@new_exp:
   983                           	callstack 0
   984                           
   985                           ; 2 bytes @ 0x30
   986  000031                     	ds	2
   987  000033                     ___fldiv@grs:
   988                           	callstack 0
   989                           
   990                           ; 4 bytes @ 0x32
   991  000033                     	ds	4
   992  000037                     ___fldiv@bexp:
   993                           	callstack 0
   994                           
   995                           ; 1 bytes @ 0x36
   996  000037                     	ds	1
   997  000038                     ___fldiv@aexp:
   998                           	callstack 0
   999                           
  1000                           ; 1 bytes @ 0x37
  1001  000038                     	ds	1
  1002  000039                     ?___fltol:
  1003                           	callstack 0
  1004  000039                     ___fltol@f1:
  1005                           	callstack 0
  1006                           
  1007                           ; 4 bytes @ 0x38
  1008  000039                     	ds	4
  1009  00003D                     ??___fltol:
  1010                           
  1011                           ; 1 bytes @ 0x3C
  1012  00003D                     	ds	4
  1013  000041                     ___fltol@sign1:
  1014                           	callstack 0
  1015                           
  1016                           ; 1 bytes @ 0x40
  1017  000041                     	ds	1
  1018  000042                     ___fltol@exp1:
  1019                           	callstack 0
  1020                           
  1021                           ; 1 bytes @ 0x41
  1022  000042                     	ds	1
  1023  000043                     ??_executeData:
  1024                           
  1025                           ; 1 bytes @ 0x42
  1026  000043                     	ds	2
  1027                           
  1028 ;;
  1029 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1030 ;;
  1031 ;; *************** function _main *****************
  1032 ;; Defined at:
  1033 ;;		line 17 in file "main.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;		None
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;  newData         2    6[BANK1 ] PTR struct .
  1038 ;;		 -> newSequenceData(8), 
  1039 ;;  errCode         1    5[BANK1 ] unsigned char 
  1040 ;; Return value:  Size  Location     Type
  1041 ;;                  1    wreg      void 
  1042 ;; Registers used:
  1043 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1044 ;; Tracked objects:
  1045 ;;		On entry : 0/0
  1046 ;;		On exit  : 0/0
  1047 ;;		Unchanged: 0/0
  1048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1049 ;;      Params:         0       0       0       0       0       0       0
  1050 ;;      Locals:         0       0       3       0       0       0       0
  1051 ;;      Temps:          0       0       2       0       0       0       0
  1052 ;;      Totals:         0       0       5       0       0       0       0
  1053 ;;Total ram usage:        5 bytes
  1054 ;; Hardware stack levels required when called:    7
  1055 ;; This function calls:
  1056 ;;		_clearTM0
  1057 ;;		_enableMotor
  1058 ;;		_executeData
  1059 ;;		_fatalError
  1060 ;;		_getNewSequence
  1061 ;;		_initADC
  1062 ;;		_initPinMotors
  1063 ;;		_interruptInit
  1064 ;;		_newSequence
  1065 ;;		_printError
  1066 ;;		_readSeq
  1067 ;;		_reduceSeq
  1068 ;;		_resetNewSequence
  1069 ;;		_resetPosition
  1070 ;;		_shiftData
  1071 ;;		_storeData
  1072 ;;		_tim0Init
  1073 ;;		_tim2Init
  1074 ;;		_usartInit
  1075 ;; This function is called by:
  1076 ;;		Startup code after reset
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text0
  1081  00137E                     __ptext0:
  1082                           	callstack 0
  1083  00137E                     _main:
  1084                           	callstack 24
  1085  00137E  FFFF               	dw	65535	; assembler added errata NOP
  1086                           
  1087                           ;main.c: 21:     interruptInit();
  1088  001380  ECC1  F011         	call	_interruptInit	;wreg free
  1089  001384                     
  1090                           ;main.c: 22:     initPinMotors();
  1091  001384  EC0A  F012         	call	_initPinMotors	;wreg free
  1092  001388                     
  1093                           ;main.c: 23:     initADC();
  1094  001388  EC1D  F012         	call	_initADC	;wreg free
  1095  00138C                     
  1096                           ;main.c: 24:     usartInit();
  1097  00138C  EC30  F012         	call	_usartInit	;wreg free
  1098  001390                     
  1099                           ;main.c: 25:     tim0Init();
  1100  001390  EC53  F012         	call	_tim0Init	;wreg free
  1101  001394                     
  1102                           ;main.c: 26:     tim2Init(10);
  1103  001394  0E00               	movlw	0
  1104  001396  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1105  001398  0E0A               	movlw	10
  1106  00139A  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1107  00139C  EC3F  F012         	call	_tim2Init	;wreg free
  1108  0013A0                     
  1109                           ;main.c: 29:     errCode = resetPosition();
  1110  0013A0  ECC5  F008         	call	_resetPosition	;wreg free
  1111  0013A4  0101               	movlb	1	; () banked
  1112  0013A6  6FDB               	movwf	main@errCode& (0+255),b
  1113  0013A8                     
  1114                           ; BSR set to: 1
  1115                           ;main.c: 30:     if(errCode != 0){
  1116  0013A8  51DB               	movf	main@errCode& (0+255),w,b
  1117  0013AA  B4D8               	btfsc	status,2,c
  1118  0013AC  EFDA  F009         	goto	u3531
  1119  0013B0  EFDD  F009         	goto	u3530
  1120  0013B4                     u3531:
  1121  0013B4  FFFF               	dw	65535	; assembler added errata NOP
  1122  0013B6  EFE4  F009         	goto	l316
  1123  0013BA                     u3530:
  1124  0013BA  FFFF               	dw	65535	; assembler added errata NOP
  1125  0013BC                     
  1126                           ; BSR set to: 1
  1127                           ;main.c: 31:         printError(errCode);
  1128  0013BC  51DB               	movf	main@errCode& (0+255),w,b
  1129  0013BE  EC7A  F00C         	call	_printError
  1130  0013C2                     l317:
  1131  0013C2  FFFF               	dw	65535	; assembler added errata NOP
  1132  0013C4  EFE1  F009         	goto	l317
  1133  0013C8                     l316:
  1134  0013C8  FFFF               	dw	65535	; assembler added errata NOP
  1135                           
  1136                           ; BSR set to: 1
  1137                           ;main.c: 36:     RCSTA1bits.CREN = 1;
  1138  0013CA  88AB               	bsf	171,4,c	;volatile
  1139  0013CC                     l4238:
  1140  0013CC  FFFF               	dw	65535	; assembler added errata NOP
  1141                           
  1142                           ;main.c: 39:         if(fatalError()){
  1143  0013CE  ECC5  F012         	call	_fatalError	;wreg free
  1144  0013D2  0900               	iorlw	0
  1145  0013D4  B4D8               	btfsc	status,2,c
  1146  0013D6  EFEF  F009         	goto	u3541
  1147  0013DA  EFF2  F009         	goto	u3540
  1148  0013DE                     u3541:
  1149  0013DE  FFFF               	dw	65535	; assembler added errata NOP
  1150  0013E0  EF08  F00A         	goto	l4244
  1151  0013E4                     u3540:
  1152  0013E4  FFFF               	dw	65535	; assembler added errata NOP
  1153  0013E6                     
  1154                           ;main.c: 41:             enableMotor(1, 0);
  1155  0013E6  0E00               	movlw	0
  1156  0013E8  6E12               	movwf	enableMotor@motor^0,c
  1157  0013EA  0E01               	movlw	1
  1158  0013EC  ECA1  F010         	call	_enableMotor
  1159                           
  1160                           ;main.c: 42:             enableMotor(1, 1);
  1161  0013F0  0E01               	movlw	1
  1162  0013F2  6E12               	movwf	enableMotor@motor^0,c
  1163  0013F4  0E01               	movlw	1
  1164  0013F6  ECA1  F010         	call	_enableMotor
  1165                           
  1166                           ;main.c: 43:             enableMotor(1, 2);
  1167  0013FA  0E02               	movlw	2
  1168  0013FC  6E12               	movwf	enableMotor@motor^0,c
  1169  0013FE  0E01               	movlw	1
  1170  001400  ECA1  F010         	call	_enableMotor
  1171  001404                     
  1172                           ;main.c: 45:             printError(7);
  1173  001404  0E07               	movlw	7
  1174  001406  EC7A  F00C         	call	_printError
  1175  00140A                     l322:
  1176  00140A  FFFF               	dw	65535	; assembler added errata NOP
  1177  00140C  EF05  F00A         	goto	l322
  1178  001410                     l4244:
  1179  001410  FFFF               	dw	65535	; assembler added errata NOP
  1180                           
  1181                           ;main.c: 48:         if(newSequence()){
  1182  001412  ECC1  F012         	call	_newSequence	;wreg free
  1183  001416  0900               	iorlw	0
  1184  001418  B4D8               	btfsc	status,2,c
  1185  00141A  EF11  F00A         	goto	u3551
  1186  00141E  EF14  F00A         	goto	u3550
  1187  001422                     u3551:
  1188  001422  FFFF               	dw	65535	; assembler added errata NOP
  1189  001424  EF5F  F00A         	goto	l4268
  1190  001428                     u3550:
  1191  001428  FFFF               	dw	65535	; assembler added errata NOP
  1192  00142A                     
  1193                           ;main.c: 49:             t_newSequence* newData = getNewSequence();
  1194  00142A  EC5C  F012         	call	_getNewSequence	;wreg free
  1195  00142E  C012  F1DC         	movff	?_getNewSequence,main@newData
  1196  001432  C013  F1DD         	movff	?_getNewSequence+1,main@newData+1
  1197  001436                     
  1198                           ;main.c: 51:             newFeeder[0] = newData ->init_posX;
  1199  001436  0101               	movlb	1	; () banked
  1200  001438  EE20 F002          	lfsr	2,2
  1201  00143C  51DC               	movf	main@newData& (0+255),w,b
  1202  00143E  26D9               	addwf	fsr2l,f,c
  1203  001440  51DD               	movf	(main@newData+1)& (0+255),w,b
  1204  001442  22DA               	addwfc	fsr2h,f,c
  1205  001444  50DF               	movf	indf2,w,c
  1206  001446  6E57               	movwf	_newFeeder^0,c
  1207  001448                     
  1208                           ; BSR set to: 1
  1209                           ;main.c: 52:             newFeeder[1] = newData ->init_posY;
  1210  001448  EE20 F003          	lfsr	2,3
  1211  00144C  51DC               	movf	main@newData& (0+255),w,b
  1212  00144E  26D9               	addwf	fsr2l,f,c
  1213  001450  51DD               	movf	(main@newData+1)& (0+255),w,b
  1214  001452  22DA               	addwfc	fsr2h,f,c
  1215  001454  50DF               	movf	indf2,w,c
  1216  001456  6E58               	movwf	(_newFeeder+1)^0,c
  1217  001458                     
  1218                           ; BSR set to: 1
  1219                           ;main.c: 56:             RCSTAbits.CREN = 0;
  1220  001458  98AB               	bcf	171,4,c	;volatile
  1221  00145A                     
  1222                           ; BSR set to: 1
  1223                           ;main.c: 59:             storeData(0);
  1224  00145A  0E00               	movlw	0
  1225  00145C  EC7D  F00A         	call	_storeData
  1226  001460                     
  1227                           ;main.c: 60:             storeData(0xFF);
  1228  001460  0EFF               	movlw	255
  1229  001462  EC7D  F00A         	call	_storeData
  1230  001466                     
  1231                           ;main.c: 61:             storeData(newData ->end_posX);
  1232  001466  0101               	movlb	1	; () banked
  1233  001468  EE20 F005          	lfsr	2,5
  1234  00146C  51DC               	movf	main@newData& (0+255),w,b
  1235  00146E  26D9               	addwf	fsr2l,f,c
  1236  001470  51DD               	movf	(main@newData+1)& (0+255),w,b
  1237  001472  22DA               	addwfc	fsr2h,f,c
  1238  001474  50DF               	movf	indf2,w,c
  1239  001476  EC7D  F00A         	call	_storeData
  1240  00147A                     
  1241                           ;main.c: 62:             storeData(newData ->end_posY);
  1242  00147A  0101               	movlb	1	; () banked
  1243  00147C  EE20 F006          	lfsr	2,6
  1244  001480  51DC               	movf	main@newData& (0+255),w,b
  1245  001482  26D9               	addwf	fsr2l,f,c
  1246  001484  51DD               	movf	(main@newData+1)& (0+255),w,b
  1247  001486  22DA               	addwfc	fsr2h,f,c
  1248  001488  50DF               	movf	indf2,w,c
  1249  00148A  EC7D  F00A         	call	_storeData
  1250  00148E                     
  1251                           ;main.c: 63:             storeData(newData ->end_rot - newData ->init_rot);
  1252  00148E  0101               	movlb	1	; () banked
  1253  001490  EE20 F004          	lfsr	2,4
  1254  001494  51DC               	movf	main@newData& (0+255),w,b
  1255  001496  26D9               	addwf	fsr2l,f,c
  1256  001498  51DD               	movf	(main@newData+1)& (0+255),w,b
  1257  00149A  22DA               	addwfc	fsr2h,f,c
  1258  00149C  50DF               	movf	indf2,w,c
  1259  00149E  6FD9               	movwf	??_main& (0+255),b
  1260  0014A0  EE20 F007          	lfsr	2,7
  1261  0014A4  51DC               	movf	main@newData& (0+255),w,b
  1262  0014A6  26D9               	addwf	fsr2l,f,c
  1263  0014A8  51DD               	movf	(main@newData+1)& (0+255),w,b
  1264  0014AA  22DA               	addwfc	fsr2h,f,c
  1265  0014AC  50DF               	movf	indf2,w,c
  1266  0014AE  6FDA               	movwf	(??_main+1)& (0+255),b
  1267  0014B0  51D9               	movf	??_main& (0+255),w,b
  1268  0014B2  5DDA               	subwf	(??_main+1)& (0+255),w,b
  1269  0014B4  EC7D  F00A         	call	_storeData
  1270  0014B8                     
  1271                           ;main.c: 66:             RCSTAbits.CREN = 1;
  1272  0014B8  88AB               	bsf	171,4,c	;volatile
  1273  0014BA                     
  1274                           ;main.c: 69:             resetNewSequence();
  1275  0014BA  EC91  F012         	call	_resetNewSequence	;wreg free
  1276  0014BE                     l4268:
  1277  0014BE  FFFF               	dw	65535	; assembler added errata NOP
  1278                           
  1279                           ;main.c: 81:         if(readSeq()){
  1280  0014C0  ECBD  F012         	call	_readSeq	;wreg free
  1281  0014C4  0900               	iorlw	0
  1282  0014C6  B4D8               	btfsc	status,2,c
  1283  0014C8  EF68  F00A         	goto	u3561
  1284  0014CC  EF6B  F00A         	goto	u3560
  1285  0014D0                     u3561:
  1286  0014D0  FFFF               	dw	65535	; assembler added errata NOP
  1287  0014D2  EFE6  F009         	goto	l4238
  1288  0014D6                     u3560:
  1289  0014D6  FFFF               	dw	65535	; assembler added errata NOP
  1290  0014D8                     
  1291                           ;main.c: 84:             errCode = executeData();
  1292  0014D8  EC82  F006         	call	_executeData	;wreg free
  1293  0014DC  0101               	movlb	1	; () banked
  1294  0014DE  6FDB               	movwf	main@errCode& (0+255),b
  1295  0014E0                     
  1296                           ; BSR set to: 1
  1297                           ;main.c: 85:             printError(errCode);
  1298  0014E0  51DB               	movf	main@errCode& (0+255),w,b
  1299  0014E2  EC7A  F00C         	call	_printError
  1300  0014E6                     
  1301                           ;main.c: 86:             clearTM0();
  1302  0014E6  EC6A  F012         	call	_clearTM0	;wreg free
  1303  0014EA                     
  1304                           ;main.c: 90:             reduceSeq();
  1305  0014EA  ECB9  F012         	call	_reduceSeq	;wreg free
  1306  0014EE                     
  1307                           ;main.c: 91:             shiftData();
  1308  0014EE  EC15  F011         	call	_shiftData	;wreg free
  1309  0014F2  EFE6  F009         	goto	l4238
  1310  0014F6  EFB5  F000         	goto	start
  1311  0014FA                     __end_of_main:
  1312                           	callstack 0
  1313                           
  1314 ;; *************** function _usartInit *****************
  1315 ;; Defined at:
  1316 ;;		line 34 in file "usart.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;		None
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;		None
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      void 
  1323 ;; Registers used:
  1324 ;;		wreg, status,2
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1330 ;;      Params:         0       0       0       0       0       0       0
  1331 ;;      Locals:         0       0       0       0       0       0       0
  1332 ;;      Temps:          0       0       0       0       0       0       0
  1333 ;;      Totals:         0       0       0       0       0       0       0
  1334 ;;Total ram usage:        0 bytes
  1335 ;; Hardware stack levels used:    1
  1336 ;; Hardware stack levels required when called:    4
  1337 ;; This function calls:
  1338 ;;		Nothing
  1339 ;; This function is called by:
  1340 ;;		_main
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           	psect	text1
  1345  002460                     __ptext1:
  1346                           	callstack 0
  1347  002460                     _usartInit:
  1348                           	callstack 0
  1349  002460  FFFF               	dw	65535	; assembler added errata NOP
  1350  002462                     
  1351                           ;usart.c: 36:     TRISCbits.TRISC6 = 0;
  1352  002462  9C94               	bcf	148,6,c	;volatile
  1353                           
  1354                           ;usart.c: 37:     TRISCbits.TRISC7 = 1;
  1355  002464  8E94               	bsf	148,7,c	;volatile
  1356                           
  1357                           ;usart.c: 39:     TXSTAbits.TX9 = 0;
  1358  002466  9CAC               	bcf	172,6,c	;volatile
  1359                           
  1360                           ;usart.c: 40:     TXSTAbits.TXEN = 1;
  1361  002468  8AAC               	bsf	172,5,c	;volatile
  1362                           
  1363                           ;usart.c: 41:     TXSTAbits.SYNC = 0;
  1364  00246A  98AC               	bcf	172,4,c	;volatile
  1365                           
  1366                           ;usart.c: 42:     TXSTAbits.BRGH = 0;
  1367  00246C  94AC               	bcf	172,2,c	;volatile
  1368                           
  1369                           ;usart.c: 44:     RCSTAbits.SPEN = 1;
  1370  00246E  8EAB               	bsf	171,7,c	;volatile
  1371                           
  1372                           ;usart.c: 45:     RCSTAbits.RX9 = 0;
  1373  002470  9CAB               	bcf	171,6,c	;volatile
  1374                           
  1375                           ;usart.c: 46:     RCSTAbits.CREN = 0;
  1376  002472  98AB               	bcf	171,4,c	;volatile
  1377                           
  1378                           ;usart.c: 47:     RCSTAbits.ADDEN = 0;
  1379  002474  96AB               	bcf	171,3,c	;volatile
  1380  002476                     
  1381                           ;usart.c: 50:     SPBRG = 25;
  1382  002476  0E19               	movlw	25
  1383  002478  6EAF               	movwf	175,c	;volatile
  1384  00247A  0012               	return		;funcret
  1385  00247C  FFFF               	dw	65535	; errata NOP
  1386  00247E                     __end_of_usartInit:
  1387                           	callstack 0
  1388                           
  1389 ;; *************** function _tim2Init *****************
  1390 ;; Defined at:
  1391 ;;		line 34 in file "pwm.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;		None
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      void 
  1398 ;; Registers used:
  1399 ;;		wreg, status,2
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1405 ;;      Params:         2       0       0       0       0       0       0
  1406 ;;      Locals:         0       0       0       0       0       0       0
  1407 ;;      Temps:          0       0       0       0       0       0       0
  1408 ;;      Totals:         2       0       0       0       0       0       0
  1409 ;;Total ram usage:        2 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; Hardware stack levels required when called:    4
  1412 ;; This function calls:
  1413 ;;		Nothing
  1414 ;; This function is called by:
  1415 ;;		_main
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           	psect	text2
  1420  00247E                     __ptext2:
  1421                           	callstack 0
  1422  00247E                     _tim2Init:
  1423                           	callstack 0
  1424  00247E  FFFF               	dw	65535	; assembler added errata NOP
  1425  002480                     
  1426                           ;pwm.c: 35:     T2CONbits.TMR2ON = 0;
  1427  002480  94CA               	bcf	202,2,c	;volatile
  1428  002482                     
  1429                           ;pwm.c: 36:     T2CONbits.T2CKPS = 0x03;
  1430  002482  0E03               	movlw	3
  1431  002484  12CA               	iorwf	202,f,c	;volatile
  1432  002486                     
  1433                           ;pwm.c: 39:     pwmPeriod = _pwmPeriod;
  1434  002486  C012  F055         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1435  00248A  C013  F056         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1436  00248E  0012               	return		;funcret
  1437  002490  FFFF               	dw	65535	; errata NOP
  1438  002492                     __end_of_tim2Init:
  1439                           	callstack 0
  1440                           
  1441 ;; *************** function _tim0Init *****************
  1442 ;; Defined at:
  1443 ;;		line 21 in file "pwm.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;		None
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;		None
  1448 ;; Return value:  Size  Location     Type
  1449 ;;                  1    wreg      void 
  1450 ;; Registers used:
  1451 ;;		wreg, status,2
  1452 ;; Tracked objects:
  1453 ;;		On entry : 0/0
  1454 ;;		On exit  : 0/0
  1455 ;;		Unchanged: 0/0
  1456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1457 ;;      Params:         0       0       0       0       0       0       0
  1458 ;;      Locals:         0       0       0       0       0       0       0
  1459 ;;      Temps:          0       0       0       0       0       0       0
  1460 ;;      Totals:         0       0       0       0       0       0       0
  1461 ;;Total ram usage:        0 bytes
  1462 ;; Hardware stack levels used:    1
  1463 ;; Hardware stack levels required when called:    4
  1464 ;; This function calls:
  1465 ;;		Nothing
  1466 ;; This function is called by:
  1467 ;;		_main
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           	psect	text3
  1472  0024A6                     __ptext3:
  1473                           	callstack 0
  1474  0024A6                     _tim0Init:
  1475                           	callstack 0
  1476  0024A6  FFFF               	dw	65535	; assembler added errata NOP
  1477  0024A8                     
  1478                           ;pwm.c: 22:     T0CONbits.TMR0ON = 0;
  1479  0024A8  9ED5               	bcf	213,7,c	;volatile
  1480                           
  1481                           ;pwm.c: 23:     T0CONbits.T08BIT = 0;
  1482  0024AA  9CD5               	bcf	213,6,c	;volatile
  1483                           
  1484                           ;pwm.c: 24:     T0CONbits.T0CS = 0;
  1485  0024AC  9AD5               	bcf	213,5,c	;volatile
  1486                           
  1487                           ;pwm.c: 25:     T0CONbits.PSA = 1;
  1488  0024AE  86D5               	bsf	213,3,c	;volatile
  1489  0024B0                     
  1490                           ;pwm.c: 26:     T0CONbits.T0PS = 0x07;
  1491  0024B0  0E07               	movlw	7
  1492  0024B2  12D5               	iorwf	213,f,c	;volatile
  1493  0024B4  0012               	return		;funcret
  1494  0024B6  FFFF               	dw	65535	; errata NOP
  1495  0024B8                     __end_of_tim0Init:
  1496                           	callstack 0
  1497                           
  1498 ;; *************** function _storeData *****************
  1499 ;; Defined at:
  1500 ;;		line 131 in file "usart.c"
  1501 ;; Parameters:    Size  Location     Type
  1502 ;;  data            1    wreg     unsigned char 
  1503 ;; Auto vars:     Size  Location     Type
  1504 ;;  data            1   26[COMRAM] unsigned char 
  1505 ;; Return value:  Size  Location     Type
  1506 ;;                  1    wreg      void 
  1507 ;; Registers used:
  1508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1509 ;; Tracked objects:
  1510 ;;		On entry : 0/0
  1511 ;;		On exit  : 0/0
  1512 ;;		Unchanged: 0/0
  1513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1514 ;;      Params:         0       0       0       0       0       0       0
  1515 ;;      Locals:         1       0       0       0       0       0       0
  1516 ;;      Temps:          2       0       0       0       0       0       0
  1517 ;;      Totals:         3       0       0       0       0       0       0
  1518 ;;Total ram usage:        3 bytes
  1519 ;; Hardware stack levels used:    1
  1520 ;; Hardware stack levels required when called:    6
  1521 ;; This function calls:
  1522 ;;		_printError
  1523 ;; This function is called by:
  1524 ;;		_main
  1525 ;; This function uses a non-reentrant model
  1526 ;;
  1527                           
  1528                           	psect	text4
  1529  0014FA                     __ptext4:
  1530                           	callstack 0
  1531  0014FA                     _storeData:
  1532                           	callstack 0
  1533  0014FA  FFFF               	dw	65535	; assembler added errata NOP
  1534                           
  1535                           ;incstack = 0
  1536                           ;storeData@data stored from wreg
  1537  0014FC  6E1B               	movwf	storeData@data^0,c
  1538  0014FE                     
  1539                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  1540  0014FE  0E45               	movlw	low storeData@receivedMex
  1541  001500  245E               	addwf	storeData@counter^0,w,c
  1542  001502  6ED9               	movwf	fsr2l,c
  1543  001504  6ADA               	clrf	fsr2h,c
  1544  001506  0E00               	movlw	high storeData@receivedMex
  1545  001508  22DA               	addwfc	fsr2h,f,c
  1546  00150A  C01B  FFDF         	movff	storeData@data,indf2
  1547  00150E                     
  1548                           ;usart.c: 142:     counter++;
  1549  00150E  2A5E               	incf	storeData@counter^0,f,c
  1550                           
  1551                           ;usart.c: 145:     switch(receivedMex[0]){
  1552  001510  EF99  F00A         	goto	l4106
  1553  001514                     l4098:
  1554  001514  FFFF               	dw	65535	; assembler added errata NOP
  1555                           
  1556                           ;usart.c: 147:             mexLength = 5;
  1557  001516  0E05               	movlw	5
  1558  001518  6E6D               	movwf	storeData@mexLength^0,c
  1559                           
  1560                           ;usart.c: 148:             break;
  1561  00151A  EFB4  F00A         	goto	l4108
  1562  00151E                     l4100:
  1563  00151E  FFFF               	dw	65535	; assembler added errata NOP
  1564                           
  1565                           ;usart.c: 150:             mexLength = 9;
  1566  001520  0E09               	movlw	9
  1567  001522  6E6D               	movwf	storeData@mexLength^0,c
  1568                           
  1569                           ;usart.c: 151:             break;
  1570  001524  EFB4  F00A         	goto	l4108
  1571  001528                     l4102:
  1572  001528  FFFF               	dw	65535	; assembler added errata NOP
  1573                           
  1574                           ;usart.c: 153:             mexLength = 1;
  1575  00152A  0E01               	movlw	1
  1576  00152C  6E6D               	movwf	storeData@mexLength^0,c
  1577                           
  1578                           ;usart.c: 154:             break;
  1579  00152E  EFB4  F00A         	goto	l4108
  1580  001532                     l4106:
  1581  001532  FFFF               	dw	65535	; assembler added errata NOP
  1582  001534  5045               	movf	storeData@receivedMex^0,w,c
  1583  001536  6E19               	movwf	??_storeData^0,c
  1584  001538  6A1A               	clrf	(??_storeData+1)^0,c
  1585                           
  1586                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1587                           ; Switch size 1, requested type "simple"
  1588                           ; Number of cases is 1, Range of values is 0 to 0
  1589                           ; switch strategies available:
  1590                           ; Name         Instructions Cycles
  1591                           ; simple_byte            4     3 (average)
  1592                           ;	Chosen strategy is simple_byte
  1593  00153A  501A               	movf	(??_storeData+1)^0,w,c
  1594  00153C  0A00               	xorlw	0	; case 0
  1595  00153E  B4D8               	btfsc	status,2,c
  1596  001540  EFA4  F00A         	goto	l4500
  1597  001544  EFB4  F00A         	goto	l4108
  1598  001548                     l4500:
  1599  001548  FFFF               	dw	65535	; assembler added errata NOP
  1600                           
  1601                           ; Switch size 1, requested type "simple"
  1602                           ; Number of cases is 3, Range of values is 0 to 2
  1603                           ; switch strategies available:
  1604                           ; Name         Instructions Cycles
  1605                           ; simple_byte           10     6 (average)
  1606                           ;	Chosen strategy is simple_byte
  1607  00154A  5019               	movf	??_storeData^0,w,c
  1608  00154C  0A00               	xorlw	0	; case 0
  1609  00154E  B4D8               	btfsc	status,2,c
  1610  001550  EF8A  F00A         	goto	l4098
  1611  001554  0A01               	xorlw	1	; case 1
  1612  001556  B4D8               	btfsc	status,2,c
  1613  001558  EF8F  F00A         	goto	l4100
  1614  00155C  0A03               	xorlw	3	; case 2
  1615  00155E  B4D8               	btfsc	status,2,c
  1616  001560  EF94  F00A         	goto	l4102
  1617  001564  EFB4  F00A         	goto	l4108
  1618  001568                     l4108:
  1619  001568  FFFF               	dw	65535	; assembler added errata NOP
  1620                           
  1621                           ;usart.c: 161:     if(counter >= mexLength){
  1622  00156A  506D               	movf	storeData@mexLength^0,w,c
  1623  00156C  5C5E               	subwf	storeData@counter^0,w,c
  1624  00156E  A0D8               	btfss	status,0,c
  1625  001570  EFBC  F00A         	goto	u3491
  1626  001574  EFBF  F00A         	goto	u3490
  1627  001578                     u3491:
  1628  001578  FFFF               	dw	65535	; assembler added errata NOP
  1629  00157A  EF2B  F00B         	goto	l573
  1630  00157E                     u3490:
  1631  00157E  FFFF               	dw	65535	; assembler added errata NOP
  1632  001580                     
  1633                           ;usart.c: 162:         counter = 0;
  1634  001580  0E00               	movlw	0
  1635  001582  6E5E               	movwf	storeData@counter^0,c
  1636                           
  1637                           ;usart.c: 166:         switch(receivedMex[0]){
  1638  001584  EF10  F00B         	goto	l4124
  1639  001588                     l4112:
  1640  001588  FFFF               	dw	65535	; assembler added errata NOP
  1641                           
  1642                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1643  00158A  5061               	movf	_dataCounter^0,w,c
  1644  00158C  0D04               	mullw	4
  1645  00158E  0EDB               	movlw	low _dataSequence
  1646  001590  24F3               	addwf	243,w,c
  1647  001592  6ED9               	movwf	fsr2l,c
  1648  001594  0E00               	movlw	high _dataSequence
  1649  001596  20F4               	addwfc	prodh,w,c
  1650  001598  6EDA               	movwf	fsr2h,c
  1651  00159A  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  1652                           
  1653                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  1654  00159E  5061               	movf	_dataCounter^0,w,c
  1655  0015A0  0D04               	mullw	4
  1656  0015A2  0EDC               	movlw	low (_dataSequence+1)
  1657  0015A4  24F3               	addwf	243,w,c
  1658  0015A6  6ED9               	movwf	fsr2l,c
  1659  0015A8  0E00               	movlw	high (_dataSequence+1)
  1660  0015AA  20F4               	addwfc	prodh,w,c
  1661  0015AC  6EDA               	movwf	fsr2h,c
  1662  0015AE  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  1663                           
  1664                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  1665  0015B2  5061               	movf	_dataCounter^0,w,c
  1666  0015B4  0D04               	mullw	4
  1667  0015B6  0EDD               	movlw	low (_dataSequence+2)
  1668  0015B8  24F3               	addwf	243,w,c
  1669  0015BA  6ED9               	movwf	fsr2l,c
  1670  0015BC  0E00               	movlw	high (_dataSequence+2)
  1671  0015BE  20F4               	addwfc	prodh,w,c
  1672  0015C0  6EDA               	movwf	fsr2h,c
  1673  0015C2  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  1674                           
  1675                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1676  0015C6  5061               	movf	_dataCounter^0,w,c
  1677  0015C8  0D04               	mullw	4
  1678  0015CA  0EDE               	movlw	low (_dataSequence+3)
  1679  0015CC  24F3               	addwf	243,w,c
  1680  0015CE  6ED9               	movwf	fsr2l,c
  1681  0015D0  0E00               	movlw	high (_dataSequence+3)
  1682  0015D2  20F4               	addwfc	prodh,w,c
  1683  0015D4  6EDA               	movwf	fsr2h,c
  1684  0015D6  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  1685  0015DA                     
  1686                           ;usart.c: 173:                 dataCounter++;
  1687  0015DA  2A61               	incf	_dataCounter^0,f,c
  1688                           
  1689                           ;usart.c: 174:                 break;
  1690  0015DC  EF2B  F00B         	goto	l573
  1691  0015E0                     l570:
  1692  0015E0  FFFF               	dw	65535	; assembler added errata NOP
  1693                           
  1694                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  1695  0015E2  C046  F0EF         	movff	storeData@receivedMex+1,_newSequenceData
  1696                           
  1697                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  1698  0015E6  C047  F0F0         	movff	storeData@receivedMex+2,_newSequenceData+1
  1699                           
  1700                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  1701  0015EA  C048  F0F1         	movff	storeData@receivedMex+3,_newSequenceData+2
  1702                           
  1703                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  1704  0015EE  C049  F0F2         	movff	storeData@receivedMex+4,_newSequenceData+3
  1705                           
  1706                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  1707  0015F2  C04A  F0F3         	movff	storeData@receivedMex+5,_newSequenceData+4
  1708                           
  1709                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  1710  0015F6  C04B  F0F4         	movff	storeData@receivedMex+6,_newSequenceData+5
  1711                           
  1712                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  1713  0015FA  C04C  F0F5         	movff	storeData@receivedMex+7,_newSequenceData+6
  1714                           
  1715                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  1716  0015FE  C04D  F0F6         	movff	storeData@receivedMex+8,_newSequenceData+7
  1717  001602                     
  1718                           ;usart.c: 186:                 _newSequence = 1;
  1719  001602  0E01               	movlw	1
  1720  001604  6E5F               	movwf	__newSequence^0,c
  1721                           
  1722                           ;usart.c: 187:                 break;
  1723  001606  EF2B  F00B         	goto	l573
  1724  00160A                     l4118:
  1725  00160A  FFFF               	dw	65535	; assembler added errata NOP
  1726                           
  1727                           ;usart.c: 190:                 _fatalError = 1;
  1728  00160C  0E01               	movlw	1
  1729  00160E  6E60               	movwf	__fatalError^0,c
  1730                           
  1731                           ;usart.c: 191:                 break;
  1732  001610  EF2B  F00B         	goto	l573
  1733  001614                     l4120:
  1734  001614  FFFF               	dw	65535	; assembler added errata NOP
  1735                           
  1736                           ;usart.c: 194:                 printError(8);
  1737  001616  0E08               	movlw	8
  1738  001618  EC7A  F00C         	call	_printError
  1739                           
  1740                           ;usart.c: 195:                 break;
  1741  00161C  EF2B  F00B         	goto	l573
  1742  001620                     l4124:
  1743  001620  FFFF               	dw	65535	; assembler added errata NOP
  1744  001622  5045               	movf	storeData@receivedMex^0,w,c
  1745  001624  6E19               	movwf	??_storeData^0,c
  1746  001626  6A1A               	clrf	(??_storeData+1)^0,c
  1747                           
  1748                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1749                           ; Switch size 1, requested type "simple"
  1750                           ; Number of cases is 1, Range of values is 0 to 0
  1751                           ; switch strategies available:
  1752                           ; Name         Instructions Cycles
  1753                           ; simple_byte            4     3 (average)
  1754                           ;	Chosen strategy is simple_byte
  1755  001628  501A               	movf	(??_storeData+1)^0,w,c
  1756  00162A  0A00               	xorlw	0	; case 0
  1757  00162C  B4D8               	btfsc	status,2,c
  1758  00162E  EF1B  F00B         	goto	l4502
  1759  001632  EF0A  F00B         	goto	l4120
  1760  001636                     l4502:
  1761  001636  FFFF               	dw	65535	; assembler added errata NOP
  1762                           
  1763                           ; Switch size 1, requested type "simple"
  1764                           ; Number of cases is 3, Range of values is 0 to 2
  1765                           ; switch strategies available:
  1766                           ; Name         Instructions Cycles
  1767                           ; simple_byte           10     6 (average)
  1768                           ;	Chosen strategy is simple_byte
  1769  001638  5019               	movf	??_storeData^0,w,c
  1770  00163A  0A00               	xorlw	0	; case 0
  1771  00163C  B4D8               	btfsc	status,2,c
  1772  00163E  EFC4  F00A         	goto	l4112
  1773  001642  0A01               	xorlw	1	; case 1
  1774  001644  B4D8               	btfsc	status,2,c
  1775  001646  EFF0  F00A         	goto	l570
  1776  00164A  0A03               	xorlw	3	; case 2
  1777  00164C  B4D8               	btfsc	status,2,c
  1778  00164E  EF05  F00B         	goto	l4118
  1779  001652  EF0A  F00B         	goto	l4120
  1780  001656                     l573:
  1781  001656  FFFF               	dw	65535	; assembler added errata NOP
  1782  001658  0012               	return		;funcret
  1783  00165A  FFFF               	dw	65535	; errata NOP
  1784  00165C                     __end_of_storeData:
  1785                           	callstack 0
  1786                           
  1787 ;; *************** function _printError *****************
  1788 ;; Defined at:
  1789 ;;		line 53 in file "usart.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;  errCode         1    wreg     unsigned char 
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;  errCode         1   23[COMRAM] unsigned char 
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      void 
  1796 ;; Registers used:
  1797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1803 ;;      Params:         0       0       0       0       0       0       0
  1804 ;;      Locals:         1       0       0       0       0       0       0
  1805 ;;      Temps:          2       0       0       0       0       0       0
  1806 ;;      Totals:         3       0       0       0       0       0       0
  1807 ;;Total ram usage:        3 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; Hardware stack levels required when called:    5
  1810 ;; This function calls:
  1811 ;;		_uartTx
  1812 ;; This function is called by:
  1813 ;;		_main
  1814 ;;		_storeData
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           	psect	text5
  1819  0018F4                     __ptext5:
  1820                           	callstack 0
  1821  0018F4                     _printError:
  1822                           	callstack 0
  1823  0018F4  FFFF               	dw	65535	; assembler added errata NOP
  1824                           
  1825                           ;incstack = 0
  1826                           ;printError@errCode stored from wreg
  1827  0018F6  6E18               	movwf	printError@errCode^0,c
  1828  0018F8                     
  1829                           ;usart.c: 55:     switch(errCode){
  1830  0018F8  EFD6  F00C         	goto	l3966
  1831  0018FC                     l3948:
  1832  0018FC  FFFF               	dw	65535	; assembler added errata NOP
  1833                           
  1834                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1835  0018FE  0EA5               	movlw	low _errString_Feed
  1836  001900  6E12               	movwf	uartTx@ptr^0,c
  1837  001902  0E00               	movlw	high _errString_Feed
  1838  001904  6E13               	movwf	(uartTx@ptr+1)^0,c
  1839  001906  0E1E               	movlw	30
  1840  001908  6E14               	movwf	uartTx@length^0,c
  1841  00190A  EC73  F011         	call	_uartTx	;wreg free
  1842                           
  1843                           ;usart.c: 58:             break;
  1844  00190E  EF05  F00D         	goto	l529
  1845  001912                     l3950:
  1846  001912  FFFF               	dw	65535	; assembler added errata NOP
  1847                           
  1848                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1849  001914  0E5E               	movlw	low _errString_ZEND
  1850  001916  6E12               	movwf	uartTx@ptr^0,c
  1851  001918  0E01               	movlw	high _errString_ZEND
  1852  00191A  6E13               	movwf	(uartTx@ptr+1)^0,c
  1853  00191C  0E29               	movlw	41
  1854  00191E  6E14               	movwf	uartTx@length^0,c
  1855  001920  EC73  F011         	call	_uartTx	;wreg free
  1856                           
  1857                           ;usart.c: 61:             break;
  1858  001924  EF05  F00D         	goto	l529
  1859  001928                     l3952:
  1860  001928  FFFF               	dw	65535	; assembler added errata NOP
  1861                           
  1862                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1863  00192A  0E87               	movlw	low _errString_Reset
  1864  00192C  6E12               	movwf	uartTx@ptr^0,c
  1865  00192E  0E01               	movlw	high _errString_Reset
  1866  001930  6E13               	movwf	(uartTx@ptr+1)^0,c
  1867  001932  0E28               	movlw	40
  1868  001934  6E14               	movwf	uartTx@length^0,c
  1869  001936  EC73  F011         	call	_uartTx	;wreg free
  1870                           
  1871                           ;usart.c: 64:             break;
  1872  00193A  EF05  F00D         	goto	l529
  1873  00193E                     l3954:
  1874  00193E  FFFF               	dw	65535	; assembler added errata NOP
  1875                           
  1876                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1877  001940  0E35               	movlw	low _errString_Point
  1878  001942  6E12               	movwf	uartTx@ptr^0,c
  1879  001944  0E01               	movlw	high _errString_Point
  1880  001946  6E13               	movwf	(uartTx@ptr+1)^0,c
  1881  001948  0E29               	movlw	41
  1882  00194A  6E14               	movwf	uartTx@length^0,c
  1883  00194C  EC73  F011         	call	_uartTx	;wreg free
  1884                           
  1885                           ;usart.c: 67:             break;
  1886  001950  EF05  F00D         	goto	l529
  1887  001954                     l3956:
  1888  001954  FFFF               	dw	65535	; assembler added errata NOP
  1889                           
  1890                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  1891  001956  0E84               	movlw	low _errString_Bound
  1892  001958  6E12               	movwf	uartTx@ptr^0,c
  1893  00195A  0E00               	movlw	high _errString_Bound
  1894  00195C  6E13               	movwf	(uartTx@ptr+1)^0,c
  1895  00195E  0E21               	movlw	33
  1896  001960  6E14               	movwf	uartTx@length^0,c
  1897  001962  EC73  F011         	call	_uartTx	;wreg free
  1898                           
  1899                           ;usart.c: 70:             break;
  1900  001966  EF05  F00D         	goto	l529
  1901  00196A                     l3958:
  1902  00196A  FFFF               	dw	65535	; assembler added errata NOP
  1903                           
  1904                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  1905  00196C  0E00               	movlw	low _errString_PointZ
  1906  00196E  6E12               	movwf	uartTx@ptr^0,c
  1907  001970  0E01               	movlw	high _errString_PointZ
  1908  001972  6E13               	movwf	(uartTx@ptr+1)^0,c
  1909  001974  0E35               	movlw	53
  1910  001976  6E14               	movwf	uartTx@length^0,c
  1911  001978  EC73  F011         	call	_uartTx	;wreg free
  1912                           
  1913                           ;usart.c: 73:             break;
  1914  00197C  EF05  F00D         	goto	l529
  1915  001980                     l3960:
  1916  001980  FFFF               	dw	65535	; assembler added errata NOP
  1917                           
  1918                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  1919  001982  0EAF               	movlw	low _errString_Fatal
  1920  001984  6E12               	movwf	uartTx@ptr^0,c
  1921  001986  0E01               	movlw	high _errString_Fatal
  1922  001988  6E13               	movwf	(uartTx@ptr+1)^0,c
  1923  00198A  0E27               	movlw	39
  1924  00198C  6E14               	movwf	uartTx@length^0,c
  1925  00198E  EC73  F011         	call	_uartTx	;wreg free
  1926                           
  1927                           ;usart.c: 76:             break;
  1928  001992  EF05  F00D         	goto	l529
  1929  001996                     l3962:
  1930  001996  FFFF               	dw	65535	; assembler added errata NOP
  1931                           
  1932                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  1933  001998  0EC3               	movlw	low _errString_Command
  1934  00199A  6E12               	movwf	uartTx@ptr^0,c
  1935  00199C  0E00               	movlw	high _errString_Command
  1936  00199E  6E13               	movwf	(uartTx@ptr+1)^0,c
  1937  0019A0  0E18               	movlw	24
  1938  0019A2  6E14               	movwf	uartTx@length^0,c
  1939  0019A4  EC73  F011         	call	_uartTx	;wreg free
  1940                           
  1941                           ;usart.c: 79:             break;
  1942  0019A8  EF05  F00D         	goto	l529
  1943  0019AC                     l3966:
  1944  0019AC  FFFF               	dw	65535	; assembler added errata NOP
  1945  0019AE  5018               	movf	printError@errCode^0,w,c
  1946  0019B0  6E16               	movwf	??_printError^0,c
  1947  0019B2  6A17               	clrf	(??_printError+1)^0,c
  1948                           
  1949                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1950                           ; Switch size 1, requested type "simple"
  1951                           ; Number of cases is 1, Range of values is 0 to 0
  1952                           ; switch strategies available:
  1953                           ; Name         Instructions Cycles
  1954                           ; simple_byte            4     3 (average)
  1955                           ;	Chosen strategy is simple_byte
  1956  0019B4  5017               	movf	(??_printError+1)^0,w,c
  1957  0019B6  0A00               	xorlw	0	; case 0
  1958  0019B8  B4D8               	btfsc	status,2,c
  1959  0019BA  EFE1  F00C         	goto	l4504
  1960  0019BE  EF05  F00D         	goto	l529
  1961  0019C2                     l4504:
  1962  0019C2  FFFF               	dw	65535	; assembler added errata NOP
  1963                           
  1964                           ; Switch size 1, requested type "simple"
  1965                           ; Number of cases is 8, Range of values is 1 to 8
  1966                           ; switch strategies available:
  1967                           ; Name         Instructions Cycles
  1968                           ; simple_byte           25    13 (average)
  1969                           ;	Chosen strategy is simple_byte
  1970  0019C4  5016               	movf	??_printError^0,w,c
  1971  0019C6  0A01               	xorlw	1	; case 1
  1972  0019C8  B4D8               	btfsc	status,2,c
  1973  0019CA  EF7E  F00C         	goto	l3948
  1974  0019CE  0A03               	xorlw	3	; case 2
  1975  0019D0  B4D8               	btfsc	status,2,c
  1976  0019D2  EF89  F00C         	goto	l3950
  1977  0019D6  0A01               	xorlw	1	; case 3
  1978  0019D8  B4D8               	btfsc	status,2,c
  1979  0019DA  EF94  F00C         	goto	l3952
  1980  0019DE  0A07               	xorlw	7	; case 4
  1981  0019E0  B4D8               	btfsc	status,2,c
  1982  0019E2  EF9F  F00C         	goto	l3954
  1983  0019E6  0A01               	xorlw	1	; case 5
  1984  0019E8  B4D8               	btfsc	status,2,c
  1985  0019EA  EFAA  F00C         	goto	l3956
  1986  0019EE  0A03               	xorlw	3	; case 6
  1987  0019F0  B4D8               	btfsc	status,2,c
  1988  0019F2  EFB5  F00C         	goto	l3958
  1989  0019F6  0A01               	xorlw	1	; case 7
  1990  0019F8  B4D8               	btfsc	status,2,c
  1991  0019FA  EFC0  F00C         	goto	l3960
  1992  0019FE  0A0F               	xorlw	15	; case 8
  1993  001A00  B4D8               	btfsc	status,2,c
  1994  001A02  EFCB  F00C         	goto	l3962
  1995  001A06  EF05  F00D         	goto	l529
  1996  001A0A                     l529:
  1997  001A0A  FFFF               	dw	65535	; assembler added errata NOP
  1998  001A0C  0012               	return		;funcret
  1999  001A0E  FFFF               	dw	65535	; errata NOP
  2000  001A10                     __end_of_printError:
  2001                           	callstack 0
  2002                           
  2003 ;; *************** function _uartTx *****************
  2004 ;; Defined at:
  2005 ;;		line 221 in file "usart.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2008 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2009 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2010 ;;  length          1   19[COMRAM] unsigned char 
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;  i               1   20[COMRAM] unsigned char 
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  1    wreg      void 
  2015 ;; Registers used:
  2016 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2022 ;;      Params:         3       0       0       0       0       0       0
  2023 ;;      Locals:         1       0       0       0       0       0       0
  2024 ;;      Temps:          0       0       0       0       0       0       0
  2025 ;;      Totals:         4       0       0       0       0       0       0
  2026 ;;Total ram usage:        4 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; Hardware stack levels required when called:    4
  2029 ;; This function calls:
  2030 ;;		Nothing
  2031 ;; This function is called by:
  2032 ;;		_printError
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text6
  2037  0022E6                     __ptext6:
  2038                           	callstack 0
  2039  0022E6                     _uartTx:
  2040                           	callstack 0
  2041  0022E6  FFFF               	dw	65535	; assembler added errata NOP
  2042  0022E8                     
  2043                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  2044  0022E8  0E01               	movlw	1
  2045  0022EA  6E15               	movwf	uartTx@i^0,c
  2046  0022EC  EF8C  F011         	goto	l3440
  2047  0022F0                     l3436:
  2048  0022F0  FFFF               	dw	65535	; assembler added errata NOP
  2049                           
  2050                           ;usart.c: 226:         TXREG = *ptr;
  2051  0022F2  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2052  0022F6  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2053  0022FA  50DF               	movf	indf2,w,c
  2054  0022FC  6EAD               	movwf	173,c	;volatile
  2055  0022FE                     l584:
  2056  0022FE  FFFF               	dw	65535	; assembler added errata NOP
  2057  002300  A2AC               	btfss	172,1,c	;volatile
  2058  002302  EF85  F011         	goto	u2501
  2059  002306  EF88  F011         	goto	u2500
  2060  00230A                     u2501:
  2061  00230A  FFFF               	dw	65535	; assembler added errata NOP
  2062  00230C  EF7F  F011         	goto	l584
  2063  002310                     u2500:
  2064  002310  FFFF               	dw	65535	; assembler added errata NOP
  2065  002312                     
  2066                           ;usart.c: 230:         ptr++;
  2067  002312  4A12               	infsnz	uartTx@ptr^0,f,c
  2068  002314  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2069                           
  2070                           ;usart.c: 231:     }
  2071  002316  2A15               	incf	uartTx@i^0,f,c
  2072  002318                     l3440:
  2073  002318  FFFF               	dw	65535	; assembler added errata NOP
  2074  00231A  5014               	movf	uartTx@length^0,w,c
  2075  00231C  5C15               	subwf	uartTx@i^0,w,c
  2076  00231E  A0D8               	btfss	status,0,c
  2077  002320  EF94  F011         	goto	u2511
  2078  002324  EF97  F011         	goto	u2510
  2079  002328                     u2511:
  2080  002328  FFFF               	dw	65535	; assembler added errata NOP
  2081  00232A  EF78  F011         	goto	l3436
  2082  00232E                     u2510:
  2083  00232E  FFFF               	dw	65535	; assembler added errata NOP
  2084  002330  0012               	return		;funcret
  2085  002332  FFFF               	dw	65535	; errata NOP
  2086  002334                     __end_of_uartTx:
  2087                           	callstack 0
  2088                           
  2089 ;; *************** function _shiftData *****************
  2090 ;; Defined at:
  2091 ;;		line 120 in file "usart.c"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;		None
  2094 ;; Auto vars:     Size  Location     Type
  2095 ;;  i               1   19[COMRAM] unsigned char 
  2096 ;; Return value:  Size  Location     Type
  2097 ;;                  1    wreg      void 
  2098 ;; Registers used:
  2099 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2105 ;;      Params:         0       0       0       0       0       0       0
  2106 ;;      Locals:         1       0       0       0       0       0       0
  2107 ;;      Temps:          2       0       0       0       0       0       0
  2108 ;;      Totals:         3       0       0       0       0       0       0
  2109 ;;Total ram usage:        3 bytes
  2110 ;; Hardware stack levels used:    1
  2111 ;; Hardware stack levels required when called:    4
  2112 ;; This function calls:
  2113 ;;		Nothing
  2114 ;; This function is called by:
  2115 ;;		_main
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           	psect	text7
  2120  00222A                     __ptext7:
  2121                           	callstack 0
  2122  00222A                     _shiftData:
  2123                           	callstack 0
  2124  00222A  FFFF               	dw	65535	; assembler added errata NOP
  2125  00222C                     
  2126                           ;usart.c: 121:     char i;;usart.c: 123:     for(i = 0; i < 4; i++){
  2127  00222C  0E00               	movlw	0
  2128  00222E  6E14               	movwf	shiftData@i^0,c
  2129  002230                     l4212:
  2130  002230  FFFF               	dw	65535	; assembler added errata NOP
  2131                           
  2132                           ;usart.c: 124:         dataSequence[i] = dataSequence[i+1];
  2133  002232  5014               	movf	shiftData@i^0,w,c
  2134  002234  6E12               	movwf	??_shiftData^0,c
  2135  002236  6A13               	clrf	(??_shiftData+1)^0,c
  2136  002238  90D8               	bcf	status,0,c
  2137  00223A  3612               	rlcf	??_shiftData^0,f,c
  2138  00223C  3613               	rlcf	(??_shiftData+1)^0,f,c
  2139  00223E  90D8               	bcf	status,0,c
  2140  002240  3612               	rlcf	??_shiftData^0,f,c
  2141  002242  3613               	rlcf	(??_shiftData+1)^0,f,c
  2142  002244  0EDF               	movlw	low (_dataSequence+4)
  2143  002246  2412               	addwf	??_shiftData^0,w,c
  2144  002248  6ED9               	movwf	fsr2l,c
  2145  00224A  0E00               	movlw	high (_dataSequence+4)
  2146  00224C  2013               	addwfc	(??_shiftData+1)^0,w,c
  2147  00224E  6EDA               	movwf	fsr2h,c
  2148  002250  5014               	movf	shiftData@i^0,w,c
  2149  002252  0D04               	mullw	4
  2150  002254  0EDB               	movlw	low _dataSequence
  2151  002256  24F3               	addwf	243,w,c
  2152  002258  6EE1               	movwf	fsr1l,c
  2153  00225A  0E00               	movlw	high _dataSequence
  2154  00225C  20F4               	addwfc	prodh,w,c
  2155  00225E  6EE2               	movwf	fsr1h,c
  2156  002260  CFDE FFE6          	movff	postinc2,postinc1
  2157  002264  CFDE FFE6          	movff	postinc2,postinc1
  2158  002268  CFDE FFE6          	movff	postinc2,postinc1
  2159  00226C  CFDE FFE6          	movff	postinc2,postinc1
  2160  002270                     
  2161                           ;usart.c: 125:     }
  2162  002270  2A14               	incf	shiftData@i^0,f,c
  2163  002272  0E03               	movlw	3
  2164  002274  6414               	cpfsgt	shiftData@i^0,c
  2165  002276  EF3F  F011         	goto	u3521
  2166  00227A  EF42  F011         	goto	u3520
  2167  00227E                     u3521:
  2168  00227E  FFFF               	dw	65535	; assembler added errata NOP
  2169  002280  EF18  F011         	goto	l4212
  2170  002284                     u3520:
  2171  002284  FFFF               	dw	65535	; assembler added errata NOP
  2172  002286  0012               	return		;funcret
  2173  002288  FFFF               	dw	65535	; errata NOP
  2174  00228A                     __end_of_shiftData:
  2175                           	callstack 0
  2176                           
  2177 ;; *************** function _resetPosition *****************
  2178 ;; Defined at:
  2179 ;;		line 158 in file "motors.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;		None
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;  keepMovingZ     1   23[COMRAM] unsigned char 
  2184 ;;  keepMovingY     1   22[COMRAM] unsigned char 
  2185 ;;  keepMovingX     1   21[COMRAM] unsigned char 
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  1    wreg      unsigned char 
  2188 ;; Registers used:
  2189 ;;		wreg, status,2, status,0, cstack
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2195 ;;      Params:         0       0       0       0       0       0       0
  2196 ;;      Locals:         3       0       0       0       0       0       0
  2197 ;;      Temps:          0       0       0       0       0       0       0
  2198 ;;      Totals:         3       0       0       0       0       0       0
  2199 ;;Total ram usage:        3 bytes
  2200 ;; Hardware stack levels used:    1
  2201 ;; Hardware stack levels required when called:    5
  2202 ;; This function calls:
  2203 ;;		_enableMotor
  2204 ;;		_resetStep
  2205 ;;		_setDecay
  2206 ;;		_setDirection
  2207 ;;		_setStep
  2208 ;;		_stepMade
  2209 ;; This function is called by:
  2210 ;;		_main
  2211 ;; This function uses a non-reentrant model
  2212 ;;
  2213                           
  2214                           	psect	text8
  2215  00118A                     __ptext8:
  2216                           	callstack 0
  2217  00118A                     _resetPosition:
  2218                           	callstack 0
  2219  00118A  FFFF               	dw	65535	; assembler added errata NOP
  2220  00118C                     
  2221                           ;motors.c: 160:     setStep(0, 0);
  2222  00118C  0E00               	movlw	0
  2223  00118E  6E12               	movwf	setStep@motor^0,c
  2224  001190  0E00               	movlw	0
  2225  001192  EC61  F00F         	call	_setStep
  2226                           
  2227                           ;motors.c: 161:     setStep(1, 0);
  2228  001196  0E00               	movlw	0
  2229  001198  6E12               	movwf	setStep@motor^0,c
  2230  00119A  0E01               	movlw	1
  2231  00119C  EC61  F00F         	call	_setStep
  2232                           
  2233                           ;motors.c: 162:     setStep(2, 0);
  2234  0011A0  0E00               	movlw	0
  2235  0011A2  6E12               	movwf	setStep@motor^0,c
  2236  0011A4  0E02               	movlw	2
  2237  0011A6  EC61  F00F         	call	_setStep
  2238                           
  2239                           ;motors.c: 164:     setDirection(0, 0);
  2240  0011AA  0E00               	movlw	0
  2241  0011AC  6E12               	movwf	setDirection@motor^0,c
  2242  0011AE  0E00               	movlw	0
  2243  0011B0  ECDB  F010         	call	_setDirection
  2244                           
  2245                           ;motors.c: 165:     setDirection(0, 1);
  2246  0011B4  0E01               	movlw	1
  2247  0011B6  6E12               	movwf	setDirection@motor^0,c
  2248  0011B8  0E00               	movlw	0
  2249  0011BA  ECDB  F010         	call	_setDirection
  2250                           
  2251                           ;motors.c: 166:     setDirection(0, 2);
  2252  0011BE  0E02               	movlw	2
  2253  0011C0  6E12               	movwf	setDirection@motor^0,c
  2254  0011C2  0E00               	movlw	0
  2255  0011C4  ECDB  F010         	call	_setDirection
  2256                           
  2257                           ;motors.c: 168:     setDecay(1, 0);
  2258  0011C8  0E00               	movlw	0
  2259  0011CA  6E12               	movwf	setDecay@motor^0,c
  2260  0011CC  0E01               	movlw	1
  2261  0011CE  EC67  F010         	call	_setDecay
  2262                           
  2263                           ;motors.c: 169:     setDecay(1, 1);
  2264  0011D2  0E01               	movlw	1
  2265  0011D4  6E12               	movwf	setDecay@motor^0,c
  2266  0011D6  0E01               	movlw	1
  2267  0011D8  EC67  F010         	call	_setDecay
  2268                           
  2269                           ;motors.c: 170:     setDecay(1, 2);
  2270  0011DC  0E02               	movlw	2
  2271  0011DE  6E12               	movwf	setDecay@motor^0,c
  2272  0011E0  0E01               	movlw	1
  2273  0011E2  EC67  F010         	call	_setDecay
  2274                           
  2275                           ;motors.c: 172:     enableMotor(0, 0);
  2276  0011E6  0E00               	movlw	0
  2277  0011E8  6E12               	movwf	enableMotor@motor^0,c
  2278  0011EA  0E00               	movlw	0
  2279  0011EC  ECA1  F010         	call	_enableMotor
  2280                           
  2281                           ;motors.c: 173:     enableMotor(0, 1);
  2282  0011F0  0E01               	movlw	1
  2283  0011F2  6E12               	movwf	enableMotor@motor^0,c
  2284  0011F4  0E00               	movlw	0
  2285  0011F6  ECA1  F010         	call	_enableMotor
  2286                           
  2287                           ;motors.c: 174:     enableMotor(0, 2);
  2288  0011FA  0E02               	movlw	2
  2289  0011FC  6E12               	movwf	enableMotor@motor^0,c
  2290  0011FE  0E00               	movlw	0
  2291  001200  ECA1  F010         	call	_enableMotor
  2292  001204                     
  2293                           ;motors.c: 178:     unsigned char keepMovingX = 1;
  2294  001204  0E01               	movlw	1
  2295  001206  6E16               	movwf	resetPosition@keepMovingX^0,c
  2296  001208                     
  2297                           ;motors.c: 179:     unsigned char keepMovingY = 1;
  2298  001208  0E01               	movlw	1
  2299  00120A  6E17               	movwf	resetPosition@keepMovingY^0,c
  2300  00120C                     
  2301                           ;motors.c: 180:     unsigned char keepMovingZ = 1;
  2302  00120C  0E01               	movlw	1
  2303  00120E  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2304  001210                     
  2305                           ;motors.c: 183:     T2CONbits.TMR2ON = 1;
  2306  001210  84CA               	bsf	202,2,c	;volatile
  2307  001212                     
  2308                           ;motors.c: 185:     tm0Error = 0;
  2309  001212  0E00               	movlw	0
  2310  001214  6E5C               	movwf	(_tm0Error+1)^0,c
  2311  001216  0E00               	movlw	0
  2312  001218  6E5B               	movwf	_tm0Error^0,c
  2313  00121A                     
  2314                           ;motors.c: 186:     tm0Limit = 100;
  2315  00121A  0E64               	movlw	100
  2316  00121C  6E68               	movwf	_tm0Limit^0,c
  2317  00121E                     
  2318                           ;motors.c: 187:     T0CONbits.TMR0ON = 1;
  2319  00121E  8ED5               	bsf	213,7,c	;volatile
  2320                           
  2321                           ;motors.c: 189:     while(keepMovingX || keepMovingY || keepMovingZ){
  2322  001220  EF93  F009         	goto	l4034
  2323  001224                     l4012:
  2324  001224  FFFF               	dw	65535	; assembler added errata NOP
  2325                           
  2326                           ;motors.c: 192:         if(tm0Error){
  2327  001226  505B               	movf	_tm0Error^0,w,c
  2328  001228  105C               	iorwf	(_tm0Error+1)^0,w,c
  2329  00122A  B4D8               	btfsc	status,2,c
  2330  00122C  EF1A  F009         	goto	u3351
  2331  001230  EF1D  F009         	goto	u3350
  2332  001234                     u3351:
  2333  001234  FFFF               	dw	65535	; assembler added errata NOP
  2334  001236  EF27  F009         	goto	l115
  2335  00123A                     u3350:
  2336  00123A  FFFF               	dw	65535	; assembler added errata NOP
  2337  00123C                     
  2338                           ;motors.c: 194:             LATAbits.LATA2 = 0;
  2339  00123C  9489               	bcf	137,2,c	;volatile
  2340                           
  2341                           ;motors.c: 195:             LATBbits.LATB4 = 0;
  2342  00123E  988A               	bcf	138,4,c	;volatile
  2343                           
  2344                           ;motors.c: 196:             LATCbits.LATC2 = 0;
  2345  001240  948B               	bcf	139,2,c	;volatile
  2346  001242                     
  2347                           ;motors.c: 198:             tm0Error = 3;
  2348  001242  0E00               	movlw	0
  2349  001244  6E5C               	movwf	(_tm0Error+1)^0,c
  2350  001246  0E03               	movlw	3
  2351  001248  6E5B               	movwf	_tm0Error^0,c
  2352                           
  2353                           ;motors.c: 199:             break;
  2354  00124A  EFB1  F009         	goto	l116
  2355  00124E                     l115:
  2356  00124E  FFFF               	dw	65535	; assembler added errata NOP
  2357                           
  2358                           ;motors.c: 206:         if(PORTEbits.RE0 || !keepMovingX){
  2359  001250  B084               	btfsc	132,0,c	;volatile
  2360  001252  EF2D  F009         	goto	u3361
  2361  001256  EF30  F009         	goto	u3360
  2362  00125A                     u3361:
  2363  00125A  FFFF               	dw	65535	; assembler added errata NOP
  2364  00125C  EF3A  F009         	goto	l4020
  2365  001260                     u3360:
  2366  001260  FFFF               	dw	65535	; assembler added errata NOP
  2367  001262  5016               	movf	resetPosition@keepMovingX^0,w,c
  2368  001264  A4D8               	btfss	status,2,c
  2369  001266  EF37  F009         	goto	u3371
  2370  00126A  EF3A  F009         	goto	u3370
  2371  00126E                     u3371:
  2372  00126E  FFFF               	dw	65535	; assembler added errata NOP
  2373  001270  EF3F  F009         	goto	l117
  2374  001274                     u3370:
  2375  001274                     l4020:
  2376  001274  FFFF               	dw	65535	; assembler added errata NOP
  2377                           
  2378                           ;motors.c: 208:             keepMovingX = 0;
  2379  001276  0E00               	movlw	0
  2380  001278  6E16               	movwf	resetPosition@keepMovingX^0,c
  2381                           
  2382                           ;motors.c: 209:         }else{
  2383  00127A  EF41  F009         	goto	l120
  2384  00127E                     l117:
  2385  00127E  FFFF               	dw	65535	; assembler added errata NOP
  2386                           
  2387                           ;motors.c: 211:             LATAbits.LATA2 = 1;
  2388  001280  8489               	bsf	137,2,c	;volatile
  2389  001282                     l120:
  2390  001282  FFFF               	dw	65535	; assembler added errata NOP
  2391                           
  2392                           ;motors.c: 215:         if(PORTEbits.RE1 || !keepMovingY){
  2393  001284  B284               	btfsc	132,1,c	;volatile
  2394  001286  EF47  F009         	goto	u3381
  2395  00128A  EF4A  F009         	goto	u3380
  2396  00128E                     u3381:
  2397  00128E  FFFF               	dw	65535	; assembler added errata NOP
  2398  001290  EF54  F009         	goto	l4024
  2399  001294                     u3380:
  2400  001294  FFFF               	dw	65535	; assembler added errata NOP
  2401  001296  5017               	movf	resetPosition@keepMovingY^0,w,c
  2402  001298  A4D8               	btfss	status,2,c
  2403  00129A  EF51  F009         	goto	u3391
  2404  00129E  EF54  F009         	goto	u3390
  2405  0012A2                     u3391:
  2406  0012A2  FFFF               	dw	65535	; assembler added errata NOP
  2407  0012A4  EF59  F009         	goto	l121
  2408  0012A8                     u3390:
  2409  0012A8                     l4024:
  2410  0012A8  FFFF               	dw	65535	; assembler added errata NOP
  2411                           
  2412                           ;motors.c: 217:             keepMovingY = 0;
  2413  0012AA  0E00               	movlw	0
  2414  0012AC  6E17               	movwf	resetPosition@keepMovingY^0,c
  2415                           
  2416                           ;motors.c: 218:         }else{
  2417  0012AE  EF5B  F009         	goto	l124
  2418  0012B2                     l121:
  2419  0012B2  FFFF               	dw	65535	; assembler added errata NOP
  2420                           
  2421                           ;motors.c: 220:             LATBbits.LATB4 = 1;
  2422  0012B4  888A               	bsf	138,4,c	;volatile
  2423  0012B6                     l124:
  2424  0012B6  FFFF               	dw	65535	; assembler added errata NOP
  2425                           
  2426                           ;motors.c: 224:         if(PORTEbits.RE2 || !keepMovingZ){
  2427  0012B8  B484               	btfsc	132,2,c	;volatile
  2428  0012BA  EF61  F009         	goto	u3401
  2429  0012BE  EF64  F009         	goto	u3400
  2430  0012C2                     u3401:
  2431  0012C2  FFFF               	dw	65535	; assembler added errata NOP
  2432  0012C4  EF6E  F009         	goto	l4028
  2433  0012C8                     u3400:
  2434  0012C8  FFFF               	dw	65535	; assembler added errata NOP
  2435  0012CA  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2436  0012CC  A4D8               	btfss	status,2,c
  2437  0012CE  EF6B  F009         	goto	u3411
  2438  0012D2  EF6E  F009         	goto	u3410
  2439  0012D6                     u3411:
  2440  0012D6  FFFF               	dw	65535	; assembler added errata NOP
  2441  0012D8  EF73  F009         	goto	l125
  2442  0012DC                     u3410:
  2443  0012DC                     l4028:
  2444  0012DC  FFFF               	dw	65535	; assembler added errata NOP
  2445                           
  2446                           ;motors.c: 226:             keepMovingZ = 0;
  2447  0012DE  0E00               	movlw	0
  2448  0012E0  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2449                           
  2450                           ;motors.c: 227:         }else{
  2451  0012E2  EF75  F009         	goto	l4030
  2452  0012E6                     l125:
  2453  0012E6  FFFF               	dw	65535	; assembler added errata NOP
  2454                           
  2455                           ;motors.c: 229:             LATCbits.LATC2 = 1;
  2456  0012E8  848B               	bsf	139,2,c	;volatile
  2457  0012EA                     l4030:
  2458  0012EA  FFFF               	dw	65535	; assembler added errata NOP
  2459  0012EC  EC49  F012         	call	_stepMade	;wreg free
  2460  0012F0  5012               	movf	?_stepMade^0,w,c
  2461  0012F2  1013               	iorwf	(?_stepMade+1)^0,w,c
  2462  0012F4  B4D8               	btfsc	status,2,c
  2463  0012F6  EF7F  F009         	goto	u3421
  2464  0012FA  EF82  F009         	goto	u3420
  2465  0012FE                     u3421:
  2466  0012FE  FFFF               	dw	65535	; assembler added errata NOP
  2467  001300  EF75  F009         	goto	l4030
  2468  001304                     u3420:
  2469  001304  FFFF               	dw	65535	; assembler added errata NOP
  2470  001306                     
  2471                           ;motors.c: 236:         LATAbits.LATA2 = 0;
  2472  001306  9489               	bcf	137,2,c	;volatile
  2473                           
  2474                           ;motors.c: 237:         LATBbits.LATB4 = 0;
  2475  001308  988A               	bcf	138,4,c	;volatile
  2476                           
  2477                           ;motors.c: 238:         LATCbits.LATC2 = 0;
  2478  00130A  948B               	bcf	139,2,c	;volatile
  2479  00130C                     l4032:
  2480  00130C  FFFF               	dw	65535	; assembler added errata NOP
  2481  00130E  EC49  F012         	call	_stepMade	;wreg free
  2482  001312  5012               	movf	?_stepMade^0,w,c
  2483  001314  1013               	iorwf	(?_stepMade+1)^0,w,c
  2484  001316  B4D8               	btfsc	status,2,c
  2485  001318  EF90  F009         	goto	u3431
  2486  00131C  EF93  F009         	goto	u3430
  2487  001320                     u3431:
  2488  001320  FFFF               	dw	65535	; assembler added errata NOP
  2489  001322  EF86  F009         	goto	l4032
  2490  001326                     u3430:
  2491  001326                     l4034:
  2492  001326  FFFF               	dw	65535	; assembler added errata NOP
  2493                           
  2494                           ;motors.c: 189:     while(keepMovingX || keepMovingY || keepMovingZ){
  2495  001328  5016               	movf	resetPosition@keepMovingX^0,w,c
  2496  00132A  A4D8               	btfss	status,2,c
  2497  00132C  EF9A  F009         	goto	u3441
  2498  001330  EF9D  F009         	goto	u3440
  2499  001334                     u3441:
  2500  001334  FFFF               	dw	65535	; assembler added errata NOP
  2501  001336  EF12  F009         	goto	l4012
  2502  00133A                     u3440:
  2503  00133A  FFFF               	dw	65535	; assembler added errata NOP
  2504  00133C  5017               	movf	resetPosition@keepMovingY^0,w,c
  2505  00133E  A4D8               	btfss	status,2,c
  2506  001340  EFA4  F009         	goto	u3451
  2507  001344  EFA7  F009         	goto	u3450
  2508  001348                     u3451:
  2509  001348  FFFF               	dw	65535	; assembler added errata NOP
  2510  00134A  EF12  F009         	goto	l4012
  2511  00134E                     u3450:
  2512  00134E  FFFF               	dw	65535	; assembler added errata NOP
  2513  001350  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2514  001352  A4D8               	btfss	status,2,c
  2515  001354  EFAE  F009         	goto	u3461
  2516  001358  EFB1  F009         	goto	u3460
  2517  00135C                     u3461:
  2518  00135C  FFFF               	dw	65535	; assembler added errata NOP
  2519  00135E  EF12  F009         	goto	l4012
  2520  001362                     u3460:
  2521  001362                     l116:
  2522  001362  FFFF               	dw	65535	; assembler added errata NOP
  2523                           
  2524                           ;motors.c: 245:     T0CONbits.TMR0ON = 0;
  2525  001364  9ED5               	bcf	213,7,c	;volatile
  2526                           
  2527                           ;motors.c: 246:     T2CONbits.TMR2ON = 0;
  2528  001366  94CA               	bcf	202,2,c	;volatile
  2529  001368                     
  2530                           ;motors.c: 248:     TMR0 = 0;
  2531  001368  0E00               	movlw	0
  2532  00136A  6ED7               	movwf	215,c	;volatile
  2533  00136C  0E00               	movlw	0
  2534  00136E  6ED6               	movwf	214,c	;volatile
  2535                           
  2536                           ;motors.c: 249:     TMR2 = 0;
  2537  001370  0E00               	movlw	0
  2538  001372  6ECC               	movwf	204,c	;volatile
  2539  001374                     
  2540                           ;motors.c: 252:     resetStep();
  2541  001374  ECA5  F012         	call	_resetStep	;wreg free
  2542  001378                     
  2543                           ;motors.c: 255:     return(tm0Error);
  2544  001378  505B               	movf	_tm0Error^0,w,c
  2545  00137A  0012               	return		;funcret
  2546  00137C  FFFF               	dw	65535	; errata NOP
  2547  00137E                     __end_of_resetPosition:
  2548                           	callstack 0
  2549                           
  2550 ;; *************** function _setStep *****************
  2551 ;; Defined at:
  2552 ;;		line 67 in file "motors.c"
  2553 ;; Parameters:    Size  Location     Type
  2554 ;;  step            1    wreg     unsigned char 
  2555 ;;  motor           1   17[COMRAM] unsigned char 
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;  step            1   20[COMRAM] unsigned char 
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg, status,2, status,0
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2567 ;;      Params:         1       0       0       0       0       0       0
  2568 ;;      Locals:         1       0       0       0       0       0       0
  2569 ;;      Temps:          2       0       0       0       0       0       0
  2570 ;;      Totals:         4       0       0       0       0       0       0
  2571 ;;Total ram usage:        4 bytes
  2572 ;; Hardware stack levels used:    1
  2573 ;; Hardware stack levels required when called:    4
  2574 ;; This function calls:
  2575 ;;		Nothing
  2576 ;; This function is called by:
  2577 ;;		_resetPosition
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580                           
  2581                           	psect	text9
  2582  001EC2                     __ptext9:
  2583                           	callstack 0
  2584  001EC2                     _setStep:
  2585                           	callstack 0
  2586  001EC2  FFFF               	dw	65535	; assembler added errata NOP
  2587                           
  2588                           ;incstack = 0
  2589                           ;setStep@step stored from wreg
  2590  001EC4  6E15               	movwf	setStep@step^0,c
  2591  001EC6                     
  2592                           ;motors.c: 68:     switch(motor){
  2593  001EC6  EFAE  F00F         	goto	l3680
  2594  001ECA                     l3672:
  2595  001ECA  FFFF               	dw	65535	; assembler added errata NOP
  2596                           
  2597                           ;motors.c: 71:             LATAbits.LATA5 = (step & 0x01);
  2598  001ECC  C015  F013         	movff	setStep@step,??_setStep
  2599  001ED0  0E01               	movlw	1
  2600  001ED2  1613               	andwf	??_setStep^0,f,c
  2601  001ED4  3A13               	swapf	??_setStep^0,f,c
  2602  001ED6  4613               	rlncf	??_setStep^0,f,c
  2603  001ED8  5089               	movf	137,w,c	;volatile
  2604  001EDA  1813               	xorwf	??_setStep^0,w,c
  2605  001EDC  0BDF               	andlw	-33
  2606  001EDE  1813               	xorwf	??_setStep^0,w,c
  2607  001EE0  6E89               	movwf	137,c	;volatile
  2608                           
  2609                           ;motors.c: 73:             LATBbits.LATB0 = (step & 0x02);
  2610  001EE2  C015  F013         	movff	setStep@step,??_setStep
  2611  001EE6  0E02               	movlw	2
  2612  001EE8  1613               	andwf	??_setStep^0,f,c
  2613  001EEA  508A               	movf	138,w,c	;volatile
  2614  001EEC  1813               	xorwf	??_setStep^0,w,c
  2615  001EEE  0BFE               	andlw	-2
  2616  001EF0  1813               	xorwf	??_setStep^0,w,c
  2617  001EF2  6E8A               	movwf	138,c	;volatile
  2618                           
  2619                           ;motors.c: 74:             break;
  2620  001EF4  EFC9  F00F         	goto	l83
  2621  001EF8                     l3674:
  2622  001EF8  FFFF               	dw	65535	; assembler added errata NOP
  2623                           
  2624                           ;motors.c: 76:             LATBbits.LATB6 = (step & 0x01);
  2625  001EFA  C015  F013         	movff	setStep@step,??_setStep
  2626  001EFE  0E01               	movlw	1
  2627  001F00  1613               	andwf	??_setStep^0,f,c
  2628  001F02  3A13               	swapf	??_setStep^0,f,c
  2629  001F04  4613               	rlncf	??_setStep^0,f,c
  2630  001F06  4613               	rlncf	??_setStep^0,f,c
  2631  001F08  508A               	movf	138,w,c	;volatile
  2632  001F0A  1813               	xorwf	??_setStep^0,w,c
  2633  001F0C  0BBF               	andlw	-65
  2634  001F0E  1813               	xorwf	??_setStep^0,w,c
  2635  001F10  6E8A               	movwf	138,c	;volatile
  2636                           
  2637                           ;motors.c: 77:             LATBbits.LATB7 = (step & 0x02);
  2638  001F12  C015  F013         	movff	setStep@step,??_setStep
  2639  001F16  0E02               	movlw	2
  2640  001F18  1613               	andwf	??_setStep^0,f,c
  2641  001F1A  3213               	rrcf	??_setStep^0,f,c
  2642  001F1C  3213               	rrcf	??_setStep^0,f,c
  2643  001F1E  508A               	movf	138,w,c	;volatile
  2644  001F20  1813               	xorwf	??_setStep^0,w,c
  2645  001F22  0B7F               	andlw	-129
  2646  001F24  1813               	xorwf	??_setStep^0,w,c
  2647  001F26  6E8A               	movwf	138,c	;volatile
  2648                           
  2649                           ;motors.c: 78:             break;
  2650  001F28  EFC9  F00F         	goto	l83
  2651  001F2C                     l3676:
  2652  001F2C  FFFF               	dw	65535	; assembler added errata NOP
  2653                           
  2654                           ;motors.c: 80:             LATCbits.LATC4 = (step & 0x01);
  2655  001F2E  C015  F013         	movff	setStep@step,??_setStep
  2656  001F32  0E01               	movlw	1
  2657  001F34  1613               	andwf	??_setStep^0,f,c
  2658  001F36  3A13               	swapf	??_setStep^0,f,c
  2659  001F38  508B               	movf	139,w,c	;volatile
  2660  001F3A  1813               	xorwf	??_setStep^0,w,c
  2661  001F3C  0BEF               	andlw	-17
  2662  001F3E  1813               	xorwf	??_setStep^0,w,c
  2663  001F40  6E8B               	movwf	139,c	;volatile
  2664                           
  2665                           ;motors.c: 81:             LATCbits.LATC5 = (step & 0x02);
  2666  001F42  C015  F013         	movff	setStep@step,??_setStep
  2667  001F46  0E02               	movlw	2
  2668  001F48  1613               	andwf	??_setStep^0,f,c
  2669  001F4A  3A13               	swapf	??_setStep^0,f,c
  2670  001F4C  4613               	rlncf	??_setStep^0,f,c
  2671  001F4E  508B               	movf	139,w,c	;volatile
  2672  001F50  1813               	xorwf	??_setStep^0,w,c
  2673  001F52  0BDF               	andlw	-33
  2674  001F54  1813               	xorwf	??_setStep^0,w,c
  2675  001F56  6E8B               	movwf	139,c	;volatile
  2676                           
  2677                           ;motors.c: 82:             break;
  2678  001F58  EFC9  F00F         	goto	l83
  2679  001F5C                     l3680:
  2680  001F5C  FFFF               	dw	65535	; assembler added errata NOP
  2681  001F5E  5012               	movf	setStep@motor^0,w,c
  2682  001F60  6E13               	movwf	??_setStep^0,c
  2683  001F62  6A14               	clrf	(??_setStep+1)^0,c
  2684                           
  2685                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2686                           ; Switch size 1, requested type "simple"
  2687                           ; Number of cases is 1, Range of values is 0 to 0
  2688                           ; switch strategies available:
  2689                           ; Name         Instructions Cycles
  2690                           ; simple_byte            4     3 (average)
  2691                           ;	Chosen strategy is simple_byte
  2692  001F64  5014               	movf	(??_setStep+1)^0,w,c
  2693  001F66  0A00               	xorlw	0	; case 0
  2694  001F68  B4D8               	btfsc	status,2,c
  2695  001F6A  EFB9  F00F         	goto	l4506
  2696  001F6E  EFC9  F00F         	goto	l83
  2697  001F72                     l4506:
  2698  001F72  FFFF               	dw	65535	; assembler added errata NOP
  2699                           
  2700                           ; Switch size 1, requested type "simple"
  2701                           ; Number of cases is 3, Range of values is 0 to 2
  2702                           ; switch strategies available:
  2703                           ; Name         Instructions Cycles
  2704                           ; simple_byte           10     6 (average)
  2705                           ;	Chosen strategy is simple_byte
  2706  001F74  5013               	movf	??_setStep^0,w,c
  2707  001F76  0A00               	xorlw	0	; case 0
  2708  001F78  B4D8               	btfsc	status,2,c
  2709  001F7A  EF65  F00F         	goto	l3672
  2710  001F7E  0A01               	xorlw	1	; case 1
  2711  001F80  B4D8               	btfsc	status,2,c
  2712  001F82  EF7C  F00F         	goto	l3674
  2713  001F86  0A03               	xorlw	3	; case 2
  2714  001F88  B4D8               	btfsc	status,2,c
  2715  001F8A  EF96  F00F         	goto	l3676
  2716  001F8E  EFC9  F00F         	goto	l83
  2717  001F92                     l83:
  2718  001F92  FFFF               	dw	65535	; assembler added errata NOP
  2719  001F94  0012               	return		;funcret
  2720  001F96  FFFF               	dw	65535	; errata NOP
  2721  001F98                     __end_of_setStep:
  2722                           	callstack 0
  2723                           
  2724 ;; *************** function _setDecay *****************
  2725 ;; Defined at:
  2726 ;;		line 136 in file "motors.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;  decay           1    wreg     unsigned char 
  2729 ;;  motor           1   17[COMRAM] unsigned char 
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;  decay           1   20[COMRAM] unsigned char 
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      void 
  2734 ;; Registers used:
  2735 ;;		wreg, status,2, status,0
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2741 ;;      Params:         1       0       0       0       0       0       0
  2742 ;;      Locals:         1       0       0       0       0       0       0
  2743 ;;      Temps:          2       0       0       0       0       0       0
  2744 ;;      Totals:         4       0       0       0       0       0       0
  2745 ;;Total ram usage:        4 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:    4
  2748 ;; This function calls:
  2749 ;;		Nothing
  2750 ;; This function is called by:
  2751 ;;		_resetPosition
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           	psect	text10
  2756  0020CE                     __ptext10:
  2757                           	callstack 0
  2758  0020CE                     _setDecay:
  2759                           	callstack 0
  2760  0020CE  FFFF               	dw	65535	; assembler added errata NOP
  2761                           
  2762                           ;incstack = 0
  2763                           ;setDecay@decay stored from wreg
  2764  0020D0  6E15               	movwf	setDecay@decay^0,c
  2765  0020D2                     
  2766                           ;motors.c: 137:     switch(motor){
  2767  0020D2  EF83  F010         	goto	l3712
  2768  0020D6                     l3704:
  2769  0020D6  FFFF               	dw	65535	; assembler added errata NOP
  2770                           
  2771                           ;motors.c: 139:             LATBbits.LATB2 = decay;
  2772  0020D8  B015               	btfsc	setDecay@decay^0,0,c
  2773  0020DA  D002               	bra	u2955
  2774  0020DC  948A               	bcf	138,2,c	;volatile
  2775  0020DE  D001               	bra	u2956
  2776  0020E0                     u2955:
  2777  0020E0  848A               	bsf	138,2,c	;volatile
  2778  0020E2                     u2956:
  2779                           
  2780                           ;motors.c: 140:             break;
  2781  0020E2  EF9E  F010         	goto	l110
  2782  0020E6                     l3706:
  2783  0020E6  FFFF               	dw	65535	; assembler added errata NOP
  2784                           
  2785                           ;motors.c: 142:             LATCbits.LATC0 = decay;
  2786  0020E8  B015               	btfsc	setDecay@decay^0,0,c
  2787  0020EA  D002               	bra	u2965
  2788  0020EC  908B               	bcf	139,0,c	;volatile
  2789  0020EE  D001               	bra	u2966
  2790  0020F0                     u2965:
  2791  0020F0  808B               	bsf	139,0,c	;volatile
  2792  0020F2                     u2966:
  2793                           
  2794                           ;motors.c: 143:             break;
  2795  0020F2  EF9E  F010         	goto	l110
  2796  0020F6                     l3708:
  2797  0020F6  FFFF               	dw	65535	; assembler added errata NOP
  2798                           
  2799                           ;motors.c: 145:             LATDbits.LATD0 = decay;
  2800  0020F8  B015               	btfsc	setDecay@decay^0,0,c
  2801  0020FA  D002               	bra	u2975
  2802  0020FC  908C               	bcf	140,0,c	;volatile
  2803  0020FE  D001               	bra	u2976
  2804  002100                     u2975:
  2805  002100  808C               	bsf	140,0,c	;volatile
  2806  002102                     u2976:
  2807                           
  2808                           ;motors.c: 146:             break;
  2809  002102  EF9E  F010         	goto	l110
  2810  002106                     l3712:
  2811  002106  FFFF               	dw	65535	; assembler added errata NOP
  2812  002108  5012               	movf	setDecay@motor^0,w,c
  2813  00210A  6E13               	movwf	??_setDecay^0,c
  2814  00210C  6A14               	clrf	(??_setDecay+1)^0,c
  2815                           
  2816                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2817                           ; Switch size 1, requested type "simple"
  2818                           ; Number of cases is 1, Range of values is 0 to 0
  2819                           ; switch strategies available:
  2820                           ; Name         Instructions Cycles
  2821                           ; simple_byte            4     3 (average)
  2822                           ;	Chosen strategy is simple_byte
  2823  00210E  5014               	movf	(??_setDecay+1)^0,w,c
  2824  002110  0A00               	xorlw	0	; case 0
  2825  002112  B4D8               	btfsc	status,2,c
  2826  002114  EF8E  F010         	goto	l4508
  2827  002118  EF9E  F010         	goto	l110
  2828  00211C                     l4508:
  2829  00211C  FFFF               	dw	65535	; assembler added errata NOP
  2830                           
  2831                           ; Switch size 1, requested type "simple"
  2832                           ; Number of cases is 3, Range of values is 0 to 2
  2833                           ; switch strategies available:
  2834                           ; Name         Instructions Cycles
  2835                           ; simple_byte           10     6 (average)
  2836                           ;	Chosen strategy is simple_byte
  2837  00211E  5013               	movf	??_setDecay^0,w,c
  2838  002120  0A00               	xorlw	0	; case 0
  2839  002122  B4D8               	btfsc	status,2,c
  2840  002124  EF6B  F010         	goto	l3704
  2841  002128  0A01               	xorlw	1	; case 1
  2842  00212A  B4D8               	btfsc	status,2,c
  2843  00212C  EF73  F010         	goto	l3706
  2844  002130  0A03               	xorlw	3	; case 2
  2845  002132  B4D8               	btfsc	status,2,c
  2846  002134  EF7B  F010         	goto	l3708
  2847  002138  EF9E  F010         	goto	l110
  2848  00213C                     l110:
  2849  00213C  FFFF               	dw	65535	; assembler added errata NOP
  2850  00213E  0012               	return		;funcret
  2851  002140  FFFF               	dw	65535	; errata NOP
  2852  002142                     __end_of_setDecay:
  2853                           	callstack 0
  2854                           
  2855 ;; *************** function _enableMotor *****************
  2856 ;; Defined at:
  2857 ;;		line 94 in file "motors.c"
  2858 ;; Parameters:    Size  Location     Type
  2859 ;;  enable          1    wreg     unsigned char 
  2860 ;;  motor           1   17[COMRAM] unsigned char 
  2861 ;; Auto vars:     Size  Location     Type
  2862 ;;  enable          1   20[COMRAM] unsigned char 
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  1    wreg      void 
  2865 ;; Registers used:
  2866 ;;		wreg, status,2, status,0
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2872 ;;      Params:         1       0       0       0       0       0       0
  2873 ;;      Locals:         1       0       0       0       0       0       0
  2874 ;;      Temps:          2       0       0       0       0       0       0
  2875 ;;      Totals:         4       0       0       0       0       0       0
  2876 ;;Total ram usage:        4 bytes
  2877 ;; Hardware stack levels used:    1
  2878 ;; Hardware stack levels required when called:    4
  2879 ;; This function calls:
  2880 ;;		Nothing
  2881 ;; This function is called by:
  2882 ;;		_resetPosition
  2883 ;;		_main
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           	psect	text11
  2888  002142                     __ptext11:
  2889                           	callstack 0
  2890  002142                     _enableMotor:
  2891                           	callstack 0
  2892  002142  FFFF               	dw	65535	; assembler added errata NOP
  2893                           
  2894                           ;incstack = 0
  2895                           ;enableMotor@enable stored from wreg
  2896  002144  6E15               	movwf	enableMotor@enable^0,c
  2897  002146                     
  2898                           ;motors.c: 95:     switch(motor){
  2899  002146  EFBD  F010         	goto	l3696
  2900  00214A                     l3688:
  2901  00214A  FFFF               	dw	65535	; assembler added errata NOP
  2902                           
  2903                           ;motors.c: 97:             LATAbits.LATA3 = enable;
  2904  00214C  B015               	btfsc	enableMotor@enable^0,0,c
  2905  00214E  D002               	bra	u2925
  2906  002150  9689               	bcf	137,3,c	;volatile
  2907  002152  D001               	bra	u2926
  2908  002154                     u2925:
  2909  002154  8689               	bsf	137,3,c	;volatile
  2910  002156                     u2926:
  2911                           
  2912                           ;motors.c: 98:             break;
  2913  002156  EFD8  F010         	goto	l92
  2914  00215A                     l3690:
  2915  00215A  FFFF               	dw	65535	; assembler added errata NOP
  2916                           
  2917                           ;motors.c: 100:             LATBbits.LATB5 = enable;
  2918  00215C  B015               	btfsc	enableMotor@enable^0,0,c
  2919  00215E  D002               	bra	u2935
  2920  002160  9A8A               	bcf	138,5,c	;volatile
  2921  002162  D001               	bra	u2936
  2922  002164                     u2935:
  2923  002164  8A8A               	bsf	138,5,c	;volatile
  2924  002166                     u2936:
  2925                           
  2926                           ;motors.c: 101:             break;
  2927  002166  EFD8  F010         	goto	l92
  2928  00216A                     l3692:
  2929  00216A  FFFF               	dw	65535	; assembler added errata NOP
  2930                           
  2931                           ;motors.c: 103:             LATCbits.LATC3 = enable;
  2932  00216C  B015               	btfsc	enableMotor@enable^0,0,c
  2933  00216E  D002               	bra	u2945
  2934  002170  968B               	bcf	139,3,c	;volatile
  2935  002172  D001               	bra	u2946
  2936  002174                     u2945:
  2937  002174  868B               	bsf	139,3,c	;volatile
  2938  002176                     u2946:
  2939                           
  2940                           ;motors.c: 104:             break;
  2941  002176  EFD8  F010         	goto	l92
  2942  00217A                     l3696:
  2943  00217A  FFFF               	dw	65535	; assembler added errata NOP
  2944  00217C  5012               	movf	enableMotor@motor^0,w,c
  2945  00217E  6E13               	movwf	??_enableMotor^0,c
  2946  002180  6A14               	clrf	(??_enableMotor+1)^0,c
  2947                           
  2948                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2949                           ; Switch size 1, requested type "simple"
  2950                           ; Number of cases is 1, Range of values is 0 to 0
  2951                           ; switch strategies available:
  2952                           ; Name         Instructions Cycles
  2953                           ; simple_byte            4     3 (average)
  2954                           ;	Chosen strategy is simple_byte
  2955  002182  5014               	movf	(??_enableMotor+1)^0,w,c
  2956  002184  0A00               	xorlw	0	; case 0
  2957  002186  B4D8               	btfsc	status,2,c
  2958  002188  EFC8  F010         	goto	l4510
  2959  00218C  EFD8  F010         	goto	l92
  2960  002190                     l4510:
  2961  002190  FFFF               	dw	65535	; assembler added errata NOP
  2962                           
  2963                           ; Switch size 1, requested type "simple"
  2964                           ; Number of cases is 3, Range of values is 0 to 2
  2965                           ; switch strategies available:
  2966                           ; Name         Instructions Cycles
  2967                           ; simple_byte           10     6 (average)
  2968                           ;	Chosen strategy is simple_byte
  2969  002192  5013               	movf	??_enableMotor^0,w,c
  2970  002194  0A00               	xorlw	0	; case 0
  2971  002196  B4D8               	btfsc	status,2,c
  2972  002198  EFA5  F010         	goto	l3688
  2973  00219C  0A01               	xorlw	1	; case 1
  2974  00219E  B4D8               	btfsc	status,2,c
  2975  0021A0  EFAD  F010         	goto	l3690
  2976  0021A4  0A03               	xorlw	3	; case 2
  2977  0021A6  B4D8               	btfsc	status,2,c
  2978  0021A8  EFB5  F010         	goto	l3692
  2979  0021AC  EFD8  F010         	goto	l92
  2980  0021B0                     l92:
  2981  0021B0  FFFF               	dw	65535	; assembler added errata NOP
  2982  0021B2  0012               	return		;funcret
  2983  0021B4  FFFF               	dw	65535	; errata NOP
  2984  0021B6                     __end_of_enableMotor:
  2985                           	callstack 0
  2986                           
  2987 ;; *************** function _resetNewSequence *****************
  2988 ;; Defined at:
  2989 ;;		line 112 in file "usart.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;		None
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;		None
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  1    wreg      void 
  2996 ;; Registers used:
  2997 ;;		wreg, status,2
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3003 ;;      Params:         0       0       0       0       0       0       0
  3004 ;;      Locals:         0       0       0       0       0       0       0
  3005 ;;      Temps:          0       0       0       0       0       0       0
  3006 ;;      Totals:         0       0       0       0       0       0       0
  3007 ;;Total ram usage:        0 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    4
  3010 ;; This function calls:
  3011 ;;		Nothing
  3012 ;; This function is called by:
  3013 ;;		_main
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text12
  3018  002522                     __ptext12:
  3019                           	callstack 0
  3020  002522                     _resetNewSequence:
  3021                           	callstack 0
  3022  002522  FFFF               	dw	65535	; assembler added errata NOP
  3023  002524                     
  3024                           ;usart.c: 113:     _newSequence = 0;
  3025  002524  0E00               	movlw	0
  3026  002526  6E5F               	movwf	__newSequence^0,c
  3027  002528  0012               	return		;funcret
  3028  00252A  FFFF               	dw	65535	; errata NOP
  3029  00252C                     __end_of_resetNewSequence:
  3030                           	callstack 0
  3031                           
  3032 ;; *************** function _reduceSeq *****************
  3033 ;; Defined at:
  3034 ;;		line 89 in file "usart.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;		None
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;		None
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  1    wreg      void 
  3041 ;; Registers used:
  3042 ;;		status,2, status,0
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3048 ;;      Params:         0       0       0       0       0       0       0
  3049 ;;      Locals:         0       0       0       0       0       0       0
  3050 ;;      Temps:          0       0       0       0       0       0       0
  3051 ;;      Totals:         0       0       0       0       0       0       0
  3052 ;;Total ram usage:        0 bytes
  3053 ;; Hardware stack levels used:    1
  3054 ;; Hardware stack levels required when called:    4
  3055 ;; This function calls:
  3056 ;;		Nothing
  3057 ;; This function is called by:
  3058 ;;		_main
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           	psect	text13
  3063  002572                     __ptext13:
  3064                           	callstack 0
  3065  002572                     _reduceSeq:
  3066                           	callstack 0
  3067  002572  FFFF               	dw	65535	; assembler added errata NOP
  3068  002574                     
  3069                           ;usart.c: 90:     dataCounter--;
  3070  002574  0661               	decf	_dataCounter^0,f,c
  3071  002576  0012               	return		;funcret
  3072  002578  FFFF               	dw	65535	; errata NOP
  3073  00257A                     __end_of_reduceSeq:
  3074                           	callstack 0
  3075                           
  3076 ;; *************** function _readSeq *****************
  3077 ;; Defined at:
  3078 ;;		line 96 in file "usart.c"
  3079 ;; Parameters:    Size  Location     Type
  3080 ;;		None
  3081 ;; Auto vars:     Size  Location     Type
  3082 ;;		None
  3083 ;; Return value:  Size  Location     Type
  3084 ;;                  1    wreg      unsigned char 
  3085 ;; Registers used:
  3086 ;;		wreg, status,2
  3087 ;; Tracked objects:
  3088 ;;		On entry : 0/0
  3089 ;;		On exit  : 0/0
  3090 ;;		Unchanged: 0/0
  3091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3092 ;;      Params:         0       0       0       0       0       0       0
  3093 ;;      Locals:         0       0       0       0       0       0       0
  3094 ;;      Temps:          0       0       0       0       0       0       0
  3095 ;;      Totals:         0       0       0       0       0       0       0
  3096 ;;Total ram usage:        0 bytes
  3097 ;; Hardware stack levels used:    1
  3098 ;; Hardware stack levels required when called:    4
  3099 ;; This function calls:
  3100 ;;		Nothing
  3101 ;; This function is called by:
  3102 ;;		_main
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           	psect	text14
  3107  00257A                     __ptext14:
  3108                           	callstack 0
  3109  00257A                     _readSeq:
  3110                           	callstack 0
  3111  00257A  FFFF               	dw	65535	; assembler added errata NOP
  3112  00257C                     
  3113                           ;usart.c: 97:     return dataCounter;
  3114  00257C  5061               	movf	_dataCounter^0,w,c
  3115  00257E  0012               	return		;funcret
  3116  002580  FFFF               	dw	65535	; errata NOP
  3117  002582                     __end_of_readSeq:
  3118                           	callstack 0
  3119                           
  3120 ;; *************** function _newSequence *****************
  3121 ;; Defined at:
  3122 ;;		line 104 in file "usart.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;		None
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;		None
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      unsigned char 
  3129 ;; Registers used:
  3130 ;;		wreg, status,2
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3136 ;;      Params:         0       0       0       0       0       0       0
  3137 ;;      Locals:         0       0       0       0       0       0       0
  3138 ;;      Temps:          0       0       0       0       0       0       0
  3139 ;;      Totals:         0       0       0       0       0       0       0
  3140 ;;Total ram usage:        0 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    4
  3143 ;; This function calls:
  3144 ;;		Nothing
  3145 ;; This function is called by:
  3146 ;;		_main
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           	psect	text15
  3151  002582                     __ptext15:
  3152                           	callstack 0
  3153  002582                     _newSequence:
  3154                           	callstack 0
  3155  002582  FFFF               	dw	65535	; assembler added errata NOP
  3156  002584                     
  3157                           ;usart.c: 105:     return _newSequence;
  3158  002584  505F               	movf	__newSequence^0,w,c
  3159  002586  0012               	return		;funcret
  3160  002588  FFFF               	dw	65535	; errata NOP
  3161  00258A                     __end_of_newSequence:
  3162                           	callstack 0
  3163                           
  3164 ;; *************** function _interruptInit *****************
  3165 ;; Defined at:
  3166 ;;		line 104 in file "main.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;		None
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;		None
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  1    wreg      void 
  3173 ;; Registers used:
  3174 ;;		None
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3180 ;;      Params:         0       0       0       0       0       0       0
  3181 ;;      Locals:         0       0       0       0       0       0       0
  3182 ;;      Temps:          0       0       0       0       0       0       0
  3183 ;;      Totals:         0       0       0       0       0       0       0
  3184 ;;Total ram usage:        0 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    4
  3187 ;; This function calls:
  3188 ;;		Nothing
  3189 ;; This function is called by:
  3190 ;;		_main
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           	psect	text16
  3195  002382                     __ptext16:
  3196                           	callstack 0
  3197  002382                     _interruptInit:
  3198                           	callstack 0
  3199  002382  FFFF               	dw	65535	; assembler added errata NOP
  3200  002384                     
  3201                           ;main.c: 106:     if(!INTCONbits.GIE){
  3202  002384  BEF2               	btfsc	242,7,c	;volatile
  3203  002386  EFC7  F011         	goto	u3471
  3204  00238A  EFCA  F011         	goto	u3470
  3205  00238E                     u3471:
  3206  00238E  FFFF               	dw	65535	; assembler added errata NOP
  3207  002390  EFCC  F011         	goto	l332
  3208  002394                     u3470:
  3209  002394  FFFF               	dw	65535	; assembler added errata NOP
  3210  002396                     
  3211                           ;main.c: 107:         INTCONbits.GIE = 1;
  3212  002396  8EF2               	bsf	242,7,c	;volatile
  3213  002398                     l332:
  3214  002398  FFFF               	dw	65535	; assembler added errata NOP
  3215                           
  3216                           ;main.c: 109:     if(!INTCONbits.PEIE){
  3217  00239A  BCF2               	btfsc	242,6,c	;volatile
  3218  00239C  EFD2  F011         	goto	u3481
  3219  0023A0  EFD5  F011         	goto	u3480
  3220  0023A4                     u3481:
  3221  0023A4  FFFF               	dw	65535	; assembler added errata NOP
  3222  0023A6  EFD7  F011         	goto	l333
  3223  0023AA                     u3480:
  3224  0023AA  FFFF               	dw	65535	; assembler added errata NOP
  3225  0023AC                     
  3226                           ;main.c: 110:         INTCONbits.PEIE = 1;
  3227  0023AC  8CF2               	bsf	242,6,c	;volatile
  3228  0023AE                     l333:
  3229  0023AE  FFFF               	dw	65535	; assembler added errata NOP
  3230                           
  3231                           ;main.c: 114:     RCONbits.IPEN = 1;
  3232  0023B0  8ED0               	bsf	208,7,c	;volatile
  3233                           
  3234                           ;main.c: 115:     INTCONbits.T0IE = 1;
  3235  0023B2  8AF2               	bsf	242,5,c	;volatile
  3236                           
  3237                           ;main.c: 116:     PIE1bits.TMR2IE = 1;
  3238  0023B4  829D               	bsf	157,1,c	;volatile
  3239                           
  3240                           ;main.c: 117:     PIE1bits.RC1IE = 1;
  3241  0023B6  8A9D               	bsf	157,5,c	;volatile
  3242  0023B8  0012               	return		;funcret
  3243  0023BA  FFFF               	dw	65535	; errata NOP
  3244  0023BC                     __end_of_interruptInit:
  3245                           	callstack 0
  3246                           
  3247 ;; *************** function _initPinMotors *****************
  3248 ;; Defined at:
  3249 ;;		line 42 in file "motors.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;		None
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;		None
  3254 ;; Return value:  Size  Location     Type
  3255 ;;                  1    wreg      void 
  3256 ;; Registers used:
  3257 ;;		wreg, status,2, status,0
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3263 ;;      Params:         0       0       0       0       0       0       0
  3264 ;;      Locals:         0       0       0       0       0       0       0
  3265 ;;      Temps:          0       0       0       0       0       0       0
  3266 ;;      Totals:         0       0       0       0       0       0       0
  3267 ;;Total ram usage:        0 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:    4
  3270 ;; This function calls:
  3271 ;;		Nothing
  3272 ;; This function is called by:
  3273 ;;		_main
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text17
  3278  002414                     __ptext17:
  3279                           	callstack 0
  3280  002414                     _initPinMotors:
  3281                           	callstack 0
  3282  002414  FFFF               	dw	65535	; assembler added errata NOP
  3283  002416                     
  3284                           ;motors.c: 44:     ADCON1bits.PCFG = 0x06;
  3285  002416  50C1               	movf	193,w,c	;volatile
  3286  002418  0BF0               	andlw	-16
  3287  00241A  0906               	iorlw	6
  3288  00241C  6EC1               	movwf	193,c	;volatile
  3289  00241E                     
  3290                           ;motors.c: 45:     TRISA &= 0b11010001;
  3291  00241E  0ED1               	movlw	209
  3292  002420  1692               	andwf	146,f,c	;volatile
  3293  002422                     
  3294                           ;motors.c: 47:     TRISB &= 0b00000010;
  3295  002422  0E02               	movlw	2
  3296  002424  1693               	andwf	147,f,c	;volatile
  3297  002426                     
  3298                           ;motors.c: 48:     TRISC &= 0b11000000;
  3299  002426  0EC0               	movlw	192
  3300  002428  1694               	andwf	148,f,c	;volatile
  3301  00242A                     
  3302                           ;motors.c: 49:     TRISD &= 0b11000000;
  3303  00242A  0EC0               	movlw	192
  3304  00242C  1695               	andwf	149,f,c	;volatile
  3305  00242E                     
  3306                           ;motors.c: 52:     TRISEbits.TRISE0 = 1;
  3307  00242E  8096               	bsf	150,0,c	;volatile
  3308  002430                     
  3309                           ;motors.c: 53:     TRISEbits.TRISE1 = 1;
  3310  002430  8296               	bsf	150,1,c	;volatile
  3311  002432                     
  3312                           ;motors.c: 54:     TRISEbits.TRISE2 = 1;
  3313  002432  8496               	bsf	150,2,c	;volatile
  3314  002434                     
  3315                           ;motors.c: 57:     TRISDbits.TRISD7 = 1;
  3316  002434  8E95               	bsf	149,7,c	;volatile
  3317  002436  0012               	return		;funcret
  3318  002438  FFFF               	dw	65535	; errata NOP
  3319  00243A                     __end_of_initPinMotors:
  3320                           	callstack 0
  3321                           
  3322 ;; *************** function _initADC *****************
  3323 ;; Defined at:
  3324 ;;		line 18 in file "adc.c"
  3325 ;; Parameters:    Size  Location     Type
  3326 ;;		None
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;		None
  3329 ;; Return value:  Size  Location     Type
  3330 ;;                  1    wreg      void 
  3331 ;; Registers used:
  3332 ;;		wreg, status,2
  3333 ;; Tracked objects:
  3334 ;;		On entry : 0/0
  3335 ;;		On exit  : 0/0
  3336 ;;		Unchanged: 0/0
  3337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3338 ;;      Params:         0       0       0       0       0       0       0
  3339 ;;      Locals:         0       0       0       0       0       0       0
  3340 ;;      Temps:          0       0       0       0       0       0       0
  3341 ;;      Totals:         0       0       0       0       0       0       0
  3342 ;;Total ram usage:        0 bytes
  3343 ;; Hardware stack levels used:    1
  3344 ;; Hardware stack levels required when called:    4
  3345 ;; This function calls:
  3346 ;;		Nothing
  3347 ;; This function is called by:
  3348 ;;		_main
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           	psect	text18
  3353  00243A                     __ptext18:
  3354                           	callstack 0
  3355  00243A                     _initADC:
  3356                           	callstack 0
  3357  00243A  FFFF               	dw	65535	; assembler added errata NOP
  3358  00243C                     
  3359                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3360  00243C  50C2               	movf	194,w,c	;volatile
  3361  00243E  0B3F               	andlw	-193
  3362  002440  0940               	iorlw	64
  3363  002442  6EC2               	movwf	194,c	;volatile
  3364  002444                     
  3365                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3366  002444  8CC1               	bsf	193,6,c	;volatile
  3367                           
  3368                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3369  002446  0EC7               	movlw	-57
  3370  002448  16C2               	andwf	194,f,c	;volatile
  3371  00244A                     
  3372                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3373  00244A  94C2               	bcf	194,2,c	;volatile
  3374  00244C                     
  3375                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3376  00244C  90C2               	bcf	194,0,c	;volatile
  3377  00244E                     
  3378                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3379  00244E  9EC1               	bcf	193,7,c	;volatile
  3380                           
  3381                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3382  002450  50C1               	movf	193,w,c	;volatile
  3383  002452  0BF0               	andlw	-16
  3384  002454  090E               	iorlw	14
  3385  002456  6EC1               	movwf	193,c	;volatile
  3386  002458                     
  3387                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3388  002458  8C9D               	bsf	157,6,c	;volatile
  3389  00245A                     
  3390                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3391  00245A  8C9F               	bsf	159,6,c	;volatile
  3392  00245C  0012               	return		;funcret
  3393  00245E  FFFF               	dw	65535	; errata NOP
  3394  002460                     __end_of_initADC:
  3395                           	callstack 0
  3396                           
  3397 ;; *************** function _getNewSequence *****************
  3398 ;; Defined at:
  3399 ;;		line 213 in file "usart.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;		None
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;		None
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  2   17[COMRAM] PTR struct .
  3406 ;; Registers used:
  3407 ;;		wreg, status,2, status,0
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3413 ;;      Params:         2       0       0       0       0       0       0
  3414 ;;      Locals:         0       0       0       0       0       0       0
  3415 ;;      Temps:          0       0       0       0       0       0       0
  3416 ;;      Totals:         2       0       0       0       0       0       0
  3417 ;;Total ram usage:        2 bytes
  3418 ;; Hardware stack levels used:    1
  3419 ;; Hardware stack levels required when called:    4
  3420 ;; This function calls:
  3421 ;;		Nothing
  3422 ;; This function is called by:
  3423 ;;		_main
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           	psect	text19
  3428  0024B8                     __ptext19:
  3429                           	callstack 0
  3430  0024B8                     _getNewSequence:
  3431                           	callstack 0
  3432  0024B8  FFFF               	dw	65535	; assembler added errata NOP
  3433  0024BA                     
  3434                           ;usart.c: 214:     return(&newSequenceData);
  3435  0024BA  0EEF               	movlw	low _newSequenceData
  3436  0024BC  6E12               	movwf	?_getNewSequence^0,c
  3437  0024BE  0E00               	movlw	high _newSequenceData
  3438  0024C0  6E13               	movwf	(?_getNewSequence+1)^0,c
  3439  0024C2  0012               	return		;funcret
  3440  0024C4  FFFF               	dw	65535	; errata NOP
  3441  0024C6                     __end_of_getNewSequence:
  3442                           	callstack 0
  3443                           
  3444 ;; *************** function _fatalError *****************
  3445 ;; Defined at:
  3446 ;;		line 100 in file "usart.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;		None
  3449 ;; Auto vars:     Size  Location     Type
  3450 ;;		None
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  1    wreg      unsigned char 
  3453 ;; Registers used:
  3454 ;;		wreg, status,2
  3455 ;; Tracked objects:
  3456 ;;		On entry : 0/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3460 ;;      Params:         0       0       0       0       0       0       0
  3461 ;;      Locals:         0       0       0       0       0       0       0
  3462 ;;      Temps:          0       0       0       0       0       0       0
  3463 ;;      Totals:         0       0       0       0       0       0       0
  3464 ;;Total ram usage:        0 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; Hardware stack levels required when called:    4
  3467 ;; This function calls:
  3468 ;;		Nothing
  3469 ;; This function is called by:
  3470 ;;		_main
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           	psect	text20
  3475  00258A                     __ptext20:
  3476                           	callstack 0
  3477  00258A                     _fatalError:
  3478                           	callstack 0
  3479  00258A  FFFF               	dw	65535	; assembler added errata NOP
  3480  00258C                     
  3481                           ;usart.c: 101:     return _fatalError;
  3482  00258C  5060               	movf	__fatalError^0,w,c
  3483  00258E  0012               	return		;funcret
  3484  002590  FFFF               	dw	65535	; errata NOP
  3485  002592                     __end_of_fatalError:
  3486                           	callstack 0
  3487                           
  3488 ;; *************** function _executeData *****************
  3489 ;; Defined at:
  3490 ;;		line 127 in file "main.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;		None
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;  data            2    1[BANK1 ] PTR struct .
  3495 ;;		 -> dataSequence(20), 
  3496 ;;  errCode         1    0[BANK1 ] unsigned char 
  3497 ;; Return value:  Size  Location     Type
  3498 ;;                  1    wreg      unsigned char 
  3499 ;; Registers used:
  3500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3506 ;;      Params:         0       0       0       0       0       0       0
  3507 ;;      Locals:         0       0       3       0       0       0       0
  3508 ;;      Temps:          2       0       0       0       0       0       0
  3509 ;;      Totals:         2       0       3       0       0       0       0
  3510 ;;Total ram usage:        5 bytes
  3511 ;; Hardware stack levels used:    1
  3512 ;; Hardware stack levels required when called:    6
  3513 ;; This function calls:
  3514 ;;		_getData
  3515 ;;		_liftArm
  3516 ;;		_moveToPoint
  3517 ;;		_pickObject
  3518 ;;		_releaseObj
  3519 ;;		_rotateObj
  3520 ;;		_touchObject
  3521 ;;		_touchTherm
  3522 ;; This function is called by:
  3523 ;;		_main
  3524 ;; This function uses a non-reentrant model
  3525 ;;
  3526                           
  3527                           	psect	text21
  3528  000D04                     __ptext21:
  3529                           	callstack 0
  3530  000D04                     _executeData:
  3531                           	callstack 0
  3532  000D04  FFFF               	dw	65535	; assembler added errata NOP
  3533  000D06                     
  3534                           ;main.c: 128:     t_sequence *data = getData();
  3535  000D06  EC63  F012         	call	_getData	;wreg free
  3536  000D0A  C012  F1D7         	movff	?_getData,executeData@data
  3537  000D0E  C013  F1D8         	movff	?_getData+1,executeData@data+1
  3538  000D12                     
  3539                           ;main.c: 134:     switch(data->feederLine){
  3540  000D12  EF35  F007         	goto	l4172
  3541  000D16                     l4144:
  3542  000D16  FFFF               	dw	65535	; assembler added errata NOP
  3543                           
  3544                           ;main.c: 137:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3545  000D18  C04E  F016         	movff	_posVector,moveToPoint@x1
  3546  000D1C  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3547  000D1E  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3548  000D22  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3549  000D24  0E0D               	movlw	low _feeder1Pos
  3550  000D26  6EF6               	movwf	tblptrl,c
  3551  000D28                     	if	1	;There is more than 1 active tblptr byte
  3552  000D28  0E06               	movlw	high _feeder1Pos
  3553  000D2A  6EF7               	movwf	tblptrh,c
  3554  000D2C                     	endif
  3555  000D2C                     	if	0	;There are less than 3 active tblptr bytes
  3556  000D2C                     	endif
  3557  000D2C  0008               	tblrd		*
  3558  000D2E  FFFF               	dw	65535	; errata NOP
  3559  000D30  50F5               	movf	tablat,w,c
  3560  000D32  6E1A               	movwf	moveToPoint@x2^0,c
  3561  000D34  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3562  000D36  0E0E               	movlw	low (_feeder1Pos+1)
  3563  000D38  6EF6               	movwf	tblptrl,c
  3564  000D3A  0E06               	movlw	high (_feeder1Pos+1)
  3565  000D3C  6EF7               	movwf	tblptrh,c
  3566  000D3E                     	if	0	;tblptru may be non-zero
  3567  000D3E                     	endif
  3568  000D3E                     	if	0	;tblptru may be non-zero
  3569  000D3E                     	endif
  3570  000D3E  0008               	tblrd		*
  3571  000D40  FFFF               	dw	65535	; errata NOP
  3572  000D42  50F5               	movf	tablat,w,c
  3573  000D44  6E1C               	movwf	moveToPoint@y2^0,c
  3574  000D46  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3575  000D48  EC21  F005         	call	_moveToPoint	;wreg free
  3576  000D4C  0101               	movlb	1	; () banked
  3577  000D4E  6FD6               	movwf	executeData@errCode& (0+255),b
  3578  000D50                     
  3579                           ; BSR set to: 1
  3580                           ;main.c: 139:             posVector[0] = feeder1Pos[0];
  3581  000D50  0E0D               	movlw	low _feeder1Pos
  3582  000D52  6EF6               	movwf	tblptrl,c
  3583  000D54                     	if	1	;There is more than 1 active tblptr byte
  3584  000D54  0E06               	movlw	high _feeder1Pos
  3585  000D56  6EF7               	movwf	tblptrh,c
  3586  000D58                     	endif
  3587  000D58                     	if	0	;There are less than 3 active tblptr bytes
  3588  000D58                     	endif
  3589  000D58  0008               	tblrd		*
  3590  000D5A  FFFF               	dw	65535	; errata NOP
  3591  000D5C  CFF5 F04E          	movff	tablat,_posVector
  3592  000D60                     
  3593                           ; BSR set to: 1
  3594                           ;main.c: 140:             posVector[1] = feeder1Pos[1];
  3595  000D60  0E0E               	movlw	low (_feeder1Pos+1)
  3596  000D62  6EF6               	movwf	tblptrl,c
  3597  000D64  0E06               	movlw	high (_feeder1Pos+1)
  3598  000D66  6EF7               	movwf	tblptrh,c
  3599  000D68                     	if	0	;tblptru may be non-zero
  3600  000D68                     	endif
  3601  000D68                     	if	0	;tblptru may be non-zero
  3602  000D68                     	endif
  3603  000D68  0008               	tblrd		*
  3604  000D6A  FFFF               	dw	65535	; errata NOP
  3605  000D6C  CFF5 F04F          	movff	tablat,_posVector+1
  3606                           
  3607                           ;main.c: 141:             break;
  3608  000D70  EF58  F007         	goto	l4174
  3609  000D74                     l4150:
  3610  000D74  FFFF               	dw	65535	; assembler added errata NOP
  3611                           
  3612                           ;main.c: 143:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3613  000D76  C04E  F016         	movff	_posVector,moveToPoint@x1
  3614  000D7A  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3615  000D7C  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3616  000D80  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3617  000D82  0E0B               	movlw	low _feeder2Pos
  3618  000D84  6EF6               	movwf	tblptrl,c
  3619  000D86                     	if	1	;There is more than 1 active tblptr byte
  3620  000D86  0E06               	movlw	high _feeder2Pos
  3621  000D88  6EF7               	movwf	tblptrh,c
  3622  000D8A                     	endif
  3623  000D8A                     	if	0	;There are less than 3 active tblptr bytes
  3624  000D8A                     	endif
  3625  000D8A  0008               	tblrd		*
  3626  000D8C  FFFF               	dw	65535	; errata NOP
  3627  000D8E  50F5               	movf	tablat,w,c
  3628  000D90  6E1A               	movwf	moveToPoint@x2^0,c
  3629  000D92  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3630  000D94  0E0C               	movlw	low (_feeder2Pos+1)
  3631  000D96  6EF6               	movwf	tblptrl,c
  3632  000D98  0E06               	movlw	high (_feeder2Pos+1)
  3633  000D9A  6EF7               	movwf	tblptrh,c
  3634  000D9C                     	if	0	;tblptru may be non-zero
  3635  000D9C                     	endif
  3636  000D9C                     	if	0	;tblptru may be non-zero
  3637  000D9C                     	endif
  3638  000D9C  0008               	tblrd		*
  3639  000D9E  FFFF               	dw	65535	; errata NOP
  3640  000DA0  50F5               	movf	tablat,w,c
  3641  000DA2  6E1C               	movwf	moveToPoint@y2^0,c
  3642  000DA4  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3643  000DA6  EC21  F005         	call	_moveToPoint	;wreg free
  3644  000DAA  0101               	movlb	1	; () banked
  3645  000DAC  6FD6               	movwf	executeData@errCode& (0+255),b
  3646  000DAE                     
  3647                           ; BSR set to: 1
  3648                           ;main.c: 144:             posVector[0] = feeder2Pos[0];
  3649  000DAE  0E0B               	movlw	low _feeder2Pos
  3650  000DB0  6EF6               	movwf	tblptrl,c
  3651  000DB2                     	if	1	;There is more than 1 active tblptr byte
  3652  000DB2  0E06               	movlw	high _feeder2Pos
  3653  000DB4  6EF7               	movwf	tblptrh,c
  3654  000DB6                     	endif
  3655  000DB6                     	if	0	;There are less than 3 active tblptr bytes
  3656  000DB6                     	endif
  3657  000DB6  0008               	tblrd		*
  3658  000DB8  FFFF               	dw	65535	; errata NOP
  3659  000DBA  CFF5 F04E          	movff	tablat,_posVector
  3660  000DBE                     
  3661                           ; BSR set to: 1
  3662                           ;main.c: 145:             posVector[1] = feeder2Pos[1];
  3663  000DBE  0E0C               	movlw	low (_feeder2Pos+1)
  3664  000DC0  6EF6               	movwf	tblptrl,c
  3665  000DC2  0E06               	movlw	high (_feeder2Pos+1)
  3666  000DC4  6EF7               	movwf	tblptrh,c
  3667  000DC6                     	if	0	;tblptru may be non-zero
  3668  000DC6                     	endif
  3669  000DC6                     	if	0	;tblptru may be non-zero
  3670  000DC6                     	endif
  3671  000DC6  0008               	tblrd		*
  3672  000DC8  FFFF               	dw	65535	; errata NOP
  3673  000DCA  CFF5 F04F          	movff	tablat,_posVector+1
  3674                           
  3675                           ;main.c: 146:             break;
  3676  000DCE  EF58  F007         	goto	l4174
  3677  000DD2                     l4156:
  3678  000DD2  FFFF               	dw	65535	; assembler added errata NOP
  3679                           
  3680                           ;main.c: 148:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3681  000DD4  C04E  F016         	movff	_posVector,moveToPoint@x1
  3682  000DD8  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3683  000DDA  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3684  000DDE  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3685  000DE0  0E09               	movlw	low _feeder3Pos
  3686  000DE2  6EF6               	movwf	tblptrl,c
  3687  000DE4                     	if	1	;There is more than 1 active tblptr byte
  3688  000DE4  0E06               	movlw	high _feeder3Pos
  3689  000DE6  6EF7               	movwf	tblptrh,c
  3690  000DE8                     	endif
  3691  000DE8                     	if	0	;There are less than 3 active tblptr bytes
  3692  000DE8                     	endif
  3693  000DE8  0008               	tblrd		*
  3694  000DEA  FFFF               	dw	65535	; errata NOP
  3695  000DEC  50F5               	movf	tablat,w,c
  3696  000DEE  6E1A               	movwf	moveToPoint@x2^0,c
  3697  000DF0  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3698  000DF2  0E0A               	movlw	low (_feeder3Pos+1)
  3699  000DF4  6EF6               	movwf	tblptrl,c
  3700  000DF6  0E06               	movlw	high (_feeder3Pos+1)
  3701  000DF8  6EF7               	movwf	tblptrh,c
  3702  000DFA                     	if	0	;tblptru may be non-zero
  3703  000DFA                     	endif
  3704  000DFA                     	if	0	;tblptru may be non-zero
  3705  000DFA                     	endif
  3706  000DFA  0008               	tblrd		*
  3707  000DFC  FFFF               	dw	65535	; errata NOP
  3708  000DFE  50F5               	movf	tablat,w,c
  3709  000E00  6E1C               	movwf	moveToPoint@y2^0,c
  3710  000E02  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3711  000E04  EC21  F005         	call	_moveToPoint	;wreg free
  3712  000E08  0101               	movlb	1	; () banked
  3713  000E0A  6FD6               	movwf	executeData@errCode& (0+255),b
  3714  000E0C                     
  3715                           ; BSR set to: 1
  3716                           ;main.c: 149:             posVector[0] = feeder3Pos[0];
  3717  000E0C  0E09               	movlw	low _feeder3Pos
  3718  000E0E  6EF6               	movwf	tblptrl,c
  3719  000E10                     	if	1	;There is more than 1 active tblptr byte
  3720  000E10  0E06               	movlw	high _feeder3Pos
  3721  000E12  6EF7               	movwf	tblptrh,c
  3722  000E14                     	endif
  3723  000E14                     	if	0	;There are less than 3 active tblptr bytes
  3724  000E14                     	endif
  3725  000E14  0008               	tblrd		*
  3726  000E16  FFFF               	dw	65535	; errata NOP
  3727  000E18  CFF5 F04E          	movff	tablat,_posVector
  3728  000E1C                     
  3729                           ; BSR set to: 1
  3730                           ;main.c: 150:             posVector[1] = feeder3Pos[1];
  3731  000E1C  0E0A               	movlw	low (_feeder3Pos+1)
  3732  000E1E  6EF6               	movwf	tblptrl,c
  3733  000E20  0E06               	movlw	high (_feeder3Pos+1)
  3734  000E22  6EF7               	movwf	tblptrh,c
  3735  000E24                     	if	0	;tblptru may be non-zero
  3736  000E24                     	endif
  3737  000E24                     	if	0	;tblptru may be non-zero
  3738  000E24                     	endif
  3739  000E24  0008               	tblrd		*
  3740  000E26  FFFF               	dw	65535	; errata NOP
  3741  000E28  CFF5 F04F          	movff	tablat,_posVector+1
  3742                           
  3743                           ;main.c: 151:             break;
  3744  000E2C  EF58  F007         	goto	l4174
  3745  000E30                     l4162:
  3746  000E30  FFFF               	dw	65535	; assembler added errata NOP
  3747                           
  3748                           ;main.c: 155:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3749  000E32  C04E  F016         	movff	_posVector,moveToPoint@x1
  3750  000E36  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3751  000E38  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3752  000E3C  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3753  000E3E  C057  F01A         	movff	_newFeeder,moveToPoint@x2
  3754  000E42  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3755  000E44  C058  F01C         	movff	_newFeeder+1,moveToPoint@y2
  3756  000E48  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3757  000E4A  EC21  F005         	call	_moveToPoint	;wreg free
  3758  000E4E  0101               	movlb	1	; () banked
  3759  000E50  6FD6               	movwf	executeData@errCode& (0+255),b
  3760  000E52                     
  3761                           ; BSR set to: 1
  3762                           ;main.c: 156:             posVector[0] = newFeeder[0];
  3763  000E52  C057  F04E         	movff	_newFeeder,_posVector
  3764  000E56                     
  3765                           ; BSR set to: 1
  3766                           ;main.c: 157:             posVector[1] = newFeeder[1];
  3767  000E56  C058  F04F         	movff	_newFeeder+1,_posVector+1
  3768                           
  3769                           ;main.c: 158:             break;
  3770  000E5A  EF58  F007         	goto	l4174
  3771  000E5E                     l4168:
  3772  000E5E  FFFF               	dw	65535	; assembler added errata NOP
  3773                           
  3774                           ;main.c: 162:             errCode = 1;
  3775  000E60  0E01               	movlw	1
  3776  000E62  0101               	movlb	1	; () banked
  3777  000E64  6FD6               	movwf	executeData@errCode& (0+255),b
  3778                           
  3779                           ;main.c: 163:             break;
  3780  000E66  EF58  F007         	goto	l4174
  3781  000E6A                     l4172:
  3782  000E6A  FFFF               	dw	65535	; assembler added errata NOP
  3783  000E6C  C1D7  FFD9         	movff	executeData@data,fsr2l
  3784  000E70  C1D8  FFDA         	movff	executeData@data+1,fsr2h
  3785  000E74  50DF               	movf	indf2,w,c
  3786  000E76  6E43               	movwf	??_executeData^0,c
  3787  000E78  6A44               	clrf	(??_executeData+1)^0,c
  3788                           
  3789                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3790                           ; Switch size 1, requested type "simple"
  3791                           ; Number of cases is 1, Range of values is 0 to 0
  3792                           ; switch strategies available:
  3793                           ; Name         Instructions Cycles
  3794                           ; simple_byte            4     3 (average)
  3795                           ;	Chosen strategy is simple_byte
  3796  000E7A  5044               	movf	(??_executeData+1)^0,w,c
  3797  000E7C  0A00               	xorlw	0	; case 0
  3798  000E7E  B4D8               	btfsc	status,2,c
  3799  000E80  EF44  F007         	goto	l4512
  3800  000E84  EF2F  F007         	goto	l4168
  3801  000E88                     l4512:
  3802  000E88  FFFF               	dw	65535	; assembler added errata NOP
  3803                           
  3804                           ; Switch size 1, requested type "simple"
  3805                           ; Number of cases is 4, Range of values is 0 to 255
  3806                           ; switch strategies available:
  3807                           ; Name         Instructions Cycles
  3808                           ; simple_byte           13     7 (average)
  3809                           ;	Chosen strategy is simple_byte
  3810  000E8A  5043               	movf	??_executeData^0,w,c
  3811  000E8C  0A00               	xorlw	0	; case 0
  3812  000E8E  B4D8               	btfsc	status,2,c
  3813  000E90  EF8B  F006         	goto	l4144
  3814  000E94  0A01               	xorlw	1	; case 1
  3815  000E96  B4D8               	btfsc	status,2,c
  3816  000E98  EFBA  F006         	goto	l4150
  3817  000E9C  0A03               	xorlw	3	; case 2
  3818  000E9E  B4D8               	btfsc	status,2,c
  3819  000EA0  EFE9  F006         	goto	l4156
  3820  000EA4  0AFD               	xorlw	253	; case 255
  3821  000EA6  B4D8               	btfsc	status,2,c
  3822  000EA8  EF18  F007         	goto	l4162
  3823  000EAC  EF2F  F007         	goto	l4168
  3824  000EB0                     l4174:
  3825  000EB0  FFFF               	dw	65535	; assembler added errata NOP
  3826                           
  3827                           ; BSR set to: 1
  3828                           ;main.c: 167:     if(!errCode){
  3829  000EB2  51D6               	movf	executeData@errCode& (0+255),w,b
  3830  000EB4  A4D8               	btfss	status,2,c
  3831  000EB6  EF5F  F007         	goto	u3501
  3832  000EBA  EF62  F007         	goto	u3500
  3833  000EBE                     u3501:
  3834  000EBE  FFFF               	dw	65535	; assembler added errata NOP
  3835  000EC0  EFC5  F007         	goto	l4196
  3836  000EC4                     u3500:
  3837  000EC4  FFFF               	dw	65535	; assembler added errata NOP
  3838  000EC6                     
  3839                           ; BSR set to: 1
  3840                           ;main.c: 170:         errCode = touchObject();
  3841  000EC6  EC0F  F00E         	call	_touchObject	;wreg free
  3842  000ECA  0101               	movlb	1	; () banked
  3843  000ECC  6FD6               	movwf	executeData@errCode& (0+255),b
  3844                           
  3845                           ;main.c: 172:         pickObject();
  3846  000ECE  ECF4  F011         	call	_pickObject	;wreg free
  3847                           
  3848                           ;main.c: 175:         errCode = liftArm();
  3849  000ED2  ECCC  F00F         	call	_liftArm	;wreg free
  3850  000ED6  0101               	movlb	1	; () banked
  3851  000ED8  6FD6               	movwf	executeData@errCode& (0+255),b
  3852  000EDA                     
  3853                           ; BSR set to: 1
  3854  000EDA  C04E  F016         	movff	_posVector,moveToPoint@x1
  3855  000EDE  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3856  000EE0  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3857  000EE4  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3858  000EE6  EE20 F001          	lfsr	2,1
  3859  000EEA  51D7               	movf	executeData@data& (0+255),w,b
  3860  000EEC  26D9               	addwf	fsr2l,f,c
  3861  000EEE  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3862  000EF0  22DA               	addwfc	fsr2h,f,c
  3863  000EF2  50DF               	movf	indf2,w,c
  3864  000EF4  6E43               	movwf	??_executeData^0,c
  3865  000EF6  5043               	movf	??_executeData^0,w,c
  3866  000EF8  6E1A               	movwf	moveToPoint@x2^0,c
  3867  000EFA  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3868  000EFC  EE20 F002          	lfsr	2,2
  3869  000F00  51D7               	movf	executeData@data& (0+255),w,b
  3870  000F02  26D9               	addwf	fsr2l,f,c
  3871  000F04  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3872  000F06  22DA               	addwfc	fsr2h,f,c
  3873  000F08  50DF               	movf	indf2,w,c
  3874  000F0A  6E44               	movwf	(??_executeData+1)^0,c
  3875  000F0C  5044               	movf	(??_executeData+1)^0,w,c
  3876  000F0E  6E1C               	movwf	moveToPoint@y2^0,c
  3877  000F10  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3878  000F12  EC21  F005         	call	_moveToPoint	;wreg free
  3879  000F16                     
  3880                           ;main.c: 179:         posVector[0] = data->posX;
  3881  000F16  0101               	movlb	1	; () banked
  3882  000F18  EE20 F001          	lfsr	2,1
  3883  000F1C  51D7               	movf	executeData@data& (0+255),w,b
  3884  000F1E  26D9               	addwf	fsr2l,f,c
  3885  000F20  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3886  000F22  22DA               	addwfc	fsr2h,f,c
  3887  000F24  50DF               	movf	indf2,w,c
  3888  000F26  6E4E               	movwf	_posVector^0,c
  3889  000F28                     
  3890                           ; BSR set to: 1
  3891                           ;main.c: 180:         posVector[1] = data->posY;
  3892  000F28  EE20 F002          	lfsr	2,2
  3893  000F2C  51D7               	movf	executeData@data& (0+255),w,b
  3894  000F2E  26D9               	addwf	fsr2l,f,c
  3895  000F30  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3896  000F32  22DA               	addwfc	fsr2h,f,c
  3897  000F34  50DF               	movf	indf2,w,c
  3898  000F36  6E4F               	movwf	(_posVector+1)^0,c
  3899  000F38                     
  3900                           ; BSR set to: 1
  3901                           ;main.c: 183:         rotAngle = data->rotation - rotAngle;
  3902  000F38  EE20 F003          	lfsr	2,3
  3903  000F3C  51D7               	movf	executeData@data& (0+255),w,b
  3904  000F3E  26D9               	addwf	fsr2l,f,c
  3905  000F40  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3906  000F42  22DA               	addwfc	fsr2h,f,c
  3907  000F44  50DF               	movf	indf2,w,c
  3908  000F46  6E43               	movwf	??_executeData^0,c
  3909  000F48  5059               	movf	_rotAngle^0,w,c
  3910  000F4A  5C43               	subwf	??_executeData^0,w,c
  3911  000F4C  6E59               	movwf	_rotAngle^0,c
  3912  000F4E  505A               	movf	(_rotAngle+1)^0,w,c
  3913  000F50  A0D8               	btfss	status,0,c
  3914  000F52  285A               	incf	(_rotAngle+1)^0,w,c
  3915  000F54  6A5A               	clrf	(_rotAngle+1)^0,c
  3916  000F56  5E5A               	subwf	(_rotAngle+1)^0,f,c
  3917                           
  3918                           ;main.c: 185:         if(rotAngle < 0){
  3919  000F58  BE5A               	btfsc	(_rotAngle+1)^0,7,c
  3920  000F5A  EFB4  F007         	goto	u3510
  3921  000F5E  EFB1  F007         	goto	u3511
  3922  000F62                     u3511:
  3923  000F62  FFFF               	dw	65535	; assembler added errata NOP
  3924  000F64  EFB9  F007         	goto	l4188
  3925  000F68                     u3510:
  3926  000F68  FFFF               	dw	65535	; assembler added errata NOP
  3927  000F6A                     
  3928                           ; BSR set to: 1
  3929                           ;main.c: 186:             rotAngle += 360;
  3930  000F6A  0E68               	movlw	104
  3931  000F6C  2659               	addwf	_rotAngle^0,f,c
  3932  000F6E  0E01               	movlw	1
  3933  000F70  225A               	addwfc	(_rotAngle+1)^0,f,c
  3934  000F72                     l4188:
  3935  000F72  FFFF               	dw	65535	; assembler added errata NOP
  3936                           
  3937                           ; BSR set to: 1
  3938                           ;main.c: 188:         rotateObj(rotAngle);
  3939  000F74  5059               	movf	_rotAngle^0,w,c
  3940  000F76  EC88  F00E         	call	_rotateObj
  3941  000F7A  EC96  F00D         	call	_touchTherm	;wreg free
  3942  000F7E                     
  3943                           ;main.c: 193:         releaseObj();
  3944  000F7E  ECDE  F011         	call	_releaseObj	;wreg free
  3945  000F82                     
  3946                           ;main.c: 196:         errCode = liftArm();
  3947  000F82  ECCC  F00F         	call	_liftArm	;wreg free
  3948  000F86  0101               	movlb	1	; () banked
  3949  000F88  6FD6               	movwf	executeData@errCode& (0+255),b
  3950  000F8A                     l4196:
  3951  000F8A  FFFF               	dw	65535	; assembler added errata NOP
  3952                           
  3953                           ; BSR set to: 1
  3954                           ;main.c: 199:     return(errCode);
  3955  000F8C  51D6               	movf	executeData@errCode& (0+255),w,b
  3956  000F8E                     
  3957                           ; BSR set to: 1
  3958  000F8E  0012               	return		;funcret
  3959  000F90  FFFF               	dw	65535	; errata NOP
  3960  000F92                     __end_of_executeData:
  3961                           	callstack 0
  3962                           
  3963 ;; *************** function _touchTherm *****************
  3964 ;; Defined at:
  3965 ;;		line 455 in file "motors.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;		None
  3968 ;; Auto vars:     Size  Location     Type
  3969 ;;		None
  3970 ;; Return value:  Size  Location     Type
  3971 ;;                  1    wreg      unsigned char 
  3972 ;; Registers used:
  3973 ;;		wreg, status,2, status,0, cstack
  3974 ;; Tracked objects:
  3975 ;;		On entry : 0/0
  3976 ;;		On exit  : 0/0
  3977 ;;		Unchanged: 0/0
  3978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3979 ;;      Params:         0       0       0       0       0       0       0
  3980 ;;      Locals:         0       0       0       0       0       0       0
  3981 ;;      Temps:          0       0       0       0       0       0       0
  3982 ;;      Totals:         0       0       0       0       0       0       0
  3983 ;;Total ram usage:        0 bytes
  3984 ;; Hardware stack levels used:    1
  3985 ;; Hardware stack levels required when called:    5
  3986 ;; This function calls:
  3987 ;;		_resetStep
  3988 ;;		_resetTherm
  3989 ;;		_returnTherm
  3990 ;;		_setDirection
  3991 ;;		_startADC
  3992 ;;		_stepMade
  3993 ;;		_stopADC
  3994 ;; This function is called by:
  3995 ;;		_executeData
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           	psect	text22
  4000  001B2C                     __ptext22:
  4001                           	callstack 0
  4002  001B2C                     _touchTherm:
  4003                           	callstack 0
  4004  001B2C  FFFF               	dw	65535	; assembler added errata NOP
  4005  001B2E                     
  4006                           ;motors.c: 458:     setDirection(1, 2);
  4007  001B2E  0E02               	movlw	2
  4008  001B30  6E12               	movwf	setDirection@motor^0,c
  4009  001B32  0E01               	movlw	1
  4010  001B34  ECDB  F010         	call	_setDirection
  4011  001B38                     
  4012                           ;motors.c: 460:     T2CONbits.TMR2ON = 1;
  4013  001B38  84CA               	bsf	202,2,c	;volatile
  4014  001B3A                     
  4015                           ;motors.c: 462:     tm0Error = 0;
  4016  001B3A  0E00               	movlw	0
  4017  001B3C  6E5C               	movwf	(_tm0Error+1)^0,c
  4018  001B3E  0E00               	movlw	0
  4019  001B40  6E5B               	movwf	_tm0Error^0,c
  4020  001B42                     
  4021                           ;motors.c: 463:     tm0Limit = 100;
  4022  001B42  0E64               	movlw	100
  4023  001B44  6E68               	movwf	_tm0Limit^0,c
  4024  001B46                     
  4025                           ;motors.c: 464:     T0CONbits.TMR0ON = 1;
  4026  001B46  8ED5               	bsf	213,7,c	;volatile
  4027  001B48                     
  4028                           ;motors.c: 467:     startADC();
  4029  001B48  EC9B  F012         	call	_startADC	;wreg free
  4030                           
  4031                           ;motors.c: 470:     while(!returnTherm() || PORTDbits.RD7){
  4032  001B4C  EFD9  F00D         	goto	l3868
  4033  001B50                     l3858:
  4034  001B50  FFFF               	dw	65535	; assembler added errata NOP
  4035                           
  4036                           ;motors.c: 473:         if(tm0Error){
  4037  001B52  505B               	movf	_tm0Error^0,w,c
  4038  001B54  105C               	iorwf	(_tm0Error+1)^0,w,c
  4039  001B56  B4D8               	btfsc	status,2,c
  4040  001B58  EFB0  F00D         	goto	u3211
  4041  001B5C  EFB3  F00D         	goto	u3210
  4042  001B60                     u3211:
  4043  001B60  FFFF               	dw	65535	; assembler added errata NOP
  4044  001B62  EFBB  F00D         	goto	l188
  4045  001B66                     u3210:
  4046  001B66  FFFF               	dw	65535	; assembler added errata NOP
  4047  001B68                     
  4048                           ;motors.c: 475:             LATCbits.LATC2 = 0;
  4049  001B68  948B               	bcf	139,2,c	;volatile
  4050  001B6A                     
  4051                           ;motors.c: 476:             tm0Error = 6;
  4052  001B6A  0E00               	movlw	0
  4053  001B6C  6E5C               	movwf	(_tm0Error+1)^0,c
  4054  001B6E  0E06               	movlw	6
  4055  001B70  6E5B               	movwf	_tm0Error^0,c
  4056                           
  4057                           ;motors.c: 477:             break;
  4058  001B72  EFEF  F00D         	goto	l3872
  4059  001B76                     l188:
  4060  001B76  FFFF               	dw	65535	; assembler added errata NOP
  4061                           
  4062                           ;motors.c: 481:         LATCbits.LATC2 = 1;
  4063  001B78  848B               	bsf	139,2,c	;volatile
  4064  001B7A                     l3864:
  4065  001B7A  FFFF               	dw	65535	; assembler added errata NOP
  4066  001B7C  EC49  F012         	call	_stepMade	;wreg free
  4067  001B80  5012               	movf	?_stepMade^0,w,c
  4068  001B82  1013               	iorwf	(?_stepMade+1)^0,w,c
  4069  001B84  B4D8               	btfsc	status,2,c
  4070  001B86  EFC7  F00D         	goto	u3221
  4071  001B8A  EFCA  F00D         	goto	u3220
  4072  001B8E                     u3221:
  4073  001B8E  FFFF               	dw	65535	; assembler added errata NOP
  4074  001B90  EFBD  F00D         	goto	l3864
  4075  001B94                     u3220:
  4076  001B94  FFFF               	dw	65535	; assembler added errata NOP
  4077  001B96                     
  4078                           ;motors.c: 487:         LATCbits.LATC2 = 0;
  4079  001B96  948B               	bcf	139,2,c	;volatile
  4080  001B98                     l3866:
  4081  001B98  FFFF               	dw	65535	; assembler added errata NOP
  4082  001B9A  EC49  F012         	call	_stepMade	;wreg free
  4083  001B9E  5012               	movf	?_stepMade^0,w,c
  4084  001BA0  1013               	iorwf	(?_stepMade+1)^0,w,c
  4085  001BA2  B4D8               	btfsc	status,2,c
  4086  001BA4  EFD6  F00D         	goto	u3231
  4087  001BA8  EFD9  F00D         	goto	u3230
  4088  001BAC                     u3231:
  4089  001BAC  FFFF               	dw	65535	; assembler added errata NOP
  4090  001BAE  EFCC  F00D         	goto	l3866
  4091  001BB2                     u3230:
  4092  001BB2                     l3868:
  4093  001BB2  FFFF               	dw	65535	; assembler added errata NOP
  4094                           
  4095                           ;motors.c: 470:     while(!returnTherm() || PORTDbits.RD7){
  4096  001BB4  EC7F  F012         	call	_returnTherm	;wreg free
  4097  001BB8  5012               	movf	?_returnTherm^0,w,c
  4098  001BBA  1013               	iorwf	(?_returnTherm+1)^0,w,c
  4099  001BBC  B4D8               	btfsc	status,2,c
  4100  001BBE  EFE3  F00D         	goto	u3241
  4101  001BC2  EFE6  F00D         	goto	u3240
  4102  001BC6                     u3241:
  4103  001BC6  FFFF               	dw	65535	; assembler added errata NOP
  4104  001BC8  EFA8  F00D         	goto	l3858
  4105  001BCC                     u3240:
  4106  001BCC  FFFF               	dw	65535	; assembler added errata NOP
  4107  001BCE  BE83               	btfsc	131,7,c	;volatile
  4108  001BD0  EFEC  F00D         	goto	u3251
  4109  001BD4  EFEF  F00D         	goto	u3250
  4110  001BD8                     u3251:
  4111  001BD8  FFFF               	dw	65535	; assembler added errata NOP
  4112  001BDA  EFA8  F00D         	goto	l3858
  4113  001BDE                     u3250:
  4114  001BDE                     l3872:
  4115  001BDE  FFFF               	dw	65535	; assembler added errata NOP
  4116                           
  4117                           ;motors.c: 494:     stopADC();
  4118  001BE0  ECC9  F012         	call	_stopADC	;wreg free
  4119  001BE4                     
  4120                           ;motors.c: 497:     resetTherm();
  4121  001BE4  EC96  F012         	call	_resetTherm	;wreg free
  4122  001BE8                     
  4123                           ;motors.c: 500:     T0CONbits.TMR0ON = 0;
  4124  001BE8  9ED5               	bcf	213,7,c	;volatile
  4125  001BEA                     
  4126                           ;motors.c: 501:     T2CONbits.TMR2ON = 0;
  4127  001BEA  94CA               	bcf	202,2,c	;volatile
  4128                           
  4129                           ;motors.c: 503:     TMR0 = 0;
  4130  001BEC  0E00               	movlw	0
  4131  001BEE  6ED7               	movwf	215,c	;volatile
  4132  001BF0  0E00               	movlw	0
  4133  001BF2  6ED6               	movwf	214,c	;volatile
  4134                           
  4135                           ;motors.c: 504:     TMR2 = 0;
  4136  001BF4  0E00               	movlw	0
  4137  001BF6  6ECC               	movwf	204,c	;volatile
  4138  001BF8                     
  4139                           ;motors.c: 507:     resetStep();
  4140  001BF8  ECA5  F012         	call	_resetStep	;wreg free
  4141  001BFC                     
  4142                           ;motors.c: 510:     if(PORTDbits.RD7){
  4143  001BFC  AE83               	btfss	131,7,c	;volatile
  4144  001BFE  EF03  F00E         	goto	u3261
  4145  001C02  EF06  F00E         	goto	u3260
  4146  001C06                     u3261:
  4147  001C06  FFFF               	dw	65535	; assembler added errata NOP
  4148  001C08  EF0B  F00E         	goto	l196
  4149  001C0C                     u3260:
  4150  001C0C  FFFF               	dw	65535	; assembler added errata NOP
  4151  001C0E                     
  4152                           ;motors.c: 511:         tm0Error = 2;
  4153  001C0E  0E00               	movlw	0
  4154  001C10  6E5C               	movwf	(_tm0Error+1)^0,c
  4155  001C12  0E02               	movlw	2
  4156  001C14  6E5B               	movwf	_tm0Error^0,c
  4157  001C16                     l196:
  4158  001C16  FFFF               	dw	65535	; assembler added errata NOP
  4159                           
  4160                           ;motors.c: 514:     return(tm0Error);
  4161  001C18  505B               	movf	_tm0Error^0,w,c
  4162  001C1A  0012               	return		;funcret
  4163  001C1C  FFFF               	dw	65535	; errata NOP
  4164  001C1E                     __end_of_touchTherm:
  4165                           	callstack 0
  4166                           
  4167 ;; *************** function _returnTherm *****************
  4168 ;; Defined at:
  4169 ;;		line 58 in file "adc.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;		None
  4172 ;; Auto vars:     Size  Location     Type
  4173 ;;		None
  4174 ;; Return value:  Size  Location     Type
  4175 ;;                  2   17[COMRAM] unsigned int 
  4176 ;; Registers used:
  4177 ;;		None
  4178 ;; Tracked objects:
  4179 ;;		On entry : 0/0
  4180 ;;		On exit  : 0/0
  4181 ;;		Unchanged: 0/0
  4182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4183 ;;      Params:         2       0       0       0       0       0       0
  4184 ;;      Locals:         0       0       0       0       0       0       0
  4185 ;;      Temps:          0       0       0       0       0       0       0
  4186 ;;      Totals:         2       0       0       0       0       0       0
  4187 ;;Total ram usage:        2 bytes
  4188 ;; Hardware stack levels used:    1
  4189 ;; Hardware stack levels required when called:    4
  4190 ;; This function calls:
  4191 ;;		Nothing
  4192 ;; This function is called by:
  4193 ;;		_touchTherm
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           	psect	text23
  4198  0024FE                     __ptext23:
  4199                           	callstack 0
  4200  0024FE                     _returnTherm:
  4201                           	callstack 0
  4202  0024FE  FFFF               	dw	65535	; assembler added errata NOP
  4203  002500                     
  4204                           ;adc.c: 59:     return therm_rel;
  4205  002500  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4206  002504  6A13               	clrf	(?_returnTherm+1)^0,c
  4207  002506  0012               	return		;funcret
  4208  002508  FFFF               	dw	65535	; errata NOP
  4209  00250A                     __end_of_returnTherm:
  4210                           	callstack 0
  4211                           
  4212 ;; *************** function _resetTherm *****************
  4213 ;; Defined at:
  4214 ;;		line 72 in file "adc.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;		None
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;		None
  4219 ;; Return value:  Size  Location     Type
  4220 ;;                  1    wreg      void 
  4221 ;; Registers used:
  4222 ;;		wreg, status,2
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4228 ;;      Params:         0       0       0       0       0       0       0
  4229 ;;      Locals:         0       0       0       0       0       0       0
  4230 ;;      Temps:          0       0       0       0       0       0       0
  4231 ;;      Totals:         0       0       0       0       0       0       0
  4232 ;;Total ram usage:        0 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    4
  4235 ;; This function calls:
  4236 ;;		Nothing
  4237 ;; This function is called by:
  4238 ;;		_touchTherm
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           	psect	text24
  4243  00252C                     __ptext24:
  4244                           	callstack 0
  4245  00252C                     _resetTherm:
  4246                           	callstack 0
  4247  00252C  FFFF               	dw	65535	; assembler added errata NOP
  4248  00252E                     
  4249                           ;adc.c: 73:     therm_rel = 0;
  4250  00252E  0E00               	movlw	0
  4251  002530  6E64               	movwf	_therm_rel^0,c	;volatile
  4252  002532  0012               	return		;funcret
  4253  002534  FFFF               	dw	65535	; errata NOP
  4254  002536                     __end_of_resetTherm:
  4255                           	callstack 0
  4256                           
  4257 ;; *************** function _touchObject *****************
  4258 ;; Defined at:
  4259 ;;		line 384 in file "motors.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;		None
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;		None
  4264 ;; Return value:  Size  Location     Type
  4265 ;;                  1    wreg      unsigned char 
  4266 ;; Registers used:
  4267 ;;		wreg, status,2, status,0, cstack
  4268 ;; Tracked objects:
  4269 ;;		On entry : 0/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4273 ;;      Params:         0       0       0       0       0       0       0
  4274 ;;      Locals:         0       0       0       0       0       0       0
  4275 ;;      Temps:          0       0       0       0       0       0       0
  4276 ;;      Totals:         0       0       0       0       0       0       0
  4277 ;;Total ram usage:        0 bytes
  4278 ;; Hardware stack levels used:    1
  4279 ;; Hardware stack levels required when called:    5
  4280 ;; This function calls:
  4281 ;;		_resetStep
  4282 ;;		_resetTouch
  4283 ;;		_returnTouch
  4284 ;;		_setDirection
  4285 ;;		_startADC
  4286 ;;		_stepMade
  4287 ;;		_stopADC
  4288 ;; This function is called by:
  4289 ;;		_executeData
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           	psect	text25
  4294  001C1E                     __ptext25:
  4295                           	callstack 0
  4296  001C1E                     _touchObject:
  4297                           	callstack 0
  4298  001C1E  FFFF               	dw	65535	; assembler added errata NOP
  4299  001C20                     
  4300                           ;motors.c: 387:     setDirection(1, 2);
  4301  001C20  0E02               	movlw	2
  4302  001C22  6E12               	movwf	setDirection@motor^0,c
  4303  001C24  0E01               	movlw	1
  4304  001C26  ECDB  F010         	call	_setDirection
  4305  001C2A                     
  4306                           ;motors.c: 389:     T2CONbits.TMR2ON = 1;
  4307  001C2A  84CA               	bsf	202,2,c	;volatile
  4308  001C2C                     
  4309                           ;motors.c: 391:     tm0Error = 0;
  4310  001C2C  0E00               	movlw	0
  4311  001C2E  6E5C               	movwf	(_tm0Error+1)^0,c
  4312  001C30  0E00               	movlw	0
  4313  001C32  6E5B               	movwf	_tm0Error^0,c
  4314  001C34                     
  4315                           ;motors.c: 392:     tm0Limit = 100;
  4316  001C34  0E64               	movlw	100
  4317  001C36  6E68               	movwf	_tm0Limit^0,c
  4318  001C38                     
  4319                           ;motors.c: 393:     T0CONbits.TMR0ON = 1;
  4320  001C38  8ED5               	bsf	213,7,c	;volatile
  4321  001C3A                     
  4322                           ;motors.c: 396:     startADC();
  4323  001C3A  EC9B  F012         	call	_startADC	;wreg free
  4324                           
  4325                           ;motors.c: 399:     while(!returnTouch() || PORTDbits.RD7){
  4326  001C3E  EF52  F00E         	goto	l3826
  4327  001C42                     l3816:
  4328  001C42  FFFF               	dw	65535	; assembler added errata NOP
  4329                           
  4330                           ;motors.c: 402:         if(tm0Error){
  4331  001C44  505B               	movf	_tm0Error^0,w,c
  4332  001C46  105C               	iorwf	(_tm0Error+1)^0,w,c
  4333  001C48  B4D8               	btfsc	status,2,c
  4334  001C4A  EF29  F00E         	goto	u3151
  4335  001C4E  EF2C  F00E         	goto	u3150
  4336  001C52                     u3151:
  4337  001C52  FFFF               	dw	65535	; assembler added errata NOP
  4338  001C54  EF34  F00E         	goto	l174
  4339  001C58                     u3150:
  4340  001C58  FFFF               	dw	65535	; assembler added errata NOP
  4341  001C5A                     
  4342                           ;motors.c: 404:             LATCbits.LATC2 = 0;
  4343  001C5A  948B               	bcf	139,2,c	;volatile
  4344  001C5C                     
  4345                           ;motors.c: 405:             tm0Error = 6;
  4346  001C5C  0E00               	movlw	0
  4347  001C5E  6E5C               	movwf	(_tm0Error+1)^0,c
  4348  001C60  0E06               	movlw	6
  4349  001C62  6E5B               	movwf	_tm0Error^0,c
  4350                           
  4351                           ;motors.c: 406:             break;
  4352  001C64  EF68  F00E         	goto	l3830
  4353  001C68                     l174:
  4354  001C68  FFFF               	dw	65535	; assembler added errata NOP
  4355                           
  4356                           ;motors.c: 410:         LATCbits.LATC2 = 1;
  4357  001C6A  848B               	bsf	139,2,c	;volatile
  4358  001C6C                     l3822:
  4359  001C6C  FFFF               	dw	65535	; assembler added errata NOP
  4360  001C6E  EC49  F012         	call	_stepMade	;wreg free
  4361  001C72  5012               	movf	?_stepMade^0,w,c
  4362  001C74  1013               	iorwf	(?_stepMade+1)^0,w,c
  4363  001C76  B4D8               	btfsc	status,2,c
  4364  001C78  EF40  F00E         	goto	u3161
  4365  001C7C  EF43  F00E         	goto	u3160
  4366  001C80                     u3161:
  4367  001C80  FFFF               	dw	65535	; assembler added errata NOP
  4368  001C82  EF36  F00E         	goto	l3822
  4369  001C86                     u3160:
  4370  001C86  FFFF               	dw	65535	; assembler added errata NOP
  4371  001C88                     
  4372                           ;motors.c: 416:         LATCbits.LATC2 = 0;
  4373  001C88  948B               	bcf	139,2,c	;volatile
  4374  001C8A                     l3824:
  4375  001C8A  FFFF               	dw	65535	; assembler added errata NOP
  4376  001C8C  EC49  F012         	call	_stepMade	;wreg free
  4377  001C90  5012               	movf	?_stepMade^0,w,c
  4378  001C92  1013               	iorwf	(?_stepMade+1)^0,w,c
  4379  001C94  B4D8               	btfsc	status,2,c
  4380  001C96  EF4F  F00E         	goto	u3171
  4381  001C9A  EF52  F00E         	goto	u3170
  4382  001C9E                     u3171:
  4383  001C9E  FFFF               	dw	65535	; assembler added errata NOP
  4384  001CA0  EF45  F00E         	goto	l3824
  4385  001CA4                     u3170:
  4386  001CA4                     l3826:
  4387  001CA4  FFFF               	dw	65535	; assembler added errata NOP
  4388                           
  4389                           ;motors.c: 399:     while(!returnTouch() || PORTDbits.RD7){
  4390  001CA6  EC85  F012         	call	_returnTouch	;wreg free
  4391  001CAA  5012               	movf	?_returnTouch^0,w,c
  4392  001CAC  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4393  001CAE  B4D8               	btfsc	status,2,c
  4394  001CB0  EF5C  F00E         	goto	u3181
  4395  001CB4  EF5F  F00E         	goto	u3180
  4396  001CB8                     u3181:
  4397  001CB8  FFFF               	dw	65535	; assembler added errata NOP
  4398  001CBA  EF21  F00E         	goto	l3816
  4399  001CBE                     u3180:
  4400  001CBE  FFFF               	dw	65535	; assembler added errata NOP
  4401  001CC0  BE83               	btfsc	131,7,c	;volatile
  4402  001CC2  EF65  F00E         	goto	u3191
  4403  001CC6  EF68  F00E         	goto	u3190
  4404  001CCA                     u3191:
  4405  001CCA  FFFF               	dw	65535	; assembler added errata NOP
  4406  001CCC  EF21  F00E         	goto	l3816
  4407  001CD0                     u3190:
  4408  001CD0                     l3830:
  4409  001CD0  FFFF               	dw	65535	; assembler added errata NOP
  4410                           
  4411                           ;motors.c: 423:     stopADC();
  4412  001CD2  ECC9  F012         	call	_stopADC	;wreg free
  4413  001CD6                     
  4414                           ;motors.c: 426:     resetTouch();
  4415  001CD6  ECA0  F012         	call	_resetTouch	;wreg free
  4416  001CDA                     
  4417                           ;motors.c: 429:     T0CONbits.TMR0ON = 0;
  4418  001CDA  9ED5               	bcf	213,7,c	;volatile
  4419  001CDC                     
  4420                           ;motors.c: 430:     T2CONbits.TMR2ON = 0;
  4421  001CDC  94CA               	bcf	202,2,c	;volatile
  4422                           
  4423                           ;motors.c: 432:     TMR0 = 0;
  4424  001CDE  0E00               	movlw	0
  4425  001CE0  6ED7               	movwf	215,c	;volatile
  4426  001CE2  0E00               	movlw	0
  4427  001CE4  6ED6               	movwf	214,c	;volatile
  4428                           
  4429                           ;motors.c: 433:     TMR2 = 0;
  4430  001CE6  0E00               	movlw	0
  4431  001CE8  6ECC               	movwf	204,c	;volatile
  4432  001CEA                     
  4433                           ;motors.c: 436:     resetStep();
  4434  001CEA  ECA5  F012         	call	_resetStep	;wreg free
  4435  001CEE                     
  4436                           ;motors.c: 439:     if(PORTDbits.RD7){
  4437  001CEE  AE83               	btfss	131,7,c	;volatile
  4438  001CF0  EF7C  F00E         	goto	u3201
  4439  001CF4  EF7F  F00E         	goto	u3200
  4440  001CF8                     u3201:
  4441  001CF8  FFFF               	dw	65535	; assembler added errata NOP
  4442  001CFA  EF84  F00E         	goto	l182
  4443  001CFE                     u3200:
  4444  001CFE  FFFF               	dw	65535	; assembler added errata NOP
  4445  001D00                     
  4446                           ;motors.c: 440:         tm0Error = 2;
  4447  001D00  0E00               	movlw	0
  4448  001D02  6E5C               	movwf	(_tm0Error+1)^0,c
  4449  001D04  0E02               	movlw	2
  4450  001D06  6E5B               	movwf	_tm0Error^0,c
  4451  001D08                     l182:
  4452  001D08  FFFF               	dw	65535	; assembler added errata NOP
  4453                           
  4454                           ;motors.c: 443:     return(tm0Error);
  4455  001D0A  505B               	movf	_tm0Error^0,w,c
  4456  001D0C  0012               	return		;funcret
  4457  001D0E  FFFF               	dw	65535	; errata NOP
  4458  001D10                     __end_of_touchObject:
  4459                           	callstack 0
  4460                           
  4461 ;; *************** function _stopADC *****************
  4462 ;; Defined at:
  4463 ;;		line 44 in file "adc.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;		None
  4466 ;; Auto vars:     Size  Location     Type
  4467 ;;		None
  4468 ;; Return value:  Size  Location     Type
  4469 ;;                  1    wreg      void 
  4470 ;; Registers used:
  4471 ;;		None
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4477 ;;      Params:         0       0       0       0       0       0       0
  4478 ;;      Locals:         0       0       0       0       0       0       0
  4479 ;;      Temps:          0       0       0       0       0       0       0
  4480 ;;      Totals:         0       0       0       0       0       0       0
  4481 ;;Total ram usage:        0 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:    4
  4484 ;; This function calls:
  4485 ;;		Nothing
  4486 ;; This function is called by:
  4487 ;;		_touchObject
  4488 ;;		_touchTherm
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           	psect	text26
  4493  002592                     __ptext26:
  4494                           	callstack 0
  4495  002592                     _stopADC:
  4496                           	callstack 0
  4497  002592  FFFF               	dw	65535	; assembler added errata NOP
  4498  002594                     
  4499                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4500  002594  90C2               	bcf	194,0,c	;volatile
  4501  002596  0012               	return		;funcret
  4502  002598  FFFF               	dw	65535	; errata NOP
  4503  00259A                     __end_of_stopADC:
  4504                           	callstack 0
  4505                           
  4506 ;; *************** function _startADC *****************
  4507 ;; Defined at:
  4508 ;;		line 36 in file "adc.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;		None
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;		None
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  1    wreg      void 
  4515 ;; Registers used:
  4516 ;;		None
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4522 ;;      Params:         0       0       0       0       0       0       0
  4523 ;;      Locals:         0       0       0       0       0       0       0
  4524 ;;      Temps:          0       0       0       0       0       0       0
  4525 ;;      Totals:         0       0       0       0       0       0       0
  4526 ;;Total ram usage:        0 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    4
  4529 ;; This function calls:
  4530 ;;		Nothing
  4531 ;; This function is called by:
  4532 ;;		_touchObject
  4533 ;;		_touchTherm
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           	psect	text27
  4538  002536                     __ptext27:
  4539                           	callstack 0
  4540  002536                     _startADC:
  4541                           	callstack 0
  4542  002536  FFFF               	dw	65535	; assembler added errata NOP
  4543  002538                     
  4544                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4545  002538  80C2               	bsf	194,0,c	;volatile
  4546                           
  4547                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4548  00253A  84C2               	bsf	194,2,c	;volatile
  4549  00253C  0012               	return		;funcret
  4550  00253E  FFFF               	dw	65535	; errata NOP
  4551  002540                     __end_of_startADC:
  4552                           	callstack 0
  4553                           
  4554 ;; *************** function _returnTouch *****************
  4555 ;; Defined at:
  4556 ;;		line 51 in file "adc.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;		None
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;		None
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  2   17[COMRAM] unsigned int 
  4563 ;; Registers used:
  4564 ;;		None
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4570 ;;      Params:         2       0       0       0       0       0       0
  4571 ;;      Locals:         0       0       0       0       0       0       0
  4572 ;;      Temps:          0       0       0       0       0       0       0
  4573 ;;      Totals:         2       0       0       0       0       0       0
  4574 ;;Total ram usage:        2 bytes
  4575 ;; Hardware stack levels used:    1
  4576 ;; Hardware stack levels required when called:    4
  4577 ;; This function calls:
  4578 ;;		Nothing
  4579 ;; This function is called by:
  4580 ;;		_touchObject
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           	psect	text28
  4585  00250A                     __ptext28:
  4586                           	callstack 0
  4587  00250A                     _returnTouch:
  4588                           	callstack 0
  4589  00250A  FFFF               	dw	65535	; assembler added errata NOP
  4590  00250C                     
  4591                           ;adc.c: 52:     return touch_rel;
  4592  00250C  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4593  002510  6A13               	clrf	(?_returnTouch+1)^0,c
  4594  002512  0012               	return		;funcret
  4595  002514  FFFF               	dw	65535	; errata NOP
  4596  002516                     __end_of_returnTouch:
  4597                           	callstack 0
  4598                           
  4599 ;; *************** function _resetTouch *****************
  4600 ;; Defined at:
  4601 ;;		line 65 in file "adc.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;		None
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;		None
  4606 ;; Return value:  Size  Location     Type
  4607 ;;                  1    wreg      void 
  4608 ;; Registers used:
  4609 ;;		wreg, status,2
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4615 ;;      Params:         0       0       0       0       0       0       0
  4616 ;;      Locals:         0       0       0       0       0       0       0
  4617 ;;      Temps:          0       0       0       0       0       0       0
  4618 ;;      Totals:         0       0       0       0       0       0       0
  4619 ;;Total ram usage:        0 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; Hardware stack levels required when called:    4
  4622 ;; This function calls:
  4623 ;;		Nothing
  4624 ;; This function is called by:
  4625 ;;		_touchObject
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text29
  4630  002540                     __ptext29:
  4631                           	callstack 0
  4632  002540                     _resetTouch:
  4633                           	callstack 0
  4634  002540  FFFF               	dw	65535	; assembler added errata NOP
  4635  002542                     
  4636                           ;adc.c: 66:     touch_rel = 0;
  4637  002542  0E00               	movlw	0
  4638  002544  6E65               	movwf	_touch_rel^0,c	;volatile
  4639  002546  0012               	return		;funcret
  4640  002548  FFFF               	dw	65535	; errata NOP
  4641  00254A                     __end_of_resetTouch:
  4642                           	callstack 0
  4643                           
  4644 ;; *************** function _rotateObj *****************
  4645 ;; Defined at:
  4646 ;;		line 575 in file "motors.c"
  4647 ;; Parameters:    Size  Location     Type
  4648 ;;  rotAngle        1    wreg     unsigned char 
  4649 ;; Auto vars:     Size  Location     Type
  4650 ;;  rotAngle        1    3[BANK0 ] unsigned char 
  4651 ;;  i               2    6[BANK0 ] unsigned int 
  4652 ;;  totStep         2    4[BANK0 ] int 
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  1    wreg      void 
  4655 ;; Registers used:
  4656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4662 ;;      Params:         0       0       0       0       0       0       0
  4663 ;;      Locals:         0       5       0       0       0       0       0
  4664 ;;      Temps:          0       3       0       0       0       0       0
  4665 ;;      Totals:         0       8       0       0       0       0       0
  4666 ;;Total ram usage:        8 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    5
  4669 ;; This function calls:
  4670 ;;		___fldiv
  4671 ;;		___fltol
  4672 ;;		___xxtofl
  4673 ;;		_stepMade
  4674 ;; This function is called by:
  4675 ;;		_executeData
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           	psect	text30
  4680  001D10                     __ptext30:
  4681                           	callstack 0
  4682  001D10                     _rotateObj:
  4683                           	callstack 0
  4684  001D10  FFFF               	dw	65535	; assembler added errata NOP
  4685                           
  4686                           ;incstack = 0
  4687                           ;rotateObj@rotAngle stored from wreg
  4688  001D12  0100               	movlb	0	; () banked
  4689  001D14  6FFA               	movwf	rotateObj@rotAngle& (0+255),b
  4690  001D16                     
  4691                           ;motors.c: 576:     static const float stepAngle = 0.08789;;motors.c: 577:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 578:     unsigned int i;;
      +                          motors.c: 579:     int totStep = rotAngle/stepAngle;
  4692  001D16  0EAC               	movlw	172
  4693  001D18  6E24               	movwf	___fldiv@a^0,c
  4694  001D1A  0EFF               	movlw	255
  4695  001D1C  6E25               	movwf	(___fldiv@a+1)^0,c
  4696  001D1E  0EB3               	movlw	179
  4697  001D20  6E26               	movwf	(___fldiv@a+2)^0,c
  4698  001D22  0E3D               	movlw	61
  4699  001D24  6E27               	movwf	(___fldiv@a+3)^0,c
  4700  001D26  0100               	movlb	0	; () banked
  4701  001D28  51FA               	movf	rotateObj@rotAngle& (0+255),w,b
  4702  001D2A  6E12               	movwf	___xxtofl@val^0,c
  4703  001D2C  6A13               	clrf	(___xxtofl@val+1)^0,c
  4704  001D2E  6A14               	clrf	(___xxtofl@val+2)^0,c
  4705  001D30  6A15               	clrf	(___xxtofl@val+3)^0,c
  4706  001D32  0E01               	movlw	1
  4707  001D34  ECC9  F007         	call	___xxtofl
  4708  001D38  C012  F020         	movff	?___xxtofl,___fldiv@b
  4709  001D3C  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4710  001D40  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4711  001D44  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4712  001D48  EC08  F003         	call	___fldiv	;wreg free
  4713  001D4C  C020  F039         	movff	?___fldiv,___fltol@f1
  4714  001D50  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4715  001D54  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4716  001D58  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4717  001D5C  ECDF  F00B         	call	___fltol	;wreg free
  4718  001D60  C039  F0FB         	movff	?___fltol,rotateObj@totStep
  4719  001D64  C03A  F0FC         	movff	?___fltol+1,rotateObj@totStep+1
  4720  001D68                     
  4721                           ;motors.c: 582:     for(i = 0; i < totStep; i++){
  4722  001D68  0E00               	movlw	0
  4723  001D6A  0100               	movlb	0	; () banked
  4724  001D6C  6FFE               	movwf	(rotateObj@i+1)& (0+255),b
  4725  001D6E  0E00               	movlw	0
  4726  001D70  6FFD               	movwf	rotateObj@i& (0+255),b
  4727  001D72  EFE6  F00E         	goto	l3932
  4728  001D76                     l3920:
  4729  001D76  FFFF               	dw	65535	; assembler added errata NOP
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;motors.c: 584:         LATD &= 0xC3;
  4733  001D78  0EC3               	movlw	195
  4734  001D7A  168C               	andwf	140,f,c	;volatile
  4735  001D7C                     
  4736                           ; BSR set to: 0
  4737                           ;motors.c: 586:         LATD |= rotSequence[i%4] << 2;
  4738  001D7C  0E03               	movlw	3
  4739  001D7E  15FD               	andwf	rotateObj@i& (0+255),w,b
  4740  001D80  6FF7               	movwf	??_rotateObj& (0+255),b
  4741  001D82  0E00               	movlw	0
  4742  001D84  15FE               	andwf	(rotateObj@i+1)& (0+255),w,b
  4743  001D86  6FF8               	movwf	(??_rotateObj+1)& (0+255),b
  4744  001D88  0E80               	movlw	low rotateObj@rotSequence
  4745  001D8A  25F7               	addwf	??_rotateObj& (0+255),w,b
  4746  001D8C  6ED9               	movwf	fsr2l,c
  4747  001D8E  0E00               	movlw	high rotateObj@rotSequence
  4748  001D90  21F8               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4749  001D92  6EDA               	movwf	fsr2h,c
  4750  001D94  50DF               	movf	indf2,w,c
  4751  001D96  6FF9               	movwf	(??_rotateObj+2)& (0+255),b
  4752  001D98  90D8               	bcf	status,0,c
  4753  001D9A  37F9               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4754  001D9C  90D8               	bcf	status,0,c
  4755  001D9E  35F9               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4756  001DA0  128C               	iorwf	140,f,c	;volatile
  4757  001DA2                     
  4758                           ; BSR set to: 0
  4759                           ;motors.c: 590:         T2CONbits.TMR2ON = 1;
  4760  001DA2  84CA               	bsf	202,2,c	;volatile
  4761  001DA4                     l3926:
  4762  001DA4  FFFF               	dw	65535	; assembler added errata NOP
  4763  001DA6  EC49  F012         	call	_stepMade	;wreg free
  4764  001DAA  5012               	movf	?_stepMade^0,w,c
  4765  001DAC  1013               	iorwf	(?_stepMade+1)^0,w,c
  4766  001DAE  B4D8               	btfsc	status,2,c
  4767  001DB0  EFDC  F00E         	goto	u3311
  4768  001DB4  EFDF  F00E         	goto	u3310
  4769  001DB8                     u3311:
  4770  001DB8  FFFF               	dw	65535	; assembler added errata NOP
  4771  001DBA  EFD2  F00E         	goto	l3926
  4772  001DBE                     u3310:
  4773  001DBE  FFFF               	dw	65535	; assembler added errata NOP
  4774  001DC0                     
  4775                           ;motors.c: 592:         T2CONbits.TMR2ON = 1;
  4776  001DC0  84CA               	bsf	202,2,c	;volatile
  4777  001DC2                     
  4778                           ;motors.c: 593:         TMR2 = 0;
  4779  001DC2  0E00               	movlw	0
  4780  001DC4  6ECC               	movwf	204,c	;volatile
  4781  001DC6                     
  4782                           ;motors.c: 594:     }
  4783  001DC6  0100               	movlb	0	; () banked
  4784  001DC8  4BFD               	infsnz	rotateObj@i& (0+255),f,b
  4785  001DCA  2BFE               	incf	(rotateObj@i+1)& (0+255),f,b
  4786  001DCC                     l3932:
  4787  001DCC  FFFF               	dw	65535	; assembler added errata NOP
  4788                           
  4789                           ; BSR set to: 0
  4790  001DCE  51FB               	movf	rotateObj@totStep& (0+255),w,b
  4791  001DD0  5DFD               	subwf	rotateObj@i& (0+255),w,b
  4792  001DD2  51FC               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4793  001DD4  59FE               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4794  001DD6  A0D8               	btfss	status,0,c
  4795  001DD8  EFF0  F00E         	goto	u3321
  4796  001DDC  EFF3  F00E         	goto	u3320
  4797  001DE0                     u3321:
  4798  001DE0  FFFF               	dw	65535	; assembler added errata NOP
  4799  001DE2  EFBB  F00E         	goto	l3920
  4800  001DE6                     u3320:
  4801  001DE6  FFFF               	dw	65535	; assembler added errata NOP
  4802  001DE8                     
  4803                           ; BSR set to: 0
  4804  001DE8  0012               	return		;funcret
  4805  001DEA  FFFF               	dw	65535	; errata NOP
  4806  001DEC                     __end_of_rotateObj:
  4807                           	callstack 0
  4808                           
  4809 ;; *************** function ___xxtofl *****************
  4810 ;; Defined at:
  4811 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;  sign            1    wreg     unsigned char 
  4814 ;;  val             4   17[COMRAM] long 
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  sign            1   25[COMRAM] unsigned char 
  4817 ;;  arg             4   27[COMRAM] unsigned long 
  4818 ;;  exp             1   26[COMRAM] unsigned char 
  4819 ;; Return value:  Size  Location     Type
  4820 ;;                  4   17[COMRAM] unsigned char 
  4821 ;; Registers used:
  4822 ;;		wreg, status,2, status,0
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4828 ;;      Params:         4       0       0       0       0       0       0
  4829 ;;      Locals:         6       0       0       0       0       0       0
  4830 ;;      Temps:          4       0       0       0       0       0       0
  4831 ;;      Totals:        14       0       0       0       0       0       0
  4832 ;;Total ram usage:       14 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; Hardware stack levels required when called:    4
  4835 ;; This function calls:
  4836 ;;		Nothing
  4837 ;; This function is called by:
  4838 ;;		_rotateObj
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text31
  4843  000F92                     __ptext31:
  4844                           	callstack 0
  4845  000F92                     ___xxtofl:
  4846                           	callstack 0
  4847  000F92  FFFF               	dw	65535	; assembler added errata NOP
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;incstack = 0
  4851                           ;___xxtofl@sign stored from wreg
  4852  000F94  6E1A               	movwf	___xxtofl@sign^0,c
  4853  000F96  501A               	movf	___xxtofl@sign^0,w,c
  4854  000F98  B4D8               	btfsc	status,2,c
  4855  000F9A  EFD1  F007         	goto	u2821
  4856  000F9E  EFD4  F007         	goto	u2820
  4857  000FA2                     u2821:
  4858  000FA2  FFFF               	dw	65535	; assembler added errata NOP
  4859  000FA4  EFF9  F007         	goto	l1246
  4860  000FA8                     u2820:
  4861  000FA8  FFFF               	dw	65535	; assembler added errata NOP
  4862  000FAA  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4863  000FAC  EFDD  F007         	goto	u2830
  4864  000FB0  EFDA  F007         	goto	u2831
  4865  000FB4                     u2831:
  4866  000FB4  FFFF               	dw	65535	; assembler added errata NOP
  4867  000FB6  EFF9  F007         	goto	l1246
  4868  000FBA                     u2830:
  4869  000FBA  FFFF               	dw	65535	; assembler added errata NOP
  4870  000FBC  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4871  000FC0  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4872  000FC4  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4873  000FC8  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4874  000FCC  1E16               	comf	??___xxtofl^0,f,c
  4875  000FCE  1E17               	comf	(??___xxtofl+1)^0,f,c
  4876  000FD0  1E18               	comf	(??___xxtofl+2)^0,f,c
  4877  000FD2  1E19               	comf	(??___xxtofl+3)^0,f,c
  4878  000FD4  2A16               	incf	??___xxtofl^0,f,c
  4879  000FD6  0E00               	movlw	0
  4880  000FD8  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4881  000FDA  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4882  000FDC  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4883  000FDE  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4884  000FE2  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4885  000FE6  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4886  000FEA  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4887  000FEE  EF02  F008         	goto	l3630
  4888  000FF2                     l1246:
  4889  000FF2  FFFF               	dw	65535	; assembler added errata NOP
  4890  000FF4  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4891  000FF8  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4892  000FFC  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4893  001000  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4894  001004                     l3630:
  4895  001004  FFFF               	dw	65535	; assembler added errata NOP
  4896  001006  5012               	movf	___xxtofl@val^0,w,c
  4897  001008  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4898  00100A  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4899  00100C  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4900  00100E  A4D8               	btfss	status,2,c
  4901  001010  EF0C  F008         	goto	u2841
  4902  001014  EF0F  F008         	goto	u2840
  4903  001018                     u2841:
  4904  001018  FFFF               	dw	65535	; assembler added errata NOP
  4905  00101A  EF1A  F008         	goto	l3636
  4906  00101E                     u2840:
  4907  00101E  FFFF               	dw	65535	; assembler added errata NOP
  4908  001020  0E00               	movlw	0
  4909  001022  6E12               	movwf	?___xxtofl^0,c
  4910  001024  0E00               	movlw	0
  4911  001026  6E13               	movwf	(?___xxtofl+1)^0,c
  4912  001028  0E00               	movlw	0
  4913  00102A  6E14               	movwf	(?___xxtofl+2)^0,c
  4914  00102C  0E00               	movlw	0
  4915  00102E  6E15               	movwf	(?___xxtofl+3)^0,c
  4916  001030  EFC2  F008         	goto	l1249
  4917  001034                     l3636:
  4918  001034  FFFF               	dw	65535	; assembler added errata NOP
  4919  001036  0E96               	movlw	150
  4920  001038  6E1B               	movwf	___xxtofl@exp^0,c
  4921  00103A  EF26  F008         	goto	l3640
  4922  00103E                     l3638:
  4923  00103E  FFFF               	dw	65535	; assembler added errata NOP
  4924  001040  2A1B               	incf	___xxtofl@exp^0,f,c
  4925  001042  90D8               	bcf	status,0,c
  4926  001044  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4927  001046  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4928  001048  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4929  00104A  321C               	rrcf	___xxtofl@arg^0,f,c
  4930  00104C                     l3640:
  4931  00104C  FFFF               	dw	65535	; assembler added errata NOP
  4932  00104E  0E00               	movlw	0
  4933  001050  141C               	andwf	___xxtofl@arg^0,w,c
  4934  001052  6E16               	movwf	??___xxtofl^0,c
  4935  001054  0E00               	movlw	0
  4936  001056  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4937  001058  6E17               	movwf	(??___xxtofl+1)^0,c
  4938  00105A  0E00               	movlw	0
  4939  00105C  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4940  00105E  6E18               	movwf	(??___xxtofl+2)^0,c
  4941  001060  0EFE               	movlw	254
  4942  001062  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4943  001064  6E19               	movwf	(??___xxtofl+3)^0,c
  4944  001066  5016               	movf	??___xxtofl^0,w,c
  4945  001068  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4946  00106A  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4947  00106C  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4948  00106E  A4D8               	btfss	status,2,c
  4949  001070  EF3C  F008         	goto	u2851
  4950  001074  EF3F  F008         	goto	u2850
  4951  001078                     u2851:
  4952  001078  FFFF               	dw	65535	; assembler added errata NOP
  4953  00107A  EF1F  F008         	goto	l3638
  4954  00107E                     u2850:
  4955  00107E  FFFF               	dw	65535	; assembler added errata NOP
  4956  001080  EF4F  F008         	goto	l1253
  4957  001084                     l3642:
  4958  001084  FFFF               	dw	65535	; assembler added errata NOP
  4959  001086  2A1B               	incf	___xxtofl@exp^0,f,c
  4960  001088  0E01               	movlw	1
  4961  00108A  261C               	addwf	___xxtofl@arg^0,f,c
  4962  00108C  0E00               	movlw	0
  4963  00108E  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4964  001090  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4965  001092  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4966  001094  90D8               	bcf	status,0,c
  4967  001096  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4968  001098  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4969  00109A  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4970  00109C  321C               	rrcf	___xxtofl@arg^0,f,c
  4971  00109E                     l1253:
  4972  00109E  FFFF               	dw	65535	; assembler added errata NOP
  4973  0010A0  0E00               	movlw	0
  4974  0010A2  141C               	andwf	___xxtofl@arg^0,w,c
  4975  0010A4  6E16               	movwf	??___xxtofl^0,c
  4976  0010A6  0E00               	movlw	0
  4977  0010A8  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4978  0010AA  6E17               	movwf	(??___xxtofl+1)^0,c
  4979  0010AC  0E00               	movlw	0
  4980  0010AE  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4981  0010B0  6E18               	movwf	(??___xxtofl+2)^0,c
  4982  0010B2  0EFF               	movlw	255
  4983  0010B4  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4984  0010B6  6E19               	movwf	(??___xxtofl+3)^0,c
  4985  0010B8  5016               	movf	??___xxtofl^0,w,c
  4986  0010BA  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4987  0010BC  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4988  0010BE  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4989  0010C0  A4D8               	btfss	status,2,c
  4990  0010C2  EF65  F008         	goto	u2861
  4991  0010C6  EF68  F008         	goto	u2860
  4992  0010CA                     u2861:
  4993  0010CA  FFFF               	dw	65535	; assembler added errata NOP
  4994  0010CC  EF42  F008         	goto	l3642
  4995  0010D0                     u2860:
  4996  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  4997  0010D2  EF72  F008         	goto	l3650
  4998  0010D6                     l3648:
  4999  0010D6  FFFF               	dw	65535	; assembler added errata NOP
  5000  0010D8  061B               	decf	___xxtofl@exp^0,f,c
  5001  0010DA  90D8               	bcf	status,0,c
  5002  0010DC  361C               	rlcf	___xxtofl@arg^0,f,c
  5003  0010DE  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  5004  0010E0  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  5005  0010E2  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  5006  0010E4                     l3650:
  5007  0010E4  FFFF               	dw	65535	; assembler added errata NOP
  5008  0010E6  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  5009  0010E8  EF78  F008         	goto	u2871
  5010  0010EC  EF7B  F008         	goto	u2870
  5011  0010F0                     u2871:
  5012  0010F0  FFFF               	dw	65535	; assembler added errata NOP
  5013  0010F2  EF85  F008         	goto	l1260
  5014  0010F6                     u2870:
  5015  0010F6  FFFF               	dw	65535	; assembler added errata NOP
  5016  0010F8  0E02               	movlw	2
  5017  0010FA  601B               	cpfslt	___xxtofl@exp^0,c
  5018  0010FC  EF82  F008         	goto	u2881
  5019  001100  EF85  F008         	goto	u2880
  5020  001104                     u2881:
  5021  001104  FFFF               	dw	65535	; assembler added errata NOP
  5022  001106  EF6B  F008         	goto	l3648
  5023  00110A                     u2880:
  5024  00110A                     l1260:
  5025  00110A  FFFF               	dw	65535	; assembler added errata NOP
  5026  00110C  B01B               	btfsc	___xxtofl@exp^0,0,c
  5027  00110E  EF8B  F008         	goto	u2891
  5028  001112  EF8E  F008         	goto	u2890
  5029  001116                     u2891:
  5030  001116  FFFF               	dw	65535	; assembler added errata NOP
  5031  001118  EF90  F008         	goto	l3656
  5032  00111C                     u2890:
  5033  00111C  FFFF               	dw	65535	; assembler added errata NOP
  5034  00111E  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  5035  001120                     l3656:
  5036  001120  FFFF               	dw	65535	; assembler added errata NOP
  5037  001122  90D8               	bcf	status,0,c
  5038  001124  321B               	rrcf	___xxtofl@exp^0,f,c
  5039  001126  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  5040  00112A  6A17               	clrf	(??___xxtofl+1)^0,c
  5041  00112C  6A18               	clrf	(??___xxtofl+2)^0,c
  5042  00112E  6A19               	clrf	(??___xxtofl+3)^0,c
  5043  001130  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  5044  001134  6A18               	clrf	(??___xxtofl+2)^0,c
  5045  001136  6A17               	clrf	(??___xxtofl+1)^0,c
  5046  001138  6A16               	clrf	??___xxtofl^0,c
  5047  00113A  5016               	movf	??___xxtofl^0,w,c
  5048  00113C  121C               	iorwf	___xxtofl@arg^0,f,c
  5049  00113E  5017               	movf	(??___xxtofl+1)^0,w,c
  5050  001140  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  5051  001142  5018               	movf	(??___xxtofl+2)^0,w,c
  5052  001144  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  5053  001146  5019               	movf	(??___xxtofl+3)^0,w,c
  5054  001148  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  5055  00114A  501A               	movf	___xxtofl@sign^0,w,c
  5056  00114C  B4D8               	btfsc	status,2,c
  5057  00114E  EFAB  F008         	goto	u2901
  5058  001152  EFAE  F008         	goto	u2900
  5059  001156                     u2901:
  5060  001156  FFFF               	dw	65535	; assembler added errata NOP
  5061  001158  EFB9  F008         	goto	l3666
  5062  00115C                     u2900:
  5063  00115C  FFFF               	dw	65535	; assembler added errata NOP
  5064  00115E  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  5065  001160  EFB7  F008         	goto	u2910
  5066  001164  EFB4  F008         	goto	u2911
  5067  001168                     u2911:
  5068  001168  FFFF               	dw	65535	; assembler added errata NOP
  5069  00116A  EFB9  F008         	goto	l3666
  5070  00116E                     u2910:
  5071  00116E  FFFF               	dw	65535	; assembler added errata NOP
  5072  001170  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  5073  001172                     l3666:
  5074  001172  FFFF               	dw	65535	; assembler added errata NOP
  5075  001174  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  5076  001178  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  5077  00117C  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  5078  001180  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5079  001184                     l1249:
  5080  001184  FFFF               	dw	65535	; assembler added errata NOP
  5081  001186  0012               	return		;funcret
  5082  001188  FFFF               	dw	65535	; errata NOP
  5083  00118A                     __end_of___xxtofl:
  5084                           	callstack 0
  5085                           
  5086 ;; *************** function ___fltol *****************
  5087 ;; Defined at:
  5088 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;  f1              4   56[COMRAM] unsigned char 
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;  exp1            1   65[COMRAM] unsigned char 
  5093 ;;  sign1           1   64[COMRAM] unsigned char 
  5094 ;; Return value:  Size  Location     Type
  5095 ;;                  4   56[COMRAM] long 
  5096 ;; Registers used:
  5097 ;;		wreg, status,2, status,0
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5103 ;;      Params:         4       0       0       0       0       0       0
  5104 ;;      Locals:         2       0       0       0       0       0       0
  5105 ;;      Temps:          4       0       0       0       0       0       0
  5106 ;;      Totals:        10       0       0       0       0       0       0
  5107 ;;Total ram usage:       10 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:    4
  5110 ;; This function calls:
  5111 ;;		Nothing
  5112 ;; This function is called by:
  5113 ;;		_rotateObj
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           	psect	text32
  5118  0017BE                     __ptext32:
  5119                           	callstack 0
  5120  0017BE                     ___fltol:
  5121                           	callstack 0
  5122  0017BE  FFFF               	dw	65535	; assembler added errata NOP
  5123  0017C0  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5124  0017C2  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5125  0017C4  6E42               	movwf	___fltol@exp1^0,c
  5126  0017C6  5042               	movf	___fltol@exp1^0,w,c
  5127  0017C8  A4D8               	btfss	status,2,c
  5128  0017CA  EFE9  F00B         	goto	u2751
  5129  0017CE  EFEC  F00B         	goto	u2750
  5130  0017D2                     u2751:
  5131  0017D2  FFFF               	dw	65535	; assembler added errata NOP
  5132  0017D4  EFF8  F00B         	goto	l3586
  5133  0017D8                     u2750:
  5134  0017D8  FFFF               	dw	65535	; assembler added errata NOP
  5135  0017DA                     l3582:
  5136  0017DA  FFFF               	dw	65535	; assembler added errata NOP
  5137  0017DC  0E00               	movlw	0
  5138  0017DE  6E39               	movwf	?___fltol^0,c
  5139  0017E0  0E00               	movlw	0
  5140  0017E2  6E3A               	movwf	(?___fltol+1)^0,c
  5141  0017E4  0E00               	movlw	0
  5142  0017E6  6E3B               	movwf	(?___fltol+2)^0,c
  5143  0017E8  0E00               	movlw	0
  5144  0017EA  6E3C               	movwf	(?___fltol+3)^0,c
  5145  0017EC  EF77  F00C         	goto	l888
  5146  0017F0                     l3586:
  5147  0017F0  FFFF               	dw	65535	; assembler added errata NOP
  5148  0017F2  C039  F03D         	movff	___fltol@f1,??___fltol
  5149  0017F6  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5150  0017FA  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5151  0017FE  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5152  001802  0E20               	movlw	32
  5153  001804  EF0A  F00C         	goto	u2760
  5154  001808                     u2765:
  5155  001808  FFFF               	dw	65535	; assembler added errata NOP
  5156  00180A  90D8               	bcf	status,0,c
  5157  00180C  3240               	rrcf	(??___fltol+3)^0,f,c
  5158  00180E  323F               	rrcf	(??___fltol+2)^0,f,c
  5159  001810  323E               	rrcf	(??___fltol+1)^0,f,c
  5160  001812  323D               	rrcf	??___fltol^0,f,c
  5161  001814                     u2760:
  5162  001814  FFFF               	dw	65535	; assembler added errata NOP
  5163  001816  2EE8               	decfsz	wreg,f,c
  5164  001818  EF04  F00C         	goto	u2765
  5165  00181C  503D               	movf	??___fltol^0,w,c
  5166  00181E  6E41               	movwf	___fltol@sign1^0,c
  5167  001820  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5168  001822  0EFF               	movlw	255
  5169  001824  1639               	andwf	___fltol@f1^0,f,c
  5170  001826  0EFF               	movlw	255
  5171  001828  163A               	andwf	(___fltol@f1+1)^0,f,c
  5172  00182A  0EFF               	movlw	255
  5173  00182C  163B               	andwf	(___fltol@f1+2)^0,f,c
  5174  00182E  0E00               	movlw	0
  5175  001830  163C               	andwf	(___fltol@f1+3)^0,f,c
  5176  001832  0E96               	movlw	150
  5177  001834  5E42               	subwf	___fltol@exp1^0,f,c
  5178  001836  BE42               	btfsc	___fltol@exp1^0,7,c
  5179  001838  EF23  F00C         	goto	u2770
  5180  00183C  EF20  F00C         	goto	u2771
  5181  001840                     u2771:
  5182  001840  FFFF               	dw	65535	; assembler added errata NOP
  5183  001842  EF3D  F00C         	goto	l3606
  5184  001846                     u2770:
  5185  001846  FFFF               	dw	65535	; assembler added errata NOP
  5186  001848  5042               	movf	___fltol@exp1^0,w,c
  5187  00184A  0A80               	xorlw	128
  5188  00184C  0F97               	addlw	151
  5189  00184E  B0D8               	btfsc	status,0,c
  5190  001850  EF2C  F00C         	goto	u2781
  5191  001854  EF2F  F00C         	goto	u2780
  5192  001858                     u2781:
  5193  001858  FFFF               	dw	65535	; assembler added errata NOP
  5194  00185A  EF32  F00C         	goto	l3602
  5195  00185E                     u2780:
  5196  00185E  FFFF               	dw	65535	; assembler added errata NOP
  5197  001860  EFED  F00B         	goto	l3582
  5198  001864                     l3602:
  5199  001864  FFFF               	dw	65535	; assembler added errata NOP
  5200  001866  90D8               	bcf	status,0,c
  5201  001868  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5202  00186A  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5203  00186C  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5204  00186E  3239               	rrcf	___fltol@f1^0,f,c
  5205  001870  3E42               	incfsz	___fltol@exp1^0,f,c
  5206  001872  EF32  F00C         	goto	l3602
  5207  001876  EF5B  F00C         	goto	l3616
  5208  00187A                     l3606:
  5209  00187A  FFFF               	dw	65535	; assembler added errata NOP
  5210  00187C  0E1F               	movlw	31
  5211  00187E  6442               	cpfsgt	___fltol@exp1^0,c
  5212  001880  EF44  F00C         	goto	u2791
  5213  001884  EF47  F00C         	goto	u2790
  5214  001888                     u2791:
  5215  001888  FFFF               	dw	65535	; assembler added errata NOP
  5216  00188A  EF51  F00C         	goto	l3614
  5217  00188E                     u2790:
  5218  00188E  FFFF               	dw	65535	; assembler added errata NOP
  5219  001890  EFED  F00B         	goto	l3582
  5220  001894                     l3612:
  5221  001894  FFFF               	dw	65535	; assembler added errata NOP
  5222  001896  90D8               	bcf	status,0,c
  5223  001898  3639               	rlcf	___fltol@f1^0,f,c
  5224  00189A  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5225  00189C  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5226  00189E  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5227  0018A0  0642               	decf	___fltol@exp1^0,f,c
  5228  0018A2                     l3614:
  5229  0018A2  FFFF               	dw	65535	; assembler added errata NOP
  5230  0018A4  5042               	movf	___fltol@exp1^0,w,c
  5231  0018A6  A4D8               	btfss	status,2,c
  5232  0018A8  EF58  F00C         	goto	u2801
  5233  0018AC  EF5B  F00C         	goto	u2800
  5234  0018B0                     u2801:
  5235  0018B0  FFFF               	dw	65535	; assembler added errata NOP
  5236  0018B2  EF4A  F00C         	goto	l3612
  5237  0018B6                     u2800:
  5238  0018B6                     l3616:
  5239  0018B6  FFFF               	dw	65535	; assembler added errata NOP
  5240  0018B8  5041               	movf	___fltol@sign1^0,w,c
  5241  0018BA  B4D8               	btfsc	status,2,c
  5242  0018BC  EF62  F00C         	goto	u2811
  5243  0018C0  EF65  F00C         	goto	u2810
  5244  0018C4                     u2811:
  5245  0018C4  FFFF               	dw	65535	; assembler added errata NOP
  5246  0018C6  EF6E  F00C         	goto	l3620
  5247  0018CA                     u2810:
  5248  0018CA  FFFF               	dw	65535	; assembler added errata NOP
  5249  0018CC  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5250  0018CE  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5251  0018D0  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5252  0018D2  6C39               	negf	___fltol@f1^0,c
  5253  0018D4  0E00               	movlw	0
  5254  0018D6  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5255  0018D8  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5256  0018DA  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5257  0018DC                     l3620:
  5258  0018DC  FFFF               	dw	65535	; assembler added errata NOP
  5259  0018DE  C039  F039         	movff	___fltol@f1,?___fltol
  5260  0018E2  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5261  0018E6  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5262  0018EA  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5263  0018EE                     l888:
  5264  0018EE  FFFF               	dw	65535	; assembler added errata NOP
  5265  0018F0  0012               	return		;funcret
  5266  0018F2  FFFF               	dw	65535	; errata NOP
  5267  0018F4                     __end_of___fltol:
  5268                           	callstack 0
  5269                           
  5270 ;; *************** function ___fldiv *****************
  5271 ;; Defined at:
  5272 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;  b               4   31[COMRAM] long 
  5275 ;;  a               4   35[COMRAM] long 
  5276 ;; Auto vars:     Size  Location     Type
  5277 ;;  grs             4   50[COMRAM] unsigned long 
  5278 ;;  rem             4   43[COMRAM] unsigned long 
  5279 ;;  new_exp         2   48[COMRAM] short 
  5280 ;;  aexp            1   55[COMRAM] unsigned char 
  5281 ;;  bexp            1   54[COMRAM] unsigned char 
  5282 ;;  sign            1   47[COMRAM] unsigned char 
  5283 ;; Return value:  Size  Location     Type
  5284 ;;                  4   31[COMRAM] unsigned char 
  5285 ;; Registers used:
  5286 ;;		wreg, status,2, status,0
  5287 ;; Tracked objects:
  5288 ;;		On entry : 0/0
  5289 ;;		On exit  : 0/0
  5290 ;;		Unchanged: 0/0
  5291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5292 ;;      Params:         8       0       0       0       0       0       0
  5293 ;;      Locals:        13       0       0       0       0       0       0
  5294 ;;      Temps:          4       0       0       0       0       0       0
  5295 ;;      Totals:        25       0       0       0       0       0       0
  5296 ;;Total ram usage:       25 bytes
  5297 ;; Hardware stack levels used:    1
  5298 ;; Hardware stack levels required when called:    4
  5299 ;; This function calls:
  5300 ;;		Nothing
  5301 ;; This function is called by:
  5302 ;;		_rotateObj
  5303 ;; This function uses a non-reentrant model
  5304 ;;
  5305                           
  5306                           	psect	text33
  5307  000610                     __ptext33:
  5308                           	callstack 0
  5309  000610                     ___fldiv:
  5310                           	callstack 0
  5311  000610  FFFF               	dw	65535	; assembler added errata NOP
  5312  000612  5023               	movf	(___fldiv@b+3)^0,w,c
  5313  000614  0B80               	andlw	128
  5314  000616  6E30               	movwf	___fldiv@sign^0,c
  5315  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  5316  00061A  2423               	addwf	(___fldiv@b+3)^0,w,c
  5317  00061C  6E37               	movwf	___fldiv@bexp^0,c
  5318  00061E  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5319  000620  EF14  F003         	goto	u2521
  5320  000624  EF17  F003         	goto	u2520
  5321  000628                     u2521:
  5322  000628  FFFF               	dw	65535	; assembler added errata NOP
  5323  00062A  EF19  F003         	goto	l3448
  5324  00062E                     u2520:
  5325  00062E  FFFF               	dw	65535	; assembler added errata NOP
  5326  000630  8037               	bsf	___fldiv@bexp^0,0,c
  5327  000632                     l3448:
  5328  000632  FFFF               	dw	65535	; assembler added errata NOP
  5329  000634  5037               	movf	___fldiv@bexp^0,w,c
  5330  000636  B4D8               	btfsc	status,2,c
  5331  000638  EF20  F003         	goto	u2531
  5332  00063C  EF23  F003         	goto	u2530
  5333  000640                     u2531:
  5334  000640  FFFF               	dw	65535	; assembler added errata NOP
  5335  000642  EF3C  F003         	goto	l3458
  5336  000646                     u2530:
  5337  000646  FFFF               	dw	65535	; assembler added errata NOP
  5338  000648  2837               	incf	___fldiv@bexp^0,w,c
  5339  00064A  A4D8               	btfss	status,2,c
  5340  00064C  EF2A  F003         	goto	u2541
  5341  000650  EF2D  F003         	goto	u2540
  5342  000654                     u2541:
  5343  000654  FFFF               	dw	65535	; assembler added errata NOP
  5344  000656  EF36  F003         	goto	l3454
  5345  00065A                     u2540:
  5346  00065A  FFFF               	dw	65535	; assembler added errata NOP
  5347  00065C  0E00               	movlw	0
  5348  00065E  6E20               	movwf	___fldiv@b^0,c
  5349  000660  0E00               	movlw	0
  5350  000662  6E21               	movwf	(___fldiv@b+1)^0,c
  5351  000664  0E00               	movlw	0
  5352  000666  6E22               	movwf	(___fldiv@b+2)^0,c
  5353  000668  0E00               	movlw	0
  5354  00066A  6E23               	movwf	(___fldiv@b+3)^0,c
  5355  00066C                     l3454:
  5356  00066C  FFFF               	dw	65535	; assembler added errata NOP
  5357  00066E  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5358  000670  0E00               	movlw	0
  5359  000672  6E23               	movwf	(___fldiv@b+3)^0,c
  5360  000674  EF45  F003         	goto	l3460
  5361  000678                     l3458:
  5362  000678  FFFF               	dw	65535	; assembler added errata NOP
  5363  00067A  0E00               	movlw	0
  5364  00067C  6E20               	movwf	___fldiv@b^0,c
  5365  00067E  0E00               	movlw	0
  5366  000680  6E21               	movwf	(___fldiv@b+1)^0,c
  5367  000682  0E00               	movlw	0
  5368  000684  6E22               	movwf	(___fldiv@b+2)^0,c
  5369  000686  0E00               	movlw	0
  5370  000688  6E23               	movwf	(___fldiv@b+3)^0,c
  5371  00068A                     l3460:
  5372  00068A  FFFF               	dw	65535	; assembler added errata NOP
  5373  00068C  5027               	movf	(___fldiv@a+3)^0,w,c
  5374  00068E  0B80               	andlw	128
  5375  000690  1A30               	xorwf	___fldiv@sign^0,f,c
  5376  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  5377  000694  2427               	addwf	(___fldiv@a+3)^0,w,c
  5378  000696  6E38               	movwf	___fldiv@aexp^0,c
  5379  000698  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5380  00069A  EF51  F003         	goto	u2551
  5381  00069E  EF54  F003         	goto	u2550
  5382  0006A2                     u2551:
  5383  0006A2  FFFF               	dw	65535	; assembler added errata NOP
  5384  0006A4  EF56  F003         	goto	l3468
  5385  0006A8                     u2550:
  5386  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  5387  0006AA  8038               	bsf	___fldiv@aexp^0,0,c
  5388  0006AC                     l3468:
  5389  0006AC  FFFF               	dw	65535	; assembler added errata NOP
  5390  0006AE  5038               	movf	___fldiv@aexp^0,w,c
  5391  0006B0  B4D8               	btfsc	status,2,c
  5392  0006B2  EF5D  F003         	goto	u2561
  5393  0006B6  EF60  F003         	goto	u2560
  5394  0006BA                     u2561:
  5395  0006BA  FFFF               	dw	65535	; assembler added errata NOP
  5396  0006BC  EF79  F003         	goto	l3478
  5397  0006C0                     u2560:
  5398  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  5399  0006C2  2838               	incf	___fldiv@aexp^0,w,c
  5400  0006C4  A4D8               	btfss	status,2,c
  5401  0006C6  EF67  F003         	goto	u2571
  5402  0006CA  EF6A  F003         	goto	u2570
  5403  0006CE                     u2571:
  5404  0006CE  FFFF               	dw	65535	; assembler added errata NOP
  5405  0006D0  EF73  F003         	goto	l3474
  5406  0006D4                     u2570:
  5407  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  5408  0006D6  0E00               	movlw	0
  5409  0006D8  6E24               	movwf	___fldiv@a^0,c
  5410  0006DA  0E00               	movlw	0
  5411  0006DC  6E25               	movwf	(___fldiv@a+1)^0,c
  5412  0006DE  0E00               	movlw	0
  5413  0006E0  6E26               	movwf	(___fldiv@a+2)^0,c
  5414  0006E2  0E00               	movlw	0
  5415  0006E4  6E27               	movwf	(___fldiv@a+3)^0,c
  5416  0006E6                     l3474:
  5417  0006E6  FFFF               	dw	65535	; assembler added errata NOP
  5418  0006E8  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5419  0006EA  0E00               	movlw	0
  5420  0006EC  6E27               	movwf	(___fldiv@a+3)^0,c
  5421  0006EE  EF82  F003         	goto	l3480
  5422  0006F2                     l3478:
  5423  0006F2  FFFF               	dw	65535	; assembler added errata NOP
  5424  0006F4  0E00               	movlw	0
  5425  0006F6  6E24               	movwf	___fldiv@a^0,c
  5426  0006F8  0E00               	movlw	0
  5427  0006FA  6E25               	movwf	(___fldiv@a+1)^0,c
  5428  0006FC  0E00               	movlw	0
  5429  0006FE  6E26               	movwf	(___fldiv@a+2)^0,c
  5430  000700  0E00               	movlw	0
  5431  000702  6E27               	movwf	(___fldiv@a+3)^0,c
  5432  000704                     l3480:
  5433  000704  FFFF               	dw	65535	; assembler added errata NOP
  5434  000706  5024               	movf	___fldiv@a^0,w,c
  5435  000708  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5436  00070A  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5437  00070C  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5438  00070E  A4D8               	btfss	status,2,c
  5439  000710  EF8C  F003         	goto	u2581
  5440  000714  EF8F  F003         	goto	u2580
  5441  000718                     u2581:
  5442  000718  FFFF               	dw	65535	; assembler added errata NOP
  5443  00071A  EFA9  F003         	goto	l3492
  5444  00071E                     u2580:
  5445  00071E  FFFF               	dw	65535	; assembler added errata NOP
  5446  000720  0E00               	movlw	0
  5447  000722  6E20               	movwf	___fldiv@b^0,c
  5448  000724  0E00               	movlw	0
  5449  000726  6E21               	movwf	(___fldiv@b+1)^0,c
  5450  000728  0E00               	movlw	0
  5451  00072A  6E22               	movwf	(___fldiv@b+2)^0,c
  5452  00072C  0E00               	movlw	0
  5453  00072E  6E23               	movwf	(___fldiv@b+3)^0,c
  5454  000730  0E80               	movlw	128
  5455  000732  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5456  000734  0E7F               	movlw	127
  5457  000736  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5458  000738                     l3486:
  5459  000738  FFFF               	dw	65535	; assembler added errata NOP
  5460  00073A  5030               	movf	___fldiv@sign^0,w,c
  5461  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5462  00073E  C020  F020         	movff	___fldiv@b,?___fldiv
  5463  000742  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5464  000746  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5465  00074A  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5466  00074E  EF1E  F005         	goto	l1173
  5467  000752                     l3492:
  5468  000752  FFFF               	dw	65535	; assembler added errata NOP
  5469  000754  5037               	movf	___fldiv@bexp^0,w,c
  5470  000756  A4D8               	btfss	status,2,c
  5471  000758  EFB0  F003         	goto	u2591
  5472  00075C  EFB3  F003         	goto	u2590
  5473  000760                     u2591:
  5474  000760  FFFF               	dw	65535	; assembler added errata NOP
  5475  000762  EFBE  F003         	goto	l3500
  5476  000766                     u2590:
  5477  000766  FFFF               	dw	65535	; assembler added errata NOP
  5478  000768  0E00               	movlw	0
  5479  00076A  6E20               	movwf	?___fldiv^0,c
  5480  00076C  0E00               	movlw	0
  5481  00076E  6E21               	movwf	(?___fldiv+1)^0,c
  5482  000770  0E00               	movlw	0
  5483  000772  6E22               	movwf	(?___fldiv+2)^0,c
  5484  000774  0E00               	movlw	0
  5485  000776  6E23               	movwf	(?___fldiv+3)^0,c
  5486  000778  EF1E  F005         	goto	l1173
  5487  00077C                     l3500:
  5488  00077C  FFFF               	dw	65535	; assembler added errata NOP
  5489  00077E  5038               	movf	___fldiv@aexp^0,w,c
  5490  000780  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5491  000784  6A29               	clrf	(??___fldiv+1)^0,c
  5492  000786  5E28               	subwf	??___fldiv^0,f,c
  5493  000788  0E00               	movlw	0
  5494  00078A  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5495  00078C  0E7F               	movlw	127
  5496  00078E  2428               	addwf	??___fldiv^0,w,c
  5497  000790  6E31               	movwf	___fldiv@new_exp^0,c
  5498  000792  0E00               	movlw	0
  5499  000794  2029               	addwfc	(??___fldiv+1)^0,w,c
  5500  000796  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5501  000798  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5502  00079C  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5503  0007A0  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5504  0007A4  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5505  0007A8  0E00               	movlw	0
  5506  0007AA  6E20               	movwf	___fldiv@b^0,c
  5507  0007AC  0E00               	movlw	0
  5508  0007AE  6E21               	movwf	(___fldiv@b+1)^0,c
  5509  0007B0  0E00               	movlw	0
  5510  0007B2  6E22               	movwf	(___fldiv@b+2)^0,c
  5511  0007B4  0E00               	movlw	0
  5512  0007B6  6E23               	movwf	(___fldiv@b+3)^0,c
  5513  0007B8  0E00               	movlw	0
  5514  0007BA  6E33               	movwf	___fldiv@grs^0,c
  5515  0007BC  0E00               	movlw	0
  5516  0007BE  6E34               	movwf	(___fldiv@grs+1)^0,c
  5517  0007C0  0E00               	movlw	0
  5518  0007C2  6E35               	movwf	(___fldiv@grs+2)^0,c
  5519  0007C4  0E00               	movlw	0
  5520  0007C6  6E36               	movwf	(___fldiv@grs+3)^0,c
  5521  0007C8  0E00               	movlw	0
  5522  0007CA  6E38               	movwf	___fldiv@aexp^0,c
  5523  0007CC  EF2A  F004         	goto	l1175
  5524  0007D0                     l3510:
  5525  0007D0  FFFF               	dw	65535	; assembler added errata NOP
  5526  0007D2  5038               	movf	___fldiv@aexp^0,w,c
  5527  0007D4  B4D8               	btfsc	status,2,c
  5528  0007D6  EFEF  F003         	goto	u2601
  5529  0007DA  EFF2  F003         	goto	u2600
  5530  0007DE                     u2601:
  5531  0007DE  FFFF               	dw	65535	; assembler added errata NOP
  5532  0007E0  EF0D  F004         	goto	l3518
  5533  0007E4                     u2600:
  5534  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  5535  0007E6  90D8               	bcf	status,0,c
  5536  0007E8  362C               	rlcf	___fldiv@rem^0,f,c
  5537  0007EA  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5538  0007EC  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5539  0007EE  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5540  0007F0  90D8               	bcf	status,0,c
  5541  0007F2  3620               	rlcf	___fldiv@b^0,f,c
  5542  0007F4  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5543  0007F6  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5544  0007F8  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5545  0007FA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5546  0007FC  EF02  F004         	goto	u2611
  5547  000800  EF05  F004         	goto	u2610
  5548  000804                     u2611:
  5549  000804  FFFF               	dw	65535	; assembler added errata NOP
  5550  000806  EF07  F004         	goto	l1178
  5551  00080A                     u2610:
  5552  00080A  FFFF               	dw	65535	; assembler added errata NOP
  5553  00080C  8020               	bsf	___fldiv@b^0,0,c
  5554  00080E                     l1178:
  5555  00080E  FFFF               	dw	65535	; assembler added errata NOP
  5556  000810  90D8               	bcf	status,0,c
  5557  000812  3633               	rlcf	___fldiv@grs^0,f,c
  5558  000814  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5559  000816  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5560  000818  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5561  00081A                     l3518:
  5562  00081A  FFFF               	dw	65535	; assembler added errata NOP
  5563  00081C  5024               	movf	___fldiv@a^0,w,c
  5564  00081E  5C2C               	subwf	___fldiv@rem^0,w,c
  5565  000820  5025               	movf	(___fldiv@a+1)^0,w,c
  5566  000822  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5567  000824  5026               	movf	(___fldiv@a+2)^0,w,c
  5568  000826  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5569  000828  5027               	movf	(___fldiv@a+3)^0,w,c
  5570  00082A  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5571  00082C  A0D8               	btfss	status,0,c
  5572  00082E  EF1B  F004         	goto	u2621
  5573  000832  EF1E  F004         	goto	u2620
  5574  000836                     u2621:
  5575  000836  FFFF               	dw	65535	; assembler added errata NOP
  5576  000838  EF28  F004         	goto	l3524
  5577  00083C                     u2620:
  5578  00083C  FFFF               	dw	65535	; assembler added errata NOP
  5579  00083E  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5580  000840  5024               	movf	___fldiv@a^0,w,c
  5581  000842  5E2C               	subwf	___fldiv@rem^0,f,c
  5582  000844  5025               	movf	(___fldiv@a+1)^0,w,c
  5583  000846  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5584  000848  5026               	movf	(___fldiv@a+2)^0,w,c
  5585  00084A  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5586  00084C  5027               	movf	(___fldiv@a+3)^0,w,c
  5587  00084E  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5588  000850                     l3524:
  5589  000850  FFFF               	dw	65535	; assembler added errata NOP
  5590  000852  2A38               	incf	___fldiv@aexp^0,f,c
  5591  000854                     l1175:
  5592  000854  FFFF               	dw	65535	; assembler added errata NOP
  5593  000856  0E19               	movlw	25
  5594  000858  6438               	cpfsgt	___fldiv@aexp^0,c
  5595  00085A  EF31  F004         	goto	u2631
  5596  00085E  EF34  F004         	goto	u2630
  5597  000862                     u2631:
  5598  000862  FFFF               	dw	65535	; assembler added errata NOP
  5599  000864  EFE8  F003         	goto	l3510
  5600  000868                     u2630:
  5601  000868  FFFF               	dw	65535	; assembler added errata NOP
  5602  00086A  502C               	movf	___fldiv@rem^0,w,c
  5603  00086C  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5604  00086E  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5605  000870  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5606  000872  B4D8               	btfsc	status,2,c
  5607  000874  EF3E  F004         	goto	u2641
  5608  000878  EF41  F004         	goto	u2640
  5609  00087C                     u2641:
  5610  00087C  FFFF               	dw	65535	; assembler added errata NOP
  5611  00087E  EF5E  F004         	goto	l3536
  5612  000882                     u2640:
  5613  000882  FFFF               	dw	65535	; assembler added errata NOP
  5614  000884  8033               	bsf	___fldiv@grs^0,0,c
  5615  000886  EF5E  F004         	goto	l3536
  5616  00088A                     l3530:
  5617  00088A  FFFF               	dw	65535	; assembler added errata NOP
  5618  00088C  90D8               	bcf	status,0,c
  5619  00088E  3620               	rlcf	___fldiv@b^0,f,c
  5620  000890  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5621  000892  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5622  000894  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5623  000896  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5624  000898  EF50  F004         	goto	u2651
  5625  00089C  EF53  F004         	goto	u2650
  5626  0008A0                     u2651:
  5627  0008A0  FFFF               	dw	65535	; assembler added errata NOP
  5628  0008A2  EF55  F004         	goto	l1184
  5629  0008A6                     u2650:
  5630  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5631  0008A8  8020               	bsf	___fldiv@b^0,0,c
  5632  0008AA                     l1184:
  5633  0008AA  FFFF               	dw	65535	; assembler added errata NOP
  5634  0008AC  90D8               	bcf	status,0,c
  5635  0008AE  3633               	rlcf	___fldiv@grs^0,f,c
  5636  0008B0  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5637  0008B2  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5638  0008B4  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5639  0008B6  0631               	decf	___fldiv@new_exp^0,f,c
  5640  0008B8  A0D8               	btfss	status,0,c
  5641  0008BA  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5642  0008BC                     l3536:
  5643  0008BC  FFFF               	dw	65535	; assembler added errata NOP
  5644  0008BE  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5645  0008C0  EF64  F004         	goto	u2661
  5646  0008C4  EF67  F004         	goto	u2660
  5647  0008C8                     u2661:
  5648  0008C8  FFFF               	dw	65535	; assembler added errata NOP
  5649  0008CA  EF45  F004         	goto	l3530
  5650  0008CE                     u2660:
  5651  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5652  0008D0  0E00               	movlw	0
  5653  0008D2  6E38               	movwf	___fldiv@aexp^0,c
  5654  0008D4  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5655  0008D6  EF6F  F004         	goto	u2671
  5656  0008DA  EF72  F004         	goto	u2670
  5657  0008DE                     u2671:
  5658  0008DE  FFFF               	dw	65535	; assembler added errata NOP
  5659  0008E0  EF9D  F004         	goto	l1186
  5660  0008E4                     u2670:
  5661  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5662  0008E6  0EFF               	movlw	255
  5663  0008E8  1433               	andwf	___fldiv@grs^0,w,c
  5664  0008EA  6E28               	movwf	??___fldiv^0,c
  5665  0008EC  0EFF               	movlw	255
  5666  0008EE  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5667  0008F0  6E29               	movwf	(??___fldiv+1)^0,c
  5668  0008F2  0EFF               	movlw	255
  5669  0008F4  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5670  0008F6  6E2A               	movwf	(??___fldiv+2)^0,c
  5671  0008F8  0E7F               	movlw	127
  5672  0008FA  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5673  0008FC  6E2B               	movwf	(??___fldiv+3)^0,c
  5674  0008FE  5028               	movf	??___fldiv^0,w,c
  5675  000900  1029               	iorwf	(??___fldiv+1)^0,w,c
  5676  000902  102A               	iorwf	(??___fldiv+2)^0,w,c
  5677  000904  102B               	iorwf	(??___fldiv+3)^0,w,c
  5678  000906  B4D8               	btfsc	status,2,c
  5679  000908  EF88  F004         	goto	u2681
  5680  00090C  EF8B  F004         	goto	u2680
  5681  000910                     u2681:
  5682  000910  FFFF               	dw	65535	; assembler added errata NOP
  5683  000912  EF91  F004         	goto	l1187
  5684  000916                     u2680:
  5685  000916  FFFF               	dw	65535	; assembler added errata NOP
  5686  000918                     l3544:
  5687  000918  FFFF               	dw	65535	; assembler added errata NOP
  5688  00091A  0E01               	movlw	1
  5689  00091C  6E38               	movwf	___fldiv@aexp^0,c
  5690  00091E  EF9D  F004         	goto	l1186
  5691  000922                     l1187:
  5692  000922  FFFF               	dw	65535	; assembler added errata NOP
  5693  000924  A020               	btfss	___fldiv@b^0,0,c
  5694  000926  EF97  F004         	goto	u2691
  5695  00092A  EF9A  F004         	goto	u2690
  5696  00092E                     u2691:
  5697  00092E  FFFF               	dw	65535	; assembler added errata NOP
  5698  000930  EF9D  F004         	goto	l1186
  5699  000934                     u2690:
  5700  000934  FFFF               	dw	65535	; assembler added errata NOP
  5701  000936  EF8C  F004         	goto	l3544
  5702  00093A                     l1186:
  5703  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5704  00093C  5038               	movf	___fldiv@aexp^0,w,c
  5705  00093E  B4D8               	btfsc	status,2,c
  5706  000940  EFA4  F004         	goto	u2701
  5707  000944  EFA7  F004         	goto	u2700
  5708  000948                     u2701:
  5709  000948  FFFF               	dw	65535	; assembler added errata NOP
  5710  00094A  EFCE  F004         	goto	l3556
  5711  00094E                     u2700:
  5712  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5713  000950  0E01               	movlw	1
  5714  000952  2620               	addwf	___fldiv@b^0,f,c
  5715  000954  0E00               	movlw	0
  5716  000956  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5717  000958  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5718  00095A  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5719  00095C  A023               	btfss	(___fldiv@b+3)^0,0,c
  5720  00095E  EFB3  F004         	goto	u2711
  5721  000962  EFB6  F004         	goto	u2710
  5722  000966                     u2711:
  5723  000966  FFFF               	dw	65535	; assembler added errata NOP
  5724  000968  EFCE  F004         	goto	l3556
  5725  00096C                     u2710:
  5726  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5727  00096E  C020  F028         	movff	___fldiv@b,??___fldiv
  5728  000972  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5729  000976  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5730  00097A  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5731  00097E  342B               	rlcf	(??___fldiv+3)^0,w,c
  5732  000980  322B               	rrcf	(??___fldiv+3)^0,f,c
  5733  000982  322A               	rrcf	(??___fldiv+2)^0,f,c
  5734  000984  3229               	rrcf	(??___fldiv+1)^0,f,c
  5735  000986  3228               	rrcf	??___fldiv^0,f,c
  5736  000988  C028  F020         	movff	??___fldiv,___fldiv@b
  5737  00098C  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5738  000990  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5739  000994  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5740  000998  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5741  00099A  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5742  00099C                     l3556:
  5743  00099C  FFFF               	dw	65535	; assembler added errata NOP
  5744  00099E  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5745  0009A0  EFDA  F004         	goto	u2721
  5746  0009A4  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5747  0009A6  E109               	bnz	u2720
  5748  0009A8  2831               	incf	___fldiv@new_exp^0,w,c
  5749  0009AA  A0D8               	btfss	status,0,c
  5750  0009AC  EFDA  F004         	goto	u2721
  5751  0009B0  EFDD  F004         	goto	u2720
  5752  0009B4                     u2721:
  5753  0009B4  FFFF               	dw	65535	; assembler added errata NOP
  5754  0009B6  EFE9  F004         	goto	l3560
  5755  0009BA                     u2720:
  5756  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5757  0009BC  0E00               	movlw	0
  5758  0009BE  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5759  0009C0  6831               	setf	___fldiv@new_exp^0,c
  5760  0009C2  0E00               	movlw	0
  5761  0009C4  6E20               	movwf	___fldiv@b^0,c
  5762  0009C6  0E00               	movlw	0
  5763  0009C8  6E21               	movwf	(___fldiv@b+1)^0,c
  5764  0009CA  0E00               	movlw	0
  5765  0009CC  6E22               	movwf	(___fldiv@b+2)^0,c
  5766  0009CE  0E00               	movlw	0
  5767  0009D0  6E23               	movwf	(___fldiv@b+3)^0,c
  5768  0009D2                     l3560:
  5769  0009D2  FFFF               	dw	65535	; assembler added errata NOP
  5770  0009D4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5771  0009D6  EFF8  F004         	goto	u2730
  5772  0009DA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5773  0009DC  E106               	bnz	u2731
  5774  0009DE  0431               	decf	___fldiv@new_exp^0,w,c
  5775  0009E0  B0D8               	btfsc	status,0,c
  5776  0009E2  EFF5  F004         	goto	u2731
  5777  0009E6  EFF8  F004         	goto	u2730
  5778  0009EA                     u2731:
  5779  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  5780  0009EC  EF07  F005         	goto	l3564
  5781  0009F0                     u2730:
  5782  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5783  0009F2  0E00               	movlw	0
  5784  0009F4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5785  0009F6  0E00               	movlw	0
  5786  0009F8  6E31               	movwf	___fldiv@new_exp^0,c
  5787  0009FA  0E00               	movlw	0
  5788  0009FC  6E20               	movwf	___fldiv@b^0,c
  5789  0009FE  0E00               	movlw	0
  5790  000A00  6E21               	movwf	(___fldiv@b+1)^0,c
  5791  000A02  0E00               	movlw	0
  5792  000A04  6E22               	movwf	(___fldiv@b+2)^0,c
  5793  000A06  0E00               	movlw	0
  5794  000A08  6E23               	movwf	(___fldiv@b+3)^0,c
  5795  000A0A  0E00               	movlw	0
  5796  000A0C  6E30               	movwf	___fldiv@sign^0,c
  5797  000A0E                     l3564:
  5798  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  5799  000A10  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5800  000A14  A037               	btfss	___fldiv@bexp^0,0,c
  5801  000A16  EF0F  F005         	goto	u2741
  5802  000A1A  EF12  F005         	goto	u2740
  5803  000A1E                     u2741:
  5804  000A1E  FFFF               	dw	65535	; assembler added errata NOP
  5805  000A20  EF16  F005         	goto	l3570
  5806  000A24                     u2740:
  5807  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5808  000A26  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5809  000A28  EF18  F005         	goto	l3572
  5810  000A2C                     l3570:
  5811  000A2C  FFFF               	dw	65535	; assembler added errata NOP
  5812  000A2E  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5813  000A30                     l3572:
  5814  000A30  FFFF               	dw	65535	; assembler added errata NOP
  5815  000A32  90D8               	bcf	status,0,c
  5816  000A34  3037               	rrcf	___fldiv@bexp^0,w,c
  5817  000A36  6E23               	movwf	(___fldiv@b+3)^0,c
  5818  000A38  EF9C  F003         	goto	l3486
  5819  000A3C                     l1173:
  5820  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  5821  000A3E  0012               	return		;funcret
  5822  000A40  FFFF               	dw	65535	; errata NOP
  5823  000A42                     __end_of___fldiv:
  5824                           	callstack 0
  5825                           
  5826 ;; *************** function _releaseObj *****************
  5827 ;; Defined at:
  5828 ;;		line 614 in file "motors.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;		None
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;		None
  5833 ;; Return value:  Size  Location     Type
  5834 ;;                  1    wreg      void 
  5835 ;; Registers used:
  5836 ;;		wreg, status,2, status,0, cstack
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5842 ;;      Params:         0       0       0       0       0       0       0
  5843 ;;      Locals:         0       0       0       0       0       0       0
  5844 ;;      Temps:          0       0       0       0       0       0       0
  5845 ;;      Totals:         0       0       0       0       0       0       0
  5846 ;;Total ram usage:        0 bytes
  5847 ;; Hardware stack levels used:    1
  5848 ;; Hardware stack levels required when called:    5
  5849 ;; This function calls:
  5850 ;;		_stepMade
  5851 ;; This function is called by:
  5852 ;;		_executeData
  5853 ;; This function uses a non-reentrant model
  5854 ;;
  5855                           
  5856                           	psect	text34
  5857  0023BC                     __ptext34:
  5858                           	callstack 0
  5859  0023BC                     _releaseObj:
  5860                           	callstack 0
  5861  0023BC  FFFF               	dw	65535	; assembler added errata NOP
  5862  0023BE                     
  5863                           ;motors.c: 615:     LATDbits.LATD1 = 0;
  5864  0023BE  928C               	bcf	140,1,c	;volatile
  5865                           
  5866                           ;motors.c: 619:     T2CONbits.TMR2ON = 1;
  5867  0023C0  84CA               	bsf	202,2,c	;volatile
  5868  0023C2                     l3942:
  5869  0023C2  FFFF               	dw	65535	; assembler added errata NOP
  5870  0023C4  EC49  F012         	call	_stepMade	;wreg free
  5871  0023C8  5012               	movf	?_stepMade^0,w,c
  5872  0023CA  1013               	iorwf	(?_stepMade+1)^0,w,c
  5873  0023CC  B4D8               	btfsc	status,2,c
  5874  0023CE  EFEB  F011         	goto	u3341
  5875  0023D2  EFEE  F011         	goto	u3340
  5876  0023D6                     u3341:
  5877  0023D6  FFFF               	dw	65535	; assembler added errata NOP
  5878  0023D8  EFE1  F011         	goto	l3942
  5879  0023DC                     u3340:
  5880  0023DC  FFFF               	dw	65535	; assembler added errata NOP
  5881  0023DE                     
  5882                           ;motors.c: 621:     T2CONbits.TMR2ON = 1;
  5883  0023DE  84CA               	bsf	202,2,c	;volatile
  5884  0023E0                     
  5885                           ;motors.c: 622:     TMR2 = 0;
  5886  0023E0  0E00               	movlw	0
  5887  0023E2  6ECC               	movwf	204,c	;volatile
  5888  0023E4  0012               	return		;funcret
  5889  0023E6  FFFF               	dw	65535	; errata NOP
  5890  0023E8                     __end_of_releaseObj:
  5891                           	callstack 0
  5892                           
  5893 ;; *************** function _pickObject *****************
  5894 ;; Defined at:
  5895 ;;		line 600 in file "motors.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;		None
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;		None
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  1    wreg      void 
  5902 ;; Registers used:
  5903 ;;		wreg, status,2, status,0, cstack
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5909 ;;      Params:         0       0       0       0       0       0       0
  5910 ;;      Locals:         0       0       0       0       0       0       0
  5911 ;;      Temps:          0       0       0       0       0       0       0
  5912 ;;      Totals:         0       0       0       0       0       0       0
  5913 ;;Total ram usage:        0 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    5
  5916 ;; This function calls:
  5917 ;;		_stepMade
  5918 ;; This function is called by:
  5919 ;;		_executeData
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           	psect	text35
  5924  0023E8                     __ptext35:
  5925                           	callstack 0
  5926  0023E8                     _pickObject:
  5927                           	callstack 0
  5928  0023E8  FFFF               	dw	65535	; assembler added errata NOP
  5929  0023EA                     
  5930                           ;motors.c: 601:     LATDbits.LATD1 = 1;
  5931  0023EA  828C               	bsf	140,1,c	;volatile
  5932                           
  5933                           ;motors.c: 605:     T2CONbits.TMR2ON = 1;
  5934  0023EC  84CA               	bsf	202,2,c	;volatile
  5935  0023EE                     l3936:
  5936  0023EE  FFFF               	dw	65535	; assembler added errata NOP
  5937  0023F0  EC49  F012         	call	_stepMade	;wreg free
  5938  0023F4  5012               	movf	?_stepMade^0,w,c
  5939  0023F6  1013               	iorwf	(?_stepMade+1)^0,w,c
  5940  0023F8  B4D8               	btfsc	status,2,c
  5941  0023FA  EF01  F012         	goto	u3331
  5942  0023FE  EF04  F012         	goto	u3330
  5943  002402                     u3331:
  5944  002402  FFFF               	dw	65535	; assembler added errata NOP
  5945  002404  EFF7  F011         	goto	l3936
  5946  002408                     u3330:
  5947  002408  FFFF               	dw	65535	; assembler added errata NOP
  5948  00240A                     
  5949                           ;motors.c: 607:     T2CONbits.TMR2ON = 1;
  5950  00240A  84CA               	bsf	202,2,c	;volatile
  5951  00240C                     
  5952                           ;motors.c: 608:     TMR2 = 0;
  5953  00240C  0E00               	movlw	0
  5954  00240E  6ECC               	movwf	204,c	;volatile
  5955  002410  0012               	return		;funcret
  5956  002412  FFFF               	dw	65535	; errata NOP
  5957  002414                     __end_of_pickObject:
  5958                           	callstack 0
  5959                           
  5960 ;; *************** function _moveToPoint *****************
  5961 ;; Defined at:
  5962 ;;		line 264 in file "motors.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;  x1              2   21[COMRAM] unsigned int 
  5965 ;;  y1              2   23[COMRAM] unsigned int 
  5966 ;;  x2              2   25[COMRAM] unsigned int 
  5967 ;;  y2              2   27[COMRAM] unsigned int 
  5968 ;; Auto vars:     Size  Location     Type
  5969 ;;  MOT2Directio    1   34[COMRAM] unsigned char 
  5970 ;;  MOT1Directio    1   33[COMRAM] unsigned char 
  5971 ;;  keepMovingY     1   32[COMRAM] unsigned char 
  5972 ;;  keepMovingX     1   31[COMRAM] unsigned char 
  5973 ;; Return value:  Size  Location     Type
  5974 ;;                  1    wreg      unsigned char 
  5975 ;; Registers used:
  5976 ;;		wreg, status,2, status,0, cstack
  5977 ;; Tracked objects:
  5978 ;;		On entry : 0/0
  5979 ;;		On exit  : 0/0
  5980 ;;		Unchanged: 0/0
  5981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5982 ;;      Params:         8       0       0       0       0       0       0
  5983 ;;      Locals:         4       0       0       0       0       0       0
  5984 ;;      Temps:          2       0       0       0       0       0       0
  5985 ;;      Totals:        14       0       0       0       0       0       0
  5986 ;;Total ram usage:       14 bytes
  5987 ;; Hardware stack levels used:    1
  5988 ;; Hardware stack levels required when called:    5
  5989 ;; This function calls:
  5990 ;;		_resetStep
  5991 ;;		_setDirection
  5992 ;;		_stepCounter
  5993 ;;		_stepMade
  5994 ;; This function is called by:
  5995 ;;		_executeData
  5996 ;; This function uses a non-reentrant model
  5997 ;;
  5998                           
  5999                           	psect	text36
  6000  000A42                     __ptext36:
  6001                           	callstack 0
  6002  000A42                     _moveToPoint:
  6003                           	callstack 0
  6004  000A42  FFFF               	dw	65535	; assembler added errata NOP
  6005  000A44                     
  6006                           ;motors.c: 266:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 269:     if(x2
      +                           > maxX || y2 > maxY){
  6007  000A44  0EE9               	movlw	233
  6008  000A46  5C1A               	subwf	moveToPoint@x2^0,w,c
  6009  000A48  0E03               	movlw	3
  6010  000A4A  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  6011  000A4C  B0D8               	btfsc	status,0,c
  6012  000A4E  EF2B  F005         	goto	u2981
  6013  000A52  EF2E  F005         	goto	u2980
  6014  000A56                     u2981:
  6015  000A56  FFFF               	dw	65535	; assembler added errata NOP
  6016  000A58  EF3B  F005         	goto	l3722
  6017  000A5C                     u2980:
  6018  000A5C  FFFF               	dw	65535	; assembler added errata NOP
  6019  000A5E  0EE9               	movlw	233
  6020  000A60  5C1C               	subwf	moveToPoint@y2^0,w,c
  6021  000A62  0E03               	movlw	3
  6022  000A64  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  6023  000A66  A0D8               	btfss	status,0,c
  6024  000A68  EF38  F005         	goto	u2991
  6025  000A6C  EF3B  F005         	goto	u2990
  6026  000A70                     u2991:
  6027  000A70  FFFF               	dw	65535	; assembler added errata NOP
  6028  000A72  EF3F  F005         	goto	l3726
  6029  000A76                     u2990:
  6030  000A76                     l3722:
  6031  000A76  FFFF               	dw	65535	; assembler added errata NOP
  6032                           
  6033                           ;motors.c: 270:         return(5);
  6034  000A78  0E05               	movlw	5
  6035  000A7A  EF7F  F006         	goto	l141
  6036  000A7E                     l3726:
  6037  000A7E  FFFF               	dw	65535	; assembler added errata NOP
  6038                           
  6039                           ;motors.c: 274:     if((x2 - x1) > 0){
  6040  000A80  5016               	movf	moveToPoint@x1^0,w,c
  6041  000A82  5C1A               	subwf	moveToPoint@x2^0,w,c
  6042  000A84  6E1E               	movwf	??_moveToPoint^0,c
  6043  000A86  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6044  000A88  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  6045  000A8A  6E1F               	movwf	(??_moveToPoint+1)^0,c
  6046  000A8C  501E               	movf	??_moveToPoint^0,w,c
  6047  000A8E  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  6048  000A90  B4D8               	btfsc	status,2,c
  6049  000A92  EF4D  F005         	goto	u3001
  6050  000A96  EF50  F005         	goto	u3000
  6051  000A9A                     u3001:
  6052  000A9A  FFFF               	dw	65535	; assembler added errata NOP
  6053  000A9C  EF5A  F005         	goto	l3732
  6054  000AA0                     u3000:
  6055  000AA0  FFFF               	dw	65535	; assembler added errata NOP
  6056  000AA2                     
  6057                           ;motors.c: 275:         setDirection(1, 0);
  6058  000AA2  0E00               	movlw	0
  6059  000AA4  6E12               	movwf	setDirection@motor^0,c
  6060  000AA6  0E01               	movlw	1
  6061  000AA8  ECDB  F010         	call	_setDirection
  6062  000AAC                     
  6063                           ;motors.c: 276:         MOT1Direction = 1;
  6064  000AAC  0E01               	movlw	1
  6065  000AAE  6E22               	movwf	moveToPoint@MOT1Direction^0,c
  6066                           
  6067                           ;motors.c: 277:     }else{
  6068  000AB0  EF62  F005         	goto	l3736
  6069  000AB4                     l3732:
  6070  000AB4  FFFF               	dw	65535	; assembler added errata NOP
  6071                           
  6072                           ;motors.c: 278:         setDirection(0, 0);
  6073  000AB6  0E00               	movlw	0
  6074  000AB8  6E12               	movwf	setDirection@motor^0,c
  6075  000ABA  0E00               	movlw	0
  6076  000ABC  ECDB  F010         	call	_setDirection
  6077  000AC0                     
  6078                           ;motors.c: 279:         MOT1Direction = 0;
  6079  000AC0  0E00               	movlw	0
  6080  000AC2  6E22               	movwf	moveToPoint@MOT1Direction^0,c
  6081  000AC4                     l3736:
  6082  000AC4  FFFF               	dw	65535	; assembler added errata NOP
  6083                           
  6084                           ;motors.c: 282:     if((y2 - y1) > 0){
  6085  000AC6  5018               	movf	moveToPoint@y1^0,w,c
  6086  000AC8  5C1C               	subwf	moveToPoint@y2^0,w,c
  6087  000ACA  6E1E               	movwf	??_moveToPoint^0,c
  6088  000ACC  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6089  000ACE  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  6090  000AD0  6E1F               	movwf	(??_moveToPoint+1)^0,c
  6091  000AD2  501E               	movf	??_moveToPoint^0,w,c
  6092  000AD4  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  6093  000AD6  B4D8               	btfsc	status,2,c
  6094  000AD8  EF70  F005         	goto	u3011
  6095  000ADC  EF73  F005         	goto	u3010
  6096  000AE0                     u3011:
  6097  000AE0  FFFF               	dw	65535	; assembler added errata NOP
  6098  000AE2  EF7D  F005         	goto	l3742
  6099  000AE6                     u3010:
  6100  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  6101  000AE8                     
  6102                           ;motors.c: 283:         setDirection(1, 1);
  6103  000AE8  0E01               	movlw	1
  6104  000AEA  6E12               	movwf	setDirection@motor^0,c
  6105  000AEC  0E01               	movlw	1
  6106  000AEE  ECDB  F010         	call	_setDirection
  6107  000AF2                     
  6108                           ;motors.c: 284:         MOT2Direction = 1;
  6109  000AF2  0E01               	movlw	1
  6110  000AF4  6E23               	movwf	moveToPoint@MOT2Direction^0,c
  6111                           
  6112                           ;motors.c: 285:     }else{
  6113  000AF6  EF85  F005         	goto	l3746
  6114  000AFA                     l3742:
  6115  000AFA  FFFF               	dw	65535	; assembler added errata NOP
  6116                           
  6117                           ;motors.c: 286:         setDirection(0, 1);
  6118  000AFC  0E01               	movlw	1
  6119  000AFE  6E12               	movwf	setDirection@motor^0,c
  6120  000B00  0E00               	movlw	0
  6121  000B02  ECDB  F010         	call	_setDirection
  6122  000B06                     
  6123                           ;motors.c: 287:         MOT2Direction = 0;
  6124  000B06  0E00               	movlw	0
  6125  000B08  6E23               	movwf	moveToPoint@MOT2Direction^0,c
  6126  000B0A                     l3746:
  6127  000B0A  FFFF               	dw	65535	; assembler added errata NOP
  6128                           
  6129                           ;motors.c: 290:     unsigned char keepMovingX = 1;
  6130  000B0C  0E01               	movlw	1
  6131  000B0E  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6132  000B10                     
  6133                           ;motors.c: 291:     unsigned char keepMovingY = 1;
  6134  000B10  0E01               	movlw	1
  6135  000B12  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6136  000B14                     
  6137                           ;motors.c: 294:     T2CONbits.TMR2ON = 1;
  6138  000B14  84CA               	bsf	202,2,c	;volatile
  6139  000B16                     
  6140                           ;motors.c: 296:     tm0Error = 0;
  6141  000B16  0E00               	movlw	0
  6142  000B18  6E5C               	movwf	(_tm0Error+1)^0,c
  6143  000B1A  0E00               	movlw	0
  6144  000B1C  6E5B               	movwf	_tm0Error^0,c
  6145  000B1E                     
  6146                           ;motors.c: 297:     tm0Limit = 100;
  6147  000B1E  0E64               	movlw	100
  6148  000B20  6E68               	movwf	_tm0Limit^0,c
  6149  000B22                     
  6150                           ;motors.c: 298:     T0CONbits.TMR0ON = 1;
  6151  000B22  8ED5               	bsf	213,7,c	;volatile
  6152                           
  6153                           ;motors.c: 300:     while(keepMovingX || keepMovingY){
  6154  000B24  EF5F  F006         	goto	l3792
  6155  000B28                     l3758:
  6156  000B28  FFFF               	dw	65535	; assembler added errata NOP
  6157                           
  6158                           ;motors.c: 303:         if(tm0Error){
  6159  000B2A  505B               	movf	_tm0Error^0,w,c
  6160  000B2C  105C               	iorwf	(_tm0Error+1)^0,w,c
  6161  000B2E  B4D8               	btfsc	status,2,c
  6162  000B30  EF9C  F005         	goto	u3021
  6163  000B34  EF9F  F005         	goto	u3020
  6164  000B38                     u3021:
  6165  000B38  FFFF               	dw	65535	; assembler added errata NOP
  6166  000B3A  EFA8  F005         	goto	l3764
  6167  000B3E                     u3020:
  6168  000B3E  FFFF               	dw	65535	; assembler added errata NOP
  6169  000B40                     
  6170                           ;motors.c: 305:             LATAbits.LATA2 = 0;
  6171  000B40  9489               	bcf	137,2,c	;volatile
  6172                           
  6173                           ;motors.c: 306:             LATBbits.LATB4 = 0;
  6174  000B42  988A               	bcf	138,4,c	;volatile
  6175  000B44                     
  6176                           ;motors.c: 307:             tm0Error = 4;
  6177  000B44  0E00               	movlw	0
  6178  000B46  6E5C               	movwf	(_tm0Error+1)^0,c
  6179  000B48  0E04               	movlw	4
  6180  000B4A  6E5B               	movwf	_tm0Error^0,c
  6181                           
  6182                           ;motors.c: 308:             break;
  6183  000B4C  EF73  F006         	goto	l149
  6184  000B50                     l3764:
  6185  000B50  FFFF               	dw	65535	; assembler added errata NOP
  6186                           
  6187                           ;motors.c: 316:         if(MOT1Direction == 1){
  6188  000B52  0422               	decf	moveToPoint@MOT1Direction^0,w,c
  6189  000B54  A4D8               	btfss	status,2,c
  6190  000B56  EFAF  F005         	goto	u3031
  6191  000B5A  EFB2  F005         	goto	u3030
  6192  000B5E                     u3031:
  6193  000B5E  FFFF               	dw	65535	; assembler added errata NOP
  6194  000B60  EFD0  F005         	goto	l3770
  6195  000B64                     u3030:
  6196  000B64  FFFF               	dw	65535	; assembler added errata NOP
  6197  000B66                     
  6198                           ;motors.c: 317:             if(x1 + stepCounter() == x2){
  6199  000B66  EC8B  F012         	call	_stepCounter	;wreg free
  6200  000B6A  5016               	movf	moveToPoint@x1^0,w,c
  6201  000B6C  2612               	addwf	?_stepCounter^0,f,c
  6202  000B6E  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6203  000B70  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6204  000B72  501A               	movf	moveToPoint@x2^0,w,c
  6205  000B74  1812               	xorwf	?_stepCounter^0,w,c
  6206  000B76  E107               	bnz	u3041
  6207  000B78  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6208  000B7A  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6209  000B7C  A4D8               	btfss	status,2,c
  6210  000B7E  EFC3  F005         	goto	u3041
  6211  000B82  EFC6  F005         	goto	u3040
  6212  000B86                     u3041:
  6213  000B86  FFFF               	dw	65535	; assembler added errata NOP
  6214  000B88  EFCC  F005         	goto	l151
  6215  000B8C                     u3040:
  6216  000B8C  FFFF               	dw	65535	; assembler added errata NOP
  6217  000B8E                     l3768:
  6218  000B8E  FFFF               	dw	65535	; assembler added errata NOP
  6219                           
  6220                           ;motors.c: 319:                 keepMovingX = 0;
  6221  000B90  0E00               	movlw	0
  6222  000B92  6E20               	movwf	moveToPoint@keepMovingX^0,c
  6223                           
  6224                           ;motors.c: 320:             }else{
  6225  000B94  EFF7  F005         	goto	l3776
  6226  000B98                     l151:
  6227  000B98  FFFF               	dw	65535	; assembler added errata NOP
  6228                           
  6229                           ;motors.c: 322:                 LATAbits.LATA2 = 1;
  6230  000B9A  8489               	bsf	137,2,c	;volatile
  6231  000B9C  EFF7  F005         	goto	l3776
  6232  000BA0                     l3770:
  6233  000BA0  FFFF               	dw	65535	; assembler added errata NOP
  6234  000BA2  5022               	movf	moveToPoint@MOT1Direction^0,w,c
  6235  000BA4  A4D8               	btfss	status,2,c
  6236  000BA6  EFD7  F005         	goto	u3051
  6237  000BAA  EFDA  F005         	goto	u3050
  6238  000BAE                     u3051:
  6239  000BAE  FFFF               	dw	65535	; assembler added errata NOP
  6240  000BB0  EFF7  F005         	goto	l3776
  6241  000BB4                     u3050:
  6242  000BB4  FFFF               	dw	65535	; assembler added errata NOP
  6243  000BB6                     
  6244                           ;motors.c: 325:             if(x1 - stepCounter() == x2){
  6245  000BB6  EC8B  F012         	call	_stepCounter	;wreg free
  6246  000BBA  C016  F01E         	movff	moveToPoint@x1,??_moveToPoint
  6247  000BBE  C017  F01F         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6248  000BC2  5012               	movf	?_stepCounter^0,w,c
  6249  000BC4  5E1E               	subwf	??_moveToPoint^0,f,c
  6250  000BC6  5013               	movf	(?_stepCounter+1)^0,w,c
  6251  000BC8  5A1F               	subwfb	(??_moveToPoint+1)^0,f,c
  6252  000BCA  501A               	movf	moveToPoint@x2^0,w,c
  6253  000BCC  181E               	xorwf	??_moveToPoint^0,w,c
  6254  000BCE  E107               	bnz	u3061
  6255  000BD0  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6256  000BD2  181F               	xorwf	(??_moveToPoint+1)^0,w,c
  6257  000BD4  A4D8               	btfss	status,2,c
  6258  000BD6  EFEF  F005         	goto	u3061
  6259  000BDA  EFF2  F005         	goto	u3060
  6260  000BDE                     u3061:
  6261  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  6262  000BE0  EFF5  F005         	goto	l155
  6263  000BE4                     u3060:
  6264  000BE4  FFFF               	dw	65535	; assembler added errata NOP
  6265  000BE6  EFC7  F005         	goto	l3768
  6266  000BEA                     l155:
  6267  000BEA  FFFF               	dw	65535	; assembler added errata NOP
  6268                           
  6269                           ;motors.c: 330:                 LATAbits.LATA2 = 1;
  6270  000BEC  8489               	bsf	137,2,c	;volatile
  6271  000BEE                     l3776:
  6272  000BEE  FFFF               	dw	65535	; assembler added errata NOP
  6273                           
  6274                           ;motors.c: 334:         if(MOT2Direction == 1){
  6275  000BF0  0423               	decf	moveToPoint@MOT2Direction^0,w,c
  6276  000BF2  A4D8               	btfss	status,2,c
  6277  000BF4  EFFE  F005         	goto	u3071
  6278  000BF8  EF01  F006         	goto	u3070
  6279  000BFC                     u3071:
  6280  000BFC  FFFF               	dw	65535	; assembler added errata NOP
  6281  000BFE  EF1F  F006         	goto	l3782
  6282  000C02                     u3070:
  6283  000C02  FFFF               	dw	65535	; assembler added errata NOP
  6284  000C04                     
  6285                           ;motors.c: 336:             if(y1 + stepCounter() == y2){
  6286  000C04  EC8B  F012         	call	_stepCounter	;wreg free
  6287  000C08  5018               	movf	moveToPoint@y1^0,w,c
  6288  000C0A  2612               	addwf	?_stepCounter^0,f,c
  6289  000C0C  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6290  000C0E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6291  000C10  501C               	movf	moveToPoint@y2^0,w,c
  6292  000C12  1812               	xorwf	?_stepCounter^0,w,c
  6293  000C14  E107               	bnz	u3081
  6294  000C16  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6295  000C18  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6296  000C1A  A4D8               	btfss	status,2,c
  6297  000C1C  EF12  F006         	goto	u3081
  6298  000C20  EF15  F006         	goto	u3080
  6299  000C24                     u3081:
  6300  000C24  FFFF               	dw	65535	; assembler added errata NOP
  6301  000C26  EF1B  F006         	goto	l158
  6302  000C2A                     u3080:
  6303  000C2A  FFFF               	dw	65535	; assembler added errata NOP
  6304  000C2C                     l3780:
  6305  000C2C  FFFF               	dw	65535	; assembler added errata NOP
  6306                           
  6307                           ;motors.c: 338:                 keepMovingY = 0;
  6308  000C2E  0E00               	movlw	0
  6309  000C30  6E21               	movwf	moveToPoint@keepMovingY^0,c
  6310                           
  6311                           ;motors.c: 339:             }else{
  6312  000C32  EF42  F006         	goto	l3788
  6313  000C36                     l158:
  6314  000C36  FFFF               	dw	65535	; assembler added errata NOP
  6315                           
  6316                           ;motors.c: 341:                 LATBbits.LATB4 = 1;
  6317  000C38  888A               	bsf	138,4,c	;volatile
  6318  000C3A  EF42  F006         	goto	l3788
  6319  000C3E                     l3782:
  6320  000C3E  FFFF               	dw	65535	; assembler added errata NOP
  6321  000C40  5023               	movf	moveToPoint@MOT2Direction^0,w,c
  6322  000C42  A4D8               	btfss	status,2,c
  6323  000C44  EF26  F006         	goto	u3091
  6324  000C48  EF29  F006         	goto	u3090
  6325  000C4C                     u3091:
  6326  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  6327  000C4E  EF42  F006         	goto	l3788
  6328  000C52                     u3090:
  6329  000C52  FFFF               	dw	65535	; assembler added errata NOP
  6330  000C54                     
  6331                           ;motors.c: 345:             if(y1 + stepCounter() == y2){
  6332  000C54  EC8B  F012         	call	_stepCounter	;wreg free
  6333  000C58  5018               	movf	moveToPoint@y1^0,w,c
  6334  000C5A  2612               	addwf	?_stepCounter^0,f,c
  6335  000C5C  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6336  000C5E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6337  000C60  501C               	movf	moveToPoint@y2^0,w,c
  6338  000C62  1812               	xorwf	?_stepCounter^0,w,c
  6339  000C64  E107               	bnz	u3101
  6340  000C66  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6341  000C68  1813               	xorwf	(?_stepCounter+1)^0,w,c
  6342  000C6A  A4D8               	btfss	status,2,c
  6343  000C6C  EF3A  F006         	goto	u3101
  6344  000C70  EF3D  F006         	goto	u3100
  6345  000C74                     u3101:
  6346  000C74  FFFF               	dw	65535	; assembler added errata NOP
  6347  000C76  EF40  F006         	goto	l162
  6348  000C7A                     u3100:
  6349  000C7A  FFFF               	dw	65535	; assembler added errata NOP
  6350  000C7C  EF16  F006         	goto	l3780
  6351  000C80                     l162:
  6352  000C80  FFFF               	dw	65535	; assembler added errata NOP
  6353                           
  6354                           ;motors.c: 350:                 LATBbits.LATB4 = 1;
  6355  000C82  888A               	bsf	138,4,c	;volatile
  6356  000C84                     l3788:
  6357  000C84  FFFF               	dw	65535	; assembler added errata NOP
  6358  000C86  EC49  F012         	call	_stepMade	;wreg free
  6359  000C8A  5012               	movf	?_stepMade^0,w,c
  6360  000C8C  1013               	iorwf	(?_stepMade+1)^0,w,c
  6361  000C8E  B4D8               	btfsc	status,2,c
  6362  000C90  EF4C  F006         	goto	u3111
  6363  000C94  EF4F  F006         	goto	u3110
  6364  000C98                     u3111:
  6365  000C98  FFFF               	dw	65535	; assembler added errata NOP
  6366  000C9A  EF42  F006         	goto	l3788
  6367  000C9E                     u3110:
  6368  000C9E  FFFF               	dw	65535	; assembler added errata NOP
  6369  000CA0                     
  6370                           ;motors.c: 358:         LATAbits.LATA2 = 0;
  6371  000CA0  9489               	bcf	137,2,c	;volatile
  6372                           
  6373                           ;motors.c: 359:         LATBbits.LATB4 = 0;
  6374  000CA2  988A               	bcf	138,4,c	;volatile
  6375  000CA4                     l3790:
  6376  000CA4  FFFF               	dw	65535	; assembler added errata NOP
  6377  000CA6  EC49  F012         	call	_stepMade	;wreg free
  6378  000CAA  5012               	movf	?_stepMade^0,w,c
  6379  000CAC  1013               	iorwf	(?_stepMade+1)^0,w,c
  6380  000CAE  B4D8               	btfsc	status,2,c
  6381  000CB0  EF5C  F006         	goto	u3121
  6382  000CB4  EF5F  F006         	goto	u3120
  6383  000CB8                     u3121:
  6384  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6385  000CBA  EF52  F006         	goto	l3790
  6386  000CBE                     u3120:
  6387  000CBE                     l3792:
  6388  000CBE  FFFF               	dw	65535	; assembler added errata NOP
  6389                           
  6390                           ;motors.c: 300:     while(keepMovingX || keepMovingY){
  6391  000CC0  5020               	movf	moveToPoint@keepMovingX^0,w,c
  6392  000CC2  A4D8               	btfss	status,2,c
  6393  000CC4  EF66  F006         	goto	u3131
  6394  000CC8  EF69  F006         	goto	u3130
  6395  000CCC                     u3131:
  6396  000CCC  FFFF               	dw	65535	; assembler added errata NOP
  6397  000CCE  EF94  F005         	goto	l3758
  6398  000CD2                     u3130:
  6399  000CD2  FFFF               	dw	65535	; assembler added errata NOP
  6400  000CD4  5021               	movf	moveToPoint@keepMovingY^0,w,c
  6401  000CD6  A4D8               	btfss	status,2,c
  6402  000CD8  EF70  F006         	goto	u3141
  6403  000CDC  EF73  F006         	goto	u3140
  6404  000CE0                     u3141:
  6405  000CE0  FFFF               	dw	65535	; assembler added errata NOP
  6406  000CE2  EF94  F005         	goto	l3758
  6407  000CE6                     u3140:
  6408  000CE6                     l149:
  6409  000CE6  FFFF               	dw	65535	; assembler added errata NOP
  6410                           
  6411                           ;motors.c: 366:     T0CONbits.TMR0ON = 0;
  6412  000CE8  9ED5               	bcf	213,7,c	;volatile
  6413                           
  6414                           ;motors.c: 367:     T2CONbits.TMR2ON = 0;
  6415  000CEA  94CA               	bcf	202,2,c	;volatile
  6416  000CEC                     
  6417                           ;motors.c: 369:     TMR0 = 0;
  6418  000CEC  0E00               	movlw	0
  6419  000CEE  6ED7               	movwf	215,c	;volatile
  6420  000CF0  0E00               	movlw	0
  6421  000CF2  6ED6               	movwf	214,c	;volatile
  6422                           
  6423                           ;motors.c: 370:     TMR2 = 0;
  6424  000CF4  0E00               	movlw	0
  6425  000CF6  6ECC               	movwf	204,c	;volatile
  6426  000CF8                     
  6427                           ;motors.c: 373:     resetStep();
  6428  000CF8  ECA5  F012         	call	_resetStep	;wreg free
  6429  000CFC                     
  6430                           ;motors.c: 375:     return(tm0Error);
  6431  000CFC  505B               	movf	_tm0Error^0,w,c
  6432  000CFE                     l141:
  6433  000CFE  FFFF               	dw	65535	; assembler added errata NOP
  6434  000D00  0012               	return		;funcret
  6435  000D02  FFFF               	dw	65535	; errata NOP
  6436  000D04                     __end_of_moveToPoint:
  6437                           	callstack 0
  6438                           
  6439 ;; *************** function _stepCounter *****************
  6440 ;; Defined at:
  6441 ;;		line 58 in file "pwm.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;		None
  6444 ;; Auto vars:     Size  Location     Type
  6445 ;;		None
  6446 ;; Return value:  Size  Location     Type
  6447 ;;                  2   17[COMRAM] unsigned int 
  6448 ;; Registers used:
  6449 ;;		None
  6450 ;; Tracked objects:
  6451 ;;		On entry : 0/0
  6452 ;;		On exit  : 0/0
  6453 ;;		Unchanged: 0/0
  6454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6455 ;;      Params:         2       0       0       0       0       0       0
  6456 ;;      Locals:         0       0       0       0       0       0       0
  6457 ;;      Temps:          0       0       0       0       0       0       0
  6458 ;;      Totals:         2       0       0       0       0       0       0
  6459 ;;Total ram usage:        2 bytes
  6460 ;; Hardware stack levels used:    1
  6461 ;; Hardware stack levels required when called:    4
  6462 ;; This function calls:
  6463 ;;		Nothing
  6464 ;; This function is called by:
  6465 ;;		_moveToPoint
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           	psect	text37
  6470  002516                     __ptext37:
  6471                           	callstack 0
  6472  002516                     _stepCounter:
  6473                           	callstack 0
  6474  002516  FFFF               	dw	65535	; assembler added errata NOP
  6475  002518                     
  6476                           ;pwm.c: 59:     return pwmStep;
  6477  002518  C067  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6478  00251C  6A13               	clrf	(?_stepCounter+1)^0,c
  6479  00251E  0012               	return		;funcret
  6480  002520  FFFF               	dw	65535	; errata NOP
  6481  002522                     __end_of_stepCounter:
  6482                           	callstack 0
  6483                           
  6484 ;; *************** function _liftArm *****************
  6485 ;; Defined at:
  6486 ;;		line 521 in file "motors.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;		None
  6489 ;; Auto vars:     Size  Location     Type
  6490 ;;		None
  6491 ;; Return value:  Size  Location     Type
  6492 ;;                  1    wreg      unsigned char 
  6493 ;; Registers used:
  6494 ;;		wreg, status,2, status,0, cstack
  6495 ;; Tracked objects:
  6496 ;;		On entry : 0/0
  6497 ;;		On exit  : 0/0
  6498 ;;		Unchanged: 0/0
  6499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6500 ;;      Params:         0       0       0       0       0       0       0
  6501 ;;      Locals:         0       0       0       0       0       0       0
  6502 ;;      Temps:          0       0       0       0       0       0       0
  6503 ;;      Totals:         0       0       0       0       0       0       0
  6504 ;;Total ram usage:        0 bytes
  6505 ;; Hardware stack levels used:    1
  6506 ;; Hardware stack levels required when called:    5
  6507 ;; This function calls:
  6508 ;;		_resetStep
  6509 ;;		_setDirection
  6510 ;;		_stepMade
  6511 ;; This function is called by:
  6512 ;;		_executeData
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           	psect	text38
  6517  001F98                     __ptext38:
  6518                           	callstack 0
  6519  001F98                     _liftArm:
  6520                           	callstack 0
  6521  001F98  FFFF               	dw	65535	; assembler added errata NOP
  6522  001F9A                     
  6523                           ;motors.c: 524:     setDirection(0, 2);
  6524  001F9A  0E02               	movlw	2
  6525  001F9C  6E12               	movwf	setDirection@motor^0,c
  6526  001F9E  0E00               	movlw	0
  6527  001FA0  ECDB  F010         	call	_setDirection
  6528  001FA4                     
  6529                           ;motors.c: 526:     T2CONbits.TMR2ON = 1;
  6530  001FA4  84CA               	bsf	202,2,c	;volatile
  6531  001FA6                     
  6532                           ;motors.c: 528:     tm0Error = 0;
  6533  001FA6  0E00               	movlw	0
  6534  001FA8  6E5C               	movwf	(_tm0Error+1)^0,c
  6535  001FAA  0E00               	movlw	0
  6536  001FAC  6E5B               	movwf	_tm0Error^0,c
  6537  001FAE                     
  6538                           ;motors.c: 529:     tm0Limit = 100;
  6539  001FAE  0E64               	movlw	100
  6540  001FB0  6E68               	movwf	_tm0Limit^0,c
  6541  001FB2                     
  6542                           ;motors.c: 530:     T0CONbits.TMR0ON = 1;
  6543  001FB2  8ED5               	bsf	213,7,c	;volatile
  6544                           
  6545                           ;motors.c: 534:     while(!PORTEbits.RE2){
  6546  001FB4  EF0D  F010         	goto	l200
  6547  001FB8                     l3898:
  6548  001FB8  FFFF               	dw	65535	; assembler added errata NOP
  6549                           
  6550                           ;motors.c: 537:         if(tm0Error){
  6551  001FBA  505B               	movf	_tm0Error^0,w,c
  6552  001FBC  105C               	iorwf	(_tm0Error+1)^0,w,c
  6553  001FBE  B4D8               	btfsc	status,2,c
  6554  001FC0  EFE4  F00F         	goto	u3271
  6555  001FC4  EFE7  F00F         	goto	u3270
  6556  001FC8                     u3271:
  6557  001FC8  FFFF               	dw	65535	; assembler added errata NOP
  6558  001FCA  EFEF  F00F         	goto	l202
  6559  001FCE                     u3270:
  6560  001FCE  FFFF               	dw	65535	; assembler added errata NOP
  6561  001FD0                     
  6562                           ;motors.c: 539:             LATCbits.LATC2 = 0;
  6563  001FD0  948B               	bcf	139,2,c	;volatile
  6564  001FD2                     
  6565                           ;motors.c: 540:             tm0Error = 6;
  6566  001FD2  0E00               	movlw	0
  6567  001FD4  6E5C               	movwf	(_tm0Error+1)^0,c
  6568  001FD6  0E06               	movlw	6
  6569  001FD8  6E5B               	movwf	_tm0Error^0,c
  6570                           
  6571                           ;motors.c: 541:             break;
  6572  001FDA  EF16  F010         	goto	l203
  6573  001FDE                     l202:
  6574  001FDE  FFFF               	dw	65535	; assembler added errata NOP
  6575                           
  6576                           ;motors.c: 546:         LATCbits.LATC2 = 1;
  6577  001FE0  848B               	bsf	139,2,c	;volatile
  6578  001FE2                     l3904:
  6579  001FE2  FFFF               	dw	65535	; assembler added errata NOP
  6580  001FE4  EC49  F012         	call	_stepMade	;wreg free
  6581  001FE8  5012               	movf	?_stepMade^0,w,c
  6582  001FEA  1013               	iorwf	(?_stepMade+1)^0,w,c
  6583  001FEC  B4D8               	btfsc	status,2,c
  6584  001FEE  EFFB  F00F         	goto	u3281
  6585  001FF2  EFFE  F00F         	goto	u3280
  6586  001FF6                     u3281:
  6587  001FF6  FFFF               	dw	65535	; assembler added errata NOP
  6588  001FF8  EFF1  F00F         	goto	l3904
  6589  001FFC                     u3280:
  6590  001FFC  FFFF               	dw	65535	; assembler added errata NOP
  6591  001FFE                     
  6592                           ;motors.c: 552:         LATCbits.LATC2 = 0;
  6593  001FFE  948B               	bcf	139,2,c	;volatile
  6594  002000                     l3906:
  6595  002000  FFFF               	dw	65535	; assembler added errata NOP
  6596  002002  EC49  F012         	call	_stepMade	;wreg free
  6597  002006  5012               	movf	?_stepMade^0,w,c
  6598  002008  1013               	iorwf	(?_stepMade+1)^0,w,c
  6599  00200A  B4D8               	btfsc	status,2,c
  6600  00200C  EF0A  F010         	goto	u3291
  6601  002010  EF0D  F010         	goto	u3290
  6602  002014                     u3291:
  6603  002014  FFFF               	dw	65535	; assembler added errata NOP
  6604  002016  EF00  F010         	goto	l3906
  6605  00201A                     u3290:
  6606  00201A                     l200:
  6607  00201A  FFFF               	dw	65535	; assembler added errata NOP
  6608                           
  6609                           ;motors.c: 534:     while(!PORTEbits.RE2){
  6610  00201C  A484               	btfss	132,2,c	;volatile
  6611  00201E  EF13  F010         	goto	u3301
  6612  002022  EF16  F010         	goto	u3300
  6613  002026                     u3301:
  6614  002026  FFFF               	dw	65535	; assembler added errata NOP
  6615  002028  EFDC  F00F         	goto	l3898
  6616  00202C                     u3300:
  6617  00202C                     l203:
  6618  00202C  FFFF               	dw	65535	; assembler added errata NOP
  6619                           
  6620                           ;motors.c: 559:     T0CONbits.TMR0ON = 0;
  6621  00202E  9ED5               	bcf	213,7,c	;volatile
  6622                           
  6623                           ;motors.c: 560:     T2CONbits.TMR2ON = 0;
  6624  002030  94CA               	bcf	202,2,c	;volatile
  6625  002032                     
  6626                           ;motors.c: 562:     TMR0 = 0;
  6627  002032  0E00               	movlw	0
  6628  002034  6ED7               	movwf	215,c	;volatile
  6629  002036  0E00               	movlw	0
  6630  002038  6ED6               	movwf	214,c	;volatile
  6631                           
  6632                           ;motors.c: 563:     TMR2 = 0;
  6633  00203A  0E00               	movlw	0
  6634  00203C  6ECC               	movwf	204,c	;volatile
  6635  00203E                     
  6636                           ;motors.c: 566:     resetStep();
  6637  00203E  ECA5  F012         	call	_resetStep	;wreg free
  6638  002042                     
  6639                           ;motors.c: 568:     return(tm0Error);
  6640  002042  505B               	movf	_tm0Error^0,w,c
  6641  002044  0012               	return		;funcret
  6642  002046  FFFF               	dw	65535	; errata NOP
  6643  002048                     __end_of_liftArm:
  6644                           	callstack 0
  6645                           
  6646 ;; *************** function _stepMade *****************
  6647 ;; Defined at:
  6648 ;;		line 47 in file "pwm.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;		None
  6651 ;; Auto vars:     Size  Location     Type
  6652 ;;  temp            1   19[COMRAM] unsigned char 
  6653 ;; Return value:  Size  Location     Type
  6654 ;;                  2   17[COMRAM] unsigned int 
  6655 ;; Registers used:
  6656 ;;		wreg, status,2
  6657 ;; Tracked objects:
  6658 ;;		On entry : 0/0
  6659 ;;		On exit  : 0/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6662 ;;      Params:         2       0       0       0       0       0       0
  6663 ;;      Locals:         1       0       0       0       0       0       0
  6664 ;;      Temps:          0       0       0       0       0       0       0
  6665 ;;      Totals:         3       0       0       0       0       0       0
  6666 ;;Total ram usage:        3 bytes
  6667 ;; Hardware stack levels used:    1
  6668 ;; Hardware stack levels required when called:    4
  6669 ;; This function calls:
  6670 ;;		Nothing
  6671 ;; This function is called by:
  6672 ;;		_resetPosition
  6673 ;;		_moveToPoint
  6674 ;;		_touchObject
  6675 ;;		_touchTherm
  6676 ;;		_liftArm
  6677 ;;		_rotateObj
  6678 ;;		_pickObject
  6679 ;;		_releaseObj
  6680 ;; This function uses a non-reentrant model
  6681 ;;
  6682                           
  6683                           	psect	text39
  6684  002492                     __ptext39:
  6685                           	callstack 0
  6686  002492                     _stepMade:
  6687                           	callstack 0
  6688  002492  FFFF               	dw	65535	; assembler added errata NOP
  6689  002494                     
  6690                           ;pwm.c: 48:     unsigned char temp = stepToggle;
  6691  002494  C066  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6692  002498                     
  6693                           ;pwm.c: 50:     stepToggle = 0;
  6694  002498  0E00               	movlw	0
  6695  00249A  6E66               	movwf	_stepToggle^0,c	;volatile
  6696  00249C                     
  6697                           ;pwm.c: 52:     return temp;
  6698  00249C  C014  F012         	movff	stepMade@temp,?_stepMade
  6699  0024A0  6A13               	clrf	(?_stepMade+1)^0,c
  6700  0024A2  0012               	return		;funcret
  6701  0024A4  FFFF               	dw	65535	; errata NOP
  6702  0024A6                     __end_of_stepMade:
  6703                           	callstack 0
  6704                           
  6705 ;; *************** function _setDirection *****************
  6706 ;; Defined at:
  6707 ;;		line 115 in file "motors.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;  direction       1    wreg     unsigned char 
  6710 ;;  motor           1   17[COMRAM] unsigned char 
  6711 ;; Auto vars:     Size  Location     Type
  6712 ;;  direction       1   20[COMRAM] unsigned char 
  6713 ;; Return value:  Size  Location     Type
  6714 ;;                  1    wreg      void 
  6715 ;; Registers used:
  6716 ;;		wreg, status,2, status,0
  6717 ;; Tracked objects:
  6718 ;;		On entry : 0/0
  6719 ;;		On exit  : 0/0
  6720 ;;		Unchanged: 0/0
  6721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6722 ;;      Params:         1       0       0       0       0       0       0
  6723 ;;      Locals:         1       0       0       0       0       0       0
  6724 ;;      Temps:          2       0       0       0       0       0       0
  6725 ;;      Totals:         4       0       0       0       0       0       0
  6726 ;;Total ram usage:        4 bytes
  6727 ;; Hardware stack levels used:    1
  6728 ;; Hardware stack levels required when called:    4
  6729 ;; This function calls:
  6730 ;;		Nothing
  6731 ;; This function is called by:
  6732 ;;		_resetPosition
  6733 ;;		_moveToPoint
  6734 ;;		_touchObject
  6735 ;;		_touchTherm
  6736 ;;		_liftArm
  6737 ;; This function uses a non-reentrant model
  6738 ;;
  6739                           
  6740                           	psect	text40
  6741  0021B6                     __ptext40:
  6742                           	callstack 0
  6743  0021B6                     _setDirection:
  6744                           	callstack 0
  6745  0021B6  FFFF               	dw	65535	; assembler added errata NOP
  6746                           
  6747                           ;incstack = 0
  6748                           ;setDirection@direction stored from wreg
  6749  0021B8  6E15               	movwf	setDirection@direction^0,c
  6750  0021BA                     
  6751                           ;motors.c: 116:     switch(motor){
  6752  0021BA  EFF7  F010         	goto	l3404
  6753  0021BE                     l3396:
  6754  0021BE  FFFF               	dw	65535	; assembler added errata NOP
  6755                           
  6756                           ;motors.c: 118:             LATAbits.LATA1 = direction;
  6757  0021C0  B015               	btfsc	setDirection@direction^0,0,c
  6758  0021C2  D002               	bra	u2475
  6759  0021C4  9289               	bcf	137,1,c	;volatile
  6760  0021C6  D001               	bra	u2476
  6761  0021C8                     u2475:
  6762  0021C8  8289               	bsf	137,1,c	;volatile
  6763  0021CA                     u2476:
  6764                           
  6765                           ;motors.c: 119:             break;
  6766  0021CA  EF12  F011         	goto	l101
  6767  0021CE                     l3398:
  6768  0021CE  FFFF               	dw	65535	; assembler added errata NOP
  6769                           
  6770                           ;motors.c: 121:             LATBbits.LATB3 = direction;
  6771  0021D0  B015               	btfsc	setDirection@direction^0,0,c
  6772  0021D2  D002               	bra	u2485
  6773  0021D4  968A               	bcf	138,3,c	;volatile
  6774  0021D6  D001               	bra	u2486
  6775  0021D8                     u2485:
  6776  0021D8  868A               	bsf	138,3,c	;volatile
  6777  0021DA                     u2486:
  6778                           
  6779                           ;motors.c: 122:             break;
  6780  0021DA  EF12  F011         	goto	l101
  6781  0021DE                     l3400:
  6782  0021DE  FFFF               	dw	65535	; assembler added errata NOP
  6783                           
  6784                           ;motors.c: 124:             LATCbits.LATC1 = direction;
  6785  0021E0  B015               	btfsc	setDirection@direction^0,0,c
  6786  0021E2  D002               	bra	u2495
  6787  0021E4  928B               	bcf	139,1,c	;volatile
  6788  0021E6  D001               	bra	u2496
  6789  0021E8                     u2495:
  6790  0021E8  828B               	bsf	139,1,c	;volatile
  6791  0021EA                     u2496:
  6792                           
  6793                           ;motors.c: 125:             break;
  6794  0021EA  EF12  F011         	goto	l101
  6795  0021EE                     l3404:
  6796  0021EE  FFFF               	dw	65535	; assembler added errata NOP
  6797  0021F0  5012               	movf	setDirection@motor^0,w,c
  6798  0021F2  6E13               	movwf	??_setDirection^0,c
  6799  0021F4  6A14               	clrf	(??_setDirection+1)^0,c
  6800                           
  6801                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6802                           ; Switch size 1, requested type "simple"
  6803                           ; Number of cases is 1, Range of values is 0 to 0
  6804                           ; switch strategies available:
  6805                           ; Name         Instructions Cycles
  6806                           ; simple_byte            4     3 (average)
  6807                           ;	Chosen strategy is simple_byte
  6808  0021F6  5014               	movf	(??_setDirection+1)^0,w,c
  6809  0021F8  0A00               	xorlw	0	; case 0
  6810  0021FA  B4D8               	btfsc	status,2,c
  6811  0021FC  EF02  F011         	goto	l4514
  6812  002200  EF12  F011         	goto	l101
  6813  002204                     l4514:
  6814  002204  FFFF               	dw	65535	; assembler added errata NOP
  6815                           
  6816                           ; Switch size 1, requested type "simple"
  6817                           ; Number of cases is 3, Range of values is 0 to 2
  6818                           ; switch strategies available:
  6819                           ; Name         Instructions Cycles
  6820                           ; simple_byte           10     6 (average)
  6821                           ;	Chosen strategy is simple_byte
  6822  002206  5013               	movf	??_setDirection^0,w,c
  6823  002208  0A00               	xorlw	0	; case 0
  6824  00220A  B4D8               	btfsc	status,2,c
  6825  00220C  EFDF  F010         	goto	l3396
  6826  002210  0A01               	xorlw	1	; case 1
  6827  002212  B4D8               	btfsc	status,2,c
  6828  002214  EFE7  F010         	goto	l3398
  6829  002218  0A03               	xorlw	3	; case 2
  6830  00221A  B4D8               	btfsc	status,2,c
  6831  00221C  EFEF  F010         	goto	l3400
  6832  002220  EF12  F011         	goto	l101
  6833  002224                     l101:
  6834  002224  FFFF               	dw	65535	; assembler added errata NOP
  6835  002226  0012               	return		;funcret
  6836  002228  FFFF               	dw	65535	; errata NOP
  6837  00222A                     __end_of_setDirection:
  6838                           	callstack 0
  6839                           
  6840 ;; *************** function _resetStep *****************
  6841 ;; Defined at:
  6842 ;;		line 65 in file "pwm.c"
  6843 ;; Parameters:    Size  Location     Type
  6844 ;;		None
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;		None
  6847 ;; Return value:  Size  Location     Type
  6848 ;;                  1    wreg      void 
  6849 ;; Registers used:
  6850 ;;		wreg, status,2
  6851 ;; Tracked objects:
  6852 ;;		On entry : 0/0
  6853 ;;		On exit  : 0/0
  6854 ;;		Unchanged: 0/0
  6855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6856 ;;      Params:         0       0       0       0       0       0       0
  6857 ;;      Locals:         0       0       0       0       0       0       0
  6858 ;;      Temps:          0       0       0       0       0       0       0
  6859 ;;      Totals:         0       0       0       0       0       0       0
  6860 ;;Total ram usage:        0 bytes
  6861 ;; Hardware stack levels used:    1
  6862 ;; Hardware stack levels required when called:    4
  6863 ;; This function calls:
  6864 ;;		Nothing
  6865 ;; This function is called by:
  6866 ;;		_resetPosition
  6867 ;;		_moveToPoint
  6868 ;;		_touchObject
  6869 ;;		_touchTherm
  6870 ;;		_liftArm
  6871 ;; This function uses a non-reentrant model
  6872 ;;
  6873                           
  6874                           	psect	text41
  6875  00254A                     __ptext41:
  6876                           	callstack 0
  6877  00254A                     _resetStep:
  6878                           	callstack 0
  6879  00254A  FFFF               	dw	65535	; assembler added errata NOP
  6880  00254C                     
  6881                           ;pwm.c: 66:     pwmStep = 0;
  6882  00254C  0E00               	movlw	0
  6883  00254E  6E67               	movwf	_pwmStep^0,c	;volatile
  6884  002550  0012               	return		;funcret
  6885  002552  FFFF               	dw	65535	; errata NOP
  6886  002554                     __end_of_resetStep:
  6887                           	callstack 0
  6888                           
  6889 ;; *************** function _getData *****************
  6890 ;; Defined at:
  6891 ;;		line 205 in file "usart.c"
  6892 ;; Parameters:    Size  Location     Type
  6893 ;;		None
  6894 ;; Auto vars:     Size  Location     Type
  6895 ;;		None
  6896 ;; Return value:  Size  Location     Type
  6897 ;;                  2   17[COMRAM] PTR struct .
  6898 ;; Registers used:
  6899 ;;		wreg, status,2, status,0
  6900 ;; Tracked objects:
  6901 ;;		On entry : 0/0
  6902 ;;		On exit  : 0/0
  6903 ;;		Unchanged: 0/0
  6904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6905 ;;      Params:         2       0       0       0       0       0       0
  6906 ;;      Locals:         0       0       0       0       0       0       0
  6907 ;;      Temps:          0       0       0       0       0       0       0
  6908 ;;      Totals:         2       0       0       0       0       0       0
  6909 ;;Total ram usage:        2 bytes
  6910 ;; Hardware stack levels used:    1
  6911 ;; Hardware stack levels required when called:    4
  6912 ;; This function calls:
  6913 ;;		Nothing
  6914 ;; This function is called by:
  6915 ;;		_executeData
  6916 ;; This function uses a non-reentrant model
  6917 ;;
  6918                           
  6919                           	psect	text42
  6920  0024C6                     __ptext42:
  6921                           	callstack 0
  6922  0024C6                     _getData:
  6923                           	callstack 0
  6924  0024C6  FFFF               	dw	65535	; assembler added errata NOP
  6925  0024C8                     
  6926                           ;usart.c: 206:     return(&dataSequence[0]);
  6927  0024C8  0EDB               	movlw	low _dataSequence
  6928  0024CA  6E12               	movwf	?_getData^0,c
  6929  0024CC  0E00               	movlw	high _dataSequence
  6930  0024CE  6E13               	movwf	(?_getData+1)^0,c
  6931  0024D0  0012               	return		;funcret
  6932  0024D2  FFFF               	dw	65535	; errata NOP
  6933  0024D4                     __end_of_getData:
  6934                           	callstack 0
  6935                           
  6936 ;; *************** function _clearTM0 *****************
  6937 ;; Defined at:
  6938 ;;		line 28 in file "motors.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;		None
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  1    wreg      void 
  6945 ;; Registers used:
  6946 ;;		wreg, status,2
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6952 ;;      Params:         0       0       0       0       0       0       0
  6953 ;;      Locals:         0       0       0       0       0       0       0
  6954 ;;      Temps:          0       0       0       0       0       0       0
  6955 ;;      Totals:         0       0       0       0       0       0       0
  6956 ;;Total ram usage:        0 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:    4
  6959 ;; This function calls:
  6960 ;;		Nothing
  6961 ;; This function is called by:
  6962 ;;		_main
  6963 ;; This function uses a non-reentrant model
  6964 ;;
  6965                           
  6966                           	psect	text43
  6967  0024D4                     __ptext43:
  6968                           	callstack 0
  6969  0024D4                     _clearTM0:
  6970                           	callstack 0
  6971  0024D4  FFFF               	dw	65535	; assembler added errata NOP
  6972  0024D6                     
  6973                           ;motors.c: 29:     tm0Error = 0;
  6974  0024D6  0E00               	movlw	0
  6975  0024D8  6E5C               	movwf	(_tm0Error+1)^0,c
  6976  0024DA  0E00               	movlw	0
  6977  0024DC  6E5B               	movwf	_tm0Error^0,c
  6978  0024DE  0012               	return		;funcret
  6979  0024E0  FFFF               	dw	65535	; errata NOP
  6980  0024E2                     __end_of_clearTM0:
  6981                           	callstack 0
  6982                           
  6983 ;; *************** function _isr *****************
  6984 ;; Defined at:
  6985 ;;		line 17 in file "interrupt.c"
  6986 ;; Parameters:    Size  Location     Type
  6987 ;;		None
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;  temp            1   16[COMRAM] unsigned char 
  6990 ;; Return value:  Size  Location     Type
  6991 ;;                  1    wreg      void 
  6992 ;; Registers used:
  6993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6994 ;; Tracked objects:
  6995 ;;		On entry : 0/0
  6996 ;;		On exit  : 0/0
  6997 ;;		Unchanged: 0/0
  6998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6999 ;;      Params:         0       0       0       0       0       0       0
  7000 ;;      Locals:         1       0       0       0       0       0       0
  7001 ;;      Temps:          6       0       0       0       0       0       0
  7002 ;;      Totals:         7       0       0       0       0       0       0
  7003 ;;Total ram usage:        7 bytes
  7004 ;; Hardware stack levels used:    1
  7005 ;; Hardware stack levels required when called:    3
  7006 ;; This function calls:
  7007 ;;		_increaseStep
  7008 ;;		_retPeriod
  7009 ;;		_setThermRel
  7010 ;;		_setTouchRel
  7011 ;;		_toggleStep
  7012 ;;		_whatsTM0Limit
  7013 ;;		_writeTM0
  7014 ;;		i2_storeData
  7015 ;; This function is called by:
  7016 ;;		Interrupt level 2
  7017 ;; This function uses a non-reentrant model
  7018 ;;
  7019                           
  7020                           	psect	intcode
  7021  000008                     __pintcode:
  7022                           	callstack 0
  7023  000008                     _isr:
  7024                           	callstack 0
  7025  000008  FFFF               	dw	65535	; assembler added errata NOP
  7026                           
  7027                           ;incstack = 0
  7028  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7029  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  7030  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  7031  000014  CFF3 F00F          	movff	prodl,??_isr+4
  7032  000018  CFF4 F010          	movff	prodh,??_isr+5
  7033  00001C                     
  7034                           ;interrupt.c: 18:     static unsigned int single_cycle = 0;;interrupt.c: 19:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 20:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 23:     if(INTCONbits.T0IF){
  7035  00001C  A4F2               	btfss	242,2,c	;volatile
  7036  00001E  EF13  F000         	goto	i2u237_41
  7037  000022  EF16  F000         	goto	i2u237_40
  7038  000026                     i2u237_41:
  7039  000026  FFFF               	dw	65535	; assembler added errata NOP
  7040  000028  EF2C  F000         	goto	i2l3312
  7041  00002C                     i2u237_40:
  7042  00002C  FFFF               	dw	65535	; assembler added errata NOP
  7043  00002E                     
  7044                           ;interrupt.c: 24:         INTCONbits.T0IF = 0;
  7045  00002E  94F2               	bcf	242,2,c	;volatile
  7046  000030                     
  7047                           ;interrupt.c: 27:         tm0Count++;
  7048  000030  2A63               	incf	isr@tm0Count^0,f,c
  7049  000032                     
  7050                           ;interrupt.c: 29:         if(tm0Count >= whatsTM0Limit()){
  7051  000032  ECCD  F012         	call	_whatsTM0Limit	;wreg free
  7052  000036  6E0B               	movwf	??_isr^0,c
  7053  000038  500B               	movf	??_isr^0,w,c
  7054  00003A  5C63               	subwf	isr@tm0Count^0,w,c
  7055  00003C  A0D8               	btfss	status,0,c
  7056  00003E  EF23  F000         	goto	i2u238_41
  7057  000042  EF26  F000         	goto	i2u238_40
  7058  000046                     i2u238_41:
  7059  000046  FFFF               	dw	65535	; assembler added errata NOP
  7060  000048  EF2C  F000         	goto	i2l3312
  7061  00004C                     i2u238_40:
  7062  00004C  FFFF               	dw	65535	; assembler added errata NOP
  7063  00004E                     
  7064                           ;interrupt.c: 30:             T0CONbits.TMR0ON = 0;
  7065  00004E  9ED5               	bcf	213,7,c	;volatile
  7066  000050                     
  7067                           ;interrupt.c: 31:             tm0Count = 0;
  7068  000050  0E00               	movlw	0
  7069  000052  6E63               	movwf	isr@tm0Count^0,c
  7070  000054                     
  7071                           ;interrupt.c: 32:             writeTM0();
  7072  000054  EC71  F012         	call	_writeTM0	;wreg free
  7073  000058                     i2l3312:
  7074  000058  FFFF               	dw	65535	; assembler added errata NOP
  7075                           
  7076                           ;interrupt.c: 37:     if(PIR1bits.TMR2IF){
  7077  00005A  A29E               	btfss	158,1,c	;volatile
  7078  00005C  EF32  F000         	goto	i2u239_41
  7079  000060  EF35  F000         	goto	i2u239_40
  7080  000064                     i2u239_41:
  7081  000064  FFFF               	dw	65535	; assembler added errata NOP
  7082  000066  EF63  F000         	goto	i2l3332
  7083  00006A                     i2u239_40:
  7084  00006A  FFFF               	dw	65535	; assembler added errata NOP
  7085  00006C                     
  7086                           ;interrupt.c: 38:         PIR1bits.TMR2IF = 0;
  7087  00006C  929E               	bcf	158,1,c	;volatile
  7088  00006E                     
  7089                           ;interrupt.c: 39:         single_cycle++;
  7090  00006E  4A51               	infsnz	isr@single_cycle^0,f,c
  7091  000070  2A52               	incf	(isr@single_cycle+1)^0,f,c
  7092  000072                     
  7093                           ;interrupt.c: 42:         if(single_cycle > retPeriod()){
  7094  000072  EC78  F012         	call	_retPeriod	;wreg free
  7095  000076  5051               	movf	isr@single_cycle^0,w,c
  7096  000078  5C01               	subwf	?_retPeriod^0,w,c
  7097  00007A  5052               	movf	(isr@single_cycle+1)^0,w,c
  7098  00007C  5802               	subwfb	(?_retPeriod+1)^0,w,c
  7099  00007E  B0D8               	btfsc	status,0,c
  7100  000080  EF44  F000         	goto	i2u240_41
  7101  000084  EF47  F000         	goto	i2u240_40
  7102  000088                     i2u240_41:
  7103  000088  FFFF               	dw	65535	; assembler added errata NOP
  7104  00008A  EF63  F000         	goto	i2l3332
  7105  00008E                     i2u240_40:
  7106  00008E  FFFF               	dw	65535	; assembler added errata NOP
  7107  000090                     
  7108                           ;interrupt.c: 43:             completeStep++;
  7109  000090  2A62               	incf	isr@completeStep^0,f,c
  7110  000092                     
  7111                           ;interrupt.c: 46:             if(completeStep != 0 && !(completeStep % 2)){
  7112  000092  5062               	movf	isr@completeStep^0,w,c
  7113  000094  B4D8               	btfsc	status,2,c
  7114  000096  EF4F  F000         	goto	i2u241_41
  7115  00009A  EF52  F000         	goto	i2u241_40
  7116  00009E                     i2u241_41:
  7117  00009E  FFFF               	dw	65535	; assembler added errata NOP
  7118  0000A0  EF60  F000         	goto	i2l3330
  7119  0000A4                     i2u241_40:
  7120  0000A4  FFFF               	dw	65535	; assembler added errata NOP
  7121  0000A6  B062               	btfsc	isr@completeStep^0,0,c
  7122  0000A8  EF58  F000         	goto	i2u242_41
  7123  0000AC  EF5B  F000         	goto	i2u242_40
  7124  0000B0                     i2u242_41:
  7125  0000B0  FFFF               	dw	65535	; assembler added errata NOP
  7126  0000B2  EF60  F000         	goto	i2l3330
  7127  0000B6                     i2u242_40:
  7128  0000B6  FFFF               	dw	65535	; assembler added errata NOP
  7129  0000B8                     
  7130                           ;interrupt.c: 48:                 completeStep = 0;
  7131  0000B8  0E00               	movlw	0
  7132  0000BA  6E62               	movwf	isr@completeStep^0,c
  7133  0000BC                     
  7134                           ;interrupt.c: 51:                 increaseStep();
  7135  0000BC  ECD1  F012         	call	_increaseStep	;wreg free
  7136  0000C0                     i2l3330:
  7137  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  7138                           
  7139                           ;interrupt.c: 56:             toggleStep();
  7140  0000C2  ECAA  F012         	call	_toggleStep	;wreg free
  7141  0000C6                     i2l3332:
  7142  0000C6  FFFF               	dw	65535	; assembler added errata NOP
  7143                           
  7144                           ;interrupt.c: 61:     if(PIR1bits.ADIF){
  7145  0000C8  AC9E               	btfss	158,6,c	;volatile
  7146  0000CA  EF69  F000         	goto	i2u243_41
  7147  0000CE  EF6C  F000         	goto	i2u243_40
  7148  0000D2                     i2u243_41:
  7149  0000D2  FFFF               	dw	65535	; assembler added errata NOP
  7150  0000D4  EF99  F000         	goto	i2l3344
  7151  0000D8                     i2u243_40:
  7152  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  7153  0000DA                     
  7154                           ;interrupt.c: 62:         PIR1bits.ADIF = 0;
  7155  0000DA  9C9E               	bcf	158,6,c	;volatile
  7156                           
  7157                           ;interrupt.c: 65:         ADC_res = ADRESL;
  7158  0000DC  CFC3 F053          	movff	4035,_ADC_res	;volatile
  7159  0000E0  6A54               	clrf	(_ADC_res+1)^0,c
  7160  0000E2                     
  7161                           ;interrupt.c: 66:         ADC_res |= (ADRESH << 8);
  7162  0000E2  50C4               	movf	196,w,c	;volatile
  7163  0000E4  6E0C               	movwf	(??_isr+1)^0,c
  7164  0000E6  6A0B               	clrf	??_isr^0,c
  7165  0000E8  500B               	movf	??_isr^0,w,c
  7166  0000EA  1253               	iorwf	_ADC_res^0,f,c
  7167  0000EC  500C               	movf	(??_isr+1)^0,w,c
  7168  0000EE  1254               	iorwf	(_ADC_res+1)^0,f,c
  7169                           
  7170                           ;interrupt.c: 69:         if(ADC_res > therm_pressure){
  7171  0000F0  0453               	decf	_ADC_res^0,w,c
  7172  0000F2  0E04               	movlw	4
  7173  0000F4  5854               	subwfb	(_ADC_res+1)^0,w,c
  7174  0000F6  A0D8               	btfss	status,0,c
  7175  0000F8  EF80  F000         	goto	i2u244_41
  7176  0000FC  EF83  F000         	goto	i2u244_40
  7177  000100                     i2u244_41:
  7178  000100  FFFF               	dw	65535	; assembler added errata NOP
  7179  000102  EF8A  F000         	goto	i2l3340
  7180  000106                     i2u244_40:
  7181  000106  FFFF               	dw	65535	; assembler added errata NOP
  7182  000108                     
  7183                           ;interrupt.c: 71:             setTouchRel();
  7184  000108  ECAF  F012         	call	_setTouchRel	;wreg free
  7185                           
  7186                           ;interrupt.c: 72:             setThermRel();
  7187  00010C  ECB4  F012         	call	_setThermRel	;wreg free
  7188                           
  7189                           ;interrupt.c: 73:         }else if(ADC_res > touch_pressure){
  7190  000110  EF99  F000         	goto	i2l3344
  7191  000114                     i2l3340:
  7192  000114  FFFF               	dw	65535	; assembler added errata NOP
  7193  000116  0453               	decf	_ADC_res^0,w,c
  7194  000118  0E02               	movlw	2
  7195  00011A  5854               	subwfb	(_ADC_res+1)^0,w,c
  7196  00011C  A0D8               	btfss	status,0,c
  7197  00011E  EF93  F000         	goto	i2u245_41
  7198  000122  EF96  F000         	goto	i2u245_40
  7199  000126                     i2u245_41:
  7200  000126  FFFF               	dw	65535	; assembler added errata NOP
  7201  000128  EF99  F000         	goto	i2l3344
  7202  00012C                     i2u245_40:
  7203  00012C  FFFF               	dw	65535	; assembler added errata NOP
  7204  00012E                     
  7205                           ;interrupt.c: 75:             setTouchRel();
  7206  00012E  ECAF  F012         	call	_setTouchRel	;wreg free
  7207  000132                     i2l3344:
  7208  000132  FFFF               	dw	65535	; assembler added errata NOP
  7209                           
  7210                           ;interrupt.c: 80:     if(PIR1bits.RC1IF){
  7211  000134  AA9E               	btfss	158,5,c	;volatile
  7212  000136  EF9F  F000         	goto	i2u246_41
  7213  00013A  EFA2  F000         	goto	i2u246_40
  7214  00013E                     i2u246_41:
  7215  00013E  FFFF               	dw	65535	; assembler added errata NOP
  7216  000140  EFA9  F000         	goto	i2l474
  7217  000144                     i2u246_40:
  7218  000144  FFFF               	dw	65535	; assembler added errata NOP
  7219  000146                     
  7220                           ;interrupt.c: 81:         PIR1bits.RC1IF = 0;
  7221  000146  9A9E               	bcf	158,5,c	;volatile
  7222                           
  7223                           ;interrupt.c: 84:         unsigned char temp = RCREG1;
  7224  000148  CFAE F011          	movff	4014,isr@temp	;volatile
  7225  00014C                     
  7226                           ;interrupt.c: 86:         storeData(temp);
  7227  00014C  5011               	movf	isr@temp^0,w,c
  7228  00014E  EC2E  F00B         	call	i2_storeData
  7229  000152                     i2l474:
  7230  000152  FFFF               	dw	65535	; assembler added errata NOP
  7231  000154  C010  FFF4         	movff	??_isr+5,prodh
  7232  000158  C00F  FFF3         	movff	??_isr+4,prodl
  7233  00015C  C00E  FFDA         	movff	??_isr+3,fsr2h
  7234  000160  C00D  FFD9         	movff	??_isr+2,fsr2l
  7235  000164  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7236  000166  0011               	retfie		f
  7237  000168  FFFF               	dw	65535	; errata NOP
  7238  00016A                     __end_of_isr:
  7239                           	callstack 0
  7240                           
  7241 ;; *************** function i2_storeData *****************
  7242 ;; Defined at:
  7243 ;;		line 131 in file "usart.c"
  7244 ;; Parameters:    Size  Location     Type
  7245 ;;  data            1    wreg     unsigned char 
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;  data            1    9[COMRAM] unsigned char 
  7248 ;; Return value:  Size  Location     Type
  7249 ;;                  1    wreg      void 
  7250 ;; Registers used:
  7251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7252 ;; Tracked objects:
  7253 ;;		On entry : 0/0
  7254 ;;		On exit  : 0/0
  7255 ;;		Unchanged: 0/0
  7256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7257 ;;      Params:         0       0       0       0       0       0       0
  7258 ;;      Locals:         1       0       0       0       0       0       0
  7259 ;;      Temps:          2       0       0       0       0       0       0
  7260 ;;      Totals:         3       0       0       0       0       0       0
  7261 ;;Total ram usage:        3 bytes
  7262 ;; Hardware stack levels used:    1
  7263 ;; Hardware stack levels required when called:    2
  7264 ;; This function calls:
  7265 ;;		i2_printError
  7266 ;; This function is called by:
  7267 ;;		_isr
  7268 ;; This function uses a non-reentrant model
  7269 ;;
  7270                           
  7271                           	psect	text45
  7272  00165C                     __ptext45:
  7273                           	callstack 0
  7274  00165C                     i2_storeData:
  7275                           	callstack 0
  7276  00165C  FFFF               	dw	65535	; assembler added errata NOP
  7277                           
  7278                           ;incstack = 0
  7279                           ;i2storeData@data stored from wreg
  7280  00165E  6E0A               	movwf	i2storeData@data^0,c
  7281  001660                     
  7282                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  7283  001660  0E45               	movlw	low storeData@receivedMex
  7284  001662  245E               	addwf	storeData@counter^0,w,c
  7285  001664  6ED9               	movwf	fsr2l,c
  7286  001666  6ADA               	clrf	fsr2h,c
  7287  001668  0E00               	movlw	high storeData@receivedMex
  7288  00166A  22DA               	addwfc	fsr2h,f,c
  7289  00166C  C00A  FFDF         	movff	i2storeData@data,indf2
  7290  001670                     
  7291                           ;usart.c: 142:     counter++;
  7292  001670  2A5E               	incf	storeData@counter^0,f,c
  7293                           
  7294                           ;usart.c: 145:     switch(receivedMex[0]){
  7295  001672  EF4A  F00B         	goto	i2l3208
  7296  001676                     i2l3200:
  7297  001676  FFFF               	dw	65535	; assembler added errata NOP
  7298                           
  7299                           ;usart.c: 147:             mexLength = 5;
  7300  001678  0E05               	movlw	5
  7301  00167A  6E6D               	movwf	storeData@mexLength^0,c
  7302                           
  7303                           ;usart.c: 148:             break;
  7304  00167C  EF65  F00B         	goto	i2l3210
  7305  001680                     i2l3202:
  7306  001680  FFFF               	dw	65535	; assembler added errata NOP
  7307                           
  7308                           ;usart.c: 150:             mexLength = 9;
  7309  001682  0E09               	movlw	9
  7310  001684  6E6D               	movwf	storeData@mexLength^0,c
  7311                           
  7312                           ;usart.c: 151:             break;
  7313  001686  EF65  F00B         	goto	i2l3210
  7314  00168A                     i2l3204:
  7315  00168A  FFFF               	dw	65535	; assembler added errata NOP
  7316                           
  7317                           ;usart.c: 153:             mexLength = 1;
  7318  00168C  0E01               	movlw	1
  7319  00168E  6E6D               	movwf	storeData@mexLength^0,c
  7320                           
  7321                           ;usart.c: 154:             break;
  7322  001690  EF65  F00B         	goto	i2l3210
  7323  001694                     i2l3208:
  7324  001694  FFFF               	dw	65535	; assembler added errata NOP
  7325  001696  5045               	movf	storeData@receivedMex^0,w,c
  7326  001698  6E08               	movwf	??i2_storeData^0,c
  7327  00169A  6A09               	clrf	(??i2_storeData+1)^0,c
  7328                           
  7329                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7330                           ; Switch size 1, requested type "simple"
  7331                           ; Number of cases is 1, Range of values is 0 to 0
  7332                           ; switch strategies available:
  7333                           ; Name         Instructions Cycles
  7334                           ; simple_byte            4     3 (average)
  7335                           ;	Chosen strategy is simple_byte
  7336  00169C  5009               	movf	(??i2_storeData+1)^0,w,c
  7337  00169E  0A00               	xorlw	0	; case 0
  7338  0016A0  B4D8               	btfsc	status,2,c
  7339  0016A2  EF55  F00B         	goto	i2l4516
  7340  0016A6  EF65  F00B         	goto	i2l3210
  7341  0016AA                     i2l4516:
  7342  0016AA  FFFF               	dw	65535	; assembler added errata NOP
  7343                           
  7344                           ; Switch size 1, requested type "simple"
  7345                           ; Number of cases is 3, Range of values is 0 to 2
  7346                           ; switch strategies available:
  7347                           ; Name         Instructions Cycles
  7348                           ; simple_byte           10     6 (average)
  7349                           ;	Chosen strategy is simple_byte
  7350  0016AC  5008               	movf	??i2_storeData^0,w,c
  7351  0016AE  0A00               	xorlw	0	; case 0
  7352  0016B0  B4D8               	btfsc	status,2,c
  7353  0016B2  EF3B  F00B         	goto	i2l3200
  7354  0016B6  0A01               	xorlw	1	; case 1
  7355  0016B8  B4D8               	btfsc	status,2,c
  7356  0016BA  EF40  F00B         	goto	i2l3202
  7357  0016BE  0A03               	xorlw	3	; case 2
  7358  0016C0  B4D8               	btfsc	status,2,c
  7359  0016C2  EF45  F00B         	goto	i2l3204
  7360  0016C6  EF65  F00B         	goto	i2l3210
  7361  0016CA                     i2l3210:
  7362  0016CA  FFFF               	dw	65535	; assembler added errata NOP
  7363                           
  7364                           ;usart.c: 161:     if(counter >= mexLength){
  7365  0016CC  506D               	movf	storeData@mexLength^0,w,c
  7366  0016CE  5C5E               	subwf	storeData@counter^0,w,c
  7367  0016D0  A0D8               	btfss	status,0,c
  7368  0016D2  EF6D  F00B         	goto	i2u232_41
  7369  0016D6  EF70  F00B         	goto	i2u232_40
  7370  0016DA                     i2u232_41:
  7371  0016DA  FFFF               	dw	65535	; assembler added errata NOP
  7372  0016DC  EFDC  F00B         	goto	i2l573
  7373  0016E0                     i2u232_40:
  7374  0016E0  FFFF               	dw	65535	; assembler added errata NOP
  7375  0016E2                     
  7376                           ;usart.c: 162:         counter = 0;
  7377  0016E2  0E00               	movlw	0
  7378  0016E4  6E5E               	movwf	storeData@counter^0,c
  7379                           
  7380                           ;usart.c: 166:         switch(receivedMex[0]){
  7381  0016E6  EFC1  F00B         	goto	i2l3226
  7382  0016EA                     i2l3214:
  7383  0016EA  FFFF               	dw	65535	; assembler added errata NOP
  7384                           
  7385                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7386  0016EC  5061               	movf	_dataCounter^0,w,c
  7387  0016EE  0D04               	mullw	4
  7388  0016F0  0EDB               	movlw	low _dataSequence
  7389  0016F2  24F3               	addwf	243,w,c
  7390  0016F4  6ED9               	movwf	fsr2l,c
  7391  0016F6  0E00               	movlw	high _dataSequence
  7392  0016F8  20F4               	addwfc	prodh,w,c
  7393  0016FA  6EDA               	movwf	fsr2h,c
  7394  0016FC  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  7395                           
  7396                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  7397  001700  5061               	movf	_dataCounter^0,w,c
  7398  001702  0D04               	mullw	4
  7399  001704  0EDC               	movlw	low (_dataSequence+1)
  7400  001706  24F3               	addwf	243,w,c
  7401  001708  6ED9               	movwf	fsr2l,c
  7402  00170A  0E00               	movlw	high (_dataSequence+1)
  7403  00170C  20F4               	addwfc	prodh,w,c
  7404  00170E  6EDA               	movwf	fsr2h,c
  7405  001710  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  7406                           
  7407                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  7408  001714  5061               	movf	_dataCounter^0,w,c
  7409  001716  0D04               	mullw	4
  7410  001718  0EDD               	movlw	low (_dataSequence+2)
  7411  00171A  24F3               	addwf	243,w,c
  7412  00171C  6ED9               	movwf	fsr2l,c
  7413  00171E  0E00               	movlw	high (_dataSequence+2)
  7414  001720  20F4               	addwfc	prodh,w,c
  7415  001722  6EDA               	movwf	fsr2h,c
  7416  001724  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  7417                           
  7418                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7419  001728  5061               	movf	_dataCounter^0,w,c
  7420  00172A  0D04               	mullw	4
  7421  00172C  0EDE               	movlw	low (_dataSequence+3)
  7422  00172E  24F3               	addwf	243,w,c
  7423  001730  6ED9               	movwf	fsr2l,c
  7424  001732  0E00               	movlw	high (_dataSequence+3)
  7425  001734  20F4               	addwfc	prodh,w,c
  7426  001736  6EDA               	movwf	fsr2h,c
  7427  001738  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  7428  00173C                     
  7429                           ;usart.c: 173:                 dataCounter++;
  7430  00173C  2A61               	incf	_dataCounter^0,f,c
  7431                           
  7432                           ;usart.c: 174:                 break;
  7433  00173E  EFDC  F00B         	goto	i2l573
  7434  001742                     i2l570:
  7435  001742  FFFF               	dw	65535	; assembler added errata NOP
  7436                           
  7437                           ;usart.c: 177:                 newSequenceData.L = receivedMex[1];
  7438  001744  C046  F0EF         	movff	storeData@receivedMex+1,_newSequenceData
  7439                           
  7440                           ;usart.c: 178:                 newSequenceData.W = receivedMex[2];
  7441  001748  C047  F0F0         	movff	storeData@receivedMex+2,_newSequenceData+1
  7442                           
  7443                           ;usart.c: 179:                 newSequenceData.init_posX = receivedMex[3];
  7444  00174C  C048  F0F1         	movff	storeData@receivedMex+3,_newSequenceData+2
  7445                           
  7446                           ;usart.c: 180:                 newSequenceData.init_posY = receivedMex[4];
  7447  001750  C049  F0F2         	movff	storeData@receivedMex+4,_newSequenceData+3
  7448                           
  7449                           ;usart.c: 181:                 newSequenceData.init_rot = receivedMex[5];
  7450  001754  C04A  F0F3         	movff	storeData@receivedMex+5,_newSequenceData+4
  7451                           
  7452                           ;usart.c: 182:                 newSequenceData.end_posX = receivedMex[6];
  7453  001758  C04B  F0F4         	movff	storeData@receivedMex+6,_newSequenceData+5
  7454                           
  7455                           ;usart.c: 183:                 newSequenceData.end_posY = receivedMex[7];
  7456  00175C  C04C  F0F5         	movff	storeData@receivedMex+7,_newSequenceData+6
  7457                           
  7458                           ;usart.c: 184:                 newSequenceData.end_rot = receivedMex[8];
  7459  001760  C04D  F0F6         	movff	storeData@receivedMex+8,_newSequenceData+7
  7460  001764                     
  7461                           ;usart.c: 186:                 _newSequence = 1;
  7462  001764  0E01               	movlw	1
  7463  001766  6E5F               	movwf	__newSequence^0,c
  7464                           
  7465                           ;usart.c: 187:                 break;
  7466  001768  EFDC  F00B         	goto	i2l573
  7467  00176C                     i2l3220:
  7468  00176C  FFFF               	dw	65535	; assembler added errata NOP
  7469                           
  7470                           ;usart.c: 190:                 _fatalError = 1;
  7471  00176E  0E01               	movlw	1
  7472  001770  6E60               	movwf	__fatalError^0,c
  7473                           
  7474                           ;usart.c: 191:                 break;
  7475  001772  EFDC  F00B         	goto	i2l573
  7476  001776                     i2l3222:
  7477  001776  FFFF               	dw	65535	; assembler added errata NOP
  7478                           
  7479                           ;usart.c: 194:                 printError(8);
  7480  001778  0E08               	movlw	8
  7481  00177A  EC08  F00D         	call	i2_printError
  7482                           
  7483                           ;usart.c: 195:                 break;
  7484  00177E  EFDC  F00B         	goto	i2l573
  7485  001782                     i2l3226:
  7486  001782  FFFF               	dw	65535	; assembler added errata NOP
  7487  001784  5045               	movf	storeData@receivedMex^0,w,c
  7488  001786  6E08               	movwf	??i2_storeData^0,c
  7489  001788  6A09               	clrf	(??i2_storeData+1)^0,c
  7490                           
  7491                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7492                           ; Switch size 1, requested type "simple"
  7493                           ; Number of cases is 1, Range of values is 0 to 0
  7494                           ; switch strategies available:
  7495                           ; Name         Instructions Cycles
  7496                           ; simple_byte            4     3 (average)
  7497                           ;	Chosen strategy is simple_byte
  7498  00178A  5009               	movf	(??i2_storeData+1)^0,w,c
  7499  00178C  0A00               	xorlw	0	; case 0
  7500  00178E  B4D8               	btfsc	status,2,c
  7501  001790  EFCC  F00B         	goto	i2l4518
  7502  001794  EFBB  F00B         	goto	i2l3222
  7503  001798                     i2l4518:
  7504  001798  FFFF               	dw	65535	; assembler added errata NOP
  7505                           
  7506                           ; Switch size 1, requested type "simple"
  7507                           ; Number of cases is 3, Range of values is 0 to 2
  7508                           ; switch strategies available:
  7509                           ; Name         Instructions Cycles
  7510                           ; simple_byte           10     6 (average)
  7511                           ;	Chosen strategy is simple_byte
  7512  00179A  5008               	movf	??i2_storeData^0,w,c
  7513  00179C  0A00               	xorlw	0	; case 0
  7514  00179E  B4D8               	btfsc	status,2,c
  7515  0017A0  EF75  F00B         	goto	i2l3214
  7516  0017A4  0A01               	xorlw	1	; case 1
  7517  0017A6  B4D8               	btfsc	status,2,c
  7518  0017A8  EFA1  F00B         	goto	i2l570
  7519  0017AC  0A03               	xorlw	3	; case 2
  7520  0017AE  B4D8               	btfsc	status,2,c
  7521  0017B0  EFB6  F00B         	goto	i2l3220
  7522  0017B4  EFBB  F00B         	goto	i2l3222
  7523  0017B8                     i2l573:
  7524  0017B8  FFFF               	dw	65535	; assembler added errata NOP
  7525  0017BA  0012               	return		;funcret
  7526  0017BC  FFFF               	dw	65535	; errata NOP
  7527  0017BE                     __end_ofi2_storeData:
  7528                           	callstack 0
  7529                           
  7530 ;; *************** function i2_printError *****************
  7531 ;; Defined at:
  7532 ;;		line 53 in file "usart.c"
  7533 ;; Parameters:    Size  Location     Type
  7534 ;;  errCode         1    wreg     unsigned char 
  7535 ;; Auto vars:     Size  Location     Type
  7536 ;;  errCode         1    6[COMRAM] unsigned char 
  7537 ;; Return value:  Size  Location     Type
  7538 ;;                  1    wreg      void 
  7539 ;; Registers used:
  7540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7541 ;; Tracked objects:
  7542 ;;		On entry : 0/0
  7543 ;;		On exit  : 0/0
  7544 ;;		Unchanged: 0/0
  7545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7546 ;;      Params:         0       0       0       0       0       0       0
  7547 ;;      Locals:         1       0       0       0       0       0       0
  7548 ;;      Temps:          2       0       0       0       0       0       0
  7549 ;;      Totals:         3       0       0       0       0       0       0
  7550 ;;Total ram usage:        3 bytes
  7551 ;; Hardware stack levels used:    1
  7552 ;; Hardware stack levels required when called:    1
  7553 ;; This function calls:
  7554 ;;		i2_uartTx
  7555 ;; This function is called by:
  7556 ;;		i2_storeData
  7557 ;; This function uses a non-reentrant model
  7558 ;;
  7559                           
  7560                           	psect	text46
  7561  001A10                     __ptext46:
  7562                           	callstack 0
  7563  001A10                     i2_printError:
  7564                           	callstack 0
  7565  001A10  FFFF               	dw	65535	; assembler added errata NOP
  7566                           
  7567                           ;incstack = 0
  7568                           ;i2printError@errCode stored from wreg
  7569  001A12  6E07               	movwf	i2printError@errCode^0,c
  7570  001A14                     
  7571                           ;usart.c: 55:     switch(errCode){
  7572  001A14  EF64  F00D         	goto	i2l2946
  7573  001A18                     i2l2928:
  7574  001A18  FFFF               	dw	65535	; assembler added errata NOP
  7575                           
  7576                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7577  001A1A  0EA5               	movlw	low _errString_Feed
  7578  001A1C  6E01               	movwf	i2uartTx@ptr^0,c
  7579  001A1E  0E00               	movlw	high _errString_Feed
  7580  001A20  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7581  001A22  0E1E               	movlw	30
  7582  001A24  6E03               	movwf	i2uartTx@length^0,c
  7583  001A26  EC9A  F011         	call	i2_uartTx	;wreg free
  7584                           
  7585                           ;usart.c: 58:             break;
  7586  001A2A  EF93  F00D         	goto	i2l529
  7587  001A2E                     i2l2930:
  7588  001A2E  FFFF               	dw	65535	; assembler added errata NOP
  7589                           
  7590                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7591  001A30  0E5E               	movlw	low _errString_ZEND
  7592  001A32  6E01               	movwf	i2uartTx@ptr^0,c
  7593  001A34  0E01               	movlw	high _errString_ZEND
  7594  001A36  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7595  001A38  0E29               	movlw	41
  7596  001A3A  6E03               	movwf	i2uartTx@length^0,c
  7597  001A3C  EC9A  F011         	call	i2_uartTx	;wreg free
  7598                           
  7599                           ;usart.c: 61:             break;
  7600  001A40  EF93  F00D         	goto	i2l529
  7601  001A44                     i2l2932:
  7602  001A44  FFFF               	dw	65535	; assembler added errata NOP
  7603                           
  7604                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7605  001A46  0E87               	movlw	low _errString_Reset
  7606  001A48  6E01               	movwf	i2uartTx@ptr^0,c
  7607  001A4A  0E01               	movlw	high _errString_Reset
  7608  001A4C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7609  001A4E  0E28               	movlw	40
  7610  001A50  6E03               	movwf	i2uartTx@length^0,c
  7611  001A52  EC9A  F011         	call	i2_uartTx	;wreg free
  7612                           
  7613                           ;usart.c: 64:             break;
  7614  001A56  EF93  F00D         	goto	i2l529
  7615  001A5A                     i2l2934:
  7616  001A5A  FFFF               	dw	65535	; assembler added errata NOP
  7617                           
  7618                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7619  001A5C  0E35               	movlw	low _errString_Point
  7620  001A5E  6E01               	movwf	i2uartTx@ptr^0,c
  7621  001A60  0E01               	movlw	high _errString_Point
  7622  001A62  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7623  001A64  0E29               	movlw	41
  7624  001A66  6E03               	movwf	i2uartTx@length^0,c
  7625  001A68  EC9A  F011         	call	i2_uartTx	;wreg free
  7626                           
  7627                           ;usart.c: 67:             break;
  7628  001A6C  EF93  F00D         	goto	i2l529
  7629  001A70                     i2l2936:
  7630  001A70  FFFF               	dw	65535	; assembler added errata NOP
  7631                           
  7632                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7633  001A72  0E84               	movlw	low _errString_Bound
  7634  001A74  6E01               	movwf	i2uartTx@ptr^0,c
  7635  001A76  0E00               	movlw	high _errString_Bound
  7636  001A78  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7637  001A7A  0E21               	movlw	33
  7638  001A7C  6E03               	movwf	i2uartTx@length^0,c
  7639  001A7E  EC9A  F011         	call	i2_uartTx	;wreg free
  7640                           
  7641                           ;usart.c: 70:             break;
  7642  001A82  EF93  F00D         	goto	i2l529
  7643  001A86                     i2l2938:
  7644  001A86  FFFF               	dw	65535	; assembler added errata NOP
  7645                           
  7646                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7647  001A88  0E00               	movlw	low _errString_PointZ
  7648  001A8A  6E01               	movwf	i2uartTx@ptr^0,c
  7649  001A8C  0E01               	movlw	high _errString_PointZ
  7650  001A8E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7651  001A90  0E35               	movlw	53
  7652  001A92  6E03               	movwf	i2uartTx@length^0,c
  7653  001A94  EC9A  F011         	call	i2_uartTx	;wreg free
  7654                           
  7655                           ;usart.c: 73:             break;
  7656  001A98  EF93  F00D         	goto	i2l529
  7657  001A9C                     i2l2940:
  7658  001A9C  FFFF               	dw	65535	; assembler added errata NOP
  7659                           
  7660                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7661  001A9E  0EAF               	movlw	low _errString_Fatal
  7662  001AA0  6E01               	movwf	i2uartTx@ptr^0,c
  7663  001AA2  0E01               	movlw	high _errString_Fatal
  7664  001AA4  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7665  001AA6  0E27               	movlw	39
  7666  001AA8  6E03               	movwf	i2uartTx@length^0,c
  7667  001AAA  EC9A  F011         	call	i2_uartTx	;wreg free
  7668                           
  7669                           ;usart.c: 76:             break;
  7670  001AAE  EF93  F00D         	goto	i2l529
  7671  001AB2                     i2l2942:
  7672  001AB2  FFFF               	dw	65535	; assembler added errata NOP
  7673                           
  7674                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7675  001AB4  0EC3               	movlw	low _errString_Command
  7676  001AB6  6E01               	movwf	i2uartTx@ptr^0,c
  7677  001AB8  0E00               	movlw	high _errString_Command
  7678  001ABA  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7679  001ABC  0E18               	movlw	24
  7680  001ABE  6E03               	movwf	i2uartTx@length^0,c
  7681  001AC0  EC9A  F011         	call	i2_uartTx	;wreg free
  7682                           
  7683                           ;usart.c: 79:             break;
  7684  001AC4  EF93  F00D         	goto	i2l529
  7685  001AC8                     i2l2946:
  7686  001AC8  FFFF               	dw	65535	; assembler added errata NOP
  7687  001ACA  5007               	movf	i2printError@errCode^0,w,c
  7688  001ACC  6E05               	movwf	??i2_printError^0,c
  7689  001ACE  6A06               	clrf	(??i2_printError+1)^0,c
  7690                           
  7691                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7692                           ; Switch size 1, requested type "simple"
  7693                           ; Number of cases is 1, Range of values is 0 to 0
  7694                           ; switch strategies available:
  7695                           ; Name         Instructions Cycles
  7696                           ; simple_byte            4     3 (average)
  7697                           ;	Chosen strategy is simple_byte
  7698  001AD0  5006               	movf	(??i2_printError+1)^0,w,c
  7699  001AD2  0A00               	xorlw	0	; case 0
  7700  001AD4  B4D8               	btfsc	status,2,c
  7701  001AD6  EF6F  F00D         	goto	i2l4520
  7702  001ADA  EF93  F00D         	goto	i2l529
  7703  001ADE                     i2l4520:
  7704  001ADE  FFFF               	dw	65535	; assembler added errata NOP
  7705                           
  7706                           ; Switch size 1, requested type "simple"
  7707                           ; Number of cases is 8, Range of values is 1 to 8
  7708                           ; switch strategies available:
  7709                           ; Name         Instructions Cycles
  7710                           ; simple_byte           25    13 (average)
  7711                           ;	Chosen strategy is simple_byte
  7712  001AE0  5005               	movf	??i2_printError^0,w,c
  7713  001AE2  0A01               	xorlw	1	; case 1
  7714  001AE4  B4D8               	btfsc	status,2,c
  7715  001AE6  EF0C  F00D         	goto	i2l2928
  7716  001AEA  0A03               	xorlw	3	; case 2
  7717  001AEC  B4D8               	btfsc	status,2,c
  7718  001AEE  EF17  F00D         	goto	i2l2930
  7719  001AF2  0A01               	xorlw	1	; case 3
  7720  001AF4  B4D8               	btfsc	status,2,c
  7721  001AF6  EF22  F00D         	goto	i2l2932
  7722  001AFA  0A07               	xorlw	7	; case 4
  7723  001AFC  B4D8               	btfsc	status,2,c
  7724  001AFE  EF2D  F00D         	goto	i2l2934
  7725  001B02  0A01               	xorlw	1	; case 5
  7726  001B04  B4D8               	btfsc	status,2,c
  7727  001B06  EF38  F00D         	goto	i2l2936
  7728  001B0A  0A03               	xorlw	3	; case 6
  7729  001B0C  B4D8               	btfsc	status,2,c
  7730  001B0E  EF43  F00D         	goto	i2l2938
  7731  001B12  0A01               	xorlw	1	; case 7
  7732  001B14  B4D8               	btfsc	status,2,c
  7733  001B16  EF4E  F00D         	goto	i2l2940
  7734  001B1A  0A0F               	xorlw	15	; case 8
  7735  001B1C  B4D8               	btfsc	status,2,c
  7736  001B1E  EF59  F00D         	goto	i2l2942
  7737  001B22  EF93  F00D         	goto	i2l529
  7738  001B26                     i2l529:
  7739  001B26  FFFF               	dw	65535	; assembler added errata NOP
  7740  001B28  0012               	return		;funcret
  7741  001B2A  FFFF               	dw	65535	; errata NOP
  7742  001B2C                     __end_ofi2_printError:
  7743                           	callstack 0
  7744                           
  7745 ;; *************** function i2_uartTx *****************
  7746 ;; Defined at:
  7747 ;;		line 221 in file "usart.c"
  7748 ;; Parameters:    Size  Location     Type
  7749 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7750 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  7751 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  7752 ;;  length          1    2[COMRAM] unsigned char 
  7753 ;; Auto vars:     Size  Location     Type
  7754 ;;  i               1    3[COMRAM] unsigned char 
  7755 ;; Return value:  Size  Location     Type
  7756 ;;                  1    wreg      void 
  7757 ;; Registers used:
  7758 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7759 ;; Tracked objects:
  7760 ;;		On entry : 0/0
  7761 ;;		On exit  : 0/0
  7762 ;;		Unchanged: 0/0
  7763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7764 ;;      Params:         3       0       0       0       0       0       0
  7765 ;;      Locals:         1       0       0       0       0       0       0
  7766 ;;      Temps:          0       0       0       0       0       0       0
  7767 ;;      Totals:         4       0       0       0       0       0       0
  7768 ;;Total ram usage:        4 bytes
  7769 ;; Hardware stack levels used:    1
  7770 ;; This function calls:
  7771 ;;		Nothing
  7772 ;; This function is called by:
  7773 ;;		i2_printError
  7774 ;; This function uses a non-reentrant model
  7775 ;;
  7776                           
  7777                           	psect	text47
  7778  002334                     __ptext47:
  7779                           	callstack 0
  7780  002334                     i2_uartTx:
  7781                           	callstack 0
  7782  002334  FFFF               	dw	65535	; assembler added errata NOP
  7783  002336                     
  7784                           ;usart.c: 221: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 222: {;usa
      +                          rt.c: 224:     for(char i = 1; i < length; i++){
  7785  002336  0E01               	movlw	1
  7786  002338  6E04               	movwf	i2uartTx@i^0,c
  7787  00233A  EFB3  F011         	goto	i2l2618
  7788  00233E                     i2l2614:
  7789  00233E  FFFF               	dw	65535	; assembler added errata NOP
  7790                           
  7791                           ;usart.c: 226:         TXREG = *ptr;
  7792  002340  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  7793  002344  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  7794  002348  50DF               	movf	indf2,w,c
  7795  00234A  6EAD               	movwf	173,c	;volatile
  7796  00234C                     i2l584:
  7797  00234C  FFFF               	dw	65535	; assembler added errata NOP
  7798  00234E  A2AC               	btfss	172,1,c	;volatile
  7799  002350  EFAC  F011         	goto	i2u169_41
  7800  002354  EFAF  F011         	goto	i2u169_40
  7801  002358                     i2u169_41:
  7802  002358  FFFF               	dw	65535	; assembler added errata NOP
  7803  00235A  EFA6  F011         	goto	i2l584
  7804  00235E                     i2u169_40:
  7805  00235E  FFFF               	dw	65535	; assembler added errata NOP
  7806  002360                     
  7807                           ;usart.c: 230:         ptr++;
  7808  002360  4A01               	infsnz	i2uartTx@ptr^0,f,c
  7809  002362  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  7810                           
  7811                           ;usart.c: 231:     }
  7812  002364  2A04               	incf	i2uartTx@i^0,f,c
  7813  002366                     i2l2618:
  7814  002366  FFFF               	dw	65535	; assembler added errata NOP
  7815  002368  5003               	movf	i2uartTx@length^0,w,c
  7816  00236A  5C04               	subwf	i2uartTx@i^0,w,c
  7817  00236C  A0D8               	btfss	status,0,c
  7818  00236E  EFBB  F011         	goto	i2u170_41
  7819  002372  EFBE  F011         	goto	i2u170_40
  7820  002376                     i2u170_41:
  7821  002376  FFFF               	dw	65535	; assembler added errata NOP
  7822  002378  EF9F  F011         	goto	i2l2614
  7823  00237C                     i2u170_40:
  7824  00237C  FFFF               	dw	65535	; assembler added errata NOP
  7825  00237E  0012               	return		;funcret
  7826  002380  FFFF               	dw	65535	; errata NOP
  7827  002382                     __end_ofi2_uartTx:
  7828                           	callstack 0
  7829                           
  7830 ;; *************** function _writeTM0 *****************
  7831 ;; Defined at:
  7832 ;;		line 21 in file "motors.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;		None
  7835 ;; Auto vars:     Size  Location     Type
  7836 ;;		None
  7837 ;; Return value:  Size  Location     Type
  7838 ;;                  1    wreg      void 
  7839 ;; Registers used:
  7840 ;;		wreg, status,2
  7841 ;; Tracked objects:
  7842 ;;		On entry : 0/0
  7843 ;;		On exit  : 0/0
  7844 ;;		Unchanged: 0/0
  7845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7846 ;;      Params:         0       0       0       0       0       0       0
  7847 ;;      Locals:         0       0       0       0       0       0       0
  7848 ;;      Temps:          0       0       0       0       0       0       0
  7849 ;;      Totals:         0       0       0       0       0       0       0
  7850 ;;Total ram usage:        0 bytes
  7851 ;; Hardware stack levels used:    1
  7852 ;; This function calls:
  7853 ;;		Nothing
  7854 ;; This function is called by:
  7855 ;;		_isr
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           	psect	text48
  7860  0024E2                     __ptext48:
  7861                           	callstack 0
  7862  0024E2                     _writeTM0:
  7863                           	callstack 0
  7864  0024E2  FFFF               	dw	65535	; assembler added errata NOP
  7865  0024E4                     
  7866                           ;motors.c: 22:     tm0Error = 1;
  7867  0024E4  0E00               	movlw	0
  7868  0024E6  6E5C               	movwf	(_tm0Error+1)^0,c
  7869  0024E8  0E01               	movlw	1
  7870  0024EA  6E5B               	movwf	_tm0Error^0,c
  7871  0024EC  0012               	return		;funcret
  7872  0024EE  FFFF               	dw	65535	; errata NOP
  7873  0024F0                     __end_of_writeTM0:
  7874                           	callstack 0
  7875                           
  7876 ;; *************** function _whatsTM0Limit *****************
  7877 ;; Defined at:
  7878 ;;		line 35 in file "motors.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;		None
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;		None
  7883 ;; Return value:  Size  Location     Type
  7884 ;;                  1    wreg      unsigned char 
  7885 ;; Registers used:
  7886 ;;		wreg, status,2
  7887 ;; Tracked objects:
  7888 ;;		On entry : 0/0
  7889 ;;		On exit  : 0/0
  7890 ;;		Unchanged: 0/0
  7891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7892 ;;      Params:         0       0       0       0       0       0       0
  7893 ;;      Locals:         0       0       0       0       0       0       0
  7894 ;;      Temps:          0       0       0       0       0       0       0
  7895 ;;      Totals:         0       0       0       0       0       0       0
  7896 ;;Total ram usage:        0 bytes
  7897 ;; Hardware stack levels used:    1
  7898 ;; This function calls:
  7899 ;;		Nothing
  7900 ;; This function is called by:
  7901 ;;		_isr
  7902 ;; This function uses a non-reentrant model
  7903 ;;
  7904                           
  7905                           	psect	text49
  7906  00259A                     __ptext49:
  7907                           	callstack 0
  7908  00259A                     _whatsTM0Limit:
  7909                           	callstack 0
  7910  00259A  FFFF               	dw	65535	; assembler added errata NOP
  7911  00259C                     
  7912                           ;motors.c: 36:     return(tm0Limit);
  7913  00259C  5068               	movf	_tm0Limit^0,w,c
  7914  00259E  0012               	return		;funcret
  7915  0025A0  FFFF               	dw	65535	; errata NOP
  7916  0025A2                     __end_of_whatsTM0Limit:
  7917                           	callstack 0
  7918                           
  7919 ;; *************** function _toggleStep *****************
  7920 ;; Defined at:
  7921 ;;		line 80 in file "pwm.c"
  7922 ;; Parameters:    Size  Location     Type
  7923 ;;		None
  7924 ;; Auto vars:     Size  Location     Type
  7925 ;;		None
  7926 ;; Return value:  Size  Location     Type
  7927 ;;                  1    wreg      void 
  7928 ;; Registers used:
  7929 ;;		wreg, status,2
  7930 ;; Tracked objects:
  7931 ;;		On entry : 0/0
  7932 ;;		On exit  : 0/0
  7933 ;;		Unchanged: 0/0
  7934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7935 ;;      Params:         0       0       0       0       0       0       0
  7936 ;;      Locals:         0       0       0       0       0       0       0
  7937 ;;      Temps:          0       0       0       0       0       0       0
  7938 ;;      Totals:         0       0       0       0       0       0       0
  7939 ;;Total ram usage:        0 bytes
  7940 ;; Hardware stack levels used:    1
  7941 ;; This function calls:
  7942 ;;		Nothing
  7943 ;; This function is called by:
  7944 ;;		_isr
  7945 ;; This function uses a non-reentrant model
  7946 ;;
  7947                           
  7948                           	psect	text50
  7949  002554                     __ptext50:
  7950                           	callstack 0
  7951  002554                     _toggleStep:
  7952                           	callstack 0
  7953  002554  FFFF               	dw	65535	; assembler added errata NOP
  7954  002556                     
  7955                           ;pwm.c: 81:     stepToggle = 1;
  7956  002556  0E01               	movlw	1
  7957  002558  6E66               	movwf	_stepToggle^0,c	;volatile
  7958  00255A  0012               	return		;funcret
  7959  00255C  FFFF               	dw	65535	; errata NOP
  7960  00255E                     __end_of_toggleStep:
  7961                           	callstack 0
  7962                           
  7963 ;; *************** function _setTouchRel *****************
  7964 ;; Defined at:
  7965 ;;		line 86 in file "adc.c"
  7966 ;; Parameters:    Size  Location     Type
  7967 ;;		None
  7968 ;; Auto vars:     Size  Location     Type
  7969 ;;		None
  7970 ;; Return value:  Size  Location     Type
  7971 ;;                  1    wreg      void 
  7972 ;; Registers used:
  7973 ;;		wreg, status,2
  7974 ;; Tracked objects:
  7975 ;;		On entry : 0/0
  7976 ;;		On exit  : 0/0
  7977 ;;		Unchanged: 0/0
  7978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7979 ;;      Params:         0       0       0       0       0       0       0
  7980 ;;      Locals:         0       0       0       0       0       0       0
  7981 ;;      Temps:          0       0       0       0       0       0       0
  7982 ;;      Totals:         0       0       0       0       0       0       0
  7983 ;;Total ram usage:        0 bytes
  7984 ;; Hardware stack levels used:    1
  7985 ;; This function calls:
  7986 ;;		Nothing
  7987 ;; This function is called by:
  7988 ;;		_isr
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           	psect	text51
  7993  00255E                     __ptext51:
  7994                           	callstack 0
  7995  00255E                     _setTouchRel:
  7996                           	callstack 0
  7997  00255E  FFFF               	dw	65535	; assembler added errata NOP
  7998  002560                     
  7999                           ;adc.c: 87:     touch_rel = 1;
  8000  002560  0E01               	movlw	1
  8001  002562  6E65               	movwf	_touch_rel^0,c	;volatile
  8002  002564  0012               	return		;funcret
  8003  002566  FFFF               	dw	65535	; errata NOP
  8004  002568                     __end_of_setTouchRel:
  8005                           	callstack 0
  8006                           
  8007 ;; *************** function _setThermRel *****************
  8008 ;; Defined at:
  8009 ;;		line 79 in file "adc.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;		None
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;		None
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  1    wreg      void 
  8016 ;; Registers used:
  8017 ;;		wreg, status,2
  8018 ;; Tracked objects:
  8019 ;;		On entry : 0/0
  8020 ;;		On exit  : 0/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8023 ;;      Params:         0       0       0       0       0       0       0
  8024 ;;      Locals:         0       0       0       0       0       0       0
  8025 ;;      Temps:          0       0       0       0       0       0       0
  8026 ;;      Totals:         0       0       0       0       0       0       0
  8027 ;;Total ram usage:        0 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; This function calls:
  8030 ;;		Nothing
  8031 ;; This function is called by:
  8032 ;;		_isr
  8033 ;; This function uses a non-reentrant model
  8034 ;;
  8035                           
  8036                           	psect	text52
  8037  002568                     __ptext52:
  8038                           	callstack 0
  8039  002568                     _setThermRel:
  8040                           	callstack 0
  8041  002568  FFFF               	dw	65535	; assembler added errata NOP
  8042  00256A                     
  8043                           ;adc.c: 80:     therm_rel = 1;
  8044  00256A  0E01               	movlw	1
  8045  00256C  6E64               	movwf	_therm_rel^0,c	;volatile
  8046  00256E  0012               	return		;funcret
  8047  002570  FFFF               	dw	65535	; errata NOP
  8048  002572                     __end_of_setThermRel:
  8049                           	callstack 0
  8050                           
  8051 ;; *************** function _retPeriod *****************
  8052 ;; Defined at:
  8053 ;;		line 88 in file "pwm.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;		None
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;		None
  8058 ;; Return value:  Size  Location     Type
  8059 ;;                  2    0[COMRAM] unsigned int 
  8060 ;; Registers used:
  8061 ;;		None
  8062 ;; Tracked objects:
  8063 ;;		On entry : 0/0
  8064 ;;		On exit  : 0/0
  8065 ;;		Unchanged: 0/0
  8066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8067 ;;      Params:         2       0       0       0       0       0       0
  8068 ;;      Locals:         0       0       0       0       0       0       0
  8069 ;;      Temps:          0       0       0       0       0       0       0
  8070 ;;      Totals:         2       0       0       0       0       0       0
  8071 ;;Total ram usage:        2 bytes
  8072 ;; Hardware stack levels used:    1
  8073 ;; This function calls:
  8074 ;;		Nothing
  8075 ;; This function is called by:
  8076 ;;		_isr
  8077 ;; This function uses a non-reentrant model
  8078 ;;
  8079                           
  8080                           	psect	text53
  8081  0024F0                     __ptext53:
  8082                           	callstack 0
  8083  0024F0                     _retPeriod:
  8084                           	callstack 0
  8085  0024F0  FFFF               	dw	65535	; assembler added errata NOP
  8086  0024F2                     
  8087                           ;pwm.c: 89:     return pwmPeriod;
  8088  0024F2  C055  F001         	movff	_pwmPeriod,?_retPeriod
  8089  0024F6  C056  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  8090  0024FA  0012               	return		;funcret
  8091  0024FC  FFFF               	dw	65535	; errata NOP
  8092  0024FE                     __end_of_retPeriod:
  8093                           	callstack 0
  8094                           
  8095 ;; *************** function _increaseStep *****************
  8096 ;; Defined at:
  8097 ;;		line 72 in file "pwm.c"
  8098 ;; Parameters:    Size  Location     Type
  8099 ;;		None
  8100 ;; Auto vars:     Size  Location     Type
  8101 ;;		None
  8102 ;; Return value:  Size  Location     Type
  8103 ;;                  1    wreg      void 
  8104 ;; Registers used:
  8105 ;;		status,2, status,0
  8106 ;; Tracked objects:
  8107 ;;		On entry : 0/0
  8108 ;;		On exit  : 0/0
  8109 ;;		Unchanged: 0/0
  8110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8111 ;;      Params:         0       0       0       0       0       0       0
  8112 ;;      Locals:         0       0       0       0       0       0       0
  8113 ;;      Temps:          0       0       0       0       0       0       0
  8114 ;;      Totals:         0       0       0       0       0       0       0
  8115 ;;Total ram usage:        0 bytes
  8116 ;; Hardware stack levels used:    1
  8117 ;; This function calls:
  8118 ;;		Nothing
  8119 ;; This function is called by:
  8120 ;;		_isr
  8121 ;; This function uses a non-reentrant model
  8122 ;;
  8123                           
  8124                           	psect	text54
  8125  0025A2                     __ptext54:
  8126                           	callstack 0
  8127  0025A2                     _increaseStep:
  8128                           	callstack 0
  8129  0025A2  FFFF               	dw	65535	; assembler added errata NOP
  8130  0025A4                     
  8131                           ;pwm.c: 73:     pwmStep++;
  8132  0025A4  2A67               	incf	_pwmStep^0,f,c	;volatile
  8133  0025A6  0012               	return		;funcret
  8134  0025A8  FFFF               	dw	65535	; errata NOP
  8135  0025AA                     __end_of_increaseStep:
  8136                           	callstack 0
  8137                           
  8138                           	psect	rparam
  8139  0000                     
  8140                           	psect	temp
  8141  00006E                     btemp:
  8142                           	callstack 0
  8143  00006E                     	ds	1
  8144  0000                     int$flags	set	btemp
  8145  0000                     wtemp8	set	btemp+1
  8146  0000                     ttemp5	set	btemp+1
  8147  0000                     ttemp6	set	btemp+4
  8148  0000                     ttemp7	set	btemp+8
  8149                           
  8150                           	psect	idloc
  8151                           
  8152                           ;Config register IDLOC0 @ 0x200000
  8153                           ;	unspecified, using default values
  8154  200000                     	org	2097152
  8155  200000  FF                 	db	255
  8156                           
  8157                           ;Config register IDLOC1 @ 0x200001
  8158                           ;	unspecified, using default values
  8159  200001                     	org	2097153
  8160  200001  FF                 	db	255
  8161                           
  8162                           ;Config register IDLOC2 @ 0x200002
  8163                           ;	unspecified, using default values
  8164  200002                     	org	2097154
  8165  200002  FF                 	db	255
  8166                           
  8167                           ;Config register IDLOC3 @ 0x200003
  8168                           ;	unspecified, using default values
  8169  200003                     	org	2097155
  8170  200003  FF                 	db	255
  8171                           
  8172                           ;Config register IDLOC4 @ 0x200004
  8173                           ;	unspecified, using default values
  8174  200004                     	org	2097156
  8175  200004  FF                 	db	255
  8176                           
  8177                           ;Config register IDLOC5 @ 0x200005
  8178                           ;	unspecified, using default values
  8179  200005                     	org	2097157
  8180  200005  FF                 	db	255
  8181                           
  8182                           ;Config register IDLOC6 @ 0x200006
  8183                           ;	unspecified, using default values
  8184  200006                     	org	2097158
  8185  200006  FF                 	db	255
  8186                           
  8187                           ;Config register IDLOC7 @ 0x200007
  8188                           ;	unspecified, using default values
  8189  200007                     	org	2097159
  8190  200007  FF                 	db	255
  8191                           
  8192                           	psect	config
  8193                           
  8194                           ; Padding undefined space
  8195  300000                     	org	3145728
  8196  300000  FF                 	db	255
  8197                           
  8198                           ;Config register CONFIG1H @ 0x300001
  8199                           ;	Oscillator Selection bits
  8200                           ;	OSC = XT, XT oscillator
  8201                           ;	Oscillator System Clock Switch Enable bit
  8202                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8203  300001                     	org	3145729
  8204  300001  21                 	db	33
  8205                           
  8206                           ;Config register CONFIG2L @ 0x300002
  8207                           ;	Power-up Timer Enable bit
  8208                           ;	PWRT = OFF, PWRT disabled
  8209                           ;	Brown-out Reset Enable bit
  8210                           ;	BOR = OFF, Brown-out Reset disabled
  8211                           ;	Brown-out Reset Voltage bits
  8212                           ;	BORV = 20, VBOR set to 2.0V
  8213  300002                     	org	3145730
  8214  300002  0D                 	db	13
  8215                           
  8216                           ;Config register CONFIG2H @ 0x300003
  8217                           ;	Watchdog Timer Enable bit
  8218                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8219                           ;	Watchdog Timer Postscale Select bits
  8220                           ;	WDTPS = 128, 1:128
  8221  300003                     	org	3145731
  8222  300003  0E                 	db	14
  8223                           
  8224                           ; Padding undefined space
  8225  300004                     	org	3145732
  8226  300004  FF                 	db	255
  8227                           
  8228                           ;Config register CONFIG3H @ 0x300005
  8229                           ;	CCP2 Mux bit
  8230                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8231  300005                     	org	3145733
  8232  300005  00                 	db	0
  8233                           
  8234                           ;Config register CONFIG4L @ 0x300006
  8235                           ;	Stack Full/Underflow Reset Enable bit
  8236                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8237                           ;	Low Voltage ICSP Enable bit
  8238                           ;	LVP = OFF, Low Voltage ICSP disabled
  8239                           ;	Background Debugger Enable bit
  8240                           ;	DEBUG = 0x1, unprogrammed default
  8241  300006                     	org	3145734
  8242  300006  80                 	db	128
  8243                           
  8244                           ; Padding undefined space
  8245  300007                     	org	3145735
  8246  300007  FF                 	db	255
  8247                           
  8248                           ;Config register CONFIG5L @ 0x300008
  8249                           ;	Code Protection bit
  8250                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8251                           ;	Code Protection bit
  8252                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8253                           ;	Code Protection bit
  8254                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8255                           ;	Code Protection bit
  8256                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8257  300008                     	org	3145736
  8258  300008  0F                 	db	15
  8259                           
  8260                           ;Config register CONFIG5H @ 0x300009
  8261                           ;	Boot Block Code Protection bit
  8262                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8263                           ;	Data EEPROM Code Protection bit
  8264                           ;	CPD = OFF, Data EEPROM not code protected
  8265  300009                     	org	3145737
  8266  300009  C0                 	db	192
  8267                           
  8268                           ;Config register CONFIG6L @ 0x30000A
  8269                           ;	Write Protection bit
  8270                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8271                           ;	Write Protection bit
  8272                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8273                           ;	Write Protection bit
  8274                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8275                           ;	Write Protection bit
  8276                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8277  30000A                     	org	3145738
  8278  30000A  0F                 	db	15
  8279                           
  8280                           ;Config register CONFIG6H @ 0x30000B
  8281                           ;	Configuration Register Write Protection bit
  8282                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8283                           ;	Boot Block Write Protection bit
  8284                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8285                           ;	Data EEPROM Write Protection bit
  8286                           ;	WRTD = OFF, Data EEPROM not write protected
  8287  30000B                     	org	3145739
  8288  30000B  E0                 	db	224
  8289                           
  8290                           ;Config register CONFIG7L @ 0x30000C
  8291                           ;	Table Read Protection bit
  8292                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8293                           ;	Table Read Protection bit
  8294                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8295                           ;	Table Read Protection bit
  8296                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8297                           ;	Table Read Protection bit
  8298                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8299  30000C                     	org	3145740
  8300  30000C  0F                 	db	15
  8301                           
  8302                           ;Config register CONFIG7H @ 0x30000D
  8303                           ;	Boot Block Table Read Protection bit
  8304                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8305  30000D                     	org	3145741
  8306  30000D  40                 	db	64
  8307                           tosu	equ	0xFFF
  8308                           tosh	equ	0xFFE
  8309                           tosl	equ	0xFFD
  8310                           stkptr	equ	0xFFC
  8311                           pclatu	equ	0xFFB
  8312                           pclath	equ	0xFFA
  8313                           pcl	equ	0xFF9
  8314                           tblptru	equ	0xFF8
  8315                           tblptrh	equ	0xFF7
  8316                           tblptrl	equ	0xFF6
  8317                           tablat	equ	0xFF5
  8318                           prodh	equ	0xFF4
  8319                           prodl	equ	0xFF3
  8320                           indf0	equ	0xFEF
  8321                           postinc0	equ	0xFEE
  8322                           postdec0	equ	0xFED
  8323                           preinc0	equ	0xFEC
  8324                           plusw0	equ	0xFEB
  8325                           fsr0h	equ	0xFEA
  8326                           fsr0l	equ	0xFE9
  8327                           wreg	equ	0xFE8
  8328                           indf1	equ	0xFE7
  8329                           postinc1	equ	0xFE6
  8330                           postdec1	equ	0xFE5
  8331                           preinc1	equ	0xFE4
  8332                           plusw1	equ	0xFE3
  8333                           fsr1h	equ	0xFE2
  8334                           fsr1l	equ	0xFE1
  8335                           bsr	equ	0xFE0
  8336                           indf2	equ	0xFDF
  8337                           postinc2	equ	0xFDE
  8338                           postdec2	equ	0xFDD
  8339                           preinc2	equ	0xFDC
  8340                           plusw2	equ	0xFDB
  8341                           fsr2h	equ	0xFDA
  8342                           fsr2l	equ	0xFD9
  8343                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    14
    Data        310
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     68     109
    BANK0           128      8     127
    BANK1           256      8     222
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK0[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_executeData
    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_enableMotor
    _resetPosition->_setDecay
    _resetPosition->_setDirection
    _resetPosition->_setStep
    _touchTherm->_setDirection
    _touchObject->_setDirection
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_setDirection
    _liftArm->_setDirection

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_executeData

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   17387
                                              3 BANK1      5     5      0
                           _clearTM0
                        _enableMotor
                        _executeData
                         _fatalError
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0    2807
                                             21 COMRAM     3     3      0
                        _enableMotor
                          _resetStep
                           _setDecay
                       _setDirection
                            _setStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _setStep                                              4     3      1     487
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _setDecay                                             4     3      1     394
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _enableMotor                                          4     3      1     664
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0   10197
                                             66 COMRAM     2     2      0
                                              0 BANK1      3     3      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0    1058
                          _resetStep
                         _resetTherm
                        _returnTherm
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0    1058
                          _resetStep
                         _resetTouch
                        _returnTouch
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            8     8      0    3163
                                              0 BANK0      8     8      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    3508
                                             21 COMRAM    14     6      8
                          _resetStep
                       _setDirection
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0    1058
                          _resetStep
                       _setDirection
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _setDirection                                         4     3      1    1024
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0     552
                                             10 COMRAM     7     7      0
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _enableMotor
   _executeData
     _getData
     _liftArm
       _resetStep
       _setDirection
       _stepMade
     _moveToPoint
       _resetStep
       _setDirection
       _stepCounter
       _stepMade
     _pickObject
       _stepMade
     _releaseObj
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _stepMade
     _touchObject
       _resetStep
       _resetTouch
       _returnTouch
       _setDirection
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _setDirection
       _startADC
       _stepMade
       _stopADC
   _fatalError
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _enableMotor
     _resetStep
     _setDecay
     _setDirection
     _setStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      8      DE       7       86.7%
BITBANK0            80      0       0       4        0.0%
BANK0               80      8      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     44      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CA      15        0.0%
DATA                 0      0     1CA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sun Mar 28 10:29:01 2021

                                                  ___fldiv@aexp 0038  
                                                  ___fldiv@bexp 0037  
                                         __end_of_interruptInit 23BC  
                                                  ___fldiv@sign 0030  
                                                            l74 2436  
                                                            l83 1F92  
                                                            l68 24DE  
                                                            l92 21B0  
                                                           l101 2224  
                                                           l110 213C  
                                                           l200 201A  
                                                           l120 1282  
                                                           l121 12B2  
                                                           l210 2044  
                                                           l202 1FDE  
                                                           l203 202C  
                                                           l131 1306  
                                                           l115 124E  
                                                           l124 12B6  
                                                           l116 1362  
                                                           l141 0CFE  
                                                           l221 1DC0  
                                                           l125 12E6  
                                                           l117 127E  
                                                           l206 1FFE  
                                                           l151 0B98  
                                                           l223 1DE8  
                                                           l135 137A  
                                                           l401 2596  
                                                           l162 0C80  
                                                           l234 23DE  
                                                           l410 2546  
                                                           l322 140A  
                                                           l155 0BEA  
                                                           l235 23E4  
                                                           l323 140C  
                                                           l228 240A  
                                                           l404 2512  
                                                           l332 2398  
                                                           l316 13C8  
                                                           l149 0CE6  
                                                           l229 2410  
                                                           l413 2532  
                                                           l333 23AE  
                                                           l317 13C2  
                                                           l166 0CA0  
                                                           l158 0C36  
                                                           l182 1D08  
                                                           l174 1C68  
                                                           l334 23B8  
                                                           l318 13C4  
                                                           l183 1D0C  
                                                           l407 2506  
                                                           l192 1B96  
                                                           l178 1C88  
                                                           l346 0F8E  
                                                           l362 248E  
                                                           l371 2550  
                                                           l515 247A  
                                                           l196 1C16  
                                                           l188 1B76  
                                                           l532 2576  
                                                           l365 24A2  
                                                           l197 1C1A  
                                                           l541 2586  
                                                           l535 257E  
                                                           l359 24B4  
                                                           l368 251E  
                                                           l544 2528  
                                                           l529 1A0A  
                                                           l538 258E  
                                                           l570 15E0  
                                                           l395 245C  
                                                           l549 2286  
                                                           l573 1656  
                                                           l398 253C  
                                                           l576 24D0  
                                                           l584 22FE  
                                                           l579 24C2  
                                                           l588 2330  
                                                           l888 18EE  
                                                           _isr 0008  
                                                   _touchObject 1C1E  
                                                           prod 000FF3  
                                                           wreg 000FE8  
                                                  ___fltol@exp1 0042  
                                                   main@errCode 01DB  
                                                          l1260 110A  
                                                          l1173 0A3C  
                                                          l1253 109E  
                                                          l1246 0FF2  
                                                          l1175 0854  
                                                          l1184 08AA  
                                                          l4000 1208  
                                                          l1249 1184  
                                                          l1186 093A  
                                                          l1178 080E  
                                                          l4010 121E  
                                                          l4002 120C  
                                                          l1187 0922  
                                                          l4020 1274  
                                                          l4012 1224  
                                                          l4004 1210  
                                                          l4100 151E  
                                                          l4030 12EA  
                                                          l4022 1296  
                                                          l4014 123C  
                                                          l4006 1212  
                                                          l4110 1580  
                                                          l4102 1528  
                                                          l3400 21DE  
                                                          l4040 1368  
                                                          l4032 130C  
                                                          l4024 12A8  
                                                          l4016 1242  
                                                          l4008 121A  
                                                          l4120 1614  
                                                          l4112 1588  
                                                          l3410 2494  
                                                          l4050 2396  
                                                          l4042 1374  
                                                          l4026 12CA  
                                                          l4018 1262  
                                                          l4034 1326  
                                                          l4114 15DA  
                                                          l4106 1532  
                                                          l3404 21EE  
                                                          l3412 2498  
                                                          l3420 2518  
                                                          l3500 077C  
                                                          l4140 0D06  
                                                          l4060 244C  
                                                          l4052 23AC  
                                                          l4204 2574  
                                                          l4044 1378  
                                                          l4036 133C  
                                                          l4028 12DC  
                                                          l4212 2230  
                                                          l4116 1602  
                                                          l4124 1620  
                                                          l4108 1568  
                                                          l4220 137E  
                                                          l3414 249C  
                                                          l3510 07D0  
                                                          l3502 0798  
                                                          l3422 2538  
                                                          l3430 2500  
                                                          l4150 0D74  
                                                          l4142 0D12  
                                                          l4062 244E  
                                                          l4054 243C  
                                                          l4134 2524  
                                                          l4038 1350  
                                                          l4214 2270  
                                                          l4206 222C  
                                                          l4118 160A  
                                                          l4070 2476  
                                                          l4230 1394  
                                                          l4222 1384  
                                                          l3520 083E  
                                                          l3512 07E6  
                                                          l3504 07A8  
                                                          l3424 250C  
                                                          l3432 252E  
                                                          l4160 0E1C  
                                                          l4152 0DAE  
                                                          l4144 0D16  
                                                          l4064 2458  
                                                          l4056 2444  
                                                          l4048 2384  
                                                          l4136 257C  
                                                          l4216 2272  
                                                          l3440 2318  
                                                          l4072 24A8  
                                                          l4080 2486  
                                                          l4240 13E6  
                                                          l4232 13A0  
                                                          l4224 1388  
                                                          l3418 254C  
                                                          l3530 088A  
                                                          l3522 0840  
                                                          l3514 07FA  
                                                          l3506 07B8  
                                                          l3450 0648  
                                                          l3442 0612  
                                                          l3602 1864  
                                                          l3426 2594  
                                                          l4162 0E30  
                                                          l4154 0DBE  
                                                          l4146 0D50  
                                                          l4082 258C  
                                                          l4090 24BA  
                                                          l4066 245A  
                                                          l4058 244A  
                                                          l3434 22E8  
                                                          l4074 24B0  
                                                          l4250 1448  
                                                          l4242 1404  
                                                          l4234 13A8  
                                                          l4226 138C  
                                                          l4218 137E  
                                                          l3540 08D4  
                                                          l3532 0896  
                                                          l3524 0850  
                                                          l3516 080C  
                                                          l3508 07C8  
                                                          l3460 068A  
                                                          l3452 065C  
                                                          l3444 061E  
                                                          l3620 18DC  
                                                          l3612 1894  
                                                          l3604 1870  
                                                          l3428 2542  
                                                          l4180 0F16  
                                                          l4164 0E52  
                                                          l4156 0DD2  
                                                          l4148 0D60  
                                                          l4172 0E6A  
                                                          l3436 22F0  
                                                          l4500 1548  
                                                          l4076 2480  
                                                          l4068 2462  
                                                          l4260 147A  
                                                          l4252 1458  
                                                          l4244 1410  
                                                          l4236 13BC  
                                                          l4228 1390  
                                                          l3550 095C  
                                                          l3542 08E6  
                                                          l3534 08A8  
                                                          l3526 086A  
                                                          l3518 081A  
                                                          l3470 06C2  
                                                          l3462 0692  
                                                          l3454 066C  
                                                          l3446 0630  
                                                          l3614 18A2  
                                                          l3606 187A  
                                                          l3630 1004  
                                                          l4190 0F7A  
                                                          l4182 0F28  
                                                          l4166 0E56  
                                                          l4158 0E0C  
                                                          l4174 0EB0  
                                                          l4086 2584  
                                                          l4510 2190  
                                                          l3702 20D2  
                                                          l3438 2312  
                                                          l4502 1636  
                                                          l4094 14FE  
                                                          l4078 2482  
                                                          l4270 14D8  
                                                          l4262 148E  
                                                          l4254 145A  
                                                          l4246 142A  
                                                          l4238 13CC  
                                                          l3800 0CFC  
                                                          l3720 0A5E  
                                                          l3560 09D2  
                                                          l3552 096E  
                                                          l3544 0918  
                                                          l3528 0884  
                                                          l3536 08BC  
                                                          l3480 0704  
                                                          l3472 06D6  
                                                          l3464 0698  
                                                          l3456 0670  
                                                          l3448 0632  
                                                          l3616 18B6  
                                                          l3640 104C  
                                                          l3632 1020  
                                                          l3624 0F96  
                                                          l4192 0F7E  
                                                          l4184 0F38  
                                                          l4176 0EC6  
                                                          l4512 0E88  
                                                          l4168 0E5E  
                                                          l3704 20D6  
                                                          l3712 2106  
                                                          l4504 19C2  
                                                          l4096 150E  
                                                          l4272 14E0  
                                                          l4264 14B8  
                                                          l4256 1460  
                                                          l4248 1436  
                                                          l4514 2204  
                                                          l3394 21BA  
                                                          l3730 0AAC  
                                                          l3722 0A76  
                                                          l3570 0A2C  
                                                          l3562 09F2  
                                                          l3554 0998  
                                                          l3538 08D0  
                                                          l3482 0720  
                                                          l3474 06E6  
                                                          l3466 06AA  
                                                          l3458 0678  
                                                          l3618 18CC  
                                                          l3650 10E4  
                                                          l3642 1084  
                                                          l3626 0FAA  
                                                          l3810 1C34  
                                                          l4194 0F82  
                                                          l4186 0F6A  
                                                          l4178 0EDA  
                                                          l3706 20E6  
                                                          l4506 1F72  
                                                          l4098 1514  
                                                          l4274 14E6  
                                                          l4266 14BA  
                                                          l4258 1466  
                                                          l3396 21BE  
                                                          l3900 1FD0  
                                                          l3740 0AF2  
                                                          l3732 0AB4  
                                                          l3572 0A30  
                                                          l3564 0A0E  
                                                          l3548 0950  
                                                          l3556 099C  
                                                          l3484 0730  
                                                          l3492 0752  
                                                          l3476 06EA  
                                                          l3468 06AC  
                                                          l3580 17C0  
                                                          l3660 114A  
                                                          l3652 10F8  
                                                          l3644 1088  
                                                          l3636 1034  
                                                          l3628 0FBC  
                                                          l3820 1C5C  
                                                          l3812 1C38  
                                                          l3804 1C20  
                                                          l4188 0F72  
                                                          l4196 0F8A  
                                                          l4508 211C  
                                                          l3708 20F6  
                                                          l4276 14EA  
                                                          l4268 14BE  
                                                          l3398 21CE  
                                                          l3910 203E  
                                                          l3902 1FD2  
                                                          l3750 0B14  
                                                          l3742 0AFA  
                                                          l3734 0AC0  
                                                          l3726 0A7E  
                                                          l3718 0A44  
                                                          l3566 0A14  
                                                          l3558 09BC  
                                                          l3494 0768  
                                                          l3486 0738  
                                                          l3478 06F2  
                                                          l3590 1822  
                                                          l3582 17DA  
                                                          l3662 115E  
                                                          l3654 111E  
                                                          l3646 1094  
                                                          l3638 103E  
                                                          l3822 1C6C  
                                                          l3830 1CD0  
                                                          l3814 1C3A  
                                                          l3806 1C2A  
                                                          l3670 1EC6  
                                                          l4278 14EE  
                                                          l3912 2042  
                                                          l3904 1FE2  
                                                          l3760 0B40  
                                                          l3752 0B16  
                                                          l3744 0B06  
                                                          l3736 0AC4  
                                                          l3728 0AA2  
                                                          l3568 0A26  
                                                          l3496 0768  
                                                          l3488 073E  
                                                          l3592 1832  
                                                          l3664 1170  
                                                          l3656 1120  
                                                          l3648 10D6  
                                                          l3920 1D76  
                                                          l3840 1CEE  
                                                          l3832 1CD6  
                                                          l3824 1C8A  
                                                          l3816 1C42  
                                                          l3808 1C2C  
                                                          l3672 1ECA  
                                                          l3680 1F5C  
                                                          l3906 2000  
                                                          l3770 0BA0  
                                                          l3762 0B44  
                                                          l3754 0B1E  
                                                          l3746 0B0A  
                                                          l3738 0AE8  
                                                          l3594 1836  
                                                          l3586 17F0  
                                                          l3666 1172  
                                                          l3658 1126  
                                                          l3930 1DC6  
                                                          l3922 1D7C  
                                                          l3842 1D00  
                                                          l3834 1CDA  
                                                          l3818 1C5A  
                                                          l3826 1CA4  
                                                          l3850 1B3A  
                                                          l3690 215A  
                                                          l3674 1EF8  
                                                          l3908 2032  
                                                          l3780 0C2C  
                                                          l3772 0BB6  
                                                          l3764 0B50  
                                                          l3756 0B22  
                                                          l3748 0B10  
                                                          l3940 23BE  
                                                          l3596 1848  
                                                          l3588 1820  
                                                          l3924 1DA2  
                                                          l3932 1DCC  
                                                          l3916 1D16  
                                                          l3836 1CDC  
                                                          l3828 1CC0  
                                                          l3860 1B68  
                                                          l3852 1B42  
                                                          l3692 216A  
                                                          l3676 1F2C  
                                                          l3790 0CA4  
                                                          l3782 0C3E  
                                                          l3766 0B66  
                                                          l3758 0B28  
                                                          l3934 23EA  
                                                          l3942 23C2  
                                                          l3926 1DA4  
                                                          l3918 1D68  
                                                          l3838 1CEA  
                                                          l3870 1BCE  
                                                          l3862 1B6A  
                                                          l3854 1B46  
                                                          l3846 1B2E  
                                                          l3686 2146  
                                                          l3950 1912  
                                                          l3784 0C54  
                                                          l3776 0BEE  
                                                          l3768 0B8E  
                                                          l3792 0CBE  
                                                          l3936 23EE  
                                                          l3944 23E0  
                                                          l3928 1DC2  
                                                          l3880 1BF8  
                                                          l3864 1B7A  
                                                          l3872 1BDE  
                                                          l3856 1B48  
                                                          l3848 1B38  
                                                          l3688 214A  
                                                          l3696 217A  
                                                          l3960 1980  
                                                          l3952 1928  
                                                          l3890 1FA4  
                                                          l3794 0CD4  
                                                          l3778 0C04  
                                                          l3938 240C  
                                                          l3882 1BFC  
                                                          l3874 1BE4  
                                                          l3866 1B98  
                                                          l3858 1B50  
                                                          l3962 1996  
                                                          l3954 193E  
                                                          l3946 18F8  
                                                          l3972 24C8  
                                                          l3892 1FA6  
                                                          l3796 0CEC  
                                                          l3788 0C84  
                                                          l3884 1C0E  
                                                          l3876 1BE8  
                                                          l3868 1BB2  
                                                          l3980 241E  
                                                          l3956 1954  
                                                          l3948 18FC  
                                                          l3894 1FAE  
                                                          l3798 0CF8  
                                                          l3878 1BEA  
                                                          l3990 2430  
                                                          l3982 2422  
                                                          l3958 196A  
                                                          l3966 19AC  
                                                          l3976 24D6  
                                                          l3896 1FB2  
                                                          l3888 1F9A  
                                                          l3992 2432  
                                                          l3984 2426  
                                                          l3898 1FB8  
                                                          l3994 2434  
                                                          l3986 242A  
                                                          l3978 2416  
                                                          l3988 242E  
                                                          l3996 118C  
                                                          ?_isr 0001  
                                                          l3998 1204  
                                                          u3000 0AA0  
                                                          u3001 0A9A  
                                                          u3010 0AE6  
                                                          u3011 0AE0  
                                                          u3100 0C7A  
                                                          u3020 0B3E  
                                                          u3101 0C74  
                                                          u3021 0B38  
                                                          u3110 0C9E  
                                                          u3030 0B64  
                                                          u3111 0C98  
                                                          u3031 0B5E  
                                                          u3120 0CBE  
                                                          u3040 0B8C  
                                                          u3200 1CFE  
                                                          _LATD 000F8C  
                                                          u3121 0CB8  
                                                          u3041 0B86  
                                                          u3201 1CF8  
                                                          u3130 0CD2  
                                                          u3050 0BB4  
                                                          u3210 1B66  
                                                          u3131 0CCC  
                                                          u3051 0BAE  
                                                          u3211 1B60  
                                                          u3300 202C  
                                                          u3140 0CE6  
                                                          u3060 0BE4  
                                                          u3220 1B94  
                                                          u2500 2310  
                                                          u3301 2026  
                                                          u3141 0CE0  
                                                          u3061 0BDE  
                                                          u3221 1B8E  
                                                          u2501 230A  
                                                          u3070 0C02  
                                                          u3310 1DBE  
                                                          u3150 1C58  
                                                          u3230 1BB2  
                                                          u2510 232E  
                                                          u3071 0BFC  
                                                          u3311 1DB8  
                                                          u3151 1C52  
                                                          u3231 1BAC  
                                                          u2511 2328  
                                                          u3080 0C2A  
                                                          u2600 07E4  
                                                          u2520 062E  
                                                          u3320 1DE6  
                                                          u3160 1C86  
                                                          u3240 1BCC  
                                                          u3400 12C8  
                                                          u3081 0C24  
                                                          u2601 07DE  
                                                          u2521 0628  
                                                          u3321 1DE0  
                                                          u3161 1C80  
                                                          u3241 1BC6  
                                                          u3401 12C2  
                                                          u3090 0C52  
                                                          u3330 2408  
                                                          u2610 080A  
                                                          u2530 0646  
                                                          u3170 1CA4  
                                                          u3250 1BDE  
                                                          u3410 12DC  
                                                          u3091 0C4C  
                                                          u3331 2402  
                                                          u2611 0804  
                                                          u2531 0640  
                                                          u3171 1C9E  
                                                          u3251 1BD8  
                                                          u3411 12D6  
                                                          u3340 23DC  
                                                          u2700 094E  
                                                          u2620 083C  
                                                          u2540 065A  
                                                          u3180 1CBE  
                                                          u3260 1C0C  
                                                          u3500 0EC4  
                                                          u3420 1304  
                                                          u3341 23D6  
                                                          u2701 0948  
                                                          u2621 0836  
                                                          u2541 0654  
                                                          u3181 1CB8  
                                                          u3261 1C06  
                                                          u3501 0EBE  
                                                          u3421 12FE  
                                                          u3270 1FCE  
                                                          u2710 096C  
                                                          u2630 0868  
                                                          u2550 06A8  
                                                          u3190 1CD0  
                                                          u3510 0F68  
                                                          u3430 1326  
                                                          u3350 123A  
                                                          u3271 1FC8  
                                                          u2711 0966  
                                                          u2631 0862  
                                                          u2551 06A2  
                                                          u3191 1CCA  
                                                          u3511 0F62  
                                                          u3431 1320  
                                                          u3351 1234  
                                                          u3280 1FFC  
                                                          u2720 09BA  
                                                          u2640 0882  
                                                          u2560 06C0  
                                                          u2800 18B6  
                                                          u3440 133A  
                                                          u3360 1260  
                                                          u3520 2284  
                                                          u3281 1FF6  
                                                          u2721 09B4  
                                                          u2641 087C  
                                                          u2561 06BA  
                                                          u2801 18B0  
                                                          u3441 1334  
                                                          u3361 125A  
                                                          u3521 227E  
                                                          u3290 201A  
                                                          u2730 09F0  
                                                          u2650 08A6  
                                                          u2570 06D4  
                                                          u2810 18CA  
                                                          u3450 134E  
                                                          u3370 1274  
                                                          u3530 13BA  
                                                          u2475 21C8  
                                                          u3291 2014  
                                                          u2731 09EA  
                                                          u2651 08A0  
                                                          u2571 06CE  
                                                          u2811 18C4  
                                                          u3451 1348  
                                                          u3371 126E  
                                                          u3531 13B4  
                                                          u2476 21CA  
                                                          u2740 0A24  
                                                          u2660 08CE  
                                                          u2580 071E  
                                                          u2900 115C  
                                                          u2820 0FA8  
                                                          u3460 1362  
                                                          u3380 1294  
                                                          u3540 13E4  
                                                          u2485 21D8  
                                                          u2741 0A1E  
                                                          u2661 08C8  
                                                          u2581 0718  
                                                          u2901 1156  
                                                          u2821 0FA2  
                                                          u3461 135C  
                                                          u3381 128E  
                                                          u3541 13DE  
                                                          u2486 21DA  
                                                          u2670 08E4  
                                                          u2590 0766  
                                                          u2750 17D8  
                                                          u2910 116E  
                                                          u2830 0FBA  
                                                          u3470 2394  
                                                          u3390 12A8  
                                                          u3550 1428  
                                                          u2495 21E8  
                                                          u2671 08DE  
                                                          u2591 0760  
                                                          u2751 17D2  
                                                          u2911 1168  
                                                          u2831 0FB4  
                                                          u3471 238E  
                                                          u3391 12A2  
                                                          u3551 1422  
                                                          u2496 21EA  
                                                          u2680 0916  
                                                          u2760 1814  
                                                          u2840 101E  
                                                          u3480 23AA  
                                                          u3560 14D6  
                                                          u2681 0910  
                                                          u2841 1018  
                                                          u3481 23A4  
                                                          u3561 14D0  
                                                          u2690 0934  
                                                          u2770 1846  
                                                          u2850 107E  
                                                          u3490 157E  
                                                          u2691 092E  
                                                          u2771 1840  
                                                          u2851 1078  
                                                          u3491 1578  
                                                          u2780 185E  
                                                          u2860 10D0  
                                                          u2781 1858  
                                                          u2765 1808  
                                                          u2861 10CA  
                                                          u2925 2154  
                                                          u2790 188E  
                                                          u2870 10F6  
                                                          u2926 2156  
                                                          u2791 1888  
                                                          u2871 10F0  
                                                          u2935 2164  
                                                          u2880 110A  
                                                          u2936 2166  
                                                          u2881 1104  
                                                          u2945 2174  
                                                          u2890 111C  
                                                          u2946 2176  
                                                   main@newData 01DC  
                                                          u2891 1116  
                                                          u2955 20E0  
                                                          u2980 0A5C  
                                                          u2956 20E2  
                                                          u2981 0A56  
                                                          u2965 20F0  
                                                          u2990 0A76  
                                                          u2966 20F2  
                                                          u2991 0A70  
                                                          u2975 2100  
                                                          u2976 2102  
                                                          i2l71 259E  
                                                          i2l65 24EC  
                                                          _TMR0 000FD6  
                                                          _TMR2 000FCC  
                                           __end_ofi2_storeData 17BE  
                                                          _main 137E  
                                                          _maxX 006B  
                                                          _maxY 0069  
                                          __end_ofi2_printError 1B2C  
                                                          fsr2h 000FDA  
                                                          indf2 000FDF  
                                                          fsr1l 000FE1  
                                                          fsr2l 000FD9  
                                                          btemp 006E  
                                                          prodh 000FF4  
                                                          prodl 000FF3  
                                                          start 016A  
                                               ___fldiv@new_exp 0031  
                                                  ___param_bank 000000  
                                               ??_whatsTM0Limit 0001  
                                                         ??_isr 000B  
                                                  ?_executeData 0001  
                                               executeData@data 01D7  
                                                 ___fltol@sign1 0041  
                                                         ?_main 0001  
                                               __end_of___fldiv 0A42  
                                               __end_of___fltol 18F4  
                                                         i2l416 256E  
                                                         i2l419 2564  
                                                         i2l380 24FA  
                                                         i2l374 25A6  
                                                         i2l377 255A  
                                                         i2l529 1B26  
                                                         i2l570 1742  
                                                         i2l474 0152  
                                                         i2l573 17B8  
                                                         i2l584 234C  
                                                         i2l588 237E  
                                          rotateObj@rotSequence 0080  
                                                         _SPBRG 000FAF  
                                                         _TRISA 000F92  
                                                         _TRISB 000F93  
                                                         _TRISC 000F94  
                                                         _TRISD 000F95  
                                                         _TXREG 000FAD  
                                               __end_of_getData 24D4  
                                               i2storeData@data 000A  
                                               __end_of_initADC 2460  
                                                  ?_newSequence 0001  
                                               __end_of_liftArm 2048  
                                               __end_of_readSeq 2582  
                                                  stepMade@temp 0014  
                                               __end_of_setStep 1F98  
                                                         tablat 000FF5  
                                                i2uartTx@length 0003  
                                               __end_of_stopADC 259A  
                                                         ttemp5 006F  
                                                         ttemp6 0072  
                                                         ttemp7 0076  
                                                         status 000FD8  
                                                         wtemp8 006F  
                                              __end_ofi2_uartTx 2382  
                                                 ?_increaseStep 0001  
                                               __initialization 2048  
                                        __size_of_initPinMotors 0026  
                                                  __end_of_main 14FA  
                                      resetPosition@keepMovingX 0016  
                                      resetPosition@keepMovingY 0017  
                                      resetPosition@keepMovingZ 0018  
                                                        ??_main 01D9  
                                                 __activetblptr 000002  
                                                   i2_storeData 165C  
                                          __size_of_enableMotor 0074  
                                                   isr@tm0Count 0063  
                                                  ?_setThermRel 0001  
                                                        _ADRESH 000FC4  
                                                        _ADRESL 000FC3  
                                                  ?_moveToPoint 0016  
                                                        i2l2130 2556  
                                                        i2l2134 256A  
                                                        i2l2128 25A4  
                                                        i2l2136 2560  
                                                        i2l3200 1676  
                                                        i2l3202 1680  
                                                        i2l3210 16CA  
                                                        i2l3220 176C  
                                                        i2l3212 16E2  
                                                        i2l3204 168A  
                                                        i2l3300 002E  
                                                        i2l3222 1776  
                                                        i2l3214 16EA  
                                                        i2l3310 0054  
                                                        i2l3302 0030  
                                                        i2l3216 173C  
                                                        i2l3208 1694  
                                                        i2l3320 0090  
                                                        i2l3304 0032  
                                                        i2l3312 0058  
                                                        i2l3218 1764  
                                                        i2l3226 1782  
                                                        i2l3330 00C0  
                                                        i2l3322 0092  
                                                        i2l3314 006C  
                                                        i2l3306 004E  
                                                        i2l2612 2336  
                                                        i2l3340 0114  
                                                        i2l3324 00A6  
                                                        i2l3316 006E  
                                                        i2l3332 00C6  
                                                        i2l3308 0050  
                                                        i2l2614 233E  
                                                        i2l3342 012E  
                                                        i2l3334 00DA  
                                                        i2l3326 00B8  
                                                        i2l3318 0072  
                                                        i2l2616 2360  
                                                        i2l3336 00E2  
                                                        i2l3344 0132  
                                                        i2l3328 00BC  
                                                        i2l3194 24F2  
                                                        i2l2618 2366  
                                                        i2l3346 0146  
                                                        i2l3338 0108  
                                                        i2l3196 1660  
                                                        i2l3348 014C  
                                                        i2l3198 1670  
                                                        i2l1880 24E4  
                                                        i2l4520 1ADE  
                                                        i2l2930 1A2E  
                                                        i2l3298 001C  
                                                        i2l1884 259C  
                                                        i2l2940 1A9C  
                                                        i2l2932 1A44  
                                                        i2l4516 16AA  
                                                        i2l2942 1AB2  
                                                        i2l2934 1A5A  
                                                        i2l2926 1A14  
                                                        i2l4518 1798  
                                                        i2l2936 1A70  
                                                        i2l2928 1A18  
                                                        i2l2938 1A86  
                                                        i2l2946 1AC8  
                                                        _RCREG1 000FAE  
                                                  ?_setTouchRel 0001  
                                                 setDecay@decay 0015  
                                              __end_of___xxtofl 118A  
                                                 setDecay@motor 0012  
                                              __end_of_clearTM0 24E2  
                                              _errString_PointZ 0100  
                                                ??_increaseStep 0001  
                                                     ??___fldiv 0028  
                                                     ??___fltol 003D  
                                              __end_of_tim0Init 24B8  
                                              __end_of_tim2Init 2492  
                                                        clear_0 20AE  
                                                        clear_1 20BA  
                                                     ??_getData 0014  
                                                        _uartTx 22E6  
                                              __end_of_setDecay 2142  
                                                     ??_initADC 0012  
                                                     ??_liftArm 0016  
                                                     ??_readSeq 0012  
                                                  __pdataCOMRAM 0069  
                                         __end_of_resetPosition 137E  
                                                  __mediumconst 0000  
                                                     ??_setStep 0013  
                                                        tblptrh 000FF7  
                                                        tblptrl 000FF6  
                                                        tblptru 000FF8  
                                                  ?_returnTherm 0012  
                                              __end_of_startADC 2540  
                                              __end_of_stepMade 24A6  
                                                 _initPinMotors 2414  
                                                  ?_returnTouch 0012  
                                                     ??_stopADC 0012  
                                         __size_ofi2_printError 011C  
                                              __end_of_writeTM0 24F0  
                                     __size_of_resetNewSequence 000A  
                                                  ___xxtofl@arg 001C  
                                                  ___xxtofl@exp 001B  
                                                  ___xxtofl@val 0012  
                                                    __accesstop 0080  
                                       __end_of__initialization 20C0  
                                                  _dataSequence 00DB  
                                                 ___rparam_used 000001  
                                                    ___fltol@f1 0039  
                                                  ?_stepCounter 0012  
                                                   i2uartTx@ptr 0001  
                                                __pcstackCOMRAM 0001  
                                                  __newSequence 005F  
                                                  __pidataBANK0 228A  
                                                  __pidataBANK1 1DEC  
                                               isr@single_cycle 0051  
                                          __size_of_executeData 028E  
                                                 ?_setDirection 0012  
                                                  i2_printError 1A10  
                                                  ?_touchObject 0001  
                                                _errString_ZEND 015E  
                                                _errString_Feed 00A5  
                                                ?_initPinMotors 0001  
                                                     ?i2_uartTx 0001  
                                                    __pbssBANK0 00DB  
                                          __size_of_newSequence 0008  
                                                    _feeder1Pos 060D  
                                                    _feeder2Pos 060B  
                                                    _feeder3Pos 0609  
                                       __size_of_getNewSequence 000E  
                                                    _fatalError 258A  
                                            __size_of_reduceSeq 0008  
                                            __size_of_retPeriod 000E  
                                                _touch_pressure 0607  
                                            __size_of_shiftData 0060  
                                            __size_of_resetStep 000A  
                                                       _ADC_res 0053  
                                                       ?_uartTx 0012  
                                                ??_setDirection 0013  
                                                     ?___xxtofl 0012  
                                          __end_of_increaseStep 25AA  
                                                     ?_clearTM0 0001  
                                                    ??i2_uartTx 0004  
                                            __size_of_rotateObj 00DC  
                                             _errString_Command 00C3  
                                            __size_of_usartInit 001E  
                                        __size_of_interruptInit 003A  
                                          __size_of_setThermRel 000A  
                                            __size_of_storeData 0162  
                                                     ?_tim0Init 0001  
                                                     ?_tim2Init 0012  
                                          __size_of_moveToPoint 02C2  
                                          storeData@receivedMex 0045  
                                               _newSequenceData 00EF  
                                                     ?_setDecay 0012  
                                          __size_of_setTouchRel 000A  
                                                   setStep@step 0015  
                                                       __Hparam 0000  
                                                       __Lparam 0000  
                                        __end_of_touch_pressure 0609  
                                                       ___fldiv 0610  
                                                     ?_startADC 0001  
                                                     ?_stepMade 0012  
                                                       ___fltol 17BE  
                                                  __psmallconst 0600  
                                                       __pcinit 2048  
                                         __end_of_whatsTM0Limit 25A2  
                                                       _getData 24C6  
                                                       __ramtop 0600  
                                                     ?_writeTM0 0001  
                                                    _pickObject 23E8  
                                                       __ptext0 137E  
                                                       __ptext1 2460  
                                                       __ptext2 247E  
                                                       __ptext3 24A6  
                                                       __ptext4 14FA  
                                                       __ptext5 18F4  
                                                       __ptext6 22E6  
                                                       __ptext7 222A  
                                                       __ptext8 118A  
                                                       __ptext9 1EC2  
                                               __size_of_uartTx 004E  
                                                     _T0CONbits 000FD5  
                                                       _initADC 243A  
                                               ??_initPinMotors 0012  
                                                       _liftArm 1F98  
                                                     _T2CONbits 000FCA  
                                                       _readSeq 257A  
                                                  __size_of_isr 0162  
                                                    ??___xxtofl 0016  
                                                  ?i2_storeData 0001  
                                                    ??_clearTM0 0012  
                                                       _setStep 1EC2  
                                                       _pwmStep 0067  
                                                       _stopADC 2592  
                                             __end_of_reduceSeq 257A  
                                             __end_of_retPeriod 24FE  
                                                    _releaseObj 23BC  
                                          __size_of_returnTherm 000C  
                                          end_of_initialization 20C0  
                                          __size_of_returnTouch 000C  
                                              _resetNewSequence 2522  
                                              rotateObj@totStep 00FB  
                                             __end_of_shiftData 228A  
                                                       isr@temp 0011  
                                             __end_of_resetStep 2554  
                                                    ??_tim0Init 0012  
                                                 __Lmediumconst 0000  
                                                    ??_tim2Init 0014  
                                              storeData@command 005D  
                                              storeData@counter 005E  
                                                    ??_setDecay 0013  
                                              enableMotor@motor 0012  
                                                    _resetTherm 252C  
                                                    _resetTouch 2540  
                                                       uartTx@i 0015  
                                                   ?_fatalError 0001  
                                                     _RCSTAbits 000FAB  
                                                       postdec1 000FE5  
                                             __end_of_rotateObj 1DEC  
                                                       postinc0 000FEE  
                                                       postinc1 000FE6  
                                                       postinc2 000FDE  
                                                    ??_startADC 0012  
                                                    ??_stepMade 0014  
                                          __size_of_stepCounter 000C  
                                                 _interruptInit 2382  
                                             __end_of_usartInit 247E  
                                             __end_of_storeData 165C  
                                    __end_ofrotateObj@stepAngle 0605  
                                                    ??_writeTM0 0001  
                                                     _PORTDbits 000F83  
                                                    _printError 18F4  
                                                     _PORTEbits 000F84  
                                                 ??_enableMotor 0013  
                                           i2printError@errCode 0007  
                                                    _toggleStep 2554  
                                                 ___xxtofl@sign 001A  
                                                     _TRISCbits 000F94  
                                                     _TRISDbits 000F95  
                                                     _TRISEbits 000F96  
                                                   ___fldiv@grs 0033  
                                                   ___fldiv@rem 002C  
                                          __size_of_touchObject 00F2  
                                                    _stepToggle 0066  
                                                    _touchTherm 1B2C  
                                          __end_of_setDirection 222A  
                                                     _TXSTAbits 000FAC  
                                                _getNewSequence 24B8  
                                                ?_interruptInit 0001  
                                                 __pidataCOMRAM 25AA  
                                         __size_of_increaseStep 0008  
                                                   ?_pickObject 0001  
                                                   __fatalError 0060  
                                                __end_of_uartTx 2334  
                                                 moveToPoint@x1 0016  
                                                 moveToPoint@x2 001A  
                                                 moveToPoint@y1 0018  
                                                 moveToPoint@y2 001C  
                                           start_initialization 2048  
                                                     i2uartTx@i 0004  
                                                   __end_of_isr 016A  
                                           __size_of_fatalError 0008  
                                           __end_of_enableMotor 21B6  
                                                   ?_releaseObj 0001  
                                             __size_ofi2_uartTx 004E  
                                        __end_of_getNewSequence 24C6  
                                               _errString_Fatal 01AF  
                                               _errString_Bound 0084  
                                                   ?_resetTherm 0001  
                                               _errString_Reset 0187  
                                                   ?_resetTouch 0001  
                                               _errString_Point 0135  
                                                  _increaseStep 25A2  
                                        __size_of_resetPosition 01F4  
                                                 ??_executeData 0043  
                                                   __pdataBANK0 0080  
                                                   __pdataBANK1 0100  
                                                   _dataCounter 0061  
                                                      ??_uartTx 0015  
                                        moveToPoint@keepMovingX 0020  
                                        moveToPoint@keepMovingY 0021  
                                                   ?_printError 0001  
                                                     ___fldiv@a 0024  
                                                     ___fldiv@b 0020  
                                                _therm_pressure 0605  
                                                   ?_toggleStep 0001  
                                                   __pbssCOMRAM 0045  
                                                 __pcstackBANK0 00F7  
                                                 __pcstackBANK1 01D6  
                                                 ??_newSequence 0012  
                                             __size_of___xxtofl 01F8  
                                          __size_ofi2_storeData 0162  
                                             __size_of_clearTM0 000E  
                                               ?_getNewSequence 0012  
                                                   ?_touchTherm 0001  
                                           __size_of_pickObject 002C  
                                            executeData@errCode 01D6  
                                             __size_of_tim0Init 0012  
                                             __size_of_tim2Init 0014  
                                               ??_interruptInit 0012  
                                             __size_of_setDecay 0074  
                                                     __pintcode 0008  
                                                      ?___fldiv 0020  
                                                      ?___fltol 0039  
                                      __end_of_resetNewSequence 252C  
                                           __size_of_releaseObj 002C  
                                                 storeData@data 001B  
                                                      ?_getData 0012  
                                             __size_of_startADC 000A  
                                             __size_of_stepMade 0014  
                                        __end_of_therm_pressure 0607  
                                                      ?_initADC 0001  
                                                   __smallconst 0600  
                                                      ?_liftArm 0001  
                                                   _enableMotor 2142  
                                                      ?_readSeq 0001  
                                             __size_of_writeTM0 000E  
                                           __end_of_executeData 0F92  
                                                    shiftData@i 0014  
                                                      ?_setStep 0012  
                                           __size_of_resetTherm 000A  
                                                     _newFeeder 0057  
                                                 _resetPosition 118A  
                                           __size_of_resetTouch 000A  
                                                 ??_setThermRel 0001  
                                                      ?_stopADC 0001  
                                         __size_of_setDirection 0074  
                                                 ??_moveToPoint 001E  
                                                 ??_setTouchRel 0001  
                                           __end_of_newSequence 258A  
                                                     _reduceSeq 2572  
                                                      _LATAbits 000F89  
                                                      _LATBbits 000F8A  
                                                     _retPeriod 24F0  
                                                      _LATCbits 000F8B  
                                                      _LATDbits 000F8C  
                                           __size_of_printError 011C  
                                                      _IPR1bits 000F9F  
                                                      _PIE1bits 000F9D  
                                                     _shiftData 222A  
                                                      i2u232_40 16E0  
                                                      i2u240_40 008E  
                                                      i2u232_41 16DA  
                                                      i2u240_41 0088  
                                                      i2u241_40 00A4  
                                                      i2u241_41 009E  
                                                      i2u170_40 237C  
                                                      i2u242_40 00B6  
                                                      i2u170_41 2376  
                                                      i2u242_41 00B0  
                                                      i2u243_40 00D8  
                                                      i2u243_41 00D2  
                                                      i2u244_40 0106  
                                                      i2u244_41 0100  
                                                     _resetStep 254A  
                                                      i2u245_40 012C  
                                                      i2u237_40 002C  
                                                      i2u245_41 0126  
                                                      i2u237_41 0026  
                                                      i2u246_40 0144  
                                                      i2u238_40 004C  
                                                      i2u246_41 013E  
                                                      i2u238_41 0046  
                                                      i2u239_40 006A  
                                                      i2u239_41 0064  
                                                      i2u169_40 235E  
                                                      i2u169_41 2358  
                                                      _PIR1bits 000F9E  
                                           __size_of_toggleStep 000A  
                                                  ??_fatalError 0012  
                                                     _posVector 004E  
                                                      _RCONbits 000FD0  
                                                     _therm_rel 0064  
                                                     _pwmPeriod 0055  
                                             setDirection@motor 0012  
                                                     _rotateObj 1D10  
                                                    _ADCON0bits 000FC2  
                                                    _ADCON1bits 000FC1  
                                           __size_of_touchTherm 00F2  
                                                  _setDirection 21B6  
                                                     _usartInit 2460  
                                                     _touch_rel 0065  
                                            __end_of_feeder1Pos 060F  
                                            __end_of_feeder2Pos 060D  
                                            __end_of_feeder3Pos 060B  
                                                     _storeData 14FA  
                                                ?_resetPosition 0001  
                                         __end_of_initPinMotors 243A  
                                                 ??_returnTherm 0014  
                                                 ??_returnTouch 0014  
                                                      i2_uartTx 2334  
                                                     copy_data0 205C  
                                                     copy_data1 207C  
                                                     copy_data2 209C  
                                            __end_of_fatalError 2592  
                                            rotateObj@stepAngle 0601  
                                                    ?_reduceSeq 0001  
                                                    ?_retPeriod 0001  
                                                  setStep@motor 0012  
                                                    rotateObj@i 00FD  
                                        __size_of_whatsTM0Limit 0008  
                                           __end_of_setThermRel 2572  
                                           __end_of_moveToPoint 0D04  
                                             printError@errCode 0018  
                                                    ?_shiftData 0001  
                                                 ??_stepCounter 0014  
                                                      __Hrparam 0000  
                                                    ?_resetStep 0001  
                                           __end_of_setTouchRel 2568  
                                                      __Lrparam 0000  
                                              __size_of___fldiv 0432  
                                              __size_of___fltol 0136  
                                                   _executeData 0D04  
                                                  ??_pickObject 0015  
                                                    ?_rotateObj 0001  
                                      moveToPoint@MOT1Direction 0022  
                                                 ?i2_printError 0001  
                                              __size_of_getData 000E  
                                      moveToPoint@MOT2Direction 0023  
                                                 ??_touchObject 0016  
                                                    ?_usartInit 0001  
                                              __size_of_initADC 0026  
                                                      ___xxtofl 0F92  
                                              __size_of_liftArm 00B0  
                                                    ?_storeData 0001  
                                                      _clearTM0 24D4  
                                              __size_of_readSeq 0008  
                                            storeData@mexLength 006D  
                                                      _tm0Error 005B  
                                                      _tm0Limit 0068  
                                              __size_of_setStep 00D6  
                                                   _newSequence 2582  
                                                      __ptext10 20CE  
                                                      __ptext11 2142  
                                                      __ptext20 258A  
                                                      __ptext12 2522  
                                                      __ptext21 0D04  
                                                      __ptext13 2572  
                                                      __ptext30 1D10  
                                                      __ptext22 1B2C  
                                                      __ptext14 257A  
                                                      __ptext31 0F92  
                                                      __ptext23 24FE  
                                                      __ptext15 2582  
                                                      __ptext40 21B6  
                                                      __ptext32 17BE  
                                                      __ptext24 252C  
                                                      __ptext16 2382  
                                                      __ptext41 254A  
                                                      __ptext33 0610  
                                                      __ptext25 1C1E  
                                                      __ptext17 2414  
                                                      __ptext50 2554  
                                                      __ptext42 24C6  
                                                      __ptext34 23BC  
                                                      __ptext26 2592  
                                                      __ptext18 243A  
                                                      __ptext51 255E  
                                                      __ptext43 24D4  
                                                      __ptext35 23E8  
                                                      __ptext27 2536  
                                                      __ptext19 24B8  
                                                      __ptext52 2568  
                                                      __ptext36 0A42  
                                                      __ptext28 250A  
                                                      __ptext53 24F0  
                                                      __ptext45 165C  
                                                      __ptext37 2516  
                                                      __ptext29 2540  
                                                      __ptext54 25A2  
                                                      __ptext46 1A10  
                                                      __ptext38 1F98  
                                                      __ptext47 2334  
                                                      __ptext39 2492  
                                                      __ptext48 24E2  
                                                      __ptext49 259A  
                                                  ??_releaseObj 0015  
                                              __size_of_stopADC 0008  
                                           __end_of_returnTherm 250A  
                                           __end_of_returnTouch 2516  
                                                      _tim0Init 24A6  
                                                      _tim2Init 247E  
                                                 __size_of_main 017C  
                                                      _setDecay 20CE  
                                            __end_of_pickObject 2414  
                                                  ??_resetTherm 0012  
                                                  ??_resetTouch 0012  
                                                     uartTx@ptr 0012  
                                                      _rotAngle 0059  
                                               isr@completeStep 0062  
                                                      int$flags 006E  
                                                      _startADC 2536  
                                                      _stepMade 2492  
                                           __end_of_stepCounter 2522  
                                             rotateObj@rotAngle 00FA  
                                                ??i2_printError 0005  
                                            __end_of_releaseObj 23E8  
                                                      _writeTM0 24E2  
                                                  ??_printError 0016  
                                                 _whatsTM0Limit 259A  
                                               ??_resetPosition 0016  
                                            tim2Init@_pwmPeriod 0012  
                                                    _INTCONbits 000FF2  
                                                  ??_toggleStep 0001  
                                              ??_getNewSequence 0014  
                                            __end_of_resetTherm 2536  
                                            __end_of_resetTouch 254A  
                                                   _setThermRel 2568  
                                                  uartTx@length 0014  
                                                   _moveToPoint 0A42  
                                           __end_of_touchObject 1D10  
                                                      intlevel2 25B0  
                                             enableMotor@enable 0015  
                                                  ??_touchTherm 0016  
                                                   _setTouchRel 255E  
                                                   ??_reduceSeq 0012  
                                                   ??_retPeriod 0003  
                                                    _RCSTA1bits 000FAB  
                                            __end_of_printError 1A10  
                                         setDirection@direction 0015  
                                                   ??_shiftData 0012  
                                                   ??_resetStep 0012  
                                            __end_of_toggleStep 255E  
                                             ?_resetNewSequence 0001  
                                                ?_whatsTM0Limit 0001  
                                                   ??_rotateObj 00F7  
                                            ??_resetNewSequence 0012  
                                            __end_of_touchTherm 1C1E  
                                                  ?_enableMotor 0012  
                                                   ??_usartInit 0012  
                                                 ??i2_storeData 0008  
                                                   ??_storeData 0019  
                                                   _returnTherm 24FE  
                                                   _returnTouch 250A  
                                                   _stepCounter 2516  
