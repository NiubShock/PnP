

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sun May 02 09:18:04 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    76                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    77  0000                     
    78                           ; Version 2.20
    79                           ; Generated 12/02/2020 GMT
    80                           ; 
    81                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F452 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataCOMRAM
   114  00271C                     __pidataCOMRAM:
   115                           	callstack 0
   116                           
   117                           ;initializer for _motCounter
   118  00271C  00                 	db	0
   119  00271D  01                 	db	1
   120  00271E  00                 	db	0
   121  00271F  01                 	db	1
   122  002720  00                 	db	0
   123  002721  01                 	db	1
   124                           
   125                           ;initializer for _mexLength
   126  002722  05                 	db	5
   127                           
   128                           	psect	idataBANK0
   129  00246A                     __pidataBANK0:
   130                           	callstack 0
   131                           
   132                           ;initializer for rotateObj@rotSequence
   133  00246A  24                 	db	36
   134  00246B  0C                 	db	12
   135  00246C  18                 	db	24
   136  00246D  30                 	db	48
   137                           
   138                           ;initializer for _stepMot3
   139  00246E  09                 	db	9
   140  00246F  03                 	db	3
   141  002470  06                 	db	6
   142  002471  0C                 	db	12
   143                           
   144                           ;initializer for _stepMot2
   145  002472  11                 	db	17
   146  002473  05                 	db	5
   147  002474  0C                 	db	12
   148  002475  18                 	db	24
   149                           
   150                           ;initializer for _stepMot1
   151  002476  22                 	db	34
   152  002477  06                 	db	6
   153  002478  0C                 	db	12
   154  002479  28                 	db	40
   155                           
   156                           ;initializer for _errString_Feed
   157  00247A  45                 	db	69
   158  00247B  72                 	db	114
   159  00247C  72                 	db	114
   160  00247D  6F                 	db	111
   161  00247E  72                 	db	114
   162  00247F  2C                 	db	44
   163  002480  20                 	db	32
   164  002481  66                 	db	102
   165  002482  65                 	db	101
   166  002483  65                 	db	101
   167  002484  64                 	db	100
   168  002485  20                 	db	32
   169  002486  6C                 	db	108
   170  002487  69                 	db	105
   171  002488  6E                 	db	110
   172  002489  65                 	db	101
   173  00248A  20                 	db	32
   174  00248B  6E                 	db	110
   175  00248C  6F                 	db	111
   176  00248D  74                 	db	116
   177  00248E  20                 	db	32
   178  00248F  64                 	db	100
   179  002490  65                 	db	101
   180  002491  66                 	db	102
   181  002492  69                 	db	105
   182  002493  6E                 	db	110
   183  002494  65                 	db	101
   184  002495  64                 	db	100
   185  002496  0A                 	db	10
   186  002497  00                 	db	0
   187                           
   188                           ;initializer for _errString_Command
   189  002498  43                 	db	67
   190  002499  6F                 	db	111
   191  00249A  6D                 	db	109
   192  00249B  6D                 	db	109
   193  00249C  61                 	db	97
   194  00249D  6E                 	db	110
   195  00249E  64                 	db	100
   196  00249F  20                 	db	32
   197  0024A0  6E                 	db	110
   198  0024A1  6F                 	db	111
   199  0024A2  74                 	db	116
   200  0024A3  20                 	db	32
   201  0024A4  72                 	db	114
   202  0024A5  65                 	db	101
   203  0024A6  63                 	db	99
   204  0024A7  6F                 	db	111
   205  0024A8  67                 	db	103
   206  0024A9  6E                 	db	110
   207  0024AA  69                 	db	105
   208  0024AB  7A                 	db	122
   209  0024AC  65                 	db	101
   210  0024AD  64                 	db	100
   211  0024AE  0A                 	db	10
   212  0024AF  00                 	db	0
   213                           
   214                           	psect	idataBANK1
   215  002132                     __pidataBANK1:
   216                           	callstack 0
   217                           
   218                           ;initializer for _errString_PointZ
   219  002132  45                 	db	69
   220  002133  72                 	db	114
   221  002134  72                 	db	114
   222  002135  6F                 	db	111
   223  002136  72                 	db	114
   224  002137  2C                 	db	44
   225  002138  20                 	db	32
   226  002139  74                 	db	116
   227  00213A  69                 	db	105
   228  00213B  6D                 	db	109
   229  00213C  65                 	db	101
   230  00213D  20                 	db	32
   231  00213E  65                 	db	101
   232  00213F  78                 	db	120
   233  002140  63                 	db	99
   234  002141  65                 	db	101
   235  002142  65                 	db	101
   236  002143  64                 	db	100
   237  002144  65                 	db	101
   238  002145  64                 	db	100
   239  002146  20                 	db	32
   240  002147  74                 	db	116
   241  002148  6F                 	db	111
   242  002149  20                 	db	32
   243  00214A  72                 	db	114
   244  00214B  65                 	db	101
   245  00214C  61                 	db	97
   246  00214D  63                 	db	99
   247  00214E  68                 	db	104
   248  00214F  20                 	db	32
   249  002150  74                 	db	116
   250  002151  68                 	db	104
   251  002152  65                 	db	101
   252  002153  20                 	db	32
   253  002154  65                 	db	101
   254  002155  6E                 	db	110
   255  002156  64                 	db	100
   256  002157  20                 	db	32
   257  002158  6F                 	db	111
   258  002159  66                 	db	102
   259  00215A  20                 	db	32
   260  00215B  74                 	db	116
   261  00215C  68                 	db	104
   262  00215D  65                 	db	101
   263  00215E  20                 	db	32
   264  00215F  5A                 	db	90
   265  002160  20                 	db	32
   266  002161  41                 	db	65
   267  002162  78                 	db	120
   268  002163  69                 	db	105
   269  002164  73                 	db	115
   270  002165  0A                 	db	10
   271  002166  00                 	db	0
   272                           
   273                           ;initializer for _errString_Point
   274  002167  45                 	db	69
   275  002168  72                 	db	114
   276  002169  72                 	db	114
   277  00216A  6F                 	db	111
   278  00216B  72                 	db	114
   279  00216C  2C                 	db	44
   280  00216D  20                 	db	32
   281  00216E  74                 	db	116
   282  00216F  69                 	db	105
   283  002170  6D                 	db	109
   284  002171  65                 	db	101
   285  002172  20                 	db	32
   286  002173  65                 	db	101
   287  002174  78                 	db	120
   288  002175  63                 	db	99
   289  002176  65                 	db	101
   290  002177  65                 	db	101
   291  002178  64                 	db	100
   292  002179  65                 	db	101
   293  00217A  64                 	db	100
   294  00217B  20                 	db	32
   295  00217C  74                 	db	116
   296  00217D  6F                 	db	111
   297  00217E  20                 	db	32
   298  00217F  72                 	db	114
   299  002180  65                 	db	101
   300  002181  61                 	db	97
   301  002182  63                 	db	99
   302  002183  68                 	db	104
   303  002184  20                 	db	32
   304  002185  74                 	db	116
   305  002186  68                 	db	104
   306  002187  65                 	db	101
   307  002188  20                 	db	32
   308  002189  70                 	db	112
   309  00218A  6F                 	db	111
   310  00218B  69                 	db	105
   311  00218C  6E                 	db	110
   312  00218D  74                 	db	116
   313  00218E  0A                 	db	10
   314  00218F  00                 	db	0
   315                           
   316                           ;initializer for _errString_ZEND
   317  002190  45                 	db	69
   318  002191  72                 	db	114
   319  002192  72                 	db	114
   320  002193  6F                 	db	111
   321  002194  72                 	db	114
   322  002195  2C                 	db	44
   323  002196  20                 	db	32
   324  002197  6E                 	db	110
   325  002198  6F                 	db	111
   326  002199  20                 	db	32
   327  00219A  6F                 	db	111
   328  00219B  62                 	db	98
   329  00219C  6A                 	db	106
   330  00219D  65                 	db	101
   331  00219E  63                 	db	99
   332  00219F  74                 	db	116
   333  0021A0  20                 	db	32
   334  0021A1  72                 	db	114
   335  0021A2  65                 	db	101
   336  0021A3  6C                 	db	108
   337  0021A4  65                 	db	101
   338  0021A5  76                 	db	118
   339  0021A6  61                 	db	97
   340  0021A7  74                 	db	116
   341  0021A8  65                 	db	101
   342  0021A9  64                 	db	100
   343  0021AA  20                 	db	32
   344  0021AB  61                 	db	97
   345  0021AC  6C                 	db	108
   346  0021AD  6F                 	db	111
   347  0021AE  6E                 	db	110
   348  0021AF  67                 	db	103
   349  0021B0  20                 	db	32
   350  0021B1  5A                 	db	90
   351  0021B2  20                 	db	32
   352  0021B3  41                 	db	65
   353  0021B4  78                 	db	120
   354  0021B5  69                 	db	105
   355  0021B6  73                 	db	115
   356  0021B7  0A                 	db	10
   357  0021B8  00                 	db	0
   358                           
   359                           ;initializer for _errString_Reset
   360  0021B9  45                 	db	69
   361  0021BA  72                 	db	114
   362  0021BB  72                 	db	114
   363  0021BC  6F                 	db	111
   364  0021BD  72                 	db	114
   365  0021BE  2C                 	db	44
   366  0021BF  20                 	db	32
   367  0021C0  74                 	db	116
   368  0021C1  69                 	db	105
   369  0021C2  6D                 	db	109
   370  0021C3  65                 	db	101
   371  0021C4  20                 	db	32
   372  0021C5  65                 	db	101
   373  0021C6  78                 	db	120
   374  0021C7  63                 	db	99
   375  0021C8  65                 	db	101
   376  0021C9  65                 	db	101
   377  0021CA  64                 	db	100
   378  0021CB  65                 	db	101
   379  0021CC  64                 	db	100
   380  0021CD  20                 	db	32
   381  0021CE  74                 	db	116
   382  0021CF  6F                 	db	111
   383  0021D0  20                 	db	32
   384  0021D1  72                 	db	114
   385  0021D2  65                 	db	101
   386  0021D3  73                 	db	115
   387  0021D4  65                 	db	101
   388  0021D5  74                 	db	116
   389  0021D6  20                 	db	32
   390  0021D7  70                 	db	112
   391  0021D8  6F                 	db	111
   392  0021D9  73                 	db	115
   393  0021DA  69                 	db	105
   394  0021DB  74                 	db	116
   395  0021DC  69                 	db	105
   396  0021DD  6F                 	db	111
   397  0021DE  6E                 	db	110
   398  0021DF  0A                 	db	10
   399  0021E0  00                 	db	0
   400                           
   401                           ;initializer for _errString_Fatal
   402  0021E1  46                 	db	70
   403  0021E2  61                 	db	97
   404  0021E3  74                 	db	116
   405  0021E4  61                 	db	97
   406  0021E5  6C                 	db	108
   407  0021E6  20                 	db	32
   408  0021E7  45                 	db	69
   409  0021E8  72                 	db	114
   410  0021E9  72                 	db	114
   411  0021EA  6F                 	db	111
   412  0021EB  72                 	db	114
   413  0021EC  2C                 	db	44
   414  0021ED  20                 	db	32
   415  0021EE  70                 	db	112
   416  0021EF  6C                 	db	108
   417  0021F0  65                 	db	101
   418  0021F1  61                 	db	97
   419  0021F2  73                 	db	115
   420  0021F3  65                 	db	101
   421  0021F4  20                 	db	32
   422  0021F5  72                 	db	114
   423  0021F6  65                 	db	101
   424  0021F7  73                 	db	115
   425  0021F8  65                 	db	101
   426  0021F9  74                 	db	116
   427  0021FA  20                 	db	32
   428  0021FB  74                 	db	116
   429  0021FC  68                 	db	104
   430  0021FD  65                 	db	101
   431  0021FE  20                 	db	32
   432  0021FF  64                 	db	100
   433  002200  65                 	db	101
   434  002201  76                 	db	118
   435  002202  69                 	db	105
   436  002203  63                 	db	99
   437  002204  65                 	db	101
   438  002205  21                 	db	33
   439  002206  0A                 	db	10
   440  002207  00                 	db	0
   441                           
   442                           ;initializer for _errString_Bound
   443  002208  45                 	db	69
   444  002209  72                 	db	114
   445  00220A  72                 	db	114
   446  00220B  6F                 	db	111
   447  00220C  72                 	db	114
   448  00220D  2C                 	db	44
   449  00220E  20                 	db	32
   450  00220F  70                 	db	112
   451  002210  6F                 	db	111
   452  002211  69                 	db	105
   453  002212  6E                 	db	110
   454  002213  74                 	db	116
   455  002214  20                 	db	32
   456  002215  6F                 	db	111
   457  002216  75                 	db	117
   458  002217  74                 	db	116
   459  002218  73                 	db	115
   460  002219  69                 	db	105
   461  00221A  64                 	db	100
   462  00221B  65                 	db	101
   463  00221C  20                 	db	32
   464  00221D  62                 	db	98
   465  00221E  6F                 	db	111
   466  00221F  75                 	db	117
   467  002220  6E                 	db	110
   468  002221  64                 	db	100
   469  002222  61                 	db	97
   470  002223  72                 	db	114
   471  002224  69                 	db	105
   472  002225  65                 	db	101
   473  002226  73                 	db	115
   474  002227  0A                 	db	10
   475  002228  00                 	db	0
   476                           
   477                           	psect	smallconst
   478  000600                     __psmallconst:
   479                           	callstack 0
   480  000600  00                 	db	0
   481  000601  0000               	dw	0
   482  000603  4000               	dw	16384
   483  000605                     __end_ofrotateObj@stepAngle:
   484                           	callstack 0
   485  000605  0065               	dw	101
   486  000607                     __end_of_maxY:
   487                           	callstack 0
   488  000607  0065               	dw	101
   489  000609                     __end_of_maxX:
   490                           	callstack 0
   491  000609  0400               	dw	1024
   492  00060B                     __end_of_therm_pressure:
   493                           	callstack 0
   494  00060B  0200               	dw	512
   495  00060D                     __end_of_touch_pressure:
   496                           	callstack 0
   497  00060D                     _feeder3Pos:
   498                           	callstack 0
   499  00060D  0F                 	db	15
   500  00060E  50                 	db	80
   501  00060F                     __end_of_feeder3Pos:
   502                           	callstack 0
   503  00060F                     _feeder2Pos:
   504                           	callstack 0
   505  00060F  0F                 	db	15
   506  000610  32                 	db	50
   507  000611                     __end_of_feeder2Pos:
   508                           	callstack 0
   509  000611                     _feeder1Pos:
   510                           	callstack 0
   511  000611  0F                 	db	15
   512  000612  14                 	db	20
   513  000613                     __end_of_feeder1Pos:
   514                           	callstack 0
   515  000613  64                 	db	100
   516  000614                     __end_of_maxFeedY:
   517                           	callstack 0
   518  000614  1E                 	db	30
   519  000615                     __end_of_maxFeedX:
   520                           	callstack 0
   521  0000                     _TMR0	set	4054
   522  0000                     _T1CONbits	set	4045
   523  0000                     _TXREG	set	4013
   524  0000                     _SPBRG	set	4015
   525  0000                     _RCSTAbits	set	4011
   526  0000                     _TXSTAbits	set	4012
   527  0000                     _TRISCbits	set	3988
   528  0000                     _RCREG1	set	4014
   529  0000                     _ADRESH	set	4036
   530  0000                     _ADRESL	set	4035
   531  0000                     _PIR1bits	set	3998
   532  0000                     _RCONbits	set	4048
   533  0000                     _INTCONbits	set	4082
   534  0000                     _IPR1bits	set	3999
   535  0000                     _PIE1bits	set	3997
   536  0000                     _ADCON0bits	set	4034
   537  0000                     _RCSTA1bits	set	4011
   538  0000                     _LATD	set	3980
   539  0000                     _PORTDbits	set	3971
   540  0000                     _TMR2	set	4044
   541  0000                     _LATC	set	3979
   542  0000                     _LATB	set	3978
   543  0000                     _LATA	set	3977
   544  0000                     _PORTEbits	set	3972
   545  0000                     _T0CONbits	set	4053
   546  0000                     _T2CONbits	set	4042
   547  0000                     _LATDbits	set	3980
   548  0000                     _LATCbits	set	3979
   549  0000                     _LATBbits	set	3978
   550  0000                     _LATAbits	set	3977
   551  0000                     _TRISDbits	set	3989
   552  0000                     _TRISEbits	set	3990
   553  0000                     _TRISD	set	3989
   554  0000                     _TRISC	set	3988
   555  0000                     _TRISB	set	3987
   556  0000                     _TRISA	set	3986
   557  0000                     _ADCON1bits	set	4033
   558  000615  00                 	db	0	; dummy byte at the end
   559  0000                     
   560                           ; #config settings
   561                           
   562                           	psect	cinit
   563  0022E8                     __pcinit:
   564                           	callstack 0
   565  0022E8                     start_initialization:
   566                           	callstack 0
   567  0022E8                     __initialization:
   568                           	callstack 0
   569                           
   570                           ; Initialize objects allocated to BANK1 (247 bytes)
   571                           ; load TBLPTR registers with __pidataBANK1
   572  0022E8  0E32               	movlw	low __pidataBANK1
   573  0022EA  6EF6               	movwf	tblptrl,c
   574  0022EC  0E21               	movlw	high __pidataBANK1
   575  0022EE  6EF7               	movwf	tblptrh,c
   576  0022F0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   577  0022F2  6EF8               	movwf	tblptru,c
   578  0022F4  EE01  F000         	lfsr	0,__pdataBANK1
   579  0022F8  EE10 F0F7          	lfsr	1,247
   580  0022FC                     copy_data0:
   581  0022FC  0009               	tblrd		*+
   582  0022FE  CFF5 FFEE          	movff	tablat,postinc0
   583  002302  50E5               	movf	postdec1,w,c
   584  002304  50E1               	movf	fsr1l,w,c
   585  002306  E1FA               	bnz	copy_data0
   586                           
   587                           ; Initialize objects allocated to BANK0 (70 bytes)
   588                           ; load TBLPTR registers with __pidataBANK0
   589  002308  0E6A               	movlw	low __pidataBANK0
   590  00230A  6EF6               	movwf	tblptrl,c
   591  00230C  0E24               	movlw	high __pidataBANK0
   592  00230E  6EF7               	movwf	tblptrh,c
   593  002310  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   594  002312  6EF8               	movwf	tblptru,c
   595  002314  EE00  F080         	lfsr	0,__pdataBANK0
   596  002318  EE10 F046          	lfsr	1,70
   597  00231C                     copy_data1:
   598  00231C  0009               	tblrd		*+
   599  00231E  CFF5 FFEE          	movff	tablat,postinc0
   600  002322  50E5               	movf	postdec1,w,c
   601  002324  50E1               	movf	fsr1l,w,c
   602  002326  E1FA               	bnz	copy_data1
   603                           
   604                           ; Initialize objects allocated to COMRAM (7 bytes)
   605                           ; load TBLPTR registers with __pidataCOMRAM
   606  002328  0E1C               	movlw	low __pidataCOMRAM
   607  00232A  6EF6               	movwf	tblptrl,c
   608  00232C  0E27               	movlw	high __pidataCOMRAM
   609  00232E  6EF7               	movwf	tblptrh,c
   610  002330  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   611  002332  6EF8               	movwf	tblptru,c
   612  002334  EE00  F067         	lfsr	0,__pdataCOMRAM
   613  002338  EE10 F007          	lfsr	1,7
   614  00233C                     copy_data2:
   615  00233C  0009               	tblrd		*+
   616  00233E  CFF5 FFEE          	movff	tablat,postinc0
   617  002342  50E5               	movf	postdec1,w,c
   618  002344  50E1               	movf	fsr1l,w,c
   619  002346  E1FA               	bnz	copy_data2
   620                           
   621                           ; Clear objects allocated to BANK0 (28 bytes)
   622  002348  EE00  F0C6         	lfsr	0,__pbssBANK0
   623  00234C  0E1C               	movlw	28
   624  00234E                     clear_0:
   625  00234E  6AEE               	clrf	postinc0,c
   626  002350  06E8               	decf	wreg,f,c
   627  002352  E1FD               	bnz	clear_0
   628                           
   629                           ; Clear objects allocated to COMRAM (36 bytes)
   630  002354  EE00  F043         	lfsr	0,__pbssCOMRAM
   631  002358  0E24               	movlw	36
   632  00235A                     clear_1:
   633  00235A  6AEE               	clrf	postinc0,c
   634  00235C  06E8               	decf	wreg,f,c
   635  00235E  E1FD               	bnz	clear_1
   636  002360                     end_of_initialization:
   637                           	callstack 0
   638  002360                     __end_of__initialization:
   639                           	callstack 0
   640  002360  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   641  002362  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   642  002364  0E00               	movlw	low (__Lmediumconst shr (0+16))
   643  002366  6EF8               	movwf	tblptru,c
   644  002368  0100               	movlb	0
   645  00236A  EFB7  F00C         	goto	_main	;jump to C main() function
   646                           
   647                           	psect	bssCOMRAM
   648  000043                     __pbssCOMRAM:
   649                           	callstack 0
   650  000043                     _receivedMex:
   651                           	callstack 0
   652  000043                     	ds	9
   653  00004C                     _posVector:
   654                           	callstack 0
   655  00004C                     	ds	3
   656  00004F                     _pwmPeriod:
   657                           	callstack 0
   658  00004F                     	ds	2
   659  000051                     _single_cycle:
   660                           	callstack 0
   661  000051                     	ds	2
   662  000053                     _ADC_res:
   663                           	callstack 0
   664  000053                     	ds	2
   665  000055                     _newFeeder:
   666                           	callstack 0
   667  000055                     	ds	2
   668  000057                     _rotAngle:
   669                           	callstack 0
   670  000057                     	ds	2
   671  000059                     _tm0Error:
   672                           	callstack 0
   673  000059                     	ds	2
   674  00005B                     _stepToggle:
   675                           	callstack 0
   676  00005B                     	ds	1
   677  00005C                     _pwmStep:
   678                           	callstack 0
   679  00005C                     	ds	1
   680  00005D                     _neverCheck:
   681                           	callstack 0
   682  00005D                     	ds	1
   683  00005E                     _counter:
   684                           	callstack 0
   685  00005E                     	ds	1
   686  00005F                     __newSequence:
   687                           	callstack 0
   688  00005F                     	ds	1
   689  000060                     __fatalError:
   690                           	callstack 0
   691  000060                     	ds	1
   692  000061                     _dataCounter:
   693                           	callstack 0
   694  000061                     	ds	1
   695  000062                     _completeStep:
   696                           	callstack 0
   697  000062                     	ds	1
   698  000063                     _tm0Count:
   699                           	callstack 0
   700  000063                     	ds	1
   701  000064                     _therm_rel:
   702                           	callstack 0
   703  000064                     	ds	1
   704  000065                     _touch_rel:
   705                           	callstack 0
   706  000065                     	ds	1
   707  000066                     _tm0Limit:
   708                           	callstack 0
   709  000066                     	ds	1
   710                           
   711                           	psect	dataCOMRAM
   712  000067                     __pdataCOMRAM:
   713                           	callstack 0
   714  000067                     _motCounter:
   715                           	callstack 0
   716  000067                     	ds	6
   717  00006D                     _mexLength:
   718                           	callstack 0
   719  00006D                     	ds	1
   720                           
   721                           	psect	bssBANK0
   722  0000C6                     __pbssBANK0:
   723                           	callstack 0
   724  0000C6                     _dataSequence:
   725                           	callstack 0
   726  0000C6                     	ds	20
   727  0000DA                     _newSequenceData:
   728                           	callstack 0
   729  0000DA                     	ds	8
   730                           
   731                           	psect	dataBANK0
   732  000080                     __pdataBANK0:
   733                           	callstack 0
   734  000080                     rotateObj@rotSequence:
   735                           	callstack 0
   736  000080                     	ds	4
   737  000084                     _stepMot3:
   738                           	callstack 0
   739  000084                     	ds	4
   740  000088                     _stepMot2:
   741                           	callstack 0
   742  000088                     	ds	4
   743  00008C                     _stepMot1:
   744                           	callstack 0
   745  00008C                     	ds	4
   746  000090                     _errString_Feed:
   747                           	callstack 0
   748  000090                     	ds	30
   749  0000AE                     _errString_Command:
   750                           	callstack 0
   751  0000AE                     	ds	24
   752                           
   753                           	psect	dataBANK1
   754  000100                     __pdataBANK1:
   755                           	callstack 0
   756  000100                     _errString_PointZ:
   757                           	callstack 0
   758  000100                     	ds	53
   759  000135                     _errString_Point:
   760                           	callstack 0
   761  000135                     	ds	41
   762  00015E                     _errString_ZEND:
   763                           	callstack 0
   764  00015E                     	ds	41
   765  000187                     _errString_Reset:
   766                           	callstack 0
   767  000187                     	ds	40
   768  0001AF                     _errString_Fatal:
   769                           	callstack 0
   770  0001AF                     	ds	39
   771  0001D6                     _errString_Bound:
   772                           	callstack 0
   773  0001D6                     	ds	33
   774                           
   775                           	psect	cstackBANK0
   776  0000E2                     __pcstackBANK0:
   777                           	callstack 0
   778  0000E2                     rotateObj@rotAngle:
   779                           	callstack 0
   780                           
   781                           ; 1 bytes @ 0x0
   782  0000E2                     	ds	1
   783  0000E3                     rotateObj@totStep:
   784                           	callstack 0
   785                           
   786                           ; 2 bytes @ 0x1
   787  0000E3                     	ds	2
   788  0000E5                     rotateObj@i:
   789                           	callstack 0
   790                           
   791                           ; 2 bytes @ 0x3
   792  0000E5                     	ds	2
   793  0000E7                     rotateObj@c:
   794                           	callstack 0
   795                           
   796                           ; 2 bytes @ 0x5
   797  0000E7                     	ds	2
   798  0000E9                     ??_executeData:
   799                           
   800                           ; 1 bytes @ 0x7
   801  0000E9                     	ds	2
   802  0000EB                     executeData@data:
   803                           	callstack 0
   804                           
   805                           ; 2 bytes @ 0x9
   806  0000EB                     	ds	2
   807  0000ED                     executeData@errCode:
   808                           	callstack 0
   809                           
   810                           ; 1 bytes @ 0xB
   811  0000ED                     	ds	1
   812  0000EE                     ??_main:
   813                           
   814                           ; 1 bytes @ 0xC
   815  0000EE                     	ds	2
   816  0000F0                     main@errCode:
   817                           	callstack 0
   818                           
   819                           ; 1 bytes @ 0xE
   820  0000F0                     	ds	1
   821  0000F1                     main@newData:
   822                           	callstack 0
   823                           
   824                           ; 2 bytes @ 0xF
   825  0000F1                     	ds	2
   826                           
   827                           	psect	cstackCOMRAM
   828  000001                     __pcstackCOMRAM:
   829                           	callstack 0
   830  000001                     ?_retPeriod:
   831                           	callstack 0
   832  000001                     i2uartTx@ptr:
   833                           	callstack 0
   834                           
   835                           ; 2 bytes @ 0x0
   836  000001                     	ds	2
   837  000003                     i2uartTx@length:
   838                           	callstack 0
   839                           
   840                           ; 1 bytes @ 0x2
   841  000003                     	ds	1
   842  000004                     i2uartTx@i:
   843                           	callstack 0
   844                           
   845                           ; 1 bytes @ 0x3
   846  000004                     	ds	1
   847  000005                     ??i2_printError:
   848                           
   849                           ; 1 bytes @ 0x4
   850  000005                     	ds	2
   851  000007                     i2printError@errCode:
   852                           	callstack 0
   853                           
   854                           ; 1 bytes @ 0x6
   855  000007                     	ds	1
   856  000008                     ??i2_storeData:
   857                           
   858                           ; 1 bytes @ 0x7
   859  000008                     	ds	2
   860  00000A                     i2storeData@data:
   861                           	callstack 0
   862                           
   863                           ; 1 bytes @ 0x9
   864  00000A                     	ds	1
   865  00000B                     ??_isr:
   866                           
   867                           ; 1 bytes @ 0xA
   868  00000B                     	ds	6
   869  000011                     isr@temp:
   870                           	callstack 0
   871                           
   872                           ; 1 bytes @ 0x10
   873  000011                     	ds	1
   874  000012                     ??_shiftData:
   875  000012                     ?_stepMade:
   876                           	callstack 0
   877  000012                     ?_stepCounter:
   878                           	callstack 0
   879  000012                     ?_returnTouch:
   880                           	callstack 0
   881  000012                     ?_returnTherm:
   882                           	callstack 0
   883  000012                     ?_getNewSequence:
   884                           	callstack 0
   885  000012                     ?_getData:
   886                           	callstack 0
   887  000012                     ?___xxtofl:
   888                           	callstack 0
   889  000012                     uartTx@ptr:
   890                           	callstack 0
   891  000012                     tim2Init@_pwmPeriod:
   892                           	callstack 0
   893  000012                     ___xxtofl@val:
   894                           	callstack 0
   895                           
   896                           ; 4 bytes @ 0x11
   897  000012                     	ds	2
   898  000014                     shiftData@i:
   899                           	callstack 0
   900  000014                     uartTx@length:
   901                           	callstack 0
   902  000014                     stepMade@temp:
   903                           	callstack 0
   904                           
   905                           ; 1 bytes @ 0x13
   906  000014                     	ds	1
   907  000015                     resetPosition@keepMovingX:
   908                           	callstack 0
   909  000015                     uartTx@i:
   910                           	callstack 0
   911  000015                     moveToPoint@x1:
   912                           	callstack 0
   913                           
   914                           ; 2 bytes @ 0x14
   915  000015                     	ds	1
   916  000016                     ??_printError:
   917  000016                     ??___xxtofl:
   918  000016                     resetPosition@keepMovingY:
   919                           	callstack 0
   920                           
   921                           ; 1 bytes @ 0x15
   922  000016                     	ds	1
   923  000017                     resetPosition@keepMovingZ:
   924                           	callstack 0
   925  000017                     moveToPoint@y1:
   926                           	callstack 0
   927                           
   928                           ; 2 bytes @ 0x16
   929  000017                     	ds	1
   930  000018                     printError@errCode:
   931                           	callstack 0
   932                           
   933                           ; 1 bytes @ 0x17
   934  000018                     	ds	1
   935  000019                     ??_storeData:
   936  000019                     moveToPoint@x2:
   937                           	callstack 0
   938                           
   939                           ; 2 bytes @ 0x18
   940  000019                     	ds	1
   941  00001A                     ___xxtofl@sign:
   942                           	callstack 0
   943                           
   944                           ; 1 bytes @ 0x19
   945  00001A                     	ds	1
   946  00001B                     storeData@data:
   947                           	callstack 0
   948  00001B                     ___xxtofl@exp:
   949                           	callstack 0
   950  00001B                     moveToPoint@y2:
   951                           	callstack 0
   952                           
   953                           ; 2 bytes @ 0x1A
   954  00001B                     	ds	1
   955  00001C                     ___xxtofl@arg:
   956                           	callstack 0
   957                           
   958                           ; 4 bytes @ 0x1B
   959  00001C                     	ds	1
   960  00001D                     ??_moveToPoint:
   961                           
   962                           ; 1 bytes @ 0x1C
   963  00001D                     	ds	2
   964  00001F                     moveToPoint@MOT1Direction:
   965                           	callstack 0
   966                           
   967                           ; 1 bytes @ 0x1E
   968  00001F                     	ds	1
   969  000020                     ?___fldiv:
   970                           	callstack 0
   971  000020                     moveToPoint@MOT2Direction:
   972                           	callstack 0
   973  000020                     ___fldiv@b:
   974                           	callstack 0
   975                           
   976                           ; 4 bytes @ 0x1F
   977  000020                     	ds	1
   978  000021                     moveToPoint@keepMovingX:
   979                           	callstack 0
   980                           
   981                           ; 1 bytes @ 0x20
   982  000021                     	ds	1
   983  000022                     moveToPoint@keepMovingY:
   984                           	callstack 0
   985                           
   986                           ; 1 bytes @ 0x21
   987  000022                     	ds	2
   988  000024                     ___fldiv@a:
   989                           	callstack 0
   990                           
   991                           ; 4 bytes @ 0x23
   992  000024                     	ds	4
   993  000028                     ??___fldiv:
   994                           
   995                           ; 1 bytes @ 0x27
   996  000028                     	ds	4
   997  00002C                     ___fldiv@rem:
   998                           	callstack 0
   999                           
  1000                           ; 4 bytes @ 0x2B
  1001  00002C                     	ds	4
  1002  000030                     ___fldiv@sign:
  1003                           	callstack 0
  1004                           
  1005                           ; 1 bytes @ 0x2F
  1006  000030                     	ds	1
  1007  000031                     ___fldiv@new_exp:
  1008                           	callstack 0
  1009                           
  1010                           ; 2 bytes @ 0x30
  1011  000031                     	ds	2
  1012  000033                     ___fldiv@grs:
  1013                           	callstack 0
  1014                           
  1015                           ; 4 bytes @ 0x32
  1016  000033                     	ds	4
  1017  000037                     ___fldiv@bexp:
  1018                           	callstack 0
  1019                           
  1020                           ; 1 bytes @ 0x36
  1021  000037                     	ds	1
  1022  000038                     ___fldiv@aexp:
  1023                           	callstack 0
  1024                           
  1025                           ; 1 bytes @ 0x37
  1026  000038                     	ds	1
  1027  000039                     ?___fltol:
  1028                           	callstack 0
  1029  000039                     ___fltol@f1:
  1030                           	callstack 0
  1031                           
  1032                           ; 4 bytes @ 0x38
  1033  000039                     	ds	4
  1034  00003D                     ??___fltol:
  1035                           
  1036                           ; 1 bytes @ 0x3C
  1037  00003D                     	ds	4
  1038  000041                     ___fltol@sign1:
  1039                           	callstack 0
  1040                           
  1041                           ; 1 bytes @ 0x40
  1042  000041                     	ds	1
  1043  000042                     ___fltol@exp1:
  1044                           	callstack 0
  1045                           
  1046                           ; 1 bytes @ 0x41
  1047  000042                     	ds	1
  1048  000043                     
  1049                           ; 1 bytes @ 0x42
  1050 ;;
  1051 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1052 ;;
  1053 ;; *************** function _main *****************
  1054 ;; Defined at:
  1055 ;;		line 18 in file "main.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;		None
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;  newData         2   15[BANK0 ] PTR struct .
  1060 ;;		 -> newSequenceData(8), 
  1061 ;;  errCode         1   14[BANK0 ] unsigned char 
  1062 ;; Return value:  Size  Location     Type
  1063 ;;                  1    wreg      void 
  1064 ;; Registers used:
  1065 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1066 ;; Tracked objects:
  1067 ;;		On entry : 0/0
  1068 ;;		On exit  : 0/0
  1069 ;;		Unchanged: 0/0
  1070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1071 ;;      Params:         0       0       0       0       0       0       0
  1072 ;;      Locals:         0       3       0       0       0       0       0
  1073 ;;      Temps:          0       2       0       0       0       0       0
  1074 ;;      Totals:         0       5       0       0       0       0       0
  1075 ;;Total ram usage:        5 bytes
  1076 ;; Hardware stack levels required when called:    7
  1077 ;; This function calls:
  1078 ;;		_clearTM0
  1079 ;;		_executeData
  1080 ;;		_getNewSequence
  1081 ;;		_initADC
  1082 ;;		_initPinMotors
  1083 ;;		_interruptInit
  1084 ;;		_newSequence
  1085 ;;		_printError
  1086 ;;		_readSeq
  1087 ;;		_reduceSeq
  1088 ;;		_resetNewSequence
  1089 ;;		_resetPosition
  1090 ;;		_shiftData
  1091 ;;		_storeData
  1092 ;;		_tim0Init
  1093 ;;		_tim1Init
  1094 ;;		_tim2Init
  1095 ;;		_usartInit
  1096 ;; This function is called by:
  1097 ;;		Startup code after reset
  1098 ;; This function uses a non-reentrant model
  1099 ;;
  1100                           
  1101                           	psect	text0
  1102  00196E                     __ptext0:
  1103                           	callstack 0
  1104  00196E                     _main:
  1105                           	callstack 24
  1106  00196E  FFFF               	dw	65535	; assembler added errata NOP
  1107                           
  1108                           ;main.c: 22:     interruptInit();
  1109  001970  EC58  F012         	call	_interruptInit	;wreg free
  1110  001974                     
  1111                           ;main.c: 23:     initPinMotors();
  1112  001974  ECA6  F012         	call	_initPinMotors	;wreg free
  1113  001978                     
  1114                           ;main.c: 24:     initADC();
  1115  001978  ECB9  F012         	call	_initADC	;wreg free
  1116  00197C                     
  1117                           ;main.c: 25:     usartInit();
  1118  00197C  ECCC  F012         	call	_usartInit	;wreg free
  1119  001980                     
  1120                           ;main.c: 26:     tim0Init();
  1121  001980  ECEE  F012         	call	_tim0Init	;wreg free
  1122  001984                     
  1123                           ;main.c: 27:     tim1Init();
  1124  001984  EC09  F013         	call	_tim1Init	;wreg free
  1125  001988                     
  1126                           ;main.c: 28:     tim2Init(10);
  1127  001988  0E00               	movlw	0
  1128  00198A  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1129  00198C  0E0A               	movlw	10
  1130  00198E  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1131  001990  ECE5  F012         	call	_tim2Init	;wreg free
  1132  001994                     
  1133                           ;main.c: 31:     errCode = resetPosition();
  1134  001994  ECC5  F00B         	call	_resetPosition	;wreg free
  1135  001998  0100               	movlb	0	; () banked
  1136  00199A  6FF0               	movwf	main@errCode& (0+255),b
  1137  00199C                     
  1138                           ; BSR set to: 0
  1139                           ;main.c: 32:     if(errCode != 0){
  1140  00199C  51F0               	movf	main@errCode& (0+255),w,b
  1141  00199E  B4D8               	btfsc	status,2,c
  1142  0019A0  EFD4  F00C         	goto	u4131
  1143  0019A4  EFD7  F00C         	goto	u4130
  1144  0019A8                     u4131:
  1145  0019A8  FFFF               	dw	65535	; assembler added errata NOP
  1146  0019AA  EFDE  F00C         	goto	l325
  1147  0019AE                     u4130:
  1148  0019AE  FFFF               	dw	65535	; assembler added errata NOP
  1149  0019B0                     
  1150                           ; BSR set to: 0
  1151                           ;main.c: 33:         printError(errCode);
  1152  0019B0  51F0               	movf	main@errCode& (0+255),w,b
  1153  0019B2  ECEE  F00D         	call	_printError
  1154  0019B6                     l326:
  1155  0019B6  FFFF               	dw	65535	; assembler added errata NOP
  1156  0019B8  EFDB  F00C         	goto	l326
  1157  0019BC                     l325:
  1158  0019BC  FFFF               	dw	65535	; assembler added errata NOP
  1159                           
  1160                           ; BSR set to: 0
  1161                           ;main.c: 38:     RCSTA1bits.CREN = 1;
  1162  0019BE  88AB               	bsf	171,4,c	;volatile
  1163  0019C0                     l4658:
  1164  0019C0  FFFF               	dw	65535	; assembler added errata NOP
  1165                           
  1166                           ;main.c: 41:         if(newSequence()){
  1167  0019C2  EC7A  F013         	call	_newSequence	;wreg free
  1168  0019C6  0900               	iorlw	0
  1169  0019C8  B4D8               	btfsc	status,2,c
  1170  0019CA  EFE9  F00C         	goto	u4141
  1171  0019CE  EFEC  F00C         	goto	u4140
  1172  0019D2                     u4141:
  1173  0019D2  FFFF               	dw	65535	; assembler added errata NOP
  1174  0019D4  EF35  F00D         	goto	l4678
  1175  0019D8                     u4140:
  1176  0019D8  FFFF               	dw	65535	; assembler added errata NOP
  1177  0019DA                     
  1178                           ;main.c: 42:             t_newSequence* newData = getNewSequence();
  1179  0019DA  EC10  F013         	call	_getNewSequence	;wreg free
  1180  0019DE  C012  F0F1         	movff	?_getNewSequence,main@newData
  1181  0019E2  C013  F0F2         	movff	?_getNewSequence+1,main@newData+1
  1182  0019E6                     
  1183                           ;main.c: 44:             newFeeder[0] = newData ->init_posX;
  1184  0019E6  0100               	movlb	0	; () banked
  1185  0019E8  EE20 F002          	lfsr	2,2
  1186  0019EC  51F1               	movf	main@newData& (0+255),w,b
  1187  0019EE  26D9               	addwf	fsr2l,f,c
  1188  0019F0  51F2               	movf	(main@newData+1)& (0+255),w,b
  1189  0019F2  22DA               	addwfc	fsr2h,f,c
  1190  0019F4  50DF               	movf	indf2,w,c
  1191  0019F6  6E55               	movwf	_newFeeder^0,c
  1192  0019F8                     
  1193                           ; BSR set to: 0
  1194                           ;main.c: 45:             newFeeder[1] = newData ->init_posY;
  1195  0019F8  EE20 F003          	lfsr	2,3
  1196  0019FC  51F1               	movf	main@newData& (0+255),w,b
  1197  0019FE  26D9               	addwf	fsr2l,f,c
  1198  001A00  51F2               	movf	(main@newData+1)& (0+255),w,b
  1199  001A02  22DA               	addwfc	fsr2h,f,c
  1200  001A04  50DF               	movf	indf2,w,c
  1201  001A06  6E56               	movwf	(_newFeeder+1)^0,c
  1202  001A08                     
  1203                           ; BSR set to: 0
  1204                           ;main.c: 48:             storeData(1);
  1205  001A08  0E01               	movlw	1
  1206  001A0A  EC41  F008         	call	_storeData
  1207  001A0E                     
  1208                           ;main.c: 49:             storeData(0xFF);
  1209  001A0E  0EFF               	movlw	255
  1210  001A10  EC41  F008         	call	_storeData
  1211  001A14                     
  1212                           ;main.c: 50:             storeData(newData ->end_posX);
  1213  001A14  0100               	movlb	0	; () banked
  1214  001A16  EE20 F005          	lfsr	2,5
  1215  001A1A  51F1               	movf	main@newData& (0+255),w,b
  1216  001A1C  26D9               	addwf	fsr2l,f,c
  1217  001A1E  51F2               	movf	(main@newData+1)& (0+255),w,b
  1218  001A20  22DA               	addwfc	fsr2h,f,c
  1219  001A22  50DF               	movf	indf2,w,c
  1220  001A24  EC41  F008         	call	_storeData
  1221  001A28                     
  1222                           ;main.c: 51:             storeData(newData ->end_posY);
  1223  001A28  0100               	movlb	0	; () banked
  1224  001A2A  EE20 F006          	lfsr	2,6
  1225  001A2E  51F1               	movf	main@newData& (0+255),w,b
  1226  001A30  26D9               	addwf	fsr2l,f,c
  1227  001A32  51F2               	movf	(main@newData+1)& (0+255),w,b
  1228  001A34  22DA               	addwfc	fsr2h,f,c
  1229  001A36  50DF               	movf	indf2,w,c
  1230  001A38  EC41  F008         	call	_storeData
  1231  001A3C                     
  1232                           ;main.c: 52:             storeData(newData ->end_rot - newData ->init_rot);
  1233  001A3C  0100               	movlb	0	; () banked
  1234  001A3E  EE20 F004          	lfsr	2,4
  1235  001A42  51F1               	movf	main@newData& (0+255),w,b
  1236  001A44  26D9               	addwf	fsr2l,f,c
  1237  001A46  51F2               	movf	(main@newData+1)& (0+255),w,b
  1238  001A48  22DA               	addwfc	fsr2h,f,c
  1239  001A4A  50DF               	movf	indf2,w,c
  1240  001A4C  6FEE               	movwf	??_main& (0+255),b
  1241  001A4E  EE20 F007          	lfsr	2,7
  1242  001A52  51F1               	movf	main@newData& (0+255),w,b
  1243  001A54  26D9               	addwf	fsr2l,f,c
  1244  001A56  51F2               	movf	(main@newData+1)& (0+255),w,b
  1245  001A58  22DA               	addwfc	fsr2h,f,c
  1246  001A5A  50DF               	movf	indf2,w,c
  1247  001A5C  6FEF               	movwf	(??_main+1)& (0+255),b
  1248  001A5E  51EE               	movf	??_main& (0+255),w,b
  1249  001A60  5DEF               	subwf	(??_main+1)& (0+255),w,b
  1250  001A62  EC41  F008         	call	_storeData
  1251  001A66                     
  1252                           ;main.c: 55:             resetNewSequence();
  1253  001A66  EC45  F013         	call	_resetNewSequence	;wreg free
  1254  001A6A                     l4678:
  1255  001A6A  FFFF               	dw	65535	; assembler added errata NOP
  1256                           
  1257                           ;main.c: 57:         if(readSeq()){
  1258  001A6C  EC76  F013         	call	_readSeq	;wreg free
  1259  001A70  0900               	iorlw	0
  1260  001A72  B4D8               	btfsc	status,2,c
  1261  001A74  EF3E  F00D         	goto	u4151
  1262  001A78  EF41  F00D         	goto	u4150
  1263  001A7C                     u4151:
  1264  001A7C  FFFF               	dw	65535	; assembler added errata NOP
  1265  001A7E  EFE0  F00C         	goto	l4658
  1266  001A82                     u4150:
  1267  001A82  FFFF               	dw	65535	; assembler added errata NOP
  1268  001A84                     
  1269                           ;main.c: 61:             errCode = executeData();
  1270  001A84  ECC6  F006         	call	_executeData	;wreg free
  1271  001A88  0100               	movlb	0	; () banked
  1272  001A8A  6FF0               	movwf	main@errCode& (0+255),b
  1273  001A8C                     
  1274                           ; BSR set to: 0
  1275                           ;main.c: 63:             printError(errCode);
  1276  001A8C  51F0               	movf	main@errCode& (0+255),w,b
  1277  001A8E  ECEE  F00D         	call	_printError
  1278  001A92                     
  1279                           ;main.c: 66:             clearTM0();
  1280  001A92  EC1E  F013         	call	_clearTM0	;wreg free
  1281  001A96                     
  1282                           ;main.c: 70:             reduceSeq();
  1283  001A96  EC72  F013         	call	_reduceSeq	;wreg free
  1284  001A9A                     
  1285                           ;main.c: 71:             shiftData();
  1286  001A9A  ECB7  F011         	call	_shiftData	;wreg free
  1287  001A9E  EFE0  F00C         	goto	l4658
  1288  001AA2  EFD2  F000         	goto	start
  1289  001AA6                     __end_of_main:
  1290                           	callstack 0
  1291                           
  1292 ;; *************** function _usartInit *****************
  1293 ;; Defined at:
  1294 ;;		line 111 in file "usart.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;		None
  1297 ;; Auto vars:     Size  Location     Type
  1298 ;;		None
  1299 ;; Return value:  Size  Location     Type
  1300 ;;                  1    wreg      void 
  1301 ;; Registers used:
  1302 ;;		wreg, status,2
  1303 ;; Tracked objects:
  1304 ;;		On entry : 0/0
  1305 ;;		On exit  : 0/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1308 ;;      Params:         0       0       0       0       0       0       0
  1309 ;;      Locals:         0       0       0       0       0       0       0
  1310 ;;      Temps:          0       0       0       0       0       0       0
  1311 ;;      Totals:         0       0       0       0       0       0       0
  1312 ;;Total ram usage:        0 bytes
  1313 ;; Hardware stack levels used:    1
  1314 ;; Hardware stack levels required when called:    4
  1315 ;; This function calls:
  1316 ;;		Nothing
  1317 ;; This function is called by:
  1318 ;;		_main
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           	psect	text1
  1323  002598                     __ptext1:
  1324                           	callstack 0
  1325  002598                     _usartInit:
  1326                           	callstack 0
  1327  002598  FFFF               	dw	65535	; assembler added errata NOP
  1328  00259A                     
  1329                           ;usart.c: 113:     TRISCbits.TRISC6 = 0;
  1330  00259A  9C94               	bcf	148,6,c	;volatile
  1331                           
  1332                           ;usart.c: 114:     TRISCbits.TRISC7 = 1;
  1333  00259C  8E94               	bsf	148,7,c	;volatile
  1334                           
  1335                           ;usart.c: 116:     TXSTAbits.TX9 = 0;
  1336  00259E  9CAC               	bcf	172,6,c	;volatile
  1337                           
  1338                           ;usart.c: 117:     TXSTAbits.TXEN = 1;
  1339  0025A0  8AAC               	bsf	172,5,c	;volatile
  1340                           
  1341                           ;usart.c: 118:     TXSTAbits.SYNC = 0;
  1342  0025A2  98AC               	bcf	172,4,c	;volatile
  1343                           
  1344                           ;usart.c: 119:     TXSTAbits.BRGH = 0;
  1345  0025A4  94AC               	bcf	172,2,c	;volatile
  1346                           
  1347                           ;usart.c: 121:     RCSTAbits.SPEN = 1;
  1348  0025A6  8EAB               	bsf	171,7,c	;volatile
  1349                           
  1350                           ;usart.c: 122:     RCSTAbits.RX9 = 0;
  1351  0025A8  9CAB               	bcf	171,6,c	;volatile
  1352                           
  1353                           ;usart.c: 123:     RCSTAbits.CREN = 0;
  1354  0025AA  98AB               	bcf	171,4,c	;volatile
  1355                           
  1356                           ;usart.c: 124:     RCSTAbits.ADDEN = 0;
  1357  0025AC  96AB               	bcf	171,3,c	;volatile
  1358  0025AE                     
  1359                           ;usart.c: 127:     SPBRG = 25;
  1360  0025AE  0E19               	movlw	25
  1361  0025B0  6EAF               	movwf	175,c	;volatile
  1362  0025B2  0012               	return		;funcret
  1363  0025B4  FFFF               	dw	65535	; errata NOP
  1364  0025B6                     __end_of_usartInit:
  1365                           	callstack 0
  1366                           
  1367 ;; *************** function _tim2Init *****************
  1368 ;; Defined at:
  1369 ;;		line 46 in file "timer.c"
  1370 ;; Parameters:    Size  Location     Type
  1371 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;		None
  1374 ;; Return value:  Size  Location     Type
  1375 ;;                  1    wreg      void 
  1376 ;; Registers used:
  1377 ;;		None
  1378 ;; Tracked objects:
  1379 ;;		On entry : 0/0
  1380 ;;		On exit  : 0/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1383 ;;      Params:         2       0       0       0       0       0       0
  1384 ;;      Locals:         0       0       0       0       0       0       0
  1385 ;;      Temps:          0       0       0       0       0       0       0
  1386 ;;      Totals:         2       0       0       0       0       0       0
  1387 ;;Total ram usage:        2 bytes
  1388 ;; Hardware stack levels used:    1
  1389 ;; Hardware stack levels required when called:    4
  1390 ;; This function calls:
  1391 ;;		Nothing
  1392 ;; This function is called by:
  1393 ;;		_main
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text2
  1398  0025CA                     __ptext2:
  1399                           	callstack 0
  1400  0025CA                     _tim2Init:
  1401                           	callstack 0
  1402  0025CA  FFFF               	dw	65535	; assembler added errata NOP
  1403  0025CC                     
  1404                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1405  0025CC  94CA               	bcf	202,2,c	;volatile
  1406                           
  1407                           ;timer.c: 48:     T2CONbits.T2CKPS1 = 1;
  1408  0025CE  82CA               	bsf	202,1,c	;volatile
  1409                           
  1410                           ;timer.c: 52:     pwmPeriod = _pwmPeriod;
  1411  0025D0  C012  F04F         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1412  0025D4  C013  F050         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1413  0025D8  0012               	return		;funcret
  1414  0025DA  FFFF               	dw	65535	; errata NOP
  1415  0025DC                     __end_of_tim2Init:
  1416                           	callstack 0
  1417                           
  1418 ;; *************** function _tim1Init *****************
  1419 ;; Defined at:
  1420 ;;		line 33 in file "timer.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;		None
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;		None
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		wreg, status,2
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1434 ;;      Params:         0       0       0       0       0       0       0
  1435 ;;      Locals:         0       0       0       0       0       0       0
  1436 ;;      Temps:          0       0       0       0       0       0       0
  1437 ;;      Totals:         0       0       0       0       0       0       0
  1438 ;;Total ram usage:        0 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; Hardware stack levels required when called:    4
  1441 ;; This function calls:
  1442 ;;		Nothing
  1443 ;; This function is called by:
  1444 ;;		_main
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text3
  1449  002612                     __ptext3:
  1450                           	callstack 0
  1451  002612                     _tim1Init:
  1452                           	callstack 0
  1453  002612  FFFF               	dw	65535	; assembler added errata NOP
  1454  002614                     
  1455                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1456  002614  0E30               	movlw	48
  1457  002616  12CD               	iorwf	205,f,c	;volatile
  1458  002618                     
  1459                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1460  002618  92CD               	bcf	205,1,c	;volatile
  1461  00261A                     
  1462                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1463  00261A  80CD               	bsf	205,0,c	;volatile
  1464  00261C  0012               	return		;funcret
  1465  00261E  FFFF               	dw	65535	; errata NOP
  1466  002620                     __end_of_tim1Init:
  1467                           	callstack 0
  1468                           
  1469 ;; *************** function _tim0Init *****************
  1470 ;; Defined at:
  1471 ;;		line 21 in file "timer.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;		None
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;		None
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  1    wreg      void 
  1478 ;; Registers used:
  1479 ;;		wreg, status,2
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1485 ;;      Params:         0       0       0       0       0       0       0
  1486 ;;      Locals:         0       0       0       0       0       0       0
  1487 ;;      Temps:          0       0       0       0       0       0       0
  1488 ;;      Totals:         0       0       0       0       0       0       0
  1489 ;;Total ram usage:        0 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    4
  1492 ;; This function calls:
  1493 ;;		Nothing
  1494 ;; This function is called by:
  1495 ;;		_main
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text4
  1500  0025DC                     __ptext4:
  1501                           	callstack 0
  1502  0025DC                     _tim0Init:
  1503                           	callstack 0
  1504  0025DC  FFFF               	dw	65535	; assembler added errata NOP
  1505  0025DE                     
  1506                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1507  0025DE  9ED5               	bcf	213,7,c	;volatile
  1508                           
  1509                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1510  0025E0  9CD5               	bcf	213,6,c	;volatile
  1511                           
  1512                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1513  0025E2  9AD5               	bcf	213,5,c	;volatile
  1514                           
  1515                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1516  0025E4  86D5               	bsf	213,3,c	;volatile
  1517  0025E6                     
  1518                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1519  0025E6  0E07               	movlw	7
  1520  0025E8  12D5               	iorwf	213,f,c	;volatile
  1521  0025EA  0012               	return		;funcret
  1522  0025EC  FFFF               	dw	65535	; errata NOP
  1523  0025EE                     __end_of_tim0Init:
  1524                           	callstack 0
  1525                           
  1526 ;; *************** function _storeData *****************
  1527 ;; Defined at:
  1528 ;;		line 183 in file "usart.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  data            1    wreg     unsigned char 
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;  data            1   26[COMRAM] unsigned char 
  1533 ;; Return value:  Size  Location     Type
  1534 ;;                  1    wreg      void 
  1535 ;; Registers used:
  1536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1537 ;; Tracked objects:
  1538 ;;		On entry : 0/0
  1539 ;;		On exit  : 0/0
  1540 ;;		Unchanged: 0/0
  1541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1542 ;;      Params:         0       0       0       0       0       0       0
  1543 ;;      Locals:         1       0       0       0       0       0       0
  1544 ;;      Temps:          2       0       0       0       0       0       0
  1545 ;;      Totals:         3       0       0       0       0       0       0
  1546 ;;Total ram usage:        3 bytes
  1547 ;; Hardware stack levels used:    1
  1548 ;; Hardware stack levels required when called:    6
  1549 ;; This function calls:
  1550 ;;		_printError
  1551 ;; This function is called by:
  1552 ;;		_main
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556                           	psect	text5
  1557  001082                     __ptext5:
  1558                           	callstack 0
  1559  001082                     _storeData:
  1560                           	callstack 0
  1561  001082  FFFF               	dw	65535	; assembler added errata NOP
  1562                           
  1563                           ;incstack = 0
  1564                           ;storeData@data stored from wreg
  1565  001084  6E1B               	movwf	storeData@data^0,c
  1566  001086                     
  1567                           ;usart.c: 189:     receivedMex[counter] = data;
  1568  001086  0E43               	movlw	low _receivedMex
  1569  001088  245E               	addwf	_counter^0,w,c
  1570  00108A  6ED9               	movwf	fsr2l,c
  1571  00108C  6ADA               	clrf	fsr2h,c
  1572  00108E  0E00               	movlw	high _receivedMex
  1573  001090  22DA               	addwfc	fsr2h,f,c
  1574  001092  C01B  FFDF         	movff	storeData@data,indf2
  1575  001096                     
  1576                           ;usart.c: 191:     counter++;
  1577  001096  2A5E               	incf	_counter^0,f,c
  1578                           
  1579                           ;usart.c: 194:     switch(receivedMex[0]){
  1580  001098  EF6A  F008         	goto	l4464
  1581  00109C                     l4454:
  1582  00109C  FFFF               	dw	65535	; assembler added errata NOP
  1583                           
  1584                           ;usart.c: 196:             mexLength = 5;
  1585  00109E  0E05               	movlw	5
  1586  0010A0  6E6D               	movwf	_mexLength^0,c
  1587                           
  1588                           ;usart.c: 197:             neverCheck = 0;
  1589  0010A2  0E00               	movlw	0
  1590  0010A4  6E5D               	movwf	_neverCheck^0,c
  1591                           
  1592                           ;usart.c: 198:             break;
  1593  0010A6  EF85  F008         	goto	l4466
  1594  0010AA                     l4456:
  1595  0010AA  FFFF               	dw	65535	; assembler added errata NOP
  1596                           
  1597                           ;usart.c: 200:             mexLength = 9;
  1598  0010AC  0E09               	movlw	9
  1599  0010AE  6E6D               	movwf	_mexLength^0,c
  1600                           
  1601                           ;usart.c: 201:             neverCheck = 0;
  1602  0010B0  0E00               	movlw	0
  1603  0010B2  6E5D               	movwf	_neverCheck^0,c
  1604                           
  1605                           ;usart.c: 202:             break;
  1606  0010B4  EF85  F008         	goto	l4466
  1607  0010B8                     l4458:
  1608  0010B8  FFFF               	dw	65535	; assembler added errata NOP
  1609                           
  1610                           ;usart.c: 204:             mexLength = 1;
  1611  0010BA  0E01               	movlw	1
  1612  0010BC  6E6D               	movwf	_mexLength^0,c
  1613                           
  1614                           ;usart.c: 205:             neverCheck = 0;
  1615  0010BE  0E00               	movlw	0
  1616  0010C0  6E5D               	movwf	_neverCheck^0,c
  1617                           
  1618                           ;usart.c: 206:             break;
  1619  0010C2  EF85  F008         	goto	l4466
  1620  0010C6                     l4460:
  1621  0010C6  FFFF               	dw	65535	; assembler added errata NOP
  1622                           
  1623                           ;usart.c: 208:             neverCheck = 1;
  1624  0010C8  0E01               	movlw	1
  1625  0010CA  6E5D               	movwf	_neverCheck^0,c
  1626                           
  1627                           ;usart.c: 209:             counter = 0;
  1628  0010CC  0E00               	movlw	0
  1629  0010CE  6E5E               	movwf	_counter^0,c
  1630                           
  1631                           ;usart.c: 210:             break;
  1632  0010D0  EF85  F008         	goto	l4466
  1633  0010D4                     l4464:
  1634  0010D4  FFFF               	dw	65535	; assembler added errata NOP
  1635  0010D6  5043               	movf	_receivedMex^0,w,c
  1636  0010D8  6E19               	movwf	??_storeData^0,c
  1637  0010DA  6A1A               	clrf	(??_storeData+1)^0,c
  1638                           
  1639                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1640                           ; Switch size 1, requested type "simple"
  1641                           ; Number of cases is 1, Range of values is 0 to 0
  1642                           ; switch strategies available:
  1643                           ; Name         Instructions Cycles
  1644                           ; simple_byte            4     3 (average)
  1645                           ;	Chosen strategy is simple_byte
  1646  0010DC  501A               	movf	(??_storeData+1)^0,w,c
  1647  0010DE  0A00               	xorlw	0	; case 0
  1648  0010E0  B4D8               	btfsc	status,2,c
  1649  0010E2  EF75  F008         	goto	l4830
  1650  0010E6  EF63  F008         	goto	l4460
  1651  0010EA                     l4830:
  1652  0010EA  FFFF               	dw	65535	; assembler added errata NOP
  1653                           
  1654                           ; Switch size 1, requested type "simple"
  1655                           ; Number of cases is 3, Range of values is 1 to 3
  1656                           ; switch strategies available:
  1657                           ; Name         Instructions Cycles
  1658                           ; simple_byte           10     6 (average)
  1659                           ;	Chosen strategy is simple_byte
  1660  0010EC  5019               	movf	??_storeData^0,w,c
  1661  0010EE  0A01               	xorlw	1	; case 1
  1662  0010F0  B4D8               	btfsc	status,2,c
  1663  0010F2  EF4E  F008         	goto	l4454
  1664  0010F6  0A03               	xorlw	3	; case 2
  1665  0010F8  B4D8               	btfsc	status,2,c
  1666  0010FA  EF55  F008         	goto	l4456
  1667  0010FE  0A01               	xorlw	1	; case 3
  1668  001100  B4D8               	btfsc	status,2,c
  1669  001102  EF5C  F008         	goto	l4458
  1670  001106  EF63  F008         	goto	l4460
  1671  00110A                     l4466:
  1672  00110A  FFFF               	dw	65535	; assembler added errata NOP
  1673                           
  1674                           ;usart.c: 215:     if(counter == mexLength && !neverCheck){
  1675  00110C  506D               	movf	_mexLength^0,w,c
  1676  00110E  185E               	xorwf	_counter^0,w,c
  1677  001110  A4D8               	btfss	status,2,c
  1678  001112  EF8D  F008         	goto	u3971
  1679  001116  EF90  F008         	goto	u3970
  1680  00111A                     u3971:
  1681  00111A  FFFF               	dw	65535	; assembler added errata NOP
  1682  00111C  EF82  F009         	goto	l599
  1683  001120                     u3970:
  1684  001120  FFFF               	dw	65535	; assembler added errata NOP
  1685  001122  505D               	movf	_neverCheck^0,w,c
  1686  001124  A4D8               	btfss	status,2,c
  1687  001126  EF97  F008         	goto	u3981
  1688  00112A  EF9A  F008         	goto	u3980
  1689  00112E                     u3981:
  1690  00112E  FFFF               	dw	65535	; assembler added errata NOP
  1691  001130  EF82  F009         	goto	l599
  1692  001134                     u3980:
  1693  001134  FFFF               	dw	65535	; assembler added errata NOP
  1694  001136                     
  1695                           ;usart.c: 216:         counter = 0;
  1696  001136  0E00               	movlw	0
  1697  001138  6E5E               	movwf	_counter^0,c
  1698                           
  1699                           ;usart.c: 219:         switch(receivedMex[0]){
  1700  00113A  EF64  F009         	goto	l4508
  1701  00113E                     l4472:
  1702  00113E  FFFF               	dw	65535	; assembler added errata NOP
  1703                           
  1704                           ;usart.c: 221:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1705  001140  5061               	movf	_dataCounter^0,w,c
  1706  001142  0D04               	mullw	4
  1707  001144  0EC6               	movlw	low _dataSequence
  1708  001146  24F3               	addwf	243,w,c
  1709  001148  6ED9               	movwf	fsr2l,c
  1710  00114A  0E00               	movlw	high _dataSequence
  1711  00114C  20F4               	addwfc	prodh,w,c
  1712  00114E  6EDA               	movwf	fsr2h,c
  1713  001150  C044  FFDF         	movff	_receivedMex+1,indf2
  1714                           
  1715                           ;usart.c: 222:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  1716  001154  5061               	movf	_dataCounter^0,w,c
  1717  001156  0D04               	mullw	4
  1718  001158  0EC7               	movlw	low (_dataSequence+1)
  1719  00115A  24F3               	addwf	243,w,c
  1720  00115C  6ED9               	movwf	fsr2l,c
  1721  00115E  0E00               	movlw	high (_dataSequence+1)
  1722  001160  20F4               	addwfc	prodh,w,c
  1723  001162  6EDA               	movwf	fsr2h,c
  1724  001164  5045               	movf	(_receivedMex+2)^0,w,c
  1725  001166  0D05               	mullw	5
  1726  001168  CFF3 FFDF          	movff	prodl,indf2
  1727                           
  1728                           ;usart.c: 223:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  1729  00116C  5061               	movf	_dataCounter^0,w,c
  1730  00116E  0D04               	mullw	4
  1731  001170  0EC8               	movlw	low (_dataSequence+2)
  1732  001172  24F3               	addwf	243,w,c
  1733  001174  6ED9               	movwf	fsr2l,c
  1734  001176  0E00               	movlw	high (_dataSequence+2)
  1735  001178  20F4               	addwfc	prodh,w,c
  1736  00117A  6EDA               	movwf	fsr2h,c
  1737  00117C  5046               	movf	(_receivedMex+3)^0,w,c
  1738  00117E  0D05               	mullw	5
  1739  001180  CFF3 FFDF          	movff	prodl,indf2
  1740                           
  1741                           ;usart.c: 224:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1742  001184  5061               	movf	_dataCounter^0,w,c
  1743  001186  0D04               	mullw	4
  1744  001188  0EC9               	movlw	low (_dataSequence+3)
  1745  00118A  24F3               	addwf	243,w,c
  1746  00118C  6ED9               	movwf	fsr2l,c
  1747  00118E  0E00               	movlw	high (_dataSequence+3)
  1748  001190  20F4               	addwfc	prodh,w,c
  1749  001192  6EDA               	movwf	fsr2h,c
  1750  001194  C047  FFDF         	movff	_receivedMex+4,indf2
  1751                           
  1752                           ;usart.c: 227:                 if((dataSequence[dataCounter].posX > maxX || dataSequence
      +                          [dataCounter].posY > maxY) &&
  1753  001198  5061               	movf	_dataCounter^0,w,c
  1754  00119A  0D04               	mullw	4
  1755  00119C  0EC7               	movlw	low (_dataSequence+1)
  1756  00119E  24F3               	addwf	243,w,c
  1757  0011A0  6ED9               	movwf	fsr2l,c
  1758  0011A2  0E00               	movlw	high (_dataSequence+1)
  1759  0011A4  20F4               	addwfc	prodh,w,c
  1760  0011A6  6EDA               	movwf	fsr2h,c
  1761  0011A8  0E66               	movlw	102
  1762  0011AA  60DF               	cpfslt	indf2,c
  1763  0011AC  EFDA  F008         	goto	u3991
  1764  0011B0  EFDD  F008         	goto	u3990
  1765  0011B4                     u3991:
  1766  0011B4  FFFF               	dw	65535	; assembler added errata NOP
  1767  0011B6  EFEF  F008         	goto	l4476
  1768  0011BA                     u3990:
  1769  0011BA  FFFF               	dw	65535	; assembler added errata NOP
  1770  0011BC  5061               	movf	_dataCounter^0,w,c
  1771  0011BE  0D04               	mullw	4
  1772  0011C0  0EC8               	movlw	low (_dataSequence+2)
  1773  0011C2  24F3               	addwf	243,w,c
  1774  0011C4  6ED9               	movwf	fsr2l,c
  1775  0011C6  0E00               	movlw	high (_dataSequence+2)
  1776  0011C8  20F4               	addwfc	prodh,w,c
  1777  0011CA  6EDA               	movwf	fsr2h,c
  1778  0011CC  0E65               	movlw	101
  1779  0011CE  64DF               	cpfsgt	indf2,c
  1780  0011D0  EFEC  F008         	goto	u4001
  1781  0011D4  EFEF  F008         	goto	u4000
  1782  0011D8                     u4001:
  1783  0011D8  FFFF               	dw	65535	; assembler added errata NOP
  1784  0011DA  EF07  F009         	goto	l4480
  1785  0011DE                     u4000:
  1786  0011DE                     l4476:
  1787  0011DE  FFFF               	dw	65535	; assembler added errata NOP
  1788  0011E0  5061               	movf	_dataCounter^0,w,c
  1789  0011E2  0D04               	mullw	4
  1790  0011E4  0EC6               	movlw	low _dataSequence
  1791  0011E6  24F3               	addwf	243,w,c
  1792  0011E8  6ED9               	movwf	fsr2l,c
  1793  0011EA  0E00               	movlw	high _dataSequence
  1794  0011EC  20F4               	addwfc	prodh,w,c
  1795  0011EE  6EDA               	movwf	fsr2h,c
  1796  0011F0  28DE               	incf	postinc2,w,c
  1797  0011F2  B4D8               	btfsc	status,2,c
  1798  0011F4  EFFE  F008         	goto	u4011
  1799  0011F8  EF01  F009         	goto	u4010
  1800  0011FC                     u4011:
  1801  0011FC  FFFF               	dw	65535	; assembler added errata NOP
  1802  0011FE  EF07  F009         	goto	l4480
  1803  001202                     u4010:
  1804  001202  FFFF               	dw	65535	; assembler added errata NOP
  1805  001204                     
  1806                           ;usart.c: 228:                         dataSequence[dataCounter].feederLine != 0xFF){;us
      +                          art.c: 229:                     printError(5);
  1807  001204  0E05               	movlw	5
  1808  001206  ECEE  F00D         	call	_printError
  1809                           
  1810                           ;usart.c: 230:                 }else{
  1811  00120A  EF7F  F009         	goto	l4510
  1812  00120E                     l4480:
  1813  00120E  FFFF               	dw	65535	; assembler added errata NOP
  1814                           
  1815                           ;usart.c: 231:                     dataCounter++;
  1816  001210  2A61               	incf	_dataCounter^0,f,c
  1817  001212  EF7F  F009         	goto	l4510
  1818  001216                     l592:
  1819  001216  FFFF               	dw	65535	; assembler added errata NOP
  1820                           
  1821                           ;usart.c: 236:                 newSequenceData.L = receivedMex[1];
  1822  001218  C044  F0DA         	movff	_receivedMex+1,_newSequenceData
  1823                           
  1824                           ;usart.c: 237:                 newSequenceData.W = receivedMex[2];
  1825  00121C  C045  F0DB         	movff	_receivedMex+2,_newSequenceData+1
  1826  001220                     
  1827                           ;usart.c: 238:                 newSequenceData.init_posX = receivedMex[3] * 5;
  1828  001220  5046               	movf	(_receivedMex+3)^0,w,c
  1829  001222  0D05               	mullw	5
  1830  001224  CFF3 F0DC          	movff	prodl,_newSequenceData+2
  1831                           
  1832                           ;usart.c: 239:                 newSequenceData.init_posY = receivedMex[4] * 5;
  1833  001228  5047               	movf	(_receivedMex+4)^0,w,c
  1834  00122A  0D05               	mullw	5
  1835  00122C  CFF3 F0DD          	movff	prodl,_newSequenceData+3
  1836  001230                     
  1837                           ;usart.c: 240:                 newSequenceData.init_rot = receivedMex[5];
  1838  001230  C048  F0DE         	movff	_receivedMex+5,_newSequenceData+4
  1839                           
  1840                           ;usart.c: 241:                 newSequenceData.end_posX = receivedMex[6] * 5;
  1841  001234  5049               	movf	(_receivedMex+6)^0,w,c
  1842  001236  0D05               	mullw	5
  1843  001238  CFF3 F0DF          	movff	prodl,_newSequenceData+5
  1844                           
  1845                           ;usart.c: 242:                 newSequenceData.end_posY = receivedMex[7] * 5;
  1846  00123C  504A               	movf	(_receivedMex+7)^0,w,c
  1847  00123E  0D05               	mullw	5
  1848  001240  CFF3 F0E0          	movff	prodl,_newSequenceData+6
  1849  001244                     
  1850                           ;usart.c: 243:                 newSequenceData.end_rot = receivedMex[8];
  1851  001244  C04B  F0E1         	movff	_receivedMex+8,_newSequenceData+7
  1852  001248                     
  1853                           ;usart.c: 246:                 if(newSequenceData.init_posX > maxFeedX ||
  1854  001248  0E1F               	movlw	31
  1855  00124A  0100               	movlb	0	; () banked
  1856  00124C  61DC               	cpfslt	(_newSequenceData+2)& (0+255),b
  1857  00124E  EF2B  F009         	goto	u4021
  1858  001252  EF2E  F009         	goto	u4020
  1859  001256                     u4021:
  1860  001256  FFFF               	dw	65535	; assembler added errata NOP
  1861  001258  EF4C  F009         	goto	l4496
  1862  00125C                     u4020:
  1863  00125C  FFFF               	dw	65535	; assembler added errata NOP
  1864  00125E                     
  1865                           ; BSR set to: 0
  1866  00125E  0E66               	movlw	102
  1867  001260  61DF               	cpfslt	(_newSequenceData+5)& (0+255),b
  1868  001262  EF35  F009         	goto	u4031
  1869  001266  EF38  F009         	goto	u4030
  1870  00126A                     u4031:
  1871  00126A  FFFF               	dw	65535	; assembler added errata NOP
  1872  00126C  EF4C  F009         	goto	l4496
  1873  001270                     u4030:
  1874  001270  FFFF               	dw	65535	; assembler added errata NOP
  1875  001272                     
  1876                           ; BSR set to: 0
  1877  001272  0E65               	movlw	101
  1878  001274  61DD               	cpfslt	(_newSequenceData+3)& (0+255),b
  1879  001276  EF3F  F009         	goto	u4041
  1880  00127A  EF42  F009         	goto	u4040
  1881  00127E                     u4041:
  1882  00127E  FFFF               	dw	65535	; assembler added errata NOP
  1883  001280  EF4C  F009         	goto	l4496
  1884  001284                     u4040:
  1885  001284  FFFF               	dw	65535	; assembler added errata NOP
  1886  001286                     
  1887                           ; BSR set to: 0
  1888  001286  0E65               	movlw	101
  1889  001288  65E0               	cpfsgt	(_newSequenceData+6)& (0+255),b
  1890  00128A  EF49  F009         	goto	u4051
  1891  00128E  EF4C  F009         	goto	u4050
  1892  001292                     u4051:
  1893  001292  FFFF               	dw	65535	; assembler added errata NOP
  1894  001294  EF54  F009         	goto	l4500
  1895  001298                     u4050:
  1896  001298                     l4496:
  1897  001298  FFFF               	dw	65535	; assembler added errata NOP
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;usart.c: 249:                         newSequenceData.end_posY > maxY){;usart.c: 250:  
      +                                             _newSequence = 0;
  1901  00129A  0E00               	movlw	0
  1902  00129C  6E5F               	movwf	__newSequence^0,c
  1903  00129E                     
  1904                           ; BSR set to: 0
  1905                           ;usart.c: 251:                     printError(5);
  1906  00129E  0E05               	movlw	5
  1907  0012A0  ECEE  F00D         	call	_printError
  1908                           
  1909                           ;usart.c: 252:                 }else{
  1910  0012A4  EF7F  F009         	goto	l4510
  1911  0012A8                     l4500:
  1912  0012A8  FFFF               	dw	65535	; assembler added errata NOP
  1913                           
  1914                           ; BSR set to: 0
  1915                           ;usart.c: 253:                     _newSequence = 1;
  1916  0012AA  0E01               	movlw	1
  1917  0012AC  6E5F               	movwf	__newSequence^0,c
  1918  0012AE  EF7F  F009         	goto	l4510
  1919  0012B2                     l4502:
  1920  0012B2  FFFF               	dw	65535	; assembler added errata NOP
  1921                           
  1922                           ;usart.c: 258:                 _fatalError = 1;
  1923  0012B4  0E01               	movlw	1
  1924  0012B6  6E60               	movwf	__fatalError^0,c
  1925                           
  1926                           ;usart.c: 259:                 break;
  1927  0012B8  EF7F  F009         	goto	l4510
  1928  0012BC                     l4504:
  1929  0012BC  FFFF               	dw	65535	; assembler added errata NOP
  1930                           
  1931                           ;usart.c: 262:                 printError(8);
  1932  0012BE  0E08               	movlw	8
  1933  0012C0  ECEE  F00D         	call	_printError
  1934                           
  1935                           ;usart.c: 263:                 break;
  1936  0012C4  EF7F  F009         	goto	l4510
  1937  0012C8                     l4508:
  1938  0012C8  FFFF               	dw	65535	; assembler added errata NOP
  1939  0012CA  5043               	movf	_receivedMex^0,w,c
  1940  0012CC  6E19               	movwf	??_storeData^0,c
  1941  0012CE  6A1A               	clrf	(??_storeData+1)^0,c
  1942                           
  1943                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1944                           ; Switch size 1, requested type "simple"
  1945                           ; Number of cases is 1, Range of values is 0 to 0
  1946                           ; switch strategies available:
  1947                           ; Name         Instructions Cycles
  1948                           ; simple_byte            4     3 (average)
  1949                           ;	Chosen strategy is simple_byte
  1950  0012D0  501A               	movf	(??_storeData+1)^0,w,c
  1951  0012D2  0A00               	xorlw	0	; case 0
  1952  0012D4  B4D8               	btfsc	status,2,c
  1953  0012D6  EF6F  F009         	goto	l4832
  1954  0012DA  EF5E  F009         	goto	l4504
  1955  0012DE                     l4832:
  1956  0012DE  FFFF               	dw	65535	; assembler added errata NOP
  1957                           
  1958                           ; Switch size 1, requested type "simple"
  1959                           ; Number of cases is 3, Range of values is 1 to 3
  1960                           ; switch strategies available:
  1961                           ; Name         Instructions Cycles
  1962                           ; simple_byte           10     6 (average)
  1963                           ;	Chosen strategy is simple_byte
  1964  0012E0  5019               	movf	??_storeData^0,w,c
  1965  0012E2  0A01               	xorlw	1	; case 1
  1966  0012E4  B4D8               	btfsc	status,2,c
  1967  0012E6  EF9F  F008         	goto	l4472
  1968  0012EA  0A03               	xorlw	3	; case 2
  1969  0012EC  B4D8               	btfsc	status,2,c
  1970  0012EE  EF0B  F009         	goto	l592
  1971  0012F2  0A01               	xorlw	1	; case 3
  1972  0012F4  B4D8               	btfsc	status,2,c
  1973  0012F6  EF59  F009         	goto	l4502
  1974  0012FA  EF5E  F009         	goto	l4504
  1975  0012FE                     l4510:
  1976  0012FE  FFFF               	dw	65535	; assembler added errata NOP
  1977                           
  1978                           ;usart.c: 267:         receivedMex[0] = 0;
  1979  001300  0E00               	movlw	0
  1980  001302  6E43               	movwf	_receivedMex^0,c
  1981  001304                     l599:
  1982  001304  FFFF               	dw	65535	; assembler added errata NOP
  1983  001306  0012               	return		;funcret
  1984  001308  FFFF               	dw	65535	; errata NOP
  1985  00130A                     __end_of_storeData:
  1986                           	callstack 0
  1987                           
  1988 ;; *************** function _printError *****************
  1989 ;; Defined at:
  1990 ;;		line 130 in file "usart.c"
  1991 ;; Parameters:    Size  Location     Type
  1992 ;;  errCode         1    wreg     unsigned char 
  1993 ;; Auto vars:     Size  Location     Type
  1994 ;;  errCode         1   23[COMRAM] unsigned char 
  1995 ;; Return value:  Size  Location     Type
  1996 ;;                  1    wreg      void 
  1997 ;; Registers used:
  1998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1999 ;; Tracked objects:
  2000 ;;		On entry : 0/0
  2001 ;;		On exit  : 0/0
  2002 ;;		Unchanged: 0/0
  2003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2004 ;;      Params:         0       0       0       0       0       0       0
  2005 ;;      Locals:         1       0       0       0       0       0       0
  2006 ;;      Temps:          2       0       0       0       0       0       0
  2007 ;;      Totals:         3       0       0       0       0       0       0
  2008 ;;Total ram usage:        3 bytes
  2009 ;; Hardware stack levels used:    1
  2010 ;; Hardware stack levels required when called:    5
  2011 ;; This function calls:
  2012 ;;		_uartTx
  2013 ;; This function is called by:
  2014 ;;		_main
  2015 ;;		_storeData
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text6
  2020  001BDC                     __ptext6:
  2021                           	callstack 0
  2022  001BDC                     _printError:
  2023                           	callstack 0
  2024  001BDC  FFFF               	dw	65535	; assembler added errata NOP
  2025                           
  2026                           ;incstack = 0
  2027                           ;printError@errCode stored from wreg
  2028  001BDE  6E18               	movwf	printError@errCode^0,c
  2029  001BE0                     
  2030                           ;usart.c: 132:     switch(errCode){
  2031  001BE0  EF4A  F00E         	goto	l4310
  2032  001BE4                     l4292:
  2033  001BE4  FFFF               	dw	65535	; assembler added errata NOP
  2034                           
  2035                           ;usart.c: 134:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  2036  001BE6  0E90               	movlw	low _errString_Feed
  2037  001BE8  6E12               	movwf	uartTx@ptr^0,c
  2038  001BEA  0E00               	movlw	high _errString_Feed
  2039  001BEC  6E13               	movwf	(uartTx@ptr+1)^0,c
  2040  001BEE  0E1E               	movlw	30
  2041  001BF0  6E14               	movwf	uartTx@length^0,c
  2042  001BF2  ECE7  F011         	call	_uartTx	;wreg free
  2043                           
  2044                           ;usart.c: 135:             break;
  2045  001BF6  EF79  F00E         	goto	l566
  2046  001BFA                     l4294:
  2047  001BFA  FFFF               	dw	65535	; assembler added errata NOP
  2048                           
  2049                           ;usart.c: 137:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  2050  001BFC  0E5E               	movlw	low _errString_ZEND
  2051  001BFE  6E12               	movwf	uartTx@ptr^0,c
  2052  001C00  0E01               	movlw	high _errString_ZEND
  2053  001C02  6E13               	movwf	(uartTx@ptr+1)^0,c
  2054  001C04  0E29               	movlw	41
  2055  001C06  6E14               	movwf	uartTx@length^0,c
  2056  001C08  ECE7  F011         	call	_uartTx	;wreg free
  2057                           
  2058                           ;usart.c: 138:             break;
  2059  001C0C  EF79  F00E         	goto	l566
  2060  001C10                     l4296:
  2061  001C10  FFFF               	dw	65535	; assembler added errata NOP
  2062                           
  2063                           ;usart.c: 140:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  2064  001C12  0E87               	movlw	low _errString_Reset
  2065  001C14  6E12               	movwf	uartTx@ptr^0,c
  2066  001C16  0E01               	movlw	high _errString_Reset
  2067  001C18  6E13               	movwf	(uartTx@ptr+1)^0,c
  2068  001C1A  0E28               	movlw	40
  2069  001C1C  6E14               	movwf	uartTx@length^0,c
  2070  001C1E  ECE7  F011         	call	_uartTx	;wreg free
  2071                           
  2072                           ;usart.c: 141:             break;
  2073  001C22  EF79  F00E         	goto	l566
  2074  001C26                     l4298:
  2075  001C26  FFFF               	dw	65535	; assembler added errata NOP
  2076                           
  2077                           ;usart.c: 143:             uartTx(&errString_Point[0], sizeof(errString_Point));
  2078  001C28  0E35               	movlw	low _errString_Point
  2079  001C2A  6E12               	movwf	uartTx@ptr^0,c
  2080  001C2C  0E01               	movlw	high _errString_Point
  2081  001C2E  6E13               	movwf	(uartTx@ptr+1)^0,c
  2082  001C30  0E29               	movlw	41
  2083  001C32  6E14               	movwf	uartTx@length^0,c
  2084  001C34  ECE7  F011         	call	_uartTx	;wreg free
  2085                           
  2086                           ;usart.c: 144:             break;
  2087  001C38  EF79  F00E         	goto	l566
  2088  001C3C                     l4300:
  2089  001C3C  FFFF               	dw	65535	; assembler added errata NOP
  2090                           
  2091                           ;usart.c: 146:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2092  001C3E  0ED6               	movlw	low _errString_Bound
  2093  001C40  6E12               	movwf	uartTx@ptr^0,c
  2094  001C42  0E01               	movlw	high _errString_Bound
  2095  001C44  6E13               	movwf	(uartTx@ptr+1)^0,c
  2096  001C46  0E21               	movlw	33
  2097  001C48  6E14               	movwf	uartTx@length^0,c
  2098  001C4A  ECE7  F011         	call	_uartTx	;wreg free
  2099                           
  2100                           ;usart.c: 147:             break;
  2101  001C4E  EF79  F00E         	goto	l566
  2102  001C52                     l4302:
  2103  001C52  FFFF               	dw	65535	; assembler added errata NOP
  2104                           
  2105                           ;usart.c: 149:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2106  001C54  0E00               	movlw	low _errString_PointZ
  2107  001C56  6E12               	movwf	uartTx@ptr^0,c
  2108  001C58  0E01               	movlw	high _errString_PointZ
  2109  001C5A  6E13               	movwf	(uartTx@ptr+1)^0,c
  2110  001C5C  0E35               	movlw	53
  2111  001C5E  6E14               	movwf	uartTx@length^0,c
  2112  001C60  ECE7  F011         	call	_uartTx	;wreg free
  2113                           
  2114                           ;usart.c: 150:             break;
  2115  001C64  EF79  F00E         	goto	l566
  2116  001C68                     l4304:
  2117  001C68  FFFF               	dw	65535	; assembler added errata NOP
  2118                           
  2119                           ;usart.c: 152:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2120  001C6A  0EAF               	movlw	low _errString_Fatal
  2121  001C6C  6E12               	movwf	uartTx@ptr^0,c
  2122  001C6E  0E01               	movlw	high _errString_Fatal
  2123  001C70  6E13               	movwf	(uartTx@ptr+1)^0,c
  2124  001C72  0E27               	movlw	39
  2125  001C74  6E14               	movwf	uartTx@length^0,c
  2126  001C76  ECE7  F011         	call	_uartTx	;wreg free
  2127                           
  2128                           ;usart.c: 153:             break;
  2129  001C7A  EF79  F00E         	goto	l566
  2130  001C7E                     l4306:
  2131  001C7E  FFFF               	dw	65535	; assembler added errata NOP
  2132                           
  2133                           ;usart.c: 155:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2134  001C80  0EAE               	movlw	low _errString_Command
  2135  001C82  6E12               	movwf	uartTx@ptr^0,c
  2136  001C84  0E00               	movlw	high _errString_Command
  2137  001C86  6E13               	movwf	(uartTx@ptr+1)^0,c
  2138  001C88  0E18               	movlw	24
  2139  001C8A  6E14               	movwf	uartTx@length^0,c
  2140  001C8C  ECE7  F011         	call	_uartTx	;wreg free
  2141                           
  2142                           ;usart.c: 156:             break;
  2143  001C90  EF79  F00E         	goto	l566
  2144  001C94                     l4310:
  2145  001C94  FFFF               	dw	65535	; assembler added errata NOP
  2146  001C96  5018               	movf	printError@errCode^0,w,c
  2147  001C98  6E16               	movwf	??_printError^0,c
  2148  001C9A  6A17               	clrf	(??_printError+1)^0,c
  2149                           
  2150                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2151                           ; Switch size 1, requested type "simple"
  2152                           ; Number of cases is 1, Range of values is 0 to 0
  2153                           ; switch strategies available:
  2154                           ; Name         Instructions Cycles
  2155                           ; simple_byte            4     3 (average)
  2156                           ;	Chosen strategy is simple_byte
  2157  001C9C  5017               	movf	(??_printError+1)^0,w,c
  2158  001C9E  0A00               	xorlw	0	; case 0
  2159  001CA0  B4D8               	btfsc	status,2,c
  2160  001CA2  EF55  F00E         	goto	l4834
  2161  001CA6  EF79  F00E         	goto	l566
  2162  001CAA                     l4834:
  2163  001CAA  FFFF               	dw	65535	; assembler added errata NOP
  2164                           
  2165                           ; Switch size 1, requested type "simple"
  2166                           ; Number of cases is 8, Range of values is 1 to 8
  2167                           ; switch strategies available:
  2168                           ; Name         Instructions Cycles
  2169                           ; simple_byte           25    13 (average)
  2170                           ;	Chosen strategy is simple_byte
  2171  001CAC  5016               	movf	??_printError^0,w,c
  2172  001CAE  0A01               	xorlw	1	; case 1
  2173  001CB0  B4D8               	btfsc	status,2,c
  2174  001CB2  EFF2  F00D         	goto	l4292
  2175  001CB6  0A03               	xorlw	3	; case 2
  2176  001CB8  B4D8               	btfsc	status,2,c
  2177  001CBA  EFFD  F00D         	goto	l4294
  2178  001CBE  0A01               	xorlw	1	; case 3
  2179  001CC0  B4D8               	btfsc	status,2,c
  2180  001CC2  EF08  F00E         	goto	l4296
  2181  001CC6  0A07               	xorlw	7	; case 4
  2182  001CC8  B4D8               	btfsc	status,2,c
  2183  001CCA  EF13  F00E         	goto	l4298
  2184  001CCE  0A01               	xorlw	1	; case 5
  2185  001CD0  B4D8               	btfsc	status,2,c
  2186  001CD2  EF1E  F00E         	goto	l4300
  2187  001CD6  0A03               	xorlw	3	; case 6
  2188  001CD8  B4D8               	btfsc	status,2,c
  2189  001CDA  EF29  F00E         	goto	l4302
  2190  001CDE  0A01               	xorlw	1	; case 7
  2191  001CE0  B4D8               	btfsc	status,2,c
  2192  001CE2  EF34  F00E         	goto	l4304
  2193  001CE6  0A0F               	xorlw	15	; case 8
  2194  001CE8  B4D8               	btfsc	status,2,c
  2195  001CEA  EF3F  F00E         	goto	l4306
  2196  001CEE  EF79  F00E         	goto	l566
  2197  001CF2                     l566:
  2198  001CF2  FFFF               	dw	65535	; assembler added errata NOP
  2199  001CF4  0012               	return		;funcret
  2200  001CF6  FFFF               	dw	65535	; errata NOP
  2201  001CF8                     __end_of_printError:
  2202                           	callstack 0
  2203                           
  2204 ;; *************** function _uartTx *****************
  2205 ;; Defined at:
  2206 ;;		line 167 in file "usart.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2209 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2210 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2211 ;;  length          1   19[COMRAM] unsigned char 
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;  i               1   20[COMRAM] unsigned char 
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  1    wreg      void 
  2216 ;; Registers used:
  2217 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2218 ;; Tracked objects:
  2219 ;;		On entry : 0/0
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2223 ;;      Params:         3       0       0       0       0       0       0
  2224 ;;      Locals:         1       0       0       0       0       0       0
  2225 ;;      Temps:          0       0       0       0       0       0       0
  2226 ;;      Totals:         4       0       0       0       0       0       0
  2227 ;;Total ram usage:        4 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    4
  2230 ;; This function calls:
  2231 ;;		Nothing
  2232 ;; This function is called by:
  2233 ;;		_printError
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           	psect	text7
  2238  0023CE                     __ptext7:
  2239                           	callstack 0
  2240  0023CE                     _uartTx:
  2241                           	callstack 0
  2242  0023CE  FFFF               	dw	65535	; assembler added errata NOP
  2243  0023D0                     
  2244                           ;usart.c: 167: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 168: {;usa
      +                          rt.c: 170:     for(char i = 1; i < length; i++){
  2245  0023D0  0E01               	movlw	1
  2246  0023D2  6E15               	movwf	uartTx@i^0,c
  2247  0023D4  EF00  F012         	goto	l3796
  2248  0023D8                     l3792:
  2249  0023D8  FFFF               	dw	65535	; assembler added errata NOP
  2250                           
  2251                           ;usart.c: 172:         TXREG = *ptr;
  2252  0023DA  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2253  0023DE  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2254  0023E2  50DF               	movf	indf2,w,c
  2255  0023E4  6EAD               	movwf	173,c	;volatile
  2256  0023E6                     l571:
  2257  0023E6  FFFF               	dw	65535	; assembler added errata NOP
  2258  0023E8  A2AC               	btfss	172,1,c	;volatile
  2259  0023EA  EFF9  F011         	goto	u2961
  2260  0023EE  EFFC  F011         	goto	u2960
  2261  0023F2                     u2961:
  2262  0023F2  FFFF               	dw	65535	; assembler added errata NOP
  2263  0023F4  EFF3  F011         	goto	l571
  2264  0023F8                     u2960:
  2265  0023F8  FFFF               	dw	65535	; assembler added errata NOP
  2266  0023FA                     
  2267                           ;usart.c: 176:         ptr++;
  2268  0023FA  4A12               	infsnz	uartTx@ptr^0,f,c
  2269  0023FC  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2270                           
  2271                           ;usart.c: 177:     }
  2272  0023FE  2A15               	incf	uartTx@i^0,f,c
  2273  002400                     l3796:
  2274  002400  FFFF               	dw	65535	; assembler added errata NOP
  2275  002402  5014               	movf	uartTx@length^0,w,c
  2276  002404  5C15               	subwf	uartTx@i^0,w,c
  2277  002406  A0D8               	btfss	status,0,c
  2278  002408  EF08  F012         	goto	u2971
  2279  00240C  EF0B  F012         	goto	u2970
  2280  002410                     u2971:
  2281  002410  FFFF               	dw	65535	; assembler added errata NOP
  2282  002412  EFEC  F011         	goto	l3792
  2283  002416                     u2970:
  2284  002416  FFFF               	dw	65535	; assembler added errata NOP
  2285  002418  0012               	return		;funcret
  2286  00241A  FFFF               	dw	65535	; errata NOP
  2287  00241C                     __end_of_uartTx:
  2288                           	callstack 0
  2289                           
  2290 ;; *************** function _shiftData *****************
  2291 ;; Defined at:
  2292 ;;		line 100 in file "usart.c"
  2293 ;; Parameters:    Size  Location     Type
  2294 ;;		None
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;  i               1   19[COMRAM] unsigned char 
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  1    wreg      void 
  2299 ;; Registers used:
  2300 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2306 ;;      Params:         0       0       0       0       0       0       0
  2307 ;;      Locals:         1       0       0       0       0       0       0
  2308 ;;      Temps:          2       0       0       0       0       0       0
  2309 ;;      Totals:         3       0       0       0       0       0       0
  2310 ;;Total ram usage:        3 bytes
  2311 ;; Hardware stack levels used:    1
  2312 ;; Hardware stack levels required when called:    4
  2313 ;; This function calls:
  2314 ;;		Nothing
  2315 ;; This function is called by:
  2316 ;;		_main
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text8
  2321  00236E                     __ptext8:
  2322                           	callstack 0
  2323  00236E                     _shiftData:
  2324                           	callstack 0
  2325  00236E  FFFF               	dw	65535	; assembler added errata NOP
  2326  002370                     
  2327                           ;usart.c: 101:     char i;;usart.c: 103:     for(i = 0; i < 4; i++){
  2328  002370  0E00               	movlw	0
  2329  002372  6E14               	movwf	shiftData@i^0,c
  2330  002374                     l4630:
  2331  002374  FFFF               	dw	65535	; assembler added errata NOP
  2332                           
  2333                           ;usart.c: 104:         dataSequence[i] = dataSequence[i+1];
  2334  002376  5014               	movf	shiftData@i^0,w,c
  2335  002378  6E12               	movwf	??_shiftData^0,c
  2336  00237A  6A13               	clrf	(??_shiftData+1)^0,c
  2337  00237C  90D8               	bcf	status,0,c
  2338  00237E  3612               	rlcf	??_shiftData^0,f,c
  2339  002380  3613               	rlcf	(??_shiftData+1)^0,f,c
  2340  002382  90D8               	bcf	status,0,c
  2341  002384  3612               	rlcf	??_shiftData^0,f,c
  2342  002386  3613               	rlcf	(??_shiftData+1)^0,f,c
  2343  002388  0ECA               	movlw	low (_dataSequence+4)
  2344  00238A  2412               	addwf	??_shiftData^0,w,c
  2345  00238C  6ED9               	movwf	fsr2l,c
  2346  00238E  0E00               	movlw	high (_dataSequence+4)
  2347  002390  2013               	addwfc	(??_shiftData+1)^0,w,c
  2348  002392  6EDA               	movwf	fsr2h,c
  2349  002394  5014               	movf	shiftData@i^0,w,c
  2350  002396  0D04               	mullw	4
  2351  002398  0EC6               	movlw	low _dataSequence
  2352  00239A  24F3               	addwf	243,w,c
  2353  00239C  6EE1               	movwf	fsr1l,c
  2354  00239E  0E00               	movlw	high _dataSequence
  2355  0023A0  20F4               	addwfc	prodh,w,c
  2356  0023A2  6EE2               	movwf	fsr1h,c
  2357  0023A4  CFDE FFE6          	movff	postinc2,postinc1
  2358  0023A8  CFDE FFE6          	movff	postinc2,postinc1
  2359  0023AC  CFDE FFE6          	movff	postinc2,postinc1
  2360  0023B0  CFDE FFE6          	movff	postinc2,postinc1
  2361  0023B4                     
  2362                           ;usart.c: 105:     }
  2363  0023B4  2A14               	incf	shiftData@i^0,f,c
  2364  0023B6  0E03               	movlw	3
  2365  0023B8  6414               	cpfsgt	shiftData@i^0,c
  2366  0023BA  EFE1  F011         	goto	u4121
  2367  0023BE  EFE4  F011         	goto	u4120
  2368  0023C2                     u4121:
  2369  0023C2  FFFF               	dw	65535	; assembler added errata NOP
  2370  0023C4  EFBA  F011         	goto	l4630
  2371  0023C8                     u4120:
  2372  0023C8  FFFF               	dw	65535	; assembler added errata NOP
  2373  0023CA  0012               	return		;funcret
  2374  0023CC  FFFF               	dw	65535	; errata NOP
  2375  0023CE                     __end_of_shiftData:
  2376                           	callstack 0
  2377                           
  2378 ;; *************** function _resetPosition *****************
  2379 ;; Defined at:
  2380 ;;		line 162 in file "motors.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;		None
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2385 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2386 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2387 ;; Return value:  Size  Location     Type
  2388 ;;                  1    wreg      unsigned char 
  2389 ;; Registers used:
  2390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2396 ;;      Params:         0       0       0       0       0       0       0
  2397 ;;      Locals:         3       0       0       0       0       0       0
  2398 ;;      Temps:          0       0       0       0       0       0       0
  2399 ;;      Totals:         3       0       0       0       0       0       0
  2400 ;;Total ram usage:        3 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    5
  2403 ;; This function calls:
  2404 ;;		_resetStep
  2405 ;;		_resetTM0_Temp
  2406 ;;		_resetTM2_Temp
  2407 ;;		_stepMade
  2408 ;; This function is called by:
  2409 ;;		_main
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           	psect	text9
  2414  00178A                     __ptext9:
  2415                           	callstack 0
  2416  00178A                     _resetPosition:
  2417                           	callstack 0
  2418  00178A  FFFF               	dw	65535	; assembler added errata NOP
  2419  00178C                     
  2420                           ;motors.c: 182:     motCounter[0][1] = -1;
  2421  00178C  6868               	setf	(_motCounter+1)^0,c
  2422                           
  2423                           ;motors.c: 183:     motCounter[1][1] = -1;
  2424  00178E  686A               	setf	(_motCounter+3)^0,c
  2425                           
  2426                           ;motors.c: 184:     motCounter[2][1] = -1;
  2427  001790  686C               	setf	(_motCounter+5)^0,c
  2428  001792                     
  2429                           ;motors.c: 189:     unsigned char keepMovingX = 1;
  2430  001792  0E01               	movlw	1
  2431  001794  6E15               	movwf	resetPosition@keepMovingX^0,c
  2432                           
  2433                           ;motors.c: 190:     unsigned char keepMovingY = 1;
  2434  001796  0E01               	movlw	1
  2435  001798  6E16               	movwf	resetPosition@keepMovingY^0,c
  2436                           
  2437                           ;motors.c: 191:     unsigned char keepMovingZ = 1;
  2438  00179A  0E01               	movlw	1
  2439  00179C  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2440  00179E                     
  2441                           ;motors.c: 194:     T2CONbits.TMR2ON = 1;
  2442  00179E  84CA               	bsf	202,2,c	;volatile
  2443                           
  2444                           ;motors.c: 196:     tm0Error = 0;
  2445  0017A0  0E00               	movlw	0
  2446  0017A2  6E5A               	movwf	(_tm0Error+1)^0,c
  2447  0017A4  0E00               	movlw	0
  2448  0017A6  6E59               	movwf	_tm0Error^0,c
  2449                           
  2450                           ;motors.c: 197:     tm0Limit = 200;
  2451  0017A8  0EC8               	movlw	200
  2452  0017AA  6E66               	movwf	_tm0Limit^0,c
  2453  0017AC                     
  2454                           ;motors.c: 198:     T0CONbits.TMR0ON = 1;
  2455  0017AC  8ED5               	bsf	213,7,c	;volatile
  2456                           
  2457                           ;motors.c: 200:     while(keepMovingX || keepMovingY || keepMovingZ){
  2458  0017AE  EF87  F00C         	goto	l4390
  2459  0017B2                     l4348:
  2460  0017B2  FFFF               	dw	65535	; assembler added errata NOP
  2461                           
  2462                           ;motors.c: 202:         resetStep();
  2463  0017B4  EC5E  F013         	call	_resetStep	;wreg free
  2464  0017B8                     
  2465                           ;motors.c: 205:         if(tm0Error){
  2466  0017B8  5059               	movf	_tm0Error^0,w,c
  2467  0017BA  105A               	iorwf	(_tm0Error+1)^0,w,c
  2468  0017BC  B4D8               	btfsc	status,2,c
  2469  0017BE  EFE3  F00B         	goto	u3811
  2470  0017C2  EFE6  F00B         	goto	u3810
  2471  0017C6                     u3811:
  2472  0017C6  FFFF               	dw	65535	; assembler added errata NOP
  2473  0017C8  EFED  F00B         	goto	l131
  2474  0017CC                     u3810:
  2475  0017CC  FFFF               	dw	65535	; assembler added errata NOP
  2476  0017CE                     
  2477                           ;motors.c: 213:             tm0Error = 3;
  2478  0017CE  0E00               	movlw	0
  2479  0017D0  6E5A               	movwf	(_tm0Error+1)^0,c
  2480  0017D2  0E03               	movlw	3
  2481  0017D4  6E59               	movwf	_tm0Error^0,c
  2482                           
  2483                           ;motors.c: 214:             break;
  2484  0017D6  EFA5  F00C         	goto	l132
  2485  0017DA                     l131:
  2486  0017DA  FFFF               	dw	65535	; assembler added errata NOP
  2487                           
  2488                           ;motors.c: 221:         if(PORTEbits.RE0 || !keepMovingX){
  2489  0017DC  B084               	btfsc	132,0,c	;volatile
  2490  0017DE  EFF3  F00B         	goto	u3821
  2491  0017E2  EFF6  F00B         	goto	u3820
  2492  0017E6                     u3821:
  2493  0017E6  FFFF               	dw	65535	; assembler added errata NOP
  2494  0017E8  EF00  F00C         	goto	l4356
  2495  0017EC                     u3820:
  2496  0017EC  FFFF               	dw	65535	; assembler added errata NOP
  2497  0017EE  5015               	movf	resetPosition@keepMovingX^0,w,c
  2498  0017F0  A4D8               	btfss	status,2,c
  2499  0017F2  EFFD  F00B         	goto	u3831
  2500  0017F6  EF00  F00C         	goto	u3830
  2501  0017FA                     u3831:
  2502  0017FA  FFFF               	dw	65535	; assembler added errata NOP
  2503  0017FC  EF05  F00C         	goto	l4358
  2504  001800                     u3830:
  2505  001800                     l4356:
  2506  001800  FFFF               	dw	65535	; assembler added errata NOP
  2507                           
  2508                           ;motors.c: 223:             keepMovingX = 0;
  2509  001802  0E00               	movlw	0
  2510  001804  6E15               	movwf	resetPosition@keepMovingX^0,c
  2511                           
  2512                           ;motors.c: 224:         }else{
  2513  001806  EF1C  F00C         	goto	l4364
  2514  00180A                     l4358:
  2515  00180A  FFFF               	dw	65535	; assembler added errata NOP
  2516                           
  2517                           ;motors.c: 230:             motCounter[0][0] += motCounter[0][1];
  2518  00180C  5068               	movf	(_motCounter+1)^0,w,c
  2519  00180E  2667               	addwf	_motCounter^0,f,c
  2520                           
  2521                           ;motors.c: 231:             if(motCounter[0][0] < 0){
  2522  001810  BE67               	btfsc	_motCounter^0,7,c
  2523  001812  EF10  F00C         	goto	u3840
  2524  001816  EF0D  F00C         	goto	u3841
  2525  00181A                     u3841:
  2526  00181A  FFFF               	dw	65535	; assembler added errata NOP
  2527  00181C  EF13  F00C         	goto	l4362
  2528  001820                     u3840:
  2529  001820  FFFF               	dw	65535	; assembler added errata NOP
  2530  001822                     
  2531                           ;motors.c: 232:                 motCounter[0][0] = 3;
  2532  001822  0E03               	movlw	3
  2533  001824  6E67               	movwf	_motCounter^0,c
  2534  001826                     l4362:
  2535  001826  FFFF               	dw	65535	; assembler added errata NOP
  2536                           
  2537                           ;motors.c: 235:             LATA = stepMot1[motCounter[0][0]];
  2538  001828  0E8C               	movlw	low _stepMot1
  2539  00182A  2467               	addwf	_motCounter^0,w,c
  2540  00182C  6ED9               	movwf	fsr2l,c
  2541  00182E  6ADA               	clrf	fsr2h,c
  2542  001830  0E00               	movlw	high _stepMot1
  2543  001832  22DA               	addwfc	fsr2h,f,c
  2544  001834  50DF               	movf	indf2,w,c
  2545  001836  6E89               	movwf	137,c	;volatile
  2546  001838                     l4364:
  2547  001838  FFFF               	dw	65535	; assembler added errata NOP
  2548                           
  2549                           ;motors.c: 240:         if(PORTEbits.RE1 || !keepMovingY){
  2550  00183A  B284               	btfsc	132,1,c	;volatile
  2551  00183C  EF22  F00C         	goto	u3851
  2552  001840  EF25  F00C         	goto	u3850
  2553  001844                     u3851:
  2554  001844  FFFF               	dw	65535	; assembler added errata NOP
  2555  001846  EF2F  F00C         	goto	l4368
  2556  00184A                     u3850:
  2557  00184A  FFFF               	dw	65535	; assembler added errata NOP
  2558  00184C  5016               	movf	resetPosition@keepMovingY^0,w,c
  2559  00184E  A4D8               	btfss	status,2,c
  2560  001850  EF2C  F00C         	goto	u3861
  2561  001854  EF2F  F00C         	goto	u3860
  2562  001858                     u3861:
  2563  001858  FFFF               	dw	65535	; assembler added errata NOP
  2564  00185A  EF34  F00C         	goto	l4370
  2565  00185E                     u3860:
  2566  00185E                     l4368:
  2567  00185E  FFFF               	dw	65535	; assembler added errata NOP
  2568                           
  2569                           ;motors.c: 242:             keepMovingY = 0;
  2570  001860  0E00               	movlw	0
  2571  001862  6E16               	movwf	resetPosition@keepMovingY^0,c
  2572                           
  2573                           ;motors.c: 243:         }else{
  2574  001864  EF4B  F00C         	goto	l4376
  2575  001868                     l4370:
  2576  001868  FFFF               	dw	65535	; assembler added errata NOP
  2577                           
  2578                           ;motors.c: 249:             motCounter[1][0] += motCounter[1][1];
  2579  00186A  506A               	movf	(_motCounter+3)^0,w,c
  2580  00186C  2669               	addwf	(_motCounter+2)^0,f,c
  2581                           
  2582                           ;motors.c: 250:             if(motCounter[1][0] < 0){
  2583  00186E  BE69               	btfsc	(_motCounter+2)^0,7,c
  2584  001870  EF3F  F00C         	goto	u3870
  2585  001874  EF3C  F00C         	goto	u3871
  2586  001878                     u3871:
  2587  001878  FFFF               	dw	65535	; assembler added errata NOP
  2588  00187A  EF42  F00C         	goto	l4374
  2589  00187E                     u3870:
  2590  00187E  FFFF               	dw	65535	; assembler added errata NOP
  2591  001880                     
  2592                           ;motors.c: 251:                 motCounter[1][0] = 3;
  2593  001880  0E03               	movlw	3
  2594  001882  6E69               	movwf	(_motCounter+2)^0,c
  2595  001884                     l4374:
  2596  001884  FFFF               	dw	65535	; assembler added errata NOP
  2597                           
  2598                           ;motors.c: 254:             LATB = stepMot2[motCounter[1][0]];
  2599  001886  0E88               	movlw	low _stepMot2
  2600  001888  2469               	addwf	(_motCounter+2)^0,w,c
  2601  00188A  6ED9               	movwf	fsr2l,c
  2602  00188C  6ADA               	clrf	fsr2h,c
  2603  00188E  0E00               	movlw	high _stepMot2
  2604  001890  22DA               	addwfc	fsr2h,f,c
  2605  001892  50DF               	movf	indf2,w,c
  2606  001894  6E8A               	movwf	138,c	;volatile
  2607  001896                     l4376:
  2608  001896  FFFF               	dw	65535	; assembler added errata NOP
  2609                           
  2610                           ;motors.c: 259:         if(PORTEbits.RE2 || !keepMovingZ){
  2611  001898  B484               	btfsc	132,2,c	;volatile
  2612  00189A  EF51  F00C         	goto	u3881
  2613  00189E  EF54  F00C         	goto	u3880
  2614  0018A2                     u3881:
  2615  0018A2  FFFF               	dw	65535	; assembler added errata NOP
  2616  0018A4  EF5E  F00C         	goto	l4380
  2617  0018A8                     u3880:
  2618  0018A8  FFFF               	dw	65535	; assembler added errata NOP
  2619  0018AA  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2620  0018AC  A4D8               	btfss	status,2,c
  2621  0018AE  EF5B  F00C         	goto	u3891
  2622  0018B2  EF5E  F00C         	goto	u3890
  2623  0018B6                     u3891:
  2624  0018B6  FFFF               	dw	65535	; assembler added errata NOP
  2625  0018B8  EF63  F00C         	goto	l4382
  2626  0018BC                     u3890:
  2627  0018BC                     l4380:
  2628  0018BC  FFFF               	dw	65535	; assembler added errata NOP
  2629                           
  2630                           ;motors.c: 261:             keepMovingZ = 0;
  2631  0018BE  0E00               	movlw	0
  2632  0018C0  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2633                           
  2634                           ;motors.c: 262:         }else{
  2635  0018C2  EF7A  F00C         	goto	l4388
  2636  0018C6                     l4382:
  2637  0018C6  FFFF               	dw	65535	; assembler added errata NOP
  2638                           
  2639                           ;motors.c: 268:             motCounter[2][0] += motCounter[2][1];
  2640  0018C8  506C               	movf	(_motCounter+5)^0,w,c
  2641  0018CA  266B               	addwf	(_motCounter+4)^0,f,c
  2642                           
  2643                           ;motors.c: 269:             if(motCounter[2][0] < 0){
  2644  0018CC  BE6B               	btfsc	(_motCounter+4)^0,7,c
  2645  0018CE  EF6E  F00C         	goto	u3900
  2646  0018D2  EF6B  F00C         	goto	u3901
  2647  0018D6                     u3901:
  2648  0018D6  FFFF               	dw	65535	; assembler added errata NOP
  2649  0018D8  EF71  F00C         	goto	l4386
  2650  0018DC                     u3900:
  2651  0018DC  FFFF               	dw	65535	; assembler added errata NOP
  2652  0018DE                     
  2653                           ;motors.c: 270:                 motCounter[2][0] = 3;
  2654  0018DE  0E03               	movlw	3
  2655  0018E0  6E6B               	movwf	(_motCounter+4)^0,c
  2656  0018E2                     l4386:
  2657  0018E2  FFFF               	dw	65535	; assembler added errata NOP
  2658                           
  2659                           ;motors.c: 273:             LATC = stepMot3[motCounter[2][0]];
  2660  0018E4  0E84               	movlw	low _stepMot3
  2661  0018E6  246B               	addwf	(_motCounter+4)^0,w,c
  2662  0018E8  6ED9               	movwf	fsr2l,c
  2663  0018EA  6ADA               	clrf	fsr2h,c
  2664  0018EC  0E00               	movlw	high _stepMot3
  2665  0018EE  22DA               	addwfc	fsr2h,f,c
  2666  0018F0  50DF               	movf	indf2,w,c
  2667  0018F2  6E8B               	movwf	139,c	;volatile
  2668  0018F4                     l4388:
  2669  0018F4  FFFF               	dw	65535	; assembler added errata NOP
  2670  0018F6  ECDB  F012         	call	_stepMade	;wreg free
  2671  0018FA  5012               	movf	?_stepMade^0,w,c
  2672  0018FC  1013               	iorwf	(?_stepMade+1)^0,w,c
  2673  0018FE  B4D8               	btfsc	status,2,c
  2674  001900  EF84  F00C         	goto	u3911
  2675  001904  EF87  F00C         	goto	u3910
  2676  001908                     u3911:
  2677  001908  FFFF               	dw	65535	; assembler added errata NOP
  2678  00190A  EF7A  F00C         	goto	l4388
  2679  00190E                     u3910:
  2680  00190E                     l4390:
  2681  00190E  FFFF               	dw	65535	; assembler added errata NOP
  2682                           
  2683                           ;motors.c: 200:     while(keepMovingX || keepMovingY || keepMovingZ){
  2684  001910  5015               	movf	resetPosition@keepMovingX^0,w,c
  2685  001912  A4D8               	btfss	status,2,c
  2686  001914  EF8E  F00C         	goto	u3921
  2687  001918  EF91  F00C         	goto	u3920
  2688  00191C                     u3921:
  2689  00191C  FFFF               	dw	65535	; assembler added errata NOP
  2690  00191E  EFD9  F00B         	goto	l4348
  2691  001922                     u3920:
  2692  001922  FFFF               	dw	65535	; assembler added errata NOP
  2693  001924  5016               	movf	resetPosition@keepMovingY^0,w,c
  2694  001926  A4D8               	btfss	status,2,c
  2695  001928  EF98  F00C         	goto	u3931
  2696  00192C  EF9B  F00C         	goto	u3930
  2697  001930                     u3931:
  2698  001930  FFFF               	dw	65535	; assembler added errata NOP
  2699  001932  EFD9  F00B         	goto	l4348
  2700  001936                     u3930:
  2701  001936  FFFF               	dw	65535	; assembler added errata NOP
  2702  001938  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2703  00193A  A4D8               	btfss	status,2,c
  2704  00193C  EFA2  F00C         	goto	u3941
  2705  001940  EFA5  F00C         	goto	u3940
  2706  001944                     u3941:
  2707  001944  FFFF               	dw	65535	; assembler added errata NOP
  2708  001946  EFD9  F00B         	goto	l4348
  2709  00194A                     u3940:
  2710  00194A                     l132:
  2711  00194A  FFFF               	dw	65535	; assembler added errata NOP
  2712                           
  2713                           ;motors.c: 293:     T0CONbits.TMR0ON = 0;
  2714  00194C  9ED5               	bcf	213,7,c	;volatile
  2715                           
  2716                           ;motors.c: 294:     T2CONbits.TMR2ON = 0;
  2717  00194E  94CA               	bcf	202,2,c	;volatile
  2718  001950                     
  2719                           ;motors.c: 296:     resetTM0_Temp();
  2720  001950  EC59  F013         	call	_resetTM0_Temp	;wreg free
  2721                           
  2722                           ;motors.c: 297:     resetTM2_Temp();
  2723  001954  ECF7  F012         	call	_resetTM2_Temp	;wreg free
  2724  001958                     
  2725                           ;motors.c: 299:     TMR0 = 0;
  2726  001958  0E00               	movlw	0
  2727  00195A  6ED7               	movwf	215,c	;volatile
  2728  00195C  0E00               	movlw	0
  2729  00195E  6ED6               	movwf	214,c	;volatile
  2730  001960                     
  2731                           ;motors.c: 300:     TMR2 = 0;
  2732  001960  0E00               	movlw	0
  2733  001962  6ECC               	movwf	204,c	;volatile
  2734                           
  2735                           ;motors.c: 303:     resetStep();
  2736  001964  EC5E  F013         	call	_resetStep	;wreg free
  2737  001968                     
  2738                           ;motors.c: 306:     return(tm0Error);
  2739  001968  5059               	movf	_tm0Error^0,w,c
  2740  00196A  0012               	return		;funcret
  2741  00196C  FFFF               	dw	65535	; errata NOP
  2742  00196E                     __end_of_resetPosition:
  2743                           	callstack 0
  2744                           
  2745 ;; *************** function _resetNewSequence *****************
  2746 ;; Defined at:
  2747 ;;		line 92 in file "usart.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;		None
  2750 ;; Auto vars:     Size  Location     Type
  2751 ;;		None
  2752 ;; Return value:  Size  Location     Type
  2753 ;;                  1    wreg      void 
  2754 ;; Registers used:
  2755 ;;		wreg, status,2
  2756 ;; Tracked objects:
  2757 ;;		On entry : 0/0
  2758 ;;		On exit  : 0/0
  2759 ;;		Unchanged: 0/0
  2760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2761 ;;      Params:         0       0       0       0       0       0       0
  2762 ;;      Locals:         0       0       0       0       0       0       0
  2763 ;;      Temps:          0       0       0       0       0       0       0
  2764 ;;      Totals:         0       0       0       0       0       0       0
  2765 ;;Total ram usage:        0 bytes
  2766 ;; Hardware stack levels used:    1
  2767 ;; Hardware stack levels required when called:    4
  2768 ;; This function calls:
  2769 ;;		Nothing
  2770 ;; This function is called by:
  2771 ;;		_main
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text10
  2776  00268A                     __ptext10:
  2777                           	callstack 0
  2778  00268A                     _resetNewSequence:
  2779                           	callstack 0
  2780  00268A  FFFF               	dw	65535	; assembler added errata NOP
  2781  00268C                     
  2782                           ;usart.c: 93:     _newSequence = 0;
  2783  00268C  0E00               	movlw	0
  2784  00268E  6E5F               	movwf	__newSequence^0,c
  2785  002690  0012               	return		;funcret
  2786  002692  FFFF               	dw	65535	; errata NOP
  2787  002694                     __end_of_resetNewSequence:
  2788                           	callstack 0
  2789                           
  2790 ;; *************** function _reduceSeq *****************
  2791 ;; Defined at:
  2792 ;;		line 62 in file "usart.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;		None
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;		None
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		status,2, status,0
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2806 ;;      Params:         0       0       0       0       0       0       0
  2807 ;;      Locals:         0       0       0       0       0       0       0
  2808 ;;      Temps:          0       0       0       0       0       0       0
  2809 ;;      Totals:         0       0       0       0       0       0       0
  2810 ;;Total ram usage:        0 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    4
  2813 ;; This function calls:
  2814 ;;		Nothing
  2815 ;; This function is called by:
  2816 ;;		_main
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           	psect	text11
  2821  0026E4                     __ptext11:
  2822                           	callstack 0
  2823  0026E4                     _reduceSeq:
  2824                           	callstack 0
  2825  0026E4  FFFF               	dw	65535	; assembler added errata NOP
  2826  0026E6                     
  2827                           ;usart.c: 63:     dataCounter--;
  2828  0026E6  0661               	decf	_dataCounter^0,f,c
  2829  0026E8  0012               	return		;funcret
  2830  0026EA  FFFF               	dw	65535	; errata NOP
  2831  0026EC                     __end_of_reduceSeq:
  2832                           	callstack 0
  2833                           
  2834 ;; *************** function _readSeq *****************
  2835 ;; Defined at:
  2836 ;;		line 76 in file "usart.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;		None
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;		None
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  1    wreg      unsigned char 
  2843 ;; Registers used:
  2844 ;;		wreg, status,2
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2850 ;;      Params:         0       0       0       0       0       0       0
  2851 ;;      Locals:         0       0       0       0       0       0       0
  2852 ;;      Temps:          0       0       0       0       0       0       0
  2853 ;;      Totals:         0       0       0       0       0       0       0
  2854 ;;Total ram usage:        0 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; Hardware stack levels required when called:    4
  2857 ;; This function calls:
  2858 ;;		Nothing
  2859 ;; This function is called by:
  2860 ;;		_main
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text12
  2865  0026EC                     __ptext12:
  2866                           	callstack 0
  2867  0026EC                     _readSeq:
  2868                           	callstack 0
  2869  0026EC  FFFF               	dw	65535	; assembler added errata NOP
  2870  0026EE                     
  2871                           ;usart.c: 77:     return dataCounter;
  2872  0026EE  5061               	movf	_dataCounter^0,w,c
  2873  0026F0  0012               	return		;funcret
  2874  0026F2  FFFF               	dw	65535	; errata NOP
  2875  0026F4                     __end_of_readSeq:
  2876                           	callstack 0
  2877                           
  2878 ;; *************** function _newSequence *****************
  2879 ;; Defined at:
  2880 ;;		line 84 in file "usart.c"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;		None
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;		None
  2885 ;; Return value:  Size  Location     Type
  2886 ;;                  1    wreg      unsigned char 
  2887 ;; Registers used:
  2888 ;;		wreg, status,2
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/0
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2894 ;;      Params:         0       0       0       0       0       0       0
  2895 ;;      Locals:         0       0       0       0       0       0       0
  2896 ;;      Temps:          0       0       0       0       0       0       0
  2897 ;;      Totals:         0       0       0       0       0       0       0
  2898 ;;Total ram usage:        0 bytes
  2899 ;; Hardware stack levels used:    1
  2900 ;; Hardware stack levels required when called:    4
  2901 ;; This function calls:
  2902 ;;		Nothing
  2903 ;; This function is called by:
  2904 ;;		_main
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           	psect	text13
  2909  0026F4                     __ptext13:
  2910                           	callstack 0
  2911  0026F4                     _newSequence:
  2912                           	callstack 0
  2913  0026F4  FFFF               	dw	65535	; assembler added errata NOP
  2914  0026F6                     
  2915                           ;usart.c: 85:     return _newSequence;
  2916  0026F6  505F               	movf	__newSequence^0,w,c
  2917  0026F8  0012               	return		;funcret
  2918  0026FA  FFFF               	dw	65535	; errata NOP
  2919  0026FC                     __end_of_newSequence:
  2920                           	callstack 0
  2921                           
  2922 ;; *************** function _interruptInit *****************
  2923 ;; Defined at:
  2924 ;;		line 35 in file "interrupt.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;		None
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;		None
  2929 ;; Return value:  Size  Location     Type
  2930 ;;                  1    wreg      void 
  2931 ;; Registers used:
  2932 ;;		None
  2933 ;; Tracked objects:
  2934 ;;		On entry : 0/0
  2935 ;;		On exit  : 0/0
  2936 ;;		Unchanged: 0/0
  2937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2938 ;;      Params:         0       0       0       0       0       0       0
  2939 ;;      Locals:         0       0       0       0       0       0       0
  2940 ;;      Temps:          0       0       0       0       0       0       0
  2941 ;;      Totals:         0       0       0       0       0       0       0
  2942 ;;Total ram usage:        0 bytes
  2943 ;; Hardware stack levels used:    1
  2944 ;; Hardware stack levels required when called:    4
  2945 ;; This function calls:
  2946 ;;		Nothing
  2947 ;; This function is called by:
  2948 ;;		_main
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           	psect	text14
  2953  0024B0                     __ptext14:
  2954                           	callstack 0
  2955  0024B0                     _interruptInit:
  2956                           	callstack 0
  2957  0024B0  FFFF               	dw	65535	; assembler added errata NOP
  2958  0024B2                     
  2959                           ;interrupt.c: 37:     if(!INTCONbits.GIE){
  2960  0024B2  BEF2               	btfsc	242,7,c	;volatile
  2961  0024B4  EF5E  F012         	goto	u3951
  2962  0024B8  EF61  F012         	goto	u3950
  2963  0024BC                     u3951:
  2964  0024BC  FFFF               	dw	65535	; assembler added errata NOP
  2965  0024BE  EF63  F012         	goto	l447
  2966  0024C2                     u3950:
  2967  0024C2  FFFF               	dw	65535	; assembler added errata NOP
  2968  0024C4                     
  2969                           ;interrupt.c: 38:         INTCONbits.GIE = 1;
  2970  0024C4  8EF2               	bsf	242,7,c	;volatile
  2971  0024C6                     l447:
  2972  0024C6  FFFF               	dw	65535	; assembler added errata NOP
  2973                           
  2974                           ;interrupt.c: 40:     if(!INTCONbits.PEIE){
  2975  0024C8  BCF2               	btfsc	242,6,c	;volatile
  2976  0024CA  EF69  F012         	goto	u3961
  2977  0024CE  EF6C  F012         	goto	u3960
  2978  0024D2                     u3961:
  2979  0024D2  FFFF               	dw	65535	; assembler added errata NOP
  2980  0024D4  EF6E  F012         	goto	l448
  2981  0024D8                     u3960:
  2982  0024D8  FFFF               	dw	65535	; assembler added errata NOP
  2983  0024DA                     
  2984                           ;interrupt.c: 41:         INTCONbits.PEIE = 1;
  2985  0024DA  8CF2               	bsf	242,6,c	;volatile
  2986  0024DC                     l448:
  2987  0024DC  FFFF               	dw	65535	; assembler added errata NOP
  2988                           
  2989                           ;interrupt.c: 45:     RCONbits.IPEN = 1;
  2990  0024DE  8ED0               	bsf	208,7,c	;volatile
  2991                           
  2992                           ;interrupt.c: 46:     INTCONbits.T0IE = 1;
  2993  0024E0  8AF2               	bsf	242,5,c	;volatile
  2994                           
  2995                           ;interrupt.c: 47:     PIE1bits.TMR1IE = 1;
  2996  0024E2  809D               	bsf	157,0,c	;volatile
  2997                           
  2998                           ;interrupt.c: 48:     PIE1bits.TMR2IE = 1;
  2999  0024E4  829D               	bsf	157,1,c	;volatile
  3000                           
  3001                           ;interrupt.c: 49:     PIE1bits.RC1IE = 1;
  3002  0024E6  8A9D               	bsf	157,5,c	;volatile
  3003  0024E8  0012               	return		;funcret
  3004  0024EA  FFFF               	dw	65535	; errata NOP
  3005  0024EC                     __end_of_interruptInit:
  3006                           	callstack 0
  3007                           
  3008 ;; *************** function _initPinMotors *****************
  3009 ;; Defined at:
  3010 ;;		line 46 in file "motors.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;		None
  3013 ;; Auto vars:     Size  Location     Type
  3014 ;;		None
  3015 ;; Return value:  Size  Location     Type
  3016 ;;                  1    wreg      void 
  3017 ;; Registers used:
  3018 ;;		wreg, status,2, status,0
  3019 ;; Tracked objects:
  3020 ;;		On entry : 0/0
  3021 ;;		On exit  : 0/0
  3022 ;;		Unchanged: 0/0
  3023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3024 ;;      Params:         0       0       0       0       0       0       0
  3025 ;;      Locals:         0       0       0       0       0       0       0
  3026 ;;      Temps:          0       0       0       0       0       0       0
  3027 ;;      Totals:         0       0       0       0       0       0       0
  3028 ;;Total ram usage:        0 bytes
  3029 ;; Hardware stack levels used:    1
  3030 ;; Hardware stack levels required when called:    4
  3031 ;; This function calls:
  3032 ;;		Nothing
  3033 ;; This function is called by:
  3034 ;;		_main
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           	psect	text15
  3039  00254C                     __ptext15:
  3040                           	callstack 0
  3041  00254C                     _initPinMotors:
  3042                           	callstack 0
  3043  00254C  FFFF               	dw	65535	; assembler added errata NOP
  3044  00254E                     
  3045                           ;motors.c: 48:     ADCON1bits.PCFG = 0x06;
  3046  00254E  50C1               	movf	193,w,c	;volatile
  3047  002550  0BF0               	andlw	-16
  3048  002552  0906               	iorlw	6
  3049  002554  6EC1               	movwf	193,c	;volatile
  3050  002556                     
  3051                           ;motors.c: 49:     TRISA &= 0b11010001;
  3052  002556  0ED1               	movlw	209
  3053  002558  1692               	andwf	146,f,c	;volatile
  3054  00255A                     
  3055                           ;motors.c: 51:     TRISB &= 0b00000010;
  3056  00255A  0E02               	movlw	2
  3057  00255C  1693               	andwf	147,f,c	;volatile
  3058  00255E                     
  3059                           ;motors.c: 52:     TRISC &= 0b11000000;
  3060  00255E  0EC0               	movlw	192
  3061  002560  1694               	andwf	148,f,c	;volatile
  3062  002562                     
  3063                           ;motors.c: 53:     TRISD &= 0b11000000;
  3064  002562  0EC0               	movlw	192
  3065  002564  1695               	andwf	149,f,c	;volatile
  3066  002566                     
  3067                           ;motors.c: 56:     TRISEbits.TRISE0 = 1;
  3068  002566  8096               	bsf	150,0,c	;volatile
  3069  002568                     
  3070                           ;motors.c: 57:     TRISEbits.TRISE1 = 1;
  3071  002568  8296               	bsf	150,1,c	;volatile
  3072  00256A                     
  3073                           ;motors.c: 58:     TRISEbits.TRISE2 = 1;
  3074  00256A  8496               	bsf	150,2,c	;volatile
  3075  00256C                     
  3076                           ;motors.c: 61:     TRISDbits.TRISD7 = 1;
  3077  00256C  8E95               	bsf	149,7,c	;volatile
  3078  00256E  0012               	return		;funcret
  3079  002570  FFFF               	dw	65535	; errata NOP
  3080  002572                     __end_of_initPinMotors:
  3081                           	callstack 0
  3082                           
  3083 ;; *************** function _initADC *****************
  3084 ;; Defined at:
  3085 ;;		line 18 in file "adc.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;		None
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;		None
  3090 ;; Return value:  Size  Location     Type
  3091 ;;                  1    wreg      void 
  3092 ;; Registers used:
  3093 ;;		wreg, status,2
  3094 ;; Tracked objects:
  3095 ;;		On entry : 0/0
  3096 ;;		On exit  : 0/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3099 ;;      Params:         0       0       0       0       0       0       0
  3100 ;;      Locals:         0       0       0       0       0       0       0
  3101 ;;      Temps:          0       0       0       0       0       0       0
  3102 ;;      Totals:         0       0       0       0       0       0       0
  3103 ;;Total ram usage:        0 bytes
  3104 ;; Hardware stack levels used:    1
  3105 ;; Hardware stack levels required when called:    4
  3106 ;; This function calls:
  3107 ;;		Nothing
  3108 ;; This function is called by:
  3109 ;;		_main
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           	psect	text16
  3114  002572                     __ptext16:
  3115                           	callstack 0
  3116  002572                     _initADC:
  3117                           	callstack 0
  3118  002572  FFFF               	dw	65535	; assembler added errata NOP
  3119  002574                     
  3120                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3121  002574  50C2               	movf	194,w,c	;volatile
  3122  002576  0B3F               	andlw	-193
  3123  002578  0940               	iorlw	64
  3124  00257A  6EC2               	movwf	194,c	;volatile
  3125  00257C                     
  3126                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3127  00257C  8CC1               	bsf	193,6,c	;volatile
  3128                           
  3129                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3130  00257E  0EC7               	movlw	-57
  3131  002580  16C2               	andwf	194,f,c	;volatile
  3132  002582                     
  3133                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3134  002582  94C2               	bcf	194,2,c	;volatile
  3135  002584                     
  3136                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3137  002584  90C2               	bcf	194,0,c	;volatile
  3138  002586                     
  3139                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3140  002586  9EC1               	bcf	193,7,c	;volatile
  3141                           
  3142                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3143  002588  50C1               	movf	193,w,c	;volatile
  3144  00258A  0BF0               	andlw	-16
  3145  00258C  090E               	iorlw	14
  3146  00258E  6EC1               	movwf	193,c	;volatile
  3147  002590                     
  3148                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3149  002590  8C9D               	bsf	157,6,c	;volatile
  3150  002592                     
  3151                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3152  002592  8C9F               	bsf	159,6,c	;volatile
  3153  002594  0012               	return		;funcret
  3154  002596  FFFF               	dw	65535	; errata NOP
  3155  002598                     __end_of_initADC:
  3156                           	callstack 0
  3157                           
  3158 ;; *************** function _getNewSequence *****************
  3159 ;; Defined at:
  3160 ;;		line 55 in file "usart.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;		None
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;		None
  3165 ;; Return value:  Size  Location     Type
  3166 ;;                  2   17[COMRAM] PTR struct .
  3167 ;; Registers used:
  3168 ;;		wreg, status,2, status,0
  3169 ;; Tracked objects:
  3170 ;;		On entry : 0/0
  3171 ;;		On exit  : 0/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3174 ;;      Params:         2       0       0       0       0       0       0
  3175 ;;      Locals:         0       0       0       0       0       0       0
  3176 ;;      Temps:          0       0       0       0       0       0       0
  3177 ;;      Totals:         2       0       0       0       0       0       0
  3178 ;;Total ram usage:        2 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; Hardware stack levels required when called:    4
  3181 ;; This function calls:
  3182 ;;		Nothing
  3183 ;; This function is called by:
  3184 ;;		_main
  3185 ;; This function uses a non-reentrant model
  3186 ;;
  3187                           
  3188                           	psect	text17
  3189  002620                     __ptext17:
  3190                           	callstack 0
  3191  002620                     _getNewSequence:
  3192                           	callstack 0
  3193  002620  FFFF               	dw	65535	; assembler added errata NOP
  3194  002622                     
  3195                           ;usart.c: 56:     return(&newSequenceData);
  3196  002622  0EDA               	movlw	low _newSequenceData
  3197  002624  6E12               	movwf	?_getNewSequence^0,c
  3198  002626  0E00               	movlw	high _newSequenceData
  3199  002628  6E13               	movwf	(?_getNewSequence+1)^0,c
  3200  00262A  0012               	return		;funcret
  3201  00262C  FFFF               	dw	65535	; errata NOP
  3202  00262E                     __end_of_getNewSequence:
  3203                           	callstack 0
  3204                           
  3205 ;; *************** function _executeData *****************
  3206 ;; Defined at:
  3207 ;;		line 84 in file "main.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;		None
  3210 ;; Auto vars:     Size  Location     Type
  3211 ;;  data            2    9[BANK0 ] PTR struct .
  3212 ;;		 -> dataSequence(20), 
  3213 ;;  errCode         1   11[BANK0 ] unsigned char 
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  1    wreg      unsigned char 
  3216 ;; Registers used:
  3217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3223 ;;      Params:         0       0       0       0       0       0       0
  3224 ;;      Locals:         0       3       0       0       0       0       0
  3225 ;;      Temps:          0       2       0       0       0       0       0
  3226 ;;      Totals:         0       5       0       0       0       0       0
  3227 ;;Total ram usage:        5 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; Hardware stack levels required when called:    6
  3230 ;; This function calls:
  3231 ;;		_getData
  3232 ;;		_liftArm
  3233 ;;		_moveToPoint
  3234 ;;		_pickObject
  3235 ;;		_releaseObj
  3236 ;;		_rotateObj
  3237 ;;		_touchObject
  3238 ;;		_touchTherm
  3239 ;; This function is called by:
  3240 ;;		_main
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text18
  3245  000D8C                     __ptext18:
  3246                           	callstack 0
  3247  000D8C                     _executeData:
  3248                           	callstack 0
  3249  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  3250  000D8E                     
  3251                           ;main.c: 85:     t_sequence *data = getData();
  3252  000D8E  EC17  F013         	call	_getData	;wreg free
  3253  000D92  C012  F0EB         	movff	?_getData,executeData@data
  3254  000D96  C013  F0EC         	movff	?_getData+1,executeData@data+1
  3255  000D9A                     
  3256                           ;main.c: 91:     switch(data->feederLine){
  3257  000D9A  EF78  F007         	goto	l4558
  3258  000D9E                     l4530:
  3259  000D9E  FFFF               	dw	65535	; assembler added errata NOP
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;main.c: 94:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0]
      +                          , feeder1Pos[1]);
  3263  000DA0  C04C  F015         	movff	_posVector,moveToPoint@x1
  3264  000DA4  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3265  000DA6  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3266  000DAA  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3267  000DAC  0E11               	movlw	low _feeder1Pos
  3268  000DAE  6EF6               	movwf	tblptrl,c
  3269  000DB0                     	if	1	;There is more than 1 active tblptr byte
  3270  000DB0  0E06               	movlw	high _feeder1Pos
  3271  000DB2  6EF7               	movwf	tblptrh,c
  3272  000DB4                     	endif
  3273  000DB4                     	if	0	;There are less than 3 active tblptr bytes
  3274  000DB4                     	endif
  3275  000DB4  0008               	tblrd		*
  3276  000DB6  FFFF               	dw	65535	; errata NOP
  3277  000DB8  50F5               	movf	tablat,w,c
  3278  000DBA  6E19               	movwf	moveToPoint@x2^0,c
  3279  000DBC  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3280  000DBE  0E12               	movlw	low (_feeder1Pos+1)
  3281  000DC0  6EF6               	movwf	tblptrl,c
  3282  000DC2  0E06               	movlw	high (_feeder1Pos+1)
  3283  000DC4  6EF7               	movwf	tblptrh,c
  3284  000DC6                     	if	0	;tblptru may be non-zero
  3285  000DC6                     	endif
  3286  000DC6                     	if	0	;tblptru may be non-zero
  3287  000DC6                     	endif
  3288  000DC6  0008               	tblrd		*
  3289  000DC8  FFFF               	dw	65535	; errata NOP
  3290  000DCA  50F5               	movf	tablat,w,c
  3291  000DCC  6E1B               	movwf	moveToPoint@y2^0,c
  3292  000DCE  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3293  000DD0  EC24  F005         	call	_moveToPoint	;wreg free
  3294  000DD4  0100               	movlb	0	; () banked
  3295  000DD6  6FED               	movwf	executeData@errCode& (0+255),b
  3296  000DD8                     
  3297                           ; BSR set to: 0
  3298                           ;main.c: 96:             posVector[0] = feeder1Pos[0];
  3299  000DD8  0E11               	movlw	low _feeder1Pos
  3300  000DDA  6EF6               	movwf	tblptrl,c
  3301  000DDC                     	if	1	;There is more than 1 active tblptr byte
  3302  000DDC  0E06               	movlw	high _feeder1Pos
  3303  000DDE  6EF7               	movwf	tblptrh,c
  3304  000DE0                     	endif
  3305  000DE0                     	if	0	;There are less than 3 active tblptr bytes
  3306  000DE0                     	endif
  3307  000DE0  0008               	tblrd		*
  3308  000DE2  FFFF               	dw	65535	; errata NOP
  3309  000DE4  CFF5 F04C          	movff	tablat,_posVector
  3310  000DE8                     
  3311                           ; BSR set to: 0
  3312                           ;main.c: 97:             posVector[1] = feeder1Pos[1];
  3313  000DE8  0E12               	movlw	low (_feeder1Pos+1)
  3314  000DEA  6EF6               	movwf	tblptrl,c
  3315  000DEC  0E06               	movlw	high (_feeder1Pos+1)
  3316  000DEE  6EF7               	movwf	tblptrh,c
  3317  000DF0                     	if	0	;tblptru may be non-zero
  3318  000DF0                     	endif
  3319  000DF0                     	if	0	;tblptru may be non-zero
  3320  000DF0                     	endif
  3321  000DF0  0008               	tblrd		*
  3322  000DF2  FFFF               	dw	65535	; errata NOP
  3323  000DF4  CFF5 F04D          	movff	tablat,_posVector+1
  3324                           
  3325                           ;main.c: 98:             break;
  3326  000DF8  EF9C  F007         	goto	l4560
  3327  000DFC                     l4536:
  3328  000DFC  FFFF               	dw	65535	; assembler added errata NOP
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;main.c: 100:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3332  000DFE  C04C  F015         	movff	_posVector,moveToPoint@x1
  3333  000E02  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3334  000E04  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3335  000E08  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3336  000E0A  0E0F               	movlw	low _feeder2Pos
  3337  000E0C  6EF6               	movwf	tblptrl,c
  3338  000E0E                     	if	1	;There is more than 1 active tblptr byte
  3339  000E0E  0E06               	movlw	high _feeder2Pos
  3340  000E10  6EF7               	movwf	tblptrh,c
  3341  000E12                     	endif
  3342  000E12                     	if	0	;There are less than 3 active tblptr bytes
  3343  000E12                     	endif
  3344  000E12  0008               	tblrd		*
  3345  000E14  FFFF               	dw	65535	; errata NOP
  3346  000E16  50F5               	movf	tablat,w,c
  3347  000E18  6E19               	movwf	moveToPoint@x2^0,c
  3348  000E1A  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3349  000E1C  0E10               	movlw	low (_feeder2Pos+1)
  3350  000E1E  6EF6               	movwf	tblptrl,c
  3351  000E20  0E06               	movlw	high (_feeder2Pos+1)
  3352  000E22  6EF7               	movwf	tblptrh,c
  3353  000E24                     	if	0	;tblptru may be non-zero
  3354  000E24                     	endif
  3355  000E24                     	if	0	;tblptru may be non-zero
  3356  000E24                     	endif
  3357  000E24  0008               	tblrd		*
  3358  000E26  FFFF               	dw	65535	; errata NOP
  3359  000E28  50F5               	movf	tablat,w,c
  3360  000E2A  6E1B               	movwf	moveToPoint@y2^0,c
  3361  000E2C  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3362  000E2E  EC24  F005         	call	_moveToPoint	;wreg free
  3363  000E32  0100               	movlb	0	; () banked
  3364  000E34  6FED               	movwf	executeData@errCode& (0+255),b
  3365  000E36                     
  3366                           ; BSR set to: 0
  3367                           ;main.c: 101:             posVector[0] = feeder2Pos[0];
  3368  000E36  0E0F               	movlw	low _feeder2Pos
  3369  000E38  6EF6               	movwf	tblptrl,c
  3370  000E3A                     	if	1	;There is more than 1 active tblptr byte
  3371  000E3A  0E06               	movlw	high _feeder2Pos
  3372  000E3C  6EF7               	movwf	tblptrh,c
  3373  000E3E                     	endif
  3374  000E3E                     	if	0	;There are less than 3 active tblptr bytes
  3375  000E3E                     	endif
  3376  000E3E  0008               	tblrd		*
  3377  000E40  FFFF               	dw	65535	; errata NOP
  3378  000E42  CFF5 F04C          	movff	tablat,_posVector
  3379  000E46                     
  3380                           ; BSR set to: 0
  3381                           ;main.c: 102:             posVector[1] = feeder2Pos[1];
  3382  000E46  0E10               	movlw	low (_feeder2Pos+1)
  3383  000E48  6EF6               	movwf	tblptrl,c
  3384  000E4A  0E06               	movlw	high (_feeder2Pos+1)
  3385  000E4C  6EF7               	movwf	tblptrh,c
  3386  000E4E                     	if	0	;tblptru may be non-zero
  3387  000E4E                     	endif
  3388  000E4E                     	if	0	;tblptru may be non-zero
  3389  000E4E                     	endif
  3390  000E4E  0008               	tblrd		*
  3391  000E50  FFFF               	dw	65535	; errata NOP
  3392  000E52  CFF5 F04D          	movff	tablat,_posVector+1
  3393                           
  3394                           ;main.c: 103:             break;
  3395  000E56  EF9C  F007         	goto	l4560
  3396  000E5A                     l4542:
  3397  000E5A  FFFF               	dw	65535	; assembler added errata NOP
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;main.c: 105:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3401  000E5C  C04C  F015         	movff	_posVector,moveToPoint@x1
  3402  000E60  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3403  000E62  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3404  000E66  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3405  000E68  0E0D               	movlw	low _feeder3Pos
  3406  000E6A  6EF6               	movwf	tblptrl,c
  3407  000E6C                     	if	1	;There is more than 1 active tblptr byte
  3408  000E6C  0E06               	movlw	high _feeder3Pos
  3409  000E6E  6EF7               	movwf	tblptrh,c
  3410  000E70                     	endif
  3411  000E70                     	if	0	;There are less than 3 active tblptr bytes
  3412  000E70                     	endif
  3413  000E70  0008               	tblrd		*
  3414  000E72  FFFF               	dw	65535	; errata NOP
  3415  000E74  50F5               	movf	tablat,w,c
  3416  000E76  6E19               	movwf	moveToPoint@x2^0,c
  3417  000E78  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3418  000E7A  0E0E               	movlw	low (_feeder3Pos+1)
  3419  000E7C  6EF6               	movwf	tblptrl,c
  3420  000E7E  0E06               	movlw	high (_feeder3Pos+1)
  3421  000E80  6EF7               	movwf	tblptrh,c
  3422  000E82                     	if	0	;tblptru may be non-zero
  3423  000E82                     	endif
  3424  000E82                     	if	0	;tblptru may be non-zero
  3425  000E82                     	endif
  3426  000E82  0008               	tblrd		*
  3427  000E84  FFFF               	dw	65535	; errata NOP
  3428  000E86  50F5               	movf	tablat,w,c
  3429  000E88  6E1B               	movwf	moveToPoint@y2^0,c
  3430  000E8A  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3431  000E8C  EC24  F005         	call	_moveToPoint	;wreg free
  3432  000E90  0100               	movlb	0	; () banked
  3433  000E92  6FED               	movwf	executeData@errCode& (0+255),b
  3434  000E94                     
  3435                           ; BSR set to: 0
  3436                           ;main.c: 106:             posVector[0] = feeder3Pos[0];
  3437  000E94  0E0D               	movlw	low _feeder3Pos
  3438  000E96  6EF6               	movwf	tblptrl,c
  3439  000E98                     	if	1	;There is more than 1 active tblptr byte
  3440  000E98  0E06               	movlw	high _feeder3Pos
  3441  000E9A  6EF7               	movwf	tblptrh,c
  3442  000E9C                     	endif
  3443  000E9C                     	if	0	;There are less than 3 active tblptr bytes
  3444  000E9C                     	endif
  3445  000E9C  0008               	tblrd		*
  3446  000E9E  FFFF               	dw	65535	; errata NOP
  3447  000EA0  CFF5 F04C          	movff	tablat,_posVector
  3448  000EA4                     
  3449                           ; BSR set to: 0
  3450                           ;main.c: 107:             posVector[1] = feeder3Pos[1];
  3451  000EA4  0E0E               	movlw	low (_feeder3Pos+1)
  3452  000EA6  6EF6               	movwf	tblptrl,c
  3453  000EA8  0E06               	movlw	high (_feeder3Pos+1)
  3454  000EAA  6EF7               	movwf	tblptrh,c
  3455  000EAC                     	if	0	;tblptru may be non-zero
  3456  000EAC                     	endif
  3457  000EAC                     	if	0	;tblptru may be non-zero
  3458  000EAC                     	endif
  3459  000EAC  0008               	tblrd		*
  3460  000EAE  FFFF               	dw	65535	; errata NOP
  3461  000EB0  CFF5 F04D          	movff	tablat,_posVector+1
  3462                           
  3463                           ;main.c: 108:             break;
  3464  000EB4  EF9C  F007         	goto	l4560
  3465  000EB8                     l4548:
  3466  000EB8  FFFF               	dw	65535	; assembler added errata NOP
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;main.c: 112:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3470  000EBA  C04C  F015         	movff	_posVector,moveToPoint@x1
  3471  000EBE  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3472  000EC0  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3473  000EC4  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3474  000EC6  C055  F019         	movff	_newFeeder,moveToPoint@x2
  3475  000ECA  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3476  000ECC  C056  F01B         	movff	_newFeeder+1,moveToPoint@y2
  3477  000ED0  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3478  000ED2  EC24  F005         	call	_moveToPoint	;wreg free
  3479  000ED6  0100               	movlb	0	; () banked
  3480  000ED8  6FED               	movwf	executeData@errCode& (0+255),b
  3481  000EDA                     
  3482                           ; BSR set to: 0
  3483                           ;main.c: 113:             posVector[0] = newFeeder[0];
  3484  000EDA  C055  F04C         	movff	_newFeeder,_posVector
  3485  000EDE                     
  3486                           ; BSR set to: 0
  3487                           ;main.c: 114:             posVector[1] = newFeeder[1];
  3488  000EDE  C056  F04D         	movff	_newFeeder+1,_posVector+1
  3489                           
  3490                           ;main.c: 115:             break;
  3491  000EE2  EF9C  F007         	goto	l4560
  3492  000EE6                     l4554:
  3493  000EE6  FFFF               	dw	65535	; assembler added errata NOP
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;main.c: 119:             errCode = 1;
  3497  000EE8  0E01               	movlw	1
  3498  000EEA  6FED               	movwf	executeData@errCode& (0+255),b
  3499                           
  3500                           ;main.c: 120:             break;
  3501  000EEC  EF9C  F007         	goto	l4560
  3502  000EF0                     l4558:
  3503  000EF0  FFFF               	dw	65535	; assembler added errata NOP
  3504  000EF2  C0EB  FFD9         	movff	executeData@data,fsr2l
  3505  000EF6  C0EC  FFDA         	movff	executeData@data+1,fsr2h
  3506  000EFA  50DF               	movf	indf2,w,c
  3507  000EFC  0100               	movlb	0	; () banked
  3508  000EFE  6FE9               	movwf	??_executeData& (0+255),b
  3509  000F00  6BEA               	clrf	(??_executeData+1)& (0+255),b
  3510                           
  3511                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3512                           ; Switch size 1, requested type "simple"
  3513                           ; Number of cases is 1, Range of values is 0 to 0
  3514                           ; switch strategies available:
  3515                           ; Name         Instructions Cycles
  3516                           ; simple_byte            4     3 (average)
  3517                           ;	Chosen strategy is simple_byte
  3518  000F02  51EA               	movf	(??_executeData+1)& (0+255),w,b
  3519  000F04  0A00               	xorlw	0	; case 0
  3520  000F06  B4D8               	btfsc	status,2,c
  3521  000F08  EF88  F007         	goto	l4836
  3522  000F0C  EF73  F007         	goto	l4554
  3523  000F10                     l4836:
  3524  000F10  FFFF               	dw	65535	; assembler added errata NOP
  3525                           
  3526                           ; BSR set to: 0
  3527                           ; Switch size 1, requested type "simple"
  3528                           ; Number of cases is 4, Range of values is 0 to 255
  3529                           ; switch strategies available:
  3530                           ; Name         Instructions Cycles
  3531                           ; simple_byte           13     7 (average)
  3532                           ;	Chosen strategy is simple_byte
  3533  000F12  51E9               	movf	??_executeData& (0+255),w,b
  3534  000F14  0A00               	xorlw	0	; case 0
  3535  000F16  B4D8               	btfsc	status,2,c
  3536  000F18  EFCF  F006         	goto	l4530
  3537  000F1C  0A01               	xorlw	1	; case 1
  3538  000F1E  B4D8               	btfsc	status,2,c
  3539  000F20  EFFE  F006         	goto	l4536
  3540  000F24  0A03               	xorlw	3	; case 2
  3541  000F26  B4D8               	btfsc	status,2,c
  3542  000F28  EF2D  F007         	goto	l4542
  3543  000F2C  0AFD               	xorlw	253	; case 255
  3544  000F2E  B4D8               	btfsc	status,2,c
  3545  000F30  EF5C  F007         	goto	l4548
  3546  000F34  EF73  F007         	goto	l4554
  3547  000F38                     l4560:
  3548  000F38  FFFF               	dw	65535	; assembler added errata NOP
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;main.c: 124:     if(!errCode){
  3552  000F3A  51ED               	movf	executeData@errCode& (0+255),w,b
  3553  000F3C  A4D8               	btfss	status,2,c
  3554  000F3E  EFA3  F007         	goto	u4061
  3555  000F42  EFA6  F007         	goto	u4060
  3556  000F46                     u4061:
  3557  000F46  FFFF               	dw	65535	; assembler added errata NOP
  3558  000F48  EFB4  F007         	goto	l4566
  3559  000F4C                     u4060:
  3560  000F4C  FFFF               	dw	65535	; assembler added errata NOP
  3561  000F4E                     
  3562                           ; BSR set to: 0
  3563                           ;main.c: 127:         errCode = touchObject();
  3564  000F4E  EC93  F00F         	call	_touchObject	;wreg free
  3565  000F52  0100               	movlb	0	; () banked
  3566  000F54  6FED               	movwf	executeData@errCode& (0+255),b
  3567  000F56                     
  3568                           ; BSR set to: 0
  3569                           ;main.c: 128:         if(errCode != 0){
  3570  000F56  51ED               	movf	executeData@errCode& (0+255),w,b
  3571  000F58  B4D8               	btfsc	status,2,c
  3572  000F5A  EFB1  F007         	goto	u4071
  3573  000F5E  EFB4  F007         	goto	u4070
  3574  000F62                     u4071:
  3575  000F62  FFFF               	dw	65535	; assembler added errata NOP
  3576  000F64  EFB8  F007         	goto	l4570
  3577  000F68                     u4070:
  3578  000F68                     l4566:
  3579  000F68  FFFF               	dw	65535	; assembler added errata NOP
  3580                           
  3581                           ; BSR set to: 0
  3582                           ;main.c: 129:             return(errCode);
  3583  000F6A  51ED               	movf	executeData@errCode& (0+255),w,b
  3584  000F6C  EF3E  F008         	goto	l346
  3585  000F70                     l4570:
  3586  000F70  FFFF               	dw	65535	; assembler added errata NOP
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;main.c: 132:         pickObject();
  3590  000F72  EC8E  F012         	call	_pickObject	;wreg free
  3591  000F76                     
  3592                           ;main.c: 135:         errCode = liftArm();
  3593  000F76  EC15  F011         	call	_liftArm	;wreg free
  3594  000F7A  0100               	movlb	0	; () banked
  3595  000F7C  6FED               	movwf	executeData@errCode& (0+255),b
  3596  000F7E                     
  3597                           ; BSR set to: 0
  3598                           ;main.c: 136:         if(errCode != 0){
  3599  000F7E  51ED               	movf	executeData@errCode& (0+255),w,b
  3600  000F80  B4D8               	btfsc	status,2,c
  3601  000F82  EFC5  F007         	goto	u4081
  3602  000F86  EFC8  F007         	goto	u4080
  3603  000F8A                     u4081:
  3604  000F8A  FFFF               	dw	65535	; assembler added errata NOP
  3605  000F8C  EFCB  F007         	goto	l4580
  3606  000F90                     u4080:
  3607  000F90  FFFF               	dw	65535	; assembler added errata NOP
  3608  000F92  EFB4  F007         	goto	l4566
  3609  000F96                     l4580:
  3610  000F96  FFFF               	dw	65535	; assembler added errata NOP
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;main.c: 141:         errCode = moveToPoint(posVector[0], posVector[1], data->posX, data
      +                          ->posY);
  3614  000F98  C04C  F015         	movff	_posVector,moveToPoint@x1
  3615  000F9C  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3616  000F9E  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3617  000FA2  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3618  000FA4  EE20 F001          	lfsr	2,1
  3619  000FA8  51EB               	movf	executeData@data& (0+255),w,b
  3620  000FAA  26D9               	addwf	fsr2l,f,c
  3621  000FAC  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3622  000FAE  22DA               	addwfc	fsr2h,f,c
  3623  000FB0  50DF               	movf	indf2,w,c
  3624  000FB2  6FE9               	movwf	??_executeData& (0+255),b
  3625  000FB4  51E9               	movf	??_executeData& (0+255),w,b
  3626  000FB6  6E19               	movwf	moveToPoint@x2^0,c
  3627  000FB8  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3628  000FBA  EE20 F002          	lfsr	2,2
  3629  000FBE  51EB               	movf	executeData@data& (0+255),w,b
  3630  000FC0  26D9               	addwf	fsr2l,f,c
  3631  000FC2  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3632  000FC4  22DA               	addwfc	fsr2h,f,c
  3633  000FC6  50DF               	movf	indf2,w,c
  3634  000FC8  6FEA               	movwf	(??_executeData+1)& (0+255),b
  3635  000FCA  51EA               	movf	(??_executeData+1)& (0+255),w,b
  3636  000FCC  6E1B               	movwf	moveToPoint@y2^0,c
  3637  000FCE  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3638  000FD0  EC24  F005         	call	_moveToPoint	;wreg free
  3639  000FD4  0100               	movlb	0	; () banked
  3640  000FD6  6FED               	movwf	executeData@errCode& (0+255),b
  3641  000FD8                     
  3642                           ; BSR set to: 0
  3643                           ;main.c: 142:         if(errCode != 0){
  3644  000FD8  51ED               	movf	executeData@errCode& (0+255),w,b
  3645  000FDA  B4D8               	btfsc	status,2,c
  3646  000FDC  EFF2  F007         	goto	u4091
  3647  000FE0  EFF5  F007         	goto	u4090
  3648  000FE4                     u4091:
  3649  000FE4  FFFF               	dw	65535	; assembler added errata NOP
  3650  000FE6  EFF8  F007         	goto	l4588
  3651  000FEA                     u4090:
  3652  000FEA  FFFF               	dw	65535	; assembler added errata NOP
  3653  000FEC  EFB4  F007         	goto	l4566
  3654  000FF0                     l4588:
  3655  000FF0  FFFF               	dw	65535	; assembler added errata NOP
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;main.c: 145:         posVector[0] = data->posX;
  3659  000FF2  EE20 F001          	lfsr	2,1
  3660  000FF6  51EB               	movf	executeData@data& (0+255),w,b
  3661  000FF8  26D9               	addwf	fsr2l,f,c
  3662  000FFA  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3663  000FFC  22DA               	addwfc	fsr2h,f,c
  3664  000FFE  50DF               	movf	indf2,w,c
  3665  001000  6E4C               	movwf	_posVector^0,c
  3666                           
  3667                           ;main.c: 146:         posVector[1] = data->posY;
  3668  001002  EE20 F002          	lfsr	2,2
  3669  001006  51EB               	movf	executeData@data& (0+255),w,b
  3670  001008  26D9               	addwf	fsr2l,f,c
  3671  00100A  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3672  00100C  22DA               	addwfc	fsr2h,f,c
  3673  00100E  50DF               	movf	indf2,w,c
  3674  001010  6E4D               	movwf	(_posVector+1)^0,c
  3675                           
  3676                           ;main.c: 149:         rotAngle = data->rotation;
  3677  001012  EE20 F003          	lfsr	2,3
  3678  001016  51EB               	movf	executeData@data& (0+255),w,b
  3679  001018  26D9               	addwf	fsr2l,f,c
  3680  00101A  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3681  00101C  22DA               	addwfc	fsr2h,f,c
  3682  00101E  50DF               	movf	indf2,w,c
  3683  001020  6FE9               	movwf	??_executeData& (0+255),b
  3684  001022  51E9               	movf	??_executeData& (0+255),w,b
  3685  001024  6E57               	movwf	_rotAngle^0,c
  3686  001026  6A58               	clrf	(_rotAngle+1)^0,c
  3687  001028                     
  3688                           ; BSR set to: 0
  3689                           ;main.c: 151:         if(rotAngle < 0){
  3690  001028  BE58               	btfsc	(_rotAngle+1)^0,7,c
  3691  00102A  EF1C  F008         	goto	u4100
  3692  00102E  EF19  F008         	goto	u4101
  3693  001032                     u4101:
  3694  001032  FFFF               	dw	65535	; assembler added errata NOP
  3695  001034  EF21  F008         	goto	l4594
  3696  001038                     u4100:
  3697  001038  FFFF               	dw	65535	; assembler added errata NOP
  3698  00103A                     
  3699                           ; BSR set to: 0
  3700                           ;main.c: 152:             rotAngle += 360;
  3701  00103A  0E68               	movlw	104
  3702  00103C  2657               	addwf	_rotAngle^0,f,c
  3703  00103E  0E01               	movlw	1
  3704  001040  2258               	addwfc	(_rotAngle+1)^0,f,c
  3705  001042                     l4594:
  3706  001042  FFFF               	dw	65535	; assembler added errata NOP
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;main.c: 154:         rotateObj(rotAngle);
  3710  001044  5057               	movf	_rotAngle^0,w,c
  3711  001046  EC1C  F010         	call	_rotateObj
  3712  00104A                     
  3713                           ;main.c: 157:         errCode = touchTherm();
  3714  00104A  EC0A  F00F         	call	_touchTherm	;wreg free
  3715  00104E  0100               	movlb	0	; () banked
  3716  001050  6FED               	movwf	executeData@errCode& (0+255),b
  3717  001052                     
  3718                           ; BSR set to: 0
  3719                           ;main.c: 158:         if(errCode != 0){
  3720  001052  51ED               	movf	executeData@errCode& (0+255),w,b
  3721  001054  B4D8               	btfsc	status,2,c
  3722  001056  EF2F  F008         	goto	u4111
  3723  00105A  EF32  F008         	goto	u4110
  3724  00105E                     u4111:
  3725  00105E  FFFF               	dw	65535	; assembler added errata NOP
  3726  001060  EF35  F008         	goto	l4604
  3727  001064                     u4110:
  3728  001064  FFFF               	dw	65535	; assembler added errata NOP
  3729  001066  EFB4  F007         	goto	l4566
  3730  00106A                     l4604:
  3731  00106A  FFFF               	dw	65535	; assembler added errata NOP
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;main.c: 162:         releaseObj();
  3735  00106C  EC76  F012         	call	_releaseObj	;wreg free
  3736  001070                     
  3737                           ;main.c: 165:         errCode = liftArm();
  3738  001070  EC15  F011         	call	_liftArm	;wreg free
  3739  001074  0100               	movlb	0	; () banked
  3740  001076  6FED               	movwf	executeData@errCode& (0+255),b
  3741  001078  EFB4  F007         	goto	l4566
  3742  00107C                     l346:
  3743  00107C  FFFF               	dw	65535	; assembler added errata NOP
  3744                           
  3745                           ; BSR set to: 0
  3746  00107E  0012               	return		;funcret
  3747  001080  FFFF               	dw	65535	; errata NOP
  3748  001082                     __end_of_executeData:
  3749                           	callstack 0
  3750                           
  3751 ;; *************** function _touchTherm *****************
  3752 ;; Defined at:
  3753 ;;		line 595 in file "motors.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;		None
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;		None
  3758 ;; Return value:  Size  Location     Type
  3759 ;;                  1    wreg      unsigned char 
  3760 ;; Registers used:
  3761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3762 ;; Tracked objects:
  3763 ;;		On entry : 0/0
  3764 ;;		On exit  : 0/0
  3765 ;;		Unchanged: 0/0
  3766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3767 ;;      Params:         0       0       0       0       0       0       0
  3768 ;;      Locals:         0       0       0       0       0       0       0
  3769 ;;      Temps:          0       0       0       0       0       0       0
  3770 ;;      Totals:         0       0       0       0       0       0       0
  3771 ;;Total ram usage:        0 bytes
  3772 ;; Hardware stack levels used:    1
  3773 ;; Hardware stack levels required when called:    5
  3774 ;; This function calls:
  3775 ;;		_resetStep
  3776 ;;		_resetTM0_Temp
  3777 ;;		_resetTM2_Temp
  3778 ;;		_resetTherm
  3779 ;;		_resetTouch
  3780 ;;		_returnTherm
  3781 ;;		_startADC
  3782 ;;		_stepMade
  3783 ;;		_stopADC
  3784 ;; This function is called by:
  3785 ;;		_executeData
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           	psect	text19
  3790  001E14                     __ptext19:
  3791                           	callstack 0
  3792  001E14                     _touchTherm:
  3793                           	callstack 0
  3794  001E14  FFFF               	dw	65535	; assembler added errata NOP
  3795  001E16                     
  3796                           ;motors.c: 601:     motCounter[2][1] = 1;
  3797  001E16  0E01               	movlw	1
  3798  001E18  6E6C               	movwf	(_motCounter+5)^0,c
  3799  001E1A                     
  3800                           ;motors.c: 604:     T2CONbits.TMR2ON = 1;
  3801  001E1A  84CA               	bsf	202,2,c	;volatile
  3802                           
  3803                           ;motors.c: 606:     tm0Error = 0;
  3804  001E1C  0E00               	movlw	0
  3805  001E1E  6E5A               	movwf	(_tm0Error+1)^0,c
  3806  001E20  0E00               	movlw	0
  3807  001E22  6E59               	movwf	_tm0Error^0,c
  3808                           
  3809                           ;motors.c: 607:     tm0Limit = 200;
  3810  001E24  0EC8               	movlw	200
  3811  001E26  6E66               	movwf	_tm0Limit^0,c
  3812  001E28                     
  3813                           ;motors.c: 608:     T0CONbits.TMR0ON = 1;
  3814  001E28  8ED5               	bsf	213,7,c	;volatile
  3815  001E2A                     
  3816                           ;motors.c: 611:     startADC();
  3817  001E2A  EC4A  F013         	call	_startADC	;wreg free
  3818                           
  3819                           ;motors.c: 614:     resetTouch();
  3820  001E2E  EC4F  F013         	call	_resetTouch	;wreg free
  3821                           
  3822                           ;motors.c: 615:     resetTherm();
  3823  001E32  EC54  F013         	call	_resetTherm	;wreg free
  3824                           
  3825                           ;motors.c: 618:     while(!returnTherm() || PORTDbits.RD7){
  3826  001E36  EF5B  F00F         	goto	l4192
  3827  001E3A                     l4176:
  3828  001E3A  FFFF               	dw	65535	; assembler added errata NOP
  3829                           
  3830                           ;motors.c: 620:         resetStep();
  3831  001E3C  EC5E  F013         	call	_resetStep	;wreg free
  3832  001E40                     
  3833                           ;motors.c: 623:         if(tm0Error){
  3834  001E40  5059               	movf	_tm0Error^0,w,c
  3835  001E42  105A               	iorwf	(_tm0Error+1)^0,w,c
  3836  001E44  B4D8               	btfsc	status,2,c
  3837  001E46  EF27  F00F         	goto	u3661
  3838  001E4A  EF2A  F00F         	goto	u3660
  3839  001E4E                     u3661:
  3840  001E4E  FFFF               	dw	65535	; assembler added errata NOP
  3841  001E50  EF31  F00F         	goto	l4182
  3842  001E54                     u3660:
  3843  001E54  FFFF               	dw	65535	; assembler added errata NOP
  3844  001E56                     
  3845                           ;motors.c: 628:             tm0Error = 6;
  3846  001E56  0E00               	movlw	0
  3847  001E58  6E5A               	movwf	(_tm0Error+1)^0,c
  3848  001E5A  0E06               	movlw	6
  3849  001E5C  6E59               	movwf	_tm0Error^0,c
  3850                           
  3851                           ;motors.c: 629:             break;
  3852  001E5E  EF71  F00F         	goto	l4196
  3853  001E62                     l4182:
  3854  001E62  FFFF               	dw	65535	; assembler added errata NOP
  3855                           
  3856                           ;motors.c: 637:             motCounter[2][0] += motCounter[2][1];
  3857  001E64  506C               	movf	(_motCounter+5)^0,w,c
  3858  001E66  266B               	addwf	(_motCounter+4)^0,f,c
  3859                           
  3860                           ;motors.c: 638:             if(motCounter[2][0] > 3){
  3861  001E68  506B               	movf	(_motCounter+4)^0,w,c
  3862  001E6A  0A80               	xorlw	128
  3863  001E6C  0F7C               	addlw	-132
  3864  001E6E  A0D8               	btfss	status,0,c
  3865  001E70  EF3C  F00F         	goto	u3671
  3866  001E74  EF3F  F00F         	goto	u3670
  3867  001E78                     u3671:
  3868  001E78  FFFF               	dw	65535	; assembler added errata NOP
  3869  001E7A  EF42  F00F         	goto	l4186
  3870  001E7E                     u3670:
  3871  001E7E  FFFF               	dw	65535	; assembler added errata NOP
  3872  001E80                     
  3873                           ;motors.c: 639:                 motCounter[2][0] = 0;
  3874  001E80  0E00               	movlw	0
  3875  001E82  6E6B               	movwf	(_motCounter+4)^0,c
  3876  001E84                     l4186:
  3877  001E84  FFFF               	dw	65535	; assembler added errata NOP
  3878                           
  3879                           ;motors.c: 642:             LATC = stepMot3[motCounter[2][0]];
  3880  001E86  0E84               	movlw	low _stepMot3
  3881  001E88  246B               	addwf	(_motCounter+4)^0,w,c
  3882  001E8A  6ED9               	movwf	fsr2l,c
  3883  001E8C  6ADA               	clrf	fsr2h,c
  3884  001E8E  0E00               	movlw	high _stepMot3
  3885  001E90  22DA               	addwfc	fsr2h,f,c
  3886  001E92  50DF               	movf	indf2,w,c
  3887  001E94  6E8B               	movwf	139,c	;volatile
  3888  001E96                     l4188:
  3889  001E96  FFFF               	dw	65535	; assembler added errata NOP
  3890  001E98  ECDB  F012         	call	_stepMade	;wreg free
  3891  001E9C  5012               	movf	?_stepMade^0,w,c
  3892  001E9E  1013               	iorwf	(?_stepMade+1)^0,w,c
  3893  001EA0  B4D8               	btfsc	status,2,c
  3894  001EA2  EF55  F00F         	goto	u3681
  3895  001EA6  EF58  F00F         	goto	u3680
  3896  001EAA                     u3681:
  3897  001EAA  FFFF               	dw	65535	; assembler added errata NOP
  3898  001EAC  EF4B  F00F         	goto	l4188
  3899  001EB0                     u3680:
  3900  001EB0  FFFF               	dw	65535	; assembler added errata NOP
  3901  001EB2                     
  3902                           ;motors.c: 657:         startADC();
  3903  001EB2  EC4A  F013         	call	_startADC	;wreg free
  3904  001EB6                     l4192:
  3905  001EB6  FFFF               	dw	65535	; assembler added errata NOP
  3906                           
  3907                           ;motors.c: 618:     while(!returnTherm() || PORTDbits.RD7){
  3908  001EB8  EC33  F013         	call	_returnTherm	;wreg free
  3909  001EBC  5012               	movf	?_returnTherm^0,w,c
  3910  001EBE  1013               	iorwf	(?_returnTherm+1)^0,w,c
  3911  001EC0  B4D8               	btfsc	status,2,c
  3912  001EC2  EF65  F00F         	goto	u3691
  3913  001EC6  EF68  F00F         	goto	u3690
  3914  001ECA                     u3691:
  3915  001ECA  FFFF               	dw	65535	; assembler added errata NOP
  3916  001ECC  EF1D  F00F         	goto	l4176
  3917  001ED0                     u3690:
  3918  001ED0  FFFF               	dw	65535	; assembler added errata NOP
  3919  001ED2  BE83               	btfsc	131,7,c	;volatile
  3920  001ED4  EF6E  F00F         	goto	u3701
  3921  001ED8  EF71  F00F         	goto	u3700
  3922  001EDC                     u3701:
  3923  001EDC  FFFF               	dw	65535	; assembler added errata NOP
  3924  001EDE  EF1D  F00F         	goto	l4176
  3925  001EE2                     u3700:
  3926  001EE2                     l4196:
  3927  001EE2  FFFF               	dw	65535	; assembler added errata NOP
  3928                           
  3929                           ;motors.c: 663:     stopADC();
  3930  001EE4  EC7E  F013         	call	_stopADC	;wreg free
  3931  001EE8                     
  3932                           ;motors.c: 666:     T0CONbits.TMR0ON = 0;
  3933  001EE8  9ED5               	bcf	213,7,c	;volatile
  3934  001EEA                     
  3935                           ;motors.c: 667:     T2CONbits.TMR2ON = 0;
  3936  001EEA  94CA               	bcf	202,2,c	;volatile
  3937  001EEC                     
  3938                           ;motors.c: 669:     resetTM0_Temp();
  3939  001EEC  EC59  F013         	call	_resetTM0_Temp	;wreg free
  3940  001EF0                     
  3941                           ;motors.c: 670:     resetTM2_Temp();
  3942  001EF0  ECF7  F012         	call	_resetTM2_Temp	;wreg free
  3943  001EF4                     
  3944                           ;motors.c: 672:     TMR0 = 0;
  3945  001EF4  0E00               	movlw	0
  3946  001EF6  6ED7               	movwf	215,c	;volatile
  3947  001EF8  0E00               	movlw	0
  3948  001EFA  6ED6               	movwf	214,c	;volatile
  3949  001EFC                     
  3950                           ;motors.c: 673:     TMR2 = 0;
  3951  001EFC  0E00               	movlw	0
  3952  001EFE  6ECC               	movwf	204,c	;volatile
  3953  001F00                     
  3954                           ;motors.c: 676:     resetStep();
  3955  001F00  EC5E  F013         	call	_resetStep	;wreg free
  3956  001F04                     
  3957                           ;motors.c: 679:     if(PORTDbits.RD7){
  3958  001F04  AE83               	btfss	131,7,c	;volatile
  3959  001F06  EF87  F00F         	goto	u3711
  3960  001F0A  EF8A  F00F         	goto	u3710
  3961  001F0E                     u3711:
  3962  001F0E  FFFF               	dw	65535	; assembler added errata NOP
  3963  001F10  EF8F  F00F         	goto	l210
  3964  001F14                     u3710:
  3965  001F14  FFFF               	dw	65535	; assembler added errata NOP
  3966  001F16                     
  3967                           ;motors.c: 680:         tm0Error = 2;
  3968  001F16  0E00               	movlw	0
  3969  001F18  6E5A               	movwf	(_tm0Error+1)^0,c
  3970  001F1A  0E02               	movlw	2
  3971  001F1C  6E59               	movwf	_tm0Error^0,c
  3972  001F1E                     l210:
  3973  001F1E  FFFF               	dw	65535	; assembler added errata NOP
  3974                           
  3975                           ;motors.c: 683:     return(tm0Error);
  3976  001F20  5059               	movf	_tm0Error^0,w,c
  3977  001F22  0012               	return		;funcret
  3978  001F24  FFFF               	dw	65535	; errata NOP
  3979  001F26                     __end_of_touchTherm:
  3980                           	callstack 0
  3981                           
  3982 ;; *************** function _returnTherm *****************
  3983 ;; Defined at:
  3984 ;;		line 58 in file "adc.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;		None
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;		None
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  2   17[COMRAM] unsigned int 
  3991 ;; Registers used:
  3992 ;;		None
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3998 ;;      Params:         2       0       0       0       0       0       0
  3999 ;;      Locals:         0       0       0       0       0       0       0
  4000 ;;      Temps:          0       0       0       0       0       0       0
  4001 ;;      Totals:         2       0       0       0       0       0       0
  4002 ;;Total ram usage:        2 bytes
  4003 ;; Hardware stack levels used:    1
  4004 ;; Hardware stack levels required when called:    4
  4005 ;; This function calls:
  4006 ;;		Nothing
  4007 ;; This function is called by:
  4008 ;;		_touchTherm
  4009 ;; This function uses a non-reentrant model
  4010 ;;
  4011                           
  4012                           	psect	text20
  4013  002666                     __ptext20:
  4014                           	callstack 0
  4015  002666                     _returnTherm:
  4016                           	callstack 0
  4017  002666  FFFF               	dw	65535	; assembler added errata NOP
  4018  002668                     
  4019                           ;adc.c: 59:     return therm_rel;
  4020  002668  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4021  00266C  6A13               	clrf	(?_returnTherm+1)^0,c
  4022  00266E  0012               	return		;funcret
  4023  002670  FFFF               	dw	65535	; errata NOP
  4024  002672                     __end_of_returnTherm:
  4025                           	callstack 0
  4026                           
  4027 ;; *************** function _touchObject *****************
  4028 ;; Defined at:
  4029 ;;		line 497 in file "motors.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;		None
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;		None
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      unsigned char 
  4036 ;; Registers used:
  4037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4043 ;;      Params:         0       0       0       0       0       0       0
  4044 ;;      Locals:         0       0       0       0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0       0       0
  4046 ;;      Totals:         0       0       0       0       0       0       0
  4047 ;;Total ram usage:        0 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    5
  4050 ;; This function calls:
  4051 ;;		_resetStep
  4052 ;;		_resetTM0_Temp
  4053 ;;		_resetTM2_Temp
  4054 ;;		_resetTherm
  4055 ;;		_resetTouch
  4056 ;;		_returnTouch
  4057 ;;		_startADC
  4058 ;;		_stepMade
  4059 ;;		_stopADC
  4060 ;; This function is called by:
  4061 ;;		_executeData
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           	psect	text21
  4066  001F26                     __ptext21:
  4067                           	callstack 0
  4068  001F26                     _touchObject:
  4069                           	callstack 0
  4070  001F26  FFFF               	dw	65535	; assembler added errata NOP
  4071  001F28                     
  4072                           ;motors.c: 503:     motCounter[2][1] = 1;
  4073  001F28  0E01               	movlw	1
  4074  001F2A  6E6C               	movwf	(_motCounter+5)^0,c
  4075  001F2C                     
  4076                           ;motors.c: 506:     T2CONbits.TMR2ON = 1;
  4077  001F2C  84CA               	bsf	202,2,c	;volatile
  4078                           
  4079                           ;motors.c: 508:     tm0Error = 0;
  4080  001F2E  0E00               	movlw	0
  4081  001F30  6E5A               	movwf	(_tm0Error+1)^0,c
  4082  001F32  0E00               	movlw	0
  4083  001F34  6E59               	movwf	_tm0Error^0,c
  4084                           
  4085                           ;motors.c: 509:     tm0Limit = 200;
  4086  001F36  0EC8               	movlw	200
  4087  001F38  6E66               	movwf	_tm0Limit^0,c
  4088  001F3A                     
  4089                           ;motors.c: 510:     T0CONbits.TMR0ON = 1;
  4090  001F3A  8ED5               	bsf	213,7,c	;volatile
  4091  001F3C                     
  4092                           ;motors.c: 513:     startADC();
  4093  001F3C  EC4A  F013         	call	_startADC	;wreg free
  4094                           
  4095                           ;motors.c: 516:     resetTouch();
  4096  001F40  EC4F  F013         	call	_resetTouch	;wreg free
  4097                           
  4098                           ;motors.c: 517:     resetTherm();
  4099  001F44  EC54  F013         	call	_resetTherm	;wreg free
  4100                           
  4101                           ;motors.c: 520:     while(!returnTouch() || PORTDbits.RD7){
  4102  001F48  EFE4  F00F         	goto	l4142
  4103  001F4C                     l4126:
  4104  001F4C  FFFF               	dw	65535	; assembler added errata NOP
  4105                           
  4106                           ;motors.c: 522:         resetStep();
  4107  001F4E  EC5E  F013         	call	_resetStep	;wreg free
  4108  001F52                     
  4109                           ;motors.c: 525:         if(tm0Error){
  4110  001F52  5059               	movf	_tm0Error^0,w,c
  4111  001F54  105A               	iorwf	(_tm0Error+1)^0,w,c
  4112  001F56  B4D8               	btfsc	status,2,c
  4113  001F58  EFB0  F00F         	goto	u3601
  4114  001F5C  EFB3  F00F         	goto	u3600
  4115  001F60                     u3601:
  4116  001F60  FFFF               	dw	65535	; assembler added errata NOP
  4117  001F62  EFBA  F00F         	goto	l4132
  4118  001F66                     u3600:
  4119  001F66  FFFF               	dw	65535	; assembler added errata NOP
  4120  001F68                     
  4121                           ;motors.c: 530:             tm0Error = 6;
  4122  001F68  0E00               	movlw	0
  4123  001F6A  6E5A               	movwf	(_tm0Error+1)^0,c
  4124  001F6C  0E06               	movlw	6
  4125  001F6E  6E59               	movwf	_tm0Error^0,c
  4126                           
  4127                           ;motors.c: 531:             break;
  4128  001F70  EFFA  F00F         	goto	l4146
  4129  001F74                     l4132:
  4130  001F74  FFFF               	dw	65535	; assembler added errata NOP
  4131                           
  4132                           ;motors.c: 539:             motCounter[2][0] += motCounter[2][1];
  4133  001F76  506C               	movf	(_motCounter+5)^0,w,c
  4134  001F78  266B               	addwf	(_motCounter+4)^0,f,c
  4135                           
  4136                           ;motors.c: 540:             if(motCounter[2][0] > 3){
  4137  001F7A  506B               	movf	(_motCounter+4)^0,w,c
  4138  001F7C  0A80               	xorlw	128
  4139  001F7E  0F7C               	addlw	-132
  4140  001F80  A0D8               	btfss	status,0,c
  4141  001F82  EFC5  F00F         	goto	u3611
  4142  001F86  EFC8  F00F         	goto	u3610
  4143  001F8A                     u3611:
  4144  001F8A  FFFF               	dw	65535	; assembler added errata NOP
  4145  001F8C  EFCB  F00F         	goto	l4136
  4146  001F90                     u3610:
  4147  001F90  FFFF               	dw	65535	; assembler added errata NOP
  4148  001F92                     
  4149                           ;motors.c: 541:                 motCounter[2][0] = 0;
  4150  001F92  0E00               	movlw	0
  4151  001F94  6E6B               	movwf	(_motCounter+4)^0,c
  4152  001F96                     l4136:
  4153  001F96  FFFF               	dw	65535	; assembler added errata NOP
  4154                           
  4155                           ;motors.c: 544:             LATC = stepMot3[motCounter[2][0]];
  4156  001F98  0E84               	movlw	low _stepMot3
  4157  001F9A  246B               	addwf	(_motCounter+4)^0,w,c
  4158  001F9C  6ED9               	movwf	fsr2l,c
  4159  001F9E  6ADA               	clrf	fsr2h,c
  4160  001FA0  0E00               	movlw	high _stepMot3
  4161  001FA2  22DA               	addwfc	fsr2h,f,c
  4162  001FA4  50DF               	movf	indf2,w,c
  4163  001FA6  6E8B               	movwf	139,c	;volatile
  4164  001FA8                     l4138:
  4165  001FA8  FFFF               	dw	65535	; assembler added errata NOP
  4166  001FAA  ECDB  F012         	call	_stepMade	;wreg free
  4167  001FAE  5012               	movf	?_stepMade^0,w,c
  4168  001FB0  1013               	iorwf	(?_stepMade+1)^0,w,c
  4169  001FB2  B4D8               	btfsc	status,2,c
  4170  001FB4  EFDE  F00F         	goto	u3621
  4171  001FB8  EFE1  F00F         	goto	u3620
  4172  001FBC                     u3621:
  4173  001FBC  FFFF               	dw	65535	; assembler added errata NOP
  4174  001FBE  EFD4  F00F         	goto	l4138
  4175  001FC2                     u3620:
  4176  001FC2  FFFF               	dw	65535	; assembler added errata NOP
  4177  001FC4                     
  4178                           ;motors.c: 558:         startADC();
  4179  001FC4  EC4A  F013         	call	_startADC	;wreg free
  4180  001FC8                     l4142:
  4181  001FC8  FFFF               	dw	65535	; assembler added errata NOP
  4182                           
  4183                           ;motors.c: 520:     while(!returnTouch() || PORTDbits.RD7){
  4184  001FCA  EC39  F013         	call	_returnTouch	;wreg free
  4185  001FCE  5012               	movf	?_returnTouch^0,w,c
  4186  001FD0  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4187  001FD2  B4D8               	btfsc	status,2,c
  4188  001FD4  EFEE  F00F         	goto	u3631
  4189  001FD8  EFF1  F00F         	goto	u3630
  4190  001FDC                     u3631:
  4191  001FDC  FFFF               	dw	65535	; assembler added errata NOP
  4192  001FDE  EFA6  F00F         	goto	l4126
  4193  001FE2                     u3630:
  4194  001FE2  FFFF               	dw	65535	; assembler added errata NOP
  4195  001FE4  BE83               	btfsc	131,7,c	;volatile
  4196  001FE6  EFF7  F00F         	goto	u3641
  4197  001FEA  EFFA  F00F         	goto	u3640
  4198  001FEE                     u3641:
  4199  001FEE  FFFF               	dw	65535	; assembler added errata NOP
  4200  001FF0  EFA6  F00F         	goto	l4126
  4201  001FF4                     u3640:
  4202  001FF4                     l4146:
  4203  001FF4  FFFF               	dw	65535	; assembler added errata NOP
  4204                           
  4205                           ;motors.c: 563:     stopADC();
  4206  001FF6  EC7E  F013         	call	_stopADC	;wreg free
  4207  001FFA                     
  4208                           ;motors.c: 566:     T0CONbits.TMR0ON = 0;
  4209  001FFA  9ED5               	bcf	213,7,c	;volatile
  4210  001FFC                     
  4211                           ;motors.c: 567:     T2CONbits.TMR2ON = 0;
  4212  001FFC  94CA               	bcf	202,2,c	;volatile
  4213  001FFE                     
  4214                           ;motors.c: 569:     resetTM0_Temp();
  4215  001FFE  EC59  F013         	call	_resetTM0_Temp	;wreg free
  4216  002002                     
  4217                           ;motors.c: 570:     resetTM2_Temp();
  4218  002002  ECF7  F012         	call	_resetTM2_Temp	;wreg free
  4219  002006                     
  4220                           ;motors.c: 572:     TMR0 = 0;
  4221  002006  0E00               	movlw	0
  4222  002008  6ED7               	movwf	215,c	;volatile
  4223  00200A  0E00               	movlw	0
  4224  00200C  6ED6               	movwf	214,c	;volatile
  4225  00200E                     
  4226                           ;motors.c: 573:     TMR2 = 0;
  4227  00200E  0E00               	movlw	0
  4228  002010  6ECC               	movwf	204,c	;volatile
  4229  002012                     
  4230                           ;motors.c: 576:     resetStep();
  4231  002012  EC5E  F013         	call	_resetStep	;wreg free
  4232  002016                     
  4233                           ;motors.c: 579:     if(PORTDbits.RD7){
  4234  002016  AE83               	btfss	131,7,c	;volatile
  4235  002018  EF10  F010         	goto	u3651
  4236  00201C  EF13  F010         	goto	u3650
  4237  002020                     u3651:
  4238  002020  FFFF               	dw	65535	; assembler added errata NOP
  4239  002022  EF18  F010         	goto	l198
  4240  002026                     u3650:
  4241  002026  FFFF               	dw	65535	; assembler added errata NOP
  4242  002028                     
  4243                           ;motors.c: 580:         tm0Error = 2;
  4244  002028  0E00               	movlw	0
  4245  00202A  6E5A               	movwf	(_tm0Error+1)^0,c
  4246  00202C  0E02               	movlw	2
  4247  00202E  6E59               	movwf	_tm0Error^0,c
  4248  002030                     l198:
  4249  002030  FFFF               	dw	65535	; assembler added errata NOP
  4250                           
  4251                           ;motors.c: 583:     return(tm0Error);
  4252  002032  5059               	movf	_tm0Error^0,w,c
  4253  002034  0012               	return		;funcret
  4254  002036  FFFF               	dw	65535	; errata NOP
  4255  002038                     __end_of_touchObject:
  4256                           	callstack 0
  4257                           
  4258 ;; *************** function _stopADC *****************
  4259 ;; Defined at:
  4260 ;;		line 44 in file "adc.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;		None
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;		None
  4265 ;; Return value:  Size  Location     Type
  4266 ;;                  1    wreg      void 
  4267 ;; Registers used:
  4268 ;;		None
  4269 ;; Tracked objects:
  4270 ;;		On entry : 0/0
  4271 ;;		On exit  : 0/0
  4272 ;;		Unchanged: 0/0
  4273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4274 ;;      Params:         0       0       0       0       0       0       0
  4275 ;;      Locals:         0       0       0       0       0       0       0
  4276 ;;      Temps:          0       0       0       0       0       0       0
  4277 ;;      Totals:         0       0       0       0       0       0       0
  4278 ;;Total ram usage:        0 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; Hardware stack levels required when called:    4
  4281 ;; This function calls:
  4282 ;;		Nothing
  4283 ;; This function is called by:
  4284 ;;		_touchObject
  4285 ;;		_touchTherm
  4286 ;; This function uses a non-reentrant model
  4287 ;;
  4288                           
  4289                           	psect	text22
  4290  0026FC                     __ptext22:
  4291                           	callstack 0
  4292  0026FC                     _stopADC:
  4293                           	callstack 0
  4294  0026FC  FFFF               	dw	65535	; assembler added errata NOP
  4295  0026FE                     
  4296                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4297  0026FE  90C2               	bcf	194,0,c	;volatile
  4298  002700  0012               	return		;funcret
  4299  002702  FFFF               	dw	65535	; errata NOP
  4300  002704                     __end_of_stopADC:
  4301                           	callstack 0
  4302                           
  4303 ;; *************** function _startADC *****************
  4304 ;; Defined at:
  4305 ;;		line 36 in file "adc.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;		None
  4308 ;; Auto vars:     Size  Location     Type
  4309 ;;		None
  4310 ;; Return value:  Size  Location     Type
  4311 ;;                  1    wreg      void 
  4312 ;; Registers used:
  4313 ;;		None
  4314 ;; Tracked objects:
  4315 ;;		On entry : 0/0
  4316 ;;		On exit  : 0/0
  4317 ;;		Unchanged: 0/0
  4318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4319 ;;      Params:         0       0       0       0       0       0       0
  4320 ;;      Locals:         0       0       0       0       0       0       0
  4321 ;;      Temps:          0       0       0       0       0       0       0
  4322 ;;      Totals:         0       0       0       0       0       0       0
  4323 ;;Total ram usage:        0 bytes
  4324 ;; Hardware stack levels used:    1
  4325 ;; Hardware stack levels required when called:    4
  4326 ;; This function calls:
  4327 ;;		Nothing
  4328 ;; This function is called by:
  4329 ;;		_touchObject
  4330 ;;		_touchTherm
  4331 ;; This function uses a non-reentrant model
  4332 ;;
  4333                           
  4334                           	psect	text23
  4335  002694                     __ptext23:
  4336                           	callstack 0
  4337  002694                     _startADC:
  4338                           	callstack 0
  4339  002694  FFFF               	dw	65535	; assembler added errata NOP
  4340  002696                     
  4341                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4342  002696  80C2               	bsf	194,0,c	;volatile
  4343                           
  4344                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4345  002698  84C2               	bsf	194,2,c	;volatile
  4346  00269A  0012               	return		;funcret
  4347  00269C  FFFF               	dw	65535	; errata NOP
  4348  00269E                     __end_of_startADC:
  4349                           	callstack 0
  4350                           
  4351 ;; *************** function _returnTouch *****************
  4352 ;; Defined at:
  4353 ;;		line 51 in file "adc.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;		None
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;		None
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  2   17[COMRAM] unsigned int 
  4360 ;; Registers used:
  4361 ;;		None
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4367 ;;      Params:         2       0       0       0       0       0       0
  4368 ;;      Locals:         0       0       0       0       0       0       0
  4369 ;;      Temps:          0       0       0       0       0       0       0
  4370 ;;      Totals:         2       0       0       0       0       0       0
  4371 ;;Total ram usage:        2 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    4
  4374 ;; This function calls:
  4375 ;;		Nothing
  4376 ;; This function is called by:
  4377 ;;		_touchObject
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           	psect	text24
  4382  002672                     __ptext24:
  4383                           	callstack 0
  4384  002672                     _returnTouch:
  4385                           	callstack 0
  4386  002672  FFFF               	dw	65535	; assembler added errata NOP
  4387  002674                     
  4388                           ;adc.c: 52:     return touch_rel;
  4389  002674  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4390  002678  6A13               	clrf	(?_returnTouch+1)^0,c
  4391  00267A  0012               	return		;funcret
  4392  00267C  FFFF               	dw	65535	; errata NOP
  4393  00267E                     __end_of_returnTouch:
  4394                           	callstack 0
  4395                           
  4396 ;; *************** function _resetTouch *****************
  4397 ;; Defined at:
  4398 ;;		line 65 in file "adc.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;		None
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      void 
  4405 ;; Registers used:
  4406 ;;		wreg, status,2
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4412 ;;      Params:         0       0       0       0       0       0       0
  4413 ;;      Locals:         0       0       0       0       0       0       0
  4414 ;;      Temps:          0       0       0       0       0       0       0
  4415 ;;      Totals:         0       0       0       0       0       0       0
  4416 ;;Total ram usage:        0 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    4
  4419 ;; This function calls:
  4420 ;;		Nothing
  4421 ;; This function is called by:
  4422 ;;		_touchObject
  4423 ;;		_touchTherm
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           	psect	text25
  4428  00269E                     __ptext25:
  4429                           	callstack 0
  4430  00269E                     _resetTouch:
  4431                           	callstack 0
  4432  00269E  FFFF               	dw	65535	; assembler added errata NOP
  4433  0026A0                     
  4434                           ;adc.c: 66:     touch_rel = 0;
  4435  0026A0  0E00               	movlw	0
  4436  0026A2  6E65               	movwf	_touch_rel^0,c	;volatile
  4437  0026A4  0012               	return		;funcret
  4438  0026A6  FFFF               	dw	65535	; errata NOP
  4439  0026A8                     __end_of_resetTouch:
  4440                           	callstack 0
  4441                           
  4442 ;; *************** function _resetTherm *****************
  4443 ;; Defined at:
  4444 ;;		line 72 in file "adc.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;		None
  4447 ;; Auto vars:     Size  Location     Type
  4448 ;;		None
  4449 ;; Return value:  Size  Location     Type
  4450 ;;                  1    wreg      void 
  4451 ;; Registers used:
  4452 ;;		wreg, status,2
  4453 ;; Tracked objects:
  4454 ;;		On entry : 0/0
  4455 ;;		On exit  : 0/0
  4456 ;;		Unchanged: 0/0
  4457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4458 ;;      Params:         0       0       0       0       0       0       0
  4459 ;;      Locals:         0       0       0       0       0       0       0
  4460 ;;      Temps:          0       0       0       0       0       0       0
  4461 ;;      Totals:         0       0       0       0       0       0       0
  4462 ;;Total ram usage:        0 bytes
  4463 ;; Hardware stack levels used:    1
  4464 ;; Hardware stack levels required when called:    4
  4465 ;; This function calls:
  4466 ;;		Nothing
  4467 ;; This function is called by:
  4468 ;;		_touchObject
  4469 ;;		_touchTherm
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           	psect	text26
  4474  0026A8                     __ptext26:
  4475                           	callstack 0
  4476  0026A8                     _resetTherm:
  4477                           	callstack 0
  4478  0026A8  FFFF               	dw	65535	; assembler added errata NOP
  4479  0026AA                     
  4480                           ;adc.c: 73:     therm_rel = 0;
  4481  0026AA  0E00               	movlw	0
  4482  0026AC  6E64               	movwf	_therm_rel^0,c	;volatile
  4483  0026AE  0012               	return		;funcret
  4484  0026B0  FFFF               	dw	65535	; errata NOP
  4485  0026B2                     __end_of_resetTherm:
  4486                           	callstack 0
  4487                           
  4488 ;; *************** function _rotateObj *****************
  4489 ;; Defined at:
  4490 ;;		line 768 in file "motors.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;  rotAngle        1    wreg     unsigned char 
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;  rotAngle        1    0[BANK0 ] unsigned char 
  4495 ;;  c               2    5[BANK0 ] unsigned int 
  4496 ;;  i               2    3[BANK0 ] unsigned int 
  4497 ;;  totStep         2    1[BANK0 ] int 
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  1    wreg      void 
  4500 ;; Registers used:
  4501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4507 ;;      Params:         0       0       0       0       0       0       0
  4508 ;;      Locals:         0       7       0       0       0       0       0
  4509 ;;      Temps:          0       0       0       0       0       0       0
  4510 ;;      Totals:         0       7       0       0       0       0       0
  4511 ;;Total ram usage:        7 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:    5
  4514 ;; This function calls:
  4515 ;;		___fldiv
  4516 ;;		___fltol
  4517 ;;		___xxtofl
  4518 ;;		_resetStep
  4519 ;;		_resetTM2_Temp
  4520 ;;		_stepMade
  4521 ;; This function is called by:
  4522 ;;		_executeData
  4523 ;; This function uses a non-reentrant model
  4524 ;;
  4525                           
  4526                           	psect	text27
  4527  002038                     __ptext27:
  4528                           	callstack 0
  4529  002038                     _rotateObj:
  4530                           	callstack 0
  4531  002038  FFFF               	dw	65535	; assembler added errata NOP
  4532                           
  4533                           ;incstack = 0
  4534                           ;rotateObj@rotAngle stored from wreg
  4535  00203A  0100               	movlb	0	; () banked
  4536  00203C  6FE2               	movwf	rotateObj@rotAngle& (0+255),b
  4537  00203E                     
  4538                           ;motors.c: 770:     static const float stepAngle = 2;;motors.c: 771:     static char rot
      +                          Sequence[] = {0b100100, 0b001100, 0b011000, 0b110000};;motors.c: 772:     unsigned int i
      +                          , c = 0;
  4539  00203E  0E00               	movlw	0
  4540  002040  0100               	movlb	0	; () banked
  4541  002042  6FE8               	movwf	(rotateObj@c+1)& (0+255),b
  4542  002044  0E00               	movlw	0
  4543  002046  6FE7               	movwf	rotateObj@c& (0+255),b
  4544  002048                     
  4545                           ; BSR set to: 0
  4546                           ;motors.c: 773:     int totStep = rotAngle/stepAngle;
  4547  002048  0E00               	movlw	0
  4548  00204A  6E24               	movwf	___fldiv@a^0,c
  4549  00204C  0E00               	movlw	0
  4550  00204E  6E25               	movwf	(___fldiv@a+1)^0,c
  4551  002050  0E00               	movlw	0
  4552  002052  6E26               	movwf	(___fldiv@a+2)^0,c
  4553  002054  0E40               	movlw	64
  4554  002056  6E27               	movwf	(___fldiv@a+3)^0,c
  4555  002058  51E2               	movf	rotateObj@rotAngle& (0+255),w,b
  4556  00205A  6E12               	movwf	___xxtofl@val^0,c
  4557  00205C  6A13               	clrf	(___xxtofl@val+1)^0,c
  4558  00205E  6A14               	clrf	(___xxtofl@val+2)^0,c
  4559  002060  6A15               	clrf	(___xxtofl@val+3)^0,c
  4560  002062  0E01               	movlw	1
  4561  002064  ECC9  F00A         	call	___xxtofl
  4562  002068  C012  F020         	movff	?___xxtofl,___fldiv@b
  4563  00206C  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4564  002070  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4565  002074  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4566  002078  EC0B  F003         	call	___fldiv	;wreg free
  4567  00207C  C020  F039         	movff	?___fldiv,___fltol@f1
  4568  002080  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4569  002084  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4570  002088  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4571  00208C  EC53  F00D         	call	___fltol	;wreg free
  4572  002090  C039  F0E3         	movff	?___fltol,rotateObj@totStep
  4573  002094  C03A  F0E4         	movff	?___fltol+1,rotateObj@totStep+1
  4574  002098                     
  4575                           ;motors.c: 776:     for(i = 0; i < totStep; i++){
  4576  002098  0E00               	movlw	0
  4577  00209A  0100               	movlb	0	; () banked
  4578  00209C  6FE6               	movwf	(rotateObj@i+1)& (0+255),b
  4579  00209E  0E00               	movlw	0
  4580  0020A0  6FE5               	movwf	rotateObj@i& (0+255),b
  4581  0020A2  EF85  F010         	goto	l4270
  4582  0020A6                     l4254:
  4583  0020A6  FFFF               	dw	65535	; assembler added errata NOP
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;motors.c: 780:         LATD = rotSequence[c];
  4587  0020A8  0E80               	movlw	low rotateObj@rotSequence
  4588  0020AA  25E7               	addwf	rotateObj@c& (0+255),w,b
  4589  0020AC  6ED9               	movwf	fsr2l,c
  4590  0020AE  0E00               	movlw	high rotateObj@rotSequence
  4591  0020B0  21E8               	addwfc	(rotateObj@c+1)& (0+255),w,b
  4592  0020B2  6EDA               	movwf	fsr2h,c
  4593  0020B4  50DF               	movf	indf2,w,c
  4594  0020B6  6E8C               	movwf	140,c	;volatile
  4595  0020B8                     
  4596                           ; BSR set to: 0
  4597                           ;motors.c: 782:         c++;
  4598  0020B8  4BE7               	infsnz	rotateObj@c& (0+255),f,b
  4599  0020BA  2BE8               	incf	(rotateObj@c+1)& (0+255),f,b
  4600  0020BC                     
  4601                           ; BSR set to: 0
  4602                           ;motors.c: 783:         if (c >= 4) {c = 0;}
  4603  0020BC  51E8               	movf	(rotateObj@c+1)& (0+255),w,b
  4604  0020BE  E10A               	bnz	u3760
  4605  0020C0  0E04               	movlw	4
  4606  0020C2  5DE7               	subwf	rotateObj@c& (0+255),w,b
  4607  0020C4  A0D8               	btfss	status,0,c
  4608  0020C6  EF67  F010         	goto	u3761
  4609  0020CA  EF6A  F010         	goto	u3760
  4610  0020CE                     u3761:
  4611  0020CE  FFFF               	dw	65535	; assembler added errata NOP
  4612  0020D0  EF6F  F010         	goto	l4262
  4613  0020D4                     u3760:
  4614  0020D4  FFFF               	dw	65535	; assembler added errata NOP
  4615  0020D6                     
  4616                           ; BSR set to: 0
  4617  0020D6  0E00               	movlw	0
  4618  0020D8  6FE8               	movwf	(rotateObj@c+1)& (0+255),b
  4619  0020DA  0E00               	movlw	0
  4620  0020DC  6FE7               	movwf	rotateObj@c& (0+255),b
  4621  0020DE                     l4262:
  4622  0020DE  FFFF               	dw	65535	; assembler added errata NOP
  4623                           
  4624                           ; BSR set to: 0
  4625                           ;motors.c: 786:         T2CONbits.TMR2ON = 1;
  4626  0020E0  84CA               	bsf	202,2,c	;volatile
  4627  0020E2                     l4264:
  4628  0020E2  FFFF               	dw	65535	; assembler added errata NOP
  4629  0020E4  ECDB  F012         	call	_stepMade	;wreg free
  4630  0020E8  5012               	movf	?_stepMade^0,w,c
  4631  0020EA  1013               	iorwf	(?_stepMade+1)^0,w,c
  4632  0020EC  B4D8               	btfsc	status,2,c
  4633  0020EE  EF7B  F010         	goto	u3771
  4634  0020F2  EF7E  F010         	goto	u3770
  4635  0020F6                     u3771:
  4636  0020F6  FFFF               	dw	65535	; assembler added errata NOP
  4637  0020F8  EF71  F010         	goto	l4264
  4638  0020FC                     u3770:
  4639  0020FC  FFFF               	dw	65535	; assembler added errata NOP
  4640  0020FE                     
  4641                           ;motors.c: 788:         T2CONbits.TMR2ON = 0;
  4642  0020FE  94CA               	bcf	202,2,c	;volatile
  4643  002100                     
  4644                           ;motors.c: 789:         TMR2 = 0;
  4645  002100  0E00               	movlw	0
  4646  002102  6ECC               	movwf	204,c	;volatile
  4647  002104                     
  4648                           ;motors.c: 790:     }
  4649  002104  0100               	movlb	0	; () banked
  4650  002106  4BE5               	infsnz	rotateObj@i& (0+255),f,b
  4651  002108  2BE6               	incf	(rotateObj@i+1)& (0+255),f,b
  4652  00210A                     l4270:
  4653  00210A  FFFF               	dw	65535	; assembler added errata NOP
  4654                           
  4655                           ; BSR set to: 0
  4656  00210C  51E3               	movf	rotateObj@totStep& (0+255),w,b
  4657  00210E  5DE5               	subwf	rotateObj@i& (0+255),w,b
  4658  002110  51E4               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4659  002112  59E6               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4660  002114  A0D8               	btfss	status,0,c
  4661  002116  EF8F  F010         	goto	u3781
  4662  00211A  EF92  F010         	goto	u3780
  4663  00211E                     u3781:
  4664  00211E  FFFF               	dw	65535	; assembler added errata NOP
  4665  002120  EF53  F010         	goto	l4254
  4666  002124                     u3780:
  4667  002124  FFFF               	dw	65535	; assembler added errata NOP
  4668  002126                     
  4669                           ; BSR set to: 0
  4670                           ;motors.c: 793:     resetTM2_Temp();
  4671  002126  ECF7  F012         	call	_resetTM2_Temp	;wreg free
  4672                           
  4673                           ;motors.c: 796:     resetStep();
  4674  00212A  EC5E  F013         	call	_resetStep	;wreg free
  4675  00212E  0012               	return		;funcret
  4676  002130  FFFF               	dw	65535	; errata NOP
  4677  002132                     __end_of_rotateObj:
  4678                           	callstack 0
  4679                           
  4680 ;; *************** function ___xxtofl *****************
  4681 ;; Defined at:
  4682 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;  sign            1    wreg     unsigned char 
  4685 ;;  val             4   17[COMRAM] long 
  4686 ;; Auto vars:     Size  Location     Type
  4687 ;;  sign            1   25[COMRAM] unsigned char 
  4688 ;;  arg             4   27[COMRAM] unsigned long 
  4689 ;;  exp             1   26[COMRAM] unsigned char 
  4690 ;; Return value:  Size  Location     Type
  4691 ;;                  4   17[COMRAM] unsigned char 
  4692 ;; Registers used:
  4693 ;;		wreg, status,2, status,0
  4694 ;; Tracked objects:
  4695 ;;		On entry : 0/0
  4696 ;;		On exit  : 0/0
  4697 ;;		Unchanged: 0/0
  4698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4699 ;;      Params:         4       0       0       0       0       0       0
  4700 ;;      Locals:         6       0       0       0       0       0       0
  4701 ;;      Temps:          4       0       0       0       0       0       0
  4702 ;;      Totals:        14       0       0       0       0       0       0
  4703 ;;Total ram usage:       14 bytes
  4704 ;; Hardware stack levels used:    1
  4705 ;; Hardware stack levels required when called:    4
  4706 ;; This function calls:
  4707 ;;		Nothing
  4708 ;; This function is called by:
  4709 ;;		_rotateObj
  4710 ;; This function uses a non-reentrant model
  4711 ;;
  4712                           
  4713                           	psect	text28
  4714  001592                     __ptext28:
  4715                           	callstack 0
  4716  001592                     ___xxtofl:
  4717                           	callstack 0
  4718  001592  FFFF               	dw	65535	; assembler added errata NOP
  4719                           
  4720                           ;incstack = 0
  4721                           ;___xxtofl@sign stored from wreg
  4722  001594  6E1A               	movwf	___xxtofl@sign^0,c
  4723  001596  501A               	movf	___xxtofl@sign^0,w,c
  4724  001598  B4D8               	btfsc	status,2,c
  4725  00159A  EFD1  F00A         	goto	u3281
  4726  00159E  EFD4  F00A         	goto	u3280
  4727  0015A2                     u3281:
  4728  0015A2  FFFF               	dw	65535	; assembler added errata NOP
  4729  0015A4  EFF9  F00A         	goto	l1296
  4730  0015A8                     u3280:
  4731  0015A8  FFFF               	dw	65535	; assembler added errata NOP
  4732  0015AA  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4733  0015AC  EFDD  F00A         	goto	u3290
  4734  0015B0  EFDA  F00A         	goto	u3291
  4735  0015B4                     u3291:
  4736  0015B4  FFFF               	dw	65535	; assembler added errata NOP
  4737  0015B6  EFF9  F00A         	goto	l1296
  4738  0015BA                     u3290:
  4739  0015BA  FFFF               	dw	65535	; assembler added errata NOP
  4740  0015BC  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4741  0015C0  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4742  0015C4  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4743  0015C8  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4744  0015CC  1E16               	comf	??___xxtofl^0,f,c
  4745  0015CE  1E17               	comf	(??___xxtofl+1)^0,f,c
  4746  0015D0  1E18               	comf	(??___xxtofl+2)^0,f,c
  4747  0015D2  1E19               	comf	(??___xxtofl+3)^0,f,c
  4748  0015D4  2A16               	incf	??___xxtofl^0,f,c
  4749  0015D6  0E00               	movlw	0
  4750  0015D8  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4751  0015DA  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4752  0015DC  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4753  0015DE  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4754  0015E2  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4755  0015E6  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4756  0015EA  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4757  0015EE  EF02  F00B         	goto	l3986
  4758  0015F2                     l1296:
  4759  0015F2  FFFF               	dw	65535	; assembler added errata NOP
  4760  0015F4  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4761  0015F8  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4762  0015FC  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4763  001600  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4764  001604                     l3986:
  4765  001604  FFFF               	dw	65535	; assembler added errata NOP
  4766  001606  5012               	movf	___xxtofl@val^0,w,c
  4767  001608  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4768  00160A  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4769  00160C  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4770  00160E  A4D8               	btfss	status,2,c
  4771  001610  EF0C  F00B         	goto	u3301
  4772  001614  EF0F  F00B         	goto	u3300
  4773  001618                     u3301:
  4774  001618  FFFF               	dw	65535	; assembler added errata NOP
  4775  00161A  EF1A  F00B         	goto	l3992
  4776  00161E                     u3300:
  4777  00161E  FFFF               	dw	65535	; assembler added errata NOP
  4778  001620  0E00               	movlw	0
  4779  001622  6E12               	movwf	?___xxtofl^0,c
  4780  001624  0E00               	movlw	0
  4781  001626  6E13               	movwf	(?___xxtofl+1)^0,c
  4782  001628  0E00               	movlw	0
  4783  00162A  6E14               	movwf	(?___xxtofl+2)^0,c
  4784  00162C  0E00               	movlw	0
  4785  00162E  6E15               	movwf	(?___xxtofl+3)^0,c
  4786  001630  EFC2  F00B         	goto	l1299
  4787  001634                     l3992:
  4788  001634  FFFF               	dw	65535	; assembler added errata NOP
  4789  001636  0E96               	movlw	150
  4790  001638  6E1B               	movwf	___xxtofl@exp^0,c
  4791  00163A  EF26  F00B         	goto	l3996
  4792  00163E                     l3994:
  4793  00163E  FFFF               	dw	65535	; assembler added errata NOP
  4794  001640  2A1B               	incf	___xxtofl@exp^0,f,c
  4795  001642  90D8               	bcf	status,0,c
  4796  001644  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4797  001646  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4798  001648  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4799  00164A  321C               	rrcf	___xxtofl@arg^0,f,c
  4800  00164C                     l3996:
  4801  00164C  FFFF               	dw	65535	; assembler added errata NOP
  4802  00164E  0E00               	movlw	0
  4803  001650  141C               	andwf	___xxtofl@arg^0,w,c
  4804  001652  6E16               	movwf	??___xxtofl^0,c
  4805  001654  0E00               	movlw	0
  4806  001656  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4807  001658  6E17               	movwf	(??___xxtofl+1)^0,c
  4808  00165A  0E00               	movlw	0
  4809  00165C  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4810  00165E  6E18               	movwf	(??___xxtofl+2)^0,c
  4811  001660  0EFE               	movlw	254
  4812  001662  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4813  001664  6E19               	movwf	(??___xxtofl+3)^0,c
  4814  001666  5016               	movf	??___xxtofl^0,w,c
  4815  001668  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4816  00166A  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4817  00166C  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4818  00166E  A4D8               	btfss	status,2,c
  4819  001670  EF3C  F00B         	goto	u3311
  4820  001674  EF3F  F00B         	goto	u3310
  4821  001678                     u3311:
  4822  001678  FFFF               	dw	65535	; assembler added errata NOP
  4823  00167A  EF1F  F00B         	goto	l3994
  4824  00167E                     u3310:
  4825  00167E  FFFF               	dw	65535	; assembler added errata NOP
  4826  001680  EF4F  F00B         	goto	l1303
  4827  001684                     l3998:
  4828  001684  FFFF               	dw	65535	; assembler added errata NOP
  4829  001686  2A1B               	incf	___xxtofl@exp^0,f,c
  4830  001688  0E01               	movlw	1
  4831  00168A  261C               	addwf	___xxtofl@arg^0,f,c
  4832  00168C  0E00               	movlw	0
  4833  00168E  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4834  001690  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4835  001692  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4836  001694  90D8               	bcf	status,0,c
  4837  001696  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4838  001698  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4839  00169A  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4840  00169C  321C               	rrcf	___xxtofl@arg^0,f,c
  4841  00169E                     l1303:
  4842  00169E  FFFF               	dw	65535	; assembler added errata NOP
  4843  0016A0  0E00               	movlw	0
  4844  0016A2  141C               	andwf	___xxtofl@arg^0,w,c
  4845  0016A4  6E16               	movwf	??___xxtofl^0,c
  4846  0016A6  0E00               	movlw	0
  4847  0016A8  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4848  0016AA  6E17               	movwf	(??___xxtofl+1)^0,c
  4849  0016AC  0E00               	movlw	0
  4850  0016AE  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4851  0016B0  6E18               	movwf	(??___xxtofl+2)^0,c
  4852  0016B2  0EFF               	movlw	255
  4853  0016B4  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4854  0016B6  6E19               	movwf	(??___xxtofl+3)^0,c
  4855  0016B8  5016               	movf	??___xxtofl^0,w,c
  4856  0016BA  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4857  0016BC  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4858  0016BE  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4859  0016C0  A4D8               	btfss	status,2,c
  4860  0016C2  EF65  F00B         	goto	u3321
  4861  0016C6  EF68  F00B         	goto	u3320
  4862  0016CA                     u3321:
  4863  0016CA  FFFF               	dw	65535	; assembler added errata NOP
  4864  0016CC  EF42  F00B         	goto	l3998
  4865  0016D0                     u3320:
  4866  0016D0  FFFF               	dw	65535	; assembler added errata NOP
  4867  0016D2  EF72  F00B         	goto	l4006
  4868  0016D6                     l4004:
  4869  0016D6  FFFF               	dw	65535	; assembler added errata NOP
  4870  0016D8  061B               	decf	___xxtofl@exp^0,f,c
  4871  0016DA  90D8               	bcf	status,0,c
  4872  0016DC  361C               	rlcf	___xxtofl@arg^0,f,c
  4873  0016DE  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4874  0016E0  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4875  0016E2  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4876  0016E4                     l4006:
  4877  0016E4  FFFF               	dw	65535	; assembler added errata NOP
  4878  0016E6  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4879  0016E8  EF78  F00B         	goto	u3331
  4880  0016EC  EF7B  F00B         	goto	u3330
  4881  0016F0                     u3331:
  4882  0016F0  FFFF               	dw	65535	; assembler added errata NOP
  4883  0016F2  EF85  F00B         	goto	l1310
  4884  0016F6                     u3330:
  4885  0016F6  FFFF               	dw	65535	; assembler added errata NOP
  4886  0016F8  0E02               	movlw	2
  4887  0016FA  601B               	cpfslt	___xxtofl@exp^0,c
  4888  0016FC  EF82  F00B         	goto	u3341
  4889  001700  EF85  F00B         	goto	u3340
  4890  001704                     u3341:
  4891  001704  FFFF               	dw	65535	; assembler added errata NOP
  4892  001706  EF6B  F00B         	goto	l4004
  4893  00170A                     u3340:
  4894  00170A                     l1310:
  4895  00170A  FFFF               	dw	65535	; assembler added errata NOP
  4896  00170C  B01B               	btfsc	___xxtofl@exp^0,0,c
  4897  00170E  EF8B  F00B         	goto	u3351
  4898  001712  EF8E  F00B         	goto	u3350
  4899  001716                     u3351:
  4900  001716  FFFF               	dw	65535	; assembler added errata NOP
  4901  001718  EF90  F00B         	goto	l4012
  4902  00171C                     u3350:
  4903  00171C  FFFF               	dw	65535	; assembler added errata NOP
  4904  00171E  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4905  001720                     l4012:
  4906  001720  FFFF               	dw	65535	; assembler added errata NOP
  4907  001722  90D8               	bcf	status,0,c
  4908  001724  321B               	rrcf	___xxtofl@exp^0,f,c
  4909  001726  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4910  00172A  6A17               	clrf	(??___xxtofl+1)^0,c
  4911  00172C  6A18               	clrf	(??___xxtofl+2)^0,c
  4912  00172E  6A19               	clrf	(??___xxtofl+3)^0,c
  4913  001730  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4914  001734  6A18               	clrf	(??___xxtofl+2)^0,c
  4915  001736  6A17               	clrf	(??___xxtofl+1)^0,c
  4916  001738  6A16               	clrf	??___xxtofl^0,c
  4917  00173A  5016               	movf	??___xxtofl^0,w,c
  4918  00173C  121C               	iorwf	___xxtofl@arg^0,f,c
  4919  00173E  5017               	movf	(??___xxtofl+1)^0,w,c
  4920  001740  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4921  001742  5018               	movf	(??___xxtofl+2)^0,w,c
  4922  001744  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4923  001746  5019               	movf	(??___xxtofl+3)^0,w,c
  4924  001748  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4925  00174A  501A               	movf	___xxtofl@sign^0,w,c
  4926  00174C  B4D8               	btfsc	status,2,c
  4927  00174E  EFAB  F00B         	goto	u3361
  4928  001752  EFAE  F00B         	goto	u3360
  4929  001756                     u3361:
  4930  001756  FFFF               	dw	65535	; assembler added errata NOP
  4931  001758  EFB9  F00B         	goto	l4022
  4932  00175C                     u3360:
  4933  00175C  FFFF               	dw	65535	; assembler added errata NOP
  4934  00175E  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4935  001760  EFB7  F00B         	goto	u3370
  4936  001764  EFB4  F00B         	goto	u3371
  4937  001768                     u3371:
  4938  001768  FFFF               	dw	65535	; assembler added errata NOP
  4939  00176A  EFB9  F00B         	goto	l4022
  4940  00176E                     u3370:
  4941  00176E  FFFF               	dw	65535	; assembler added errata NOP
  4942  001770  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4943  001772                     l4022:
  4944  001772  FFFF               	dw	65535	; assembler added errata NOP
  4945  001774  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4946  001778  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4947  00177C  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4948  001780  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  4949  001784                     l1299:
  4950  001784  FFFF               	dw	65535	; assembler added errata NOP
  4951  001786  0012               	return		;funcret
  4952  001788  FFFF               	dw	65535	; errata NOP
  4953  00178A                     __end_of___xxtofl:
  4954                           	callstack 0
  4955                           
  4956 ;; *************** function ___fltol *****************
  4957 ;; Defined at:
  4958 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  4959 ;; Parameters:    Size  Location     Type
  4960 ;;  f1              4   56[COMRAM] unsigned char 
  4961 ;; Auto vars:     Size  Location     Type
  4962 ;;  exp1            1   65[COMRAM] unsigned char 
  4963 ;;  sign1           1   64[COMRAM] unsigned char 
  4964 ;; Return value:  Size  Location     Type
  4965 ;;                  4   56[COMRAM] long 
  4966 ;; Registers used:
  4967 ;;		wreg, status,2, status,0
  4968 ;; Tracked objects:
  4969 ;;		On entry : 0/0
  4970 ;;		On exit  : 0/0
  4971 ;;		Unchanged: 0/0
  4972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4973 ;;      Params:         4       0       0       0       0       0       0
  4974 ;;      Locals:         2       0       0       0       0       0       0
  4975 ;;      Temps:          4       0       0       0       0       0       0
  4976 ;;      Totals:        10       0       0       0       0       0       0
  4977 ;;Total ram usage:       10 bytes
  4978 ;; Hardware stack levels used:    1
  4979 ;; Hardware stack levels required when called:    4
  4980 ;; This function calls:
  4981 ;;		Nothing
  4982 ;; This function is called by:
  4983 ;;		_rotateObj
  4984 ;; This function uses a non-reentrant model
  4985 ;;
  4986                           
  4987                           	psect	text29
  4988  001AA6                     __ptext29:
  4989                           	callstack 0
  4990  001AA6                     ___fltol:
  4991                           	callstack 0
  4992  001AA6  FFFF               	dw	65535	; assembler added errata NOP
  4993  001AA8  343B               	rlcf	(___fltol@f1+2)^0,w,c
  4994  001AAA  343C               	rlcf	(___fltol@f1+3)^0,w,c
  4995  001AAC  6E42               	movwf	___fltol@exp1^0,c
  4996  001AAE  5042               	movf	___fltol@exp1^0,w,c
  4997  001AB0  A4D8               	btfss	status,2,c
  4998  001AB2  EF5D  F00D         	goto	u3211
  4999  001AB6  EF60  F00D         	goto	u3210
  5000  001ABA                     u3211:
  5001  001ABA  FFFF               	dw	65535	; assembler added errata NOP
  5002  001ABC  EF6C  F00D         	goto	l3942
  5003  001AC0                     u3210:
  5004  001AC0  FFFF               	dw	65535	; assembler added errata NOP
  5005  001AC2                     l3938:
  5006  001AC2  FFFF               	dw	65535	; assembler added errata NOP
  5007  001AC4  0E00               	movlw	0
  5008  001AC6  6E39               	movwf	?___fltol^0,c
  5009  001AC8  0E00               	movlw	0
  5010  001ACA  6E3A               	movwf	(?___fltol+1)^0,c
  5011  001ACC  0E00               	movlw	0
  5012  001ACE  6E3B               	movwf	(?___fltol+2)^0,c
  5013  001AD0  0E00               	movlw	0
  5014  001AD2  6E3C               	movwf	(?___fltol+3)^0,c
  5015  001AD4  EFEB  F00D         	goto	l938
  5016  001AD8                     l3942:
  5017  001AD8  FFFF               	dw	65535	; assembler added errata NOP
  5018  001ADA  C039  F03D         	movff	___fltol@f1,??___fltol
  5019  001ADE  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5020  001AE2  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5021  001AE6  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5022  001AEA  0E20               	movlw	32
  5023  001AEC  EF7E  F00D         	goto	u3220
  5024  001AF0                     u3225:
  5025  001AF0  FFFF               	dw	65535	; assembler added errata NOP
  5026  001AF2  90D8               	bcf	status,0,c
  5027  001AF4  3240               	rrcf	(??___fltol+3)^0,f,c
  5028  001AF6  323F               	rrcf	(??___fltol+2)^0,f,c
  5029  001AF8  323E               	rrcf	(??___fltol+1)^0,f,c
  5030  001AFA  323D               	rrcf	??___fltol^0,f,c
  5031  001AFC                     u3220:
  5032  001AFC  FFFF               	dw	65535	; assembler added errata NOP
  5033  001AFE  2EE8               	decfsz	wreg,f,c
  5034  001B00  EF78  F00D         	goto	u3225
  5035  001B04  503D               	movf	??___fltol^0,w,c
  5036  001B06  6E41               	movwf	___fltol@sign1^0,c
  5037  001B08  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5038  001B0A  0EFF               	movlw	255
  5039  001B0C  1639               	andwf	___fltol@f1^0,f,c
  5040  001B0E  0EFF               	movlw	255
  5041  001B10  163A               	andwf	(___fltol@f1+1)^0,f,c
  5042  001B12  0EFF               	movlw	255
  5043  001B14  163B               	andwf	(___fltol@f1+2)^0,f,c
  5044  001B16  0E00               	movlw	0
  5045  001B18  163C               	andwf	(___fltol@f1+3)^0,f,c
  5046  001B1A  0E96               	movlw	150
  5047  001B1C  5E42               	subwf	___fltol@exp1^0,f,c
  5048  001B1E  BE42               	btfsc	___fltol@exp1^0,7,c
  5049  001B20  EF97  F00D         	goto	u3230
  5050  001B24  EF94  F00D         	goto	u3231
  5051  001B28                     u3231:
  5052  001B28  FFFF               	dw	65535	; assembler added errata NOP
  5053  001B2A  EFB1  F00D         	goto	l3962
  5054  001B2E                     u3230:
  5055  001B2E  FFFF               	dw	65535	; assembler added errata NOP
  5056  001B30  5042               	movf	___fltol@exp1^0,w,c
  5057  001B32  0A80               	xorlw	128
  5058  001B34  0F97               	addlw	151
  5059  001B36  B0D8               	btfsc	status,0,c
  5060  001B38  EFA0  F00D         	goto	u3241
  5061  001B3C  EFA3  F00D         	goto	u3240
  5062  001B40                     u3241:
  5063  001B40  FFFF               	dw	65535	; assembler added errata NOP
  5064  001B42  EFA6  F00D         	goto	l3958
  5065  001B46                     u3240:
  5066  001B46  FFFF               	dw	65535	; assembler added errata NOP
  5067  001B48  EF61  F00D         	goto	l3938
  5068  001B4C                     l3958:
  5069  001B4C  FFFF               	dw	65535	; assembler added errata NOP
  5070  001B4E  90D8               	bcf	status,0,c
  5071  001B50  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5072  001B52  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5073  001B54  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5074  001B56  3239               	rrcf	___fltol@f1^0,f,c
  5075  001B58  3E42               	incfsz	___fltol@exp1^0,f,c
  5076  001B5A  EFA6  F00D         	goto	l3958
  5077  001B5E  EFCF  F00D         	goto	l3972
  5078  001B62                     l3962:
  5079  001B62  FFFF               	dw	65535	; assembler added errata NOP
  5080  001B64  0E1F               	movlw	31
  5081  001B66  6442               	cpfsgt	___fltol@exp1^0,c
  5082  001B68  EFB8  F00D         	goto	u3251
  5083  001B6C  EFBB  F00D         	goto	u3250
  5084  001B70                     u3251:
  5085  001B70  FFFF               	dw	65535	; assembler added errata NOP
  5086  001B72  EFC5  F00D         	goto	l3970
  5087  001B76                     u3250:
  5088  001B76  FFFF               	dw	65535	; assembler added errata NOP
  5089  001B78  EF61  F00D         	goto	l3938
  5090  001B7C                     l3968:
  5091  001B7C  FFFF               	dw	65535	; assembler added errata NOP
  5092  001B7E  90D8               	bcf	status,0,c
  5093  001B80  3639               	rlcf	___fltol@f1^0,f,c
  5094  001B82  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5095  001B84  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5096  001B86  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5097  001B88  0642               	decf	___fltol@exp1^0,f,c
  5098  001B8A                     l3970:
  5099  001B8A  FFFF               	dw	65535	; assembler added errata NOP
  5100  001B8C  5042               	movf	___fltol@exp1^0,w,c
  5101  001B8E  A4D8               	btfss	status,2,c
  5102  001B90  EFCC  F00D         	goto	u3261
  5103  001B94  EFCF  F00D         	goto	u3260
  5104  001B98                     u3261:
  5105  001B98  FFFF               	dw	65535	; assembler added errata NOP
  5106  001B9A  EFBE  F00D         	goto	l3968
  5107  001B9E                     u3260:
  5108  001B9E                     l3972:
  5109  001B9E  FFFF               	dw	65535	; assembler added errata NOP
  5110  001BA0  5041               	movf	___fltol@sign1^0,w,c
  5111  001BA2  B4D8               	btfsc	status,2,c
  5112  001BA4  EFD6  F00D         	goto	u3271
  5113  001BA8  EFD9  F00D         	goto	u3270
  5114  001BAC                     u3271:
  5115  001BAC  FFFF               	dw	65535	; assembler added errata NOP
  5116  001BAE  EFE2  F00D         	goto	l3976
  5117  001BB2                     u3270:
  5118  001BB2  FFFF               	dw	65535	; assembler added errata NOP
  5119  001BB4  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5120  001BB6  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5121  001BB8  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5122  001BBA  6C39               	negf	___fltol@f1^0,c
  5123  001BBC  0E00               	movlw	0
  5124  001BBE  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5125  001BC0  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5126  001BC2  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5127  001BC4                     l3976:
  5128  001BC4  FFFF               	dw	65535	; assembler added errata NOP
  5129  001BC6  C039  F039         	movff	___fltol@f1,?___fltol
  5130  001BCA  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5131  001BCE  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5132  001BD2  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5133  001BD6                     l938:
  5134  001BD6  FFFF               	dw	65535	; assembler added errata NOP
  5135  001BD8  0012               	return		;funcret
  5136  001BDA  FFFF               	dw	65535	; errata NOP
  5137  001BDC                     __end_of___fltol:
  5138                           	callstack 0
  5139                           
  5140 ;; *************** function ___fldiv *****************
  5141 ;; Defined at:
  5142 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;  b               4   31[COMRAM] long 
  5145 ;;  a               4   35[COMRAM] long 
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;  grs             4   50[COMRAM] unsigned long 
  5148 ;;  rem             4   43[COMRAM] unsigned long 
  5149 ;;  new_exp         2   48[COMRAM] short 
  5150 ;;  aexp            1   55[COMRAM] unsigned char 
  5151 ;;  bexp            1   54[COMRAM] unsigned char 
  5152 ;;  sign            1   47[COMRAM] unsigned char 
  5153 ;; Return value:  Size  Location     Type
  5154 ;;                  4   31[COMRAM] unsigned char 
  5155 ;; Registers used:
  5156 ;;		wreg, status,2, status,0
  5157 ;; Tracked objects:
  5158 ;;		On entry : 0/0
  5159 ;;		On exit  : 0/0
  5160 ;;		Unchanged: 0/0
  5161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5162 ;;      Params:         8       0       0       0       0       0       0
  5163 ;;      Locals:        13       0       0       0       0       0       0
  5164 ;;      Temps:          4       0       0       0       0       0       0
  5165 ;;      Totals:        25       0       0       0       0       0       0
  5166 ;;Total ram usage:       25 bytes
  5167 ;; Hardware stack levels used:    1
  5168 ;; Hardware stack levels required when called:    4
  5169 ;; This function calls:
  5170 ;;		Nothing
  5171 ;; This function is called by:
  5172 ;;		_rotateObj
  5173 ;; This function uses a non-reentrant model
  5174 ;;
  5175                           
  5176                           	psect	text30
  5177  000616                     __ptext30:
  5178                           	callstack 0
  5179  000616                     ___fldiv:
  5180                           	callstack 0
  5181  000616  FFFF               	dw	65535	; assembler added errata NOP
  5182  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  5183  00061A  0B80               	andlw	128
  5184  00061C  6E30               	movwf	___fldiv@sign^0,c
  5185  00061E  5023               	movf	(___fldiv@b+3)^0,w,c
  5186  000620  2423               	addwf	(___fldiv@b+3)^0,w,c
  5187  000622  6E37               	movwf	___fldiv@bexp^0,c
  5188  000624  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5189  000626  EF17  F003         	goto	u2981
  5190  00062A  EF1A  F003         	goto	u2980
  5191  00062E                     u2981:
  5192  00062E  FFFF               	dw	65535	; assembler added errata NOP
  5193  000630  EF1C  F003         	goto	l3804
  5194  000634                     u2980:
  5195  000634  FFFF               	dw	65535	; assembler added errata NOP
  5196  000636  8037               	bsf	___fldiv@bexp^0,0,c
  5197  000638                     l3804:
  5198  000638  FFFF               	dw	65535	; assembler added errata NOP
  5199  00063A  5037               	movf	___fldiv@bexp^0,w,c
  5200  00063C  B4D8               	btfsc	status,2,c
  5201  00063E  EF23  F003         	goto	u2991
  5202  000642  EF26  F003         	goto	u2990
  5203  000646                     u2991:
  5204  000646  FFFF               	dw	65535	; assembler added errata NOP
  5205  000648  EF3F  F003         	goto	l3814
  5206  00064C                     u2990:
  5207  00064C  FFFF               	dw	65535	; assembler added errata NOP
  5208  00064E  2837               	incf	___fldiv@bexp^0,w,c
  5209  000650  A4D8               	btfss	status,2,c
  5210  000652  EF2D  F003         	goto	u3001
  5211  000656  EF30  F003         	goto	u3000
  5212  00065A                     u3001:
  5213  00065A  FFFF               	dw	65535	; assembler added errata NOP
  5214  00065C  EF39  F003         	goto	l3810
  5215  000660                     u3000:
  5216  000660  FFFF               	dw	65535	; assembler added errata NOP
  5217  000662  0E00               	movlw	0
  5218  000664  6E20               	movwf	___fldiv@b^0,c
  5219  000666  0E00               	movlw	0
  5220  000668  6E21               	movwf	(___fldiv@b+1)^0,c
  5221  00066A  0E00               	movlw	0
  5222  00066C  6E22               	movwf	(___fldiv@b+2)^0,c
  5223  00066E  0E00               	movlw	0
  5224  000670  6E23               	movwf	(___fldiv@b+3)^0,c
  5225  000672                     l3810:
  5226  000672  FFFF               	dw	65535	; assembler added errata NOP
  5227  000674  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5228  000676  0E00               	movlw	0
  5229  000678  6E23               	movwf	(___fldiv@b+3)^0,c
  5230  00067A  EF48  F003         	goto	l3816
  5231  00067E                     l3814:
  5232  00067E  FFFF               	dw	65535	; assembler added errata NOP
  5233  000680  0E00               	movlw	0
  5234  000682  6E20               	movwf	___fldiv@b^0,c
  5235  000684  0E00               	movlw	0
  5236  000686  6E21               	movwf	(___fldiv@b+1)^0,c
  5237  000688  0E00               	movlw	0
  5238  00068A  6E22               	movwf	(___fldiv@b+2)^0,c
  5239  00068C  0E00               	movlw	0
  5240  00068E  6E23               	movwf	(___fldiv@b+3)^0,c
  5241  000690                     l3816:
  5242  000690  FFFF               	dw	65535	; assembler added errata NOP
  5243  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  5244  000694  0B80               	andlw	128
  5245  000696  1A30               	xorwf	___fldiv@sign^0,f,c
  5246  000698  5027               	movf	(___fldiv@a+3)^0,w,c
  5247  00069A  2427               	addwf	(___fldiv@a+3)^0,w,c
  5248  00069C  6E38               	movwf	___fldiv@aexp^0,c
  5249  00069E  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5250  0006A0  EF54  F003         	goto	u3011
  5251  0006A4  EF57  F003         	goto	u3010
  5252  0006A8                     u3011:
  5253  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  5254  0006AA  EF59  F003         	goto	l3824
  5255  0006AE                     u3010:
  5256  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5257  0006B0  8038               	bsf	___fldiv@aexp^0,0,c
  5258  0006B2                     l3824:
  5259  0006B2  FFFF               	dw	65535	; assembler added errata NOP
  5260  0006B4  5038               	movf	___fldiv@aexp^0,w,c
  5261  0006B6  B4D8               	btfsc	status,2,c
  5262  0006B8  EF60  F003         	goto	u3021
  5263  0006BC  EF63  F003         	goto	u3020
  5264  0006C0                     u3021:
  5265  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  5266  0006C2  EF7C  F003         	goto	l3834
  5267  0006C6                     u3020:
  5268  0006C6  FFFF               	dw	65535	; assembler added errata NOP
  5269  0006C8  2838               	incf	___fldiv@aexp^0,w,c
  5270  0006CA  A4D8               	btfss	status,2,c
  5271  0006CC  EF6A  F003         	goto	u3031
  5272  0006D0  EF6D  F003         	goto	u3030
  5273  0006D4                     u3031:
  5274  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  5275  0006D6  EF76  F003         	goto	l3830
  5276  0006DA                     u3030:
  5277  0006DA  FFFF               	dw	65535	; assembler added errata NOP
  5278  0006DC  0E00               	movlw	0
  5279  0006DE  6E24               	movwf	___fldiv@a^0,c
  5280  0006E0  0E00               	movlw	0
  5281  0006E2  6E25               	movwf	(___fldiv@a+1)^0,c
  5282  0006E4  0E00               	movlw	0
  5283  0006E6  6E26               	movwf	(___fldiv@a+2)^0,c
  5284  0006E8  0E00               	movlw	0
  5285  0006EA  6E27               	movwf	(___fldiv@a+3)^0,c
  5286  0006EC                     l3830:
  5287  0006EC  FFFF               	dw	65535	; assembler added errata NOP
  5288  0006EE  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5289  0006F0  0E00               	movlw	0
  5290  0006F2  6E27               	movwf	(___fldiv@a+3)^0,c
  5291  0006F4  EF85  F003         	goto	l3836
  5292  0006F8                     l3834:
  5293  0006F8  FFFF               	dw	65535	; assembler added errata NOP
  5294  0006FA  0E00               	movlw	0
  5295  0006FC  6E24               	movwf	___fldiv@a^0,c
  5296  0006FE  0E00               	movlw	0
  5297  000700  6E25               	movwf	(___fldiv@a+1)^0,c
  5298  000702  0E00               	movlw	0
  5299  000704  6E26               	movwf	(___fldiv@a+2)^0,c
  5300  000706  0E00               	movlw	0
  5301  000708  6E27               	movwf	(___fldiv@a+3)^0,c
  5302  00070A                     l3836:
  5303  00070A  FFFF               	dw	65535	; assembler added errata NOP
  5304  00070C  5024               	movf	___fldiv@a^0,w,c
  5305  00070E  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5306  000710  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5307  000712  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5308  000714  A4D8               	btfss	status,2,c
  5309  000716  EF8F  F003         	goto	u3041
  5310  00071A  EF92  F003         	goto	u3040
  5311  00071E                     u3041:
  5312  00071E  FFFF               	dw	65535	; assembler added errata NOP
  5313  000720  EFAC  F003         	goto	l3848
  5314  000724                     u3040:
  5315  000724  FFFF               	dw	65535	; assembler added errata NOP
  5316  000726  0E00               	movlw	0
  5317  000728  6E20               	movwf	___fldiv@b^0,c
  5318  00072A  0E00               	movlw	0
  5319  00072C  6E21               	movwf	(___fldiv@b+1)^0,c
  5320  00072E  0E00               	movlw	0
  5321  000730  6E22               	movwf	(___fldiv@b+2)^0,c
  5322  000732  0E00               	movlw	0
  5323  000734  6E23               	movwf	(___fldiv@b+3)^0,c
  5324  000736  0E80               	movlw	128
  5325  000738  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5326  00073A  0E7F               	movlw	127
  5327  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5328  00073E                     l3842:
  5329  00073E  FFFF               	dw	65535	; assembler added errata NOP
  5330  000740  5030               	movf	___fldiv@sign^0,w,c
  5331  000742  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5332  000744  C020  F020         	movff	___fldiv@b,?___fldiv
  5333  000748  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5334  00074C  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5335  000750  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5336  000754  EF21  F005         	goto	l1223
  5337  000758                     l3848:
  5338  000758  FFFF               	dw	65535	; assembler added errata NOP
  5339  00075A  5037               	movf	___fldiv@bexp^0,w,c
  5340  00075C  A4D8               	btfss	status,2,c
  5341  00075E  EFB3  F003         	goto	u3051
  5342  000762  EFB6  F003         	goto	u3050
  5343  000766                     u3051:
  5344  000766  FFFF               	dw	65535	; assembler added errata NOP
  5345  000768  EFC1  F003         	goto	l3856
  5346  00076C                     u3050:
  5347  00076C  FFFF               	dw	65535	; assembler added errata NOP
  5348  00076E  0E00               	movlw	0
  5349  000770  6E20               	movwf	?___fldiv^0,c
  5350  000772  0E00               	movlw	0
  5351  000774  6E21               	movwf	(?___fldiv+1)^0,c
  5352  000776  0E00               	movlw	0
  5353  000778  6E22               	movwf	(?___fldiv+2)^0,c
  5354  00077A  0E00               	movlw	0
  5355  00077C  6E23               	movwf	(?___fldiv+3)^0,c
  5356  00077E  EF21  F005         	goto	l1223
  5357  000782                     l3856:
  5358  000782  FFFF               	dw	65535	; assembler added errata NOP
  5359  000784  5038               	movf	___fldiv@aexp^0,w,c
  5360  000786  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5361  00078A  6A29               	clrf	(??___fldiv+1)^0,c
  5362  00078C  5E28               	subwf	??___fldiv^0,f,c
  5363  00078E  0E00               	movlw	0
  5364  000790  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5365  000792  0E7F               	movlw	127
  5366  000794  2428               	addwf	??___fldiv^0,w,c
  5367  000796  6E31               	movwf	___fldiv@new_exp^0,c
  5368  000798  0E00               	movlw	0
  5369  00079A  2029               	addwfc	(??___fldiv+1)^0,w,c
  5370  00079C  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5371  00079E  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5372  0007A2  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5373  0007A6  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5374  0007AA  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5375  0007AE  0E00               	movlw	0
  5376  0007B0  6E20               	movwf	___fldiv@b^0,c
  5377  0007B2  0E00               	movlw	0
  5378  0007B4  6E21               	movwf	(___fldiv@b+1)^0,c
  5379  0007B6  0E00               	movlw	0
  5380  0007B8  6E22               	movwf	(___fldiv@b+2)^0,c
  5381  0007BA  0E00               	movlw	0
  5382  0007BC  6E23               	movwf	(___fldiv@b+3)^0,c
  5383  0007BE  0E00               	movlw	0
  5384  0007C0  6E33               	movwf	___fldiv@grs^0,c
  5385  0007C2  0E00               	movlw	0
  5386  0007C4  6E34               	movwf	(___fldiv@grs+1)^0,c
  5387  0007C6  0E00               	movlw	0
  5388  0007C8  6E35               	movwf	(___fldiv@grs+2)^0,c
  5389  0007CA  0E00               	movlw	0
  5390  0007CC  6E36               	movwf	(___fldiv@grs+3)^0,c
  5391  0007CE  0E00               	movlw	0
  5392  0007D0  6E38               	movwf	___fldiv@aexp^0,c
  5393  0007D2  EF2D  F004         	goto	l1225
  5394  0007D6                     l3866:
  5395  0007D6  FFFF               	dw	65535	; assembler added errata NOP
  5396  0007D8  5038               	movf	___fldiv@aexp^0,w,c
  5397  0007DA  B4D8               	btfsc	status,2,c
  5398  0007DC  EFF2  F003         	goto	u3061
  5399  0007E0  EFF5  F003         	goto	u3060
  5400  0007E4                     u3061:
  5401  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  5402  0007E6  EF10  F004         	goto	l3874
  5403  0007EA                     u3060:
  5404  0007EA  FFFF               	dw	65535	; assembler added errata NOP
  5405  0007EC  90D8               	bcf	status,0,c
  5406  0007EE  362C               	rlcf	___fldiv@rem^0,f,c
  5407  0007F0  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5408  0007F2  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5409  0007F4  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5410  0007F6  90D8               	bcf	status,0,c
  5411  0007F8  3620               	rlcf	___fldiv@b^0,f,c
  5412  0007FA  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5413  0007FC  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5414  0007FE  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5415  000800  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5416  000802  EF05  F004         	goto	u3071
  5417  000806  EF08  F004         	goto	u3070
  5418  00080A                     u3071:
  5419  00080A  FFFF               	dw	65535	; assembler added errata NOP
  5420  00080C  EF0A  F004         	goto	l1228
  5421  000810                     u3070:
  5422  000810  FFFF               	dw	65535	; assembler added errata NOP
  5423  000812  8020               	bsf	___fldiv@b^0,0,c
  5424  000814                     l1228:
  5425  000814  FFFF               	dw	65535	; assembler added errata NOP
  5426  000816  90D8               	bcf	status,0,c
  5427  000818  3633               	rlcf	___fldiv@grs^0,f,c
  5428  00081A  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5429  00081C  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5430  00081E  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5431  000820                     l3874:
  5432  000820  FFFF               	dw	65535	; assembler added errata NOP
  5433  000822  5024               	movf	___fldiv@a^0,w,c
  5434  000824  5C2C               	subwf	___fldiv@rem^0,w,c
  5435  000826  5025               	movf	(___fldiv@a+1)^0,w,c
  5436  000828  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5437  00082A  5026               	movf	(___fldiv@a+2)^0,w,c
  5438  00082C  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5439  00082E  5027               	movf	(___fldiv@a+3)^0,w,c
  5440  000830  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5441  000832  A0D8               	btfss	status,0,c
  5442  000834  EF1E  F004         	goto	u3081
  5443  000838  EF21  F004         	goto	u3080
  5444  00083C                     u3081:
  5445  00083C  FFFF               	dw	65535	; assembler added errata NOP
  5446  00083E  EF2B  F004         	goto	l3880
  5447  000842                     u3080:
  5448  000842  FFFF               	dw	65535	; assembler added errata NOP
  5449  000844  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5450  000846  5024               	movf	___fldiv@a^0,w,c
  5451  000848  5E2C               	subwf	___fldiv@rem^0,f,c
  5452  00084A  5025               	movf	(___fldiv@a+1)^0,w,c
  5453  00084C  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5454  00084E  5026               	movf	(___fldiv@a+2)^0,w,c
  5455  000850  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5456  000852  5027               	movf	(___fldiv@a+3)^0,w,c
  5457  000854  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5458  000856                     l3880:
  5459  000856  FFFF               	dw	65535	; assembler added errata NOP
  5460  000858  2A38               	incf	___fldiv@aexp^0,f,c
  5461  00085A                     l1225:
  5462  00085A  FFFF               	dw	65535	; assembler added errata NOP
  5463  00085C  0E19               	movlw	25
  5464  00085E  6438               	cpfsgt	___fldiv@aexp^0,c
  5465  000860  EF34  F004         	goto	u3091
  5466  000864  EF37  F004         	goto	u3090
  5467  000868                     u3091:
  5468  000868  FFFF               	dw	65535	; assembler added errata NOP
  5469  00086A  EFEB  F003         	goto	l3866
  5470  00086E                     u3090:
  5471  00086E  FFFF               	dw	65535	; assembler added errata NOP
  5472  000870  502C               	movf	___fldiv@rem^0,w,c
  5473  000872  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5474  000874  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5475  000876  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5476  000878  B4D8               	btfsc	status,2,c
  5477  00087A  EF41  F004         	goto	u3101
  5478  00087E  EF44  F004         	goto	u3100
  5479  000882                     u3101:
  5480  000882  FFFF               	dw	65535	; assembler added errata NOP
  5481  000884  EF61  F004         	goto	l3892
  5482  000888                     u3100:
  5483  000888  FFFF               	dw	65535	; assembler added errata NOP
  5484  00088A  8033               	bsf	___fldiv@grs^0,0,c
  5485  00088C  EF61  F004         	goto	l3892
  5486  000890                     l3886:
  5487  000890  FFFF               	dw	65535	; assembler added errata NOP
  5488  000892  90D8               	bcf	status,0,c
  5489  000894  3620               	rlcf	___fldiv@b^0,f,c
  5490  000896  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5491  000898  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5492  00089A  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5493  00089C  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5494  00089E  EF53  F004         	goto	u3111
  5495  0008A2  EF56  F004         	goto	u3110
  5496  0008A6                     u3111:
  5497  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5498  0008A8  EF58  F004         	goto	l1234
  5499  0008AC                     u3110:
  5500  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5501  0008AE  8020               	bsf	___fldiv@b^0,0,c
  5502  0008B0                     l1234:
  5503  0008B0  FFFF               	dw	65535	; assembler added errata NOP
  5504  0008B2  90D8               	bcf	status,0,c
  5505  0008B4  3633               	rlcf	___fldiv@grs^0,f,c
  5506  0008B6  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5507  0008B8  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5508  0008BA  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5509  0008BC  0631               	decf	___fldiv@new_exp^0,f,c
  5510  0008BE  A0D8               	btfss	status,0,c
  5511  0008C0  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5512  0008C2                     l3892:
  5513  0008C2  FFFF               	dw	65535	; assembler added errata NOP
  5514  0008C4  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5515  0008C6  EF67  F004         	goto	u3121
  5516  0008CA  EF6A  F004         	goto	u3120
  5517  0008CE                     u3121:
  5518  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5519  0008D0  EF48  F004         	goto	l3886
  5520  0008D4                     u3120:
  5521  0008D4  FFFF               	dw	65535	; assembler added errata NOP
  5522  0008D6  0E00               	movlw	0
  5523  0008D8  6E38               	movwf	___fldiv@aexp^0,c
  5524  0008DA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5525  0008DC  EF72  F004         	goto	u3131
  5526  0008E0  EF75  F004         	goto	u3130
  5527  0008E4                     u3131:
  5528  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5529  0008E6  EFA0  F004         	goto	l1236
  5530  0008EA                     u3130:
  5531  0008EA  FFFF               	dw	65535	; assembler added errata NOP
  5532  0008EC  0EFF               	movlw	255
  5533  0008EE  1433               	andwf	___fldiv@grs^0,w,c
  5534  0008F0  6E28               	movwf	??___fldiv^0,c
  5535  0008F2  0EFF               	movlw	255
  5536  0008F4  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5537  0008F6  6E29               	movwf	(??___fldiv+1)^0,c
  5538  0008F8  0EFF               	movlw	255
  5539  0008FA  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5540  0008FC  6E2A               	movwf	(??___fldiv+2)^0,c
  5541  0008FE  0E7F               	movlw	127
  5542  000900  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5543  000902  6E2B               	movwf	(??___fldiv+3)^0,c
  5544  000904  5028               	movf	??___fldiv^0,w,c
  5545  000906  1029               	iorwf	(??___fldiv+1)^0,w,c
  5546  000908  102A               	iorwf	(??___fldiv+2)^0,w,c
  5547  00090A  102B               	iorwf	(??___fldiv+3)^0,w,c
  5548  00090C  B4D8               	btfsc	status,2,c
  5549  00090E  EF8B  F004         	goto	u3141
  5550  000912  EF8E  F004         	goto	u3140
  5551  000916                     u3141:
  5552  000916  FFFF               	dw	65535	; assembler added errata NOP
  5553  000918  EF94  F004         	goto	l1237
  5554  00091C                     u3140:
  5555  00091C  FFFF               	dw	65535	; assembler added errata NOP
  5556  00091E                     l3900:
  5557  00091E  FFFF               	dw	65535	; assembler added errata NOP
  5558  000920  0E01               	movlw	1
  5559  000922  6E38               	movwf	___fldiv@aexp^0,c
  5560  000924  EFA0  F004         	goto	l1236
  5561  000928                     l1237:
  5562  000928  FFFF               	dw	65535	; assembler added errata NOP
  5563  00092A  A020               	btfss	___fldiv@b^0,0,c
  5564  00092C  EF9A  F004         	goto	u3151
  5565  000930  EF9D  F004         	goto	u3150
  5566  000934                     u3151:
  5567  000934  FFFF               	dw	65535	; assembler added errata NOP
  5568  000936  EFA0  F004         	goto	l1236
  5569  00093A                     u3150:
  5570  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5571  00093C  EF8F  F004         	goto	l3900
  5572  000940                     l1236:
  5573  000940  FFFF               	dw	65535	; assembler added errata NOP
  5574  000942  5038               	movf	___fldiv@aexp^0,w,c
  5575  000944  B4D8               	btfsc	status,2,c
  5576  000946  EFA7  F004         	goto	u3161
  5577  00094A  EFAA  F004         	goto	u3160
  5578  00094E                     u3161:
  5579  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5580  000950  EFD1  F004         	goto	l3912
  5581  000954                     u3160:
  5582  000954  FFFF               	dw	65535	; assembler added errata NOP
  5583  000956  0E01               	movlw	1
  5584  000958  2620               	addwf	___fldiv@b^0,f,c
  5585  00095A  0E00               	movlw	0
  5586  00095C  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5587  00095E  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5588  000960  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5589  000962  A023               	btfss	(___fldiv@b+3)^0,0,c
  5590  000964  EFB6  F004         	goto	u3171
  5591  000968  EFB9  F004         	goto	u3170
  5592  00096C                     u3171:
  5593  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5594  00096E  EFD1  F004         	goto	l3912
  5595  000972                     u3170:
  5596  000972  FFFF               	dw	65535	; assembler added errata NOP
  5597  000974  C020  F028         	movff	___fldiv@b,??___fldiv
  5598  000978  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5599  00097C  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5600  000980  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5601  000984  342B               	rlcf	(??___fldiv+3)^0,w,c
  5602  000986  322B               	rrcf	(??___fldiv+3)^0,f,c
  5603  000988  322A               	rrcf	(??___fldiv+2)^0,f,c
  5604  00098A  3229               	rrcf	(??___fldiv+1)^0,f,c
  5605  00098C  3228               	rrcf	??___fldiv^0,f,c
  5606  00098E  C028  F020         	movff	??___fldiv,___fldiv@b
  5607  000992  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5608  000996  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5609  00099A  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5610  00099E  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5611  0009A0  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5612  0009A2                     l3912:
  5613  0009A2  FFFF               	dw	65535	; assembler added errata NOP
  5614  0009A4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5615  0009A6  EFDD  F004         	goto	u3181
  5616  0009AA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5617  0009AC  E109               	bnz	u3180
  5618  0009AE  2831               	incf	___fldiv@new_exp^0,w,c
  5619  0009B0  A0D8               	btfss	status,0,c
  5620  0009B2  EFDD  F004         	goto	u3181
  5621  0009B6  EFE0  F004         	goto	u3180
  5622  0009BA                     u3181:
  5623  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5624  0009BC  EFEC  F004         	goto	l3916
  5625  0009C0                     u3180:
  5626  0009C0  FFFF               	dw	65535	; assembler added errata NOP
  5627  0009C2  0E00               	movlw	0
  5628  0009C4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5629  0009C6  6831               	setf	___fldiv@new_exp^0,c
  5630  0009C8  0E00               	movlw	0
  5631  0009CA  6E20               	movwf	___fldiv@b^0,c
  5632  0009CC  0E00               	movlw	0
  5633  0009CE  6E21               	movwf	(___fldiv@b+1)^0,c
  5634  0009D0  0E00               	movlw	0
  5635  0009D2  6E22               	movwf	(___fldiv@b+2)^0,c
  5636  0009D4  0E00               	movlw	0
  5637  0009D6  6E23               	movwf	(___fldiv@b+3)^0,c
  5638  0009D8                     l3916:
  5639  0009D8  FFFF               	dw	65535	; assembler added errata NOP
  5640  0009DA  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5641  0009DC  EFFB  F004         	goto	u3190
  5642  0009E0  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5643  0009E2  E106               	bnz	u3191
  5644  0009E4  0431               	decf	___fldiv@new_exp^0,w,c
  5645  0009E6  B0D8               	btfsc	status,0,c
  5646  0009E8  EFF8  F004         	goto	u3191
  5647  0009EC  EFFB  F004         	goto	u3190
  5648  0009F0                     u3191:
  5649  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5650  0009F2  EF0A  F005         	goto	l3920
  5651  0009F6                     u3190:
  5652  0009F6  FFFF               	dw	65535	; assembler added errata NOP
  5653  0009F8  0E00               	movlw	0
  5654  0009FA  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5655  0009FC  0E00               	movlw	0
  5656  0009FE  6E31               	movwf	___fldiv@new_exp^0,c
  5657  000A00  0E00               	movlw	0
  5658  000A02  6E20               	movwf	___fldiv@b^0,c
  5659  000A04  0E00               	movlw	0
  5660  000A06  6E21               	movwf	(___fldiv@b+1)^0,c
  5661  000A08  0E00               	movlw	0
  5662  000A0A  6E22               	movwf	(___fldiv@b+2)^0,c
  5663  000A0C  0E00               	movlw	0
  5664  000A0E  6E23               	movwf	(___fldiv@b+3)^0,c
  5665  000A10  0E00               	movlw	0
  5666  000A12  6E30               	movwf	___fldiv@sign^0,c
  5667  000A14                     l3920:
  5668  000A14  FFFF               	dw	65535	; assembler added errata NOP
  5669  000A16  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5670  000A1A  A037               	btfss	___fldiv@bexp^0,0,c
  5671  000A1C  EF12  F005         	goto	u3201
  5672  000A20  EF15  F005         	goto	u3200
  5673  000A24                     u3201:
  5674  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5675  000A26  EF19  F005         	goto	l3926
  5676  000A2A                     u3200:
  5677  000A2A  FFFF               	dw	65535	; assembler added errata NOP
  5678  000A2C  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5679  000A2E  EF1B  F005         	goto	l3928
  5680  000A32                     l3926:
  5681  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5682  000A34  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5683  000A36                     l3928:
  5684  000A36  FFFF               	dw	65535	; assembler added errata NOP
  5685  000A38  90D8               	bcf	status,0,c
  5686  000A3A  3037               	rrcf	___fldiv@bexp^0,w,c
  5687  000A3C  6E23               	movwf	(___fldiv@b+3)^0,c
  5688  000A3E  EF9F  F003         	goto	l3842
  5689  000A42                     l1223:
  5690  000A42  FFFF               	dw	65535	; assembler added errata NOP
  5691  000A44  0012               	return		;funcret
  5692  000A46  FFFF               	dw	65535	; errata NOP
  5693  000A48                     __end_of___fldiv:
  5694                           	callstack 0
  5695                           
  5696 ;; *************** function _releaseObj *****************
  5697 ;; Defined at:
  5698 ;;		line 819 in file "motors.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;		None
  5701 ;; Auto vars:     Size  Location     Type
  5702 ;;		None
  5703 ;; Return value:  Size  Location     Type
  5704 ;;                  1    wreg      void 
  5705 ;; Registers used:
  5706 ;;		wreg, status,2, status,0, cstack
  5707 ;; Tracked objects:
  5708 ;;		On entry : 0/0
  5709 ;;		On exit  : 0/0
  5710 ;;		Unchanged: 0/0
  5711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5712 ;;      Params:         0       0       0       0       0       0       0
  5713 ;;      Locals:         0       0       0       0       0       0       0
  5714 ;;      Temps:          0       0       0       0       0       0       0
  5715 ;;      Totals:         0       0       0       0       0       0       0
  5716 ;;Total ram usage:        0 bytes
  5717 ;; Hardware stack levels used:    1
  5718 ;; Hardware stack levels required when called:    5
  5719 ;; This function calls:
  5720 ;;		_resetTM2_Temp
  5721 ;;		_stepMade
  5722 ;; This function is called by:
  5723 ;;		_executeData
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text31
  5728  0024EC                     __ptext31:
  5729                           	callstack 0
  5730  0024EC                     _releaseObj:
  5731                           	callstack 0
  5732  0024EC  FFFF               	dw	65535	; assembler added errata NOP
  5733  0024EE                     
  5734                           ;motors.c: 820:     LATDbits.LATD1 = 0;
  5735  0024EE  928C               	bcf	140,1,c	;volatile
  5736                           
  5737                           ;motors.c: 823:     T2CONbits.TMR2ON = 1;
  5738  0024F0  84CA               	bsf	202,2,c	;volatile
  5739  0024F2                     l4284:
  5740  0024F2  FFFF               	dw	65535	; assembler added errata NOP
  5741  0024F4  ECDB  F012         	call	_stepMade	;wreg free
  5742  0024F8  5012               	movf	?_stepMade^0,w,c
  5743  0024FA  1013               	iorwf	(?_stepMade+1)^0,w,c
  5744  0024FC  B4D8               	btfsc	status,2,c
  5745  0024FE  EF83  F012         	goto	u3801
  5746  002502  EF86  F012         	goto	u3800
  5747  002506                     u3801:
  5748  002506  FFFF               	dw	65535	; assembler added errata NOP
  5749  002508  EF79  F012         	goto	l4284
  5750  00250C                     u3800:
  5751  00250C  FFFF               	dw	65535	; assembler added errata NOP
  5752  00250E                     
  5753                           ;motors.c: 825:     T2CONbits.TMR2ON = 0;
  5754  00250E  94CA               	bcf	202,2,c	;volatile
  5755  002510                     
  5756                           ;motors.c: 826:     TMR2 = 0;
  5757  002510  0E00               	movlw	0
  5758  002512  6ECC               	movwf	204,c	;volatile
  5759  002514                     
  5760                           ;motors.c: 829:     resetTM2_Temp();
  5761  002514  ECF7  F012         	call	_resetTM2_Temp	;wreg free
  5762  002518  0012               	return		;funcret
  5763  00251A  FFFF               	dw	65535	; errata NOP
  5764  00251C                     __end_of_releaseObj:
  5765                           	callstack 0
  5766                           
  5767 ;; *************** function _pickObject *****************
  5768 ;; Defined at:
  5769 ;;		line 802 in file "motors.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;		None
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;		None
  5774 ;; Return value:  Size  Location     Type
  5775 ;;                  1    wreg      void 
  5776 ;; Registers used:
  5777 ;;		wreg, status,2, status,0, cstack
  5778 ;; Tracked objects:
  5779 ;;		On entry : 0/0
  5780 ;;		On exit  : 0/0
  5781 ;;		Unchanged: 0/0
  5782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5783 ;;      Params:         0       0       0       0       0       0       0
  5784 ;;      Locals:         0       0       0       0       0       0       0
  5785 ;;      Temps:          0       0       0       0       0       0       0
  5786 ;;      Totals:         0       0       0       0       0       0       0
  5787 ;;Total ram usage:        0 bytes
  5788 ;; Hardware stack levels used:    1
  5789 ;; Hardware stack levels required when called:    5
  5790 ;; This function calls:
  5791 ;;		_resetTM2_Temp
  5792 ;;		_stepMade
  5793 ;; This function is called by:
  5794 ;;		_executeData
  5795 ;; This function uses a non-reentrant model
  5796 ;;
  5797                           
  5798                           	psect	text32
  5799  00251C                     __ptext32:
  5800                           	callstack 0
  5801  00251C                     _pickObject:
  5802                           	callstack 0
  5803  00251C  FFFF               	dw	65535	; assembler added errata NOP
  5804  00251E                     
  5805                           ;motors.c: 803:     LATDbits.LATD1 = 1;
  5806  00251E  828C               	bsf	140,1,c	;volatile
  5807                           
  5808                           ;motors.c: 806:     T2CONbits.TMR2ON = 1;
  5809  002520  84CA               	bsf	202,2,c	;volatile
  5810  002522                     l4276:
  5811  002522  FFFF               	dw	65535	; assembler added errata NOP
  5812  002524  ECDB  F012         	call	_stepMade	;wreg free
  5813  002528  5012               	movf	?_stepMade^0,w,c
  5814  00252A  1013               	iorwf	(?_stepMade+1)^0,w,c
  5815  00252C  B4D8               	btfsc	status,2,c
  5816  00252E  EF9B  F012         	goto	u3791
  5817  002532  EF9E  F012         	goto	u3790
  5818  002536                     u3791:
  5819  002536  FFFF               	dw	65535	; assembler added errata NOP
  5820  002538  EF91  F012         	goto	l4276
  5821  00253C                     u3790:
  5822  00253C  FFFF               	dw	65535	; assembler added errata NOP
  5823  00253E                     
  5824                           ;motors.c: 808:     T2CONbits.TMR2ON = 0;
  5825  00253E  94CA               	bcf	202,2,c	;volatile
  5826  002540                     
  5827                           ;motors.c: 809:     TMR2 = 0;
  5828  002540  0E00               	movlw	0
  5829  002542  6ECC               	movwf	204,c	;volatile
  5830  002544                     
  5831                           ;motors.c: 812:     resetTM2_Temp();
  5832  002544  ECF7  F012         	call	_resetTM2_Temp	;wreg free
  5833  002548  0012               	return		;funcret
  5834  00254A  FFFF               	dw	65535	; errata NOP
  5835  00254C                     __end_of_pickObject:
  5836                           	callstack 0
  5837                           
  5838 ;; *************** function _moveToPoint *****************
  5839 ;; Defined at:
  5840 ;;		line 315 in file "motors.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;  x1              2   20[COMRAM] int 
  5843 ;;  y1              2   22[COMRAM] int 
  5844 ;;  x2              2   24[COMRAM] int 
  5845 ;;  y2              2   26[COMRAM] int 
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;  keepMovingY     1   33[COMRAM] unsigned char 
  5848 ;;  keepMovingX     1   32[COMRAM] unsigned char 
  5849 ;;  MOT2Directio    1   31[COMRAM] unsigned char 
  5850 ;;  MOT1Directio    1   30[COMRAM] unsigned char 
  5851 ;; Return value:  Size  Location     Type
  5852 ;;                  1    wreg      unsigned char 
  5853 ;; Registers used:
  5854 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5855 ;; Tracked objects:
  5856 ;;		On entry : 0/0
  5857 ;;		On exit  : 0/0
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5860 ;;      Params:         8       0       0       0       0       0       0
  5861 ;;      Locals:         4       0       0       0       0       0       0
  5862 ;;      Temps:          2       0       0       0       0       0       0
  5863 ;;      Totals:        14       0       0       0       0       0       0
  5864 ;;Total ram usage:       14 bytes
  5865 ;; Hardware stack levels used:    1
  5866 ;; Hardware stack levels required when called:    5
  5867 ;; This function calls:
  5868 ;;		_resetStep
  5869 ;;		_resetTM0_Temp
  5870 ;;		_resetTM2_Temp
  5871 ;;		_stepCounter
  5872 ;;		_stepMade
  5873 ;; This function is called by:
  5874 ;;		_executeData
  5875 ;; This function uses a non-reentrant model
  5876 ;;
  5877                           
  5878                           	psect	text33
  5879  000A48                     __ptext33:
  5880                           	callstack 0
  5881  000A48                     _moveToPoint:
  5882                           	callstack 0
  5883  000A48  FFFF               	dw	65535	; assembler added errata NOP
  5884  000A4A                     
  5885                           ;motors.c: 317:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 337:     if((x
      +                          2 - x1) > 0){
  5886  000A4A  5015               	movf	moveToPoint@x1^0,w,c
  5887  000A4C  5C19               	subwf	moveToPoint@x2^0,w,c
  5888  000A4E  6E1D               	movwf	??_moveToPoint^0,c
  5889  000A50  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5890  000A52  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5891  000A54  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5892  000A56  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5893  000A58  EF36  F005         	goto	u3381
  5894  000A5C  501E               	movf	(??_moveToPoint+1)^0,w,c
  5895  000A5E  E109               	bnz	u3380
  5896  000A60  041D               	decf	??_moveToPoint^0,w,c
  5897  000A62  A0D8               	btfss	status,0,c
  5898  000A64  EF36  F005         	goto	u3381
  5899  000A68  EF39  F005         	goto	u3380
  5900  000A6C                     u3381:
  5901  000A6C  FFFF               	dw	65535	; assembler added errata NOP
  5902  000A6E  EF40  F005         	goto	l154
  5903  000A72                     u3380:
  5904  000A72  FFFF               	dw	65535	; assembler added errata NOP
  5905  000A74                     
  5906                           ;motors.c: 338:         motCounter[0][1] = 1;
  5907  000A74  0E01               	movlw	1
  5908  000A76  6E68               	movwf	(_motCounter+1)^0,c
  5909                           
  5910                           ;motors.c: 339:         MOT1Direction = 1;
  5911  000A78  0E01               	movlw	1
  5912  000A7A  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5913                           
  5914                           ;motors.c: 340:     }else{
  5915  000A7C  EF44  F005         	goto	l4032
  5916  000A80                     l154:
  5917  000A80  FFFF               	dw	65535	; assembler added errata NOP
  5918                           
  5919                           ;motors.c: 341:         motCounter[0][1] = -1;
  5920  000A82  6868               	setf	(_motCounter+1)^0,c
  5921  000A84                     
  5922                           ;motors.c: 342:         MOT1Direction = 0;
  5923  000A84  0E00               	movlw	0
  5924  000A86  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5925  000A88                     l4032:
  5926  000A88  FFFF               	dw	65535	; assembler added errata NOP
  5927                           
  5928                           ;motors.c: 345:     if((y2 - y1) > 0){
  5929  000A8A  5017               	movf	moveToPoint@y1^0,w,c
  5930  000A8C  5C1B               	subwf	moveToPoint@y2^0,w,c
  5931  000A8E  6E1D               	movwf	??_moveToPoint^0,c
  5932  000A90  5018               	movf	(moveToPoint@y1+1)^0,w,c
  5933  000A92  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  5934  000A94  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5935  000A96  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5936  000A98  EF56  F005         	goto	u3391
  5937  000A9C  501E               	movf	(??_moveToPoint+1)^0,w,c
  5938  000A9E  E109               	bnz	u3390
  5939  000AA0  041D               	decf	??_moveToPoint^0,w,c
  5940  000AA2  A0D8               	btfss	status,0,c
  5941  000AA4  EF56  F005         	goto	u3391
  5942  000AA8  EF59  F005         	goto	u3390
  5943  000AAC                     u3391:
  5944  000AAC  FFFF               	dw	65535	; assembler added errata NOP
  5945  000AAE  EF60  F005         	goto	l156
  5946  000AB2                     u3390:
  5947  000AB2  FFFF               	dw	65535	; assembler added errata NOP
  5948  000AB4                     
  5949                           ;motors.c: 346:         motCounter[1][1] = 1;
  5950  000AB4  0E01               	movlw	1
  5951  000AB6  6E6A               	movwf	(_motCounter+3)^0,c
  5952                           
  5953                           ;motors.c: 347:         MOT2Direction = 1;
  5954  000AB8  0E01               	movlw	1
  5955  000ABA  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5956                           
  5957                           ;motors.c: 348:     }else{
  5958  000ABC  EF64  F005         	goto	l157
  5959  000AC0                     l156:
  5960  000AC0  FFFF               	dw	65535	; assembler added errata NOP
  5961                           
  5962                           ;motors.c: 349:         motCounter[1][1] = -1;
  5963  000AC2  686A               	setf	(_motCounter+3)^0,c
  5964  000AC4                     
  5965                           ;motors.c: 350:         MOT2Direction = 0;
  5966  000AC4  0E00               	movlw	0
  5967  000AC6  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5968  000AC8                     l157:
  5969  000AC8  FFFF               	dw	65535	; assembler added errata NOP
  5970                           
  5971                           ;motors.c: 355:     unsigned char keepMovingX = 1;
  5972  000ACA  0E01               	movlw	1
  5973  000ACC  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5974                           
  5975                           ;motors.c: 356:     unsigned char keepMovingY = 1;
  5976  000ACE  0E01               	movlw	1
  5977  000AD0  6E22               	movwf	moveToPoint@keepMovingY^0,c
  5978  000AD2                     
  5979                           ;motors.c: 359:     T2CONbits.TMR2ON = 1;
  5980  000AD2  84CA               	bsf	202,2,c	;volatile
  5981                           
  5982                           ;motors.c: 361:     tm0Error = 0;
  5983  000AD4  0E00               	movlw	0
  5984  000AD6  6E5A               	movwf	(_tm0Error+1)^0,c
  5985  000AD8  0E00               	movlw	0
  5986  000ADA  6E59               	movwf	_tm0Error^0,c
  5987                           
  5988                           ;motors.c: 362:     tm0Limit = 200;
  5989  000ADC  0EC8               	movlw	200
  5990  000ADE  6E66               	movwf	_tm0Limit^0,c
  5991  000AE0                     
  5992                           ;motors.c: 363:     T0CONbits.TMR0ON = 1;
  5993  000AE0  8ED5               	bsf	213,7,c	;volatile
  5994                           
  5995                           ;motors.c: 365:     while(keepMovingX || keepMovingY){
  5996  000AE2  EFA0  F006         	goto	l4104
  5997  000AE6                     l4042:
  5998  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  5999                           
  6000                           ;motors.c: 368:         if(tm0Error){
  6001  000AE8  5059               	movf	_tm0Error^0,w,c
  6002  000AEA  105A               	iorwf	(_tm0Error+1)^0,w,c
  6003  000AEC  B4D8               	btfsc	status,2,c
  6004  000AEE  EF7B  F005         	goto	u3401
  6005  000AF2  EF7E  F005         	goto	u3400
  6006  000AF6                     u3401:
  6007  000AF6  FFFF               	dw	65535	; assembler added errata NOP
  6008  000AF8  EF85  F005         	goto	l4046
  6009  000AFC                     u3400:
  6010  000AFC  FFFF               	dw	65535	; assembler added errata NOP
  6011  000AFE                     
  6012                           ;motors.c: 374:             tm0Error = 4;
  6013  000AFE  0E00               	movlw	0
  6014  000B00  6E5A               	movwf	(_tm0Error+1)^0,c
  6015  000B02  0E04               	movlw	4
  6016  000B04  6E59               	movwf	_tm0Error^0,c
  6017                           
  6018                           ;motors.c: 375:             break;
  6019  000B06  EFB4  F006         	goto	l161
  6020  000B0A                     l4046:
  6021  000B0A  FFFF               	dw	65535	; assembler added errata NOP
  6022                           
  6023                           ;motors.c: 383:         if(MOT1Direction == 1){
  6024  000B0C  041F               	decf	moveToPoint@MOT1Direction^0,w,c
  6025  000B0E  A4D8               	btfss	status,2,c
  6026  000B10  EF8C  F005         	goto	u3411
  6027  000B14  EF8F  F005         	goto	u3410
  6028  000B18                     u3411:
  6029  000B18  FFFF               	dw	65535	; assembler added errata NOP
  6030  000B1A  EFCE  F005         	goto	l4060
  6031  000B1E                     u3410:
  6032  000B1E  FFFF               	dw	65535	; assembler added errata NOP
  6033  000B20                     
  6034                           ;motors.c: 384:             if(x1 + stepCounter() >= x2){
  6035  000B20  EC3F  F013         	call	_stepCounter	;wreg free
  6036  000B24  5015               	movf	moveToPoint@x1^0,w,c
  6037  000B26  2612               	addwf	?_stepCounter^0,f,c
  6038  000B28  5016               	movf	(moveToPoint@x1+1)^0,w,c
  6039  000B2A  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6040  000B2C  5019               	movf	moveToPoint@x2^0,w,c
  6041  000B2E  5C12               	subwf	?_stepCounter^0,w,c
  6042  000B30  501A               	movf	(moveToPoint@x2+1)^0,w,c
  6043  000B32  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6044  000B34  A0D8               	btfss	status,0,c
  6045  000B36  EF9F  F005         	goto	u3421
  6046  000B3A  EFA2  F005         	goto	u3420
  6047  000B3E                     u3421:
  6048  000B3E  FFFF               	dw	65535	; assembler added errata NOP
  6049  000B40  EFA8  F005         	goto	l4052
  6050  000B44                     u3420:
  6051  000B44  FFFF               	dw	65535	; assembler added errata NOP
  6052  000B46                     l4050:
  6053  000B46  FFFF               	dw	65535	; assembler added errata NOP
  6054                           
  6055                           ;motors.c: 386:                 keepMovingX = 0;
  6056  000B48  0E00               	movlw	0
  6057  000B4A  6E21               	movwf	moveToPoint@keepMovingX^0,c
  6058                           
  6059                           ;motors.c: 387:             }else if(keepMovingX){
  6060  000B4C  EF0C  F006         	goto	l4074
  6061  000B50                     l4052:
  6062  000B50  FFFF               	dw	65535	; assembler added errata NOP
  6063  000B52  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6064  000B54  B4D8               	btfsc	status,2,c
  6065  000B56  EFAF  F005         	goto	u3431
  6066  000B5A  EFB2  F005         	goto	u3430
  6067  000B5E                     u3431:
  6068  000B5E  FFFF               	dw	65535	; assembler added errata NOP
  6069  000B60  EF0C  F006         	goto	l4074
  6070  000B64                     u3430:
  6071  000B64  FFFF               	dw	65535	; assembler added errata NOP
  6072  000B66                     
  6073                           ;motors.c: 393:             motCounter[0][0] += motCounter[0][1];
  6074  000B66  5068               	movf	(_motCounter+1)^0,w,c
  6075  000B68  2667               	addwf	_motCounter^0,f,c
  6076                           
  6077                           ;motors.c: 394:             if(motCounter[0][0] > 3){
  6078  000B6A  5067               	movf	_motCounter^0,w,c
  6079  000B6C  0A80               	xorlw	128
  6080  000B6E  0F7C               	addlw	-132
  6081  000B70  A0D8               	btfss	status,0,c
  6082  000B72  EFBD  F005         	goto	u3441
  6083  000B76  EFC0  F005         	goto	u3440
  6084  000B7A                     u3441:
  6085  000B7A  FFFF               	dw	65535	; assembler added errata NOP
  6086  000B7C  EFC3  F005         	goto	l4058
  6087  000B80                     u3440:
  6088  000B80  FFFF               	dw	65535	; assembler added errata NOP
  6089  000B82                     
  6090                           ;motors.c: 395:                 motCounter[0][0] = 0;
  6091  000B82  0E00               	movlw	0
  6092  000B84  6E67               	movwf	_motCounter^0,c
  6093  000B86                     l4058:
  6094  000B86  FFFF               	dw	65535	; assembler added errata NOP
  6095                           
  6096                           ;motors.c: 398:             LATA = stepMot1[motCounter[0][0]];
  6097  000B88  0E8C               	movlw	low _stepMot1
  6098  000B8A  2467               	addwf	_motCounter^0,w,c
  6099  000B8C  6ED9               	movwf	fsr2l,c
  6100  000B8E  6ADA               	clrf	fsr2h,c
  6101  000B90  0E00               	movlw	high _stepMot1
  6102  000B92  22DA               	addwfc	fsr2h,f,c
  6103  000B94  50DF               	movf	indf2,w,c
  6104  000B96  6E89               	movwf	137,c	;volatile
  6105  000B98  EF0C  F006         	goto	l4074
  6106  000B9C                     l4060:
  6107  000B9C  FFFF               	dw	65535	; assembler added errata NOP
  6108  000B9E  501F               	movf	moveToPoint@MOT1Direction^0,w,c
  6109  000BA0  A4D8               	btfss	status,2,c
  6110  000BA2  EFD5  F005         	goto	u3451
  6111  000BA6  EFD8  F005         	goto	u3450
  6112  000BAA                     u3451:
  6113  000BAA  FFFF               	dw	65535	; assembler added errata NOP
  6114  000BAC  EF0C  F006         	goto	l4074
  6115  000BB0                     u3450:
  6116  000BB0  FFFF               	dw	65535	; assembler added errata NOP
  6117  000BB2                     
  6118                           ;motors.c: 402:             if(x1 - stepCounter() <= x2){
  6119  000BB2  EC3F  F013         	call	_stepCounter	;wreg free
  6120  000BB6  C015  F01D         	movff	moveToPoint@x1,??_moveToPoint
  6121  000BBA  C016  F01E         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6122  000BBE  5012               	movf	?_stepCounter^0,w,c
  6123  000BC0  5E1D               	subwf	??_moveToPoint^0,f,c
  6124  000BC2  5013               	movf	(?_stepCounter+1)^0,w,c
  6125  000BC4  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6126  000BC6  501D               	movf	??_moveToPoint^0,w,c
  6127  000BC8  5C19               	subwf	moveToPoint@x2^0,w,c
  6128  000BCA  501E               	movf	(??_moveToPoint+1)^0,w,c
  6129  000BCC  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  6130  000BCE  A0D8               	btfss	status,0,c
  6131  000BD0  EFEC  F005         	goto	u3461
  6132  000BD4  EFEF  F005         	goto	u3460
  6133  000BD8                     u3461:
  6134  000BD8  FFFF               	dw	65535	; assembler added errata NOP
  6135  000BDA  EFF2  F005         	goto	l4066
  6136  000BDE                     u3460:
  6137  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  6138  000BE0  EFA3  F005         	goto	l4050
  6139  000BE4                     l4066:
  6140  000BE4  FFFF               	dw	65535	; assembler added errata NOP
  6141  000BE6  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6142  000BE8  B4D8               	btfsc	status,2,c
  6143  000BEA  EFF9  F005         	goto	u3471
  6144  000BEE  EFFC  F005         	goto	u3470
  6145  000BF2                     u3471:
  6146  000BF2  FFFF               	dw	65535	; assembler added errata NOP
  6147  000BF4  EF0C  F006         	goto	l4074
  6148  000BF8                     u3470:
  6149  000BF8  FFFF               	dw	65535	; assembler added errata NOP
  6150  000BFA                     
  6151                           ;motors.c: 411:             motCounter[0][0] += motCounter[0][1];
  6152  000BFA  5068               	movf	(_motCounter+1)^0,w,c
  6153  000BFC  2667               	addwf	_motCounter^0,f,c
  6154                           
  6155                           ;motors.c: 412:             if(motCounter[0][0] < 0){
  6156  000BFE  BE67               	btfsc	_motCounter^0,7,c
  6157  000C00  EF07  F006         	goto	u3480
  6158  000C04  EF04  F006         	goto	u3481
  6159  000C08                     u3481:
  6160  000C08  FFFF               	dw	65535	; assembler added errata NOP
  6161  000C0A  EFC3  F005         	goto	l4058
  6162  000C0E                     u3480:
  6163  000C0E  FFFF               	dw	65535	; assembler added errata NOP
  6164  000C10                     
  6165                           ;motors.c: 413:                 motCounter[0][0] = 3;
  6166  000C10  0E03               	movlw	3
  6167  000C12  6E67               	movwf	_motCounter^0,c
  6168  000C14  EFC3  F005         	goto	l4058
  6169  000C18                     l4074:
  6170  000C18  FFFF               	dw	65535	; assembler added errata NOP
  6171                           
  6172                           ;motors.c: 421:         if(MOT2Direction == 1){
  6173  000C1A  0420               	decf	moveToPoint@MOT2Direction^0,w,c
  6174  000C1C  A4D8               	btfss	status,2,c
  6175  000C1E  EF13  F006         	goto	u3491
  6176  000C22  EF16  F006         	goto	u3490
  6177  000C26                     u3491:
  6178  000C26  FFFF               	dw	65535	; assembler added errata NOP
  6179  000C28  EF55  F006         	goto	l4088
  6180  000C2C                     u3490:
  6181  000C2C  FFFF               	dw	65535	; assembler added errata NOP
  6182  000C2E                     
  6183                           ;motors.c: 423:             if(y1 + stepCounter() >= y2){
  6184  000C2E  EC3F  F013         	call	_stepCounter	;wreg free
  6185  000C32  5017               	movf	moveToPoint@y1^0,w,c
  6186  000C34  2612               	addwf	?_stepCounter^0,f,c
  6187  000C36  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6188  000C38  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6189  000C3A  501B               	movf	moveToPoint@y2^0,w,c
  6190  000C3C  5C12               	subwf	?_stepCounter^0,w,c
  6191  000C3E  501C               	movf	(moveToPoint@y2+1)^0,w,c
  6192  000C40  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6193  000C42  A0D8               	btfss	status,0,c
  6194  000C44  EF26  F006         	goto	u3501
  6195  000C48  EF29  F006         	goto	u3500
  6196  000C4C                     u3501:
  6197  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  6198  000C4E  EF2F  F006         	goto	l4080
  6199  000C52                     u3500:
  6200  000C52  FFFF               	dw	65535	; assembler added errata NOP
  6201  000C54                     l4078:
  6202  000C54  FFFF               	dw	65535	; assembler added errata NOP
  6203                           
  6204                           ;motors.c: 425:                 keepMovingY = 0;
  6205  000C56  0E00               	movlw	0
  6206  000C58  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6207                           
  6208                           ;motors.c: 426:             }else if(keepMovingY){
  6209  000C5A  EF93  F006         	goto	l4102
  6210  000C5E                     l4080:
  6211  000C5E  FFFF               	dw	65535	; assembler added errata NOP
  6212  000C60  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6213  000C62  B4D8               	btfsc	status,2,c
  6214  000C64  EF36  F006         	goto	u3511
  6215  000C68  EF39  F006         	goto	u3510
  6216  000C6C                     u3511:
  6217  000C6C  FFFF               	dw	65535	; assembler added errata NOP
  6218  000C6E  EF93  F006         	goto	l178
  6219  000C72                     u3510:
  6220  000C72  FFFF               	dw	65535	; assembler added errata NOP
  6221  000C74                     
  6222                           ;motors.c: 432:             motCounter[1][0] += motCounter[1][1];
  6223  000C74  506A               	movf	(_motCounter+3)^0,w,c
  6224  000C76  2669               	addwf	(_motCounter+2)^0,f,c
  6225                           
  6226                           ;motors.c: 433:             if(motCounter[1][0] > 3){
  6227  000C78  5069               	movf	(_motCounter+2)^0,w,c
  6228  000C7A  0A80               	xorlw	128
  6229  000C7C  0F7C               	addlw	-132
  6230  000C7E  A0D8               	btfss	status,0,c
  6231  000C80  EF44  F006         	goto	u3521
  6232  000C84  EF47  F006         	goto	u3520
  6233  000C88                     u3521:
  6234  000C88  FFFF               	dw	65535	; assembler added errata NOP
  6235  000C8A  EF4A  F006         	goto	l4086
  6236  000C8E                     u3520:
  6237  000C8E  FFFF               	dw	65535	; assembler added errata NOP
  6238  000C90                     
  6239                           ;motors.c: 434:                 motCounter[1][0] = 0;
  6240  000C90  0E00               	movlw	0
  6241  000C92  6E69               	movwf	(_motCounter+2)^0,c
  6242  000C94                     l4086:
  6243  000C94  FFFF               	dw	65535	; assembler added errata NOP
  6244                           
  6245                           ;motors.c: 437:             LATB = stepMot2[motCounter[1][0]];
  6246  000C96  0E88               	movlw	low _stepMot2
  6247  000C98  2469               	addwf	(_motCounter+2)^0,w,c
  6248  000C9A  6ED9               	movwf	fsr2l,c
  6249  000C9C  6ADA               	clrf	fsr2h,c
  6250  000C9E  0E00               	movlw	high _stepMot2
  6251  000CA0  22DA               	addwfc	fsr2h,f,c
  6252  000CA2  50DF               	movf	indf2,w,c
  6253  000CA4  6E8A               	movwf	138,c	;volatile
  6254  000CA6  EF93  F006         	goto	l4102
  6255  000CAA                     l4088:
  6256  000CAA  FFFF               	dw	65535	; assembler added errata NOP
  6257  000CAC  5020               	movf	moveToPoint@MOT2Direction^0,w,c
  6258  000CAE  A4D8               	btfss	status,2,c
  6259  000CB0  EF5C  F006         	goto	u3531
  6260  000CB4  EF5F  F006         	goto	u3530
  6261  000CB8                     u3531:
  6262  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6263  000CBA  EF93  F006         	goto	l4102
  6264  000CBE                     u3530:
  6265  000CBE  FFFF               	dw	65535	; assembler added errata NOP
  6266  000CC0                     
  6267                           ;motors.c: 442:             if(y1 - stepCounter() <= y2){
  6268  000CC0  EC3F  F013         	call	_stepCounter	;wreg free
  6269  000CC4  C017  F01D         	movff	moveToPoint@y1,??_moveToPoint
  6270  000CC8  C018  F01E         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6271  000CCC  5012               	movf	?_stepCounter^0,w,c
  6272  000CCE  5E1D               	subwf	??_moveToPoint^0,f,c
  6273  000CD0  5013               	movf	(?_stepCounter+1)^0,w,c
  6274  000CD2  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6275  000CD4  501D               	movf	??_moveToPoint^0,w,c
  6276  000CD6  5C1B               	subwf	moveToPoint@y2^0,w,c
  6277  000CD8  501E               	movf	(??_moveToPoint+1)^0,w,c
  6278  000CDA  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6279  000CDC  A0D8               	btfss	status,0,c
  6280  000CDE  EF73  F006         	goto	u3541
  6281  000CE2  EF76  F006         	goto	u3540
  6282  000CE6                     u3541:
  6283  000CE6  FFFF               	dw	65535	; assembler added errata NOP
  6284  000CE8  EF79  F006         	goto	l4094
  6285  000CEC                     u3540:
  6286  000CEC  FFFF               	dw	65535	; assembler added errata NOP
  6287  000CEE  EF2A  F006         	goto	l4078
  6288  000CF2                     l4094:
  6289  000CF2  FFFF               	dw	65535	; assembler added errata NOP
  6290  000CF4  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6291  000CF6  B4D8               	btfsc	status,2,c
  6292  000CF8  EF80  F006         	goto	u3551
  6293  000CFC  EF83  F006         	goto	u3550
  6294  000D00                     u3551:
  6295  000D00  FFFF               	dw	65535	; assembler added errata NOP
  6296  000D02  EF93  F006         	goto	l4102
  6297  000D06                     u3550:
  6298  000D06  FFFF               	dw	65535	; assembler added errata NOP
  6299  000D08                     
  6300                           ;motors.c: 451:             motCounter[1][0] += motCounter[1][1];
  6301  000D08  506A               	movf	(_motCounter+3)^0,w,c
  6302  000D0A  2669               	addwf	(_motCounter+2)^0,f,c
  6303                           
  6304                           ;motors.c: 452:             if(motCounter[1][0] < 0){
  6305  000D0C  BE69               	btfsc	(_motCounter+2)^0,7,c
  6306  000D0E  EF8E  F006         	goto	u3560
  6307  000D12  EF8B  F006         	goto	u3561
  6308  000D16                     u3561:
  6309  000D16  FFFF               	dw	65535	; assembler added errata NOP
  6310  000D18  EF4A  F006         	goto	l4086
  6311  000D1C                     u3560:
  6312  000D1C  FFFF               	dw	65535	; assembler added errata NOP
  6313  000D1E                     
  6314                           ;motors.c: 453:                 motCounter[1][0] = 3;
  6315  000D1E  0E03               	movlw	3
  6316  000D20  6E69               	movwf	(_motCounter+2)^0,c
  6317  000D22  EF4A  F006         	goto	l4086
  6318  000D26                     l178:
  6319  000D26                     l4102:
  6320  000D26  FFFF               	dw	65535	; assembler added errata NOP
  6321  000D28  ECDB  F012         	call	_stepMade	;wreg free
  6322  000D2C  5012               	movf	?_stepMade^0,w,c
  6323  000D2E  1013               	iorwf	(?_stepMade+1)^0,w,c
  6324  000D30  B4D8               	btfsc	status,2,c
  6325  000D32  EF9D  F006         	goto	u3571
  6326  000D36  EFA0  F006         	goto	u3570
  6327  000D3A                     u3571:
  6328  000D3A  FFFF               	dw	65535	; assembler added errata NOP
  6329  000D3C  EF93  F006         	goto	l4102
  6330  000D40                     u3570:
  6331  000D40                     l4104:
  6332  000D40  FFFF               	dw	65535	; assembler added errata NOP
  6333                           
  6334                           ;motors.c: 365:     while(keepMovingX || keepMovingY){
  6335  000D42  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6336  000D44  A4D8               	btfss	status,2,c
  6337  000D46  EFA7  F006         	goto	u3581
  6338  000D4A  EFAA  F006         	goto	u3580
  6339  000D4E                     u3581:
  6340  000D4E  FFFF               	dw	65535	; assembler added errata NOP
  6341  000D50  EF73  F005         	goto	l4042
  6342  000D54                     u3580:
  6343  000D54  FFFF               	dw	65535	; assembler added errata NOP
  6344  000D56  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6345  000D58  A4D8               	btfss	status,2,c
  6346  000D5A  EFB1  F006         	goto	u3591
  6347  000D5E  EFB4  F006         	goto	u3590
  6348  000D62                     u3591:
  6349  000D62  FFFF               	dw	65535	; assembler added errata NOP
  6350  000D64  EF73  F005         	goto	l4042
  6351  000D68                     u3590:
  6352  000D68                     l161:
  6353  000D68  FFFF               	dw	65535	; assembler added errata NOP
  6354                           
  6355                           ;motors.c: 476:     T0CONbits.TMR0ON = 0;
  6356  000D6A  9ED5               	bcf	213,7,c	;volatile
  6357                           
  6358                           ;motors.c: 477:     T2CONbits.TMR2ON = 0;
  6359  000D6C  94CA               	bcf	202,2,c	;volatile
  6360  000D6E                     
  6361                           ;motors.c: 479:     resetTM0_Temp();
  6362  000D6E  EC59  F013         	call	_resetTM0_Temp	;wreg free
  6363                           
  6364                           ;motors.c: 480:     resetTM2_Temp();
  6365  000D72  ECF7  F012         	call	_resetTM2_Temp	;wreg free
  6366  000D76                     
  6367                           ;motors.c: 482:     TMR0 = 0;
  6368  000D76  0E00               	movlw	0
  6369  000D78  6ED7               	movwf	215,c	;volatile
  6370  000D7A  0E00               	movlw	0
  6371  000D7C  6ED6               	movwf	214,c	;volatile
  6372  000D7E                     
  6373                           ;motors.c: 483:     TMR2 = 0;
  6374  000D7E  0E00               	movlw	0
  6375  000D80  6ECC               	movwf	204,c	;volatile
  6376                           
  6377                           ;motors.c: 486:     resetStep();
  6378  000D82  EC5E  F013         	call	_resetStep	;wreg free
  6379  000D86                     
  6380                           ;motors.c: 488:     return(tm0Error);
  6381  000D86  5059               	movf	_tm0Error^0,w,c
  6382  000D88  0012               	return		;funcret
  6383  000D8A  FFFF               	dw	65535	; errata NOP
  6384  000D8C                     __end_of_moveToPoint:
  6385                           	callstack 0
  6386                           
  6387 ;; *************** function _stepCounter *****************
  6388 ;; Defined at:
  6389 ;;		line 71 in file "timer.c"
  6390 ;; Parameters:    Size  Location     Type
  6391 ;;		None
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;		None
  6394 ;; Return value:  Size  Location     Type
  6395 ;;                  2   17[COMRAM] unsigned int 
  6396 ;; Registers used:
  6397 ;;		None
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6403 ;;      Params:         2       0       0       0       0       0       0
  6404 ;;      Locals:         0       0       0       0       0       0       0
  6405 ;;      Temps:          0       0       0       0       0       0       0
  6406 ;;      Totals:         2       0       0       0       0       0       0
  6407 ;;Total ram usage:        2 bytes
  6408 ;; Hardware stack levels used:    1
  6409 ;; Hardware stack levels required when called:    4
  6410 ;; This function calls:
  6411 ;;		Nothing
  6412 ;; This function is called by:
  6413 ;;		_moveToPoint
  6414 ;; This function uses a non-reentrant model
  6415 ;;
  6416                           
  6417                           	psect	text34
  6418  00267E                     __ptext34:
  6419                           	callstack 0
  6420  00267E                     _stepCounter:
  6421                           	callstack 0
  6422  00267E  FFFF               	dw	65535	; assembler added errata NOP
  6423  002680                     
  6424                           ;timer.c: 72:     return pwmStep;
  6425  002680  C05C  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6426  002684  6A13               	clrf	(?_stepCounter+1)^0,c
  6427  002686  0012               	return		;funcret
  6428  002688  FFFF               	dw	65535	; errata NOP
  6429  00268A                     __end_of_stepCounter:
  6430                           	callstack 0
  6431                           
  6432 ;; *************** function _liftArm *****************
  6433 ;; Defined at:
  6434 ;;		line 690 in file "motors.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;		None
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;		None
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  1    wreg      unsigned char 
  6441 ;; Registers used:
  6442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6448 ;;      Params:         0       0       0       0       0       0       0
  6449 ;;      Locals:         0       0       0       0       0       0       0
  6450 ;;      Temps:          0       0       0       0       0       0       0
  6451 ;;      Totals:         0       0       0       0       0       0       0
  6452 ;;Total ram usage:        0 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    5
  6455 ;; This function calls:
  6456 ;;		_resetStep
  6457 ;;		_resetTM0_Temp
  6458 ;;		_resetTM2_Temp
  6459 ;;		_stepMade
  6460 ;; This function is called by:
  6461 ;;		_executeData
  6462 ;; This function uses a non-reentrant model
  6463 ;;
  6464                           
  6465                           	psect	text35
  6466  00222A                     __ptext35:
  6467                           	callstack 0
  6468  00222A                     _liftArm:
  6469                           	callstack 0
  6470  00222A  FFFF               	dw	65535	; assembler added errata NOP
  6471  00222C                     
  6472                           ;motors.c: 696:     motCounter[2][1] = -1;
  6473  00222C  686C               	setf	(_motCounter+5)^0,c
  6474                           
  6475                           ;motors.c: 699:     T2CONbits.TMR2ON = 1;
  6476  00222E  84CA               	bsf	202,2,c	;volatile
  6477  002230                     
  6478                           ;motors.c: 701:     tm0Error = 0;
  6479  002230  0E00               	movlw	0
  6480  002232  6E5A               	movwf	(_tm0Error+1)^0,c
  6481  002234  0E00               	movlw	0
  6482  002236  6E59               	movwf	_tm0Error^0,c
  6483                           
  6484                           ;motors.c: 702:     tm0Limit = 200;
  6485  002238  0EC8               	movlw	200
  6486  00223A  6E66               	movwf	_tm0Limit^0,c
  6487  00223C                     
  6488                           ;motors.c: 703:     T0CONbits.TMR0ON = 1;
  6489  00223C  8ED5               	bsf	213,7,c	;volatile
  6490                           
  6491                           ;motors.c: 707:     while(!PORTEbits.RE2){
  6492  00223E  EF59  F011         	goto	l214
  6493  002242                     l4224:
  6494  002242  FFFF               	dw	65535	; assembler added errata NOP
  6495                           
  6496                           ;motors.c: 709:         resetStep();
  6497  002244  EC5E  F013         	call	_resetStep	;wreg free
  6498  002248                     
  6499                           ;motors.c: 712:         if(tm0Error){
  6500  002248  5059               	movf	_tm0Error^0,w,c
  6501  00224A  105A               	iorwf	(_tm0Error+1)^0,w,c
  6502  00224C  B4D8               	btfsc	status,2,c
  6503  00224E  EF2B  F011         	goto	u3721
  6504  002252  EF2E  F011         	goto	u3720
  6505  002256                     u3721:
  6506  002256  FFFF               	dw	65535	; assembler added errata NOP
  6507  002258  EF35  F011         	goto	l4230
  6508  00225C                     u3720:
  6509  00225C  FFFF               	dw	65535	; assembler added errata NOP
  6510  00225E                     
  6511                           ;motors.c: 717:             tm0Error = 6;
  6512  00225E  0E00               	movlw	0
  6513  002260  6E5A               	movwf	(_tm0Error+1)^0,c
  6514  002262  0E06               	movlw	6
  6515  002264  6E59               	movwf	_tm0Error^0,c
  6516                           
  6517                           ;motors.c: 718:             break;
  6518  002266  EF62  F011         	goto	l217
  6519  00226A                     l4230:
  6520  00226A  FFFF               	dw	65535	; assembler added errata NOP
  6521                           
  6522                           ;motors.c: 727:             motCounter[2][0] += motCounter[2][1];
  6523  00226C  506C               	movf	(_motCounter+5)^0,w,c
  6524  00226E  266B               	addwf	(_motCounter+4)^0,f,c
  6525                           
  6526                           ;motors.c: 728:             if(motCounter[2][0] < 0){
  6527  002270  BE6B               	btfsc	(_motCounter+4)^0,7,c
  6528  002272  EF40  F011         	goto	u3730
  6529  002276  EF3D  F011         	goto	u3731
  6530  00227A                     u3731:
  6531  00227A  FFFF               	dw	65535	; assembler added errata NOP
  6532  00227C  EF43  F011         	goto	l4234
  6533  002280                     u3730:
  6534  002280  FFFF               	dw	65535	; assembler added errata NOP
  6535  002282                     
  6536                           ;motors.c: 729:                 motCounter[2][0] = 3;
  6537  002282  0E03               	movlw	3
  6538  002284  6E6B               	movwf	(_motCounter+4)^0,c
  6539  002286                     l4234:
  6540  002286  FFFF               	dw	65535	; assembler added errata NOP
  6541                           
  6542                           ;motors.c: 732:             LATC = stepMot3[motCounter[2][0]];
  6543  002288  0E84               	movlw	low _stepMot3
  6544  00228A  246B               	addwf	(_motCounter+4)^0,w,c
  6545  00228C  6ED9               	movwf	fsr2l,c
  6546  00228E  6ADA               	clrf	fsr2h,c
  6547  002290  0E00               	movlw	high _stepMot3
  6548  002292  22DA               	addwfc	fsr2h,f,c
  6549  002294  50DF               	movf	indf2,w,c
  6550  002296  6E8B               	movwf	139,c	;volatile
  6551  002298                     l4236:
  6552  002298  FFFF               	dw	65535	; assembler added errata NOP
  6553  00229A  ECDB  F012         	call	_stepMade	;wreg free
  6554  00229E  5012               	movf	?_stepMade^0,w,c
  6555  0022A0  1013               	iorwf	(?_stepMade+1)^0,w,c
  6556  0022A2  B4D8               	btfsc	status,2,c
  6557  0022A4  EF56  F011         	goto	u3741
  6558  0022A8  EF59  F011         	goto	u3740
  6559  0022AC                     u3741:
  6560  0022AC  FFFF               	dw	65535	; assembler added errata NOP
  6561  0022AE  EF4C  F011         	goto	l4236
  6562  0022B2                     u3740:
  6563  0022B2                     l214:
  6564  0022B2  FFFF               	dw	65535	; assembler added errata NOP
  6565                           
  6566                           ;motors.c: 707:     while(!PORTEbits.RE2){
  6567  0022B4  A484               	btfss	132,2,c	;volatile
  6568  0022B6  EF5F  F011         	goto	u3751
  6569  0022BA  EF62  F011         	goto	u3750
  6570  0022BE                     u3751:
  6571  0022BE  FFFF               	dw	65535	; assembler added errata NOP
  6572  0022C0  EF21  F011         	goto	l4224
  6573  0022C4                     u3750:
  6574  0022C4                     l217:
  6575  0022C4  FFFF               	dw	65535	; assembler added errata NOP
  6576                           
  6577                           ;motors.c: 749:     T0CONbits.TMR0ON = 0;
  6578  0022C6  9ED5               	bcf	213,7,c	;volatile
  6579                           
  6580                           ;motors.c: 750:     T2CONbits.TMR2ON = 0;
  6581  0022C8  94CA               	bcf	202,2,c	;volatile
  6582  0022CA                     
  6583                           ;motors.c: 752:     resetTM0_Temp();
  6584  0022CA  EC59  F013         	call	_resetTM0_Temp	;wreg free
  6585                           
  6586                           ;motors.c: 753:     resetTM2_Temp();
  6587  0022CE  ECF7  F012         	call	_resetTM2_Temp	;wreg free
  6588  0022D2                     
  6589                           ;motors.c: 755:     TMR0 = 0;
  6590  0022D2  0E00               	movlw	0
  6591  0022D4  6ED7               	movwf	215,c	;volatile
  6592  0022D6  0E00               	movlw	0
  6593  0022D8  6ED6               	movwf	214,c	;volatile
  6594  0022DA                     
  6595                           ;motors.c: 756:     TMR2 = 0;
  6596  0022DA  0E00               	movlw	0
  6597  0022DC  6ECC               	movwf	204,c	;volatile
  6598                           
  6599                           ;motors.c: 759:     resetStep();
  6600  0022DE  EC5E  F013         	call	_resetStep	;wreg free
  6601  0022E2                     
  6602                           ;motors.c: 761:     return(tm0Error);
  6603  0022E2  5059               	movf	_tm0Error^0,w,c
  6604  0022E4  0012               	return		;funcret
  6605  0022E6  FFFF               	dw	65535	; errata NOP
  6606  0022E8                     __end_of_liftArm:
  6607                           	callstack 0
  6608                           
  6609 ;; *************** function _stepMade *****************
  6610 ;; Defined at:
  6611 ;;		line 60 in file "timer.c"
  6612 ;; Parameters:    Size  Location     Type
  6613 ;;		None
  6614 ;; Auto vars:     Size  Location     Type
  6615 ;;  temp            1   19[COMRAM] unsigned char 
  6616 ;; Return value:  Size  Location     Type
  6617 ;;                  2   17[COMRAM] unsigned int 
  6618 ;; Registers used:
  6619 ;;		wreg, status,2
  6620 ;; Tracked objects:
  6621 ;;		On entry : 0/0
  6622 ;;		On exit  : 0/0
  6623 ;;		Unchanged: 0/0
  6624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6625 ;;      Params:         2       0       0       0       0       0       0
  6626 ;;      Locals:         1       0       0       0       0       0       0
  6627 ;;      Temps:          0       0       0       0       0       0       0
  6628 ;;      Totals:         3       0       0       0       0       0       0
  6629 ;;Total ram usage:        3 bytes
  6630 ;; Hardware stack levels used:    1
  6631 ;; Hardware stack levels required when called:    4
  6632 ;; This function calls:
  6633 ;;		Nothing
  6634 ;; This function is called by:
  6635 ;;		_resetPosition
  6636 ;;		_moveToPoint
  6637 ;;		_touchObject
  6638 ;;		_touchTherm
  6639 ;;		_liftArm
  6640 ;;		_rotateObj
  6641 ;;		_pickObject
  6642 ;;		_releaseObj
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           	psect	text36
  6647  0025B6                     __ptext36:
  6648                           	callstack 0
  6649  0025B6                     _stepMade:
  6650                           	callstack 0
  6651  0025B6  FFFF               	dw	65535	; assembler added errata NOP
  6652  0025B8                     
  6653                           ;timer.c: 61:     unsigned char temp = stepToggle;
  6654  0025B8  C05B  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6655  0025BC                     
  6656                           ;timer.c: 63:     stepToggle = 0;
  6657  0025BC  0E00               	movlw	0
  6658  0025BE  6E5B               	movwf	_stepToggle^0,c	;volatile
  6659  0025C0                     
  6660                           ;timer.c: 65:     return temp;
  6661  0025C0  C014  F012         	movff	stepMade@temp,?_stepMade
  6662  0025C4  6A13               	clrf	(?_stepMade+1)^0,c
  6663  0025C6  0012               	return		;funcret
  6664  0025C8  FFFF               	dw	65535	; errata NOP
  6665  0025CA                     __end_of_stepMade:
  6666                           	callstack 0
  6667                           
  6668 ;; *************** function _resetTM2_Temp *****************
  6669 ;; Defined at:
  6670 ;;		line 26 in file "interrupt.c"
  6671 ;; Parameters:    Size  Location     Type
  6672 ;;		None
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;		None
  6675 ;; Return value:  Size  Location     Type
  6676 ;;                  1    wreg      void 
  6677 ;; Registers used:
  6678 ;;		wreg, status,2
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6684 ;;      Params:         0       0       0       0       0       0       0
  6685 ;;      Locals:         0       0       0       0       0       0       0
  6686 ;;      Temps:          0       0       0       0       0       0       0
  6687 ;;      Totals:         0       0       0       0       0       0       0
  6688 ;;Total ram usage:        0 bytes
  6689 ;; Hardware stack levels used:    1
  6690 ;; Hardware stack levels required when called:    4
  6691 ;; This function calls:
  6692 ;;		Nothing
  6693 ;; This function is called by:
  6694 ;;		_resetPosition
  6695 ;;		_moveToPoint
  6696 ;;		_touchObject
  6697 ;;		_touchTherm
  6698 ;;		_liftArm
  6699 ;;		_rotateObj
  6700 ;;		_pickObject
  6701 ;;		_releaseObj
  6702 ;; This function uses a non-reentrant model
  6703 ;;
  6704                           
  6705                           	psect	text37
  6706  0025EE                     __ptext37:
  6707                           	callstack 0
  6708  0025EE                     _resetTM2_Temp:
  6709                           	callstack 0
  6710  0025EE  FFFF               	dw	65535	; assembler added errata NOP
  6711  0025F0                     
  6712                           ;interrupt.c: 27:     single_cycle = 0;
  6713  0025F0  0E00               	movlw	0
  6714  0025F2  6E52               	movwf	(_single_cycle+1)^0,c
  6715  0025F4  0E00               	movlw	0
  6716  0025F6  6E51               	movwf	_single_cycle^0,c
  6717                           
  6718                           ;interrupt.c: 28:     completeStep = 0;
  6719  0025F8  0E00               	movlw	0
  6720  0025FA  6E62               	movwf	_completeStep^0,c
  6721  0025FC  0012               	return		;funcret
  6722  0025FE  FFFF               	dw	65535	; errata NOP
  6723  002600                     __end_of_resetTM2_Temp:
  6724                           	callstack 0
  6725                           
  6726 ;; *************** function _resetTM0_Temp *****************
  6727 ;; Defined at:
  6728 ;;		line 22 in file "interrupt.c"
  6729 ;; Parameters:    Size  Location     Type
  6730 ;;		None
  6731 ;; Auto vars:     Size  Location     Type
  6732 ;;		None
  6733 ;; Return value:  Size  Location     Type
  6734 ;;                  1    wreg      void 
  6735 ;; Registers used:
  6736 ;;		wreg, status,2
  6737 ;; Tracked objects:
  6738 ;;		On entry : 0/0
  6739 ;;		On exit  : 0/0
  6740 ;;		Unchanged: 0/0
  6741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6742 ;;      Params:         0       0       0       0       0       0       0
  6743 ;;      Locals:         0       0       0       0       0       0       0
  6744 ;;      Temps:          0       0       0       0       0       0       0
  6745 ;;      Totals:         0       0       0       0       0       0       0
  6746 ;;Total ram usage:        0 bytes
  6747 ;; Hardware stack levels used:    1
  6748 ;; Hardware stack levels required when called:    4
  6749 ;; This function calls:
  6750 ;;		Nothing
  6751 ;; This function is called by:
  6752 ;;		_resetPosition
  6753 ;;		_moveToPoint
  6754 ;;		_touchObject
  6755 ;;		_touchTherm
  6756 ;;		_liftArm
  6757 ;; This function uses a non-reentrant model
  6758 ;;
  6759                           
  6760                           	psect	text38
  6761  0026B2                     __ptext38:
  6762                           	callstack 0
  6763  0026B2                     _resetTM0_Temp:
  6764                           	callstack 0
  6765  0026B2  FFFF               	dw	65535	; assembler added errata NOP
  6766  0026B4                     
  6767                           ;interrupt.c: 23:     tm0Count = 0;
  6768  0026B4  0E00               	movlw	0
  6769  0026B6  6E63               	movwf	_tm0Count^0,c
  6770  0026B8  0012               	return		;funcret
  6771  0026BA  FFFF               	dw	65535	; errata NOP
  6772  0026BC                     __end_of_resetTM0_Temp:
  6773                           	callstack 0
  6774                           
  6775 ;; *************** function _resetStep *****************
  6776 ;; Defined at:
  6777 ;;		line 78 in file "timer.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;		None
  6780 ;; Auto vars:     Size  Location     Type
  6781 ;;		None
  6782 ;; Return value:  Size  Location     Type
  6783 ;;                  1    wreg      void 
  6784 ;; Registers used:
  6785 ;;		wreg, status,2
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6791 ;;      Params:         0       0       0       0       0       0       0
  6792 ;;      Locals:         0       0       0       0       0       0       0
  6793 ;;      Temps:          0       0       0       0       0       0       0
  6794 ;;      Totals:         0       0       0       0       0       0       0
  6795 ;;Total ram usage:        0 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; Hardware stack levels required when called:    4
  6798 ;; This function calls:
  6799 ;;		Nothing
  6800 ;; This function is called by:
  6801 ;;		_resetPosition
  6802 ;;		_moveToPoint
  6803 ;;		_touchObject
  6804 ;;		_touchTherm
  6805 ;;		_liftArm
  6806 ;;		_rotateObj
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           	psect	text39
  6811  0026BC                     __ptext39:
  6812                           	callstack 0
  6813  0026BC                     _resetStep:
  6814                           	callstack 0
  6815  0026BC  FFFF               	dw	65535	; assembler added errata NOP
  6816  0026BE                     
  6817                           ;timer.c: 79:     pwmStep = 0;
  6818  0026BE  0E00               	movlw	0
  6819  0026C0  6E5C               	movwf	_pwmStep^0,c	;volatile
  6820  0026C2  0012               	return		;funcret
  6821  0026C4  FFFF               	dw	65535	; errata NOP
  6822  0026C6                     __end_of_resetStep:
  6823                           	callstack 0
  6824                           
  6825 ;; *************** function _getData *****************
  6826 ;; Defined at:
  6827 ;;		line 47 in file "usart.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;		None
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;		None
  6832 ;; Return value:  Size  Location     Type
  6833 ;;                  2   17[COMRAM] PTR struct .
  6834 ;; Registers used:
  6835 ;;		wreg, status,2, status,0
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6841 ;;      Params:         2       0       0       0       0       0       0
  6842 ;;      Locals:         0       0       0       0       0       0       0
  6843 ;;      Temps:          0       0       0       0       0       0       0
  6844 ;;      Totals:         2       0       0       0       0       0       0
  6845 ;;Total ram usage:        2 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; Hardware stack levels required when called:    4
  6848 ;; This function calls:
  6849 ;;		Nothing
  6850 ;; This function is called by:
  6851 ;;		_executeData
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           	psect	text40
  6856  00262E                     __ptext40:
  6857                           	callstack 0
  6858  00262E                     _getData:
  6859                           	callstack 0
  6860  00262E  FFFF               	dw	65535	; assembler added errata NOP
  6861  002630                     
  6862                           ;usart.c: 48:     return(&dataSequence[0]);
  6863  002630  0EC6               	movlw	low _dataSequence
  6864  002632  6E12               	movwf	?_getData^0,c
  6865  002634  0E00               	movlw	high _dataSequence
  6866  002636  6E13               	movwf	(?_getData+1)^0,c
  6867  002638  0012               	return		;funcret
  6868  00263A  FFFF               	dw	65535	; errata NOP
  6869  00263C                     __end_of_getData:
  6870                           	callstack 0
  6871                           
  6872 ;; *************** function _clearTM0 *****************
  6873 ;; Defined at:
  6874 ;;		line 32 in file "motors.c"
  6875 ;; Parameters:    Size  Location     Type
  6876 ;;		None
  6877 ;; Auto vars:     Size  Location     Type
  6878 ;;		None
  6879 ;; Return value:  Size  Location     Type
  6880 ;;                  1    wreg      void 
  6881 ;; Registers used:
  6882 ;;		wreg, status,2
  6883 ;; Tracked objects:
  6884 ;;		On entry : 0/0
  6885 ;;		On exit  : 0/0
  6886 ;;		Unchanged: 0/0
  6887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6888 ;;      Params:         0       0       0       0       0       0       0
  6889 ;;      Locals:         0       0       0       0       0       0       0
  6890 ;;      Temps:          0       0       0       0       0       0       0
  6891 ;;      Totals:         0       0       0       0       0       0       0
  6892 ;;Total ram usage:        0 bytes
  6893 ;; Hardware stack levels used:    1
  6894 ;; Hardware stack levels required when called:    4
  6895 ;; This function calls:
  6896 ;;		Nothing
  6897 ;; This function is called by:
  6898 ;;		_main
  6899 ;; This function uses a non-reentrant model
  6900 ;;
  6901                           
  6902                           	psect	text41
  6903  00263C                     __ptext41:
  6904                           	callstack 0
  6905  00263C                     _clearTM0:
  6906                           	callstack 0
  6907  00263C  FFFF               	dw	65535	; assembler added errata NOP
  6908  00263E                     
  6909                           ;motors.c: 33:     tm0Error = 0;
  6910  00263E  0E00               	movlw	0
  6911  002640  6E5A               	movwf	(_tm0Error+1)^0,c
  6912  002642  0E00               	movlw	0
  6913  002644  6E59               	movwf	_tm0Error^0,c
  6914  002646  0012               	return		;funcret
  6915  002648  FFFF               	dw	65535	; errata NOP
  6916  00264A                     __end_of_clearTM0:
  6917                           	callstack 0
  6918                           
  6919 ;; *************** function _isr *****************
  6920 ;; Defined at:
  6921 ;;		line 52 in file "interrupt.c"
  6922 ;; Parameters:    Size  Location     Type
  6923 ;;		None
  6924 ;; Auto vars:     Size  Location     Type
  6925 ;;  temp            1   16[COMRAM] unsigned char 
  6926 ;; Return value:  Size  Location     Type
  6927 ;;                  1    wreg      void 
  6928 ;; Registers used:
  6929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6930 ;; Tracked objects:
  6931 ;;		On entry : 0/0
  6932 ;;		On exit  : 0/0
  6933 ;;		Unchanged: 0/0
  6934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6935 ;;      Params:         0       0       0       0       0       0       0
  6936 ;;      Locals:         1       0       0       0       0       0       0
  6937 ;;      Temps:          6       0       0       0       0       0       0
  6938 ;;      Totals:         7       0       0       0       0       0       0
  6939 ;;Total ram usage:        7 bytes
  6940 ;; Hardware stack levels used:    1
  6941 ;; Hardware stack levels required when called:    3
  6942 ;; This function calls:
  6943 ;;		_abortAll
  6944 ;;		_fatalError
  6945 ;;		_increaseStep
  6946 ;;		_retPeriod
  6947 ;;		_setThermRel
  6948 ;;		_setTouchRel
  6949 ;;		_toggleStep
  6950 ;;		_whatsTM0Limit
  6951 ;;		_writeTM0
  6952 ;;		i2_storeData
  6953 ;; This function is called by:
  6954 ;;		Interrupt level 2
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	intcode
  6959  000008                     __pintcode:
  6960                           	callstack 0
  6961  000008                     _isr:
  6962                           	callstack 0
  6963  000008  FFFF               	dw	65535	; assembler added errata NOP
  6964                           
  6965                           ;incstack = 0
  6966  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6967  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6968  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6969  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6970  000018  CFF4 F010          	movff	prodh,??_isr+5
  6971  00001C                     
  6972                           ;interrupt.c: 56:     if(INTCONbits.T0IF){
  6973  00001C  A4F2               	btfss	242,2,c	;volatile
  6974  00001E  EF13  F000         	goto	i2u284_41
  6975  000022  EF16  F000         	goto	i2u284_40
  6976  000026                     i2u284_41:
  6977  000026  FFFF               	dw	65535	; assembler added errata NOP
  6978  000028  EF2C  F000         	goto	i2l3574
  6979  00002C                     i2u284_40:
  6980  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6981  00002E                     
  6982                           ;interrupt.c: 57:         INTCONbits.T0IF = 0;
  6983  00002E  94F2               	bcf	242,2,c	;volatile
  6984  000030                     
  6985                           ;interrupt.c: 60:         tm0Count++;
  6986  000030  2A63               	incf	_tm0Count^0,f,c
  6987  000032                     
  6988                           ;interrupt.c: 62:         if(tm0Count >= whatsTM0Limit()){
  6989  000032  EC82  F013         	call	_whatsTM0Limit	;wreg free
  6990  000036  6E0B               	movwf	??_isr^0,c
  6991  000038  500B               	movf	??_isr^0,w,c
  6992  00003A  5C63               	subwf	_tm0Count^0,w,c
  6993  00003C  A0D8               	btfss	status,0,c
  6994  00003E  EF23  F000         	goto	i2u285_41
  6995  000042  EF26  F000         	goto	i2u285_40
  6996  000046                     i2u285_41:
  6997  000046  FFFF               	dw	65535	; assembler added errata NOP
  6998  000048  EF2C  F000         	goto	i2l3574
  6999  00004C                     i2u285_40:
  7000  00004C  FFFF               	dw	65535	; assembler added errata NOP
  7001  00004E                     
  7002                           ;interrupt.c: 63:             T0CONbits.TMR0ON = 0;
  7003  00004E  9ED5               	bcf	213,7,c	;volatile
  7004  000050                     
  7005                           ;interrupt.c: 64:             tm0Count = 0;
  7006  000050  0E00               	movlw	0
  7007  000052  6E63               	movwf	_tm0Count^0,c
  7008  000054                     
  7009                           ;interrupt.c: 65:             writeTM0();
  7010  000054  EC25  F013         	call	_writeTM0	;wreg free
  7011  000058                     i2l3574:
  7012  000058  FFFF               	dw	65535	; assembler added errata NOP
  7013                           
  7014                           ;interrupt.c: 70:     if(PIR1bits.TMR1IF){
  7015  00005A  A09E               	btfss	158,0,c	;volatile
  7016  00005C  EF32  F000         	goto	i2u286_41
  7017  000060  EF35  F000         	goto	i2u286_40
  7018  000064                     i2u286_41:
  7019  000064  FFFF               	dw	65535	; assembler added errata NOP
  7020  000066  EF45  F000         	goto	i2l3582
  7021  00006A                     i2u286_40:
  7022  00006A  FFFF               	dw	65535	; assembler added errata NOP
  7023  00006C                     
  7024                           ;interrupt.c: 71:         PIR1bits.TMR1IF = 0;
  7025  00006C  909E               	bcf	158,0,c	;volatile
  7026  00006E                     
  7027                           ;interrupt.c: 72:         if(fatalError()){
  7028  00006E  EC8A  F013         	call	_fatalError	;wreg free
  7029  000072  0900               	iorlw	0
  7030  000074  B4D8               	btfsc	status,2,c
  7031  000076  EF3F  F000         	goto	i2u287_41
  7032  00007A  EF42  F000         	goto	i2u287_40
  7033  00007E                     i2u287_41:
  7034  00007E  FFFF               	dw	65535	; assembler added errata NOP
  7035  000080  EF45  F000         	goto	i2l3582
  7036  000084                     i2u287_40:
  7037  000084  FFFF               	dw	65535	; assembler added errata NOP
  7038  000086                     
  7039                           ;interrupt.c: 73:             abortAll();
  7040  000086  EC00  F013         	call	_abortAll	;wreg free
  7041  00008A                     i2l3582:
  7042  00008A  FFFF               	dw	65535	; assembler added errata NOP
  7043                           
  7044                           ;interrupt.c: 78:     if(PIR1bits.TMR2IF){
  7045  00008C  A29E               	btfss	158,1,c	;volatile
  7046  00008E  EF4B  F000         	goto	i2u288_41
  7047  000092  EF4E  F000         	goto	i2u288_40
  7048  000096                     i2u288_41:
  7049  000096  FFFF               	dw	65535	; assembler added errata NOP
  7050  000098  EF80  F000         	goto	i2l3604
  7051  00009C                     i2u288_40:
  7052  00009C  FFFF               	dw	65535	; assembler added errata NOP
  7053  00009E                     
  7054                           ;interrupt.c: 79:         PIR1bits.TMR2IF = 0;
  7055  00009E  929E               	bcf	158,1,c	;volatile
  7056  0000A0                     
  7057                           ;interrupt.c: 80:         single_cycle++;
  7058  0000A0  4A51               	infsnz	_single_cycle^0,f,c
  7059  0000A2  2A52               	incf	(_single_cycle+1)^0,f,c
  7060  0000A4                     
  7061                           ;interrupt.c: 83:         if(single_cycle > retPeriod()){
  7062  0000A4  EC2C  F013         	call	_retPeriod	;wreg free
  7063  0000A8  5051               	movf	_single_cycle^0,w,c
  7064  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  7065  0000AC  5052               	movf	(_single_cycle+1)^0,w,c
  7066  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  7067  0000B0  B0D8               	btfsc	status,0,c
  7068  0000B2  EF5D  F000         	goto	i2u289_41
  7069  0000B6  EF60  F000         	goto	i2u289_40
  7070  0000BA                     i2u289_41:
  7071  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  7072  0000BC  EF80  F000         	goto	i2l3604
  7073  0000C0                     i2u289_40:
  7074  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  7075  0000C2                     
  7076                           ;interrupt.c: 84:             single_cycle = 0;
  7077  0000C2  0E00               	movlw	0
  7078  0000C4  6E52               	movwf	(_single_cycle+1)^0,c
  7079  0000C6  0E00               	movlw	0
  7080  0000C8  6E51               	movwf	_single_cycle^0,c
  7081  0000CA                     
  7082                           ;interrupt.c: 85:             completeStep++;
  7083  0000CA  2A62               	incf	_completeStep^0,f,c
  7084  0000CC                     
  7085                           ;interrupt.c: 88:             if(completeStep != 0 && !(completeStep % 2)){
  7086  0000CC  5062               	movf	_completeStep^0,w,c
  7087  0000CE  B4D8               	btfsc	status,2,c
  7088  0000D0  EF6C  F000         	goto	i2u290_41
  7089  0000D4  EF6F  F000         	goto	i2u290_40
  7090  0000D8                     i2u290_41:
  7091  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  7092  0000DA  EF7D  F000         	goto	i2l3602
  7093  0000DE                     i2u290_40:
  7094  0000DE  FFFF               	dw	65535	; assembler added errata NOP
  7095  0000E0  B062               	btfsc	_completeStep^0,0,c
  7096  0000E2  EF75  F000         	goto	i2u291_41
  7097  0000E6  EF78  F000         	goto	i2u291_40
  7098  0000EA                     i2u291_41:
  7099  0000EA  FFFF               	dw	65535	; assembler added errata NOP
  7100  0000EC  EF7D  F000         	goto	i2l3602
  7101  0000F0                     i2u291_40:
  7102  0000F0  FFFF               	dw	65535	; assembler added errata NOP
  7103  0000F2                     
  7104                           ;interrupt.c: 90:                 completeStep = 0;
  7105  0000F2  0E00               	movlw	0
  7106  0000F4  6E62               	movwf	_completeStep^0,c
  7107  0000F6                     
  7108                           ;interrupt.c: 93:                 increaseStep();
  7109  0000F6  EC86  F013         	call	_increaseStep	;wreg free
  7110  0000FA                     i2l3602:
  7111  0000FA  FFFF               	dw	65535	; assembler added errata NOP
  7112                           
  7113                           ;interrupt.c: 98:             toggleStep();
  7114  0000FC  EC63  F013         	call	_toggleStep	;wreg free
  7115  000100                     i2l3604:
  7116  000100  FFFF               	dw	65535	; assembler added errata NOP
  7117                           
  7118                           ;interrupt.c: 103:     if(PIR1bits.ADIF){
  7119  000102  AC9E               	btfss	158,6,c	;volatile
  7120  000104  EF86  F000         	goto	i2u292_41
  7121  000108  EF89  F000         	goto	i2u292_40
  7122  00010C                     i2u292_41:
  7123  00010C  FFFF               	dw	65535	; assembler added errata NOP
  7124  00010E  EFB6  F000         	goto	i2l3616
  7125  000112                     i2u292_40:
  7126  000112  FFFF               	dw	65535	; assembler added errata NOP
  7127  000114                     
  7128                           ;interrupt.c: 104:         PIR1bits.ADIF = 0;
  7129  000114  9C9E               	bcf	158,6,c	;volatile
  7130                           
  7131                           ;interrupt.c: 107:         ADC_res = ADRESL;
  7132  000116  CFC3 F053          	movff	4035,_ADC_res	;volatile
  7133  00011A  6A54               	clrf	(_ADC_res+1)^0,c
  7134  00011C                     
  7135                           ;interrupt.c: 108:         ADC_res |= (ADRESH << 8);
  7136  00011C  50C4               	movf	196,w,c	;volatile
  7137  00011E  6E0C               	movwf	(??_isr+1)^0,c
  7138  000120  6A0B               	clrf	??_isr^0,c
  7139  000122  500B               	movf	??_isr^0,w,c
  7140  000124  1253               	iorwf	_ADC_res^0,f,c
  7141  000126  500C               	movf	(??_isr+1)^0,w,c
  7142  000128  1254               	iorwf	(_ADC_res+1)^0,f,c
  7143                           
  7144                           ;interrupt.c: 111:         if(ADC_res > therm_pressure){
  7145  00012A  0453               	decf	_ADC_res^0,w,c
  7146  00012C  0E04               	movlw	4
  7147  00012E  5854               	subwfb	(_ADC_res+1)^0,w,c
  7148  000130  A0D8               	btfss	status,0,c
  7149  000132  EF9D  F000         	goto	i2u293_41
  7150  000136  EFA0  F000         	goto	i2u293_40
  7151  00013A                     i2u293_41:
  7152  00013A  FFFF               	dw	65535	; assembler added errata NOP
  7153  00013C  EFA7  F000         	goto	i2l3612
  7154  000140                     i2u293_40:
  7155  000140  FFFF               	dw	65535	; assembler added errata NOP
  7156  000142                     
  7157                           ;interrupt.c: 113:             setTouchRel();
  7158  000142  EC68  F013         	call	_setTouchRel	;wreg free
  7159                           
  7160                           ;interrupt.c: 114:             setThermRel();
  7161  000146  EC6D  F013         	call	_setThermRel	;wreg free
  7162                           
  7163                           ;interrupt.c: 115:         }else if(ADC_res > touch_pressure){
  7164  00014A  EFB6  F000         	goto	i2l3616
  7165  00014E                     i2l3612:
  7166  00014E  FFFF               	dw	65535	; assembler added errata NOP
  7167  000150  0453               	decf	_ADC_res^0,w,c
  7168  000152  0E02               	movlw	2
  7169  000154  5854               	subwfb	(_ADC_res+1)^0,w,c
  7170  000156  A0D8               	btfss	status,0,c
  7171  000158  EFB0  F000         	goto	i2u294_41
  7172  00015C  EFB3  F000         	goto	i2u294_40
  7173  000160                     i2u294_41:
  7174  000160  FFFF               	dw	65535	; assembler added errata NOP
  7175  000162  EFB6  F000         	goto	i2l3616
  7176  000166                     i2u294_40:
  7177  000166  FFFF               	dw	65535	; assembler added errata NOP
  7178  000168                     
  7179                           ;interrupt.c: 117:             setTouchRel();
  7180  000168  EC68  F013         	call	_setTouchRel	;wreg free
  7181  00016C                     i2l3616:
  7182  00016C  FFFF               	dw	65535	; assembler added errata NOP
  7183                           
  7184                           ;interrupt.c: 122:     if(PIR1bits.RC1IF){
  7185  00016E  AA9E               	btfss	158,5,c	;volatile
  7186  000170  EFBC  F000         	goto	i2u295_41
  7187  000174  EFBF  F000         	goto	i2u295_40
  7188  000178                     i2u295_41:
  7189  000178  FFFF               	dw	65535	; assembler added errata NOP
  7190  00017A  EFC6  F000         	goto	i2l466
  7191  00017E                     i2u295_40:
  7192  00017E  FFFF               	dw	65535	; assembler added errata NOP
  7193  000180                     
  7194                           ;interrupt.c: 123:         PIR1bits.RC1IF = 0;
  7195  000180  9A9E               	bcf	158,5,c	;volatile
  7196                           
  7197                           ;interrupt.c: 126:         unsigned char temp = RCREG1;
  7198  000182  CFAE F011          	movff	4014,isr@temp	;volatile
  7199  000186                     
  7200                           ;interrupt.c: 128:         storeData(temp);
  7201  000186  5011               	movf	isr@temp^0,w,c
  7202  000188  EC85  F009         	call	i2_storeData
  7203  00018C                     i2l466:
  7204  00018C  FFFF               	dw	65535	; assembler added errata NOP
  7205  00018E  C010  FFF4         	movff	??_isr+5,prodh
  7206  000192  C00F  FFF3         	movff	??_isr+4,prodl
  7207  000196  C00E  FFDA         	movff	??_isr+3,fsr2h
  7208  00019A  C00D  FFD9         	movff	??_isr+2,fsr2l
  7209  00019E  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7210  0001A0  0011               	retfie		f
  7211  0001A2  FFFF               	dw	65535	; errata NOP
  7212  0001A4                     __end_of_isr:
  7213                           	callstack 0
  7214                           
  7215 ;; *************** function i2_storeData *****************
  7216 ;; Defined at:
  7217 ;;		line 183 in file "usart.c"
  7218 ;; Parameters:    Size  Location     Type
  7219 ;;  data            1    wreg     unsigned char 
  7220 ;; Auto vars:     Size  Location     Type
  7221 ;;  data            1    9[COMRAM] unsigned char 
  7222 ;; Return value:  Size  Location     Type
  7223 ;;                  1    wreg      void 
  7224 ;; Registers used:
  7225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7226 ;; Tracked objects:
  7227 ;;		On entry : 0/0
  7228 ;;		On exit  : 0/0
  7229 ;;		Unchanged: 0/0
  7230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7231 ;;      Params:         0       0       0       0       0       0       0
  7232 ;;      Locals:         1       0       0       0       0       0       0
  7233 ;;      Temps:          2       0       0       0       0       0       0
  7234 ;;      Totals:         3       0       0       0       0       0       0
  7235 ;;Total ram usage:        3 bytes
  7236 ;; Hardware stack levels used:    1
  7237 ;; Hardware stack levels required when called:    2
  7238 ;; This function calls:
  7239 ;;		i2_printError
  7240 ;; This function is called by:
  7241 ;;		_isr
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           	psect	text43
  7246  00130A                     __ptext43:
  7247                           	callstack 0
  7248  00130A                     i2_storeData:
  7249                           	callstack 0
  7250  00130A  FFFF               	dw	65535	; assembler added errata NOP
  7251                           
  7252                           ;incstack = 0
  7253                           ;i2storeData@data stored from wreg
  7254  00130C  6E0A               	movwf	i2storeData@data^0,c
  7255  00130E                     
  7256                           ;usart.c: 189:     receivedMex[counter] = data;
  7257  00130E  0E43               	movlw	low _receivedMex
  7258  001310  245E               	addwf	_counter^0,w,c
  7259  001312  6ED9               	movwf	fsr2l,c
  7260  001314  6ADA               	clrf	fsr2h,c
  7261  001316  0E00               	movlw	high _receivedMex
  7262  001318  22DA               	addwfc	fsr2h,f,c
  7263  00131A  C00A  FFDF         	movff	i2storeData@data,indf2
  7264  00131E                     
  7265                           ;usart.c: 191:     counter++;
  7266  00131E  2A5E               	incf	_counter^0,f,c
  7267                           
  7268                           ;usart.c: 194:     switch(receivedMex[0]){
  7269  001320  EFAE  F009         	goto	i2l3450
  7270  001324                     i2l3440:
  7271  001324  FFFF               	dw	65535	; assembler added errata NOP
  7272                           
  7273                           ;usart.c: 196:             mexLength = 5;
  7274  001326  0E05               	movlw	5
  7275  001328  6E6D               	movwf	_mexLength^0,c
  7276                           
  7277                           ;usart.c: 197:             neverCheck = 0;
  7278  00132A  0E00               	movlw	0
  7279  00132C  6E5D               	movwf	_neverCheck^0,c
  7280                           
  7281                           ;usart.c: 198:             break;
  7282  00132E  EFC9  F009         	goto	i2l3452
  7283  001332                     i2l3442:
  7284  001332  FFFF               	dw	65535	; assembler added errata NOP
  7285                           
  7286                           ;usart.c: 200:             mexLength = 9;
  7287  001334  0E09               	movlw	9
  7288  001336  6E6D               	movwf	_mexLength^0,c
  7289                           
  7290                           ;usart.c: 201:             neverCheck = 0;
  7291  001338  0E00               	movlw	0
  7292  00133A  6E5D               	movwf	_neverCheck^0,c
  7293                           
  7294                           ;usart.c: 202:             break;
  7295  00133C  EFC9  F009         	goto	i2l3452
  7296  001340                     i2l3444:
  7297  001340  FFFF               	dw	65535	; assembler added errata NOP
  7298                           
  7299                           ;usart.c: 204:             mexLength = 1;
  7300  001342  0E01               	movlw	1
  7301  001344  6E6D               	movwf	_mexLength^0,c
  7302                           
  7303                           ;usart.c: 205:             neverCheck = 0;
  7304  001346  0E00               	movlw	0
  7305  001348  6E5D               	movwf	_neverCheck^0,c
  7306                           
  7307                           ;usart.c: 206:             break;
  7308  00134A  EFC9  F009         	goto	i2l3452
  7309  00134E                     i2l3446:
  7310  00134E  FFFF               	dw	65535	; assembler added errata NOP
  7311                           
  7312                           ;usart.c: 208:             neverCheck = 1;
  7313  001350  0E01               	movlw	1
  7314  001352  6E5D               	movwf	_neverCheck^0,c
  7315                           
  7316                           ;usart.c: 209:             counter = 0;
  7317  001354  0E00               	movlw	0
  7318  001356  6E5E               	movwf	_counter^0,c
  7319                           
  7320                           ;usart.c: 210:             break;
  7321  001358  EFC9  F009         	goto	i2l3452
  7322  00135C                     i2l3450:
  7323  00135C  FFFF               	dw	65535	; assembler added errata NOP
  7324  00135E  5043               	movf	_receivedMex^0,w,c
  7325  001360  6E08               	movwf	??i2_storeData^0,c
  7326  001362  6A09               	clrf	(??i2_storeData+1)^0,c
  7327                           
  7328                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7329                           ; Switch size 1, requested type "simple"
  7330                           ; Number of cases is 1, Range of values is 0 to 0
  7331                           ; switch strategies available:
  7332                           ; Name         Instructions Cycles
  7333                           ; simple_byte            4     3 (average)
  7334                           ;	Chosen strategy is simple_byte
  7335  001364  5009               	movf	(??i2_storeData+1)^0,w,c
  7336  001366  0A00               	xorlw	0	; case 0
  7337  001368  B4D8               	btfsc	status,2,c
  7338  00136A  EFB9  F009         	goto	i2l4838
  7339  00136E  EFA7  F009         	goto	i2l3446
  7340  001372                     i2l4838:
  7341  001372  FFFF               	dw	65535	; assembler added errata NOP
  7342                           
  7343                           ; Switch size 1, requested type "simple"
  7344                           ; Number of cases is 3, Range of values is 1 to 3
  7345                           ; switch strategies available:
  7346                           ; Name         Instructions Cycles
  7347                           ; simple_byte           10     6 (average)
  7348                           ;	Chosen strategy is simple_byte
  7349  001374  5008               	movf	??i2_storeData^0,w,c
  7350  001376  0A01               	xorlw	1	; case 1
  7351  001378  B4D8               	btfsc	status,2,c
  7352  00137A  EF92  F009         	goto	i2l3440
  7353  00137E  0A03               	xorlw	3	; case 2
  7354  001380  B4D8               	btfsc	status,2,c
  7355  001382  EF99  F009         	goto	i2l3442
  7356  001386  0A01               	xorlw	1	; case 3
  7357  001388  B4D8               	btfsc	status,2,c
  7358  00138A  EFA0  F009         	goto	i2l3444
  7359  00138E  EFA7  F009         	goto	i2l3446
  7360  001392                     i2l3452:
  7361  001392  FFFF               	dw	65535	; assembler added errata NOP
  7362                           
  7363                           ;usart.c: 215:     if(counter == mexLength && !neverCheck){
  7364  001394  506D               	movf	_mexLength^0,w,c
  7365  001396  185E               	xorwf	_counter^0,w,c
  7366  001398  A4D8               	btfss	status,2,c
  7367  00139A  EFD1  F009         	goto	i2u272_41
  7368  00139E  EFD4  F009         	goto	i2u272_40
  7369  0013A2                     i2u272_41:
  7370  0013A2  FFFF               	dw	65535	; assembler added errata NOP
  7371  0013A4  EFC6  F00A         	goto	i2l599
  7372  0013A8                     i2u272_40:
  7373  0013A8  FFFF               	dw	65535	; assembler added errata NOP
  7374  0013AA  505D               	movf	_neverCheck^0,w,c
  7375  0013AC  A4D8               	btfss	status,2,c
  7376  0013AE  EFDB  F009         	goto	i2u273_41
  7377  0013B2  EFDE  F009         	goto	i2u273_40
  7378  0013B6                     i2u273_41:
  7379  0013B6  FFFF               	dw	65535	; assembler added errata NOP
  7380  0013B8  EFC6  F00A         	goto	i2l599
  7381  0013BC                     i2u273_40:
  7382  0013BC  FFFF               	dw	65535	; assembler added errata NOP
  7383  0013BE                     
  7384                           ;usart.c: 216:         counter = 0;
  7385  0013BE  0E00               	movlw	0
  7386  0013C0  6E5E               	movwf	_counter^0,c
  7387                           
  7388                           ;usart.c: 219:         switch(receivedMex[0]){
  7389  0013C2  EFA8  F00A         	goto	i2l3494
  7390  0013C6                     i2l3458:
  7391  0013C6  FFFF               	dw	65535	; assembler added errata NOP
  7392                           
  7393                           ;usart.c: 221:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7394  0013C8  5061               	movf	_dataCounter^0,w,c
  7395  0013CA  0D04               	mullw	4
  7396  0013CC  0EC6               	movlw	low _dataSequence
  7397  0013CE  24F3               	addwf	243,w,c
  7398  0013D0  6ED9               	movwf	fsr2l,c
  7399  0013D2  0E00               	movlw	high _dataSequence
  7400  0013D4  20F4               	addwfc	prodh,w,c
  7401  0013D6  6EDA               	movwf	fsr2h,c
  7402  0013D8  C044  FFDF         	movff	_receivedMex+1,indf2
  7403                           
  7404                           ;usart.c: 222:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  7405  0013DC  5061               	movf	_dataCounter^0,w,c
  7406  0013DE  0D04               	mullw	4
  7407  0013E0  0EC7               	movlw	low (_dataSequence+1)
  7408  0013E2  24F3               	addwf	243,w,c
  7409  0013E4  6ED9               	movwf	fsr2l,c
  7410  0013E6  0E00               	movlw	high (_dataSequence+1)
  7411  0013E8  20F4               	addwfc	prodh,w,c
  7412  0013EA  6EDA               	movwf	fsr2h,c
  7413  0013EC  5045               	movf	(_receivedMex+2)^0,w,c
  7414  0013EE  0D05               	mullw	5
  7415  0013F0  CFF3 FFDF          	movff	prodl,indf2
  7416                           
  7417                           ;usart.c: 223:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  7418  0013F4  5061               	movf	_dataCounter^0,w,c
  7419  0013F6  0D04               	mullw	4
  7420  0013F8  0EC8               	movlw	low (_dataSequence+2)
  7421  0013FA  24F3               	addwf	243,w,c
  7422  0013FC  6ED9               	movwf	fsr2l,c
  7423  0013FE  0E00               	movlw	high (_dataSequence+2)
  7424  001400  20F4               	addwfc	prodh,w,c
  7425  001402  6EDA               	movwf	fsr2h,c
  7426  001404  5046               	movf	(_receivedMex+3)^0,w,c
  7427  001406  0D05               	mullw	5
  7428  001408  CFF3 FFDF          	movff	prodl,indf2
  7429                           
  7430                           ;usart.c: 224:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7431  00140C  5061               	movf	_dataCounter^0,w,c
  7432  00140E  0D04               	mullw	4
  7433  001410  0EC9               	movlw	low (_dataSequence+3)
  7434  001412  24F3               	addwf	243,w,c
  7435  001414  6ED9               	movwf	fsr2l,c
  7436  001416  0E00               	movlw	high (_dataSequence+3)
  7437  001418  20F4               	addwfc	prodh,w,c
  7438  00141A  6EDA               	movwf	fsr2h,c
  7439  00141C  C047  FFDF         	movff	_receivedMex+4,indf2
  7440                           
  7441                           ;usart.c: 227:                 if((dataSequence[dataCounter].posX > maxX || dataSequence
      +                          [dataCounter].posY > maxY) &&
  7442  001420  5061               	movf	_dataCounter^0,w,c
  7443  001422  0D04               	mullw	4
  7444  001424  0EC7               	movlw	low (_dataSequence+1)
  7445  001426  24F3               	addwf	243,w,c
  7446  001428  6ED9               	movwf	fsr2l,c
  7447  00142A  0E00               	movlw	high (_dataSequence+1)
  7448  00142C  20F4               	addwfc	prodh,w,c
  7449  00142E  6EDA               	movwf	fsr2h,c
  7450  001430  0E66               	movlw	102
  7451  001432  60DF               	cpfslt	indf2,c
  7452  001434  EF1E  F00A         	goto	i2u274_41
  7453  001438  EF21  F00A         	goto	i2u274_40
  7454  00143C                     i2u274_41:
  7455  00143C  FFFF               	dw	65535	; assembler added errata NOP
  7456  00143E  EF33  F00A         	goto	i2l3462
  7457  001442                     i2u274_40:
  7458  001442  FFFF               	dw	65535	; assembler added errata NOP
  7459  001444  5061               	movf	_dataCounter^0,w,c
  7460  001446  0D04               	mullw	4
  7461  001448  0EC8               	movlw	low (_dataSequence+2)
  7462  00144A  24F3               	addwf	243,w,c
  7463  00144C  6ED9               	movwf	fsr2l,c
  7464  00144E  0E00               	movlw	high (_dataSequence+2)
  7465  001450  20F4               	addwfc	prodh,w,c
  7466  001452  6EDA               	movwf	fsr2h,c
  7467  001454  0E65               	movlw	101
  7468  001456  64DF               	cpfsgt	indf2,c
  7469  001458  EF30  F00A         	goto	i2u275_41
  7470  00145C  EF33  F00A         	goto	i2u275_40
  7471  001460                     i2u275_41:
  7472  001460  FFFF               	dw	65535	; assembler added errata NOP
  7473  001462  EF4B  F00A         	goto	i2l3466
  7474  001466                     i2u275_40:
  7475  001466                     i2l3462:
  7476  001466  FFFF               	dw	65535	; assembler added errata NOP
  7477  001468  5061               	movf	_dataCounter^0,w,c
  7478  00146A  0D04               	mullw	4
  7479  00146C  0EC6               	movlw	low _dataSequence
  7480  00146E  24F3               	addwf	243,w,c
  7481  001470  6ED9               	movwf	fsr2l,c
  7482  001472  0E00               	movlw	high _dataSequence
  7483  001474  20F4               	addwfc	prodh,w,c
  7484  001476  6EDA               	movwf	fsr2h,c
  7485  001478  28DE               	incf	postinc2,w,c
  7486  00147A  B4D8               	btfsc	status,2,c
  7487  00147C  EF42  F00A         	goto	i2u276_41
  7488  001480  EF45  F00A         	goto	i2u276_40
  7489  001484                     i2u276_41:
  7490  001484  FFFF               	dw	65535	; assembler added errata NOP
  7491  001486  EF4B  F00A         	goto	i2l3466
  7492  00148A                     i2u276_40:
  7493  00148A  FFFF               	dw	65535	; assembler added errata NOP
  7494  00148C                     
  7495                           ;usart.c: 228:                         dataSequence[dataCounter].feederLine != 0xFF){;us
      +                          art.c: 229:                     printError(5);
  7496  00148C  0E05               	movlw	5
  7497  00148E  EC7C  F00E         	call	i2_printError
  7498                           
  7499                           ;usart.c: 230:                 }else{
  7500  001492  EFC3  F00A         	goto	i2l3496
  7501  001496                     i2l3466:
  7502  001496  FFFF               	dw	65535	; assembler added errata NOP
  7503                           
  7504                           ;usart.c: 231:                     dataCounter++;
  7505  001498  2A61               	incf	_dataCounter^0,f,c
  7506  00149A  EFC3  F00A         	goto	i2l3496
  7507  00149E                     i2l592:
  7508  00149E  FFFF               	dw	65535	; assembler added errata NOP
  7509                           
  7510                           ;usart.c: 236:                 newSequenceData.L = receivedMex[1];
  7511  0014A0  C044  F0DA         	movff	_receivedMex+1,_newSequenceData
  7512                           
  7513                           ;usart.c: 237:                 newSequenceData.W = receivedMex[2];
  7514  0014A4  C045  F0DB         	movff	_receivedMex+2,_newSequenceData+1
  7515  0014A8                     
  7516                           ;usart.c: 238:                 newSequenceData.init_posX = receivedMex[3] * 5;
  7517  0014A8  5046               	movf	(_receivedMex+3)^0,w,c
  7518  0014AA  0D05               	mullw	5
  7519  0014AC  CFF3 F0DC          	movff	prodl,_newSequenceData+2
  7520                           
  7521                           ;usart.c: 239:                 newSequenceData.init_posY = receivedMex[4] * 5;
  7522  0014B0  5047               	movf	(_receivedMex+4)^0,w,c
  7523  0014B2  0D05               	mullw	5
  7524  0014B4  CFF3 F0DD          	movff	prodl,_newSequenceData+3
  7525  0014B8                     
  7526                           ;usart.c: 240:                 newSequenceData.init_rot = receivedMex[5];
  7527  0014B8  C048  F0DE         	movff	_receivedMex+5,_newSequenceData+4
  7528                           
  7529                           ;usart.c: 241:                 newSequenceData.end_posX = receivedMex[6] * 5;
  7530  0014BC  5049               	movf	(_receivedMex+6)^0,w,c
  7531  0014BE  0D05               	mullw	5
  7532  0014C0  CFF3 F0DF          	movff	prodl,_newSequenceData+5
  7533                           
  7534                           ;usart.c: 242:                 newSequenceData.end_posY = receivedMex[7] * 5;
  7535  0014C4  504A               	movf	(_receivedMex+7)^0,w,c
  7536  0014C6  0D05               	mullw	5
  7537  0014C8  CFF3 F0E0          	movff	prodl,_newSequenceData+6
  7538  0014CC                     
  7539                           ;usart.c: 243:                 newSequenceData.end_rot = receivedMex[8];
  7540  0014CC  C04B  F0E1         	movff	_receivedMex+8,_newSequenceData+7
  7541  0014D0                     
  7542                           ;usart.c: 246:                 if(newSequenceData.init_posX > maxFeedX ||
  7543  0014D0  0E1F               	movlw	31
  7544  0014D2  0100               	movlb	0	; () banked
  7545  0014D4  61DC               	cpfslt	(_newSequenceData+2)& (0+255),b
  7546  0014D6  EF6F  F00A         	goto	i2u277_41
  7547  0014DA  EF72  F00A         	goto	i2u277_40
  7548  0014DE                     i2u277_41:
  7549  0014DE  FFFF               	dw	65535	; assembler added errata NOP
  7550  0014E0  EF90  F00A         	goto	i2l3482
  7551  0014E4                     i2u277_40:
  7552  0014E4  FFFF               	dw	65535	; assembler added errata NOP
  7553  0014E6                     
  7554                           ; BSR set to: 0
  7555  0014E6  0E66               	movlw	102
  7556  0014E8  61DF               	cpfslt	(_newSequenceData+5)& (0+255),b
  7557  0014EA  EF79  F00A         	goto	i2u278_41
  7558  0014EE  EF7C  F00A         	goto	i2u278_40
  7559  0014F2                     i2u278_41:
  7560  0014F2  FFFF               	dw	65535	; assembler added errata NOP
  7561  0014F4  EF90  F00A         	goto	i2l3482
  7562  0014F8                     i2u278_40:
  7563  0014F8  FFFF               	dw	65535	; assembler added errata NOP
  7564  0014FA                     
  7565                           ; BSR set to: 0
  7566  0014FA  0E65               	movlw	101
  7567  0014FC  61DD               	cpfslt	(_newSequenceData+3)& (0+255),b
  7568  0014FE  EF83  F00A         	goto	i2u279_41
  7569  001502  EF86  F00A         	goto	i2u279_40
  7570  001506                     i2u279_41:
  7571  001506  FFFF               	dw	65535	; assembler added errata NOP
  7572  001508  EF90  F00A         	goto	i2l3482
  7573  00150C                     i2u279_40:
  7574  00150C  FFFF               	dw	65535	; assembler added errata NOP
  7575  00150E                     
  7576                           ; BSR set to: 0
  7577  00150E  0E65               	movlw	101
  7578  001510  65E0               	cpfsgt	(_newSequenceData+6)& (0+255),b
  7579  001512  EF8D  F00A         	goto	i2u280_41
  7580  001516  EF90  F00A         	goto	i2u280_40
  7581  00151A                     i2u280_41:
  7582  00151A  FFFF               	dw	65535	; assembler added errata NOP
  7583  00151C  EF98  F00A         	goto	i2l3486
  7584  001520                     i2u280_40:
  7585  001520                     i2l3482:
  7586  001520  FFFF               	dw	65535	; assembler added errata NOP
  7587                           
  7588                           ; BSR set to: 0
  7589                           ;usart.c: 249:                         newSequenceData.end_posY > maxY){;usart.c: 250:  
      +                                             _newSequence = 0;
  7590  001522  0E00               	movlw	0
  7591  001524  6E5F               	movwf	__newSequence^0,c
  7592  001526                     
  7593                           ; BSR set to: 0
  7594                           ;usart.c: 251:                     printError(5);
  7595  001526  0E05               	movlw	5
  7596  001528  EC7C  F00E         	call	i2_printError
  7597                           
  7598                           ;usart.c: 252:                 }else{
  7599  00152C  EFC3  F00A         	goto	i2l3496
  7600  001530                     i2l3486:
  7601  001530  FFFF               	dw	65535	; assembler added errata NOP
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;usart.c: 253:                     _newSequence = 1;
  7605  001532  0E01               	movlw	1
  7606  001534  6E5F               	movwf	__newSequence^0,c
  7607  001536  EFC3  F00A         	goto	i2l3496
  7608  00153A                     i2l3488:
  7609  00153A  FFFF               	dw	65535	; assembler added errata NOP
  7610                           
  7611                           ;usart.c: 258:                 _fatalError = 1;
  7612  00153C  0E01               	movlw	1
  7613  00153E  6E60               	movwf	__fatalError^0,c
  7614                           
  7615                           ;usart.c: 259:                 break;
  7616  001540  EFC3  F00A         	goto	i2l3496
  7617  001544                     i2l3490:
  7618  001544  FFFF               	dw	65535	; assembler added errata NOP
  7619                           
  7620                           ;usart.c: 262:                 printError(8);
  7621  001546  0E08               	movlw	8
  7622  001548  EC7C  F00E         	call	i2_printError
  7623                           
  7624                           ;usart.c: 263:                 break;
  7625  00154C  EFC3  F00A         	goto	i2l3496
  7626  001550                     i2l3494:
  7627  001550  FFFF               	dw	65535	; assembler added errata NOP
  7628  001552  5043               	movf	_receivedMex^0,w,c
  7629  001554  6E08               	movwf	??i2_storeData^0,c
  7630  001556  6A09               	clrf	(??i2_storeData+1)^0,c
  7631                           
  7632                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7633                           ; Switch size 1, requested type "simple"
  7634                           ; Number of cases is 1, Range of values is 0 to 0
  7635                           ; switch strategies available:
  7636                           ; Name         Instructions Cycles
  7637                           ; simple_byte            4     3 (average)
  7638                           ;	Chosen strategy is simple_byte
  7639  001558  5009               	movf	(??i2_storeData+1)^0,w,c
  7640  00155A  0A00               	xorlw	0	; case 0
  7641  00155C  B4D8               	btfsc	status,2,c
  7642  00155E  EFB3  F00A         	goto	i2l4840
  7643  001562  EFA2  F00A         	goto	i2l3490
  7644  001566                     i2l4840:
  7645  001566  FFFF               	dw	65535	; assembler added errata NOP
  7646                           
  7647                           ; Switch size 1, requested type "simple"
  7648                           ; Number of cases is 3, Range of values is 1 to 3
  7649                           ; switch strategies available:
  7650                           ; Name         Instructions Cycles
  7651                           ; simple_byte           10     6 (average)
  7652                           ;	Chosen strategy is simple_byte
  7653  001568  5008               	movf	??i2_storeData^0,w,c
  7654  00156A  0A01               	xorlw	1	; case 1
  7655  00156C  B4D8               	btfsc	status,2,c
  7656  00156E  EFE3  F009         	goto	i2l3458
  7657  001572  0A03               	xorlw	3	; case 2
  7658  001574  B4D8               	btfsc	status,2,c
  7659  001576  EF4F  F00A         	goto	i2l592
  7660  00157A  0A01               	xorlw	1	; case 3
  7661  00157C  B4D8               	btfsc	status,2,c
  7662  00157E  EF9D  F00A         	goto	i2l3488
  7663  001582  EFA2  F00A         	goto	i2l3490
  7664  001586                     i2l3496:
  7665  001586  FFFF               	dw	65535	; assembler added errata NOP
  7666                           
  7667                           ;usart.c: 267:         receivedMex[0] = 0;
  7668  001588  0E00               	movlw	0
  7669  00158A  6E43               	movwf	_receivedMex^0,c
  7670  00158C                     i2l599:
  7671  00158C  FFFF               	dw	65535	; assembler added errata NOP
  7672  00158E  0012               	return		;funcret
  7673  001590  FFFF               	dw	65535	; errata NOP
  7674  001592                     __end_ofi2_storeData:
  7675                           	callstack 0
  7676                           
  7677 ;; *************** function _writeTM0 *****************
  7678 ;; Defined at:
  7679 ;;		line 25 in file "motors.c"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;		None
  7682 ;; Auto vars:     Size  Location     Type
  7683 ;;		None
  7684 ;; Return value:  Size  Location     Type
  7685 ;;                  1    wreg      void 
  7686 ;; Registers used:
  7687 ;;		wreg, status,2
  7688 ;; Tracked objects:
  7689 ;;		On entry : 0/0
  7690 ;;		On exit  : 0/0
  7691 ;;		Unchanged: 0/0
  7692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7693 ;;      Params:         0       0       0       0       0       0       0
  7694 ;;      Locals:         0       0       0       0       0       0       0
  7695 ;;      Temps:          0       0       0       0       0       0       0
  7696 ;;      Totals:         0       0       0       0       0       0       0
  7697 ;;Total ram usage:        0 bytes
  7698 ;; Hardware stack levels used:    1
  7699 ;; This function calls:
  7700 ;;		Nothing
  7701 ;; This function is called by:
  7702 ;;		_isr
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           	psect	text44
  7707  00264A                     __ptext44:
  7708                           	callstack 0
  7709  00264A                     _writeTM0:
  7710                           	callstack 0
  7711  00264A  FFFF               	dw	65535	; assembler added errata NOP
  7712  00264C                     
  7713                           ;motors.c: 26:     tm0Error = 1;
  7714  00264C  0E00               	movlw	0
  7715  00264E  6E5A               	movwf	(_tm0Error+1)^0,c
  7716  002650  0E01               	movlw	1
  7717  002652  6E59               	movwf	_tm0Error^0,c
  7718  002654  0012               	return		;funcret
  7719  002656  FFFF               	dw	65535	; errata NOP
  7720  002658                     __end_of_writeTM0:
  7721                           	callstack 0
  7722                           
  7723 ;; *************** function _whatsTM0Limit *****************
  7724 ;; Defined at:
  7725 ;;		line 39 in file "motors.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;		None
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;		None
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  1    wreg      unsigned char 
  7732 ;; Registers used:
  7733 ;;		wreg, status,2
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7739 ;;      Params:         0       0       0       0       0       0       0
  7740 ;;      Locals:         0       0       0       0       0       0       0
  7741 ;;      Temps:          0       0       0       0       0       0       0
  7742 ;;      Totals:         0       0       0       0       0       0       0
  7743 ;;Total ram usage:        0 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; This function calls:
  7746 ;;		Nothing
  7747 ;; This function is called by:
  7748 ;;		_isr
  7749 ;; This function uses a non-reentrant model
  7750 ;;
  7751                           
  7752                           	psect	text45
  7753  002704                     __ptext45:
  7754                           	callstack 0
  7755  002704                     _whatsTM0Limit:
  7756                           	callstack 0
  7757  002704  FFFF               	dw	65535	; assembler added errata NOP
  7758  002706                     
  7759                           ;motors.c: 40:     return(tm0Limit);
  7760  002706  5066               	movf	_tm0Limit^0,w,c
  7761  002708  0012               	return		;funcret
  7762  00270A  FFFF               	dw	65535	; errata NOP
  7763  00270C                     __end_of_whatsTM0Limit:
  7764                           	callstack 0
  7765                           
  7766 ;; *************** function _toggleStep *****************
  7767 ;; Defined at:
  7768 ;;		line 93 in file "timer.c"
  7769 ;; Parameters:    Size  Location     Type
  7770 ;;		None
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;		None
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  1    wreg      void 
  7775 ;; Registers used:
  7776 ;;		wreg, status,2
  7777 ;; Tracked objects:
  7778 ;;		On entry : 0/0
  7779 ;;		On exit  : 0/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7782 ;;      Params:         0       0       0       0       0       0       0
  7783 ;;      Locals:         0       0       0       0       0       0       0
  7784 ;;      Temps:          0       0       0       0       0       0       0
  7785 ;;      Totals:         0       0       0       0       0       0       0
  7786 ;;Total ram usage:        0 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; This function calls:
  7789 ;;		Nothing
  7790 ;; This function is called by:
  7791 ;;		_isr
  7792 ;; This function uses a non-reentrant model
  7793 ;;
  7794                           
  7795                           	psect	text46
  7796  0026C6                     __ptext46:
  7797                           	callstack 0
  7798  0026C6                     _toggleStep:
  7799                           	callstack 0
  7800  0026C6  FFFF               	dw	65535	; assembler added errata NOP
  7801  0026C8                     
  7802                           ;timer.c: 94:     stepToggle = 1;
  7803  0026C8  0E01               	movlw	1
  7804  0026CA  6E5B               	movwf	_stepToggle^0,c	;volatile
  7805  0026CC  0012               	return		;funcret
  7806  0026CE  FFFF               	dw	65535	; errata NOP
  7807  0026D0                     __end_of_toggleStep:
  7808                           	callstack 0
  7809                           
  7810 ;; *************** function _setTouchRel *****************
  7811 ;; Defined at:
  7812 ;;		line 86 in file "adc.c"
  7813 ;; Parameters:    Size  Location     Type
  7814 ;;		None
  7815 ;; Auto vars:     Size  Location     Type
  7816 ;;		None
  7817 ;; Return value:  Size  Location     Type
  7818 ;;                  1    wreg      void 
  7819 ;; Registers used:
  7820 ;;		wreg, status,2
  7821 ;; Tracked objects:
  7822 ;;		On entry : 0/0
  7823 ;;		On exit  : 0/0
  7824 ;;		Unchanged: 0/0
  7825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7826 ;;      Params:         0       0       0       0       0       0       0
  7827 ;;      Locals:         0       0       0       0       0       0       0
  7828 ;;      Temps:          0       0       0       0       0       0       0
  7829 ;;      Totals:         0       0       0       0       0       0       0
  7830 ;;Total ram usage:        0 bytes
  7831 ;; Hardware stack levels used:    1
  7832 ;; This function calls:
  7833 ;;		Nothing
  7834 ;; This function is called by:
  7835 ;;		_isr
  7836 ;; This function uses a non-reentrant model
  7837 ;;
  7838                           
  7839                           	psect	text47
  7840  0026D0                     __ptext47:
  7841                           	callstack 0
  7842  0026D0                     _setTouchRel:
  7843                           	callstack 0
  7844  0026D0  FFFF               	dw	65535	; assembler added errata NOP
  7845  0026D2                     
  7846                           ;adc.c: 87:     touch_rel = 1;
  7847  0026D2  0E01               	movlw	1
  7848  0026D4  6E65               	movwf	_touch_rel^0,c	;volatile
  7849  0026D6  0012               	return		;funcret
  7850  0026D8  FFFF               	dw	65535	; errata NOP
  7851  0026DA                     __end_of_setTouchRel:
  7852                           	callstack 0
  7853                           
  7854 ;; *************** function _setThermRel *****************
  7855 ;; Defined at:
  7856 ;;		line 79 in file "adc.c"
  7857 ;; Parameters:    Size  Location     Type
  7858 ;;		None
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;		None
  7861 ;; Return value:  Size  Location     Type
  7862 ;;                  1    wreg      void 
  7863 ;; Registers used:
  7864 ;;		wreg, status,2
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7870 ;;      Params:         0       0       0       0       0       0       0
  7871 ;;      Locals:         0       0       0       0       0       0       0
  7872 ;;      Temps:          0       0       0       0       0       0       0
  7873 ;;      Totals:         0       0       0       0       0       0       0
  7874 ;;Total ram usage:        0 bytes
  7875 ;; Hardware stack levels used:    1
  7876 ;; This function calls:
  7877 ;;		Nothing
  7878 ;; This function is called by:
  7879 ;;		_isr
  7880 ;; This function uses a non-reentrant model
  7881 ;;
  7882                           
  7883                           	psect	text48
  7884  0026DA                     __ptext48:
  7885                           	callstack 0
  7886  0026DA                     _setThermRel:
  7887                           	callstack 0
  7888  0026DA  FFFF               	dw	65535	; assembler added errata NOP
  7889  0026DC                     
  7890                           ;adc.c: 80:     therm_rel = 1;
  7891  0026DC  0E01               	movlw	1
  7892  0026DE  6E64               	movwf	_therm_rel^0,c	;volatile
  7893  0026E0  0012               	return		;funcret
  7894  0026E2  FFFF               	dw	65535	; errata NOP
  7895  0026E4                     __end_of_setThermRel:
  7896                           	callstack 0
  7897                           
  7898 ;; *************** function _retPeriod *****************
  7899 ;; Defined at:
  7900 ;;		line 101 in file "timer.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;		None
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;		None
  7905 ;; Return value:  Size  Location     Type
  7906 ;;                  2    0[COMRAM] unsigned int 
  7907 ;; Registers used:
  7908 ;;		None
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/0
  7911 ;;		On exit  : 0/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7914 ;;      Params:         2       0       0       0       0       0       0
  7915 ;;      Locals:         0       0       0       0       0       0       0
  7916 ;;      Temps:          0       0       0       0       0       0       0
  7917 ;;      Totals:         2       0       0       0       0       0       0
  7918 ;;Total ram usage:        2 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; This function calls:
  7921 ;;		Nothing
  7922 ;; This function is called by:
  7923 ;;		_isr
  7924 ;; This function uses a non-reentrant model
  7925 ;;
  7926                           
  7927                           	psect	text49
  7928  002658                     __ptext49:
  7929                           	callstack 0
  7930  002658                     _retPeriod:
  7931                           	callstack 0
  7932  002658  FFFF               	dw	65535	; assembler added errata NOP
  7933  00265A                     
  7934                           ;timer.c: 102:     return pwmPeriod;
  7935  00265A  C04F  F001         	movff	_pwmPeriod,?_retPeriod
  7936  00265E  C050  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7937  002662  0012               	return		;funcret
  7938  002664  FFFF               	dw	65535	; errata NOP
  7939  002666                     __end_of_retPeriod:
  7940                           	callstack 0
  7941                           
  7942 ;; *************** function _increaseStep *****************
  7943 ;; Defined at:
  7944 ;;		line 85 in file "timer.c"
  7945 ;; Parameters:    Size  Location     Type
  7946 ;;		None
  7947 ;; Auto vars:     Size  Location     Type
  7948 ;;		None
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  1    wreg      void 
  7951 ;; Registers used:
  7952 ;;		status,2, status,0
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/0
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7958 ;;      Params:         0       0       0       0       0       0       0
  7959 ;;      Locals:         0       0       0       0       0       0       0
  7960 ;;      Temps:          0       0       0       0       0       0       0
  7961 ;;      Totals:         0       0       0       0       0       0       0
  7962 ;;Total ram usage:        0 bytes
  7963 ;; Hardware stack levels used:    1
  7964 ;; This function calls:
  7965 ;;		Nothing
  7966 ;; This function is called by:
  7967 ;;		_isr
  7968 ;; This function uses a non-reentrant model
  7969 ;;
  7970                           
  7971                           	psect	text50
  7972  00270C                     __ptext50:
  7973                           	callstack 0
  7974  00270C                     _increaseStep:
  7975                           	callstack 0
  7976  00270C  FFFF               	dw	65535	; assembler added errata NOP
  7977  00270E                     
  7978                           ;timer.c: 86:     pwmStep++;
  7979  00270E  2A5C               	incf	_pwmStep^0,f,c	;volatile
  7980  002710  0012               	return		;funcret
  7981  002712  FFFF               	dw	65535	; errata NOP
  7982  002714                     __end_of_increaseStep:
  7983                           	callstack 0
  7984                           
  7985 ;; *************** function _fatalError *****************
  7986 ;; Defined at:
  7987 ;;		line 80 in file "usart.c"
  7988 ;; Parameters:    Size  Location     Type
  7989 ;;		None
  7990 ;; Auto vars:     Size  Location     Type
  7991 ;;		None
  7992 ;; Return value:  Size  Location     Type
  7993 ;;                  1    wreg      unsigned char 
  7994 ;; Registers used:
  7995 ;;		wreg, status,2
  7996 ;; Tracked objects:
  7997 ;;		On entry : 0/0
  7998 ;;		On exit  : 0/0
  7999 ;;		Unchanged: 0/0
  8000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8001 ;;      Params:         0       0       0       0       0       0       0
  8002 ;;      Locals:         0       0       0       0       0       0       0
  8003 ;;      Temps:          0       0       0       0       0       0       0
  8004 ;;      Totals:         0       0       0       0       0       0       0
  8005 ;;Total ram usage:        0 bytes
  8006 ;; Hardware stack levels used:    1
  8007 ;; This function calls:
  8008 ;;		Nothing
  8009 ;; This function is called by:
  8010 ;;		_isr
  8011 ;; This function uses a non-reentrant model
  8012 ;;
  8013                           
  8014                           	psect	text51
  8015  002714                     __ptext51:
  8016                           	callstack 0
  8017  002714                     _fatalError:
  8018                           	callstack 0
  8019  002714  FFFF               	dw	65535	; assembler added errata NOP
  8020  002716                     
  8021                           ;usart.c: 81:     return _fatalError;
  8022  002716  5060               	movf	__fatalError^0,w,c
  8023  002718  0012               	return		;funcret
  8024  00271A  FFFF               	dw	65535	; errata NOP
  8025  00271C                     __end_of_fatalError:
  8026                           	callstack 0
  8027                           
  8028 ;; *************** function _abortAll *****************
  8029 ;; Defined at:
  8030 ;;		line 836 in file "motors.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;		None
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;		None
  8035 ;; Return value:  Size  Location     Type
  8036 ;;                  1    wreg      void 
  8037 ;; Registers used:
  8038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8044 ;;      Params:         0       0       0       0       0       0       0
  8045 ;;      Locals:         0       0       0       0       0       0       0
  8046 ;;      Temps:          0       0       0       0       0       0       0
  8047 ;;      Totals:         0       0       0       0       0       0       0
  8048 ;;Total ram usage:        0 bytes
  8049 ;; Hardware stack levels used:    1
  8050 ;; Hardware stack levels required when called:    2
  8051 ;; This function calls:
  8052 ;;		i2_printError
  8053 ;; This function is called by:
  8054 ;;		_isr
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           	psect	text52
  8059  002600                     __ptext52:
  8060                           	callstack 0
  8061  002600                     _abortAll:
  8062                           	callstack 0
  8063  002600  FFFF               	dw	65535	; assembler added errata NOP
  8064  002602                     
  8065                           ;motors.c: 844:     printError(7);
  8066  002602  0E07               	movlw	7
  8067  002604  EC7C  F00E         	call	i2_printError
  8068  002608                     i2l251:
  8069  002608  FFFF               	dw	65535	; assembler added errata NOP
  8070  00260A  EF04  F013         	goto	i2l251
  8071  00260E  0012               	return		;funcret
  8072  002610  FFFF               	dw	65535	; errata NOP
  8073  002612                     __end_of_abortAll:
  8074                           	callstack 0
  8075                           
  8076 ;; *************** function i2_printError *****************
  8077 ;; Defined at:
  8078 ;;		line 130 in file "usart.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;  errCode         1    wreg     unsigned char 
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;  errCode         1    6[COMRAM] unsigned char 
  8083 ;; Return value:  Size  Location     Type
  8084 ;;                  1    wreg      void 
  8085 ;; Registers used:
  8086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8087 ;; Tracked objects:
  8088 ;;		On entry : 0/0
  8089 ;;		On exit  : 0/0
  8090 ;;		Unchanged: 0/0
  8091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8092 ;;      Params:         0       0       0       0       0       0       0
  8093 ;;      Locals:         1       0       0       0       0       0       0
  8094 ;;      Temps:          2       0       0       0       0       0       0
  8095 ;;      Totals:         3       0       0       0       0       0       0
  8096 ;;Total ram usage:        3 bytes
  8097 ;; Hardware stack levels used:    1
  8098 ;; Hardware stack levels required when called:    1
  8099 ;; This function calls:
  8100 ;;		i2_uartTx
  8101 ;; This function is called by:
  8102 ;;		_abortAll
  8103 ;;		i2_storeData
  8104 ;; This function uses a non-reentrant model
  8105 ;;
  8106                           
  8107                           	psect	text53
  8108  001CF8                     __ptext53:
  8109                           	callstack 0
  8110  001CF8                     i2_printError:
  8111                           	callstack 0
  8112  001CF8  FFFF               	dw	65535	; assembler added errata NOP
  8113                           
  8114                           ;incstack = 0
  8115                           ;i2printError@errCode stored from wreg
  8116  001CFA  6E07               	movwf	i2printError@errCode^0,c
  8117  001CFC                     
  8118                           ;usart.c: 132:     switch(errCode){
  8119  001CFC  EFD8  F00E         	goto	i2l3110
  8120  001D00                     i2l3092:
  8121  001D00  FFFF               	dw	65535	; assembler added errata NOP
  8122                           
  8123                           ;usart.c: 134:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  8124  001D02  0E90               	movlw	low _errString_Feed
  8125  001D04  6E01               	movwf	i2uartTx@ptr^0,c
  8126  001D06  0E00               	movlw	high _errString_Feed
  8127  001D08  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8128  001D0A  0E1E               	movlw	30
  8129  001D0C  6E03               	movwf	i2uartTx@length^0,c
  8130  001D0E  EC0E  F012         	call	i2_uartTx	;wreg free
  8131                           
  8132                           ;usart.c: 135:             break;
  8133  001D12  EF07  F00F         	goto	i2l566
  8134  001D16                     i2l3094:
  8135  001D16  FFFF               	dw	65535	; assembler added errata NOP
  8136                           
  8137                           ;usart.c: 137:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  8138  001D18  0E5E               	movlw	low _errString_ZEND
  8139  001D1A  6E01               	movwf	i2uartTx@ptr^0,c
  8140  001D1C  0E01               	movlw	high _errString_ZEND
  8141  001D1E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8142  001D20  0E29               	movlw	41
  8143  001D22  6E03               	movwf	i2uartTx@length^0,c
  8144  001D24  EC0E  F012         	call	i2_uartTx	;wreg free
  8145                           
  8146                           ;usart.c: 138:             break;
  8147  001D28  EF07  F00F         	goto	i2l566
  8148  001D2C                     i2l3096:
  8149  001D2C  FFFF               	dw	65535	; assembler added errata NOP
  8150                           
  8151                           ;usart.c: 140:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  8152  001D2E  0E87               	movlw	low _errString_Reset
  8153  001D30  6E01               	movwf	i2uartTx@ptr^0,c
  8154  001D32  0E01               	movlw	high _errString_Reset
  8155  001D34  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8156  001D36  0E28               	movlw	40
  8157  001D38  6E03               	movwf	i2uartTx@length^0,c
  8158  001D3A  EC0E  F012         	call	i2_uartTx	;wreg free
  8159                           
  8160                           ;usart.c: 141:             break;
  8161  001D3E  EF07  F00F         	goto	i2l566
  8162  001D42                     i2l3098:
  8163  001D42  FFFF               	dw	65535	; assembler added errata NOP
  8164                           
  8165                           ;usart.c: 143:             uartTx(&errString_Point[0], sizeof(errString_Point));
  8166  001D44  0E35               	movlw	low _errString_Point
  8167  001D46  6E01               	movwf	i2uartTx@ptr^0,c
  8168  001D48  0E01               	movlw	high _errString_Point
  8169  001D4A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8170  001D4C  0E29               	movlw	41
  8171  001D4E  6E03               	movwf	i2uartTx@length^0,c
  8172  001D50  EC0E  F012         	call	i2_uartTx	;wreg free
  8173                           
  8174                           ;usart.c: 144:             break;
  8175  001D54  EF07  F00F         	goto	i2l566
  8176  001D58                     i2l3100:
  8177  001D58  FFFF               	dw	65535	; assembler added errata NOP
  8178                           
  8179                           ;usart.c: 146:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  8180  001D5A  0ED6               	movlw	low _errString_Bound
  8181  001D5C  6E01               	movwf	i2uartTx@ptr^0,c
  8182  001D5E  0E01               	movlw	high _errString_Bound
  8183  001D60  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8184  001D62  0E21               	movlw	33
  8185  001D64  6E03               	movwf	i2uartTx@length^0,c
  8186  001D66  EC0E  F012         	call	i2_uartTx	;wreg free
  8187                           
  8188                           ;usart.c: 147:             break;
  8189  001D6A  EF07  F00F         	goto	i2l566
  8190  001D6E                     i2l3102:
  8191  001D6E  FFFF               	dw	65535	; assembler added errata NOP
  8192                           
  8193                           ;usart.c: 149:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  8194  001D70  0E00               	movlw	low _errString_PointZ
  8195  001D72  6E01               	movwf	i2uartTx@ptr^0,c
  8196  001D74  0E01               	movlw	high _errString_PointZ
  8197  001D76  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8198  001D78  0E35               	movlw	53
  8199  001D7A  6E03               	movwf	i2uartTx@length^0,c
  8200  001D7C  EC0E  F012         	call	i2_uartTx	;wreg free
  8201                           
  8202                           ;usart.c: 150:             break;
  8203  001D80  EF07  F00F         	goto	i2l566
  8204  001D84                     i2l3104:
  8205  001D84  FFFF               	dw	65535	; assembler added errata NOP
  8206                           
  8207                           ;usart.c: 152:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  8208  001D86  0EAF               	movlw	low _errString_Fatal
  8209  001D88  6E01               	movwf	i2uartTx@ptr^0,c
  8210  001D8A  0E01               	movlw	high _errString_Fatal
  8211  001D8C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8212  001D8E  0E27               	movlw	39
  8213  001D90  6E03               	movwf	i2uartTx@length^0,c
  8214  001D92  EC0E  F012         	call	i2_uartTx	;wreg free
  8215                           
  8216                           ;usart.c: 153:             break;
  8217  001D96  EF07  F00F         	goto	i2l566
  8218  001D9A                     i2l3106:
  8219  001D9A  FFFF               	dw	65535	; assembler added errata NOP
  8220                           
  8221                           ;usart.c: 155:             uartTx(&errString_Command[0], sizeof(errString_Command));
  8222  001D9C  0EAE               	movlw	low _errString_Command
  8223  001D9E  6E01               	movwf	i2uartTx@ptr^0,c
  8224  001DA0  0E00               	movlw	high _errString_Command
  8225  001DA2  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8226  001DA4  0E18               	movlw	24
  8227  001DA6  6E03               	movwf	i2uartTx@length^0,c
  8228  001DA8  EC0E  F012         	call	i2_uartTx	;wreg free
  8229                           
  8230                           ;usart.c: 156:             break;
  8231  001DAC  EF07  F00F         	goto	i2l566
  8232  001DB0                     i2l3110:
  8233  001DB0  FFFF               	dw	65535	; assembler added errata NOP
  8234  001DB2  5007               	movf	i2printError@errCode^0,w,c
  8235  001DB4  6E05               	movwf	??i2_printError^0,c
  8236  001DB6  6A06               	clrf	(??i2_printError+1)^0,c
  8237                           
  8238                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8239                           ; Switch size 1, requested type "simple"
  8240                           ; Number of cases is 1, Range of values is 0 to 0
  8241                           ; switch strategies available:
  8242                           ; Name         Instructions Cycles
  8243                           ; simple_byte            4     3 (average)
  8244                           ;	Chosen strategy is simple_byte
  8245  001DB8  5006               	movf	(??i2_printError+1)^0,w,c
  8246  001DBA  0A00               	xorlw	0	; case 0
  8247  001DBC  B4D8               	btfsc	status,2,c
  8248  001DBE  EFE3  F00E         	goto	i2l4842
  8249  001DC2  EF07  F00F         	goto	i2l566
  8250  001DC6                     i2l4842:
  8251  001DC6  FFFF               	dw	65535	; assembler added errata NOP
  8252                           
  8253                           ; Switch size 1, requested type "simple"
  8254                           ; Number of cases is 8, Range of values is 1 to 8
  8255                           ; switch strategies available:
  8256                           ; Name         Instructions Cycles
  8257                           ; simple_byte           25    13 (average)
  8258                           ;	Chosen strategy is simple_byte
  8259  001DC8  5005               	movf	??i2_printError^0,w,c
  8260  001DCA  0A01               	xorlw	1	; case 1
  8261  001DCC  B4D8               	btfsc	status,2,c
  8262  001DCE  EF80  F00E         	goto	i2l3092
  8263  001DD2  0A03               	xorlw	3	; case 2
  8264  001DD4  B4D8               	btfsc	status,2,c
  8265  001DD6  EF8B  F00E         	goto	i2l3094
  8266  001DDA  0A01               	xorlw	1	; case 3
  8267  001DDC  B4D8               	btfsc	status,2,c
  8268  001DDE  EF96  F00E         	goto	i2l3096
  8269  001DE2  0A07               	xorlw	7	; case 4
  8270  001DE4  B4D8               	btfsc	status,2,c
  8271  001DE6  EFA1  F00E         	goto	i2l3098
  8272  001DEA  0A01               	xorlw	1	; case 5
  8273  001DEC  B4D8               	btfsc	status,2,c
  8274  001DEE  EFAC  F00E         	goto	i2l3100
  8275  001DF2  0A03               	xorlw	3	; case 6
  8276  001DF4  B4D8               	btfsc	status,2,c
  8277  001DF6  EFB7  F00E         	goto	i2l3102
  8278  001DFA  0A01               	xorlw	1	; case 7
  8279  001DFC  B4D8               	btfsc	status,2,c
  8280  001DFE  EFC2  F00E         	goto	i2l3104
  8281  001E02  0A0F               	xorlw	15	; case 8
  8282  001E04  B4D8               	btfsc	status,2,c
  8283  001E06  EFCD  F00E         	goto	i2l3106
  8284  001E0A  EF07  F00F         	goto	i2l566
  8285  001E0E                     i2l566:
  8286  001E0E  FFFF               	dw	65535	; assembler added errata NOP
  8287  001E10  0012               	return		;funcret
  8288  001E12  FFFF               	dw	65535	; errata NOP
  8289  001E14                     __end_ofi2_printError:
  8290                           	callstack 0
  8291                           
  8292 ;; *************** function i2_uartTx *****************
  8293 ;; Defined at:
  8294 ;;		line 167 in file "usart.c"
  8295 ;; Parameters:    Size  Location     Type
  8296 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  8297 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  8298 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  8299 ;;  length          1    2[COMRAM] unsigned char 
  8300 ;; Auto vars:     Size  Location     Type
  8301 ;;  i               1    3[COMRAM] unsigned char 
  8302 ;; Return value:  Size  Location     Type
  8303 ;;                  1    wreg      void 
  8304 ;; Registers used:
  8305 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8306 ;; Tracked objects:
  8307 ;;		On entry : 0/0
  8308 ;;		On exit  : 0/0
  8309 ;;		Unchanged: 0/0
  8310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8311 ;;      Params:         3       0       0       0       0       0       0
  8312 ;;      Locals:         1       0       0       0       0       0       0
  8313 ;;      Temps:          0       0       0       0       0       0       0
  8314 ;;      Totals:         4       0       0       0       0       0       0
  8315 ;;Total ram usage:        4 bytes
  8316 ;; Hardware stack levels used:    1
  8317 ;; This function calls:
  8318 ;;		Nothing
  8319 ;; This function is called by:
  8320 ;;		i2_printError
  8321 ;; This function uses a non-reentrant model
  8322 ;;
  8323                           
  8324                           	psect	text54
  8325  00241C                     __ptext54:
  8326                           	callstack 0
  8327  00241C                     i2_uartTx:
  8328                           	callstack 0
  8329  00241C  FFFF               	dw	65535	; assembler added errata NOP
  8330  00241E                     
  8331                           ;usart.c: 167: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 168: {;usa
      +                          rt.c: 170:     for(char i = 1; i < length; i++){
  8332  00241E  0E01               	movlw	1
  8333  002420  6E04               	movwf	i2uartTx@i^0,c
  8334  002422  EF27  F012         	goto	i2l2794
  8335  002426                     i2l2790:
  8336  002426  FFFF               	dw	65535	; assembler added errata NOP
  8337                           
  8338                           ;usart.c: 172:         TXREG = *ptr;
  8339  002428  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  8340  00242C  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  8341  002430  50DF               	movf	indf2,w,c
  8342  002432  6EAD               	movwf	173,c	;volatile
  8343  002434                     i2l571:
  8344  002434  FFFF               	dw	65535	; assembler added errata NOP
  8345  002436  A2AC               	btfss	172,1,c	;volatile
  8346  002438  EF20  F012         	goto	i2u195_41
  8347  00243C  EF23  F012         	goto	i2u195_40
  8348  002440                     i2u195_41:
  8349  002440  FFFF               	dw	65535	; assembler added errata NOP
  8350  002442  EF1A  F012         	goto	i2l571
  8351  002446                     i2u195_40:
  8352  002446  FFFF               	dw	65535	; assembler added errata NOP
  8353  002448                     
  8354                           ;usart.c: 176:         ptr++;
  8355  002448  4A01               	infsnz	i2uartTx@ptr^0,f,c
  8356  00244A  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  8357                           
  8358                           ;usart.c: 177:     }
  8359  00244C  2A04               	incf	i2uartTx@i^0,f,c
  8360  00244E                     i2l2794:
  8361  00244E  FFFF               	dw	65535	; assembler added errata NOP
  8362  002450  5003               	movf	i2uartTx@length^0,w,c
  8363  002452  5C04               	subwf	i2uartTx@i^0,w,c
  8364  002454  A0D8               	btfss	status,0,c
  8365  002456  EF2F  F012         	goto	i2u196_41
  8366  00245A  EF32  F012         	goto	i2u196_40
  8367  00245E                     i2u196_41:
  8368  00245E  FFFF               	dw	65535	; assembler added errata NOP
  8369  002460  EF13  F012         	goto	i2l2790
  8370  002464                     i2u196_40:
  8371  002464  FFFF               	dw	65535	; assembler added errata NOP
  8372  002466  0012               	return		;funcret
  8373  002468  FFFF               	dw	65535	; errata NOP
  8374  00246A                     __end_ofi2_uartTx:
  8375                           	callstack 0
  8376                           
  8377                           	psect	rparam
  8378  0000                     
  8379                           	psect	temp
  8380  00006E                     btemp:
  8381                           	callstack 0
  8382  00006E                     	ds	1
  8383  0000                     int$flags	set	btemp
  8384  0000                     wtemp8	set	btemp+1
  8385  0000                     ttemp5	set	btemp+1
  8386  0000                     ttemp6	set	btemp+4
  8387  0000                     ttemp7	set	btemp+8
  8388                           
  8389                           	psect	idloc
  8390                           
  8391                           ;Config register IDLOC0 @ 0x200000
  8392                           ;	unspecified, using default values
  8393  200000                     	org	2097152
  8394  200000  FF                 	db	255
  8395                           
  8396                           ;Config register IDLOC1 @ 0x200001
  8397                           ;	unspecified, using default values
  8398  200001                     	org	2097153
  8399  200001  FF                 	db	255
  8400                           
  8401                           ;Config register IDLOC2 @ 0x200002
  8402                           ;	unspecified, using default values
  8403  200002                     	org	2097154
  8404  200002  FF                 	db	255
  8405                           
  8406                           ;Config register IDLOC3 @ 0x200003
  8407                           ;	unspecified, using default values
  8408  200003                     	org	2097155
  8409  200003  FF                 	db	255
  8410                           
  8411                           ;Config register IDLOC4 @ 0x200004
  8412                           ;	unspecified, using default values
  8413  200004                     	org	2097156
  8414  200004  FF                 	db	255
  8415                           
  8416                           ;Config register IDLOC5 @ 0x200005
  8417                           ;	unspecified, using default values
  8418  200005                     	org	2097157
  8419  200005  FF                 	db	255
  8420                           
  8421                           ;Config register IDLOC6 @ 0x200006
  8422                           ;	unspecified, using default values
  8423  200006                     	org	2097158
  8424  200006  FF                 	db	255
  8425                           
  8426                           ;Config register IDLOC7 @ 0x200007
  8427                           ;	unspecified, using default values
  8428  200007                     	org	2097159
  8429  200007  FF                 	db	255
  8430                           
  8431                           	psect	config
  8432                           
  8433                           ; Padding undefined space
  8434  300000                     	org	3145728
  8435  300000  FF                 	db	255
  8436                           
  8437                           ;Config register CONFIG1H @ 0x300001
  8438                           ;	Oscillator Selection bits
  8439                           ;	OSC = XT, XT oscillator
  8440                           ;	Oscillator System Clock Switch Enable bit
  8441                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8442  300001                     	org	3145729
  8443  300001  21                 	db	33
  8444                           
  8445                           ;Config register CONFIG2L @ 0x300002
  8446                           ;	Power-up Timer Enable bit
  8447                           ;	PWRT = OFF, PWRT disabled
  8448                           ;	Brown-out Reset Enable bit
  8449                           ;	BOR = OFF, Brown-out Reset disabled
  8450                           ;	Brown-out Reset Voltage bits
  8451                           ;	BORV = 20, VBOR set to 2.0V
  8452  300002                     	org	3145730
  8453  300002  0D                 	db	13
  8454                           
  8455                           ;Config register CONFIG2H @ 0x300003
  8456                           ;	Watchdog Timer Enable bit
  8457                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8458                           ;	Watchdog Timer Postscale Select bits
  8459                           ;	WDTPS = 128, 1:128
  8460  300003                     	org	3145731
  8461  300003  0E                 	db	14
  8462                           
  8463                           ; Padding undefined space
  8464  300004                     	org	3145732
  8465  300004  FF                 	db	255
  8466                           
  8467                           ;Config register CONFIG3H @ 0x300005
  8468                           ;	CCP2 Mux bit
  8469                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8470  300005                     	org	3145733
  8471  300005  00                 	db	0
  8472                           
  8473                           ;Config register CONFIG4L @ 0x300006
  8474                           ;	Stack Full/Underflow Reset Enable bit
  8475                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8476                           ;	Low Voltage ICSP Enable bit
  8477                           ;	LVP = OFF, Low Voltage ICSP disabled
  8478                           ;	Background Debugger Enable bit
  8479                           ;	DEBUG = 0x1, unprogrammed default
  8480  300006                     	org	3145734
  8481  300006  80                 	db	128
  8482                           
  8483                           ; Padding undefined space
  8484  300007                     	org	3145735
  8485  300007  FF                 	db	255
  8486                           
  8487                           ;Config register CONFIG5L @ 0x300008
  8488                           ;	Code Protection bit
  8489                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8490                           ;	Code Protection bit
  8491                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8492                           ;	Code Protection bit
  8493                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8494                           ;	Code Protection bit
  8495                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8496  300008                     	org	3145736
  8497  300008  0F                 	db	15
  8498                           
  8499                           ;Config register CONFIG5H @ 0x300009
  8500                           ;	Boot Block Code Protection bit
  8501                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8502                           ;	Data EEPROM Code Protection bit
  8503                           ;	CPD = OFF, Data EEPROM not code protected
  8504  300009                     	org	3145737
  8505  300009  C0                 	db	192
  8506                           
  8507                           ;Config register CONFIG6L @ 0x30000A
  8508                           ;	Write Protection bit
  8509                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8510                           ;	Write Protection bit
  8511                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8512                           ;	Write Protection bit
  8513                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8514                           ;	Write Protection bit
  8515                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8516  30000A                     	org	3145738
  8517  30000A  0F                 	db	15
  8518                           
  8519                           ;Config register CONFIG6H @ 0x30000B
  8520                           ;	Configuration Register Write Protection bit
  8521                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8522                           ;	Boot Block Write Protection bit
  8523                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8524                           ;	Data EEPROM Write Protection bit
  8525                           ;	WRTD = OFF, Data EEPROM not write protected
  8526  30000B                     	org	3145739
  8527  30000B  E0                 	db	224
  8528                           
  8529                           ;Config register CONFIG7L @ 0x30000C
  8530                           ;	Table Read Protection bit
  8531                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8532                           ;	Table Read Protection bit
  8533                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8534                           ;	Table Read Protection bit
  8535                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8536                           ;	Table Read Protection bit
  8537                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8538  30000C                     	org	3145740
  8539  30000C  0F                 	db	15
  8540                           
  8541                           ;Config register CONFIG7H @ 0x30000D
  8542                           ;	Boot Block Table Read Protection bit
  8543                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8544  30000D                     	org	3145741
  8545  30000D  40                 	db	64
  8546                           tosu	equ	0xFFF
  8547                           tosh	equ	0xFFE
  8548                           tosl	equ	0xFFD
  8549                           stkptr	equ	0xFFC
  8550                           pclatu	equ	0xFFB
  8551                           pclath	equ	0xFFA
  8552                           pcl	equ	0xFF9
  8553                           tblptru	equ	0xFF8
  8554                           tblptrh	equ	0xFF7
  8555                           tblptrl	equ	0xFF6
  8556                           tablat	equ	0xFF5
  8557                           prodh	equ	0xFF4
  8558                           prodl	equ	0xFF3
  8559                           indf0	equ	0xFEF
  8560                           postinc0	equ	0xFEE
  8561                           postdec0	equ	0xFED
  8562                           preinc0	equ	0xFEC
  8563                           plusw0	equ	0xFEB
  8564                           fsr0h	equ	0xFEA
  8565                           fsr0l	equ	0xFE9
  8566                           wreg	equ	0xFE8
  8567                           indf1	equ	0xFE7
  8568                           postinc1	equ	0xFE6
  8569                           postdec1	equ	0xFE5
  8570                           preinc1	equ	0xFE4
  8571                           plusw1	equ	0xFE3
  8572                           fsr1h	equ	0xFE2
  8573                           fsr1l	equ	0xFE1
  8574                           bsr	equ	0xFE0
  8575                           indf2	equ	0xFDF
  8576                           postinc2	equ	0xFDE
  8577                           postdec2	equ	0xFDD
  8578                           preinc2	equ	0xFDC
  8579                           plusw2	equ	0xFDB
  8580                           fsr2h	equ	0xFDA
  8581                           fsr2l	equ	0xFD9
  8582                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    20
    Data        324
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     109
    BANK0           128     17     115
    BANK1           256      0     247
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK1[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10470
                                             12 BANK0      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    6513
                                              7 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3203
                                              0 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                          _resetStep
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2546
                                             20 COMRAM    14     6      8
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetTM2_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetTM0_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepMade
     _moveToPoint
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepCounter
       _stepMade
     _pickObject
       _resetTM2_Temp
       _stepMade
     _releaseObj
       _resetTM2_Temp
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _resetStep
       _resetTM2_Temp
       _stepMade
     _touchObject
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _resetTM0_Temp
     _resetTM2_Temp
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80     11      73       5       89.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D7      15        0.0%
DATA                 0      0     1D7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sun May 02 09:18:04 2021

                                                  ___fldiv@aexp 0038  
                                                  ___fldiv@bexp 0037  
                                         __end_of_interruptInit 24EC  
                                                  ___fldiv@sign 0030  
                                                            l90 256E  
                                                            l84 2646  
                                                           l210 1F1E  
                                                           l211 1F22  
                                                           l131 17DA  
                                                           l132 194A  
                                                           l222 22E4  
                                                           l214 22B2  
                                                           l151 196A  
                                                           l217 22C4  
                                                           l161 0D68  
                                                           l241 253E  
                                                           l154 0A80  
                                                           l242 2548  
                                                           l234 20FE  
                                                           l156 0AC0  
                                                           l236 212E  
                                                           l157 0AC8  
                                                           l325 19BC  
                                                           l326 19B6  
                                                           l247 250E  
                                                           l327 19B8  
                                                           l248 2518  
                                                           l441 26B8  
                                                           l178 0D26  
                                                           l346 107C  
                                                           l523 2638  
                                                           l187 0D88  
                                                           l444 25FC  
                                                           l372 2700  
                                                           l620 25D8  
                                                           l381 26A4  
                                                           l541 26F8  
                                                           l198 2030  
                                                           l526 262A  
                                                           l366 2594  
                                                           l614 25EA  
                                                           l623 25C6  
                                                           l375 267A  
                                                           l199 2034  
                                                           l447 24C6  
                                                           l535 26F0  
                                                           l384 26AE  
                                                           l448 24DC  
                                                           l544 2690  
                                                           l552 25B2  
                                                           l369 269A  
                                                           l449 24E8  
                                                           l529 26E8  
                                                           l617 261C  
                                                           l626 2686  
                                                           l378 266E  
                                                           l571 23E6  
                                                           l629 26C2  
                                                           l549 23CA  
                                                           l566 1CF2  
                                                           l575 2418  
                                                           l592 1216  
                                                           l599 1304  
                                                           l938 1BD6  
                                                           _isr 0008  
                                                   _touchObject 1F26  
                                                           prod 000FF3  
                                                           wreg 000FE8  
                                                  ___fltol@exp1 0042  
                                                   main@errCode 00F0  
                                                          l1310 170A  
                                                          l1223 0A42  
                                                          l1303 169E  
                                                          l1225 085A  
                                                          l1234 08B0  
                                                          l1236 0940  
                                                          l1228 0814  
                                                          l1237 0928  
                                                          l4000 1688  
                                                          l4010 171E  
                                                          l4002 1694  
                                                          l4020 1770  
                                                          l4012 1720  
                                                          l4004 16D6  
                                                          l4110 0D76  
                                                          l4102 0D26  
                                                          l4030 0A84  
                                                          l4022 1772  
                                                          l4014 1726  
                                                          l4006 16E4  
                                                          l4112 0D7E  
                                                          l4104 0D40  
                                                          l4040 0AE0  
                                                          l4032 0A88  
                                                          l4016 174A  
                                                          l4008 16F8  
                                                          l1296 15F2  
                                                          l4120 1F2C  
                                                          l4200 1EEA  
                                                          l4114 0D86  
                                                          l4106 0D56  
                                                          l4050 0B46  
                                                          l4042 0AE6  
                                                          l4034 0AB4  
                                                          l4026 0A4A  
                                                          l4018 175E  
                                                          l4130 1F68  
                                                          l4122 1F3A  
                                                          l4210 1F00  
                                                          l4202 1EEC  
                                                          l1299 1784  
                                                          l4220 2230  
                                                          l4108 0D6E  
                                                          l4052 0B50  
                                                          l4060 0B9C  
                                                          l4044 0AFE  
                                                          l4036 0AC4  
                                                          l4028 0A74  
                                                          l4140 1FC4  
                                                          l4132 1F74  
                                                          l4124 1F3C  
                                                          l4212 1F04  
                                                          l4204 1EF0  
                                                          l4300 1C3C  
                                                          l4230 226A  
                                                          l4222 223C  
                                                          l4070 0C10  
                                                          l4062 0BB2  
                                                          l4054 0B66  
                                                          l4046 0B0A  
                                                          l4038 0AD2  
                                                          l4150 1FFC  
                                                          l4134 1F92  
                                                          l4126 1F4C  
                                                          l4142 1FC8  
                                                          l4118 1F28  
                                                          l4214 1F16  
                                                          l4206 1EF4  
                                                          l4302 1C52  
                                                          l4310 1C94  
                                                          l4320 263E  
                                                          l4240 22D2  
                                                          l4232 2282  
                                                          l4224 2242  
                                                          l4080 0C5E  
                                                          l4056 0B82  
                                                          l4048 0B20  
                                                          l4160 2012  
                                                          l4152 1FFE  
                                                          l4144 1FE4  
                                                          l4136 1F96  
                                                          l4128 1F52  
                                                          l4208 1EFC  
                                                          l4400 1960  
                                                          l4304 1C68  
                                                          l4242 22DA  
                                                          l4234 2286  
                                                          l4226 2248  
                                                          l4218 222C  
                                                          l4090 0CC0  
                                                          l4082 0C74  
                                                          l4066 0BE4  
                                                          l4058 0B86  
                                                          l4074 0C18  
                                                          l4250 2048  
                                                          l4162 2016  
                                                          l4154 2002  
                                                          l4138 1FA8  
                                                          l4146 1FF4  
                                                          l4170 1E1A  
                                                          l4330 2562  
                                                          l4322 254E  
                                                          l4410 24DA  
                                                          l4402 1968  
                                                          l4306 1C7E  
                                                          l4316 2630  
                                                          l4244 22E2  
                                                          l4236 2298  
                                                          l4228 225E  
                                                          l4084 0C90  
                                                          l4076 0C2E  
                                                          l4068 0BFA  
                                                          l4260 20D6  
                                                          l4252 2098  
                                                          l4164 2028  
                                                          l4156 2006  
                                                          l4148 1FFA  
                                                          l4180 1E56  
                                                          l4172 1E28  
                                                          l4420 2586  
                                                          l4412 2574  
                                                          l4332 2566  
                                                          l4324 2556  
                                                          l4340 178C  
                                                          l4500 12A8  
                                                          l4238 22CA  
                                                          l4094 0CF2  
                                                          l4086 0C94  
                                                          l4078 0C54  
                                                          l4262 20DE  
                                                          l4254 20A6  
                                                          l4270 210A  
                                                          l4158 200E  
                                                          l4190 1EB2  
                                                          l4182 1E62  
                                                          l4174 1E2A  
                                                          l4422 2590  
                                                          l4414 257C  
                                                          l4334 2568  
                                                          l4326 255A  
                                                          l4406 24B2  
                                                          l4350 17B8  
                                                          l4342 1792  
                                                          l4502 12B2  
                                                          l4510 12FE  
                                                          l4430 25DE  
                                                          l4096 0D08  
                                                          l4088 0CAA  
                                                          l4280 2544  
                                                          l3800 0624  
                                                          l4272 2126  
                                                          l4264 20E2  
                                                          l4256 20B8  
                                                          l4248 203E  
                                                          l4184 1E80  
                                                          l4176 1E3A  
                                                          l4192 1EB6  
                                                          l4168 1E16  
                                                          l4424 2592  
                                                          l4416 2582  
                                                          l4336 256A  
                                                          l4328 255E  
                                                          l4408 24C4  
                                                          l4520 268C  
                                                          l4360 1822  
                                                          l4352 17CE  
                                                          l4344 179E  
                                                          l4504 12BC  
                                                          l4432 25E6  
                                                          l4440 25CC  
                                                          l4098 0D1E  
                                                          l4274 251E  
                                                          l4282 24EE  
                                                          l3810 0672  
                                                          l3802 0636  
                                                          l4266 2100  
                                                          l4258 20BC  
                                                          l4194 1ED2  
                                                          l4186 1E84  
                                                          l4178 1E40  
                                                          l4530 0D9E  
                                                          l4418 2584  
                                                          l4338 256C  
                                                          l4442 26F6  
                                                          l4522 26EE  
                                                          l4370 1868  
                                                          l4362 1826  
                                                          l4354 17EE  
                                                          l4346 17AC  
                                                          l4290 1BE0  
                                                          l4450 1086  
                                                          l4434 2614  
                                                          l4426 259A  
                                                          l4276 2522  
                                                          l4284 24F2  
                                                          l3900 091E  
                                                          l3820 069E  
                                                          l3812 0676  
                                                          l3804 0638  
                                                          l4268 2104  
                                                          l4188 1E96  
                                                          l4196 1EE2  
                                                          l4604 106A  
                                                          l4540 0E46  
                                                          l4532 0DD8  
                                                          l4380 18BC  
                                                          l4372 1880  
                                                          l4364 1838  
                                                          l4356 1800  
                                                          l4348 17B2  
                                                          l4292 1BE4  
                                                          l4508 12C8  
                                                          l4460 10C6  
                                                          l4452 1096  
                                                          l4436 2618  
                                                          l4428 25AE  
                                                          l4278 2540  
                                                          l4286 2510  
                                                          l3910 099E  
                                                          l3830 06EC  
                                                          l3822 06B0  
                                                          l3806 064E  
                                                          l3814 067E  
                                                          l4198 1EE8  
                                                          l4606 1070  
                                                          l4550 0EDA  
                                                          l4542 0E5A  
                                                          l4534 0DE8  
                                                          l4526 0D8E  
                                                          l4446 2622  
                                                          l4622 26E6  
                                                          l4382 18C6  
                                                          l4374 1884  
                                                          l4366 184C  
                                                          l4358 180A  
                                                          l4390 190E  
                                                          l4630 2374  
                                                          l4294 1BFA  
                                                          l4470 1136  
                                                          l4454 109C  
                                                          l4438 261A  
                                                          l4288 2514  
                                                          l3920 0A14  
                                                          l3904 0956  
                                                          l3912 09A2  
                                                          l3840 0736  
                                                          l3832 06F0  
                                                          l3824 06B2  
                                                          l3816 0690  
                                                          l3808 0662  
                                                          l4552 0EDE  
                                                          l4544 0E94  
                                                          l4536 0DFC  
                                                          l4560 0F38  
                                                          l4528 0D9A  
                                                          l4392 1924  
                                                          l4384 18DE  
                                                          l4376 1896  
                                                          l4368 185E  
                                                          l4632 23B4  
                                                          l4624 2370  
                                                          l4296 1C10  
                                                          l4480 120E  
                                                          l4472 113E  
                                                          l4456 10AA  
                                                          l4464 10D4  
                                                          l4640 1974  
                                                          l3762 26BE  
                                                          l3922 0A1A  
                                                          l3914 09C2  
                                                          l3906 0962  
                                                          l3850 076E  
                                                          l3842 073E  
                                                          l3826 06C8  
                                                          l3834 06F8  
                                                          l3818 0698  
                                                          l4570 0F70  
                                                          l4562 0F4E  
                                                          l4554 0EE6  
                                                          l4546 0EA4  
                                                          l4538 0E36  
                                                          l4394 1938  
                                                          l4386 18E2  
                                                          l4378 18AA  
                                                          l4634 23B6  
                                                          l4298 1C26  
                                                          l4490 125E  
                                                          l4482 1220  
                                                          l4474 11BC  
                                                          l4458 10B8  
                                                          l4466 110A  
                                                          l4650 1988  
                                                          l4642 1978  
                                                          l3772 26B4  
                                                          l3764 25B8  
                                                          l3924 0A2C  
                                                          l3916 09D8  
                                                          l3908 0974  
                                                          l3860 07AE  
                                                          l3852 076E  
                                                          l3844 0744  
                                                          l3836 070A  
                                                          l3828 06DC  
                                                          l3780 26A0  
                                                          l4580 0F96  
                                                          l4572 0F76  
                                                          l4564 0F56  
                                                          l4548 0EB8  
                                                          l4396 1950  
                                                          l4388 18F4  
                                                          l4492 1272  
                                                          l4484 1230  
                                                          l4476 11DE  
                                                          l4468 1122  
                                                          l4660 19DA  
                                                          l4652 1994  
                                                          l4644 197C  
                                                          l4636 196E  
                                                          l3774 25F0  
                                                          l3766 25BC  
                                                          l3926 0A32  
                                                          l3918 09F8  
                                                          l3870 0800  
                                                          l3862 07BE  
                                                          l3838 0726  
                                                          l3950 1B1E  
                                                          l3942 1AD8  
                                                          l3782 26AA  
                                                          l4590 1028  
                                                          l4582 0FD8  
                                                          l4574 0F7E  
                                                          l4566 0F68  
                                                          l4558 0EF0  
                                                          l4398 1958  
                                                          l3790 23D0  
                                                          l4494 1286  
                                                          l4486 1244  
                                                          l4478 1204  
                                                          l4830 10EA  
                                                          l4670 1A14  
                                                          l4662 19E6  
                                                          l4654 199C  
                                                          l4646 1980  
                                                          l4638 196E  
                                                          l3768 25C0  
                                                          l3776 2680  
                                                          l3928 0A36  
                                                          l3880 0856  
                                                          l3872 0812  
                                                          l3864 07CE  
                                                          l3856 0782  
                                                          l3848 0758  
                                                          l3960 1B58  
                                                          l3952 1B30  
                                                          l3944 1B08  
                                                          l3936 1AA8  
                                                          l3784 2674  
                                                          l4592 103A  
                                                          l3792 23D8  
                                                          l4832 12DE  
                                                          l4496 1298  
                                                          l4488 1248  
                                                          l4680 1A84  
                                                          l4672 1A28  
                                                          l4664 19F8  
                                                          l4656 19B0  
                                                          l4648 1984  
                                                          l3890 08AE  
                                                          l3882 0870  
                                                          l3874 0820  
                                                          l3866 07D6  
                                                          l3858 079E  
                                                          l3970 1B8A  
                                                          l3962 1B62  
                                                          l3946 1B0A  
                                                          l3938 1AC2  
                                                          l3778 2696  
                                                          l3786 26FE  
                                                          l4594 1042  
                                                          l3794 23FA  
                                                          l4834 1CAA  
                                                          l4498 129E  
                                                          l4682 1A8C  
                                                          l4674 1A3C  
                                                          l4666 1A08  
                                                          l4658 19C0  
                                                          l3884 088A  
                                                          l3892 08C2  
                                                          l3876 0844  
                                                          l3868 07EC  
                                                          l3972 1B9E  
                                                          l3948 1B1A  
                                                          l3980 1596  
                                                          l3788 2668  
                                                          l4596 104A  
                                                          l4588 0FF0  
                                                          l4836 0F10  
                                                          l3796 2400  
                                                          l4684 1A92  
                                                          l4676 1A66  
                                                          l4668 1A0E  
                                                          l3894 08D6  
                                                          l3886 0890  
                                                          l3878 0846  
                                                          l3798 0618  
                                                          l3974 1BB4  
                                                          l3958 1B4C  
                                                          l3982 15AA  
                                                          l4598 1052  
                                                          l4686 1A96  
                                                          l4678 1A6A  
                                                          l3896 08DA  
                                                          l3888 089C  
                                                          l3976 1BC4  
                                                          l3968 1B7C  
                                                          l3992 1634  
                                                          l3984 15BC  
                                                          l4688 1A9A  
                                                          l3898 08EC  
                                                          l3994 163E  
                                                          l3986 1604  
                                                          l3996 164C  
                                                          l3988 1620  
                                                          ?_isr 0001  
                                                          l3998 1684  
                                                          u3000 0660  
                                                          u3001 065A  
                                                          u3010 06AE  
                                                          u3011 06A8  
                                                          u3100 0888  
                                                          u3020 06C6  
                                                          u3101 0882  
                                                          u3021 06C0  
                                                          _LATA 000F89  
                                                          u3110 08AC  
                                                          u3030 06DA  
                                                          _LATB 000F8A  
                                                          u3111 08A6  
                                                          u3031 06D4  
                                                          _LATC 000F8B  
                                                          u3200 0A2A  
                                                          u3120 08D4  
                                                          u3040 0724  
                                                          u4000 11DE  
                                                          _LATD 000F8C  
                                                          u3201 0A24  
                                                          u3121 08CE  
                                                          u3041 071E  
                                                          u4001 11D8  
                                                          u3130 08EA  
                                                          u3050 076C  
                                                          u3210 1AC0  
                                                          u4010 1202  
                                                          u3131 08E4  
                                                          u3051 0766  
                                                          u3211 1ABA  
                                                          u4011 11FC  
                                                          u3140 091C  
                                                          u3060 07EA  
                                                          u3220 1AFC  
                                                          u3300 161E  
                                                          u4100 1038  
                                                          u4020 125C  
                                                          u3141 0916  
                                                          u3061 07E4  
                                                          u3301 1618  
                                                          u4101 1032  
                                                          u4021 1256  
                                                          u3150 093A  
                                                          u3070 0810  
                                                          u3230 1B2E  
                                                          u3310 167E  
                                                          u4110 1064  
                                                          u4030 1270  
                                                          u3151 0934  
                                                          u3071 080A  
                                                          u3231 1B28  
                                                          u3311 1678  
                                                          u4111 105E  
                                                          u4031 126A  
                                                          u3400 0AFC  
                                                          u3160 0954  
                                                          u3080 0842  
                                                          u3240 1B46  
                                                          u3320 16D0  
                                                          u4120 23C8  
                                                          u4040 1284  
                                                          u3401 0AF6  
                                                          u3161 094E  
                                                          u3081 083C  
                                                          u3241 1B40  
                                                          u3225 1AF0  
                                                          u3321 16CA  
                                                          u4121 23C2  
                                                          u4041 127E  
                                                          u3410 0B1E  
                                                          u3170 0972  
                                                          u3090 086E  
                                                          u3250 1B76  
                                                          u3330 16F6  
                                                          u4050 1298  
                                                          u4130 19AE  
                                                          u3411 0B18  
                                                          u3171 096C  
                                                          u3091 0868  
                                                          u3251 1B70  
                                                          u3331 16F0  
                                                          u4051 1292  
                                                          u4131 19A8  
                                                          u3500 0C52  
                                                          u3420 0B44  
                                                          u3180 09C0  
                                                          u3260 1B9E  
                                                          u3340 170A  
                                                          u4060 0F4C  
                                                          u4140 19D8  
                                                          u3501 0C4C  
                                                          u3421 0B3E  
                                                          u3181 09BA  
                                                          u3261 1B98  
                                                          u3341 1704  
                                                          u4061 0F46  
                                                          u4141 19D2  
                                                          u3510 0C72  
                                                          u3430 0B64  
                                                          u3190 09F6  
                                                          u3270 1BB2  
                                                          u3350 171C  
                                                          u4070 0F68  
                                                          u4150 1A82  
                                                          u3511 0C6C  
                                                          u3431 0B5E  
                                                          u3191 09F0  
                                                          u3271 1BAC  
                                                          u3351 1716  
                                                          u4071 0F62  
                                                          u4151 1A7C  
                                                          u3520 0C8E  
                                                          u3440 0B80  
                                                          u3360 175C  
                                                          u3280 15A8  
                                                          u3600 1F66  
                                                          u4080 0F90  
                                                          u3521 0C88  
                                                          u3441 0B7A  
                                                          u3361 1756  
                                                          u3281 15A2  
                                                          u3601 1F60  
                                                          u4081 0F8A  
                                                          u3530 0CBE  
                                                          u3450 0BB0  
                                                          u3370 176E  
                                                          u3290 15BA  
                                                          u3610 1F90  
                                                          u4090 0FEA  
                                                          u3531 0CB8  
                                                          u3451 0BAA  
                                                          u3371 1768  
                                                          u3291 15B4  
                                                          u3611 1F8A  
                                                          u4091 0FE4  
                                                          u3540 0CEC  
                                                          u3460 0BDE  
                                                          u3380 0A72  
                                                          u3620 1FC2  
                                                          u3700 1EE2  
                                                          u3541 0CE6  
                                                          u3461 0BD8  
                                                          u3381 0A6C  
                                                          u3621 1FBC  
                                                          u3701 1EDC  
                                                          u3550 0D06  
                                                          u3470 0BF8  
                                                          u3390 0AB2  
                                                          u3630 1FE2  
                                                          u3710 1F14  
                                                          u3551 0D00  
                                                          u3471 0BF2  
                                                          u3391 0AAC  
                                                          u3631 1FDC  
                                                          u3711 1F0E  
                                                          u3720 225C  
                                                          u3560 0D1C  
                                                          u3480 0C0E  
                                                          u3800 250C  
                                                          u3640 1FF4  
                                                          u3721 2256  
                                                          u3561 0D16  
                                                          u3481 0C08  
                                                          u3801 2506  
                                                          u3641 1FEE  
                                                          u3730 2280  
                                                          u3570 0D40  
                                                          u3490 0C2C  
                                                          u3650 2026  
                                                          u3810 17CC  
                                                          u3731 227A  
                                                          u3571 0D3A  
                                                          u3491 0C26  
                                                          u3651 2020  
                                                          u3811 17C6  
                                                          u3740 22B2  
                                                          u3580 0D54  
                                                          u3660 1E54  
                                                          u3900 18DC  
                                                          u3820 17EC  
                                                          u3741 22AC  
                                                          u3581 0D4E  
                                                          u3661 1E4E  
                                                          u3901 18D6  
                                                          u3821 17E6  
                                                          u3750 22C4  
                                                          u3590 0D68  
                                                          u3670 1E7E  
                                                          u3910 190E  
                                                          u3830 1800  
                                                          u3751 22BE  
                                                          u3591 0D62  
                                                          u3671 1E78  
                                                          u3911 1908  
                                                          u3831 17FA  
                                                          u3760 20D4  
                                                          u3680 1EB0  
                                                          u3920 1922  
                                                          u3840 1820  
                                                          u2960 23F8  
                                                          u3761 20CE  
                                                          u3681 1EAA  
                                                          u3921 191C  
                                                          u3841 181A  
                                                          u2961 23F2  
                                                          u3770 20FC  
                                                          u3690 1ED0  
                                                          u3930 1936  
                                                          u3850 184A  
                                                          u2970 2416  
                                                   main@newData 00F1  
                                                          u3771 20F6  
                                                          u3691 1ECA  
                                                          u3931 1930  
                                                          u3851 1844  
                                                          u2971 2410  
                                                          u2980 0634  
                                                          u3780 2124  
                                                          u3940 194A  
                                                          u3860 185E  
                                                          u2981 062E  
                                                          u3781 211E  
                                                          u3941 1944  
                                                          u3861 1858  
                                                          u3790 253C  
                                                          u2990 064C  
                                                          u3950 24C2  
                                                          u3870 187E  
                                                          u3791 2536  
                                                          u2991 0646  
                                                          u3951 24BC  
                                                          u3871 1878  
                                                          u3960 24D8  
                                                          u3880 18A8  
                                                          u3961 24D2  
                                                          u3881 18A2  
                                                          u3890 18BC  
                                                          u3970 1120  
                                                          u3891 18B6  
                                                          u3971 111A  
                                                          u3980 1134  
                                                          u3981 112E  
                                                          u3990 11BA  
                                                          u3991 11B4  
                                                          i2l81 2654  
                                                          i2l87 2708  
                                                          _TMR0 000FD6  
                                                          _TMR2 000FCC  
                                           __end_ofi2_storeData 1592  
                                                          _main 196E  
                                                          _maxX 0607  
                                                          _maxY 0605  
                                          __end_ofi2_printError 1E14  
                                                          fsr2h 000FDA  
                                                          indf2 000FDF  
                                                          fsr1l 000FE1  
                                                          fsr2l 000FD9  
                                                          btemp 006E  
                                                          prodh 000FF4  
                                                          prodl 000FF3  
                                                          start 01A4  
                                               ___fldiv@new_exp 0031  
                                                  ___param_bank 000000  
                                               ??_whatsTM0Limit 0001  
                                                         ??_isr 000B  
                                                  ?_executeData 0001  
                                               executeData@data 00EB  
                                                 ___fltol@sign1 0041  
                                                         ?_main 0001  
                                               __end_of___fldiv 0A48  
                                               __end_of___fltol 1BDC  
                                                         i2l251 2608  
                                                         i2l252 260A  
                                                         i2l390 26D6  
                                                         i2l632 2710  
                                                         i2l538 2718  
                                                         i2l466 018C  
                                                         i2l571 2434  
                                                         i2l387 26E0  
                                                         i2l635 26CC  
                                                         i2l566 1E0E  
                                                         i2l638 2662  
                                                         i2l575 2466  
                                                         i2l592 149E  
                                                         i2l599 158C  
                                          rotateObj@rotSequence 0080  
                                                         _SPBRG 000FAF  
                                                         _TRISA 000F92  
                                                         _TRISB 000F93  
                                                         _TRISC 000F94  
                                                         _TRISD 000F95  
                                                         _TXREG 000FAD  
                                               __end_of_getData 263C  
                                               i2storeData@data 000A  
                                               __end_of_initADC 2598  
                                                  ?_newSequence 0001  
                                               __end_of_liftArm 22E8  
                                               __end_of_readSeq 26F4  
                                                  stepMade@temp 0014  
                                                         tablat 000FF5  
                                                i2uartTx@length 0003  
                                               __end_of_stopADC 2704  
                                                         ttemp5 006F  
                                                         ttemp6 0072  
                                                         ttemp7 0076  
                                                         status 000FD8  
                                                         wtemp8 006F  
                                              __end_ofi2_uartTx 246A  
                                                 ?_increaseStep 0001  
                                               __initialization 22E8  
                                        __size_of_initPinMotors 0026  
                                                  __end_of_main 1AA6  
                                                  __end_of_maxX 0609  
                                                  __end_of_maxY 0607  
                                      resetPosition@keepMovingX 0015  
                                      resetPosition@keepMovingY 0016  
                                      resetPosition@keepMovingZ 0017  
                                                        ??_main 00EE  
                                                 __activetblptr 000002  
                                         __end_of_resetTM0_Temp 26BC  
                                         __end_of_resetTM2_Temp 2600  
                                                   i2_storeData 130A  
                                                  ?_setThermRel 0001  
                                                        _ADRESH 000FC4  
                                                        _ADRESL 000FC3  
                                                  ?_moveToPoint 0015  
                                                        i2l3100 1D58  
                                                        i2l3102 1D6E  
                                                        i2l3110 1DB0  
                                                        i2l2230 26DC  
                                                        i2l3104 1D84  
                                                        i2l2240 270E  
                                                        i2l2232 26D2  
                                                        i2l3106 1D9A  
                                                        i2l3202 2602  
                                                        i2l2234 2716  
                                                        i2l2242 26C8  
                                                        i2l3090 1CFC  
                                                        i2l3092 1D00  
                                                        i2l3094 1D16  
                                                        i2l1910 2706  
                                                        i2l3096 1D2C  
                                                        i2l3440 1324  
                                                        i2l3600 00F6  
                                                        i2l3098 1D42  
                                                        i2l3434 265A  
                                                        i2l1906 264C  
                                                        i2l3442 1332  
                                                        i2l3450 135C  
                                                        i2l3610 0142  
                                                        i2l3602 00FA  
                                                        i2l3460 1444  
                                                        i2l3444 1340  
                                                        i2l3452 1392  
                                                        i2l3436 130E  
                                                        i2l3620 0186  
                                                        i2l3612 014E  
                                                        i2l3604 0100  
                                                        i2l3470 14B8  
                                                        i2l3462 1466  
                                                        i2l3454 13AA  
                                                        i2l3446 134E  
                                                        i2l3438 131E  
                                                        i2l3614 0168  
                                                        i2l3606 0114  
                                                        i2l3480 150E  
                                                        i2l3472 14CC  
                                                        i2l3464 148C  
                                                        i2l3456 13BE  
                                                        i2l3608 011C  
                                                        i2l3616 016C  
                                                        i2l3560 001C  
                                                        i2l3490 1544  
                                                        i2l3482 1520  
                                                        i2l3474 14D0  
                                                        i2l3466 1496  
                                                        i2l3458 13C6  
                                                        i2l3618 0180  
                                                        i2l3570 0050  
                                                        i2l3562 002E  
                                                        i2l3484 1526  
                                                        i2l3476 14E6  
                                                        i2l3468 14A8  
                                                        i2l3580 0086  
                                                        i2l3572 0054  
                                                        i2l3564 0030  
                                                        i2l2790 2426  
                                                        i2l3486 1530  
                                                        i2l3478 14FA  
                                                        i2l3494 1550  
                                                        i2l3590 00C2  
                                                        i2l3582 008A  
                                                        i2l3566 0032  
                                                        i2l3574 0058  
                                                        i2l2792 2448  
                                                        i2l3488 153A  
                                                        i2l3496 1586  
                                                        i2l3592 00CA  
                                                        i2l3584 009E  
                                                        i2l3576 006C  
                                                        i2l3568 004E  
                                                        i2l2794 244E  
                                                        i2l3594 00CC  
                                                        i2l3586 00A0  
                                                        i2l3578 006E  
                                                        i2l2788 241E  
                                                        i2l3596 00E0  
                                                        i2l3588 00A4  
                                                        i2l3598 00F2  
                                                        i2l4840 1566  
                                                        i2l4842 1DC6  
                                                        i2l4838 1372  
                                                        _RCREG1 000FAE  
                                                  ?_setTouchRel 0001  
                                              __end_of_abortAll 2612  
                                              __end_of___xxtofl 178A  
                                              __end_of_clearTM0 264A  
                                              _errString_PointZ 0100  
                                                ??_increaseStep 0001  
                                              __end_of_maxFeedX 0615  
                                              __end_of_maxFeedY 0614  
                                                     ??___fldiv 0028  
                                                     ??___fltol 003D  
                                              __end_of_tim0Init 25EE  
                                              __end_of_tim1Init 2620  
                                              __end_of_tim2Init 25DC  
                                                        clear_0 234E  
                                                        clear_1 235A  
                                                     ??_getData 0014  
                                                        _uartTx 23CE  
                                                     ??_initADC 0012  
                                                     ??_liftArm 0015  
                                                     ??_readSeq 0012  
                                                  __pdataCOMRAM 0067  
                                         __end_of_resetPosition 196E  
                                                  __mediumconst 0000  
                                                        tblptrh 000FF7  
                                                        tblptrl 000FF6  
                                                        tblptru 000FF8  
                                                  ?_returnTherm 0012  
                                              __end_of_startADC 269E  
                                              __end_of_stepMade 25CA  
                                                 _initPinMotors 254C  
                                                  ?_returnTouch 0012  
                                                     ??_stopADC 0012  
                                         __size_ofi2_printError 011C  
                                              __end_of_writeTM0 2658  
                                     __size_of_resetNewSequence 000A  
                                                  ___xxtofl@arg 001C  
                                                  ___xxtofl@exp 001B  
                                                  ___xxtofl@val 0012  
                                                    __accesstop 0080  
                                       __end_of__initialization 2360  
                                                  _dataSequence 00C6  
                                                 ___rparam_used 000001  
                                                    ___fltol@f1 0039  
                                                  ?_stepCounter 0012  
                                                   i2uartTx@ptr 0001  
                                                __pcstackCOMRAM 0001  
                                                  __newSequence 005F  
                                                  __pidataBANK0 246A  
                                                  __pidataBANK1 2132  
                                          __size_of_executeData 02F6  
                                                  i2_printError 1CF8  
                                                  ?_touchObject 0001  
                                                _errString_ZEND 015E  
                                                _errString_Feed 0090  
                                                ?_initPinMotors 0001  
                                                     ?i2_uartTx 0001  
                                                    __pbssBANK0 00C6  
                                          __size_of_newSequence 0008  
                                                    _feeder1Pos 0611  
                                                    _feeder2Pos 060F  
                                                    _feeder3Pos 060D  
                                       __size_of_getNewSequence 000E  
                                                    _fatalError 2714  
                                            __size_of_reduceSeq 0008  
                                            __size_of_retPeriod 000E  
                                                _touch_pressure 060B  
                                            __size_of_shiftData 0060  
                                            __size_of_resetStep 000A  
                                                       _ADC_res 0053  
                                                       ?_uartTx 0012  
                                                     ?_abortAll 0001  
                                                     ?___xxtofl 0012  
                                          __end_of_increaseStep 2714  
                                                     ?_clearTM0 0001  
                                                    ??i2_uartTx 0004  
                                            __size_of_rotateObj 00FA  
                                             _errString_Command 00AE  
                                            __size_of_usartInit 001E  
                                        __size_of_interruptInit 003C  
                                          __size_of_setThermRel 000A  
                                            __size_of_storeData 0288  
                                                     ?_tim0Init 0001  
                                                     ?_tim1Init 0001  
                                                     ?_tim2Init 0012  
                                          __size_of_moveToPoint 0344  
                                               _newSequenceData 00DA  
                                          __size_of_setTouchRel 000A  
                                                       __Hparam 0000  
                                                       __Lparam 0000  
                                        __end_of_touch_pressure 060D  
                                                       ___fldiv 0616  
                                                     ?_startADC 0001  
                                                     ?_stepMade 0012  
                                                       ___fltol 1AA6  
                                                  __psmallconst 0600  
                                                       __pcinit 22E8  
                                         __end_of_whatsTM0Limit 270C  
                                                       _getData 262E  
                                                       __ramtop 0600  
                                                     ?_writeTM0 0001  
                                                    _pickObject 251C  
                                                       __ptext0 196E  
                                                       __ptext1 2598  
                                                       __ptext2 25CA  
                                                       __ptext3 2612  
                                                       __ptext4 25DC  
                                                       __ptext5 1082  
                                                       __ptext6 1BDC  
                                                       __ptext7 23CE  
                                                       __ptext8 236E  
                                                       __ptext9 178A  
                                               __size_of_uartTx 004E  
                                                     _T0CONbits 000FD5  
                                                       _initADC 2572  
                                                     _T1CONbits 000FCD  
                                               ??_initPinMotors 0012  
                                                       _counter 005E  
                                                       _liftArm 222A  
                                                     _T2CONbits 000FCA  
                                                    ??_abortAll 0008  
                                                       _readSeq 26EC  
                                                  __size_of_isr 019C  
                                                    ??___xxtofl 0016  
                                                    _neverCheck 005D  
                                                  ?i2_storeData 0001  
                                                    ??_clearTM0 0012  
                                                    _motCounter 0067  
                                                       _pwmStep 005C  
                                                       _stopADC 26FC  
                                             __end_of_reduceSeq 26EC  
                                             __end_of_retPeriod 2666  
                                                    _releaseObj 24EC  
                                          __size_of_returnTherm 000C  
                                          end_of_initialization 2360  
                                          __size_of_returnTouch 000C  
                                              _resetNewSequence 268A  
                                              rotateObj@totStep 00E3  
                                             __end_of_shiftData 23CE  
                                                       isr@temp 0011  
                                             __end_of_resetStep 26C6  
                                                    ??_tim0Init 0012  
                                                 __Lmediumconst 0000  
                                                    ??_tim1Init 0012  
                                                    ??_tim2Init 0014  
                                                    _resetTherm 26A8  
                                                    _resetTouch 269E  
                                                       uartTx@i 0015  
                                                   ?_fatalError 0001  
                                                     _RCSTAbits 000FAB  
                                                       postdec1 000FE5  
                                             __end_of_rotateObj 2132  
                                                       postinc0 000FEE  
                                                       postinc1 000FE6  
                                                       postinc2 000FDE  
                                                    ??_startADC 0012  
                                                    ??_stepMade 0014  
                                          __size_of_stepCounter 000C  
                                                 _interruptInit 24B0  
                                             __end_of_usartInit 25B6  
                                             __end_of_storeData 130A  
                                    __end_ofrotateObj@stepAngle 0605  
                                                    ??_writeTM0 0001  
                                                     _PORTDbits 000F83  
                                                    _printError 1BDC  
                                                     _PORTEbits 000F84  
                                           i2printError@errCode 0007  
                                                    _toggleStep 26C6  
                                                 ___xxtofl@sign 001A  
                                                     _TRISCbits 000F94  
                                                     _TRISDbits 000F95  
                                                     _TRISEbits 000F96  
                                                   ___fldiv@grs 0033  
                                                   ___fldiv@rem 002C  
                                          __size_of_touchObject 0112  
                                                    _stepToggle 005B  
                                                  _completeStep 0062  
                                                    _touchTherm 1E14  
                                                     _TXSTAbits 000FAC  
                                                _getNewSequence 2620  
                                        __size_of_resetTM0_Temp 000A  
                                        __size_of_resetTM2_Temp 0012  
                                                ?_interruptInit 0001  
                                                 __pidataCOMRAM 271C  
                                         __size_of_increaseStep 0008  
                                                   ?_pickObject 0001  
                                                   __fatalError 0060  
                                                __end_of_uartTx 241C  
                                                 moveToPoint@x1 0015  
                                                 moveToPoint@x2 0019  
                                                 moveToPoint@y1 0017  
                                                 moveToPoint@y2 001B  
                                           start_initialization 22E8  
                                                     i2uartTx@i 0004  
                                                   __end_of_isr 01A4  
                                           __size_of_fatalError 0008  
                                                   ?_releaseObj 0001  
                                             __size_ofi2_uartTx 004E  
                                        __end_of_getNewSequence 262E  
                                               _errString_Fatal 01AF  
                                               _errString_Bound 01D6  
                                                   ?_resetTherm 0001  
                                               _errString_Reset 0187  
                                                   ?_resetTouch 0001  
                                               _errString_Point 0135  
                                                  _increaseStep 270C  
                                        __size_of_resetPosition 01E4  
                                                 ??_executeData 00E9  
                                                   __pdataBANK0 0080  
                                                   __pdataBANK1 0100  
                                                   _dataCounter 0061  
                                                      ??_uartTx 0015  
                                        moveToPoint@keepMovingX 0021  
                                        moveToPoint@keepMovingY 0022  
                                                   ?_printError 0001  
                                                     ___fldiv@a 0024  
                                                     ___fldiv@b 0020  
                                                _therm_pressure 0609  
                                                   ?_toggleStep 0001  
                                                   __pbssCOMRAM 0043  
                                                 _resetTM0_Temp 26B2  
                                                 _resetTM2_Temp 25EE  
                                                 __pcstackBANK0 00E2  
                                                 ??_newSequence 0012  
                                             __size_of_abortAll 0012  
                                             __size_of___xxtofl 01F8  
                                          __size_ofi2_storeData 0288  
                                             __size_of_clearTM0 000E  
                                               ?_getNewSequence 0012  
                                                   ?_touchTherm 0001  
                                           __size_of_pickObject 0030  
                                            executeData@errCode 00ED  
                                             __size_of_tim0Init 0012  
                                             __size_of_tim1Init 000E  
                                             __size_of_tim2Init 0012  
                                               ??_interruptInit 0012  
                                                     __pintcode 0008  
                                                      ?___fldiv 0020  
                                                      ?___fltol 0039  
                                      __end_of_resetNewSequence 2694  
                                           __size_of_releaseObj 0030  
                                                 storeData@data 001B  
                                                      ?_getData 0012  
                                             __size_of_startADC 000A  
                                             __size_of_stepMade 0014  
                                        __end_of_therm_pressure 060B  
                                                      ?_initADC 0001  
                                                   __smallconst 0600  
                                                      ?_liftArm 0001  
                                                      ?_readSeq 0001  
                                                ?_resetTM0_Temp 0001  
                                             __size_of_writeTM0 000E  
                                                ?_resetTM2_Temp 0001  
                                           __end_of_executeData 1082  
                                                    shiftData@i 0014  
                                           __size_of_resetTherm 000A  
                                                     _newFeeder 0055  
                                                 _resetPosition 178A  
                                           __size_of_resetTouch 000A  
                                                     _mexLength 006D  
                                                 ??_setThermRel 0001  
                                                      ?_stopADC 0001  
                                                 ??_moveToPoint 001D  
                                                 ??_setTouchRel 0001  
                                           __end_of_newSequence 26FC  
                                                     _reduceSeq 26E4  
                                                      _LATAbits 000F89  
                                                      _LATBbits 000F8A  
                                                     _retPeriod 2658  
                                                      _LATCbits 000F8B  
                                                      _LATDbits 000F8C  
                                           __size_of_printError 011C  
                                                      _IPR1bits 000F9F  
                                                      _PIE1bits 000F9D  
                                                     _shiftData 236E  
                                                     _resetStep 26BC  
                                                      i2u280_40 1520  
                                                      i2u272_40 13A8  
                                                      i2u280_41 151A  
                                                      i2u272_41 13A2  
                                                      i2u273_40 13BC  
                                                      i2u273_41 13B6  
                                                      _PIR1bits 000F9E  
                                                      i2u274_40 1442  
                                                      i2u290_40 00DE  
                                                      i2u274_41 143C  
                                                      i2u290_41 00D8  
                                                      i2u195_40 2446  
                                                      i2u275_40 1466  
                                                      i2u291_40 00F0  
                                                      i2u195_41 2440  
                                                      i2u275_41 1460  
                                                      i2u291_41 00EA  
                                                      i2u196_40 2464  
                                                      i2u276_40 148A  
                                                      i2u292_40 0112  
                                                      i2u284_40 002C  
                                                      i2u196_41 245E  
                                                      i2u276_41 1484  
                                                      i2u292_41 010C  
                                                      i2u284_41 0026  
                                                      i2u277_40 14E4  
                                                      i2u293_40 0140  
                                                      i2u285_40 004C  
                                                      i2u277_41 14DE  
                                                      i2u293_41 013A  
                                                      i2u285_41 0046  
                                                      i2u278_40 14F8  
                                                      i2u294_40 0166  
                                                      i2u286_40 006A  
                                                      i2u278_41 14F2  
                                                      i2u294_41 0160  
                                                      i2u286_41 0064  
                                                      i2u279_40 150C  
                                                      i2u295_40 017E  
                                                      i2u287_40 0084  
                                                      i2u279_41 1506  
                                                      i2u295_41 0178  
                                                      i2u287_41 007E  
                                                      i2u288_40 009C  
                                                      i2u288_41 0096  
                                                      i2u289_40 00C0  
                                                      i2u289_41 00BA  
                                           __size_of_toggleStep 000A  
                                                  ??_fatalError 0001  
                                                     _posVector 004C  
                                                      _RCONbits 000FD0  
                                                     _therm_rel 0064  
                                                     _pwmPeriod 004F  
                                                     _rotateObj 2038  
                                                    _ADCON0bits 000FC2  
                                                    _ADCON1bits 000FC1  
                                           __size_of_touchTherm 0112  
                                                     _usartInit 2598  
                                                     _touch_rel 0065  
                                            __end_of_feeder1Pos 0613  
                                            __end_of_feeder2Pos 0611  
                                            __end_of_feeder3Pos 060F  
                                                     _storeData 1082  
                                                ?_resetPosition 0001  
                                         __end_of_initPinMotors 2572  
                                                 ??_returnTherm 0014  
                                                 ??_returnTouch 0014  
                                                      i2_uartTx 241C  
                                                     copy_data0 22FC  
                                                     copy_data1 231C  
                                                     copy_data2 233C  
                                            __end_of_fatalError 271C  
                                            rotateObj@stepAngle 0601  
                                                    ?_reduceSeq 0001  
                                                    ?_retPeriod 0001  
                                                    rotateObj@c 00E7  
                                                    rotateObj@i 00E5  
                                        __size_of_whatsTM0Limit 0008  
                                           __end_of_setThermRel 26E4  
                                           __end_of_moveToPoint 0D8C  
                                             printError@errCode 0018  
                                                    ?_shiftData 0001  
                                                 ??_stepCounter 0014  
                                                      __Hrparam 0000  
                                                    ?_resetStep 0001  
                                           __end_of_setTouchRel 26DA  
                                                      __Lrparam 0000  
                                              __size_of___fldiv 0432  
                                              __size_of___fltol 0136  
                                                   _executeData 0D8C  
                                                  ??_pickObject 0015  
                                                    ?_rotateObj 0001  
                                      moveToPoint@MOT1Direction 001F  
                                               ??_resetTM0_Temp 0012  
                                                 ?i2_printError 0001  
                                               ??_resetTM2_Temp 0012  
                                              __size_of_getData 000E  
                                      moveToPoint@MOT2Direction 0020  
                                                 ??_touchObject 0015  
                                                      _abortAll 2600  
                                                    ?_usartInit 0001  
                                              __size_of_initADC 0026  
                                                      ___xxtofl 1592  
                                              __size_of_liftArm 00BE  
                                                    ?_storeData 0001  
                                                      _clearTM0 263C  
                                              __size_of_readSeq 0008  
                                                      _tm0Count 0063  
                                                      _tm0Error 0059  
                                                      _tm0Limit 0066  
                                                   _newSequence 26F4  
                                                      __ptext10 268A  
                                                      __ptext11 26E4  
                                                      __ptext20 2666  
                                                      __ptext12 26EC  
                                                      __ptext21 1F26  
                                                      __ptext13 26F4  
                                                      __ptext30 0616  
                                                      __ptext22 26FC  
                                                      __ptext14 24B0  
                                                      __ptext31 24EC  
                                                      __ptext23 2694  
                                                      __ptext15 254C  
                                                      __ptext40 262E  
                                                      __ptext32 251C  
                                                      __ptext24 2672  
                                                      __ptext16 2572  
                                                      __ptext41 263C  
                                                      __ptext33 0A48  
                                                      __ptext25 269E  
                                                      __ptext17 2620  
                                                      __ptext50 270C  
                                                      __ptext34 267E  
                                                      __ptext26 26A8  
                                                      __ptext18 0D8C  
                                                      __ptext51 2714  
                                                      __ptext43 130A  
                                                      __ptext35 222A  
                                                      __ptext27 2038  
                                                      __ptext19 1E14  
                                                      __ptext52 2600  
                                                      __ptext44 264A  
                                                      __ptext36 25B6  
                                                      __ptext28 1592  
                                                      __ptext53 1CF8  
                                                      __ptext45 2704  
                                                      __ptext37 25EE  
                                                      __ptext29 1AA6  
                                                      __ptext54 241C  
                                                      __ptext46 26C6  
                                                      __ptext38 26B2  
                                                      __ptext47 26D0  
                                                      __ptext39 26BC  
                                                      __ptext48 26DA  
                                                      __ptext49 2658  
                                                  ??_releaseObj 0015  
                                              __size_of_stopADC 0008  
                                                      _maxFeedX 0614  
                                                      _maxFeedY 0613  
                                           __end_of_returnTherm 2672  
                                           __end_of_returnTouch 267E  
                                                      _tim0Init 25DC  
                                                      _tim1Init 2612  
                                                      _tim2Init 25CA  
                                                 __size_of_main 0138  
                                                   _receivedMex 0043  
                                            __end_of_pickObject 254C  
                                                  ??_resetTherm 0012  
                                                  ??_resetTouch 0012  
                                                     uartTx@ptr 0012  
                                                      _rotAngle 0057  
                                                      int$flags 006E  
                                                      _startADC 2694  
                                                      _stepMade 25B6  
                                                      _stepMot1 008C  
                                                      _stepMot2 0088  
                                                      _stepMot3 0084  
                                           __end_of_stepCounter 268A  
                                             rotateObj@rotAngle 00E2  
                                                ??i2_printError 0005  
                                            __end_of_releaseObj 251C  
                                                      _writeTM0 264A  
                                                  ??_printError 0016  
                                                 _whatsTM0Limit 2704  
                                               ??_resetPosition 0015  
                                            tim2Init@_pwmPeriod 0012  
                                                    _INTCONbits 000FF2  
                                                  ??_toggleStep 0001  
                                              ??_getNewSequence 0014  
                                            __end_of_resetTherm 26B2  
                                            __end_of_resetTouch 26A8  
                                                   _setThermRel 26DA  
                                                  uartTx@length 0014  
                                                  _single_cycle 0051  
                                                   _moveToPoint 0A48  
                                           __end_of_touchObject 2038  
                                                      intlevel2 2724  
                                                  ??_touchTherm 0015  
                                                   _setTouchRel 26D0  
                                                   ??_reduceSeq 0012  
                                                   ??_retPeriod 0003  
                                                    _RCSTA1bits 000FAB  
                                            __end_of_printError 1CF8  
                                                   ??_shiftData 0012  
                                                   ??_resetStep 0012  
                                            __end_of_toggleStep 26D0  
                                             ?_resetNewSequence 0001  
                                                ?_whatsTM0Limit 0001  
                                                   ??_rotateObj 0043  
                                            ??_resetNewSequence 0012  
                                            __end_of_touchTherm 1F26  
                                                   ??_usartInit 0012  
                                                 ??i2_storeData 0008  
                                                   ??_storeData 0019  
                                                   _returnTherm 2666  
                                                   _returnTouch 2672  
                                                   _stepCounter 267E  
