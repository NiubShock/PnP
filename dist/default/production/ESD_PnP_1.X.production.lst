

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Apr 26 14:56:12 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    74                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    75  0000                     
    76                           ; Version 2.20
    77                           ; Generated 12/02/2020 GMT
    78                           ; 
    79                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC18F452 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     
   111                           	psect	idataCOMRAM
   112  0024CC                     __pidataCOMRAM:
   113                           	callstack 0
   114                           
   115                           ;initializer for _motCounter
   116  0024CC  0000               	dw	0
   117  0024CE  0001               	dw	1
   118  0024D0  0000               	dw	0
   119  0024D2  0001               	dw	1
   120  0024D4  0000               	dw	0
   121  0024D6  0001               	dw	1
   122                           
   123                           ;initializer for _maxX
   124  0024D8  0014               	dw	20
   125                           
   126                           ;initializer for storeData@mexLength
   127  0024DA  05                 	db	5
   128                           
   129                           	psect	idataBANK0
   130  002336                     __pidataBANK0:
   131                           	callstack 0
   132                           
   133                           ;initializer for rotateObj@rotSequence
   134  002336  09                 	db	9
   135  002337  03                 	db	3
   136  002338  06                 	db	6
   137  002339  0C                 	db	12
   138                           
   139                           ;initializer for _stepMot3
   140  00233A  09                 	db	9
   141  00233B  03                 	db	3
   142  00233C  06                 	db	6
   143  00233D  0C                 	db	12
   144                           
   145                           ;initializer for _stepMot2
   146  00233E  11                 	db	17
   147  00233F  05                 	db	5
   148  002340  0C                 	db	12
   149  002341  18                 	db	24
   150                           
   151                           ;initializer for _stepMot1
   152  002342  22                 	db	34
   153  002343  06                 	db	6
   154  002344  0C                 	db	12
   155  002345  28                 	db	40
   156                           
   157                           ;initializer for _maxY
   158  002346  0014               	dw	20
   159                           
   160                           ;initializer for _errString_Feed
   161  002348  45                 	db	69
   162  002349  72                 	db	114
   163  00234A  72                 	db	114
   164  00234B  6F                 	db	111
   165  00234C  72                 	db	114
   166  00234D  2C                 	db	44
   167  00234E  20                 	db	32
   168  00234F  66                 	db	102
   169  002350  65                 	db	101
   170  002351  65                 	db	101
   171  002352  64                 	db	100
   172  002353  20                 	db	32
   173  002354  6C                 	db	108
   174  002355  69                 	db	105
   175  002356  6E                 	db	110
   176  002357  65                 	db	101
   177  002358  20                 	db	32
   178  002359  6E                 	db	110
   179  00235A  6F                 	db	111
   180  00235B  74                 	db	116
   181  00235C  20                 	db	32
   182  00235D  64                 	db	100
   183  00235E  65                 	db	101
   184  00235F  66                 	db	102
   185  002360  69                 	db	105
   186  002361  6E                 	db	110
   187  002362  65                 	db	101
   188  002363  64                 	db	100
   189  002364  0A                 	db	10
   190  002365  00                 	db	0
   191                           
   192                           ;initializer for _errString_Command
   193  002366  43                 	db	67
   194  002367  6F                 	db	111
   195  002368  6D                 	db	109
   196  002369  6D                 	db	109
   197  00236A  61                 	db	97
   198  00236B  6E                 	db	110
   199  00236C  64                 	db	100
   200  00236D  20                 	db	32
   201  00236E  6E                 	db	110
   202  00236F  6F                 	db	111
   203  002370  74                 	db	116
   204  002371  20                 	db	32
   205  002372  72                 	db	114
   206  002373  65                 	db	101
   207  002374  63                 	db	99
   208  002375  6F                 	db	111
   209  002376  67                 	db	103
   210  002377  6E                 	db	110
   211  002378  69                 	db	105
   212  002379  7A                 	db	122
   213  00237A  65                 	db	101
   214  00237B  64                 	db	100
   215  00237C  0A                 	db	10
   216  00237D  00                 	db	0
   217                           
   218                           	psect	idataBANK1
   219  001F04                     __pidataBANK1:
   220                           	callstack 0
   221                           
   222                           ;initializer for _errString_PointZ
   223  001F04  45                 	db	69
   224  001F05  72                 	db	114
   225  001F06  72                 	db	114
   226  001F07  6F                 	db	111
   227  001F08  72                 	db	114
   228  001F09  2C                 	db	44
   229  001F0A  20                 	db	32
   230  001F0B  74                 	db	116
   231  001F0C  69                 	db	105
   232  001F0D  6D                 	db	109
   233  001F0E  65                 	db	101
   234  001F0F  20                 	db	32
   235  001F10  65                 	db	101
   236  001F11  78                 	db	120
   237  001F12  63                 	db	99
   238  001F13  65                 	db	101
   239  001F14  65                 	db	101
   240  001F15  64                 	db	100
   241  001F16  65                 	db	101
   242  001F17  64                 	db	100
   243  001F18  20                 	db	32
   244  001F19  74                 	db	116
   245  001F1A  6F                 	db	111
   246  001F1B  20                 	db	32
   247  001F1C  72                 	db	114
   248  001F1D  65                 	db	101
   249  001F1E  61                 	db	97
   250  001F1F  63                 	db	99
   251  001F20  68                 	db	104
   252  001F21  20                 	db	32
   253  001F22  74                 	db	116
   254  001F23  68                 	db	104
   255  001F24  65                 	db	101
   256  001F25  20                 	db	32
   257  001F26  65                 	db	101
   258  001F27  6E                 	db	110
   259  001F28  64                 	db	100
   260  001F29  20                 	db	32
   261  001F2A  6F                 	db	111
   262  001F2B  66                 	db	102
   263  001F2C  20                 	db	32
   264  001F2D  74                 	db	116
   265  001F2E  68                 	db	104
   266  001F2F  65                 	db	101
   267  001F30  20                 	db	32
   268  001F31  5A                 	db	90
   269  001F32  20                 	db	32
   270  001F33  41                 	db	65
   271  001F34  78                 	db	120
   272  001F35  69                 	db	105
   273  001F36  73                 	db	115
   274  001F37  0A                 	db	10
   275  001F38  00                 	db	0
   276                           
   277                           ;initializer for _errString_Point
   278  001F39  45                 	db	69
   279  001F3A  72                 	db	114
   280  001F3B  72                 	db	114
   281  001F3C  6F                 	db	111
   282  001F3D  72                 	db	114
   283  001F3E  2C                 	db	44
   284  001F3F  20                 	db	32
   285  001F40  74                 	db	116
   286  001F41  69                 	db	105
   287  001F42  6D                 	db	109
   288  001F43  65                 	db	101
   289  001F44  20                 	db	32
   290  001F45  65                 	db	101
   291  001F46  78                 	db	120
   292  001F47  63                 	db	99
   293  001F48  65                 	db	101
   294  001F49  65                 	db	101
   295  001F4A  64                 	db	100
   296  001F4B  65                 	db	101
   297  001F4C  64                 	db	100
   298  001F4D  20                 	db	32
   299  001F4E  74                 	db	116
   300  001F4F  6F                 	db	111
   301  001F50  20                 	db	32
   302  001F51  72                 	db	114
   303  001F52  65                 	db	101
   304  001F53  61                 	db	97
   305  001F54  63                 	db	99
   306  001F55  68                 	db	104
   307  001F56  20                 	db	32
   308  001F57  74                 	db	116
   309  001F58  68                 	db	104
   310  001F59  65                 	db	101
   311  001F5A  20                 	db	32
   312  001F5B  70                 	db	112
   313  001F5C  6F                 	db	111
   314  001F5D  69                 	db	105
   315  001F5E  6E                 	db	110
   316  001F5F  74                 	db	116
   317  001F60  0A                 	db	10
   318  001F61  00                 	db	0
   319                           
   320                           ;initializer for _errString_ZEND
   321  001F62  45                 	db	69
   322  001F63  72                 	db	114
   323  001F64  72                 	db	114
   324  001F65  6F                 	db	111
   325  001F66  72                 	db	114
   326  001F67  2C                 	db	44
   327  001F68  20                 	db	32
   328  001F69  6E                 	db	110
   329  001F6A  6F                 	db	111
   330  001F6B  20                 	db	32
   331  001F6C  6F                 	db	111
   332  001F6D  62                 	db	98
   333  001F6E  6A                 	db	106
   334  001F6F  65                 	db	101
   335  001F70  63                 	db	99
   336  001F71  74                 	db	116
   337  001F72  20                 	db	32
   338  001F73  72                 	db	114
   339  001F74  65                 	db	101
   340  001F75  6C                 	db	108
   341  001F76  65                 	db	101
   342  001F77  76                 	db	118
   343  001F78  61                 	db	97
   344  001F79  74                 	db	116
   345  001F7A  65                 	db	101
   346  001F7B  64                 	db	100
   347  001F7C  20                 	db	32
   348  001F7D  61                 	db	97
   349  001F7E  6C                 	db	108
   350  001F7F  6F                 	db	111
   351  001F80  6E                 	db	110
   352  001F81  67                 	db	103
   353  001F82  20                 	db	32
   354  001F83  5A                 	db	90
   355  001F84  20                 	db	32
   356  001F85  41                 	db	65
   357  001F86  78                 	db	120
   358  001F87  69                 	db	105
   359  001F88  73                 	db	115
   360  001F89  0A                 	db	10
   361  001F8A  00                 	db	0
   362                           
   363                           ;initializer for _errString_Reset
   364  001F8B  45                 	db	69
   365  001F8C  72                 	db	114
   366  001F8D  72                 	db	114
   367  001F8E  6F                 	db	111
   368  001F8F  72                 	db	114
   369  001F90  2C                 	db	44
   370  001F91  20                 	db	32
   371  001F92  74                 	db	116
   372  001F93  69                 	db	105
   373  001F94  6D                 	db	109
   374  001F95  65                 	db	101
   375  001F96  20                 	db	32
   376  001F97  65                 	db	101
   377  001F98  78                 	db	120
   378  001F99  63                 	db	99
   379  001F9A  65                 	db	101
   380  001F9B  65                 	db	101
   381  001F9C  64                 	db	100
   382  001F9D  65                 	db	101
   383  001F9E  64                 	db	100
   384  001F9F  20                 	db	32
   385  001FA0  74                 	db	116
   386  001FA1  6F                 	db	111
   387  001FA2  20                 	db	32
   388  001FA3  72                 	db	114
   389  001FA4  65                 	db	101
   390  001FA5  73                 	db	115
   391  001FA6  65                 	db	101
   392  001FA7  74                 	db	116
   393  001FA8  20                 	db	32
   394  001FA9  70                 	db	112
   395  001FAA  6F                 	db	111
   396  001FAB  73                 	db	115
   397  001FAC  69                 	db	105
   398  001FAD  74                 	db	116
   399  001FAE  69                 	db	105
   400  001FAF  6F                 	db	111
   401  001FB0  6E                 	db	110
   402  001FB1  0A                 	db	10
   403  001FB2  00                 	db	0
   404                           
   405                           ;initializer for _errString_Fatal
   406  001FB3  46                 	db	70
   407  001FB4  61                 	db	97
   408  001FB5  74                 	db	116
   409  001FB6  61                 	db	97
   410  001FB7  6C                 	db	108
   411  001FB8  20                 	db	32
   412  001FB9  45                 	db	69
   413  001FBA  72                 	db	114
   414  001FBB  72                 	db	114
   415  001FBC  6F                 	db	111
   416  001FBD  72                 	db	114
   417  001FBE  2C                 	db	44
   418  001FBF  20                 	db	32
   419  001FC0  70                 	db	112
   420  001FC1  6C                 	db	108
   421  001FC2  65                 	db	101
   422  001FC3  61                 	db	97
   423  001FC4  73                 	db	115
   424  001FC5  65                 	db	101
   425  001FC6  20                 	db	32
   426  001FC7  72                 	db	114
   427  001FC8  65                 	db	101
   428  001FC9  73                 	db	115
   429  001FCA  65                 	db	101
   430  001FCB  74                 	db	116
   431  001FCC  20                 	db	32
   432  001FCD  74                 	db	116
   433  001FCE  68                 	db	104
   434  001FCF  65                 	db	101
   435  001FD0  20                 	db	32
   436  001FD1  64                 	db	100
   437  001FD2  65                 	db	101
   438  001FD3  76                 	db	118
   439  001FD4  69                 	db	105
   440  001FD5  63                 	db	99
   441  001FD6  65                 	db	101
   442  001FD7  21                 	db	33
   443  001FD8  0A                 	db	10
   444  001FD9  00                 	db	0
   445                           
   446                           ;initializer for _errString_Bound
   447  001FDA  45                 	db	69
   448  001FDB  72                 	db	114
   449  001FDC  72                 	db	114
   450  001FDD  6F                 	db	111
   451  001FDE  72                 	db	114
   452  001FDF  2C                 	db	44
   453  001FE0  20                 	db	32
   454  001FE1  70                 	db	112
   455  001FE2  6F                 	db	111
   456  001FE3  69                 	db	105
   457  001FE4  6E                 	db	110
   458  001FE5  74                 	db	116
   459  001FE6  20                 	db	32
   460  001FE7  6F                 	db	111
   461  001FE8  75                 	db	117
   462  001FE9  74                 	db	116
   463  001FEA  73                 	db	115
   464  001FEB  69                 	db	105
   465  001FEC  64                 	db	100
   466  001FED  65                 	db	101
   467  001FEE  20                 	db	32
   468  001FEF  62                 	db	98
   469  001FF0  6F                 	db	111
   470  001FF1  75                 	db	117
   471  001FF2  6E                 	db	110
   472  001FF3  64                 	db	100
   473  001FF4  61                 	db	97
   474  001FF5  72                 	db	114
   475  001FF6  69                 	db	105
   476  001FF7  65                 	db	101
   477  001FF8  73                 	db	115
   478  001FF9  0A                 	db	10
   479  001FFA  00                 	db	0
   480                           
   481                           	psect	smallconst
   482  000600                     __psmallconst:
   483                           	callstack 0
   484  000600  00                 	db	0
   485  000601  FFAC               	dw	65452
   486  000603  3DB3               	dw	15795
   487  000605                     __end_ofrotateObj@stepAngle:
   488                           	callstack 0
   489  000605  0400               	dw	1024
   490  000607                     __end_of_therm_pressure:
   491                           	callstack 0
   492  000607  0200               	dw	512
   493  000609                     __end_of_touch_pressure:
   494                           	callstack 0
   495  000609                     _feeder3Pos:
   496                           	callstack 0
   497  000609  03                 	db	3
   498  00060A  0F                 	db	15
   499  00060B                     __end_of_feeder3Pos:
   500                           	callstack 0
   501  00060B                     _feeder2Pos:
   502                           	callstack 0
   503  00060B  03                 	db	3
   504  00060C  0A                 	db	10
   505  00060D                     __end_of_feeder2Pos:
   506                           	callstack 0
   507  00060D                     _feeder1Pos:
   508                           	callstack 0
   509  00060D  03                 	db	3
   510  00060E  05                 	db	5
   511  00060F                     __end_of_feeder1Pos:
   512                           	callstack 0
   513  00060F  14                 	db	20
   514  000610                     __end_of_maxFeedY:
   515                           	callstack 0
   516  000610  06                 	db	6
   517  000611                     __end_of_maxFeedX:
   518                           	callstack 0
   519  0000                     _TMR0	set	4054
   520  0000                     _T1CONbits	set	4045
   521  0000                     _TXREG	set	4013
   522  0000                     _SPBRG	set	4015
   523  0000                     _TXSTAbits	set	4012
   524  0000                     _TRISCbits	set	3988
   525  0000                     _RCREG1	set	4014
   526  0000                     _ADRESH	set	4036
   527  0000                     _ADRESL	set	4035
   528  0000                     _PIR1bits	set	3998
   529  0000                     _RCONbits	set	4048
   530  0000                     _INTCONbits	set	4082
   531  0000                     _IPR1bits	set	3999
   532  0000                     _PIE1bits	set	3997
   533  0000                     _ADCON0bits	set	4034
   534  0000                     _RCSTAbits	set	4011
   535  0000                     _RCSTA1bits	set	4011
   536  0000                     _LATD	set	3980
   537  0000                     _PORTDbits	set	3971
   538  0000                     _TMR2	set	4044
   539  0000                     _LATC	set	3979
   540  0000                     _LATB	set	3978
   541  0000                     _LATA	set	3977
   542  0000                     _PORTEbits	set	3972
   543  0000                     _T0CONbits	set	4053
   544  0000                     _T2CONbits	set	4042
   545  0000                     _LATDbits	set	3980
   546  0000                     _LATCbits	set	3979
   547  0000                     _LATBbits	set	3978
   548  0000                     _LATAbits	set	3977
   549  0000                     _TRISDbits	set	3989
   550  0000                     _TRISEbits	set	3990
   551  0000                     _TRISD	set	3989
   552  0000                     _TRISC	set	3988
   553  0000                     _TRISB	set	3987
   554  0000                     _TRISA	set	3986
   555  0000                     _ADCON1bits	set	4033
   556  000611  00                 	db	0	; dummy byte at the end
   557  0000                     
   558                           ; #config settings
   559                           
   560                           	psect	cinit
   561  0021B4                     __pcinit:
   562                           	callstack 0
   563  0021B4                     start_initialization:
   564                           	callstack 0
   565  0021B4                     __initialization:
   566                           	callstack 0
   567                           
   568                           ; Initialize objects allocated to BANK1 (247 bytes)
   569                           ; load TBLPTR registers with __pidataBANK1
   570  0021B4  0E04               	movlw	low __pidataBANK1
   571  0021B6  6EF6               	movwf	tblptrl,c
   572  0021B8  0E1F               	movlw	high __pidataBANK1
   573  0021BA  6EF7               	movwf	tblptrh,c
   574  0021BC  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   575  0021BE  6EF8               	movwf	tblptru,c
   576  0021C0  EE01  F000         	lfsr	0,__pdataBANK1
   577  0021C4  EE10 F0F7          	lfsr	1,247
   578  0021C8                     copy_data0:
   579  0021C8  0009               	tblrd		*+
   580  0021CA  CFF5 FFEE          	movff	tablat,postinc0
   581  0021CE  50E5               	movf	postdec1,w,c
   582  0021D0  50E1               	movf	fsr1l,w,c
   583  0021D2  E1FA               	bnz	copy_data0
   584                           
   585                           ; Initialize objects allocated to BANK0 (72 bytes)
   586                           ; load TBLPTR registers with __pidataBANK0
   587  0021D4  0E36               	movlw	low __pidataBANK0
   588  0021D6  6EF6               	movwf	tblptrl,c
   589  0021D8  0E23               	movlw	high __pidataBANK0
   590  0021DA  6EF7               	movwf	tblptrh,c
   591  0021DC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   592  0021DE  6EF8               	movwf	tblptru,c
   593  0021E0  EE00  F080         	lfsr	0,__pdataBANK0
   594  0021E4  EE10 F048          	lfsr	1,72
   595  0021E8                     copy_data1:
   596  0021E8  0009               	tblrd		*+
   597  0021EA  CFF5 FFEE          	movff	tablat,postinc0
   598  0021EE  50E5               	movf	postdec1,w,c
   599  0021F0  50E1               	movf	fsr1l,w,c
   600  0021F2  E1FA               	bnz	copy_data1
   601                           
   602                           ; Initialize objects allocated to COMRAM (15 bytes)
   603                           ; load TBLPTR registers with __pidataCOMRAM
   604  0021F4  0ECC               	movlw	low __pidataCOMRAM
   605  0021F6  6EF6               	movwf	tblptrl,c
   606  0021F8  0E24               	movlw	high __pidataCOMRAM
   607  0021FA  6EF7               	movwf	tblptrh,c
   608  0021FC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   609  0021FE  6EF8               	movwf	tblptru,c
   610  002200  EE00  F05E         	lfsr	0,__pdataCOMRAM
   611  002204  EE10 F00F          	lfsr	1,15
   612  002208                     copy_data2:
   613  002208  0009               	tblrd		*+
   614  00220A  CFF5 FFEE          	movff	tablat,postinc0
   615  00220E  50E5               	movf	postdec1,w,c
   616  002210  50E1               	movf	fsr1l,w,c
   617  002212  E1FA               	bnz	copy_data2
   618                           
   619                           ; Clear objects allocated to BANK0 (37 bytes)
   620  002214  EE00  F0C8         	lfsr	0,__pbssBANK0
   621  002218  0E25               	movlw	37
   622  00221A                     clear_0:
   623  00221A  6AEE               	clrf	postinc0,c
   624  00221C  06E8               	decf	wreg,f,c
   625  00221E  E1FD               	bnz	clear_0
   626                           
   627                           ; Clear objects allocated to COMRAM (27 bytes)
   628  002220  EE00  F043         	lfsr	0,__pbssCOMRAM
   629  002224  0E1B               	movlw	27
   630  002226                     clear_1:
   631  002226  6AEE               	clrf	postinc0,c
   632  002228  06E8               	decf	wreg,f,c
   633  00222A  E1FD               	bnz	clear_1
   634  00222C                     end_of_initialization:
   635                           	callstack 0
   636  00222C                     __end_of__initialization:
   637                           	callstack 0
   638  00222C  906D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   639  00222E  926D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   640  002230  0E00               	movlw	low (__Lmediumconst shr (0+16))
   641  002232  6EF8               	movwf	tblptru,c
   642  002234  0100               	movlb	0
   643  002236  EF62  F00A         	goto	_main	;jump to C main() function
   644                           
   645                           	psect	bssCOMRAM
   646  000043                     __pbssCOMRAM:
   647                           	callstack 0
   648  000043                     _posVector:
   649                           	callstack 0
   650  000043                     	ds	3
   651  000046                     _pwmPeriod:
   652                           	callstack 0
   653  000046                     	ds	2
   654  000048                     isr@single_cycle:
   655                           	callstack 0
   656  000048                     	ds	2
   657  00004A                     _ADC_res:
   658                           	callstack 0
   659  00004A                     	ds	2
   660  00004C                     _newFeeder:
   661                           	callstack 0
   662  00004C                     	ds	2
   663  00004E                     _rotAngle:
   664                           	callstack 0
   665  00004E                     	ds	2
   666  000050                     _tm0Error:
   667                           	callstack 0
   668  000050                     	ds	2
   669  000052                     _stepToggle:
   670                           	callstack 0
   671  000052                     	ds	1
   672  000053                     _pwmStep:
   673                           	callstack 0
   674  000053                     	ds	1
   675  000054                     	ds	1
   676  000055                     storeData@counter:
   677                           	callstack 0
   678  000055                     	ds	1
   679  000056                     __newSequence:
   680                           	callstack 0
   681  000056                     	ds	1
   682  000057                     __fatalError:
   683                           	callstack 0
   684  000057                     	ds	1
   685  000058                     _dataCounter:
   686                           	callstack 0
   687  000058                     	ds	1
   688  000059                     isr@completeStep:
   689                           	callstack 0
   690  000059                     	ds	1
   691  00005A                     isr@tm0Count:
   692                           	callstack 0
   693  00005A                     	ds	1
   694  00005B                     _therm_rel:
   695                           	callstack 0
   696  00005B                     	ds	1
   697  00005C                     _touch_rel:
   698                           	callstack 0
   699  00005C                     	ds	1
   700  00005D                     _tm0Limit:
   701                           	callstack 0
   702  00005D                     	ds	1
   703                           
   704                           	psect	dataCOMRAM
   705  00005E                     __pdataCOMRAM:
   706                           	callstack 0
   707  00005E                     _motCounter:
   708                           	callstack 0
   709  00005E                     	ds	12
   710  00006A                     	ds	2
   711  00006C                     storeData@mexLength:
   712                           	callstack 0
   713  00006C                     	ds	1
   714                           
   715                           	psect	bssBANK0
   716  0000C8                     __pbssBANK0:
   717                           	callstack 0
   718  0000C8                     storeData@receivedMex:
   719                           	callstack 0
   720  0000C8                     	ds	9
   721  0000D1                     _dataSequence:
   722                           	callstack 0
   723  0000D1                     	ds	20
   724  0000E5                     _newSequenceData:
   725                           	callstack 0
   726  0000E5                     	ds	8
   727                           
   728                           	psect	dataBANK0
   729  000080                     __pdataBANK0:
   730                           	callstack 0
   731  000080                     rotateObj@rotSequence:
   732                           	callstack 0
   733  000080                     	ds	4
   734  000084                     _stepMot3:
   735                           	callstack 0
   736  000084                     	ds	4
   737  000088                     _stepMot2:
   738                           	callstack 0
   739  000088                     	ds	4
   740  00008C                     _stepMot1:
   741                           	callstack 0
   742  00008C                     	ds	4
   743  000090                     	ds	2
   744  000092                     _errString_Feed:
   745                           	callstack 0
   746  000092                     	ds	30
   747  0000B0                     _errString_Command:
   748                           	callstack 0
   749  0000B0                     	ds	24
   750                           
   751                           	psect	dataBANK1
   752  000100                     __pdataBANK1:
   753                           	callstack 0
   754  000100                     _errString_PointZ:
   755                           	callstack 0
   756  000100                     	ds	53
   757  000135                     _errString_Point:
   758                           	callstack 0
   759  000135                     	ds	41
   760  00015E                     _errString_ZEND:
   761                           	callstack 0
   762  00015E                     	ds	41
   763  000187                     _errString_Reset:
   764                           	callstack 0
   765  000187                     	ds	40
   766  0001AF                     _errString_Fatal:
   767                           	callstack 0
   768  0001AF                     	ds	39
   769  0001D6                     _errString_Bound:
   770                           	callstack 0
   771  0001D6                     	ds	33
   772                           
   773                           	psect	cstackBANK0
   774  0000ED                     __pcstackBANK0:
   775                           	callstack 0
   776  0000ED                     ??_rotateObj:
   777                           
   778                           ; 1 bytes @ 0x0
   779  0000ED                     	ds	3
   780  0000F0                     rotateObj@rotAngle:
   781                           	callstack 0
   782                           
   783                           ; 1 bytes @ 0x3
   784  0000F0                     	ds	1
   785  0000F1                     rotateObj@totStep:
   786                           	callstack 0
   787                           
   788                           ; 2 bytes @ 0x4
   789  0000F1                     	ds	2
   790  0000F3                     rotateObj@i:
   791                           	callstack 0
   792                           
   793                           ; 2 bytes @ 0x6
   794  0000F3                     	ds	2
   795  0000F5                     ??_executeData:
   796                           
   797                           ; 1 bytes @ 0x8
   798  0000F5                     	ds	2
   799  0000F7                     executeData@errCode:
   800                           	callstack 0
   801                           
   802                           ; 1 bytes @ 0xA
   803  0000F7                     	ds	1
   804  0000F8                     executeData@data:
   805                           	callstack 0
   806                           
   807                           ; 2 bytes @ 0xB
   808  0000F8                     	ds	2
   809  0000FA                     ??_main:
   810                           
   811                           ; 1 bytes @ 0xD
   812  0000FA                     	ds	2
   813  0000FC                     main@errCode:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0xF
   817  0000FC                     	ds	1
   818  0000FD                     main@newData:
   819                           	callstack 0
   820                           
   821                           ; 2 bytes @ 0x10
   822  0000FD                     	ds	2
   823                           
   824                           	psect	cstackCOMRAM
   825  000001                     __pcstackCOMRAM:
   826                           	callstack 0
   827  000001                     ?_retPeriod:
   828                           	callstack 0
   829  000001                     i2uartTx@ptr:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x0
   833  000001                     	ds	2
   834  000003                     i2uartTx@length:
   835                           	callstack 0
   836                           
   837                           ; 1 bytes @ 0x2
   838  000003                     	ds	1
   839  000004                     i2uartTx@i:
   840                           	callstack 0
   841                           
   842                           ; 1 bytes @ 0x3
   843  000004                     	ds	1
   844  000005                     ??i2_printError:
   845                           
   846                           ; 1 bytes @ 0x4
   847  000005                     	ds	2
   848  000007                     i2printError@errCode:
   849                           	callstack 0
   850                           
   851                           ; 1 bytes @ 0x6
   852  000007                     	ds	1
   853  000008                     ??i2_storeData:
   854                           
   855                           ; 1 bytes @ 0x7
   856  000008                     	ds	2
   857  00000A                     i2storeData@data:
   858                           	callstack 0
   859                           
   860                           ; 1 bytes @ 0x9
   861  00000A                     	ds	1
   862  00000B                     ??_isr:
   863                           
   864                           ; 1 bytes @ 0xA
   865  00000B                     	ds	6
   866  000011                     isr@temp:
   867                           	callstack 0
   868                           
   869                           ; 1 bytes @ 0x10
   870  000011                     	ds	1
   871  000012                     ??_shiftData:
   872  000012                     ?_stepMade:
   873                           	callstack 0
   874  000012                     ?_stepCounter:
   875                           	callstack 0
   876  000012                     ?_returnTouch:
   877                           	callstack 0
   878  000012                     ?_returnTherm:
   879                           	callstack 0
   880  000012                     ?_getNewSequence:
   881                           	callstack 0
   882  000012                     ?_getData:
   883                           	callstack 0
   884  000012                     ?___xxtofl:
   885                           	callstack 0
   886  000012                     uartTx@ptr:
   887                           	callstack 0
   888  000012                     tim2Init@_pwmPeriod:
   889                           	callstack 0
   890  000012                     ___xxtofl@val:
   891                           	callstack 0
   892                           
   893                           ; 4 bytes @ 0x11
   894  000012                     	ds	2
   895  000014                     shiftData@i:
   896                           	callstack 0
   897  000014                     uartTx@length:
   898                           	callstack 0
   899  000014                     stepMade@temp:
   900                           	callstack 0
   901                           
   902                           ; 1 bytes @ 0x13
   903  000014                     	ds	1
   904  000015                     resetPosition@keepMovingX:
   905                           	callstack 0
   906  000015                     uartTx@i:
   907                           	callstack 0
   908  000015                     moveToPoint@x1:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x14
   912  000015                     	ds	1
   913  000016                     ??_printError:
   914  000016                     ??___xxtofl:
   915  000016                     resetPosition@keepMovingY:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x15
   919  000016                     	ds	1
   920  000017                     resetPosition@keepMovingZ:
   921                           	callstack 0
   922  000017                     moveToPoint@y1:
   923                           	callstack 0
   924                           
   925                           ; 2 bytes @ 0x16
   926  000017                     	ds	1
   927  000018                     printError@errCode:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x17
   931  000018                     	ds	1
   932  000019                     ??_storeData:
   933  000019                     moveToPoint@x2:
   934                           	callstack 0
   935                           
   936                           ; 2 bytes @ 0x18
   937  000019                     	ds	1
   938  00001A                     ___xxtofl@sign:
   939                           	callstack 0
   940                           
   941                           ; 1 bytes @ 0x19
   942  00001A                     	ds	1
   943  00001B                     storeData@data:
   944                           	callstack 0
   945  00001B                     ___xxtofl@exp:
   946                           	callstack 0
   947  00001B                     moveToPoint@y2:
   948                           	callstack 0
   949                           
   950                           ; 2 bytes @ 0x1A
   951  00001B                     	ds	1
   952  00001C                     ___xxtofl@arg:
   953                           	callstack 0
   954                           
   955                           ; 4 bytes @ 0x1B
   956  00001C                     	ds	1
   957  00001D                     ??_moveToPoint:
   958                           
   959                           ; 1 bytes @ 0x1C
   960  00001D                     	ds	2
   961  00001F                     moveToPoint@keepMovingY:
   962                           	callstack 0
   963                           
   964                           ; 1 bytes @ 0x1E
   965  00001F                     	ds	1
   966  000020                     ?___fldiv:
   967                           	callstack 0
   968  000020                     moveToPoint@MOT1Direction:
   969                           	callstack 0
   970  000020                     ___fldiv@b:
   971                           	callstack 0
   972                           
   973                           ; 4 bytes @ 0x1F
   974  000020                     	ds	1
   975  000021                     moveToPoint@MOT2Direction:
   976                           	callstack 0
   977                           
   978                           ; 1 bytes @ 0x20
   979  000021                     	ds	1
   980  000022                     moveToPoint@keepMovingX:
   981                           	callstack 0
   982                           
   983                           ; 1 bytes @ 0x21
   984  000022                     	ds	2
   985  000024                     ___fldiv@a:
   986                           	callstack 0
   987                           
   988                           ; 4 bytes @ 0x23
   989  000024                     	ds	4
   990  000028                     ??___fldiv:
   991                           
   992                           ; 1 bytes @ 0x27
   993  000028                     	ds	4
   994  00002C                     ___fldiv@rem:
   995                           	callstack 0
   996                           
   997                           ; 4 bytes @ 0x2B
   998  00002C                     	ds	4
   999  000030                     ___fldiv@sign:
  1000                           	callstack 0
  1001                           
  1002                           ; 1 bytes @ 0x2F
  1003  000030                     	ds	1
  1004  000031                     ___fldiv@new_exp:
  1005                           	callstack 0
  1006                           
  1007                           ; 2 bytes @ 0x30
  1008  000031                     	ds	2
  1009  000033                     ___fldiv@grs:
  1010                           	callstack 0
  1011                           
  1012                           ; 4 bytes @ 0x32
  1013  000033                     	ds	4
  1014  000037                     ___fldiv@bexp:
  1015                           	callstack 0
  1016                           
  1017                           ; 1 bytes @ 0x36
  1018  000037                     	ds	1
  1019  000038                     ___fldiv@aexp:
  1020                           	callstack 0
  1021                           
  1022                           ; 1 bytes @ 0x37
  1023  000038                     	ds	1
  1024  000039                     ?___fltol:
  1025                           	callstack 0
  1026  000039                     ___fltol@f1:
  1027                           	callstack 0
  1028                           
  1029                           ; 4 bytes @ 0x38
  1030  000039                     	ds	4
  1031  00003D                     ??___fltol:
  1032                           
  1033                           ; 1 bytes @ 0x3C
  1034  00003D                     	ds	4
  1035  000041                     ___fltol@sign1:
  1036                           	callstack 0
  1037                           
  1038                           ; 1 bytes @ 0x40
  1039  000041                     	ds	1
  1040  000042                     ___fltol@exp1:
  1041                           	callstack 0
  1042                           
  1043                           ; 1 bytes @ 0x41
  1044  000042                     	ds	1
  1045                           
  1046 ;;
  1047 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1048 ;;
  1049 ;; *************** function _main *****************
  1050 ;; Defined at:
  1051 ;;		line 19 in file "main.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;		None
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  newData         2   16[BANK0 ] PTR struct .
  1056 ;;		 -> newSequenceData(8), 
  1057 ;;  errCode         1   15[BANK0 ] unsigned char 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      void 
  1060 ;; Registers used:
  1061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1067 ;;      Params:         0       0       0       0       0       0       0
  1068 ;;      Locals:         0       3       0       0       0       0       0
  1069 ;;      Temps:          0       2       0       0       0       0       0
  1070 ;;      Totals:         0       5       0       0       0       0       0
  1071 ;;Total ram usage:        5 bytes
  1072 ;; Hardware stack levels required when called:    7
  1073 ;; This function calls:
  1074 ;;		_clearTM0
  1075 ;;		_executeData
  1076 ;;		_getNewSequence
  1077 ;;		_initADC
  1078 ;;		_initPinMotors
  1079 ;;		_interruptInit
  1080 ;;		_newSequence
  1081 ;;		_printError
  1082 ;;		_readSeq
  1083 ;;		_reduceSeq
  1084 ;;		_resetNewSequence
  1085 ;;		_resetPosition
  1086 ;;		_shiftData
  1087 ;;		_storeData
  1088 ;;		_tim0Init
  1089 ;;		_tim1Init
  1090 ;;		_tim2Init
  1091 ;;		_usartInit
  1092 ;; This function is called by:
  1093 ;;		Startup code after reset
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text0
  1098  0014C4                     __ptext0:
  1099                           	callstack 0
  1100  0014C4                     _main:
  1101                           	callstack 24
  1102  0014C4  FFFF               	dw	65535	; assembler added errata NOP
  1103                           
  1104                           ;main.c: 23:     interruptInit();
  1105  0014C6  ECBF  F011         	call	_interruptInit	;wreg free
  1106  0014CA                     
  1107                           ;main.c: 24:     initPinMotors();
  1108  0014CA  EC09  F012         	call	_initPinMotors	;wreg free
  1109  0014CE                     
  1110                           ;main.c: 25:     initADC();
  1111  0014CE  EC1C  F012         	call	_initADC	;wreg free
  1112  0014D2                     
  1113                           ;main.c: 26:     usartInit();
  1114  0014D2  EC2F  F012         	call	_usartInit	;wreg free
  1115  0014D6                     
  1116                           ;main.c: 27:     tim0Init();
  1117  0014D6  EC54  F012         	call	_tim0Init	;wreg free
  1118  0014DA                     
  1119                           ;main.c: 28:     tim1Init();
  1120  0014DA  EC6E  F012         	call	_tim1Init	;wreg free
  1121  0014DE                     
  1122                           ;main.c: 29:     tim2Init(10);
  1123  0014DE  0E00               	movlw	0
  1124  0014E0  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1125  0014E2  0E0A               	movlw	10
  1126  0014E4  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1127  0014E6  EC3E  F012         	call	_tim2Init	;wreg free
  1128  0014EA                     
  1129                           ;main.c: 32:     errCode = resetPosition();
  1130  0014EA  EC57  F008         	call	_resetPosition	;wreg free
  1131  0014EE  0100               	movlb	0	; () banked
  1132  0014F0  6FFC               	movwf	main@errCode& (0+255),b
  1133  0014F2                     
  1134                           ; BSR set to: 0
  1135                           ;main.c: 33:     if(errCode != 0){
  1136  0014F2  51FC               	movf	main@errCode& (0+255),w,b
  1137  0014F4  B4D8               	btfsc	status,2,c
  1138  0014F6  EF7F  F00A         	goto	u3851
  1139  0014FA  EF82  F00A         	goto	u3850
  1140  0014FE                     u3851:
  1141  0014FE  FFFF               	dw	65535	; assembler added errata NOP
  1142  001500  EF89  F00A         	goto	l348
  1143  001504                     u3850:
  1144  001504  FFFF               	dw	65535	; assembler added errata NOP
  1145  001506                     
  1146                           ; BSR set to: 0
  1147                           ;main.c: 34:         printError(errCode);
  1148  001506  51FC               	movf	main@errCode& (0+255),w,b
  1149  001508  EC66  F00E         	call	_printError
  1150  00150C                     l349:
  1151  00150C  FFFF               	dw	65535	; assembler added errata NOP
  1152  00150E  EF86  F00A         	goto	l349
  1153  001512                     l348:
  1154  001512  FFFF               	dw	65535	; assembler added errata NOP
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;main.c: 39:     RCSTA1bits.CREN = 1;
  1158  001514  88AB               	bsf	171,4,c	;volatile
  1159  001516                     l4473:
  1160  001516  FFFF               	dw	65535	; assembler added errata NOP
  1161                           
  1162                           ;main.c: 42:         if(newSequence()){
  1163  001518  ECDA  F012         	call	_newSequence	;wreg free
  1164  00151C  0900               	iorlw	0
  1165  00151E  B4D8               	btfsc	status,2,c
  1166  001520  EF94  F00A         	goto	u3861
  1167  001524  EF97  F00A         	goto	u3860
  1168  001528                     u3861:
  1169  001528  FFFF               	dw	65535	; assembler added errata NOP
  1170  00152A  EF19  F00B         	goto	l4501
  1171  00152E                     u3860:
  1172  00152E  FFFF               	dw	65535	; assembler added errata NOP
  1173  001530                     
  1174                           ;main.c: 43:             t_newSequence* newData = getNewSequence();
  1175  001530  EC75  F012         	call	_getNewSequence	;wreg free
  1176  001534  C012  F0FD         	movff	?_getNewSequence,main@newData
  1177  001538  C013  F0FE         	movff	?_getNewSequence+1,main@newData+1
  1178  00153C                     
  1179                           ;main.c: 45:             newFeeder[0] = newData ->init_posX;
  1180  00153C  0100               	movlb	0	; () banked
  1181  00153E  EE20 F002          	lfsr	2,2
  1182  001542  51FD               	movf	main@newData& (0+255),w,b
  1183  001544  26D9               	addwf	fsr2l,f,c
  1184  001546  51FE               	movf	(main@newData+1)& (0+255),w,b
  1185  001548  22DA               	addwfc	fsr2h,f,c
  1186  00154A  50DF               	movf	indf2,w,c
  1187  00154C  6E4C               	movwf	_newFeeder^0,c
  1188  00154E                     
  1189                           ; BSR set to: 0
  1190                           ;main.c: 46:             newFeeder[1] = newData ->init_posY;
  1191  00154E  EE20 F003          	lfsr	2,3
  1192  001552  51FD               	movf	main@newData& (0+255),w,b
  1193  001554  26D9               	addwf	fsr2l,f,c
  1194  001556  51FE               	movf	(main@newData+1)& (0+255),w,b
  1195  001558  22DA               	addwfc	fsr2h,f,c
  1196  00155A  50DF               	movf	indf2,w,c
  1197  00155C  6E4D               	movwf	(_newFeeder+1)^0,c
  1198  00155E                     
  1199                           ; BSR set to: 0
  1200                           ;main.c: 50:             RCSTAbits.CREN = 0;
  1201  00155E  98AB               	bcf	171,4,c	;volatile
  1202  001560                     
  1203                           ; BSR set to: 0
  1204                           ;main.c: 55:             if(newData ->end_posX > maxFeedX || newData ->end_posY > maxFee
      +                          dY){
  1205  001560  EE20 F005          	lfsr	2,5
  1206  001564  51FD               	movf	main@newData& (0+255),w,b
  1207  001566  26D9               	addwf	fsr2l,f,c
  1208  001568  51FE               	movf	(main@newData+1)& (0+255),w,b
  1209  00156A  22DA               	addwfc	fsr2h,f,c
  1210  00156C  0E07               	movlw	7
  1211  00156E  60DF               	cpfslt	indf2,c
  1212  001570  EFBC  F00A         	goto	u3871
  1213  001574  EFBF  F00A         	goto	u3870
  1214  001578                     u3871:
  1215  001578  FFFF               	dw	65535	; assembler added errata NOP
  1216  00157A  EFCF  F00A         	goto	l4487
  1217  00157E                     u3870:
  1218  00157E  FFFF               	dw	65535	; assembler added errata NOP
  1219  001580                     
  1220                           ; BSR set to: 0
  1221  001580  EE20 F006          	lfsr	2,6
  1222  001584  51FD               	movf	main@newData& (0+255),w,b
  1223  001586  26D9               	addwf	fsr2l,f,c
  1224  001588  51FE               	movf	(main@newData+1)& (0+255),w,b
  1225  00158A  22DA               	addwfc	fsr2h,f,c
  1226  00158C  0E14               	movlw	20
  1227  00158E  64DF               	cpfsgt	indf2,c
  1228  001590  EFCC  F00A         	goto	u3881
  1229  001594  EFCF  F00A         	goto	u3880
  1230  001598                     u3881:
  1231  001598  FFFF               	dw	65535	; assembler added errata NOP
  1232  00159A  EFD4  F00A         	goto	l4489
  1233  00159E                     u3880:
  1234  00159E                     l4487:
  1235  00159E  FFFF               	dw	65535	; assembler added errata NOP
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;main.c: 56:                 errCode = 5;
  1239  0015A0  0E05               	movlw	5
  1240  0015A2  6FFC               	movwf	main@errCode& (0+255),b
  1241                           
  1242                           ;main.c: 57:             }else{
  1243  0015A4  EFE8  F00A         	goto	l4491
  1244  0015A8                     l4489:
  1245  0015A8  FFFF               	dw	65535	; assembler added errata NOP
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;main.c: 58:                 storeData(newData ->end_posX);
  1249  0015AA  EE20 F005          	lfsr	2,5
  1250  0015AE  51FD               	movf	main@newData& (0+255),w,b
  1251  0015B0  26D9               	addwf	fsr2l,f,c
  1252  0015B2  51FE               	movf	(main@newData+1)& (0+255),w,b
  1253  0015B4  22DA               	addwfc	fsr2h,f,c
  1254  0015B6  50DF               	movf	indf2,w,c
  1255  0015B8  EC37  F00B         	call	_storeData
  1256                           
  1257                           ;main.c: 59:                 storeData(newData ->end_posY);
  1258  0015BC  0100               	movlb	0	; () banked
  1259  0015BE  EE20 F006          	lfsr	2,6
  1260  0015C2  51FD               	movf	main@newData& (0+255),w,b
  1261  0015C4  26D9               	addwf	fsr2l,f,c
  1262  0015C6  51FE               	movf	(main@newData+1)& (0+255),w,b
  1263  0015C8  22DA               	addwfc	fsr2h,f,c
  1264  0015CA  50DF               	movf	indf2,w,c
  1265  0015CC  EC37  F00B         	call	_storeData
  1266  0015D0                     l4491:
  1267  0015D0  FFFF               	dw	65535	; assembler added errata NOP
  1268                           
  1269                           ;main.c: 63:             if(errCode == 0){
  1270  0015D2  0100               	movlb	0	; () banked
  1271  0015D4  51FC               	movf	main@errCode& (0+255),w,b
  1272  0015D6  A4D8               	btfss	status,2,c
  1273  0015D8  EFF0  F00A         	goto	u3891
  1274  0015DC  EFF3  F00A         	goto	u3890
  1275  0015E0                     u3891:
  1276  0015E0  FFFF               	dw	65535	; assembler added errata NOP
  1277  0015E2  EF11  F00B         	goto	l4495
  1278  0015E6                     u3890:
  1279  0015E6  FFFF               	dw	65535	; assembler added errata NOP
  1280  0015E8                     
  1281                           ; BSR set to: 0
  1282                           ;main.c: 65:                 storeData(0);
  1283  0015E8  0E00               	movlw	0
  1284  0015EA  EC37  F00B         	call	_storeData
  1285                           
  1286                           ;main.c: 66:                 storeData(0xFF);
  1287  0015EE  0EFF               	movlw	255
  1288  0015F0  EC37  F00B         	call	_storeData
  1289                           
  1290                           ;main.c: 67:                 storeData(newData ->end_rot - newData ->init_rot);
  1291  0015F4  0100               	movlb	0	; () banked
  1292  0015F6  EE20 F004          	lfsr	2,4
  1293  0015FA  51FD               	movf	main@newData& (0+255),w,b
  1294  0015FC  26D9               	addwf	fsr2l,f,c
  1295  0015FE  51FE               	movf	(main@newData+1)& (0+255),w,b
  1296  001600  22DA               	addwfc	fsr2h,f,c
  1297  001602  50DF               	movf	indf2,w,c
  1298  001604  6FFA               	movwf	??_main& (0+255),b
  1299  001606  EE20 F007          	lfsr	2,7
  1300  00160A  51FD               	movf	main@newData& (0+255),w,b
  1301  00160C  26D9               	addwf	fsr2l,f,c
  1302  00160E  51FE               	movf	(main@newData+1)& (0+255),w,b
  1303  001610  22DA               	addwfc	fsr2h,f,c
  1304  001612  50DF               	movf	indf2,w,c
  1305  001614  6FFB               	movwf	(??_main+1)& (0+255),b
  1306  001616  51FA               	movf	??_main& (0+255),w,b
  1307  001618  5DFB               	subwf	(??_main+1)& (0+255),w,b
  1308  00161A  EC37  F00B         	call	_storeData
  1309                           
  1310                           ;main.c: 68:             }else{
  1311  00161E  EF15  F00B         	goto	l4497
  1312  001622                     l4495:
  1313  001622  FFFF               	dw	65535	; assembler added errata NOP
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;main.c: 69:                 printError(errCode);
  1317  001624  51FC               	movf	main@errCode& (0+255),w,b
  1318  001626  EC66  F00E         	call	_printError
  1319  00162A                     l4497:
  1320  00162A  FFFF               	dw	65535	; assembler added errata NOP
  1321                           
  1322                           ;main.c: 73:             RCSTAbits.CREN = 1;
  1323  00162C  88AB               	bsf	171,4,c	;volatile
  1324  00162E                     
  1325                           ;main.c: 76:             resetNewSequence();
  1326  00162E  ECAA  F012         	call	_resetNewSequence	;wreg free
  1327  001632                     l4501:
  1328  001632  FFFF               	dw	65535	; assembler added errata NOP
  1329                           
  1330                           ;main.c: 78:         if(readSeq()){
  1331  001634  ECD6  F012         	call	_readSeq	;wreg free
  1332  001638  0900               	iorlw	0
  1333  00163A  B4D8               	btfsc	status,2,c
  1334  00163C  EF22  F00B         	goto	u3901
  1335  001640  EF25  F00B         	goto	u3900
  1336  001644                     u3901:
  1337  001644  FFFF               	dw	65535	; assembler added errata NOP
  1338  001646  EF8B  F00A         	goto	l4473
  1339  00164A                     u3900:
  1340  00164A  FFFF               	dw	65535	; assembler added errata NOP
  1341  00164C                     
  1342                           ;main.c: 82:             errCode = executeData();
  1343  00164C  EC13  F007         	call	_executeData	;wreg free
  1344  001650  0100               	movlb	0	; () banked
  1345  001652  6FFC               	movwf	main@errCode& (0+255),b
  1346  001654                     
  1347                           ; BSR set to: 0
  1348                           ;main.c: 84:             printError(errCode);
  1349  001654  51FC               	movf	main@errCode& (0+255),w,b
  1350  001656  EC66  F00E         	call	_printError
  1351  00165A                     
  1352                           ;main.c: 87:             clearTM0();
  1353  00165A  EC83  F012         	call	_clearTM0	;wreg free
  1354  00165E                     
  1355                           ;main.c: 91:             reduceSeq();
  1356  00165E  ECD2  F012         	call	_reduceSeq	;wreg free
  1357  001662                     
  1358                           ;main.c: 92:             shiftData();
  1359  001662  EC1D  F011         	call	_shiftData	;wreg free
  1360  001666  EF8B  F00A         	goto	l4473
  1361  00166A  EFCE  F000         	goto	start
  1362  00166E                     __end_of_main:
  1363                           	callstack 0
  1364                           
  1365 ;; *************** function _usartInit *****************
  1366 ;; Defined at:
  1367 ;;		line 92 in file "usart.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;		None
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;		None
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1381 ;;      Params:         0       0       0       0       0       0       0
  1382 ;;      Locals:         0       0       0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0
  1384 ;;      Totals:         0       0       0       0       0       0       0
  1385 ;;Total ram usage:        0 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    4
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text1
  1396  00245E                     __ptext1:
  1397                           	callstack 0
  1398  00245E                     _usartInit:
  1399                           	callstack 0
  1400  00245E  FFFF               	dw	65535	; assembler added errata NOP
  1401  002460                     
  1402                           ;usart.c: 94:     TRISCbits.TRISC6 = 0;
  1403  002460  9C94               	bcf	148,6,c	;volatile
  1404                           
  1405                           ;usart.c: 95:     TRISCbits.TRISC7 = 1;
  1406  002462  8E94               	bsf	148,7,c	;volatile
  1407                           
  1408                           ;usart.c: 97:     TXSTAbits.TX9 = 0;
  1409  002464  9CAC               	bcf	172,6,c	;volatile
  1410                           
  1411                           ;usart.c: 98:     TXSTAbits.TXEN = 1;
  1412  002466  8AAC               	bsf	172,5,c	;volatile
  1413                           
  1414                           ;usart.c: 99:     TXSTAbits.SYNC = 0;
  1415  002468  98AC               	bcf	172,4,c	;volatile
  1416                           
  1417                           ;usart.c: 100:     TXSTAbits.BRGH = 0;
  1418  00246A  94AC               	bcf	172,2,c	;volatile
  1419                           
  1420                           ;usart.c: 102:     RCSTAbits.SPEN = 1;
  1421  00246C  8EAB               	bsf	171,7,c	;volatile
  1422                           
  1423                           ;usart.c: 103:     RCSTAbits.RX9 = 0;
  1424  00246E  9CAB               	bcf	171,6,c	;volatile
  1425                           
  1426                           ;usart.c: 104:     RCSTAbits.CREN = 0;
  1427  002470  98AB               	bcf	171,4,c	;volatile
  1428                           
  1429                           ;usart.c: 105:     RCSTAbits.ADDEN = 0;
  1430  002472  96AB               	bcf	171,3,c	;volatile
  1431  002474                     
  1432                           ;usart.c: 108:     SPBRG = 25;
  1433  002474  0E19               	movlw	25
  1434  002476  6EAF               	movwf	175,c	;volatile
  1435  002478  0012               	return		;funcret
  1436  00247A  FFFF               	dw	65535	; errata NOP
  1437  00247C                     __end_of_usartInit:
  1438                           	callstack 0
  1439                           
  1440 ;; *************** function _tim2Init *****************
  1441 ;; Defined at:
  1442 ;;		line 46 in file "timer.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1456 ;;      Params:         2       0       0       0       0       0       0
  1457 ;;      Locals:         0       0       0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0
  1459 ;;      Totals:         2       0       0       0       0       0       0
  1460 ;;Total ram usage:        2 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    4
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text2
  1471  00247C                     __ptext2:
  1472                           	callstack 0
  1473  00247C                     _tim2Init:
  1474                           	callstack 0
  1475  00247C  FFFF               	dw	65535	; assembler added errata NOP
  1476  00247E                     
  1477                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1478  00247E  94CA               	bcf	202,2,c	;volatile
  1479  002480                     
  1480                           ;timer.c: 48:     T2CONbits.T2CKPS = 0x01;
  1481  002480  50CA               	movf	202,w,c	;volatile
  1482  002482  0BFC               	andlw	-4
  1483  002484  0901               	iorlw	1
  1484  002486  6ECA               	movwf	202,c	;volatile
  1485  002488                     
  1486                           ;timer.c: 51:     pwmPeriod = _pwmPeriod;
  1487  002488  C012  F046         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1488  00248C  C013  F047         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1489  002490  0012               	return		;funcret
  1490  002492  FFFF               	dw	65535	; errata NOP
  1491  002494                     __end_of_tim2Init:
  1492                           	callstack 0
  1493                           
  1494 ;; *************** function _tim1Init *****************
  1495 ;; Defined at:
  1496 ;;		line 33 in file "timer.c"
  1497 ;; Parameters:    Size  Location     Type
  1498 ;;		None
  1499 ;; Auto vars:     Size  Location     Type
  1500 ;;		None
  1501 ;; Return value:  Size  Location     Type
  1502 ;;                  1    wreg      void 
  1503 ;; Registers used:
  1504 ;;		wreg, status,2
  1505 ;; Tracked objects:
  1506 ;;		On entry : 0/0
  1507 ;;		On exit  : 0/0
  1508 ;;		Unchanged: 0/0
  1509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1510 ;;      Params:         0       0       0       0       0       0       0
  1511 ;;      Locals:         0       0       0       0       0       0       0
  1512 ;;      Temps:          0       0       0       0       0       0       0
  1513 ;;      Totals:         0       0       0       0       0       0       0
  1514 ;;Total ram usage:        0 bytes
  1515 ;; Hardware stack levels used:    1
  1516 ;; Hardware stack levels required when called:    4
  1517 ;; This function calls:
  1518 ;;		Nothing
  1519 ;; This function is called by:
  1520 ;;		_main
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text3
  1525  0024DC                     __ptext3:
  1526                           	callstack 0
  1527  0024DC                     _tim1Init:
  1528                           	callstack 0
  1529  0024DC  FFFF               	dw	65535	; assembler added errata NOP
  1530  0024DE                     
  1531                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1532  0024DE  0E30               	movlw	48
  1533  0024E0  12CD               	iorwf	205,f,c	;volatile
  1534  0024E2                     
  1535                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1536  0024E2  92CD               	bcf	205,1,c	;volatile
  1537  0024E4                     
  1538                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1539  0024E4  80CD               	bsf	205,0,c	;volatile
  1540  0024E6  0012               	return		;funcret
  1541  0024E8  FFFF               	dw	65535	; errata NOP
  1542  0024EA                     __end_of_tim1Init:
  1543                           	callstack 0
  1544                           
  1545 ;; *************** function _tim0Init *****************
  1546 ;; Defined at:
  1547 ;;		line 21 in file "timer.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;		None
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;		None
  1552 ;; Return value:  Size  Location     Type
  1553 ;;                  1    wreg      void 
  1554 ;; Registers used:
  1555 ;;		wreg, status,2
  1556 ;; Tracked objects:
  1557 ;;		On entry : 0/0
  1558 ;;		On exit  : 0/0
  1559 ;;		Unchanged: 0/0
  1560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1561 ;;      Params:         0       0       0       0       0       0       0
  1562 ;;      Locals:         0       0       0       0       0       0       0
  1563 ;;      Temps:          0       0       0       0       0       0       0
  1564 ;;      Totals:         0       0       0       0       0       0       0
  1565 ;;Total ram usage:        0 bytes
  1566 ;; Hardware stack levels used:    1
  1567 ;; Hardware stack levels required when called:    4
  1568 ;; This function calls:
  1569 ;;		Nothing
  1570 ;; This function is called by:
  1571 ;;		_main
  1572 ;; This function uses a non-reentrant model
  1573 ;;
  1574                           
  1575                           	psect	text4
  1576  0024A8                     __ptext4:
  1577                           	callstack 0
  1578  0024A8                     _tim0Init:
  1579                           	callstack 0
  1580  0024A8  FFFF               	dw	65535	; assembler added errata NOP
  1581  0024AA                     
  1582                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1583  0024AA  9ED5               	bcf	213,7,c	;volatile
  1584                           
  1585                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1586  0024AC  9CD5               	bcf	213,6,c	;volatile
  1587                           
  1588                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1589  0024AE  9AD5               	bcf	213,5,c	;volatile
  1590                           
  1591                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1592  0024B0  86D5               	bsf	213,3,c	;volatile
  1593  0024B2                     
  1594                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1595  0024B2  0E07               	movlw	7
  1596  0024B4  12D5               	iorwf	213,f,c	;volatile
  1597  0024B6  0012               	return		;funcret
  1598  0024B8  FFFF               	dw	65535	; errata NOP
  1599  0024BA                     __end_of_tim0Init:
  1600                           	callstack 0
  1601                           
  1602 ;; *************** function _storeData *****************
  1603 ;; Defined at:
  1604 ;;		line 164 in file "usart.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;  data            1    wreg     unsigned char 
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;  data            1   26[COMRAM] unsigned char 
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  1    wreg      void 
  1611 ;; Registers used:
  1612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1618 ;;      Params:         0       0       0       0       0       0       0
  1619 ;;      Locals:         1       0       0       0       0       0       0
  1620 ;;      Temps:          2       0       0       0       0       0       0
  1621 ;;      Totals:         3       0       0       0       0       0       0
  1622 ;;Total ram usage:        3 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; Hardware stack levels required when called:    6
  1625 ;; This function calls:
  1626 ;;		_printError
  1627 ;; This function is called by:
  1628 ;;		_main
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           	psect	text5
  1633  00166E                     __ptext5:
  1634                           	callstack 0
  1635  00166E                     _storeData:
  1636                           	callstack 0
  1637  00166E  FFFF               	dw	65535	; assembler added errata NOP
  1638                           
  1639                           ;incstack = 0
  1640                           ;storeData@data stored from wreg
  1641  001670  6E1B               	movwf	storeData@data^0,c
  1642  001672                     
  1643                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  1644  001672  0EC8               	movlw	low storeData@receivedMex
  1645  001674  2455               	addwf	storeData@counter^0,w,c
  1646  001676  6ED9               	movwf	fsr2l,c
  1647  001678  6ADA               	clrf	fsr2h,c
  1648  00167A  0E00               	movlw	high storeData@receivedMex
  1649  00167C  22DA               	addwfc	fsr2h,f,c
  1650  00167E  C01B  FFDF         	movff	storeData@data,indf2
  1651  001682                     
  1652                           ;usart.c: 175:     counter++;
  1653  001682  2A55               	incf	storeData@counter^0,f,c
  1654                           
  1655                           ;usart.c: 178:     switch(receivedMex[0]){
  1656  001684  EF53  F00B         	goto	l4331
  1657  001688                     l4323:
  1658  001688  FFFF               	dw	65535	; assembler added errata NOP
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;usart.c: 180:             mexLength = 5;
  1662  00168A  0E05               	movlw	5
  1663  00168C  6E6C               	movwf	storeData@mexLength^0,c
  1664                           
  1665                           ;usart.c: 181:             break;
  1666  00168E  EF6F  F00B         	goto	l4333
  1667  001692                     l4325:
  1668  001692  FFFF               	dw	65535	; assembler added errata NOP
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;usart.c: 183:             mexLength = 9;
  1672  001694  0E09               	movlw	9
  1673  001696  6E6C               	movwf	storeData@mexLength^0,c
  1674                           
  1675                           ;usart.c: 184:             break;
  1676  001698  EF6F  F00B         	goto	l4333
  1677  00169C                     l4327:
  1678  00169C  FFFF               	dw	65535	; assembler added errata NOP
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;usart.c: 186:             mexLength = 1;
  1682  00169E  0E01               	movlw	1
  1683  0016A0  6E6C               	movwf	storeData@mexLength^0,c
  1684                           
  1685                           ;usart.c: 187:             break;
  1686  0016A2  EF6F  F00B         	goto	l4333
  1687  0016A6                     l4331:
  1688  0016A6  FFFF               	dw	65535	; assembler added errata NOP
  1689  0016A8  0100               	movlb	0	; () banked
  1690  0016AA  51C8               	movf	storeData@receivedMex& (0+255),w,b
  1691  0016AC  6E19               	movwf	??_storeData^0,c
  1692  0016AE  6A1A               	clrf	(??_storeData+1)^0,c
  1693                           
  1694                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1695                           ; Switch size 1, requested type "simple"
  1696                           ; Number of cases is 1, Range of values is 0 to 0
  1697                           ; switch strategies available:
  1698                           ; Name         Instructions Cycles
  1699                           ; simple_byte            4     3 (average)
  1700                           ;	Chosen strategy is simple_byte
  1701  0016B0  501A               	movf	(??_storeData+1)^0,w,c
  1702  0016B2  0A00               	xorlw	0	; case 0
  1703  0016B4  B4D8               	btfsc	status,2,c
  1704  0016B6  EF5F  F00B         	goto	l4693
  1705  0016BA  EF6F  F00B         	goto	l4333
  1706  0016BE                     l4693:
  1707  0016BE  FFFF               	dw	65535	; assembler added errata NOP
  1708                           
  1709                           ; BSR set to: 0
  1710                           ; Switch size 1, requested type "simple"
  1711                           ; Number of cases is 3, Range of values is 0 to 2
  1712                           ; switch strategies available:
  1713                           ; Name         Instructions Cycles
  1714                           ; simple_byte           10     6 (average)
  1715                           ;	Chosen strategy is simple_byte
  1716  0016C0  5019               	movf	??_storeData^0,w,c
  1717  0016C2  0A00               	xorlw	0	; case 0
  1718  0016C4  B4D8               	btfsc	status,2,c
  1719  0016C6  EF44  F00B         	goto	l4323
  1720  0016CA  0A01               	xorlw	1	; case 1
  1721  0016CC  B4D8               	btfsc	status,2,c
  1722  0016CE  EF49  F00B         	goto	l4325
  1723  0016D2  0A03               	xorlw	3	; case 2
  1724  0016D4  B4D8               	btfsc	status,2,c
  1725  0016D6  EF4E  F00B         	goto	l4327
  1726  0016DA  EF6F  F00B         	goto	l4333
  1727  0016DE                     l4333:
  1728  0016DE  FFFF               	dw	65535	; assembler added errata NOP
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;usart.c: 194:     if(counter >= mexLength){
  1732  0016E0  506C               	movf	storeData@mexLength^0,w,c
  1733  0016E2  5C55               	subwf	storeData@counter^0,w,c
  1734  0016E4  A0D8               	btfss	status,0,c
  1735  0016E6  EF77  F00B         	goto	u3811
  1736  0016EA  EF7A  F00B         	goto	u3810
  1737  0016EE                     u3811:
  1738  0016EE  FFFF               	dw	65535	; assembler added errata NOP
  1739  0016F0  EFE6  F00B         	goto	l598
  1740  0016F4                     u3810:
  1741  0016F4  FFFF               	dw	65535	; assembler added errata NOP
  1742  0016F6                     
  1743                           ; BSR set to: 0
  1744                           ;usart.c: 195:         counter = 0;
  1745  0016F6  0E00               	movlw	0
  1746  0016F8  6E55               	movwf	storeData@counter^0,c
  1747                           
  1748                           ;usart.c: 198:         switch(receivedMex[0]){
  1749  0016FA  EFCB  F00B         	goto	l4349
  1750  0016FE                     l4337:
  1751  0016FE  FFFF               	dw	65535	; assembler added errata NOP
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1755  001700  5058               	movf	_dataCounter^0,w,c
  1756  001702  0D04               	mullw	4
  1757  001704  0ED1               	movlw	low _dataSequence
  1758  001706  24F3               	addwf	243,w,c
  1759  001708  6ED9               	movwf	fsr2l,c
  1760  00170A  0E00               	movlw	high _dataSequence
  1761  00170C  20F4               	addwfc	prodh,w,c
  1762  00170E  6EDA               	movwf	fsr2h,c
  1763  001710  C0C9  FFDF         	movff	storeData@receivedMex+1,indf2
  1764                           
  1765                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2];
  1766  001714  5058               	movf	_dataCounter^0,w,c
  1767  001716  0D04               	mullw	4
  1768  001718  0ED2               	movlw	low (_dataSequence+1)
  1769  00171A  24F3               	addwf	243,w,c
  1770  00171C  6ED9               	movwf	fsr2l,c
  1771  00171E  0E00               	movlw	high (_dataSequence+1)
  1772  001720  20F4               	addwfc	prodh,w,c
  1773  001722  6EDA               	movwf	fsr2h,c
  1774  001724  C0CA  FFDF         	movff	storeData@receivedMex+2,indf2
  1775                           
  1776                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3];
  1777  001728  5058               	movf	_dataCounter^0,w,c
  1778  00172A  0D04               	mullw	4
  1779  00172C  0ED3               	movlw	low (_dataSequence+2)
  1780  00172E  24F3               	addwf	243,w,c
  1781  001730  6ED9               	movwf	fsr2l,c
  1782  001732  0E00               	movlw	high (_dataSequence+2)
  1783  001734  20F4               	addwfc	prodh,w,c
  1784  001736  6EDA               	movwf	fsr2h,c
  1785  001738  C0CB  FFDF         	movff	storeData@receivedMex+3,indf2
  1786                           
  1787                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1788  00173C  5058               	movf	_dataCounter^0,w,c
  1789  00173E  0D04               	mullw	4
  1790  001740  0ED4               	movlw	low (_dataSequence+3)
  1791  001742  24F3               	addwf	243,w,c
  1792  001744  6ED9               	movwf	fsr2l,c
  1793  001746  0E00               	movlw	high (_dataSequence+3)
  1794  001748  20F4               	addwfc	prodh,w,c
  1795  00174A  6EDA               	movwf	fsr2h,c
  1796  00174C  C0CC  FFDF         	movff	storeData@receivedMex+4,indf2
  1797  001750                     
  1798                           ; BSR set to: 0
  1799                           ;usart.c: 205:                 dataCounter++;
  1800  001750  2A58               	incf	_dataCounter^0,f,c
  1801                           
  1802                           ;usart.c: 206:                 break;
  1803  001752  EFE6  F00B         	goto	l598
  1804  001756                     l595:
  1805  001756  FFFF               	dw	65535	; assembler added errata NOP
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  1809  001758  C0C9  F0E5         	movff	storeData@receivedMex+1,_newSequenceData
  1810                           
  1811                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  1812  00175C  C0CA  F0E6         	movff	storeData@receivedMex+2,_newSequenceData+1
  1813                           
  1814                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3];
  1815  001760  C0CB  F0E7         	movff	storeData@receivedMex+3,_newSequenceData+2
  1816                           
  1817                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4];
  1818  001764  C0CC  F0E8         	movff	storeData@receivedMex+4,_newSequenceData+3
  1819                           
  1820                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  1821  001768  C0CD  F0E9         	movff	storeData@receivedMex+5,_newSequenceData+4
  1822                           
  1823                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6];
  1824  00176C  C0CE  F0EA         	movff	storeData@receivedMex+6,_newSequenceData+5
  1825                           
  1826                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7];
  1827  001770  C0CF  F0EB         	movff	storeData@receivedMex+7,_newSequenceData+6
  1828                           
  1829                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  1830  001774  C0D0  F0EC         	movff	storeData@receivedMex+8,_newSequenceData+7
  1831  001778                     
  1832                           ; BSR set to: 0
  1833                           ;usart.c: 218:                 _newSequence = 1;
  1834  001778  0E01               	movlw	1
  1835  00177A  6E56               	movwf	__newSequence^0,c
  1836                           
  1837                           ;usart.c: 219:                 break;
  1838  00177C  EFE6  F00B         	goto	l598
  1839  001780                     l4343:
  1840  001780  FFFF               	dw	65535	; assembler added errata NOP
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;usart.c: 222:                 _fatalError = 1;
  1844  001782  0E01               	movlw	1
  1845  001784  6E57               	movwf	__fatalError^0,c
  1846                           
  1847                           ;usart.c: 223:                 break;
  1848  001786  EFE6  F00B         	goto	l598
  1849  00178A                     l4345:
  1850  00178A  FFFF               	dw	65535	; assembler added errata NOP
  1851                           
  1852                           ; BSR set to: 0
  1853                           ;usart.c: 226:                 printError(8);
  1854  00178C  0E08               	movlw	8
  1855  00178E  EC66  F00E         	call	_printError
  1856                           
  1857                           ;usart.c: 227:                 break;
  1858  001792  EFE6  F00B         	goto	l598
  1859  001796                     l4349:
  1860  001796  FFFF               	dw	65535	; assembler added errata NOP
  1861                           
  1862                           ; BSR set to: 0
  1863  001798  51C8               	movf	storeData@receivedMex& (0+255),w,b
  1864  00179A  6E19               	movwf	??_storeData^0,c
  1865  00179C  6A1A               	clrf	(??_storeData+1)^0,c
  1866                           
  1867                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1868                           ; Switch size 1, requested type "simple"
  1869                           ; Number of cases is 1, Range of values is 0 to 0
  1870                           ; switch strategies available:
  1871                           ; Name         Instructions Cycles
  1872                           ; simple_byte            4     3 (average)
  1873                           ;	Chosen strategy is simple_byte
  1874  00179E  501A               	movf	(??_storeData+1)^0,w,c
  1875  0017A0  0A00               	xorlw	0	; case 0
  1876  0017A2  B4D8               	btfsc	status,2,c
  1877  0017A4  EFD6  F00B         	goto	l4695
  1878  0017A8  EFC5  F00B         	goto	l4345
  1879  0017AC                     l4695:
  1880  0017AC  FFFF               	dw	65535	; assembler added errata NOP
  1881                           
  1882                           ; BSR set to: 0
  1883                           ; Switch size 1, requested type "simple"
  1884                           ; Number of cases is 3, Range of values is 0 to 2
  1885                           ; switch strategies available:
  1886                           ; Name         Instructions Cycles
  1887                           ; simple_byte           10     6 (average)
  1888                           ;	Chosen strategy is simple_byte
  1889  0017AE  5019               	movf	??_storeData^0,w,c
  1890  0017B0  0A00               	xorlw	0	; case 0
  1891  0017B2  B4D8               	btfsc	status,2,c
  1892  0017B4  EF7F  F00B         	goto	l4337
  1893  0017B8  0A01               	xorlw	1	; case 1
  1894  0017BA  B4D8               	btfsc	status,2,c
  1895  0017BC  EFAB  F00B         	goto	l595
  1896  0017C0  0A03               	xorlw	3	; case 2
  1897  0017C2  B4D8               	btfsc	status,2,c
  1898  0017C4  EFC0  F00B         	goto	l4343
  1899  0017C8  EFC5  F00B         	goto	l4345
  1900  0017CC                     l598:
  1901  0017CC  FFFF               	dw	65535	; assembler added errata NOP
  1902  0017CE  0012               	return		;funcret
  1903  0017D0  FFFF               	dw	65535	; errata NOP
  1904  0017D2                     __end_of_storeData:
  1905                           	callstack 0
  1906                           
  1907 ;; *************** function _printError *****************
  1908 ;; Defined at:
  1909 ;;		line 111 in file "usart.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;  errCode         1    wreg     unsigned char 
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;  errCode         1   23[COMRAM] unsigned char 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1923 ;;      Params:         0       0       0       0       0       0       0
  1924 ;;      Locals:         1       0       0       0       0       0       0
  1925 ;;      Temps:          2       0       0       0       0       0       0
  1926 ;;      Totals:         3       0       0       0       0       0       0
  1927 ;;Total ram usage:        3 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    5
  1930 ;; This function calls:
  1931 ;;		_uartTx
  1932 ;; This function is called by:
  1933 ;;		_main
  1934 ;;		_storeData
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           	psect	text6
  1939  001CCC                     __ptext6:
  1940                           	callstack 0
  1941  001CCC                     _printError:
  1942                           	callstack 0
  1943  001CCC  FFFF               	dw	65535	; assembler added errata NOP
  1944                           
  1945                           ;incstack = 0
  1946                           ;printError@errCode stored from wreg
  1947  001CCE  6E18               	movwf	printError@errCode^0,c
  1948  001CD0                     
  1949                           ;usart.c: 113:     switch(errCode){
  1950  001CD0  EFC2  F00E         	goto	l4171
  1951  001CD4                     l4153:
  1952  001CD4  FFFF               	dw	65535	; assembler added errata NOP
  1953                           
  1954                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1955  001CD6  0E92               	movlw	low _errString_Feed
  1956  001CD8  6E12               	movwf	uartTx@ptr^0,c
  1957  001CDA  0E00               	movlw	high _errString_Feed
  1958  001CDC  6E13               	movwf	(uartTx@ptr+1)^0,c
  1959  001CDE  0E1E               	movlw	30
  1960  001CE0  6E14               	movwf	uartTx@length^0,c
  1961  001CE2  EC4D  F011         	call	_uartTx	;wreg free
  1962                           
  1963                           ;usart.c: 116:             break;
  1964  001CE6  EFF1  F00E         	goto	l565
  1965  001CEA                     l4155:
  1966  001CEA  FFFF               	dw	65535	; assembler added errata NOP
  1967                           
  1968                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1969  001CEC  0E5E               	movlw	low _errString_ZEND
  1970  001CEE  6E12               	movwf	uartTx@ptr^0,c
  1971  001CF0  0E01               	movlw	high _errString_ZEND
  1972  001CF2  6E13               	movwf	(uartTx@ptr+1)^0,c
  1973  001CF4  0E29               	movlw	41
  1974  001CF6  6E14               	movwf	uartTx@length^0,c
  1975  001CF8  EC4D  F011         	call	_uartTx	;wreg free
  1976                           
  1977                           ;usart.c: 119:             break;
  1978  001CFC  EFF1  F00E         	goto	l565
  1979  001D00                     l4157:
  1980  001D00  FFFF               	dw	65535	; assembler added errata NOP
  1981                           
  1982                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1983  001D02  0E87               	movlw	low _errString_Reset
  1984  001D04  6E12               	movwf	uartTx@ptr^0,c
  1985  001D06  0E01               	movlw	high _errString_Reset
  1986  001D08  6E13               	movwf	(uartTx@ptr+1)^0,c
  1987  001D0A  0E28               	movlw	40
  1988  001D0C  6E14               	movwf	uartTx@length^0,c
  1989  001D0E  EC4D  F011         	call	_uartTx	;wreg free
  1990                           
  1991                           ;usart.c: 122:             break;
  1992  001D12  EFF1  F00E         	goto	l565
  1993  001D16                     l4159:
  1994  001D16  FFFF               	dw	65535	; assembler added errata NOP
  1995                           
  1996                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1997  001D18  0E35               	movlw	low _errString_Point
  1998  001D1A  6E12               	movwf	uartTx@ptr^0,c
  1999  001D1C  0E01               	movlw	high _errString_Point
  2000  001D1E  6E13               	movwf	(uartTx@ptr+1)^0,c
  2001  001D20  0E29               	movlw	41
  2002  001D22  6E14               	movwf	uartTx@length^0,c
  2003  001D24  EC4D  F011         	call	_uartTx	;wreg free
  2004                           
  2005                           ;usart.c: 125:             break;
  2006  001D28  EFF1  F00E         	goto	l565
  2007  001D2C                     l4161:
  2008  001D2C  FFFF               	dw	65535	; assembler added errata NOP
  2009                           
  2010                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2011  001D2E  0ED6               	movlw	low _errString_Bound
  2012  001D30  6E12               	movwf	uartTx@ptr^0,c
  2013  001D32  0E01               	movlw	high _errString_Bound
  2014  001D34  6E13               	movwf	(uartTx@ptr+1)^0,c
  2015  001D36  0E21               	movlw	33
  2016  001D38  6E14               	movwf	uartTx@length^0,c
  2017  001D3A  EC4D  F011         	call	_uartTx	;wreg free
  2018                           
  2019                           ;usart.c: 128:             break;
  2020  001D3E  EFF1  F00E         	goto	l565
  2021  001D42                     l4163:
  2022  001D42  FFFF               	dw	65535	; assembler added errata NOP
  2023                           
  2024                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2025  001D44  0E00               	movlw	low _errString_PointZ
  2026  001D46  6E12               	movwf	uartTx@ptr^0,c
  2027  001D48  0E01               	movlw	high _errString_PointZ
  2028  001D4A  6E13               	movwf	(uartTx@ptr+1)^0,c
  2029  001D4C  0E35               	movlw	53
  2030  001D4E  6E14               	movwf	uartTx@length^0,c
  2031  001D50  EC4D  F011         	call	_uartTx	;wreg free
  2032                           
  2033                           ;usart.c: 131:             break;
  2034  001D54  EFF1  F00E         	goto	l565
  2035  001D58                     l4165:
  2036  001D58  FFFF               	dw	65535	; assembler added errata NOP
  2037                           
  2038                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2039  001D5A  0EAF               	movlw	low _errString_Fatal
  2040  001D5C  6E12               	movwf	uartTx@ptr^0,c
  2041  001D5E  0E01               	movlw	high _errString_Fatal
  2042  001D60  6E13               	movwf	(uartTx@ptr+1)^0,c
  2043  001D62  0E27               	movlw	39
  2044  001D64  6E14               	movwf	uartTx@length^0,c
  2045  001D66  EC4D  F011         	call	_uartTx	;wreg free
  2046                           
  2047                           ;usart.c: 134:             break;
  2048  001D6A  EFF1  F00E         	goto	l565
  2049  001D6E                     l4167:
  2050  001D6E  FFFF               	dw	65535	; assembler added errata NOP
  2051                           
  2052                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2053  001D70  0EB0               	movlw	low _errString_Command
  2054  001D72  6E12               	movwf	uartTx@ptr^0,c
  2055  001D74  0E00               	movlw	high _errString_Command
  2056  001D76  6E13               	movwf	(uartTx@ptr+1)^0,c
  2057  001D78  0E18               	movlw	24
  2058  001D7A  6E14               	movwf	uartTx@length^0,c
  2059  001D7C  EC4D  F011         	call	_uartTx	;wreg free
  2060                           
  2061                           ;usart.c: 137:             break;
  2062  001D80  EFF1  F00E         	goto	l565
  2063  001D84                     l4171:
  2064  001D84  FFFF               	dw	65535	; assembler added errata NOP
  2065  001D86  5018               	movf	printError@errCode^0,w,c
  2066  001D88  6E16               	movwf	??_printError^0,c
  2067  001D8A  6A17               	clrf	(??_printError+1)^0,c
  2068                           
  2069                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2070                           ; Switch size 1, requested type "simple"
  2071                           ; Number of cases is 1, Range of values is 0 to 0
  2072                           ; switch strategies available:
  2073                           ; Name         Instructions Cycles
  2074                           ; simple_byte            4     3 (average)
  2075                           ;	Chosen strategy is simple_byte
  2076  001D8C  5017               	movf	(??_printError+1)^0,w,c
  2077  001D8E  0A00               	xorlw	0	; case 0
  2078  001D90  B4D8               	btfsc	status,2,c
  2079  001D92  EFCD  F00E         	goto	l4697
  2080  001D96  EFF1  F00E         	goto	l565
  2081  001D9A                     l4697:
  2082  001D9A  FFFF               	dw	65535	; assembler added errata NOP
  2083                           
  2084                           ; Switch size 1, requested type "simple"
  2085                           ; Number of cases is 8, Range of values is 1 to 8
  2086                           ; switch strategies available:
  2087                           ; Name         Instructions Cycles
  2088                           ; simple_byte           25    13 (average)
  2089                           ;	Chosen strategy is simple_byte
  2090  001D9C  5016               	movf	??_printError^0,w,c
  2091  001D9E  0A01               	xorlw	1	; case 1
  2092  001DA0  B4D8               	btfsc	status,2,c
  2093  001DA2  EF6A  F00E         	goto	l4153
  2094  001DA6  0A03               	xorlw	3	; case 2
  2095  001DA8  B4D8               	btfsc	status,2,c
  2096  001DAA  EF75  F00E         	goto	l4155
  2097  001DAE  0A01               	xorlw	1	; case 3
  2098  001DB0  B4D8               	btfsc	status,2,c
  2099  001DB2  EF80  F00E         	goto	l4157
  2100  001DB6  0A07               	xorlw	7	; case 4
  2101  001DB8  B4D8               	btfsc	status,2,c
  2102  001DBA  EF8B  F00E         	goto	l4159
  2103  001DBE  0A01               	xorlw	1	; case 5
  2104  001DC0  B4D8               	btfsc	status,2,c
  2105  001DC2  EF96  F00E         	goto	l4161
  2106  001DC6  0A03               	xorlw	3	; case 6
  2107  001DC8  B4D8               	btfsc	status,2,c
  2108  001DCA  EFA1  F00E         	goto	l4163
  2109  001DCE  0A01               	xorlw	1	; case 7
  2110  001DD0  B4D8               	btfsc	status,2,c
  2111  001DD2  EFAC  F00E         	goto	l4165
  2112  001DD6  0A0F               	xorlw	15	; case 8
  2113  001DD8  B4D8               	btfsc	status,2,c
  2114  001DDA  EFB7  F00E         	goto	l4167
  2115  001DDE  EFF1  F00E         	goto	l565
  2116  001DE2                     l565:
  2117  001DE2  FFFF               	dw	65535	; assembler added errata NOP
  2118  001DE4  0012               	return		;funcret
  2119  001DE6  FFFF               	dw	65535	; errata NOP
  2120  001DE8                     __end_of_printError:
  2121                           	callstack 0
  2122                           
  2123 ;; *************** function _uartTx *****************
  2124 ;; Defined at:
  2125 ;;		line 148 in file "usart.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2128 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2129 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2130 ;;  length          1   19[COMRAM] unsigned char 
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;  i               1   20[COMRAM] unsigned char 
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      void 
  2135 ;; Registers used:
  2136 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2142 ;;      Params:         3       0       0       0       0       0       0
  2143 ;;      Locals:         1       0       0       0       0       0       0
  2144 ;;      Temps:          0       0       0       0       0       0       0
  2145 ;;      Totals:         4       0       0       0       0       0       0
  2146 ;;Total ram usage:        4 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    4
  2149 ;; This function calls:
  2150 ;;		Nothing
  2151 ;; This function is called by:
  2152 ;;		_printError
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           	psect	text7
  2157  00229A                     __ptext7:
  2158                           	callstack 0
  2159  00229A                     _uartTx:
  2160                           	callstack 0
  2161  00229A  FFFF               	dw	65535	; assembler added errata NOP
  2162  00229C                     
  2163                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  2164  00229C  0E01               	movlw	1
  2165  00229E  6E15               	movwf	uartTx@i^0,c
  2166  0022A0  EF66  F011         	goto	l3665
  2167  0022A4                     l3661:
  2168  0022A4  FFFF               	dw	65535	; assembler added errata NOP
  2169                           
  2170                           ;usart.c: 153:         TXREG = *ptr;
  2171  0022A6  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2172  0022AA  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2173  0022AE  50DF               	movf	indf2,w,c
  2174  0022B0  6EAD               	movwf	173,c	;volatile
  2175  0022B2                     l570:
  2176  0022B2  FFFF               	dw	65535	; assembler added errata NOP
  2177  0022B4  A2AC               	btfss	172,1,c	;volatile
  2178  0022B6  EF5F  F011         	goto	u2741
  2179  0022BA  EF62  F011         	goto	u2740
  2180  0022BE                     u2741:
  2181  0022BE  FFFF               	dw	65535	; assembler added errata NOP
  2182  0022C0  EF59  F011         	goto	l570
  2183  0022C4                     u2740:
  2184  0022C4  FFFF               	dw	65535	; assembler added errata NOP
  2185  0022C6                     
  2186                           ;usart.c: 157:         ptr++;
  2187  0022C6  4A12               	infsnz	uartTx@ptr^0,f,c
  2188  0022C8  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2189                           
  2190                           ;usart.c: 158:     }
  2191  0022CA  2A15               	incf	uartTx@i^0,f,c
  2192  0022CC                     l3665:
  2193  0022CC  FFFF               	dw	65535	; assembler added errata NOP
  2194  0022CE  5014               	movf	uartTx@length^0,w,c
  2195  0022D0  5C15               	subwf	uartTx@i^0,w,c
  2196  0022D2  A0D8               	btfss	status,0,c
  2197  0022D4  EF6E  F011         	goto	u2751
  2198  0022D8  EF71  F011         	goto	u2750
  2199  0022DC                     u2751:
  2200  0022DC  FFFF               	dw	65535	; assembler added errata NOP
  2201  0022DE  EF52  F011         	goto	l3661
  2202  0022E2                     u2750:
  2203  0022E2  FFFF               	dw	65535	; assembler added errata NOP
  2204  0022E4  0012               	return		;funcret
  2205  0022E6  FFFF               	dw	65535	; errata NOP
  2206  0022E8                     __end_of_uartTx:
  2207                           	callstack 0
  2208                           
  2209 ;; *************** function _shiftData *****************
  2210 ;; Defined at:
  2211 ;;		line 81 in file "usart.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;		None
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;  i               1   19[COMRAM] unsigned char 
  2216 ;; Return value:  Size  Location     Type
  2217 ;;                  1    wreg      void 
  2218 ;; Registers used:
  2219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2225 ;;      Params:         0       0       0       0       0       0       0
  2226 ;;      Locals:         1       0       0       0       0       0       0
  2227 ;;      Temps:          2       0       0       0       0       0       0
  2228 ;;      Totals:         3       0       0       0       0       0       0
  2229 ;;Total ram usage:        3 bytes
  2230 ;; Hardware stack levels used:    1
  2231 ;; Hardware stack levels required when called:    4
  2232 ;; This function calls:
  2233 ;;		Nothing
  2234 ;; This function is called by:
  2235 ;;		_main
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239                           	psect	text8
  2240  00223A                     __ptext8:
  2241                           	callstack 0
  2242  00223A                     _shiftData:
  2243                           	callstack 0
  2244  00223A  FFFF               	dw	65535	; assembler added errata NOP
  2245  00223C                     
  2246                           ;usart.c: 82:     char i;;usart.c: 84:     for(i = 0; i < 4; i++){
  2247  00223C  0E00               	movlw	0
  2248  00223E  6E14               	movwf	shiftData@i^0,c
  2249  002240                     l4445:
  2250  002240  FFFF               	dw	65535	; assembler added errata NOP
  2251                           
  2252                           ;usart.c: 85:         dataSequence[i] = dataSequence[i+1];
  2253  002242  5014               	movf	shiftData@i^0,w,c
  2254  002244  6E12               	movwf	??_shiftData^0,c
  2255  002246  6A13               	clrf	(??_shiftData+1)^0,c
  2256  002248  90D8               	bcf	status,0,c
  2257  00224A  3612               	rlcf	??_shiftData^0,f,c
  2258  00224C  3613               	rlcf	(??_shiftData+1)^0,f,c
  2259  00224E  90D8               	bcf	status,0,c
  2260  002250  3612               	rlcf	??_shiftData^0,f,c
  2261  002252  3613               	rlcf	(??_shiftData+1)^0,f,c
  2262  002254  0ED5               	movlw	low (_dataSequence+4)
  2263  002256  2412               	addwf	??_shiftData^0,w,c
  2264  002258  6ED9               	movwf	fsr2l,c
  2265  00225A  0E00               	movlw	high (_dataSequence+4)
  2266  00225C  2013               	addwfc	(??_shiftData+1)^0,w,c
  2267  00225E  6EDA               	movwf	fsr2h,c
  2268  002260  5014               	movf	shiftData@i^0,w,c
  2269  002262  0D04               	mullw	4
  2270  002264  0ED1               	movlw	low _dataSequence
  2271  002266  24F3               	addwf	243,w,c
  2272  002268  6EE1               	movwf	fsr1l,c
  2273  00226A  0E00               	movlw	high _dataSequence
  2274  00226C  20F4               	addwfc	prodh,w,c
  2275  00226E  6EE2               	movwf	fsr1h,c
  2276  002270  CFDE FFE6          	movff	postinc2,postinc1
  2277  002274  CFDE FFE6          	movff	postinc2,postinc1
  2278  002278  CFDE FFE6          	movff	postinc2,postinc1
  2279  00227C  CFDE FFE6          	movff	postinc2,postinc1
  2280  002280                     
  2281                           ;usart.c: 86:     }
  2282  002280  2A14               	incf	shiftData@i^0,f,c
  2283  002282  0E03               	movlw	3
  2284  002284  6414               	cpfsgt	shiftData@i^0,c
  2285  002286  EF47  F011         	goto	u3841
  2286  00228A  EF4A  F011         	goto	u3840
  2287  00228E                     u3841:
  2288  00228E  FFFF               	dw	65535	; assembler added errata NOP
  2289  002290  EF20  F011         	goto	l4445
  2290  002294                     u3840:
  2291  002294  FFFF               	dw	65535	; assembler added errata NOP
  2292  002296  0012               	return		;funcret
  2293  002298  FFFF               	dw	65535	; errata NOP
  2294  00229A                     __end_of_shiftData:
  2295                           	callstack 0
  2296                           
  2297 ;; *************** function _resetPosition *****************
  2298 ;; Defined at:
  2299 ;;		line 165 in file "motors.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;		None
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2304 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2305 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      unsigned char 
  2308 ;; Registers used:
  2309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2315 ;;      Params:         0       0       0       0       0       0       0
  2316 ;;      Locals:         3       0       0       0       0       0       0
  2317 ;;      Temps:          0       0       0       0       0       0       0
  2318 ;;      Totals:         3       0       0       0       0       0       0
  2319 ;;Total ram usage:        3 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    5
  2322 ;; This function calls:
  2323 ;;		_resetStep
  2324 ;;		_stepMade
  2325 ;; This function is called by:
  2326 ;;		_main
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text9
  2331  0010AE                     __ptext9:
  2332                           	callstack 0
  2333  0010AE                     _resetPosition:
  2334                           	callstack 0
  2335  0010AE  FFFF               	dw	65535	; assembler added errata NOP
  2336  0010B0                     
  2337                           ;motors.c: 185:     motCounter[0][1] = -1;
  2338  0010B0  6860               	setf	(_motCounter+2)^0,c
  2339  0010B2  6861               	setf	(_motCounter+3)^0,c
  2340                           
  2341                           ;motors.c: 186:     motCounter[1][1] = -1;
  2342  0010B4  6864               	setf	(_motCounter+6)^0,c
  2343  0010B6  6865               	setf	(_motCounter+7)^0,c
  2344                           
  2345                           ;motors.c: 187:     motCounter[2][1] = -1;
  2346  0010B8  6868               	setf	(_motCounter+10)^0,c
  2347  0010BA  6869               	setf	(_motCounter+11)^0,c
  2348  0010BC                     
  2349                           ;motors.c: 192:     unsigned char keepMovingX = 1;
  2350  0010BC  0E01               	movlw	1
  2351  0010BE  6E15               	movwf	resetPosition@keepMovingX^0,c
  2352                           
  2353                           ;motors.c: 193:     unsigned char keepMovingY = 1;
  2354  0010C0  0E01               	movlw	1
  2355  0010C2  6E16               	movwf	resetPosition@keepMovingY^0,c
  2356                           
  2357                           ;motors.c: 194:     unsigned char keepMovingZ = 1;
  2358  0010C4  0E01               	movlw	1
  2359  0010C6  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2360  0010C8                     
  2361                           ;motors.c: 197:     T2CONbits.TMR2ON = 1;
  2362  0010C8  84CA               	bsf	202,2,c	;volatile
  2363                           
  2364                           ;motors.c: 199:     tm0Error = 0;
  2365  0010CA  0E00               	movlw	0
  2366  0010CC  6E51               	movwf	(_tm0Error+1)^0,c
  2367  0010CE  0E00               	movlw	0
  2368  0010D0  6E50               	movwf	_tm0Error^0,c
  2369                           
  2370                           ;motors.c: 200:     tm0Limit = 250;
  2371  0010D2  0EFA               	movlw	250
  2372  0010D4  6E5D               	movwf	_tm0Limit^0,c
  2373  0010D6                     
  2374                           ;motors.c: 201:     T0CONbits.TMR0ON = 1;
  2375  0010D6  8ED5               	bsf	213,7,c	;volatile
  2376                           
  2377                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2378  0010D8  EF3A  F009         	goto	l4257
  2379  0010DC                     l4209:
  2380  0010DC  FFFF               	dw	65535	; assembler added errata NOP
  2381                           
  2382                           ;motors.c: 206:         if(tm0Error){
  2383  0010DE  5050               	movf	_tm0Error^0,w,c
  2384  0010E0  1051               	iorwf	(_tm0Error+1)^0,w,c
  2385  0010E2  B4D8               	btfsc	status,2,c
  2386  0010E4  EF76  F008         	goto	u3641
  2387  0010E8  EF79  F008         	goto	u3640
  2388  0010EC                     u3641:
  2389  0010EC  FFFF               	dw	65535	; assembler added errata NOP
  2390  0010EE  EF80  F008         	goto	l131
  2391  0010F2                     u3640:
  2392  0010F2  FFFF               	dw	65535	; assembler added errata NOP
  2393  0010F4                     
  2394                           ;motors.c: 214:             tm0Error = 3;
  2395  0010F4  0E00               	movlw	0
  2396  0010F6  6E51               	movwf	(_tm0Error+1)^0,c
  2397  0010F8  0E03               	movlw	3
  2398  0010FA  6E50               	movwf	_tm0Error^0,c
  2399                           
  2400                           ;motors.c: 215:             break;
  2401  0010FC  EF58  F009         	goto	l132
  2402  001100                     l131:
  2403  001100  FFFF               	dw	65535	; assembler added errata NOP
  2404                           
  2405                           ;motors.c: 222:         if(PORTEbits.RE0 || !keepMovingX){
  2406  001102  B084               	btfsc	132,0,c	;volatile
  2407  001104  EF86  F008         	goto	u3651
  2408  001108  EF89  F008         	goto	u3650
  2409  00110C                     u3651:
  2410  00110C  FFFF               	dw	65535	; assembler added errata NOP
  2411  00110E  EF93  F008         	goto	l4215
  2412  001112                     u3650:
  2413  001112  FFFF               	dw	65535	; assembler added errata NOP
  2414  001114  5015               	movf	resetPosition@keepMovingX^0,w,c
  2415  001116  A4D8               	btfss	status,2,c
  2416  001118  EF90  F008         	goto	u3661
  2417  00111C  EF93  F008         	goto	u3660
  2418  001120                     u3661:
  2419  001120  FFFF               	dw	65535	; assembler added errata NOP
  2420  001122  EF98  F008         	goto	l4217
  2421  001126                     u3660:
  2422  001126                     l4215:
  2423  001126  FFFF               	dw	65535	; assembler added errata NOP
  2424                           
  2425                           ;motors.c: 224:             keepMovingX = 0;
  2426  001128  0E00               	movlw	0
  2427  00112A  6E15               	movwf	resetPosition@keepMovingX^0,c
  2428                           
  2429                           ;motors.c: 225:         }else{
  2430  00112C  EFB5  F008         	goto	l4225
  2431  001130                     l4217:
  2432  001130  FFFF               	dw	65535	; assembler added errata NOP
  2433                           
  2434                           ;motors.c: 231:             motCounter[0][0] += motCounter[0][1];
  2435  001132  EE20  F060         	lfsr	2,_motCounter+2
  2436  001136  50DE               	movf	postinc2,w,c
  2437  001138  265E               	addwf	_motCounter^0,f,c
  2438  00113A  50DD               	movf	postdec2,w,c
  2439  00113C  225F               	addwfc	(_motCounter+1)^0,f,c
  2440  00113E                     
  2441                           ;motors.c: 232:             if(motCounter[0][0] < 0){
  2442  00113E  BE5F               	btfsc	(_motCounter+1)^0,7,c
  2443  001140  EFA7  F008         	goto	u3670
  2444  001144  EFA4  F008         	goto	u3671
  2445  001148                     u3671:
  2446  001148  FFFF               	dw	65535	; assembler added errata NOP
  2447  00114A  EFAC  F008         	goto	l4223
  2448  00114E                     u3670:
  2449  00114E  FFFF               	dw	65535	; assembler added errata NOP
  2450  001150                     
  2451                           ;motors.c: 233:                 motCounter[0][0] = 3;
  2452  001150  0E00               	movlw	0
  2453  001152  6E5F               	movwf	(_motCounter+1)^0,c
  2454  001154  0E03               	movlw	3
  2455  001156  6E5E               	movwf	_motCounter^0,c
  2456  001158                     l4223:
  2457  001158  FFFF               	dw	65535	; assembler added errata NOP
  2458                           
  2459                           ;motors.c: 236:             LATA = stepMot1[motCounter[0][0]];
  2460  00115A  0E8C               	movlw	low _stepMot1
  2461  00115C  245E               	addwf	_motCounter^0,w,c
  2462  00115E  6ED9               	movwf	fsr2l,c
  2463  001160  0E00               	movlw	high _stepMot1
  2464  001162  205F               	addwfc	(_motCounter+1)^0,w,c
  2465  001164  6EDA               	movwf	fsr2h,c
  2466  001166  50DF               	movf	indf2,w,c
  2467  001168  6E89               	movwf	137,c	;volatile
  2468  00116A                     l4225:
  2469  00116A  FFFF               	dw	65535	; assembler added errata NOP
  2470                           
  2471                           ;motors.c: 241:         if(PORTEbits.RE1 || !keepMovingY){
  2472  00116C  B284               	btfsc	132,1,c	;volatile
  2473  00116E  EFBB  F008         	goto	u3681
  2474  001172  EFBE  F008         	goto	u3680
  2475  001176                     u3681:
  2476  001176  FFFF               	dw	65535	; assembler added errata NOP
  2477  001178  EFC8  F008         	goto	l4229
  2478  00117C                     u3680:
  2479  00117C  FFFF               	dw	65535	; assembler added errata NOP
  2480  00117E  5016               	movf	resetPosition@keepMovingY^0,w,c
  2481  001180  A4D8               	btfss	status,2,c
  2482  001182  EFC5  F008         	goto	u3691
  2483  001186  EFC8  F008         	goto	u3690
  2484  00118A                     u3691:
  2485  00118A  FFFF               	dw	65535	; assembler added errata NOP
  2486  00118C  EFCD  F008         	goto	l4231
  2487  001190                     u3690:
  2488  001190                     l4229:
  2489  001190  FFFF               	dw	65535	; assembler added errata NOP
  2490                           
  2491                           ;motors.c: 243:             keepMovingY = 0;
  2492  001192  0E00               	movlw	0
  2493  001194  6E16               	movwf	resetPosition@keepMovingY^0,c
  2494                           
  2495                           ;motors.c: 244:         }else{
  2496  001196  EFEA  F008         	goto	l4239
  2497  00119A                     l4231:
  2498  00119A  FFFF               	dw	65535	; assembler added errata NOP
  2499                           
  2500                           ;motors.c: 250:             motCounter[1][0] += motCounter[1][1];
  2501  00119C  EE20  F064         	lfsr	2,_motCounter+6
  2502  0011A0  50DE               	movf	postinc2,w,c
  2503  0011A2  2662               	addwf	(_motCounter+4)^0,f,c
  2504  0011A4  50DD               	movf	postdec2,w,c
  2505  0011A6  2263               	addwfc	(_motCounter+5)^0,f,c
  2506  0011A8                     
  2507                           ;motors.c: 251:             if(motCounter[1][0] < 0){
  2508  0011A8  BE63               	btfsc	(_motCounter+5)^0,7,c
  2509  0011AA  EFDC  F008         	goto	u3700
  2510  0011AE  EFD9  F008         	goto	u3701
  2511  0011B2                     u3701:
  2512  0011B2  FFFF               	dw	65535	; assembler added errata NOP
  2513  0011B4  EFE1  F008         	goto	l4237
  2514  0011B8                     u3700:
  2515  0011B8  FFFF               	dw	65535	; assembler added errata NOP
  2516  0011BA                     
  2517                           ;motors.c: 252:                 motCounter[1][0] = 3;
  2518  0011BA  0E00               	movlw	0
  2519  0011BC  6E63               	movwf	(_motCounter+5)^0,c
  2520  0011BE  0E03               	movlw	3
  2521  0011C0  6E62               	movwf	(_motCounter+4)^0,c
  2522  0011C2                     l4237:
  2523  0011C2  FFFF               	dw	65535	; assembler added errata NOP
  2524                           
  2525                           ;motors.c: 255:             LATB = stepMot2[motCounter[1][0]];
  2526  0011C4  0E88               	movlw	low _stepMot2
  2527  0011C6  2462               	addwf	(_motCounter+4)^0,w,c
  2528  0011C8  6ED9               	movwf	fsr2l,c
  2529  0011CA  0E00               	movlw	high _stepMot2
  2530  0011CC  2063               	addwfc	(_motCounter+5)^0,w,c
  2531  0011CE  6EDA               	movwf	fsr2h,c
  2532  0011D0  50DF               	movf	indf2,w,c
  2533  0011D2  6E8A               	movwf	138,c	;volatile
  2534  0011D4                     l4239:
  2535  0011D4  FFFF               	dw	65535	; assembler added errata NOP
  2536                           
  2537                           ;motors.c: 260:         if(PORTEbits.RE2 || !keepMovingZ){
  2538  0011D6  B484               	btfsc	132,2,c	;volatile
  2539  0011D8  EFF0  F008         	goto	u3711
  2540  0011DC  EFF3  F008         	goto	u3710
  2541  0011E0                     u3711:
  2542  0011E0  FFFF               	dw	65535	; assembler added errata NOP
  2543  0011E2  EFFD  F008         	goto	l4243
  2544  0011E6                     u3710:
  2545  0011E6  FFFF               	dw	65535	; assembler added errata NOP
  2546  0011E8  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2547  0011EA  A4D8               	btfss	status,2,c
  2548  0011EC  EFFA  F008         	goto	u3721
  2549  0011F0  EFFD  F008         	goto	u3720
  2550  0011F4                     u3721:
  2551  0011F4  FFFF               	dw	65535	; assembler added errata NOP
  2552  0011F6  EF02  F009         	goto	l4245
  2553  0011FA                     u3720:
  2554  0011FA                     l4243:
  2555  0011FA  FFFF               	dw	65535	; assembler added errata NOP
  2556                           
  2557                           ;motors.c: 262:             keepMovingZ = 0;
  2558  0011FC  0E00               	movlw	0
  2559  0011FE  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2560                           
  2561                           ;motors.c: 263:         }else{
  2562  001200  EF1F  F009         	goto	l4253
  2563  001204                     l4245:
  2564  001204  FFFF               	dw	65535	; assembler added errata NOP
  2565                           
  2566                           ;motors.c: 269:             motCounter[2][0] += motCounter[2][1];
  2567  001206  EE20  F068         	lfsr	2,_motCounter+10
  2568  00120A  50DE               	movf	postinc2,w,c
  2569  00120C  2666               	addwf	(_motCounter+8)^0,f,c
  2570  00120E  50DD               	movf	postdec2,w,c
  2571  001210  2267               	addwfc	(_motCounter+9)^0,f,c
  2572  001212                     
  2573                           ;motors.c: 270:             if(motCounter[2][0] < 0){
  2574  001212  BE67               	btfsc	(_motCounter+9)^0,7,c
  2575  001214  EF11  F009         	goto	u3730
  2576  001218  EF0E  F009         	goto	u3731
  2577  00121C                     u3731:
  2578  00121C  FFFF               	dw	65535	; assembler added errata NOP
  2579  00121E  EF16  F009         	goto	l4251
  2580  001222                     u3730:
  2581  001222  FFFF               	dw	65535	; assembler added errata NOP
  2582  001224                     
  2583                           ;motors.c: 271:                 motCounter[2][0] = 3;
  2584  001224  0E00               	movlw	0
  2585  001226  6E67               	movwf	(_motCounter+9)^0,c
  2586  001228  0E03               	movlw	3
  2587  00122A  6E66               	movwf	(_motCounter+8)^0,c
  2588  00122C                     l4251:
  2589  00122C  FFFF               	dw	65535	; assembler added errata NOP
  2590                           
  2591                           ;motors.c: 274:             LATC = stepMot3[motCounter[2][0]];
  2592  00122E  0E84               	movlw	low _stepMot3
  2593  001230  2466               	addwf	(_motCounter+8)^0,w,c
  2594  001232  6ED9               	movwf	fsr2l,c
  2595  001234  0E00               	movlw	high _stepMot3
  2596  001236  2067               	addwfc	(_motCounter+9)^0,w,c
  2597  001238  6EDA               	movwf	fsr2h,c
  2598  00123A  50DF               	movf	indf2,w,c
  2599  00123C  6E8B               	movwf	139,c	;volatile
  2600  00123E                     l4253:
  2601  00123E  FFFF               	dw	65535	; assembler added errata NOP
  2602  001240  EC4A  F012         	call	_stepMade	;wreg free
  2603  001244  5012               	movf	?_stepMade^0,w,c
  2604  001246  1013               	iorwf	(?_stepMade+1)^0,w,c
  2605  001248  B4D8               	btfsc	status,2,c
  2606  00124A  EF29  F009         	goto	u3741
  2607  00124E  EF2C  F009         	goto	u3740
  2608  001252                     u3741:
  2609  001252  FFFF               	dw	65535	; assembler added errata NOP
  2610  001254  EF1F  F009         	goto	l4253
  2611  001258                     u3740:
  2612  001258  FFFF               	dw	65535	; assembler added errata NOP
  2613  00125A                     l4255:
  2614  00125A  FFFF               	dw	65535	; assembler added errata NOP
  2615  00125C  EC4A  F012         	call	_stepMade	;wreg free
  2616  001260  5012               	movf	?_stepMade^0,w,c
  2617  001262  1013               	iorwf	(?_stepMade+1)^0,w,c
  2618  001264  B4D8               	btfsc	status,2,c
  2619  001266  EF37  F009         	goto	u3751
  2620  00126A  EF3A  F009         	goto	u3750
  2621  00126E                     u3751:
  2622  00126E  FFFF               	dw	65535	; assembler added errata NOP
  2623  001270  EF2D  F009         	goto	l4255
  2624  001274                     u3750:
  2625  001274                     l4257:
  2626  001274  FFFF               	dw	65535	; assembler added errata NOP
  2627                           
  2628                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2629  001276  5015               	movf	resetPosition@keepMovingX^0,w,c
  2630  001278  A4D8               	btfss	status,2,c
  2631  00127A  EF41  F009         	goto	u3761
  2632  00127E  EF44  F009         	goto	u3760
  2633  001282                     u3761:
  2634  001282  FFFF               	dw	65535	; assembler added errata NOP
  2635  001284  EF6E  F008         	goto	l4209
  2636  001288                     u3760:
  2637  001288  FFFF               	dw	65535	; assembler added errata NOP
  2638  00128A  5016               	movf	resetPosition@keepMovingY^0,w,c
  2639  00128C  A4D8               	btfss	status,2,c
  2640  00128E  EF4B  F009         	goto	u3771
  2641  001292  EF4E  F009         	goto	u3770
  2642  001296                     u3771:
  2643  001296  FFFF               	dw	65535	; assembler added errata NOP
  2644  001298  EF6E  F008         	goto	l4209
  2645  00129C                     u3770:
  2646  00129C  FFFF               	dw	65535	; assembler added errata NOP
  2647  00129E  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2648  0012A0  A4D8               	btfss	status,2,c
  2649  0012A2  EF55  F009         	goto	u3781
  2650  0012A6  EF58  F009         	goto	u3780
  2651  0012AA                     u3781:
  2652  0012AA  FFFF               	dw	65535	; assembler added errata NOP
  2653  0012AC  EF6E  F008         	goto	l4209
  2654  0012B0                     u3780:
  2655  0012B0                     l132:
  2656  0012B0  FFFF               	dw	65535	; assembler added errata NOP
  2657                           
  2658                           ;motors.c: 293:     T0CONbits.TMR0ON = 0;
  2659  0012B2  9ED5               	bcf	213,7,c	;volatile
  2660                           
  2661                           ;motors.c: 294:     T2CONbits.TMR2ON = 0;
  2662  0012B4  94CA               	bcf	202,2,c	;volatile
  2663  0012B6                     
  2664                           ;motors.c: 296:     TMR0 = 0;
  2665  0012B6  0E00               	movlw	0
  2666  0012B8  6ED7               	movwf	215,c	;volatile
  2667  0012BA  0E00               	movlw	0
  2668  0012BC  6ED6               	movwf	214,c	;volatile
  2669                           
  2670                           ;motors.c: 297:     TMR2 = 0;
  2671  0012BE  0E00               	movlw	0
  2672  0012C0  6ECC               	movwf	204,c	;volatile
  2673  0012C2                     
  2674                           ;motors.c: 300:     resetStep();
  2675  0012C2  ECBE  F012         	call	_resetStep	;wreg free
  2676  0012C6                     
  2677                           ;motors.c: 303:     return(tm0Error);
  2678  0012C6  5050               	movf	_tm0Error^0,w,c
  2679  0012C8  0012               	return		;funcret
  2680  0012CA  FFFF               	dw	65535	; errata NOP
  2681  0012CC                     __end_of_resetPosition:
  2682                           	callstack 0
  2683                           
  2684 ;; *************** function _resetNewSequence *****************
  2685 ;; Defined at:
  2686 ;;		line 73 in file "usart.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;		None
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;		None
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, status,2
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2700 ;;      Params:         0       0       0       0       0       0       0
  2701 ;;      Locals:         0       0       0       0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0       0       0
  2703 ;;      Totals:         0       0       0       0       0       0       0
  2704 ;;Total ram usage:        0 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    4
  2707 ;; This function calls:
  2708 ;;		Nothing
  2709 ;; This function is called by:
  2710 ;;		_main
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text10
  2715  002554                     __ptext10:
  2716                           	callstack 0
  2717  002554                     _resetNewSequence:
  2718                           	callstack 0
  2719  002554  FFFF               	dw	65535	; assembler added errata NOP
  2720  002556                     
  2721                           ;usart.c: 74:     _newSequence = 0;
  2722  002556  0E00               	movlw	0
  2723  002558  6E56               	movwf	__newSequence^0,c
  2724  00255A  0012               	return		;funcret
  2725  00255C  FFFF               	dw	65535	; errata NOP
  2726  00255E                     __end_of_resetNewSequence:
  2727                           	callstack 0
  2728                           
  2729 ;; *************** function _reduceSeq *****************
  2730 ;; Defined at:
  2731 ;;		line 50 in file "usart.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;		None
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;		None
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		status,2, status,0
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2745 ;;      Params:         0       0       0       0       0       0       0
  2746 ;;      Locals:         0       0       0       0       0       0       0
  2747 ;;      Temps:          0       0       0       0       0       0       0
  2748 ;;      Totals:         0       0       0       0       0       0       0
  2749 ;;Total ram usage:        0 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    4
  2752 ;; This function calls:
  2753 ;;		Nothing
  2754 ;; This function is called by:
  2755 ;;		_main
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text11
  2760  0025A4                     __ptext11:
  2761                           	callstack 0
  2762  0025A4                     _reduceSeq:
  2763                           	callstack 0
  2764  0025A4  FFFF               	dw	65535	; assembler added errata NOP
  2765  0025A6                     
  2766                           ;usart.c: 51:     dataCounter--;
  2767  0025A6  0658               	decf	_dataCounter^0,f,c
  2768  0025A8  0012               	return		;funcret
  2769  0025AA  FFFF               	dw	65535	; errata NOP
  2770  0025AC                     __end_of_reduceSeq:
  2771                           	callstack 0
  2772                           
  2773 ;; *************** function _readSeq *****************
  2774 ;; Defined at:
  2775 ;;		line 57 in file "usart.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;		None
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;		None
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  1    wreg      unsigned char 
  2782 ;; Registers used:
  2783 ;;		wreg, status,2
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2789 ;;      Params:         0       0       0       0       0       0       0
  2790 ;;      Locals:         0       0       0       0       0       0       0
  2791 ;;      Temps:          0       0       0       0       0       0       0
  2792 ;;      Totals:         0       0       0       0       0       0       0
  2793 ;;Total ram usage:        0 bytes
  2794 ;; Hardware stack levels used:    1
  2795 ;; Hardware stack levels required when called:    4
  2796 ;; This function calls:
  2797 ;;		Nothing
  2798 ;; This function is called by:
  2799 ;;		_main
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           	psect	text12
  2804  0025AC                     __ptext12:
  2805                           	callstack 0
  2806  0025AC                     _readSeq:
  2807                           	callstack 0
  2808  0025AC  FFFF               	dw	65535	; assembler added errata NOP
  2809  0025AE                     
  2810                           ;usart.c: 58:     return dataCounter;
  2811  0025AE  5058               	movf	_dataCounter^0,w,c
  2812  0025B0  0012               	return		;funcret
  2813  0025B2  FFFF               	dw	65535	; errata NOP
  2814  0025B4                     __end_of_readSeq:
  2815                           	callstack 0
  2816                           
  2817 ;; *************** function _newSequence *****************
  2818 ;; Defined at:
  2819 ;;		line 65 in file "usart.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;		None
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;		None
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  1    wreg      unsigned char 
  2826 ;; Registers used:
  2827 ;;		wreg, status,2
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2833 ;;      Params:         0       0       0       0       0       0       0
  2834 ;;      Locals:         0       0       0       0       0       0       0
  2835 ;;      Temps:          0       0       0       0       0       0       0
  2836 ;;      Totals:         0       0       0       0       0       0       0
  2837 ;;Total ram usage:        0 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; Hardware stack levels required when called:    4
  2840 ;; This function calls:
  2841 ;;		Nothing
  2842 ;; This function is called by:
  2843 ;;		_main
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           	psect	text13
  2848  0025B4                     __ptext13:
  2849                           	callstack 0
  2850  0025B4                     _newSequence:
  2851                           	callstack 0
  2852  0025B4  FFFF               	dw	65535	; assembler added errata NOP
  2853  0025B6                     
  2854                           ;usart.c: 66:     return _newSequence;
  2855  0025B6  5056               	movf	__newSequence^0,w,c
  2856  0025B8  0012               	return		;funcret
  2857  0025BA  FFFF               	dw	65535	; errata NOP
  2858  0025BC                     __end_of_newSequence:
  2859                           	callstack 0
  2860                           
  2861 ;; *************** function _interruptInit *****************
  2862 ;; Defined at:
  2863 ;;		line 21 in file "interrupt.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;		None
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;		None
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      void 
  2870 ;; Registers used:
  2871 ;;		None
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2877 ;;      Params:         0       0       0       0       0       0       0
  2878 ;;      Locals:         0       0       0       0       0       0       0
  2879 ;;      Temps:          0       0       0       0       0       0       0
  2880 ;;      Totals:         0       0       0       0       0       0       0
  2881 ;;Total ram usage:        0 bytes
  2882 ;; Hardware stack levels used:    1
  2883 ;; Hardware stack levels required when called:    4
  2884 ;; This function calls:
  2885 ;;		Nothing
  2886 ;; This function is called by:
  2887 ;;		_main
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	text14
  2892  00237E                     __ptext14:
  2893                           	callstack 0
  2894  00237E                     _interruptInit:
  2895                           	callstack 0
  2896  00237E  FFFF               	dw	65535	; assembler added errata NOP
  2897  002380                     
  2898                           ;interrupt.c: 23:     if(!INTCONbits.GIE){
  2899  002380  BEF2               	btfsc	242,7,c	;volatile
  2900  002382  EFC5  F011         	goto	u3791
  2901  002386  EFC8  F011         	goto	u3790
  2902  00238A                     u3791:
  2903  00238A  FFFF               	dw	65535	; assembler added errata NOP
  2904  00238C  EFCA  F011         	goto	l459
  2905  002390                     u3790:
  2906  002390  FFFF               	dw	65535	; assembler added errata NOP
  2907  002392                     
  2908                           ;interrupt.c: 24:         INTCONbits.GIE = 1;
  2909  002392  8EF2               	bsf	242,7,c	;volatile
  2910  002394                     l459:
  2911  002394  FFFF               	dw	65535	; assembler added errata NOP
  2912                           
  2913                           ;interrupt.c: 26:     if(!INTCONbits.PEIE){
  2914  002396  BCF2               	btfsc	242,6,c	;volatile
  2915  002398  EFD0  F011         	goto	u3801
  2916  00239C  EFD3  F011         	goto	u3800
  2917  0023A0                     u3801:
  2918  0023A0  FFFF               	dw	65535	; assembler added errata NOP
  2919  0023A2  EFD5  F011         	goto	l460
  2920  0023A6                     u3800:
  2921  0023A6  FFFF               	dw	65535	; assembler added errata NOP
  2922  0023A8                     
  2923                           ;interrupt.c: 27:         INTCONbits.PEIE = 1;
  2924  0023A8  8CF2               	bsf	242,6,c	;volatile
  2925  0023AA                     l460:
  2926  0023AA  FFFF               	dw	65535	; assembler added errata NOP
  2927                           
  2928                           ;interrupt.c: 31:     RCONbits.IPEN = 1;
  2929  0023AC  8ED0               	bsf	208,7,c	;volatile
  2930                           
  2931                           ;interrupt.c: 32:     INTCONbits.T0IE = 1;
  2932  0023AE  8AF2               	bsf	242,5,c	;volatile
  2933                           
  2934                           ;interrupt.c: 33:     PIE1bits.TMR1IE = 1;
  2935  0023B0  809D               	bsf	157,0,c	;volatile
  2936                           
  2937                           ;interrupt.c: 34:     PIE1bits.TMR2IE = 1;
  2938  0023B2  829D               	bsf	157,1,c	;volatile
  2939                           
  2940                           ;interrupt.c: 35:     PIE1bits.RC1IE = 1;
  2941  0023B4  8A9D               	bsf	157,5,c	;volatile
  2942  0023B6  0012               	return		;funcret
  2943  0023B8  FFFF               	dw	65535	; errata NOP
  2944  0023BA                     __end_of_interruptInit:
  2945                           	callstack 0
  2946                           
  2947 ;; *************** function _initPinMotors *****************
  2948 ;; Defined at:
  2949 ;;		line 49 in file "motors.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;		None
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;		None
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  1    wreg      void 
  2956 ;; Registers used:
  2957 ;;		wreg, status,2, status,0
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2963 ;;      Params:         0       0       0       0       0       0       0
  2964 ;;      Locals:         0       0       0       0       0       0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0
  2966 ;;      Totals:         0       0       0       0       0       0       0
  2967 ;;Total ram usage:        0 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; Hardware stack levels required when called:    4
  2970 ;; This function calls:
  2971 ;;		Nothing
  2972 ;; This function is called by:
  2973 ;;		_main
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text15
  2978  002412                     __ptext15:
  2979                           	callstack 0
  2980  002412                     _initPinMotors:
  2981                           	callstack 0
  2982  002412  FFFF               	dw	65535	; assembler added errata NOP
  2983  002414                     
  2984                           ;motors.c: 51:     ADCON1bits.PCFG = 0x06;
  2985  002414  50C1               	movf	193,w,c	;volatile
  2986  002416  0BF0               	andlw	-16
  2987  002418  0906               	iorlw	6
  2988  00241A  6EC1               	movwf	193,c	;volatile
  2989  00241C                     
  2990                           ;motors.c: 52:     TRISA &= 0b11010001;
  2991  00241C  0ED1               	movlw	209
  2992  00241E  1692               	andwf	146,f,c	;volatile
  2993  002420                     
  2994                           ;motors.c: 54:     TRISB &= 0b00000010;
  2995  002420  0E02               	movlw	2
  2996  002422  1693               	andwf	147,f,c	;volatile
  2997  002424                     
  2998                           ;motors.c: 55:     TRISC &= 0b11000000;
  2999  002424  0EC0               	movlw	192
  3000  002426  1694               	andwf	148,f,c	;volatile
  3001  002428                     
  3002                           ;motors.c: 56:     TRISD &= 0b11000000;
  3003  002428  0EC0               	movlw	192
  3004  00242A  1695               	andwf	149,f,c	;volatile
  3005  00242C                     
  3006                           ;motors.c: 59:     TRISEbits.TRISE0 = 1;
  3007  00242C  8096               	bsf	150,0,c	;volatile
  3008  00242E                     
  3009                           ;motors.c: 60:     TRISEbits.TRISE1 = 1;
  3010  00242E  8296               	bsf	150,1,c	;volatile
  3011  002430                     
  3012                           ;motors.c: 61:     TRISEbits.TRISE2 = 1;
  3013  002430  8496               	bsf	150,2,c	;volatile
  3014  002432                     
  3015                           ;motors.c: 64:     TRISDbits.TRISD7 = 1;
  3016  002432  8E95               	bsf	149,7,c	;volatile
  3017  002434  0012               	return		;funcret
  3018  002436  FFFF               	dw	65535	; errata NOP
  3019  002438                     __end_of_initPinMotors:
  3020                           	callstack 0
  3021                           
  3022 ;; *************** function _initADC *****************
  3023 ;; Defined at:
  3024 ;;		line 18 in file "adc.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;		None
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;		None
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  1    wreg      void 
  3031 ;; Registers used:
  3032 ;;		wreg, status,2
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3038 ;;      Params:         0       0       0       0       0       0       0
  3039 ;;      Locals:         0       0       0       0       0       0       0
  3040 ;;      Temps:          0       0       0       0       0       0       0
  3041 ;;      Totals:         0       0       0       0       0       0       0
  3042 ;;Total ram usage:        0 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; Hardware stack levels required when called:    4
  3045 ;; This function calls:
  3046 ;;		Nothing
  3047 ;; This function is called by:
  3048 ;;		_main
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	text16
  3053  002438                     __ptext16:
  3054                           	callstack 0
  3055  002438                     _initADC:
  3056                           	callstack 0
  3057  002438  FFFF               	dw	65535	; assembler added errata NOP
  3058  00243A                     
  3059                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3060  00243A  50C2               	movf	194,w,c	;volatile
  3061  00243C  0B3F               	andlw	-193
  3062  00243E  0940               	iorlw	64
  3063  002440  6EC2               	movwf	194,c	;volatile
  3064  002442                     
  3065                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3066  002442  8CC1               	bsf	193,6,c	;volatile
  3067                           
  3068                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3069  002444  0EC7               	movlw	-57
  3070  002446  16C2               	andwf	194,f,c	;volatile
  3071  002448                     
  3072                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3073  002448  94C2               	bcf	194,2,c	;volatile
  3074  00244A                     
  3075                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3076  00244A  90C2               	bcf	194,0,c	;volatile
  3077  00244C                     
  3078                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3079  00244C  9EC1               	bcf	193,7,c	;volatile
  3080                           
  3081                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3082  00244E  50C1               	movf	193,w,c	;volatile
  3083  002450  0BF0               	andlw	-16
  3084  002452  090E               	iorlw	14
  3085  002454  6EC1               	movwf	193,c	;volatile
  3086  002456                     
  3087                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3088  002456  8C9D               	bsf	157,6,c	;volatile
  3089  002458                     
  3090                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3091  002458  8C9F               	bsf	159,6,c	;volatile
  3092  00245A  0012               	return		;funcret
  3093  00245C  FFFF               	dw	65535	; errata NOP
  3094  00245E                     __end_of_initADC:
  3095                           	callstack 0
  3096                           
  3097 ;; *************** function _getNewSequence *****************
  3098 ;; Defined at:
  3099 ;;		line 43 in file "usart.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;		None
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;		None
  3104 ;; Return value:  Size  Location     Type
  3105 ;;                  2   17[COMRAM] PTR struct .
  3106 ;; Registers used:
  3107 ;;		wreg, status,2, status,0
  3108 ;; Tracked objects:
  3109 ;;		On entry : 0/0
  3110 ;;		On exit  : 0/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3113 ;;      Params:         2       0       0       0       0       0       0
  3114 ;;      Locals:         0       0       0       0       0       0       0
  3115 ;;      Temps:          0       0       0       0       0       0       0
  3116 ;;      Totals:         2       0       0       0       0       0       0
  3117 ;;Total ram usage:        2 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; Hardware stack levels required when called:    4
  3120 ;; This function calls:
  3121 ;;		Nothing
  3122 ;; This function is called by:
  3123 ;;		_main
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           	psect	text17
  3128  0024EA                     __ptext17:
  3129                           	callstack 0
  3130  0024EA                     _getNewSequence:
  3131                           	callstack 0
  3132  0024EA  FFFF               	dw	65535	; assembler added errata NOP
  3133  0024EC                     
  3134                           ;usart.c: 44:     return(&newSequenceData);
  3135  0024EC  0EE5               	movlw	low _newSequenceData
  3136  0024EE  6E12               	movwf	?_getNewSequence^0,c
  3137  0024F0  0E00               	movlw	high _newSequenceData
  3138  0024F2  6E13               	movwf	(?_getNewSequence+1)^0,c
  3139  0024F4  0012               	return		;funcret
  3140  0024F6  FFFF               	dw	65535	; errata NOP
  3141  0024F8                     __end_of_getNewSequence:
  3142                           	callstack 0
  3143                           
  3144 ;; *************** function _executeData *****************
  3145 ;; Defined at:
  3146 ;;		line 105 in file "main.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;		None
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  data            2   11[BANK0 ] PTR struct .
  3151 ;;		 -> dataSequence(20), 
  3152 ;;  errCode         1   10[BANK0 ] unsigned char 
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  1    wreg      unsigned char 
  3155 ;; Registers used:
  3156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3162 ;;      Params:         0       0       0       0       0       0       0
  3163 ;;      Locals:         0       3       0       0       0       0       0
  3164 ;;      Temps:          0       2       0       0       0       0       0
  3165 ;;      Totals:         0       5       0       0       0       0       0
  3166 ;;Total ram usage:        5 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; Hardware stack levels required when called:    6
  3169 ;; This function calls:
  3170 ;;		_getData
  3171 ;;		_liftArm
  3172 ;;		_moveToPoint
  3173 ;;		_pickObject
  3174 ;;		_releaseObj
  3175 ;;		_rotateObj
  3176 ;;		_touchObject
  3177 ;;		_touchTherm
  3178 ;; This function is called by:
  3179 ;;		_main
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           	psect	text18
  3184  000E26                     __ptext18:
  3185                           	callstack 0
  3186  000E26                     _executeData:
  3187                           	callstack 0
  3188  000E26  FFFF               	dw	65535	; assembler added errata NOP
  3189  000E28                     
  3190                           ;main.c: 106:     t_sequence *data = getData();
  3191  000E28  EC7C  F012         	call	_getData	;wreg free
  3192  000E2C  C012  F0F8         	movff	?_getData,executeData@data
  3193  000E30  C013  F0F9         	movff	?_getData+1,executeData@data+1
  3194  000E34                     
  3195                           ;main.c: 112:     switch(data->feederLine){
  3196  000E34  EFC5  F007         	goto	l4401
  3197  000E38                     l4373:
  3198  000E38  FFFF               	dw	65535	; assembler added errata NOP
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;main.c: 115:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3202  000E3A  C043  F015         	movff	_posVector,moveToPoint@x1
  3203  000E3E  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3204  000E40  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3205  000E44  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3206  000E46  0E0D               	movlw	low _feeder1Pos
  3207  000E48  6EF6               	movwf	tblptrl,c
  3208  000E4A                     	if	1	;There is more than 1 active tblptr byte
  3209  000E4A  0E06               	movlw	high _feeder1Pos
  3210  000E4C  6EF7               	movwf	tblptrh,c
  3211  000E4E                     	endif
  3212  000E4E                     	if	0	;There are less than 3 active tblptr bytes
  3213  000E4E                     	endif
  3214  000E4E  0008               	tblrd		*
  3215  000E50  FFFF               	dw	65535	; errata NOP
  3216  000E52  50F5               	movf	tablat,w,c
  3217  000E54  6E19               	movwf	moveToPoint@x2^0,c
  3218  000E56  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3219  000E58  0E0E               	movlw	low (_feeder1Pos+1)
  3220  000E5A  6EF6               	movwf	tblptrl,c
  3221  000E5C  0E06               	movlw	high (_feeder1Pos+1)
  3222  000E5E  6EF7               	movwf	tblptrh,c
  3223  000E60                     	if	0	;tblptru may be non-zero
  3224  000E60                     	endif
  3225  000E60                     	if	0	;tblptru may be non-zero
  3226  000E60                     	endif
  3227  000E60  0008               	tblrd		*
  3228  000E62  FFFF               	dw	65535	; errata NOP
  3229  000E64  50F5               	movf	tablat,w,c
  3230  000E66  6E1B               	movwf	moveToPoint@y2^0,c
  3231  000E68  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3232  000E6A  EC22  F005         	call	_moveToPoint	;wreg free
  3233  000E6E  0100               	movlb	0	; () banked
  3234  000E70  6FF7               	movwf	executeData@errCode& (0+255),b
  3235  000E72                     
  3236                           ; BSR set to: 0
  3237                           ;main.c: 117:             posVector[0] = feeder1Pos[0];
  3238  000E72  0E0D               	movlw	low _feeder1Pos
  3239  000E74  6EF6               	movwf	tblptrl,c
  3240  000E76                     	if	1	;There is more than 1 active tblptr byte
  3241  000E76  0E06               	movlw	high _feeder1Pos
  3242  000E78  6EF7               	movwf	tblptrh,c
  3243  000E7A                     	endif
  3244  000E7A                     	if	0	;There are less than 3 active tblptr bytes
  3245  000E7A                     	endif
  3246  000E7A  0008               	tblrd		*
  3247  000E7C  FFFF               	dw	65535	; errata NOP
  3248  000E7E  CFF5 F043          	movff	tablat,_posVector
  3249  000E82                     
  3250                           ; BSR set to: 0
  3251                           ;main.c: 118:             posVector[1] = feeder1Pos[1];
  3252  000E82  0E0E               	movlw	low (_feeder1Pos+1)
  3253  000E84  6EF6               	movwf	tblptrl,c
  3254  000E86  0E06               	movlw	high (_feeder1Pos+1)
  3255  000E88  6EF7               	movwf	tblptrh,c
  3256  000E8A                     	if	0	;tblptru may be non-zero
  3257  000E8A                     	endif
  3258  000E8A                     	if	0	;tblptru may be non-zero
  3259  000E8A                     	endif
  3260  000E8A  0008               	tblrd		*
  3261  000E8C  FFFF               	dw	65535	; errata NOP
  3262  000E8E  CFF5 F044          	movff	tablat,_posVector+1
  3263                           
  3264                           ;main.c: 119:             break;
  3265  000E92  EFE9  F007         	goto	l4403
  3266  000E96                     l4379:
  3267  000E96  FFFF               	dw	65535	; assembler added errata NOP
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;main.c: 121:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3271  000E98  C043  F015         	movff	_posVector,moveToPoint@x1
  3272  000E9C  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3273  000E9E  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3274  000EA2  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3275  000EA4  0E0B               	movlw	low _feeder2Pos
  3276  000EA6  6EF6               	movwf	tblptrl,c
  3277  000EA8                     	if	1	;There is more than 1 active tblptr byte
  3278  000EA8  0E06               	movlw	high _feeder2Pos
  3279  000EAA  6EF7               	movwf	tblptrh,c
  3280  000EAC                     	endif
  3281  000EAC                     	if	0	;There are less than 3 active tblptr bytes
  3282  000EAC                     	endif
  3283  000EAC  0008               	tblrd		*
  3284  000EAE  FFFF               	dw	65535	; errata NOP
  3285  000EB0  50F5               	movf	tablat,w,c
  3286  000EB2  6E19               	movwf	moveToPoint@x2^0,c
  3287  000EB4  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3288  000EB6  0E0C               	movlw	low (_feeder2Pos+1)
  3289  000EB8  6EF6               	movwf	tblptrl,c
  3290  000EBA  0E06               	movlw	high (_feeder2Pos+1)
  3291  000EBC  6EF7               	movwf	tblptrh,c
  3292  000EBE                     	if	0	;tblptru may be non-zero
  3293  000EBE                     	endif
  3294  000EBE                     	if	0	;tblptru may be non-zero
  3295  000EBE                     	endif
  3296  000EBE  0008               	tblrd		*
  3297  000EC0  FFFF               	dw	65535	; errata NOP
  3298  000EC2  50F5               	movf	tablat,w,c
  3299  000EC4  6E1B               	movwf	moveToPoint@y2^0,c
  3300  000EC6  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3301  000EC8  EC22  F005         	call	_moveToPoint	;wreg free
  3302  000ECC  0100               	movlb	0	; () banked
  3303  000ECE  6FF7               	movwf	executeData@errCode& (0+255),b
  3304  000ED0                     
  3305                           ; BSR set to: 0
  3306                           ;main.c: 122:             posVector[0] = feeder2Pos[0];
  3307  000ED0  0E0B               	movlw	low _feeder2Pos
  3308  000ED2  6EF6               	movwf	tblptrl,c
  3309  000ED4                     	if	1	;There is more than 1 active tblptr byte
  3310  000ED4  0E06               	movlw	high _feeder2Pos
  3311  000ED6  6EF7               	movwf	tblptrh,c
  3312  000ED8                     	endif
  3313  000ED8                     	if	0	;There are less than 3 active tblptr bytes
  3314  000ED8                     	endif
  3315  000ED8  0008               	tblrd		*
  3316  000EDA  FFFF               	dw	65535	; errata NOP
  3317  000EDC  CFF5 F043          	movff	tablat,_posVector
  3318  000EE0                     
  3319                           ; BSR set to: 0
  3320                           ;main.c: 123:             posVector[1] = feeder2Pos[1];
  3321  000EE0  0E0C               	movlw	low (_feeder2Pos+1)
  3322  000EE2  6EF6               	movwf	tblptrl,c
  3323  000EE4  0E06               	movlw	high (_feeder2Pos+1)
  3324  000EE6  6EF7               	movwf	tblptrh,c
  3325  000EE8                     	if	0	;tblptru may be non-zero
  3326  000EE8                     	endif
  3327  000EE8                     	if	0	;tblptru may be non-zero
  3328  000EE8                     	endif
  3329  000EE8  0008               	tblrd		*
  3330  000EEA  FFFF               	dw	65535	; errata NOP
  3331  000EEC  CFF5 F044          	movff	tablat,_posVector+1
  3332                           
  3333                           ;main.c: 124:             break;
  3334  000EF0  EFE9  F007         	goto	l4403
  3335  000EF4                     l4385:
  3336  000EF4  FFFF               	dw	65535	; assembler added errata NOP
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;main.c: 126:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3340  000EF6  C043  F015         	movff	_posVector,moveToPoint@x1
  3341  000EFA  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3342  000EFC  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3343  000F00  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3344  000F02  0E09               	movlw	low _feeder3Pos
  3345  000F04  6EF6               	movwf	tblptrl,c
  3346  000F06                     	if	1	;There is more than 1 active tblptr byte
  3347  000F06  0E06               	movlw	high _feeder3Pos
  3348  000F08  6EF7               	movwf	tblptrh,c
  3349  000F0A                     	endif
  3350  000F0A                     	if	0	;There are less than 3 active tblptr bytes
  3351  000F0A                     	endif
  3352  000F0A  0008               	tblrd		*
  3353  000F0C  FFFF               	dw	65535	; errata NOP
  3354  000F0E  50F5               	movf	tablat,w,c
  3355  000F10  6E19               	movwf	moveToPoint@x2^0,c
  3356  000F12  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3357  000F14  0E0A               	movlw	low (_feeder3Pos+1)
  3358  000F16  6EF6               	movwf	tblptrl,c
  3359  000F18  0E06               	movlw	high (_feeder3Pos+1)
  3360  000F1A  6EF7               	movwf	tblptrh,c
  3361  000F1C                     	if	0	;tblptru may be non-zero
  3362  000F1C                     	endif
  3363  000F1C                     	if	0	;tblptru may be non-zero
  3364  000F1C                     	endif
  3365  000F1C  0008               	tblrd		*
  3366  000F1E  FFFF               	dw	65535	; errata NOP
  3367  000F20  50F5               	movf	tablat,w,c
  3368  000F22  6E1B               	movwf	moveToPoint@y2^0,c
  3369  000F24  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3370  000F26  EC22  F005         	call	_moveToPoint	;wreg free
  3371  000F2A  0100               	movlb	0	; () banked
  3372  000F2C  6FF7               	movwf	executeData@errCode& (0+255),b
  3373  000F2E                     
  3374                           ; BSR set to: 0
  3375                           ;main.c: 127:             posVector[0] = feeder3Pos[0];
  3376  000F2E  0E09               	movlw	low _feeder3Pos
  3377  000F30  6EF6               	movwf	tblptrl,c
  3378  000F32                     	if	1	;There is more than 1 active tblptr byte
  3379  000F32  0E06               	movlw	high _feeder3Pos
  3380  000F34  6EF7               	movwf	tblptrh,c
  3381  000F36                     	endif
  3382  000F36                     	if	0	;There are less than 3 active tblptr bytes
  3383  000F36                     	endif
  3384  000F36  0008               	tblrd		*
  3385  000F38  FFFF               	dw	65535	; errata NOP
  3386  000F3A  CFF5 F043          	movff	tablat,_posVector
  3387  000F3E                     
  3388                           ; BSR set to: 0
  3389                           ;main.c: 128:             posVector[1] = feeder3Pos[1];
  3390  000F3E  0E0A               	movlw	low (_feeder3Pos+1)
  3391  000F40  6EF6               	movwf	tblptrl,c
  3392  000F42  0E06               	movlw	high (_feeder3Pos+1)
  3393  000F44  6EF7               	movwf	tblptrh,c
  3394  000F46                     	if	0	;tblptru may be non-zero
  3395  000F46                     	endif
  3396  000F46                     	if	0	;tblptru may be non-zero
  3397  000F46                     	endif
  3398  000F46  0008               	tblrd		*
  3399  000F48  FFFF               	dw	65535	; errata NOP
  3400  000F4A  CFF5 F044          	movff	tablat,_posVector+1
  3401                           
  3402                           ;main.c: 129:             break;
  3403  000F4E  EFE9  F007         	goto	l4403
  3404  000F52                     l4391:
  3405  000F52  FFFF               	dw	65535	; assembler added errata NOP
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;main.c: 133:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3409  000F54  C043  F015         	movff	_posVector,moveToPoint@x1
  3410  000F58  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3411  000F5A  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3412  000F5E  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3413  000F60  C04C  F019         	movff	_newFeeder,moveToPoint@x2
  3414  000F64  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3415  000F66  C04D  F01B         	movff	_newFeeder+1,moveToPoint@y2
  3416  000F6A  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3417  000F6C  EC22  F005         	call	_moveToPoint	;wreg free
  3418  000F70  0100               	movlb	0	; () banked
  3419  000F72  6FF7               	movwf	executeData@errCode& (0+255),b
  3420  000F74                     
  3421                           ; BSR set to: 0
  3422                           ;main.c: 134:             posVector[0] = newFeeder[0];
  3423  000F74  C04C  F043         	movff	_newFeeder,_posVector
  3424  000F78                     
  3425                           ; BSR set to: 0
  3426                           ;main.c: 135:             posVector[1] = newFeeder[1];
  3427  000F78  C04D  F044         	movff	_newFeeder+1,_posVector+1
  3428                           
  3429                           ;main.c: 136:             break;
  3430  000F7C  EFE9  F007         	goto	l4403
  3431  000F80                     l4397:
  3432  000F80  FFFF               	dw	65535	; assembler added errata NOP
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;main.c: 140:             errCode = 1;
  3436  000F82  0E01               	movlw	1
  3437  000F84  6FF7               	movwf	executeData@errCode& (0+255),b
  3438                           
  3439                           ;main.c: 141:             break;
  3440  000F86  EFE9  F007         	goto	l4403
  3441  000F8A                     l4401:
  3442  000F8A  FFFF               	dw	65535	; assembler added errata NOP
  3443  000F8C  C0F8  FFD9         	movff	executeData@data,fsr2l
  3444  000F90  C0F9  FFDA         	movff	executeData@data+1,fsr2h
  3445  000F94  50DF               	movf	indf2,w,c
  3446  000F96  0100               	movlb	0	; () banked
  3447  000F98  6FF5               	movwf	??_executeData& (0+255),b
  3448  000F9A  6BF6               	clrf	(??_executeData+1)& (0+255),b
  3449                           
  3450                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3451                           ; Switch size 1, requested type "simple"
  3452                           ; Number of cases is 1, Range of values is 0 to 0
  3453                           ; switch strategies available:
  3454                           ; Name         Instructions Cycles
  3455                           ; simple_byte            4     3 (average)
  3456                           ;	Chosen strategy is simple_byte
  3457  000F9C  51F6               	movf	(??_executeData+1)& (0+255),w,b
  3458  000F9E  0A00               	xorlw	0	; case 0
  3459  000FA0  B4D8               	btfsc	status,2,c
  3460  000FA2  EFD5  F007         	goto	l4699
  3461  000FA6  EFC0  F007         	goto	l4397
  3462  000FAA                     l4699:
  3463  000FAA  FFFF               	dw	65535	; assembler added errata NOP
  3464                           
  3465                           ; BSR set to: 0
  3466                           ; Switch size 1, requested type "simple"
  3467                           ; Number of cases is 4, Range of values is 0 to 255
  3468                           ; switch strategies available:
  3469                           ; Name         Instructions Cycles
  3470                           ; simple_byte           13     7 (average)
  3471                           ;	Chosen strategy is simple_byte
  3472  000FAC  51F5               	movf	??_executeData& (0+255),w,b
  3473  000FAE  0A00               	xorlw	0	; case 0
  3474  000FB0  B4D8               	btfsc	status,2,c
  3475  000FB2  EF1C  F007         	goto	l4373
  3476  000FB6  0A01               	xorlw	1	; case 1
  3477  000FB8  B4D8               	btfsc	status,2,c
  3478  000FBA  EF4B  F007         	goto	l4379
  3479  000FBE  0A03               	xorlw	3	; case 2
  3480  000FC0  B4D8               	btfsc	status,2,c
  3481  000FC2  EF7A  F007         	goto	l4385
  3482  000FC6  0AFD               	xorlw	253	; case 255
  3483  000FC8  B4D8               	btfsc	status,2,c
  3484  000FCA  EFA9  F007         	goto	l4391
  3485  000FCE  EFC0  F007         	goto	l4397
  3486  000FD2                     l4403:
  3487  000FD2  FFFF               	dw	65535	; assembler added errata NOP
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;main.c: 145:     if(!errCode){
  3491  000FD4  51F7               	movf	executeData@errCode& (0+255),w,b
  3492  000FD6  A4D8               	btfss	status,2,c
  3493  000FD8  EFF0  F007         	goto	u3821
  3494  000FDC  EFF3  F007         	goto	u3820
  3495  000FE0                     u3821:
  3496  000FE0  FFFF               	dw	65535	; assembler added errata NOP
  3497  000FE2  EF53  F008         	goto	l4429
  3498  000FE6                     u3820:
  3499  000FE6  FFFF               	dw	65535	; assembler added errata NOP
  3500  000FE8                     
  3501                           ; BSR set to: 0
  3502  000FE8  ECCE  F00D         	call	_touchObject	;wreg free
  3503  000FEC                     
  3504                           ;main.c: 150:         pickObject();
  3505  000FEC  ECF3  F011         	call	_pickObject	;wreg free
  3506  000FF0  EC6C  F010         	call	_liftArm	;wreg free
  3507  000FF4  C043  F015         	movff	_posVector,moveToPoint@x1
  3508  000FF8  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3509  000FFA  C044  F017         	movff	_posVector+1,moveToPoint@y1
  3510  000FFE  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3511  001000  0100               	movlb	0	; () banked
  3512  001002  EE20 F001          	lfsr	2,1
  3513  001006  51F8               	movf	executeData@data& (0+255),w,b
  3514  001008  26D9               	addwf	fsr2l,f,c
  3515  00100A  51F9               	movf	(executeData@data+1)& (0+255),w,b
  3516  00100C  22DA               	addwfc	fsr2h,f,c
  3517  00100E  50DF               	movf	indf2,w,c
  3518  001010  6FF5               	movwf	??_executeData& (0+255),b
  3519  001012  51F5               	movf	??_executeData& (0+255),w,b
  3520  001014  6E19               	movwf	moveToPoint@x2^0,c
  3521  001016  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3522  001018  EE20 F002          	lfsr	2,2
  3523  00101C  51F8               	movf	executeData@data& (0+255),w,b
  3524  00101E  26D9               	addwf	fsr2l,f,c
  3525  001020  51F9               	movf	(executeData@data+1)& (0+255),w,b
  3526  001022  22DA               	addwfc	fsr2h,f,c
  3527  001024  50DF               	movf	indf2,w,c
  3528  001026  6FF6               	movwf	(??_executeData+1)& (0+255),b
  3529  001028  51F6               	movf	(??_executeData+1)& (0+255),w,b
  3530  00102A  6E1B               	movwf	moveToPoint@y2^0,c
  3531  00102C  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3532  00102E  EC22  F005         	call	_moveToPoint	;wreg free
  3533  001032                     
  3534                           ;main.c: 157:         posVector[0] = data->posX;
  3535  001032  0100               	movlb	0	; () banked
  3536  001034  EE20 F001          	lfsr	2,1
  3537  001038  51F8               	movf	executeData@data& (0+255),w,b
  3538  00103A  26D9               	addwf	fsr2l,f,c
  3539  00103C  51F9               	movf	(executeData@data+1)& (0+255),w,b
  3540  00103E  22DA               	addwfc	fsr2h,f,c
  3541  001040  50DF               	movf	indf2,w,c
  3542  001042  6E43               	movwf	_posVector^0,c
  3543  001044                     
  3544                           ; BSR set to: 0
  3545                           ;main.c: 158:         posVector[1] = data->posY;
  3546  001044  EE20 F002          	lfsr	2,2
  3547  001048  51F8               	movf	executeData@data& (0+255),w,b
  3548  00104A  26D9               	addwf	fsr2l,f,c
  3549  00104C  51F9               	movf	(executeData@data+1)& (0+255),w,b
  3550  00104E  22DA               	addwfc	fsr2h,f,c
  3551  001050  50DF               	movf	indf2,w,c
  3552  001052  6E44               	movwf	(_posVector+1)^0,c
  3553  001054                     
  3554                           ; BSR set to: 0
  3555                           ;main.c: 161:         rotAngle = data->rotation - rotAngle;
  3556  001054  EE20 F003          	lfsr	2,3
  3557  001058  51F8               	movf	executeData@data& (0+255),w,b
  3558  00105A  26D9               	addwf	fsr2l,f,c
  3559  00105C  51F9               	movf	(executeData@data+1)& (0+255),w,b
  3560  00105E  22DA               	addwfc	fsr2h,f,c
  3561  001060  50DF               	movf	indf2,w,c
  3562  001062  6FF5               	movwf	??_executeData& (0+255),b
  3563  001064  504E               	movf	_rotAngle^0,w,c
  3564  001066  5DF5               	subwf	??_executeData& (0+255),w,b
  3565  001068  6E4E               	movwf	_rotAngle^0,c
  3566  00106A  504F               	movf	(_rotAngle+1)^0,w,c
  3567  00106C  A0D8               	btfss	status,0,c
  3568  00106E  284F               	incf	(_rotAngle+1)^0,w,c
  3569  001070  6A4F               	clrf	(_rotAngle+1)^0,c
  3570  001072  5E4F               	subwf	(_rotAngle+1)^0,f,c
  3571                           
  3572                           ;main.c: 163:         if(rotAngle < 0){
  3573  001074  BE4F               	btfsc	(_rotAngle+1)^0,7,c
  3574  001076  EF42  F008         	goto	u3830
  3575  00107A  EF3F  F008         	goto	u3831
  3576  00107E                     u3831:
  3577  00107E  FFFF               	dw	65535	; assembler added errata NOP
  3578  001080  EF47  F008         	goto	l4421
  3579  001084                     u3830:
  3580  001084  FFFF               	dw	65535	; assembler added errata NOP
  3581  001086                     
  3582                           ; BSR set to: 0
  3583                           ;main.c: 164:             rotAngle += 360;
  3584  001086  0E68               	movlw	104
  3585  001088  264E               	addwf	_rotAngle^0,f,c
  3586  00108A  0E01               	movlw	1
  3587  00108C  224F               	addwfc	(_rotAngle+1)^0,f,c
  3588  00108E                     l4421:
  3589  00108E  FFFF               	dw	65535	; assembler added errata NOP
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;main.c: 166:         rotateObj(rotAngle);
  3593  001090  504E               	movf	_rotAngle^0,w,c
  3594  001092  ECFE  F00F         	call	_rotateObj
  3595  001096  EC36  F00D         	call	_touchTherm	;wreg free
  3596  00109A                     
  3597                           ;main.c: 171:         releaseObj();
  3598  00109A  ECDD  F011         	call	_releaseObj	;wreg free
  3599  00109E                     
  3600                           ;main.c: 174:         errCode = liftArm();
  3601  00109E  EC6C  F010         	call	_liftArm	;wreg free
  3602  0010A2  0100               	movlb	0	; () banked
  3603  0010A4  6FF7               	movwf	executeData@errCode& (0+255),b
  3604  0010A6                     l4429:
  3605  0010A6  FFFF               	dw	65535	; assembler added errata NOP
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;main.c: 177:     return(errCode);
  3609  0010A8  51F7               	movf	executeData@errCode& (0+255),w,b
  3610  0010AA                     
  3611                           ; BSR set to: 0
  3612  0010AA  0012               	return		;funcret
  3613  0010AC  FFFF               	dw	65535	; errata NOP
  3614  0010AE                     __end_of_executeData:
  3615                           	callstack 0
  3616                           
  3617 ;; *************** function _touchTherm *****************
  3618 ;; Defined at:
  3619 ;;		line 584 in file "motors.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;		None
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;		None
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  1    wreg      unsigned char 
  3626 ;; Registers used:
  3627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3633 ;;      Params:         0       0       0       0       0       0       0
  3634 ;;      Locals:         0       0       0       0       0       0       0
  3635 ;;      Temps:          0       0       0       0       0       0       0
  3636 ;;      Totals:         0       0       0       0       0       0       0
  3637 ;;Total ram usage:        0 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    5
  3640 ;; This function calls:
  3641 ;;		_resetStep
  3642 ;;		_resetTherm
  3643 ;;		_returnTherm
  3644 ;;		_startADC
  3645 ;;		_stepMade
  3646 ;;		_stopADC
  3647 ;; This function is called by:
  3648 ;;		_executeData
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           	psect	text19
  3653  001A6C                     __ptext19:
  3654                           	callstack 0
  3655  001A6C                     _touchTherm:
  3656                           	callstack 0
  3657  001A6C  FFFF               	dw	65535	; assembler added errata NOP
  3658  001A6E                     
  3659                           ;motors.c: 590:     motCounter[2][1] = 1;
  3660  001A6E  0E00               	movlw	0
  3661  001A70  6E69               	movwf	(_motCounter+11)^0,c
  3662  001A72  0E01               	movlw	1
  3663  001A74  6E68               	movwf	(_motCounter+10)^0,c
  3664  001A76                     
  3665                           ;motors.c: 593:     T2CONbits.TMR2ON = 1;
  3666  001A76  84CA               	bsf	202,2,c	;volatile
  3667                           
  3668                           ;motors.c: 595:     tm0Error = 0;
  3669  001A78  0E00               	movlw	0
  3670  001A7A  6E51               	movwf	(_tm0Error+1)^0,c
  3671  001A7C  0E00               	movlw	0
  3672  001A7E  6E50               	movwf	_tm0Error^0,c
  3673                           
  3674                           ;motors.c: 596:     tm0Limit = 250;
  3675  001A80  0EFA               	movlw	250
  3676  001A82  6E5D               	movwf	_tm0Limit^0,c
  3677  001A84                     
  3678                           ;motors.c: 597:     T0CONbits.TMR0ON = 1;
  3679  001A84  8ED5               	bsf	213,7,c	;volatile
  3680  001A86                     
  3681                           ;motors.c: 600:     startADC();
  3682  001A86  ECB4  F012         	call	_startADC	;wreg free
  3683                           
  3684                           ;motors.c: 603:     while(!returnTherm() || PORTDbits.RD7){
  3685  001A8A  EF98  F00D         	goto	l4071
  3686  001A8E                     l4055:
  3687  001A8E  FFFF               	dw	65535	; assembler added errata NOP
  3688                           
  3689                           ;motors.c: 606:         if(tm0Error){
  3690  001A90  5050               	movf	_tm0Error^0,w,c
  3691  001A92  1051               	iorwf	(_tm0Error+1)^0,w,c
  3692  001A94  B4D8               	btfsc	status,2,c
  3693  001A96  EF4F  F00D         	goto	u3481
  3694  001A9A  EF52  F00D         	goto	u3480
  3695  001A9E                     u3481:
  3696  001A9E  FFFF               	dw	65535	; assembler added errata NOP
  3697  001AA0  EF59  F00D         	goto	l4059
  3698  001AA4                     u3480:
  3699  001AA4  FFFF               	dw	65535	; assembler added errata NOP
  3700  001AA6                     
  3701                           ;motors.c: 611:             tm0Error = 6;
  3702  001AA6  0E00               	movlw	0
  3703  001AA8  6E51               	movwf	(_tm0Error+1)^0,c
  3704  001AAA  0E06               	movlw	6
  3705  001AAC  6E50               	movwf	_tm0Error^0,c
  3706                           
  3707                           ;motors.c: 612:             break;
  3708  001AAE  EFAE  F00D         	goto	l4075
  3709  001AB2                     l4059:
  3710  001AB2  FFFF               	dw	65535	; assembler added errata NOP
  3711                           
  3712                           ;motors.c: 620:             motCounter[2][0] += motCounter[2][1];
  3713  001AB4  EE20  F068         	lfsr	2,_motCounter+10
  3714  001AB8  50DE               	movf	postinc2,w,c
  3715  001ABA  2666               	addwf	(_motCounter+8)^0,f,c
  3716  001ABC  50DD               	movf	postdec2,w,c
  3717  001ABE  2267               	addwfc	(_motCounter+9)^0,f,c
  3718  001AC0                     
  3719                           ;motors.c: 621:             if(motCounter[2][0] > 3){
  3720  001AC0  BE67               	btfsc	(_motCounter+9)^0,7,c
  3721  001AC2  EF6C  F00D         	goto	u3491
  3722  001AC6  5067               	movf	(_motCounter+9)^0,w,c
  3723  001AC8  E10A               	bnz	u3490
  3724  001ACA  0E04               	movlw	4
  3725  001ACC  5C66               	subwf	(_motCounter+8)^0,w,c
  3726  001ACE  A0D8               	btfss	status,0,c
  3727  001AD0  EF6C  F00D         	goto	u3491
  3728  001AD4  EF6F  F00D         	goto	u3490
  3729  001AD8                     u3491:
  3730  001AD8  FFFF               	dw	65535	; assembler added errata NOP
  3731  001ADA  EF74  F00D         	goto	l4065
  3732  001ADE                     u3490:
  3733  001ADE  FFFF               	dw	65535	; assembler added errata NOP
  3734  001AE0                     
  3735                           ;motors.c: 622:                 motCounter[2][0] = 0;
  3736  001AE0  0E00               	movlw	0
  3737  001AE2  6E67               	movwf	(_motCounter+9)^0,c
  3738  001AE4  0E00               	movlw	0
  3739  001AE6  6E66               	movwf	(_motCounter+8)^0,c
  3740  001AE8                     l4065:
  3741  001AE8  FFFF               	dw	65535	; assembler added errata NOP
  3742                           
  3743                           ;motors.c: 625:             LATC = stepMot3[motCounter[2][0]];
  3744  001AEA  0E84               	movlw	low _stepMot3
  3745  001AEC  2466               	addwf	(_motCounter+8)^0,w,c
  3746  001AEE  6ED9               	movwf	fsr2l,c
  3747  001AF0  0E00               	movlw	high _stepMot3
  3748  001AF2  2067               	addwfc	(_motCounter+9)^0,w,c
  3749  001AF4  6EDA               	movwf	fsr2h,c
  3750  001AF6  50DF               	movf	indf2,w,c
  3751  001AF8  6E8B               	movwf	139,c	;volatile
  3752  001AFA                     l4067:
  3753  001AFA  FFFF               	dw	65535	; assembler added errata NOP
  3754  001AFC  EC4A  F012         	call	_stepMade	;wreg free
  3755  001B00  5012               	movf	?_stepMade^0,w,c
  3756  001B02  1013               	iorwf	(?_stepMade+1)^0,w,c
  3757  001B04  B4D8               	btfsc	status,2,c
  3758  001B06  EF87  F00D         	goto	u3501
  3759  001B0A  EF8A  F00D         	goto	u3500
  3760  001B0E                     u3501:
  3761  001B0E  FFFF               	dw	65535	; assembler added errata NOP
  3762  001B10  EF7D  F00D         	goto	l4067
  3763  001B14                     u3500:
  3764  001B14  FFFF               	dw	65535	; assembler added errata NOP
  3765  001B16                     l4069:
  3766  001B16  FFFF               	dw	65535	; assembler added errata NOP
  3767  001B18  EC4A  F012         	call	_stepMade	;wreg free
  3768  001B1C  5012               	movf	?_stepMade^0,w,c
  3769  001B1E  1013               	iorwf	(?_stepMade+1)^0,w,c
  3770  001B20  B4D8               	btfsc	status,2,c
  3771  001B22  EF95  F00D         	goto	u3511
  3772  001B26  EF98  F00D         	goto	u3510
  3773  001B2A                     u3511:
  3774  001B2A  FFFF               	dw	65535	; assembler added errata NOP
  3775  001B2C  EF8B  F00D         	goto	l4069
  3776  001B30                     u3510:
  3777  001B30                     l4071:
  3778  001B30  FFFF               	dw	65535	; assembler added errata NOP
  3779                           
  3780                           ;motors.c: 603:     while(!returnTherm() || PORTDbits.RD7){
  3781  001B32  EC98  F012         	call	_returnTherm	;wreg free
  3782  001B36  5012               	movf	?_returnTherm^0,w,c
  3783  001B38  1013               	iorwf	(?_returnTherm+1)^0,w,c
  3784  001B3A  B4D8               	btfsc	status,2,c
  3785  001B3C  EFA2  F00D         	goto	u3521
  3786  001B40  EFA5  F00D         	goto	u3520
  3787  001B44                     u3521:
  3788  001B44  FFFF               	dw	65535	; assembler added errata NOP
  3789  001B46  EF47  F00D         	goto	l4055
  3790  001B4A                     u3520:
  3791  001B4A  FFFF               	dw	65535	; assembler added errata NOP
  3792  001B4C  BE83               	btfsc	131,7,c	;volatile
  3793  001B4E  EFAB  F00D         	goto	u3531
  3794  001B52  EFAE  F00D         	goto	u3530
  3795  001B56                     u3531:
  3796  001B56  FFFF               	dw	65535	; assembler added errata NOP
  3797  001B58  EF47  F00D         	goto	l4055
  3798  001B5C                     u3530:
  3799  001B5C                     l4075:
  3800  001B5C  FFFF               	dw	65535	; assembler added errata NOP
  3801                           
  3802                           ;motors.c: 642:     stopADC();
  3803  001B5E  ECDE  F012         	call	_stopADC	;wreg free
  3804  001B62                     
  3805                           ;motors.c: 645:     resetTherm();
  3806  001B62  ECAF  F012         	call	_resetTherm	;wreg free
  3807  001B66                     
  3808                           ;motors.c: 648:     T0CONbits.TMR0ON = 0;
  3809  001B66  9ED5               	bcf	213,7,c	;volatile
  3810  001B68                     
  3811                           ;motors.c: 649:     T2CONbits.TMR2ON = 0;
  3812  001B68  94CA               	bcf	202,2,c	;volatile
  3813                           
  3814                           ;motors.c: 651:     TMR0 = 0;
  3815  001B6A  0E00               	movlw	0
  3816  001B6C  6ED7               	movwf	215,c	;volatile
  3817  001B6E  0E00               	movlw	0
  3818  001B70  6ED6               	movwf	214,c	;volatile
  3819                           
  3820                           ;motors.c: 652:     TMR2 = 0;
  3821  001B72  0E00               	movlw	0
  3822  001B74  6ECC               	movwf	204,c	;volatile
  3823  001B76                     
  3824                           ;motors.c: 655:     resetStep();
  3825  001B76  ECBE  F012         	call	_resetStep	;wreg free
  3826  001B7A                     
  3827                           ;motors.c: 658:     if(PORTDbits.RD7){
  3828  001B7A  AE83               	btfss	131,7,c	;volatile
  3829  001B7C  EFC2  F00D         	goto	u3541
  3830  001B80  EFC5  F00D         	goto	u3540
  3831  001B84                     u3541:
  3832  001B84  FFFF               	dw	65535	; assembler added errata NOP
  3833  001B86  EFCA  F00D         	goto	l225
  3834  001B8A                     u3540:
  3835  001B8A  FFFF               	dw	65535	; assembler added errata NOP
  3836  001B8C                     
  3837                           ;motors.c: 659:         tm0Error = 2;
  3838  001B8C  0E00               	movlw	0
  3839  001B8E  6E51               	movwf	(_tm0Error+1)^0,c
  3840  001B90  0E02               	movlw	2
  3841  001B92  6E50               	movwf	_tm0Error^0,c
  3842  001B94                     l225:
  3843  001B94  FFFF               	dw	65535	; assembler added errata NOP
  3844                           
  3845                           ;motors.c: 662:     return(tm0Error);
  3846  001B96  5050               	movf	_tm0Error^0,w,c
  3847  001B98  0012               	return		;funcret
  3848  001B9A  FFFF               	dw	65535	; errata NOP
  3849  001B9C                     __end_of_touchTherm:
  3850                           	callstack 0
  3851                           
  3852 ;; *************** function _returnTherm *****************
  3853 ;; Defined at:
  3854 ;;		line 58 in file "adc.c"
  3855 ;; Parameters:    Size  Location     Type
  3856 ;;		None
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;		None
  3859 ;; Return value:  Size  Location     Type
  3860 ;;                  2   17[COMRAM] unsigned int 
  3861 ;; Registers used:
  3862 ;;		None
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/0
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3868 ;;      Params:         2       0       0       0       0       0       0
  3869 ;;      Locals:         0       0       0       0       0       0       0
  3870 ;;      Temps:          0       0       0       0       0       0       0
  3871 ;;      Totals:         2       0       0       0       0       0       0
  3872 ;;Total ram usage:        2 bytes
  3873 ;; Hardware stack levels used:    1
  3874 ;; Hardware stack levels required when called:    4
  3875 ;; This function calls:
  3876 ;;		Nothing
  3877 ;; This function is called by:
  3878 ;;		_touchTherm
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           	psect	text20
  3883  002530                     __ptext20:
  3884                           	callstack 0
  3885  002530                     _returnTherm:
  3886                           	callstack 0
  3887  002530  FFFF               	dw	65535	; assembler added errata NOP
  3888  002532                     
  3889                           ;adc.c: 59:     return therm_rel;
  3890  002532  C05B  F012         	movff	_therm_rel,?_returnTherm	;volatile
  3891  002536  6A13               	clrf	(?_returnTherm+1)^0,c
  3892  002538  0012               	return		;funcret
  3893  00253A  FFFF               	dw	65535	; errata NOP
  3894  00253C                     __end_of_returnTherm:
  3895                           	callstack 0
  3896                           
  3897 ;; *************** function _resetTherm *****************
  3898 ;; Defined at:
  3899 ;;		line 72 in file "adc.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;		None
  3902 ;; Auto vars:     Size  Location     Type
  3903 ;;		None
  3904 ;; Return value:  Size  Location     Type
  3905 ;;                  1    wreg      void 
  3906 ;; Registers used:
  3907 ;;		wreg, status,2
  3908 ;; Tracked objects:
  3909 ;;		On entry : 0/0
  3910 ;;		On exit  : 0/0
  3911 ;;		Unchanged: 0/0
  3912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3913 ;;      Params:         0       0       0       0       0       0       0
  3914 ;;      Locals:         0       0       0       0       0       0       0
  3915 ;;      Temps:          0       0       0       0       0       0       0
  3916 ;;      Totals:         0       0       0       0       0       0       0
  3917 ;;Total ram usage:        0 bytes
  3918 ;; Hardware stack levels used:    1
  3919 ;; Hardware stack levels required when called:    4
  3920 ;; This function calls:
  3921 ;;		Nothing
  3922 ;; This function is called by:
  3923 ;;		_touchTherm
  3924 ;; This function uses a non-reentrant model
  3925 ;;
  3926                           
  3927                           	psect	text21
  3928  00255E                     __ptext21:
  3929                           	callstack 0
  3930  00255E                     _resetTherm:
  3931                           	callstack 0
  3932  00255E  FFFF               	dw	65535	; assembler added errata NOP
  3933  002560                     
  3934                           ;adc.c: 73:     therm_rel = 0;
  3935  002560  0E00               	movlw	0
  3936  002562  6E5B               	movwf	_therm_rel^0,c	;volatile
  3937  002564  0012               	return		;funcret
  3938  002566  FFFF               	dw	65535	; errata NOP
  3939  002568                     __end_of_resetTherm:
  3940                           	callstack 0
  3941                           
  3942 ;; *************** function _touchObject *****************
  3943 ;; Defined at:
  3944 ;;		line 495 in file "motors.c"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;		None
  3947 ;; Auto vars:     Size  Location     Type
  3948 ;;		None
  3949 ;; Return value:  Size  Location     Type
  3950 ;;                  1    wreg      unsigned char 
  3951 ;; Registers used:
  3952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3953 ;; Tracked objects:
  3954 ;;		On entry : 0/0
  3955 ;;		On exit  : 0/0
  3956 ;;		Unchanged: 0/0
  3957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3958 ;;      Params:         0       0       0       0       0       0       0
  3959 ;;      Locals:         0       0       0       0       0       0       0
  3960 ;;      Temps:          0       0       0       0       0       0       0
  3961 ;;      Totals:         0       0       0       0       0       0       0
  3962 ;;Total ram usage:        0 bytes
  3963 ;; Hardware stack levels used:    1
  3964 ;; Hardware stack levels required when called:    5
  3965 ;; This function calls:
  3966 ;;		_resetStep
  3967 ;;		_resetTouch
  3968 ;;		_returnTouch
  3969 ;;		_startADC
  3970 ;;		_stepMade
  3971 ;;		_stopADC
  3972 ;; This function is called by:
  3973 ;;		_executeData
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977                           	psect	text22
  3978  001B9C                     __ptext22:
  3979                           	callstack 0
  3980  001B9C                     _touchObject:
  3981                           	callstack 0
  3982  001B9C  FFFF               	dw	65535	; assembler added errata NOP
  3983  001B9E                     
  3984                           ;motors.c: 501:     motCounter[2][1] = 1;
  3985  001B9E  0E00               	movlw	0
  3986  001BA0  6E69               	movwf	(_motCounter+11)^0,c
  3987  001BA2  0E01               	movlw	1
  3988  001BA4  6E68               	movwf	(_motCounter+10)^0,c
  3989  001BA6                     
  3990                           ;motors.c: 504:     T2CONbits.TMR2ON = 1;
  3991  001BA6  84CA               	bsf	202,2,c	;volatile
  3992                           
  3993                           ;motors.c: 506:     tm0Error = 0;
  3994  001BA8  0E00               	movlw	0
  3995  001BAA  6E51               	movwf	(_tm0Error+1)^0,c
  3996  001BAC  0E00               	movlw	0
  3997  001BAE  6E50               	movwf	_tm0Error^0,c
  3998                           
  3999                           ;motors.c: 507:     tm0Limit = 250;
  4000  001BB0  0EFA               	movlw	250
  4001  001BB2  6E5D               	movwf	_tm0Limit^0,c
  4002  001BB4                     
  4003                           ;motors.c: 508:     T0CONbits.TMR0ON = 1;
  4004  001BB4  8ED5               	bsf	213,7,c	;volatile
  4005  001BB6                     
  4006                           ;motors.c: 511:     startADC();
  4007  001BB6  ECB4  F012         	call	_startADC	;wreg free
  4008                           
  4009                           ;motors.c: 514:     while(!returnTouch() || PORTDbits.RD7){
  4010  001BBA  EF30  F00E         	goto	l4027
  4011  001BBE                     l4011:
  4012  001BBE  FFFF               	dw	65535	; assembler added errata NOP
  4013                           
  4014                           ;motors.c: 517:         if(tm0Error){
  4015  001BC0  5050               	movf	_tm0Error^0,w,c
  4016  001BC2  1051               	iorwf	(_tm0Error+1)^0,w,c
  4017  001BC4  B4D8               	btfsc	status,2,c
  4018  001BC6  EFE7  F00D         	goto	u3411
  4019  001BCA  EFEA  F00D         	goto	u3410
  4020  001BCE                     u3411:
  4021  001BCE  FFFF               	dw	65535	; assembler added errata NOP
  4022  001BD0  EFF1  F00D         	goto	l4015
  4023  001BD4                     u3410:
  4024  001BD4  FFFF               	dw	65535	; assembler added errata NOP
  4025  001BD6                     
  4026                           ;motors.c: 522:             tm0Error = 6;
  4027  001BD6  0E00               	movlw	0
  4028  001BD8  6E51               	movwf	(_tm0Error+1)^0,c
  4029  001BDA  0E06               	movlw	6
  4030  001BDC  6E50               	movwf	_tm0Error^0,c
  4031                           
  4032                           ;motors.c: 523:             break;
  4033  001BDE  EF46  F00E         	goto	l4031
  4034  001BE2                     l4015:
  4035  001BE2  FFFF               	dw	65535	; assembler added errata NOP
  4036                           
  4037                           ;motors.c: 531:             motCounter[2][0] += motCounter[2][1];
  4038  001BE4  EE20  F068         	lfsr	2,_motCounter+10
  4039  001BE8  50DE               	movf	postinc2,w,c
  4040  001BEA  2666               	addwf	(_motCounter+8)^0,f,c
  4041  001BEC  50DD               	movf	postdec2,w,c
  4042  001BEE  2267               	addwfc	(_motCounter+9)^0,f,c
  4043  001BF0                     
  4044                           ;motors.c: 532:             if(motCounter[2][0] > 3){
  4045  001BF0  BE67               	btfsc	(_motCounter+9)^0,7,c
  4046  001BF2  EF04  F00E         	goto	u3421
  4047  001BF6  5067               	movf	(_motCounter+9)^0,w,c
  4048  001BF8  E10A               	bnz	u3420
  4049  001BFA  0E04               	movlw	4
  4050  001BFC  5C66               	subwf	(_motCounter+8)^0,w,c
  4051  001BFE  A0D8               	btfss	status,0,c
  4052  001C00  EF04  F00E         	goto	u3421
  4053  001C04  EF07  F00E         	goto	u3420
  4054  001C08                     u3421:
  4055  001C08  FFFF               	dw	65535	; assembler added errata NOP
  4056  001C0A  EF0C  F00E         	goto	l4021
  4057  001C0E                     u3420:
  4058  001C0E  FFFF               	dw	65535	; assembler added errata NOP
  4059  001C10                     
  4060                           ;motors.c: 533:                 motCounter[2][0] = 0;
  4061  001C10  0E00               	movlw	0
  4062  001C12  6E67               	movwf	(_motCounter+9)^0,c
  4063  001C14  0E00               	movlw	0
  4064  001C16  6E66               	movwf	(_motCounter+8)^0,c
  4065  001C18                     l4021:
  4066  001C18  FFFF               	dw	65535	; assembler added errata NOP
  4067                           
  4068                           ;motors.c: 536:             LATC = stepMot3[motCounter[2][0]];
  4069  001C1A  0E84               	movlw	low _stepMot3
  4070  001C1C  2466               	addwf	(_motCounter+8)^0,w,c
  4071  001C1E  6ED9               	movwf	fsr2l,c
  4072  001C20  0E00               	movlw	high _stepMot3
  4073  001C22  2067               	addwfc	(_motCounter+9)^0,w,c
  4074  001C24  6EDA               	movwf	fsr2h,c
  4075  001C26  50DF               	movf	indf2,w,c
  4076  001C28  6E8B               	movwf	139,c	;volatile
  4077  001C2A                     l4023:
  4078  001C2A  FFFF               	dw	65535	; assembler added errata NOP
  4079  001C2C  EC4A  F012         	call	_stepMade	;wreg free
  4080  001C30  5012               	movf	?_stepMade^0,w,c
  4081  001C32  1013               	iorwf	(?_stepMade+1)^0,w,c
  4082  001C34  B4D8               	btfsc	status,2,c
  4083  001C36  EF1F  F00E         	goto	u3431
  4084  001C3A  EF22  F00E         	goto	u3430
  4085  001C3E                     u3431:
  4086  001C3E  FFFF               	dw	65535	; assembler added errata NOP
  4087  001C40  EF15  F00E         	goto	l4023
  4088  001C44                     u3430:
  4089  001C44  FFFF               	dw	65535	; assembler added errata NOP
  4090  001C46                     l4025:
  4091  001C46  FFFF               	dw	65535	; assembler added errata NOP
  4092  001C48  EC4A  F012         	call	_stepMade	;wreg free
  4093  001C4C  5012               	movf	?_stepMade^0,w,c
  4094  001C4E  1013               	iorwf	(?_stepMade+1)^0,w,c
  4095  001C50  B4D8               	btfsc	status,2,c
  4096  001C52  EF2D  F00E         	goto	u3441
  4097  001C56  EF30  F00E         	goto	u3440
  4098  001C5A                     u3441:
  4099  001C5A  FFFF               	dw	65535	; assembler added errata NOP
  4100  001C5C  EF23  F00E         	goto	l4025
  4101  001C60                     u3440:
  4102  001C60                     l4027:
  4103  001C60  FFFF               	dw	65535	; assembler added errata NOP
  4104                           
  4105                           ;motors.c: 514:     while(!returnTouch() || PORTDbits.RD7){
  4106  001C62  EC9E  F012         	call	_returnTouch	;wreg free
  4107  001C66  5012               	movf	?_returnTouch^0,w,c
  4108  001C68  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4109  001C6A  B4D8               	btfsc	status,2,c
  4110  001C6C  EF3A  F00E         	goto	u3451
  4111  001C70  EF3D  F00E         	goto	u3450
  4112  001C74                     u3451:
  4113  001C74  FFFF               	dw	65535	; assembler added errata NOP
  4114  001C76  EFDF  F00D         	goto	l4011
  4115  001C7A                     u3450:
  4116  001C7A  FFFF               	dw	65535	; assembler added errata NOP
  4117  001C7C  BE83               	btfsc	131,7,c	;volatile
  4118  001C7E  EF43  F00E         	goto	u3461
  4119  001C82  EF46  F00E         	goto	u3460
  4120  001C86                     u3461:
  4121  001C86  FFFF               	dw	65535	; assembler added errata NOP
  4122  001C88  EFDF  F00D         	goto	l4011
  4123  001C8C                     u3460:
  4124  001C8C                     l4031:
  4125  001C8C  FFFF               	dw	65535	; assembler added errata NOP
  4126                           
  4127                           ;motors.c: 552:     stopADC();
  4128  001C8E  ECDE  F012         	call	_stopADC	;wreg free
  4129  001C92                     
  4130                           ;motors.c: 555:     resetTouch();
  4131  001C92  ECB9  F012         	call	_resetTouch	;wreg free
  4132  001C96                     
  4133                           ;motors.c: 558:     T0CONbits.TMR0ON = 0;
  4134  001C96  9ED5               	bcf	213,7,c	;volatile
  4135  001C98                     
  4136                           ;motors.c: 559:     T2CONbits.TMR2ON = 0;
  4137  001C98  94CA               	bcf	202,2,c	;volatile
  4138                           
  4139                           ;motors.c: 561:     TMR0 = 0;
  4140  001C9A  0E00               	movlw	0
  4141  001C9C  6ED7               	movwf	215,c	;volatile
  4142  001C9E  0E00               	movlw	0
  4143  001CA0  6ED6               	movwf	214,c	;volatile
  4144                           
  4145                           ;motors.c: 562:     TMR2 = 0;
  4146  001CA2  0E00               	movlw	0
  4147  001CA4  6ECC               	movwf	204,c	;volatile
  4148  001CA6                     
  4149                           ;motors.c: 565:     resetStep();
  4150  001CA6  ECBE  F012         	call	_resetStep	;wreg free
  4151  001CAA                     
  4152                           ;motors.c: 568:     if(PORTDbits.RD7){
  4153  001CAA  AE83               	btfss	131,7,c	;volatile
  4154  001CAC  EF5A  F00E         	goto	u3471
  4155  001CB0  EF5D  F00E         	goto	u3470
  4156  001CB4                     u3471:
  4157  001CB4  FFFF               	dw	65535	; assembler added errata NOP
  4158  001CB6  EF62  F00E         	goto	l210
  4159  001CBA                     u3470:
  4160  001CBA  FFFF               	dw	65535	; assembler added errata NOP
  4161  001CBC                     
  4162                           ;motors.c: 569:         tm0Error = 2;
  4163  001CBC  0E00               	movlw	0
  4164  001CBE  6E51               	movwf	(_tm0Error+1)^0,c
  4165  001CC0  0E02               	movlw	2
  4166  001CC2  6E50               	movwf	_tm0Error^0,c
  4167  001CC4                     l210:
  4168  001CC4  FFFF               	dw	65535	; assembler added errata NOP
  4169                           
  4170                           ;motors.c: 572:     return(tm0Error);
  4171  001CC6  5050               	movf	_tm0Error^0,w,c
  4172  001CC8  0012               	return		;funcret
  4173  001CCA  FFFF               	dw	65535	; errata NOP
  4174  001CCC                     __end_of_touchObject:
  4175                           	callstack 0
  4176                           
  4177 ;; *************** function _stopADC *****************
  4178 ;; Defined at:
  4179 ;;		line 44 in file "adc.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;		None
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;		None
  4184 ;; Return value:  Size  Location     Type
  4185 ;;                  1    wreg      void 
  4186 ;; Registers used:
  4187 ;;		None
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4193 ;;      Params:         0       0       0       0       0       0       0
  4194 ;;      Locals:         0       0       0       0       0       0       0
  4195 ;;      Temps:          0       0       0       0       0       0       0
  4196 ;;      Totals:         0       0       0       0       0       0       0
  4197 ;;Total ram usage:        0 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; Hardware stack levels required when called:    4
  4200 ;; This function calls:
  4201 ;;		Nothing
  4202 ;; This function is called by:
  4203 ;;		_touchObject
  4204 ;;		_touchTherm
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208                           	psect	text23
  4209  0025BC                     __ptext23:
  4210                           	callstack 0
  4211  0025BC                     _stopADC:
  4212                           	callstack 0
  4213  0025BC  FFFF               	dw	65535	; assembler added errata NOP
  4214  0025BE                     
  4215                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4216  0025BE  90C2               	bcf	194,0,c	;volatile
  4217  0025C0  0012               	return		;funcret
  4218  0025C2  FFFF               	dw	65535	; errata NOP
  4219  0025C4                     __end_of_stopADC:
  4220                           	callstack 0
  4221                           
  4222 ;; *************** function _startADC *****************
  4223 ;; Defined at:
  4224 ;;		line 36 in file "adc.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;		None
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;		None
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  1    wreg      void 
  4231 ;; Registers used:
  4232 ;;		None
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4238 ;;      Params:         0       0       0       0       0       0       0
  4239 ;;      Locals:         0       0       0       0       0       0       0
  4240 ;;      Temps:          0       0       0       0       0       0       0
  4241 ;;      Totals:         0       0       0       0       0       0       0
  4242 ;;Total ram usage:        0 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; Hardware stack levels required when called:    4
  4245 ;; This function calls:
  4246 ;;		Nothing
  4247 ;; This function is called by:
  4248 ;;		_touchObject
  4249 ;;		_touchTherm
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253                           	psect	text24
  4254  002568                     __ptext24:
  4255                           	callstack 0
  4256  002568                     _startADC:
  4257                           	callstack 0
  4258  002568  FFFF               	dw	65535	; assembler added errata NOP
  4259  00256A                     
  4260                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4261  00256A  80C2               	bsf	194,0,c	;volatile
  4262                           
  4263                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4264  00256C  84C2               	bsf	194,2,c	;volatile
  4265  00256E  0012               	return		;funcret
  4266  002570  FFFF               	dw	65535	; errata NOP
  4267  002572                     __end_of_startADC:
  4268                           	callstack 0
  4269                           
  4270 ;; *************** function _returnTouch *****************
  4271 ;; Defined at:
  4272 ;;		line 51 in file "adc.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;		None
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;		None
  4277 ;; Return value:  Size  Location     Type
  4278 ;;                  2   17[COMRAM] unsigned int 
  4279 ;; Registers used:
  4280 ;;		None
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4286 ;;      Params:         2       0       0       0       0       0       0
  4287 ;;      Locals:         0       0       0       0       0       0       0
  4288 ;;      Temps:          0       0       0       0       0       0       0
  4289 ;;      Totals:         2       0       0       0       0       0       0
  4290 ;;Total ram usage:        2 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; Hardware stack levels required when called:    4
  4293 ;; This function calls:
  4294 ;;		Nothing
  4295 ;; This function is called by:
  4296 ;;		_touchObject
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           	psect	text25
  4301  00253C                     __ptext25:
  4302                           	callstack 0
  4303  00253C                     _returnTouch:
  4304                           	callstack 0
  4305  00253C  FFFF               	dw	65535	; assembler added errata NOP
  4306  00253E                     
  4307                           ;adc.c: 52:     return touch_rel;
  4308  00253E  C05C  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4309  002542  6A13               	clrf	(?_returnTouch+1)^0,c
  4310  002544  0012               	return		;funcret
  4311  002546  FFFF               	dw	65535	; errata NOP
  4312  002548                     __end_of_returnTouch:
  4313                           	callstack 0
  4314                           
  4315 ;; *************** function _resetTouch *****************
  4316 ;; Defined at:
  4317 ;;		line 65 in file "adc.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;		None
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;		None
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  1    wreg      void 
  4324 ;; Registers used:
  4325 ;;		wreg, status,2
  4326 ;; Tracked objects:
  4327 ;;		On entry : 0/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4331 ;;      Params:         0       0       0       0       0       0       0
  4332 ;;      Locals:         0       0       0       0       0       0       0
  4333 ;;      Temps:          0       0       0       0       0       0       0
  4334 ;;      Totals:         0       0       0       0       0       0       0
  4335 ;;Total ram usage:        0 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; Hardware stack levels required when called:    4
  4338 ;; This function calls:
  4339 ;;		Nothing
  4340 ;; This function is called by:
  4341 ;;		_touchObject
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           	psect	text26
  4346  002572                     __ptext26:
  4347                           	callstack 0
  4348  002572                     _resetTouch:
  4349                           	callstack 0
  4350  002572  FFFF               	dw	65535	; assembler added errata NOP
  4351  002574                     
  4352                           ;adc.c: 66:     touch_rel = 0;
  4353  002574  0E00               	movlw	0
  4354  002576  6E5C               	movwf	_touch_rel^0,c	;volatile
  4355  002578  0012               	return		;funcret
  4356  00257A  FFFF               	dw	65535	; errata NOP
  4357  00257C                     __end_of_resetTouch:
  4358                           	callstack 0
  4359                           
  4360 ;; *************** function _rotateObj *****************
  4361 ;; Defined at:
  4362 ;;		line 741 in file "motors.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;  rotAngle        1    wreg     unsigned char 
  4365 ;; Auto vars:     Size  Location     Type
  4366 ;;  rotAngle        1    3[BANK0 ] unsigned char 
  4367 ;;  i               2    6[BANK0 ] unsigned int 
  4368 ;;  totStep         2    4[BANK0 ] int 
  4369 ;; Return value:  Size  Location     Type
  4370 ;;                  1    wreg      void 
  4371 ;; Registers used:
  4372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4378 ;;      Params:         0       0       0       0       0       0       0
  4379 ;;      Locals:         0       5       0       0       0       0       0
  4380 ;;      Temps:          0       3       0       0       0       0       0
  4381 ;;      Totals:         0       8       0       0       0       0       0
  4382 ;;Total ram usage:        8 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    5
  4385 ;; This function calls:
  4386 ;;		___fldiv
  4387 ;;		___fltol
  4388 ;;		___xxtofl
  4389 ;;		_stepMade
  4390 ;; This function is called by:
  4391 ;;		_executeData
  4392 ;; This function uses a non-reentrant model
  4393 ;;
  4394                           
  4395                           	psect	text27
  4396  001FFC                     __ptext27:
  4397                           	callstack 0
  4398  001FFC                     _rotateObj:
  4399                           	callstack 0
  4400  001FFC  FFFF               	dw	65535	; assembler added errata NOP
  4401                           
  4402                           ;incstack = 0
  4403                           ;rotateObj@rotAngle stored from wreg
  4404  001FFE  0100               	movlb	0	; () banked
  4405  002000  6FF0               	movwf	rotateObj@rotAngle& (0+255),b
  4406  002002                     
  4407                           ;motors.c: 742:     static const float stepAngle = 0.08789;;motors.c: 743:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 744:     unsigned int i;;
      +                          motors.c: 745:     int totStep = rotAngle/stepAngle;
  4408  002002  0EAC               	movlw	172
  4409  002004  6E24               	movwf	___fldiv@a^0,c
  4410  002006  0EFF               	movlw	255
  4411  002008  6E25               	movwf	(___fldiv@a+1)^0,c
  4412  00200A  0EB3               	movlw	179
  4413  00200C  6E26               	movwf	(___fldiv@a+2)^0,c
  4414  00200E  0E3D               	movlw	61
  4415  002010  6E27               	movwf	(___fldiv@a+3)^0,c
  4416  002012  0100               	movlb	0	; () banked
  4417  002014  51F0               	movf	rotateObj@rotAngle& (0+255),w,b
  4418  002016  6E12               	movwf	___xxtofl@val^0,c
  4419  002018  6A13               	clrf	(___xxtofl@val+1)^0,c
  4420  00201A  6A14               	clrf	(___xxtofl@val+2)^0,c
  4421  00201C  6A15               	clrf	(___xxtofl@val+3)^0,c
  4422  00201E  0E01               	movlw	1
  4423  002020  EC66  F009         	call	___xxtofl
  4424  002024  C012  F020         	movff	?___xxtofl,___fldiv@b
  4425  002028  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4426  00202C  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4427  002030  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4428  002034  EC09  F003         	call	___fldiv	;wreg free
  4429  002038  C020  F039         	movff	?___fldiv,___fltol@f1
  4430  00203C  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4431  002040  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4432  002044  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4433  002048  EC9B  F00C         	call	___fltol	;wreg free
  4434  00204C  C039  F0F1         	movff	?___fltol,rotateObj@totStep
  4435  002050  C03A  F0F2         	movff	?___fltol+1,rotateObj@totStep+1
  4436  002054                     
  4437                           ;motors.c: 748:     for(i = 0; i < totStep; i++){
  4438  002054  0E00               	movlw	0
  4439  002056  0100               	movlb	0	; () banked
  4440  002058  6FF4               	movwf	(rotateObj@i+1)& (0+255),b
  4441  00205A  0E00               	movlw	0
  4442  00205C  6FF3               	movwf	rotateObj@i& (0+255),b
  4443  00205E  EF5C  F010         	goto	l4137
  4444  002062                     l4125:
  4445  002062  FFFF               	dw	65535	; assembler added errata NOP
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;motors.c: 750:         LATD &= 0xC3;
  4449  002064  0EC3               	movlw	195
  4450  002066  168C               	andwf	140,f,c	;volatile
  4451  002068                     
  4452                           ; BSR set to: 0
  4453                           ;motors.c: 752:         LATD |= rotSequence[i%4] << 2;
  4454  002068  0E03               	movlw	3
  4455  00206A  15F3               	andwf	rotateObj@i& (0+255),w,b
  4456  00206C  6FED               	movwf	??_rotateObj& (0+255),b
  4457  00206E  0E00               	movlw	0
  4458  002070  15F4               	andwf	(rotateObj@i+1)& (0+255),w,b
  4459  002072  6FEE               	movwf	(??_rotateObj+1)& (0+255),b
  4460  002074  0E80               	movlw	low rotateObj@rotSequence
  4461  002076  25ED               	addwf	??_rotateObj& (0+255),w,b
  4462  002078  6ED9               	movwf	fsr2l,c
  4463  00207A  0E00               	movlw	high rotateObj@rotSequence
  4464  00207C  21EE               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4465  00207E  6EDA               	movwf	fsr2h,c
  4466  002080  50DF               	movf	indf2,w,c
  4467  002082  6FEF               	movwf	(??_rotateObj+2)& (0+255),b
  4468  002084  90D8               	bcf	status,0,c
  4469  002086  37EF               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4470  002088  90D8               	bcf	status,0,c
  4471  00208A  35EF               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4472  00208C  128C               	iorwf	140,f,c	;volatile
  4473  00208E                     
  4474                           ; BSR set to: 0
  4475                           ;motors.c: 755:         T2CONbits.TMR2ON = 1;
  4476  00208E  84CA               	bsf	202,2,c	;volatile
  4477  002090                     l4131:
  4478  002090  FFFF               	dw	65535	; assembler added errata NOP
  4479  002092  EC4A  F012         	call	_stepMade	;wreg free
  4480  002096  5012               	movf	?_stepMade^0,w,c
  4481  002098  1013               	iorwf	(?_stepMade+1)^0,w,c
  4482  00209A  B4D8               	btfsc	status,2,c
  4483  00209C  EF52  F010         	goto	u3601
  4484  0020A0  EF55  F010         	goto	u3600
  4485  0020A4                     u3601:
  4486  0020A4  FFFF               	dw	65535	; assembler added errata NOP
  4487  0020A6  EF48  F010         	goto	l4131
  4488  0020AA                     u3600:
  4489  0020AA  FFFF               	dw	65535	; assembler added errata NOP
  4490  0020AC                     
  4491                           ;motors.c: 757:         T2CONbits.TMR2ON = 1;
  4492  0020AC  84CA               	bsf	202,2,c	;volatile
  4493  0020AE                     
  4494                           ;motors.c: 758:         TMR2 = 0;
  4495  0020AE  0E00               	movlw	0
  4496  0020B0  6ECC               	movwf	204,c	;volatile
  4497  0020B2                     
  4498                           ;motors.c: 759:     }
  4499  0020B2  0100               	movlb	0	; () banked
  4500  0020B4  4BF3               	infsnz	rotateObj@i& (0+255),f,b
  4501  0020B6  2BF4               	incf	(rotateObj@i+1)& (0+255),f,b
  4502  0020B8                     l4137:
  4503  0020B8  FFFF               	dw	65535	; assembler added errata NOP
  4504                           
  4505                           ; BSR set to: 0
  4506  0020BA  51F1               	movf	rotateObj@totStep& (0+255),w,b
  4507  0020BC  5DF3               	subwf	rotateObj@i& (0+255),w,b
  4508  0020BE  51F2               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4509  0020C0  59F4               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4510  0020C2  A0D8               	btfss	status,0,c
  4511  0020C4  EF66  F010         	goto	u3611
  4512  0020C8  EF69  F010         	goto	u3610
  4513  0020CC                     u3611:
  4514  0020CC  FFFF               	dw	65535	; assembler added errata NOP
  4515  0020CE  EF31  F010         	goto	l4125
  4516  0020D2                     u3610:
  4517  0020D2  FFFF               	dw	65535	; assembler added errata NOP
  4518  0020D4                     
  4519                           ; BSR set to: 0
  4520  0020D4  0012               	return		;funcret
  4521  0020D6  FFFF               	dw	65535	; errata NOP
  4522  0020D8                     __end_of_rotateObj:
  4523                           	callstack 0
  4524                           
  4525 ;; *************** function ___xxtofl *****************
  4526 ;; Defined at:
  4527 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;  sign            1    wreg     unsigned char 
  4530 ;;  val             4   17[COMRAM] long 
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;  sign            1   25[COMRAM] unsigned char 
  4533 ;;  arg             4   27[COMRAM] unsigned long 
  4534 ;;  exp             1   26[COMRAM] unsigned char 
  4535 ;; Return value:  Size  Location     Type
  4536 ;;                  4   17[COMRAM] unsigned char 
  4537 ;; Registers used:
  4538 ;;		wreg, status,2, status,0
  4539 ;; Tracked objects:
  4540 ;;		On entry : 0/0
  4541 ;;		On exit  : 0/0
  4542 ;;		Unchanged: 0/0
  4543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4544 ;;      Params:         4       0       0       0       0       0       0
  4545 ;;      Locals:         6       0       0       0       0       0       0
  4546 ;;      Temps:          4       0       0       0       0       0       0
  4547 ;;      Totals:        14       0       0       0       0       0       0
  4548 ;;Total ram usage:       14 bytes
  4549 ;; Hardware stack levels used:    1
  4550 ;; Hardware stack levels required when called:    4
  4551 ;; This function calls:
  4552 ;;		Nothing
  4553 ;; This function is called by:
  4554 ;;		_rotateObj
  4555 ;; This function uses a non-reentrant model
  4556 ;;
  4557                           
  4558                           	psect	text28
  4559  0012CC                     __ptext28:
  4560                           	callstack 0
  4561  0012CC                     ___xxtofl:
  4562                           	callstack 0
  4563  0012CC  FFFF               	dw	65535	; assembler added errata NOP
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;incstack = 0
  4567                           ;___xxtofl@sign stored from wreg
  4568  0012CE  6E1A               	movwf	___xxtofl@sign^0,c
  4569  0012D0  501A               	movf	___xxtofl@sign^0,w,c
  4570  0012D2  B4D8               	btfsc	status,2,c
  4571  0012D4  EF6E  F009         	goto	u3061
  4572  0012D8  EF71  F009         	goto	u3060
  4573  0012DC                     u3061:
  4574  0012DC  FFFF               	dw	65535	; assembler added errata NOP
  4575  0012DE  EF96  F009         	goto	l1295
  4576  0012E2                     u3060:
  4577  0012E2  FFFF               	dw	65535	; assembler added errata NOP
  4578  0012E4  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4579  0012E6  EF7A  F009         	goto	u3070
  4580  0012EA  EF77  F009         	goto	u3071
  4581  0012EE                     u3071:
  4582  0012EE  FFFF               	dw	65535	; assembler added errata NOP
  4583  0012F0  EF96  F009         	goto	l1295
  4584  0012F4                     u3070:
  4585  0012F4  FFFF               	dw	65535	; assembler added errata NOP
  4586  0012F6  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4587  0012FA  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4588  0012FE  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4589  001302  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4590  001306  1E16               	comf	??___xxtofl^0,f,c
  4591  001308  1E17               	comf	(??___xxtofl+1)^0,f,c
  4592  00130A  1E18               	comf	(??___xxtofl+2)^0,f,c
  4593  00130C  1E19               	comf	(??___xxtofl+3)^0,f,c
  4594  00130E  2A16               	incf	??___xxtofl^0,f,c
  4595  001310  0E00               	movlw	0
  4596  001312  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4597  001314  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4598  001316  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4599  001318  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4600  00131C  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4601  001320  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4602  001324  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4603  001328  EF9F  F009         	goto	l3855
  4604  00132C                     l1295:
  4605  00132C  FFFF               	dw	65535	; assembler added errata NOP
  4606  00132E  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4607  001332  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4608  001336  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4609  00133A  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4610  00133E                     l3855:
  4611  00133E  FFFF               	dw	65535	; assembler added errata NOP
  4612  001340  5012               	movf	___xxtofl@val^0,w,c
  4613  001342  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4614  001344  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4615  001346  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4616  001348  A4D8               	btfss	status,2,c
  4617  00134A  EFA9  F009         	goto	u3081
  4618  00134E  EFAC  F009         	goto	u3080
  4619  001352                     u3081:
  4620  001352  FFFF               	dw	65535	; assembler added errata NOP
  4621  001354  EFB7  F009         	goto	l3861
  4622  001358                     u3080:
  4623  001358  FFFF               	dw	65535	; assembler added errata NOP
  4624  00135A  0E00               	movlw	0
  4625  00135C  6E12               	movwf	?___xxtofl^0,c
  4626  00135E  0E00               	movlw	0
  4627  001360  6E13               	movwf	(?___xxtofl+1)^0,c
  4628  001362  0E00               	movlw	0
  4629  001364  6E14               	movwf	(?___xxtofl+2)^0,c
  4630  001366  0E00               	movlw	0
  4631  001368  6E15               	movwf	(?___xxtofl+3)^0,c
  4632  00136A  EF5F  F00A         	goto	l1298
  4633  00136E                     l3861:
  4634  00136E  FFFF               	dw	65535	; assembler added errata NOP
  4635  001370  0E96               	movlw	150
  4636  001372  6E1B               	movwf	___xxtofl@exp^0,c
  4637  001374  EFC3  F009         	goto	l3865
  4638  001378                     l3863:
  4639  001378  FFFF               	dw	65535	; assembler added errata NOP
  4640  00137A  2A1B               	incf	___xxtofl@exp^0,f,c
  4641  00137C  90D8               	bcf	status,0,c
  4642  00137E  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4643  001380  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4644  001382  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4645  001384  321C               	rrcf	___xxtofl@arg^0,f,c
  4646  001386                     l3865:
  4647  001386  FFFF               	dw	65535	; assembler added errata NOP
  4648  001388  0E00               	movlw	0
  4649  00138A  141C               	andwf	___xxtofl@arg^0,w,c
  4650  00138C  6E16               	movwf	??___xxtofl^0,c
  4651  00138E  0E00               	movlw	0
  4652  001390  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4653  001392  6E17               	movwf	(??___xxtofl+1)^0,c
  4654  001394  0E00               	movlw	0
  4655  001396  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4656  001398  6E18               	movwf	(??___xxtofl+2)^0,c
  4657  00139A  0EFE               	movlw	254
  4658  00139C  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4659  00139E  6E19               	movwf	(??___xxtofl+3)^0,c
  4660  0013A0  5016               	movf	??___xxtofl^0,w,c
  4661  0013A2  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4662  0013A4  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4663  0013A6  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4664  0013A8  A4D8               	btfss	status,2,c
  4665  0013AA  EFD9  F009         	goto	u3091
  4666  0013AE  EFDC  F009         	goto	u3090
  4667  0013B2                     u3091:
  4668  0013B2  FFFF               	dw	65535	; assembler added errata NOP
  4669  0013B4  EFBC  F009         	goto	l3863
  4670  0013B8                     u3090:
  4671  0013B8  FFFF               	dw	65535	; assembler added errata NOP
  4672  0013BA  EFEC  F009         	goto	l1302
  4673  0013BE                     l3867:
  4674  0013BE  FFFF               	dw	65535	; assembler added errata NOP
  4675  0013C0  2A1B               	incf	___xxtofl@exp^0,f,c
  4676  0013C2  0E01               	movlw	1
  4677  0013C4  261C               	addwf	___xxtofl@arg^0,f,c
  4678  0013C6  0E00               	movlw	0
  4679  0013C8  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4680  0013CA  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4681  0013CC  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4682  0013CE  90D8               	bcf	status,0,c
  4683  0013D0  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4684  0013D2  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4685  0013D4  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4686  0013D6  321C               	rrcf	___xxtofl@arg^0,f,c
  4687  0013D8                     l1302:
  4688  0013D8  FFFF               	dw	65535	; assembler added errata NOP
  4689  0013DA  0E00               	movlw	0
  4690  0013DC  141C               	andwf	___xxtofl@arg^0,w,c
  4691  0013DE  6E16               	movwf	??___xxtofl^0,c
  4692  0013E0  0E00               	movlw	0
  4693  0013E2  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4694  0013E4  6E17               	movwf	(??___xxtofl+1)^0,c
  4695  0013E6  0E00               	movlw	0
  4696  0013E8  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4697  0013EA  6E18               	movwf	(??___xxtofl+2)^0,c
  4698  0013EC  0EFF               	movlw	255
  4699  0013EE  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4700  0013F0  6E19               	movwf	(??___xxtofl+3)^0,c
  4701  0013F2  5016               	movf	??___xxtofl^0,w,c
  4702  0013F4  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4703  0013F6  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4704  0013F8  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4705  0013FA  A4D8               	btfss	status,2,c
  4706  0013FC  EF02  F00A         	goto	u3101
  4707  001400  EF05  F00A         	goto	u3100
  4708  001404                     u3101:
  4709  001404  FFFF               	dw	65535	; assembler added errata NOP
  4710  001406  EFDF  F009         	goto	l3867
  4711  00140A                     u3100:
  4712  00140A  FFFF               	dw	65535	; assembler added errata NOP
  4713  00140C  EF0F  F00A         	goto	l3875
  4714  001410                     l3873:
  4715  001410  FFFF               	dw	65535	; assembler added errata NOP
  4716  001412  061B               	decf	___xxtofl@exp^0,f,c
  4717  001414  90D8               	bcf	status,0,c
  4718  001416  361C               	rlcf	___xxtofl@arg^0,f,c
  4719  001418  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4720  00141A  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4721  00141C  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4722  00141E                     l3875:
  4723  00141E  FFFF               	dw	65535	; assembler added errata NOP
  4724  001420  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4725  001422  EF15  F00A         	goto	u3111
  4726  001426  EF18  F00A         	goto	u3110
  4727  00142A                     u3111:
  4728  00142A  FFFF               	dw	65535	; assembler added errata NOP
  4729  00142C  EF22  F00A         	goto	l1309
  4730  001430                     u3110:
  4731  001430  FFFF               	dw	65535	; assembler added errata NOP
  4732  001432  0E02               	movlw	2
  4733  001434  601B               	cpfslt	___xxtofl@exp^0,c
  4734  001436  EF1F  F00A         	goto	u3121
  4735  00143A  EF22  F00A         	goto	u3120
  4736  00143E                     u3121:
  4737  00143E  FFFF               	dw	65535	; assembler added errata NOP
  4738  001440  EF08  F00A         	goto	l3873
  4739  001444                     u3120:
  4740  001444                     l1309:
  4741  001444  FFFF               	dw	65535	; assembler added errata NOP
  4742  001446  B01B               	btfsc	___xxtofl@exp^0,0,c
  4743  001448  EF28  F00A         	goto	u3131
  4744  00144C  EF2B  F00A         	goto	u3130
  4745  001450                     u3131:
  4746  001450  FFFF               	dw	65535	; assembler added errata NOP
  4747  001452  EF2D  F00A         	goto	l3881
  4748  001456                     u3130:
  4749  001456  FFFF               	dw	65535	; assembler added errata NOP
  4750  001458  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4751  00145A                     l3881:
  4752  00145A  FFFF               	dw	65535	; assembler added errata NOP
  4753  00145C  90D8               	bcf	status,0,c
  4754  00145E  321B               	rrcf	___xxtofl@exp^0,f,c
  4755  001460  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4756  001464  6A17               	clrf	(??___xxtofl+1)^0,c
  4757  001466  6A18               	clrf	(??___xxtofl+2)^0,c
  4758  001468  6A19               	clrf	(??___xxtofl+3)^0,c
  4759  00146A  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4760  00146E  6A18               	clrf	(??___xxtofl+2)^0,c
  4761  001470  6A17               	clrf	(??___xxtofl+1)^0,c
  4762  001472  6A16               	clrf	??___xxtofl^0,c
  4763  001474  5016               	movf	??___xxtofl^0,w,c
  4764  001476  121C               	iorwf	___xxtofl@arg^0,f,c
  4765  001478  5017               	movf	(??___xxtofl+1)^0,w,c
  4766  00147A  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4767  00147C  5018               	movf	(??___xxtofl+2)^0,w,c
  4768  00147E  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4769  001480  5019               	movf	(??___xxtofl+3)^0,w,c
  4770  001482  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4771  001484  501A               	movf	___xxtofl@sign^0,w,c
  4772  001486  B4D8               	btfsc	status,2,c
  4773  001488  EF48  F00A         	goto	u3141
  4774  00148C  EF4B  F00A         	goto	u3140
  4775  001490                     u3141:
  4776  001490  FFFF               	dw	65535	; assembler added errata NOP
  4777  001492  EF56  F00A         	goto	l3891
  4778  001496                     u3140:
  4779  001496  FFFF               	dw	65535	; assembler added errata NOP
  4780  001498  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4781  00149A  EF54  F00A         	goto	u3150
  4782  00149E  EF51  F00A         	goto	u3151
  4783  0014A2                     u3151:
  4784  0014A2  FFFF               	dw	65535	; assembler added errata NOP
  4785  0014A4  EF56  F00A         	goto	l3891
  4786  0014A8                     u3150:
  4787  0014A8  FFFF               	dw	65535	; assembler added errata NOP
  4788  0014AA  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4789  0014AC                     l3891:
  4790  0014AC  FFFF               	dw	65535	; assembler added errata NOP
  4791  0014AE  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4792  0014B2  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4793  0014B6  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4794  0014BA  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  4795  0014BE                     l1298:
  4796  0014BE  FFFF               	dw	65535	; assembler added errata NOP
  4797  0014C0  0012               	return		;funcret
  4798  0014C2  FFFF               	dw	65535	; errata NOP
  4799  0014C4                     __end_of___xxtofl:
  4800                           	callstack 0
  4801                           
  4802 ;; *************** function ___fltol *****************
  4803 ;; Defined at:
  4804 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;  f1              4   56[COMRAM] unsigned char 
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;  exp1            1   65[COMRAM] unsigned char 
  4809 ;;  sign1           1   64[COMRAM] unsigned char 
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  4   56[COMRAM] long 
  4812 ;; Registers used:
  4813 ;;		wreg, status,2, status,0
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4819 ;;      Params:         4       0       0       0       0       0       0
  4820 ;;      Locals:         2       0       0       0       0       0       0
  4821 ;;      Temps:          4       0       0       0       0       0       0
  4822 ;;      Totals:        10       0       0       0       0       0       0
  4823 ;;Total ram usage:       10 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    4
  4826 ;; This function calls:
  4827 ;;		Nothing
  4828 ;; This function is called by:
  4829 ;;		_rotateObj
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           	psect	text29
  4834  001936                     __ptext29:
  4835                           	callstack 0
  4836  001936                     ___fltol:
  4837                           	callstack 0
  4838  001936  FFFF               	dw	65535	; assembler added errata NOP
  4839  001938  343B               	rlcf	(___fltol@f1+2)^0,w,c
  4840  00193A  343C               	rlcf	(___fltol@f1+3)^0,w,c
  4841  00193C  6E42               	movwf	___fltol@exp1^0,c
  4842  00193E  5042               	movf	___fltol@exp1^0,w,c
  4843  001940  A4D8               	btfss	status,2,c
  4844  001942  EFA5  F00C         	goto	u2991
  4845  001946  EFA8  F00C         	goto	u2990
  4846  00194A                     u2991:
  4847  00194A  FFFF               	dw	65535	; assembler added errata NOP
  4848  00194C  EFB4  F00C         	goto	l3811
  4849  001950                     u2990:
  4850  001950  FFFF               	dw	65535	; assembler added errata NOP
  4851  001952                     l3807:
  4852  001952  FFFF               	dw	65535	; assembler added errata NOP
  4853  001954  0E00               	movlw	0
  4854  001956  6E39               	movwf	?___fltol^0,c
  4855  001958  0E00               	movlw	0
  4856  00195A  6E3A               	movwf	(?___fltol+1)^0,c
  4857  00195C  0E00               	movlw	0
  4858  00195E  6E3B               	movwf	(?___fltol+2)^0,c
  4859  001960  0E00               	movlw	0
  4860  001962  6E3C               	movwf	(?___fltol+3)^0,c
  4861  001964  EF33  F00D         	goto	l937
  4862  001968                     l3811:
  4863  001968  FFFF               	dw	65535	; assembler added errata NOP
  4864  00196A  C039  F03D         	movff	___fltol@f1,??___fltol
  4865  00196E  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  4866  001972  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  4867  001976  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  4868  00197A  0E20               	movlw	32
  4869  00197C  EFC6  F00C         	goto	u3000
  4870  001980                     u3005:
  4871  001980  FFFF               	dw	65535	; assembler added errata NOP
  4872  001982  90D8               	bcf	status,0,c
  4873  001984  3240               	rrcf	(??___fltol+3)^0,f,c
  4874  001986  323F               	rrcf	(??___fltol+2)^0,f,c
  4875  001988  323E               	rrcf	(??___fltol+1)^0,f,c
  4876  00198A  323D               	rrcf	??___fltol^0,f,c
  4877  00198C                     u3000:
  4878  00198C  FFFF               	dw	65535	; assembler added errata NOP
  4879  00198E  2EE8               	decfsz	wreg,f,c
  4880  001990  EFC0  F00C         	goto	u3005
  4881  001994  503D               	movf	??___fltol^0,w,c
  4882  001996  6E41               	movwf	___fltol@sign1^0,c
  4883  001998  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  4884  00199A  0EFF               	movlw	255
  4885  00199C  1639               	andwf	___fltol@f1^0,f,c
  4886  00199E  0EFF               	movlw	255
  4887  0019A0  163A               	andwf	(___fltol@f1+1)^0,f,c
  4888  0019A2  0EFF               	movlw	255
  4889  0019A4  163B               	andwf	(___fltol@f1+2)^0,f,c
  4890  0019A6  0E00               	movlw	0
  4891  0019A8  163C               	andwf	(___fltol@f1+3)^0,f,c
  4892  0019AA  0E96               	movlw	150
  4893  0019AC  5E42               	subwf	___fltol@exp1^0,f,c
  4894  0019AE  BE42               	btfsc	___fltol@exp1^0,7,c
  4895  0019B0  EFDF  F00C         	goto	u3010
  4896  0019B4  EFDC  F00C         	goto	u3011
  4897  0019B8                     u3011:
  4898  0019B8  FFFF               	dw	65535	; assembler added errata NOP
  4899  0019BA  EFF9  F00C         	goto	l3831
  4900  0019BE                     u3010:
  4901  0019BE  FFFF               	dw	65535	; assembler added errata NOP
  4902  0019C0  5042               	movf	___fltol@exp1^0,w,c
  4903  0019C2  0A80               	xorlw	128
  4904  0019C4  0F97               	addlw	151
  4905  0019C6  B0D8               	btfsc	status,0,c
  4906  0019C8  EFE8  F00C         	goto	u3021
  4907  0019CC  EFEB  F00C         	goto	u3020
  4908  0019D0                     u3021:
  4909  0019D0  FFFF               	dw	65535	; assembler added errata NOP
  4910  0019D2  EFEE  F00C         	goto	l3827
  4911  0019D6                     u3020:
  4912  0019D6  FFFF               	dw	65535	; assembler added errata NOP
  4913  0019D8  EFA9  F00C         	goto	l3807
  4914  0019DC                     l3827:
  4915  0019DC  FFFF               	dw	65535	; assembler added errata NOP
  4916  0019DE  90D8               	bcf	status,0,c
  4917  0019E0  323C               	rrcf	(___fltol@f1+3)^0,f,c
  4918  0019E2  323B               	rrcf	(___fltol@f1+2)^0,f,c
  4919  0019E4  323A               	rrcf	(___fltol@f1+1)^0,f,c
  4920  0019E6  3239               	rrcf	___fltol@f1^0,f,c
  4921  0019E8  3E42               	incfsz	___fltol@exp1^0,f,c
  4922  0019EA  EFEE  F00C         	goto	l3827
  4923  0019EE  EF17  F00D         	goto	l3841
  4924  0019F2                     l3831:
  4925  0019F2  FFFF               	dw	65535	; assembler added errata NOP
  4926  0019F4  0E1F               	movlw	31
  4927  0019F6  6442               	cpfsgt	___fltol@exp1^0,c
  4928  0019F8  EF00  F00D         	goto	u3031
  4929  0019FC  EF03  F00D         	goto	u3030
  4930  001A00                     u3031:
  4931  001A00  FFFF               	dw	65535	; assembler added errata NOP
  4932  001A02  EF0D  F00D         	goto	l3839
  4933  001A06                     u3030:
  4934  001A06  FFFF               	dw	65535	; assembler added errata NOP
  4935  001A08  EFA9  F00C         	goto	l3807
  4936  001A0C                     l3837:
  4937  001A0C  FFFF               	dw	65535	; assembler added errata NOP
  4938  001A0E  90D8               	bcf	status,0,c
  4939  001A10  3639               	rlcf	___fltol@f1^0,f,c
  4940  001A12  363A               	rlcf	(___fltol@f1+1)^0,f,c
  4941  001A14  363B               	rlcf	(___fltol@f1+2)^0,f,c
  4942  001A16  363C               	rlcf	(___fltol@f1+3)^0,f,c
  4943  001A18  0642               	decf	___fltol@exp1^0,f,c
  4944  001A1A                     l3839:
  4945  001A1A  FFFF               	dw	65535	; assembler added errata NOP
  4946  001A1C  5042               	movf	___fltol@exp1^0,w,c
  4947  001A1E  A4D8               	btfss	status,2,c
  4948  001A20  EF14  F00D         	goto	u3041
  4949  001A24  EF17  F00D         	goto	u3040
  4950  001A28                     u3041:
  4951  001A28  FFFF               	dw	65535	; assembler added errata NOP
  4952  001A2A  EF06  F00D         	goto	l3837
  4953  001A2E                     u3040:
  4954  001A2E                     l3841:
  4955  001A2E  FFFF               	dw	65535	; assembler added errata NOP
  4956  001A30  5041               	movf	___fltol@sign1^0,w,c
  4957  001A32  B4D8               	btfsc	status,2,c
  4958  001A34  EF1E  F00D         	goto	u3051
  4959  001A38  EF21  F00D         	goto	u3050
  4960  001A3C                     u3051:
  4961  001A3C  FFFF               	dw	65535	; assembler added errata NOP
  4962  001A3E  EF2A  F00D         	goto	l3845
  4963  001A42                     u3050:
  4964  001A42  FFFF               	dw	65535	; assembler added errata NOP
  4965  001A44  1E3C               	comf	(___fltol@f1+3)^0,f,c
  4966  001A46  1E3B               	comf	(___fltol@f1+2)^0,f,c
  4967  001A48  1E3A               	comf	(___fltol@f1+1)^0,f,c
  4968  001A4A  6C39               	negf	___fltol@f1^0,c
  4969  001A4C  0E00               	movlw	0
  4970  001A4E  223A               	addwfc	(___fltol@f1+1)^0,f,c
  4971  001A50  223B               	addwfc	(___fltol@f1+2)^0,f,c
  4972  001A52  223C               	addwfc	(___fltol@f1+3)^0,f,c
  4973  001A54                     l3845:
  4974  001A54  FFFF               	dw	65535	; assembler added errata NOP
  4975  001A56  C039  F039         	movff	___fltol@f1,?___fltol
  4976  001A5A  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  4977  001A5E  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  4978  001A62  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  4979  001A66                     l937:
  4980  001A66  FFFF               	dw	65535	; assembler added errata NOP
  4981  001A68  0012               	return		;funcret
  4982  001A6A  FFFF               	dw	65535	; errata NOP
  4983  001A6C                     __end_of___fltol:
  4984                           	callstack 0
  4985                           
  4986 ;; *************** function ___fldiv *****************
  4987 ;; Defined at:
  4988 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;  b               4   31[COMRAM] long 
  4991 ;;  a               4   35[COMRAM] long 
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;  grs             4   50[COMRAM] unsigned long 
  4994 ;;  rem             4   43[COMRAM] unsigned long 
  4995 ;;  new_exp         2   48[COMRAM] short 
  4996 ;;  aexp            1   55[COMRAM] unsigned char 
  4997 ;;  bexp            1   54[COMRAM] unsigned char 
  4998 ;;  sign            1   47[COMRAM] unsigned char 
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  4   31[COMRAM] unsigned char 
  5001 ;; Registers used:
  5002 ;;		wreg, status,2, status,0
  5003 ;; Tracked objects:
  5004 ;;		On entry : 0/0
  5005 ;;		On exit  : 0/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5008 ;;      Params:         8       0       0       0       0       0       0
  5009 ;;      Locals:        13       0       0       0       0       0       0
  5010 ;;      Temps:          4       0       0       0       0       0       0
  5011 ;;      Totals:        25       0       0       0       0       0       0
  5012 ;;Total ram usage:       25 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:    4
  5015 ;; This function calls:
  5016 ;;		Nothing
  5017 ;; This function is called by:
  5018 ;;		_rotateObj
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           	psect	text30
  5023  000612                     __ptext30:
  5024                           	callstack 0
  5025  000612                     ___fldiv:
  5026                           	callstack 0
  5027  000612  FFFF               	dw	65535	; assembler added errata NOP
  5028  000614  5023               	movf	(___fldiv@b+3)^0,w,c
  5029  000616  0B80               	andlw	128
  5030  000618  6E30               	movwf	___fldiv@sign^0,c
  5031  00061A  5023               	movf	(___fldiv@b+3)^0,w,c
  5032  00061C  2423               	addwf	(___fldiv@b+3)^0,w,c
  5033  00061E  6E37               	movwf	___fldiv@bexp^0,c
  5034  000620  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5035  000622  EF15  F003         	goto	u2761
  5036  000626  EF18  F003         	goto	u2760
  5037  00062A                     u2761:
  5038  00062A  FFFF               	dw	65535	; assembler added errata NOP
  5039  00062C  EF1A  F003         	goto	l3673
  5040  000630                     u2760:
  5041  000630  FFFF               	dw	65535	; assembler added errata NOP
  5042  000632  8037               	bsf	___fldiv@bexp^0,0,c
  5043  000634                     l3673:
  5044  000634  FFFF               	dw	65535	; assembler added errata NOP
  5045  000636  5037               	movf	___fldiv@bexp^0,w,c
  5046  000638  B4D8               	btfsc	status,2,c
  5047  00063A  EF21  F003         	goto	u2771
  5048  00063E  EF24  F003         	goto	u2770
  5049  000642                     u2771:
  5050  000642  FFFF               	dw	65535	; assembler added errata NOP
  5051  000644  EF3D  F003         	goto	l3683
  5052  000648                     u2770:
  5053  000648  FFFF               	dw	65535	; assembler added errata NOP
  5054  00064A  2837               	incf	___fldiv@bexp^0,w,c
  5055  00064C  A4D8               	btfss	status,2,c
  5056  00064E  EF2B  F003         	goto	u2781
  5057  000652  EF2E  F003         	goto	u2780
  5058  000656                     u2781:
  5059  000656  FFFF               	dw	65535	; assembler added errata NOP
  5060  000658  EF37  F003         	goto	l3679
  5061  00065C                     u2780:
  5062  00065C  FFFF               	dw	65535	; assembler added errata NOP
  5063  00065E  0E00               	movlw	0
  5064  000660  6E20               	movwf	___fldiv@b^0,c
  5065  000662  0E00               	movlw	0
  5066  000664  6E21               	movwf	(___fldiv@b+1)^0,c
  5067  000666  0E00               	movlw	0
  5068  000668  6E22               	movwf	(___fldiv@b+2)^0,c
  5069  00066A  0E00               	movlw	0
  5070  00066C  6E23               	movwf	(___fldiv@b+3)^0,c
  5071  00066E                     l3679:
  5072  00066E  FFFF               	dw	65535	; assembler added errata NOP
  5073  000670  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5074  000672  0E00               	movlw	0
  5075  000674  6E23               	movwf	(___fldiv@b+3)^0,c
  5076  000676  EF46  F003         	goto	l3685
  5077  00067A                     l3683:
  5078  00067A  FFFF               	dw	65535	; assembler added errata NOP
  5079  00067C  0E00               	movlw	0
  5080  00067E  6E20               	movwf	___fldiv@b^0,c
  5081  000680  0E00               	movlw	0
  5082  000682  6E21               	movwf	(___fldiv@b+1)^0,c
  5083  000684  0E00               	movlw	0
  5084  000686  6E22               	movwf	(___fldiv@b+2)^0,c
  5085  000688  0E00               	movlw	0
  5086  00068A  6E23               	movwf	(___fldiv@b+3)^0,c
  5087  00068C                     l3685:
  5088  00068C  FFFF               	dw	65535	; assembler added errata NOP
  5089  00068E  5027               	movf	(___fldiv@a+3)^0,w,c
  5090  000690  0B80               	andlw	128
  5091  000692  1A30               	xorwf	___fldiv@sign^0,f,c
  5092  000694  5027               	movf	(___fldiv@a+3)^0,w,c
  5093  000696  2427               	addwf	(___fldiv@a+3)^0,w,c
  5094  000698  6E38               	movwf	___fldiv@aexp^0,c
  5095  00069A  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5096  00069C  EF52  F003         	goto	u2791
  5097  0006A0  EF55  F003         	goto	u2790
  5098  0006A4                     u2791:
  5099  0006A4  FFFF               	dw	65535	; assembler added errata NOP
  5100  0006A6  EF57  F003         	goto	l3693
  5101  0006AA                     u2790:
  5102  0006AA  FFFF               	dw	65535	; assembler added errata NOP
  5103  0006AC  8038               	bsf	___fldiv@aexp^0,0,c
  5104  0006AE                     l3693:
  5105  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5106  0006B0  5038               	movf	___fldiv@aexp^0,w,c
  5107  0006B2  B4D8               	btfsc	status,2,c
  5108  0006B4  EF5E  F003         	goto	u2801
  5109  0006B8  EF61  F003         	goto	u2800
  5110  0006BC                     u2801:
  5111  0006BC  FFFF               	dw	65535	; assembler added errata NOP
  5112  0006BE  EF7A  F003         	goto	l3703
  5113  0006C2                     u2800:
  5114  0006C2  FFFF               	dw	65535	; assembler added errata NOP
  5115  0006C4  2838               	incf	___fldiv@aexp^0,w,c
  5116  0006C6  A4D8               	btfss	status,2,c
  5117  0006C8  EF68  F003         	goto	u2811
  5118  0006CC  EF6B  F003         	goto	u2810
  5119  0006D0                     u2811:
  5120  0006D0  FFFF               	dw	65535	; assembler added errata NOP
  5121  0006D2  EF74  F003         	goto	l3699
  5122  0006D6                     u2810:
  5123  0006D6  FFFF               	dw	65535	; assembler added errata NOP
  5124  0006D8  0E00               	movlw	0
  5125  0006DA  6E24               	movwf	___fldiv@a^0,c
  5126  0006DC  0E00               	movlw	0
  5127  0006DE  6E25               	movwf	(___fldiv@a+1)^0,c
  5128  0006E0  0E00               	movlw	0
  5129  0006E2  6E26               	movwf	(___fldiv@a+2)^0,c
  5130  0006E4  0E00               	movlw	0
  5131  0006E6  6E27               	movwf	(___fldiv@a+3)^0,c
  5132  0006E8                     l3699:
  5133  0006E8  FFFF               	dw	65535	; assembler added errata NOP
  5134  0006EA  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5135  0006EC  0E00               	movlw	0
  5136  0006EE  6E27               	movwf	(___fldiv@a+3)^0,c
  5137  0006F0  EF83  F003         	goto	l3705
  5138  0006F4                     l3703:
  5139  0006F4  FFFF               	dw	65535	; assembler added errata NOP
  5140  0006F6  0E00               	movlw	0
  5141  0006F8  6E24               	movwf	___fldiv@a^0,c
  5142  0006FA  0E00               	movlw	0
  5143  0006FC  6E25               	movwf	(___fldiv@a+1)^0,c
  5144  0006FE  0E00               	movlw	0
  5145  000700  6E26               	movwf	(___fldiv@a+2)^0,c
  5146  000702  0E00               	movlw	0
  5147  000704  6E27               	movwf	(___fldiv@a+3)^0,c
  5148  000706                     l3705:
  5149  000706  FFFF               	dw	65535	; assembler added errata NOP
  5150  000708  5024               	movf	___fldiv@a^0,w,c
  5151  00070A  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5152  00070C  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5153  00070E  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5154  000710  A4D8               	btfss	status,2,c
  5155  000712  EF8D  F003         	goto	u2821
  5156  000716  EF90  F003         	goto	u2820
  5157  00071A                     u2821:
  5158  00071A  FFFF               	dw	65535	; assembler added errata NOP
  5159  00071C  EFAA  F003         	goto	l3717
  5160  000720                     u2820:
  5161  000720  FFFF               	dw	65535	; assembler added errata NOP
  5162  000722  0E00               	movlw	0
  5163  000724  6E20               	movwf	___fldiv@b^0,c
  5164  000726  0E00               	movlw	0
  5165  000728  6E21               	movwf	(___fldiv@b+1)^0,c
  5166  00072A  0E00               	movlw	0
  5167  00072C  6E22               	movwf	(___fldiv@b+2)^0,c
  5168  00072E  0E00               	movlw	0
  5169  000730  6E23               	movwf	(___fldiv@b+3)^0,c
  5170  000732  0E80               	movlw	128
  5171  000734  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5172  000736  0E7F               	movlw	127
  5173  000738  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5174  00073A                     l3711:
  5175  00073A  FFFF               	dw	65535	; assembler added errata NOP
  5176  00073C  5030               	movf	___fldiv@sign^0,w,c
  5177  00073E  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5178  000740  C020  F020         	movff	___fldiv@b,?___fldiv
  5179  000744  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5180  000748  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5181  00074C  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5182  000750  EF1F  F005         	goto	l1222
  5183  000754                     l3717:
  5184  000754  FFFF               	dw	65535	; assembler added errata NOP
  5185  000756  5037               	movf	___fldiv@bexp^0,w,c
  5186  000758  A4D8               	btfss	status,2,c
  5187  00075A  EFB1  F003         	goto	u2831
  5188  00075E  EFB4  F003         	goto	u2830
  5189  000762                     u2831:
  5190  000762  FFFF               	dw	65535	; assembler added errata NOP
  5191  000764  EFBF  F003         	goto	l3725
  5192  000768                     u2830:
  5193  000768  FFFF               	dw	65535	; assembler added errata NOP
  5194  00076A  0E00               	movlw	0
  5195  00076C  6E20               	movwf	?___fldiv^0,c
  5196  00076E  0E00               	movlw	0
  5197  000770  6E21               	movwf	(?___fldiv+1)^0,c
  5198  000772  0E00               	movlw	0
  5199  000774  6E22               	movwf	(?___fldiv+2)^0,c
  5200  000776  0E00               	movlw	0
  5201  000778  6E23               	movwf	(?___fldiv+3)^0,c
  5202  00077A  EF1F  F005         	goto	l1222
  5203  00077E                     l3725:
  5204  00077E  FFFF               	dw	65535	; assembler added errata NOP
  5205  000780  5038               	movf	___fldiv@aexp^0,w,c
  5206  000782  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5207  000786  6A29               	clrf	(??___fldiv+1)^0,c
  5208  000788  5E28               	subwf	??___fldiv^0,f,c
  5209  00078A  0E00               	movlw	0
  5210  00078C  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5211  00078E  0E7F               	movlw	127
  5212  000790  2428               	addwf	??___fldiv^0,w,c
  5213  000792  6E31               	movwf	___fldiv@new_exp^0,c
  5214  000794  0E00               	movlw	0
  5215  000796  2029               	addwfc	(??___fldiv+1)^0,w,c
  5216  000798  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5217  00079A  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5218  00079E  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5219  0007A2  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5220  0007A6  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5221  0007AA  0E00               	movlw	0
  5222  0007AC  6E20               	movwf	___fldiv@b^0,c
  5223  0007AE  0E00               	movlw	0
  5224  0007B0  6E21               	movwf	(___fldiv@b+1)^0,c
  5225  0007B2  0E00               	movlw	0
  5226  0007B4  6E22               	movwf	(___fldiv@b+2)^0,c
  5227  0007B6  0E00               	movlw	0
  5228  0007B8  6E23               	movwf	(___fldiv@b+3)^0,c
  5229  0007BA  0E00               	movlw	0
  5230  0007BC  6E33               	movwf	___fldiv@grs^0,c
  5231  0007BE  0E00               	movlw	0
  5232  0007C0  6E34               	movwf	(___fldiv@grs+1)^0,c
  5233  0007C2  0E00               	movlw	0
  5234  0007C4  6E35               	movwf	(___fldiv@grs+2)^0,c
  5235  0007C6  0E00               	movlw	0
  5236  0007C8  6E36               	movwf	(___fldiv@grs+3)^0,c
  5237  0007CA  0E00               	movlw	0
  5238  0007CC  6E38               	movwf	___fldiv@aexp^0,c
  5239  0007CE  EF2B  F004         	goto	l1224
  5240  0007D2                     l3735:
  5241  0007D2  FFFF               	dw	65535	; assembler added errata NOP
  5242  0007D4  5038               	movf	___fldiv@aexp^0,w,c
  5243  0007D6  B4D8               	btfsc	status,2,c
  5244  0007D8  EFF0  F003         	goto	u2841
  5245  0007DC  EFF3  F003         	goto	u2840
  5246  0007E0                     u2841:
  5247  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  5248  0007E2  EF0E  F004         	goto	l3743
  5249  0007E6                     u2840:
  5250  0007E6  FFFF               	dw	65535	; assembler added errata NOP
  5251  0007E8  90D8               	bcf	status,0,c
  5252  0007EA  362C               	rlcf	___fldiv@rem^0,f,c
  5253  0007EC  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5254  0007EE  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5255  0007F0  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5256  0007F2  90D8               	bcf	status,0,c
  5257  0007F4  3620               	rlcf	___fldiv@b^0,f,c
  5258  0007F6  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5259  0007F8  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5260  0007FA  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5261  0007FC  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5262  0007FE  EF03  F004         	goto	u2851
  5263  000802  EF06  F004         	goto	u2850
  5264  000806                     u2851:
  5265  000806  FFFF               	dw	65535	; assembler added errata NOP
  5266  000808  EF08  F004         	goto	l1227
  5267  00080C                     u2850:
  5268  00080C  FFFF               	dw	65535	; assembler added errata NOP
  5269  00080E  8020               	bsf	___fldiv@b^0,0,c
  5270  000810                     l1227:
  5271  000810  FFFF               	dw	65535	; assembler added errata NOP
  5272  000812  90D8               	bcf	status,0,c
  5273  000814  3633               	rlcf	___fldiv@grs^0,f,c
  5274  000816  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5275  000818  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5276  00081A  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5277  00081C                     l3743:
  5278  00081C  FFFF               	dw	65535	; assembler added errata NOP
  5279  00081E  5024               	movf	___fldiv@a^0,w,c
  5280  000820  5C2C               	subwf	___fldiv@rem^0,w,c
  5281  000822  5025               	movf	(___fldiv@a+1)^0,w,c
  5282  000824  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5283  000826  5026               	movf	(___fldiv@a+2)^0,w,c
  5284  000828  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5285  00082A  5027               	movf	(___fldiv@a+3)^0,w,c
  5286  00082C  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5287  00082E  A0D8               	btfss	status,0,c
  5288  000830  EF1C  F004         	goto	u2861
  5289  000834  EF1F  F004         	goto	u2860
  5290  000838                     u2861:
  5291  000838  FFFF               	dw	65535	; assembler added errata NOP
  5292  00083A  EF29  F004         	goto	l3749
  5293  00083E                     u2860:
  5294  00083E  FFFF               	dw	65535	; assembler added errata NOP
  5295  000840  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5296  000842  5024               	movf	___fldiv@a^0,w,c
  5297  000844  5E2C               	subwf	___fldiv@rem^0,f,c
  5298  000846  5025               	movf	(___fldiv@a+1)^0,w,c
  5299  000848  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5300  00084A  5026               	movf	(___fldiv@a+2)^0,w,c
  5301  00084C  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5302  00084E  5027               	movf	(___fldiv@a+3)^0,w,c
  5303  000850  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5304  000852                     l3749:
  5305  000852  FFFF               	dw	65535	; assembler added errata NOP
  5306  000854  2A38               	incf	___fldiv@aexp^0,f,c
  5307  000856                     l1224:
  5308  000856  FFFF               	dw	65535	; assembler added errata NOP
  5309  000858  0E19               	movlw	25
  5310  00085A  6438               	cpfsgt	___fldiv@aexp^0,c
  5311  00085C  EF32  F004         	goto	u2871
  5312  000860  EF35  F004         	goto	u2870
  5313  000864                     u2871:
  5314  000864  FFFF               	dw	65535	; assembler added errata NOP
  5315  000866  EFE9  F003         	goto	l3735
  5316  00086A                     u2870:
  5317  00086A  FFFF               	dw	65535	; assembler added errata NOP
  5318  00086C  502C               	movf	___fldiv@rem^0,w,c
  5319  00086E  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5320  000870  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5321  000872  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5322  000874  B4D8               	btfsc	status,2,c
  5323  000876  EF3F  F004         	goto	u2881
  5324  00087A  EF42  F004         	goto	u2880
  5325  00087E                     u2881:
  5326  00087E  FFFF               	dw	65535	; assembler added errata NOP
  5327  000880  EF5F  F004         	goto	l3761
  5328  000884                     u2880:
  5329  000884  FFFF               	dw	65535	; assembler added errata NOP
  5330  000886  8033               	bsf	___fldiv@grs^0,0,c
  5331  000888  EF5F  F004         	goto	l3761
  5332  00088C                     l3755:
  5333  00088C  FFFF               	dw	65535	; assembler added errata NOP
  5334  00088E  90D8               	bcf	status,0,c
  5335  000890  3620               	rlcf	___fldiv@b^0,f,c
  5336  000892  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5337  000894  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5338  000896  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5339  000898  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5340  00089A  EF51  F004         	goto	u2891
  5341  00089E  EF54  F004         	goto	u2890
  5342  0008A2                     u2891:
  5343  0008A2  FFFF               	dw	65535	; assembler added errata NOP
  5344  0008A4  EF56  F004         	goto	l1233
  5345  0008A8                     u2890:
  5346  0008A8  FFFF               	dw	65535	; assembler added errata NOP
  5347  0008AA  8020               	bsf	___fldiv@b^0,0,c
  5348  0008AC                     l1233:
  5349  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5350  0008AE  90D8               	bcf	status,0,c
  5351  0008B0  3633               	rlcf	___fldiv@grs^0,f,c
  5352  0008B2  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5353  0008B4  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5354  0008B6  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5355  0008B8  0631               	decf	___fldiv@new_exp^0,f,c
  5356  0008BA  A0D8               	btfss	status,0,c
  5357  0008BC  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5358  0008BE                     l3761:
  5359  0008BE  FFFF               	dw	65535	; assembler added errata NOP
  5360  0008C0  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5361  0008C2  EF65  F004         	goto	u2901
  5362  0008C6  EF68  F004         	goto	u2900
  5363  0008CA                     u2901:
  5364  0008CA  FFFF               	dw	65535	; assembler added errata NOP
  5365  0008CC  EF46  F004         	goto	l3755
  5366  0008D0                     u2900:
  5367  0008D0  FFFF               	dw	65535	; assembler added errata NOP
  5368  0008D2  0E00               	movlw	0
  5369  0008D4  6E38               	movwf	___fldiv@aexp^0,c
  5370  0008D6  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5371  0008D8  EF70  F004         	goto	u2911
  5372  0008DC  EF73  F004         	goto	u2910
  5373  0008E0                     u2911:
  5374  0008E0  FFFF               	dw	65535	; assembler added errata NOP
  5375  0008E2  EF9E  F004         	goto	l1235
  5376  0008E6                     u2910:
  5377  0008E6  FFFF               	dw	65535	; assembler added errata NOP
  5378  0008E8  0EFF               	movlw	255
  5379  0008EA  1433               	andwf	___fldiv@grs^0,w,c
  5380  0008EC  6E28               	movwf	??___fldiv^0,c
  5381  0008EE  0EFF               	movlw	255
  5382  0008F0  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5383  0008F2  6E29               	movwf	(??___fldiv+1)^0,c
  5384  0008F4  0EFF               	movlw	255
  5385  0008F6  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5386  0008F8  6E2A               	movwf	(??___fldiv+2)^0,c
  5387  0008FA  0E7F               	movlw	127
  5388  0008FC  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5389  0008FE  6E2B               	movwf	(??___fldiv+3)^0,c
  5390  000900  5028               	movf	??___fldiv^0,w,c
  5391  000902  1029               	iorwf	(??___fldiv+1)^0,w,c
  5392  000904  102A               	iorwf	(??___fldiv+2)^0,w,c
  5393  000906  102B               	iorwf	(??___fldiv+3)^0,w,c
  5394  000908  B4D8               	btfsc	status,2,c
  5395  00090A  EF89  F004         	goto	u2921
  5396  00090E  EF8C  F004         	goto	u2920
  5397  000912                     u2921:
  5398  000912  FFFF               	dw	65535	; assembler added errata NOP
  5399  000914  EF92  F004         	goto	l1236
  5400  000918                     u2920:
  5401  000918  FFFF               	dw	65535	; assembler added errata NOP
  5402  00091A                     l3769:
  5403  00091A  FFFF               	dw	65535	; assembler added errata NOP
  5404  00091C  0E01               	movlw	1
  5405  00091E  6E38               	movwf	___fldiv@aexp^0,c
  5406  000920  EF9E  F004         	goto	l1235
  5407  000924                     l1236:
  5408  000924  FFFF               	dw	65535	; assembler added errata NOP
  5409  000926  A020               	btfss	___fldiv@b^0,0,c
  5410  000928  EF98  F004         	goto	u2931
  5411  00092C  EF9B  F004         	goto	u2930
  5412  000930                     u2931:
  5413  000930  FFFF               	dw	65535	; assembler added errata NOP
  5414  000932  EF9E  F004         	goto	l1235
  5415  000936                     u2930:
  5416  000936  FFFF               	dw	65535	; assembler added errata NOP
  5417  000938  EF8D  F004         	goto	l3769
  5418  00093C                     l1235:
  5419  00093C  FFFF               	dw	65535	; assembler added errata NOP
  5420  00093E  5038               	movf	___fldiv@aexp^0,w,c
  5421  000940  B4D8               	btfsc	status,2,c
  5422  000942  EFA5  F004         	goto	u2941
  5423  000946  EFA8  F004         	goto	u2940
  5424  00094A                     u2941:
  5425  00094A  FFFF               	dw	65535	; assembler added errata NOP
  5426  00094C  EFCF  F004         	goto	l3781
  5427  000950                     u2940:
  5428  000950  FFFF               	dw	65535	; assembler added errata NOP
  5429  000952  0E01               	movlw	1
  5430  000954  2620               	addwf	___fldiv@b^0,f,c
  5431  000956  0E00               	movlw	0
  5432  000958  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5433  00095A  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5434  00095C  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5435  00095E  A023               	btfss	(___fldiv@b+3)^0,0,c
  5436  000960  EFB4  F004         	goto	u2951
  5437  000964  EFB7  F004         	goto	u2950
  5438  000968                     u2951:
  5439  000968  FFFF               	dw	65535	; assembler added errata NOP
  5440  00096A  EFCF  F004         	goto	l3781
  5441  00096E                     u2950:
  5442  00096E  FFFF               	dw	65535	; assembler added errata NOP
  5443  000970  C020  F028         	movff	___fldiv@b,??___fldiv
  5444  000974  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5445  000978  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5446  00097C  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5447  000980  342B               	rlcf	(??___fldiv+3)^0,w,c
  5448  000982  322B               	rrcf	(??___fldiv+3)^0,f,c
  5449  000984  322A               	rrcf	(??___fldiv+2)^0,f,c
  5450  000986  3229               	rrcf	(??___fldiv+1)^0,f,c
  5451  000988  3228               	rrcf	??___fldiv^0,f,c
  5452  00098A  C028  F020         	movff	??___fldiv,___fldiv@b
  5453  00098E  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5454  000992  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5455  000996  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5456  00099A  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5457  00099C  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5458  00099E                     l3781:
  5459  00099E  FFFF               	dw	65535	; assembler added errata NOP
  5460  0009A0  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5461  0009A2  EFDB  F004         	goto	u2961
  5462  0009A6  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5463  0009A8  E109               	bnz	u2960
  5464  0009AA  2831               	incf	___fldiv@new_exp^0,w,c
  5465  0009AC  A0D8               	btfss	status,0,c
  5466  0009AE  EFDB  F004         	goto	u2961
  5467  0009B2  EFDE  F004         	goto	u2960
  5468  0009B6                     u2961:
  5469  0009B6  FFFF               	dw	65535	; assembler added errata NOP
  5470  0009B8  EFEA  F004         	goto	l3785
  5471  0009BC                     u2960:
  5472  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  5473  0009BE  0E00               	movlw	0
  5474  0009C0  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5475  0009C2  6831               	setf	___fldiv@new_exp^0,c
  5476  0009C4  0E00               	movlw	0
  5477  0009C6  6E20               	movwf	___fldiv@b^0,c
  5478  0009C8  0E00               	movlw	0
  5479  0009CA  6E21               	movwf	(___fldiv@b+1)^0,c
  5480  0009CC  0E00               	movlw	0
  5481  0009CE  6E22               	movwf	(___fldiv@b+2)^0,c
  5482  0009D0  0E00               	movlw	0
  5483  0009D2  6E23               	movwf	(___fldiv@b+3)^0,c
  5484  0009D4                     l3785:
  5485  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  5486  0009D6  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5487  0009D8  EFF9  F004         	goto	u2970
  5488  0009DC  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5489  0009DE  E106               	bnz	u2971
  5490  0009E0  0431               	decf	___fldiv@new_exp^0,w,c
  5491  0009E2  B0D8               	btfsc	status,0,c
  5492  0009E4  EFF6  F004         	goto	u2971
  5493  0009E8  EFF9  F004         	goto	u2970
  5494  0009EC                     u2971:
  5495  0009EC  FFFF               	dw	65535	; assembler added errata NOP
  5496  0009EE  EF08  F005         	goto	l3789
  5497  0009F2                     u2970:
  5498  0009F2  FFFF               	dw	65535	; assembler added errata NOP
  5499  0009F4  0E00               	movlw	0
  5500  0009F6  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5501  0009F8  0E00               	movlw	0
  5502  0009FA  6E31               	movwf	___fldiv@new_exp^0,c
  5503  0009FC  0E00               	movlw	0
  5504  0009FE  6E20               	movwf	___fldiv@b^0,c
  5505  000A00  0E00               	movlw	0
  5506  000A02  6E21               	movwf	(___fldiv@b+1)^0,c
  5507  000A04  0E00               	movlw	0
  5508  000A06  6E22               	movwf	(___fldiv@b+2)^0,c
  5509  000A08  0E00               	movlw	0
  5510  000A0A  6E23               	movwf	(___fldiv@b+3)^0,c
  5511  000A0C  0E00               	movlw	0
  5512  000A0E  6E30               	movwf	___fldiv@sign^0,c
  5513  000A10                     l3789:
  5514  000A10  FFFF               	dw	65535	; assembler added errata NOP
  5515  000A12  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5516  000A16  A037               	btfss	___fldiv@bexp^0,0,c
  5517  000A18  EF10  F005         	goto	u2981
  5518  000A1C  EF13  F005         	goto	u2980
  5519  000A20                     u2981:
  5520  000A20  FFFF               	dw	65535	; assembler added errata NOP
  5521  000A22  EF17  F005         	goto	l3795
  5522  000A26                     u2980:
  5523  000A26  FFFF               	dw	65535	; assembler added errata NOP
  5524  000A28  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5525  000A2A  EF19  F005         	goto	l3797
  5526  000A2E                     l3795:
  5527  000A2E  FFFF               	dw	65535	; assembler added errata NOP
  5528  000A30  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5529  000A32                     l3797:
  5530  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5531  000A34  90D8               	bcf	status,0,c
  5532  000A36  3037               	rrcf	___fldiv@bexp^0,w,c
  5533  000A38  6E23               	movwf	(___fldiv@b+3)^0,c
  5534  000A3A  EF9D  F003         	goto	l3711
  5535  000A3E                     l1222:
  5536  000A3E  FFFF               	dw	65535	; assembler added errata NOP
  5537  000A40  0012               	return		;funcret
  5538  000A42  FFFF               	dw	65535	; errata NOP
  5539  000A44                     __end_of___fldiv:
  5540                           	callstack 0
  5541                           
  5542 ;; *************** function _releaseObj *****************
  5543 ;; Defined at:
  5544 ;;		line 778 in file "motors.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;		None
  5547 ;; Auto vars:     Size  Location     Type
  5548 ;;		None
  5549 ;; Return value:  Size  Location     Type
  5550 ;;                  1    wreg      void 
  5551 ;; Registers used:
  5552 ;;		wreg, status,2, status,0, cstack
  5553 ;; Tracked objects:
  5554 ;;		On entry : 0/0
  5555 ;;		On exit  : 0/0
  5556 ;;		Unchanged: 0/0
  5557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5558 ;;      Params:         0       0       0       0       0       0       0
  5559 ;;      Locals:         0       0       0       0       0       0       0
  5560 ;;      Temps:          0       0       0       0       0       0       0
  5561 ;;      Totals:         0       0       0       0       0       0       0
  5562 ;;Total ram usage:        0 bytes
  5563 ;; Hardware stack levels used:    1
  5564 ;; Hardware stack levels required when called:    5
  5565 ;; This function calls:
  5566 ;;		_stepMade
  5567 ;; This function is called by:
  5568 ;;		_executeData
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           
  5572                           	psect	text31
  5573  0023BA                     __ptext31:
  5574                           	callstack 0
  5575  0023BA                     _releaseObj:
  5576                           	callstack 0
  5577  0023BA  FFFF               	dw	65535	; assembler added errata NOP
  5578  0023BC                     
  5579                           ;motors.c: 779:     LATDbits.LATD1 = 0;
  5580  0023BC  928C               	bcf	140,1,c	;volatile
  5581                           
  5582                           ;motors.c: 782:     T2CONbits.TMR2ON = 1;
  5583  0023BE  84CA               	bsf	202,2,c	;volatile
  5584  0023C0                     l4147:
  5585  0023C0  FFFF               	dw	65535	; assembler added errata NOP
  5586  0023C2  EC4A  F012         	call	_stepMade	;wreg free
  5587  0023C6  5012               	movf	?_stepMade^0,w,c
  5588  0023C8  1013               	iorwf	(?_stepMade+1)^0,w,c
  5589  0023CA  B4D8               	btfsc	status,2,c
  5590  0023CC  EFEA  F011         	goto	u3631
  5591  0023D0  EFED  F011         	goto	u3630
  5592  0023D4                     u3631:
  5593  0023D4  FFFF               	dw	65535	; assembler added errata NOP
  5594  0023D6  EFE0  F011         	goto	l4147
  5595  0023DA                     u3630:
  5596  0023DA  FFFF               	dw	65535	; assembler added errata NOP
  5597  0023DC                     
  5598                           ;motors.c: 784:     T2CONbits.TMR2ON = 1;
  5599  0023DC  84CA               	bsf	202,2,c	;volatile
  5600  0023DE                     
  5601                           ;motors.c: 785:     TMR2 = 0;
  5602  0023DE  0E00               	movlw	0
  5603  0023E0  6ECC               	movwf	204,c	;volatile
  5604  0023E2  0012               	return		;funcret
  5605  0023E4  FFFF               	dw	65535	; errata NOP
  5606  0023E6                     __end_of_releaseObj:
  5607                           	callstack 0
  5608                           
  5609 ;; *************** function _pickObject *****************
  5610 ;; Defined at:
  5611 ;;		line 765 in file "motors.c"
  5612 ;; Parameters:    Size  Location     Type
  5613 ;;		None
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;		None
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  1    wreg      void 
  5618 ;; Registers used:
  5619 ;;		wreg, status,2, status,0, cstack
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5625 ;;      Params:         0       0       0       0       0       0       0
  5626 ;;      Locals:         0       0       0       0       0       0       0
  5627 ;;      Temps:          0       0       0       0       0       0       0
  5628 ;;      Totals:         0       0       0       0       0       0       0
  5629 ;;Total ram usage:        0 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    5
  5632 ;; This function calls:
  5633 ;;		_stepMade
  5634 ;; This function is called by:
  5635 ;;		_executeData
  5636 ;; This function uses a non-reentrant model
  5637 ;;
  5638                           
  5639                           	psect	text32
  5640  0023E6                     __ptext32:
  5641                           	callstack 0
  5642  0023E6                     _pickObject:
  5643                           	callstack 0
  5644  0023E6  FFFF               	dw	65535	; assembler added errata NOP
  5645  0023E8                     
  5646                           ;motors.c: 766:     LATDbits.LATD1 = 1;
  5647  0023E8  828C               	bsf	140,1,c	;volatile
  5648                           
  5649                           ;motors.c: 769:     T2CONbits.TMR2ON = 1;
  5650  0023EA  84CA               	bsf	202,2,c	;volatile
  5651  0023EC                     l4141:
  5652  0023EC  FFFF               	dw	65535	; assembler added errata NOP
  5653  0023EE  EC4A  F012         	call	_stepMade	;wreg free
  5654  0023F2  5012               	movf	?_stepMade^0,w,c
  5655  0023F4  1013               	iorwf	(?_stepMade+1)^0,w,c
  5656  0023F6  B4D8               	btfsc	status,2,c
  5657  0023F8  EF00  F012         	goto	u3621
  5658  0023FC  EF03  F012         	goto	u3620
  5659  002400                     u3621:
  5660  002400  FFFF               	dw	65535	; assembler added errata NOP
  5661  002402  EFF6  F011         	goto	l4141
  5662  002406                     u3620:
  5663  002406  FFFF               	dw	65535	; assembler added errata NOP
  5664  002408                     
  5665                           ;motors.c: 771:     T2CONbits.TMR2ON = 1;
  5666  002408  84CA               	bsf	202,2,c	;volatile
  5667  00240A                     
  5668                           ;motors.c: 772:     TMR2 = 0;
  5669  00240A  0E00               	movlw	0
  5670  00240C  6ECC               	movwf	204,c	;volatile
  5671  00240E  0012               	return		;funcret
  5672  002410  FFFF               	dw	65535	; errata NOP
  5673  002412                     __end_of_pickObject:
  5674                           	callstack 0
  5675                           
  5676 ;; *************** function _moveToPoint *****************
  5677 ;; Defined at:
  5678 ;;		line 312 in file "motors.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;  x1              2   20[COMRAM] int 
  5681 ;;  y1              2   22[COMRAM] int 
  5682 ;;  x2              2   24[COMRAM] int 
  5683 ;;  y2              2   26[COMRAM] int 
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;  keepMovingX     1   33[COMRAM] unsigned char 
  5686 ;;  MOT2Directio    1   32[COMRAM] unsigned char 
  5687 ;;  MOT1Directio    1   31[COMRAM] unsigned char 
  5688 ;;  keepMovingY     1   30[COMRAM] unsigned char 
  5689 ;; Return value:  Size  Location     Type
  5690 ;;                  1    wreg      unsigned char 
  5691 ;; Registers used:
  5692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5693 ;; Tracked objects:
  5694 ;;		On entry : 0/0
  5695 ;;		On exit  : 0/0
  5696 ;;		Unchanged: 0/0
  5697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5698 ;;      Params:         8       0       0       0       0       0       0
  5699 ;;      Locals:         4       0       0       0       0       0       0
  5700 ;;      Temps:          2       0       0       0       0       0       0
  5701 ;;      Totals:        14       0       0       0       0       0       0
  5702 ;;Total ram usage:       14 bytes
  5703 ;; Hardware stack levels used:    1
  5704 ;; Hardware stack levels required when called:    5
  5705 ;; This function calls:
  5706 ;;		_resetStep
  5707 ;;		_stepCounter
  5708 ;;		_stepMade
  5709 ;; This function is called by:
  5710 ;;		_executeData
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714                           	psect	text33
  5715  000A44                     __ptext33:
  5716                           	callstack 0
  5717  000A44                     _moveToPoint:
  5718                           	callstack 0
  5719  000A44  FFFF               	dw	65535	; assembler added errata NOP
  5720  000A46                     
  5721                           ;motors.c: 314:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 317:     if(x2
      +                           > maxX || y2 > maxY){
  5722  000A46  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5723  000A48  E107               	bnz	u3161
  5724  000A4A  0E15               	movlw	21
  5725  000A4C  5C19               	subwf	moveToPoint@x2^0,w,c
  5726  000A4E  B0D8               	btfsc	status,0,c
  5727  000A50  EF2C  F005         	goto	u3161
  5728  000A54  EF2F  F005         	goto	u3160
  5729  000A58                     u3161:
  5730  000A58  FFFF               	dw	65535	; assembler added errata NOP
  5731  000A5A  EF3C  F005         	goto	l3899
  5732  000A5E                     u3160:
  5733  000A5E  FFFF               	dw	65535	; assembler added errata NOP
  5734  000A60  501C               	movf	(moveToPoint@y2+1)^0,w,c
  5735  000A62  E10A               	bnz	u3170
  5736  000A64  0E15               	movlw	21
  5737  000A66  5C1B               	subwf	moveToPoint@y2^0,w,c
  5738  000A68  A0D8               	btfss	status,0,c
  5739  000A6A  EF39  F005         	goto	u3171
  5740  000A6E  EF3C  F005         	goto	u3170
  5741  000A72                     u3171:
  5742  000A72  FFFF               	dw	65535	; assembler added errata NOP
  5743  000A74  EF40  F005         	goto	l3903
  5744  000A78                     u3170:
  5745  000A78                     l3899:
  5746  000A78  FFFF               	dw	65535	; assembler added errata NOP
  5747                           
  5748                           ;motors.c: 318:         return(5);
  5749  000A7A  0E05               	movlw	5
  5750  000A7C  EF10  F007         	goto	l160
  5751  000A80                     l3903:
  5752  000A80  FFFF               	dw	65535	; assembler added errata NOP
  5753                           
  5754                           ;motors.c: 339:     if((x2 - x1) > 0){
  5755  000A82  5015               	movf	moveToPoint@x1^0,w,c
  5756  000A84  5C19               	subwf	moveToPoint@x2^0,w,c
  5757  000A86  6E1D               	movwf	??_moveToPoint^0,c
  5758  000A88  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5759  000A8A  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5760  000A8C  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5761  000A8E  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5762  000A90  EF52  F005         	goto	u3181
  5763  000A94  501E               	movf	(??_moveToPoint+1)^0,w,c
  5764  000A96  E109               	bnz	u3180
  5765  000A98  041D               	decf	??_moveToPoint^0,w,c
  5766  000A9A  A0D8               	btfss	status,0,c
  5767  000A9C  EF52  F005         	goto	u3181
  5768  000AA0  EF55  F005         	goto	u3180
  5769  000AA4                     u3181:
  5770  000AA4  FFFF               	dw	65535	; assembler added errata NOP
  5771  000AA6  EF5E  F005         	goto	l161
  5772  000AAA                     u3180:
  5773  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  5774  000AAC                     
  5775                           ;motors.c: 340:         motCounter[0][1] = 1;
  5776  000AAC  0E00               	movlw	0
  5777  000AAE  6E61               	movwf	(_motCounter+3)^0,c
  5778  000AB0  0E01               	movlw	1
  5779  000AB2  6E60               	movwf	(_motCounter+2)^0,c
  5780                           
  5781                           ;motors.c: 341:         MOT1Direction = 1;
  5782  000AB4  0E01               	movlw	1
  5783  000AB6  6E20               	movwf	moveToPoint@MOT1Direction^0,c
  5784                           
  5785                           ;motors.c: 342:     }else{
  5786  000AB8  EF63  F005         	goto	l3909
  5787  000ABC                     l161:
  5788  000ABC  FFFF               	dw	65535	; assembler added errata NOP
  5789                           
  5790                           ;motors.c: 343:         motCounter[0][1] = -1;
  5791  000ABE  6860               	setf	(_motCounter+2)^0,c
  5792  000AC0  6861               	setf	(_motCounter+3)^0,c
  5793  000AC2                     
  5794                           ;motors.c: 344:         MOT1Direction = 0;
  5795  000AC2  0E00               	movlw	0
  5796  000AC4  6E20               	movwf	moveToPoint@MOT1Direction^0,c
  5797  000AC6                     l3909:
  5798  000AC6  FFFF               	dw	65535	; assembler added errata NOP
  5799                           
  5800                           ;motors.c: 347:     if((y2 - y1) > 0){
  5801  000AC8  5017               	movf	moveToPoint@y1^0,w,c
  5802  000ACA  5C1B               	subwf	moveToPoint@y2^0,w,c
  5803  000ACC  6E1D               	movwf	??_moveToPoint^0,c
  5804  000ACE  5018               	movf	(moveToPoint@y1+1)^0,w,c
  5805  000AD0  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  5806  000AD2  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5807  000AD4  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5808  000AD6  EF75  F005         	goto	u3191
  5809  000ADA  501E               	movf	(??_moveToPoint+1)^0,w,c
  5810  000ADC  E109               	bnz	u3190
  5811  000ADE  041D               	decf	??_moveToPoint^0,w,c
  5812  000AE0  A0D8               	btfss	status,0,c
  5813  000AE2  EF75  F005         	goto	u3191
  5814  000AE6  EF78  F005         	goto	u3190
  5815  000AEA                     u3191:
  5816  000AEA  FFFF               	dw	65535	; assembler added errata NOP
  5817  000AEC  EF81  F005         	goto	l163
  5818  000AF0                     u3190:
  5819  000AF0  FFFF               	dw	65535	; assembler added errata NOP
  5820  000AF2                     
  5821                           ;motors.c: 348:         motCounter[1][1] = 1;
  5822  000AF2  0E00               	movlw	0
  5823  000AF4  6E65               	movwf	(_motCounter+7)^0,c
  5824  000AF6  0E01               	movlw	1
  5825  000AF8  6E64               	movwf	(_motCounter+6)^0,c
  5826                           
  5827                           ;motors.c: 349:         MOT2Direction = 1;
  5828  000AFA  0E01               	movlw	1
  5829  000AFC  6E21               	movwf	moveToPoint@MOT2Direction^0,c
  5830                           
  5831                           ;motors.c: 350:     }else{
  5832  000AFE  EF86  F005         	goto	l164
  5833  000B02                     l163:
  5834  000B02  FFFF               	dw	65535	; assembler added errata NOP
  5835                           
  5836                           ;motors.c: 351:         motCounter[2][1] = -1;
  5837  000B04  6868               	setf	(_motCounter+10)^0,c
  5838  000B06  6869               	setf	(_motCounter+11)^0,c
  5839  000B08                     
  5840                           ;motors.c: 352:         MOT2Direction = 0;
  5841  000B08  0E00               	movlw	0
  5842  000B0A  6E21               	movwf	moveToPoint@MOT2Direction^0,c
  5843  000B0C                     l164:
  5844  000B0C  FFFF               	dw	65535	; assembler added errata NOP
  5845                           
  5846                           ;motors.c: 357:     unsigned char keepMovingX = 1;
  5847  000B0E  0E01               	movlw	1
  5848  000B10  6E22               	movwf	moveToPoint@keepMovingX^0,c
  5849                           
  5850                           ;motors.c: 358:     unsigned char keepMovingY = 1;
  5851  000B12  0E01               	movlw	1
  5852  000B14  6E1F               	movwf	moveToPoint@keepMovingY^0,c
  5853  000B16                     
  5854                           ;motors.c: 361:     T2CONbits.TMR2ON = 1;
  5855  000B16  84CA               	bsf	202,2,c	;volatile
  5856                           
  5857                           ;motors.c: 363:     tm0Error = 0;
  5858  000B18  0E00               	movlw	0
  5859  000B1A  6E51               	movwf	(_tm0Error+1)^0,c
  5860  000B1C  0E00               	movlw	0
  5861  000B1E  6E50               	movwf	_tm0Error^0,c
  5862                           
  5863                           ;motors.c: 364:     tm0Limit = 250;
  5864  000B20  0EFA               	movlw	250
  5865  000B22  6E5D               	movwf	_tm0Limit^0,c
  5866  000B24                     
  5867                           ;motors.c: 365:     T0CONbits.TMR0ON = 1;
  5868  000B24  8ED5               	bsf	213,7,c	;volatile
  5869                           
  5870                           ;motors.c: 367:     while(keepMovingX || keepMovingY){
  5871  000B26  EFF0  F006         	goto	l3991
  5872  000B2A                     l3919:
  5873  000B2A  FFFF               	dw	65535	; assembler added errata NOP
  5874                           
  5875                           ;motors.c: 370:         if(tm0Error){
  5876  000B2C  5050               	movf	_tm0Error^0,w,c
  5877  000B2E  1051               	iorwf	(_tm0Error+1)^0,w,c
  5878  000B30  B4D8               	btfsc	status,2,c
  5879  000B32  EF9D  F005         	goto	u3201
  5880  000B36  EFA0  F005         	goto	u3200
  5881  000B3A                     u3201:
  5882  000B3A  FFFF               	dw	65535	; assembler added errata NOP
  5883  000B3C  EFA7  F005         	goto	l3923
  5884  000B40                     u3200:
  5885  000B40  FFFF               	dw	65535	; assembler added errata NOP
  5886  000B42                     
  5887                           ;motors.c: 376:             tm0Error = 4;
  5888  000B42  0E00               	movlw	0
  5889  000B44  6E51               	movwf	(_tm0Error+1)^0,c
  5890  000B46  0E04               	movlw	4
  5891  000B48  6E50               	movwf	_tm0Error^0,c
  5892                           
  5893                           ;motors.c: 377:             break;
  5894  000B4A  EF04  F007         	goto	l168
  5895  000B4E                     l3923:
  5896  000B4E  FFFF               	dw	65535	; assembler added errata NOP
  5897                           
  5898                           ;motors.c: 385:         if(MOT1Direction == 1){
  5899  000B50  0420               	decf	moveToPoint@MOT1Direction^0,w,c
  5900  000B52  A4D8               	btfss	status,2,c
  5901  000B54  EFAE  F005         	goto	u3211
  5902  000B58  EFB1  F005         	goto	u3210
  5903  000B5C                     u3211:
  5904  000B5C  FFFF               	dw	65535	; assembler added errata NOP
  5905  000B5E  EFFA  F005         	goto	l3939
  5906  000B62                     u3210:
  5907  000B62  FFFF               	dw	65535	; assembler added errata NOP
  5908  000B64                     
  5909                           ;motors.c: 386:             if(x1 + stepCounter() >= x2){
  5910  000B64  ECA4  F012         	call	_stepCounter	;wreg free
  5911  000B68  5015               	movf	moveToPoint@x1^0,w,c
  5912  000B6A  2612               	addwf	?_stepCounter^0,f,c
  5913  000B6C  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5914  000B6E  2213               	addwfc	(?_stepCounter+1)^0,f,c
  5915  000B70  5019               	movf	moveToPoint@x2^0,w,c
  5916  000B72  5C12               	subwf	?_stepCounter^0,w,c
  5917  000B74  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5918  000B76  5813               	subwfb	(?_stepCounter+1)^0,w,c
  5919  000B78  A0D8               	btfss	status,0,c
  5920  000B7A  EFC1  F005         	goto	u3221
  5921  000B7E  EFC4  F005         	goto	u3220
  5922  000B82                     u3221:
  5923  000B82  FFFF               	dw	65535	; assembler added errata NOP
  5924  000B84  EFCA  F005         	goto	l3929
  5925  000B88                     u3220:
  5926  000B88  FFFF               	dw	65535	; assembler added errata NOP
  5927  000B8A                     l3927:
  5928  000B8A  FFFF               	dw	65535	; assembler added errata NOP
  5929                           
  5930                           ;motors.c: 388:                 keepMovingX = 0;
  5931  000B8C  0E00               	movlw	0
  5932  000B8E  6E22               	movwf	moveToPoint@keepMovingX^0,c
  5933                           
  5934                           ;motors.c: 389:             }else if(!keepMovingX){
  5935  000B90  EF3E  F006         	goto	l3955
  5936  000B94                     l3929:
  5937  000B94  FFFF               	dw	65535	; assembler added errata NOP
  5938  000B96  5022               	movf	moveToPoint@keepMovingX^0,w,c
  5939  000B98  A4D8               	btfss	status,2,c
  5940  000B9A  EFD1  F005         	goto	u3231
  5941  000B9E  EFD4  F005         	goto	u3230
  5942  000BA2                     u3231:
  5943  000BA2  FFFF               	dw	65535	; assembler added errata NOP
  5944  000BA4  EF3E  F006         	goto	l3955
  5945  000BA8                     u3230:
  5946  000BA8  FFFF               	dw	65535	; assembler added errata NOP
  5947  000BAA                     
  5948                           ;motors.c: 395:             motCounter[0][0] += motCounter[0][1];
  5949  000BAA  EE20  F060         	lfsr	2,_motCounter+2
  5950  000BAE  50DE               	movf	postinc2,w,c
  5951  000BB0  265E               	addwf	_motCounter^0,f,c
  5952  000BB2  50DD               	movf	postdec2,w,c
  5953  000BB4  225F               	addwfc	(_motCounter+1)^0,f,c
  5954  000BB6                     
  5955                           ;motors.c: 396:             if(motCounter[0][0] > 3){
  5956  000BB6  BE5F               	btfsc	(_motCounter+1)^0,7,c
  5957  000BB8  EFE7  F005         	goto	u3241
  5958  000BBC  505F               	movf	(_motCounter+1)^0,w,c
  5959  000BBE  E10A               	bnz	u3240
  5960  000BC0  0E04               	movlw	4
  5961  000BC2  5C5E               	subwf	_motCounter^0,w,c
  5962  000BC4  A0D8               	btfss	status,0,c
  5963  000BC6  EFE7  F005         	goto	u3241
  5964  000BCA  EFEA  F005         	goto	u3240
  5965  000BCE                     u3241:
  5966  000BCE  FFFF               	dw	65535	; assembler added errata NOP
  5967  000BD0  EFEF  F005         	goto	l3937
  5968  000BD4                     u3240:
  5969  000BD4  FFFF               	dw	65535	; assembler added errata NOP
  5970  000BD6                     
  5971                           ;motors.c: 397:                 motCounter[0][0] = 0;
  5972  000BD6  0E00               	movlw	0
  5973  000BD8  6E5F               	movwf	(_motCounter+1)^0,c
  5974  000BDA  0E00               	movlw	0
  5975  000BDC  6E5E               	movwf	_motCounter^0,c
  5976  000BDE                     l3937:
  5977  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  5978                           
  5979                           ;motors.c: 400:             LATA = stepMot1[motCounter[0][0]];
  5980  000BE0  0E8C               	movlw	low _stepMot1
  5981  000BE2  245E               	addwf	_motCounter^0,w,c
  5982  000BE4  6ED9               	movwf	fsr2l,c
  5983  000BE6  0E00               	movlw	high _stepMot1
  5984  000BE8  205F               	addwfc	(_motCounter+1)^0,w,c
  5985  000BEA  6EDA               	movwf	fsr2h,c
  5986  000BEC  50DF               	movf	indf2,w,c
  5987  000BEE  6E89               	movwf	137,c	;volatile
  5988  000BF0  EF3E  F006         	goto	l3955
  5989  000BF4                     l3939:
  5990  000BF4  FFFF               	dw	65535	; assembler added errata NOP
  5991  000BF6  5020               	movf	moveToPoint@MOT1Direction^0,w,c
  5992  000BF8  A4D8               	btfss	status,2,c
  5993  000BFA  EF01  F006         	goto	u3251
  5994  000BFE  EF04  F006         	goto	u3250
  5995  000C02                     u3251:
  5996  000C02  FFFF               	dw	65535	; assembler added errata NOP
  5997  000C04  EF3E  F006         	goto	l3955
  5998  000C08                     u3250:
  5999  000C08  FFFF               	dw	65535	; assembler added errata NOP
  6000  000C0A                     
  6001                           ;motors.c: 404:             if(x1 - stepCounter() <= x2){
  6002  000C0A  ECA4  F012         	call	_stepCounter	;wreg free
  6003  000C0E  C015  F01D         	movff	moveToPoint@x1,??_moveToPoint
  6004  000C12  C016  F01E         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6005  000C16  5012               	movf	?_stepCounter^0,w,c
  6006  000C18  5E1D               	subwf	??_moveToPoint^0,f,c
  6007  000C1A  5013               	movf	(?_stepCounter+1)^0,w,c
  6008  000C1C  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6009  000C1E  501D               	movf	??_moveToPoint^0,w,c
  6010  000C20  5C19               	subwf	moveToPoint@x2^0,w,c
  6011  000C22  501E               	movf	(??_moveToPoint+1)^0,w,c
  6012  000C24  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  6013  000C26  A0D8               	btfss	status,0,c
  6014  000C28  EF18  F006         	goto	u3261
  6015  000C2C  EF1B  F006         	goto	u3260
  6016  000C30                     u3261:
  6017  000C30  FFFF               	dw	65535	; assembler added errata NOP
  6018  000C32  EF1E  F006         	goto	l3945
  6019  000C36                     u3260:
  6020  000C36  FFFF               	dw	65535	; assembler added errata NOP
  6021  000C38  EFC5  F005         	goto	l3927
  6022  000C3C                     l3945:
  6023  000C3C  FFFF               	dw	65535	; assembler added errata NOP
  6024  000C3E  5022               	movf	moveToPoint@keepMovingX^0,w,c
  6025  000C40  A4D8               	btfss	status,2,c
  6026  000C42  EF25  F006         	goto	u3271
  6027  000C46  EF28  F006         	goto	u3270
  6028  000C4A                     u3271:
  6029  000C4A  FFFF               	dw	65535	; assembler added errata NOP
  6030  000C4C  EF3E  F006         	goto	l3955
  6031  000C50                     u3270:
  6032  000C50  FFFF               	dw	65535	; assembler added errata NOP
  6033  000C52                     
  6034                           ;motors.c: 413:             motCounter[0][0] += motCounter[0][1];
  6035  000C52  EE20  F060         	lfsr	2,_motCounter+2
  6036  000C56  50DE               	movf	postinc2,w,c
  6037  000C58  265E               	addwf	_motCounter^0,f,c
  6038  000C5A  50DD               	movf	postdec2,w,c
  6039  000C5C  225F               	addwfc	(_motCounter+1)^0,f,c
  6040  000C5E                     
  6041                           ;motors.c: 414:             if(motCounter[0][0] < 0){
  6042  000C5E  BE5F               	btfsc	(_motCounter+1)^0,7,c
  6043  000C60  EF37  F006         	goto	u3280
  6044  000C64  EF34  F006         	goto	u3281
  6045  000C68                     u3281:
  6046  000C68  FFFF               	dw	65535	; assembler added errata NOP
  6047  000C6A  EFEF  F005         	goto	l3937
  6048  000C6E                     u3280:
  6049  000C6E  FFFF               	dw	65535	; assembler added errata NOP
  6050  000C70                     
  6051                           ;motors.c: 415:                 motCounter[0][0] = 3;
  6052  000C70  0E00               	movlw	0
  6053  000C72  6E5F               	movwf	(_motCounter+1)^0,c
  6054  000C74  0E03               	movlw	3
  6055  000C76  6E5E               	movwf	_motCounter^0,c
  6056  000C78  EFEF  F005         	goto	l3937
  6057  000C7C                     l3955:
  6058  000C7C  FFFF               	dw	65535	; assembler added errata NOP
  6059                           
  6060                           ;motors.c: 423:         if(MOT2Direction == 1){
  6061  000C7E  0421               	decf	moveToPoint@MOT2Direction^0,w,c
  6062  000C80  A4D8               	btfss	status,2,c
  6063  000C82  EF45  F006         	goto	u3291
  6064  000C86  EF48  F006         	goto	u3290
  6065  000C8A                     u3291:
  6066  000C8A  FFFF               	dw	65535	; assembler added errata NOP
  6067  000C8C  EF91  F006         	goto	l3971
  6068  000C90                     u3290:
  6069  000C90  FFFF               	dw	65535	; assembler added errata NOP
  6070  000C92                     
  6071                           ;motors.c: 425:             if(y1 + stepCounter() >= y2){
  6072  000C92  ECA4  F012         	call	_stepCounter	;wreg free
  6073  000C96  5017               	movf	moveToPoint@y1^0,w,c
  6074  000C98  2612               	addwf	?_stepCounter^0,f,c
  6075  000C9A  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6076  000C9C  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6077  000C9E  501B               	movf	moveToPoint@y2^0,w,c
  6078  000CA0  5C12               	subwf	?_stepCounter^0,w,c
  6079  000CA2  501C               	movf	(moveToPoint@y2+1)^0,w,c
  6080  000CA4  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6081  000CA6  A0D8               	btfss	status,0,c
  6082  000CA8  EF58  F006         	goto	u3301
  6083  000CAC  EF5B  F006         	goto	u3300
  6084  000CB0                     u3301:
  6085  000CB0  FFFF               	dw	65535	; assembler added errata NOP
  6086  000CB2  EF61  F006         	goto	l3961
  6087  000CB6                     u3300:
  6088  000CB6  FFFF               	dw	65535	; assembler added errata NOP
  6089  000CB8                     l3959:
  6090  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6091                           
  6092                           ;motors.c: 427:                 keepMovingY = 0;
  6093  000CBA  0E00               	movlw	0
  6094  000CBC  6E1F               	movwf	moveToPoint@keepMovingY^0,c
  6095                           
  6096                           ;motors.c: 428:             }else if(!keepMovingX){
  6097  000CBE  EFD5  F006         	goto	l3987
  6098  000CC2                     l3961:
  6099  000CC2  FFFF               	dw	65535	; assembler added errata NOP
  6100  000CC4  5022               	movf	moveToPoint@keepMovingX^0,w,c
  6101  000CC6  A4D8               	btfss	status,2,c
  6102  000CC8  EF68  F006         	goto	u3311
  6103  000CCC  EF6B  F006         	goto	u3310
  6104  000CD0                     u3311:
  6105  000CD0  FFFF               	dw	65535	; assembler added errata NOP
  6106  000CD2  EFD5  F006         	goto	l185
  6107  000CD6                     u3310:
  6108  000CD6  FFFF               	dw	65535	; assembler added errata NOP
  6109  000CD8                     
  6110                           ;motors.c: 434:             motCounter[1][0] += motCounter[1][1];
  6111  000CD8  EE20  F064         	lfsr	2,_motCounter+6
  6112  000CDC  50DE               	movf	postinc2,w,c
  6113  000CDE  2662               	addwf	(_motCounter+4)^0,f,c
  6114  000CE0  50DD               	movf	postdec2,w,c
  6115  000CE2  2263               	addwfc	(_motCounter+5)^0,f,c
  6116  000CE4                     
  6117                           ;motors.c: 435:             if(motCounter[1][0] > 3){
  6118  000CE4  BE63               	btfsc	(_motCounter+5)^0,7,c
  6119  000CE6  EF7E  F006         	goto	u3321
  6120  000CEA  5063               	movf	(_motCounter+5)^0,w,c
  6121  000CEC  E10A               	bnz	u3320
  6122  000CEE  0E04               	movlw	4
  6123  000CF0  5C62               	subwf	(_motCounter+4)^0,w,c
  6124  000CF2  A0D8               	btfss	status,0,c
  6125  000CF4  EF7E  F006         	goto	u3321
  6126  000CF8  EF81  F006         	goto	u3320
  6127  000CFC                     u3321:
  6128  000CFC  FFFF               	dw	65535	; assembler added errata NOP
  6129  000CFE  EF86  F006         	goto	l3969
  6130  000D02                     u3320:
  6131  000D02  FFFF               	dw	65535	; assembler added errata NOP
  6132  000D04                     
  6133                           ;motors.c: 436:                 motCounter[1][0] = 0;
  6134  000D04  0E00               	movlw	0
  6135  000D06  6E63               	movwf	(_motCounter+5)^0,c
  6136  000D08  0E00               	movlw	0
  6137  000D0A  6E62               	movwf	(_motCounter+4)^0,c
  6138  000D0C                     l3969:
  6139  000D0C  FFFF               	dw	65535	; assembler added errata NOP
  6140                           
  6141                           ;motors.c: 439:             LATB = stepMot2[motCounter[1][0]];
  6142  000D0E  0E88               	movlw	low _stepMot2
  6143  000D10  2462               	addwf	(_motCounter+4)^0,w,c
  6144  000D12  6ED9               	movwf	fsr2l,c
  6145  000D14  0E00               	movlw	high _stepMot2
  6146  000D16  2063               	addwfc	(_motCounter+5)^0,w,c
  6147  000D18  6EDA               	movwf	fsr2h,c
  6148  000D1A  50DF               	movf	indf2,w,c
  6149  000D1C  6E8A               	movwf	138,c	;volatile
  6150  000D1E  EFD5  F006         	goto	l3987
  6151  000D22                     l3971:
  6152  000D22  FFFF               	dw	65535	; assembler added errata NOP
  6153  000D24  5021               	movf	moveToPoint@MOT2Direction^0,w,c
  6154  000D26  A4D8               	btfss	status,2,c
  6155  000D28  EF98  F006         	goto	u3331
  6156  000D2C  EF9B  F006         	goto	u3330
  6157  000D30                     u3331:
  6158  000D30  FFFF               	dw	65535	; assembler added errata NOP
  6159  000D32  EFD5  F006         	goto	l3987
  6160  000D36                     u3330:
  6161  000D36  FFFF               	dw	65535	; assembler added errata NOP
  6162  000D38                     
  6163                           ;motors.c: 444:             if(y1 - stepCounter() <= y2){
  6164  000D38  ECA4  F012         	call	_stepCounter	;wreg free
  6165  000D3C  C017  F01D         	movff	moveToPoint@y1,??_moveToPoint
  6166  000D40  C018  F01E         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6167  000D44  5012               	movf	?_stepCounter^0,w,c
  6168  000D46  5E1D               	subwf	??_moveToPoint^0,f,c
  6169  000D48  5013               	movf	(?_stepCounter+1)^0,w,c
  6170  000D4A  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6171  000D4C  501D               	movf	??_moveToPoint^0,w,c
  6172  000D4E  5C1B               	subwf	moveToPoint@y2^0,w,c
  6173  000D50  501E               	movf	(??_moveToPoint+1)^0,w,c
  6174  000D52  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6175  000D54  A0D8               	btfss	status,0,c
  6176  000D56  EFAF  F006         	goto	u3341
  6177  000D5A  EFB2  F006         	goto	u3340
  6178  000D5E                     u3341:
  6179  000D5E  FFFF               	dw	65535	; assembler added errata NOP
  6180  000D60  EFB5  F006         	goto	l3977
  6181  000D64                     u3340:
  6182  000D64  FFFF               	dw	65535	; assembler added errata NOP
  6183  000D66  EF5C  F006         	goto	l3959
  6184  000D6A                     l3977:
  6185  000D6A  FFFF               	dw	65535	; assembler added errata NOP
  6186  000D6C  5022               	movf	moveToPoint@keepMovingX^0,w,c
  6187  000D6E  A4D8               	btfss	status,2,c
  6188  000D70  EFBC  F006         	goto	u3351
  6189  000D74  EFBF  F006         	goto	u3350
  6190  000D78                     u3351:
  6191  000D78  FFFF               	dw	65535	; assembler added errata NOP
  6192  000D7A  EFD5  F006         	goto	l3987
  6193  000D7E                     u3350:
  6194  000D7E  FFFF               	dw	65535	; assembler added errata NOP
  6195  000D80                     
  6196                           ;motors.c: 453:             motCounter[1][0] += motCounter[1][1];
  6197  000D80  EE20  F064         	lfsr	2,_motCounter+6
  6198  000D84  50DE               	movf	postinc2,w,c
  6199  000D86  2662               	addwf	(_motCounter+4)^0,f,c
  6200  000D88  50DD               	movf	postdec2,w,c
  6201  000D8A  2263               	addwfc	(_motCounter+5)^0,f,c
  6202  000D8C                     
  6203                           ;motors.c: 454:             if(motCounter[1][0] < 0){
  6204  000D8C  BE63               	btfsc	(_motCounter+5)^0,7,c
  6205  000D8E  EFCE  F006         	goto	u3360
  6206  000D92  EFCB  F006         	goto	u3361
  6207  000D96                     u3361:
  6208  000D96  FFFF               	dw	65535	; assembler added errata NOP
  6209  000D98  EF86  F006         	goto	l3969
  6210  000D9C                     u3360:
  6211  000D9C  FFFF               	dw	65535	; assembler added errata NOP
  6212  000D9E                     
  6213                           ;motors.c: 455:                 motCounter[1][0] = 3;
  6214  000D9E  0E00               	movlw	0
  6215  000DA0  6E63               	movwf	(_motCounter+5)^0,c
  6216  000DA2  0E03               	movlw	3
  6217  000DA4  6E62               	movwf	(_motCounter+4)^0,c
  6218  000DA6  EF86  F006         	goto	l3969
  6219  000DAA                     l185:
  6220  000DAA                     l3987:
  6221  000DAA  FFFF               	dw	65535	; assembler added errata NOP
  6222  000DAC  EC4A  F012         	call	_stepMade	;wreg free
  6223  000DB0  5012               	movf	?_stepMade^0,w,c
  6224  000DB2  1013               	iorwf	(?_stepMade+1)^0,w,c
  6225  000DB4  B4D8               	btfsc	status,2,c
  6226  000DB6  EFDF  F006         	goto	u3371
  6227  000DBA  EFE2  F006         	goto	u3370
  6228  000DBE                     u3371:
  6229  000DBE  FFFF               	dw	65535	; assembler added errata NOP
  6230  000DC0  EFD5  F006         	goto	l3987
  6231  000DC4                     u3370:
  6232  000DC4  FFFF               	dw	65535	; assembler added errata NOP
  6233  000DC6                     l3989:
  6234  000DC6  FFFF               	dw	65535	; assembler added errata NOP
  6235  000DC8  EC4A  F012         	call	_stepMade	;wreg free
  6236  000DCC  5012               	movf	?_stepMade^0,w,c
  6237  000DCE  1013               	iorwf	(?_stepMade+1)^0,w,c
  6238  000DD0  B4D8               	btfsc	status,2,c
  6239  000DD2  EFED  F006         	goto	u3381
  6240  000DD6  EFF0  F006         	goto	u3380
  6241  000DDA                     u3381:
  6242  000DDA  FFFF               	dw	65535	; assembler added errata NOP
  6243  000DDC  EFE3  F006         	goto	l3989
  6244  000DE0                     u3380:
  6245  000DE0                     l3991:
  6246  000DE0  FFFF               	dw	65535	; assembler added errata NOP
  6247                           
  6248                           ;motors.c: 367:     while(keepMovingX || keepMovingY){
  6249  000DE2  5022               	movf	moveToPoint@keepMovingX^0,w,c
  6250  000DE4  A4D8               	btfss	status,2,c
  6251  000DE6  EFF7  F006         	goto	u3391
  6252  000DEA  EFFA  F006         	goto	u3390
  6253  000DEE                     u3391:
  6254  000DEE  FFFF               	dw	65535	; assembler added errata NOP
  6255  000DF0  EF95  F005         	goto	l3919
  6256  000DF4                     u3390:
  6257  000DF4  FFFF               	dw	65535	; assembler added errata NOP
  6258  000DF6  501F               	movf	moveToPoint@keepMovingY^0,w,c
  6259  000DF8  A4D8               	btfss	status,2,c
  6260  000DFA  EF01  F007         	goto	u3401
  6261  000DFE  EF04  F007         	goto	u3400
  6262  000E02                     u3401:
  6263  000E02  FFFF               	dw	65535	; assembler added errata NOP
  6264  000E04  EF95  F005         	goto	l3919
  6265  000E08                     u3400:
  6266  000E08                     l168:
  6267  000E08  FFFF               	dw	65535	; assembler added errata NOP
  6268                           
  6269                           ;motors.c: 477:     T0CONbits.TMR0ON = 0;
  6270  000E0A  9ED5               	bcf	213,7,c	;volatile
  6271                           
  6272                           ;motors.c: 478:     T2CONbits.TMR2ON = 0;
  6273  000E0C  94CA               	bcf	202,2,c	;volatile
  6274  000E0E                     
  6275                           ;motors.c: 480:     TMR0 = 0;
  6276  000E0E  0E00               	movlw	0
  6277  000E10  6ED7               	movwf	215,c	;volatile
  6278  000E12  0E00               	movlw	0
  6279  000E14  6ED6               	movwf	214,c	;volatile
  6280                           
  6281                           ;motors.c: 481:     TMR2 = 0;
  6282  000E16  0E00               	movlw	0
  6283  000E18  6ECC               	movwf	204,c	;volatile
  6284  000E1A                     
  6285                           ;motors.c: 484:     resetStep();
  6286  000E1A  ECBE  F012         	call	_resetStep	;wreg free
  6287  000E1E                     
  6288                           ;motors.c: 486:     return(tm0Error);
  6289  000E1E  5050               	movf	_tm0Error^0,w,c
  6290  000E20                     l160:
  6291  000E20  FFFF               	dw	65535	; assembler added errata NOP
  6292  000E22  0012               	return		;funcret
  6293  000E24  FFFF               	dw	65535	; errata NOP
  6294  000E26                     __end_of_moveToPoint:
  6295                           	callstack 0
  6296                           
  6297 ;; *************** function _stepCounter *****************
  6298 ;; Defined at:
  6299 ;;		line 70 in file "timer.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;		None
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;		None
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  2   17[COMRAM] unsigned int 
  6306 ;; Registers used:
  6307 ;;		None
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6313 ;;      Params:         2       0       0       0       0       0       0
  6314 ;;      Locals:         0       0       0       0       0       0       0
  6315 ;;      Temps:          0       0       0       0       0       0       0
  6316 ;;      Totals:         2       0       0       0       0       0       0
  6317 ;;Total ram usage:        2 bytes
  6318 ;; Hardware stack levels used:    1
  6319 ;; Hardware stack levels required when called:    4
  6320 ;; This function calls:
  6321 ;;		Nothing
  6322 ;; This function is called by:
  6323 ;;		_moveToPoint
  6324 ;; This function uses a non-reentrant model
  6325 ;;
  6326                           
  6327                           	psect	text34
  6328  002548                     __ptext34:
  6329                           	callstack 0
  6330  002548                     _stepCounter:
  6331                           	callstack 0
  6332  002548  FFFF               	dw	65535	; assembler added errata NOP
  6333  00254A                     
  6334                           ;timer.c: 71:     return pwmStep;
  6335  00254A  C053  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6336  00254E  6A13               	clrf	(?_stepCounter+1)^0,c
  6337  002550  0012               	return		;funcret
  6338  002552  FFFF               	dw	65535	; errata NOP
  6339  002554                     __end_of_stepCounter:
  6340                           	callstack 0
  6341                           
  6342 ;; *************** function _liftArm *****************
  6343 ;; Defined at:
  6344 ;;		line 669 in file "motors.c"
  6345 ;; Parameters:    Size  Location     Type
  6346 ;;		None
  6347 ;; Auto vars:     Size  Location     Type
  6348 ;;		None
  6349 ;; Return value:  Size  Location     Type
  6350 ;;                  1    wreg      unsigned char 
  6351 ;; Registers used:
  6352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6358 ;;      Params:         0       0       0       0       0       0       0
  6359 ;;      Locals:         0       0       0       0       0       0       0
  6360 ;;      Temps:          0       0       0       0       0       0       0
  6361 ;;      Totals:         0       0       0       0       0       0       0
  6362 ;;Total ram usage:        0 bytes
  6363 ;; Hardware stack levels used:    1
  6364 ;; Hardware stack levels required when called:    5
  6365 ;; This function calls:
  6366 ;;		_resetStep
  6367 ;;		_stepMade
  6368 ;; This function is called by:
  6369 ;;		_executeData
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           	psect	text35
  6374  0020D8                     __ptext35:
  6375                           	callstack 0
  6376  0020D8                     _liftArm:
  6377                           	callstack 0
  6378  0020D8  FFFF               	dw	65535	; assembler added errata NOP
  6379  0020DA                     
  6380                           ;motors.c: 675:     motCounter[2][1] = -1;
  6381  0020DA  6868               	setf	(_motCounter+10)^0,c
  6382  0020DC  6869               	setf	(_motCounter+11)^0,c
  6383                           
  6384                           ;motors.c: 678:     T2CONbits.TMR2ON = 1;
  6385  0020DE  84CA               	bsf	202,2,c	;volatile
  6386  0020E0                     
  6387                           ;motors.c: 680:     tm0Error = 0;
  6388  0020E0  0E00               	movlw	0
  6389  0020E2  6E51               	movwf	(_tm0Error+1)^0,c
  6390  0020E4  0E00               	movlw	0
  6391  0020E6  6E50               	movwf	_tm0Error^0,c
  6392                           
  6393                           ;motors.c: 681:     tm0Limit = 250;
  6394  0020E8  0EFA               	movlw	250
  6395  0020EA  6E5D               	movwf	_tm0Limit^0,c
  6396  0020EC                     
  6397                           ;motors.c: 682:     T0CONbits.TMR0ON = 1;
  6398  0020EC  8ED5               	bsf	213,7,c	;volatile
  6399                           
  6400                           ;motors.c: 686:     while(!PORTEbits.RE2){
  6401  0020EE  EFC3  F010         	goto	l229
  6402  0020F2                     l4097:
  6403  0020F2  FFFF               	dw	65535	; assembler added errata NOP
  6404                           
  6405                           ;motors.c: 689:         if(tm0Error){
  6406  0020F4  5050               	movf	_tm0Error^0,w,c
  6407  0020F6  1051               	iorwf	(_tm0Error+1)^0,w,c
  6408  0020F8  B4D8               	btfsc	status,2,c
  6409  0020FA  EF81  F010         	goto	u3551
  6410  0020FE  EF84  F010         	goto	u3550
  6411  002102                     u3551:
  6412  002102  FFFF               	dw	65535	; assembler added errata NOP
  6413  002104  EF8B  F010         	goto	l4101
  6414  002108                     u3550:
  6415  002108  FFFF               	dw	65535	; assembler added errata NOP
  6416  00210A                     
  6417                           ;motors.c: 694:             tm0Error = 6;
  6418  00210A  0E00               	movlw	0
  6419  00210C  6E51               	movwf	(_tm0Error+1)^0,c
  6420  00210E  0E06               	movlw	6
  6421  002110  6E50               	movwf	_tm0Error^0,c
  6422                           
  6423                           ;motors.c: 695:             break;
  6424  002112  EFCC  F010         	goto	l232
  6425  002116                     l4101:
  6426  002116  FFFF               	dw	65535	; assembler added errata NOP
  6427                           
  6428                           ;motors.c: 704:             motCounter[2][0] += motCounter[2][1];
  6429  002118  EE20  F068         	lfsr	2,_motCounter+10
  6430  00211C  50DE               	movf	postinc2,w,c
  6431  00211E  2666               	addwf	(_motCounter+8)^0,f,c
  6432  002120  50DD               	movf	postdec2,w,c
  6433  002122  2267               	addwfc	(_motCounter+9)^0,f,c
  6434  002124                     
  6435                           ;motors.c: 705:             if(motCounter[2][0] < 0){
  6436  002124  BE67               	btfsc	(_motCounter+9)^0,7,c
  6437  002126  EF9A  F010         	goto	u3560
  6438  00212A  EF97  F010         	goto	u3561
  6439  00212E                     u3561:
  6440  00212E  FFFF               	dw	65535	; assembler added errata NOP
  6441  002130  EF9F  F010         	goto	l4107
  6442  002134                     u3560:
  6443  002134  FFFF               	dw	65535	; assembler added errata NOP
  6444  002136                     
  6445                           ;motors.c: 706:                 motCounter[2][0] = 3;
  6446  002136  0E00               	movlw	0
  6447  002138  6E67               	movwf	(_motCounter+9)^0,c
  6448  00213A  0E03               	movlw	3
  6449  00213C  6E66               	movwf	(_motCounter+8)^0,c
  6450  00213E                     l4107:
  6451  00213E  FFFF               	dw	65535	; assembler added errata NOP
  6452                           
  6453                           ;motors.c: 709:             LATC = stepMot3[motCounter[2][0]];
  6454  002140  0E84               	movlw	low _stepMot3
  6455  002142  2466               	addwf	(_motCounter+8)^0,w,c
  6456  002144  6ED9               	movwf	fsr2l,c
  6457  002146  0E00               	movlw	high _stepMot3
  6458  002148  2067               	addwfc	(_motCounter+9)^0,w,c
  6459  00214A  6EDA               	movwf	fsr2h,c
  6460  00214C  50DF               	movf	indf2,w,c
  6461  00214E  6E8B               	movwf	139,c	;volatile
  6462  002150                     l4109:
  6463  002150  FFFF               	dw	65535	; assembler added errata NOP
  6464  002152  EC4A  F012         	call	_stepMade	;wreg free
  6465  002156  5012               	movf	?_stepMade^0,w,c
  6466  002158  1013               	iorwf	(?_stepMade+1)^0,w,c
  6467  00215A  B4D8               	btfsc	status,2,c
  6468  00215C  EFB2  F010         	goto	u3571
  6469  002160  EFB5  F010         	goto	u3570
  6470  002164                     u3571:
  6471  002164  FFFF               	dw	65535	; assembler added errata NOP
  6472  002166  EFA8  F010         	goto	l4109
  6473  00216A                     u3570:
  6474  00216A  FFFF               	dw	65535	; assembler added errata NOP
  6475  00216C                     l4111:
  6476  00216C  FFFF               	dw	65535	; assembler added errata NOP
  6477  00216E  EC4A  F012         	call	_stepMade	;wreg free
  6478  002172  5012               	movf	?_stepMade^0,w,c
  6479  002174  1013               	iorwf	(?_stepMade+1)^0,w,c
  6480  002176  B4D8               	btfsc	status,2,c
  6481  002178  EFC0  F010         	goto	u3581
  6482  00217C  EFC3  F010         	goto	u3580
  6483  002180                     u3581:
  6484  002180  FFFF               	dw	65535	; assembler added errata NOP
  6485  002182  EFB6  F010         	goto	l4111
  6486  002186                     u3580:
  6487  002186                     l229:
  6488  002186  FFFF               	dw	65535	; assembler added errata NOP
  6489                           
  6490                           ;motors.c: 686:     while(!PORTEbits.RE2){
  6491  002188  A484               	btfss	132,2,c	;volatile
  6492  00218A  EFC9  F010         	goto	u3591
  6493  00218E  EFCC  F010         	goto	u3590
  6494  002192                     u3591:
  6495  002192  FFFF               	dw	65535	; assembler added errata NOP
  6496  002194  EF79  F010         	goto	l4097
  6497  002198                     u3590:
  6498  002198                     l232:
  6499  002198  FFFF               	dw	65535	; assembler added errata NOP
  6500                           
  6501                           ;motors.c: 725:     T0CONbits.TMR0ON = 0;
  6502  00219A  9ED5               	bcf	213,7,c	;volatile
  6503                           
  6504                           ;motors.c: 726:     T2CONbits.TMR2ON = 0;
  6505  00219C  94CA               	bcf	202,2,c	;volatile
  6506  00219E                     
  6507                           ;motors.c: 728:     TMR0 = 0;
  6508  00219E  0E00               	movlw	0
  6509  0021A0  6ED7               	movwf	215,c	;volatile
  6510  0021A2  0E00               	movlw	0
  6511  0021A4  6ED6               	movwf	214,c	;volatile
  6512                           
  6513                           ;motors.c: 729:     TMR2 = 0;
  6514  0021A6  0E00               	movlw	0
  6515  0021A8  6ECC               	movwf	204,c	;volatile
  6516  0021AA                     
  6517                           ;motors.c: 732:     resetStep();
  6518  0021AA  ECBE  F012         	call	_resetStep	;wreg free
  6519  0021AE                     
  6520                           ;motors.c: 734:     return(tm0Error);
  6521  0021AE  5050               	movf	_tm0Error^0,w,c
  6522  0021B0  0012               	return		;funcret
  6523  0021B2  FFFF               	dw	65535	; errata NOP
  6524  0021B4                     __end_of_liftArm:
  6525                           	callstack 0
  6526                           
  6527 ;; *************** function _stepMade *****************
  6528 ;; Defined at:
  6529 ;;		line 59 in file "timer.c"
  6530 ;; Parameters:    Size  Location     Type
  6531 ;;		None
  6532 ;; Auto vars:     Size  Location     Type
  6533 ;;  temp            1   19[COMRAM] unsigned char 
  6534 ;; Return value:  Size  Location     Type
  6535 ;;                  2   17[COMRAM] unsigned int 
  6536 ;; Registers used:
  6537 ;;		wreg, status,2
  6538 ;; Tracked objects:
  6539 ;;		On entry : 0/0
  6540 ;;		On exit  : 0/0
  6541 ;;		Unchanged: 0/0
  6542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6543 ;;      Params:         2       0       0       0       0       0       0
  6544 ;;      Locals:         1       0       0       0       0       0       0
  6545 ;;      Temps:          0       0       0       0       0       0       0
  6546 ;;      Totals:         3       0       0       0       0       0       0
  6547 ;;Total ram usage:        3 bytes
  6548 ;; Hardware stack levels used:    1
  6549 ;; Hardware stack levels required when called:    4
  6550 ;; This function calls:
  6551 ;;		Nothing
  6552 ;; This function is called by:
  6553 ;;		_resetPosition
  6554 ;;		_moveToPoint
  6555 ;;		_touchObject
  6556 ;;		_touchTherm
  6557 ;;		_liftArm
  6558 ;;		_rotateObj
  6559 ;;		_pickObject
  6560 ;;		_releaseObj
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564                           	psect	text36
  6565  002494                     __ptext36:
  6566                           	callstack 0
  6567  002494                     _stepMade:
  6568                           	callstack 0
  6569  002494  FFFF               	dw	65535	; assembler added errata NOP
  6570  002496                     
  6571                           ;timer.c: 60:     unsigned char temp = stepToggle;
  6572  002496  C052  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6573  00249A                     
  6574                           ;timer.c: 62:     stepToggle = 0;
  6575  00249A  0E00               	movlw	0
  6576  00249C  6E52               	movwf	_stepToggle^0,c	;volatile
  6577  00249E                     
  6578                           ;timer.c: 64:     return temp;
  6579  00249E  C014  F012         	movff	stepMade@temp,?_stepMade
  6580  0024A2  6A13               	clrf	(?_stepMade+1)^0,c
  6581  0024A4  0012               	return		;funcret
  6582  0024A6  FFFF               	dw	65535	; errata NOP
  6583  0024A8                     __end_of_stepMade:
  6584                           	callstack 0
  6585                           
  6586 ;; *************** function _resetStep *****************
  6587 ;; Defined at:
  6588 ;;		line 77 in file "timer.c"
  6589 ;; Parameters:    Size  Location     Type
  6590 ;;		None
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;		None
  6593 ;; Return value:  Size  Location     Type
  6594 ;;                  1    wreg      void 
  6595 ;; Registers used:
  6596 ;;		wreg, status,2
  6597 ;; Tracked objects:
  6598 ;;		On entry : 0/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6602 ;;      Params:         0       0       0       0       0       0       0
  6603 ;;      Locals:         0       0       0       0       0       0       0
  6604 ;;      Temps:          0       0       0       0       0       0       0
  6605 ;;      Totals:         0       0       0       0       0       0       0
  6606 ;;Total ram usage:        0 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; Hardware stack levels required when called:    4
  6609 ;; This function calls:
  6610 ;;		Nothing
  6611 ;; This function is called by:
  6612 ;;		_resetPosition
  6613 ;;		_moveToPoint
  6614 ;;		_touchObject
  6615 ;;		_touchTherm
  6616 ;;		_liftArm
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           	psect	text37
  6621  00257C                     __ptext37:
  6622                           	callstack 0
  6623  00257C                     _resetStep:
  6624                           	callstack 0
  6625  00257C  FFFF               	dw	65535	; assembler added errata NOP
  6626  00257E                     
  6627                           ;timer.c: 78:     pwmStep = 0;
  6628  00257E  0E00               	movlw	0
  6629  002580  6E53               	movwf	_pwmStep^0,c	;volatile
  6630  002582  0012               	return		;funcret
  6631  002584  FFFF               	dw	65535	; errata NOP
  6632  002586                     __end_of_resetStep:
  6633                           	callstack 0
  6634                           
  6635 ;; *************** function _getData *****************
  6636 ;; Defined at:
  6637 ;;		line 35 in file "usart.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;		None
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;		None
  6642 ;; Return value:  Size  Location     Type
  6643 ;;                  2   17[COMRAM] PTR struct .
  6644 ;; Registers used:
  6645 ;;		wreg, status,2, status,0
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6651 ;;      Params:         2       0       0       0       0       0       0
  6652 ;;      Locals:         0       0       0       0       0       0       0
  6653 ;;      Temps:          0       0       0       0       0       0       0
  6654 ;;      Totals:         2       0       0       0       0       0       0
  6655 ;;Total ram usage:        2 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:    4
  6658 ;; This function calls:
  6659 ;;		Nothing
  6660 ;; This function is called by:
  6661 ;;		_executeData
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           	psect	text38
  6666  0024F8                     __ptext38:
  6667                           	callstack 0
  6668  0024F8                     _getData:
  6669                           	callstack 0
  6670  0024F8  FFFF               	dw	65535	; assembler added errata NOP
  6671  0024FA                     
  6672                           ;usart.c: 36:     return(&dataSequence[0]);
  6673  0024FA  0ED1               	movlw	low _dataSequence
  6674  0024FC  6E12               	movwf	?_getData^0,c
  6675  0024FE  0E00               	movlw	high _dataSequence
  6676  002500  6E13               	movwf	(?_getData+1)^0,c
  6677  002502  0012               	return		;funcret
  6678  002504  FFFF               	dw	65535	; errata NOP
  6679  002506                     __end_of_getData:
  6680                           	callstack 0
  6681                           
  6682 ;; *************** function _clearTM0 *****************
  6683 ;; Defined at:
  6684 ;;		line 35 in file "motors.c"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;		None
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;		None
  6689 ;; Return value:  Size  Location     Type
  6690 ;;                  1    wreg      void 
  6691 ;; Registers used:
  6692 ;;		wreg, status,2
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6698 ;;      Params:         0       0       0       0       0       0       0
  6699 ;;      Locals:         0       0       0       0       0       0       0
  6700 ;;      Temps:          0       0       0       0       0       0       0
  6701 ;;      Totals:         0       0       0       0       0       0       0
  6702 ;;Total ram usage:        0 bytes
  6703 ;; Hardware stack levels used:    1
  6704 ;; Hardware stack levels required when called:    4
  6705 ;; This function calls:
  6706 ;;		Nothing
  6707 ;; This function is called by:
  6708 ;;		_main
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           	psect	text39
  6713  002506                     __ptext39:
  6714                           	callstack 0
  6715  002506                     _clearTM0:
  6716                           	callstack 0
  6717  002506  FFFF               	dw	65535	; assembler added errata NOP
  6718  002508                     
  6719                           ;motors.c: 36:     tm0Error = 0;
  6720  002508  0E00               	movlw	0
  6721  00250A  6E51               	movwf	(_tm0Error+1)^0,c
  6722  00250C  0E00               	movlw	0
  6723  00250E  6E50               	movwf	_tm0Error^0,c
  6724  002510  0012               	return		;funcret
  6725  002512  FFFF               	dw	65535	; errata NOP
  6726  002514                     __end_of_clearTM0:
  6727                           	callstack 0
  6728                           
  6729 ;; *************** function _isr *****************
  6730 ;; Defined at:
  6731 ;;		line 38 in file "interrupt.c"
  6732 ;; Parameters:    Size  Location     Type
  6733 ;;		None
  6734 ;; Auto vars:     Size  Location     Type
  6735 ;;  temp            1   16[COMRAM] unsigned char 
  6736 ;; Return value:  Size  Location     Type
  6737 ;;                  1    wreg      void 
  6738 ;; Registers used:
  6739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6740 ;; Tracked objects:
  6741 ;;		On entry : 0/0
  6742 ;;		On exit  : 0/0
  6743 ;;		Unchanged: 0/0
  6744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6745 ;;      Params:         0       0       0       0       0       0       0
  6746 ;;      Locals:         1       0       0       0       0       0       0
  6747 ;;      Temps:          6       0       0       0       0       0       0
  6748 ;;      Totals:         7       0       0       0       0       0       0
  6749 ;;Total ram usage:        7 bytes
  6750 ;; Hardware stack levels used:    1
  6751 ;; Hardware stack levels required when called:    3
  6752 ;; This function calls:
  6753 ;;		_abortAll
  6754 ;;		_fatalError
  6755 ;;		_increaseStep
  6756 ;;		_retPeriod
  6757 ;;		_setThermRel
  6758 ;;		_setTouchRel
  6759 ;;		_toggleStep
  6760 ;;		_whatsTM0Limit
  6761 ;;		_writeTM0
  6762 ;;		i2_storeData
  6763 ;; This function is called by:
  6764 ;;		Interrupt level 2
  6765 ;; This function uses a non-reentrant model
  6766 ;;
  6767                           
  6768                           	psect	intcode
  6769  000008                     __pintcode:
  6770                           	callstack 0
  6771  000008                     _isr:
  6772                           	callstack 0
  6773  000008  FFFF               	dw	65535	; assembler added errata NOP
  6774                           
  6775                           ;incstack = 0
  6776  00000A  826D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6777  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6778  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6779  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6780  000018  CFF4 F010          	movff	prodh,??_isr+5
  6781  00001C                     
  6782                           ;interrupt.c: 39:     static unsigned int single_cycle = 0;;interrupt.c: 40:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 41:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 44:     if(INTCONbits.T0IF){
  6783  00001C  A4F2               	btfss	242,2,c	;volatile
  6784  00001E  EF13  F000         	goto	i2u262_41
  6785  000022  EF16  F000         	goto	i2u262_40
  6786  000026                     i2u262_41:
  6787  000026  FFFF               	dw	65535	; assembler added errata NOP
  6788  000028  EF2C  F000         	goto	i2l3409
  6789  00002C                     i2u262_40:
  6790  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6791  00002E                     
  6792                           ;interrupt.c: 45:         INTCONbits.T0IF = 0;
  6793  00002E  94F2               	bcf	242,2,c	;volatile
  6794  000030                     
  6795                           ;interrupt.c: 48:         tm0Count++;
  6796  000030  2A5A               	incf	isr@tm0Count^0,f,c
  6797  000032                     
  6798                           ;interrupt.c: 50:         if(tm0Count >= whatsTM0Limit()){
  6799  000032  ECE2  F012         	call	_whatsTM0Limit	;wreg free
  6800  000036  6E0B               	movwf	??_isr^0,c
  6801  000038  500B               	movf	??_isr^0,w,c
  6802  00003A  5C5A               	subwf	isr@tm0Count^0,w,c
  6803  00003C  A0D8               	btfss	status,0,c
  6804  00003E  EF23  F000         	goto	i2u263_41
  6805  000042  EF26  F000         	goto	i2u263_40
  6806  000046                     i2u263_41:
  6807  000046  FFFF               	dw	65535	; assembler added errata NOP
  6808  000048  EF2C  F000         	goto	i2l3409
  6809  00004C                     i2u263_40:
  6810  00004C  FFFF               	dw	65535	; assembler added errata NOP
  6811  00004E                     
  6812                           ;interrupt.c: 51:             T0CONbits.TMR0ON = 0;
  6813  00004E  9ED5               	bcf	213,7,c	;volatile
  6814  000050                     
  6815                           ;interrupt.c: 52:             tm0Count = 0;
  6816  000050  0E00               	movlw	0
  6817  000052  6E5A               	movwf	isr@tm0Count^0,c
  6818  000054                     
  6819                           ;interrupt.c: 53:             writeTM0();
  6820  000054  EC8A  F012         	call	_writeTM0	;wreg free
  6821  000058                     i2l3409:
  6822  000058  FFFF               	dw	65535	; assembler added errata NOP
  6823                           
  6824                           ;interrupt.c: 58:     if(PIR1bits.TMR1IF){
  6825  00005A  A09E               	btfss	158,0,c	;volatile
  6826  00005C  EF32  F000         	goto	i2u264_41
  6827  000060  EF35  F000         	goto	i2u264_40
  6828  000064                     i2u264_41:
  6829  000064  FFFF               	dw	65535	; assembler added errata NOP
  6830  000066  EF45  F000         	goto	i2l3417
  6831  00006A                     i2u264_40:
  6832  00006A  FFFF               	dw	65535	; assembler added errata NOP
  6833  00006C                     
  6834                           ;interrupt.c: 59:         PIR1bits.TMR1IF = 0;
  6835  00006C  909E               	bcf	158,0,c	;volatile
  6836  00006E                     
  6837                           ;interrupt.c: 60:         if(fatalError()){
  6838  00006E  ECEA  F012         	call	_fatalError	;wreg free
  6839  000072  0900               	iorlw	0
  6840  000074  B4D8               	btfsc	status,2,c
  6841  000076  EF3F  F000         	goto	i2u265_41
  6842  00007A  EF42  F000         	goto	i2u265_40
  6843  00007E                     i2u265_41:
  6844  00007E  FFFF               	dw	65535	; assembler added errata NOP
  6845  000080  EF45  F000         	goto	i2l3417
  6846  000084                     i2u265_40:
  6847  000084  FFFF               	dw	65535	; assembler added errata NOP
  6848  000086                     
  6849                           ;interrupt.c: 61:             abortAll();
  6850  000086  EC5D  F012         	call	_abortAll	;wreg free
  6851  00008A                     i2l3417:
  6852  00008A  FFFF               	dw	65535	; assembler added errata NOP
  6853                           
  6854                           ;interrupt.c: 66:     if(PIR1bits.TMR2IF){
  6855  00008C  A29E               	btfss	158,1,c	;volatile
  6856  00008E  EF4B  F000         	goto	i2u266_41
  6857  000092  EF4E  F000         	goto	i2u266_40
  6858  000096                     i2u266_41:
  6859  000096  FFFF               	dw	65535	; assembler added errata NOP
  6860  000098  EF7C  F000         	goto	i2l3437
  6861  00009C                     i2u266_40:
  6862  00009C  FFFF               	dw	65535	; assembler added errata NOP
  6863  00009E                     
  6864                           ;interrupt.c: 67:         PIR1bits.TMR2IF = 0;
  6865  00009E  929E               	bcf	158,1,c	;volatile
  6866  0000A0                     
  6867                           ;interrupt.c: 68:         single_cycle++;
  6868  0000A0  4A48               	infsnz	isr@single_cycle^0,f,c
  6869  0000A2  2A49               	incf	(isr@single_cycle+1)^0,f,c
  6870  0000A4                     
  6871                           ;interrupt.c: 71:         if(single_cycle > retPeriod()){
  6872  0000A4  EC91  F012         	call	_retPeriod	;wreg free
  6873  0000A8  5048               	movf	isr@single_cycle^0,w,c
  6874  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  6875  0000AC  5049               	movf	(isr@single_cycle+1)^0,w,c
  6876  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  6877  0000B0  B0D8               	btfsc	status,0,c
  6878  0000B2  EF5D  F000         	goto	i2u267_41
  6879  0000B6  EF60  F000         	goto	i2u267_40
  6880  0000BA                     i2u267_41:
  6881  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  6882  0000BC  EF7C  F000         	goto	i2l3437
  6883  0000C0                     i2u267_40:
  6884  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  6885  0000C2                     
  6886                           ;interrupt.c: 72:             completeStep++;
  6887  0000C2  2A59               	incf	isr@completeStep^0,f,c
  6888  0000C4                     
  6889                           ;interrupt.c: 75:             if(completeStep != 0 && !(completeStep % 2)){
  6890  0000C4  5059               	movf	isr@completeStep^0,w,c
  6891  0000C6  B4D8               	btfsc	status,2,c
  6892  0000C8  EF68  F000         	goto	i2u268_41
  6893  0000CC  EF6B  F000         	goto	i2u268_40
  6894  0000D0                     i2u268_41:
  6895  0000D0  FFFF               	dw	65535	; assembler added errata NOP
  6896  0000D2  EF79  F000         	goto	i2l3435
  6897  0000D6                     i2u268_40:
  6898  0000D6  FFFF               	dw	65535	; assembler added errata NOP
  6899  0000D8  B059               	btfsc	isr@completeStep^0,0,c
  6900  0000DA  EF71  F000         	goto	i2u269_41
  6901  0000DE  EF74  F000         	goto	i2u269_40
  6902  0000E2                     i2u269_41:
  6903  0000E2  FFFF               	dw	65535	; assembler added errata NOP
  6904  0000E4  EF79  F000         	goto	i2l3435
  6905  0000E8                     i2u269_40:
  6906  0000E8  FFFF               	dw	65535	; assembler added errata NOP
  6907  0000EA                     
  6908                           ;interrupt.c: 77:                 completeStep = 0;
  6909  0000EA  0E00               	movlw	0
  6910  0000EC  6E59               	movwf	isr@completeStep^0,c
  6911  0000EE                     
  6912                           ;interrupt.c: 80:                 increaseStep();
  6913  0000EE  ECE6  F012         	call	_increaseStep	;wreg free
  6914  0000F2                     i2l3435:
  6915  0000F2  FFFF               	dw	65535	; assembler added errata NOP
  6916                           
  6917                           ;interrupt.c: 85:             toggleStep();
  6918  0000F4  ECC3  F012         	call	_toggleStep	;wreg free
  6919  0000F8                     i2l3437:
  6920  0000F8  FFFF               	dw	65535	; assembler added errata NOP
  6921                           
  6922                           ;interrupt.c: 90:     if(PIR1bits.ADIF){
  6923  0000FA  AC9E               	btfss	158,6,c	;volatile
  6924  0000FC  EF82  F000         	goto	i2u270_41
  6925  000100  EF85  F000         	goto	i2u270_40
  6926  000104                     i2u270_41:
  6927  000104  FFFF               	dw	65535	; assembler added errata NOP
  6928  000106  EFB2  F000         	goto	i2l3449
  6929  00010A                     i2u270_40:
  6930  00010A  FFFF               	dw	65535	; assembler added errata NOP
  6931  00010C                     
  6932                           ;interrupt.c: 91:         PIR1bits.ADIF = 0;
  6933  00010C  9C9E               	bcf	158,6,c	;volatile
  6934                           
  6935                           ;interrupt.c: 94:         ADC_res = ADRESL;
  6936  00010E  CFC3 F04A          	movff	4035,_ADC_res	;volatile
  6937  000112  6A4B               	clrf	(_ADC_res+1)^0,c
  6938  000114                     
  6939                           ;interrupt.c: 95:         ADC_res |= (ADRESH << 8);
  6940  000114  50C4               	movf	196,w,c	;volatile
  6941  000116  6E0C               	movwf	(??_isr+1)^0,c
  6942  000118  6A0B               	clrf	??_isr^0,c
  6943  00011A  500B               	movf	??_isr^0,w,c
  6944  00011C  124A               	iorwf	_ADC_res^0,f,c
  6945  00011E  500C               	movf	(??_isr+1)^0,w,c
  6946  000120  124B               	iorwf	(_ADC_res+1)^0,f,c
  6947                           
  6948                           ;interrupt.c: 98:         if(ADC_res > therm_pressure){
  6949  000122  044A               	decf	_ADC_res^0,w,c
  6950  000124  0E04               	movlw	4
  6951  000126  584B               	subwfb	(_ADC_res+1)^0,w,c
  6952  000128  A0D8               	btfss	status,0,c
  6953  00012A  EF99  F000         	goto	i2u271_41
  6954  00012E  EF9C  F000         	goto	i2u271_40
  6955  000132                     i2u271_41:
  6956  000132  FFFF               	dw	65535	; assembler added errata NOP
  6957  000134  EFA3  F000         	goto	i2l3445
  6958  000138                     i2u271_40:
  6959  000138  FFFF               	dw	65535	; assembler added errata NOP
  6960  00013A                     
  6961                           ;interrupt.c: 100:             setTouchRel();
  6962  00013A  ECC8  F012         	call	_setTouchRel	;wreg free
  6963                           
  6964                           ;interrupt.c: 101:             setThermRel();
  6965  00013E  ECCD  F012         	call	_setThermRel	;wreg free
  6966                           
  6967                           ;interrupt.c: 102:         }else if(ADC_res > touch_pressure){
  6968  000142  EFB2  F000         	goto	i2l3449
  6969  000146                     i2l3445:
  6970  000146  FFFF               	dw	65535	; assembler added errata NOP
  6971  000148  044A               	decf	_ADC_res^0,w,c
  6972  00014A  0E02               	movlw	2
  6973  00014C  584B               	subwfb	(_ADC_res+1)^0,w,c
  6974  00014E  A0D8               	btfss	status,0,c
  6975  000150  EFAC  F000         	goto	i2u272_41
  6976  000154  EFAF  F000         	goto	i2u272_40
  6977  000158                     i2u272_41:
  6978  000158  FFFF               	dw	65535	; assembler added errata NOP
  6979  00015A  EFB2  F000         	goto	i2l3449
  6980  00015E                     i2u272_40:
  6981  00015E  FFFF               	dw	65535	; assembler added errata NOP
  6982  000160                     
  6983                           ;interrupt.c: 104:             setTouchRel();
  6984  000160  ECC8  F012         	call	_setTouchRel	;wreg free
  6985  000164                     i2l3449:
  6986  000164  FFFF               	dw	65535	; assembler added errata NOP
  6987                           
  6988                           ;interrupt.c: 109:     if(PIR1bits.RC1IF){
  6989  000166  AA9E               	btfss	158,5,c	;volatile
  6990  000168  EFB8  F000         	goto	i2u273_41
  6991  00016C  EFBB  F000         	goto	i2u273_40
  6992  000170                     i2u273_41:
  6993  000170  FFFF               	dw	65535	; assembler added errata NOP
  6994  000172  EFC2  F000         	goto	i2l484
  6995  000176                     i2u273_40:
  6996  000176  FFFF               	dw	65535	; assembler added errata NOP
  6997  000178                     
  6998                           ;interrupt.c: 110:         PIR1bits.RC1IF = 0;
  6999  000178  9A9E               	bcf	158,5,c	;volatile
  7000                           
  7001                           ;interrupt.c: 113:         unsigned char temp = RCREG1;
  7002  00017A  CFAE F011          	movff	4014,isr@temp	;volatile
  7003  00017E                     
  7004                           ;interrupt.c: 115:         storeData(temp);
  7005  00017E  5011               	movf	isr@temp^0,w,c
  7006  000180  ECE9  F00B         	call	i2_storeData
  7007  000184                     i2l484:
  7008  000184  FFFF               	dw	65535	; assembler added errata NOP
  7009  000186  C010  FFF4         	movff	??_isr+5,prodh
  7010  00018A  C00F  FFF3         	movff	??_isr+4,prodl
  7011  00018E  C00E  FFDA         	movff	??_isr+3,fsr2h
  7012  000192  C00D  FFD9         	movff	??_isr+2,fsr2l
  7013  000196  926D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7014  000198  0011               	retfie		f
  7015  00019A  FFFF               	dw	65535	; errata NOP
  7016  00019C                     __end_of_isr:
  7017                           	callstack 0
  7018                           
  7019 ;; *************** function i2_storeData *****************
  7020 ;; Defined at:
  7021 ;;		line 164 in file "usart.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;  data            1    wreg     unsigned char 
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;  data            1    9[COMRAM] unsigned char 
  7026 ;; Return value:  Size  Location     Type
  7027 ;;                  1    wreg      void 
  7028 ;; Registers used:
  7029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7035 ;;      Params:         0       0       0       0       0       0       0
  7036 ;;      Locals:         1       0       0       0       0       0       0
  7037 ;;      Temps:          2       0       0       0       0       0       0
  7038 ;;      Totals:         3       0       0       0       0       0       0
  7039 ;;Total ram usage:        3 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:    2
  7042 ;; This function calls:
  7043 ;;		i2_printError
  7044 ;; This function is called by:
  7045 ;;		_isr
  7046 ;; This function uses a non-reentrant model
  7047 ;;
  7048                           
  7049                           	psect	text41
  7050  0017D2                     __ptext41:
  7051                           	callstack 0
  7052  0017D2                     i2_storeData:
  7053                           	callstack 0
  7054  0017D2  FFFF               	dw	65535	; assembler added errata NOP
  7055                           
  7056                           ;incstack = 0
  7057                           ;i2storeData@data stored from wreg
  7058  0017D4  6E0A               	movwf	i2storeData@data^0,c
  7059  0017D6                     
  7060                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  7061  0017D6  0EC8               	movlw	low storeData@receivedMex
  7062  0017D8  2455               	addwf	storeData@counter^0,w,c
  7063  0017DA  6ED9               	movwf	fsr2l,c
  7064  0017DC  6ADA               	clrf	fsr2h,c
  7065  0017DE  0E00               	movlw	high storeData@receivedMex
  7066  0017E0  22DA               	addwfc	fsr2h,f,c
  7067  0017E2  C00A  FFDF         	movff	i2storeData@data,indf2
  7068  0017E6                     
  7069                           ;usart.c: 175:     counter++;
  7070  0017E6  2A55               	incf	storeData@counter^0,f,c
  7071                           
  7072                           ;usart.c: 178:     switch(receivedMex[0]){
  7073  0017E8  EF05  F00C         	goto	i2l3301
  7074  0017EC                     i2l3293:
  7075  0017EC  FFFF               	dw	65535	; assembler added errata NOP
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;usart.c: 180:             mexLength = 5;
  7079  0017EE  0E05               	movlw	5
  7080  0017F0  6E6C               	movwf	storeData@mexLength^0,c
  7081                           
  7082                           ;usart.c: 181:             break;
  7083  0017F2  EF21  F00C         	goto	i2l3303
  7084  0017F6                     i2l3295:
  7085  0017F6  FFFF               	dw	65535	; assembler added errata NOP
  7086                           
  7087                           ; BSR set to: 0
  7088                           ;usart.c: 183:             mexLength = 9;
  7089  0017F8  0E09               	movlw	9
  7090  0017FA  6E6C               	movwf	storeData@mexLength^0,c
  7091                           
  7092                           ;usart.c: 184:             break;
  7093  0017FC  EF21  F00C         	goto	i2l3303
  7094  001800                     i2l3297:
  7095  001800  FFFF               	dw	65535	; assembler added errata NOP
  7096                           
  7097                           ; BSR set to: 0
  7098                           ;usart.c: 186:             mexLength = 1;
  7099  001802  0E01               	movlw	1
  7100  001804  6E6C               	movwf	storeData@mexLength^0,c
  7101                           
  7102                           ;usart.c: 187:             break;
  7103  001806  EF21  F00C         	goto	i2l3303
  7104  00180A                     i2l3301:
  7105  00180A  FFFF               	dw	65535	; assembler added errata NOP
  7106  00180C  0100               	movlb	0	; () banked
  7107  00180E  51C8               	movf	storeData@receivedMex& (0+255),w,b
  7108  001810  6E08               	movwf	??i2_storeData^0,c
  7109  001812  6A09               	clrf	(??i2_storeData+1)^0,c
  7110                           
  7111                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7112                           ; Switch size 1, requested type "simple"
  7113                           ; Number of cases is 1, Range of values is 0 to 0
  7114                           ; switch strategies available:
  7115                           ; Name         Instructions Cycles
  7116                           ; simple_byte            4     3 (average)
  7117                           ;	Chosen strategy is simple_byte
  7118  001814  5009               	movf	(??i2_storeData+1)^0,w,c
  7119  001816  0A00               	xorlw	0	; case 0
  7120  001818  B4D8               	btfsc	status,2,c
  7121  00181A  EF11  F00C         	goto	i2l4701
  7122  00181E  EF21  F00C         	goto	i2l3303
  7123  001822                     i2l4701:
  7124  001822  FFFF               	dw	65535	; assembler added errata NOP
  7125                           
  7126                           ; BSR set to: 0
  7127                           ; Switch size 1, requested type "simple"
  7128                           ; Number of cases is 3, Range of values is 0 to 2
  7129                           ; switch strategies available:
  7130                           ; Name         Instructions Cycles
  7131                           ; simple_byte           10     6 (average)
  7132                           ;	Chosen strategy is simple_byte
  7133  001824  5008               	movf	??i2_storeData^0,w,c
  7134  001826  0A00               	xorlw	0	; case 0
  7135  001828  B4D8               	btfsc	status,2,c
  7136  00182A  EFF6  F00B         	goto	i2l3293
  7137  00182E  0A01               	xorlw	1	; case 1
  7138  001830  B4D8               	btfsc	status,2,c
  7139  001832  EFFB  F00B         	goto	i2l3295
  7140  001836  0A03               	xorlw	3	; case 2
  7141  001838  B4D8               	btfsc	status,2,c
  7142  00183A  EF00  F00C         	goto	i2l3297
  7143  00183E  EF21  F00C         	goto	i2l3303
  7144  001842                     i2l3303:
  7145  001842  FFFF               	dw	65535	; assembler added errata NOP
  7146                           
  7147                           ; BSR set to: 0
  7148                           ;usart.c: 194:     if(counter >= mexLength){
  7149  001844  506C               	movf	storeData@mexLength^0,w,c
  7150  001846  5C55               	subwf	storeData@counter^0,w,c
  7151  001848  A0D8               	btfss	status,0,c
  7152  00184A  EF29  F00C         	goto	i2u255_41
  7153  00184E  EF2C  F00C         	goto	i2u255_40
  7154  001852                     i2u255_41:
  7155  001852  FFFF               	dw	65535	; assembler added errata NOP
  7156  001854  EF98  F00C         	goto	i2l598
  7157  001858                     i2u255_40:
  7158  001858  FFFF               	dw	65535	; assembler added errata NOP
  7159  00185A                     
  7160                           ; BSR set to: 0
  7161                           ;usart.c: 195:         counter = 0;
  7162  00185A  0E00               	movlw	0
  7163  00185C  6E55               	movwf	storeData@counter^0,c
  7164                           
  7165                           ;usart.c: 198:         switch(receivedMex[0]){
  7166  00185E  EF7D  F00C         	goto	i2l3319
  7167  001862                     i2l3307:
  7168  001862  FFFF               	dw	65535	; assembler added errata NOP
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7172  001864  5058               	movf	_dataCounter^0,w,c
  7173  001866  0D04               	mullw	4
  7174  001868  0ED1               	movlw	low _dataSequence
  7175  00186A  24F3               	addwf	243,w,c
  7176  00186C  6ED9               	movwf	fsr2l,c
  7177  00186E  0E00               	movlw	high _dataSequence
  7178  001870  20F4               	addwfc	prodh,w,c
  7179  001872  6EDA               	movwf	fsr2h,c
  7180  001874  C0C9  FFDF         	movff	storeData@receivedMex+1,indf2
  7181                           
  7182                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2];
  7183  001878  5058               	movf	_dataCounter^0,w,c
  7184  00187A  0D04               	mullw	4
  7185  00187C  0ED2               	movlw	low (_dataSequence+1)
  7186  00187E  24F3               	addwf	243,w,c
  7187  001880  6ED9               	movwf	fsr2l,c
  7188  001882  0E00               	movlw	high (_dataSequence+1)
  7189  001884  20F4               	addwfc	prodh,w,c
  7190  001886  6EDA               	movwf	fsr2h,c
  7191  001888  C0CA  FFDF         	movff	storeData@receivedMex+2,indf2
  7192                           
  7193                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3];
  7194  00188C  5058               	movf	_dataCounter^0,w,c
  7195  00188E  0D04               	mullw	4
  7196  001890  0ED3               	movlw	low (_dataSequence+2)
  7197  001892  24F3               	addwf	243,w,c
  7198  001894  6ED9               	movwf	fsr2l,c
  7199  001896  0E00               	movlw	high (_dataSequence+2)
  7200  001898  20F4               	addwfc	prodh,w,c
  7201  00189A  6EDA               	movwf	fsr2h,c
  7202  00189C  C0CB  FFDF         	movff	storeData@receivedMex+3,indf2
  7203                           
  7204                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7205  0018A0  5058               	movf	_dataCounter^0,w,c
  7206  0018A2  0D04               	mullw	4
  7207  0018A4  0ED4               	movlw	low (_dataSequence+3)
  7208  0018A6  24F3               	addwf	243,w,c
  7209  0018A8  6ED9               	movwf	fsr2l,c
  7210  0018AA  0E00               	movlw	high (_dataSequence+3)
  7211  0018AC  20F4               	addwfc	prodh,w,c
  7212  0018AE  6EDA               	movwf	fsr2h,c
  7213  0018B0  C0CC  FFDF         	movff	storeData@receivedMex+4,indf2
  7214  0018B4                     
  7215                           ; BSR set to: 0
  7216                           ;usart.c: 205:                 dataCounter++;
  7217  0018B4  2A58               	incf	_dataCounter^0,f,c
  7218                           
  7219                           ;usart.c: 206:                 break;
  7220  0018B6  EF98  F00C         	goto	i2l598
  7221  0018BA                     i2l595:
  7222  0018BA  FFFF               	dw	65535	; assembler added errata NOP
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  7226  0018BC  C0C9  F0E5         	movff	storeData@receivedMex+1,_newSequenceData
  7227                           
  7228                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  7229  0018C0  C0CA  F0E6         	movff	storeData@receivedMex+2,_newSequenceData+1
  7230                           
  7231                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3];
  7232  0018C4  C0CB  F0E7         	movff	storeData@receivedMex+3,_newSequenceData+2
  7233                           
  7234                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4];
  7235  0018C8  C0CC  F0E8         	movff	storeData@receivedMex+4,_newSequenceData+3
  7236                           
  7237                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  7238  0018CC  C0CD  F0E9         	movff	storeData@receivedMex+5,_newSequenceData+4
  7239                           
  7240                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6];
  7241  0018D0  C0CE  F0EA         	movff	storeData@receivedMex+6,_newSequenceData+5
  7242                           
  7243                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7];
  7244  0018D4  C0CF  F0EB         	movff	storeData@receivedMex+7,_newSequenceData+6
  7245                           
  7246                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  7247  0018D8  C0D0  F0EC         	movff	storeData@receivedMex+8,_newSequenceData+7
  7248  0018DC                     
  7249                           ; BSR set to: 0
  7250                           ;usart.c: 218:                 _newSequence = 1;
  7251  0018DC  0E01               	movlw	1
  7252  0018DE  6E56               	movwf	__newSequence^0,c
  7253                           
  7254                           ;usart.c: 219:                 break;
  7255  0018E0  EF98  F00C         	goto	i2l598
  7256  0018E4                     i2l3313:
  7257  0018E4  FFFF               	dw	65535	; assembler added errata NOP
  7258                           
  7259                           ; BSR set to: 0
  7260                           ;usart.c: 222:                 _fatalError = 1;
  7261  0018E6  0E01               	movlw	1
  7262  0018E8  6E57               	movwf	__fatalError^0,c
  7263                           
  7264                           ;usart.c: 223:                 break;
  7265  0018EA  EF98  F00C         	goto	i2l598
  7266  0018EE                     i2l3315:
  7267  0018EE  FFFF               	dw	65535	; assembler added errata NOP
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;usart.c: 226:                 printError(8);
  7271  0018F0  0E08               	movlw	8
  7272  0018F2  ECF4  F00E         	call	i2_printError
  7273                           
  7274                           ;usart.c: 227:                 break;
  7275  0018F6  EF98  F00C         	goto	i2l598
  7276  0018FA                     i2l3319:
  7277  0018FA  FFFF               	dw	65535	; assembler added errata NOP
  7278                           
  7279                           ; BSR set to: 0
  7280  0018FC  51C8               	movf	storeData@receivedMex& (0+255),w,b
  7281  0018FE  6E08               	movwf	??i2_storeData^0,c
  7282  001900  6A09               	clrf	(??i2_storeData+1)^0,c
  7283                           
  7284                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7285                           ; Switch size 1, requested type "simple"
  7286                           ; Number of cases is 1, Range of values is 0 to 0
  7287                           ; switch strategies available:
  7288                           ; Name         Instructions Cycles
  7289                           ; simple_byte            4     3 (average)
  7290                           ;	Chosen strategy is simple_byte
  7291  001902  5009               	movf	(??i2_storeData+1)^0,w,c
  7292  001904  0A00               	xorlw	0	; case 0
  7293  001906  B4D8               	btfsc	status,2,c
  7294  001908  EF88  F00C         	goto	i2l4703
  7295  00190C  EF77  F00C         	goto	i2l3315
  7296  001910                     i2l4703:
  7297  001910  FFFF               	dw	65535	; assembler added errata NOP
  7298                           
  7299                           ; BSR set to: 0
  7300                           ; Switch size 1, requested type "simple"
  7301                           ; Number of cases is 3, Range of values is 0 to 2
  7302                           ; switch strategies available:
  7303                           ; Name         Instructions Cycles
  7304                           ; simple_byte           10     6 (average)
  7305                           ;	Chosen strategy is simple_byte
  7306  001912  5008               	movf	??i2_storeData^0,w,c
  7307  001914  0A00               	xorlw	0	; case 0
  7308  001916  B4D8               	btfsc	status,2,c
  7309  001918  EF31  F00C         	goto	i2l3307
  7310  00191C  0A01               	xorlw	1	; case 1
  7311  00191E  B4D8               	btfsc	status,2,c
  7312  001920  EF5D  F00C         	goto	i2l595
  7313  001924  0A03               	xorlw	3	; case 2
  7314  001926  B4D8               	btfsc	status,2,c
  7315  001928  EF72  F00C         	goto	i2l3313
  7316  00192C  EF77  F00C         	goto	i2l3315
  7317  001930                     i2l598:
  7318  001930  FFFF               	dw	65535	; assembler added errata NOP
  7319  001932  0012               	return		;funcret
  7320  001934  FFFF               	dw	65535	; errata NOP
  7321  001936                     __end_ofi2_storeData:
  7322                           	callstack 0
  7323                           
  7324 ;; *************** function _writeTM0 *****************
  7325 ;; Defined at:
  7326 ;;		line 28 in file "motors.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;		None
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;		None
  7331 ;; Return value:  Size  Location     Type
  7332 ;;                  1    wreg      void 
  7333 ;; Registers used:
  7334 ;;		wreg, status,2
  7335 ;; Tracked objects:
  7336 ;;		On entry : 0/0
  7337 ;;		On exit  : 0/0
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7340 ;;      Params:         0       0       0       0       0       0       0
  7341 ;;      Locals:         0       0       0       0       0       0       0
  7342 ;;      Temps:          0       0       0       0       0       0       0
  7343 ;;      Totals:         0       0       0       0       0       0       0
  7344 ;;Total ram usage:        0 bytes
  7345 ;; Hardware stack levels used:    1
  7346 ;; This function calls:
  7347 ;;		Nothing
  7348 ;; This function is called by:
  7349 ;;		_isr
  7350 ;; This function uses a non-reentrant model
  7351 ;;
  7352                           
  7353                           	psect	text42
  7354  002514                     __ptext42:
  7355                           	callstack 0
  7356  002514                     _writeTM0:
  7357                           	callstack 0
  7358  002514  FFFF               	dw	65535	; assembler added errata NOP
  7359  002516                     
  7360                           ;motors.c: 29:     tm0Error = 1;
  7361  002516  0E00               	movlw	0
  7362  002518  6E51               	movwf	(_tm0Error+1)^0,c
  7363  00251A  0E01               	movlw	1
  7364  00251C  6E50               	movwf	_tm0Error^0,c
  7365  00251E  0012               	return		;funcret
  7366  002520  FFFF               	dw	65535	; errata NOP
  7367  002522                     __end_of_writeTM0:
  7368                           	callstack 0
  7369                           
  7370 ;; *************** function _whatsTM0Limit *****************
  7371 ;; Defined at:
  7372 ;;		line 42 in file "motors.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;		None
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;		None
  7377 ;; Return value:  Size  Location     Type
  7378 ;;                  1    wreg      unsigned char 
  7379 ;; Registers used:
  7380 ;;		wreg, status,2
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7386 ;;      Params:         0       0       0       0       0       0       0
  7387 ;;      Locals:         0       0       0       0       0       0       0
  7388 ;;      Temps:          0       0       0       0       0       0       0
  7389 ;;      Totals:         0       0       0       0       0       0       0
  7390 ;;Total ram usage:        0 bytes
  7391 ;; Hardware stack levels used:    1
  7392 ;; This function calls:
  7393 ;;		Nothing
  7394 ;; This function is called by:
  7395 ;;		_isr
  7396 ;; This function uses a non-reentrant model
  7397 ;;
  7398                           
  7399                           	psect	text43
  7400  0025C4                     __ptext43:
  7401                           	callstack 0
  7402  0025C4                     _whatsTM0Limit:
  7403                           	callstack 0
  7404  0025C4  FFFF               	dw	65535	; assembler added errata NOP
  7405  0025C6                     
  7406                           ;motors.c: 43:     return(tm0Limit);
  7407  0025C6  505D               	movf	_tm0Limit^0,w,c
  7408  0025C8  0012               	return		;funcret
  7409  0025CA  FFFF               	dw	65535	; errata NOP
  7410  0025CC                     __end_of_whatsTM0Limit:
  7411                           	callstack 0
  7412                           
  7413 ;; *************** function _toggleStep *****************
  7414 ;; Defined at:
  7415 ;;		line 92 in file "timer.c"
  7416 ;; Parameters:    Size  Location     Type
  7417 ;;		None
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;		None
  7420 ;; Return value:  Size  Location     Type
  7421 ;;                  1    wreg      void 
  7422 ;; Registers used:
  7423 ;;		wreg, status,2
  7424 ;; Tracked objects:
  7425 ;;		On entry : 0/0
  7426 ;;		On exit  : 0/0
  7427 ;;		Unchanged: 0/0
  7428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7429 ;;      Params:         0       0       0       0       0       0       0
  7430 ;;      Locals:         0       0       0       0       0       0       0
  7431 ;;      Temps:          0       0       0       0       0       0       0
  7432 ;;      Totals:         0       0       0       0       0       0       0
  7433 ;;Total ram usage:        0 bytes
  7434 ;; Hardware stack levels used:    1
  7435 ;; This function calls:
  7436 ;;		Nothing
  7437 ;; This function is called by:
  7438 ;;		_isr
  7439 ;; This function uses a non-reentrant model
  7440 ;;
  7441                           
  7442                           	psect	text44
  7443  002586                     __ptext44:
  7444                           	callstack 0
  7445  002586                     _toggleStep:
  7446                           	callstack 0
  7447  002586  FFFF               	dw	65535	; assembler added errata NOP
  7448  002588                     
  7449                           ;timer.c: 93:     stepToggle = 1;
  7450  002588  0E01               	movlw	1
  7451  00258A  6E52               	movwf	_stepToggle^0,c	;volatile
  7452  00258C  0012               	return		;funcret
  7453  00258E  FFFF               	dw	65535	; errata NOP
  7454  002590                     __end_of_toggleStep:
  7455                           	callstack 0
  7456                           
  7457 ;; *************** function _setTouchRel *****************
  7458 ;; Defined at:
  7459 ;;		line 86 in file "adc.c"
  7460 ;; Parameters:    Size  Location     Type
  7461 ;;		None
  7462 ;; Auto vars:     Size  Location     Type
  7463 ;;		None
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  1    wreg      void 
  7466 ;; Registers used:
  7467 ;;		wreg, status,2
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 0/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7473 ;;      Params:         0       0       0       0       0       0       0
  7474 ;;      Locals:         0       0       0       0       0       0       0
  7475 ;;      Temps:          0       0       0       0       0       0       0
  7476 ;;      Totals:         0       0       0       0       0       0       0
  7477 ;;Total ram usage:        0 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; This function calls:
  7480 ;;		Nothing
  7481 ;; This function is called by:
  7482 ;;		_isr
  7483 ;; This function uses a non-reentrant model
  7484 ;;
  7485                           
  7486                           	psect	text45
  7487  002590                     __ptext45:
  7488                           	callstack 0
  7489  002590                     _setTouchRel:
  7490                           	callstack 0
  7491  002590  FFFF               	dw	65535	; assembler added errata NOP
  7492  002592                     
  7493                           ;adc.c: 87:     touch_rel = 1;
  7494  002592  0E01               	movlw	1
  7495  002594  6E5C               	movwf	_touch_rel^0,c	;volatile
  7496  002596  0012               	return		;funcret
  7497  002598  FFFF               	dw	65535	; errata NOP
  7498  00259A                     __end_of_setTouchRel:
  7499                           	callstack 0
  7500                           
  7501 ;; *************** function _setThermRel *****************
  7502 ;; Defined at:
  7503 ;;		line 79 in file "adc.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;		None
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;		None
  7508 ;; Return value:  Size  Location     Type
  7509 ;;                  1    wreg      void 
  7510 ;; Registers used:
  7511 ;;		wreg, status,2
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7517 ;;      Params:         0       0       0       0       0       0       0
  7518 ;;      Locals:         0       0       0       0       0       0       0
  7519 ;;      Temps:          0       0       0       0       0       0       0
  7520 ;;      Totals:         0       0       0       0       0       0       0
  7521 ;;Total ram usage:        0 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; This function calls:
  7524 ;;		Nothing
  7525 ;; This function is called by:
  7526 ;;		_isr
  7527 ;; This function uses a non-reentrant model
  7528 ;;
  7529                           
  7530                           	psect	text46
  7531  00259A                     __ptext46:
  7532                           	callstack 0
  7533  00259A                     _setThermRel:
  7534                           	callstack 0
  7535  00259A  FFFF               	dw	65535	; assembler added errata NOP
  7536  00259C                     
  7537                           ;adc.c: 80:     therm_rel = 1;
  7538  00259C  0E01               	movlw	1
  7539  00259E  6E5B               	movwf	_therm_rel^0,c	;volatile
  7540  0025A0  0012               	return		;funcret
  7541  0025A2  FFFF               	dw	65535	; errata NOP
  7542  0025A4                     __end_of_setThermRel:
  7543                           	callstack 0
  7544                           
  7545 ;; *************** function _retPeriod *****************
  7546 ;; Defined at:
  7547 ;;		line 100 in file "timer.c"
  7548 ;; Parameters:    Size  Location     Type
  7549 ;;		None
  7550 ;; Auto vars:     Size  Location     Type
  7551 ;;		None
  7552 ;; Return value:  Size  Location     Type
  7553 ;;                  2    0[COMRAM] unsigned int 
  7554 ;; Registers used:
  7555 ;;		None
  7556 ;; Tracked objects:
  7557 ;;		On entry : 0/0
  7558 ;;		On exit  : 0/0
  7559 ;;		Unchanged: 0/0
  7560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7561 ;;      Params:         2       0       0       0       0       0       0
  7562 ;;      Locals:         0       0       0       0       0       0       0
  7563 ;;      Temps:          0       0       0       0       0       0       0
  7564 ;;      Totals:         2       0       0       0       0       0       0
  7565 ;;Total ram usage:        2 bytes
  7566 ;; Hardware stack levels used:    1
  7567 ;; This function calls:
  7568 ;;		Nothing
  7569 ;; This function is called by:
  7570 ;;		_isr
  7571 ;; This function uses a non-reentrant model
  7572 ;;
  7573                           
  7574                           	psect	text47
  7575  002522                     __ptext47:
  7576                           	callstack 0
  7577  002522                     _retPeriod:
  7578                           	callstack 0
  7579  002522  FFFF               	dw	65535	; assembler added errata NOP
  7580  002524                     
  7581                           ;timer.c: 101:     return pwmPeriod;
  7582  002524  C046  F001         	movff	_pwmPeriod,?_retPeriod
  7583  002528  C047  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7584  00252C  0012               	return		;funcret
  7585  00252E  FFFF               	dw	65535	; errata NOP
  7586  002530                     __end_of_retPeriod:
  7587                           	callstack 0
  7588                           
  7589 ;; *************** function _increaseStep *****************
  7590 ;; Defined at:
  7591 ;;		line 84 in file "timer.c"
  7592 ;; Parameters:    Size  Location     Type
  7593 ;;		None
  7594 ;; Auto vars:     Size  Location     Type
  7595 ;;		None
  7596 ;; Return value:  Size  Location     Type
  7597 ;;                  1    wreg      void 
  7598 ;; Registers used:
  7599 ;;		status,2, status,0
  7600 ;; Tracked objects:
  7601 ;;		On entry : 0/0
  7602 ;;		On exit  : 0/0
  7603 ;;		Unchanged: 0/0
  7604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7605 ;;      Params:         0       0       0       0       0       0       0
  7606 ;;      Locals:         0       0       0       0       0       0       0
  7607 ;;      Temps:          0       0       0       0       0       0       0
  7608 ;;      Totals:         0       0       0       0       0       0       0
  7609 ;;Total ram usage:        0 bytes
  7610 ;; Hardware stack levels used:    1
  7611 ;; This function calls:
  7612 ;;		Nothing
  7613 ;; This function is called by:
  7614 ;;		_isr
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           	psect	text48
  7619  0025CC                     __ptext48:
  7620                           	callstack 0
  7621  0025CC                     _increaseStep:
  7622                           	callstack 0
  7623  0025CC  FFFF               	dw	65535	; assembler added errata NOP
  7624  0025CE                     
  7625                           ;timer.c: 85:     pwmStep++;
  7626  0025CE  2A53               	incf	_pwmStep^0,f,c	;volatile
  7627  0025D0  0012               	return		;funcret
  7628  0025D2  FFFF               	dw	65535	; errata NOP
  7629  0025D4                     __end_of_increaseStep:
  7630                           	callstack 0
  7631                           
  7632 ;; *************** function _fatalError *****************
  7633 ;; Defined at:
  7634 ;;		line 61 in file "usart.c"
  7635 ;; Parameters:    Size  Location     Type
  7636 ;;		None
  7637 ;; Auto vars:     Size  Location     Type
  7638 ;;		None
  7639 ;; Return value:  Size  Location     Type
  7640 ;;                  1    wreg      unsigned char 
  7641 ;; Registers used:
  7642 ;;		wreg, status,2
  7643 ;; Tracked objects:
  7644 ;;		On entry : 0/0
  7645 ;;		On exit  : 0/0
  7646 ;;		Unchanged: 0/0
  7647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7648 ;;      Params:         0       0       0       0       0       0       0
  7649 ;;      Locals:         0       0       0       0       0       0       0
  7650 ;;      Temps:          0       0       0       0       0       0       0
  7651 ;;      Totals:         0       0       0       0       0       0       0
  7652 ;;Total ram usage:        0 bytes
  7653 ;; Hardware stack levels used:    1
  7654 ;; This function calls:
  7655 ;;		Nothing
  7656 ;; This function is called by:
  7657 ;;		_isr
  7658 ;; This function uses a non-reentrant model
  7659 ;;
  7660                           
  7661                           	psect	text49
  7662  0025D4                     __ptext49:
  7663                           	callstack 0
  7664  0025D4                     _fatalError:
  7665                           	callstack 0
  7666  0025D4  FFFF               	dw	65535	; assembler added errata NOP
  7667  0025D6                     
  7668                           ;usart.c: 62:     return _fatalError;
  7669  0025D6  5057               	movf	__fatalError^0,w,c
  7670  0025D8  0012               	return		;funcret
  7671  0025DA  FFFF               	dw	65535	; errata NOP
  7672  0025DC                     __end_of_fatalError:
  7673                           	callstack 0
  7674                           
  7675 ;; *************** function _abortAll *****************
  7676 ;; Defined at:
  7677 ;;		line 792 in file "motors.c"
  7678 ;; Parameters:    Size  Location     Type
  7679 ;;		None
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;		None
  7682 ;; Return value:  Size  Location     Type
  7683 ;;                  1    wreg      void 
  7684 ;; Registers used:
  7685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7686 ;; Tracked objects:
  7687 ;;		On entry : 0/0
  7688 ;;		On exit  : 0/0
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7691 ;;      Params:         0       0       0       0       0       0       0
  7692 ;;      Locals:         0       0       0       0       0       0       0
  7693 ;;      Temps:          0       0       0       0       0       0       0
  7694 ;;      Totals:         0       0       0       0       0       0       0
  7695 ;;Total ram usage:        0 bytes
  7696 ;; Hardware stack levels used:    1
  7697 ;; Hardware stack levels required when called:    2
  7698 ;; This function calls:
  7699 ;;		i2_printError
  7700 ;; This function is called by:
  7701 ;;		_isr
  7702 ;; This function uses a non-reentrant model
  7703 ;;
  7704                           
  7705                           	psect	text50
  7706  0024BA                     __ptext50:
  7707                           	callstack 0
  7708  0024BA                     _abortAll:
  7709                           	callstack 0
  7710  0024BA  FFFF               	dw	65535	; assembler added errata NOP
  7711  0024BC                     
  7712                           ;motors.c: 800:     printError(7);
  7713  0024BC  0E07               	movlw	7
  7714  0024BE  ECF4  F00E         	call	i2_printError
  7715  0024C2                     i2l268:
  7716  0024C2  FFFF               	dw	65535	; assembler added errata NOP
  7717  0024C4  EF61  F012         	goto	i2l268
  7718  0024C8  0012               	return		;funcret
  7719  0024CA  FFFF               	dw	65535	; errata NOP
  7720  0024CC                     __end_of_abortAll:
  7721                           	callstack 0
  7722                           
  7723 ;; *************** function i2_printError *****************
  7724 ;; Defined at:
  7725 ;;		line 111 in file "usart.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;  errCode         1    wreg     unsigned char 
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;  errCode         1    6[COMRAM] unsigned char 
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  1    wreg      void 
  7732 ;; Registers used:
  7733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7739 ;;      Params:         0       0       0       0       0       0       0
  7740 ;;      Locals:         1       0       0       0       0       0       0
  7741 ;;      Temps:          2       0       0       0       0       0       0
  7742 ;;      Totals:         3       0       0       0       0       0       0
  7743 ;;Total ram usage:        3 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; Hardware stack levels required when called:    1
  7746 ;; This function calls:
  7747 ;;		i2_uartTx
  7748 ;; This function is called by:
  7749 ;;		_abortAll
  7750 ;;		i2_storeData
  7751 ;; This function uses a non-reentrant model
  7752 ;;
  7753                           
  7754                           	psect	text51
  7755  001DE8                     __ptext51:
  7756                           	callstack 0
  7757  001DE8                     i2_printError:
  7758                           	callstack 0
  7759  001DE8  FFFF               	dw	65535	; assembler added errata NOP
  7760                           
  7761                           ;incstack = 0
  7762                           ;i2printError@errCode stored from wreg
  7763  001DEA  6E07               	movwf	i2printError@errCode^0,c
  7764  001DEC                     
  7765                           ;usart.c: 113:     switch(errCode){
  7766  001DEC  EF50  F00F         	goto	i2l3009
  7767  001DF0                     i2l2991:
  7768  001DF0  FFFF               	dw	65535	; assembler added errata NOP
  7769                           
  7770                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7771  001DF2  0E92               	movlw	low _errString_Feed
  7772  001DF4  6E01               	movwf	i2uartTx@ptr^0,c
  7773  001DF6  0E00               	movlw	high _errString_Feed
  7774  001DF8  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7775  001DFA  0E1E               	movlw	30
  7776  001DFC  6E03               	movwf	i2uartTx@length^0,c
  7777  001DFE  EC74  F011         	call	i2_uartTx	;wreg free
  7778                           
  7779                           ;usart.c: 116:             break;
  7780  001E02  EF7F  F00F         	goto	i2l565
  7781  001E06                     i2l2993:
  7782  001E06  FFFF               	dw	65535	; assembler added errata NOP
  7783                           
  7784                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7785  001E08  0E5E               	movlw	low _errString_ZEND
  7786  001E0A  6E01               	movwf	i2uartTx@ptr^0,c
  7787  001E0C  0E01               	movlw	high _errString_ZEND
  7788  001E0E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7789  001E10  0E29               	movlw	41
  7790  001E12  6E03               	movwf	i2uartTx@length^0,c
  7791  001E14  EC74  F011         	call	i2_uartTx	;wreg free
  7792                           
  7793                           ;usart.c: 119:             break;
  7794  001E18  EF7F  F00F         	goto	i2l565
  7795  001E1C                     i2l2995:
  7796  001E1C  FFFF               	dw	65535	; assembler added errata NOP
  7797                           
  7798                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7799  001E1E  0E87               	movlw	low _errString_Reset
  7800  001E20  6E01               	movwf	i2uartTx@ptr^0,c
  7801  001E22  0E01               	movlw	high _errString_Reset
  7802  001E24  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7803  001E26  0E28               	movlw	40
  7804  001E28  6E03               	movwf	i2uartTx@length^0,c
  7805  001E2A  EC74  F011         	call	i2_uartTx	;wreg free
  7806                           
  7807                           ;usart.c: 122:             break;
  7808  001E2E  EF7F  F00F         	goto	i2l565
  7809  001E32                     i2l2997:
  7810  001E32  FFFF               	dw	65535	; assembler added errata NOP
  7811                           
  7812                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7813  001E34  0E35               	movlw	low _errString_Point
  7814  001E36  6E01               	movwf	i2uartTx@ptr^0,c
  7815  001E38  0E01               	movlw	high _errString_Point
  7816  001E3A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7817  001E3C  0E29               	movlw	41
  7818  001E3E  6E03               	movwf	i2uartTx@length^0,c
  7819  001E40  EC74  F011         	call	i2_uartTx	;wreg free
  7820                           
  7821                           ;usart.c: 125:             break;
  7822  001E44  EF7F  F00F         	goto	i2l565
  7823  001E48                     i2l2999:
  7824  001E48  FFFF               	dw	65535	; assembler added errata NOP
  7825                           
  7826                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7827  001E4A  0ED6               	movlw	low _errString_Bound
  7828  001E4C  6E01               	movwf	i2uartTx@ptr^0,c
  7829  001E4E  0E01               	movlw	high _errString_Bound
  7830  001E50  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7831  001E52  0E21               	movlw	33
  7832  001E54  6E03               	movwf	i2uartTx@length^0,c
  7833  001E56  EC74  F011         	call	i2_uartTx	;wreg free
  7834                           
  7835                           ;usart.c: 128:             break;
  7836  001E5A  EF7F  F00F         	goto	i2l565
  7837  001E5E                     i2l3001:
  7838  001E5E  FFFF               	dw	65535	; assembler added errata NOP
  7839                           
  7840                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7841  001E60  0E00               	movlw	low _errString_PointZ
  7842  001E62  6E01               	movwf	i2uartTx@ptr^0,c
  7843  001E64  0E01               	movlw	high _errString_PointZ
  7844  001E66  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7845  001E68  0E35               	movlw	53
  7846  001E6A  6E03               	movwf	i2uartTx@length^0,c
  7847  001E6C  EC74  F011         	call	i2_uartTx	;wreg free
  7848                           
  7849                           ;usart.c: 131:             break;
  7850  001E70  EF7F  F00F         	goto	i2l565
  7851  001E74                     i2l3003:
  7852  001E74  FFFF               	dw	65535	; assembler added errata NOP
  7853                           
  7854                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7855  001E76  0EAF               	movlw	low _errString_Fatal
  7856  001E78  6E01               	movwf	i2uartTx@ptr^0,c
  7857  001E7A  0E01               	movlw	high _errString_Fatal
  7858  001E7C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7859  001E7E  0E27               	movlw	39
  7860  001E80  6E03               	movwf	i2uartTx@length^0,c
  7861  001E82  EC74  F011         	call	i2_uartTx	;wreg free
  7862                           
  7863                           ;usart.c: 134:             break;
  7864  001E86  EF7F  F00F         	goto	i2l565
  7865  001E8A                     i2l3005:
  7866  001E8A  FFFF               	dw	65535	; assembler added errata NOP
  7867                           
  7868                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7869  001E8C  0EB0               	movlw	low _errString_Command
  7870  001E8E  6E01               	movwf	i2uartTx@ptr^0,c
  7871  001E90  0E00               	movlw	high _errString_Command
  7872  001E92  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7873  001E94  0E18               	movlw	24
  7874  001E96  6E03               	movwf	i2uartTx@length^0,c
  7875  001E98  EC74  F011         	call	i2_uartTx	;wreg free
  7876                           
  7877                           ;usart.c: 137:             break;
  7878  001E9C  EF7F  F00F         	goto	i2l565
  7879  001EA0                     i2l3009:
  7880  001EA0  FFFF               	dw	65535	; assembler added errata NOP
  7881  001EA2  5007               	movf	i2printError@errCode^0,w,c
  7882  001EA4  6E05               	movwf	??i2_printError^0,c
  7883  001EA6  6A06               	clrf	(??i2_printError+1)^0,c
  7884                           
  7885                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7886                           ; Switch size 1, requested type "simple"
  7887                           ; Number of cases is 1, Range of values is 0 to 0
  7888                           ; switch strategies available:
  7889                           ; Name         Instructions Cycles
  7890                           ; simple_byte            4     3 (average)
  7891                           ;	Chosen strategy is simple_byte
  7892  001EA8  5006               	movf	(??i2_printError+1)^0,w,c
  7893  001EAA  0A00               	xorlw	0	; case 0
  7894  001EAC  B4D8               	btfsc	status,2,c
  7895  001EAE  EF5B  F00F         	goto	i2l4705
  7896  001EB2  EF7F  F00F         	goto	i2l565
  7897  001EB6                     i2l4705:
  7898  001EB6  FFFF               	dw	65535	; assembler added errata NOP
  7899                           
  7900                           ; Switch size 1, requested type "simple"
  7901                           ; Number of cases is 8, Range of values is 1 to 8
  7902                           ; switch strategies available:
  7903                           ; Name         Instructions Cycles
  7904                           ; simple_byte           25    13 (average)
  7905                           ;	Chosen strategy is simple_byte
  7906  001EB8  5005               	movf	??i2_printError^0,w,c
  7907  001EBA  0A01               	xorlw	1	; case 1
  7908  001EBC  B4D8               	btfsc	status,2,c
  7909  001EBE  EFF8  F00E         	goto	i2l2991
  7910  001EC2  0A03               	xorlw	3	; case 2
  7911  001EC4  B4D8               	btfsc	status,2,c
  7912  001EC6  EF03  F00F         	goto	i2l2993
  7913  001ECA  0A01               	xorlw	1	; case 3
  7914  001ECC  B4D8               	btfsc	status,2,c
  7915  001ECE  EF0E  F00F         	goto	i2l2995
  7916  001ED2  0A07               	xorlw	7	; case 4
  7917  001ED4  B4D8               	btfsc	status,2,c
  7918  001ED6  EF19  F00F         	goto	i2l2997
  7919  001EDA  0A01               	xorlw	1	; case 5
  7920  001EDC  B4D8               	btfsc	status,2,c
  7921  001EDE  EF24  F00F         	goto	i2l2999
  7922  001EE2  0A03               	xorlw	3	; case 6
  7923  001EE4  B4D8               	btfsc	status,2,c
  7924  001EE6  EF2F  F00F         	goto	i2l3001
  7925  001EEA  0A01               	xorlw	1	; case 7
  7926  001EEC  B4D8               	btfsc	status,2,c
  7927  001EEE  EF3A  F00F         	goto	i2l3003
  7928  001EF2  0A0F               	xorlw	15	; case 8
  7929  001EF4  B4D8               	btfsc	status,2,c
  7930  001EF6  EF45  F00F         	goto	i2l3005
  7931  001EFA  EF7F  F00F         	goto	i2l565
  7932  001EFE                     i2l565:
  7933  001EFE  FFFF               	dw	65535	; assembler added errata NOP
  7934  001F00  0012               	return		;funcret
  7935  001F02  FFFF               	dw	65535	; errata NOP
  7936  001F04                     __end_ofi2_printError:
  7937                           	callstack 0
  7938                           
  7939 ;; *************** function i2_uartTx *****************
  7940 ;; Defined at:
  7941 ;;		line 148 in file "usart.c"
  7942 ;; Parameters:    Size  Location     Type
  7943 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7944 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  7945 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  7946 ;;  length          1    2[COMRAM] unsigned char 
  7947 ;; Auto vars:     Size  Location     Type
  7948 ;;  i               1    3[COMRAM] unsigned char 
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  1    wreg      void 
  7951 ;; Registers used:
  7952 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/0
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7958 ;;      Params:         3       0       0       0       0       0       0
  7959 ;;      Locals:         1       0       0       0       0       0       0
  7960 ;;      Temps:          0       0       0       0       0       0       0
  7961 ;;      Totals:         4       0       0       0       0       0       0
  7962 ;;Total ram usage:        4 bytes
  7963 ;; Hardware stack levels used:    1
  7964 ;; This function calls:
  7965 ;;		Nothing
  7966 ;; This function is called by:
  7967 ;;		i2_printError
  7968 ;; This function uses a non-reentrant model
  7969 ;;
  7970                           
  7971                           	psect	text52
  7972  0022E8                     __ptext52:
  7973                           	callstack 0
  7974  0022E8                     i2_uartTx:
  7975                           	callstack 0
  7976  0022E8  FFFF               	dw	65535	; assembler added errata NOP
  7977  0022EA                     
  7978                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  7979  0022EA  0E01               	movlw	1
  7980  0022EC  6E04               	movwf	i2uartTx@i^0,c
  7981  0022EE  EF8D  F011         	goto	i2l2701
  7982  0022F2                     i2l2697:
  7983  0022F2  FFFF               	dw	65535	; assembler added errata NOP
  7984                           
  7985                           ;usart.c: 153:         TXREG = *ptr;
  7986  0022F4  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  7987  0022F8  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  7988  0022FC  50DF               	movf	indf2,w,c
  7989  0022FE  6EAD               	movwf	173,c	;volatile
  7990  002300                     i2l570:
  7991  002300  FFFF               	dw	65535	; assembler added errata NOP
  7992  002302  A2AC               	btfss	172,1,c	;volatile
  7993  002304  EF86  F011         	goto	i2u184_41
  7994  002308  EF89  F011         	goto	i2u184_40
  7995  00230C                     i2u184_41:
  7996  00230C  FFFF               	dw	65535	; assembler added errata NOP
  7997  00230E  EF80  F011         	goto	i2l570
  7998  002312                     i2u184_40:
  7999  002312  FFFF               	dw	65535	; assembler added errata NOP
  8000  002314                     
  8001                           ;usart.c: 157:         ptr++;
  8002  002314  4A01               	infsnz	i2uartTx@ptr^0,f,c
  8003  002316  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  8004                           
  8005                           ;usart.c: 158:     }
  8006  002318  2A04               	incf	i2uartTx@i^0,f,c
  8007  00231A                     i2l2701:
  8008  00231A  FFFF               	dw	65535	; assembler added errata NOP
  8009  00231C  5003               	movf	i2uartTx@length^0,w,c
  8010  00231E  5C04               	subwf	i2uartTx@i^0,w,c
  8011  002320  A0D8               	btfss	status,0,c
  8012  002322  EF95  F011         	goto	i2u185_41
  8013  002326  EF98  F011         	goto	i2u185_40
  8014  00232A                     i2u185_41:
  8015  00232A  FFFF               	dw	65535	; assembler added errata NOP
  8016  00232C  EF79  F011         	goto	i2l2697
  8017  002330                     i2u185_40:
  8018  002330  FFFF               	dw	65535	; assembler added errata NOP
  8019  002332  0012               	return		;funcret
  8020  002334  FFFF               	dw	65535	; errata NOP
  8021  002336                     __end_ofi2_uartTx:
  8022                           	callstack 0
  8023                           
  8024                           	psect	rparam
  8025  0000                     
  8026                           	psect	temp
  8027  00006D                     btemp:
  8028                           	callstack 0
  8029  00006D                     	ds	1
  8030  0000                     int$flags	set	btemp
  8031  0000                     wtemp8	set	btemp+1
  8032  0000                     ttemp5	set	btemp+1
  8033  0000                     ttemp6	set	btemp+4
  8034  0000                     ttemp7	set	btemp+8
  8035                           
  8036                           	psect	idloc
  8037                           
  8038                           ;Config register IDLOC0 @ 0x200000
  8039                           ;	unspecified, using default values
  8040  200000                     	org	2097152
  8041  200000  FF                 	db	255
  8042                           
  8043                           ;Config register IDLOC1 @ 0x200001
  8044                           ;	unspecified, using default values
  8045  200001                     	org	2097153
  8046  200001  FF                 	db	255
  8047                           
  8048                           ;Config register IDLOC2 @ 0x200002
  8049                           ;	unspecified, using default values
  8050  200002                     	org	2097154
  8051  200002  FF                 	db	255
  8052                           
  8053                           ;Config register IDLOC3 @ 0x200003
  8054                           ;	unspecified, using default values
  8055  200003                     	org	2097155
  8056  200003  FF                 	db	255
  8057                           
  8058                           ;Config register IDLOC4 @ 0x200004
  8059                           ;	unspecified, using default values
  8060  200004                     	org	2097156
  8061  200004  FF                 	db	255
  8062                           
  8063                           ;Config register IDLOC5 @ 0x200005
  8064                           ;	unspecified, using default values
  8065  200005                     	org	2097157
  8066  200005  FF                 	db	255
  8067                           
  8068                           ;Config register IDLOC6 @ 0x200006
  8069                           ;	unspecified, using default values
  8070  200006                     	org	2097158
  8071  200006  FF                 	db	255
  8072                           
  8073                           ;Config register IDLOC7 @ 0x200007
  8074                           ;	unspecified, using default values
  8075  200007                     	org	2097159
  8076  200007  FF                 	db	255
  8077                           
  8078                           	psect	config
  8079                           
  8080                           ; Padding undefined space
  8081  300000                     	org	3145728
  8082  300000  FF                 	db	255
  8083                           
  8084                           ;Config register CONFIG1H @ 0x300001
  8085                           ;	Oscillator Selection bits
  8086                           ;	OSC = XT, XT oscillator
  8087                           ;	Oscillator System Clock Switch Enable bit
  8088                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8089  300001                     	org	3145729
  8090  300001  21                 	db	33
  8091                           
  8092                           ;Config register CONFIG2L @ 0x300002
  8093                           ;	Power-up Timer Enable bit
  8094                           ;	PWRT = OFF, PWRT disabled
  8095                           ;	Brown-out Reset Enable bit
  8096                           ;	BOR = OFF, Brown-out Reset disabled
  8097                           ;	Brown-out Reset Voltage bits
  8098                           ;	BORV = 20, VBOR set to 2.0V
  8099  300002                     	org	3145730
  8100  300002  0D                 	db	13
  8101                           
  8102                           ;Config register CONFIG2H @ 0x300003
  8103                           ;	Watchdog Timer Enable bit
  8104                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8105                           ;	Watchdog Timer Postscale Select bits
  8106                           ;	WDTPS = 128, 1:128
  8107  300003                     	org	3145731
  8108  300003  0E                 	db	14
  8109                           
  8110                           ; Padding undefined space
  8111  300004                     	org	3145732
  8112  300004  FF                 	db	255
  8113                           
  8114                           ;Config register CONFIG3H @ 0x300005
  8115                           ;	CCP2 Mux bit
  8116                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8117  300005                     	org	3145733
  8118  300005  00                 	db	0
  8119                           
  8120                           ;Config register CONFIG4L @ 0x300006
  8121                           ;	Stack Full/Underflow Reset Enable bit
  8122                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8123                           ;	Low Voltage ICSP Enable bit
  8124                           ;	LVP = OFF, Low Voltage ICSP disabled
  8125                           ;	Background Debugger Enable bit
  8126                           ;	DEBUG = 0x1, unprogrammed default
  8127  300006                     	org	3145734
  8128  300006  80                 	db	128
  8129                           
  8130                           ; Padding undefined space
  8131  300007                     	org	3145735
  8132  300007  FF                 	db	255
  8133                           
  8134                           ;Config register CONFIG5L @ 0x300008
  8135                           ;	Code Protection bit
  8136                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8137                           ;	Code Protection bit
  8138                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8139                           ;	Code Protection bit
  8140                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8141                           ;	Code Protection bit
  8142                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8143  300008                     	org	3145736
  8144  300008  0F                 	db	15
  8145                           
  8146                           ;Config register CONFIG5H @ 0x300009
  8147                           ;	Boot Block Code Protection bit
  8148                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8149                           ;	Data EEPROM Code Protection bit
  8150                           ;	CPD = OFF, Data EEPROM not code protected
  8151  300009                     	org	3145737
  8152  300009  C0                 	db	192
  8153                           
  8154                           ;Config register CONFIG6L @ 0x30000A
  8155                           ;	Write Protection bit
  8156                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8157                           ;	Write Protection bit
  8158                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8159                           ;	Write Protection bit
  8160                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8161                           ;	Write Protection bit
  8162                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8163  30000A                     	org	3145738
  8164  30000A  0F                 	db	15
  8165                           
  8166                           ;Config register CONFIG6H @ 0x30000B
  8167                           ;	Configuration Register Write Protection bit
  8168                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8169                           ;	Boot Block Write Protection bit
  8170                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8171                           ;	Data EEPROM Write Protection bit
  8172                           ;	WRTD = OFF, Data EEPROM not write protected
  8173  30000B                     	org	3145739
  8174  30000B  E0                 	db	224
  8175                           
  8176                           ;Config register CONFIG7L @ 0x30000C
  8177                           ;	Table Read Protection bit
  8178                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8179                           ;	Table Read Protection bit
  8180                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8181                           ;	Table Read Protection bit
  8182                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8183                           ;	Table Read Protection bit
  8184                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8185  30000C                     	org	3145740
  8186  30000C  0F                 	db	15
  8187                           
  8188                           ;Config register CONFIG7H @ 0x30000D
  8189                           ;	Boot Block Table Read Protection bit
  8190                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8191  30000D                     	org	3145741
  8192  30000D  40                 	db	64
  8193                           tosu	equ	0xFFF
  8194                           tosh	equ	0xFFE
  8195                           tosl	equ	0xFFD
  8196                           stkptr	equ	0xFFC
  8197                           pclatu	equ	0xFFB
  8198                           pclath	equ	0xFFA
  8199                           pcl	equ	0xFF9
  8200                           tblptru	equ	0xFF8
  8201                           tblptrh	equ	0xFF7
  8202                           tblptrl	equ	0xFF6
  8203                           tablat	equ	0xFF5
  8204                           prodh	equ	0xFF4
  8205                           prodl	equ	0xFF3
  8206                           indf0	equ	0xFEF
  8207                           postinc0	equ	0xFEE
  8208                           postdec0	equ	0xFED
  8209                           preinc0	equ	0xFEC
  8210                           plusw0	equ	0xFEB
  8211                           fsr0h	equ	0xFEA
  8212                           fsr0l	equ	0xFE9
  8213                           wreg	equ	0xFE8
  8214                           indf1	equ	0xFE7
  8215                           postinc1	equ	0xFE6
  8216                           postdec1	equ	0xFE5
  8217                           preinc1	equ	0xFE4
  8218                           plusw1	equ	0xFE3
  8219                           fsr1h	equ	0xFE2
  8220                           fsr1l	equ	0xFE1
  8221                           bsr	equ	0xFE0
  8222                           indf2	equ	0xFDF
  8223                           postinc2	equ	0xFDE
  8224                           postdec2	equ	0xFDD
  8225                           preinc2	equ	0xFDC
  8226                           plusw2	equ	0xFDB
  8227                           fsr2h	equ	0xFDA
  8228                           fsr2l	equ	0xFD9
  8229                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    16
    Data        334
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     108
    BANK0           128     18     127
    BANK1           256      0     247
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK1[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10309
                                             13 BANK0      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    6225
                                              8 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                         _resetTherm
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            8     8      0    3163
                                              0 BANK0      8     8      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2608
                                             20 COMRAM    14     6      8
                          _resetStep
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _stepMade
     _moveToPoint
       _resetStep
       _stepCounter
       _stepMade
     _pickObject
       _stepMade
     _releaseObj
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _stepMade
     _touchObject
       _resetStep
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80     12      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6C       1       85.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E2      15        0.0%
DATA                 0      0     1E2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Apr 26 14:56:12 2021

                                                  ___fldiv@aexp 0038  
                                                  ___fldiv@bexp 0037  
                                         __end_of_interruptInit 23BA  
                                                  ___fldiv@sign 0030  
                                                            l90 2434  
                                                            l84 2510  
                                                           l210 1CC4  
                                                           l211 1CC8  
                                                           l131 1100  
                                                           l132 12B0  
                                                           l240 21B0  
                                                           l232 2198  
                                                           l160 0E20  
                                                           l161 0ABC  
                                                           l225 1B94  
                                                           l402 2538  
                                                           l226 1B98  
                                                           l154 12C8  
                                                           l163 0B02  
                                                           l251 20AC  
                                                           l164 0B0C  
                                                           l229 2186  
                                                           l253 20D4  
                                                           l405 2578  
                                                           l350 150E  
                                                           l168 0E08  
                                                           l264 23DC  
                                                           l408 2564  
                                                           l185 0DAA  
                                                           l265 23E2  
                                                           l258 2408  
                                                           l259 240E  
                                                           l531 25A8  
                                                           l460 23AA  
                                                           l540 25B8  
                                                           l348 1512  
                                                           l525 2502  
                                                           l461 23B6  
                                                           l613 24B6  
                                                           l349 150C  
                                                           l622 24A4  
                                                           l390 245A  
                                                           l534 25B0  
                                                           l375 10AA  
                                                           l543 255A  
                                                           l551 2478  
                                                           l528 24F4  
                                                           l616 24E6  
                                                           l625 2550  
                                                           l393 256E  
                                                           l570 22B2  
                                                           l459 2394  
                                                           l619 2490  
                                                           l628 2582  
                                                           l396 25C0  
                                                           l548 2296  
                                                           l565 1DE2  
                                                           l574 22E4  
                                                           l399 2544  
                                                           l595 1756  
                                                           l598 17CC  
                                                           l937 1A66  
                                                           _isr 0008  
                                                   _touchObject 1B9C  
                                                           prod 000FF3  
                                                           wreg 000FE8  
                                                  ___fltol@exp1 0042  
                                                   main@errCode 00FC  
                                                          l1222 0A3E  
                                                          l1302 13D8  
                                                          l1224 0856  
                                                          l1233 08AC  
                                                          l1235 093C  
                                                          l1227 0810  
                                                          l1236 0924  
                                                          l1309 1444  
                                                          l4011 1BBE  
                                                          l4003 1B9E  
                                                          l4101 2116  
                                                          l4021 1C18  
                                                          l4013 1BD6  
                                                          l4005 1BA6  
                                                          l4111 216C  
                                                          l4103 2124  
                                                          l1295 132C  
                                                          l4023 1C2A  
                                                          l4031 1C8C  
                                                          l4015 1BE2  
                                                          l4007 1BB4  
                                                          l4113 219E  
                                                          l4105 2136  
                                                          l4121 2002  
                                                          l4041 1CAA  
                                                          l4033 1C92  
                                                          l4025 1C46  
                                                          l4017 1BF0  
                                                          l4009 1BB6  
                                                          l4201 10B0  
                                                          l1298 14BE  
                                                          l4115 21AA  
                                                          l4107 213E  
                                                          l4131 2090  
                                                          l4123 2054  
                                                          l4043 1CBC  
                                                          l4035 1C96  
                                                          l4019 1C10  
                                                          l4027 1C60  
                                                          l4051 1A84  
                                                          l4211 10F4  
                                                          l4203 10BC  
                                                          l4117 21AE  
                                                          l4109 2150  
                                                          l4141 23EC  
                                                          l4133 20AE  
                                                          l4125 2062  
                                                          l4037 1C98  
                                                          l4029 1C7C  
                                                          l4061 1AC0  
                                                          l4053 1A86  
                                                          l4221 1150  
                                                          l4213 1114  
                                                          l4205 10C8  
                                                          l4301 24E2  
                                                          l4143 240A  
                                                          l4135 20B2  
                                                          l4127 2068  
                                                          l4039 1CA6  
                                                          l4063 1AE0  
                                                          l4055 1A8E  
                                                          l4071 1B30  
                                                          l4047 1A6E  
                                                          l4311 25B6  
                                                          l4231 119A  
                                                          l4223 1158  
                                                          l4215 1126  
                                                          l4207 10D6  
                                                          l4151 1CD0  
                                                          l4303 24E4  
                                                          l4145 23BC  
                                                          l4129 208E  
                                                          l4137 20B8  
                                                          l4081 1B68  
                                                          l4073 1B4C  
                                                          l4065 1AE8  
                                                          l4057 1AA6  
                                                          l4049 1A76  
                                                          l4401 0F8A  
                                                          l4241 11E8  
                                                          l4233 11A8  
                                                          l4225 116A  
                                                          l4217 1130  
                                                          l4209 10DC  
                                                          l4161 1D2C  
                                                          l4153 1CD4  
                                                          l4321 1682  
                                                          l4305 247E  
                                                          l4091 20DA  
                                                          l4139 23E8  
                                                          l4147 23C0  
                                                          l4083 1B76  
                                                          l4067 1AFA  
                                                          l4075 1B5C  
                                                          l4059 1AB2  
                                                          l4411 0FF4  
                                                          l4403 0FD2  
                                                          l4315 24EC  
                                                          l4251 122C  
                                                          l4243 11FA  
                                                          l4235 11BA  
                                                          l4227 117E  
                                                          l4219 113E  
                                                          l4163 1D42  
                                                          l4155 1CEA  
                                                          l4171 1D84  
                                                          l4323 1688  
                                                          l4331 16A6  
                                                          l4307 2480  
                                                          l4181 2508  
                                                          l4093 20E0  
                                                          l4149 23DE  
                                                          l3701 06EC  
                                                          l4085 1B7A  
                                                          l4077 1B62  
                                                          l4069 1B16  
                                                          l4421 108E  
                                                          l4413 1032  
                                                          l4405 0FE8  
                                                          l4261 129E  
                                                          l4253 123E  
                                                          l4245 1204  
                                                          l4237 11C2  
                                                          l4229 1190  
                                                          l4165 1D58  
                                                          l4157 1D00  
                                                          l4341 1778  
                                                          l4325 1692  
                                                          l4333 16DE  
                                                          l4309 2488  
                                                          l4501 1632  
                                                          l4095 20EC  
                                                          l3711 073A  
                                                          l3703 06F4  
                                                          l4087 1B8C  
                                                          l4079 1B66  
                                                          l4423 1096  
                                                          l4415 1044  
                                                          l4407 0FEC  
                                                          l4191 2428  
                                                          l4183 2414  
                                                          l4271 2380  
                                                          l4263 12B6  
                                                          l4255 125A  
                                                          l4247 1212  
                                                          l4239 11D4  
                                                          l4167 1D6E  
                                                          l4159 1D16  
                                                          l4343 1780  
                                                          l4335 16F6  
                                                          l4327 169C  
                                                          l4319 1672  
                                                          l4511 1662  
                                                          l4503 164C  
                                                          l4177 24FA  
                                                          l4097 20F2  
                                                          l3721 076A  
                                                          l3713 0740  
                                                          l3705 0706  
                                                          l4425 109A  
                                                          l4417 1054  
                                                          l4409 0FF0  
                                                          l4281 2448  
                                                          l4193 242C  
                                                          l4185 241C  
                                                          l4273 2392  
                                                          l4265 12C2  
                                                          l4249 1224  
                                                          l4257 1274  
                                                          l4345 178A  
                                                          l4337 16FE  
                                                          l4505 1654  
                                                          l3643 257E  
                                                          l3635 2496  
                                                          l4099 210A  
                                                          l3731 07BA  
                                                          l3707 0722  
                                                          l3811 1968  
                                                          l3651 25BE  
                                                          l4427 109E  
                                                          l4419 1086  
                                                          l4371 0E34  
                                                          l4283 244A  
                                                          l4195 242E  
                                                          l4187 2420  
                                                          l4275 23A8  
                                                          l4363 2556  
                                                          l4267 12C6  
                                                          l4259 128A  
                                                          l4339 1750  
                                                          l4291 2460  
                                                          l4507 165A  
                                                          l4451 14C4  
                                                          l3637 249A  
                                                          l3645 254A  
                                                          l3741 080E  
                                                          l3733 07CA  
                                                          l3725 077E  
                                                          l3709 0732  
                                                          l3717 0754  
                                                          l3821 19C0  
                                                          l3813 1998  
                                                          l3805 1938  
                                                          l3653 2574  
                                                          l4429 10A6  
                                                          l4381 0ED0  
                                                          l4373 0E38  
                                                          l4285 244C  
                                                          l4277 243A  
                                                          l4197 2430  
                                                          l4189 2424  
                                                          l4365 25AE  
                                                          l4437 25A6  
                                                          l4445 2240  
                                                          l3661 22A4  
                                                          l4349 1796  
                                                          l4293 2474  
                                                          l4509 165E  
                                                          l4461 14D6  
                                                          l4453 14C4  
                                                          l3639 249E  
                                                          l3911 0AF2  
                                                          l3903 0A80  
                                                          l3751 086C  
                                                          l3743 081C  
                                                          l3735 07D2  
                                                          l3727 079A  
                                                          l3719 076A  
                                                          l3671 0632  
                                                          l3831 19F2  
                                                          l3815 199A  
                                                          l3807 1952  
                                                          l3647 256A  
                                                          l3655 2532  
                                                          l4391 0F52  
                                                          l4383 0EE0  
                                                          l4375 0E72  
                                                          l4287 2456  
                                                          l4279 2442  
                                                          l4199 2432  
                                                          l4447 2280  
                                                          l4439 223C  
                                                          l3663 22C6  
                                                          l4295 24AA  
                                                          l4471 1506  
                                                          l4463 14DA  
                                                          l4455 14CA  
                                                          l3921 0B42  
                                                          l3913 0B08  
                                                          l3905 0AAC  
                                                          l3753 0886  
                                                          l3761 08BE  
                                                          l3745 0840  
                                                          l3737 07E8  
                                                          l3729 07AA  
                                                          l3681 0672  
                                                          l3673 0634  
                                                          l3841 1A2E  
                                                          l3817 19AA  
                                                          l3649 253E  
                                                          l3657 2560  
                                                          l4393 0F74  
                                                          l4385 0EF4  
                                                          l4377 0E82  
                                                          l4369 0E28  
                                                          l4289 2458  
                                                          l4449 2282  
                                                          l3665 22CC  
                                                          l4297 24B2  
                                                          l4481 155E  
                                                          l4473 1516  
                                                          l4465 14DE  
                                                          l4457 14CE  
                                                          l3931 0BAA  
                                                          l3923 0B4E  
                                                          l3915 0B16  
                                                          l3907 0AC2  
                                                          l3763 08D2  
                                                          l3755 088C  
                                                          l3747 0842  
                                                          l3739 07FC  
                                                          l3691 06AC  
                                                          l3675 064A  
                                                          l3683 067A  
                                                          l3667 0614  
                                                          l3843 1A44  
                                                          l3827 19DC  
                                                          l3819 19AE  
                                                          l3851 12E4  
                                                          l4395 0F78  
                                                          l4387 0F2E  
                                                          l4379 0E96  
                                                          l3659 229C  
                                                          l4299 24DE  
                                                          l4491 15D0  
                                                          l4483 1560  
                                                          l4475 1530  
                                                          l4467 14EA  
                                                          l4459 14D2  
                                                          l3941 0C0A  
                                                          l3933 0BB6  
                                                          l3925 0B64  
                                                          l3917 0B24  
                                                          l3909 0AC6  
                                                          l3773 0952  
                                                          l3781 099E  
                                                          l3765 08D6  
                                                          l3757 0898  
                                                          l3749 0852  
                                                          l3693 06AE  
                                                          l3685 068C  
                                                          l3677 065E  
                                                          l3669 0620  
                                                          l3845 1A54  
                                                          l3837 1A0C  
                                                          l3829 19E8  
                                                          l3861 136E  
                                                          l3853 12F6  
                                                          l4397 0F80  
                                                          l4389 0F3E  
                                                          l4493 15E8  
                                                          l4485 1580  
                                                          l4477 153C  
                                                          l4469 14F2  
                                                          l3951 0C70  
                                                          l3935 0BD6  
                                                          l3927 0B8A  
                                                          l3919 0B2A  
                                                          l3791 0A16  
                                                          l3783 09BE  
                                                          l3775 095E  
                                                          l3767 08E8  
                                                          l3759 08AA  
                                                          l3695 06C4  
                                                          l3687 0694  
                                                          l3679 066E  
                                                          l3839 1A1A  
                                                          l3871 13CE  
                                                          l3863 1378  
                                                          l3855 133E  
                                                          l4495 1622  
                                                          l4487 159E  
                                                          l4479 154E  
                                                          l3961 0CC2  
                                                          l3945 0C3C  
                                                          l3937 0BDE  
                                                          l3929 0B94  
                                                          l3793 0A28  
                                                          l3785 09D4  
                                                          l3777 0970  
                                                          l3769 091A  
                                                          l3697 06D8  
                                                          l3689 069A  
                                                          l3881 145A  
                                                          l3873 1410  
                                                          l3865 1386  
                                                          l3857 135A  
                                                          l3849 12D0  
                                                          l4497 162A  
                                                          l4489 15A8  
                                                          l3963 0CD8  
                                                          l3971 0D22  
                                                          l3947 0C52  
                                                          l3955 0C7C  
                                                          l3939 0BF4  
                                                          l3795 0A2E  
                                                          l3787 09F4  
                                                          l3779 099A  
                                                          l3699 06E8  
                                                          l3891 14AC  
                                                          l3883 1460  
                                                          l3875 141E  
                                                          l3867 13BE  
                                                          l4499 162E  
                                                          l3981 0D8C  
                                                          l3973 0D38  
                                                          l3965 0CE4  
                                                          l3957 0C92  
                                                          l3949 0C5E  
                                                          l3797 0A32  
                                                          l3789 0A10  
                                                          l3885 1484  
                                                          l3877 1432  
                                                          l3869 13C2  
                                                          l4693 16BE  
                                                          l3983 0D9E  
                                                          l3967 0D04  
                                                          l3959 0CB8  
                                                          l3991 0DE0  
                                                          l3895 0A46  
                                                          l3887 1498  
                                                          l3879 1458  
                                                          l4695 17AC  
                                                          l3993 0DF6  
                                                          l3977 0D6A  
                                                          l3969 0D0C  
                                                          l3897 0A60  
                                                          l3889 14AA  
                                                          l4697 1D9A  
                                                          l3995 0E0E  
                                                          l3979 0D80  
                                                          l3987 0DAA  
                                                          l3899 0A78  
                                                          l4699 0FAA  
                                                          ?_isr 0001  
                                                          l3997 0E1A  
                                                          l3989 0DC6  
                                                          l3999 0E1E  
                                                          u3000 198C  
                                                          u3010 19BE  
                                                          u3011 19B8  
                                                          u3020 19D6  
                                                          u3100 140A  
                                                          u3021 19D0  
                                                          u3005 1980  
                                                          u3101 1404  
                                                          _LATA 000F89  
                                                          u3030 1A06  
                                                          u3110 1430  
                                                          _LATB 000F8A  
                                                          u3031 1A00  
                                                          u3111 142A  
                                                          _LATC 000F8B  
                                                          u3200 0B40  
                                                          u3040 1A2E  
                                                          u3120 1444  
                                                          _LATD 000F8C  
                                                          u3201 0B3A  
                                                          u3041 1A28  
                                                          u3121 143E  
                                                          u3210 0B62  
                                                          u3050 1A42  
                                                          u3130 1456  
                                                          u3211 0B5C  
                                                          u3051 1A3C  
                                                          u3131 1450  
                                                          u3300 0CB6  
                                                          u3220 0B88  
                                                          u3140 1496  
                                                          u3060 12E2  
                                                          u3301 0CB0  
                                                          u3221 0B82  
                                                          u3141 1490  
                                                          u3061 12DC  
                                                          u3310 0CD6  
                                                          u3230 0BA8  
                                                          u3150 14A8  
                                                          u3070 12F4  
                                                          u3311 0CD0  
                                                          u3231 0BA2  
                                                          u3151 14A2  
                                                          u3071 12EE  
                                                          u3400 0E08  
                                                          u3320 0D02  
                                                          u3240 0BD4  
                                                          u3160 0A5E  
                                                          u3080 1358  
                                                          u3401 0E02  
                                                          u3321 0CFC  
                                                          u3241 0BCE  
                                                          u3161 0A58  
                                                          u3081 1352  
                                                          u3330 0D36  
                                                          u3250 0C08  
                                                          u3170 0A78  
                                                          u3090 13B8  
                                                          u3410 1BD4  
                                                          u3331 0D30  
                                                          u3251 0C02  
                                                          u3171 0A72  
                                                          u3091 13B2  
                                                          u3411 1BCE  
                                                          u3340 0D64  
                                                          u3260 0C36  
                                                          u3180 0AAA  
                                                          u3420 1C0E  
                                                          u3500 1B14  
                                                          u3341 0D5E  
                                                          u3261 0C30  
                                                          u3181 0AA4  
                                                          u3421 1C08  
                                                          u3501 1B0E  
                                                          u3350 0D7E  
                                                          u3270 0C50  
                                                          u3190 0AF0  
                                                          u3430 1C44  
                                                          u3510 1B30  
                                                          u3351 0D78  
                                                          u3271 0C4A  
                                                          u3191 0AEA  
                                                          u3431 1C3E  
                                                          u3511 1B2A  
                                                          u3360 0D9C  
                                                          u3280 0C6E  
                                                          u2800 06C2  
                                                          u3600 20AA  
                                                          u3440 1C60  
                                                          u3520 1B4A  
                                                          u3361 0D96  
                                                          u3281 0C68  
                                                          u2801 06BC  
                                                          u3601 20A4  
                                                          u3441 1C5A  
                                                          u3521 1B44  
                                                          u3370 0DC4  
                                                          u3290 0C90  
                                                          u2810 06D6  
                                                          u3610 20D2  
                                                          u3450 1C7A  
                                                          u3530 1B5C  
                                                          u3371 0DBE  
                                                          u3291 0C8A  
                                                          u2811 06D0  
                                                          u3611 20CC  
                                                          u3451 1C74  
                                                          u3531 1B56  
                                                          u3380 0DE0  
                                                          u3620 2406  
                                                          u2900 08D0  
                                                          u2820 0720  
                                                          u3460 1C8C  
                                                          u3540 1B8A  
                                                          u3700 11B8  
                                                          u2740 22C4  
                                                          u3381 0DDA  
                                                          u3621 2400  
                                                          u2901 08CA  
                                                          u2821 071A  
                                                          u3461 1C86  
                                                          u3541 1B84  
                                                          u3701 11B2  
                                                          u2741 22BE  
                                                          u3550 2108  
                                                          u3390 0DF4  
                                                          u3630 23DA  
                                                          u2910 08E6  
                                                          u2830 0768  
                                                          u3470 1CBA  
                                                          u3710 11E6  
                                                          u2750 22E2  
                                                          u3551 2102  
                                                          u3391 0DEE  
                                                          u3631 23D4  
                                                          u2911 08E0  
                                                          u2831 0762  
                                                          u3471 1CB4  
                                                          u3711 11E0  
                                                          u2751 22DC  
                                                          u3560 2134  
                                                          u2920 0918  
                                                          u2840 07E6  
                                                          u2760 0630  
                                                          u3480 1AA4  
                                                          u3800 23A6  
                                                          u3720 11FA  
                                                          u3640 10F2  
                                                          u3561 212E  
                                                          u2921 0912  
                                                          u2841 07E0  
                                                          u2761 062A  
                                                          u3481 1A9E  
                                                          u3801 23A0  
                                                          u3721 11F4  
                                                          u3641 10EC  
                                                          u3570 216A  
                                                          u2930 0936  
                                                          u2850 080C  
                                                          u2770 0648  
                                                          u3490 1ADE  
                                                          u3730 1222  
                                                          u3650 1112  
                                                          u3810 16F4  
                                                          u3571 2164  
                                                          u2931 0930  
                                                          u2851 0806  
                                                          u2771 0642  
                                                          u3491 1AD8  
                                                          u3731 121C  
                                                          u3651 110C  
                                                          u3811 16EE  
                                                          u3580 2186  
                                                          u2940 0950  
                                                          u2860 083E  
                                                          u2780 065C  
                                                          u3820 0FE6  
                                                          u3740 1258  
                                                          u3660 1126  
                                                          u3900 164A  
                                                          u3581 2180  
                                                          u2941 094A  
                                                          u2861 0838  
                                                          u2781 0656  
                                                          u3821 0FE0  
                                                          u3741 1252  
                                                          u3661 1120  
                                                          u3901 1644  
                                                          u3590 2198  
                                                          u2950 096E  
                                                          u2870 086A  
                                                          u2790 06AA  
                                                          u3830 1084  
                                                          u3750 1274  
                                                          u3670 114E  
                                                          u3591 2192  
                                                          u2951 0968  
                                                          u2871 0864  
                                                          u2791 06A4  
                                                          u3831 107E  
                                                          u3751 126E  
                                                          u3671 1148  
                                                          u2960 09BC  
                                                          u2880 0884  
                                                          u3760 1288  
                                                          u3680 117C  
                                                          u3840 2294  
                                                          u2961 09B6  
                                                          u2881 087E  
                                                          u3761 1282  
                                                          u3681 1176  
                                                          u3841 228E  
                                                          u2970 09F2  
                                                          u2890 08A8  
                                                          u3770 129C  
                                                          u3690 1190  
                                                          u3850 1504  
                                                   main@newData 00FD  
                                                          u2971 09EC  
                                                          u2891 08A2  
                                                          u3771 1296  
                                                          u3691 118A  
                                                          u3851 14FE  
                                                          u2980 0A26  
                                                          u3780 12B0  
                                                          u3860 152E  
                                                          u2981 0A20  
                                                          u3781 12AA  
                                                          u3861 1528  
                                                          u2990 1950  
                                                          u3790 2390  
                                                          u3870 157E  
                                                          u2991 194A  
                                                          u3791 238A  
                                                          u3871 1578  
                                                          u3880 159E  
                                                          u3881 1598  
                                                          u3890 15E6  
                                                          u3891 15E0  
                                                          i2l81 251E  
                                                          i2l87 25C8  
                                                          _TMR0 000FD6  
                                                          _TMR2 000FCC  
                                           __end_ofi2_storeData 1936  
                                                          _main 14C4  
                                                          _maxX 006A  
                                                          _maxY 0090  
                                          __end_ofi2_printError 1F04  
                                                          fsr2h 000FDA  
                                                          indf2 000FDF  
                                                          fsr1l 000FE1  
                                                          fsr2l 000FD9  
                                                          btemp 006D  
                                                          prodh 000FF4  
                                                          prodl 000FF3  
                                                          start 019C  
                                               ___fldiv@new_exp 0031  
                                                  ___param_bank 000000  
                                               ??_whatsTM0Limit 0001  
                                                         ??_isr 000B  
                                                  ?_executeData 0001  
                                               executeData@data 00F8  
                                                 ___fltol@sign1 0041  
                                                         ?_main 0001  
                                               __end_of___fldiv 0A44  
                                               __end_of___fltol 1A6C  
                                                         i2l411 25A0  
                                                         i2l414 2596  
                                                         i2l268 24C2  
                                                         i2l269 24C4  
                                                         i2l631 25D0  
                                                         i2l537 25D8  
                                                         i2l570 2300  
                                                         i2l634 258C  
                                                         i2l484 0184  
                                                         i2l565 1EFE  
                                                         i2l637 252C  
                                                         i2l574 2332  
                                                         i2l595 18BA  
                                                         i2l598 1930  
                                          rotateObj@rotSequence 0080  
                                                         _SPBRG 000FAF  
                                                         _TRISA 000F92  
                                                         _TRISB 000F93  
                                                         _TRISC 000F94  
                                                         _TRISD 000F95  
                                                         _TXREG 000FAD  
                                               __end_of_getData 2506  
                                               i2storeData@data 000A  
                                               __end_of_initADC 245E  
                                                  ?_newSequence 0001  
                                               __end_of_liftArm 21B4  
                                               __end_of_readSeq 25B4  
                                                  stepMade@temp 0014  
                                                         tablat 000FF5  
                                                i2uartTx@length 0003  
                                               __end_of_stopADC 25C4  
                                                         ttemp5 006E  
                                                         ttemp6 0071  
                                                         ttemp7 0075  
                                                         status 000FD8  
                                                         wtemp8 006E  
                                              __end_ofi2_uartTx 2336  
                                                 ?_increaseStep 0001  
                                               __initialization 21B4  
                                        __size_of_initPinMotors 0026  
                                                  __end_of_main 166E  
                                      resetPosition@keepMovingX 0015  
                                      resetPosition@keepMovingY 0016  
                                      resetPosition@keepMovingZ 0017  
                                                        ??_main 00FA  
                                                 __activetblptr 000002  
                                                   i2_storeData 17D2  
                                                   isr@tm0Count 005A  
                                                  ?_setThermRel 0001  
                                                        _ADRESH 000FC4  
                                                        _ADRESL 000FC3  
                                                  ?_moveToPoint 0015  
                                                        i2l3001 1E5E  
                                                        i2l3003 1E74  
                                                        i2l3005 1E8A  
                                                        i2l3009 1EA0  
                                                        i2l3105 24BC  
                                                        i2l2171 25D6  
                                                        i2l3301 180A  
                                                        i2l2167 259C  
                                                        i2l3311 18DC  
                                                        i2l3303 1842  
                                                        i2l2177 25CE  
                                                        i2l2169 2592  
                                                        i2l3313 18E4  
                                                        i2l3305 185A  
                                                        i2l3401 0032  
                                                        i2l2179 2588  
                                                        i2l3315 18EE  
                                                        i2l3307 1862  
                                                        i2l3411 006C  
                                                        i2l3403 004E  
                                                        i2l2701 231A  
                                                        i2l3309 18B4  
                                                        i2l3421 00A0  
                                                        i2l3413 006E  
                                                        i2l3405 0050  
                                                        i2l3319 18FA  
                                                        i2l3431 00EA  
                                                        i2l3423 00A4  
                                                        i2l3415 0086  
                                                        i2l3407 0054  
                                                        i2l3441 0114  
                                                        i2l3433 00EE  
                                                        i2l3425 00C2  
                                                        i2l3417 008A  
                                                        i2l3409 0058  
                                                        i2l3291 17E6  
                                                        i2l3451 0178  
                                                        i2l3443 013A  
                                                        i2l3435 00F2  
                                                        i2l3427 00C4  
                                                        i2l3419 009E  
                                                        i2l3293 17EC  
                                                        i2l3453 017E  
                                                        i2l3445 0146  
                                                        i2l3429 00D8  
                                                        i2l3437 00F8  
                                                        i2l3287 2524  
                                                        i2l3295 17F6  
                                                        i2l3447 0160  
                                                        i2l3439 010C  
                                                        i2l3297 1800  
                                                        i2l3289 17D6  
                                                        i2l3449 0164  
                                                        i2l3395 001C  
                                                        i2l1893 2516  
                                                        i2l4701 1822  
                                                        i2l3397 002E  
                                                        i2l2695 22EA  
                                                        i2l4703 1910  
                                                        i2l3399 0030  
                                                        i2l2697 22F2  
                                                        i2l4705 1EB6  
                                                        i2l1897 25C6  
                                                        i2l2699 2314  
                                                        i2l2991 1DF0  
                                                        i2l2993 1E06  
                                                        i2l2995 1E1C  
                                                        i2l2997 1E32  
                                                        i2l2989 1DEC  
                                                        i2l2999 1E48  
                                                        _RCREG1 000FAE  
                                                  ?_setTouchRel 0001  
                                              __end_of_abortAll 24CC  
                                              __end_of___xxtofl 14C4  
                                              __end_of_clearTM0 2514  
                                              _errString_PointZ 0100  
                                                ??_increaseStep 0001  
                                              __end_of_maxFeedX 0611  
                                              __end_of_maxFeedY 0610  
                                                     ??___fldiv 0028  
                                                     ??___fltol 003D  
                                              __end_of_tim0Init 24BA  
                                              __end_of_tim1Init 24EA  
                                              __end_of_tim2Init 2494  
                                                        clear_0 221A  
                                                        clear_1 2226  
                                                     ??_getData 0014  
                                                        _uartTx 229A  
                                                     ??_initADC 0012  
                                                     ??_liftArm 0015  
                                                     ??_readSeq 0012  
                                                  __pdataCOMRAM 005E  
                                         __end_of_resetPosition 12CC  
                                                  __mediumconst 0000  
                                                        tblptrh 000FF7  
                                                        tblptrl 000FF6  
                                                        tblptru 000FF8  
                                                  ?_returnTherm 0012  
                                              __end_of_startADC 2572  
                                              __end_of_stepMade 24A8  
                                                 _initPinMotors 2412  
                                                  ?_returnTouch 0012  
                                                     ??_stopADC 0012  
                                         __size_ofi2_printError 011C  
                                              __end_of_writeTM0 2522  
                                     __size_of_resetNewSequence 000A  
                                                  ___xxtofl@arg 001C  
                                                  ___xxtofl@exp 001B  
                                                  ___xxtofl@val 0012  
                                                    __accesstop 0080  
                                       __end_of__initialization 222C  
                                                  _dataSequence 00D1  
                                                 ___rparam_used 000001  
                                                    ___fltol@f1 0039  
                                                  ?_stepCounter 0012  
                                                   i2uartTx@ptr 0001  
                                                __pcstackCOMRAM 0001  
                                                  __newSequence 0056  
                                                  __pidataBANK0 2336  
                                                  __pidataBANK1 1F04  
                                               isr@single_cycle 0048  
                                          __size_of_executeData 0288  
                                                  i2_printError 1DE8  
                                                  ?_touchObject 0001  
                                                _errString_ZEND 015E  
                                                _errString_Feed 0092  
                                                ?_initPinMotors 0001  
                                                     ?i2_uartTx 0001  
                                                    __pbssBANK0 00C8  
                                          __size_of_newSequence 0008  
                                                    _feeder1Pos 060D  
                                                    _feeder2Pos 060B  
                                                    _feeder3Pos 0609  
                                       __size_of_getNewSequence 000E  
                                                    _fatalError 25D4  
                                            __size_of_reduceSeq 0008  
                                            __size_of_retPeriod 000E  
                                                _touch_pressure 0607  
                                            __size_of_shiftData 0060  
                                            __size_of_resetStep 000A  
                                                       _ADC_res 004A  
                                                       ?_uartTx 0012  
                                                     ?_abortAll 0001  
                                                     ?___xxtofl 0012  
                                          __end_of_increaseStep 25D4  
                                                     ?_clearTM0 0001  
                                                    ??i2_uartTx 0004  
                                            __size_of_rotateObj 00DC  
                                             _errString_Command 00B0  
                                            __size_of_usartInit 001E  
                                        __size_of_interruptInit 003C  
                                          __size_of_setThermRel 000A  
                                            __size_of_storeData 0164  
                                                     ?_tim0Init 0001  
                                                     ?_tim1Init 0001  
                                                     ?_tim2Init 0012  
                                          __size_of_moveToPoint 03E2  
                                          storeData@receivedMex 00C8  
                                               _newSequenceData 00E5  
                                          __size_of_setTouchRel 000A  
                                                       __Hparam 0000  
                                                       __Lparam 0000  
                                        __end_of_touch_pressure 0609  
                                                       ___fldiv 0612  
                                                     ?_startADC 0001  
                                                     ?_stepMade 0012  
                                                       ___fltol 1936  
                                                  __psmallconst 0600  
                                                       __pcinit 21B4  
                                         __end_of_whatsTM0Limit 25CC  
                                                       _getData 24F8  
                                                       __ramtop 0600  
                                                     ?_writeTM0 0001  
                                                    _pickObject 23E6  
                                                       __ptext0 14C4  
                                                       __ptext1 245E  
                                                       __ptext2 247C  
                                                       __ptext3 24DC  
                                                       __ptext4 24A8  
                                                       __ptext5 166E  
                                                       __ptext6 1CCC  
                                                       __ptext7 229A  
                                                       __ptext8 223A  
                                                       __ptext9 10AE  
                                               __size_of_uartTx 004E  
                                                     _T0CONbits 000FD5  
                                                       _initADC 2438  
                                                     _T1CONbits 000FCD  
                                               ??_initPinMotors 0012  
                                                       _liftArm 20D8  
                                                     _T2CONbits 000FCA  
                                                    ??_abortAll 0008  
                                                       _readSeq 25AC  
                                                  __size_of_isr 0194  
                                                    ??___xxtofl 0016  
                                                  ?i2_storeData 0001  
                                                    ??_clearTM0 0012  
                                                    _motCounter 005E  
                                                       _pwmStep 0053  
                                                       _stopADC 25BC  
                                             __end_of_reduceSeq 25AC  
                                             __end_of_retPeriod 2530  
                                                    _releaseObj 23BA  
                                          __size_of_returnTherm 000C  
                                          end_of_initialization 222C  
                                          __size_of_returnTouch 000C  
                                              _resetNewSequence 2554  
                                              rotateObj@totStep 00F1  
                                             __end_of_shiftData 229A  
                                                       isr@temp 0011  
                                             __end_of_resetStep 2586  
                                                    ??_tim0Init 0012  
                                                 __Lmediumconst 0000  
                                                    ??_tim1Init 0012  
                                                    ??_tim2Init 0014  
                                              storeData@command 0054  
                                              storeData@counter 0055  
                                                    _resetTherm 255E  
                                                    _resetTouch 2572  
                                                       uartTx@i 0015  
                                                   ?_fatalError 0001  
                                                     _RCSTAbits 000FAB  
                                                       postdec1 000FE5  
                                                       postdec2 000FDD  
                                             __end_of_rotateObj 20D8  
                                                       postinc0 000FEE  
                                                       postinc1 000FE6  
                                                       postinc2 000FDE  
                                                    ??_startADC 0012  
                                                    ??_stepMade 0014  
                                          __size_of_stepCounter 000C  
                                                 _interruptInit 237E  
                                             __end_of_usartInit 247C  
                                             __end_of_storeData 17D2  
                                    __end_ofrotateObj@stepAngle 0605  
                                                    ??_writeTM0 0001  
                                                     _PORTDbits 000F83  
                                                    _printError 1CCC  
                                                     _PORTEbits 000F84  
                                           i2printError@errCode 0007  
                                                    _toggleStep 2586  
                                                 ___xxtofl@sign 001A  
                                                     _TRISCbits 000F94  
                                                     _TRISDbits 000F95  
                                                     _TRISEbits 000F96  
                                                   ___fldiv@grs 0033  
                                                   ___fldiv@rem 002C  
                                          __size_of_touchObject 0130  
                                                    _stepToggle 0052  
                                                    _touchTherm 1A6C  
                                                     _TXSTAbits 000FAC  
                                                _getNewSequence 24EA  
                                                ?_interruptInit 0001  
                                                 __pidataCOMRAM 24CC  
                                         __size_of_increaseStep 0008  
                                                   ?_pickObject 0001  
                                                   __fatalError 0057  
                                                __end_of_uartTx 22E8  
                                                 moveToPoint@x1 0015  
                                                 moveToPoint@x2 0019  
                                                 moveToPoint@y1 0017  
                                                 moveToPoint@y2 001B  
                                           start_initialization 21B4  
                                                     i2uartTx@i 0004  
                                                   __end_of_isr 019C  
                                           __size_of_fatalError 0008  
                                                   ?_releaseObj 0001  
                                             __size_ofi2_uartTx 004E  
                                        __end_of_getNewSequence 24F8  
                                               _errString_Fatal 01AF  
                                               _errString_Bound 01D6  
                                                   ?_resetTherm 0001  
                                               _errString_Reset 0187  
                                                   ?_resetTouch 0001  
                                               _errString_Point 0135  
                                                  _increaseStep 25CC  
                                        __size_of_resetPosition 021E  
                                                 ??_executeData 00F5  
                                                   __pdataBANK0 0080  
                                                   __pdataBANK1 0100  
                                                   _dataCounter 0058  
                                                      ??_uartTx 0015  
                                        moveToPoint@keepMovingX 0022  
                                        moveToPoint@keepMovingY 001F  
                                                   ?_printError 0001  
                                                     ___fldiv@a 0024  
                                                     ___fldiv@b 0020  
                                                _therm_pressure 0605  
                                                   ?_toggleStep 0001  
                                                   __pbssCOMRAM 0043  
                                                 __pcstackBANK0 00ED  
                                                 ??_newSequence 0012  
                                             __size_of_abortAll 0012  
                                             __size_of___xxtofl 01F8  
                                          __size_ofi2_storeData 0164  
                                             __size_of_clearTM0 000E  
                                               ?_getNewSequence 0012  
                                                   ?_touchTherm 0001  
                                           __size_of_pickObject 002C  
                                            executeData@errCode 00F7  
                                             __size_of_tim0Init 0012  
                                             __size_of_tim1Init 000E  
                                             __size_of_tim2Init 0018  
                                               ??_interruptInit 0012  
                                                     __pintcode 0008  
                                                      ?___fldiv 0020  
                                                      ?___fltol 0039  
                                      __end_of_resetNewSequence 255E  
                                           __size_of_releaseObj 002C  
                                                 storeData@data 001B  
                                                      ?_getData 0012  
                                             __size_of_startADC 000A  
                                             __size_of_stepMade 0014  
                                        __end_of_therm_pressure 0607  
                                                      ?_initADC 0001  
                                                   __smallconst 0600  
                                                      ?_liftArm 0001  
                                                      ?_readSeq 0001  
                                             __size_of_writeTM0 000E  
                                           __end_of_executeData 10AE  
                                                    shiftData@i 0014  
                                           __size_of_resetTherm 000A  
                                                     _newFeeder 004C  
                                                 _resetPosition 10AE  
                                           __size_of_resetTouch 000A  
                                                 ??_setThermRel 0001  
                                                      ?_stopADC 0001  
                                                 ??_moveToPoint 001D  
                                                 ??_setTouchRel 0001  
                                           __end_of_newSequence 25BC  
                                                     _reduceSeq 25A4  
                                                      _LATAbits 000F89  
                                                      _LATBbits 000F8A  
                                                     _retPeriod 2522  
                                                      _LATCbits 000F8B  
                                                      _LATDbits 000F8C  
                                           __size_of_printError 011C  
                                                      _IPR1bits 000F9F  
                                                      _PIE1bits 000F9D  
                                                     _shiftData 223A  
                                                     _resetStep 257C  
                                                      i2u270_40 010A  
                                                      i2u262_40 002C  
                                                      i2u270_41 0104  
                                                      i2u262_41 0026  
                                                      i2u255_40 1858  
                                                      i2u271_40 0138  
                                                      i2u263_40 004C  
                                                      i2u255_41 1852  
                                                      i2u271_41 0132  
                                                      i2u263_41 0046  
                                                      i2u184_40 2312  
                                                      i2u272_40 015E  
                                                      i2u264_40 006A  
                                                      i2u184_41 230C  
                                                      i2u272_41 0158  
                                                      i2u264_41 0064  
                                                      i2u185_40 2330  
                                                      i2u273_40 0176  
                                                      i2u265_40 0084  
                                                      i2u185_41 232A  
                                                      i2u273_41 0170  
                                                      i2u265_41 007E  
                                                      _PIR1bits 000F9E  
                                                      i2u266_40 009C  
                                                      i2u266_41 0096  
                                                      i2u267_40 00C0  
                                                      i2u267_41 00BA  
                                                      i2u268_40 00D6  
                                                      i2u268_41 00D0  
                                                      i2u269_40 00E8  
                                                      i2u269_41 00E2  
                                           __size_of_toggleStep 000A  
                                                  ??_fatalError 0001  
                                                     _posVector 0043  
                                                      _RCONbits 000FD0  
                                                     _therm_rel 005B  
                                                     _pwmPeriod 0046  
                                                     _rotateObj 1FFC  
                                                    _ADCON0bits 000FC2  
                                                    _ADCON1bits 000FC1  
                                           __size_of_touchTherm 0130  
                                                     _usartInit 245E  
                                                     _touch_rel 005C  
                                            __end_of_feeder1Pos 060F  
                                            __end_of_feeder2Pos 060D  
                                            __end_of_feeder3Pos 060B  
                                                     _storeData 166E  
                                                ?_resetPosition 0001  
                                         __end_of_initPinMotors 2438  
                                                 ??_returnTherm 0014  
                                                 ??_returnTouch 0014  
                                                      i2_uartTx 22E8  
                                                     copy_data0 21C8  
                                                     copy_data1 21E8  
                                                     copy_data2 2208  
                                            __end_of_fatalError 25DC  
                                            rotateObj@stepAngle 0601  
                                                    ?_reduceSeq 0001  
                                                    ?_retPeriod 0001  
                                                    rotateObj@i 00F3  
                                        __size_of_whatsTM0Limit 0008  
                                           __end_of_setThermRel 25A4  
                                           __end_of_moveToPoint 0E26  
                                             printError@errCode 0018  
                                                    ?_shiftData 0001  
                                                 ??_stepCounter 0014  
                                                      __Hrparam 0000  
                                                    ?_resetStep 0001  
                                           __end_of_setTouchRel 259A  
                                                      __Lrparam 0000  
                                              __size_of___fldiv 0432  
                                              __size_of___fltol 0136  
                                                   _executeData 0E26  
                                                  ??_pickObject 0015  
                                                    ?_rotateObj 0001  
                                      moveToPoint@MOT1Direction 0020  
                                                 ?i2_printError 0001  
                                              __size_of_getData 000E  
                                      moveToPoint@MOT2Direction 0021  
                                                 ??_touchObject 0015  
                                                      _abortAll 24BA  
                                                    ?_usartInit 0001  
                                              __size_of_initADC 0026  
                                                      ___xxtofl 12CC  
                                              __size_of_liftArm 00DC  
                                                    ?_storeData 0001  
                                                      _clearTM0 2506  
                                              __size_of_readSeq 0008  
                                            storeData@mexLength 006C  
                                                      _tm0Error 0050  
                                                      _tm0Limit 005D  
                                                   _newSequence 25B4  
                                                      __ptext10 2554  
                                                      __ptext11 25A4  
                                                      __ptext20 2530  
                                                      __ptext12 25AC  
                                                      __ptext21 255E  
                                                      __ptext13 25B4  
                                                      __ptext30 0612  
                                                      __ptext22 1B9C  
                                                      __ptext14 237E  
                                                      __ptext31 23BA  
                                                      __ptext23 25BC  
                                                      __ptext15 2412  
                                                      __ptext32 23E6  
                                                      __ptext24 2568  
                                                      __ptext16 2438  
                                                      __ptext41 17D2  
                                                      __ptext33 0A44  
                                                      __ptext25 253C  
                                                      __ptext17 24EA  
                                                      __ptext50 24BA  
                                                      __ptext42 2514  
                                                      __ptext34 2548  
                                                      __ptext26 2572  
                                                      __ptext18 0E26  
                                                      __ptext51 1DE8  
                                                      __ptext43 25C4  
                                                      __ptext35 20D8  
                                                      __ptext27 1FFC  
                                                      __ptext19 1A6C  
                                                      __ptext52 22E8  
                                                      __ptext44 2586  
                                                      __ptext36 2494  
                                                      __ptext28 12CC  
                                                      __ptext45 2590  
                                                      __ptext37 257C  
                                                      __ptext29 1936  
                                                      __ptext46 259A  
                                                      __ptext38 24F8  
                                                      __ptext47 2522  
                                                      __ptext39 2506  
                                                      __ptext48 25CC  
                                                      __ptext49 25D4  
                                                  ??_releaseObj 0015  
                                              __size_of_stopADC 0008  
                                                      _maxFeedX 0610  
                                                      _maxFeedY 060F  
                                           __end_of_returnTherm 253C  
                                           __end_of_returnTouch 2548  
                                                      _tim0Init 24A8  
                                                      _tim1Init 24DC  
                                                      _tim2Init 247C  
                                                 __size_of_main 01AA  
                                            __end_of_pickObject 2412  
                                                  ??_resetTherm 0012  
                                                  ??_resetTouch 0012  
                                                     uartTx@ptr 0012  
                                                      _rotAngle 004E  
                                               isr@completeStep 0059  
                                                      int$flags 006D  
                                                      _startADC 2568  
                                                      _stepMade 2494  
                                                      _stepMot1 008C  
                                                      _stepMot2 0088  
                                                      _stepMot3 0084  
                                           __end_of_stepCounter 2554  
                                             rotateObj@rotAngle 00F0  
                                                ??i2_printError 0005  
                                            __end_of_releaseObj 23E6  
                                                      _writeTM0 2514  
                                                  ??_printError 0016  
                                                 _whatsTM0Limit 25C4  
                                               ??_resetPosition 0015  
                                            tim2Init@_pwmPeriod 0012  
                                                    _INTCONbits 000FF2  
                                                  ??_toggleStep 0001  
                                              ??_getNewSequence 0014  
                                            __end_of_resetTherm 2568  
                                            __end_of_resetTouch 257C  
                                                   _setThermRel 259A  
                                                  uartTx@length 0014  
                                                   _moveToPoint 0A44  
                                           __end_of_touchObject 1CCC  
                                                      intlevel2 25DC  
                                                  ??_touchTherm 0015  
                                                   _setTouchRel 2590  
                                                   ??_reduceSeq 0012  
                                                   ??_retPeriod 0003  
                                                    _RCSTA1bits 000FAB  
                                            __end_of_printError 1DE8  
                                                   ??_shiftData 0012  
                                                   ??_resetStep 0012  
                                            __end_of_toggleStep 2590  
                                             ?_resetNewSequence 0001  
                                                ?_whatsTM0Limit 0001  
                                                   ??_rotateObj 00ED  
                                            ??_resetNewSequence 0012  
                                            __end_of_touchTherm 1B9C  
                                                   ??_usartInit 0012  
                                                 ??i2_storeData 0008  
                                                   ??_storeData 0019  
                                                   _returnTherm 2530  
                                                   _returnTouch 253C  
                                                   _stepCounter 2548  
