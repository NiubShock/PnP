

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Apr 26 09:39:40 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    80                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    81  0000                     
    82                           ; Version 2.20
    83                           ; Generated 12/02/2020 GMT
    84                           ; 
    85                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F452 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     
   117                           	psect	idataCOMRAM
   118  0026F6                     __pidataCOMRAM:
   119                           	callstack 0
   120                           
   121                           ;initializer for _maxY
   122  0026F6  00FA               	dw	250
   123                           
   124                           ;initializer for _maxX
   125  0026F8  00FA               	dw	250
   126                           
   127                           ;initializer for storeData@mexLength
   128  0026FA  05                 	db	5
   129                           
   130                           	psect	idataBANK0
   131  002392                     __pidataBANK0:
   132                           	callstack 0
   133                           
   134                           ;initializer for rotateObj@rotSequence
   135  002392  09                 	db	9
   136  002393  03                 	db	3
   137  002394  06                 	db	6
   138  002395  0C                 	db	12
   139                           
   140                           ;initializer for _errString_Bound
   141  002396  45                 	db	69
   142  002397  72                 	db	114
   143  002398  72                 	db	114
   144  002399  6F                 	db	111
   145  00239A  72                 	db	114
   146  00239B  2C                 	db	44
   147  00239C  20                 	db	32
   148  00239D  70                 	db	112
   149  00239E  6F                 	db	111
   150  00239F  69                 	db	105
   151  0023A0  6E                 	db	110
   152  0023A1  74                 	db	116
   153  0023A2  20                 	db	32
   154  0023A3  6F                 	db	111
   155  0023A4  75                 	db	117
   156  0023A5  74                 	db	116
   157  0023A6  73                 	db	115
   158  0023A7  69                 	db	105
   159  0023A8  64                 	db	100
   160  0023A9  65                 	db	101
   161  0023AA  20                 	db	32
   162  0023AB  62                 	db	98
   163  0023AC  6F                 	db	111
   164  0023AD  75                 	db	117
   165  0023AE  6E                 	db	110
   166  0023AF  64                 	db	100
   167  0023B0  61                 	db	97
   168  0023B1  72                 	db	114
   169  0023B2  69                 	db	105
   170  0023B3  65                 	db	101
   171  0023B4  73                 	db	115
   172  0023B5  0A                 	db	10
   173  0023B6  00                 	db	0
   174                           
   175                           ;initializer for _errString_Feed
   176  0023B7  45                 	db	69
   177  0023B8  72                 	db	114
   178  0023B9  72                 	db	114
   179  0023BA  6F                 	db	111
   180  0023BB  72                 	db	114
   181  0023BC  2C                 	db	44
   182  0023BD  20                 	db	32
   183  0023BE  66                 	db	102
   184  0023BF  65                 	db	101
   185  0023C0  65                 	db	101
   186  0023C1  64                 	db	100
   187  0023C2  20                 	db	32
   188  0023C3  6C                 	db	108
   189  0023C4  69                 	db	105
   190  0023C5  6E                 	db	110
   191  0023C6  65                 	db	101
   192  0023C7  20                 	db	32
   193  0023C8  6E                 	db	110
   194  0023C9  6F                 	db	111
   195  0023CA  74                 	db	116
   196  0023CB  20                 	db	32
   197  0023CC  64                 	db	100
   198  0023CD  65                 	db	101
   199  0023CE  66                 	db	102
   200  0023CF  69                 	db	105
   201  0023D0  6E                 	db	110
   202  0023D1  65                 	db	101
   203  0023D2  64                 	db	100
   204  0023D3  0A                 	db	10
   205  0023D4  00                 	db	0
   206                           
   207                           ;initializer for _errString_Command
   208  0023D5  43                 	db	67
   209  0023D6  6F                 	db	111
   210  0023D7  6D                 	db	109
   211  0023D8  6D                 	db	109
   212  0023D9  61                 	db	97
   213  0023DA  6E                 	db	110
   214  0023DB  64                 	db	100
   215  0023DC  20                 	db	32
   216  0023DD  6E                 	db	110
   217  0023DE  6F                 	db	111
   218  0023DF  74                 	db	116
   219  0023E0  20                 	db	32
   220  0023E1  72                 	db	114
   221  0023E2  65                 	db	101
   222  0023E3  63                 	db	99
   223  0023E4  6F                 	db	111
   224  0023E5  67                 	db	103
   225  0023E6  6E                 	db	110
   226  0023E7  69                 	db	105
   227  0023E8  7A                 	db	122
   228  0023E9  65                 	db	101
   229  0023EA  64                 	db	100
   230  0023EB  0A                 	db	10
   231  0023EC  00                 	db	0
   232                           
   233                           	psect	idataBANK1
   234  001E80                     __pidataBANK1:
   235                           	callstack 0
   236                           
   237                           ;initializer for _errString_PointZ
   238  001E80  45                 	db	69
   239  001E81  72                 	db	114
   240  001E82  72                 	db	114
   241  001E83  6F                 	db	111
   242  001E84  72                 	db	114
   243  001E85  2C                 	db	44
   244  001E86  20                 	db	32
   245  001E87  74                 	db	116
   246  001E88  69                 	db	105
   247  001E89  6D                 	db	109
   248  001E8A  65                 	db	101
   249  001E8B  20                 	db	32
   250  001E8C  65                 	db	101
   251  001E8D  78                 	db	120
   252  001E8E  63                 	db	99
   253  001E8F  65                 	db	101
   254  001E90  65                 	db	101
   255  001E91  64                 	db	100
   256  001E92  65                 	db	101
   257  001E93  64                 	db	100
   258  001E94  20                 	db	32
   259  001E95  74                 	db	116
   260  001E96  6F                 	db	111
   261  001E97  20                 	db	32
   262  001E98  72                 	db	114
   263  001E99  65                 	db	101
   264  001E9A  61                 	db	97
   265  001E9B  63                 	db	99
   266  001E9C  68                 	db	104
   267  001E9D  20                 	db	32
   268  001E9E  74                 	db	116
   269  001E9F  68                 	db	104
   270  001EA0  65                 	db	101
   271  001EA1  20                 	db	32
   272  001EA2  65                 	db	101
   273  001EA3  6E                 	db	110
   274  001EA4  64                 	db	100
   275  001EA5  20                 	db	32
   276  001EA6  6F                 	db	111
   277  001EA7  66                 	db	102
   278  001EA8  20                 	db	32
   279  001EA9  74                 	db	116
   280  001EAA  68                 	db	104
   281  001EAB  65                 	db	101
   282  001EAC  20                 	db	32
   283  001EAD  5A                 	db	90
   284  001EAE  20                 	db	32
   285  001EAF  41                 	db	65
   286  001EB0  78                 	db	120
   287  001EB1  69                 	db	105
   288  001EB2  73                 	db	115
   289  001EB3  0A                 	db	10
   290  001EB4  00                 	db	0
   291                           
   292                           ;initializer for _errString_Point
   293  001EB5  45                 	db	69
   294  001EB6  72                 	db	114
   295  001EB7  72                 	db	114
   296  001EB8  6F                 	db	111
   297  001EB9  72                 	db	114
   298  001EBA  2C                 	db	44
   299  001EBB  20                 	db	32
   300  001EBC  74                 	db	116
   301  001EBD  69                 	db	105
   302  001EBE  6D                 	db	109
   303  001EBF  65                 	db	101
   304  001EC0  20                 	db	32
   305  001EC1  65                 	db	101
   306  001EC2  78                 	db	120
   307  001EC3  63                 	db	99
   308  001EC4  65                 	db	101
   309  001EC5  65                 	db	101
   310  001EC6  64                 	db	100
   311  001EC7  65                 	db	101
   312  001EC8  64                 	db	100
   313  001EC9  20                 	db	32
   314  001ECA  74                 	db	116
   315  001ECB  6F                 	db	111
   316  001ECC  20                 	db	32
   317  001ECD  72                 	db	114
   318  001ECE  65                 	db	101
   319  001ECF  61                 	db	97
   320  001ED0  63                 	db	99
   321  001ED1  68                 	db	104
   322  001ED2  20                 	db	32
   323  001ED3  74                 	db	116
   324  001ED4  68                 	db	104
   325  001ED5  65                 	db	101
   326  001ED6  20                 	db	32
   327  001ED7  70                 	db	112
   328  001ED8  6F                 	db	111
   329  001ED9  69                 	db	105
   330  001EDA  6E                 	db	110
   331  001EDB  74                 	db	116
   332  001EDC  0A                 	db	10
   333  001EDD  00                 	db	0
   334                           
   335                           ;initializer for _errString_ZEND
   336  001EDE  45                 	db	69
   337  001EDF  72                 	db	114
   338  001EE0  72                 	db	114
   339  001EE1  6F                 	db	111
   340  001EE2  72                 	db	114
   341  001EE3  2C                 	db	44
   342  001EE4  20                 	db	32
   343  001EE5  6E                 	db	110
   344  001EE6  6F                 	db	111
   345  001EE7  20                 	db	32
   346  001EE8  6F                 	db	111
   347  001EE9  62                 	db	98
   348  001EEA  6A                 	db	106
   349  001EEB  65                 	db	101
   350  001EEC  63                 	db	99
   351  001EED  74                 	db	116
   352  001EEE  20                 	db	32
   353  001EEF  72                 	db	114
   354  001EF0  65                 	db	101
   355  001EF1  6C                 	db	108
   356  001EF2  65                 	db	101
   357  001EF3  76                 	db	118
   358  001EF4  61                 	db	97
   359  001EF5  74                 	db	116
   360  001EF6  65                 	db	101
   361  001EF7  64                 	db	100
   362  001EF8  20                 	db	32
   363  001EF9  61                 	db	97
   364  001EFA  6C                 	db	108
   365  001EFB  6F                 	db	111
   366  001EFC  6E                 	db	110
   367  001EFD  67                 	db	103
   368  001EFE  20                 	db	32
   369  001EFF  5A                 	db	90
   370  001F00  20                 	db	32
   371  001F01  41                 	db	65
   372  001F02  78                 	db	120
   373  001F03  69                 	db	105
   374  001F04  73                 	db	115
   375  001F05  0A                 	db	10
   376  001F06  00                 	db	0
   377                           
   378                           ;initializer for _errString_Reset
   379  001F07  45                 	db	69
   380  001F08  72                 	db	114
   381  001F09  72                 	db	114
   382  001F0A  6F                 	db	111
   383  001F0B  72                 	db	114
   384  001F0C  2C                 	db	44
   385  001F0D  20                 	db	32
   386  001F0E  74                 	db	116
   387  001F0F  69                 	db	105
   388  001F10  6D                 	db	109
   389  001F11  65                 	db	101
   390  001F12  20                 	db	32
   391  001F13  65                 	db	101
   392  001F14  78                 	db	120
   393  001F15  63                 	db	99
   394  001F16  65                 	db	101
   395  001F17  65                 	db	101
   396  001F18  64                 	db	100
   397  001F19  65                 	db	101
   398  001F1A  64                 	db	100
   399  001F1B  20                 	db	32
   400  001F1C  74                 	db	116
   401  001F1D  6F                 	db	111
   402  001F1E  20                 	db	32
   403  001F1F  72                 	db	114
   404  001F20  65                 	db	101
   405  001F21  73                 	db	115
   406  001F22  65                 	db	101
   407  001F23  74                 	db	116
   408  001F24  20                 	db	32
   409  001F25  70                 	db	112
   410  001F26  6F                 	db	111
   411  001F27  73                 	db	115
   412  001F28  69                 	db	105
   413  001F29  74                 	db	116
   414  001F2A  69                 	db	105
   415  001F2B  6F                 	db	111
   416  001F2C  6E                 	db	110
   417  001F2D  0A                 	db	10
   418  001F2E  00                 	db	0
   419                           
   420                           ;initializer for _errString_Fatal
   421  001F2F  46                 	db	70
   422  001F30  61                 	db	97
   423  001F31  74                 	db	116
   424  001F32  61                 	db	97
   425  001F33  6C                 	db	108
   426  001F34  20                 	db	32
   427  001F35  45                 	db	69
   428  001F36  72                 	db	114
   429  001F37  72                 	db	114
   430  001F38  6F                 	db	111
   431  001F39  72                 	db	114
   432  001F3A  2C                 	db	44
   433  001F3B  20                 	db	32
   434  001F3C  70                 	db	112
   435  001F3D  6C                 	db	108
   436  001F3E  65                 	db	101
   437  001F3F  61                 	db	97
   438  001F40  73                 	db	115
   439  001F41  65                 	db	101
   440  001F42  20                 	db	32
   441  001F43  72                 	db	114
   442  001F44  65                 	db	101
   443  001F45  73                 	db	115
   444  001F46  65                 	db	101
   445  001F47  74                 	db	116
   446  001F48  20                 	db	32
   447  001F49  74                 	db	116
   448  001F4A  68                 	db	104
   449  001F4B  65                 	db	101
   450  001F4C  20                 	db	32
   451  001F4D  64                 	db	100
   452  001F4E  65                 	db	101
   453  001F4F  76                 	db	118
   454  001F50  69                 	db	105
   455  001F51  63                 	db	99
   456  001F52  65                 	db	101
   457  001F53  21                 	db	33
   458  001F54  0A                 	db	10
   459  001F55  00                 	db	0
   460                           
   461                           	psect	smallconst
   462  000600                     __psmallconst:
   463                           	callstack 0
   464  000600  00                 	db	0
   465  000601  FFAC               	dw	65452
   466  000603  3DB3               	dw	15795
   467  000605                     __end_ofrotateObj@stepAngle:
   468                           	callstack 0
   469  000605  0400               	dw	1024
   470  000607                     __end_of_therm_pressure:
   471                           	callstack 0
   472  000607  0200               	dw	512
   473  000609                     __end_of_touch_pressure:
   474                           	callstack 0
   475  000609                     _feeder3Pos:
   476                           	callstack 0
   477  000609  0F                 	db	15
   478  00060A  C8                 	db	200
   479  00060B                     __end_of_feeder3Pos:
   480                           	callstack 0
   481  00060B                     _feeder2Pos:
   482                           	callstack 0
   483  00060B  0F                 	db	15
   484  00060C  96                 	db	150
   485  00060D                     __end_of_feeder2Pos:
   486                           	callstack 0
   487  00060D                     _feeder1Pos:
   488                           	callstack 0
   489  00060D  0F                 	db	15
   490  00060E  32                 	db	50
   491  00060F                     __end_of_feeder1Pos:
   492                           	callstack 0
   493  00060F  FA                 	db	250
   494  000610                     __end_of_maxFeedY:
   495                           	callstack 0
   496  000610  19                 	db	25
   497  000611                     __end_of_maxFeedX:
   498                           	callstack 0
   499  0000                     _TMR0	set	4054
   500  0000                     _T1CONbits	set	4045
   501  0000                     _TXREG	set	4013
   502  0000                     _SPBRG	set	4015
   503  0000                     _TXSTAbits	set	4012
   504  0000                     _TRISCbits	set	3988
   505  0000                     _RCREG1	set	4014
   506  0000                     _ADRESH	set	4036
   507  0000                     _ADRESL	set	4035
   508  0000                     _PIR1bits	set	3998
   509  0000                     _RCONbits	set	4048
   510  0000                     _INTCONbits	set	4082
   511  0000                     _IPR1bits	set	3999
   512  0000                     _PIE1bits	set	3997
   513  0000                     _ADCON0bits	set	4034
   514  0000                     _RCSTAbits	set	4011
   515  0000                     _RCSTA1bits	set	4011
   516  0000                     _LATD	set	3980
   517  0000                     _PORTDbits	set	3971
   518  0000                     _TMR2	set	4044
   519  0000                     _PORTEbits	set	3972
   520  0000                     _T0CONbits	set	4053
   521  0000                     _T2CONbits	set	4042
   522  0000                     _LATDbits	set	3980
   523  0000                     _LATCbits	set	3979
   524  0000                     _LATBbits	set	3978
   525  0000                     _LATAbits	set	3977
   526  0000                     _TRISDbits	set	3989
   527  0000                     _TRISEbits	set	3990
   528  0000                     _TRISD	set	3989
   529  0000                     _TRISC	set	3988
   530  0000                     _TRISB	set	3987
   531  0000                     _TRISA	set	3986
   532  0000                     _ADCON1bits	set	4033
   533  000611  00                 	db	0	; dummy byte at the end
   534  0000                     
   535                           ; #config settings
   536                           
   537                           	psect	cinit
   538  0020DC                     __pcinit:
   539                           	callstack 0
   540  0020DC                     start_initialization:
   541                           	callstack 0
   542  0020DC                     __initialization:
   543                           	callstack 0
   544                           
   545                           ; Initialize objects allocated to BANK1 (214 bytes)
   546                           ; load TBLPTR registers with __pidataBANK1
   547  0020DC  0E80               	movlw	low __pidataBANK1
   548  0020DE  6EF6               	movwf	tblptrl,c
   549  0020E0  0E1E               	movlw	high __pidataBANK1
   550  0020E2  6EF7               	movwf	tblptrh,c
   551  0020E4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   552  0020E6  6EF8               	movwf	tblptru,c
   553  0020E8  EE01  F000         	lfsr	0,__pdataBANK1
   554  0020EC  EE10 F0D6          	lfsr	1,214
   555  0020F0                     copy_data0:
   556  0020F0  0009               	tblrd		*+
   557  0020F2  CFF5 FFEE          	movff	tablat,postinc0
   558  0020F6  50E5               	movf	postdec1,w,c
   559  0020F8  50E1               	movf	fsr1l,w,c
   560  0020FA  E1FA               	bnz	copy_data0
   561                           
   562                           ; Initialize objects allocated to BANK0 (91 bytes)
   563                           ; load TBLPTR registers with __pidataBANK0
   564  0020FC  0E92               	movlw	low __pidataBANK0
   565  0020FE  6EF6               	movwf	tblptrl,c
   566  002100  0E23               	movlw	high __pidataBANK0
   567  002102  6EF7               	movwf	tblptrh,c
   568  002104  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   569  002106  6EF8               	movwf	tblptru,c
   570  002108  EE00  F080         	lfsr	0,__pdataBANK0
   571  00210C  EE10 F05B          	lfsr	1,91
   572  002110                     copy_data1:
   573  002110  0009               	tblrd		*+
   574  002112  CFF5 FFEE          	movff	tablat,postinc0
   575  002116  50E5               	movf	postdec1,w,c
   576  002118  50E1               	movf	fsr1l,w,c
   577  00211A  E1FA               	bnz	copy_data1
   578                           
   579                           ; Initialize objects allocated to COMRAM (5 bytes)
   580                           ; load TBLPTR registers with __pidataCOMRAM
   581  00211C  0EF6               	movlw	low __pidataCOMRAM
   582  00211E  6EF6               	movwf	tblptrl,c
   583  002120  0E26               	movlw	high __pidataCOMRAM
   584  002122  6EF7               	movwf	tblptrh,c
   585  002124  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   586  002126  6EF8               	movwf	tblptru,c
   587  002128  EE00  F069         	lfsr	0,__pdataCOMRAM
   588  00212C  EE10 F005          	lfsr	1,5
   589  002130                     copy_data2:
   590  002130  0009               	tblrd		*+
   591  002132  CFF5 FFEE          	movff	tablat,postinc0
   592  002136  50E5               	movf	postdec1,w,c
   593  002138  50E1               	movf	fsr1l,w,c
   594  00213A  E1FA               	bnz	copy_data2
   595                           
   596                           ; Clear objects allocated to BANK0 (28 bytes)
   597  00213C  EE00  F0DB         	lfsr	0,__pbssBANK0
   598  002140  0E1C               	movlw	28
   599  002142                     clear_0:
   600  002142  6AEE               	clrf	postinc0,c
   601  002144  06E8               	decf	wreg,f,c
   602  002146  E1FD               	bnz	clear_0
   603                           
   604                           ; Clear objects allocated to COMRAM (36 bytes)
   605  002148  EE00  F045         	lfsr	0,__pbssCOMRAM
   606  00214C  0E24               	movlw	36
   607  00214E                     clear_1:
   608  00214E  6AEE               	clrf	postinc0,c
   609  002150  06E8               	decf	wreg,f,c
   610  002152  E1FD               	bnz	clear_1
   611  002154                     end_of_initialization:
   612                           	callstack 0
   613  002154                     __end_of__initialization:
   614                           	callstack 0
   615  002154  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   616  002156  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   617  002158  0E00               	movlw	low (__Lmediumconst shr (0+16))
   618  00215A  6EF8               	movwf	tblptru,c
   619  00215C  0100               	movlb	0
   620  00215E  EFF2  F009         	goto	_main	;jump to C main() function
   621                           
   622                           	psect	bssCOMRAM
   623  000045                     __pbssCOMRAM:
   624                           	callstack 0
   625  000045                     storeData@receivedMex:
   626                           	callstack 0
   627  000045                     	ds	9
   628  00004E                     _posVector:
   629                           	callstack 0
   630  00004E                     	ds	3
   631  000051                     _pwmPeriod:
   632                           	callstack 0
   633  000051                     	ds	2
   634  000053                     isr@single_cycle:
   635                           	callstack 0
   636  000053                     	ds	2
   637  000055                     _ADC_res:
   638                           	callstack 0
   639  000055                     	ds	2
   640  000057                     _newFeeder:
   641                           	callstack 0
   642  000057                     	ds	2
   643  000059                     _rotAngle:
   644                           	callstack 0
   645  000059                     	ds	2
   646  00005B                     _tm0Error:
   647                           	callstack 0
   648  00005B                     	ds	2
   649  00005D                     _stepToggle:
   650                           	callstack 0
   651  00005D                     	ds	1
   652  00005E                     _pwmStep:
   653                           	callstack 0
   654  00005E                     	ds	1
   655  00005F                     	ds	1
   656  000060                     storeData@counter:
   657                           	callstack 0
   658  000060                     	ds	1
   659  000061                     __newSequence:
   660                           	callstack 0
   661  000061                     	ds	1
   662  000062                     __fatalError:
   663                           	callstack 0
   664  000062                     	ds	1
   665  000063                     _dataCounter:
   666                           	callstack 0
   667  000063                     	ds	1
   668  000064                     isr@completeStep:
   669                           	callstack 0
   670  000064                     	ds	1
   671  000065                     isr@tm0Count:
   672                           	callstack 0
   673  000065                     	ds	1
   674  000066                     _therm_rel:
   675                           	callstack 0
   676  000066                     	ds	1
   677  000067                     _touch_rel:
   678                           	callstack 0
   679  000067                     	ds	1
   680  000068                     _tm0Limit:
   681                           	callstack 0
   682  000068                     	ds	1
   683                           
   684                           	psect	dataCOMRAM
   685  000069                     __pdataCOMRAM:
   686                           	callstack 0
   687  000069                     	ds	2
   688  00006B                     	ds	2
   689  00006D                     storeData@mexLength:
   690                           	callstack 0
   691  00006D                     	ds	1
   692                           
   693                           	psect	bssBANK0
   694  0000DB                     __pbssBANK0:
   695                           	callstack 0
   696  0000DB                     _dataSequence:
   697                           	callstack 0
   698  0000DB                     	ds	20
   699  0000EF                     _newSequenceData:
   700                           	callstack 0
   701  0000EF                     	ds	8
   702                           
   703                           	psect	dataBANK0
   704  000080                     __pdataBANK0:
   705                           	callstack 0
   706  000080                     rotateObj@rotSequence:
   707                           	callstack 0
   708  000080                     	ds	4
   709  000084                     _errString_Bound:
   710                           	callstack 0
   711  000084                     	ds	33
   712  0000A5                     _errString_Feed:
   713                           	callstack 0
   714  0000A5                     	ds	30
   715  0000C3                     _errString_Command:
   716                           	callstack 0
   717  0000C3                     	ds	24
   718                           
   719                           	psect	dataBANK1
   720  000100                     __pdataBANK1:
   721                           	callstack 0
   722  000100                     _errString_PointZ:
   723                           	callstack 0
   724  000100                     	ds	53
   725  000135                     _errString_Point:
   726                           	callstack 0
   727  000135                     	ds	41
   728  00015E                     _errString_ZEND:
   729                           	callstack 0
   730  00015E                     	ds	41
   731  000187                     _errString_Reset:
   732                           	callstack 0
   733  000187                     	ds	40
   734  0001AF                     _errString_Fatal:
   735                           	callstack 0
   736  0001AF                     	ds	39
   737                           
   738                           	psect	cstackBANK1
   739  0001D6                     __pcstackBANK1:
   740                           	callstack 0
   741  0001D6                     executeData@errCode:
   742                           	callstack 0
   743                           
   744                           ; 1 bytes @ 0x0
   745  0001D6                     	ds	1
   746  0001D7                     executeData@data:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0x1
   750  0001D7                     	ds	2
   751  0001D9                     ??_main:
   752                           
   753                           ; 1 bytes @ 0x3
   754  0001D9                     	ds	2
   755  0001DB                     main@errCode:
   756                           	callstack 0
   757                           
   758                           ; 1 bytes @ 0x5
   759  0001DB                     	ds	1
   760  0001DC                     main@newData:
   761                           	callstack 0
   762                           
   763                           ; 2 bytes @ 0x6
   764  0001DC                     	ds	2
   765                           
   766                           	psect	cstackBANK0
   767  0000F7                     __pcstackBANK0:
   768                           	callstack 0
   769  0000F7                     ??_rotateObj:
   770                           
   771                           ; 1 bytes @ 0x0
   772  0000F7                     	ds	3
   773  0000FA                     rotateObj@rotAngle:
   774                           	callstack 0
   775                           
   776                           ; 1 bytes @ 0x3
   777  0000FA                     	ds	1
   778  0000FB                     rotateObj@totStep:
   779                           	callstack 0
   780                           
   781                           ; 2 bytes @ 0x4
   782  0000FB                     	ds	2
   783  0000FD                     rotateObj@i:
   784                           	callstack 0
   785                           
   786                           ; 2 bytes @ 0x6
   787  0000FD                     	ds	2
   788                           
   789                           	psect	cstackCOMRAM
   790  000001                     __pcstackCOMRAM:
   791                           	callstack 0
   792  000001                     ?_retPeriod:
   793                           	callstack 0
   794  000001                     i2enableMotor@motor:
   795                           	callstack 0
   796  000001                     i2uartTx@ptr:
   797                           	callstack 0
   798                           
   799                           ; 2 bytes @ 0x0
   800  000001                     	ds	1
   801  000002                     ??i2_enableMotor:
   802                           
   803                           ; 1 bytes @ 0x1
   804  000002                     	ds	1
   805  000003                     i2uartTx@length:
   806                           	callstack 0
   807                           
   808                           ; 1 bytes @ 0x2
   809  000003                     	ds	1
   810  000004                     i2enableMotor@enable:
   811                           	callstack 0
   812  000004                     i2uartTx@i:
   813                           	callstack 0
   814                           
   815                           ; 1 bytes @ 0x3
   816  000004                     	ds	1
   817  000005                     ??i2_printError:
   818                           
   819                           ; 1 bytes @ 0x4
   820  000005                     	ds	2
   821  000007                     i2printError@errCode:
   822                           	callstack 0
   823                           
   824                           ; 1 bytes @ 0x6
   825  000007                     	ds	1
   826  000008                     ??i2_storeData:
   827                           
   828                           ; 1 bytes @ 0x7
   829  000008                     	ds	2
   830  00000A                     i2storeData@data:
   831                           	callstack 0
   832                           
   833                           ; 1 bytes @ 0x9
   834  00000A                     	ds	1
   835  00000B                     ??_isr:
   836                           
   837                           ; 1 bytes @ 0xA
   838  00000B                     	ds	6
   839  000011                     isr@temp:
   840                           	callstack 0
   841                           
   842                           ; 1 bytes @ 0x10
   843  000011                     	ds	1
   844  000012                     ??_shiftData:
   845  000012                     ?_stepMade:
   846                           	callstack 0
   847  000012                     ?_stepCounter:
   848                           	callstack 0
   849  000012                     ?_returnTouch:
   850                           	callstack 0
   851  000012                     ?_returnTherm:
   852                           	callstack 0
   853  000012                     ?_getNewSequence:
   854                           	callstack 0
   855  000012                     ?_getData:
   856                           	callstack 0
   857  000012                     ?___xxtofl:
   858                           	callstack 0
   859  000012                     setStep@motor:
   860                           	callstack 0
   861  000012                     enableMotor@motor:
   862                           	callstack 0
   863  000012                     setDirection@motor:
   864                           	callstack 0
   865  000012                     setDecay@motor:
   866                           	callstack 0
   867  000012                     uartTx@ptr:
   868                           	callstack 0
   869  000012                     tim2Init@_pwmPeriod:
   870                           	callstack 0
   871  000012                     ___xxtofl@val:
   872                           	callstack 0
   873                           
   874                           ; 4 bytes @ 0x11
   875  000012                     	ds	1
   876  000013                     ??_setStep:
   877  000013                     ??_enableMotor:
   878  000013                     ??_setDirection:
   879  000013                     ??_setDecay:
   880                           
   881                           ; 1 bytes @ 0x12
   882  000013                     	ds	1
   883  000014                     shiftData@i:
   884                           	callstack 0
   885  000014                     uartTx@length:
   886                           	callstack 0
   887  000014                     stepMade@temp:
   888                           	callstack 0
   889                           
   890                           ; 1 bytes @ 0x13
   891  000014                     	ds	1
   892  000015                     setStep@step:
   893                           	callstack 0
   894  000015                     enableMotor@enable:
   895                           	callstack 0
   896  000015                     setDirection@direction:
   897                           	callstack 0
   898  000015                     setDecay@decay:
   899                           	callstack 0
   900  000015                     uartTx@i:
   901                           	callstack 0
   902                           
   903                           ; 1 bytes @ 0x14
   904  000015                     	ds	1
   905  000016                     ??_printError:
   906  000016                     ??___xxtofl:
   907  000016                     resetPosition@keepMovingX:
   908                           	callstack 0
   909  000016                     moveToPoint@x1:
   910                           	callstack 0
   911                           
   912                           ; 2 bytes @ 0x15
   913  000016                     	ds	1
   914  000017                     resetPosition@keepMovingY:
   915                           	callstack 0
   916                           
   917                           ; 1 bytes @ 0x16
   918  000017                     	ds	1
   919  000018                     resetPosition@keepMovingZ:
   920                           	callstack 0
   921  000018                     printError@errCode:
   922                           	callstack 0
   923  000018                     moveToPoint@y1:
   924                           	callstack 0
   925                           
   926                           ; 2 bytes @ 0x17
   927  000018                     	ds	1
   928  000019                     ??_storeData:
   929                           
   930                           ; 1 bytes @ 0x18
   931  000019                     	ds	1
   932  00001A                     ___xxtofl@sign:
   933                           	callstack 0
   934  00001A                     moveToPoint@x2:
   935                           	callstack 0
   936                           
   937                           ; 2 bytes @ 0x19
   938  00001A                     	ds	1
   939  00001B                     storeData@data:
   940                           	callstack 0
   941  00001B                     ___xxtofl@exp:
   942                           	callstack 0
   943                           
   944                           ; 1 bytes @ 0x1A
   945  00001B                     	ds	1
   946  00001C                     moveToPoint@y2:
   947                           	callstack 0
   948  00001C                     ___xxtofl@arg:
   949                           	callstack 0
   950                           
   951                           ; 4 bytes @ 0x1B
   952  00001C                     	ds	2
   953  00001E                     ??_moveToPoint:
   954                           
   955                           ; 1 bytes @ 0x1D
   956  00001E                     	ds	2
   957  000020                     ?___fldiv:
   958                           	callstack 0
   959  000020                     moveToPoint@keepMovingY:
   960                           	callstack 0
   961  000020                     ___fldiv@b:
   962                           	callstack 0
   963                           
   964                           ; 4 bytes @ 0x1F
   965  000020                     	ds	1
   966  000021                     moveToPoint@MOT1Direction:
   967                           	callstack 0
   968                           
   969                           ; 1 bytes @ 0x20
   970  000021                     	ds	1
   971  000022                     moveToPoint@MOT2Direction:
   972                           	callstack 0
   973                           
   974                           ; 1 bytes @ 0x21
   975  000022                     	ds	1
   976  000023                     moveToPoint@keepMovingX:
   977                           	callstack 0
   978                           
   979                           ; 1 bytes @ 0x22
   980  000023                     	ds	1
   981  000024                     ___fldiv@a:
   982                           	callstack 0
   983                           
   984                           ; 4 bytes @ 0x23
   985  000024                     	ds	4
   986  000028                     ??___fldiv:
   987                           
   988                           ; 1 bytes @ 0x27
   989  000028                     	ds	4
   990  00002C                     ___fldiv@rem:
   991                           	callstack 0
   992                           
   993                           ; 4 bytes @ 0x2B
   994  00002C                     	ds	4
   995  000030                     ___fldiv@sign:
   996                           	callstack 0
   997                           
   998                           ; 1 bytes @ 0x2F
   999  000030                     	ds	1
  1000  000031                     ___fldiv@new_exp:
  1001                           	callstack 0
  1002                           
  1003                           ; 2 bytes @ 0x30
  1004  000031                     	ds	2
  1005  000033                     ___fldiv@grs:
  1006                           	callstack 0
  1007                           
  1008                           ; 4 bytes @ 0x32
  1009  000033                     	ds	4
  1010  000037                     ___fldiv@bexp:
  1011                           	callstack 0
  1012                           
  1013                           ; 1 bytes @ 0x36
  1014  000037                     	ds	1
  1015  000038                     ___fldiv@aexp:
  1016                           	callstack 0
  1017                           
  1018                           ; 1 bytes @ 0x37
  1019  000038                     	ds	1
  1020  000039                     ?___fltol:
  1021                           	callstack 0
  1022  000039                     ___fltol@f1:
  1023                           	callstack 0
  1024                           
  1025                           ; 4 bytes @ 0x38
  1026  000039                     	ds	4
  1027  00003D                     ??___fltol:
  1028                           
  1029                           ; 1 bytes @ 0x3C
  1030  00003D                     	ds	4
  1031  000041                     ___fltol@sign1:
  1032                           	callstack 0
  1033                           
  1034                           ; 1 bytes @ 0x40
  1035  000041                     	ds	1
  1036  000042                     ___fltol@exp1:
  1037                           	callstack 0
  1038                           
  1039                           ; 1 bytes @ 0x41
  1040  000042                     	ds	1
  1041  000043                     ??_executeData:
  1042                           
  1043                           ; 1 bytes @ 0x42
  1044  000043                     	ds	2
  1045                           
  1046 ;;
  1047 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1048 ;;
  1049 ;; *************** function _main *****************
  1050 ;; Defined at:
  1051 ;;		line 19 in file "main.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;		None
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  newData         2    6[BANK1 ] PTR struct .
  1056 ;;		 -> newSequenceData(8), 
  1057 ;;  errCode         1    5[BANK1 ] unsigned char 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      void 
  1060 ;; Registers used:
  1061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1067 ;;      Params:         0       0       0       0       0       0       0
  1068 ;;      Locals:         0       0       3       0       0       0       0
  1069 ;;      Temps:          0       0       2       0       0       0       0
  1070 ;;      Totals:         0       0       5       0       0       0       0
  1071 ;;Total ram usage:        5 bytes
  1072 ;; Hardware stack levels required when called:    7
  1073 ;; This function calls:
  1074 ;;		_clearTM0
  1075 ;;		_executeData
  1076 ;;		_getNewSequence
  1077 ;;		_initADC
  1078 ;;		_initPinMotors
  1079 ;;		_interruptInit
  1080 ;;		_newSequence
  1081 ;;		_printError
  1082 ;;		_readSeq
  1083 ;;		_reduceSeq
  1084 ;;		_resetNewSequence
  1085 ;;		_resetPosition
  1086 ;;		_shiftData
  1087 ;;		_storeData
  1088 ;;		_tim0Init
  1089 ;;		_tim1Init
  1090 ;;		_tim2Init
  1091 ;;		_usartInit
  1092 ;; This function is called by:
  1093 ;;		Startup code after reset
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text0
  1098  0013E4                     __ptext0:
  1099                           	callstack 0
  1100  0013E4                     _main:
  1101                           	callstack 24
  1102  0013E4  FFFF               	dw	65535	; assembler added errata NOP
  1103                           
  1104                           ;main.c: 23:     interruptInit();
  1105  0013E6  EC45  F012         	call	_interruptInit	;wreg free
  1106  0013EA                     
  1107                           ;main.c: 24:     initPinMotors();
  1108  0013EA  ECA7  F012         	call	_initPinMotors	;wreg free
  1109  0013EE                     
  1110                           ;main.c: 25:     initADC();
  1111  0013EE  ECBA  F012         	call	_initADC	;wreg free
  1112  0013F2                     
  1113                           ;main.c: 26:     usartInit();
  1114  0013F2  ECCD  F012         	call	_usartInit	;wreg free
  1115  0013F6                     
  1116                           ;main.c: 27:     tim0Init();
  1117  0013F6  ECF2  F012         	call	_tim0Init	;wreg free
  1118  0013FA                     
  1119                           ;main.c: 28:     tim1Init();
  1120  0013FA  ECFB  F012         	call	_tim1Init	;wreg free
  1121  0013FE                     
  1122                           ;main.c: 29:     tim2Init(10);
  1123  0013FE  0E00               	movlw	0
  1124  001400  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1125  001402  0E0A               	movlw	10
  1126  001404  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1127  001406  ECDC  F012         	call	_tim2Init	;wreg free
  1128                           
  1129                           ;main.c: 32:     errCode = resetPosition();
  1130  00140A  ECF8  F008         	call	_resetPosition	;wreg free
  1131  00140E  0101               	movlb	1	; () banked
  1132  001410  6FDB               	movwf	main@errCode& (0+255),b
  1133  001412                     
  1134                           ; BSR set to: 1
  1135                           ;main.c: 33:     if(errCode != 0){
  1136  001412  51DB               	movf	main@errCode& (0+255),w,b
  1137  001414  B4D8               	btfsc	status,2,c
  1138  001416  EF0F  F00A         	goto	u3791
  1139  00141A  EF12  F00A         	goto	u3790
  1140  00141E                     u3791:
  1141  00141E  FFFF               	dw	65535	; assembler added errata NOP
  1142  001420  EF19  F00A         	goto	l324
  1143  001424                     u3790:
  1144  001424  FFFF               	dw	65535	; assembler added errata NOP
  1145  001426                     
  1146                           ; BSR set to: 1
  1147                           ;main.c: 34:         printError(errCode);
  1148  001426  51DB               	movf	main@errCode& (0+255),w,b
  1149  001428  ECC4  F00C         	call	_printError
  1150  00142C                     l325:
  1151  00142C  FFFF               	dw	65535	; assembler added errata NOP
  1152  00142E  EF16  F00A         	goto	l325
  1153  001432                     l324:
  1154  001432  FFFF               	dw	65535	; assembler added errata NOP
  1155                           
  1156                           ; BSR set to: 1
  1157                           ;main.c: 39:     RCSTA1bits.CREN = 1;
  1158  001434  88AB               	bsf	171,4,c	;volatile
  1159  001436                     l4381:
  1160  001436  FFFF               	dw	65535	; assembler added errata NOP
  1161                           
  1162                           ;main.c: 42:         if(newSequence()){
  1163  001438  EC67  F013         	call	_newSequence	;wreg free
  1164  00143C  0900               	iorlw	0
  1165  00143E  B4D8               	btfsc	status,2,c
  1166  001440  EF24  F00A         	goto	u3801
  1167  001444  EF27  F00A         	goto	u3800
  1168  001448                     u3801:
  1169  001448  FFFF               	dw	65535	; assembler added errata NOP
  1170  00144A  EFA9  F00A         	goto	l4409
  1171  00144E                     u3800:
  1172  00144E  FFFF               	dw	65535	; assembler added errata NOP
  1173  001450                     
  1174                           ;main.c: 43:             t_newSequence* newData = getNewSequence();
  1175  001450  EC02  F013         	call	_getNewSequence	;wreg free
  1176  001454  C012  F1DC         	movff	?_getNewSequence,main@newData
  1177  001458  C013  F1DD         	movff	?_getNewSequence+1,main@newData+1
  1178  00145C                     
  1179                           ;main.c: 45:             newFeeder[0] = newData ->init_posX;
  1180  00145C  0101               	movlb	1	; () banked
  1181  00145E  EE20 F002          	lfsr	2,2
  1182  001462  51DC               	movf	main@newData& (0+255),w,b
  1183  001464  26D9               	addwf	fsr2l,f,c
  1184  001466  51DD               	movf	(main@newData+1)& (0+255),w,b
  1185  001468  22DA               	addwfc	fsr2h,f,c
  1186  00146A  50DF               	movf	indf2,w,c
  1187  00146C  6E57               	movwf	_newFeeder^0,c
  1188  00146E                     
  1189                           ; BSR set to: 1
  1190                           ;main.c: 46:             newFeeder[1] = newData ->init_posY;
  1191  00146E  EE20 F003          	lfsr	2,3
  1192  001472  51DC               	movf	main@newData& (0+255),w,b
  1193  001474  26D9               	addwf	fsr2l,f,c
  1194  001476  51DD               	movf	(main@newData+1)& (0+255),w,b
  1195  001478  22DA               	addwfc	fsr2h,f,c
  1196  00147A  50DF               	movf	indf2,w,c
  1197  00147C  6E58               	movwf	(_newFeeder+1)^0,c
  1198  00147E                     
  1199                           ; BSR set to: 1
  1200                           ;main.c: 50:             RCSTAbits.CREN = 0;
  1201  00147E  98AB               	bcf	171,4,c	;volatile
  1202  001480                     
  1203                           ; BSR set to: 1
  1204                           ;main.c: 53:             if(newData ->end_posX > maxFeedX || newData ->end_posY > maxFee
      +                          dY){
  1205  001480  EE20 F005          	lfsr	2,5
  1206  001484  51DC               	movf	main@newData& (0+255),w,b
  1207  001486  26D9               	addwf	fsr2l,f,c
  1208  001488  51DD               	movf	(main@newData+1)& (0+255),w,b
  1209  00148A  22DA               	addwfc	fsr2h,f,c
  1210  00148C  0E1A               	movlw	26
  1211  00148E  60DF               	cpfslt	indf2,c
  1212  001490  EF4C  F00A         	goto	u3811
  1213  001494  EF4F  F00A         	goto	u3810
  1214  001498                     u3811:
  1215  001498  FFFF               	dw	65535	; assembler added errata NOP
  1216  00149A  EF5F  F00A         	goto	l4395
  1217  00149E                     u3810:
  1218  00149E  FFFF               	dw	65535	; assembler added errata NOP
  1219  0014A0                     
  1220                           ; BSR set to: 1
  1221  0014A0  EE20 F006          	lfsr	2,6
  1222  0014A4  51DC               	movf	main@newData& (0+255),w,b
  1223  0014A6  26D9               	addwf	fsr2l,f,c
  1224  0014A8  51DD               	movf	(main@newData+1)& (0+255),w,b
  1225  0014AA  22DA               	addwfc	fsr2h,f,c
  1226  0014AC  0EFA               	movlw	250
  1227  0014AE  64DF               	cpfsgt	indf2,c
  1228  0014B0  EF5C  F00A         	goto	u3821
  1229  0014B4  EF5F  F00A         	goto	u3820
  1230  0014B8                     u3821:
  1231  0014B8  FFFF               	dw	65535	; assembler added errata NOP
  1232  0014BA  EF64  F00A         	goto	l4397
  1233  0014BE                     u3820:
  1234  0014BE                     l4395:
  1235  0014BE  FFFF               	dw	65535	; assembler added errata NOP
  1236                           
  1237                           ; BSR set to: 1
  1238                           ;main.c: 54:                 errCode = 5;
  1239  0014C0  0E05               	movlw	5
  1240  0014C2  6FDB               	movwf	main@errCode& (0+255),b
  1241                           
  1242                           ;main.c: 55:             }else{
  1243  0014C4  EF78  F00A         	goto	l4399
  1244  0014C8                     l4397:
  1245  0014C8  FFFF               	dw	65535	; assembler added errata NOP
  1246                           
  1247                           ; BSR set to: 1
  1248                           ;main.c: 56:                 storeData(newData ->end_posX);
  1249  0014CA  EE20 F005          	lfsr	2,5
  1250  0014CE  51DC               	movf	main@newData& (0+255),w,b
  1251  0014D0  26D9               	addwf	fsr2l,f,c
  1252  0014D2  51DD               	movf	(main@newData+1)& (0+255),w,b
  1253  0014D4  22DA               	addwfc	fsr2h,f,c
  1254  0014D6  50DF               	movf	indf2,w,c
  1255  0014D8  ECC7  F00A         	call	_storeData
  1256                           
  1257                           ;main.c: 57:                 storeData(newData ->end_posY);
  1258  0014DC  0101               	movlb	1	; () banked
  1259  0014DE  EE20 F006          	lfsr	2,6
  1260  0014E2  51DC               	movf	main@newData& (0+255),w,b
  1261  0014E4  26D9               	addwf	fsr2l,f,c
  1262  0014E6  51DD               	movf	(main@newData+1)& (0+255),w,b
  1263  0014E8  22DA               	addwfc	fsr2h,f,c
  1264  0014EA  50DF               	movf	indf2,w,c
  1265  0014EC  ECC7  F00A         	call	_storeData
  1266  0014F0                     l4399:
  1267  0014F0  FFFF               	dw	65535	; assembler added errata NOP
  1268                           
  1269                           ;main.c: 61:             if(errCode == 0){
  1270  0014F2  0101               	movlb	1	; () banked
  1271  0014F4  51DB               	movf	main@errCode& (0+255),w,b
  1272  0014F6  A4D8               	btfss	status,2,c
  1273  0014F8  EF80  F00A         	goto	u3831
  1274  0014FC  EF83  F00A         	goto	u3830
  1275  001500                     u3831:
  1276  001500  FFFF               	dw	65535	; assembler added errata NOP
  1277  001502  EFA1  F00A         	goto	l4403
  1278  001506                     u3830:
  1279  001506  FFFF               	dw	65535	; assembler added errata NOP
  1280  001508                     
  1281                           ; BSR set to: 1
  1282                           ;main.c: 63:                 storeData(0);
  1283  001508  0E00               	movlw	0
  1284  00150A  ECC7  F00A         	call	_storeData
  1285                           
  1286                           ;main.c: 64:                 storeData(0xFF);
  1287  00150E  0EFF               	movlw	255
  1288  001510  ECC7  F00A         	call	_storeData
  1289                           
  1290                           ;main.c: 65:                 storeData(newData ->end_rot - newData ->init_rot);
  1291  001514  0101               	movlb	1	; () banked
  1292  001516  EE20 F004          	lfsr	2,4
  1293  00151A  51DC               	movf	main@newData& (0+255),w,b
  1294  00151C  26D9               	addwf	fsr2l,f,c
  1295  00151E  51DD               	movf	(main@newData+1)& (0+255),w,b
  1296  001520  22DA               	addwfc	fsr2h,f,c
  1297  001522  50DF               	movf	indf2,w,c
  1298  001524  6FD9               	movwf	??_main& (0+255),b
  1299  001526  EE20 F007          	lfsr	2,7
  1300  00152A  51DC               	movf	main@newData& (0+255),w,b
  1301  00152C  26D9               	addwf	fsr2l,f,c
  1302  00152E  51DD               	movf	(main@newData+1)& (0+255),w,b
  1303  001530  22DA               	addwfc	fsr2h,f,c
  1304  001532  50DF               	movf	indf2,w,c
  1305  001534  6FDA               	movwf	(??_main+1)& (0+255),b
  1306  001536  51D9               	movf	??_main& (0+255),w,b
  1307  001538  5DDA               	subwf	(??_main+1)& (0+255),w,b
  1308  00153A  ECC7  F00A         	call	_storeData
  1309                           
  1310                           ;main.c: 66:             }else{
  1311  00153E  EFA5  F00A         	goto	l4405
  1312  001542                     l4403:
  1313  001542  FFFF               	dw	65535	; assembler added errata NOP
  1314                           
  1315                           ; BSR set to: 1
  1316                           ;main.c: 67:                 printError(errCode);
  1317  001544  51DB               	movf	main@errCode& (0+255),w,b
  1318  001546  ECC4  F00C         	call	_printError
  1319  00154A                     l4405:
  1320  00154A  FFFF               	dw	65535	; assembler added errata NOP
  1321                           
  1322                           ;main.c: 71:             RCSTAbits.CREN = 1;
  1323  00154C  88AB               	bsf	171,4,c	;volatile
  1324  00154E                     
  1325                           ;main.c: 74:             resetNewSequence();
  1326  00154E  EC37  F013         	call	_resetNewSequence	;wreg free
  1327  001552                     l4409:
  1328  001552  FFFF               	dw	65535	; assembler added errata NOP
  1329                           
  1330                           ;main.c: 76:         if(readSeq()){
  1331  001554  EC63  F013         	call	_readSeq	;wreg free
  1332  001558  0900               	iorlw	0
  1333  00155A  B4D8               	btfsc	status,2,c
  1334  00155C  EFB2  F00A         	goto	u3841
  1335  001560  EFB5  F00A         	goto	u3840
  1336  001564                     u3841:
  1337  001564  FFFF               	dw	65535	; assembler added errata NOP
  1338  001566  EF1B  F00A         	goto	l4381
  1339  00156A                     u3840:
  1340  00156A  FFFF               	dw	65535	; assembler added errata NOP
  1341  00156C                     
  1342                           ;main.c: 80:             errCode = executeData();
  1343  00156C  ECB5  F006         	call	_executeData	;wreg free
  1344  001570  0101               	movlb	1	; () banked
  1345  001572  6FDB               	movwf	main@errCode& (0+255),b
  1346  001574                     
  1347                           ; BSR set to: 1
  1348                           ;main.c: 82:             printError(errCode);
  1349  001574  51DB               	movf	main@errCode& (0+255),w,b
  1350  001576  ECC4  F00C         	call	_printError
  1351  00157A                     
  1352                           ;main.c: 85:             clearTM0();
  1353  00157A  EC10  F013         	call	_clearTM0	;wreg free
  1354  00157E                     
  1355                           ;main.c: 89:             reduceSeq();
  1356  00157E  EC5F  F013         	call	_reduceSeq	;wreg free
  1357  001582                     
  1358                           ;main.c: 90:             shiftData();
  1359  001582  EC99  F011         	call	_shiftData	;wreg free
  1360  001586  EF1B  F00A         	goto	l4381
  1361  00158A  EFCE  F000         	goto	start
  1362  00158E                     __end_of_main:
  1363                           	callstack 0
  1364                           
  1365 ;; *************** function _usartInit *****************
  1366 ;; Defined at:
  1367 ;;		line 92 in file "usart.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;		None
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;		None
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1381 ;;      Params:         0       0       0       0       0       0       0
  1382 ;;      Locals:         0       0       0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0
  1384 ;;      Totals:         0       0       0       0       0       0       0
  1385 ;;Total ram usage:        0 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    4
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text1
  1396  00259A                     __ptext1:
  1397                           	callstack 0
  1398  00259A                     _usartInit:
  1399                           	callstack 0
  1400  00259A  FFFF               	dw	65535	; assembler added errata NOP
  1401  00259C                     
  1402                           ;usart.c: 94:     TRISCbits.TRISC6 = 0;
  1403  00259C  9C94               	bcf	148,6,c	;volatile
  1404                           
  1405                           ;usart.c: 95:     TRISCbits.TRISC7 = 1;
  1406  00259E  8E94               	bsf	148,7,c	;volatile
  1407                           
  1408                           ;usart.c: 97:     TXSTAbits.TX9 = 0;
  1409  0025A0  9CAC               	bcf	172,6,c	;volatile
  1410                           
  1411                           ;usart.c: 98:     TXSTAbits.TXEN = 1;
  1412  0025A2  8AAC               	bsf	172,5,c	;volatile
  1413                           
  1414                           ;usart.c: 99:     TXSTAbits.SYNC = 0;
  1415  0025A4  98AC               	bcf	172,4,c	;volatile
  1416                           
  1417                           ;usart.c: 100:     TXSTAbits.BRGH = 0;
  1418  0025A6  94AC               	bcf	172,2,c	;volatile
  1419                           
  1420                           ;usart.c: 102:     RCSTAbits.SPEN = 1;
  1421  0025A8  8EAB               	bsf	171,7,c	;volatile
  1422                           
  1423                           ;usart.c: 103:     RCSTAbits.RX9 = 0;
  1424  0025AA  9CAB               	bcf	171,6,c	;volatile
  1425                           
  1426                           ;usart.c: 104:     RCSTAbits.CREN = 0;
  1427  0025AC  98AB               	bcf	171,4,c	;volatile
  1428                           
  1429                           ;usart.c: 105:     RCSTAbits.ADDEN = 0;
  1430  0025AE  96AB               	bcf	171,3,c	;volatile
  1431  0025B0                     
  1432                           ;usart.c: 108:     SPBRG = 25;
  1433  0025B0  0E19               	movlw	25
  1434  0025B2  6EAF               	movwf	175,c	;volatile
  1435  0025B4  0012               	return		;funcret
  1436  0025B6  FFFF               	dw	65535	; errata NOP
  1437  0025B8                     __end_of_usartInit:
  1438                           	callstack 0
  1439                           
  1440 ;; *************** function _tim2Init *****************
  1441 ;; Defined at:
  1442 ;;		line 46 in file "timer.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1456 ;;      Params:         2       0       0       0       0       0       0
  1457 ;;      Locals:         0       0       0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0
  1459 ;;      Totals:         2       0       0       0       0       0       0
  1460 ;;Total ram usage:        2 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    4
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text2
  1471  0025B8                     __ptext2:
  1472                           	callstack 0
  1473  0025B8                     _tim2Init:
  1474                           	callstack 0
  1475  0025B8  FFFF               	dw	65535	; assembler added errata NOP
  1476  0025BA                     
  1477                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1478  0025BA  94CA               	bcf	202,2,c	;volatile
  1479  0025BC                     
  1480                           ;timer.c: 48:     T2CONbits.T2CKPS = 0x01;
  1481  0025BC  50CA               	movf	202,w,c	;volatile
  1482  0025BE  0BFC               	andlw	-4
  1483  0025C0  0901               	iorlw	1
  1484  0025C2  6ECA               	movwf	202,c	;volatile
  1485  0025C4                     
  1486                           ;timer.c: 51:     pwmPeriod = _pwmPeriod;
  1487  0025C4  C012  F051         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1488  0025C8  C013  F052         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1489  0025CC  0012               	return		;funcret
  1490  0025CE  FFFF               	dw	65535	; errata NOP
  1491  0025D0                     __end_of_tim2Init:
  1492                           	callstack 0
  1493                           
  1494 ;; *************** function _tim1Init *****************
  1495 ;; Defined at:
  1496 ;;		line 33 in file "timer.c"
  1497 ;; Parameters:    Size  Location     Type
  1498 ;;		None
  1499 ;; Auto vars:     Size  Location     Type
  1500 ;;		None
  1501 ;; Return value:  Size  Location     Type
  1502 ;;                  1    wreg      void 
  1503 ;; Registers used:
  1504 ;;		wreg, status,2
  1505 ;; Tracked objects:
  1506 ;;		On entry : 0/0
  1507 ;;		On exit  : 0/0
  1508 ;;		Unchanged: 0/0
  1509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1510 ;;      Params:         0       0       0       0       0       0       0
  1511 ;;      Locals:         0       0       0       0       0       0       0
  1512 ;;      Temps:          0       0       0       0       0       0       0
  1513 ;;      Totals:         0       0       0       0       0       0       0
  1514 ;;Total ram usage:        0 bytes
  1515 ;; Hardware stack levels used:    1
  1516 ;; Hardware stack levels required when called:    4
  1517 ;; This function calls:
  1518 ;;		Nothing
  1519 ;; This function is called by:
  1520 ;;		_main
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text3
  1525  0025F6                     __ptext3:
  1526                           	callstack 0
  1527  0025F6                     _tim1Init:
  1528                           	callstack 0
  1529  0025F6  FFFF               	dw	65535	; assembler added errata NOP
  1530  0025F8                     
  1531                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1532  0025F8  0E30               	movlw	48
  1533  0025FA  12CD               	iorwf	205,f,c	;volatile
  1534  0025FC                     
  1535                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1536  0025FC  92CD               	bcf	205,1,c	;volatile
  1537  0025FE                     
  1538                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1539  0025FE  80CD               	bsf	205,0,c	;volatile
  1540  002600  0012               	return		;funcret
  1541  002602  FFFF               	dw	65535	; errata NOP
  1542  002604                     __end_of_tim1Init:
  1543                           	callstack 0
  1544                           
  1545 ;; *************** function _tim0Init *****************
  1546 ;; Defined at:
  1547 ;;		line 21 in file "timer.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;		None
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;		None
  1552 ;; Return value:  Size  Location     Type
  1553 ;;                  1    wreg      void 
  1554 ;; Registers used:
  1555 ;;		wreg, status,2
  1556 ;; Tracked objects:
  1557 ;;		On entry : 0/0
  1558 ;;		On exit  : 0/0
  1559 ;;		Unchanged: 0/0
  1560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1561 ;;      Params:         0       0       0       0       0       0       0
  1562 ;;      Locals:         0       0       0       0       0       0       0
  1563 ;;      Temps:          0       0       0       0       0       0       0
  1564 ;;      Totals:         0       0       0       0       0       0       0
  1565 ;;Total ram usage:        0 bytes
  1566 ;; Hardware stack levels used:    1
  1567 ;; Hardware stack levels required when called:    4
  1568 ;; This function calls:
  1569 ;;		Nothing
  1570 ;; This function is called by:
  1571 ;;		_main
  1572 ;; This function uses a non-reentrant model
  1573 ;;
  1574                           
  1575                           	psect	text4
  1576  0025E4                     __ptext4:
  1577                           	callstack 0
  1578  0025E4                     _tim0Init:
  1579                           	callstack 0
  1580  0025E4  FFFF               	dw	65535	; assembler added errata NOP
  1581  0025E6                     
  1582                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1583  0025E6  9ED5               	bcf	213,7,c	;volatile
  1584                           
  1585                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1586  0025E8  9CD5               	bcf	213,6,c	;volatile
  1587                           
  1588                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1589  0025EA  9AD5               	bcf	213,5,c	;volatile
  1590                           
  1591                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1592  0025EC  86D5               	bsf	213,3,c	;volatile
  1593  0025EE                     
  1594                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1595  0025EE  0E07               	movlw	7
  1596  0025F0  12D5               	iorwf	213,f,c	;volatile
  1597  0025F2  0012               	return		;funcret
  1598  0025F4  FFFF               	dw	65535	; errata NOP
  1599  0025F6                     __end_of_tim0Init:
  1600                           	callstack 0
  1601                           
  1602 ;; *************** function _storeData *****************
  1603 ;; Defined at:
  1604 ;;		line 164 in file "usart.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;  data            1    wreg     unsigned char 
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;  data            1   26[COMRAM] unsigned char 
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  1    wreg      void 
  1611 ;; Registers used:
  1612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1618 ;;      Params:         0       0       0       0       0       0       0
  1619 ;;      Locals:         1       0       0       0       0       0       0
  1620 ;;      Temps:          2       0       0       0       0       0       0
  1621 ;;      Totals:         3       0       0       0       0       0       0
  1622 ;;Total ram usage:        3 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; Hardware stack levels required when called:    6
  1625 ;; This function calls:
  1626 ;;		_printError
  1627 ;; This function is called by:
  1628 ;;		_main
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           	psect	text5
  1633  00158E                     __ptext5:
  1634                           	callstack 0
  1635  00158E                     _storeData:
  1636                           	callstack 0
  1637  00158E  FFFF               	dw	65535	; assembler added errata NOP
  1638                           
  1639                           ;incstack = 0
  1640                           ;storeData@data stored from wreg
  1641  001590  6E1B               	movwf	storeData@data^0,c
  1642  001592                     
  1643                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  1644  001592  0E45               	movlw	low storeData@receivedMex
  1645  001594  2460               	addwf	storeData@counter^0,w,c
  1646  001596  6ED9               	movwf	fsr2l,c
  1647  001598  6ADA               	clrf	fsr2h,c
  1648  00159A  0E00               	movlw	high storeData@receivedMex
  1649  00159C  22DA               	addwfc	fsr2h,f,c
  1650  00159E  C01B  FFDF         	movff	storeData@data,indf2
  1651  0015A2                     
  1652                           ;usart.c: 175:     counter++;
  1653  0015A2  2A60               	incf	storeData@counter^0,f,c
  1654                           
  1655                           ;usart.c: 178:     switch(receivedMex[0]){
  1656  0015A4  EFE3  F00A         	goto	l4249
  1657  0015A8                     l4241:
  1658  0015A8  FFFF               	dw	65535	; assembler added errata NOP
  1659                           
  1660                           ;usart.c: 180:             mexLength = 5;
  1661  0015AA  0E05               	movlw	5
  1662  0015AC  6E6D               	movwf	storeData@mexLength^0,c
  1663                           
  1664                           ;usart.c: 181:             break;
  1665  0015AE  EFFE  F00A         	goto	l4251
  1666  0015B2                     l4243:
  1667  0015B2  FFFF               	dw	65535	; assembler added errata NOP
  1668                           
  1669                           ;usart.c: 183:             mexLength = 9;
  1670  0015B4  0E09               	movlw	9
  1671  0015B6  6E6D               	movwf	storeData@mexLength^0,c
  1672                           
  1673                           ;usart.c: 184:             break;
  1674  0015B8  EFFE  F00A         	goto	l4251
  1675  0015BC                     l4245:
  1676  0015BC  FFFF               	dw	65535	; assembler added errata NOP
  1677                           
  1678                           ;usart.c: 186:             mexLength = 1;
  1679  0015BE  0E01               	movlw	1
  1680  0015C0  6E6D               	movwf	storeData@mexLength^0,c
  1681                           
  1682                           ;usart.c: 187:             break;
  1683  0015C2  EFFE  F00A         	goto	l4251
  1684  0015C6                     l4249:
  1685  0015C6  FFFF               	dw	65535	; assembler added errata NOP
  1686  0015C8  5045               	movf	storeData@receivedMex^0,w,c
  1687  0015CA  6E19               	movwf	??_storeData^0,c
  1688  0015CC  6A1A               	clrf	(??_storeData+1)^0,c
  1689                           
  1690                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1691                           ; Switch size 1, requested type "simple"
  1692                           ; Number of cases is 1, Range of values is 0 to 0
  1693                           ; switch strategies available:
  1694                           ; Name         Instructions Cycles
  1695                           ; simple_byte            4     3 (average)
  1696                           ;	Chosen strategy is simple_byte
  1697  0015CE  501A               	movf	(??_storeData+1)^0,w,c
  1698  0015D0  0A00               	xorlw	0	; case 0
  1699  0015D2  B4D8               	btfsc	status,2,c
  1700  0015D4  EFEE  F00A         	goto	l4661
  1701  0015D8  EFFE  F00A         	goto	l4251
  1702  0015DC                     l4661:
  1703  0015DC  FFFF               	dw	65535	; assembler added errata NOP
  1704                           
  1705                           ; Switch size 1, requested type "simple"
  1706                           ; Number of cases is 3, Range of values is 0 to 2
  1707                           ; switch strategies available:
  1708                           ; Name         Instructions Cycles
  1709                           ; simple_byte           10     6 (average)
  1710                           ;	Chosen strategy is simple_byte
  1711  0015DE  5019               	movf	??_storeData^0,w,c
  1712  0015E0  0A00               	xorlw	0	; case 0
  1713  0015E2  B4D8               	btfsc	status,2,c
  1714  0015E4  EFD4  F00A         	goto	l4241
  1715  0015E8  0A01               	xorlw	1	; case 1
  1716  0015EA  B4D8               	btfsc	status,2,c
  1717  0015EC  EFD9  F00A         	goto	l4243
  1718  0015F0  0A03               	xorlw	3	; case 2
  1719  0015F2  B4D8               	btfsc	status,2,c
  1720  0015F4  EFDE  F00A         	goto	l4245
  1721  0015F8  EFFE  F00A         	goto	l4251
  1722  0015FC                     l4251:
  1723  0015FC  FFFF               	dw	65535	; assembler added errata NOP
  1724                           
  1725                           ;usart.c: 194:     if(counter >= mexLength){
  1726  0015FE  506D               	movf	storeData@mexLength^0,w,c
  1727  001600  5C60               	subwf	storeData@counter^0,w,c
  1728  001602  A0D8               	btfss	status,0,c
  1729  001604  EF06  F00B         	goto	u3751
  1730  001608  EF09  F00B         	goto	u3750
  1731  00160C                     u3751:
  1732  00160C  FFFF               	dw	65535	; assembler added errata NOP
  1733  00160E  EF75  F00B         	goto	l574
  1734  001612                     u3750:
  1735  001612  FFFF               	dw	65535	; assembler added errata NOP
  1736  001614                     
  1737                           ;usart.c: 195:         counter = 0;
  1738  001614  0E00               	movlw	0
  1739  001616  6E60               	movwf	storeData@counter^0,c
  1740                           
  1741                           ;usart.c: 198:         switch(receivedMex[0]){
  1742  001618  EF5A  F00B         	goto	l4267
  1743  00161C                     l4255:
  1744  00161C  FFFF               	dw	65535	; assembler added errata NOP
  1745                           
  1746                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1747  00161E  5063               	movf	_dataCounter^0,w,c
  1748  001620  0D04               	mullw	4
  1749  001622  0EDB               	movlw	low _dataSequence
  1750  001624  24F3               	addwf	243,w,c
  1751  001626  6ED9               	movwf	fsr2l,c
  1752  001628  0E00               	movlw	high _dataSequence
  1753  00162A  20F4               	addwfc	prodh,w,c
  1754  00162C  6EDA               	movwf	fsr2h,c
  1755  00162E  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  1756                           
  1757                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2];
  1758  001632  5063               	movf	_dataCounter^0,w,c
  1759  001634  0D04               	mullw	4
  1760  001636  0EDC               	movlw	low (_dataSequence+1)
  1761  001638  24F3               	addwf	243,w,c
  1762  00163A  6ED9               	movwf	fsr2l,c
  1763  00163C  0E00               	movlw	high (_dataSequence+1)
  1764  00163E  20F4               	addwfc	prodh,w,c
  1765  001640  6EDA               	movwf	fsr2h,c
  1766  001642  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  1767                           
  1768                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3];
  1769  001646  5063               	movf	_dataCounter^0,w,c
  1770  001648  0D04               	mullw	4
  1771  00164A  0EDD               	movlw	low (_dataSequence+2)
  1772  00164C  24F3               	addwf	243,w,c
  1773  00164E  6ED9               	movwf	fsr2l,c
  1774  001650  0E00               	movlw	high (_dataSequence+2)
  1775  001652  20F4               	addwfc	prodh,w,c
  1776  001654  6EDA               	movwf	fsr2h,c
  1777  001656  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  1778                           
  1779                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1780  00165A  5063               	movf	_dataCounter^0,w,c
  1781  00165C  0D04               	mullw	4
  1782  00165E  0EDE               	movlw	low (_dataSequence+3)
  1783  001660  24F3               	addwf	243,w,c
  1784  001662  6ED9               	movwf	fsr2l,c
  1785  001664  0E00               	movlw	high (_dataSequence+3)
  1786  001666  20F4               	addwfc	prodh,w,c
  1787  001668  6EDA               	movwf	fsr2h,c
  1788  00166A  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  1789  00166E                     
  1790                           ;usart.c: 205:                 dataCounter++;
  1791  00166E  2A63               	incf	_dataCounter^0,f,c
  1792                           
  1793                           ;usart.c: 206:                 break;
  1794  001670  EF75  F00B         	goto	l574
  1795  001674                     l571:
  1796  001674  FFFF               	dw	65535	; assembler added errata NOP
  1797                           
  1798                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  1799  001676  C046  F0EF         	movff	storeData@receivedMex+1,_newSequenceData
  1800                           
  1801                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  1802  00167A  C047  F0F0         	movff	storeData@receivedMex+2,_newSequenceData+1
  1803                           
  1804                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3];
  1805  00167E  C048  F0F1         	movff	storeData@receivedMex+3,_newSequenceData+2
  1806                           
  1807                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4];
  1808  001682  C049  F0F2         	movff	storeData@receivedMex+4,_newSequenceData+3
  1809                           
  1810                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  1811  001686  C04A  F0F3         	movff	storeData@receivedMex+5,_newSequenceData+4
  1812                           
  1813                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6];
  1814  00168A  C04B  F0F4         	movff	storeData@receivedMex+6,_newSequenceData+5
  1815                           
  1816                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7];
  1817  00168E  C04C  F0F5         	movff	storeData@receivedMex+7,_newSequenceData+6
  1818                           
  1819                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  1820  001692  C04D  F0F6         	movff	storeData@receivedMex+8,_newSequenceData+7
  1821  001696                     
  1822                           ;usart.c: 218:                 _newSequence = 1;
  1823  001696  0E01               	movlw	1
  1824  001698  6E61               	movwf	__newSequence^0,c
  1825                           
  1826                           ;usart.c: 219:                 break;
  1827  00169A  EF75  F00B         	goto	l574
  1828  00169E                     l4261:
  1829  00169E  FFFF               	dw	65535	; assembler added errata NOP
  1830                           
  1831                           ;usart.c: 222:                 _fatalError = 1;
  1832  0016A0  0E01               	movlw	1
  1833  0016A2  6E62               	movwf	__fatalError^0,c
  1834                           
  1835                           ;usart.c: 223:                 break;
  1836  0016A4  EF75  F00B         	goto	l574
  1837  0016A8                     l4263:
  1838  0016A8  FFFF               	dw	65535	; assembler added errata NOP
  1839                           
  1840                           ;usart.c: 226:                 printError(8);
  1841  0016AA  0E08               	movlw	8
  1842  0016AC  ECC4  F00C         	call	_printError
  1843                           
  1844                           ;usart.c: 227:                 break;
  1845  0016B0  EF75  F00B         	goto	l574
  1846  0016B4                     l4267:
  1847  0016B4  FFFF               	dw	65535	; assembler added errata NOP
  1848  0016B6  5045               	movf	storeData@receivedMex^0,w,c
  1849  0016B8  6E19               	movwf	??_storeData^0,c
  1850  0016BA  6A1A               	clrf	(??_storeData+1)^0,c
  1851                           
  1852                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1853                           ; Switch size 1, requested type "simple"
  1854                           ; Number of cases is 1, Range of values is 0 to 0
  1855                           ; switch strategies available:
  1856                           ; Name         Instructions Cycles
  1857                           ; simple_byte            4     3 (average)
  1858                           ;	Chosen strategy is simple_byte
  1859  0016BC  501A               	movf	(??_storeData+1)^0,w,c
  1860  0016BE  0A00               	xorlw	0	; case 0
  1861  0016C0  B4D8               	btfsc	status,2,c
  1862  0016C2  EF65  F00B         	goto	l4663
  1863  0016C6  EF54  F00B         	goto	l4263
  1864  0016CA                     l4663:
  1865  0016CA  FFFF               	dw	65535	; assembler added errata NOP
  1866                           
  1867                           ; Switch size 1, requested type "simple"
  1868                           ; Number of cases is 3, Range of values is 0 to 2
  1869                           ; switch strategies available:
  1870                           ; Name         Instructions Cycles
  1871                           ; simple_byte           10     6 (average)
  1872                           ;	Chosen strategy is simple_byte
  1873  0016CC  5019               	movf	??_storeData^0,w,c
  1874  0016CE  0A00               	xorlw	0	; case 0
  1875  0016D0  B4D8               	btfsc	status,2,c
  1876  0016D2  EF0E  F00B         	goto	l4255
  1877  0016D6  0A01               	xorlw	1	; case 1
  1878  0016D8  B4D8               	btfsc	status,2,c
  1879  0016DA  EF3A  F00B         	goto	l571
  1880  0016DE  0A03               	xorlw	3	; case 2
  1881  0016E0  B4D8               	btfsc	status,2,c
  1882  0016E2  EF4F  F00B         	goto	l4261
  1883  0016E6  EF54  F00B         	goto	l4263
  1884  0016EA                     l574:
  1885  0016EA  FFFF               	dw	65535	; assembler added errata NOP
  1886  0016EC  0012               	return		;funcret
  1887  0016EE  FFFF               	dw	65535	; errata NOP
  1888  0016F0                     __end_of_storeData:
  1889                           	callstack 0
  1890                           
  1891 ;; *************** function _printError *****************
  1892 ;; Defined at:
  1893 ;;		line 111 in file "usart.c"
  1894 ;; Parameters:    Size  Location     Type
  1895 ;;  errCode         1    wreg     unsigned char 
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;  errCode         1   23[COMRAM] unsigned char 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1907 ;;      Params:         0       0       0       0       0       0       0
  1908 ;;      Locals:         1       0       0       0       0       0       0
  1909 ;;      Temps:          2       0       0       0       0       0       0
  1910 ;;      Totals:         3       0       0       0       0       0       0
  1911 ;;Total ram usage:        3 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    5
  1914 ;; This function calls:
  1915 ;;		_uartTx
  1916 ;; This function is called by:
  1917 ;;		_main
  1918 ;;		_storeData
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text6
  1923  001988                     __ptext6:
  1924                           	callstack 0
  1925  001988                     _printError:
  1926                           	callstack 0
  1927  001988  FFFF               	dw	65535	; assembler added errata NOP
  1928                           
  1929                           ;incstack = 0
  1930                           ;printError@errCode stored from wreg
  1931  00198A  6E18               	movwf	printError@errCode^0,c
  1932  00198C                     
  1933                           ;usart.c: 113:     switch(errCode){
  1934  00198C  EF20  F00D         	goto	l4107
  1935  001990                     l4089:
  1936  001990  FFFF               	dw	65535	; assembler added errata NOP
  1937                           
  1938                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1939  001992  0EA5               	movlw	low _errString_Feed
  1940  001994  6E12               	movwf	uartTx@ptr^0,c
  1941  001996  0E00               	movlw	high _errString_Feed
  1942  001998  6E13               	movwf	(uartTx@ptr+1)^0,c
  1943  00199A  0E1E               	movlw	30
  1944  00199C  6E14               	movwf	uartTx@length^0,c
  1945  00199E  ECF7  F011         	call	_uartTx	;wreg free
  1946                           
  1947                           ;usart.c: 116:             break;
  1948  0019A2  EF4F  F00D         	goto	l541
  1949  0019A6                     l4091:
  1950  0019A6  FFFF               	dw	65535	; assembler added errata NOP
  1951                           
  1952                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1953  0019A8  0E5E               	movlw	low _errString_ZEND
  1954  0019AA  6E12               	movwf	uartTx@ptr^0,c
  1955  0019AC  0E01               	movlw	high _errString_ZEND
  1956  0019AE  6E13               	movwf	(uartTx@ptr+1)^0,c
  1957  0019B0  0E29               	movlw	41
  1958  0019B2  6E14               	movwf	uartTx@length^0,c
  1959  0019B4  ECF7  F011         	call	_uartTx	;wreg free
  1960                           
  1961                           ;usart.c: 119:             break;
  1962  0019B8  EF4F  F00D         	goto	l541
  1963  0019BC                     l4093:
  1964  0019BC  FFFF               	dw	65535	; assembler added errata NOP
  1965                           
  1966                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1967  0019BE  0E87               	movlw	low _errString_Reset
  1968  0019C0  6E12               	movwf	uartTx@ptr^0,c
  1969  0019C2  0E01               	movlw	high _errString_Reset
  1970  0019C4  6E13               	movwf	(uartTx@ptr+1)^0,c
  1971  0019C6  0E28               	movlw	40
  1972  0019C8  6E14               	movwf	uartTx@length^0,c
  1973  0019CA  ECF7  F011         	call	_uartTx	;wreg free
  1974                           
  1975                           ;usart.c: 122:             break;
  1976  0019CE  EF4F  F00D         	goto	l541
  1977  0019D2                     l4095:
  1978  0019D2  FFFF               	dw	65535	; assembler added errata NOP
  1979                           
  1980                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1981  0019D4  0E35               	movlw	low _errString_Point
  1982  0019D6  6E12               	movwf	uartTx@ptr^0,c
  1983  0019D8  0E01               	movlw	high _errString_Point
  1984  0019DA  6E13               	movwf	(uartTx@ptr+1)^0,c
  1985  0019DC  0E29               	movlw	41
  1986  0019DE  6E14               	movwf	uartTx@length^0,c
  1987  0019E0  ECF7  F011         	call	_uartTx	;wreg free
  1988                           
  1989                           ;usart.c: 125:             break;
  1990  0019E4  EF4F  F00D         	goto	l541
  1991  0019E8                     l4097:
  1992  0019E8  FFFF               	dw	65535	; assembler added errata NOP
  1993                           
  1994                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  1995  0019EA  0E84               	movlw	low _errString_Bound
  1996  0019EC  6E12               	movwf	uartTx@ptr^0,c
  1997  0019EE  0E00               	movlw	high _errString_Bound
  1998  0019F0  6E13               	movwf	(uartTx@ptr+1)^0,c
  1999  0019F2  0E21               	movlw	33
  2000  0019F4  6E14               	movwf	uartTx@length^0,c
  2001  0019F6  ECF7  F011         	call	_uartTx	;wreg free
  2002                           
  2003                           ;usart.c: 128:             break;
  2004  0019FA  EF4F  F00D         	goto	l541
  2005  0019FE                     l4099:
  2006  0019FE  FFFF               	dw	65535	; assembler added errata NOP
  2007                           
  2008                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2009  001A00  0E00               	movlw	low _errString_PointZ
  2010  001A02  6E12               	movwf	uartTx@ptr^0,c
  2011  001A04  0E01               	movlw	high _errString_PointZ
  2012  001A06  6E13               	movwf	(uartTx@ptr+1)^0,c
  2013  001A08  0E35               	movlw	53
  2014  001A0A  6E14               	movwf	uartTx@length^0,c
  2015  001A0C  ECF7  F011         	call	_uartTx	;wreg free
  2016                           
  2017                           ;usart.c: 131:             break;
  2018  001A10  EF4F  F00D         	goto	l541
  2019  001A14                     l4101:
  2020  001A14  FFFF               	dw	65535	; assembler added errata NOP
  2021                           
  2022                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2023  001A16  0EAF               	movlw	low _errString_Fatal
  2024  001A18  6E12               	movwf	uartTx@ptr^0,c
  2025  001A1A  0E01               	movlw	high _errString_Fatal
  2026  001A1C  6E13               	movwf	(uartTx@ptr+1)^0,c
  2027  001A1E  0E27               	movlw	39
  2028  001A20  6E14               	movwf	uartTx@length^0,c
  2029  001A22  ECF7  F011         	call	_uartTx	;wreg free
  2030                           
  2031                           ;usart.c: 134:             break;
  2032  001A26  EF4F  F00D         	goto	l541
  2033  001A2A                     l4103:
  2034  001A2A  FFFF               	dw	65535	; assembler added errata NOP
  2035                           
  2036                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2037  001A2C  0EC3               	movlw	low _errString_Command
  2038  001A2E  6E12               	movwf	uartTx@ptr^0,c
  2039  001A30  0E00               	movlw	high _errString_Command
  2040  001A32  6E13               	movwf	(uartTx@ptr+1)^0,c
  2041  001A34  0E18               	movlw	24
  2042  001A36  6E14               	movwf	uartTx@length^0,c
  2043  001A38  ECF7  F011         	call	_uartTx	;wreg free
  2044                           
  2045                           ;usart.c: 137:             break;
  2046  001A3C  EF4F  F00D         	goto	l541
  2047  001A40                     l4107:
  2048  001A40  FFFF               	dw	65535	; assembler added errata NOP
  2049  001A42  5018               	movf	printError@errCode^0,w,c
  2050  001A44  6E16               	movwf	??_printError^0,c
  2051  001A46  6A17               	clrf	(??_printError+1)^0,c
  2052                           
  2053                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2054                           ; Switch size 1, requested type "simple"
  2055                           ; Number of cases is 1, Range of values is 0 to 0
  2056                           ; switch strategies available:
  2057                           ; Name         Instructions Cycles
  2058                           ; simple_byte            4     3 (average)
  2059                           ;	Chosen strategy is simple_byte
  2060  001A48  5017               	movf	(??_printError+1)^0,w,c
  2061  001A4A  0A00               	xorlw	0	; case 0
  2062  001A4C  B4D8               	btfsc	status,2,c
  2063  001A4E  EF2B  F00D         	goto	l4665
  2064  001A52  EF4F  F00D         	goto	l541
  2065  001A56                     l4665:
  2066  001A56  FFFF               	dw	65535	; assembler added errata NOP
  2067                           
  2068                           ; Switch size 1, requested type "simple"
  2069                           ; Number of cases is 8, Range of values is 1 to 8
  2070                           ; switch strategies available:
  2071                           ; Name         Instructions Cycles
  2072                           ; simple_byte           25    13 (average)
  2073                           ;	Chosen strategy is simple_byte
  2074  001A58  5016               	movf	??_printError^0,w,c
  2075  001A5A  0A01               	xorlw	1	; case 1
  2076  001A5C  B4D8               	btfsc	status,2,c
  2077  001A5E  EFC8  F00C         	goto	l4089
  2078  001A62  0A03               	xorlw	3	; case 2
  2079  001A64  B4D8               	btfsc	status,2,c
  2080  001A66  EFD3  F00C         	goto	l4091
  2081  001A6A  0A01               	xorlw	1	; case 3
  2082  001A6C  B4D8               	btfsc	status,2,c
  2083  001A6E  EFDE  F00C         	goto	l4093
  2084  001A72  0A07               	xorlw	7	; case 4
  2085  001A74  B4D8               	btfsc	status,2,c
  2086  001A76  EFE9  F00C         	goto	l4095
  2087  001A7A  0A01               	xorlw	1	; case 5
  2088  001A7C  B4D8               	btfsc	status,2,c
  2089  001A7E  EFF4  F00C         	goto	l4097
  2090  001A82  0A03               	xorlw	3	; case 6
  2091  001A84  B4D8               	btfsc	status,2,c
  2092  001A86  EFFF  F00C         	goto	l4099
  2093  001A8A  0A01               	xorlw	1	; case 7
  2094  001A8C  B4D8               	btfsc	status,2,c
  2095  001A8E  EF0A  F00D         	goto	l4101
  2096  001A92  0A0F               	xorlw	15	; case 8
  2097  001A94  B4D8               	btfsc	status,2,c
  2098  001A96  EF15  F00D         	goto	l4103
  2099  001A9A  EF4F  F00D         	goto	l541
  2100  001A9E                     l541:
  2101  001A9E  FFFF               	dw	65535	; assembler added errata NOP
  2102  001AA0  0012               	return		;funcret
  2103  001AA2  FFFF               	dw	65535	; errata NOP
  2104  001AA4                     __end_of_printError:
  2105                           	callstack 0
  2106                           
  2107 ;; *************** function _uartTx *****************
  2108 ;; Defined at:
  2109 ;;		line 148 in file "usart.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2112 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2113 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2114 ;;  length          1   19[COMRAM] unsigned char 
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;  i               1   20[COMRAM] unsigned char 
  2117 ;; Return value:  Size  Location     Type
  2118 ;;                  1    wreg      void 
  2119 ;; Registers used:
  2120 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2121 ;; Tracked objects:
  2122 ;;		On entry : 0/0
  2123 ;;		On exit  : 0/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2126 ;;      Params:         3       0       0       0       0       0       0
  2127 ;;      Locals:         1       0       0       0       0       0       0
  2128 ;;      Temps:          0       0       0       0       0       0       0
  2129 ;;      Totals:         4       0       0       0       0       0       0
  2130 ;;Total ram usage:        4 bytes
  2131 ;; Hardware stack levels used:    1
  2132 ;; Hardware stack levels required when called:    4
  2133 ;; This function calls:
  2134 ;;		Nothing
  2135 ;; This function is called by:
  2136 ;;		_printError
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           	psect	text7
  2141  0023EE                     __ptext7:
  2142                           	callstack 0
  2143  0023EE                     _uartTx:
  2144                           	callstack 0
  2145  0023EE  FFFF               	dw	65535	; assembler added errata NOP
  2146  0023F0                     
  2147                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  2148  0023F0  0E01               	movlw	1
  2149  0023F2  6E15               	movwf	uartTx@i^0,c
  2150  0023F4  EF10  F012         	goto	l3565
  2151  0023F8                     l3561:
  2152  0023F8  FFFF               	dw	65535	; assembler added errata NOP
  2153                           
  2154                           ;usart.c: 153:         TXREG = *ptr;
  2155  0023FA  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2156  0023FE  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2157  002402  50DF               	movf	indf2,w,c
  2158  002404  6EAD               	movwf	173,c	;volatile
  2159  002406                     l546:
  2160  002406  FFFF               	dw	65535	; assembler added errata NOP
  2161  002408  A2AC               	btfss	172,1,c	;volatile
  2162  00240A  EF09  F012         	goto	u2721
  2163  00240E  EF0C  F012         	goto	u2720
  2164  002412                     u2721:
  2165  002412  FFFF               	dw	65535	; assembler added errata NOP
  2166  002414  EF03  F012         	goto	l546
  2167  002418                     u2720:
  2168  002418  FFFF               	dw	65535	; assembler added errata NOP
  2169  00241A                     
  2170                           ;usart.c: 157:         ptr++;
  2171  00241A  4A12               	infsnz	uartTx@ptr^0,f,c
  2172  00241C  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2173                           
  2174                           ;usart.c: 158:     }
  2175  00241E  2A15               	incf	uartTx@i^0,f,c
  2176  002420                     l3565:
  2177  002420  FFFF               	dw	65535	; assembler added errata NOP
  2178  002422  5014               	movf	uartTx@length^0,w,c
  2179  002424  5C15               	subwf	uartTx@i^0,w,c
  2180  002426  A0D8               	btfss	status,0,c
  2181  002428  EF18  F012         	goto	u2731
  2182  00242C  EF1B  F012         	goto	u2730
  2183  002430                     u2731:
  2184  002430  FFFF               	dw	65535	; assembler added errata NOP
  2185  002432  EFFC  F011         	goto	l3561
  2186  002436                     u2730:
  2187  002436  FFFF               	dw	65535	; assembler added errata NOP
  2188  002438  0012               	return		;funcret
  2189  00243A  FFFF               	dw	65535	; errata NOP
  2190  00243C                     __end_of_uartTx:
  2191                           	callstack 0
  2192                           
  2193 ;; *************** function _shiftData *****************
  2194 ;; Defined at:
  2195 ;;		line 81 in file "usart.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;		None
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;  i               1   19[COMRAM] unsigned char 
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  1    wreg      void 
  2202 ;; Registers used:
  2203 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2209 ;;      Params:         0       0       0       0       0       0       0
  2210 ;;      Locals:         1       0       0       0       0       0       0
  2211 ;;      Temps:          2       0       0       0       0       0       0
  2212 ;;      Totals:         3       0       0       0       0       0       0
  2213 ;;Total ram usage:        3 bytes
  2214 ;; Hardware stack levels used:    1
  2215 ;; Hardware stack levels required when called:    4
  2216 ;; This function calls:
  2217 ;;		Nothing
  2218 ;; This function is called by:
  2219 ;;		_main
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           	psect	text8
  2224  002332                     __ptext8:
  2225                           	callstack 0
  2226  002332                     _shiftData:
  2227                           	callstack 0
  2228  002332  FFFF               	dw	65535	; assembler added errata NOP
  2229  002334                     
  2230                           ;usart.c: 82:     char i;;usart.c: 84:     for(i = 0; i < 4; i++){
  2231  002334  0E00               	movlw	0
  2232  002336  6E14               	movwf	shiftData@i^0,c
  2233  002338                     l4355:
  2234  002338  FFFF               	dw	65535	; assembler added errata NOP
  2235                           
  2236                           ;usart.c: 85:         dataSequence[i] = dataSequence[i+1];
  2237  00233A  5014               	movf	shiftData@i^0,w,c
  2238  00233C  6E12               	movwf	??_shiftData^0,c
  2239  00233E  6A13               	clrf	(??_shiftData+1)^0,c
  2240  002340  90D8               	bcf	status,0,c
  2241  002342  3612               	rlcf	??_shiftData^0,f,c
  2242  002344  3613               	rlcf	(??_shiftData+1)^0,f,c
  2243  002346  90D8               	bcf	status,0,c
  2244  002348  3612               	rlcf	??_shiftData^0,f,c
  2245  00234A  3613               	rlcf	(??_shiftData+1)^0,f,c
  2246  00234C  0EDF               	movlw	low (_dataSequence+4)
  2247  00234E  2412               	addwf	??_shiftData^0,w,c
  2248  002350  6ED9               	movwf	fsr2l,c
  2249  002352  0E00               	movlw	high (_dataSequence+4)
  2250  002354  2013               	addwfc	(??_shiftData+1)^0,w,c
  2251  002356  6EDA               	movwf	fsr2h,c
  2252  002358  5014               	movf	shiftData@i^0,w,c
  2253  00235A  0D04               	mullw	4
  2254  00235C  0EDB               	movlw	low _dataSequence
  2255  00235E  24F3               	addwf	243,w,c
  2256  002360  6EE1               	movwf	fsr1l,c
  2257  002362  0E00               	movlw	high _dataSequence
  2258  002364  20F4               	addwfc	prodh,w,c
  2259  002366  6EE2               	movwf	fsr1h,c
  2260  002368  CFDE FFE6          	movff	postinc2,postinc1
  2261  00236C  CFDE FFE6          	movff	postinc2,postinc1
  2262  002370  CFDE FFE6          	movff	postinc2,postinc1
  2263  002374  CFDE FFE6          	movff	postinc2,postinc1
  2264  002378                     
  2265                           ;usart.c: 86:     }
  2266  002378  2A14               	incf	shiftData@i^0,f,c
  2267  00237A  0E03               	movlw	3
  2268  00237C  6414               	cpfsgt	shiftData@i^0,c
  2269  00237E  EFC3  F011         	goto	u3781
  2270  002382  EFC6  F011         	goto	u3780
  2271  002386                     u3781:
  2272  002386  FFFF               	dw	65535	; assembler added errata NOP
  2273  002388  EF9C  F011         	goto	l4355
  2274  00238C                     u3780:
  2275  00238C  FFFF               	dw	65535	; assembler added errata NOP
  2276  00238E  0012               	return		;funcret
  2277  002390  FFFF               	dw	65535	; errata NOP
  2278  002392                     __end_of_shiftData:
  2279                           	callstack 0
  2280                           
  2281 ;; *************** function _resetPosition *****************
  2282 ;; Defined at:
  2283 ;;		line 157 in file "motors.c"
  2284 ;; Parameters:    Size  Location     Type
  2285 ;;		None
  2286 ;; Auto vars:     Size  Location     Type
  2287 ;;  keepMovingZ     1   23[COMRAM] unsigned char 
  2288 ;;  keepMovingY     1   22[COMRAM] unsigned char 
  2289 ;;  keepMovingX     1   21[COMRAM] unsigned char 
  2290 ;; Return value:  Size  Location     Type
  2291 ;;                  1    wreg      unsigned char 
  2292 ;; Registers used:
  2293 ;;		wreg, status,2, status,0, cstack
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2299 ;;      Params:         0       0       0       0       0       0       0
  2300 ;;      Locals:         3       0       0       0       0       0       0
  2301 ;;      Temps:          0       0       0       0       0       0       0
  2302 ;;      Totals:         3       0       0       0       0       0       0
  2303 ;;Total ram usage:        3 bytes
  2304 ;; Hardware stack levels used:    1
  2305 ;; Hardware stack levels required when called:    5
  2306 ;; This function calls:
  2307 ;;		_enableMotor
  2308 ;;		_resetStep
  2309 ;;		_setDecay
  2310 ;;		_setDirection
  2311 ;;		_setStep
  2312 ;;		_stepMade
  2313 ;; This function is called by:
  2314 ;;		_main
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           	psect	text9
  2319  0011F0                     __ptext9:
  2320                           	callstack 0
  2321  0011F0                     _resetPosition:
  2322                           	callstack 0
  2323  0011F0  FFFF               	dw	65535	; assembler added errata NOP
  2324  0011F2                     
  2325                           ;motors.c: 159:     setStep(0, 0);
  2326  0011F2  0E00               	movlw	0
  2327  0011F4  6E12               	movwf	setStep@motor^0,c
  2328  0011F6  0E00               	movlw	0
  2329  0011F8  ECAB  F00F         	call	_setStep
  2330                           
  2331                           ;motors.c: 160:     setStep(1, 0);
  2332  0011FC  0E00               	movlw	0
  2333  0011FE  6E12               	movwf	setStep@motor^0,c
  2334  001200  0E01               	movlw	1
  2335  001202  ECAB  F00F         	call	_setStep
  2336                           
  2337                           ;motors.c: 161:     setStep(2, 0);
  2338  001206  0E00               	movlw	0
  2339  001208  6E12               	movwf	setStep@motor^0,c
  2340  00120A  0E02               	movlw	2
  2341  00120C  ECAB  F00F         	call	_setStep
  2342                           
  2343                           ;motors.c: 163:     setDirection(0, 0);
  2344  001210  0E00               	movlw	0
  2345  001212  6E12               	movwf	setDirection@motor^0,c
  2346  001214  0E00               	movlw	0
  2347  001216  EC25  F011         	call	_setDirection
  2348                           
  2349                           ;motors.c: 164:     setDirection(0, 1);
  2350  00121A  0E01               	movlw	1
  2351  00121C  6E12               	movwf	setDirection@motor^0,c
  2352  00121E  0E00               	movlw	0
  2353  001220  EC25  F011         	call	_setDirection
  2354                           
  2355                           ;motors.c: 165:     setDirection(0, 2);
  2356  001224  0E02               	movlw	2
  2357  001226  6E12               	movwf	setDirection@motor^0,c
  2358  001228  0E00               	movlw	0
  2359  00122A  EC25  F011         	call	_setDirection
  2360                           
  2361                           ;motors.c: 167:     setDecay(1, 0);
  2362  00122E  0E00               	movlw	0
  2363  001230  6E12               	movwf	setDecay@motor^0,c
  2364  001232  0E01               	movlw	1
  2365  001234  ECB1  F010         	call	_setDecay
  2366                           
  2367                           ;motors.c: 168:     setDecay(1, 1);
  2368  001238  0E01               	movlw	1
  2369  00123A  6E12               	movwf	setDecay@motor^0,c
  2370  00123C  0E01               	movlw	1
  2371  00123E  ECB1  F010         	call	_setDecay
  2372                           
  2373                           ;motors.c: 169:     setDecay(1, 2);
  2374  001242  0E02               	movlw	2
  2375  001244  6E12               	movwf	setDecay@motor^0,c
  2376  001246  0E01               	movlw	1
  2377  001248  ECB1  F010         	call	_setDecay
  2378                           
  2379                           ;motors.c: 171:     enableMotor(0, 0);
  2380  00124C  0E00               	movlw	0
  2381  00124E  6E12               	movwf	enableMotor@motor^0,c
  2382  001250  0E00               	movlw	0
  2383  001252  ECEB  F010         	call	_enableMotor
  2384                           
  2385                           ;motors.c: 172:     enableMotor(0, 1);
  2386  001256  0E01               	movlw	1
  2387  001258  6E12               	movwf	enableMotor@motor^0,c
  2388  00125A  0E00               	movlw	0
  2389  00125C  ECEB  F010         	call	_enableMotor
  2390                           
  2391                           ;motors.c: 173:     enableMotor(0, 2);
  2392  001260  0E02               	movlw	2
  2393  001262  6E12               	movwf	enableMotor@motor^0,c
  2394  001264  0E00               	movlw	0
  2395  001266  ECEB  F010         	call	_enableMotor
  2396  00126A                     
  2397                           ;motors.c: 177:     unsigned char keepMovingX = 1;
  2398  00126A  0E01               	movlw	1
  2399  00126C  6E16               	movwf	resetPosition@keepMovingX^0,c
  2400  00126E                     
  2401                           ;motors.c: 178:     unsigned char keepMovingY = 1;
  2402  00126E  0E01               	movlw	1
  2403  001270  6E17               	movwf	resetPosition@keepMovingY^0,c
  2404  001272                     
  2405                           ;motors.c: 179:     unsigned char keepMovingZ = 1;
  2406  001272  0E01               	movlw	1
  2407  001274  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2408  001276                     
  2409                           ;motors.c: 182:     T2CONbits.TMR2ON = 1;
  2410  001276  84CA               	bsf	202,2,c	;volatile
  2411  001278                     
  2412                           ;motors.c: 184:     tm0Error = 0;
  2413  001278  0E00               	movlw	0
  2414  00127A  6E5C               	movwf	(_tm0Error+1)^0,c
  2415  00127C  0E00               	movlw	0
  2416  00127E  6E5B               	movwf	_tm0Error^0,c
  2417  001280                     
  2418                           ;motors.c: 185:     tm0Limit = 250;
  2419  001280  0EFA               	movlw	250
  2420  001282  6E68               	movwf	_tm0Limit^0,c
  2421  001284                     
  2422                           ;motors.c: 186:     T0CONbits.TMR0ON = 1;
  2423  001284  8ED5               	bsf	213,7,c	;volatile
  2424                           
  2425                           ;motors.c: 188:     while(keepMovingX || keepMovingY || keepMovingZ){
  2426  001286  EFC6  F009         	goto	l4175
  2427  00128A                     l4153:
  2428  00128A  FFFF               	dw	65535	; assembler added errata NOP
  2429                           
  2430                           ;motors.c: 191:         if(tm0Error){
  2431  00128C  505B               	movf	_tm0Error^0,w,c
  2432  00128E  105C               	iorwf	(_tm0Error+1)^0,w,c
  2433  001290  B4D8               	btfsc	status,2,c
  2434  001292  EF4D  F009         	goto	u3611
  2435  001296  EF50  F009         	goto	u3610
  2436  00129A                     u3611:
  2437  00129A  FFFF               	dw	65535	; assembler added errata NOP
  2438  00129C  EF5A  F009         	goto	l117
  2439  0012A0                     u3610:
  2440  0012A0  FFFF               	dw	65535	; assembler added errata NOP
  2441  0012A2                     
  2442                           ;motors.c: 193:             LATAbits.LATA2 = 0;
  2443  0012A2  9489               	bcf	137,2,c	;volatile
  2444                           
  2445                           ;motors.c: 194:             LATBbits.LATB4 = 0;
  2446  0012A4  988A               	bcf	138,4,c	;volatile
  2447                           
  2448                           ;motors.c: 195:             LATCbits.LATC2 = 0;
  2449  0012A6  948B               	bcf	139,2,c	;volatile
  2450  0012A8                     
  2451                           ;motors.c: 197:             tm0Error = 3;
  2452  0012A8  0E00               	movlw	0
  2453  0012AA  6E5C               	movwf	(_tm0Error+1)^0,c
  2454  0012AC  0E03               	movlw	3
  2455  0012AE  6E5B               	movwf	_tm0Error^0,c
  2456                           
  2457                           ;motors.c: 198:             break;
  2458  0012B0  EFE4  F009         	goto	l118
  2459  0012B4                     l117:
  2460  0012B4  FFFF               	dw	65535	; assembler added errata NOP
  2461                           
  2462                           ;motors.c: 205:         if(PORTEbits.RE0 || !keepMovingX){
  2463  0012B6  B084               	btfsc	132,0,c	;volatile
  2464  0012B8  EF60  F009         	goto	u3621
  2465  0012BC  EF63  F009         	goto	u3620
  2466  0012C0                     u3621:
  2467  0012C0  FFFF               	dw	65535	; assembler added errata NOP
  2468  0012C2  EF6D  F009         	goto	l4161
  2469  0012C6                     u3620:
  2470  0012C6  FFFF               	dw	65535	; assembler added errata NOP
  2471  0012C8  5016               	movf	resetPosition@keepMovingX^0,w,c
  2472  0012CA  A4D8               	btfss	status,2,c
  2473  0012CC  EF6A  F009         	goto	u3631
  2474  0012D0  EF6D  F009         	goto	u3630
  2475  0012D4                     u3631:
  2476  0012D4  FFFF               	dw	65535	; assembler added errata NOP
  2477  0012D6  EF72  F009         	goto	l119
  2478  0012DA                     u3630:
  2479  0012DA                     l4161:
  2480  0012DA  FFFF               	dw	65535	; assembler added errata NOP
  2481                           
  2482                           ;motors.c: 207:             keepMovingX = 0;
  2483  0012DC  0E00               	movlw	0
  2484  0012DE  6E16               	movwf	resetPosition@keepMovingX^0,c
  2485                           
  2486                           ;motors.c: 208:         }else{
  2487  0012E0  EF74  F009         	goto	l122
  2488  0012E4                     l119:
  2489  0012E4  FFFF               	dw	65535	; assembler added errata NOP
  2490                           
  2491                           ;motors.c: 210:             LATAbits.LATA2 = 1;
  2492  0012E6  8489               	bsf	137,2,c	;volatile
  2493  0012E8                     l122:
  2494  0012E8  FFFF               	dw	65535	; assembler added errata NOP
  2495                           
  2496                           ;motors.c: 214:         if(PORTEbits.RE1 || !keepMovingY){
  2497  0012EA  B284               	btfsc	132,1,c	;volatile
  2498  0012EC  EF7A  F009         	goto	u3641
  2499  0012F0  EF7D  F009         	goto	u3640
  2500  0012F4                     u3641:
  2501  0012F4  FFFF               	dw	65535	; assembler added errata NOP
  2502  0012F6  EF87  F009         	goto	l4165
  2503  0012FA                     u3640:
  2504  0012FA  FFFF               	dw	65535	; assembler added errata NOP
  2505  0012FC  5017               	movf	resetPosition@keepMovingY^0,w,c
  2506  0012FE  A4D8               	btfss	status,2,c
  2507  001300  EF84  F009         	goto	u3651
  2508  001304  EF87  F009         	goto	u3650
  2509  001308                     u3651:
  2510  001308  FFFF               	dw	65535	; assembler added errata NOP
  2511  00130A  EF8C  F009         	goto	l123
  2512  00130E                     u3650:
  2513  00130E                     l4165:
  2514  00130E  FFFF               	dw	65535	; assembler added errata NOP
  2515                           
  2516                           ;motors.c: 216:             keepMovingY = 0;
  2517  001310  0E00               	movlw	0
  2518  001312  6E17               	movwf	resetPosition@keepMovingY^0,c
  2519                           
  2520                           ;motors.c: 217:         }else{
  2521  001314  EF8E  F009         	goto	l126
  2522  001318                     l123:
  2523  001318  FFFF               	dw	65535	; assembler added errata NOP
  2524                           
  2525                           ;motors.c: 219:             LATBbits.LATB4 = 1;
  2526  00131A  888A               	bsf	138,4,c	;volatile
  2527  00131C                     l126:
  2528  00131C  FFFF               	dw	65535	; assembler added errata NOP
  2529                           
  2530                           ;motors.c: 223:         if(PORTEbits.RE2 || !keepMovingZ){
  2531  00131E  B484               	btfsc	132,2,c	;volatile
  2532  001320  EF94  F009         	goto	u3661
  2533  001324  EF97  F009         	goto	u3660
  2534  001328                     u3661:
  2535  001328  FFFF               	dw	65535	; assembler added errata NOP
  2536  00132A  EFA1  F009         	goto	l4169
  2537  00132E                     u3660:
  2538  00132E  FFFF               	dw	65535	; assembler added errata NOP
  2539  001330  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2540  001332  A4D8               	btfss	status,2,c
  2541  001334  EF9E  F009         	goto	u3671
  2542  001338  EFA1  F009         	goto	u3670
  2543  00133C                     u3671:
  2544  00133C  FFFF               	dw	65535	; assembler added errata NOP
  2545  00133E  EFA6  F009         	goto	l127
  2546  001342                     u3670:
  2547  001342                     l4169:
  2548  001342  FFFF               	dw	65535	; assembler added errata NOP
  2549                           
  2550                           ;motors.c: 225:             keepMovingZ = 0;
  2551  001344  0E00               	movlw	0
  2552  001346  6E18               	movwf	resetPosition@keepMovingZ^0,c
  2553                           
  2554                           ;motors.c: 226:         }else{
  2555  001348  EFA8  F009         	goto	l4171
  2556  00134C                     l127:
  2557  00134C  FFFF               	dw	65535	; assembler added errata NOP
  2558                           
  2559                           ;motors.c: 228:             LATCbits.LATC2 = 1;
  2560  00134E  848B               	bsf	139,2,c	;volatile
  2561  001350                     l4171:
  2562  001350  FFFF               	dw	65535	; assembler added errata NOP
  2563  001352  ECE8  F012         	call	_stepMade	;wreg free
  2564  001356  5012               	movf	?_stepMade^0,w,c
  2565  001358  1013               	iorwf	(?_stepMade+1)^0,w,c
  2566  00135A  B4D8               	btfsc	status,2,c
  2567  00135C  EFB2  F009         	goto	u3681
  2568  001360  EFB5  F009         	goto	u3680
  2569  001364                     u3681:
  2570  001364  FFFF               	dw	65535	; assembler added errata NOP
  2571  001366  EFA8  F009         	goto	l4171
  2572  00136A                     u3680:
  2573  00136A  FFFF               	dw	65535	; assembler added errata NOP
  2574  00136C                     
  2575                           ;motors.c: 235:         LATAbits.LATA2 = 0;
  2576  00136C  9489               	bcf	137,2,c	;volatile
  2577                           
  2578                           ;motors.c: 236:         LATBbits.LATB4 = 0;
  2579  00136E  988A               	bcf	138,4,c	;volatile
  2580                           
  2581                           ;motors.c: 237:         LATCbits.LATC2 = 0;
  2582  001370  948B               	bcf	139,2,c	;volatile
  2583  001372                     l4173:
  2584  001372  FFFF               	dw	65535	; assembler added errata NOP
  2585  001374  ECE8  F012         	call	_stepMade	;wreg free
  2586  001378  5012               	movf	?_stepMade^0,w,c
  2587  00137A  1013               	iorwf	(?_stepMade+1)^0,w,c
  2588  00137C  B4D8               	btfsc	status,2,c
  2589  00137E  EFC3  F009         	goto	u3691
  2590  001382  EFC6  F009         	goto	u3690
  2591  001386                     u3691:
  2592  001386  FFFF               	dw	65535	; assembler added errata NOP
  2593  001388  EFB9  F009         	goto	l4173
  2594  00138C                     u3690:
  2595  00138C                     l4175:
  2596  00138C  FFFF               	dw	65535	; assembler added errata NOP
  2597                           
  2598                           ;motors.c: 188:     while(keepMovingX || keepMovingY || keepMovingZ){
  2599  00138E  5016               	movf	resetPosition@keepMovingX^0,w,c
  2600  001390  A4D8               	btfss	status,2,c
  2601  001392  EFCD  F009         	goto	u3701
  2602  001396  EFD0  F009         	goto	u3700
  2603  00139A                     u3701:
  2604  00139A  FFFF               	dw	65535	; assembler added errata NOP
  2605  00139C  EF45  F009         	goto	l4153
  2606  0013A0                     u3700:
  2607  0013A0  FFFF               	dw	65535	; assembler added errata NOP
  2608  0013A2  5017               	movf	resetPosition@keepMovingY^0,w,c
  2609  0013A4  A4D8               	btfss	status,2,c
  2610  0013A6  EFD7  F009         	goto	u3711
  2611  0013AA  EFDA  F009         	goto	u3710
  2612  0013AE                     u3711:
  2613  0013AE  FFFF               	dw	65535	; assembler added errata NOP
  2614  0013B0  EF45  F009         	goto	l4153
  2615  0013B4                     u3710:
  2616  0013B4  FFFF               	dw	65535	; assembler added errata NOP
  2617  0013B6  5018               	movf	resetPosition@keepMovingZ^0,w,c
  2618  0013B8  A4D8               	btfss	status,2,c
  2619  0013BA  EFE1  F009         	goto	u3721
  2620  0013BE  EFE4  F009         	goto	u3720
  2621  0013C2                     u3721:
  2622  0013C2  FFFF               	dw	65535	; assembler added errata NOP
  2623  0013C4  EF45  F009         	goto	l4153
  2624  0013C8                     u3720:
  2625  0013C8                     l118:
  2626  0013C8  FFFF               	dw	65535	; assembler added errata NOP
  2627                           
  2628                           ;motors.c: 244:     T0CONbits.TMR0ON = 0;
  2629  0013CA  9ED5               	bcf	213,7,c	;volatile
  2630                           
  2631                           ;motors.c: 245:     T2CONbits.TMR2ON = 0;
  2632  0013CC  94CA               	bcf	202,2,c	;volatile
  2633  0013CE                     
  2634                           ;motors.c: 247:     TMR0 = 0;
  2635  0013CE  0E00               	movlw	0
  2636  0013D0  6ED7               	movwf	215,c	;volatile
  2637  0013D2  0E00               	movlw	0
  2638  0013D4  6ED6               	movwf	214,c	;volatile
  2639                           
  2640                           ;motors.c: 248:     TMR2 = 0;
  2641  0013D6  0E00               	movlw	0
  2642  0013D8  6ECC               	movwf	204,c	;volatile
  2643  0013DA                     
  2644                           ;motors.c: 251:     resetStep();
  2645  0013DA  EC4B  F013         	call	_resetStep	;wreg free
  2646  0013DE                     
  2647                           ;motors.c: 254:     return(tm0Error);
  2648  0013DE  505B               	movf	_tm0Error^0,w,c
  2649  0013E0  0012               	return		;funcret
  2650  0013E2  FFFF               	dw	65535	; errata NOP
  2651  0013E4                     __end_of_resetPosition:
  2652                           	callstack 0
  2653                           
  2654 ;; *************** function _setStep *****************
  2655 ;; Defined at:
  2656 ;;		line 66 in file "motors.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;  step            1    wreg     unsigned char 
  2659 ;;  motor           1   17[COMRAM] unsigned char 
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;  step            1   20[COMRAM] unsigned char 
  2662 ;; Return value:  Size  Location     Type
  2663 ;;                  1    wreg      void 
  2664 ;; Registers used:
  2665 ;;		wreg, status,2, status,0
  2666 ;; Tracked objects:
  2667 ;;		On entry : 0/0
  2668 ;;		On exit  : 0/0
  2669 ;;		Unchanged: 0/0
  2670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2671 ;;      Params:         1       0       0       0       0       0       0
  2672 ;;      Locals:         1       0       0       0       0       0       0
  2673 ;;      Temps:          2       0       0       0       0       0       0
  2674 ;;      Totals:         4       0       0       0       0       0       0
  2675 ;;Total ram usage:        4 bytes
  2676 ;; Hardware stack levels used:    1
  2677 ;; Hardware stack levels required when called:    4
  2678 ;; This function calls:
  2679 ;;		Nothing
  2680 ;; This function is called by:
  2681 ;;		_resetPosition
  2682 ;; This function uses a non-reentrant model
  2683 ;;
  2684                           
  2685                           	psect	text10
  2686  001F56                     __ptext10:
  2687                           	callstack 0
  2688  001F56                     _setStep:
  2689                           	callstack 0
  2690  001F56  FFFF               	dw	65535	; assembler added errata NOP
  2691                           
  2692                           ;incstack = 0
  2693                           ;setStep@step stored from wreg
  2694  001F58  6E15               	movwf	setStep@step^0,c
  2695  001F5A                     
  2696                           ;motors.c: 67:     switch(motor){
  2697  001F5A  EFF8  F00F         	goto	l3805
  2698  001F5E                     l3797:
  2699  001F5E  FFFF               	dw	65535	; assembler added errata NOP
  2700                           
  2701                           ;motors.c: 70:             LATAbits.LATA5 = (step & 0x01);
  2702  001F60  C015  F013         	movff	setStep@step,??_setStep
  2703  001F64  0E01               	movlw	1
  2704  001F66  1613               	andwf	??_setStep^0,f,c
  2705  001F68  3A13               	swapf	??_setStep^0,f,c
  2706  001F6A  4613               	rlncf	??_setStep^0,f,c
  2707  001F6C  5089               	movf	137,w,c	;volatile
  2708  001F6E  1813               	xorwf	??_setStep^0,w,c
  2709  001F70  0BDF               	andlw	-33
  2710  001F72  1813               	xorwf	??_setStep^0,w,c
  2711  001F74  6E89               	movwf	137,c	;volatile
  2712                           
  2713                           ;motors.c: 72:             LATBbits.LATB0 = (step & 0x02);
  2714  001F76  C015  F013         	movff	setStep@step,??_setStep
  2715  001F7A  0E02               	movlw	2
  2716  001F7C  1613               	andwf	??_setStep^0,f,c
  2717  001F7E  508A               	movf	138,w,c	;volatile
  2718  001F80  1813               	xorwf	??_setStep^0,w,c
  2719  001F82  0BFE               	andlw	-2
  2720  001F84  1813               	xorwf	??_setStep^0,w,c
  2721  001F86  6E8A               	movwf	138,c	;volatile
  2722                           
  2723                           ;motors.c: 73:             break;
  2724  001F88  EF13  F010         	goto	l85
  2725  001F8C                     l3799:
  2726  001F8C  FFFF               	dw	65535	; assembler added errata NOP
  2727                           
  2728                           ;motors.c: 75:             LATBbits.LATB6 = (step & 0x01);
  2729  001F8E  C015  F013         	movff	setStep@step,??_setStep
  2730  001F92  0E01               	movlw	1
  2731  001F94  1613               	andwf	??_setStep^0,f,c
  2732  001F96  3A13               	swapf	??_setStep^0,f,c
  2733  001F98  4613               	rlncf	??_setStep^0,f,c
  2734  001F9A  4613               	rlncf	??_setStep^0,f,c
  2735  001F9C  508A               	movf	138,w,c	;volatile
  2736  001F9E  1813               	xorwf	??_setStep^0,w,c
  2737  001FA0  0BBF               	andlw	-65
  2738  001FA2  1813               	xorwf	??_setStep^0,w,c
  2739  001FA4  6E8A               	movwf	138,c	;volatile
  2740                           
  2741                           ;motors.c: 76:             LATBbits.LATB7 = (step & 0x02);
  2742  001FA6  C015  F013         	movff	setStep@step,??_setStep
  2743  001FAA  0E02               	movlw	2
  2744  001FAC  1613               	andwf	??_setStep^0,f,c
  2745  001FAE  3213               	rrcf	??_setStep^0,f,c
  2746  001FB0  3213               	rrcf	??_setStep^0,f,c
  2747  001FB2  508A               	movf	138,w,c	;volatile
  2748  001FB4  1813               	xorwf	??_setStep^0,w,c
  2749  001FB6  0B7F               	andlw	-129
  2750  001FB8  1813               	xorwf	??_setStep^0,w,c
  2751  001FBA  6E8A               	movwf	138,c	;volatile
  2752                           
  2753                           ;motors.c: 77:             break;
  2754  001FBC  EF13  F010         	goto	l85
  2755  001FC0                     l3801:
  2756  001FC0  FFFF               	dw	65535	; assembler added errata NOP
  2757                           
  2758                           ;motors.c: 79:             LATCbits.LATC4 = (step & 0x01);
  2759  001FC2  C015  F013         	movff	setStep@step,??_setStep
  2760  001FC6  0E01               	movlw	1
  2761  001FC8  1613               	andwf	??_setStep^0,f,c
  2762  001FCA  3A13               	swapf	??_setStep^0,f,c
  2763  001FCC  508B               	movf	139,w,c	;volatile
  2764  001FCE  1813               	xorwf	??_setStep^0,w,c
  2765  001FD0  0BEF               	andlw	-17
  2766  001FD2  1813               	xorwf	??_setStep^0,w,c
  2767  001FD4  6E8B               	movwf	139,c	;volatile
  2768                           
  2769                           ;motors.c: 80:             LATCbits.LATC5 = (step & 0x02);
  2770  001FD6  C015  F013         	movff	setStep@step,??_setStep
  2771  001FDA  0E02               	movlw	2
  2772  001FDC  1613               	andwf	??_setStep^0,f,c
  2773  001FDE  3A13               	swapf	??_setStep^0,f,c
  2774  001FE0  4613               	rlncf	??_setStep^0,f,c
  2775  001FE2  508B               	movf	139,w,c	;volatile
  2776  001FE4  1813               	xorwf	??_setStep^0,w,c
  2777  001FE6  0BDF               	andlw	-33
  2778  001FE8  1813               	xorwf	??_setStep^0,w,c
  2779  001FEA  6E8B               	movwf	139,c	;volatile
  2780                           
  2781                           ;motors.c: 81:             break;
  2782  001FEC  EF13  F010         	goto	l85
  2783  001FF0                     l3805:
  2784  001FF0  FFFF               	dw	65535	; assembler added errata NOP
  2785  001FF2  5012               	movf	setStep@motor^0,w,c
  2786  001FF4  6E13               	movwf	??_setStep^0,c
  2787  001FF6  6A14               	clrf	(??_setStep+1)^0,c
  2788                           
  2789                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2790                           ; Switch size 1, requested type "simple"
  2791                           ; Number of cases is 1, Range of values is 0 to 0
  2792                           ; switch strategies available:
  2793                           ; Name         Instructions Cycles
  2794                           ; simple_byte            4     3 (average)
  2795                           ;	Chosen strategy is simple_byte
  2796  001FF8  5014               	movf	(??_setStep+1)^0,w,c
  2797  001FFA  0A00               	xorlw	0	; case 0
  2798  001FFC  B4D8               	btfsc	status,2,c
  2799  001FFE  EF03  F010         	goto	l4667
  2800  002002  EF13  F010         	goto	l85
  2801  002006                     l4667:
  2802  002006  FFFF               	dw	65535	; assembler added errata NOP
  2803                           
  2804                           ; Switch size 1, requested type "simple"
  2805                           ; Number of cases is 3, Range of values is 0 to 2
  2806                           ; switch strategies available:
  2807                           ; Name         Instructions Cycles
  2808                           ; simple_byte           10     6 (average)
  2809                           ;	Chosen strategy is simple_byte
  2810  002008  5013               	movf	??_setStep^0,w,c
  2811  00200A  0A00               	xorlw	0	; case 0
  2812  00200C  B4D8               	btfsc	status,2,c
  2813  00200E  EFAF  F00F         	goto	l3797
  2814  002012  0A01               	xorlw	1	; case 1
  2815  002014  B4D8               	btfsc	status,2,c
  2816  002016  EFC6  F00F         	goto	l3799
  2817  00201A  0A03               	xorlw	3	; case 2
  2818  00201C  B4D8               	btfsc	status,2,c
  2819  00201E  EFE0  F00F         	goto	l3801
  2820  002022  EF13  F010         	goto	l85
  2821  002026                     l85:
  2822  002026  FFFF               	dw	65535	; assembler added errata NOP
  2823  002028  0012               	return		;funcret
  2824  00202A  FFFF               	dw	65535	; errata NOP
  2825  00202C                     __end_of_setStep:
  2826                           	callstack 0
  2827                           
  2828 ;; *************** function _setDecay *****************
  2829 ;; Defined at:
  2830 ;;		line 135 in file "motors.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;  decay           1    wreg     unsigned char 
  2833 ;;  motor           1   17[COMRAM] unsigned char 
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;  decay           1   20[COMRAM] unsigned char 
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  1    wreg      void 
  2838 ;; Registers used:
  2839 ;;		wreg, status,2, status,0
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2845 ;;      Params:         1       0       0       0       0       0       0
  2846 ;;      Locals:         1       0       0       0       0       0       0
  2847 ;;      Temps:          2       0       0       0       0       0       0
  2848 ;;      Totals:         4       0       0       0       0       0       0
  2849 ;;Total ram usage:        4 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    4
  2852 ;; This function calls:
  2853 ;;		Nothing
  2854 ;; This function is called by:
  2855 ;;		_resetPosition
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858                           
  2859                           	psect	text11
  2860  002162                     __ptext11:
  2861                           	callstack 0
  2862  002162                     _setDecay:
  2863                           	callstack 0
  2864  002162  FFFF               	dw	65535	; assembler added errata NOP
  2865                           
  2866                           ;incstack = 0
  2867                           ;setDecay@decay stored from wreg
  2868  002164  6E15               	movwf	setDecay@decay^0,c
  2869  002166                     
  2870                           ;motors.c: 136:     switch(motor){
  2871  002166  EFCD  F010         	goto	l3837
  2872  00216A                     l3829:
  2873  00216A  FFFF               	dw	65535	; assembler added errata NOP
  2874                           
  2875                           ;motors.c: 138:             LATBbits.LATB2 = decay;
  2876  00216C  B015               	btfsc	setDecay@decay^0,0,c
  2877  00216E  D002               	bra	u3175
  2878  002170  948A               	bcf	138,2,c	;volatile
  2879  002172  D001               	bra	u3176
  2880  002174                     u3175:
  2881  002174  848A               	bsf	138,2,c	;volatile
  2882  002176                     u3176:
  2883                           
  2884                           ;motors.c: 139:             break;
  2885  002176  EFE8  F010         	goto	l112
  2886  00217A                     l3831:
  2887  00217A  FFFF               	dw	65535	; assembler added errata NOP
  2888                           
  2889                           ;motors.c: 141:             LATCbits.LATC0 = decay;
  2890  00217C  B015               	btfsc	setDecay@decay^0,0,c
  2891  00217E  D002               	bra	u3185
  2892  002180  908B               	bcf	139,0,c	;volatile
  2893  002182  D001               	bra	u3186
  2894  002184                     u3185:
  2895  002184  808B               	bsf	139,0,c	;volatile
  2896  002186                     u3186:
  2897                           
  2898                           ;motors.c: 142:             break;
  2899  002186  EFE8  F010         	goto	l112
  2900  00218A                     l3833:
  2901  00218A  FFFF               	dw	65535	; assembler added errata NOP
  2902                           
  2903                           ;motors.c: 144:             LATDbits.LATD0 = decay;
  2904  00218C  B015               	btfsc	setDecay@decay^0,0,c
  2905  00218E  D002               	bra	u3195
  2906  002190  908C               	bcf	140,0,c	;volatile
  2907  002192  D001               	bra	u3196
  2908  002194                     u3195:
  2909  002194  808C               	bsf	140,0,c	;volatile
  2910  002196                     u3196:
  2911                           
  2912                           ;motors.c: 145:             break;
  2913  002196  EFE8  F010         	goto	l112
  2914  00219A                     l3837:
  2915  00219A  FFFF               	dw	65535	; assembler added errata NOP
  2916  00219C  5012               	movf	setDecay@motor^0,w,c
  2917  00219E  6E13               	movwf	??_setDecay^0,c
  2918  0021A0  6A14               	clrf	(??_setDecay+1)^0,c
  2919                           
  2920                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2921                           ; Switch size 1, requested type "simple"
  2922                           ; Number of cases is 1, Range of values is 0 to 0
  2923                           ; switch strategies available:
  2924                           ; Name         Instructions Cycles
  2925                           ; simple_byte            4     3 (average)
  2926                           ;	Chosen strategy is simple_byte
  2927  0021A2  5014               	movf	(??_setDecay+1)^0,w,c
  2928  0021A4  0A00               	xorlw	0	; case 0
  2929  0021A6  B4D8               	btfsc	status,2,c
  2930  0021A8  EFD8  F010         	goto	l4669
  2931  0021AC  EFE8  F010         	goto	l112
  2932  0021B0                     l4669:
  2933  0021B0  FFFF               	dw	65535	; assembler added errata NOP
  2934                           
  2935                           ; Switch size 1, requested type "simple"
  2936                           ; Number of cases is 3, Range of values is 0 to 2
  2937                           ; switch strategies available:
  2938                           ; Name         Instructions Cycles
  2939                           ; simple_byte           10     6 (average)
  2940                           ;	Chosen strategy is simple_byte
  2941  0021B2  5013               	movf	??_setDecay^0,w,c
  2942  0021B4  0A00               	xorlw	0	; case 0
  2943  0021B6  B4D8               	btfsc	status,2,c
  2944  0021B8  EFB5  F010         	goto	l3829
  2945  0021BC  0A01               	xorlw	1	; case 1
  2946  0021BE  B4D8               	btfsc	status,2,c
  2947  0021C0  EFBD  F010         	goto	l3831
  2948  0021C4  0A03               	xorlw	3	; case 2
  2949  0021C6  B4D8               	btfsc	status,2,c
  2950  0021C8  EFC5  F010         	goto	l3833
  2951  0021CC  EFE8  F010         	goto	l112
  2952  0021D0                     l112:
  2953  0021D0  FFFF               	dw	65535	; assembler added errata NOP
  2954  0021D2  0012               	return		;funcret
  2955  0021D4  FFFF               	dw	65535	; errata NOP
  2956  0021D6                     __end_of_setDecay:
  2957                           	callstack 0
  2958                           
  2959 ;; *************** function _enableMotor *****************
  2960 ;; Defined at:
  2961 ;;		line 93 in file "motors.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;  enable          1    wreg     unsigned char 
  2964 ;;  motor           1   17[COMRAM] unsigned char 
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;  enable          1   20[COMRAM] unsigned char 
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  1    wreg      void 
  2969 ;; Registers used:
  2970 ;;		wreg, status,2, status,0
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2976 ;;      Params:         1       0       0       0       0       0       0
  2977 ;;      Locals:         1       0       0       0       0       0       0
  2978 ;;      Temps:          2       0       0       0       0       0       0
  2979 ;;      Totals:         4       0       0       0       0       0       0
  2980 ;;Total ram usage:        4 bytes
  2981 ;; Hardware stack levels used:    1
  2982 ;; Hardware stack levels required when called:    4
  2983 ;; This function calls:
  2984 ;;		Nothing
  2985 ;; This function is called by:
  2986 ;;		_resetPosition
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           	psect	text12
  2991  0021D6                     __ptext12:
  2992                           	callstack 0
  2993  0021D6                     _enableMotor:
  2994                           	callstack 0
  2995  0021D6  FFFF               	dw	65535	; assembler added errata NOP
  2996                           
  2997                           ;incstack = 0
  2998                           ;enableMotor@enable stored from wreg
  2999  0021D8  6E15               	movwf	enableMotor@enable^0,c
  3000  0021DA                     
  3001                           ;motors.c: 94:     switch(motor){
  3002  0021DA  EF07  F011         	goto	l3821
  3003  0021DE                     l3813:
  3004  0021DE  FFFF               	dw	65535	; assembler added errata NOP
  3005                           
  3006                           ;motors.c: 96:             LATAbits.LATA3 = enable;
  3007  0021E0  B015               	btfsc	enableMotor@enable^0,0,c
  3008  0021E2  D002               	bra	u3145
  3009  0021E4  9689               	bcf	137,3,c	;volatile
  3010  0021E6  D001               	bra	u3146
  3011  0021E8                     u3145:
  3012  0021E8  8689               	bsf	137,3,c	;volatile
  3013  0021EA                     u3146:
  3014                           
  3015                           ;motors.c: 97:             break;
  3016  0021EA  EF22  F011         	goto	l94
  3017  0021EE                     l3815:
  3018  0021EE  FFFF               	dw	65535	; assembler added errata NOP
  3019                           
  3020                           ;motors.c: 99:             LATBbits.LATB5 = enable;
  3021  0021F0  B015               	btfsc	enableMotor@enable^0,0,c
  3022  0021F2  D002               	bra	u3155
  3023  0021F4  9A8A               	bcf	138,5,c	;volatile
  3024  0021F6  D001               	bra	u3156
  3025  0021F8                     u3155:
  3026  0021F8  8A8A               	bsf	138,5,c	;volatile
  3027  0021FA                     u3156:
  3028                           
  3029                           ;motors.c: 100:             break;
  3030  0021FA  EF22  F011         	goto	l94
  3031  0021FE                     l3817:
  3032  0021FE  FFFF               	dw	65535	; assembler added errata NOP
  3033                           
  3034                           ;motors.c: 102:             LATCbits.LATC3 = enable;
  3035  002200  B015               	btfsc	enableMotor@enable^0,0,c
  3036  002202  D002               	bra	u3165
  3037  002204  968B               	bcf	139,3,c	;volatile
  3038  002206  D001               	bra	u3166
  3039  002208                     u3165:
  3040  002208  868B               	bsf	139,3,c	;volatile
  3041  00220A                     u3166:
  3042                           
  3043                           ;motors.c: 103:             break;
  3044  00220A  EF22  F011         	goto	l94
  3045  00220E                     l3821:
  3046  00220E  FFFF               	dw	65535	; assembler added errata NOP
  3047  002210  5012               	movf	enableMotor@motor^0,w,c
  3048  002212  6E13               	movwf	??_enableMotor^0,c
  3049  002214  6A14               	clrf	(??_enableMotor+1)^0,c
  3050                           
  3051                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3052                           ; Switch size 1, requested type "simple"
  3053                           ; Number of cases is 1, Range of values is 0 to 0
  3054                           ; switch strategies available:
  3055                           ; Name         Instructions Cycles
  3056                           ; simple_byte            4     3 (average)
  3057                           ;	Chosen strategy is simple_byte
  3058  002216  5014               	movf	(??_enableMotor+1)^0,w,c
  3059  002218  0A00               	xorlw	0	; case 0
  3060  00221A  B4D8               	btfsc	status,2,c
  3061  00221C  EF12  F011         	goto	l4671
  3062  002220  EF22  F011         	goto	l94
  3063  002224                     l4671:
  3064  002224  FFFF               	dw	65535	; assembler added errata NOP
  3065                           
  3066                           ; Switch size 1, requested type "simple"
  3067                           ; Number of cases is 3, Range of values is 0 to 2
  3068                           ; switch strategies available:
  3069                           ; Name         Instructions Cycles
  3070                           ; simple_byte           10     6 (average)
  3071                           ;	Chosen strategy is simple_byte
  3072  002226  5013               	movf	??_enableMotor^0,w,c
  3073  002228  0A00               	xorlw	0	; case 0
  3074  00222A  B4D8               	btfsc	status,2,c
  3075  00222C  EFEF  F010         	goto	l3813
  3076  002230  0A01               	xorlw	1	; case 1
  3077  002232  B4D8               	btfsc	status,2,c
  3078  002234  EFF7  F010         	goto	l3815
  3079  002238  0A03               	xorlw	3	; case 2
  3080  00223A  B4D8               	btfsc	status,2,c
  3081  00223C  EFFF  F010         	goto	l3817
  3082  002240  EF22  F011         	goto	l94
  3083  002244                     l94:
  3084  002244  FFFF               	dw	65535	; assembler added errata NOP
  3085  002246  0012               	return		;funcret
  3086  002248  FFFF               	dw	65535	; errata NOP
  3087  00224A                     __end_of_enableMotor:
  3088                           	callstack 0
  3089                           
  3090 ;; *************** function _resetNewSequence *****************
  3091 ;; Defined at:
  3092 ;;		line 73 in file "usart.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;		None
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;		None
  3097 ;; Return value:  Size  Location     Type
  3098 ;;                  1    wreg      void 
  3099 ;; Registers used:
  3100 ;;		wreg, status,2
  3101 ;; Tracked objects:
  3102 ;;		On entry : 0/0
  3103 ;;		On exit  : 0/0
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3106 ;;      Params:         0       0       0       0       0       0       0
  3107 ;;      Locals:         0       0       0       0       0       0       0
  3108 ;;      Temps:          0       0       0       0       0       0       0
  3109 ;;      Totals:         0       0       0       0       0       0       0
  3110 ;;Total ram usage:        0 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; Hardware stack levels required when called:    4
  3113 ;; This function calls:
  3114 ;;		Nothing
  3115 ;; This function is called by:
  3116 ;;		_main
  3117 ;; This function uses a non-reentrant model
  3118 ;;
  3119                           
  3120                           	psect	text13
  3121  00266E                     __ptext13:
  3122                           	callstack 0
  3123  00266E                     _resetNewSequence:
  3124                           	callstack 0
  3125  00266E  FFFF               	dw	65535	; assembler added errata NOP
  3126  002670                     
  3127                           ;usart.c: 74:     _newSequence = 0;
  3128  002670  0E00               	movlw	0
  3129  002672  6E61               	movwf	__newSequence^0,c
  3130  002674  0012               	return		;funcret
  3131  002676  FFFF               	dw	65535	; errata NOP
  3132  002678                     __end_of_resetNewSequence:
  3133                           	callstack 0
  3134                           
  3135 ;; *************** function _reduceSeq *****************
  3136 ;; Defined at:
  3137 ;;		line 50 in file "usart.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;		None
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;		None
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  1    wreg      void 
  3144 ;; Registers used:
  3145 ;;		status,2, status,0
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3151 ;;      Params:         0       0       0       0       0       0       0
  3152 ;;      Locals:         0       0       0       0       0       0       0
  3153 ;;      Temps:          0       0       0       0       0       0       0
  3154 ;;      Totals:         0       0       0       0       0       0       0
  3155 ;;Total ram usage:        0 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    4
  3158 ;; This function calls:
  3159 ;;		Nothing
  3160 ;; This function is called by:
  3161 ;;		_main
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           	psect	text14
  3166  0026BE                     __ptext14:
  3167                           	callstack 0
  3168  0026BE                     _reduceSeq:
  3169                           	callstack 0
  3170  0026BE  FFFF               	dw	65535	; assembler added errata NOP
  3171  0026C0                     
  3172                           ;usart.c: 51:     dataCounter--;
  3173  0026C0  0663               	decf	_dataCounter^0,f,c
  3174  0026C2  0012               	return		;funcret
  3175  0026C4  FFFF               	dw	65535	; errata NOP
  3176  0026C6                     __end_of_reduceSeq:
  3177                           	callstack 0
  3178                           
  3179 ;; *************** function _readSeq *****************
  3180 ;; Defined at:
  3181 ;;		line 57 in file "usart.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;		None
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;		None
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  1    wreg      unsigned char 
  3188 ;; Registers used:
  3189 ;;		wreg, status,2
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3195 ;;      Params:         0       0       0       0       0       0       0
  3196 ;;      Locals:         0       0       0       0       0       0       0
  3197 ;;      Temps:          0       0       0       0       0       0       0
  3198 ;;      Totals:         0       0       0       0       0       0       0
  3199 ;;Total ram usage:        0 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; Hardware stack levels required when called:    4
  3202 ;; This function calls:
  3203 ;;		Nothing
  3204 ;; This function is called by:
  3205 ;;		_main
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           	psect	text15
  3210  0026C6                     __ptext15:
  3211                           	callstack 0
  3212  0026C6                     _readSeq:
  3213                           	callstack 0
  3214  0026C6  FFFF               	dw	65535	; assembler added errata NOP
  3215  0026C8                     
  3216                           ;usart.c: 58:     return dataCounter;
  3217  0026C8  5063               	movf	_dataCounter^0,w,c
  3218  0026CA  0012               	return		;funcret
  3219  0026CC  FFFF               	dw	65535	; errata NOP
  3220  0026CE                     __end_of_readSeq:
  3221                           	callstack 0
  3222                           
  3223 ;; *************** function _newSequence *****************
  3224 ;; Defined at:
  3225 ;;		line 65 in file "usart.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;		None
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;		None
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  1    wreg      unsigned char 
  3232 ;; Registers used:
  3233 ;;		wreg, status,2
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3239 ;;      Params:         0       0       0       0       0       0       0
  3240 ;;      Locals:         0       0       0       0       0       0       0
  3241 ;;      Temps:          0       0       0       0       0       0       0
  3242 ;;      Totals:         0       0       0       0       0       0       0
  3243 ;;Total ram usage:        0 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:    4
  3246 ;; This function calls:
  3247 ;;		Nothing
  3248 ;; This function is called by:
  3249 ;;		_main
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           	psect	text16
  3254  0026CE                     __ptext16:
  3255                           	callstack 0
  3256  0026CE                     _newSequence:
  3257                           	callstack 0
  3258  0026CE  FFFF               	dw	65535	; assembler added errata NOP
  3259  0026D0                     
  3260                           ;usart.c: 66:     return _newSequence;
  3261  0026D0  5061               	movf	__newSequence^0,w,c
  3262  0026D2  0012               	return		;funcret
  3263  0026D4  FFFF               	dw	65535	; errata NOP
  3264  0026D6                     __end_of_newSequence:
  3265                           	callstack 0
  3266                           
  3267 ;; *************** function _interruptInit *****************
  3268 ;; Defined at:
  3269 ;;		line 21 in file "interrupt.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;		None
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;		None
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  1    wreg      void 
  3276 ;; Registers used:
  3277 ;;		None
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3283 ;;      Params:         0       0       0       0       0       0       0
  3284 ;;      Locals:         0       0       0       0       0       0       0
  3285 ;;      Temps:          0       0       0       0       0       0       0
  3286 ;;      Totals:         0       0       0       0       0       0       0
  3287 ;;Total ram usage:        0 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:    4
  3290 ;; This function calls:
  3291 ;;		Nothing
  3292 ;; This function is called by:
  3293 ;;		_main
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text17
  3298  00248A                     __ptext17:
  3299                           	callstack 0
  3300  00248A                     _interruptInit:
  3301                           	callstack 0
  3302  00248A  FFFF               	dw	65535	; assembler added errata NOP
  3303  00248C                     
  3304                           ;interrupt.c: 23:     if(!INTCONbits.GIE){
  3305  00248C  BEF2               	btfsc	242,7,c	;volatile
  3306  00248E  EF4B  F012         	goto	u3731
  3307  002492  EF4E  F012         	goto	u3730
  3308  002496                     u3731:
  3309  002496  FFFF               	dw	65535	; assembler added errata NOP
  3310  002498  EF50  F012         	goto	l435
  3311  00249C                     u3730:
  3312  00249C  FFFF               	dw	65535	; assembler added errata NOP
  3313  00249E                     
  3314                           ;interrupt.c: 24:         INTCONbits.GIE = 1;
  3315  00249E  8EF2               	bsf	242,7,c	;volatile
  3316  0024A0                     l435:
  3317  0024A0  FFFF               	dw	65535	; assembler added errata NOP
  3318                           
  3319                           ;interrupt.c: 26:     if(!INTCONbits.PEIE){
  3320  0024A2  BCF2               	btfsc	242,6,c	;volatile
  3321  0024A4  EF56  F012         	goto	u3741
  3322  0024A8  EF59  F012         	goto	u3740
  3323  0024AC                     u3741:
  3324  0024AC  FFFF               	dw	65535	; assembler added errata NOP
  3325  0024AE  EF5B  F012         	goto	l436
  3326  0024B2                     u3740:
  3327  0024B2  FFFF               	dw	65535	; assembler added errata NOP
  3328  0024B4                     
  3329                           ;interrupt.c: 27:         INTCONbits.PEIE = 1;
  3330  0024B4  8CF2               	bsf	242,6,c	;volatile
  3331  0024B6                     l436:
  3332  0024B6  FFFF               	dw	65535	; assembler added errata NOP
  3333                           
  3334                           ;interrupt.c: 31:     RCONbits.IPEN = 1;
  3335  0024B8  8ED0               	bsf	208,7,c	;volatile
  3336                           
  3337                           ;interrupt.c: 32:     INTCONbits.T0IE = 1;
  3338  0024BA  8AF2               	bsf	242,5,c	;volatile
  3339                           
  3340                           ;interrupt.c: 33:     PIE1bits.TMR1IE = 1;
  3341  0024BC  809D               	bsf	157,0,c	;volatile
  3342                           
  3343                           ;interrupt.c: 34:     PIE1bits.TMR2IE = 1;
  3344  0024BE  829D               	bsf	157,1,c	;volatile
  3345                           
  3346                           ;interrupt.c: 35:     PIE1bits.RC1IE = 1;
  3347  0024C0  8A9D               	bsf	157,5,c	;volatile
  3348  0024C2  0012               	return		;funcret
  3349  0024C4  FFFF               	dw	65535	; errata NOP
  3350  0024C6                     __end_of_interruptInit:
  3351                           	callstack 0
  3352                           
  3353 ;; *************** function _initPinMotors *****************
  3354 ;; Defined at:
  3355 ;;		line 41 in file "motors.c"
  3356 ;; Parameters:    Size  Location     Type
  3357 ;;		None
  3358 ;; Auto vars:     Size  Location     Type
  3359 ;;		None
  3360 ;; Return value:  Size  Location     Type
  3361 ;;                  1    wreg      void 
  3362 ;; Registers used:
  3363 ;;		wreg, status,2, status,0
  3364 ;; Tracked objects:
  3365 ;;		On entry : 0/0
  3366 ;;		On exit  : 0/0
  3367 ;;		Unchanged: 0/0
  3368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3369 ;;      Params:         0       0       0       0       0       0       0
  3370 ;;      Locals:         0       0       0       0       0       0       0
  3371 ;;      Temps:          0       0       0       0       0       0       0
  3372 ;;      Totals:         0       0       0       0       0       0       0
  3373 ;;Total ram usage:        0 bytes
  3374 ;; Hardware stack levels used:    1
  3375 ;; Hardware stack levels required when called:    4
  3376 ;; This function calls:
  3377 ;;		Nothing
  3378 ;; This function is called by:
  3379 ;;		_main
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           	psect	text18
  3384  00254E                     __ptext18:
  3385                           	callstack 0
  3386  00254E                     _initPinMotors:
  3387                           	callstack 0
  3388  00254E  FFFF               	dw	65535	; assembler added errata NOP
  3389  002550                     
  3390                           ;motors.c: 43:     ADCON1bits.PCFG = 0x06;
  3391  002550  50C1               	movf	193,w,c	;volatile
  3392  002552  0BF0               	andlw	-16
  3393  002554  0906               	iorlw	6
  3394  002556  6EC1               	movwf	193,c	;volatile
  3395  002558                     
  3396                           ;motors.c: 44:     TRISA &= 0b11010001;
  3397  002558  0ED1               	movlw	209
  3398  00255A  1692               	andwf	146,f,c	;volatile
  3399  00255C                     
  3400                           ;motors.c: 46:     TRISB &= 0b00000010;
  3401  00255C  0E02               	movlw	2
  3402  00255E  1693               	andwf	147,f,c	;volatile
  3403  002560                     
  3404                           ;motors.c: 47:     TRISC &= 0b11000000;
  3405  002560  0EC0               	movlw	192
  3406  002562  1694               	andwf	148,f,c	;volatile
  3407  002564                     
  3408                           ;motors.c: 48:     TRISD &= 0b11000000;
  3409  002564  0EC0               	movlw	192
  3410  002566  1695               	andwf	149,f,c	;volatile
  3411  002568                     
  3412                           ;motors.c: 51:     TRISEbits.TRISE0 = 1;
  3413  002568  8096               	bsf	150,0,c	;volatile
  3414  00256A                     
  3415                           ;motors.c: 52:     TRISEbits.TRISE1 = 1;
  3416  00256A  8296               	bsf	150,1,c	;volatile
  3417  00256C                     
  3418                           ;motors.c: 53:     TRISEbits.TRISE2 = 1;
  3419  00256C  8496               	bsf	150,2,c	;volatile
  3420  00256E                     
  3421                           ;motors.c: 56:     TRISDbits.TRISD7 = 1;
  3422  00256E  8E95               	bsf	149,7,c	;volatile
  3423  002570  0012               	return		;funcret
  3424  002572  FFFF               	dw	65535	; errata NOP
  3425  002574                     __end_of_initPinMotors:
  3426                           	callstack 0
  3427                           
  3428 ;; *************** function _initADC *****************
  3429 ;; Defined at:
  3430 ;;		line 18 in file "adc.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;		None
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;		None
  3435 ;; Return value:  Size  Location     Type
  3436 ;;                  1    wreg      void 
  3437 ;; Registers used:
  3438 ;;		wreg, status,2
  3439 ;; Tracked objects:
  3440 ;;		On entry : 0/0
  3441 ;;		On exit  : 0/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3444 ;;      Params:         0       0       0       0       0       0       0
  3445 ;;      Locals:         0       0       0       0       0       0       0
  3446 ;;      Temps:          0       0       0       0       0       0       0
  3447 ;;      Totals:         0       0       0       0       0       0       0
  3448 ;;Total ram usage:        0 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; Hardware stack levels required when called:    4
  3451 ;; This function calls:
  3452 ;;		Nothing
  3453 ;; This function is called by:
  3454 ;;		_main
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458                           	psect	text19
  3459  002574                     __ptext19:
  3460                           	callstack 0
  3461  002574                     _initADC:
  3462                           	callstack 0
  3463  002574  FFFF               	dw	65535	; assembler added errata NOP
  3464  002576                     
  3465                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3466  002576  50C2               	movf	194,w,c	;volatile
  3467  002578  0B3F               	andlw	-193
  3468  00257A  0940               	iorlw	64
  3469  00257C  6EC2               	movwf	194,c	;volatile
  3470  00257E                     
  3471                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3472  00257E  8CC1               	bsf	193,6,c	;volatile
  3473                           
  3474                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3475  002580  0EC7               	movlw	-57
  3476  002582  16C2               	andwf	194,f,c	;volatile
  3477  002584                     
  3478                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3479  002584  94C2               	bcf	194,2,c	;volatile
  3480  002586                     
  3481                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3482  002586  90C2               	bcf	194,0,c	;volatile
  3483  002588                     
  3484                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3485  002588  9EC1               	bcf	193,7,c	;volatile
  3486                           
  3487                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3488  00258A  50C1               	movf	193,w,c	;volatile
  3489  00258C  0BF0               	andlw	-16
  3490  00258E  090E               	iorlw	14
  3491  002590  6EC1               	movwf	193,c	;volatile
  3492  002592                     
  3493                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3494  002592  8C9D               	bsf	157,6,c	;volatile
  3495  002594                     
  3496                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3497  002594  8C9F               	bsf	159,6,c	;volatile
  3498  002596  0012               	return		;funcret
  3499  002598  FFFF               	dw	65535	; errata NOP
  3500  00259A                     __end_of_initADC:
  3501                           	callstack 0
  3502                           
  3503 ;; *************** function _getNewSequence *****************
  3504 ;; Defined at:
  3505 ;;		line 43 in file "usart.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;		None
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;		None
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  2   17[COMRAM] PTR struct .
  3512 ;; Registers used:
  3513 ;;		wreg, status,2, status,0
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3519 ;;      Params:         2       0       0       0       0       0       0
  3520 ;;      Locals:         0       0       0       0       0       0       0
  3521 ;;      Temps:          0       0       0       0       0       0       0
  3522 ;;      Totals:         2       0       0       0       0       0       0
  3523 ;;Total ram usage:        2 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    4
  3526 ;; This function calls:
  3527 ;;		Nothing
  3528 ;; This function is called by:
  3529 ;;		_main
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text20
  3534  002604                     __ptext20:
  3535                           	callstack 0
  3536  002604                     _getNewSequence:
  3537                           	callstack 0
  3538  002604  FFFF               	dw	65535	; assembler added errata NOP
  3539  002606                     
  3540                           ;usart.c: 44:     return(&newSequenceData);
  3541  002606  0EEF               	movlw	low _newSequenceData
  3542  002608  6E12               	movwf	?_getNewSequence^0,c
  3543  00260A  0E00               	movlw	high _newSequenceData
  3544  00260C  6E13               	movwf	(?_getNewSequence+1)^0,c
  3545  00260E  0012               	return		;funcret
  3546  002610  FFFF               	dw	65535	; errata NOP
  3547  002612                     __end_of_getNewSequence:
  3548                           	callstack 0
  3549                           
  3550 ;; *************** function _executeData *****************
  3551 ;; Defined at:
  3552 ;;		line 103 in file "main.c"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;		None
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;  data            2    1[BANK1 ] PTR struct .
  3557 ;;		 -> dataSequence(20), 
  3558 ;;  errCode         1    0[BANK1 ] unsigned char 
  3559 ;; Return value:  Size  Location     Type
  3560 ;;                  1    wreg      unsigned char 
  3561 ;; Registers used:
  3562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3568 ;;      Params:         0       0       0       0       0       0       0
  3569 ;;      Locals:         0       0       3       0       0       0       0
  3570 ;;      Temps:          2       0       0       0       0       0       0
  3571 ;;      Totals:         2       0       3       0       0       0       0
  3572 ;;Total ram usage:        5 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:    6
  3575 ;; This function calls:
  3576 ;;		_getData
  3577 ;;		_liftArm
  3578 ;;		_moveToPoint
  3579 ;;		_pickObject
  3580 ;;		_releaseObj
  3581 ;;		_rotateObj
  3582 ;;		_touchObject
  3583 ;;		_touchTherm
  3584 ;; This function is called by:
  3585 ;;		_main
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           	psect	text21
  3590  000D6A                     __ptext21:
  3591                           	callstack 0
  3592  000D6A                     _executeData:
  3593                           	callstack 0
  3594  000D6A  FFFF               	dw	65535	; assembler added errata NOP
  3595  000D6C                     
  3596                           ;main.c: 104:     t_sequence *data = getData();
  3597  000D6C  EC09  F013         	call	_getData	;wreg free
  3598  000D70  C012  F1D7         	movff	?_getData,executeData@data
  3599  000D74  C013  F1D8         	movff	?_getData+1,executeData@data+1
  3600  000D78                     
  3601                           ;main.c: 110:     switch(data->feederLine){
  3602  000D78  EF68  F007         	goto	l4315
  3603  000D7C                     l4287:
  3604  000D7C  FFFF               	dw	65535	; assembler added errata NOP
  3605                           
  3606                           ;main.c: 113:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3607  000D7E  C04E  F016         	movff	_posVector,moveToPoint@x1
  3608  000D82  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3609  000D84  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3610  000D88  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3611  000D8A  0E0D               	movlw	low _feeder1Pos
  3612  000D8C  6EF6               	movwf	tblptrl,c
  3613  000D8E                     	if	1	;There is more than 1 active tblptr byte
  3614  000D8E  0E06               	movlw	high _feeder1Pos
  3615  000D90  6EF7               	movwf	tblptrh,c
  3616  000D92                     	endif
  3617  000D92                     	if	0	;There are less than 3 active tblptr bytes
  3618  000D92                     	endif
  3619  000D92  0008               	tblrd		*
  3620  000D94  FFFF               	dw	65535	; errata NOP
  3621  000D96  50F5               	movf	tablat,w,c
  3622  000D98  6E1A               	movwf	moveToPoint@x2^0,c
  3623  000D9A  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3624  000D9C  0E0E               	movlw	low (_feeder1Pos+1)
  3625  000D9E  6EF6               	movwf	tblptrl,c
  3626  000DA0  0E06               	movlw	high (_feeder1Pos+1)
  3627  000DA2  6EF7               	movwf	tblptrh,c
  3628  000DA4                     	if	0	;tblptru may be non-zero
  3629  000DA4                     	endif
  3630  000DA4                     	if	0	;tblptru may be non-zero
  3631  000DA4                     	endif
  3632  000DA4  0008               	tblrd		*
  3633  000DA6  FFFF               	dw	65535	; errata NOP
  3634  000DA8  50F5               	movf	tablat,w,c
  3635  000DAA  6E1C               	movwf	moveToPoint@y2^0,c
  3636  000DAC  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3637  000DAE  EC22  F005         	call	_moveToPoint	;wreg free
  3638  000DB2  0101               	movlb	1	; () banked
  3639  000DB4  6FD6               	movwf	executeData@errCode& (0+255),b
  3640  000DB6                     
  3641                           ; BSR set to: 1
  3642                           ;main.c: 115:             posVector[0] = feeder1Pos[0];
  3643  000DB6  0E0D               	movlw	low _feeder1Pos
  3644  000DB8  6EF6               	movwf	tblptrl,c
  3645  000DBA                     	if	1	;There is more than 1 active tblptr byte
  3646  000DBA  0E06               	movlw	high _feeder1Pos
  3647  000DBC  6EF7               	movwf	tblptrh,c
  3648  000DBE                     	endif
  3649  000DBE                     	if	0	;There are less than 3 active tblptr bytes
  3650  000DBE                     	endif
  3651  000DBE  0008               	tblrd		*
  3652  000DC0  FFFF               	dw	65535	; errata NOP
  3653  000DC2  CFF5 F04E          	movff	tablat,_posVector
  3654  000DC6                     
  3655                           ; BSR set to: 1
  3656                           ;main.c: 116:             posVector[1] = feeder1Pos[1];
  3657  000DC6  0E0E               	movlw	low (_feeder1Pos+1)
  3658  000DC8  6EF6               	movwf	tblptrl,c
  3659  000DCA  0E06               	movlw	high (_feeder1Pos+1)
  3660  000DCC  6EF7               	movwf	tblptrh,c
  3661  000DCE                     	if	0	;tblptru may be non-zero
  3662  000DCE                     	endif
  3663  000DCE                     	if	0	;tblptru may be non-zero
  3664  000DCE                     	endif
  3665  000DCE  0008               	tblrd		*
  3666  000DD0  FFFF               	dw	65535	; errata NOP
  3667  000DD2  CFF5 F04F          	movff	tablat,_posVector+1
  3668                           
  3669                           ;main.c: 117:             break;
  3670  000DD6  EF8B  F007         	goto	l4317
  3671  000DDA                     l4293:
  3672  000DDA  FFFF               	dw	65535	; assembler added errata NOP
  3673                           
  3674                           ;main.c: 119:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3675  000DDC  C04E  F016         	movff	_posVector,moveToPoint@x1
  3676  000DE0  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3677  000DE2  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3678  000DE6  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3679  000DE8  0E0B               	movlw	low _feeder2Pos
  3680  000DEA  6EF6               	movwf	tblptrl,c
  3681  000DEC                     	if	1	;There is more than 1 active tblptr byte
  3682  000DEC  0E06               	movlw	high _feeder2Pos
  3683  000DEE  6EF7               	movwf	tblptrh,c
  3684  000DF0                     	endif
  3685  000DF0                     	if	0	;There are less than 3 active tblptr bytes
  3686  000DF0                     	endif
  3687  000DF0  0008               	tblrd		*
  3688  000DF2  FFFF               	dw	65535	; errata NOP
  3689  000DF4  50F5               	movf	tablat,w,c
  3690  000DF6  6E1A               	movwf	moveToPoint@x2^0,c
  3691  000DF8  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3692  000DFA  0E0C               	movlw	low (_feeder2Pos+1)
  3693  000DFC  6EF6               	movwf	tblptrl,c
  3694  000DFE  0E06               	movlw	high (_feeder2Pos+1)
  3695  000E00  6EF7               	movwf	tblptrh,c
  3696  000E02                     	if	0	;tblptru may be non-zero
  3697  000E02                     	endif
  3698  000E02                     	if	0	;tblptru may be non-zero
  3699  000E02                     	endif
  3700  000E02  0008               	tblrd		*
  3701  000E04  FFFF               	dw	65535	; errata NOP
  3702  000E06  50F5               	movf	tablat,w,c
  3703  000E08  6E1C               	movwf	moveToPoint@y2^0,c
  3704  000E0A  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3705  000E0C  EC22  F005         	call	_moveToPoint	;wreg free
  3706  000E10  0101               	movlb	1	; () banked
  3707  000E12  6FD6               	movwf	executeData@errCode& (0+255),b
  3708  000E14                     
  3709                           ; BSR set to: 1
  3710                           ;main.c: 120:             posVector[0] = feeder2Pos[0];
  3711  000E14  0E0B               	movlw	low _feeder2Pos
  3712  000E16  6EF6               	movwf	tblptrl,c
  3713  000E18                     	if	1	;There is more than 1 active tblptr byte
  3714  000E18  0E06               	movlw	high _feeder2Pos
  3715  000E1A  6EF7               	movwf	tblptrh,c
  3716  000E1C                     	endif
  3717  000E1C                     	if	0	;There are less than 3 active tblptr bytes
  3718  000E1C                     	endif
  3719  000E1C  0008               	tblrd		*
  3720  000E1E  FFFF               	dw	65535	; errata NOP
  3721  000E20  CFF5 F04E          	movff	tablat,_posVector
  3722  000E24                     
  3723                           ; BSR set to: 1
  3724                           ;main.c: 121:             posVector[1] = feeder2Pos[1];
  3725  000E24  0E0C               	movlw	low (_feeder2Pos+1)
  3726  000E26  6EF6               	movwf	tblptrl,c
  3727  000E28  0E06               	movlw	high (_feeder2Pos+1)
  3728  000E2A  6EF7               	movwf	tblptrh,c
  3729  000E2C                     	if	0	;tblptru may be non-zero
  3730  000E2C                     	endif
  3731  000E2C                     	if	0	;tblptru may be non-zero
  3732  000E2C                     	endif
  3733  000E2C  0008               	tblrd		*
  3734  000E2E  FFFF               	dw	65535	; errata NOP
  3735  000E30  CFF5 F04F          	movff	tablat,_posVector+1
  3736                           
  3737                           ;main.c: 122:             break;
  3738  000E34  EF8B  F007         	goto	l4317
  3739  000E38                     l4299:
  3740  000E38  FFFF               	dw	65535	; assembler added errata NOP
  3741                           
  3742                           ;main.c: 124:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3743  000E3A  C04E  F016         	movff	_posVector,moveToPoint@x1
  3744  000E3E  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3745  000E40  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3746  000E44  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3747  000E46  0E09               	movlw	low _feeder3Pos
  3748  000E48  6EF6               	movwf	tblptrl,c
  3749  000E4A                     	if	1	;There is more than 1 active tblptr byte
  3750  000E4A  0E06               	movlw	high _feeder3Pos
  3751  000E4C  6EF7               	movwf	tblptrh,c
  3752  000E4E                     	endif
  3753  000E4E                     	if	0	;There are less than 3 active tblptr bytes
  3754  000E4E                     	endif
  3755  000E4E  0008               	tblrd		*
  3756  000E50  FFFF               	dw	65535	; errata NOP
  3757  000E52  50F5               	movf	tablat,w,c
  3758  000E54  6E1A               	movwf	moveToPoint@x2^0,c
  3759  000E56  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3760  000E58  0E0A               	movlw	low (_feeder3Pos+1)
  3761  000E5A  6EF6               	movwf	tblptrl,c
  3762  000E5C  0E06               	movlw	high (_feeder3Pos+1)
  3763  000E5E  6EF7               	movwf	tblptrh,c
  3764  000E60                     	if	0	;tblptru may be non-zero
  3765  000E60                     	endif
  3766  000E60                     	if	0	;tblptru may be non-zero
  3767  000E60                     	endif
  3768  000E60  0008               	tblrd		*
  3769  000E62  FFFF               	dw	65535	; errata NOP
  3770  000E64  50F5               	movf	tablat,w,c
  3771  000E66  6E1C               	movwf	moveToPoint@y2^0,c
  3772  000E68  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3773  000E6A  EC22  F005         	call	_moveToPoint	;wreg free
  3774  000E6E  0101               	movlb	1	; () banked
  3775  000E70  6FD6               	movwf	executeData@errCode& (0+255),b
  3776  000E72                     
  3777                           ; BSR set to: 1
  3778                           ;main.c: 125:             posVector[0] = feeder3Pos[0];
  3779  000E72  0E09               	movlw	low _feeder3Pos
  3780  000E74  6EF6               	movwf	tblptrl,c
  3781  000E76                     	if	1	;There is more than 1 active tblptr byte
  3782  000E76  0E06               	movlw	high _feeder3Pos
  3783  000E78  6EF7               	movwf	tblptrh,c
  3784  000E7A                     	endif
  3785  000E7A                     	if	0	;There are less than 3 active tblptr bytes
  3786  000E7A                     	endif
  3787  000E7A  0008               	tblrd		*
  3788  000E7C  FFFF               	dw	65535	; errata NOP
  3789  000E7E  CFF5 F04E          	movff	tablat,_posVector
  3790  000E82                     
  3791                           ; BSR set to: 1
  3792                           ;main.c: 126:             posVector[1] = feeder3Pos[1];
  3793  000E82  0E0A               	movlw	low (_feeder3Pos+1)
  3794  000E84  6EF6               	movwf	tblptrl,c
  3795  000E86  0E06               	movlw	high (_feeder3Pos+1)
  3796  000E88  6EF7               	movwf	tblptrh,c
  3797  000E8A                     	if	0	;tblptru may be non-zero
  3798  000E8A                     	endif
  3799  000E8A                     	if	0	;tblptru may be non-zero
  3800  000E8A                     	endif
  3801  000E8A  0008               	tblrd		*
  3802  000E8C  FFFF               	dw	65535	; errata NOP
  3803  000E8E  CFF5 F04F          	movff	tablat,_posVector+1
  3804                           
  3805                           ;main.c: 127:             break;
  3806  000E92  EF8B  F007         	goto	l4317
  3807  000E96                     l4305:
  3808  000E96  FFFF               	dw	65535	; assembler added errata NOP
  3809                           
  3810                           ;main.c: 131:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3811  000E98  C04E  F016         	movff	_posVector,moveToPoint@x1
  3812  000E9C  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3813  000E9E  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3814  000EA2  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3815  000EA4  C057  F01A         	movff	_newFeeder,moveToPoint@x2
  3816  000EA8  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3817  000EAA  C058  F01C         	movff	_newFeeder+1,moveToPoint@y2
  3818  000EAE  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3819  000EB0  EC22  F005         	call	_moveToPoint	;wreg free
  3820  000EB4  0101               	movlb	1	; () banked
  3821  000EB6  6FD6               	movwf	executeData@errCode& (0+255),b
  3822  000EB8                     
  3823                           ; BSR set to: 1
  3824                           ;main.c: 132:             posVector[0] = newFeeder[0];
  3825  000EB8  C057  F04E         	movff	_newFeeder,_posVector
  3826  000EBC                     
  3827                           ; BSR set to: 1
  3828                           ;main.c: 133:             posVector[1] = newFeeder[1];
  3829  000EBC  C058  F04F         	movff	_newFeeder+1,_posVector+1
  3830                           
  3831                           ;main.c: 134:             break;
  3832  000EC0  EF8B  F007         	goto	l4317
  3833  000EC4                     l4311:
  3834  000EC4  FFFF               	dw	65535	; assembler added errata NOP
  3835                           
  3836                           ;main.c: 138:             errCode = 1;
  3837  000EC6  0E01               	movlw	1
  3838  000EC8  0101               	movlb	1	; () banked
  3839  000ECA  6FD6               	movwf	executeData@errCode& (0+255),b
  3840                           
  3841                           ;main.c: 139:             break;
  3842  000ECC  EF8B  F007         	goto	l4317
  3843  000ED0                     l4315:
  3844  000ED0  FFFF               	dw	65535	; assembler added errata NOP
  3845  000ED2  C1D7  FFD9         	movff	executeData@data,fsr2l
  3846  000ED6  C1D8  FFDA         	movff	executeData@data+1,fsr2h
  3847  000EDA  50DF               	movf	indf2,w,c
  3848  000EDC  6E43               	movwf	??_executeData^0,c
  3849  000EDE  6A44               	clrf	(??_executeData+1)^0,c
  3850                           
  3851                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3852                           ; Switch size 1, requested type "simple"
  3853                           ; Number of cases is 1, Range of values is 0 to 0
  3854                           ; switch strategies available:
  3855                           ; Name         Instructions Cycles
  3856                           ; simple_byte            4     3 (average)
  3857                           ;	Chosen strategy is simple_byte
  3858  000EE0  5044               	movf	(??_executeData+1)^0,w,c
  3859  000EE2  0A00               	xorlw	0	; case 0
  3860  000EE4  B4D8               	btfsc	status,2,c
  3861  000EE6  EF77  F007         	goto	l4673
  3862  000EEA  EF62  F007         	goto	l4311
  3863  000EEE                     l4673:
  3864  000EEE  FFFF               	dw	65535	; assembler added errata NOP
  3865                           
  3866                           ; Switch size 1, requested type "simple"
  3867                           ; Number of cases is 4, Range of values is 0 to 255
  3868                           ; switch strategies available:
  3869                           ; Name         Instructions Cycles
  3870                           ; simple_byte           13     7 (average)
  3871                           ;	Chosen strategy is simple_byte
  3872  000EF0  5043               	movf	??_executeData^0,w,c
  3873  000EF2  0A00               	xorlw	0	; case 0
  3874  000EF4  B4D8               	btfsc	status,2,c
  3875  000EF6  EFBE  F006         	goto	l4287
  3876  000EFA  0A01               	xorlw	1	; case 1
  3877  000EFC  B4D8               	btfsc	status,2,c
  3878  000EFE  EFED  F006         	goto	l4293
  3879  000F02  0A03               	xorlw	3	; case 2
  3880  000F04  B4D8               	btfsc	status,2,c
  3881  000F06  EF1C  F007         	goto	l4299
  3882  000F0A  0AFD               	xorlw	253	; case 255
  3883  000F0C  B4D8               	btfsc	status,2,c
  3884  000F0E  EF4B  F007         	goto	l4305
  3885  000F12  EF62  F007         	goto	l4311
  3886  000F16                     l4317:
  3887  000F16  FFFF               	dw	65535	; assembler added errata NOP
  3888                           
  3889                           ; BSR set to: 1
  3890                           ;main.c: 143:     if(!errCode){
  3891  000F18  51D6               	movf	executeData@errCode& (0+255),w,b
  3892  000F1A  A4D8               	btfss	status,2,c
  3893  000F1C  EF92  F007         	goto	u3761
  3894  000F20  EF95  F007         	goto	u3760
  3895  000F24                     u3761:
  3896  000F24  FFFF               	dw	65535	; assembler added errata NOP
  3897  000F26  EFF8  F007         	goto	l4339
  3898  000F2A                     u3760:
  3899  000F2A  FFFF               	dw	65535	; assembler added errata NOP
  3900  000F2C                     
  3901                           ; BSR set to: 1
  3902                           ;main.c: 146:         errCode = touchObject();
  3903  000F2C  EC59  F00E         	call	_touchObject	;wreg free
  3904  000F30  0101               	movlb	1	; () banked
  3905  000F32  6FD6               	movwf	executeData@errCode& (0+255),b
  3906                           
  3907                           ;main.c: 148:         pickObject();
  3908  000F34  EC91  F012         	call	_pickObject	;wreg free
  3909                           
  3910                           ;main.c: 151:         errCode = liftArm();
  3911  000F38  EC16  F010         	call	_liftArm	;wreg free
  3912  000F3C  0101               	movlb	1	; () banked
  3913  000F3E  6FD6               	movwf	executeData@errCode& (0+255),b
  3914  000F40                     
  3915                           ; BSR set to: 1
  3916  000F40  C04E  F016         	movff	_posVector,moveToPoint@x1
  3917  000F44  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3918  000F46  C04F  F018         	movff	_posVector+1,moveToPoint@y1
  3919  000F4A  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3920  000F4C  EE20 F001          	lfsr	2,1
  3921  000F50  51D7               	movf	executeData@data& (0+255),w,b
  3922  000F52  26D9               	addwf	fsr2l,f,c
  3923  000F54  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3924  000F56  22DA               	addwfc	fsr2h,f,c
  3925  000F58  50DF               	movf	indf2,w,c
  3926  000F5A  6E43               	movwf	??_executeData^0,c
  3927  000F5C  5043               	movf	??_executeData^0,w,c
  3928  000F5E  6E1A               	movwf	moveToPoint@x2^0,c
  3929  000F60  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3930  000F62  EE20 F002          	lfsr	2,2
  3931  000F66  51D7               	movf	executeData@data& (0+255),w,b
  3932  000F68  26D9               	addwf	fsr2l,f,c
  3933  000F6A  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3934  000F6C  22DA               	addwfc	fsr2h,f,c
  3935  000F6E  50DF               	movf	indf2,w,c
  3936  000F70  6E44               	movwf	(??_executeData+1)^0,c
  3937  000F72  5044               	movf	(??_executeData+1)^0,w,c
  3938  000F74  6E1C               	movwf	moveToPoint@y2^0,c
  3939  000F76  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3940  000F78  EC22  F005         	call	_moveToPoint	;wreg free
  3941  000F7C                     
  3942                           ;main.c: 155:         posVector[0] = data->posX;
  3943  000F7C  0101               	movlb	1	; () banked
  3944  000F7E  EE20 F001          	lfsr	2,1
  3945  000F82  51D7               	movf	executeData@data& (0+255),w,b
  3946  000F84  26D9               	addwf	fsr2l,f,c
  3947  000F86  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3948  000F88  22DA               	addwfc	fsr2h,f,c
  3949  000F8A  50DF               	movf	indf2,w,c
  3950  000F8C  6E4E               	movwf	_posVector^0,c
  3951  000F8E                     
  3952                           ; BSR set to: 1
  3953                           ;main.c: 156:         posVector[1] = data->posY;
  3954  000F8E  EE20 F002          	lfsr	2,2
  3955  000F92  51D7               	movf	executeData@data& (0+255),w,b
  3956  000F94  26D9               	addwf	fsr2l,f,c
  3957  000F96  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3958  000F98  22DA               	addwfc	fsr2h,f,c
  3959  000F9A  50DF               	movf	indf2,w,c
  3960  000F9C  6E4F               	movwf	(_posVector+1)^0,c
  3961  000F9E                     
  3962                           ; BSR set to: 1
  3963                           ;main.c: 159:         rotAngle = data->rotation - rotAngle;
  3964  000F9E  EE20 F003          	lfsr	2,3
  3965  000FA2  51D7               	movf	executeData@data& (0+255),w,b
  3966  000FA4  26D9               	addwf	fsr2l,f,c
  3967  000FA6  51D8               	movf	(executeData@data+1)& (0+255),w,b
  3968  000FA8  22DA               	addwfc	fsr2h,f,c
  3969  000FAA  50DF               	movf	indf2,w,c
  3970  000FAC  6E43               	movwf	??_executeData^0,c
  3971  000FAE  5059               	movf	_rotAngle^0,w,c
  3972  000FB0  5C43               	subwf	??_executeData^0,w,c
  3973  000FB2  6E59               	movwf	_rotAngle^0,c
  3974  000FB4  505A               	movf	(_rotAngle+1)^0,w,c
  3975  000FB6  A0D8               	btfss	status,0,c
  3976  000FB8  285A               	incf	(_rotAngle+1)^0,w,c
  3977  000FBA  6A5A               	clrf	(_rotAngle+1)^0,c
  3978  000FBC  5E5A               	subwf	(_rotAngle+1)^0,f,c
  3979                           
  3980                           ;main.c: 161:         if(rotAngle < 0){
  3981  000FBE  BE5A               	btfsc	(_rotAngle+1)^0,7,c
  3982  000FC0  EFE7  F007         	goto	u3770
  3983  000FC4  EFE4  F007         	goto	u3771
  3984  000FC8                     u3771:
  3985  000FC8  FFFF               	dw	65535	; assembler added errata NOP
  3986  000FCA  EFEC  F007         	goto	l4331
  3987  000FCE                     u3770:
  3988  000FCE  FFFF               	dw	65535	; assembler added errata NOP
  3989  000FD0                     
  3990                           ; BSR set to: 1
  3991                           ;main.c: 162:             rotAngle += 360;
  3992  000FD0  0E68               	movlw	104
  3993  000FD2  2659               	addwf	_rotAngle^0,f,c
  3994  000FD4  0E01               	movlw	1
  3995  000FD6  225A               	addwfc	(_rotAngle+1)^0,f,c
  3996  000FD8                     l4331:
  3997  000FD8  FFFF               	dw	65535	; assembler added errata NOP
  3998                           
  3999                           ; BSR set to: 1
  4000                           ;main.c: 164:         rotateObj(rotAngle);
  4001  000FDA  5059               	movf	_rotAngle^0,w,c
  4002  000FDC  ECD2  F00E         	call	_rotateObj
  4003  000FE0  ECE0  F00D         	call	_touchTherm	;wreg free
  4004  000FE4                     
  4005                           ;main.c: 169:         releaseObj();
  4006  000FE4  EC7B  F012         	call	_releaseObj	;wreg free
  4007  000FE8                     
  4008                           ;main.c: 172:         errCode = liftArm();
  4009  000FE8  EC16  F010         	call	_liftArm	;wreg free
  4010  000FEC  0101               	movlb	1	; () banked
  4011  000FEE  6FD6               	movwf	executeData@errCode& (0+255),b
  4012  000FF0                     l4339:
  4013  000FF0  FFFF               	dw	65535	; assembler added errata NOP
  4014                           
  4015                           ; BSR set to: 1
  4016                           ;main.c: 175:     return(errCode);
  4017  000FF2  51D6               	movf	executeData@errCode& (0+255),w,b
  4018  000FF4                     
  4019                           ; BSR set to: 1
  4020  000FF4  0012               	return		;funcret
  4021  000FF6  FFFF               	dw	65535	; errata NOP
  4022  000FF8                     __end_of_executeData:
  4023                           	callstack 0
  4024                           
  4025 ;; *************** function _touchTherm *****************
  4026 ;; Defined at:
  4027 ;;		line 454 in file "motors.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;		None
  4030 ;; Auto vars:     Size  Location     Type
  4031 ;;		None
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  1    wreg      unsigned char 
  4034 ;; Registers used:
  4035 ;;		wreg, status,2, status,0, cstack
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4041 ;;      Params:         0       0       0       0       0       0       0
  4042 ;;      Locals:         0       0       0       0       0       0       0
  4043 ;;      Temps:          0       0       0       0       0       0       0
  4044 ;;      Totals:         0       0       0       0       0       0       0
  4045 ;;Total ram usage:        0 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    5
  4048 ;; This function calls:
  4049 ;;		_resetStep
  4050 ;;		_resetTherm
  4051 ;;		_returnTherm
  4052 ;;		_setDirection
  4053 ;;		_startADC
  4054 ;;		_stepMade
  4055 ;;		_stopADC
  4056 ;; This function is called by:
  4057 ;;		_executeData
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	text22
  4062  001BC0                     __ptext22:
  4063                           	callstack 0
  4064  001BC0                     _touchTherm:
  4065                           	callstack 0
  4066  001BC0  FFFF               	dw	65535	; assembler added errata NOP
  4067  001BC2                     
  4068                           ;motors.c: 457:     setDirection(1, 2);
  4069  001BC2  0E02               	movlw	2
  4070  001BC4  6E12               	movwf	setDirection@motor^0,c
  4071  001BC6  0E01               	movlw	1
  4072  001BC8  EC25  F011         	call	_setDirection
  4073  001BCC                     
  4074                           ;motors.c: 459:     T2CONbits.TMR2ON = 1;
  4075  001BCC  84CA               	bsf	202,2,c	;volatile
  4076  001BCE                     
  4077                           ;motors.c: 461:     tm0Error = 0;
  4078  001BCE  0E00               	movlw	0
  4079  001BD0  6E5C               	movwf	(_tm0Error+1)^0,c
  4080  001BD2  0E00               	movlw	0
  4081  001BD4  6E5B               	movwf	_tm0Error^0,c
  4082  001BD6                     
  4083                           ;motors.c: 462:     tm0Limit = 250;
  4084  001BD6  0EFA               	movlw	250
  4085  001BD8  6E68               	movwf	_tm0Limit^0,c
  4086  001BDA                     
  4087                           ;motors.c: 463:     T0CONbits.TMR0ON = 1;
  4088  001BDA  8ED5               	bsf	213,7,c	;volatile
  4089  001BDC                     
  4090                           ;motors.c: 466:     startADC();
  4091  001BDC  EC41  F013         	call	_startADC	;wreg free
  4092                           
  4093                           ;motors.c: 469:     while(!returnTherm() || PORTDbits.RD7){
  4094  001BE0  EF23  F00E         	goto	l4009
  4095  001BE4                     l3999:
  4096  001BE4  FFFF               	dw	65535	; assembler added errata NOP
  4097                           
  4098                           ;motors.c: 472:         if(tm0Error){
  4099  001BE6  505B               	movf	_tm0Error^0,w,c
  4100  001BE8  105C               	iorwf	(_tm0Error+1)^0,w,c
  4101  001BEA  B4D8               	btfsc	status,2,c
  4102  001BEC  EFFA  F00D         	goto	u3471
  4103  001BF0  EFFD  F00D         	goto	u3470
  4104  001BF4                     u3471:
  4105  001BF4  FFFF               	dw	65535	; assembler added errata NOP
  4106  001BF6  EF05  F00E         	goto	l194
  4107  001BFA                     u3470:
  4108  001BFA  FFFF               	dw	65535	; assembler added errata NOP
  4109  001BFC                     
  4110                           ;motors.c: 474:             LATCbits.LATC2 = 0;
  4111  001BFC  948B               	bcf	139,2,c	;volatile
  4112  001BFE                     
  4113                           ;motors.c: 475:             tm0Error = 6;
  4114  001BFE  0E00               	movlw	0
  4115  001C00  6E5C               	movwf	(_tm0Error+1)^0,c
  4116  001C02  0E06               	movlw	6
  4117  001C04  6E5B               	movwf	_tm0Error^0,c
  4118                           
  4119                           ;motors.c: 476:             break;
  4120  001C06  EF39  F00E         	goto	l4013
  4121  001C0A                     l194:
  4122  001C0A  FFFF               	dw	65535	; assembler added errata NOP
  4123                           
  4124                           ;motors.c: 480:         LATCbits.LATC2 = 1;
  4125  001C0C  848B               	bsf	139,2,c	;volatile
  4126  001C0E                     l4005:
  4127  001C0E  FFFF               	dw	65535	; assembler added errata NOP
  4128  001C10  ECE8  F012         	call	_stepMade	;wreg free
  4129  001C14  5012               	movf	?_stepMade^0,w,c
  4130  001C16  1013               	iorwf	(?_stepMade+1)^0,w,c
  4131  001C18  B4D8               	btfsc	status,2,c
  4132  001C1A  EF11  F00E         	goto	u3481
  4133  001C1E  EF14  F00E         	goto	u3480
  4134  001C22                     u3481:
  4135  001C22  FFFF               	dw	65535	; assembler added errata NOP
  4136  001C24  EF07  F00E         	goto	l4005
  4137  001C28                     u3480:
  4138  001C28  FFFF               	dw	65535	; assembler added errata NOP
  4139  001C2A                     
  4140                           ;motors.c: 486:         LATCbits.LATC2 = 0;
  4141  001C2A  948B               	bcf	139,2,c	;volatile
  4142  001C2C                     l4007:
  4143  001C2C  FFFF               	dw	65535	; assembler added errata NOP
  4144  001C2E  ECE8  F012         	call	_stepMade	;wreg free
  4145  001C32  5012               	movf	?_stepMade^0,w,c
  4146  001C34  1013               	iorwf	(?_stepMade+1)^0,w,c
  4147  001C36  B4D8               	btfsc	status,2,c
  4148  001C38  EF20  F00E         	goto	u3491
  4149  001C3C  EF23  F00E         	goto	u3490
  4150  001C40                     u3491:
  4151  001C40  FFFF               	dw	65535	; assembler added errata NOP
  4152  001C42  EF16  F00E         	goto	l4007
  4153  001C46                     u3490:
  4154  001C46                     l4009:
  4155  001C46  FFFF               	dw	65535	; assembler added errata NOP
  4156                           
  4157                           ;motors.c: 469:     while(!returnTherm() || PORTDbits.RD7){
  4158  001C48  EC25  F013         	call	_returnTherm	;wreg free
  4159  001C4C  5012               	movf	?_returnTherm^0,w,c
  4160  001C4E  1013               	iorwf	(?_returnTherm+1)^0,w,c
  4161  001C50  B4D8               	btfsc	status,2,c
  4162  001C52  EF2D  F00E         	goto	u3501
  4163  001C56  EF30  F00E         	goto	u3500
  4164  001C5A                     u3501:
  4165  001C5A  FFFF               	dw	65535	; assembler added errata NOP
  4166  001C5C  EFF2  F00D         	goto	l3999
  4167  001C60                     u3500:
  4168  001C60  FFFF               	dw	65535	; assembler added errata NOP
  4169  001C62  BE83               	btfsc	131,7,c	;volatile
  4170  001C64  EF36  F00E         	goto	u3511
  4171  001C68  EF39  F00E         	goto	u3510
  4172  001C6C                     u3511:
  4173  001C6C  FFFF               	dw	65535	; assembler added errata NOP
  4174  001C6E  EFF2  F00D         	goto	l3999
  4175  001C72                     u3510:
  4176  001C72                     l4013:
  4177  001C72  FFFF               	dw	65535	; assembler added errata NOP
  4178                           
  4179                           ;motors.c: 493:     stopADC();
  4180  001C74  EC6B  F013         	call	_stopADC	;wreg free
  4181  001C78                     
  4182                           ;motors.c: 496:     resetTherm();
  4183  001C78  EC3C  F013         	call	_resetTherm	;wreg free
  4184  001C7C                     
  4185                           ;motors.c: 499:     T0CONbits.TMR0ON = 0;
  4186  001C7C  9ED5               	bcf	213,7,c	;volatile
  4187  001C7E                     
  4188                           ;motors.c: 500:     T2CONbits.TMR2ON = 0;
  4189  001C7E  94CA               	bcf	202,2,c	;volatile
  4190                           
  4191                           ;motors.c: 502:     TMR0 = 0;
  4192  001C80  0E00               	movlw	0
  4193  001C82  6ED7               	movwf	215,c	;volatile
  4194  001C84  0E00               	movlw	0
  4195  001C86  6ED6               	movwf	214,c	;volatile
  4196                           
  4197                           ;motors.c: 503:     TMR2 = 0;
  4198  001C88  0E00               	movlw	0
  4199  001C8A  6ECC               	movwf	204,c	;volatile
  4200  001C8C                     
  4201                           ;motors.c: 506:     resetStep();
  4202  001C8C  EC4B  F013         	call	_resetStep	;wreg free
  4203  001C90                     
  4204                           ;motors.c: 509:     if(PORTDbits.RD7){
  4205  001C90  AE83               	btfss	131,7,c	;volatile
  4206  001C92  EF4D  F00E         	goto	u3521
  4207  001C96  EF50  F00E         	goto	u3520
  4208  001C9A                     u3521:
  4209  001C9A  FFFF               	dw	65535	; assembler added errata NOP
  4210  001C9C  EF55  F00E         	goto	l202
  4211  001CA0                     u3520:
  4212  001CA0  FFFF               	dw	65535	; assembler added errata NOP
  4213  001CA2                     
  4214                           ;motors.c: 510:         tm0Error = 2;
  4215  001CA2  0E00               	movlw	0
  4216  001CA4  6E5C               	movwf	(_tm0Error+1)^0,c
  4217  001CA6  0E02               	movlw	2
  4218  001CA8  6E5B               	movwf	_tm0Error^0,c
  4219  001CAA                     l202:
  4220  001CAA  FFFF               	dw	65535	; assembler added errata NOP
  4221                           
  4222                           ;motors.c: 513:     return(tm0Error);
  4223  001CAC  505B               	movf	_tm0Error^0,w,c
  4224  001CAE  0012               	return		;funcret
  4225  001CB0  FFFF               	dw	65535	; errata NOP
  4226  001CB2                     __end_of_touchTherm:
  4227                           	callstack 0
  4228                           
  4229 ;; *************** function _returnTherm *****************
  4230 ;; Defined at:
  4231 ;;		line 58 in file "adc.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;		None
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;		None
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  2   17[COMRAM] unsigned int 
  4238 ;; Registers used:
  4239 ;;		None
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4245 ;;      Params:         2       0       0       0       0       0       0
  4246 ;;      Locals:         0       0       0       0       0       0       0
  4247 ;;      Temps:          0       0       0       0       0       0       0
  4248 ;;      Totals:         2       0       0       0       0       0       0
  4249 ;;Total ram usage:        2 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:    4
  4252 ;; This function calls:
  4253 ;;		Nothing
  4254 ;; This function is called by:
  4255 ;;		_touchTherm
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           	psect	text23
  4260  00264A                     __ptext23:
  4261                           	callstack 0
  4262  00264A                     _returnTherm:
  4263                           	callstack 0
  4264  00264A  FFFF               	dw	65535	; assembler added errata NOP
  4265  00264C                     
  4266                           ;adc.c: 59:     return therm_rel;
  4267  00264C  C066  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4268  002650  6A13               	clrf	(?_returnTherm+1)^0,c
  4269  002652  0012               	return		;funcret
  4270  002654  FFFF               	dw	65535	; errata NOP
  4271  002656                     __end_of_returnTherm:
  4272                           	callstack 0
  4273                           
  4274 ;; *************** function _resetTherm *****************
  4275 ;; Defined at:
  4276 ;;		line 72 in file "adc.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;		None
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;		None
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  1    wreg      void 
  4283 ;; Registers used:
  4284 ;;		wreg, status,2
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4290 ;;      Params:         0       0       0       0       0       0       0
  4291 ;;      Locals:         0       0       0       0       0       0       0
  4292 ;;      Temps:          0       0       0       0       0       0       0
  4293 ;;      Totals:         0       0       0       0       0       0       0
  4294 ;;Total ram usage:        0 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    4
  4297 ;; This function calls:
  4298 ;;		Nothing
  4299 ;; This function is called by:
  4300 ;;		_touchTherm
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           	psect	text24
  4305  002678                     __ptext24:
  4306                           	callstack 0
  4307  002678                     _resetTherm:
  4308                           	callstack 0
  4309  002678  FFFF               	dw	65535	; assembler added errata NOP
  4310  00267A                     
  4311                           ;adc.c: 73:     therm_rel = 0;
  4312  00267A  0E00               	movlw	0
  4313  00267C  6E66               	movwf	_therm_rel^0,c	;volatile
  4314  00267E  0012               	return		;funcret
  4315  002680  FFFF               	dw	65535	; errata NOP
  4316  002682                     __end_of_resetTherm:
  4317                           	callstack 0
  4318                           
  4319 ;; *************** function _touchObject *****************
  4320 ;; Defined at:
  4321 ;;		line 383 in file "motors.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;		None
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;		None
  4326 ;; Return value:  Size  Location     Type
  4327 ;;                  1    wreg      unsigned char 
  4328 ;; Registers used:
  4329 ;;		wreg, status,2, status,0, cstack
  4330 ;; Tracked objects:
  4331 ;;		On entry : 0/0
  4332 ;;		On exit  : 0/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4335 ;;      Params:         0       0       0       0       0       0       0
  4336 ;;      Locals:         0       0       0       0       0       0       0
  4337 ;;      Temps:          0       0       0       0       0       0       0
  4338 ;;      Totals:         0       0       0       0       0       0       0
  4339 ;;Total ram usage:        0 bytes
  4340 ;; Hardware stack levels used:    1
  4341 ;; Hardware stack levels required when called:    5
  4342 ;; This function calls:
  4343 ;;		_resetStep
  4344 ;;		_resetTouch
  4345 ;;		_returnTouch
  4346 ;;		_setDirection
  4347 ;;		_startADC
  4348 ;;		_stepMade
  4349 ;;		_stopADC
  4350 ;; This function is called by:
  4351 ;;		_executeData
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           	psect	text25
  4356  001CB2                     __ptext25:
  4357                           	callstack 0
  4358  001CB2                     _touchObject:
  4359                           	callstack 0
  4360  001CB2  FFFF               	dw	65535	; assembler added errata NOP
  4361  001CB4                     
  4362                           ;motors.c: 386:     setDirection(1, 2);
  4363  001CB4  0E02               	movlw	2
  4364  001CB6  6E12               	movwf	setDirection@motor^0,c
  4365  001CB8  0E01               	movlw	1
  4366  001CBA  EC25  F011         	call	_setDirection
  4367  001CBE                     
  4368                           ;motors.c: 388:     T2CONbits.TMR2ON = 1;
  4369  001CBE  84CA               	bsf	202,2,c	;volatile
  4370  001CC0                     
  4371                           ;motors.c: 390:     tm0Error = 0;
  4372  001CC0  0E00               	movlw	0
  4373  001CC2  6E5C               	movwf	(_tm0Error+1)^0,c
  4374  001CC4  0E00               	movlw	0
  4375  001CC6  6E5B               	movwf	_tm0Error^0,c
  4376  001CC8                     
  4377                           ;motors.c: 391:     tm0Limit = 250;
  4378  001CC8  0EFA               	movlw	250
  4379  001CCA  6E68               	movwf	_tm0Limit^0,c
  4380  001CCC                     
  4381                           ;motors.c: 392:     T0CONbits.TMR0ON = 1;
  4382  001CCC  8ED5               	bsf	213,7,c	;volatile
  4383  001CCE                     
  4384                           ;motors.c: 395:     startADC();
  4385  001CCE  EC41  F013         	call	_startADC	;wreg free
  4386                           
  4387                           ;motors.c: 398:     while(!returnTouch() || PORTDbits.RD7){
  4388  001CD2  EF9C  F00E         	goto	l3967
  4389  001CD6                     l3957:
  4390  001CD6  FFFF               	dw	65535	; assembler added errata NOP
  4391                           
  4392                           ;motors.c: 401:         if(tm0Error){
  4393  001CD8  505B               	movf	_tm0Error^0,w,c
  4394  001CDA  105C               	iorwf	(_tm0Error+1)^0,w,c
  4395  001CDC  B4D8               	btfsc	status,2,c
  4396  001CDE  EF73  F00E         	goto	u3411
  4397  001CE2  EF76  F00E         	goto	u3410
  4398  001CE6                     u3411:
  4399  001CE6  FFFF               	dw	65535	; assembler added errata NOP
  4400  001CE8  EF7E  F00E         	goto	l180
  4401  001CEC                     u3410:
  4402  001CEC  FFFF               	dw	65535	; assembler added errata NOP
  4403  001CEE                     
  4404                           ;motors.c: 403:             LATCbits.LATC2 = 0;
  4405  001CEE  948B               	bcf	139,2,c	;volatile
  4406  001CF0                     
  4407                           ;motors.c: 404:             tm0Error = 6;
  4408  001CF0  0E00               	movlw	0
  4409  001CF2  6E5C               	movwf	(_tm0Error+1)^0,c
  4410  001CF4  0E06               	movlw	6
  4411  001CF6  6E5B               	movwf	_tm0Error^0,c
  4412                           
  4413                           ;motors.c: 405:             break;
  4414  001CF8  EFB2  F00E         	goto	l3971
  4415  001CFC                     l180:
  4416  001CFC  FFFF               	dw	65535	; assembler added errata NOP
  4417                           
  4418                           ;motors.c: 409:         LATCbits.LATC2 = 1;
  4419  001CFE  848B               	bsf	139,2,c	;volatile
  4420  001D00                     l3963:
  4421  001D00  FFFF               	dw	65535	; assembler added errata NOP
  4422  001D02  ECE8  F012         	call	_stepMade	;wreg free
  4423  001D06  5012               	movf	?_stepMade^0,w,c
  4424  001D08  1013               	iorwf	(?_stepMade+1)^0,w,c
  4425  001D0A  B4D8               	btfsc	status,2,c
  4426  001D0C  EF8A  F00E         	goto	u3421
  4427  001D10  EF8D  F00E         	goto	u3420
  4428  001D14                     u3421:
  4429  001D14  FFFF               	dw	65535	; assembler added errata NOP
  4430  001D16  EF80  F00E         	goto	l3963
  4431  001D1A                     u3420:
  4432  001D1A  FFFF               	dw	65535	; assembler added errata NOP
  4433  001D1C                     
  4434                           ;motors.c: 415:         LATCbits.LATC2 = 0;
  4435  001D1C  948B               	bcf	139,2,c	;volatile
  4436  001D1E                     l3965:
  4437  001D1E  FFFF               	dw	65535	; assembler added errata NOP
  4438  001D20  ECE8  F012         	call	_stepMade	;wreg free
  4439  001D24  5012               	movf	?_stepMade^0,w,c
  4440  001D26  1013               	iorwf	(?_stepMade+1)^0,w,c
  4441  001D28  B4D8               	btfsc	status,2,c
  4442  001D2A  EF99  F00E         	goto	u3431
  4443  001D2E  EF9C  F00E         	goto	u3430
  4444  001D32                     u3431:
  4445  001D32  FFFF               	dw	65535	; assembler added errata NOP
  4446  001D34  EF8F  F00E         	goto	l3965
  4447  001D38                     u3430:
  4448  001D38                     l3967:
  4449  001D38  FFFF               	dw	65535	; assembler added errata NOP
  4450                           
  4451                           ;motors.c: 398:     while(!returnTouch() || PORTDbits.RD7){
  4452  001D3A  EC2B  F013         	call	_returnTouch	;wreg free
  4453  001D3E  5012               	movf	?_returnTouch^0,w,c
  4454  001D40  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4455  001D42  B4D8               	btfsc	status,2,c
  4456  001D44  EFA6  F00E         	goto	u3441
  4457  001D48  EFA9  F00E         	goto	u3440
  4458  001D4C                     u3441:
  4459  001D4C  FFFF               	dw	65535	; assembler added errata NOP
  4460  001D4E  EF6B  F00E         	goto	l3957
  4461  001D52                     u3440:
  4462  001D52  FFFF               	dw	65535	; assembler added errata NOP
  4463  001D54  BE83               	btfsc	131,7,c	;volatile
  4464  001D56  EFAF  F00E         	goto	u3451
  4465  001D5A  EFB2  F00E         	goto	u3450
  4466  001D5E                     u3451:
  4467  001D5E  FFFF               	dw	65535	; assembler added errata NOP
  4468  001D60  EF6B  F00E         	goto	l3957
  4469  001D64                     u3450:
  4470  001D64                     l3971:
  4471  001D64  FFFF               	dw	65535	; assembler added errata NOP
  4472                           
  4473                           ;motors.c: 422:     stopADC();
  4474  001D66  EC6B  F013         	call	_stopADC	;wreg free
  4475  001D6A                     
  4476                           ;motors.c: 425:     resetTouch();
  4477  001D6A  EC46  F013         	call	_resetTouch	;wreg free
  4478  001D6E                     
  4479                           ;motors.c: 428:     T0CONbits.TMR0ON = 0;
  4480  001D6E  9ED5               	bcf	213,7,c	;volatile
  4481  001D70                     
  4482                           ;motors.c: 429:     T2CONbits.TMR2ON = 0;
  4483  001D70  94CA               	bcf	202,2,c	;volatile
  4484                           
  4485                           ;motors.c: 431:     TMR0 = 0;
  4486  001D72  0E00               	movlw	0
  4487  001D74  6ED7               	movwf	215,c	;volatile
  4488  001D76  0E00               	movlw	0
  4489  001D78  6ED6               	movwf	214,c	;volatile
  4490                           
  4491                           ;motors.c: 432:     TMR2 = 0;
  4492  001D7A  0E00               	movlw	0
  4493  001D7C  6ECC               	movwf	204,c	;volatile
  4494  001D7E                     
  4495                           ;motors.c: 435:     resetStep();
  4496  001D7E  EC4B  F013         	call	_resetStep	;wreg free
  4497  001D82                     
  4498                           ;motors.c: 438:     if(PORTDbits.RD7){
  4499  001D82  AE83               	btfss	131,7,c	;volatile
  4500  001D84  EFC6  F00E         	goto	u3461
  4501  001D88  EFC9  F00E         	goto	u3460
  4502  001D8C                     u3461:
  4503  001D8C  FFFF               	dw	65535	; assembler added errata NOP
  4504  001D8E  EFCE  F00E         	goto	l188
  4505  001D92                     u3460:
  4506  001D92  FFFF               	dw	65535	; assembler added errata NOP
  4507  001D94                     
  4508                           ;motors.c: 439:         tm0Error = 2;
  4509  001D94  0E00               	movlw	0
  4510  001D96  6E5C               	movwf	(_tm0Error+1)^0,c
  4511  001D98  0E02               	movlw	2
  4512  001D9A  6E5B               	movwf	_tm0Error^0,c
  4513  001D9C                     l188:
  4514  001D9C  FFFF               	dw	65535	; assembler added errata NOP
  4515                           
  4516                           ;motors.c: 442:     return(tm0Error);
  4517  001D9E  505B               	movf	_tm0Error^0,w,c
  4518  001DA0  0012               	return		;funcret
  4519  001DA2  FFFF               	dw	65535	; errata NOP
  4520  001DA4                     __end_of_touchObject:
  4521                           	callstack 0
  4522                           
  4523 ;; *************** function _stopADC *****************
  4524 ;; Defined at:
  4525 ;;		line 44 in file "adc.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;		None
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;		None
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  1    wreg      void 
  4532 ;; Registers used:
  4533 ;;		None
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4539 ;;      Params:         0       0       0       0       0       0       0
  4540 ;;      Locals:         0       0       0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0
  4542 ;;      Totals:         0       0       0       0       0       0       0
  4543 ;;Total ram usage:        0 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:    4
  4546 ;; This function calls:
  4547 ;;		Nothing
  4548 ;; This function is called by:
  4549 ;;		_touchObject
  4550 ;;		_touchTherm
  4551 ;; This function uses a non-reentrant model
  4552 ;;
  4553                           
  4554                           	psect	text26
  4555  0026D6                     __ptext26:
  4556                           	callstack 0
  4557  0026D6                     _stopADC:
  4558                           	callstack 0
  4559  0026D6  FFFF               	dw	65535	; assembler added errata NOP
  4560  0026D8                     
  4561                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4562  0026D8  90C2               	bcf	194,0,c	;volatile
  4563  0026DA  0012               	return		;funcret
  4564  0026DC  FFFF               	dw	65535	; errata NOP
  4565  0026DE                     __end_of_stopADC:
  4566                           	callstack 0
  4567                           
  4568 ;; *************** function _startADC *****************
  4569 ;; Defined at:
  4570 ;;		line 36 in file "adc.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;		None
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;		None
  4575 ;; Return value:  Size  Location     Type
  4576 ;;                  1    wreg      void 
  4577 ;; Registers used:
  4578 ;;		None
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 0/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4584 ;;      Params:         0       0       0       0       0       0       0
  4585 ;;      Locals:         0       0       0       0       0       0       0
  4586 ;;      Temps:          0       0       0       0       0       0       0
  4587 ;;      Totals:         0       0       0       0       0       0       0
  4588 ;;Total ram usage:        0 bytes
  4589 ;; Hardware stack levels used:    1
  4590 ;; Hardware stack levels required when called:    4
  4591 ;; This function calls:
  4592 ;;		Nothing
  4593 ;; This function is called by:
  4594 ;;		_touchObject
  4595 ;;		_touchTherm
  4596 ;; This function uses a non-reentrant model
  4597 ;;
  4598                           
  4599                           	psect	text27
  4600  002682                     __ptext27:
  4601                           	callstack 0
  4602  002682                     _startADC:
  4603                           	callstack 0
  4604  002682  FFFF               	dw	65535	; assembler added errata NOP
  4605  002684                     
  4606                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4607  002684  80C2               	bsf	194,0,c	;volatile
  4608                           
  4609                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4610  002686  84C2               	bsf	194,2,c	;volatile
  4611  002688  0012               	return		;funcret
  4612  00268A  FFFF               	dw	65535	; errata NOP
  4613  00268C                     __end_of_startADC:
  4614                           	callstack 0
  4615                           
  4616 ;; *************** function _returnTouch *****************
  4617 ;; Defined at:
  4618 ;;		line 51 in file "adc.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;		None
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;		None
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  2   17[COMRAM] unsigned int 
  4625 ;; Registers used:
  4626 ;;		None
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4632 ;;      Params:         2       0       0       0       0       0       0
  4633 ;;      Locals:         0       0       0       0       0       0       0
  4634 ;;      Temps:          0       0       0       0       0       0       0
  4635 ;;      Totals:         2       0       0       0       0       0       0
  4636 ;;Total ram usage:        2 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    4
  4639 ;; This function calls:
  4640 ;;		Nothing
  4641 ;; This function is called by:
  4642 ;;		_touchObject
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           	psect	text28
  4647  002656                     __ptext28:
  4648                           	callstack 0
  4649  002656                     _returnTouch:
  4650                           	callstack 0
  4651  002656  FFFF               	dw	65535	; assembler added errata NOP
  4652  002658                     
  4653                           ;adc.c: 52:     return touch_rel;
  4654  002658  C067  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4655  00265C  6A13               	clrf	(?_returnTouch+1)^0,c
  4656  00265E  0012               	return		;funcret
  4657  002660  FFFF               	dw	65535	; errata NOP
  4658  002662                     __end_of_returnTouch:
  4659                           	callstack 0
  4660                           
  4661 ;; *************** function _resetTouch *****************
  4662 ;; Defined at:
  4663 ;;		line 65 in file "adc.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;		None
  4666 ;; Auto vars:     Size  Location     Type
  4667 ;;		None
  4668 ;; Return value:  Size  Location     Type
  4669 ;;                  1    wreg      void 
  4670 ;; Registers used:
  4671 ;;		wreg, status,2
  4672 ;; Tracked objects:
  4673 ;;		On entry : 0/0
  4674 ;;		On exit  : 0/0
  4675 ;;		Unchanged: 0/0
  4676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4677 ;;      Params:         0       0       0       0       0       0       0
  4678 ;;      Locals:         0       0       0       0       0       0       0
  4679 ;;      Temps:          0       0       0       0       0       0       0
  4680 ;;      Totals:         0       0       0       0       0       0       0
  4681 ;;Total ram usage:        0 bytes
  4682 ;; Hardware stack levels used:    1
  4683 ;; Hardware stack levels required when called:    4
  4684 ;; This function calls:
  4685 ;;		Nothing
  4686 ;; This function is called by:
  4687 ;;		_touchObject
  4688 ;; This function uses a non-reentrant model
  4689 ;;
  4690                           
  4691                           	psect	text29
  4692  00268C                     __ptext29:
  4693                           	callstack 0
  4694  00268C                     _resetTouch:
  4695                           	callstack 0
  4696  00268C  FFFF               	dw	65535	; assembler added errata NOP
  4697  00268E                     
  4698                           ;adc.c: 66:     touch_rel = 0;
  4699  00268E  0E00               	movlw	0
  4700  002690  6E67               	movwf	_touch_rel^0,c	;volatile
  4701  002692  0012               	return		;funcret
  4702  002694  FFFF               	dw	65535	; errata NOP
  4703  002696                     __end_of_resetTouch:
  4704                           	callstack 0
  4705                           
  4706 ;; *************** function _rotateObj *****************
  4707 ;; Defined at:
  4708 ;;		line 574 in file "motors.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;  rotAngle        1    wreg     unsigned char 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  rotAngle        1    3[BANK0 ] unsigned char 
  4713 ;;  i               2    6[BANK0 ] unsigned int 
  4714 ;;  totStep         2    4[BANK0 ] int 
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  1    wreg      void 
  4717 ;; Registers used:
  4718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4724 ;;      Params:         0       0       0       0       0       0       0
  4725 ;;      Locals:         0       5       0       0       0       0       0
  4726 ;;      Temps:          0       3       0       0       0       0       0
  4727 ;;      Totals:         0       8       0       0       0       0       0
  4728 ;;Total ram usage:        8 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; Hardware stack levels required when called:    5
  4731 ;; This function calls:
  4732 ;;		___fldiv
  4733 ;;		___fltol
  4734 ;;		___xxtofl
  4735 ;;		_stepMade
  4736 ;; This function is called by:
  4737 ;;		_executeData
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           	psect	text30
  4742  001DA4                     __ptext30:
  4743                           	callstack 0
  4744  001DA4                     _rotateObj:
  4745                           	callstack 0
  4746  001DA4  FFFF               	dw	65535	; assembler added errata NOP
  4747                           
  4748                           ;incstack = 0
  4749                           ;rotateObj@rotAngle stored from wreg
  4750  001DA6  0100               	movlb	0	; () banked
  4751  001DA8  6FFA               	movwf	rotateObj@rotAngle& (0+255),b
  4752  001DAA                     
  4753                           ;motors.c: 575:     static const float stepAngle = 0.08789;;motors.c: 576:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 577:     unsigned int i;;
      +                          motors.c: 578:     int totStep = rotAngle/stepAngle;
  4754  001DAA  0EAC               	movlw	172
  4755  001DAC  6E24               	movwf	___fldiv@a^0,c
  4756  001DAE  0EFF               	movlw	255
  4757  001DB0  6E25               	movwf	(___fldiv@a+1)^0,c
  4758  001DB2  0EB3               	movlw	179
  4759  001DB4  6E26               	movwf	(___fldiv@a+2)^0,c
  4760  001DB6  0E3D               	movlw	61
  4761  001DB8  6E27               	movwf	(___fldiv@a+3)^0,c
  4762  001DBA  0100               	movlb	0	; () banked
  4763  001DBC  51FA               	movf	rotateObj@rotAngle& (0+255),w,b
  4764  001DBE  6E12               	movwf	___xxtofl@val^0,c
  4765  001DC0  6A13               	clrf	(___xxtofl@val+1)^0,c
  4766  001DC2  6A14               	clrf	(___xxtofl@val+2)^0,c
  4767  001DC4  6A15               	clrf	(___xxtofl@val+3)^0,c
  4768  001DC6  0E01               	movlw	1
  4769  001DC8  ECFC  F007         	call	___xxtofl
  4770  001DCC  C012  F020         	movff	?___xxtofl,___fldiv@b
  4771  001DD0  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4772  001DD4  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4773  001DD8  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4774  001DDC  EC09  F003         	call	___fldiv	;wreg free
  4775  001DE0  C020  F039         	movff	?___fldiv,___fltol@f1
  4776  001DE4  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4777  001DE8  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4778  001DEC  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4779  001DF0  EC29  F00C         	call	___fltol	;wreg free
  4780  001DF4  C039  F0FB         	movff	?___fltol,rotateObj@totStep
  4781  001DF8  C03A  F0FC         	movff	?___fltol+1,rotateObj@totStep+1
  4782  001DFC                     
  4783                           ;motors.c: 581:     for(i = 0; i < totStep; i++){
  4784  001DFC  0E00               	movlw	0
  4785  001DFE  0100               	movlb	0	; () banked
  4786  001E00  6FFE               	movwf	(rotateObj@i+1)& (0+255),b
  4787  001E02  0E00               	movlw	0
  4788  001E04  6FFD               	movwf	rotateObj@i& (0+255),b
  4789  001E06  EF30  F00F         	goto	l4073
  4790  001E0A                     l4061:
  4791  001E0A  FFFF               	dw	65535	; assembler added errata NOP
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;motors.c: 583:         LATD &= 0xC3;
  4795  001E0C  0EC3               	movlw	195
  4796  001E0E  168C               	andwf	140,f,c	;volatile
  4797  001E10                     
  4798                           ; BSR set to: 0
  4799                           ;motors.c: 585:         LATD |= rotSequence[i%4] << 2;
  4800  001E10  0E03               	movlw	3
  4801  001E12  15FD               	andwf	rotateObj@i& (0+255),w,b
  4802  001E14  6FF7               	movwf	??_rotateObj& (0+255),b
  4803  001E16  0E00               	movlw	0
  4804  001E18  15FE               	andwf	(rotateObj@i+1)& (0+255),w,b
  4805  001E1A  6FF8               	movwf	(??_rotateObj+1)& (0+255),b
  4806  001E1C  0E80               	movlw	low rotateObj@rotSequence
  4807  001E1E  25F7               	addwf	??_rotateObj& (0+255),w,b
  4808  001E20  6ED9               	movwf	fsr2l,c
  4809  001E22  0E00               	movlw	high rotateObj@rotSequence
  4810  001E24  21F8               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4811  001E26  6EDA               	movwf	fsr2h,c
  4812  001E28  50DF               	movf	indf2,w,c
  4813  001E2A  6FF9               	movwf	(??_rotateObj+2)& (0+255),b
  4814  001E2C  90D8               	bcf	status,0,c
  4815  001E2E  37F9               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4816  001E30  90D8               	bcf	status,0,c
  4817  001E32  35F9               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4818  001E34  128C               	iorwf	140,f,c	;volatile
  4819  001E36                     
  4820                           ; BSR set to: 0
  4821                           ;motors.c: 588:         T2CONbits.TMR2ON = 1;
  4822  001E36  84CA               	bsf	202,2,c	;volatile
  4823  001E38                     l4067:
  4824  001E38  FFFF               	dw	65535	; assembler added errata NOP
  4825  001E3A  ECE8  F012         	call	_stepMade	;wreg free
  4826  001E3E  5012               	movf	?_stepMade^0,w,c
  4827  001E40  1013               	iorwf	(?_stepMade+1)^0,w,c
  4828  001E42  B4D8               	btfsc	status,2,c
  4829  001E44  EF26  F00F         	goto	u3571
  4830  001E48  EF29  F00F         	goto	u3570
  4831  001E4C                     u3571:
  4832  001E4C  FFFF               	dw	65535	; assembler added errata NOP
  4833  001E4E  EF1C  F00F         	goto	l4067
  4834  001E52                     u3570:
  4835  001E52  FFFF               	dw	65535	; assembler added errata NOP
  4836  001E54                     
  4837                           ;motors.c: 590:         T2CONbits.TMR2ON = 1;
  4838  001E54  84CA               	bsf	202,2,c	;volatile
  4839  001E56                     
  4840                           ;motors.c: 591:         TMR2 = 0;
  4841  001E56  0E00               	movlw	0
  4842  001E58  6ECC               	movwf	204,c	;volatile
  4843  001E5A                     
  4844                           ;motors.c: 592:     }
  4845  001E5A  0100               	movlb	0	; () banked
  4846  001E5C  4BFD               	infsnz	rotateObj@i& (0+255),f,b
  4847  001E5E  2BFE               	incf	(rotateObj@i+1)& (0+255),f,b
  4848  001E60                     l4073:
  4849  001E60  FFFF               	dw	65535	; assembler added errata NOP
  4850                           
  4851                           ; BSR set to: 0
  4852  001E62  51FB               	movf	rotateObj@totStep& (0+255),w,b
  4853  001E64  5DFD               	subwf	rotateObj@i& (0+255),w,b
  4854  001E66  51FC               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4855  001E68  59FE               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4856  001E6A  A0D8               	btfss	status,0,c
  4857  001E6C  EF3A  F00F         	goto	u3581
  4858  001E70  EF3D  F00F         	goto	u3580
  4859  001E74                     u3581:
  4860  001E74  FFFF               	dw	65535	; assembler added errata NOP
  4861  001E76  EF05  F00F         	goto	l4061
  4862  001E7A                     u3580:
  4863  001E7A  FFFF               	dw	65535	; assembler added errata NOP
  4864  001E7C                     
  4865                           ; BSR set to: 0
  4866  001E7C  0012               	return		;funcret
  4867  001E7E  FFFF               	dw	65535	; errata NOP
  4868  001E80                     __end_of_rotateObj:
  4869                           	callstack 0
  4870                           
  4871 ;; *************** function ___xxtofl *****************
  4872 ;; Defined at:
  4873 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4874 ;; Parameters:    Size  Location     Type
  4875 ;;  sign            1    wreg     unsigned char 
  4876 ;;  val             4   17[COMRAM] long 
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;  sign            1   25[COMRAM] unsigned char 
  4879 ;;  arg             4   27[COMRAM] unsigned long 
  4880 ;;  exp             1   26[COMRAM] unsigned char 
  4881 ;; Return value:  Size  Location     Type
  4882 ;;                  4   17[COMRAM] unsigned char 
  4883 ;; Registers used:
  4884 ;;		wreg, status,2, status,0
  4885 ;; Tracked objects:
  4886 ;;		On entry : 0/0
  4887 ;;		On exit  : 0/0
  4888 ;;		Unchanged: 0/0
  4889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4890 ;;      Params:         4       0       0       0       0       0       0
  4891 ;;      Locals:         6       0       0       0       0       0       0
  4892 ;;      Temps:          4       0       0       0       0       0       0
  4893 ;;      Totals:        14       0       0       0       0       0       0
  4894 ;;Total ram usage:       14 bytes
  4895 ;; Hardware stack levels used:    1
  4896 ;; Hardware stack levels required when called:    4
  4897 ;; This function calls:
  4898 ;;		Nothing
  4899 ;; This function is called by:
  4900 ;;		_rotateObj
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           	psect	text31
  4905  000FF8                     __ptext31:
  4906                           	callstack 0
  4907  000FF8                     ___xxtofl:
  4908                           	callstack 0
  4909  000FF8  FFFF               	dw	65535	; assembler added errata NOP
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;incstack = 0
  4913                           ;___xxtofl@sign stored from wreg
  4914  000FFA  6E1A               	movwf	___xxtofl@sign^0,c
  4915  000FFC  501A               	movf	___xxtofl@sign^0,w,c
  4916  000FFE  B4D8               	btfsc	status,2,c
  4917  001000  EF04  F008         	goto	u3041
  4918  001004  EF07  F008         	goto	u3040
  4919  001008                     u3041:
  4920  001008  FFFF               	dw	65535	; assembler added errata NOP
  4921  00100A  EF2C  F008         	goto	l1271
  4922  00100E                     u3040:
  4923  00100E  FFFF               	dw	65535	; assembler added errata NOP
  4924  001010  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4925  001012  EF10  F008         	goto	u3050
  4926  001016  EF0D  F008         	goto	u3051
  4927  00101A                     u3051:
  4928  00101A  FFFF               	dw	65535	; assembler added errata NOP
  4929  00101C  EF2C  F008         	goto	l1271
  4930  001020                     u3050:
  4931  001020  FFFF               	dw	65535	; assembler added errata NOP
  4932  001022  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4933  001026  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4934  00102A  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4935  00102E  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4936  001032  1E16               	comf	??___xxtofl^0,f,c
  4937  001034  1E17               	comf	(??___xxtofl+1)^0,f,c
  4938  001036  1E18               	comf	(??___xxtofl+2)^0,f,c
  4939  001038  1E19               	comf	(??___xxtofl+3)^0,f,c
  4940  00103A  2A16               	incf	??___xxtofl^0,f,c
  4941  00103C  0E00               	movlw	0
  4942  00103E  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4943  001040  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4944  001042  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4945  001044  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4946  001048  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4947  00104C  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4948  001050  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4949  001054  EF35  F008         	goto	l3755
  4950  001058                     l1271:
  4951  001058  FFFF               	dw	65535	; assembler added errata NOP
  4952  00105A  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4953  00105E  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4954  001062  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4955  001066  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4956  00106A                     l3755:
  4957  00106A  FFFF               	dw	65535	; assembler added errata NOP
  4958  00106C  5012               	movf	___xxtofl@val^0,w,c
  4959  00106E  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4960  001070  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4961  001072  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4962  001074  A4D8               	btfss	status,2,c
  4963  001076  EF3F  F008         	goto	u3061
  4964  00107A  EF42  F008         	goto	u3060
  4965  00107E                     u3061:
  4966  00107E  FFFF               	dw	65535	; assembler added errata NOP
  4967  001080  EF4D  F008         	goto	l3761
  4968  001084                     u3060:
  4969  001084  FFFF               	dw	65535	; assembler added errata NOP
  4970  001086  0E00               	movlw	0
  4971  001088  6E12               	movwf	?___xxtofl^0,c
  4972  00108A  0E00               	movlw	0
  4973  00108C  6E13               	movwf	(?___xxtofl+1)^0,c
  4974  00108E  0E00               	movlw	0
  4975  001090  6E14               	movwf	(?___xxtofl+2)^0,c
  4976  001092  0E00               	movlw	0
  4977  001094  6E15               	movwf	(?___xxtofl+3)^0,c
  4978  001096  EFF5  F008         	goto	l1274
  4979  00109A                     l3761:
  4980  00109A  FFFF               	dw	65535	; assembler added errata NOP
  4981  00109C  0E96               	movlw	150
  4982  00109E  6E1B               	movwf	___xxtofl@exp^0,c
  4983  0010A0  EF59  F008         	goto	l3765
  4984  0010A4                     l3763:
  4985  0010A4  FFFF               	dw	65535	; assembler added errata NOP
  4986  0010A6  2A1B               	incf	___xxtofl@exp^0,f,c
  4987  0010A8  90D8               	bcf	status,0,c
  4988  0010AA  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4989  0010AC  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4990  0010AE  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4991  0010B0  321C               	rrcf	___xxtofl@arg^0,f,c
  4992  0010B2                     l3765:
  4993  0010B2  FFFF               	dw	65535	; assembler added errata NOP
  4994  0010B4  0E00               	movlw	0
  4995  0010B6  141C               	andwf	___xxtofl@arg^0,w,c
  4996  0010B8  6E16               	movwf	??___xxtofl^0,c
  4997  0010BA  0E00               	movlw	0
  4998  0010BC  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4999  0010BE  6E17               	movwf	(??___xxtofl+1)^0,c
  5000  0010C0  0E00               	movlw	0
  5001  0010C2  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  5002  0010C4  6E18               	movwf	(??___xxtofl+2)^0,c
  5003  0010C6  0EFE               	movlw	254
  5004  0010C8  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  5005  0010CA  6E19               	movwf	(??___xxtofl+3)^0,c
  5006  0010CC  5016               	movf	??___xxtofl^0,w,c
  5007  0010CE  1017               	iorwf	(??___xxtofl+1)^0,w,c
  5008  0010D0  1018               	iorwf	(??___xxtofl+2)^0,w,c
  5009  0010D2  1019               	iorwf	(??___xxtofl+3)^0,w,c
  5010  0010D4  A4D8               	btfss	status,2,c
  5011  0010D6  EF6F  F008         	goto	u3071
  5012  0010DA  EF72  F008         	goto	u3070
  5013  0010DE                     u3071:
  5014  0010DE  FFFF               	dw	65535	; assembler added errata NOP
  5015  0010E0  EF52  F008         	goto	l3763
  5016  0010E4                     u3070:
  5017  0010E4  FFFF               	dw	65535	; assembler added errata NOP
  5018  0010E6  EF82  F008         	goto	l1278
  5019  0010EA                     l3767:
  5020  0010EA  FFFF               	dw	65535	; assembler added errata NOP
  5021  0010EC  2A1B               	incf	___xxtofl@exp^0,f,c
  5022  0010EE  0E01               	movlw	1
  5023  0010F0  261C               	addwf	___xxtofl@arg^0,f,c
  5024  0010F2  0E00               	movlw	0
  5025  0010F4  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  5026  0010F6  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  5027  0010F8  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  5028  0010FA  90D8               	bcf	status,0,c
  5029  0010FC  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  5030  0010FE  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  5031  001100  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  5032  001102  321C               	rrcf	___xxtofl@arg^0,f,c
  5033  001104                     l1278:
  5034  001104  FFFF               	dw	65535	; assembler added errata NOP
  5035  001106  0E00               	movlw	0
  5036  001108  141C               	andwf	___xxtofl@arg^0,w,c
  5037  00110A  6E16               	movwf	??___xxtofl^0,c
  5038  00110C  0E00               	movlw	0
  5039  00110E  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  5040  001110  6E17               	movwf	(??___xxtofl+1)^0,c
  5041  001112  0E00               	movlw	0
  5042  001114  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  5043  001116  6E18               	movwf	(??___xxtofl+2)^0,c
  5044  001118  0EFF               	movlw	255
  5045  00111A  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  5046  00111C  6E19               	movwf	(??___xxtofl+3)^0,c
  5047  00111E  5016               	movf	??___xxtofl^0,w,c
  5048  001120  1017               	iorwf	(??___xxtofl+1)^0,w,c
  5049  001122  1018               	iorwf	(??___xxtofl+2)^0,w,c
  5050  001124  1019               	iorwf	(??___xxtofl+3)^0,w,c
  5051  001126  A4D8               	btfss	status,2,c
  5052  001128  EF98  F008         	goto	u3081
  5053  00112C  EF9B  F008         	goto	u3080
  5054  001130                     u3081:
  5055  001130  FFFF               	dw	65535	; assembler added errata NOP
  5056  001132  EF75  F008         	goto	l3767
  5057  001136                     u3080:
  5058  001136  FFFF               	dw	65535	; assembler added errata NOP
  5059  001138  EFA5  F008         	goto	l3775
  5060  00113C                     l3773:
  5061  00113C  FFFF               	dw	65535	; assembler added errata NOP
  5062  00113E  061B               	decf	___xxtofl@exp^0,f,c
  5063  001140  90D8               	bcf	status,0,c
  5064  001142  361C               	rlcf	___xxtofl@arg^0,f,c
  5065  001144  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  5066  001146  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  5067  001148  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  5068  00114A                     l3775:
  5069  00114A  FFFF               	dw	65535	; assembler added errata NOP
  5070  00114C  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  5071  00114E  EFAB  F008         	goto	u3091
  5072  001152  EFAE  F008         	goto	u3090
  5073  001156                     u3091:
  5074  001156  FFFF               	dw	65535	; assembler added errata NOP
  5075  001158  EFB8  F008         	goto	l1285
  5076  00115C                     u3090:
  5077  00115C  FFFF               	dw	65535	; assembler added errata NOP
  5078  00115E  0E02               	movlw	2
  5079  001160  601B               	cpfslt	___xxtofl@exp^0,c
  5080  001162  EFB5  F008         	goto	u3101
  5081  001166  EFB8  F008         	goto	u3100
  5082  00116A                     u3101:
  5083  00116A  FFFF               	dw	65535	; assembler added errata NOP
  5084  00116C  EF9E  F008         	goto	l3773
  5085  001170                     u3100:
  5086  001170                     l1285:
  5087  001170  FFFF               	dw	65535	; assembler added errata NOP
  5088  001172  B01B               	btfsc	___xxtofl@exp^0,0,c
  5089  001174  EFBE  F008         	goto	u3111
  5090  001178  EFC1  F008         	goto	u3110
  5091  00117C                     u3111:
  5092  00117C  FFFF               	dw	65535	; assembler added errata NOP
  5093  00117E  EFC3  F008         	goto	l3781
  5094  001182                     u3110:
  5095  001182  FFFF               	dw	65535	; assembler added errata NOP
  5096  001184  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  5097  001186                     l3781:
  5098  001186  FFFF               	dw	65535	; assembler added errata NOP
  5099  001188  90D8               	bcf	status,0,c
  5100  00118A  321B               	rrcf	___xxtofl@exp^0,f,c
  5101  00118C  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  5102  001190  6A17               	clrf	(??___xxtofl+1)^0,c
  5103  001192  6A18               	clrf	(??___xxtofl+2)^0,c
  5104  001194  6A19               	clrf	(??___xxtofl+3)^0,c
  5105  001196  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  5106  00119A  6A18               	clrf	(??___xxtofl+2)^0,c
  5107  00119C  6A17               	clrf	(??___xxtofl+1)^0,c
  5108  00119E  6A16               	clrf	??___xxtofl^0,c
  5109  0011A0  5016               	movf	??___xxtofl^0,w,c
  5110  0011A2  121C               	iorwf	___xxtofl@arg^0,f,c
  5111  0011A4  5017               	movf	(??___xxtofl+1)^0,w,c
  5112  0011A6  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  5113  0011A8  5018               	movf	(??___xxtofl+2)^0,w,c
  5114  0011AA  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  5115  0011AC  5019               	movf	(??___xxtofl+3)^0,w,c
  5116  0011AE  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  5117  0011B0  501A               	movf	___xxtofl@sign^0,w,c
  5118  0011B2  B4D8               	btfsc	status,2,c
  5119  0011B4  EFDE  F008         	goto	u3121
  5120  0011B8  EFE1  F008         	goto	u3120
  5121  0011BC                     u3121:
  5122  0011BC  FFFF               	dw	65535	; assembler added errata NOP
  5123  0011BE  EFEC  F008         	goto	l3791
  5124  0011C2                     u3120:
  5125  0011C2  FFFF               	dw	65535	; assembler added errata NOP
  5126  0011C4  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  5127  0011C6  EFEA  F008         	goto	u3130
  5128  0011CA  EFE7  F008         	goto	u3131
  5129  0011CE                     u3131:
  5130  0011CE  FFFF               	dw	65535	; assembler added errata NOP
  5131  0011D0  EFEC  F008         	goto	l3791
  5132  0011D4                     u3130:
  5133  0011D4  FFFF               	dw	65535	; assembler added errata NOP
  5134  0011D6  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  5135  0011D8                     l3791:
  5136  0011D8  FFFF               	dw	65535	; assembler added errata NOP
  5137  0011DA  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  5138  0011DE  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  5139  0011E2  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  5140  0011E6  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5141  0011EA                     l1274:
  5142  0011EA  FFFF               	dw	65535	; assembler added errata NOP
  5143  0011EC  0012               	return		;funcret
  5144  0011EE  FFFF               	dw	65535	; errata NOP
  5145  0011F0                     __end_of___xxtofl:
  5146                           	callstack 0
  5147                           
  5148 ;; *************** function ___fltol *****************
  5149 ;; Defined at:
  5150 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;  f1              4   56[COMRAM] unsigned char 
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;  exp1            1   65[COMRAM] unsigned char 
  5155 ;;  sign1           1   64[COMRAM] unsigned char 
  5156 ;; Return value:  Size  Location     Type
  5157 ;;                  4   56[COMRAM] long 
  5158 ;; Registers used:
  5159 ;;		wreg, status,2, status,0
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5165 ;;      Params:         4       0       0       0       0       0       0
  5166 ;;      Locals:         2       0       0       0       0       0       0
  5167 ;;      Temps:          4       0       0       0       0       0       0
  5168 ;;      Totals:        10       0       0       0       0       0       0
  5169 ;;Total ram usage:       10 bytes
  5170 ;; Hardware stack levels used:    1
  5171 ;; Hardware stack levels required when called:    4
  5172 ;; This function calls:
  5173 ;;		Nothing
  5174 ;; This function is called by:
  5175 ;;		_rotateObj
  5176 ;; This function uses a non-reentrant model
  5177 ;;
  5178                           
  5179                           	psect	text32
  5180  001852                     __ptext32:
  5181                           	callstack 0
  5182  001852                     ___fltol:
  5183                           	callstack 0
  5184  001852  FFFF               	dw	65535	; assembler added errata NOP
  5185  001854  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5186  001856  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5187  001858  6E42               	movwf	___fltol@exp1^0,c
  5188  00185A  5042               	movf	___fltol@exp1^0,w,c
  5189  00185C  A4D8               	btfss	status,2,c
  5190  00185E  EF33  F00C         	goto	u2971
  5191  001862  EF36  F00C         	goto	u2970
  5192  001866                     u2971:
  5193  001866  FFFF               	dw	65535	; assembler added errata NOP
  5194  001868  EF42  F00C         	goto	l3711
  5195  00186C                     u2970:
  5196  00186C  FFFF               	dw	65535	; assembler added errata NOP
  5197  00186E                     l3707:
  5198  00186E  FFFF               	dw	65535	; assembler added errata NOP
  5199  001870  0E00               	movlw	0
  5200  001872  6E39               	movwf	?___fltol^0,c
  5201  001874  0E00               	movlw	0
  5202  001876  6E3A               	movwf	(?___fltol+1)^0,c
  5203  001878  0E00               	movlw	0
  5204  00187A  6E3B               	movwf	(?___fltol+2)^0,c
  5205  00187C  0E00               	movlw	0
  5206  00187E  6E3C               	movwf	(?___fltol+3)^0,c
  5207  001880  EFC1  F00C         	goto	l913
  5208  001884                     l3711:
  5209  001884  FFFF               	dw	65535	; assembler added errata NOP
  5210  001886  C039  F03D         	movff	___fltol@f1,??___fltol
  5211  00188A  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5212  00188E  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5213  001892  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5214  001896  0E20               	movlw	32
  5215  001898  EF54  F00C         	goto	u2980
  5216  00189C                     u2985:
  5217  00189C  FFFF               	dw	65535	; assembler added errata NOP
  5218  00189E  90D8               	bcf	status,0,c
  5219  0018A0  3240               	rrcf	(??___fltol+3)^0,f,c
  5220  0018A2  323F               	rrcf	(??___fltol+2)^0,f,c
  5221  0018A4  323E               	rrcf	(??___fltol+1)^0,f,c
  5222  0018A6  323D               	rrcf	??___fltol^0,f,c
  5223  0018A8                     u2980:
  5224  0018A8  FFFF               	dw	65535	; assembler added errata NOP
  5225  0018AA  2EE8               	decfsz	wreg,f,c
  5226  0018AC  EF4E  F00C         	goto	u2985
  5227  0018B0  503D               	movf	??___fltol^0,w,c
  5228  0018B2  6E41               	movwf	___fltol@sign1^0,c
  5229  0018B4  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5230  0018B6  0EFF               	movlw	255
  5231  0018B8  1639               	andwf	___fltol@f1^0,f,c
  5232  0018BA  0EFF               	movlw	255
  5233  0018BC  163A               	andwf	(___fltol@f1+1)^0,f,c
  5234  0018BE  0EFF               	movlw	255
  5235  0018C0  163B               	andwf	(___fltol@f1+2)^0,f,c
  5236  0018C2  0E00               	movlw	0
  5237  0018C4  163C               	andwf	(___fltol@f1+3)^0,f,c
  5238  0018C6  0E96               	movlw	150
  5239  0018C8  5E42               	subwf	___fltol@exp1^0,f,c
  5240  0018CA  BE42               	btfsc	___fltol@exp1^0,7,c
  5241  0018CC  EF6D  F00C         	goto	u2990
  5242  0018D0  EF6A  F00C         	goto	u2991
  5243  0018D4                     u2991:
  5244  0018D4  FFFF               	dw	65535	; assembler added errata NOP
  5245  0018D6  EF87  F00C         	goto	l3731
  5246  0018DA                     u2990:
  5247  0018DA  FFFF               	dw	65535	; assembler added errata NOP
  5248  0018DC  5042               	movf	___fltol@exp1^0,w,c
  5249  0018DE  0A80               	xorlw	128
  5250  0018E0  0F97               	addlw	151
  5251  0018E2  B0D8               	btfsc	status,0,c
  5252  0018E4  EF76  F00C         	goto	u3001
  5253  0018E8  EF79  F00C         	goto	u3000
  5254  0018EC                     u3001:
  5255  0018EC  FFFF               	dw	65535	; assembler added errata NOP
  5256  0018EE  EF7C  F00C         	goto	l3727
  5257  0018F2                     u3000:
  5258  0018F2  FFFF               	dw	65535	; assembler added errata NOP
  5259  0018F4  EF37  F00C         	goto	l3707
  5260  0018F8                     l3727:
  5261  0018F8  FFFF               	dw	65535	; assembler added errata NOP
  5262  0018FA  90D8               	bcf	status,0,c
  5263  0018FC  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5264  0018FE  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5265  001900  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5266  001902  3239               	rrcf	___fltol@f1^0,f,c
  5267  001904  3E42               	incfsz	___fltol@exp1^0,f,c
  5268  001906  EF7C  F00C         	goto	l3727
  5269  00190A  EFA5  F00C         	goto	l3741
  5270  00190E                     l3731:
  5271  00190E  FFFF               	dw	65535	; assembler added errata NOP
  5272  001910  0E1F               	movlw	31
  5273  001912  6442               	cpfsgt	___fltol@exp1^0,c
  5274  001914  EF8E  F00C         	goto	u3011
  5275  001918  EF91  F00C         	goto	u3010
  5276  00191C                     u3011:
  5277  00191C  FFFF               	dw	65535	; assembler added errata NOP
  5278  00191E  EF9B  F00C         	goto	l3739
  5279  001922                     u3010:
  5280  001922  FFFF               	dw	65535	; assembler added errata NOP
  5281  001924  EF37  F00C         	goto	l3707
  5282  001928                     l3737:
  5283  001928  FFFF               	dw	65535	; assembler added errata NOP
  5284  00192A  90D8               	bcf	status,0,c
  5285  00192C  3639               	rlcf	___fltol@f1^0,f,c
  5286  00192E  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5287  001930  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5288  001932  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5289  001934  0642               	decf	___fltol@exp1^0,f,c
  5290  001936                     l3739:
  5291  001936  FFFF               	dw	65535	; assembler added errata NOP
  5292  001938  5042               	movf	___fltol@exp1^0,w,c
  5293  00193A  A4D8               	btfss	status,2,c
  5294  00193C  EFA2  F00C         	goto	u3021
  5295  001940  EFA5  F00C         	goto	u3020
  5296  001944                     u3021:
  5297  001944  FFFF               	dw	65535	; assembler added errata NOP
  5298  001946  EF94  F00C         	goto	l3737
  5299  00194A                     u3020:
  5300  00194A                     l3741:
  5301  00194A  FFFF               	dw	65535	; assembler added errata NOP
  5302  00194C  5041               	movf	___fltol@sign1^0,w,c
  5303  00194E  B4D8               	btfsc	status,2,c
  5304  001950  EFAC  F00C         	goto	u3031
  5305  001954  EFAF  F00C         	goto	u3030
  5306  001958                     u3031:
  5307  001958  FFFF               	dw	65535	; assembler added errata NOP
  5308  00195A  EFB8  F00C         	goto	l3745
  5309  00195E                     u3030:
  5310  00195E  FFFF               	dw	65535	; assembler added errata NOP
  5311  001960  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5312  001962  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5313  001964  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5314  001966  6C39               	negf	___fltol@f1^0,c
  5315  001968  0E00               	movlw	0
  5316  00196A  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5317  00196C  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5318  00196E  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5319  001970                     l3745:
  5320  001970  FFFF               	dw	65535	; assembler added errata NOP
  5321  001972  C039  F039         	movff	___fltol@f1,?___fltol
  5322  001976  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5323  00197A  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5324  00197E  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5325  001982                     l913:
  5326  001982  FFFF               	dw	65535	; assembler added errata NOP
  5327  001984  0012               	return		;funcret
  5328  001986  FFFF               	dw	65535	; errata NOP
  5329  001988                     __end_of___fltol:
  5330                           	callstack 0
  5331                           
  5332 ;; *************** function ___fldiv *****************
  5333 ;; Defined at:
  5334 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;  b               4   31[COMRAM] long 
  5337 ;;  a               4   35[COMRAM] long 
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;  grs             4   50[COMRAM] unsigned long 
  5340 ;;  rem             4   43[COMRAM] unsigned long 
  5341 ;;  new_exp         2   48[COMRAM] short 
  5342 ;;  aexp            1   55[COMRAM] unsigned char 
  5343 ;;  bexp            1   54[COMRAM] unsigned char 
  5344 ;;  sign            1   47[COMRAM] unsigned char 
  5345 ;; Return value:  Size  Location     Type
  5346 ;;                  4   31[COMRAM] unsigned char 
  5347 ;; Registers used:
  5348 ;;		wreg, status,2, status,0
  5349 ;; Tracked objects:
  5350 ;;		On entry : 0/0
  5351 ;;		On exit  : 0/0
  5352 ;;		Unchanged: 0/0
  5353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5354 ;;      Params:         8       0       0       0       0       0       0
  5355 ;;      Locals:        13       0       0       0       0       0       0
  5356 ;;      Temps:          4       0       0       0       0       0       0
  5357 ;;      Totals:        25       0       0       0       0       0       0
  5358 ;;Total ram usage:       25 bytes
  5359 ;; Hardware stack levels used:    1
  5360 ;; Hardware stack levels required when called:    4
  5361 ;; This function calls:
  5362 ;;		Nothing
  5363 ;; This function is called by:
  5364 ;;		_rotateObj
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           	psect	text33
  5369  000612                     __ptext33:
  5370                           	callstack 0
  5371  000612                     ___fldiv:
  5372                           	callstack 0
  5373  000612  FFFF               	dw	65535	; assembler added errata NOP
  5374  000614  5023               	movf	(___fldiv@b+3)^0,w,c
  5375  000616  0B80               	andlw	128
  5376  000618  6E30               	movwf	___fldiv@sign^0,c
  5377  00061A  5023               	movf	(___fldiv@b+3)^0,w,c
  5378  00061C  2423               	addwf	(___fldiv@b+3)^0,w,c
  5379  00061E  6E37               	movwf	___fldiv@bexp^0,c
  5380  000620  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5381  000622  EF15  F003         	goto	u2741
  5382  000626  EF18  F003         	goto	u2740
  5383  00062A                     u2741:
  5384  00062A  FFFF               	dw	65535	; assembler added errata NOP
  5385  00062C  EF1A  F003         	goto	l3573
  5386  000630                     u2740:
  5387  000630  FFFF               	dw	65535	; assembler added errata NOP
  5388  000632  8037               	bsf	___fldiv@bexp^0,0,c
  5389  000634                     l3573:
  5390  000634  FFFF               	dw	65535	; assembler added errata NOP
  5391  000636  5037               	movf	___fldiv@bexp^0,w,c
  5392  000638  B4D8               	btfsc	status,2,c
  5393  00063A  EF21  F003         	goto	u2751
  5394  00063E  EF24  F003         	goto	u2750
  5395  000642                     u2751:
  5396  000642  FFFF               	dw	65535	; assembler added errata NOP
  5397  000644  EF3D  F003         	goto	l3583
  5398  000648                     u2750:
  5399  000648  FFFF               	dw	65535	; assembler added errata NOP
  5400  00064A  2837               	incf	___fldiv@bexp^0,w,c
  5401  00064C  A4D8               	btfss	status,2,c
  5402  00064E  EF2B  F003         	goto	u2761
  5403  000652  EF2E  F003         	goto	u2760
  5404  000656                     u2761:
  5405  000656  FFFF               	dw	65535	; assembler added errata NOP
  5406  000658  EF37  F003         	goto	l3579
  5407  00065C                     u2760:
  5408  00065C  FFFF               	dw	65535	; assembler added errata NOP
  5409  00065E  0E00               	movlw	0
  5410  000660  6E20               	movwf	___fldiv@b^0,c
  5411  000662  0E00               	movlw	0
  5412  000664  6E21               	movwf	(___fldiv@b+1)^0,c
  5413  000666  0E00               	movlw	0
  5414  000668  6E22               	movwf	(___fldiv@b+2)^0,c
  5415  00066A  0E00               	movlw	0
  5416  00066C  6E23               	movwf	(___fldiv@b+3)^0,c
  5417  00066E                     l3579:
  5418  00066E  FFFF               	dw	65535	; assembler added errata NOP
  5419  000670  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5420  000672  0E00               	movlw	0
  5421  000674  6E23               	movwf	(___fldiv@b+3)^0,c
  5422  000676  EF46  F003         	goto	l3585
  5423  00067A                     l3583:
  5424  00067A  FFFF               	dw	65535	; assembler added errata NOP
  5425  00067C  0E00               	movlw	0
  5426  00067E  6E20               	movwf	___fldiv@b^0,c
  5427  000680  0E00               	movlw	0
  5428  000682  6E21               	movwf	(___fldiv@b+1)^0,c
  5429  000684  0E00               	movlw	0
  5430  000686  6E22               	movwf	(___fldiv@b+2)^0,c
  5431  000688  0E00               	movlw	0
  5432  00068A  6E23               	movwf	(___fldiv@b+3)^0,c
  5433  00068C                     l3585:
  5434  00068C  FFFF               	dw	65535	; assembler added errata NOP
  5435  00068E  5027               	movf	(___fldiv@a+3)^0,w,c
  5436  000690  0B80               	andlw	128
  5437  000692  1A30               	xorwf	___fldiv@sign^0,f,c
  5438  000694  5027               	movf	(___fldiv@a+3)^0,w,c
  5439  000696  2427               	addwf	(___fldiv@a+3)^0,w,c
  5440  000698  6E38               	movwf	___fldiv@aexp^0,c
  5441  00069A  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5442  00069C  EF52  F003         	goto	u2771
  5443  0006A0  EF55  F003         	goto	u2770
  5444  0006A4                     u2771:
  5445  0006A4  FFFF               	dw	65535	; assembler added errata NOP
  5446  0006A6  EF57  F003         	goto	l3593
  5447  0006AA                     u2770:
  5448  0006AA  FFFF               	dw	65535	; assembler added errata NOP
  5449  0006AC  8038               	bsf	___fldiv@aexp^0,0,c
  5450  0006AE                     l3593:
  5451  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5452  0006B0  5038               	movf	___fldiv@aexp^0,w,c
  5453  0006B2  B4D8               	btfsc	status,2,c
  5454  0006B4  EF5E  F003         	goto	u2781
  5455  0006B8  EF61  F003         	goto	u2780
  5456  0006BC                     u2781:
  5457  0006BC  FFFF               	dw	65535	; assembler added errata NOP
  5458  0006BE  EF7A  F003         	goto	l3603
  5459  0006C2                     u2780:
  5460  0006C2  FFFF               	dw	65535	; assembler added errata NOP
  5461  0006C4  2838               	incf	___fldiv@aexp^0,w,c
  5462  0006C6  A4D8               	btfss	status,2,c
  5463  0006C8  EF68  F003         	goto	u2791
  5464  0006CC  EF6B  F003         	goto	u2790
  5465  0006D0                     u2791:
  5466  0006D0  FFFF               	dw	65535	; assembler added errata NOP
  5467  0006D2  EF74  F003         	goto	l3599
  5468  0006D6                     u2790:
  5469  0006D6  FFFF               	dw	65535	; assembler added errata NOP
  5470  0006D8  0E00               	movlw	0
  5471  0006DA  6E24               	movwf	___fldiv@a^0,c
  5472  0006DC  0E00               	movlw	0
  5473  0006DE  6E25               	movwf	(___fldiv@a+1)^0,c
  5474  0006E0  0E00               	movlw	0
  5475  0006E2  6E26               	movwf	(___fldiv@a+2)^0,c
  5476  0006E4  0E00               	movlw	0
  5477  0006E6  6E27               	movwf	(___fldiv@a+3)^0,c
  5478  0006E8                     l3599:
  5479  0006E8  FFFF               	dw	65535	; assembler added errata NOP
  5480  0006EA  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5481  0006EC  0E00               	movlw	0
  5482  0006EE  6E27               	movwf	(___fldiv@a+3)^0,c
  5483  0006F0  EF83  F003         	goto	l3605
  5484  0006F4                     l3603:
  5485  0006F4  FFFF               	dw	65535	; assembler added errata NOP
  5486  0006F6  0E00               	movlw	0
  5487  0006F8  6E24               	movwf	___fldiv@a^0,c
  5488  0006FA  0E00               	movlw	0
  5489  0006FC  6E25               	movwf	(___fldiv@a+1)^0,c
  5490  0006FE  0E00               	movlw	0
  5491  000700  6E26               	movwf	(___fldiv@a+2)^0,c
  5492  000702  0E00               	movlw	0
  5493  000704  6E27               	movwf	(___fldiv@a+3)^0,c
  5494  000706                     l3605:
  5495  000706  FFFF               	dw	65535	; assembler added errata NOP
  5496  000708  5024               	movf	___fldiv@a^0,w,c
  5497  00070A  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5498  00070C  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5499  00070E  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5500  000710  A4D8               	btfss	status,2,c
  5501  000712  EF8D  F003         	goto	u2801
  5502  000716  EF90  F003         	goto	u2800
  5503  00071A                     u2801:
  5504  00071A  FFFF               	dw	65535	; assembler added errata NOP
  5505  00071C  EFAA  F003         	goto	l3617
  5506  000720                     u2800:
  5507  000720  FFFF               	dw	65535	; assembler added errata NOP
  5508  000722  0E00               	movlw	0
  5509  000724  6E20               	movwf	___fldiv@b^0,c
  5510  000726  0E00               	movlw	0
  5511  000728  6E21               	movwf	(___fldiv@b+1)^0,c
  5512  00072A  0E00               	movlw	0
  5513  00072C  6E22               	movwf	(___fldiv@b+2)^0,c
  5514  00072E  0E00               	movlw	0
  5515  000730  6E23               	movwf	(___fldiv@b+3)^0,c
  5516  000732  0E80               	movlw	128
  5517  000734  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5518  000736  0E7F               	movlw	127
  5519  000738  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5520  00073A                     l3611:
  5521  00073A  FFFF               	dw	65535	; assembler added errata NOP
  5522  00073C  5030               	movf	___fldiv@sign^0,w,c
  5523  00073E  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5524  000740  C020  F020         	movff	___fldiv@b,?___fldiv
  5525  000744  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5526  000748  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5527  00074C  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5528  000750  EF1F  F005         	goto	l1198
  5529  000754                     l3617:
  5530  000754  FFFF               	dw	65535	; assembler added errata NOP
  5531  000756  5037               	movf	___fldiv@bexp^0,w,c
  5532  000758  A4D8               	btfss	status,2,c
  5533  00075A  EFB1  F003         	goto	u2811
  5534  00075E  EFB4  F003         	goto	u2810
  5535  000762                     u2811:
  5536  000762  FFFF               	dw	65535	; assembler added errata NOP
  5537  000764  EFBF  F003         	goto	l3625
  5538  000768                     u2810:
  5539  000768  FFFF               	dw	65535	; assembler added errata NOP
  5540  00076A  0E00               	movlw	0
  5541  00076C  6E20               	movwf	?___fldiv^0,c
  5542  00076E  0E00               	movlw	0
  5543  000770  6E21               	movwf	(?___fldiv+1)^0,c
  5544  000772  0E00               	movlw	0
  5545  000774  6E22               	movwf	(?___fldiv+2)^0,c
  5546  000776  0E00               	movlw	0
  5547  000778  6E23               	movwf	(?___fldiv+3)^0,c
  5548  00077A  EF1F  F005         	goto	l1198
  5549  00077E                     l3625:
  5550  00077E  FFFF               	dw	65535	; assembler added errata NOP
  5551  000780  5038               	movf	___fldiv@aexp^0,w,c
  5552  000782  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5553  000786  6A29               	clrf	(??___fldiv+1)^0,c
  5554  000788  5E28               	subwf	??___fldiv^0,f,c
  5555  00078A  0E00               	movlw	0
  5556  00078C  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5557  00078E  0E7F               	movlw	127
  5558  000790  2428               	addwf	??___fldiv^0,w,c
  5559  000792  6E31               	movwf	___fldiv@new_exp^0,c
  5560  000794  0E00               	movlw	0
  5561  000796  2029               	addwfc	(??___fldiv+1)^0,w,c
  5562  000798  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5563  00079A  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5564  00079E  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5565  0007A2  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5566  0007A6  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5567  0007AA  0E00               	movlw	0
  5568  0007AC  6E20               	movwf	___fldiv@b^0,c
  5569  0007AE  0E00               	movlw	0
  5570  0007B0  6E21               	movwf	(___fldiv@b+1)^0,c
  5571  0007B2  0E00               	movlw	0
  5572  0007B4  6E22               	movwf	(___fldiv@b+2)^0,c
  5573  0007B6  0E00               	movlw	0
  5574  0007B8  6E23               	movwf	(___fldiv@b+3)^0,c
  5575  0007BA  0E00               	movlw	0
  5576  0007BC  6E33               	movwf	___fldiv@grs^0,c
  5577  0007BE  0E00               	movlw	0
  5578  0007C0  6E34               	movwf	(___fldiv@grs+1)^0,c
  5579  0007C2  0E00               	movlw	0
  5580  0007C4  6E35               	movwf	(___fldiv@grs+2)^0,c
  5581  0007C6  0E00               	movlw	0
  5582  0007C8  6E36               	movwf	(___fldiv@grs+3)^0,c
  5583  0007CA  0E00               	movlw	0
  5584  0007CC  6E38               	movwf	___fldiv@aexp^0,c
  5585  0007CE  EF2B  F004         	goto	l1200
  5586  0007D2                     l3635:
  5587  0007D2  FFFF               	dw	65535	; assembler added errata NOP
  5588  0007D4  5038               	movf	___fldiv@aexp^0,w,c
  5589  0007D6  B4D8               	btfsc	status,2,c
  5590  0007D8  EFF0  F003         	goto	u2821
  5591  0007DC  EFF3  F003         	goto	u2820
  5592  0007E0                     u2821:
  5593  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  5594  0007E2  EF0E  F004         	goto	l3643
  5595  0007E6                     u2820:
  5596  0007E6  FFFF               	dw	65535	; assembler added errata NOP
  5597  0007E8  90D8               	bcf	status,0,c
  5598  0007EA  362C               	rlcf	___fldiv@rem^0,f,c
  5599  0007EC  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5600  0007EE  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5601  0007F0  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5602  0007F2  90D8               	bcf	status,0,c
  5603  0007F4  3620               	rlcf	___fldiv@b^0,f,c
  5604  0007F6  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5605  0007F8  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5606  0007FA  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5607  0007FC  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5608  0007FE  EF03  F004         	goto	u2831
  5609  000802  EF06  F004         	goto	u2830
  5610  000806                     u2831:
  5611  000806  FFFF               	dw	65535	; assembler added errata NOP
  5612  000808  EF08  F004         	goto	l1203
  5613  00080C                     u2830:
  5614  00080C  FFFF               	dw	65535	; assembler added errata NOP
  5615  00080E  8020               	bsf	___fldiv@b^0,0,c
  5616  000810                     l1203:
  5617  000810  FFFF               	dw	65535	; assembler added errata NOP
  5618  000812  90D8               	bcf	status,0,c
  5619  000814  3633               	rlcf	___fldiv@grs^0,f,c
  5620  000816  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5621  000818  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5622  00081A  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5623  00081C                     l3643:
  5624  00081C  FFFF               	dw	65535	; assembler added errata NOP
  5625  00081E  5024               	movf	___fldiv@a^0,w,c
  5626  000820  5C2C               	subwf	___fldiv@rem^0,w,c
  5627  000822  5025               	movf	(___fldiv@a+1)^0,w,c
  5628  000824  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5629  000826  5026               	movf	(___fldiv@a+2)^0,w,c
  5630  000828  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5631  00082A  5027               	movf	(___fldiv@a+3)^0,w,c
  5632  00082C  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5633  00082E  A0D8               	btfss	status,0,c
  5634  000830  EF1C  F004         	goto	u2841
  5635  000834  EF1F  F004         	goto	u2840
  5636  000838                     u2841:
  5637  000838  FFFF               	dw	65535	; assembler added errata NOP
  5638  00083A  EF29  F004         	goto	l3649
  5639  00083E                     u2840:
  5640  00083E  FFFF               	dw	65535	; assembler added errata NOP
  5641  000840  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5642  000842  5024               	movf	___fldiv@a^0,w,c
  5643  000844  5E2C               	subwf	___fldiv@rem^0,f,c
  5644  000846  5025               	movf	(___fldiv@a+1)^0,w,c
  5645  000848  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5646  00084A  5026               	movf	(___fldiv@a+2)^0,w,c
  5647  00084C  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5648  00084E  5027               	movf	(___fldiv@a+3)^0,w,c
  5649  000850  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5650  000852                     l3649:
  5651  000852  FFFF               	dw	65535	; assembler added errata NOP
  5652  000854  2A38               	incf	___fldiv@aexp^0,f,c
  5653  000856                     l1200:
  5654  000856  FFFF               	dw	65535	; assembler added errata NOP
  5655  000858  0E19               	movlw	25
  5656  00085A  6438               	cpfsgt	___fldiv@aexp^0,c
  5657  00085C  EF32  F004         	goto	u2851
  5658  000860  EF35  F004         	goto	u2850
  5659  000864                     u2851:
  5660  000864  FFFF               	dw	65535	; assembler added errata NOP
  5661  000866  EFE9  F003         	goto	l3635
  5662  00086A                     u2850:
  5663  00086A  FFFF               	dw	65535	; assembler added errata NOP
  5664  00086C  502C               	movf	___fldiv@rem^0,w,c
  5665  00086E  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5666  000870  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5667  000872  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5668  000874  B4D8               	btfsc	status,2,c
  5669  000876  EF3F  F004         	goto	u2861
  5670  00087A  EF42  F004         	goto	u2860
  5671  00087E                     u2861:
  5672  00087E  FFFF               	dw	65535	; assembler added errata NOP
  5673  000880  EF5F  F004         	goto	l3661
  5674  000884                     u2860:
  5675  000884  FFFF               	dw	65535	; assembler added errata NOP
  5676  000886  8033               	bsf	___fldiv@grs^0,0,c
  5677  000888  EF5F  F004         	goto	l3661
  5678  00088C                     l3655:
  5679  00088C  FFFF               	dw	65535	; assembler added errata NOP
  5680  00088E  90D8               	bcf	status,0,c
  5681  000890  3620               	rlcf	___fldiv@b^0,f,c
  5682  000892  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5683  000894  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5684  000896  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5685  000898  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5686  00089A  EF51  F004         	goto	u2871
  5687  00089E  EF54  F004         	goto	u2870
  5688  0008A2                     u2871:
  5689  0008A2  FFFF               	dw	65535	; assembler added errata NOP
  5690  0008A4  EF56  F004         	goto	l1209
  5691  0008A8                     u2870:
  5692  0008A8  FFFF               	dw	65535	; assembler added errata NOP
  5693  0008AA  8020               	bsf	___fldiv@b^0,0,c
  5694  0008AC                     l1209:
  5695  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5696  0008AE  90D8               	bcf	status,0,c
  5697  0008B0  3633               	rlcf	___fldiv@grs^0,f,c
  5698  0008B2  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5699  0008B4  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5700  0008B6  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5701  0008B8  0631               	decf	___fldiv@new_exp^0,f,c
  5702  0008BA  A0D8               	btfss	status,0,c
  5703  0008BC  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5704  0008BE                     l3661:
  5705  0008BE  FFFF               	dw	65535	; assembler added errata NOP
  5706  0008C0  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5707  0008C2  EF65  F004         	goto	u2881
  5708  0008C6  EF68  F004         	goto	u2880
  5709  0008CA                     u2881:
  5710  0008CA  FFFF               	dw	65535	; assembler added errata NOP
  5711  0008CC  EF46  F004         	goto	l3655
  5712  0008D0                     u2880:
  5713  0008D0  FFFF               	dw	65535	; assembler added errata NOP
  5714  0008D2  0E00               	movlw	0
  5715  0008D4  6E38               	movwf	___fldiv@aexp^0,c
  5716  0008D6  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5717  0008D8  EF70  F004         	goto	u2891
  5718  0008DC  EF73  F004         	goto	u2890
  5719  0008E0                     u2891:
  5720  0008E0  FFFF               	dw	65535	; assembler added errata NOP
  5721  0008E2  EF9E  F004         	goto	l1211
  5722  0008E6                     u2890:
  5723  0008E6  FFFF               	dw	65535	; assembler added errata NOP
  5724  0008E8  0EFF               	movlw	255
  5725  0008EA  1433               	andwf	___fldiv@grs^0,w,c
  5726  0008EC  6E28               	movwf	??___fldiv^0,c
  5727  0008EE  0EFF               	movlw	255
  5728  0008F0  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5729  0008F2  6E29               	movwf	(??___fldiv+1)^0,c
  5730  0008F4  0EFF               	movlw	255
  5731  0008F6  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5732  0008F8  6E2A               	movwf	(??___fldiv+2)^0,c
  5733  0008FA  0E7F               	movlw	127
  5734  0008FC  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5735  0008FE  6E2B               	movwf	(??___fldiv+3)^0,c
  5736  000900  5028               	movf	??___fldiv^0,w,c
  5737  000902  1029               	iorwf	(??___fldiv+1)^0,w,c
  5738  000904  102A               	iorwf	(??___fldiv+2)^0,w,c
  5739  000906  102B               	iorwf	(??___fldiv+3)^0,w,c
  5740  000908  B4D8               	btfsc	status,2,c
  5741  00090A  EF89  F004         	goto	u2901
  5742  00090E  EF8C  F004         	goto	u2900
  5743  000912                     u2901:
  5744  000912  FFFF               	dw	65535	; assembler added errata NOP
  5745  000914  EF92  F004         	goto	l1212
  5746  000918                     u2900:
  5747  000918  FFFF               	dw	65535	; assembler added errata NOP
  5748  00091A                     l3669:
  5749  00091A  FFFF               	dw	65535	; assembler added errata NOP
  5750  00091C  0E01               	movlw	1
  5751  00091E  6E38               	movwf	___fldiv@aexp^0,c
  5752  000920  EF9E  F004         	goto	l1211
  5753  000924                     l1212:
  5754  000924  FFFF               	dw	65535	; assembler added errata NOP
  5755  000926  A020               	btfss	___fldiv@b^0,0,c
  5756  000928  EF98  F004         	goto	u2911
  5757  00092C  EF9B  F004         	goto	u2910
  5758  000930                     u2911:
  5759  000930  FFFF               	dw	65535	; assembler added errata NOP
  5760  000932  EF9E  F004         	goto	l1211
  5761  000936                     u2910:
  5762  000936  FFFF               	dw	65535	; assembler added errata NOP
  5763  000938  EF8D  F004         	goto	l3669
  5764  00093C                     l1211:
  5765  00093C  FFFF               	dw	65535	; assembler added errata NOP
  5766  00093E  5038               	movf	___fldiv@aexp^0,w,c
  5767  000940  B4D8               	btfsc	status,2,c
  5768  000942  EFA5  F004         	goto	u2921
  5769  000946  EFA8  F004         	goto	u2920
  5770  00094A                     u2921:
  5771  00094A  FFFF               	dw	65535	; assembler added errata NOP
  5772  00094C  EFCF  F004         	goto	l3681
  5773  000950                     u2920:
  5774  000950  FFFF               	dw	65535	; assembler added errata NOP
  5775  000952  0E01               	movlw	1
  5776  000954  2620               	addwf	___fldiv@b^0,f,c
  5777  000956  0E00               	movlw	0
  5778  000958  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5779  00095A  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5780  00095C  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5781  00095E  A023               	btfss	(___fldiv@b+3)^0,0,c
  5782  000960  EFB4  F004         	goto	u2931
  5783  000964  EFB7  F004         	goto	u2930
  5784  000968                     u2931:
  5785  000968  FFFF               	dw	65535	; assembler added errata NOP
  5786  00096A  EFCF  F004         	goto	l3681
  5787  00096E                     u2930:
  5788  00096E  FFFF               	dw	65535	; assembler added errata NOP
  5789  000970  C020  F028         	movff	___fldiv@b,??___fldiv
  5790  000974  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5791  000978  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5792  00097C  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5793  000980  342B               	rlcf	(??___fldiv+3)^0,w,c
  5794  000982  322B               	rrcf	(??___fldiv+3)^0,f,c
  5795  000984  322A               	rrcf	(??___fldiv+2)^0,f,c
  5796  000986  3229               	rrcf	(??___fldiv+1)^0,f,c
  5797  000988  3228               	rrcf	??___fldiv^0,f,c
  5798  00098A  C028  F020         	movff	??___fldiv,___fldiv@b
  5799  00098E  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5800  000992  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5801  000996  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5802  00099A  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5803  00099C  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5804  00099E                     l3681:
  5805  00099E  FFFF               	dw	65535	; assembler added errata NOP
  5806  0009A0  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5807  0009A2  EFDB  F004         	goto	u2941
  5808  0009A6  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5809  0009A8  E109               	bnz	u2940
  5810  0009AA  2831               	incf	___fldiv@new_exp^0,w,c
  5811  0009AC  A0D8               	btfss	status,0,c
  5812  0009AE  EFDB  F004         	goto	u2941
  5813  0009B2  EFDE  F004         	goto	u2940
  5814  0009B6                     u2941:
  5815  0009B6  FFFF               	dw	65535	; assembler added errata NOP
  5816  0009B8  EFEA  F004         	goto	l3685
  5817  0009BC                     u2940:
  5818  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  5819  0009BE  0E00               	movlw	0
  5820  0009C0  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5821  0009C2  6831               	setf	___fldiv@new_exp^0,c
  5822  0009C4  0E00               	movlw	0
  5823  0009C6  6E20               	movwf	___fldiv@b^0,c
  5824  0009C8  0E00               	movlw	0
  5825  0009CA  6E21               	movwf	(___fldiv@b+1)^0,c
  5826  0009CC  0E00               	movlw	0
  5827  0009CE  6E22               	movwf	(___fldiv@b+2)^0,c
  5828  0009D0  0E00               	movlw	0
  5829  0009D2  6E23               	movwf	(___fldiv@b+3)^0,c
  5830  0009D4                     l3685:
  5831  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  5832  0009D6  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5833  0009D8  EFF9  F004         	goto	u2950
  5834  0009DC  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5835  0009DE  E106               	bnz	u2951
  5836  0009E0  0431               	decf	___fldiv@new_exp^0,w,c
  5837  0009E2  B0D8               	btfsc	status,0,c
  5838  0009E4  EFF6  F004         	goto	u2951
  5839  0009E8  EFF9  F004         	goto	u2950
  5840  0009EC                     u2951:
  5841  0009EC  FFFF               	dw	65535	; assembler added errata NOP
  5842  0009EE  EF08  F005         	goto	l3689
  5843  0009F2                     u2950:
  5844  0009F2  FFFF               	dw	65535	; assembler added errata NOP
  5845  0009F4  0E00               	movlw	0
  5846  0009F6  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5847  0009F8  0E00               	movlw	0
  5848  0009FA  6E31               	movwf	___fldiv@new_exp^0,c
  5849  0009FC  0E00               	movlw	0
  5850  0009FE  6E20               	movwf	___fldiv@b^0,c
  5851  000A00  0E00               	movlw	0
  5852  000A02  6E21               	movwf	(___fldiv@b+1)^0,c
  5853  000A04  0E00               	movlw	0
  5854  000A06  6E22               	movwf	(___fldiv@b+2)^0,c
  5855  000A08  0E00               	movlw	0
  5856  000A0A  6E23               	movwf	(___fldiv@b+3)^0,c
  5857  000A0C  0E00               	movlw	0
  5858  000A0E  6E30               	movwf	___fldiv@sign^0,c
  5859  000A10                     l3689:
  5860  000A10  FFFF               	dw	65535	; assembler added errata NOP
  5861  000A12  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5862  000A16  A037               	btfss	___fldiv@bexp^0,0,c
  5863  000A18  EF10  F005         	goto	u2961
  5864  000A1C  EF13  F005         	goto	u2960
  5865  000A20                     u2961:
  5866  000A20  FFFF               	dw	65535	; assembler added errata NOP
  5867  000A22  EF17  F005         	goto	l3695
  5868  000A26                     u2960:
  5869  000A26  FFFF               	dw	65535	; assembler added errata NOP
  5870  000A28  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5871  000A2A  EF19  F005         	goto	l3697
  5872  000A2E                     l3695:
  5873  000A2E  FFFF               	dw	65535	; assembler added errata NOP
  5874  000A30  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5875  000A32                     l3697:
  5876  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5877  000A34  90D8               	bcf	status,0,c
  5878  000A36  3037               	rrcf	___fldiv@bexp^0,w,c
  5879  000A38  6E23               	movwf	(___fldiv@b+3)^0,c
  5880  000A3A  EF9D  F003         	goto	l3611
  5881  000A3E                     l1198:
  5882  000A3E  FFFF               	dw	65535	; assembler added errata NOP
  5883  000A40  0012               	return		;funcret
  5884  000A42  FFFF               	dw	65535	; errata NOP
  5885  000A44                     __end_of___fldiv:
  5886                           	callstack 0
  5887                           
  5888 ;; *************** function _releaseObj *****************
  5889 ;; Defined at:
  5890 ;;		line 611 in file "motors.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;		None
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;		None
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      void 
  5897 ;; Registers used:
  5898 ;;		wreg, status,2, status,0, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5904 ;;      Params:         0       0       0       0       0       0       0
  5905 ;;      Locals:         0       0       0       0       0       0       0
  5906 ;;      Temps:          0       0       0       0       0       0       0
  5907 ;;      Totals:         0       0       0       0       0       0       0
  5908 ;;Total ram usage:        0 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    5
  5911 ;; This function calls:
  5912 ;;		_stepMade
  5913 ;; This function is called by:
  5914 ;;		_executeData
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text34
  5919  0024F6                     __ptext34:
  5920                           	callstack 0
  5921  0024F6                     _releaseObj:
  5922                           	callstack 0
  5923  0024F6  FFFF               	dw	65535	; assembler added errata NOP
  5924  0024F8                     
  5925                           ;motors.c: 612:     LATDbits.LATD1 = 0;
  5926  0024F8  928C               	bcf	140,1,c	;volatile
  5927                           
  5928                           ;motors.c: 615:     T2CONbits.TMR2ON = 1;
  5929  0024FA  84CA               	bsf	202,2,c	;volatile
  5930  0024FC                     l4083:
  5931  0024FC  FFFF               	dw	65535	; assembler added errata NOP
  5932  0024FE  ECE8  F012         	call	_stepMade	;wreg free
  5933  002502  5012               	movf	?_stepMade^0,w,c
  5934  002504  1013               	iorwf	(?_stepMade+1)^0,w,c
  5935  002506  B4D8               	btfsc	status,2,c
  5936  002508  EF88  F012         	goto	u3601
  5937  00250C  EF8B  F012         	goto	u3600
  5938  002510                     u3601:
  5939  002510  FFFF               	dw	65535	; assembler added errata NOP
  5940  002512  EF7E  F012         	goto	l4083
  5941  002516                     u3600:
  5942  002516  FFFF               	dw	65535	; assembler added errata NOP
  5943  002518                     
  5944                           ;motors.c: 617:     T2CONbits.TMR2ON = 1;
  5945  002518  84CA               	bsf	202,2,c	;volatile
  5946  00251A                     
  5947                           ;motors.c: 618:     TMR2 = 0;
  5948  00251A  0E00               	movlw	0
  5949  00251C  6ECC               	movwf	204,c	;volatile
  5950  00251E  0012               	return		;funcret
  5951  002520  FFFF               	dw	65535	; errata NOP
  5952  002522                     __end_of_releaseObj:
  5953                           	callstack 0
  5954                           
  5955 ;; *************** function _pickObject *****************
  5956 ;; Defined at:
  5957 ;;		line 598 in file "motors.c"
  5958 ;; Parameters:    Size  Location     Type
  5959 ;;		None
  5960 ;; Auto vars:     Size  Location     Type
  5961 ;;		None
  5962 ;; Return value:  Size  Location     Type
  5963 ;;                  1    wreg      void 
  5964 ;; Registers used:
  5965 ;;		wreg, status,2, status,0, cstack
  5966 ;; Tracked objects:
  5967 ;;		On entry : 0/0
  5968 ;;		On exit  : 0/0
  5969 ;;		Unchanged: 0/0
  5970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5971 ;;      Params:         0       0       0       0       0       0       0
  5972 ;;      Locals:         0       0       0       0       0       0       0
  5973 ;;      Temps:          0       0       0       0       0       0       0
  5974 ;;      Totals:         0       0       0       0       0       0       0
  5975 ;;Total ram usage:        0 bytes
  5976 ;; Hardware stack levels used:    1
  5977 ;; Hardware stack levels required when called:    5
  5978 ;; This function calls:
  5979 ;;		_stepMade
  5980 ;; This function is called by:
  5981 ;;		_executeData
  5982 ;; This function uses a non-reentrant model
  5983 ;;
  5984                           
  5985                           	psect	text35
  5986  002522                     __ptext35:
  5987                           	callstack 0
  5988  002522                     _pickObject:
  5989                           	callstack 0
  5990  002522  FFFF               	dw	65535	; assembler added errata NOP
  5991  002524                     
  5992                           ;motors.c: 599:     LATDbits.LATD1 = 1;
  5993  002524  828C               	bsf	140,1,c	;volatile
  5994                           
  5995                           ;motors.c: 602:     T2CONbits.TMR2ON = 1;
  5996  002526  84CA               	bsf	202,2,c	;volatile
  5997  002528                     l4077:
  5998  002528  FFFF               	dw	65535	; assembler added errata NOP
  5999  00252A  ECE8  F012         	call	_stepMade	;wreg free
  6000  00252E  5012               	movf	?_stepMade^0,w,c
  6001  002530  1013               	iorwf	(?_stepMade+1)^0,w,c
  6002  002532  B4D8               	btfsc	status,2,c
  6003  002534  EF9E  F012         	goto	u3591
  6004  002538  EFA1  F012         	goto	u3590
  6005  00253C                     u3591:
  6006  00253C  FFFF               	dw	65535	; assembler added errata NOP
  6007  00253E  EF94  F012         	goto	l4077
  6008  002542                     u3590:
  6009  002542  FFFF               	dw	65535	; assembler added errata NOP
  6010  002544                     
  6011                           ;motors.c: 604:     T2CONbits.TMR2ON = 1;
  6012  002544  84CA               	bsf	202,2,c	;volatile
  6013  002546                     
  6014                           ;motors.c: 605:     TMR2 = 0;
  6015  002546  0E00               	movlw	0
  6016  002548  6ECC               	movwf	204,c	;volatile
  6017  00254A  0012               	return		;funcret
  6018  00254C  FFFF               	dw	65535	; errata NOP
  6019  00254E                     __end_of_pickObject:
  6020                           	callstack 0
  6021                           
  6022 ;; *************** function _moveToPoint *****************
  6023 ;; Defined at:
  6024 ;;		line 263 in file "motors.c"
  6025 ;; Parameters:    Size  Location     Type
  6026 ;;  x1              2   21[COMRAM] int 
  6027 ;;  y1              2   23[COMRAM] int 
  6028 ;;  x2              2   25[COMRAM] int 
  6029 ;;  y2              2   27[COMRAM] int 
  6030 ;; Auto vars:     Size  Location     Type
  6031 ;;  keepMovingX     1   34[COMRAM] unsigned char 
  6032 ;;  MOT2Directio    1   33[COMRAM] unsigned char 
  6033 ;;  MOT1Directio    1   32[COMRAM] unsigned char 
  6034 ;;  keepMovingY     1   31[COMRAM] unsigned char 
  6035 ;; Return value:  Size  Location     Type
  6036 ;;                  1    wreg      unsigned char 
  6037 ;; Registers used:
  6038 ;;		wreg, status,2, status,0, cstack
  6039 ;; Tracked objects:
  6040 ;;		On entry : 0/0
  6041 ;;		On exit  : 0/0
  6042 ;;		Unchanged: 0/0
  6043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6044 ;;      Params:         8       0       0       0       0       0       0
  6045 ;;      Locals:         4       0       0       0       0       0       0
  6046 ;;      Temps:          2       0       0       0       0       0       0
  6047 ;;      Totals:        14       0       0       0       0       0       0
  6048 ;;Total ram usage:       14 bytes
  6049 ;; Hardware stack levels used:    1
  6050 ;; Hardware stack levels required when called:    5
  6051 ;; This function calls:
  6052 ;;		_resetStep
  6053 ;;		_setDirection
  6054 ;;		_stepCounter
  6055 ;;		_stepMade
  6056 ;; This function is called by:
  6057 ;;		_executeData
  6058 ;; This function uses a non-reentrant model
  6059 ;;
  6060                           
  6061                           	psect	text36
  6062  000A44                     __ptext36:
  6063                           	callstack 0
  6064  000A44                     _moveToPoint:
  6065                           	callstack 0
  6066  000A44  FFFF               	dw	65535	; assembler added errata NOP
  6067  000A46                     
  6068                           ;motors.c: 265:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 268:     if(x2
      +                           > maxX || y2 > maxY){
  6069  000A46  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6070  000A48  E107               	bnz	u3201
  6071  000A4A  0EFB               	movlw	251
  6072  000A4C  5C1A               	subwf	moveToPoint@x2^0,w,c
  6073  000A4E  B0D8               	btfsc	status,0,c
  6074  000A50  EF2C  F005         	goto	u3201
  6075  000A54  EF2F  F005         	goto	u3200
  6076  000A58                     u3201:
  6077  000A58  FFFF               	dw	65535	; assembler added errata NOP
  6078  000A5A  EF3C  F005         	goto	l3847
  6079  000A5E                     u3200:
  6080  000A5E  FFFF               	dw	65535	; assembler added errata NOP
  6081  000A60  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6082  000A62  E10A               	bnz	u3210
  6083  000A64  0EFB               	movlw	251
  6084  000A66  5C1C               	subwf	moveToPoint@y2^0,w,c
  6085  000A68  A0D8               	btfss	status,0,c
  6086  000A6A  EF39  F005         	goto	u3211
  6087  000A6E  EF3C  F005         	goto	u3210
  6088  000A72                     u3211:
  6089  000A72  FFFF               	dw	65535	; assembler added errata NOP
  6090  000A74  EF40  F005         	goto	l3851
  6091  000A78                     u3210:
  6092  000A78                     l3847:
  6093  000A78  FFFF               	dw	65535	; assembler added errata NOP
  6094                           
  6095                           ;motors.c: 269:         return(5);
  6096  000A7A  0E05               	movlw	5
  6097  000A7C  EFB2  F006         	goto	l143
  6098  000A80                     l3851:
  6099  000A80  FFFF               	dw	65535	; assembler added errata NOP
  6100                           
  6101                           ;motors.c: 273:     if((x2 - x1) > 0){
  6102  000A82  5016               	movf	moveToPoint@x1^0,w,c
  6103  000A84  5C1A               	subwf	moveToPoint@x2^0,w,c
  6104  000A86  6E1E               	movwf	??_moveToPoint^0,c
  6105  000A88  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6106  000A8A  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  6107  000A8C  6E1F               	movwf	(??_moveToPoint+1)^0,c
  6108  000A8E  BE1F               	btfsc	(??_moveToPoint+1)^0,7,c
  6109  000A90  EF52  F005         	goto	u3221
  6110  000A94  501F               	movf	(??_moveToPoint+1)^0,w,c
  6111  000A96  E109               	bnz	u3220
  6112  000A98  041E               	decf	??_moveToPoint^0,w,c
  6113  000A9A  A0D8               	btfss	status,0,c
  6114  000A9C  EF52  F005         	goto	u3221
  6115  000AA0  EF55  F005         	goto	u3220
  6116  000AA4                     u3221:
  6117  000AA4  FFFF               	dw	65535	; assembler added errata NOP
  6118  000AA6  EF5F  F005         	goto	l3857
  6119  000AAA                     u3220:
  6120  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  6121  000AAC                     
  6122                           ;motors.c: 274:         setDirection(1, 0);
  6123  000AAC  0E00               	movlw	0
  6124  000AAE  6E12               	movwf	setDirection@motor^0,c
  6125  000AB0  0E01               	movlw	1
  6126  000AB2  EC25  F011         	call	_setDirection
  6127  000AB6                     
  6128                           ;motors.c: 275:         MOT1Direction = 1;
  6129  000AB6  0E01               	movlw	1
  6130  000AB8  6E21               	movwf	moveToPoint@MOT1Direction^0,c
  6131                           
  6132                           ;motors.c: 276:     }else{
  6133  000ABA  EF67  F005         	goto	l3861
  6134  000ABE                     l3857:
  6135  000ABE  FFFF               	dw	65535	; assembler added errata NOP
  6136                           
  6137                           ;motors.c: 277:         setDirection(0, 0);
  6138  000AC0  0E00               	movlw	0
  6139  000AC2  6E12               	movwf	setDirection@motor^0,c
  6140  000AC4  0E00               	movlw	0
  6141  000AC6  EC25  F011         	call	_setDirection
  6142  000ACA                     
  6143                           ;motors.c: 278:         MOT1Direction = 0;
  6144  000ACA  0E00               	movlw	0
  6145  000ACC  6E21               	movwf	moveToPoint@MOT1Direction^0,c
  6146  000ACE                     l3861:
  6147  000ACE  FFFF               	dw	65535	; assembler added errata NOP
  6148                           
  6149                           ;motors.c: 281:     if((y2 - y1) > 0){
  6150  000AD0  5018               	movf	moveToPoint@y1^0,w,c
  6151  000AD2  5C1C               	subwf	moveToPoint@y2^0,w,c
  6152  000AD4  6E1E               	movwf	??_moveToPoint^0,c
  6153  000AD6  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6154  000AD8  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  6155  000ADA  6E1F               	movwf	(??_moveToPoint+1)^0,c
  6156  000ADC  BE1F               	btfsc	(??_moveToPoint+1)^0,7,c
  6157  000ADE  EF79  F005         	goto	u3231
  6158  000AE2  501F               	movf	(??_moveToPoint+1)^0,w,c
  6159  000AE4  E109               	bnz	u3230
  6160  000AE6  041E               	decf	??_moveToPoint^0,w,c
  6161  000AE8  A0D8               	btfss	status,0,c
  6162  000AEA  EF79  F005         	goto	u3231
  6163  000AEE  EF7C  F005         	goto	u3230
  6164  000AF2                     u3231:
  6165  000AF2  FFFF               	dw	65535	; assembler added errata NOP
  6166  000AF4  EF86  F005         	goto	l3867
  6167  000AF8                     u3230:
  6168  000AF8  FFFF               	dw	65535	; assembler added errata NOP
  6169  000AFA                     
  6170                           ;motors.c: 282:         setDirection(1, 1);
  6171  000AFA  0E01               	movlw	1
  6172  000AFC  6E12               	movwf	setDirection@motor^0,c
  6173  000AFE  0E01               	movlw	1
  6174  000B00  EC25  F011         	call	_setDirection
  6175  000B04                     
  6176                           ;motors.c: 283:         MOT2Direction = 1;
  6177  000B04  0E01               	movlw	1
  6178  000B06  6E22               	movwf	moveToPoint@MOT2Direction^0,c
  6179                           
  6180                           ;motors.c: 284:     }else{
  6181  000B08  EF8E  F005         	goto	l3871
  6182  000B0C                     l3867:
  6183  000B0C  FFFF               	dw	65535	; assembler added errata NOP
  6184                           
  6185                           ;motors.c: 285:         setDirection(0, 1);
  6186  000B0E  0E01               	movlw	1
  6187  000B10  6E12               	movwf	setDirection@motor^0,c
  6188  000B12  0E00               	movlw	0
  6189  000B14  EC25  F011         	call	_setDirection
  6190  000B18                     
  6191                           ;motors.c: 286:         MOT2Direction = 0;
  6192  000B18  0E00               	movlw	0
  6193  000B1A  6E22               	movwf	moveToPoint@MOT2Direction^0,c
  6194  000B1C                     l3871:
  6195  000B1C  FFFF               	dw	65535	; assembler added errata NOP
  6196                           
  6197                           ;motors.c: 289:     unsigned char keepMovingX = 1;
  6198  000B1E  0E01               	movlw	1
  6199  000B20  6E23               	movwf	moveToPoint@keepMovingX^0,c
  6200  000B22                     
  6201                           ;motors.c: 290:     unsigned char keepMovingY = 1;
  6202  000B22  0E01               	movlw	1
  6203  000B24  6E20               	movwf	moveToPoint@keepMovingY^0,c
  6204  000B26                     
  6205                           ;motors.c: 293:     T2CONbits.TMR2ON = 1;
  6206  000B26  84CA               	bsf	202,2,c	;volatile
  6207  000B28                     
  6208                           ;motors.c: 295:     tm0Error = 0;
  6209  000B28  0E00               	movlw	0
  6210  000B2A  6E5C               	movwf	(_tm0Error+1)^0,c
  6211  000B2C  0E00               	movlw	0
  6212  000B2E  6E5B               	movwf	_tm0Error^0,c
  6213  000B30                     
  6214                           ;motors.c: 296:     tm0Limit = 250;
  6215  000B30  0EFA               	movlw	250
  6216  000B32  6E68               	movwf	_tm0Limit^0,c
  6217  000B34                     
  6218                           ;motors.c: 297:     T0CONbits.TMR0ON = 1;
  6219  000B34  8ED5               	bsf	213,7,c	;volatile
  6220                           
  6221                           ;motors.c: 299:     while(keepMovingX || keepMovingY){
  6222  000B36  EF92  F006         	goto	l3933
  6223  000B3A                     l3883:
  6224  000B3A  FFFF               	dw	65535	; assembler added errata NOP
  6225                           
  6226                           ;motors.c: 302:         if(tm0Error){
  6227  000B3C  505B               	movf	_tm0Error^0,w,c
  6228  000B3E  105C               	iorwf	(_tm0Error+1)^0,w,c
  6229  000B40  B4D8               	btfsc	status,2,c
  6230  000B42  EFA5  F005         	goto	u3241
  6231  000B46  EFA8  F005         	goto	u3240
  6232  000B4A                     u3241:
  6233  000B4A  FFFF               	dw	65535	; assembler added errata NOP
  6234  000B4C  EFB1  F005         	goto	l3889
  6235  000B50                     u3240:
  6236  000B50  FFFF               	dw	65535	; assembler added errata NOP
  6237  000B52                     
  6238                           ;motors.c: 304:             LATAbits.LATA2 = 0;
  6239  000B52  9489               	bcf	137,2,c	;volatile
  6240                           
  6241                           ;motors.c: 305:             LATBbits.LATB4 = 0;
  6242  000B54  988A               	bcf	138,4,c	;volatile
  6243  000B56                     
  6244                           ;motors.c: 306:             tm0Error = 4;
  6245  000B56  0E00               	movlw	0
  6246  000B58  6E5C               	movwf	(_tm0Error+1)^0,c
  6247  000B5A  0E04               	movlw	4
  6248  000B5C  6E5B               	movwf	_tm0Error^0,c
  6249                           
  6250                           ;motors.c: 307:             break;
  6251  000B5E  EFA6  F006         	goto	l151
  6252  000B62                     l3889:
  6253  000B62  FFFF               	dw	65535	; assembler added errata NOP
  6254                           
  6255                           ;motors.c: 315:         if(MOT1Direction == 1){
  6256  000B64  0421               	decf	moveToPoint@MOT1Direction^0,w,c
  6257  000B66  A4D8               	btfss	status,2,c
  6258  000B68  EFB8  F005         	goto	u3251
  6259  000B6C  EFBB  F005         	goto	u3250
  6260  000B70                     u3251:
  6261  000B70  FFFF               	dw	65535	; assembler added errata NOP
  6262  000B72  EFE2  F005         	goto	l3899
  6263  000B76                     u3250:
  6264  000B76  FFFF               	dw	65535	; assembler added errata NOP
  6265  000B78                     
  6266                           ;motors.c: 316:             if(x1 + stepCounter() >= x2){
  6267  000B78  EC31  F013         	call	_stepCounter	;wreg free
  6268  000B7C  5016               	movf	moveToPoint@x1^0,w,c
  6269  000B7E  2612               	addwf	?_stepCounter^0,f,c
  6270  000B80  5017               	movf	(moveToPoint@x1+1)^0,w,c
  6271  000B82  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6272  000B84  501A               	movf	moveToPoint@x2^0,w,c
  6273  000B86  5C12               	subwf	?_stepCounter^0,w,c
  6274  000B88  501B               	movf	(moveToPoint@x2+1)^0,w,c
  6275  000B8A  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6276  000B8C  A0D8               	btfss	status,0,c
  6277  000B8E  EFCB  F005         	goto	u3261
  6278  000B92  EFCE  F005         	goto	u3260
  6279  000B96                     u3261:
  6280  000B96  FFFF               	dw	65535	; assembler added errata NOP
  6281  000B98  EFD4  F005         	goto	l3895
  6282  000B9C                     u3260:
  6283  000B9C  FFFF               	dw	65535	; assembler added errata NOP
  6284  000B9E                     l3893:
  6285  000B9E  FFFF               	dw	65535	; assembler added errata NOP
  6286                           
  6287                           ;motors.c: 318:                 keepMovingX = 0;
  6288  000BA0  0E00               	movlw	0
  6289  000BA2  6E23               	movwf	moveToPoint@keepMovingX^0,c
  6290                           
  6291                           ;motors.c: 319:             }else if(!keepMovingX){
  6292  000BA4  EF12  F006         	goto	l3909
  6293  000BA8                     l3895:
  6294  000BA8  FFFF               	dw	65535	; assembler added errata NOP
  6295  000BAA  5023               	movf	moveToPoint@keepMovingX^0,w,c
  6296  000BAC  A4D8               	btfss	status,2,c
  6297  000BAE  EFDB  F005         	goto	u3271
  6298  000BB2  EFDE  F005         	goto	u3270
  6299  000BB6                     u3271:
  6300  000BB6  FFFF               	dw	65535	; assembler added errata NOP
  6301  000BB8  EF12  F006         	goto	l3909
  6302  000BBC                     u3270:
  6303  000BBC  FFFF               	dw	65535	; assembler added errata NOP
  6304  000BBE                     
  6305                           ;motors.c: 321:                 LATAbits.LATA2 = 1;
  6306  000BBE  8489               	bsf	137,2,c	;volatile
  6307  000BC0  EF12  F006         	goto	l3909
  6308  000BC4                     l3899:
  6309  000BC4  FFFF               	dw	65535	; assembler added errata NOP
  6310  000BC6  5021               	movf	moveToPoint@MOT1Direction^0,w,c
  6311  000BC8  A4D8               	btfss	status,2,c
  6312  000BCA  EFE9  F005         	goto	u3281
  6313  000BCE  EFEC  F005         	goto	u3280
  6314  000BD2                     u3281:
  6315  000BD2  FFFF               	dw	65535	; assembler added errata NOP
  6316  000BD4  EF12  F006         	goto	l3909
  6317  000BD8                     u3280:
  6318  000BD8  FFFF               	dw	65535	; assembler added errata NOP
  6319  000BDA                     
  6320                           ;motors.c: 324:             if(x1 - stepCounter() <= x2){
  6321  000BDA  EC31  F013         	call	_stepCounter	;wreg free
  6322  000BDE  C016  F01E         	movff	moveToPoint@x1,??_moveToPoint
  6323  000BE2  C017  F01F         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6324  000BE6  5012               	movf	?_stepCounter^0,w,c
  6325  000BE8  5E1E               	subwf	??_moveToPoint^0,f,c
  6326  000BEA  5013               	movf	(?_stepCounter+1)^0,w,c
  6327  000BEC  5A1F               	subwfb	(??_moveToPoint+1)^0,f,c
  6328  000BEE  501E               	movf	??_moveToPoint^0,w,c
  6329  000BF0  5C1A               	subwf	moveToPoint@x2^0,w,c
  6330  000BF2  501F               	movf	(??_moveToPoint+1)^0,w,c
  6331  000BF4  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  6332  000BF6  A0D8               	btfss	status,0,c
  6333  000BF8  EF00  F006         	goto	u3291
  6334  000BFC  EF03  F006         	goto	u3290
  6335  000C00                     u3291:
  6336  000C00  FFFF               	dw	65535	; assembler added errata NOP
  6337  000C02  EF06  F006         	goto	l3905
  6338  000C06                     u3290:
  6339  000C06  FFFF               	dw	65535	; assembler added errata NOP
  6340  000C08  EFCF  F005         	goto	l3893
  6341  000C0C                     l3905:
  6342  000C0C  FFFF               	dw	65535	; assembler added errata NOP
  6343  000C0E  5023               	movf	moveToPoint@keepMovingX^0,w,c
  6344  000C10  A4D8               	btfss	status,2,c
  6345  000C12  EF0D  F006         	goto	u3301
  6346  000C16  EF10  F006         	goto	u3300
  6347  000C1A                     u3301:
  6348  000C1A  FFFF               	dw	65535	; assembler added errata NOP
  6349  000C1C  EF12  F006         	goto	l3909
  6350  000C20                     u3300:
  6351  000C20  FFFF               	dw	65535	; assembler added errata NOP
  6352  000C22                     
  6353                           ;motors.c: 329:                 LATAbits.LATA2 = 1;
  6354  000C22  8489               	bsf	137,2,c	;volatile
  6355  000C24                     l3909:
  6356  000C24  FFFF               	dw	65535	; assembler added errata NOP
  6357                           
  6358                           ;motors.c: 333:         if(MOT2Direction == 1){
  6359  000C26  0422               	decf	moveToPoint@MOT2Direction^0,w,c
  6360  000C28  A4D8               	btfss	status,2,c
  6361  000C2A  EF19  F006         	goto	u3311
  6362  000C2E  EF1C  F006         	goto	u3310
  6363  000C32                     u3311:
  6364  000C32  FFFF               	dw	65535	; assembler added errata NOP
  6365  000C34  EF43  F006         	goto	l3919
  6366  000C38                     u3310:
  6367  000C38  FFFF               	dw	65535	; assembler added errata NOP
  6368  000C3A                     
  6369                           ;motors.c: 335:             if(y1 + stepCounter() >= y2){
  6370  000C3A  EC31  F013         	call	_stepCounter	;wreg free
  6371  000C3E  5018               	movf	moveToPoint@y1^0,w,c
  6372  000C40  2612               	addwf	?_stepCounter^0,f,c
  6373  000C42  5019               	movf	(moveToPoint@y1+1)^0,w,c
  6374  000C44  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6375  000C46  501C               	movf	moveToPoint@y2^0,w,c
  6376  000C48  5C12               	subwf	?_stepCounter^0,w,c
  6377  000C4A  501D               	movf	(moveToPoint@y2+1)^0,w,c
  6378  000C4C  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6379  000C4E  A0D8               	btfss	status,0,c
  6380  000C50  EF2C  F006         	goto	u3321
  6381  000C54  EF2F  F006         	goto	u3320
  6382  000C58                     u3321:
  6383  000C58  FFFF               	dw	65535	; assembler added errata NOP
  6384  000C5A  EF35  F006         	goto	l3915
  6385  000C5E                     u3320:
  6386  000C5E  FFFF               	dw	65535	; assembler added errata NOP
  6387  000C60                     l3913:
  6388  000C60  FFFF               	dw	65535	; assembler added errata NOP
  6389                           
  6390                           ;motors.c: 337:                 keepMovingY = 0;
  6391  000C62  0E00               	movlw	0
  6392  000C64  6E20               	movwf	moveToPoint@keepMovingY^0,c
  6393                           
  6394                           ;motors.c: 338:             }else if(!keepMovingX){
  6395  000C66  EF75  F006         	goto	l3929
  6396  000C6A                     l3915:
  6397  000C6A  FFFF               	dw	65535	; assembler added errata NOP
  6398  000C6C  5023               	movf	moveToPoint@keepMovingX^0,w,c
  6399  000C6E  A4D8               	btfss	status,2,c
  6400  000C70  EF3C  F006         	goto	u3331
  6401  000C74  EF3F  F006         	goto	u3330
  6402  000C78                     u3331:
  6403  000C78  FFFF               	dw	65535	; assembler added errata NOP
  6404  000C7A  EF75  F006         	goto	l165
  6405  000C7E                     u3330:
  6406  000C7E  FFFF               	dw	65535	; assembler added errata NOP
  6407  000C80                     
  6408                           ;motors.c: 340:                 LATBbits.LATB4 = 1;
  6409  000C80  888A               	bsf	138,4,c	;volatile
  6410  000C82  EF75  F006         	goto	l3929
  6411  000C86                     l3919:
  6412  000C86  FFFF               	dw	65535	; assembler added errata NOP
  6413  000C88  5022               	movf	moveToPoint@MOT2Direction^0,w,c
  6414  000C8A  A4D8               	btfss	status,2,c
  6415  000C8C  EF4A  F006         	goto	u3341
  6416  000C90  EF4D  F006         	goto	u3340
  6417  000C94                     u3341:
  6418  000C94  FFFF               	dw	65535	; assembler added errata NOP
  6419  000C96  EF75  F006         	goto	l3929
  6420  000C9A                     u3340:
  6421  000C9A  FFFF               	dw	65535	; assembler added errata NOP
  6422  000C9C                     
  6423                           ;motors.c: 344:             if(y1 - stepCounter() <= y2){
  6424  000C9C  EC31  F013         	call	_stepCounter	;wreg free
  6425  000CA0  C018  F01E         	movff	moveToPoint@y1,??_moveToPoint
  6426  000CA4  C019  F01F         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6427  000CA8  5012               	movf	?_stepCounter^0,w,c
  6428  000CAA  5E1E               	subwf	??_moveToPoint^0,f,c
  6429  000CAC  5013               	movf	(?_stepCounter+1)^0,w,c
  6430  000CAE  5A1F               	subwfb	(??_moveToPoint+1)^0,f,c
  6431  000CB0  501E               	movf	??_moveToPoint^0,w,c
  6432  000CB2  5C1C               	subwf	moveToPoint@y2^0,w,c
  6433  000CB4  501F               	movf	(??_moveToPoint+1)^0,w,c
  6434  000CB6  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  6435  000CB8  A0D8               	btfss	status,0,c
  6436  000CBA  EF61  F006         	goto	u3351
  6437  000CBE  EF64  F006         	goto	u3350
  6438  000CC2                     u3351:
  6439  000CC2  FFFF               	dw	65535	; assembler added errata NOP
  6440  000CC4  EF67  F006         	goto	l3925
  6441  000CC8                     u3350:
  6442  000CC8  FFFF               	dw	65535	; assembler added errata NOP
  6443  000CCA  EF30  F006         	goto	l3913
  6444  000CCE                     l3925:
  6445  000CCE  FFFF               	dw	65535	; assembler added errata NOP
  6446  000CD0  5023               	movf	moveToPoint@keepMovingX^0,w,c
  6447  000CD2  A4D8               	btfss	status,2,c
  6448  000CD4  EF6E  F006         	goto	u3361
  6449  000CD8  EF71  F006         	goto	u3360
  6450  000CDC                     u3361:
  6451  000CDC  FFFF               	dw	65535	; assembler added errata NOP
  6452  000CDE  EF75  F006         	goto	l3929
  6453  000CE2                     u3360:
  6454  000CE2  FFFF               	dw	65535	; assembler added errata NOP
  6455  000CE4                     
  6456                           ;motors.c: 349:                 LATBbits.LATB4 = 1;
  6457  000CE4  888A               	bsf	138,4,c	;volatile
  6458  000CE6  EF75  F006         	goto	l3929
  6459  000CEA                     l165:
  6460  000CEA                     l3929:
  6461  000CEA  FFFF               	dw	65535	; assembler added errata NOP
  6462  000CEC  ECE8  F012         	call	_stepMade	;wreg free
  6463  000CF0  5012               	movf	?_stepMade^0,w,c
  6464  000CF2  1013               	iorwf	(?_stepMade+1)^0,w,c
  6465  000CF4  B4D8               	btfsc	status,2,c
  6466  000CF6  EF7F  F006         	goto	u3371
  6467  000CFA  EF82  F006         	goto	u3370
  6468  000CFE                     u3371:
  6469  000CFE  FFFF               	dw	65535	; assembler added errata NOP
  6470  000D00  EF75  F006         	goto	l3929
  6471  000D04                     u3370:
  6472  000D04  FFFF               	dw	65535	; assembler added errata NOP
  6473  000D06                     
  6474                           ;motors.c: 357:         LATAbits.LATA2 = 0;
  6475  000D06  9489               	bcf	137,2,c	;volatile
  6476                           
  6477                           ;motors.c: 358:         LATBbits.LATB4 = 0;
  6478  000D08  988A               	bcf	138,4,c	;volatile
  6479  000D0A                     l3931:
  6480  000D0A  FFFF               	dw	65535	; assembler added errata NOP
  6481  000D0C  ECE8  F012         	call	_stepMade	;wreg free
  6482  000D10  5012               	movf	?_stepMade^0,w,c
  6483  000D12  1013               	iorwf	(?_stepMade+1)^0,w,c
  6484  000D14  B4D8               	btfsc	status,2,c
  6485  000D16  EF8F  F006         	goto	u3381
  6486  000D1A  EF92  F006         	goto	u3380
  6487  000D1E                     u3381:
  6488  000D1E  FFFF               	dw	65535	; assembler added errata NOP
  6489  000D20  EF85  F006         	goto	l3931
  6490  000D24                     u3380:
  6491  000D24                     l3933:
  6492  000D24  FFFF               	dw	65535	; assembler added errata NOP
  6493                           
  6494                           ;motors.c: 299:     while(keepMovingX || keepMovingY){
  6495  000D26  5023               	movf	moveToPoint@keepMovingX^0,w,c
  6496  000D28  A4D8               	btfss	status,2,c
  6497  000D2A  EF99  F006         	goto	u3391
  6498  000D2E  EF9C  F006         	goto	u3390
  6499  000D32                     u3391:
  6500  000D32  FFFF               	dw	65535	; assembler added errata NOP
  6501  000D34  EF9D  F005         	goto	l3883
  6502  000D38                     u3390:
  6503  000D38  FFFF               	dw	65535	; assembler added errata NOP
  6504  000D3A  5020               	movf	moveToPoint@keepMovingY^0,w,c
  6505  000D3C  A4D8               	btfss	status,2,c
  6506  000D3E  EFA3  F006         	goto	u3401
  6507  000D42  EFA6  F006         	goto	u3400
  6508  000D46                     u3401:
  6509  000D46  FFFF               	dw	65535	; assembler added errata NOP
  6510  000D48  EF9D  F005         	goto	l3883
  6511  000D4C                     u3400:
  6512  000D4C                     l151:
  6513  000D4C  FFFF               	dw	65535	; assembler added errata NOP
  6514                           
  6515                           ;motors.c: 365:     T0CONbits.TMR0ON = 0;
  6516  000D4E  9ED5               	bcf	213,7,c	;volatile
  6517                           
  6518                           ;motors.c: 366:     T2CONbits.TMR2ON = 0;
  6519  000D50  94CA               	bcf	202,2,c	;volatile
  6520  000D52                     
  6521                           ;motors.c: 368:     TMR0 = 0;
  6522  000D52  0E00               	movlw	0
  6523  000D54  6ED7               	movwf	215,c	;volatile
  6524  000D56  0E00               	movlw	0
  6525  000D58  6ED6               	movwf	214,c	;volatile
  6526                           
  6527                           ;motors.c: 369:     TMR2 = 0;
  6528  000D5A  0E00               	movlw	0
  6529  000D5C  6ECC               	movwf	204,c	;volatile
  6530  000D5E                     
  6531                           ;motors.c: 372:     resetStep();
  6532  000D5E  EC4B  F013         	call	_resetStep	;wreg free
  6533  000D62                     
  6534                           ;motors.c: 374:     return(tm0Error);
  6535  000D62  505B               	movf	_tm0Error^0,w,c
  6536  000D64                     l143:
  6537  000D64  FFFF               	dw	65535	; assembler added errata NOP
  6538  000D66  0012               	return		;funcret
  6539  000D68  FFFF               	dw	65535	; errata NOP
  6540  000D6A                     __end_of_moveToPoint:
  6541                           	callstack 0
  6542                           
  6543 ;; *************** function _stepCounter *****************
  6544 ;; Defined at:
  6545 ;;		line 70 in file "timer.c"
  6546 ;; Parameters:    Size  Location     Type
  6547 ;;		None
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;		None
  6550 ;; Return value:  Size  Location     Type
  6551 ;;                  2   17[COMRAM] unsigned int 
  6552 ;; Registers used:
  6553 ;;		None
  6554 ;; Tracked objects:
  6555 ;;		On entry : 0/0
  6556 ;;		On exit  : 0/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6559 ;;      Params:         2       0       0       0       0       0       0
  6560 ;;      Locals:         0       0       0       0       0       0       0
  6561 ;;      Temps:          0       0       0       0       0       0       0
  6562 ;;      Totals:         2       0       0       0       0       0       0
  6563 ;;Total ram usage:        2 bytes
  6564 ;; Hardware stack levels used:    1
  6565 ;; Hardware stack levels required when called:    4
  6566 ;; This function calls:
  6567 ;;		Nothing
  6568 ;; This function is called by:
  6569 ;;		_moveToPoint
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           	psect	text37
  6574  002662                     __ptext37:
  6575                           	callstack 0
  6576  002662                     _stepCounter:
  6577                           	callstack 0
  6578  002662  FFFF               	dw	65535	; assembler added errata NOP
  6579  002664                     
  6580                           ;timer.c: 71:     return pwmStep;
  6581  002664  C05E  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6582  002668  6A13               	clrf	(?_stepCounter+1)^0,c
  6583  00266A  0012               	return		;funcret
  6584  00266C  FFFF               	dw	65535	; errata NOP
  6585  00266E                     __end_of_stepCounter:
  6586                           	callstack 0
  6587                           
  6588 ;; *************** function _liftArm *****************
  6589 ;; Defined at:
  6590 ;;		line 520 in file "motors.c"
  6591 ;; Parameters:    Size  Location     Type
  6592 ;;		None
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;		None
  6595 ;; Return value:  Size  Location     Type
  6596 ;;                  1    wreg      unsigned char 
  6597 ;; Registers used:
  6598 ;;		wreg, status,2, status,0, cstack
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6604 ;;      Params:         0       0       0       0       0       0       0
  6605 ;;      Locals:         0       0       0       0       0       0       0
  6606 ;;      Temps:          0       0       0       0       0       0       0
  6607 ;;      Totals:         0       0       0       0       0       0       0
  6608 ;;Total ram usage:        0 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; Hardware stack levels required when called:    5
  6611 ;; This function calls:
  6612 ;;		_resetStep
  6613 ;;		_setDirection
  6614 ;;		_stepMade
  6615 ;; This function is called by:
  6616 ;;		_executeData
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           	psect	text38
  6621  00202C                     __ptext38:
  6622                           	callstack 0
  6623  00202C                     _liftArm:
  6624                           	callstack 0
  6625  00202C  FFFF               	dw	65535	; assembler added errata NOP
  6626  00202E                     
  6627                           ;motors.c: 523:     setDirection(0, 2);
  6628  00202E  0E02               	movlw	2
  6629  002030  6E12               	movwf	setDirection@motor^0,c
  6630  002032  0E00               	movlw	0
  6631  002034  EC25  F011         	call	_setDirection
  6632  002038                     
  6633                           ;motors.c: 525:     T2CONbits.TMR2ON = 1;
  6634  002038  84CA               	bsf	202,2,c	;volatile
  6635  00203A                     
  6636                           ;motors.c: 527:     tm0Error = 0;
  6637  00203A  0E00               	movlw	0
  6638  00203C  6E5C               	movwf	(_tm0Error+1)^0,c
  6639  00203E  0E00               	movlw	0
  6640  002040  6E5B               	movwf	_tm0Error^0,c
  6641  002042                     
  6642                           ;motors.c: 528:     tm0Limit = 250;
  6643  002042  0EFA               	movlw	250
  6644  002044  6E68               	movwf	_tm0Limit^0,c
  6645  002046                     
  6646                           ;motors.c: 529:     T0CONbits.TMR0ON = 1;
  6647  002046  8ED5               	bsf	213,7,c	;volatile
  6648                           
  6649                           ;motors.c: 533:     while(!PORTEbits.RE2){
  6650  002048  EF57  F010         	goto	l206
  6651  00204C                     l4039:
  6652  00204C  FFFF               	dw	65535	; assembler added errata NOP
  6653                           
  6654                           ;motors.c: 536:         if(tm0Error){
  6655  00204E  505B               	movf	_tm0Error^0,w,c
  6656  002050  105C               	iorwf	(_tm0Error+1)^0,w,c
  6657  002052  B4D8               	btfsc	status,2,c
  6658  002054  EF2E  F010         	goto	u3531
  6659  002058  EF31  F010         	goto	u3530
  6660  00205C                     u3531:
  6661  00205C  FFFF               	dw	65535	; assembler added errata NOP
  6662  00205E  EF39  F010         	goto	l208
  6663  002062                     u3530:
  6664  002062  FFFF               	dw	65535	; assembler added errata NOP
  6665  002064                     
  6666                           ;motors.c: 538:             LATCbits.LATC2 = 0;
  6667  002064  948B               	bcf	139,2,c	;volatile
  6668  002066                     
  6669                           ;motors.c: 539:             tm0Error = 6;
  6670  002066  0E00               	movlw	0
  6671  002068  6E5C               	movwf	(_tm0Error+1)^0,c
  6672  00206A  0E06               	movlw	6
  6673  00206C  6E5B               	movwf	_tm0Error^0,c
  6674                           
  6675                           ;motors.c: 540:             break;
  6676  00206E  EF60  F010         	goto	l209
  6677  002072                     l208:
  6678  002072  FFFF               	dw	65535	; assembler added errata NOP
  6679                           
  6680                           ;motors.c: 545:         LATCbits.LATC2 = 1;
  6681  002074  848B               	bsf	139,2,c	;volatile
  6682  002076                     l4045:
  6683  002076  FFFF               	dw	65535	; assembler added errata NOP
  6684  002078  ECE8  F012         	call	_stepMade	;wreg free
  6685  00207C  5012               	movf	?_stepMade^0,w,c
  6686  00207E  1013               	iorwf	(?_stepMade+1)^0,w,c
  6687  002080  B4D8               	btfsc	status,2,c
  6688  002082  EF45  F010         	goto	u3541
  6689  002086  EF48  F010         	goto	u3540
  6690  00208A                     u3541:
  6691  00208A  FFFF               	dw	65535	; assembler added errata NOP
  6692  00208C  EF3B  F010         	goto	l4045
  6693  002090                     u3540:
  6694  002090  FFFF               	dw	65535	; assembler added errata NOP
  6695  002092                     
  6696                           ;motors.c: 551:         LATCbits.LATC2 = 0;
  6697  002092  948B               	bcf	139,2,c	;volatile
  6698  002094                     l4047:
  6699  002094  FFFF               	dw	65535	; assembler added errata NOP
  6700  002096  ECE8  F012         	call	_stepMade	;wreg free
  6701  00209A  5012               	movf	?_stepMade^0,w,c
  6702  00209C  1013               	iorwf	(?_stepMade+1)^0,w,c
  6703  00209E  B4D8               	btfsc	status,2,c
  6704  0020A0  EF54  F010         	goto	u3551
  6705  0020A4  EF57  F010         	goto	u3550
  6706  0020A8                     u3551:
  6707  0020A8  FFFF               	dw	65535	; assembler added errata NOP
  6708  0020AA  EF4A  F010         	goto	l4047
  6709  0020AE                     u3550:
  6710  0020AE                     l206:
  6711  0020AE  FFFF               	dw	65535	; assembler added errata NOP
  6712                           
  6713                           ;motors.c: 533:     while(!PORTEbits.RE2){
  6714  0020B0  A484               	btfss	132,2,c	;volatile
  6715  0020B2  EF5D  F010         	goto	u3561
  6716  0020B6  EF60  F010         	goto	u3560
  6717  0020BA                     u3561:
  6718  0020BA  FFFF               	dw	65535	; assembler added errata NOP
  6719  0020BC  EF26  F010         	goto	l4039
  6720  0020C0                     u3560:
  6721  0020C0                     l209:
  6722  0020C0  FFFF               	dw	65535	; assembler added errata NOP
  6723                           
  6724                           ;motors.c: 558:     T0CONbits.TMR0ON = 0;
  6725  0020C2  9ED5               	bcf	213,7,c	;volatile
  6726                           
  6727                           ;motors.c: 559:     T2CONbits.TMR2ON = 0;
  6728  0020C4  94CA               	bcf	202,2,c	;volatile
  6729  0020C6                     
  6730                           ;motors.c: 561:     TMR0 = 0;
  6731  0020C6  0E00               	movlw	0
  6732  0020C8  6ED7               	movwf	215,c	;volatile
  6733  0020CA  0E00               	movlw	0
  6734  0020CC  6ED6               	movwf	214,c	;volatile
  6735                           
  6736                           ;motors.c: 562:     TMR2 = 0;
  6737  0020CE  0E00               	movlw	0
  6738  0020D0  6ECC               	movwf	204,c	;volatile
  6739  0020D2                     
  6740                           ;motors.c: 565:     resetStep();
  6741  0020D2  EC4B  F013         	call	_resetStep	;wreg free
  6742  0020D6                     
  6743                           ;motors.c: 567:     return(tm0Error);
  6744  0020D6  505B               	movf	_tm0Error^0,w,c
  6745  0020D8  0012               	return		;funcret
  6746  0020DA  FFFF               	dw	65535	; errata NOP
  6747  0020DC                     __end_of_liftArm:
  6748                           	callstack 0
  6749                           
  6750 ;; *************** function _stepMade *****************
  6751 ;; Defined at:
  6752 ;;		line 59 in file "timer.c"
  6753 ;; Parameters:    Size  Location     Type
  6754 ;;		None
  6755 ;; Auto vars:     Size  Location     Type
  6756 ;;  temp            1   19[COMRAM] unsigned char 
  6757 ;; Return value:  Size  Location     Type
  6758 ;;                  2   17[COMRAM] unsigned int 
  6759 ;; Registers used:
  6760 ;;		wreg, status,2
  6761 ;; Tracked objects:
  6762 ;;		On entry : 0/0
  6763 ;;		On exit  : 0/0
  6764 ;;		Unchanged: 0/0
  6765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6766 ;;      Params:         2       0       0       0       0       0       0
  6767 ;;      Locals:         1       0       0       0       0       0       0
  6768 ;;      Temps:          0       0       0       0       0       0       0
  6769 ;;      Totals:         3       0       0       0       0       0       0
  6770 ;;Total ram usage:        3 bytes
  6771 ;; Hardware stack levels used:    1
  6772 ;; Hardware stack levels required when called:    4
  6773 ;; This function calls:
  6774 ;;		Nothing
  6775 ;; This function is called by:
  6776 ;;		_resetPosition
  6777 ;;		_moveToPoint
  6778 ;;		_touchObject
  6779 ;;		_touchTherm
  6780 ;;		_liftArm
  6781 ;;		_rotateObj
  6782 ;;		_pickObject
  6783 ;;		_releaseObj
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           	psect	text39
  6788  0025D0                     __ptext39:
  6789                           	callstack 0
  6790  0025D0                     _stepMade:
  6791                           	callstack 0
  6792  0025D0  FFFF               	dw	65535	; assembler added errata NOP
  6793  0025D2                     
  6794                           ;timer.c: 60:     unsigned char temp = stepToggle;
  6795  0025D2  C05D  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6796  0025D6                     
  6797                           ;timer.c: 62:     stepToggle = 0;
  6798  0025D6  0E00               	movlw	0
  6799  0025D8  6E5D               	movwf	_stepToggle^0,c	;volatile
  6800  0025DA                     
  6801                           ;timer.c: 64:     return temp;
  6802  0025DA  C014  F012         	movff	stepMade@temp,?_stepMade
  6803  0025DE  6A13               	clrf	(?_stepMade+1)^0,c
  6804  0025E0  0012               	return		;funcret
  6805  0025E2  FFFF               	dw	65535	; errata NOP
  6806  0025E4                     __end_of_stepMade:
  6807                           	callstack 0
  6808                           
  6809 ;; *************** function _setDirection *****************
  6810 ;; Defined at:
  6811 ;;		line 114 in file "motors.c"
  6812 ;; Parameters:    Size  Location     Type
  6813 ;;  direction       1    wreg     unsigned char 
  6814 ;;  motor           1   17[COMRAM] unsigned char 
  6815 ;; Auto vars:     Size  Location     Type
  6816 ;;  direction       1   20[COMRAM] unsigned char 
  6817 ;; Return value:  Size  Location     Type
  6818 ;;                  1    wreg      void 
  6819 ;; Registers used:
  6820 ;;		wreg, status,2, status,0
  6821 ;; Tracked objects:
  6822 ;;		On entry : 0/0
  6823 ;;		On exit  : 0/0
  6824 ;;		Unchanged: 0/0
  6825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6826 ;;      Params:         1       0       0       0       0       0       0
  6827 ;;      Locals:         1       0       0       0       0       0       0
  6828 ;;      Temps:          2       0       0       0       0       0       0
  6829 ;;      Totals:         4       0       0       0       0       0       0
  6830 ;;Total ram usage:        4 bytes
  6831 ;; Hardware stack levels used:    1
  6832 ;; Hardware stack levels required when called:    4
  6833 ;; This function calls:
  6834 ;;		Nothing
  6835 ;; This function is called by:
  6836 ;;		_resetPosition
  6837 ;;		_moveToPoint
  6838 ;;		_touchObject
  6839 ;;		_touchTherm
  6840 ;;		_liftArm
  6841 ;; This function uses a non-reentrant model
  6842 ;;
  6843                           
  6844                           	psect	text40
  6845  00224A                     __ptext40:
  6846                           	callstack 0
  6847  00224A                     _setDirection:
  6848                           	callstack 0
  6849  00224A  FFFF               	dw	65535	; assembler added errata NOP
  6850                           
  6851                           ;incstack = 0
  6852                           ;setDirection@direction stored from wreg
  6853  00224C  6E15               	movwf	setDirection@direction^0,c
  6854  00224E                     
  6855                           ;motors.c: 115:     switch(motor){
  6856  00224E  EF41  F011         	goto	l3529
  6857  002252                     l3521:
  6858  002252  FFFF               	dw	65535	; assembler added errata NOP
  6859                           
  6860                           ;motors.c: 117:             LATAbits.LATA1 = direction;
  6861  002254  B015               	btfsc	setDirection@direction^0,0,c
  6862  002256  D002               	bra	u2695
  6863  002258  9289               	bcf	137,1,c	;volatile
  6864  00225A  D001               	bra	u2696
  6865  00225C                     u2695:
  6866  00225C  8289               	bsf	137,1,c	;volatile
  6867  00225E                     u2696:
  6868                           
  6869                           ;motors.c: 118:             break;
  6870  00225E  EF5C  F011         	goto	l103
  6871  002262                     l3523:
  6872  002262  FFFF               	dw	65535	; assembler added errata NOP
  6873                           
  6874                           ;motors.c: 120:             LATBbits.LATB3 = direction;
  6875  002264  B015               	btfsc	setDirection@direction^0,0,c
  6876  002266  D002               	bra	u2705
  6877  002268  968A               	bcf	138,3,c	;volatile
  6878  00226A  D001               	bra	u2706
  6879  00226C                     u2705:
  6880  00226C  868A               	bsf	138,3,c	;volatile
  6881  00226E                     u2706:
  6882                           
  6883                           ;motors.c: 121:             break;
  6884  00226E  EF5C  F011         	goto	l103
  6885  002272                     l3525:
  6886  002272  FFFF               	dw	65535	; assembler added errata NOP
  6887                           
  6888                           ;motors.c: 123:             LATCbits.LATC1 = direction;
  6889  002274  B015               	btfsc	setDirection@direction^0,0,c
  6890  002276  D002               	bra	u2715
  6891  002278  928B               	bcf	139,1,c	;volatile
  6892  00227A  D001               	bra	u2716
  6893  00227C                     u2715:
  6894  00227C  828B               	bsf	139,1,c	;volatile
  6895  00227E                     u2716:
  6896                           
  6897                           ;motors.c: 124:             break;
  6898  00227E  EF5C  F011         	goto	l103
  6899  002282                     l3529:
  6900  002282  FFFF               	dw	65535	; assembler added errata NOP
  6901  002284  5012               	movf	setDirection@motor^0,w,c
  6902  002286  6E13               	movwf	??_setDirection^0,c
  6903  002288  6A14               	clrf	(??_setDirection+1)^0,c
  6904                           
  6905                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6906                           ; Switch size 1, requested type "simple"
  6907                           ; Number of cases is 1, Range of values is 0 to 0
  6908                           ; switch strategies available:
  6909                           ; Name         Instructions Cycles
  6910                           ; simple_byte            4     3 (average)
  6911                           ;	Chosen strategy is simple_byte
  6912  00228A  5014               	movf	(??_setDirection+1)^0,w,c
  6913  00228C  0A00               	xorlw	0	; case 0
  6914  00228E  B4D8               	btfsc	status,2,c
  6915  002290  EF4C  F011         	goto	l4675
  6916  002294  EF5C  F011         	goto	l103
  6917  002298                     l4675:
  6918  002298  FFFF               	dw	65535	; assembler added errata NOP
  6919                           
  6920                           ; Switch size 1, requested type "simple"
  6921                           ; Number of cases is 3, Range of values is 0 to 2
  6922                           ; switch strategies available:
  6923                           ; Name         Instructions Cycles
  6924                           ; simple_byte           10     6 (average)
  6925                           ;	Chosen strategy is simple_byte
  6926  00229A  5013               	movf	??_setDirection^0,w,c
  6927  00229C  0A00               	xorlw	0	; case 0
  6928  00229E  B4D8               	btfsc	status,2,c
  6929  0022A0  EF29  F011         	goto	l3521
  6930  0022A4  0A01               	xorlw	1	; case 1
  6931  0022A6  B4D8               	btfsc	status,2,c
  6932  0022A8  EF31  F011         	goto	l3523
  6933  0022AC  0A03               	xorlw	3	; case 2
  6934  0022AE  B4D8               	btfsc	status,2,c
  6935  0022B0  EF39  F011         	goto	l3525
  6936  0022B4  EF5C  F011         	goto	l103
  6937  0022B8                     l103:
  6938  0022B8  FFFF               	dw	65535	; assembler added errata NOP
  6939  0022BA  0012               	return		;funcret
  6940  0022BC  FFFF               	dw	65535	; errata NOP
  6941  0022BE                     __end_of_setDirection:
  6942                           	callstack 0
  6943                           
  6944 ;; *************** function _resetStep *****************
  6945 ;; Defined at:
  6946 ;;		line 77 in file "timer.c"
  6947 ;; Parameters:    Size  Location     Type
  6948 ;;		None
  6949 ;; Auto vars:     Size  Location     Type
  6950 ;;		None
  6951 ;; Return value:  Size  Location     Type
  6952 ;;                  1    wreg      void 
  6953 ;; Registers used:
  6954 ;;		wreg, status,2
  6955 ;; Tracked objects:
  6956 ;;		On entry : 0/0
  6957 ;;		On exit  : 0/0
  6958 ;;		Unchanged: 0/0
  6959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6960 ;;      Params:         0       0       0       0       0       0       0
  6961 ;;      Locals:         0       0       0       0       0       0       0
  6962 ;;      Temps:          0       0       0       0       0       0       0
  6963 ;;      Totals:         0       0       0       0       0       0       0
  6964 ;;Total ram usage:        0 bytes
  6965 ;; Hardware stack levels used:    1
  6966 ;; Hardware stack levels required when called:    4
  6967 ;; This function calls:
  6968 ;;		Nothing
  6969 ;; This function is called by:
  6970 ;;		_resetPosition
  6971 ;;		_moveToPoint
  6972 ;;		_touchObject
  6973 ;;		_touchTherm
  6974 ;;		_liftArm
  6975 ;; This function uses a non-reentrant model
  6976 ;;
  6977                           
  6978                           	psect	text41
  6979  002696                     __ptext41:
  6980                           	callstack 0
  6981  002696                     _resetStep:
  6982                           	callstack 0
  6983  002696  FFFF               	dw	65535	; assembler added errata NOP
  6984  002698                     
  6985                           ;timer.c: 78:     pwmStep = 0;
  6986  002698  0E00               	movlw	0
  6987  00269A  6E5E               	movwf	_pwmStep^0,c	;volatile
  6988  00269C  0012               	return		;funcret
  6989  00269E  FFFF               	dw	65535	; errata NOP
  6990  0026A0                     __end_of_resetStep:
  6991                           	callstack 0
  6992                           
  6993 ;; *************** function _getData *****************
  6994 ;; Defined at:
  6995 ;;		line 35 in file "usart.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;		None
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;		None
  7000 ;; Return value:  Size  Location     Type
  7001 ;;                  2   17[COMRAM] PTR struct .
  7002 ;; Registers used:
  7003 ;;		wreg, status,2, status,0
  7004 ;; Tracked objects:
  7005 ;;		On entry : 0/0
  7006 ;;		On exit  : 0/0
  7007 ;;		Unchanged: 0/0
  7008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7009 ;;      Params:         2       0       0       0       0       0       0
  7010 ;;      Locals:         0       0       0       0       0       0       0
  7011 ;;      Temps:          0       0       0       0       0       0       0
  7012 ;;      Totals:         2       0       0       0       0       0       0
  7013 ;;Total ram usage:        2 bytes
  7014 ;; Hardware stack levels used:    1
  7015 ;; Hardware stack levels required when called:    4
  7016 ;; This function calls:
  7017 ;;		Nothing
  7018 ;; This function is called by:
  7019 ;;		_executeData
  7020 ;; This function uses a non-reentrant model
  7021 ;;
  7022                           
  7023                           	psect	text42
  7024  002612                     __ptext42:
  7025                           	callstack 0
  7026  002612                     _getData:
  7027                           	callstack 0
  7028  002612  FFFF               	dw	65535	; assembler added errata NOP
  7029  002614                     
  7030                           ;usart.c: 36:     return(&dataSequence[0]);
  7031  002614  0EDB               	movlw	low _dataSequence
  7032  002616  6E12               	movwf	?_getData^0,c
  7033  002618  0E00               	movlw	high _dataSequence
  7034  00261A  6E13               	movwf	(?_getData+1)^0,c
  7035  00261C  0012               	return		;funcret
  7036  00261E  FFFF               	dw	65535	; errata NOP
  7037  002620                     __end_of_getData:
  7038                           	callstack 0
  7039                           
  7040 ;; *************** function _clearTM0 *****************
  7041 ;; Defined at:
  7042 ;;		line 27 in file "motors.c"
  7043 ;; Parameters:    Size  Location     Type
  7044 ;;		None
  7045 ;; Auto vars:     Size  Location     Type
  7046 ;;		None
  7047 ;; Return value:  Size  Location     Type
  7048 ;;                  1    wreg      void 
  7049 ;; Registers used:
  7050 ;;		wreg, status,2
  7051 ;; Tracked objects:
  7052 ;;		On entry : 0/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7056 ;;      Params:         0       0       0       0       0       0       0
  7057 ;;      Locals:         0       0       0       0       0       0       0
  7058 ;;      Temps:          0       0       0       0       0       0       0
  7059 ;;      Totals:         0       0       0       0       0       0       0
  7060 ;;Total ram usage:        0 bytes
  7061 ;; Hardware stack levels used:    1
  7062 ;; Hardware stack levels required when called:    4
  7063 ;; This function calls:
  7064 ;;		Nothing
  7065 ;; This function is called by:
  7066 ;;		_main
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           	psect	text43
  7071  002620                     __ptext43:
  7072                           	callstack 0
  7073  002620                     _clearTM0:
  7074                           	callstack 0
  7075  002620  FFFF               	dw	65535	; assembler added errata NOP
  7076  002622                     
  7077                           ;motors.c: 28:     tm0Error = 0;
  7078  002622  0E00               	movlw	0
  7079  002624  6E5C               	movwf	(_tm0Error+1)^0,c
  7080  002626  0E00               	movlw	0
  7081  002628  6E5B               	movwf	_tm0Error^0,c
  7082  00262A  0012               	return		;funcret
  7083  00262C  FFFF               	dw	65535	; errata NOP
  7084  00262E                     __end_of_clearTM0:
  7085                           	callstack 0
  7086                           
  7087 ;; *************** function _isr *****************
  7088 ;; Defined at:
  7089 ;;		line 38 in file "interrupt.c"
  7090 ;; Parameters:    Size  Location     Type
  7091 ;;		None
  7092 ;; Auto vars:     Size  Location     Type
  7093 ;;  temp            1   16[COMRAM] unsigned char 
  7094 ;; Return value:  Size  Location     Type
  7095 ;;                  1    wreg      void 
  7096 ;; Registers used:
  7097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7098 ;; Tracked objects:
  7099 ;;		On entry : 0/0
  7100 ;;		On exit  : 0/0
  7101 ;;		Unchanged: 0/0
  7102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7103 ;;      Params:         0       0       0       0       0       0       0
  7104 ;;      Locals:         1       0       0       0       0       0       0
  7105 ;;      Temps:          6       0       0       0       0       0       0
  7106 ;;      Totals:         7       0       0       0       0       0       0
  7107 ;;Total ram usage:        7 bytes
  7108 ;; Hardware stack levels used:    1
  7109 ;; Hardware stack levels required when called:    3
  7110 ;; This function calls:
  7111 ;;		_abortAll
  7112 ;;		_fatalError
  7113 ;;		_increaseStep
  7114 ;;		_retPeriod
  7115 ;;		_setThermRel
  7116 ;;		_setTouchRel
  7117 ;;		_toggleStep
  7118 ;;		_whatsTM0Limit
  7119 ;;		_writeTM0
  7120 ;;		i2_storeData
  7121 ;; This function is called by:
  7122 ;;		Interrupt level 2
  7123 ;; This function uses a non-reentrant model
  7124 ;;
  7125                           
  7126                           	psect	intcode
  7127  000008                     __pintcode:
  7128                           	callstack 0
  7129  000008                     _isr:
  7130                           	callstack 0
  7131  000008  FFFF               	dw	65535	; assembler added errata NOP
  7132                           
  7133                           ;incstack = 0
  7134  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7135  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  7136  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  7137  000014  CFF3 F00F          	movff	prodl,??_isr+4
  7138  000018  CFF4 F010          	movff	prodh,??_isr+5
  7139  00001C                     
  7140                           ;interrupt.c: 39:     static unsigned int single_cycle = 0;;interrupt.c: 40:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 41:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 44:     if(INTCONbits.T0IF){
  7141  00001C  A4F2               	btfss	242,2,c	;volatile
  7142  00001E  EF13  F000         	goto	i2u257_41
  7143  000022  EF16  F000         	goto	i2u257_40
  7144  000026                     i2u257_41:
  7145  000026  FFFF               	dw	65535	; assembler added errata NOP
  7146  000028  EF2C  F000         	goto	i2l3425
  7147  00002C                     i2u257_40:
  7148  00002C  FFFF               	dw	65535	; assembler added errata NOP
  7149  00002E                     
  7150                           ;interrupt.c: 45:         INTCONbits.T0IF = 0;
  7151  00002E  94F2               	bcf	242,2,c	;volatile
  7152  000030                     
  7153                           ;interrupt.c: 48:         tm0Count++;
  7154  000030  2A65               	incf	isr@tm0Count^0,f,c
  7155  000032                     
  7156                           ;interrupt.c: 50:         if(tm0Count >= whatsTM0Limit()){
  7157  000032  EC6F  F013         	call	_whatsTM0Limit	;wreg free
  7158  000036  6E0B               	movwf	??_isr^0,c
  7159  000038  500B               	movf	??_isr^0,w,c
  7160  00003A  5C65               	subwf	isr@tm0Count^0,w,c
  7161  00003C  A0D8               	btfss	status,0,c
  7162  00003E  EF23  F000         	goto	i2u258_41
  7163  000042  EF26  F000         	goto	i2u258_40
  7164  000046                     i2u258_41:
  7165  000046  FFFF               	dw	65535	; assembler added errata NOP
  7166  000048  EF2C  F000         	goto	i2l3425
  7167  00004C                     i2u258_40:
  7168  00004C  FFFF               	dw	65535	; assembler added errata NOP
  7169  00004E                     
  7170                           ;interrupt.c: 51:             T0CONbits.TMR0ON = 0;
  7171  00004E  9ED5               	bcf	213,7,c	;volatile
  7172  000050                     
  7173                           ;interrupt.c: 52:             tm0Count = 0;
  7174  000050  0E00               	movlw	0
  7175  000052  6E65               	movwf	isr@tm0Count^0,c
  7176  000054                     
  7177                           ;interrupt.c: 53:             writeTM0();
  7178  000054  EC17  F013         	call	_writeTM0	;wreg free
  7179  000058                     i2l3425:
  7180  000058  FFFF               	dw	65535	; assembler added errata NOP
  7181                           
  7182                           ;interrupt.c: 58:     if(PIR1bits.TMR1IF){
  7183  00005A  A09E               	btfss	158,0,c	;volatile
  7184  00005C  EF32  F000         	goto	i2u259_41
  7185  000060  EF35  F000         	goto	i2u259_40
  7186  000064                     i2u259_41:
  7187  000064  FFFF               	dw	65535	; assembler added errata NOP
  7188  000066  EF45  F000         	goto	i2l3433
  7189  00006A                     i2u259_40:
  7190  00006A  FFFF               	dw	65535	; assembler added errata NOP
  7191  00006C                     
  7192                           ;interrupt.c: 59:         PIR1bits.TMR1IF = 0;
  7193  00006C  909E               	bcf	158,0,c	;volatile
  7194  00006E                     
  7195                           ;interrupt.c: 60:         if(fatalError()){
  7196  00006E  EC77  F013         	call	_fatalError	;wreg free
  7197  000072  0900               	iorlw	0
  7198  000074  B4D8               	btfsc	status,2,c
  7199  000076  EF3F  F000         	goto	i2u260_41
  7200  00007A  EF42  F000         	goto	i2u260_40
  7201  00007E                     i2u260_41:
  7202  00007E  FFFF               	dw	65535	; assembler added errata NOP
  7203  000080  EF45  F000         	goto	i2l3433
  7204  000084                     i2u260_40:
  7205  000084  FFFF               	dw	65535	; assembler added errata NOP
  7206  000086                     
  7207                           ;interrupt.c: 61:             abortAll();
  7208  000086  EC63  F012         	call	_abortAll	;wreg free
  7209  00008A                     i2l3433:
  7210  00008A  FFFF               	dw	65535	; assembler added errata NOP
  7211                           
  7212                           ;interrupt.c: 66:     if(PIR1bits.TMR2IF){
  7213  00008C  A29E               	btfss	158,1,c	;volatile
  7214  00008E  EF4B  F000         	goto	i2u261_41
  7215  000092  EF4E  F000         	goto	i2u261_40
  7216  000096                     i2u261_41:
  7217  000096  FFFF               	dw	65535	; assembler added errata NOP
  7218  000098  EF7C  F000         	goto	i2l3453
  7219  00009C                     i2u261_40:
  7220  00009C  FFFF               	dw	65535	; assembler added errata NOP
  7221  00009E                     
  7222                           ;interrupt.c: 67:         PIR1bits.TMR2IF = 0;
  7223  00009E  929E               	bcf	158,1,c	;volatile
  7224  0000A0                     
  7225                           ;interrupt.c: 68:         single_cycle++;
  7226  0000A0  4A53               	infsnz	isr@single_cycle^0,f,c
  7227  0000A2  2A54               	incf	(isr@single_cycle+1)^0,f,c
  7228  0000A4                     
  7229                           ;interrupt.c: 71:         if(single_cycle > retPeriod()){
  7230  0000A4  EC1E  F013         	call	_retPeriod	;wreg free
  7231  0000A8  5053               	movf	isr@single_cycle^0,w,c
  7232  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  7233  0000AC  5054               	movf	(isr@single_cycle+1)^0,w,c
  7234  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  7235  0000B0  B0D8               	btfsc	status,0,c
  7236  0000B2  EF5D  F000         	goto	i2u262_41
  7237  0000B6  EF60  F000         	goto	i2u262_40
  7238  0000BA                     i2u262_41:
  7239  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  7240  0000BC  EF7C  F000         	goto	i2l3453
  7241  0000C0                     i2u262_40:
  7242  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  7243  0000C2                     
  7244                           ;interrupt.c: 72:             completeStep++;
  7245  0000C2  2A64               	incf	isr@completeStep^0,f,c
  7246  0000C4                     
  7247                           ;interrupt.c: 75:             if(completeStep != 0 && !(completeStep % 2)){
  7248  0000C4  5064               	movf	isr@completeStep^0,w,c
  7249  0000C6  B4D8               	btfsc	status,2,c
  7250  0000C8  EF68  F000         	goto	i2u263_41
  7251  0000CC  EF6B  F000         	goto	i2u263_40
  7252  0000D0                     i2u263_41:
  7253  0000D0  FFFF               	dw	65535	; assembler added errata NOP
  7254  0000D2  EF79  F000         	goto	i2l3451
  7255  0000D6                     i2u263_40:
  7256  0000D6  FFFF               	dw	65535	; assembler added errata NOP
  7257  0000D8  B064               	btfsc	isr@completeStep^0,0,c
  7258  0000DA  EF71  F000         	goto	i2u264_41
  7259  0000DE  EF74  F000         	goto	i2u264_40
  7260  0000E2                     i2u264_41:
  7261  0000E2  FFFF               	dw	65535	; assembler added errata NOP
  7262  0000E4  EF79  F000         	goto	i2l3451
  7263  0000E8                     i2u264_40:
  7264  0000E8  FFFF               	dw	65535	; assembler added errata NOP
  7265  0000EA                     
  7266                           ;interrupt.c: 77:                 completeStep = 0;
  7267  0000EA  0E00               	movlw	0
  7268  0000EC  6E64               	movwf	isr@completeStep^0,c
  7269  0000EE                     
  7270                           ;interrupt.c: 80:                 increaseStep();
  7271  0000EE  EC73  F013         	call	_increaseStep	;wreg free
  7272  0000F2                     i2l3451:
  7273  0000F2  FFFF               	dw	65535	; assembler added errata NOP
  7274                           
  7275                           ;interrupt.c: 85:             toggleStep();
  7276  0000F4  EC50  F013         	call	_toggleStep	;wreg free
  7277  0000F8                     i2l3453:
  7278  0000F8  FFFF               	dw	65535	; assembler added errata NOP
  7279                           
  7280                           ;interrupt.c: 90:     if(PIR1bits.ADIF){
  7281  0000FA  AC9E               	btfss	158,6,c	;volatile
  7282  0000FC  EF82  F000         	goto	i2u265_41
  7283  000100  EF85  F000         	goto	i2u265_40
  7284  000104                     i2u265_41:
  7285  000104  FFFF               	dw	65535	; assembler added errata NOP
  7286  000106  EFB2  F000         	goto	i2l3465
  7287  00010A                     i2u265_40:
  7288  00010A  FFFF               	dw	65535	; assembler added errata NOP
  7289  00010C                     
  7290                           ;interrupt.c: 91:         PIR1bits.ADIF = 0;
  7291  00010C  9C9E               	bcf	158,6,c	;volatile
  7292                           
  7293                           ;interrupt.c: 94:         ADC_res = ADRESL;
  7294  00010E  CFC3 F055          	movff	4035,_ADC_res	;volatile
  7295  000112  6A56               	clrf	(_ADC_res+1)^0,c
  7296  000114                     
  7297                           ;interrupt.c: 95:         ADC_res |= (ADRESH << 8);
  7298  000114  50C4               	movf	196,w,c	;volatile
  7299  000116  6E0C               	movwf	(??_isr+1)^0,c
  7300  000118  6A0B               	clrf	??_isr^0,c
  7301  00011A  500B               	movf	??_isr^0,w,c
  7302  00011C  1255               	iorwf	_ADC_res^0,f,c
  7303  00011E  500C               	movf	(??_isr+1)^0,w,c
  7304  000120  1256               	iorwf	(_ADC_res+1)^0,f,c
  7305                           
  7306                           ;interrupt.c: 98:         if(ADC_res > therm_pressure){
  7307  000122  0455               	decf	_ADC_res^0,w,c
  7308  000124  0E04               	movlw	4
  7309  000126  5856               	subwfb	(_ADC_res+1)^0,w,c
  7310  000128  A0D8               	btfss	status,0,c
  7311  00012A  EF99  F000         	goto	i2u266_41
  7312  00012E  EF9C  F000         	goto	i2u266_40
  7313  000132                     i2u266_41:
  7314  000132  FFFF               	dw	65535	; assembler added errata NOP
  7315  000134  EFA3  F000         	goto	i2l3461
  7316  000138                     i2u266_40:
  7317  000138  FFFF               	dw	65535	; assembler added errata NOP
  7318  00013A                     
  7319                           ;interrupt.c: 100:             setTouchRel();
  7320  00013A  EC55  F013         	call	_setTouchRel	;wreg free
  7321                           
  7322                           ;interrupt.c: 101:             setThermRel();
  7323  00013E  EC5A  F013         	call	_setThermRel	;wreg free
  7324                           
  7325                           ;interrupt.c: 102:         }else if(ADC_res > touch_pressure){
  7326  000142  EFB2  F000         	goto	i2l3465
  7327  000146                     i2l3461:
  7328  000146  FFFF               	dw	65535	; assembler added errata NOP
  7329  000148  0455               	decf	_ADC_res^0,w,c
  7330  00014A  0E02               	movlw	2
  7331  00014C  5856               	subwfb	(_ADC_res+1)^0,w,c
  7332  00014E  A0D8               	btfss	status,0,c
  7333  000150  EFAC  F000         	goto	i2u267_41
  7334  000154  EFAF  F000         	goto	i2u267_40
  7335  000158                     i2u267_41:
  7336  000158  FFFF               	dw	65535	; assembler added errata NOP
  7337  00015A  EFB2  F000         	goto	i2l3465
  7338  00015E                     i2u267_40:
  7339  00015E  FFFF               	dw	65535	; assembler added errata NOP
  7340  000160                     
  7341                           ;interrupt.c: 104:             setTouchRel();
  7342  000160  EC55  F013         	call	_setTouchRel	;wreg free
  7343  000164                     i2l3465:
  7344  000164  FFFF               	dw	65535	; assembler added errata NOP
  7345                           
  7346                           ;interrupt.c: 109:     if(PIR1bits.RC1IF){
  7347  000166  AA9E               	btfss	158,5,c	;volatile
  7348  000168  EFB8  F000         	goto	i2u268_41
  7349  00016C  EFBB  F000         	goto	i2u268_40
  7350  000170                     i2u268_41:
  7351  000170  FFFF               	dw	65535	; assembler added errata NOP
  7352  000172  EFC2  F000         	goto	i2l460
  7353  000176                     i2u268_40:
  7354  000176  FFFF               	dw	65535	; assembler added errata NOP
  7355  000178                     
  7356                           ;interrupt.c: 110:         PIR1bits.RC1IF = 0;
  7357  000178  9A9E               	bcf	158,5,c	;volatile
  7358                           
  7359                           ;interrupt.c: 113:         unsigned char temp = RCREG1;
  7360  00017A  CFAE F011          	movff	4014,isr@temp	;volatile
  7361  00017E                     
  7362                           ;interrupt.c: 115:         storeData(temp);
  7363  00017E  5011               	movf	isr@temp^0,w,c
  7364  000180  EC78  F00B         	call	i2_storeData
  7365  000184                     i2l460:
  7366  000184  FFFF               	dw	65535	; assembler added errata NOP
  7367  000186  C010  FFF4         	movff	??_isr+5,prodh
  7368  00018A  C00F  FFF3         	movff	??_isr+4,prodl
  7369  00018E  C00E  FFDA         	movff	??_isr+3,fsr2h
  7370  000192  C00D  FFD9         	movff	??_isr+2,fsr2l
  7371  000196  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7372  000198  0011               	retfie		f
  7373  00019A  FFFF               	dw	65535	; errata NOP
  7374  00019C                     __end_of_isr:
  7375                           	callstack 0
  7376                           
  7377 ;; *************** function i2_storeData *****************
  7378 ;; Defined at:
  7379 ;;		line 164 in file "usart.c"
  7380 ;; Parameters:    Size  Location     Type
  7381 ;;  data            1    wreg     unsigned char 
  7382 ;; Auto vars:     Size  Location     Type
  7383 ;;  data            1    9[COMRAM] unsigned char 
  7384 ;; Return value:  Size  Location     Type
  7385 ;;                  1    wreg      void 
  7386 ;; Registers used:
  7387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7388 ;; Tracked objects:
  7389 ;;		On entry : 0/0
  7390 ;;		On exit  : 0/0
  7391 ;;		Unchanged: 0/0
  7392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7393 ;;      Params:         0       0       0       0       0       0       0
  7394 ;;      Locals:         1       0       0       0       0       0       0
  7395 ;;      Temps:          2       0       0       0       0       0       0
  7396 ;;      Totals:         3       0       0       0       0       0       0
  7397 ;;Total ram usage:        3 bytes
  7398 ;; Hardware stack levels used:    1
  7399 ;; Hardware stack levels required when called:    2
  7400 ;; This function calls:
  7401 ;;		i2_printError
  7402 ;; This function is called by:
  7403 ;;		_isr
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           	psect	text45
  7408  0016F0                     __ptext45:
  7409                           	callstack 0
  7410  0016F0                     i2_storeData:
  7411                           	callstack 0
  7412  0016F0  FFFF               	dw	65535	; assembler added errata NOP
  7413                           
  7414                           ;incstack = 0
  7415                           ;i2storeData@data stored from wreg
  7416  0016F2  6E0A               	movwf	i2storeData@data^0,c
  7417  0016F4                     
  7418                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  7419  0016F4  0E45               	movlw	low storeData@receivedMex
  7420  0016F6  2460               	addwf	storeData@counter^0,w,c
  7421  0016F8  6ED9               	movwf	fsr2l,c
  7422  0016FA  6ADA               	clrf	fsr2h,c
  7423  0016FC  0E00               	movlw	high storeData@receivedMex
  7424  0016FE  22DA               	addwfc	fsr2h,f,c
  7425  001700  C00A  FFDF         	movff	i2storeData@data,indf2
  7426  001704                     
  7427                           ;usart.c: 175:     counter++;
  7428  001704  2A60               	incf	storeData@counter^0,f,c
  7429                           
  7430                           ;usart.c: 178:     switch(receivedMex[0]){
  7431  001706  EF94  F00B         	goto	i2l3323
  7432  00170A                     i2l3315:
  7433  00170A  FFFF               	dw	65535	; assembler added errata NOP
  7434                           
  7435                           ;usart.c: 180:             mexLength = 5;
  7436  00170C  0E05               	movlw	5
  7437  00170E  6E6D               	movwf	storeData@mexLength^0,c
  7438                           
  7439                           ;usart.c: 181:             break;
  7440  001710  EFAF  F00B         	goto	i2l3325
  7441  001714                     i2l3317:
  7442  001714  FFFF               	dw	65535	; assembler added errata NOP
  7443                           
  7444                           ;usart.c: 183:             mexLength = 9;
  7445  001716  0E09               	movlw	9
  7446  001718  6E6D               	movwf	storeData@mexLength^0,c
  7447                           
  7448                           ;usart.c: 184:             break;
  7449  00171A  EFAF  F00B         	goto	i2l3325
  7450  00171E                     i2l3319:
  7451  00171E  FFFF               	dw	65535	; assembler added errata NOP
  7452                           
  7453                           ;usart.c: 186:             mexLength = 1;
  7454  001720  0E01               	movlw	1
  7455  001722  6E6D               	movwf	storeData@mexLength^0,c
  7456                           
  7457                           ;usart.c: 187:             break;
  7458  001724  EFAF  F00B         	goto	i2l3325
  7459  001728                     i2l3323:
  7460  001728  FFFF               	dw	65535	; assembler added errata NOP
  7461  00172A  5045               	movf	storeData@receivedMex^0,w,c
  7462  00172C  6E08               	movwf	??i2_storeData^0,c
  7463  00172E  6A09               	clrf	(??i2_storeData+1)^0,c
  7464                           
  7465                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7466                           ; Switch size 1, requested type "simple"
  7467                           ; Number of cases is 1, Range of values is 0 to 0
  7468                           ; switch strategies available:
  7469                           ; Name         Instructions Cycles
  7470                           ; simple_byte            4     3 (average)
  7471                           ;	Chosen strategy is simple_byte
  7472  001730  5009               	movf	(??i2_storeData+1)^0,w,c
  7473  001732  0A00               	xorlw	0	; case 0
  7474  001734  B4D8               	btfsc	status,2,c
  7475  001736  EF9F  F00B         	goto	i2l4677
  7476  00173A  EFAF  F00B         	goto	i2l3325
  7477  00173E                     i2l4677:
  7478  00173E  FFFF               	dw	65535	; assembler added errata NOP
  7479                           
  7480                           ; Switch size 1, requested type "simple"
  7481                           ; Number of cases is 3, Range of values is 0 to 2
  7482                           ; switch strategies available:
  7483                           ; Name         Instructions Cycles
  7484                           ; simple_byte           10     6 (average)
  7485                           ;	Chosen strategy is simple_byte
  7486  001740  5008               	movf	??i2_storeData^0,w,c
  7487  001742  0A00               	xorlw	0	; case 0
  7488  001744  B4D8               	btfsc	status,2,c
  7489  001746  EF85  F00B         	goto	i2l3315
  7490  00174A  0A01               	xorlw	1	; case 1
  7491  00174C  B4D8               	btfsc	status,2,c
  7492  00174E  EF8A  F00B         	goto	i2l3317
  7493  001752  0A03               	xorlw	3	; case 2
  7494  001754  B4D8               	btfsc	status,2,c
  7495  001756  EF8F  F00B         	goto	i2l3319
  7496  00175A  EFAF  F00B         	goto	i2l3325
  7497  00175E                     i2l3325:
  7498  00175E  FFFF               	dw	65535	; assembler added errata NOP
  7499                           
  7500                           ;usart.c: 194:     if(counter >= mexLength){
  7501  001760  506D               	movf	storeData@mexLength^0,w,c
  7502  001762  5C60               	subwf	storeData@counter^0,w,c
  7503  001764  A0D8               	btfss	status,0,c
  7504  001766  EFB7  F00B         	goto	i2u250_41
  7505  00176A  EFBA  F00B         	goto	i2u250_40
  7506  00176E                     i2u250_41:
  7507  00176E  FFFF               	dw	65535	; assembler added errata NOP
  7508  001770  EF26  F00C         	goto	i2l574
  7509  001774                     i2u250_40:
  7510  001774  FFFF               	dw	65535	; assembler added errata NOP
  7511  001776                     
  7512                           ;usart.c: 195:         counter = 0;
  7513  001776  0E00               	movlw	0
  7514  001778  6E60               	movwf	storeData@counter^0,c
  7515                           
  7516                           ;usart.c: 198:         switch(receivedMex[0]){
  7517  00177A  EF0B  F00C         	goto	i2l3341
  7518  00177E                     i2l3329:
  7519  00177E  FFFF               	dw	65535	; assembler added errata NOP
  7520                           
  7521                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7522  001780  5063               	movf	_dataCounter^0,w,c
  7523  001782  0D04               	mullw	4
  7524  001784  0EDB               	movlw	low _dataSequence
  7525  001786  24F3               	addwf	243,w,c
  7526  001788  6ED9               	movwf	fsr2l,c
  7527  00178A  0E00               	movlw	high _dataSequence
  7528  00178C  20F4               	addwfc	prodh,w,c
  7529  00178E  6EDA               	movwf	fsr2h,c
  7530  001790  C046  FFDF         	movff	storeData@receivedMex+1,indf2
  7531                           
  7532                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2];
  7533  001794  5063               	movf	_dataCounter^0,w,c
  7534  001796  0D04               	mullw	4
  7535  001798  0EDC               	movlw	low (_dataSequence+1)
  7536  00179A  24F3               	addwf	243,w,c
  7537  00179C  6ED9               	movwf	fsr2l,c
  7538  00179E  0E00               	movlw	high (_dataSequence+1)
  7539  0017A0  20F4               	addwfc	prodh,w,c
  7540  0017A2  6EDA               	movwf	fsr2h,c
  7541  0017A4  C047  FFDF         	movff	storeData@receivedMex+2,indf2
  7542                           
  7543                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3];
  7544  0017A8  5063               	movf	_dataCounter^0,w,c
  7545  0017AA  0D04               	mullw	4
  7546  0017AC  0EDD               	movlw	low (_dataSequence+2)
  7547  0017AE  24F3               	addwf	243,w,c
  7548  0017B0  6ED9               	movwf	fsr2l,c
  7549  0017B2  0E00               	movlw	high (_dataSequence+2)
  7550  0017B4  20F4               	addwfc	prodh,w,c
  7551  0017B6  6EDA               	movwf	fsr2h,c
  7552  0017B8  C048  FFDF         	movff	storeData@receivedMex+3,indf2
  7553                           
  7554                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7555  0017BC  5063               	movf	_dataCounter^0,w,c
  7556  0017BE  0D04               	mullw	4
  7557  0017C0  0EDE               	movlw	low (_dataSequence+3)
  7558  0017C2  24F3               	addwf	243,w,c
  7559  0017C4  6ED9               	movwf	fsr2l,c
  7560  0017C6  0E00               	movlw	high (_dataSequence+3)
  7561  0017C8  20F4               	addwfc	prodh,w,c
  7562  0017CA  6EDA               	movwf	fsr2h,c
  7563  0017CC  C049  FFDF         	movff	storeData@receivedMex+4,indf2
  7564  0017D0                     
  7565                           ;usart.c: 205:                 dataCounter++;
  7566  0017D0  2A63               	incf	_dataCounter^0,f,c
  7567                           
  7568                           ;usart.c: 206:                 break;
  7569  0017D2  EF26  F00C         	goto	i2l574
  7570  0017D6                     i2l571:
  7571  0017D6  FFFF               	dw	65535	; assembler added errata NOP
  7572                           
  7573                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  7574  0017D8  C046  F0EF         	movff	storeData@receivedMex+1,_newSequenceData
  7575                           
  7576                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  7577  0017DC  C047  F0F0         	movff	storeData@receivedMex+2,_newSequenceData+1
  7578                           
  7579                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3];
  7580  0017E0  C048  F0F1         	movff	storeData@receivedMex+3,_newSequenceData+2
  7581                           
  7582                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4];
  7583  0017E4  C049  F0F2         	movff	storeData@receivedMex+4,_newSequenceData+3
  7584                           
  7585                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  7586  0017E8  C04A  F0F3         	movff	storeData@receivedMex+5,_newSequenceData+4
  7587                           
  7588                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6];
  7589  0017EC  C04B  F0F4         	movff	storeData@receivedMex+6,_newSequenceData+5
  7590                           
  7591                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7];
  7592  0017F0  C04C  F0F5         	movff	storeData@receivedMex+7,_newSequenceData+6
  7593                           
  7594                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  7595  0017F4  C04D  F0F6         	movff	storeData@receivedMex+8,_newSequenceData+7
  7596  0017F8                     
  7597                           ;usart.c: 218:                 _newSequence = 1;
  7598  0017F8  0E01               	movlw	1
  7599  0017FA  6E61               	movwf	__newSequence^0,c
  7600                           
  7601                           ;usart.c: 219:                 break;
  7602  0017FC  EF26  F00C         	goto	i2l574
  7603  001800                     i2l3335:
  7604  001800  FFFF               	dw	65535	; assembler added errata NOP
  7605                           
  7606                           ;usart.c: 222:                 _fatalError = 1;
  7607  001802  0E01               	movlw	1
  7608  001804  6E62               	movwf	__fatalError^0,c
  7609                           
  7610                           ;usart.c: 223:                 break;
  7611  001806  EF26  F00C         	goto	i2l574
  7612  00180A                     i2l3337:
  7613  00180A  FFFF               	dw	65535	; assembler added errata NOP
  7614                           
  7615                           ;usart.c: 226:                 printError(8);
  7616  00180C  0E08               	movlw	8
  7617  00180E  EC52  F00D         	call	i2_printError
  7618                           
  7619                           ;usart.c: 227:                 break;
  7620  001812  EF26  F00C         	goto	i2l574
  7621  001816                     i2l3341:
  7622  001816  FFFF               	dw	65535	; assembler added errata NOP
  7623  001818  5045               	movf	storeData@receivedMex^0,w,c
  7624  00181A  6E08               	movwf	??i2_storeData^0,c
  7625  00181C  6A09               	clrf	(??i2_storeData+1)^0,c
  7626                           
  7627                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7628                           ; Switch size 1, requested type "simple"
  7629                           ; Number of cases is 1, Range of values is 0 to 0
  7630                           ; switch strategies available:
  7631                           ; Name         Instructions Cycles
  7632                           ; simple_byte            4     3 (average)
  7633                           ;	Chosen strategy is simple_byte
  7634  00181E  5009               	movf	(??i2_storeData+1)^0,w,c
  7635  001820  0A00               	xorlw	0	; case 0
  7636  001822  B4D8               	btfsc	status,2,c
  7637  001824  EF16  F00C         	goto	i2l4679
  7638  001828  EF05  F00C         	goto	i2l3337
  7639  00182C                     i2l4679:
  7640  00182C  FFFF               	dw	65535	; assembler added errata NOP
  7641                           
  7642                           ; Switch size 1, requested type "simple"
  7643                           ; Number of cases is 3, Range of values is 0 to 2
  7644                           ; switch strategies available:
  7645                           ; Name         Instructions Cycles
  7646                           ; simple_byte           10     6 (average)
  7647                           ;	Chosen strategy is simple_byte
  7648  00182E  5008               	movf	??i2_storeData^0,w,c
  7649  001830  0A00               	xorlw	0	; case 0
  7650  001832  B4D8               	btfsc	status,2,c
  7651  001834  EFBF  F00B         	goto	i2l3329
  7652  001838  0A01               	xorlw	1	; case 1
  7653  00183A  B4D8               	btfsc	status,2,c
  7654  00183C  EFEB  F00B         	goto	i2l571
  7655  001840  0A03               	xorlw	3	; case 2
  7656  001842  B4D8               	btfsc	status,2,c
  7657  001844  EF00  F00C         	goto	i2l3335
  7658  001848  EF05  F00C         	goto	i2l3337
  7659  00184C                     i2l574:
  7660  00184C  FFFF               	dw	65535	; assembler added errata NOP
  7661  00184E  0012               	return		;funcret
  7662  001850  FFFF               	dw	65535	; errata NOP
  7663  001852                     __end_ofi2_storeData:
  7664                           	callstack 0
  7665                           
  7666 ;; *************** function _writeTM0 *****************
  7667 ;; Defined at:
  7668 ;;		line 20 in file "motors.c"
  7669 ;; Parameters:    Size  Location     Type
  7670 ;;		None
  7671 ;; Auto vars:     Size  Location     Type
  7672 ;;		None
  7673 ;; Return value:  Size  Location     Type
  7674 ;;                  1    wreg      void 
  7675 ;; Registers used:
  7676 ;;		wreg, status,2
  7677 ;; Tracked objects:
  7678 ;;		On entry : 0/0
  7679 ;;		On exit  : 0/0
  7680 ;;		Unchanged: 0/0
  7681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7682 ;;      Params:         0       0       0       0       0       0       0
  7683 ;;      Locals:         0       0       0       0       0       0       0
  7684 ;;      Temps:          0       0       0       0       0       0       0
  7685 ;;      Totals:         0       0       0       0       0       0       0
  7686 ;;Total ram usage:        0 bytes
  7687 ;; Hardware stack levels used:    1
  7688 ;; This function calls:
  7689 ;;		Nothing
  7690 ;; This function is called by:
  7691 ;;		_isr
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           	psect	text46
  7696  00262E                     __ptext46:
  7697                           	callstack 0
  7698  00262E                     _writeTM0:
  7699                           	callstack 0
  7700  00262E  FFFF               	dw	65535	; assembler added errata NOP
  7701  002630                     
  7702                           ;motors.c: 21:     tm0Error = 1;
  7703  002630  0E00               	movlw	0
  7704  002632  6E5C               	movwf	(_tm0Error+1)^0,c
  7705  002634  0E01               	movlw	1
  7706  002636  6E5B               	movwf	_tm0Error^0,c
  7707  002638  0012               	return		;funcret
  7708  00263A  FFFF               	dw	65535	; errata NOP
  7709  00263C                     __end_of_writeTM0:
  7710                           	callstack 0
  7711                           
  7712 ;; *************** function _whatsTM0Limit *****************
  7713 ;; Defined at:
  7714 ;;		line 34 in file "motors.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;		None
  7717 ;; Auto vars:     Size  Location     Type
  7718 ;;		None
  7719 ;; Return value:  Size  Location     Type
  7720 ;;                  1    wreg      unsigned char 
  7721 ;; Registers used:
  7722 ;;		wreg, status,2
  7723 ;; Tracked objects:
  7724 ;;		On entry : 0/0
  7725 ;;		On exit  : 0/0
  7726 ;;		Unchanged: 0/0
  7727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7728 ;;      Params:         0       0       0       0       0       0       0
  7729 ;;      Locals:         0       0       0       0       0       0       0
  7730 ;;      Temps:          0       0       0       0       0       0       0
  7731 ;;      Totals:         0       0       0       0       0       0       0
  7732 ;;Total ram usage:        0 bytes
  7733 ;; Hardware stack levels used:    1
  7734 ;; This function calls:
  7735 ;;		Nothing
  7736 ;; This function is called by:
  7737 ;;		_isr
  7738 ;; This function uses a non-reentrant model
  7739 ;;
  7740                           
  7741                           	psect	text47
  7742  0026DE                     __ptext47:
  7743                           	callstack 0
  7744  0026DE                     _whatsTM0Limit:
  7745                           	callstack 0
  7746  0026DE  FFFF               	dw	65535	; assembler added errata NOP
  7747  0026E0                     
  7748                           ;motors.c: 35:     return(tm0Limit);
  7749  0026E0  5068               	movf	_tm0Limit^0,w,c
  7750  0026E2  0012               	return		;funcret
  7751  0026E4  FFFF               	dw	65535	; errata NOP
  7752  0026E6                     __end_of_whatsTM0Limit:
  7753                           	callstack 0
  7754                           
  7755 ;; *************** function _toggleStep *****************
  7756 ;; Defined at:
  7757 ;;		line 92 in file "timer.c"
  7758 ;; Parameters:    Size  Location     Type
  7759 ;;		None
  7760 ;; Auto vars:     Size  Location     Type
  7761 ;;		None
  7762 ;; Return value:  Size  Location     Type
  7763 ;;                  1    wreg      void 
  7764 ;; Registers used:
  7765 ;;		wreg, status,2
  7766 ;; Tracked objects:
  7767 ;;		On entry : 0/0
  7768 ;;		On exit  : 0/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7771 ;;      Params:         0       0       0       0       0       0       0
  7772 ;;      Locals:         0       0       0       0       0       0       0
  7773 ;;      Temps:          0       0       0       0       0       0       0
  7774 ;;      Totals:         0       0       0       0       0       0       0
  7775 ;;Total ram usage:        0 bytes
  7776 ;; Hardware stack levels used:    1
  7777 ;; This function calls:
  7778 ;;		Nothing
  7779 ;; This function is called by:
  7780 ;;		_isr
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           	psect	text48
  7785  0026A0                     __ptext48:
  7786                           	callstack 0
  7787  0026A0                     _toggleStep:
  7788                           	callstack 0
  7789  0026A0  FFFF               	dw	65535	; assembler added errata NOP
  7790  0026A2                     
  7791                           ;timer.c: 93:     stepToggle = 1;
  7792  0026A2  0E01               	movlw	1
  7793  0026A4  6E5D               	movwf	_stepToggle^0,c	;volatile
  7794  0026A6  0012               	return		;funcret
  7795  0026A8  FFFF               	dw	65535	; errata NOP
  7796  0026AA                     __end_of_toggleStep:
  7797                           	callstack 0
  7798                           
  7799 ;; *************** function _setTouchRel *****************
  7800 ;; Defined at:
  7801 ;;		line 86 in file "adc.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;		None
  7804 ;; Auto vars:     Size  Location     Type
  7805 ;;		None
  7806 ;; Return value:  Size  Location     Type
  7807 ;;                  1    wreg      void 
  7808 ;; Registers used:
  7809 ;;		wreg, status,2
  7810 ;; Tracked objects:
  7811 ;;		On entry : 0/0
  7812 ;;		On exit  : 0/0
  7813 ;;		Unchanged: 0/0
  7814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7815 ;;      Params:         0       0       0       0       0       0       0
  7816 ;;      Locals:         0       0       0       0       0       0       0
  7817 ;;      Temps:          0       0       0       0       0       0       0
  7818 ;;      Totals:         0       0       0       0       0       0       0
  7819 ;;Total ram usage:        0 bytes
  7820 ;; Hardware stack levels used:    1
  7821 ;; This function calls:
  7822 ;;		Nothing
  7823 ;; This function is called by:
  7824 ;;		_isr
  7825 ;; This function uses a non-reentrant model
  7826 ;;
  7827                           
  7828                           	psect	text49
  7829  0026AA                     __ptext49:
  7830                           	callstack 0
  7831  0026AA                     _setTouchRel:
  7832                           	callstack 0
  7833  0026AA  FFFF               	dw	65535	; assembler added errata NOP
  7834  0026AC                     
  7835                           ;adc.c: 87:     touch_rel = 1;
  7836  0026AC  0E01               	movlw	1
  7837  0026AE  6E67               	movwf	_touch_rel^0,c	;volatile
  7838  0026B0  0012               	return		;funcret
  7839  0026B2  FFFF               	dw	65535	; errata NOP
  7840  0026B4                     __end_of_setTouchRel:
  7841                           	callstack 0
  7842                           
  7843 ;; *************** function _setThermRel *****************
  7844 ;; Defined at:
  7845 ;;		line 79 in file "adc.c"
  7846 ;; Parameters:    Size  Location     Type
  7847 ;;		None
  7848 ;; Auto vars:     Size  Location     Type
  7849 ;;		None
  7850 ;; Return value:  Size  Location     Type
  7851 ;;                  1    wreg      void 
  7852 ;; Registers used:
  7853 ;;		wreg, status,2
  7854 ;; Tracked objects:
  7855 ;;		On entry : 0/0
  7856 ;;		On exit  : 0/0
  7857 ;;		Unchanged: 0/0
  7858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7859 ;;      Params:         0       0       0       0       0       0       0
  7860 ;;      Locals:         0       0       0       0       0       0       0
  7861 ;;      Temps:          0       0       0       0       0       0       0
  7862 ;;      Totals:         0       0       0       0       0       0       0
  7863 ;;Total ram usage:        0 bytes
  7864 ;; Hardware stack levels used:    1
  7865 ;; This function calls:
  7866 ;;		Nothing
  7867 ;; This function is called by:
  7868 ;;		_isr
  7869 ;; This function uses a non-reentrant model
  7870 ;;
  7871                           
  7872                           	psect	text50
  7873  0026B4                     __ptext50:
  7874                           	callstack 0
  7875  0026B4                     _setThermRel:
  7876                           	callstack 0
  7877  0026B4  FFFF               	dw	65535	; assembler added errata NOP
  7878  0026B6                     
  7879                           ;adc.c: 80:     therm_rel = 1;
  7880  0026B6  0E01               	movlw	1
  7881  0026B8  6E66               	movwf	_therm_rel^0,c	;volatile
  7882  0026BA  0012               	return		;funcret
  7883  0026BC  FFFF               	dw	65535	; errata NOP
  7884  0026BE                     __end_of_setThermRel:
  7885                           	callstack 0
  7886                           
  7887 ;; *************** function _retPeriod *****************
  7888 ;; Defined at:
  7889 ;;		line 100 in file "timer.c"
  7890 ;; Parameters:    Size  Location     Type
  7891 ;;		None
  7892 ;; Auto vars:     Size  Location     Type
  7893 ;;		None
  7894 ;; Return value:  Size  Location     Type
  7895 ;;                  2    0[COMRAM] unsigned int 
  7896 ;; Registers used:
  7897 ;;		None
  7898 ;; Tracked objects:
  7899 ;;		On entry : 0/0
  7900 ;;		On exit  : 0/0
  7901 ;;		Unchanged: 0/0
  7902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7903 ;;      Params:         2       0       0       0       0       0       0
  7904 ;;      Locals:         0       0       0       0       0       0       0
  7905 ;;      Temps:          0       0       0       0       0       0       0
  7906 ;;      Totals:         2       0       0       0       0       0       0
  7907 ;;Total ram usage:        2 bytes
  7908 ;; Hardware stack levels used:    1
  7909 ;; This function calls:
  7910 ;;		Nothing
  7911 ;; This function is called by:
  7912 ;;		_isr
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           	psect	text51
  7917  00263C                     __ptext51:
  7918                           	callstack 0
  7919  00263C                     _retPeriod:
  7920                           	callstack 0
  7921  00263C  FFFF               	dw	65535	; assembler added errata NOP
  7922  00263E                     
  7923                           ;timer.c: 101:     return pwmPeriod;
  7924  00263E  C051  F001         	movff	_pwmPeriod,?_retPeriod
  7925  002642  C052  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7926  002646  0012               	return		;funcret
  7927  002648  FFFF               	dw	65535	; errata NOP
  7928  00264A                     __end_of_retPeriod:
  7929                           	callstack 0
  7930                           
  7931 ;; *************** function _increaseStep *****************
  7932 ;; Defined at:
  7933 ;;		line 84 in file "timer.c"
  7934 ;; Parameters:    Size  Location     Type
  7935 ;;		None
  7936 ;; Auto vars:     Size  Location     Type
  7937 ;;		None
  7938 ;; Return value:  Size  Location     Type
  7939 ;;                  1    wreg      void 
  7940 ;; Registers used:
  7941 ;;		status,2, status,0
  7942 ;; Tracked objects:
  7943 ;;		On entry : 0/0
  7944 ;;		On exit  : 0/0
  7945 ;;		Unchanged: 0/0
  7946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7947 ;;      Params:         0       0       0       0       0       0       0
  7948 ;;      Locals:         0       0       0       0       0       0       0
  7949 ;;      Temps:          0       0       0       0       0       0       0
  7950 ;;      Totals:         0       0       0       0       0       0       0
  7951 ;;Total ram usage:        0 bytes
  7952 ;; Hardware stack levels used:    1
  7953 ;; This function calls:
  7954 ;;		Nothing
  7955 ;; This function is called by:
  7956 ;;		_isr
  7957 ;; This function uses a non-reentrant model
  7958 ;;
  7959                           
  7960                           	psect	text52
  7961  0026E6                     __ptext52:
  7962                           	callstack 0
  7963  0026E6                     _increaseStep:
  7964                           	callstack 0
  7965  0026E6  FFFF               	dw	65535	; assembler added errata NOP
  7966  0026E8                     
  7967                           ;timer.c: 85:     pwmStep++;
  7968  0026E8  2A5E               	incf	_pwmStep^0,f,c	;volatile
  7969  0026EA  0012               	return		;funcret
  7970  0026EC  FFFF               	dw	65535	; errata NOP
  7971  0026EE                     __end_of_increaseStep:
  7972                           	callstack 0
  7973                           
  7974 ;; *************** function _fatalError *****************
  7975 ;; Defined at:
  7976 ;;		line 61 in file "usart.c"
  7977 ;; Parameters:    Size  Location     Type
  7978 ;;		None
  7979 ;; Auto vars:     Size  Location     Type
  7980 ;;		None
  7981 ;; Return value:  Size  Location     Type
  7982 ;;                  1    wreg      unsigned char 
  7983 ;; Registers used:
  7984 ;;		wreg, status,2
  7985 ;; Tracked objects:
  7986 ;;		On entry : 0/0
  7987 ;;		On exit  : 0/0
  7988 ;;		Unchanged: 0/0
  7989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7990 ;;      Params:         0       0       0       0       0       0       0
  7991 ;;      Locals:         0       0       0       0       0       0       0
  7992 ;;      Temps:          0       0       0       0       0       0       0
  7993 ;;      Totals:         0       0       0       0       0       0       0
  7994 ;;Total ram usage:        0 bytes
  7995 ;; Hardware stack levels used:    1
  7996 ;; This function calls:
  7997 ;;		Nothing
  7998 ;; This function is called by:
  7999 ;;		_isr
  8000 ;; This function uses a non-reentrant model
  8001 ;;
  8002                           
  8003                           	psect	text53
  8004  0026EE                     __ptext53:
  8005                           	callstack 0
  8006  0026EE                     _fatalError:
  8007                           	callstack 0
  8008  0026EE  FFFF               	dw	65535	; assembler added errata NOP
  8009  0026F0                     
  8010                           ;usart.c: 62:     return _fatalError;
  8011  0026F0  5062               	movf	__fatalError^0,w,c
  8012  0026F2  0012               	return		;funcret
  8013  0026F4  FFFF               	dw	65535	; errata NOP
  8014  0026F6                     __end_of_fatalError:
  8015                           	callstack 0
  8016                           
  8017 ;; *************** function _abortAll *****************
  8018 ;; Defined at:
  8019 ;;		line 625 in file "motors.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;		None
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;		None
  8024 ;; Return value:  Size  Location     Type
  8025 ;;                  1    wreg      void 
  8026 ;; Registers used:
  8027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8028 ;; Tracked objects:
  8029 ;;		On entry : 0/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8033 ;;      Params:         0       0       0       0       0       0       0
  8034 ;;      Locals:         0       0       0       0       0       0       0
  8035 ;;      Temps:          0       0       0       0       0       0       0
  8036 ;;      Totals:         0       0       0       0       0       0       0
  8037 ;;Total ram usage:        0 bytes
  8038 ;; Hardware stack levels used:    1
  8039 ;; Hardware stack levels required when called:    2
  8040 ;; This function calls:
  8041 ;;		i2_enableMotor
  8042 ;;		i2_printError
  8043 ;; This function is called by:
  8044 ;;		_isr
  8045 ;; This function uses a non-reentrant model
  8046 ;;
  8047                           
  8048                           	psect	text54
  8049  0024C6                     __ptext54:
  8050                           	callstack 0
  8051  0024C6                     _abortAll:
  8052                           	callstack 0
  8053  0024C6  FFFF               	dw	65535	; assembler added errata NOP
  8054  0024C8                     
  8055                           ;motors.c: 627:     enableMotor(1, 0);
  8056  0024C8  0E00               	movlw	0
  8057  0024CA  6E01               	movwf	i2enableMotor@motor^0,c
  8058  0024CC  0E01               	movlw	1
  8059  0024CE  EC5F  F011         	call	i2_enableMotor
  8060                           
  8061                           ;motors.c: 628:     enableMotor(1, 1);
  8062  0024D2  0E01               	movlw	1
  8063  0024D4  6E01               	movwf	i2enableMotor@motor^0,c
  8064  0024D6  0E01               	movlw	1
  8065  0024D8  EC5F  F011         	call	i2_enableMotor
  8066                           
  8067                           ;motors.c: 629:     enableMotor(1, 2);
  8068  0024DC  0E02               	movlw	2
  8069  0024DE  6E01               	movwf	i2enableMotor@motor^0,c
  8070  0024E0  0E01               	movlw	1
  8071  0024E2  EC5F  F011         	call	i2_enableMotor
  8072  0024E6                     
  8073                           ;motors.c: 631:     printError(7);
  8074  0024E6  0E07               	movlw	7
  8075  0024E8  EC52  F00D         	call	i2_printError
  8076  0024EC                     i2l244:
  8077  0024EC  FFFF               	dw	65535	; assembler added errata NOP
  8078  0024EE  EF76  F012         	goto	i2l244
  8079  0024F2  0012               	return		;funcret
  8080  0024F4  FFFF               	dw	65535	; errata NOP
  8081  0024F6                     __end_of_abortAll:
  8082                           	callstack 0
  8083                           
  8084 ;; *************** function i2_printError *****************
  8085 ;; Defined at:
  8086 ;;		line 111 in file "usart.c"
  8087 ;; Parameters:    Size  Location     Type
  8088 ;;  errCode         1    wreg     unsigned char 
  8089 ;; Auto vars:     Size  Location     Type
  8090 ;;  errCode         1    6[COMRAM] unsigned char 
  8091 ;; Return value:  Size  Location     Type
  8092 ;;                  1    wreg      void 
  8093 ;; Registers used:
  8094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8095 ;; Tracked objects:
  8096 ;;		On entry : 0/0
  8097 ;;		On exit  : 0/0
  8098 ;;		Unchanged: 0/0
  8099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8100 ;;      Params:         0       0       0       0       0       0       0
  8101 ;;      Locals:         1       0       0       0       0       0       0
  8102 ;;      Temps:          2       0       0       0       0       0       0
  8103 ;;      Totals:         3       0       0       0       0       0       0
  8104 ;;Total ram usage:        3 bytes
  8105 ;; Hardware stack levels used:    1
  8106 ;; Hardware stack levels required when called:    1
  8107 ;; This function calls:
  8108 ;;		i2_uartTx
  8109 ;; This function is called by:
  8110 ;;		_abortAll
  8111 ;;		i2_storeData
  8112 ;; This function uses a non-reentrant model
  8113 ;;
  8114                           
  8115                           	psect	text55
  8116  001AA4                     __ptext55:
  8117                           	callstack 0
  8118  001AA4                     i2_printError:
  8119                           	callstack 0
  8120  001AA4  FFFF               	dw	65535	; assembler added errata NOP
  8121                           
  8122                           ;incstack = 0
  8123                           ;i2printError@errCode stored from wreg
  8124  001AA6  6E07               	movwf	i2printError@errCode^0,c
  8125  001AA8                     
  8126                           ;usart.c: 113:     switch(errCode){
  8127  001AA8  EFAE  F00D         	goto	i2l3055
  8128  001AAC                     i2l3037:
  8129  001AAC  FFFF               	dw	65535	; assembler added errata NOP
  8130                           
  8131                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  8132  001AAE  0EA5               	movlw	low _errString_Feed
  8133  001AB0  6E01               	movwf	i2uartTx@ptr^0,c
  8134  001AB2  0E00               	movlw	high _errString_Feed
  8135  001AB4  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8136  001AB6  0E1E               	movlw	30
  8137  001AB8  6E03               	movwf	i2uartTx@length^0,c
  8138  001ABA  EC1E  F012         	call	i2_uartTx	;wreg free
  8139                           
  8140                           ;usart.c: 116:             break;
  8141  001ABE  EFDD  F00D         	goto	i2l541
  8142  001AC2                     i2l3039:
  8143  001AC2  FFFF               	dw	65535	; assembler added errata NOP
  8144                           
  8145                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  8146  001AC4  0E5E               	movlw	low _errString_ZEND
  8147  001AC6  6E01               	movwf	i2uartTx@ptr^0,c
  8148  001AC8  0E01               	movlw	high _errString_ZEND
  8149  001ACA  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8150  001ACC  0E29               	movlw	41
  8151  001ACE  6E03               	movwf	i2uartTx@length^0,c
  8152  001AD0  EC1E  F012         	call	i2_uartTx	;wreg free
  8153                           
  8154                           ;usart.c: 119:             break;
  8155  001AD4  EFDD  F00D         	goto	i2l541
  8156  001AD8                     i2l3041:
  8157  001AD8  FFFF               	dw	65535	; assembler added errata NOP
  8158                           
  8159                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  8160  001ADA  0E87               	movlw	low _errString_Reset
  8161  001ADC  6E01               	movwf	i2uartTx@ptr^0,c
  8162  001ADE  0E01               	movlw	high _errString_Reset
  8163  001AE0  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8164  001AE2  0E28               	movlw	40
  8165  001AE4  6E03               	movwf	i2uartTx@length^0,c
  8166  001AE6  EC1E  F012         	call	i2_uartTx	;wreg free
  8167                           
  8168                           ;usart.c: 122:             break;
  8169  001AEA  EFDD  F00D         	goto	i2l541
  8170  001AEE                     i2l3043:
  8171  001AEE  FFFF               	dw	65535	; assembler added errata NOP
  8172                           
  8173                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  8174  001AF0  0E35               	movlw	low _errString_Point
  8175  001AF2  6E01               	movwf	i2uartTx@ptr^0,c
  8176  001AF4  0E01               	movlw	high _errString_Point
  8177  001AF6  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8178  001AF8  0E29               	movlw	41
  8179  001AFA  6E03               	movwf	i2uartTx@length^0,c
  8180  001AFC  EC1E  F012         	call	i2_uartTx	;wreg free
  8181                           
  8182                           ;usart.c: 125:             break;
  8183  001B00  EFDD  F00D         	goto	i2l541
  8184  001B04                     i2l3045:
  8185  001B04  FFFF               	dw	65535	; assembler added errata NOP
  8186                           
  8187                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  8188  001B06  0E84               	movlw	low _errString_Bound
  8189  001B08  6E01               	movwf	i2uartTx@ptr^0,c
  8190  001B0A  0E00               	movlw	high _errString_Bound
  8191  001B0C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8192  001B0E  0E21               	movlw	33
  8193  001B10  6E03               	movwf	i2uartTx@length^0,c
  8194  001B12  EC1E  F012         	call	i2_uartTx	;wreg free
  8195                           
  8196                           ;usart.c: 128:             break;
  8197  001B16  EFDD  F00D         	goto	i2l541
  8198  001B1A                     i2l3047:
  8199  001B1A  FFFF               	dw	65535	; assembler added errata NOP
  8200                           
  8201                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  8202  001B1C  0E00               	movlw	low _errString_PointZ
  8203  001B1E  6E01               	movwf	i2uartTx@ptr^0,c
  8204  001B20  0E01               	movlw	high _errString_PointZ
  8205  001B22  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8206  001B24  0E35               	movlw	53
  8207  001B26  6E03               	movwf	i2uartTx@length^0,c
  8208  001B28  EC1E  F012         	call	i2_uartTx	;wreg free
  8209                           
  8210                           ;usart.c: 131:             break;
  8211  001B2C  EFDD  F00D         	goto	i2l541
  8212  001B30                     i2l3049:
  8213  001B30  FFFF               	dw	65535	; assembler added errata NOP
  8214                           
  8215                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  8216  001B32  0EAF               	movlw	low _errString_Fatal
  8217  001B34  6E01               	movwf	i2uartTx@ptr^0,c
  8218  001B36  0E01               	movlw	high _errString_Fatal
  8219  001B38  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8220  001B3A  0E27               	movlw	39
  8221  001B3C  6E03               	movwf	i2uartTx@length^0,c
  8222  001B3E  EC1E  F012         	call	i2_uartTx	;wreg free
  8223                           
  8224                           ;usart.c: 134:             break;
  8225  001B42  EFDD  F00D         	goto	i2l541
  8226  001B46                     i2l3051:
  8227  001B46  FFFF               	dw	65535	; assembler added errata NOP
  8228                           
  8229                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  8230  001B48  0EC3               	movlw	low _errString_Command
  8231  001B4A  6E01               	movwf	i2uartTx@ptr^0,c
  8232  001B4C  0E00               	movlw	high _errString_Command
  8233  001B4E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8234  001B50  0E18               	movlw	24
  8235  001B52  6E03               	movwf	i2uartTx@length^0,c
  8236  001B54  EC1E  F012         	call	i2_uartTx	;wreg free
  8237                           
  8238                           ;usart.c: 137:             break;
  8239  001B58  EFDD  F00D         	goto	i2l541
  8240  001B5C                     i2l3055:
  8241  001B5C  FFFF               	dw	65535	; assembler added errata NOP
  8242  001B5E  5007               	movf	i2printError@errCode^0,w,c
  8243  001B60  6E05               	movwf	??i2_printError^0,c
  8244  001B62  6A06               	clrf	(??i2_printError+1)^0,c
  8245                           
  8246                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8247                           ; Switch size 1, requested type "simple"
  8248                           ; Number of cases is 1, Range of values is 0 to 0
  8249                           ; switch strategies available:
  8250                           ; Name         Instructions Cycles
  8251                           ; simple_byte            4     3 (average)
  8252                           ;	Chosen strategy is simple_byte
  8253  001B64  5006               	movf	(??i2_printError+1)^0,w,c
  8254  001B66  0A00               	xorlw	0	; case 0
  8255  001B68  B4D8               	btfsc	status,2,c
  8256  001B6A  EFB9  F00D         	goto	i2l4681
  8257  001B6E  EFDD  F00D         	goto	i2l541
  8258  001B72                     i2l4681:
  8259  001B72  FFFF               	dw	65535	; assembler added errata NOP
  8260                           
  8261                           ; Switch size 1, requested type "simple"
  8262                           ; Number of cases is 8, Range of values is 1 to 8
  8263                           ; switch strategies available:
  8264                           ; Name         Instructions Cycles
  8265                           ; simple_byte           25    13 (average)
  8266                           ;	Chosen strategy is simple_byte
  8267  001B74  5005               	movf	??i2_printError^0,w,c
  8268  001B76  0A01               	xorlw	1	; case 1
  8269  001B78  B4D8               	btfsc	status,2,c
  8270  001B7A  EF56  F00D         	goto	i2l3037
  8271  001B7E  0A03               	xorlw	3	; case 2
  8272  001B80  B4D8               	btfsc	status,2,c
  8273  001B82  EF61  F00D         	goto	i2l3039
  8274  001B86  0A01               	xorlw	1	; case 3
  8275  001B88  B4D8               	btfsc	status,2,c
  8276  001B8A  EF6C  F00D         	goto	i2l3041
  8277  001B8E  0A07               	xorlw	7	; case 4
  8278  001B90  B4D8               	btfsc	status,2,c
  8279  001B92  EF77  F00D         	goto	i2l3043
  8280  001B96  0A01               	xorlw	1	; case 5
  8281  001B98  B4D8               	btfsc	status,2,c
  8282  001B9A  EF82  F00D         	goto	i2l3045
  8283  001B9E  0A03               	xorlw	3	; case 6
  8284  001BA0  B4D8               	btfsc	status,2,c
  8285  001BA2  EF8D  F00D         	goto	i2l3047
  8286  001BA6  0A01               	xorlw	1	; case 7
  8287  001BA8  B4D8               	btfsc	status,2,c
  8288  001BAA  EF98  F00D         	goto	i2l3049
  8289  001BAE  0A0F               	xorlw	15	; case 8
  8290  001BB0  B4D8               	btfsc	status,2,c
  8291  001BB2  EFA3  F00D         	goto	i2l3051
  8292  001BB6  EFDD  F00D         	goto	i2l541
  8293  001BBA                     i2l541:
  8294  001BBA  FFFF               	dw	65535	; assembler added errata NOP
  8295  001BBC  0012               	return		;funcret
  8296  001BBE  FFFF               	dw	65535	; errata NOP
  8297  001BC0                     __end_ofi2_printError:
  8298                           	callstack 0
  8299                           
  8300 ;; *************** function i2_uartTx *****************
  8301 ;; Defined at:
  8302 ;;		line 148 in file "usart.c"
  8303 ;; Parameters:    Size  Location     Type
  8304 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  8305 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  8306 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  8307 ;;  length          1    2[COMRAM] unsigned char 
  8308 ;; Auto vars:     Size  Location     Type
  8309 ;;  i               1    3[COMRAM] unsigned char 
  8310 ;; Return value:  Size  Location     Type
  8311 ;;                  1    wreg      void 
  8312 ;; Registers used:
  8313 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8314 ;; Tracked objects:
  8315 ;;		On entry : 0/0
  8316 ;;		On exit  : 0/0
  8317 ;;		Unchanged: 0/0
  8318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8319 ;;      Params:         3       0       0       0       0       0       0
  8320 ;;      Locals:         1       0       0       0       0       0       0
  8321 ;;      Temps:          0       0       0       0       0       0       0
  8322 ;;      Totals:         4       0       0       0       0       0       0
  8323 ;;Total ram usage:        4 bytes
  8324 ;; Hardware stack levels used:    1
  8325 ;; This function calls:
  8326 ;;		Nothing
  8327 ;; This function is called by:
  8328 ;;		i2_printError
  8329 ;; This function uses a non-reentrant model
  8330 ;;
  8331                           
  8332                           	psect	text56
  8333  00243C                     __ptext56:
  8334                           	callstack 0
  8335  00243C                     i2_uartTx:
  8336                           	callstack 0
  8337  00243C  FFFF               	dw	65535	; assembler added errata NOP
  8338  00243E                     
  8339                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  8340  00243E  0E01               	movlw	1
  8341  002440  6E04               	movwf	i2uartTx@i^0,c
  8342  002442  EF37  F012         	goto	i2l2695
  8343  002446                     i2l2691:
  8344  002446  FFFF               	dw	65535	; assembler added errata NOP
  8345                           
  8346                           ;usart.c: 153:         TXREG = *ptr;
  8347  002448  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  8348  00244C  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  8349  002450  50DF               	movf	indf2,w,c
  8350  002452  6EAD               	movwf	173,c	;volatile
  8351  002454                     i2l546:
  8352  002454  FFFF               	dw	65535	; assembler added errata NOP
  8353  002456  A2AC               	btfss	172,1,c	;volatile
  8354  002458  EF30  F012         	goto	i2u180_41
  8355  00245C  EF33  F012         	goto	i2u180_40
  8356  002460                     i2u180_41:
  8357  002460  FFFF               	dw	65535	; assembler added errata NOP
  8358  002462  EF2A  F012         	goto	i2l546
  8359  002466                     i2u180_40:
  8360  002466  FFFF               	dw	65535	; assembler added errata NOP
  8361  002468                     
  8362                           ;usart.c: 157:         ptr++;
  8363  002468  4A01               	infsnz	i2uartTx@ptr^0,f,c
  8364  00246A  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  8365                           
  8366                           ;usart.c: 158:     }
  8367  00246C  2A04               	incf	i2uartTx@i^0,f,c
  8368  00246E                     i2l2695:
  8369  00246E  FFFF               	dw	65535	; assembler added errata NOP
  8370  002470  5003               	movf	i2uartTx@length^0,w,c
  8371  002472  5C04               	subwf	i2uartTx@i^0,w,c
  8372  002474  A0D8               	btfss	status,0,c
  8373  002476  EF3F  F012         	goto	i2u181_41
  8374  00247A  EF42  F012         	goto	i2u181_40
  8375  00247E                     i2u181_41:
  8376  00247E  FFFF               	dw	65535	; assembler added errata NOP
  8377  002480  EF23  F012         	goto	i2l2691
  8378  002484                     i2u181_40:
  8379  002484  FFFF               	dw	65535	; assembler added errata NOP
  8380  002486  0012               	return		;funcret
  8381  002488  FFFF               	dw	65535	; errata NOP
  8382  00248A                     __end_ofi2_uartTx:
  8383                           	callstack 0
  8384                           
  8385 ;; *************** function i2_enableMotor *****************
  8386 ;; Defined at:
  8387 ;;		line 93 in file "motors.c"
  8388 ;; Parameters:    Size  Location     Type
  8389 ;;  enable          1    wreg     unsigned char 
  8390 ;;  motor           1    0[COMRAM] unsigned char 
  8391 ;; Auto vars:     Size  Location     Type
  8392 ;;  enable          1    3[COMRAM] unsigned char 
  8393 ;; Return value:  Size  Location     Type
  8394 ;;                  1    wreg      void 
  8395 ;; Registers used:
  8396 ;;		wreg, status,2, status,0
  8397 ;; Tracked objects:
  8398 ;;		On entry : 0/0
  8399 ;;		On exit  : 0/0
  8400 ;;		Unchanged: 0/0
  8401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8402 ;;      Params:         1       0       0       0       0       0       0
  8403 ;;      Locals:         1       0       0       0       0       0       0
  8404 ;;      Temps:          2       0       0       0       0       0       0
  8405 ;;      Totals:         4       0       0       0       0       0       0
  8406 ;;Total ram usage:        4 bytes
  8407 ;; Hardware stack levels used:    1
  8408 ;; This function calls:
  8409 ;;		Nothing
  8410 ;; This function is called by:
  8411 ;;		_abortAll
  8412 ;; This function uses a non-reentrant model
  8413 ;;
  8414                           
  8415                           	psect	text57
  8416  0022BE                     __ptext57:
  8417                           	callstack 0
  8418  0022BE                     i2_enableMotor:
  8419                           	callstack 0
  8420  0022BE  FFFF               	dw	65535	; assembler added errata NOP
  8421                           
  8422                           ;incstack = 0
  8423                           ;i2enableMotor@enable stored from wreg
  8424  0022C0  6E04               	movwf	i2enableMotor@enable^0,c
  8425  0022C2                     
  8426                           ;motors.c: 94:     switch(motor){
  8427  0022C2  EF7B  F011         	goto	i2l3029
  8428  0022C6                     i2l3021:
  8429  0022C6  FFFF               	dw	65535	; assembler added errata NOP
  8430                           
  8431                           ;motors.c: 96:             LATAbits.LATA3 = enable;
  8432  0022C8  B004               	btfsc	i2enableMotor@enable^0,0,c
  8433  0022CA  D002               	bra	i2u229_45
  8434  0022CC  9689               	bcf	137,3,c	;volatile
  8435  0022CE  D001               	bra	i2u229_46
  8436  0022D0                     i2u229_45:
  8437  0022D0  8689               	bsf	137,3,c	;volatile
  8438  0022D2                     i2u229_46:
  8439                           
  8440                           ;motors.c: 97:             break;
  8441  0022D2  EF96  F011         	goto	i2l94
  8442  0022D6                     i2l3023:
  8443  0022D6  FFFF               	dw	65535	; assembler added errata NOP
  8444                           
  8445                           ;motors.c: 99:             LATBbits.LATB5 = enable;
  8446  0022D8  B004               	btfsc	i2enableMotor@enable^0,0,c
  8447  0022DA  D002               	bra	i2u230_45
  8448  0022DC  9A8A               	bcf	138,5,c	;volatile
  8449  0022DE  D001               	bra	i2u230_46
  8450  0022E0                     i2u230_45:
  8451  0022E0  8A8A               	bsf	138,5,c	;volatile
  8452  0022E2                     i2u230_46:
  8453                           
  8454                           ;motors.c: 100:             break;
  8455  0022E2  EF96  F011         	goto	i2l94
  8456  0022E6                     i2l3025:
  8457  0022E6  FFFF               	dw	65535	; assembler added errata NOP
  8458                           
  8459                           ;motors.c: 102:             LATCbits.LATC3 = enable;
  8460  0022E8  B004               	btfsc	i2enableMotor@enable^0,0,c
  8461  0022EA  D002               	bra	i2u231_45
  8462  0022EC  968B               	bcf	139,3,c	;volatile
  8463  0022EE  D001               	bra	i2u231_46
  8464  0022F0                     i2u231_45:
  8465  0022F0  868B               	bsf	139,3,c	;volatile
  8466  0022F2                     i2u231_46:
  8467                           
  8468                           ;motors.c: 103:             break;
  8469  0022F2  EF96  F011         	goto	i2l94
  8470  0022F6                     i2l3029:
  8471  0022F6  FFFF               	dw	65535	; assembler added errata NOP
  8472  0022F8  5001               	movf	i2enableMotor@motor^0,w,c
  8473  0022FA  6E02               	movwf	??i2_enableMotor^0,c
  8474  0022FC  6A03               	clrf	(??i2_enableMotor+1)^0,c
  8475                           
  8476                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8477                           ; Switch size 1, requested type "simple"
  8478                           ; Number of cases is 1, Range of values is 0 to 0
  8479                           ; switch strategies available:
  8480                           ; Name         Instructions Cycles
  8481                           ; simple_byte            4     3 (average)
  8482                           ;	Chosen strategy is simple_byte
  8483  0022FE  5003               	movf	(??i2_enableMotor+1)^0,w,c
  8484  002300  0A00               	xorlw	0	; case 0
  8485  002302  B4D8               	btfsc	status,2,c
  8486  002304  EF86  F011         	goto	i2l4683
  8487  002308  EF96  F011         	goto	i2l94
  8488  00230C                     i2l4683:
  8489  00230C  FFFF               	dw	65535	; assembler added errata NOP
  8490                           
  8491                           ; Switch size 1, requested type "simple"
  8492                           ; Number of cases is 3, Range of values is 0 to 2
  8493                           ; switch strategies available:
  8494                           ; Name         Instructions Cycles
  8495                           ; simple_byte           10     6 (average)
  8496                           ;	Chosen strategy is simple_byte
  8497  00230E  5002               	movf	??i2_enableMotor^0,w,c
  8498  002310  0A00               	xorlw	0	; case 0
  8499  002312  B4D8               	btfsc	status,2,c
  8500  002314  EF63  F011         	goto	i2l3021
  8501  002318  0A01               	xorlw	1	; case 1
  8502  00231A  B4D8               	btfsc	status,2,c
  8503  00231C  EF6B  F011         	goto	i2l3023
  8504  002320  0A03               	xorlw	3	; case 2
  8505  002322  B4D8               	btfsc	status,2,c
  8506  002324  EF73  F011         	goto	i2l3025
  8507  002328  EF96  F011         	goto	i2l94
  8508  00232C                     i2l94:
  8509  00232C  FFFF               	dw	65535	; assembler added errata NOP
  8510  00232E  0012               	return		;funcret
  8511  002330  FFFF               	dw	65535	; errata NOP
  8512  002332                     __end_ofi2_enableMotor:
  8513                           	callstack 0
  8514                           
  8515                           	psect	rparam
  8516  0000                     
  8517                           	psect	temp
  8518  00006E                     btemp:
  8519                           	callstack 0
  8520  00006E                     	ds	1
  8521  0000                     int$flags	set	btemp
  8522  0000                     wtemp8	set	btemp+1
  8523  0000                     ttemp5	set	btemp+1
  8524  0000                     ttemp6	set	btemp+4
  8525  0000                     ttemp7	set	btemp+8
  8526                           
  8527                           	psect	idloc
  8528                           
  8529                           ;Config register IDLOC0 @ 0x200000
  8530                           ;	unspecified, using default values
  8531  200000                     	org	2097152
  8532  200000  FF                 	db	255
  8533                           
  8534                           ;Config register IDLOC1 @ 0x200001
  8535                           ;	unspecified, using default values
  8536  200001                     	org	2097153
  8537  200001  FF                 	db	255
  8538                           
  8539                           ;Config register IDLOC2 @ 0x200002
  8540                           ;	unspecified, using default values
  8541  200002                     	org	2097154
  8542  200002  FF                 	db	255
  8543                           
  8544                           ;Config register IDLOC3 @ 0x200003
  8545                           ;	unspecified, using default values
  8546  200003                     	org	2097155
  8547  200003  FF                 	db	255
  8548                           
  8549                           ;Config register IDLOC4 @ 0x200004
  8550                           ;	unspecified, using default values
  8551  200004                     	org	2097156
  8552  200004  FF                 	db	255
  8553                           
  8554                           ;Config register IDLOC5 @ 0x200005
  8555                           ;	unspecified, using default values
  8556  200005                     	org	2097157
  8557  200005  FF                 	db	255
  8558                           
  8559                           ;Config register IDLOC6 @ 0x200006
  8560                           ;	unspecified, using default values
  8561  200006                     	org	2097158
  8562  200006  FF                 	db	255
  8563                           
  8564                           ;Config register IDLOC7 @ 0x200007
  8565                           ;	unspecified, using default values
  8566  200007                     	org	2097159
  8567  200007  FF                 	db	255
  8568                           
  8569                           	psect	config
  8570                           
  8571                           ; Padding undefined space
  8572  300000                     	org	3145728
  8573  300000  FF                 	db	255
  8574                           
  8575                           ;Config register CONFIG1H @ 0x300001
  8576                           ;	Oscillator Selection bits
  8577                           ;	OSC = XT, XT oscillator
  8578                           ;	Oscillator System Clock Switch Enable bit
  8579                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8580  300001                     	org	3145729
  8581  300001  21                 	db	33
  8582                           
  8583                           ;Config register CONFIG2L @ 0x300002
  8584                           ;	Power-up Timer Enable bit
  8585                           ;	PWRT = OFF, PWRT disabled
  8586                           ;	Brown-out Reset Enable bit
  8587                           ;	BOR = OFF, Brown-out Reset disabled
  8588                           ;	Brown-out Reset Voltage bits
  8589                           ;	BORV = 20, VBOR set to 2.0V
  8590  300002                     	org	3145730
  8591  300002  0D                 	db	13
  8592                           
  8593                           ;Config register CONFIG2H @ 0x300003
  8594                           ;	Watchdog Timer Enable bit
  8595                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8596                           ;	Watchdog Timer Postscale Select bits
  8597                           ;	WDTPS = 128, 1:128
  8598  300003                     	org	3145731
  8599  300003  0E                 	db	14
  8600                           
  8601                           ; Padding undefined space
  8602  300004                     	org	3145732
  8603  300004  FF                 	db	255
  8604                           
  8605                           ;Config register CONFIG3H @ 0x300005
  8606                           ;	CCP2 Mux bit
  8607                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8608  300005                     	org	3145733
  8609  300005  00                 	db	0
  8610                           
  8611                           ;Config register CONFIG4L @ 0x300006
  8612                           ;	Stack Full/Underflow Reset Enable bit
  8613                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8614                           ;	Low Voltage ICSP Enable bit
  8615                           ;	LVP = OFF, Low Voltage ICSP disabled
  8616                           ;	Background Debugger Enable bit
  8617                           ;	DEBUG = 0x1, unprogrammed default
  8618  300006                     	org	3145734
  8619  300006  80                 	db	128
  8620                           
  8621                           ; Padding undefined space
  8622  300007                     	org	3145735
  8623  300007  FF                 	db	255
  8624                           
  8625                           ;Config register CONFIG5L @ 0x300008
  8626                           ;	Code Protection bit
  8627                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8628                           ;	Code Protection bit
  8629                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8630                           ;	Code Protection bit
  8631                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8632                           ;	Code Protection bit
  8633                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8634  300008                     	org	3145736
  8635  300008  0F                 	db	15
  8636                           
  8637                           ;Config register CONFIG5H @ 0x300009
  8638                           ;	Boot Block Code Protection bit
  8639                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8640                           ;	Data EEPROM Code Protection bit
  8641                           ;	CPD = OFF, Data EEPROM not code protected
  8642  300009                     	org	3145737
  8643  300009  C0                 	db	192
  8644                           
  8645                           ;Config register CONFIG6L @ 0x30000A
  8646                           ;	Write Protection bit
  8647                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8648                           ;	Write Protection bit
  8649                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8650                           ;	Write Protection bit
  8651                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8652                           ;	Write Protection bit
  8653                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8654  30000A                     	org	3145738
  8655  30000A  0F                 	db	15
  8656                           
  8657                           ;Config register CONFIG6H @ 0x30000B
  8658                           ;	Configuration Register Write Protection bit
  8659                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8660                           ;	Boot Block Write Protection bit
  8661                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8662                           ;	Data EEPROM Write Protection bit
  8663                           ;	WRTD = OFF, Data EEPROM not write protected
  8664  30000B                     	org	3145739
  8665  30000B  E0                 	db	224
  8666                           
  8667                           ;Config register CONFIG7L @ 0x30000C
  8668                           ;	Table Read Protection bit
  8669                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8670                           ;	Table Read Protection bit
  8671                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8672                           ;	Table Read Protection bit
  8673                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8674                           ;	Table Read Protection bit
  8675                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8676  30000C                     	org	3145740
  8677  30000C  0F                 	db	15
  8678                           
  8679                           ;Config register CONFIG7H @ 0x30000D
  8680                           ;	Boot Block Table Read Protection bit
  8681                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8682  30000D                     	org	3145741
  8683  30000D  40                 	db	64
  8684                           tosu	equ	0xFFF
  8685                           tosh	equ	0xFFE
  8686                           tosl	equ	0xFFD
  8687                           stkptr	equ	0xFFC
  8688                           pclatu	equ	0xFFB
  8689                           pclath	equ	0xFFA
  8690                           pcl	equ	0xFF9
  8691                           tblptru	equ	0xFF8
  8692                           tblptrh	equ	0xFF7
  8693                           tblptrl	equ	0xFF6
  8694                           tablat	equ	0xFF5
  8695                           prodh	equ	0xFF4
  8696                           prodl	equ	0xFF3
  8697                           indf0	equ	0xFEF
  8698                           postinc0	equ	0xFEE
  8699                           postdec0	equ	0xFED
  8700                           preinc0	equ	0xFEC
  8701                           plusw0	equ	0xFEB
  8702                           fsr0h	equ	0xFEA
  8703                           fsr0l	equ	0xFE9
  8704                           wreg	equ	0xFE8
  8705                           indf1	equ	0xFE7
  8706                           postinc1	equ	0xFE6
  8707                           postdec1	equ	0xFE5
  8708                           preinc1	equ	0xFE4
  8709                           plusw1	equ	0xFE3
  8710                           fsr1h	equ	0xFE2
  8711                           fsr1l	equ	0xFE1
  8712                           bsr	equ	0xFE0
  8713                           indf2	equ	0xFDF
  8714                           postinc2	equ	0xFDE
  8715                           postdec2	equ	0xFDD
  8716                           preinc2	equ	0xFDC
  8717                           plusw2	equ	0xFDB
  8718                           fsr2h	equ	0xFDA
  8719                           fsr2l	equ	0xFD9
  8720                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    16
    Data        310
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     68     109
    BANK0           128      8     127
    BANK1           256      8     222
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK0[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_executeData
    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_enableMotor
    _resetPosition->_setDecay
    _resetPosition->_setDirection
    _resetPosition->_setStep
    _touchTherm->_setDirection
    _touchObject->_setDirection
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_setDirection
    _liftArm->_setDirection

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_executeData

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   16869
                                              3 BANK1      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0    2702
                                             21 COMRAM     3     3      0
                        _enableMotor
                          _resetStep
                           _setDecay
                       _setDirection
                            _setStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _setStep                                              4     3      1     487
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _setDecay                                             4     3      1     394
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _enableMotor                                          4     3      1     559
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0   10321
                                             66 COMRAM     2     2      0
                                              0 BANK1      3     3      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0    1058
                          _resetStep
                         _resetTherm
                        _returnTherm
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0    1058
                          _resetStep
                         _resetTouch
                        _returnTouch
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            8     8      0    3163
                                              0 BANK0      8     8      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    3632
                                             21 COMRAM    14     6      8
                          _resetStep
                       _setDirection
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0    1058
                          _resetStep
                       _setDirection
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _setDirection                                         4     3      1    1024
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1225
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     673
                      i2_enableMotor
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (6) i2_enableMotor                                        4     3      1     166
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _setDirection
       _stepMade
     _moveToPoint
       _resetStep
       _setDirection
       _stepCounter
       _stepMade
     _pickObject
       _stepMade
     _releaseObj
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _stepMade
     _touchObject
       _resetStep
       _resetTouch
       _returnTouch
       _setDirection
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _setDirection
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _enableMotor
     _resetStep
     _setDecay
     _setDirection
     _setStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_enableMotor
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      8      DE       7       86.7%
BITBANK0            80      0       0       4        0.0%
BANK0               80      8      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     44      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CA      15        0.0%
DATA                 0      0     1CA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Apr 26 09:39:40 2021

                                                  ___fldiv@aexp 0038  
                                                  ___fldiv@bexp 0037  
                                         __end_of_interruptInit 24C6  
                                                  ___fldiv@sign 0030  
                                                            l70 262A  
                                                            l76 2570  
                                                            l85 2026  
                                                            l94 2244  
                                                           l103 22B8  
                                                           l112 21D0  
                                                           l202 1CAA  
                                                           l122 12E8  
                                                           l203 1CAE  
                                                           l123 1318  
                                                           l212 2092  
                                                           l133 136C  
                                                           l117 12B4  
                                                           l206 20AE  
                                                           l126 131C  
                                                           l118 13C8  
                                                           l151 0D4C  
                                                           l143 0D64  
                                                           l127 134C  
                                                           l119 12E4  
                                                           l216 20D8  
                                                           l208 2072  
                                                           l240 2518  
                                                           l209 20C0  
                                                           l241 251E  
                                                           l137 13E0  
                                                           l234 2544  
                                                           l235 254A  
                                                           l227 1E54  
                                                           l172 0D06  
                                                           l180 1CFC  
                                                           l324 1432  
                                                           l501 261C  
                                                           l165 0CEA  
                                                           l229 1E7C  
                                                           l325 142C  
                                                           l510 26CA  
                                                           l326 142E  
                                                           l351 0FF4  
                                                           l184 1D1C  
                                                           l504 260E  
                                                           l601 266A  
                                                           l194 1C0A  
                                                           l435 24A0  
                                                           l507 26C2  
                                                           l604 269C  
                                                           l372 26DA  
                                                           l188 1D9C  
                                                           l436 24B6  
                                                           l516 26D2  
                                                           l524 238E  
                                                           l381 2692  
                                                           l189 1DA0  
                                                           l437 24C2  
                                                           l541 1A9E  
                                                           l198 1C2A  
                                                           l366 2596  
                                                           l550 2438  
                                                           l375 265E  
                                                           l519 2674  
                                                           l527 25B4  
                                                           l384 267E  
                                                           l369 2688  
                                                           l378 2652  
                                                           l546 2406  
                                                           l571 1674  
                                                           l574 16EA  
                                                           l592 2600  
                                                           l913 1982  
                                                           l595 25CC  
                                                           l589 25F2  
                                                           l598 25E0  
                                                           _isr 0008  
                                                   _touchObject 1CB2  
                                                           prod 000FF3  
                                                           wreg 000FE8  
                                                  ___fltol@exp1 0042  
                                                   main@errCode 01DB  
                                                          l1200 0856  
                                                          l1211 093C  
                                                          l1203 0810  
                                                          l1212 0924  
                                                          l1209 08AC  
                                                          l1271 1058  
                                                          l4001 1BFC  
                                                          l1274 11EA  
                                                          l4011 1C62  
                                                          l4003 1BFE  
                                                          l1285 1170  
                                                          l4021 1C8C  
                                                          l4005 1C0E  
                                                          l4013 1C72  
                                                          l4101 1A14  
                                                          l1198 0A3E  
                                                          l1278 1104  
                                                          l4031 2038  
                                                          l4023 1C90  
                                                          l4015 1C78  
                                                          l4007 1C2C  
                                                          l4103 1A2A  
                                                          l4113 2614  
                                                          l4041 2064  
                                                          l4033 203A  
                                                          l4025 1CA2  
                                                          l4017 1C7C  
                                                          l4009 1C46  
                                                          l4201 2586  
                                                          l4121 2558  
                                                          l4051 20D2  
                                                          l4043 2066  
                                                          l4035 2042  
                                                          l4019 1C7E  
                                                          l4203 2588  
                                                          l4131 256A  
                                                          l4123 255C  
                                                          l4107 1A40  
                                                          l4211 25B0  
                                                          l4117 2622  
                                                          l4053 20D6  
                                                          l4045 2076  
                                                          l4037 2046  
                                                          l4029 202E  
                                                          l4061 1E0A  
                                                          l4301 0E72  
                                                          l4205 2592  
                                                          l4133 256C  
                                                          l4125 2560  
                                                          l4141 126E  
                                                          l4213 25E6  
                                                          l4221 25FE  
                                                          l4047 2094  
                                                          l4039 204C  
                                                          l4071 1E5A  
                                                          l4063 1E10  
                                                          l4311 0EC4  
                                                          l4303 0E82  
                                                          l4207 2594  
                                                          l4135 256E  
                                                          l4127 2564  
                                                          l4119 2550  
                                                          l4151 1284  
                                                          l4143 1272  
                                                          l4215 25EE  
                                                          l4223 25BA  
                                                          l3521 2252  
                                                          l4049 20C6  
                                                          l4081 24F8  
                                                          l3601 06EC  
                                                          l4065 1E36  
                                                          l4073 1E60  
                                                          l4057 1DAA  
                                                          l4321 0F40  
                                                          l4305 0E96  
                                                          l4233 2606  
                                                          l4129 2568  
                                                          l4161 12DA  
                                                          l4153 128A  
                                                          l4145 1276  
                                                          l4137 11F2  
                                                          l4241 15A8  
                                                          l4217 25F8  
                                                          l4225 25BC  
                                                          l4209 259C  
                                                          l4401 1508  
                                                          l3523 2262  
                                                          l4075 2524  
                                                          l4083 24FC  
                                                          l3611 073A  
                                                          l3603 06F4  
                                                          l4067 1E38  
                                                          l4059 1DFC  
                                                          l4331 0FD8  
                                                          l4323 0F7C  
                                                          l4307 0EB8  
                                                          l4315 0ED0  
                                                          l4171 1350  
                                                          l4163 12FC  
                                                          l4155 12A2  
                                                          l4147 1278  
                                                          l4139 126A  
                                                          l4091 19A6  
                                                          l4243 15B2  
                                                          l4251 15FC  
                                                          l4219 25FC  
                                                          l4227 25C4  
                                                          l4411 156C  
                                                          l4403 1542  
                                                          l3525 2272  
                                                          l4077 2528  
                                                          l4085 251A  
                                                          l3621 076A  
                                                          l3613 0740  
                                                          l3605 0706  
                                                          l4069 1E56  
                                                          l4333 0FE0  
                                                          l4325 0F8E  
                                                          l4309 0EBC  
                                                          l4317 0F16  
                                                          l4229 26D0  
                                                          l4181 13CE  
                                                          l4173 1372  
                                                          l4165 130E  
                                                          l4157 12A8  
                                                          l4149 1280  
                                                          l4093 19BC  
                                                          l4261 169E  
                                                          l4253 1614  
                                                          l4245 15BC  
                                                          l4237 1592  
                                                          l4413 1574  
                                                          l4405 154A  
                                                          l3543 2698  
                                                          l3519 224E  
                                                          l3535 25D2  
                                                          l4079 2546  
                                                          l3631 07BA  
                                                          l3607 0722  
                                                          l3711 1884  
                                                          l3551 26D8  
                                                          l4335 0FE4  
                                                          l4327 0F9E  
                                                          l4319 0F2C  
                                                          l4191 249E  
                                                          l4183 13DA  
                                                          l4167 1330  
                                                          l4159 12C8  
                                                          l4175 138C  
                                                          l4095 19D2  
                                                          l4087 198C  
                                                          l4263 16A8  
                                                          l4255 161C  
                                                          l4239 15A2  
                                                          l4415 157A  
                                                          l4407 154E  
                                                          l3529 2282  
                                                          l3537 25D6  
                                                          l3545 2664  
                                                          l3641 080E  
                                                          l3633 07CA  
                                                          l3625 077E  
                                                          l3609 0732  
                                                          l3617 0754  
                                                          l3721 18DC  
                                                          l3713 18B4  
                                                          l3705 1854  
                                                          l3553 268E  
                                                          l4337 0FE8  
                                                          l4329 0FD0  
                                                          l4193 24B4  
                                                          l3801 1FC0  
                                                          l4185 13DE  
                                                          l4177 13A2  
                                                          l4169 1342  
                                                          l3561 23F8  
                                                          l4097 19E8  
                                                          l4089 1990  
                                                          l4257 166E  
                                                          l4249 15C6  
                                                          l4417 157E  
                                                          l4409 1552  
                                                          l4361 13E4  
                                                          l3539 25DA  
                                                          l3651 086C  
                                                          l3643 081C  
                                                          l3635 07D2  
                                                          l3627 079A  
                                                          l3619 076A  
                                                          l3571 0632  
                                                          l3731 190E  
                                                          l3715 18B6  
                                                          l3707 186E  
                                                          l3547 2684  
                                                          l3555 264C  
                                                          l4339 0FF0  
                                                          l4291 0DC6  
                                                          l4283 0D6C  
                                                          l4195 2576  
                                                          l4347 26C0  
                                                          l3811 21DA  
                                                          l4179 13B6  
                                                          l4355 2338  
                                                          l3563 241A  
                                                          l4099 19FE  
                                                          l4259 1696  
                                                          l4267 16B4  
                                                          l4419 1582  
                                                          l4371 13F6  
                                                          l4363 13E4  
                                                          l3901 0BDA  
                                                          l3653 0886  
                                                          l3661 08BE  
                                                          l3645 0840  
                                                          l3637 07E8  
                                                          l3629 07AA  
                                                          l3581 0672  
                                                          l3573 0634  
                                                          l3741 194A  
                                                          l3717 18C6  
                                                          l3549 2658  
                                                          l3557 267A  
                                                          l4293 0DDA  
                                                          l4285 0D78  
                                                          l4197 257E  
                                                          l4189 248C  
                                                          l4277 2670  
                                                          l3813 21DE  
                                                          l3821 220E  
                                                          l3805 1FF0  
                                                          l4357 2378  
                                                          l4349 2334  
                                                          l3565 2420  
                                                          l4381 1436  
                                                          l4373 13FA  
                                                          l4365 13EA  
                                                          l3911 0C3A  
                                                          l3663 08D2  
                                                          l3655 088C  
                                                          l3647 0842  
                                                          l3639 07FC  
                                                          l3591 06AC  
                                                          l3575 064A  
                                                          l3583 067A  
                                                          l3567 0614  
                                                          l3743 1960  
                                                          l3727 18F8  
                                                          l3719 18CA  
                                                          l3751 1010  
                                                          l4295 0E14  
                                                          l4287 0D7C  
                                                          l4199 2584  
                                                          l4279 26C8  
                                                          l3815 21EE  
                                                          l3831 217A  
                                                          l4359 237A  
                                                          l3559 23F0  
                                                          l4391 1480  
                                                          l4383 1450  
                                                          l4375 13FE  
                                                          l4367 13EE  
                                                          l3921 0C9C  
                                                          l3913 0C60  
                                                          l3905 0C0C  
                                                          l3673 0952  
                                                          l3681 099E  
                                                          l3665 08D6  
                                                          l3657 0898  
                                                          l3649 0852  
                                                          l3593 06AE  
                                                          l3585 068C  
                                                          l3577 065E  
                                                          l3569 0620  
                                                          l3745 1970  
                                                          l3737 1928  
                                                          l3729 1904  
                                                          l3761 109A  
                                                          l3753 1022  
                                                          l4297 0E24  
                                                          l4289 0DB6  
                                                          l3817 21FE  
                                                          l3833 218A  
                                                          l4393 14A0  
                                                          l4385 145C  
                                                          l4377 1412  
                                                          l4369 13F2  
                                                          l3931 0D0A  
                                                          l3915 0C6A  
                                                          l3907 0C22  
                                                          l3851 0A80  
                                                          l3843 0A46  
                                                          l3691 0A16  
                                                          l3683 09BE  
                                                          l3675 095E  
                                                          l3667 08E8  
                                                          l3659 08AA  
                                                          l3595 06C4  
                                                          l3587 0694  
                                                          l3579 066E  
                                                          l3739 1936  
                                                          l3771 10FA  
                                                          l3763 10A4  
                                                          l3755 106A  
                                                          l4299 0E38  
                                                          l3827 2166  
                                                          l4395 14BE  
                                                          l4387 146E  
                                                          l4379 1426  
                                                          l3941 0D62  
                                                          l3925 0CCE  
                                                          l3917 0C80  
                                                          l3909 0C24  
                                                          l3933 0D24  
                                                          l3861 0ACE  
                                                          l3853 0AAC  
                                                          l3845 0A60  
                                                          l3693 0A28  
                                                          l3685 09D4  
                                                          l3677 0970  
                                                          l3669 091A  
                                                          l3597 06D8  
                                                          l3589 069A  
                                                          l3781 1186  
                                                          l3773 113C  
                                                          l3765 10B2  
                                                          l3757 1086  
                                                          l3749 0FFC  
                                                          l3829 216A  
                                                          l3837 219A  
                                                          l4661 15DC  
                                                          l4397 14C8  
                                                          l4389 147E  
                                                          l3935 0D3A  
                                                          l3927 0CE4  
                                                          l3919 0C86  
                                                          l3871 0B1C  
                                                          l3863 0AFA  
                                                          l3855 0AB6  
                                                          l3847 0A78  
                                                          l3695 0A2E  
                                                          l3687 09F4  
                                                          l3679 099A  
                                                          l3599 06E8  
                                                          l3791 11D8  
                                                          l3783 118C  
                                                          l3775 114A  
                                                          l3767 10EA  
                                                          l3951 1CC8  
                                                          l4671 2224  
                                                          l4663 16CA  
                                                          l4399 14F0  
                                                          l3937 0D52  
                                                          l3929 0CEA  
                                                          l3881 0B34  
                                                          l3873 0B22  
                                                          l3865 0B04  
                                                          l3857 0ABE  
                                                          l3697 0A32  
                                                          l3689 0A10  
                                                          l3785 11B0  
                                                          l3777 115E  
                                                          l3769 10EE  
                                                          l3961 1CF0  
                                                          l3953 1CCC  
                                                          l3945 1CB4  
                                                          l4673 0EEE  
                                                          l4665 1A56  
                                                          l4675 2298  
                                                          l3939 0D5E  
                                                          l3891 0B78  
                                                          l3883 0B3A  
                                                          l3875 0B26  
                                                          l3867 0B0C  
                                                          l3859 0ACA  
                                                          l3787 11C4  
                                                          l3779 1184  
                                                          l3963 1D00  
                                                          l3971 1D64  
                                                          l3955 1CCE  
                                                          l3947 1CBE  
                                                          l4667 2006  
                                                          l3795 1F5A  
                                                          l3893 0B9E  
                                                          l3885 0B52  
                                                          l3877 0B28  
                                                          l3869 0B18  
                                                          l3789 11D6  
                                                          l3981 1D82  
                                                          l3973 1D6A  
                                                          l3965 1D1E  
                                                          l3957 1CD6  
                                                          l3949 1CC0  
                                                          l4669 21B0  
                                                          l3797 1F5E  
                                                          l3895 0BA8  
                                                          l3887 0B56  
                                                          l3879 0B30  
                                                          l3983 1D94  
                                                          l3975 1D6E  
                                                          l3959 1CEE  
                                                          l3967 1D38  
                                                          l3991 1BCE  
                                                          l3799 1F8C  
                                                          l3897 0BBE  
                                                          l3889 0B62  
                                                          l3977 1D70  
                                                          l3969 1D54  
                                                          l3993 1BD6  
                                                          l3899 0BC4  
                                                          l3979 1D7E  
                                                          l3995 1BDA  
                                                          l3987 1BC2  
                                                          ?_isr 0001  
                                                          l3997 1BDC  
                                                          l3989 1BCC  
                                                          l3999 1BE4  
                                                          u3000 18F2  
                                                          u3001 18EC  
                                                          u3010 1922  
                                                          u3011 191C  
                                                          u3020 194A  
                                                          u3100 1170  
                                                          u3021 1944  
                                                          u3101 116A  
                                                          u3030 195E  
                                                          u3110 1182  
                                                          u3031 1958  
                                                          u3111 117C  
                                                          u3200 0A5E  
                                                          u3120 11C2  
                                                          u3040 100E  
                                                          _LATD 000F8C  
                                                          u3201 0A58  
                                                          u3121 11BC  
                                                          u3041 1008  
                                                          u3210 0A78  
                                                          u3130 11D4  
                                                          u3050 1020  
                                                          u3211 0A72  
                                                          u3131 11CE  
                                                          u3051 101A  
                                                          u3300 0C20  
                                                          u3220 0AAA  
                                                          u3060 1084  
                                                          u3301 0C1A  
                                                          u3221 0AA4  
                                                          u3061 107E  
                                                          u3310 0C38  
                                                          u3230 0AF8  
                                                          u3070 10E4  
                                                          u3311 0C32  
                                                          u3231 0AF2  
                                                          u3071 10DE  
                                                          u3400 0D4C  
                                                          u3320 0C5E  
                                                          u3240 0B50  
                                                          u3080 1136  
                                                          u3401 0D46  
                                                          u3321 0C58  
                                                          u3241 0B4A  
                                                          u3081 1130  
                                                          u3145 21E8  
                                                          u3330 0C7E  
                                                          u3250 0B76  
                                                          u3090 115C  
                                                          u3410 1CEC  
                                                          u3146 21EA  
                                                          u3331 0C78  
                                                          u3251 0B70  
                                                          u3091 1156  
                                                          u3411 1CE6  
                                                          u3155 21F8  
                                                          u3340 0C9A  
                                                          u3260 0B9C  
                                                          u3420 1D1A  
                                                          u3500 1C60  
                                                          u3156 21FA  
                                                          u3341 0C94  
                                                          u3261 0B96  
                                                          u3421 1D14  
                                                          u3501 1C5A  
                                                          u3165 2208  
                                                          u3350 0CC8  
                                                          u3270 0BBC  
                                                          u3430 1D38  
                                                          u3510 1C72  
                                                          u3166 220A  
                                                          u3351 0CC2  
                                                          u3271 0BB6  
                                                          u3431 1D32  
                                                          u3511 1C6C  
                                                          u3175 2174  
                                                          u3360 0CE2  
                                                          u3280 0BD8  
                                                          u3600 2516  
                                                          u2800 0720  
                                                          u3440 1D52  
                                                          u3520 1CA0  
                                                          u3176 2176  
                                                          u2720 2418  
                                                          u2705 226C  
                                                          u3361 0CDC  
                                                          u3281 0BD2  
                                                          u3601 2510  
                                                          u2801 071A  
                                                          u3441 1D4C  
                                                          u3521 1C9A  
                                                          u3185 2184  
                                                          u2721 2412  
                                                          u2706 226E  
                                                          u3530 2062  
                                                          u3370 0D04  
                                                          u3290 0C06  
                                                          u2810 0768  
                                                          u3450 1D64  
                                                          u3186 2186  
                                                          u3610 12A0  
                                                          u2730 2436  
                                                          u2715 227C  
                                                          u3531 205C  
                                                          u3371 0CFE  
                                                          u3291 0C00  
                                                          u2811 0762  
                                                          u3451 1D5E  
                                                          u3195 2194  
                                                          u3611 129A  
                                                          u2731 2430  
                                                          u2716 227E  
                                                          u3540 2090  
                                                          u3380 0D24  
                                                          u2900 0918  
                                                          u2820 07E6  
                                                          u2740 0630  
                                                          u3460 1D92  
                                                          u3196 2196  
                                                          u3700 13A0  
                                                          u3620 12C6  
                                                          u3541 208A  
                                                          u3381 0D1E  
                                                          u2901 0912  
                                                          u2821 07E0  
                                                          u2741 062A  
                                                          u3461 1D8C  
                                                          u3701 139A  
                                                          u3621 12C0  
                                                          u3550 20AE  
                                                          u3390 0D38  
                                                          u2910 0936  
                                                          u2830 080C  
                                                          u2750 0648  
                                                          u3470 1BFA  
                                                          u3710 13B4  
                                                          u3630 12DA  
                                                          u3551 20A8  
                                                          u3391 0D32  
                                                          u2911 0930  
                                                          u2831 0806  
                                                          u2751 0642  
                                                          u3471 1BF4  
                                                          u3711 13AE  
                                                          u3631 12D4  
                                                          u3560 20C0  
                                                          u2920 0950  
                                                          u2840 083E  
                                                          u2760 065C  
                                                          u3480 1C28  
                                                          u3720 13C8  
                                                          u3640 12FA  
                                                          u3800 144E  
                                                          u3561 20BA  
                                                          u2921 094A  
                                                          u2841 0838  
                                                          u2761 0656  
                                                          u3481 1C22  
                                                          u3721 13C2  
                                                          u3641 12F4  
                                                          u3801 1448  
                                                          u2930 096E  
                                                          u2850 086A  
                                                          u2770 06AA  
                                                          u3570 1E52  
                                                          u3490 1C46  
                                                          u3730 249C  
                                                          u3650 130E  
                                                          u3810 149E  
                                                          u2931 0968  
                                                          u2851 0864  
                                                          u2771 06A4  
                                                          u3571 1E4C  
                                                          u3491 1C40  
                                                          u3731 2496  
                                                          u3651 1308  
                                                          u3811 1498  
                                                          u2940 09BC  
                                                          u2860 0884  
                                                          u2780 06C2  
                                                          u3580 1E7A  
                                                          u3740 24B2  
                                                          u3660 132E  
                                                          u3820 14BE  
                                                          u2941 09B6  
                                                          u2861 087E  
                                                          u2781 06BC  
                                                          u3581 1E74  
                                                          u3741 24AC  
                                                          u3661 1328  
                                                          u3821 14B8  
                                                          u3590 2542  
                                                          u2950 09F2  
                                                          u2870 08A8  
                                                          u2790 06D6  
                                                          u3670 1342  
                                                          u3750 1612  
                                                          u3830 1506  
                                                          u2695 225C  
                                                          u3591 253C  
                                                          u2951 09EC  
                                                          u2871 08A2  
                                                          u2791 06D0  
                                                          u3671 133C  
                                                          u3751 160C  
                                                          u3831 1500  
                                                          u2696 225E  
                                                          u2960 0A26  
                                                          u2880 08D0  
                                                          u3760 0F2A  
                                                          u3680 136A  
                                                          u3840 156A  
                                                          u2961 0A20  
                                                          u2881 08CA  
                                                          u3761 0F24  
                                                          u3681 1364  
                                                          u3841 1564  
                                                          u2890 08E6  
                                                          u2970 186C  
                                                          u3770 0FCE  
                                                          u3690 138C  
                                                   main@newData 01DC  
                                                          u2891 08E0  
                                                          u2971 1866  
                                                          u3771 0FC8  
                                                          u3691 1386  
                                                          u2980 18A8  
                                                          u3780 238C  
                                                          u3781 2386  
                                                          u2990 18DA  
                                                          u3790 1424  
                                                          u2991 18D4  
                                                          u3791 141E  
                                                          u2985 189C  
                                                          i2l73 26E2  
                                                          i2l67 2638  
                                                          i2l94 232C  
                                                          _TMR0 000FD6  
                                                          _TMR2 000FCC  
                                           __end_ofi2_storeData 1852  
                                                          _main 13E4  
                                                          _maxX 006B  
                                                          _maxY 0069  
                                          __end_ofi2_printError 1BC0  
                                                          fsr2h 000FDA  
                                                          indf2 000FDF  
                                                          fsr1l 000FE1  
                                                          fsr2l 000FD9  
                                                          btemp 006E  
                                                          prodh 000FF4  
                                                          prodl 000FF3  
                                                          start 019C  
                                               ___fldiv@new_exp 0031  
                                                  ___param_bank 000000  
                                               ??_whatsTM0Limit 0001  
                                                         ??_isr 000B  
                                                  ?_executeData 0001  
                                               executeData@data 01D7  
                                                 ___fltol@sign1 0041  
                                                         ?_main 0001  
                                               __end_of___fldiv 0A44  
                                               __end_of___fltol 1988  
                                                         i2l244 24EC  
                                                         i2l245 24EE  
                                                         i2l513 26F2  
                                                         i2l610 26A6  
                                                         i2l460 0184  
                                                         i2l541 1BBA  
                                                         i2l613 2646  
                                                         i2l550 2486  
                                                         i2l390 26B0  
                                                         i2l607 26EA  
                                                         i2l546 2454  
                                                         i2l387 26BA  
                                                         i2l571 17D6  
                                                         i2l574 184C  
                                          rotateObj@rotSequence 0080  
                                                         _SPBRG 000FAF  
                                                         _TRISA 000F92  
                                                         _TRISB 000F93  
                                                         _TRISC 000F94  
                                                         _TRISD 000F95  
                                                         _TXREG 000FAD  
                                               __end_of_getData 2620  
                                               i2storeData@data 000A  
                                               __end_of_initADC 259A  
                                                  ?_newSequence 0001  
                                               __end_of_liftArm 20DC  
                                               __end_of_readSeq 26CE  
                                                  stepMade@temp 0014  
                                               __end_of_setStep 202C  
                                                         tablat 000FF5  
                                                i2uartTx@length 0003  
                                               __end_of_stopADC 26DE  
                                                         ttemp5 006F  
                                                         ttemp6 0072  
                                                         ttemp7 0076  
                                                         status 000FD8  
                                                         wtemp8 006F  
                                              __end_ofi2_uartTx 248A  
                                                 ?_increaseStep 0001  
                                               __initialization 20DC  
                                        __size_of_initPinMotors 0026  
                                                  __end_of_main 158E  
                                      resetPosition@keepMovingX 0016  
                                      resetPosition@keepMovingY 0017  
                                      resetPosition@keepMovingZ 0018  
                                                        ??_main 01D9  
                                                 __activetblptr 000002  
                                                   i2_storeData 16F0  
                                          __size_of_enableMotor 0074  
                                                   isr@tm0Count 0065  
                                                  ?_setThermRel 0001  
                                                        _ADRESH 000FC4  
                                                        _ADRESL 000FC3  
                                                  ?_moveToPoint 0016  
                                                        i2l2201 26E8  
                                                        i2l2203 26A2  
                                                        i2l3021 22C6  
                                                        i2l3023 22D6  
                                                        i2l3025 22E6  
                                                        i2l3041 1AD8  
                                                        i2l3019 22C2  
                                                        i2l3051 1B46  
                                                        i2l3043 1AEE  
                                                        i2l3035 1AA8  
                                                        i2l3029 22F6  
                                                        i2l3045 1B04  
                                                        i2l3037 1AAC  
                                                        i2l3133 24C8  
                                                        i2l3047 1B1A  
                                                        i2l3039 1AC2  
                                                        i2l3055 1B5C  
                                                        i2l3135 24E6  
                                                        i2l2191 26B6  
                                                        i2l3311 16F4  
                                                        i2l3049 1B30  
                                                        i2l2193 26AC  
                                                        i2l3313 1704  
                                                        i2l2195 26F0  
                                                        i2l3331 17D0  
                                                        i2l3315 170A  
                                                        i2l3323 1728  
                                                        i2l3411 001C  
                                                        i2l3309 263E  
                                                        i2l3333 17F8  
                                                        i2l3341 1816  
                                                        i2l3317 1714  
                                                        i2l3325 175E  
                                                        i2l3421 0050  
                                                        i2l3413 002E  
                                                        i2l3335 1800  
                                                        i2l3327 1776  
                                                        i2l3319 171E  
                                                        i2l3431 0086  
                                                        i2l3423 0054  
                                                        i2l3415 0030  
                                                        i2l3337 180A  
                                                        i2l3329 177E  
                                                        i2l3441 00C2  
                                                        i2l3433 008A  
                                                        i2l3417 0032  
                                                        i2l3425 0058  
                                                        i2l3451 00F2  
                                                        i2l3443 00C4  
                                                        i2l3435 009E  
                                                        i2l3427 006C  
                                                        i2l3419 004E  
                                                        i2l1941 26E0  
                                                        i2l3461 0146  
                                                        i2l3445 00D8  
                                                        i2l3437 00A0  
                                                        i2l3453 00F8  
                                                        i2l3429 006E  
                                                        i2l3463 0160  
                                                        i2l3455 010C  
                                                        i2l3447 00EA  
                                                        i2l3439 00A4  
                                                        i2l1937 2630  
                                                        i2l3457 0114  
                                                        i2l3465 0164  
                                                        i2l3449 00EE  
                                                        i2l2691 2446  
                                                        i2l3467 0178  
                                                        i2l3459 013A  
                                                        i2l2693 2468  
                                                        i2l3469 017E  
                                                        i2l2695 246E  
                                                        i2l2689 243E  
                                                        i2l4681 1B72  
                                                        i2l4683 230C  
                                                        i2l4677 173E  
                                                        i2l4679 182C  
                                                        _RCREG1 000FAE  
                                                  ?_setTouchRel 0001  
                                                 setDecay@decay 0015  
                                              __end_of_abortAll 24F6  
                                              __end_of___xxtofl 11F0  
                                                 setDecay@motor 0012  
                                              __end_of_clearTM0 262E  
                                              _errString_PointZ 0100  
                                                ??_increaseStep 0001  
                                        __size_ofi2_enableMotor 0074  
                                              __end_of_maxFeedX 0611  
                                              __end_of_maxFeedY 0610  
                                                     ??___fldiv 0028  
                                                     ??___fltol 003D  
                                              __end_of_tim0Init 25F6  
                                              __end_of_tim1Init 2604  
                                              __end_of_tim2Init 25D0  
                                                        clear_0 2142  
                                                        clear_1 214E  
                                                     ??_getData 0014  
                                                        _uartTx 23EE  
                                              __end_of_setDecay 21D6  
                                                     ??_initADC 0012  
                                                     ??_liftArm 0016  
                                                     ??_readSeq 0012  
                                                  __pdataCOMRAM 0069  
                                         __end_of_resetPosition 13E4  
                                                  __mediumconst 0000  
                                                     ??_setStep 0013  
                                                        tblptrh 000FF7  
                                                        tblptrl 000FF6  
                                                        tblptru 000FF8  
                                                  ?_returnTherm 0012  
                                              __end_of_startADC 268C  
                                              __end_of_stepMade 25E4  
                                                 _initPinMotors 254E  
                                                  ?_returnTouch 0012  
                                                     ??_stopADC 0012  
                                         __size_ofi2_printError 011C  
                                              __end_of_writeTM0 263C  
                                     __size_of_resetNewSequence 000A  
                                                  ___xxtofl@arg 001C  
                                                  ___xxtofl@exp 001B  
                                                  ___xxtofl@val 0012  
                                                    __accesstop 0080  
                                       __end_of__initialization 2154  
                                                  _dataSequence 00DB  
                                                 ___rparam_used 000001  
                                                    ___fltol@f1 0039  
                                                  ?_stepCounter 0012  
                                                   i2uartTx@ptr 0001  
                                                __pcstackCOMRAM 0001  
                                                  __newSequence 0061  
                                                  __pidataBANK0 2392  
                                                  __pidataBANK1 1E80  
                                               isr@single_cycle 0053  
                                          __size_of_executeData 028E  
                                                 ?_setDirection 0012  
                                                  i2_printError 1AA4  
                                                  ?_touchObject 0001  
                                                _errString_ZEND 015E  
                                                _errString_Feed 00A5  
                                                 i2_enableMotor 22BE  
                                                ?_initPinMotors 0001  
                                                     ?i2_uartTx 0001  
                                                    __pbssBANK0 00DB  
                                          __size_of_newSequence 0008  
                                                    _feeder1Pos 060D  
                                                    _feeder2Pos 060B  
                                                    _feeder3Pos 0609  
                                       __size_of_getNewSequence 000E  
                                                    _fatalError 26EE  
                                            __size_of_reduceSeq 0008  
                                            __size_of_retPeriod 000E  
                                                _touch_pressure 0607  
                                            __size_of_shiftData 0060  
                                            __size_of_resetStep 000A  
                                                       _ADC_res 0055  
                                                       ?_uartTx 0012  
                                                ??_setDirection 0013  
                                                     ?_abortAll 0001  
                                                ?i2_enableMotor 0001  
                                                     ?___xxtofl 0012  
                                          __end_of_increaseStep 26EE  
                                                     ?_clearTM0 0001  
                                                    ??i2_uartTx 0004  
                                            __size_of_rotateObj 00DC  
                                             _errString_Command 00C3  
                                            __size_of_usartInit 001E  
                                        __size_of_interruptInit 003C  
                                          __size_of_setThermRel 000A  
                                            __size_of_storeData 0162  
                                                     ?_tim0Init 0001  
                                                     ?_tim1Init 0001  
                                                     ?_tim2Init 0012  
                                          __size_of_moveToPoint 0326  
                                          storeData@receivedMex 0045  
                                               _newSequenceData 00EF  
                                                     ?_setDecay 0012  
                                          __size_of_setTouchRel 000A  
                                                   setStep@step 0015  
                                                       __Hparam 0000  
                                                       __Lparam 0000  
                                        __end_of_touch_pressure 0609  
                                                       ___fldiv 0612  
                                                     ?_startADC 0001  
                                                     ?_stepMade 0012  
                                                       ___fltol 1852  
                                                  __psmallconst 0600  
                                                       __pcinit 20DC  
                                         __end_of_whatsTM0Limit 26E6  
                                                       _getData 2612  
                                                       __ramtop 0600  
                                                     ?_writeTM0 0001  
                                                    _pickObject 2522  
                                                       __ptext0 13E4  
                                                       __ptext1 259A  
                                                       __ptext2 25B8  
                                                       __ptext3 25F6  
                                                       __ptext4 25E4  
                                                       __ptext5 158E  
                                                       __ptext6 1988  
                                                       __ptext7 23EE  
                                                       __ptext8 2332  
                                                       __ptext9 11F0  
                                               __size_of_uartTx 004E  
                                                     _T0CONbits 000FD5  
                                                       _initADC 2574  
                                                     _T1CONbits 000FCD  
                                               ??_initPinMotors 0012  
                                                       _liftArm 202C  
                                                     _T2CONbits 000FCA  
                                                    ??_abortAll 0008  
                                                       _readSeq 26C6  
                                                  __size_of_isr 0194  
                                                    ??___xxtofl 0016  
                                                  ?i2_storeData 0001  
                                                    ??_clearTM0 0012  
                                                       _setStep 1F56  
                                                       _pwmStep 005E  
                                                       _stopADC 26D6  
                                             __end_of_reduceSeq 26C6  
                                             __end_of_retPeriod 264A  
                                                    _releaseObj 24F6  
                                          __size_of_returnTherm 000C  
                                          end_of_initialization 2154  
                                          __size_of_returnTouch 000C  
                                              _resetNewSequence 266E  
                                              rotateObj@totStep 00FB  
                                             __end_of_shiftData 2392  
                                                       isr@temp 0011  
                                             __end_of_resetStep 26A0  
                                                    ??_tim0Init 0012  
                                                 __Lmediumconst 0000  
                                                    ??_tim1Init 0012  
                                                    ??_tim2Init 0014  
                                              storeData@command 005F  
                                              storeData@counter 0060  
                                                    ??_setDecay 0013  
                                              enableMotor@motor 0012  
                                                    _resetTherm 2678  
                                                    _resetTouch 268C  
                                                       uartTx@i 0015  
                                                   ?_fatalError 0001  
                                                     _RCSTAbits 000FAB  
                                                       postdec1 000FE5  
                                             __end_of_rotateObj 1E80  
                                                       postinc0 000FEE  
                                                       postinc1 000FE6  
                                                       postinc2 000FDE  
                                                    ??_startADC 0012  
                                                    ??_stepMade 0014  
                                          __size_of_stepCounter 000C  
                                                 _interruptInit 248A  
                                             __end_of_usartInit 25B8  
                                             __end_of_storeData 16F0  
                                    __end_ofrotateObj@stepAngle 0605  
                                                    ??_writeTM0 0001  
                                               ??i2_enableMotor 0002  
                                                     _PORTDbits 000F83  
                                                    _printError 1988  
                                                     _PORTEbits 000F84  
                                                 ??_enableMotor 0013  
                                           i2printError@errCode 0007  
                                                    _toggleStep 26A0  
                                                 ___xxtofl@sign 001A  
                                                     _TRISCbits 000F94  
                                                     _TRISDbits 000F95  
                                                     _TRISEbits 000F96  
                                                   ___fldiv@grs 0033  
                                                   ___fldiv@rem 002C  
                                          __size_of_touchObject 00F2  
                                                    _stepToggle 005D  
                                                    _touchTherm 1BC0  
                                          __end_of_setDirection 22BE  
                                                     _TXSTAbits 000FAC  
                                                _getNewSequence 2604  
                                                ?_interruptInit 0001  
                                                 __pidataCOMRAM 26F6  
                                         __size_of_increaseStep 0008  
                                                   ?_pickObject 0001  
                                                   __fatalError 0062  
                                                __end_of_uartTx 243C  
                                                 moveToPoint@x1 0016  
                                                 moveToPoint@x2 001A  
                                                 moveToPoint@y1 0018  
                                                 moveToPoint@y2 001C  
                                           start_initialization 20DC  
                                                     i2uartTx@i 0004  
                                                   __end_of_isr 019C  
                                           __size_of_fatalError 0008  
                                           __end_of_enableMotor 224A  
                                                   ?_releaseObj 0001  
                                             __size_ofi2_uartTx 004E  
                                        __end_of_getNewSequence 2612  
                                               _errString_Fatal 01AF  
                                               _errString_Bound 0084  
                                                   ?_resetTherm 0001  
                                               _errString_Reset 0187  
                                                   ?_resetTouch 0001  
                                               _errString_Point 0135  
                                                  _increaseStep 26E6  
                                        __size_of_resetPosition 01F4  
                                                 ??_executeData 0043  
                                                   __pdataBANK0 0080  
                                                   __pdataBANK1 0100  
                                           i2enableMotor@enable 0004  
                                                   _dataCounter 0063  
                                                      ??_uartTx 0015  
                                        moveToPoint@keepMovingX 0023  
                                        moveToPoint@keepMovingY 0020  
                                                   ?_printError 0001  
                                                     ___fldiv@a 0024  
                                                     ___fldiv@b 0020  
                                                _therm_pressure 0605  
                                                   ?_toggleStep 0001  
                                                   __pbssCOMRAM 0045  
                                                 __pcstackBANK0 00F7  
                                                 __pcstackBANK1 01D6  
                                                 ??_newSequence 0012  
                                             __size_of_abortAll 0030  
                                             __size_of___xxtofl 01F8  
                                          __size_ofi2_storeData 0162  
                                             __size_of_clearTM0 000E  
                                               ?_getNewSequence 0012  
                                                   ?_touchTherm 0001  
                                           __size_of_pickObject 002C  
                                            executeData@errCode 01D6  
                                             __size_of_tim0Init 0012  
                                             __size_of_tim1Init 000E  
                                             __size_of_tim2Init 0018  
                                               ??_interruptInit 0012  
                                             __size_of_setDecay 0074  
                                                     __pintcode 0008  
                                                      ?___fldiv 0020  
                                                      ?___fltol 0039  
                                      __end_of_resetNewSequence 2678  
                                           __size_of_releaseObj 002C  
                                                 storeData@data 001B  
                                                      ?_getData 0012  
                                             __size_of_startADC 000A  
                                             __size_of_stepMade 0014  
                                        __end_of_therm_pressure 0607  
                                                      ?_initADC 0001  
                                                   __smallconst 0600  
                                                      ?_liftArm 0001  
                                                   _enableMotor 21D6  
                                                      ?_readSeq 0001  
                                             __size_of_writeTM0 000E  
                                           __end_of_executeData 0FF8  
                                                    shiftData@i 0014  
                                                      ?_setStep 0012  
                                           __size_of_resetTherm 000A  
                                                     _newFeeder 0057  
                                                 _resetPosition 11F0  
                                           __size_of_resetTouch 000A  
                                                 ??_setThermRel 0001  
                                                      ?_stopADC 0001  
                                         __size_of_setDirection 0074  
                                                 ??_moveToPoint 001E  
                                                 ??_setTouchRel 0001  
                                           __end_of_newSequence 26D6  
                                                     _reduceSeq 26BE  
                                                      _LATAbits 000F89  
                                                      _LATBbits 000F8A  
                                                     _retPeriod 263C  
                                                      _LATCbits 000F8B  
                                                      _LATDbits 000F8C  
                                           __size_of_printError 011C  
                                                      _IPR1bits 000F9F  
                                                      _PIE1bits 000F9D  
                                                     _shiftData 2332  
                                                      i2u230_45 22E0  
                                                      i2u230_46 22E2  
                                                      i2u231_45 22F0  
                                                      i2u231_46 22F2  
                                                      i2u250_40 1774  
                                                      i2u250_41 176E  
                                                      i2u180_40 2466  
                                                      i2u260_40 0084  
                                                      i2u180_41 2460  
                                                      i2u260_41 007E  
                                                     _resetStep 2696  
                                                      i2u181_40 2484  
                                                      i2u261_40 009C  
                                                      i2u181_41 247E  
                                                      i2u261_41 0096  
                                                      i2u229_45 22D0  
                                                      i2u229_46 22D2  
                                                      i2u262_40 00C0  
                                                      i2u262_41 00BA  
                                                      i2u263_40 00D6  
                                                      i2u263_41 00D0  
                                                      i2u264_40 00E8  
                                                      i2u264_41 00E2  
                                                      i2u265_40 010A  
                                                      i2u257_40 002C  
                                                      i2u265_41 0104  
                                                      i2u257_41 0026  
                                                      _PIR1bits 000F9E  
                                                      i2u266_40 0138  
                                                      i2u258_40 004C  
                                                      i2u266_41 0132  
                                                      i2u258_41 0046  
                                                      i2u267_40 015E  
                                                      i2u259_40 006A  
                                                      i2u267_41 0158  
                                                      i2u259_41 0064  
                                                      i2u268_40 0176  
                                                      i2u268_41 0170  
                                           __size_of_toggleStep 000A  
                                                  ??_fatalError 0001  
                                                     _posVector 004E  
                                                      _RCONbits 000FD0  
                                                     _therm_rel 0066  
                                                     _pwmPeriod 0051  
                                             setDirection@motor 0012  
                                                     _rotateObj 1DA4  
                                                    _ADCON0bits 000FC2  
                                                    _ADCON1bits 000FC1  
                                           __size_of_touchTherm 00F2  
                                                  _setDirection 224A  
                                                     _usartInit 259A  
                                                     _touch_rel 0067  
                                            __end_of_feeder1Pos 060F  
                                            __end_of_feeder2Pos 060D  
                                            __end_of_feeder3Pos 060B  
                                                     _storeData 158E  
                                                ?_resetPosition 0001  
                                         __end_of_initPinMotors 2574  
                                                 ??_returnTherm 0014  
                                                 ??_returnTouch 0014  
                                                      i2_uartTx 243C  
                                                     copy_data0 20F0  
                                                     copy_data1 2110  
                                                     copy_data2 2130  
                                            __end_of_fatalError 26F6  
                                            rotateObj@stepAngle 0601  
                                                    ?_reduceSeq 0001  
                                                    ?_retPeriod 0001  
                                                  setStep@motor 0012  
                                                    rotateObj@i 00FD  
                                        __size_of_whatsTM0Limit 0008  
                                           __end_of_setThermRel 26BE  
                                           __end_of_moveToPoint 0D6A  
                                             printError@errCode 0018  
                                                    ?_shiftData 0001  
                                                 ??_stepCounter 0014  
                                                      __Hrparam 0000  
                                                    ?_resetStep 0001  
                                           __end_of_setTouchRel 26B4  
                                                      __Lrparam 0000  
                                            i2enableMotor@motor 0001  
                                              __size_of___fldiv 0432  
                                              __size_of___fltol 0136  
                                                   _executeData 0D6A  
                                                  ??_pickObject 0015  
                                                    ?_rotateObj 0001  
                                      moveToPoint@MOT1Direction 0021  
                                                 ?i2_printError 0001  
                                              __size_of_getData 000E  
                                         __end_ofi2_enableMotor 2332  
                                      moveToPoint@MOT2Direction 0022  
                                                 ??_touchObject 0016  
                                                      _abortAll 24C6  
                                                    ?_usartInit 0001  
                                              __size_of_initADC 0026  
                                                      ___xxtofl 0FF8  
                                              __size_of_liftArm 00B0  
                                                    ?_storeData 0001  
                                                      _clearTM0 2620  
                                              __size_of_readSeq 0008  
                                            storeData@mexLength 006D  
                                                      _tm0Error 005B  
                                                      _tm0Limit 0068  
                                              __size_of_setStep 00D6  
                                                   _newSequence 26CE  
                                                      __ptext10 1F56  
                                                      __ptext11 2162  
                                                      __ptext20 2604  
                                                      __ptext12 21D6  
                                                      __ptext21 0D6A  
                                                      __ptext13 266E  
                                                      __ptext30 1DA4  
                                                      __ptext22 1BC0  
                                                      __ptext14 26BE  
                                                      __ptext31 0FF8  
                                                      __ptext23 264A  
                                                      __ptext15 26C6  
                                                      __ptext40 224A  
                                                      __ptext32 1852  
                                                      __ptext24 2678  
                                                      __ptext16 26CE  
                                                      __ptext41 2696  
                                                      __ptext33 0612  
                                                      __ptext25 1CB2  
                                                      __ptext17 248A  
                                                      __ptext50 26B4  
                                                      __ptext42 2612  
                                                      __ptext34 24F6  
                                                      __ptext26 26D6  
                                                      __ptext18 254E  
                                                      __ptext51 263C  
                                                      __ptext43 2620  
                                                      __ptext35 2522  
                                                      __ptext27 2682  
                                                      __ptext19 2574  
                                                      __ptext52 26E6  
                                                      __ptext36 0A44  
                                                      __ptext28 2656  
                                                      __ptext53 26EE  
                                                      __ptext45 16F0  
                                                      __ptext37 2662  
                                                      __ptext29 268C  
                                                      __ptext54 24C6  
                                                      __ptext46 262E  
                                                      __ptext38 202C  
                                                      __ptext55 1AA4  
                                                      __ptext47 26DE  
                                                      __ptext39 25D0  
                                                      __ptext56 243C  
                                                      __ptext48 26A0  
                                                      __ptext57 22BE  
                                                      __ptext49 26AA  
                                                  ??_releaseObj 0015  
                                              __size_of_stopADC 0008  
                                                      _maxFeedX 0610  
                                                      _maxFeedY 060F  
                                           __end_of_returnTherm 2656  
                                           __end_of_returnTouch 2662  
                                                      _tim0Init 25E4  
                                                      _tim1Init 25F6  
                                                      _tim2Init 25B8  
                                                 __size_of_main 01AA  
                                                      _setDecay 2162  
                                            __end_of_pickObject 254E  
                                                  ??_resetTherm 0012  
                                                  ??_resetTouch 0012  
                                                     uartTx@ptr 0012  
                                                      _rotAngle 0059  
                                               isr@completeStep 0064  
                                                      int$flags 006E  
                                                      _startADC 2682  
                                                      _stepMade 25D0  
                                           __end_of_stepCounter 266E  
                                             rotateObj@rotAngle 00FA  
                                                ??i2_printError 0005  
                                            __end_of_releaseObj 2522  
                                                      _writeTM0 262E  
                                                  ??_printError 0016  
                                                 _whatsTM0Limit 26DE  
                                               ??_resetPosition 0016  
                                            tim2Init@_pwmPeriod 0012  
                                                    _INTCONbits 000FF2  
                                                  ??_toggleStep 0001  
                                              ??_getNewSequence 0014  
                                            __end_of_resetTherm 2682  
                                            __end_of_resetTouch 2696  
                                                   _setThermRel 26B4  
                                                  uartTx@length 0014  
                                                   _moveToPoint 0A44  
                                           __end_of_touchObject 1DA4  
                                                      intlevel2 26FC  
                                             enableMotor@enable 0015  
                                                  ??_touchTherm 0016  
                                                   _setTouchRel 26AA  
                                                   ??_reduceSeq 0012  
                                                   ??_retPeriod 0003  
                                                    _RCSTA1bits 000FAB  
                                            __end_of_printError 1AA4  
                                         setDirection@direction 0015  
                                                   ??_shiftData 0012  
                                                   ??_resetStep 0012  
                                            __end_of_toggleStep 26AA  
                                             ?_resetNewSequence 0001  
                                                ?_whatsTM0Limit 0001  
                                                   ??_rotateObj 00F7  
                                            ??_resetNewSequence 0012  
                                            __end_of_touchTherm 1CB2  
                                                  ?_enableMotor 0012  
                                                   ??_usartInit 0012  
                                                 ??i2_storeData 0008  
                                                   ??_storeData 0019  
                                                   _returnTherm 264A  
                                                   _returnTouch 2656  
                                                   _stepCounter 2662  
