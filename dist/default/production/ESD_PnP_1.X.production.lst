

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Wed Apr 28 14:56:43 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    76                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    77  0000                     
    78                           ; Version 2.20
    79                           ; Generated 12/02/2020 GMT
    80                           ; 
    81                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F452 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataCOMRAM
   114  002590                     __pidataCOMRAM:
   115                           	callstack 0
   116                           
   117                           ;initializer for _motCounter
   118  002590  00                 	db	0
   119  002591  01                 	db	1
   120  002592  00                 	db	0
   121  002593  01                 	db	1
   122  002594  00                 	db	0
   123  002595  01                 	db	1
   124                           
   125                           ;initializer for storeData@mexLength
   126  002596  05                 	db	5
   127                           
   128                           	psect	idataBANK0
   129  0022DA                     __pidataBANK0:
   130                           	callstack 0
   131                           
   132                           ;initializer for rotateObj@rotSequence
   133  0022DA  24                 	db	36
   134  0022DB  0C                 	db	12
   135  0022DC  18                 	db	24
   136  0022DD  30                 	db	48
   137                           
   138                           ;initializer for _stepMot3
   139  0022DE  09                 	db	9
   140  0022DF  03                 	db	3
   141  0022E0  06                 	db	6
   142  0022E1  0C                 	db	12
   143                           
   144                           ;initializer for _stepMot2
   145  0022E2  11                 	db	17
   146  0022E3  05                 	db	5
   147  0022E4  0C                 	db	12
   148  0022E5  18                 	db	24
   149                           
   150                           ;initializer for _stepMot1
   151  0022E6  22                 	db	34
   152  0022E7  06                 	db	6
   153  0022E8  0C                 	db	12
   154  0022E9  28                 	db	40
   155                           
   156                           ;initializer for _maxY
   157  0022EA  0065               	dw	101
   158                           
   159                           ;initializer for _maxX
   160  0022EC  0065               	dw	101
   161                           
   162                           ;initializer for _errString_Feed
   163  0022EE  45                 	db	69
   164  0022EF  72                 	db	114
   165  0022F0  72                 	db	114
   166  0022F1  6F                 	db	111
   167  0022F2  72                 	db	114
   168  0022F3  2C                 	db	44
   169  0022F4  20                 	db	32
   170  0022F5  66                 	db	102
   171  0022F6  65                 	db	101
   172  0022F7  65                 	db	101
   173  0022F8  64                 	db	100
   174  0022F9  20                 	db	32
   175  0022FA  6C                 	db	108
   176  0022FB  69                 	db	105
   177  0022FC  6E                 	db	110
   178  0022FD  65                 	db	101
   179  0022FE  20                 	db	32
   180  0022FF  6E                 	db	110
   181  002300  6F                 	db	111
   182  002301  74                 	db	116
   183  002302  20                 	db	32
   184  002303  64                 	db	100
   185  002304  65                 	db	101
   186  002305  66                 	db	102
   187  002306  69                 	db	105
   188  002307  6E                 	db	110
   189  002308  65                 	db	101
   190  002309  64                 	db	100
   191  00230A  0A                 	db	10
   192  00230B  00                 	db	0
   193                           
   194                           ;initializer for _errString_Command
   195  00230C  43                 	db	67
   196  00230D  6F                 	db	111
   197  00230E  6D                 	db	109
   198  00230F  6D                 	db	109
   199  002310  61                 	db	97
   200  002311  6E                 	db	110
   201  002312  64                 	db	100
   202  002313  20                 	db	32
   203  002314  6E                 	db	110
   204  002315  6F                 	db	111
   205  002316  74                 	db	116
   206  002317  20                 	db	32
   207  002318  72                 	db	114
   208  002319  65                 	db	101
   209  00231A  63                 	db	99
   210  00231B  6F                 	db	111
   211  00231C  67                 	db	103
   212  00231D  6E                 	db	110
   213  00231E  69                 	db	105
   214  00231F  7A                 	db	122
   215  002320  65                 	db	101
   216  002321  64                 	db	100
   217  002322  0A                 	db	10
   218  002323  00                 	db	0
   219                           
   220                           	psect	idataBANK1
   221  001EC8                     __pidataBANK1:
   222                           	callstack 0
   223                           
   224                           ;initializer for _errString_PointZ
   225  001EC8  45                 	db	69
   226  001EC9  72                 	db	114
   227  001ECA  72                 	db	114
   228  001ECB  6F                 	db	111
   229  001ECC  72                 	db	114
   230  001ECD  2C                 	db	44
   231  001ECE  20                 	db	32
   232  001ECF  74                 	db	116
   233  001ED0  69                 	db	105
   234  001ED1  6D                 	db	109
   235  001ED2  65                 	db	101
   236  001ED3  20                 	db	32
   237  001ED4  65                 	db	101
   238  001ED5  78                 	db	120
   239  001ED6  63                 	db	99
   240  001ED7  65                 	db	101
   241  001ED8  65                 	db	101
   242  001ED9  64                 	db	100
   243  001EDA  65                 	db	101
   244  001EDB  64                 	db	100
   245  001EDC  20                 	db	32
   246  001EDD  74                 	db	116
   247  001EDE  6F                 	db	111
   248  001EDF  20                 	db	32
   249  001EE0  72                 	db	114
   250  001EE1  65                 	db	101
   251  001EE2  61                 	db	97
   252  001EE3  63                 	db	99
   253  001EE4  68                 	db	104
   254  001EE5  20                 	db	32
   255  001EE6  74                 	db	116
   256  001EE7  68                 	db	104
   257  001EE8  65                 	db	101
   258  001EE9  20                 	db	32
   259  001EEA  65                 	db	101
   260  001EEB  6E                 	db	110
   261  001EEC  64                 	db	100
   262  001EED  20                 	db	32
   263  001EEE  6F                 	db	111
   264  001EEF  66                 	db	102
   265  001EF0  20                 	db	32
   266  001EF1  74                 	db	116
   267  001EF2  68                 	db	104
   268  001EF3  65                 	db	101
   269  001EF4  20                 	db	32
   270  001EF5  5A                 	db	90
   271  001EF6  20                 	db	32
   272  001EF7  41                 	db	65
   273  001EF8  78                 	db	120
   274  001EF9  69                 	db	105
   275  001EFA  73                 	db	115
   276  001EFB  0A                 	db	10
   277  001EFC  00                 	db	0
   278                           
   279                           ;initializer for _errString_Point
   280  001EFD  45                 	db	69
   281  001EFE  72                 	db	114
   282  001EFF  72                 	db	114
   283  001F00  6F                 	db	111
   284  001F01  72                 	db	114
   285  001F02  2C                 	db	44
   286  001F03  20                 	db	32
   287  001F04  74                 	db	116
   288  001F05  69                 	db	105
   289  001F06  6D                 	db	109
   290  001F07  65                 	db	101
   291  001F08  20                 	db	32
   292  001F09  65                 	db	101
   293  001F0A  78                 	db	120
   294  001F0B  63                 	db	99
   295  001F0C  65                 	db	101
   296  001F0D  65                 	db	101
   297  001F0E  64                 	db	100
   298  001F0F  65                 	db	101
   299  001F10  64                 	db	100
   300  001F11  20                 	db	32
   301  001F12  74                 	db	116
   302  001F13  6F                 	db	111
   303  001F14  20                 	db	32
   304  001F15  72                 	db	114
   305  001F16  65                 	db	101
   306  001F17  61                 	db	97
   307  001F18  63                 	db	99
   308  001F19  68                 	db	104
   309  001F1A  20                 	db	32
   310  001F1B  74                 	db	116
   311  001F1C  68                 	db	104
   312  001F1D  65                 	db	101
   313  001F1E  20                 	db	32
   314  001F1F  70                 	db	112
   315  001F20  6F                 	db	111
   316  001F21  69                 	db	105
   317  001F22  6E                 	db	110
   318  001F23  74                 	db	116
   319  001F24  0A                 	db	10
   320  001F25  00                 	db	0
   321                           
   322                           ;initializer for _errString_ZEND
   323  001F26  45                 	db	69
   324  001F27  72                 	db	114
   325  001F28  72                 	db	114
   326  001F29  6F                 	db	111
   327  001F2A  72                 	db	114
   328  001F2B  2C                 	db	44
   329  001F2C  20                 	db	32
   330  001F2D  6E                 	db	110
   331  001F2E  6F                 	db	111
   332  001F2F  20                 	db	32
   333  001F30  6F                 	db	111
   334  001F31  62                 	db	98
   335  001F32  6A                 	db	106
   336  001F33  65                 	db	101
   337  001F34  63                 	db	99
   338  001F35  74                 	db	116
   339  001F36  20                 	db	32
   340  001F37  72                 	db	114
   341  001F38  65                 	db	101
   342  001F39  6C                 	db	108
   343  001F3A  65                 	db	101
   344  001F3B  76                 	db	118
   345  001F3C  61                 	db	97
   346  001F3D  74                 	db	116
   347  001F3E  65                 	db	101
   348  001F3F  64                 	db	100
   349  001F40  20                 	db	32
   350  001F41  61                 	db	97
   351  001F42  6C                 	db	108
   352  001F43  6F                 	db	111
   353  001F44  6E                 	db	110
   354  001F45  67                 	db	103
   355  001F46  20                 	db	32
   356  001F47  5A                 	db	90
   357  001F48  20                 	db	32
   358  001F49  41                 	db	65
   359  001F4A  78                 	db	120
   360  001F4B  69                 	db	105
   361  001F4C  73                 	db	115
   362  001F4D  0A                 	db	10
   363  001F4E  00                 	db	0
   364                           
   365                           ;initializer for _errString_Reset
   366  001F4F  45                 	db	69
   367  001F50  72                 	db	114
   368  001F51  72                 	db	114
   369  001F52  6F                 	db	111
   370  001F53  72                 	db	114
   371  001F54  2C                 	db	44
   372  001F55  20                 	db	32
   373  001F56  74                 	db	116
   374  001F57  69                 	db	105
   375  001F58  6D                 	db	109
   376  001F59  65                 	db	101
   377  001F5A  20                 	db	32
   378  001F5B  65                 	db	101
   379  001F5C  78                 	db	120
   380  001F5D  63                 	db	99
   381  001F5E  65                 	db	101
   382  001F5F  65                 	db	101
   383  001F60  64                 	db	100
   384  001F61  65                 	db	101
   385  001F62  64                 	db	100
   386  001F63  20                 	db	32
   387  001F64  74                 	db	116
   388  001F65  6F                 	db	111
   389  001F66  20                 	db	32
   390  001F67  72                 	db	114
   391  001F68  65                 	db	101
   392  001F69  73                 	db	115
   393  001F6A  65                 	db	101
   394  001F6B  74                 	db	116
   395  001F6C  20                 	db	32
   396  001F6D  70                 	db	112
   397  001F6E  6F                 	db	111
   398  001F6F  73                 	db	115
   399  001F70  69                 	db	105
   400  001F71  74                 	db	116
   401  001F72  69                 	db	105
   402  001F73  6F                 	db	111
   403  001F74  6E                 	db	110
   404  001F75  0A                 	db	10
   405  001F76  00                 	db	0
   406                           
   407                           ;initializer for _errString_Fatal
   408  001F77  46                 	db	70
   409  001F78  61                 	db	97
   410  001F79  74                 	db	116
   411  001F7A  61                 	db	97
   412  001F7B  6C                 	db	108
   413  001F7C  20                 	db	32
   414  001F7D  45                 	db	69
   415  001F7E  72                 	db	114
   416  001F7F  72                 	db	114
   417  001F80  6F                 	db	111
   418  001F81  72                 	db	114
   419  001F82  2C                 	db	44
   420  001F83  20                 	db	32
   421  001F84  70                 	db	112
   422  001F85  6C                 	db	108
   423  001F86  65                 	db	101
   424  001F87  61                 	db	97
   425  001F88  73                 	db	115
   426  001F89  65                 	db	101
   427  001F8A  20                 	db	32
   428  001F8B  72                 	db	114
   429  001F8C  65                 	db	101
   430  001F8D  73                 	db	115
   431  001F8E  65                 	db	101
   432  001F8F  74                 	db	116
   433  001F90  20                 	db	32
   434  001F91  74                 	db	116
   435  001F92  68                 	db	104
   436  001F93  65                 	db	101
   437  001F94  20                 	db	32
   438  001F95  64                 	db	100
   439  001F96  65                 	db	101
   440  001F97  76                 	db	118
   441  001F98  69                 	db	105
   442  001F99  63                 	db	99
   443  001F9A  65                 	db	101
   444  001F9B  21                 	db	33
   445  001F9C  0A                 	db	10
   446  001F9D  00                 	db	0
   447                           
   448                           ;initializer for _errString_Bound
   449  001F9E  45                 	db	69
   450  001F9F  72                 	db	114
   451  001FA0  72                 	db	114
   452  001FA1  6F                 	db	111
   453  001FA2  72                 	db	114
   454  001FA3  2C                 	db	44
   455  001FA4  20                 	db	32
   456  001FA5  70                 	db	112
   457  001FA6  6F                 	db	111
   458  001FA7  69                 	db	105
   459  001FA8  6E                 	db	110
   460  001FA9  74                 	db	116
   461  001FAA  20                 	db	32
   462  001FAB  6F                 	db	111
   463  001FAC  75                 	db	117
   464  001FAD  74                 	db	116
   465  001FAE  73                 	db	115
   466  001FAF  69                 	db	105
   467  001FB0  64                 	db	100
   468  001FB1  65                 	db	101
   469  001FB2  20                 	db	32
   470  001FB3  62                 	db	98
   471  001FB4  6F                 	db	111
   472  001FB5  75                 	db	117
   473  001FB6  6E                 	db	110
   474  001FB7  64                 	db	100
   475  001FB8  61                 	db	97
   476  001FB9  72                 	db	114
   477  001FBA  69                 	db	105
   478  001FBB  65                 	db	101
   479  001FBC  73                 	db	115
   480  001FBD  0A                 	db	10
   481  001FBE  00                 	db	0
   482                           
   483                           	psect	smallconst
   484  000600                     __psmallconst:
   485                           	callstack 0
   486  000600  00                 	db	0
   487  000601  FFAC               	dw	65452
   488  000603  3DB3               	dw	15795
   489  000605                     __end_ofrotateObj@stepAngle:
   490                           	callstack 0
   491  000605  0400               	dw	1024
   492  000607                     __end_of_therm_pressure:
   493                           	callstack 0
   494  000607  0200               	dw	512
   495  000609                     __end_of_touch_pressure:
   496                           	callstack 0
   497  000609                     _feeder3Pos:
   498                           	callstack 0
   499  000609  0F                 	db	15
   500  00060A  50                 	db	80
   501  00060B                     __end_of_feeder3Pos:
   502                           	callstack 0
   503  00060B                     _feeder2Pos:
   504                           	callstack 0
   505  00060B  0F                 	db	15
   506  00060C  32                 	db	50
   507  00060D                     __end_of_feeder2Pos:
   508                           	callstack 0
   509  00060D                     _feeder1Pos:
   510                           	callstack 0
   511  00060D  0F                 	db	15
   512  00060E  14                 	db	20
   513  00060F                     __end_of_feeder1Pos:
   514                           	callstack 0
   515  00060F  64                 	db	100
   516  000610                     __end_of_maxFeedY:
   517                           	callstack 0
   518  000610  1E                 	db	30
   519  000611                     __end_of_maxFeedX:
   520                           	callstack 0
   521  0000                     _TMR0	set	4054
   522  0000                     _T1CONbits	set	4045
   523  0000                     _TXREG	set	4013
   524  0000                     _SPBRG	set	4015
   525  0000                     _TXSTAbits	set	4012
   526  0000                     _TRISCbits	set	3988
   527  0000                     _RCREG1	set	4014
   528  0000                     _ADRESH	set	4036
   529  0000                     _ADRESL	set	4035
   530  0000                     _PIR1bits	set	3998
   531  0000                     _RCONbits	set	4048
   532  0000                     _INTCONbits	set	4082
   533  0000                     _IPR1bits	set	3999
   534  0000                     _PIE1bits	set	3997
   535  0000                     _ADCON0bits	set	4034
   536  0000                     _RCSTAbits	set	4011
   537  0000                     _RCSTA1bits	set	4011
   538  0000                     _LATD	set	3980
   539  0000                     _PORTDbits	set	3971
   540  0000                     _TMR2	set	4044
   541  0000                     _LATC	set	3979
   542  0000                     _LATB	set	3978
   543  0000                     _LATA	set	3977
   544  0000                     _PORTEbits	set	3972
   545  0000                     _T0CONbits	set	4053
   546  0000                     _T2CONbits	set	4042
   547  0000                     _LATDbits	set	3980
   548  0000                     _LATCbits	set	3979
   549  0000                     _LATBbits	set	3978
   550  0000                     _LATAbits	set	3977
   551  0000                     _TRISDbits	set	3989
   552  0000                     _TRISEbits	set	3990
   553  0000                     _TRISD	set	3989
   554  0000                     _TRISC	set	3988
   555  0000                     _TRISB	set	3987
   556  0000                     _TRISA	set	3986
   557  0000                     _ADCON1bits	set	4033
   558  000611  00                 	db	0	; dummy byte at the end
   559  0000                     
   560                           ; #config settings
   561                           
   562                           	psect	cinit
   563  002158                     __pcinit:
   564                           	callstack 0
   565  002158                     start_initialization:
   566                           	callstack 0
   567  002158                     __initialization:
   568                           	callstack 0
   569                           
   570                           ; Initialize objects allocated to BANK1 (247 bytes)
   571                           ; load TBLPTR registers with __pidataBANK1
   572  002158  0EC8               	movlw	low __pidataBANK1
   573  00215A  6EF6               	movwf	tblptrl,c
   574  00215C  0E1E               	movlw	high __pidataBANK1
   575  00215E  6EF7               	movwf	tblptrh,c
   576  002160  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   577  002162  6EF8               	movwf	tblptru,c
   578  002164  EE01  F000         	lfsr	0,__pdataBANK1
   579  002168  EE10 F0F7          	lfsr	1,247
   580  00216C                     copy_data0:
   581  00216C  0009               	tblrd		*+
   582  00216E  CFF5 FFEE          	movff	tablat,postinc0
   583  002172  50E5               	movf	postdec1,w,c
   584  002174  50E1               	movf	fsr1l,w,c
   585  002176  E1FA               	bnz	copy_data0
   586                           
   587                           ; Initialize objects allocated to BANK0 (74 bytes)
   588                           ; load TBLPTR registers with __pidataBANK0
   589  002178  0EDA               	movlw	low __pidataBANK0
   590  00217A  6EF6               	movwf	tblptrl,c
   591  00217C  0E22               	movlw	high __pidataBANK0
   592  00217E  6EF7               	movwf	tblptrh,c
   593  002180  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   594  002182  6EF8               	movwf	tblptru,c
   595  002184  EE00  F080         	lfsr	0,__pdataBANK0
   596  002188  EE10 F04A          	lfsr	1,74
   597  00218C                     copy_data1:
   598  00218C  0009               	tblrd		*+
   599  00218E  CFF5 FFEE          	movff	tablat,postinc0
   600  002192  50E5               	movf	postdec1,w,c
   601  002194  50E1               	movf	fsr1l,w,c
   602  002196  E1FA               	bnz	copy_data1
   603                           
   604                           ; Initialize objects allocated to COMRAM (7 bytes)
   605                           ; load TBLPTR registers with __pidataCOMRAM
   606  002198  0E90               	movlw	low __pidataCOMRAM
   607  00219A  6EF6               	movwf	tblptrl,c
   608  00219C  0E25               	movlw	high __pidataCOMRAM
   609  00219E  6EF7               	movwf	tblptrh,c
   610  0021A0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   611  0021A2  6EF8               	movwf	tblptru,c
   612  0021A4  EE00  F067         	lfsr	0,__pdataCOMRAM
   613  0021A8  EE10 F007          	lfsr	1,7
   614  0021AC                     copy_data2:
   615  0021AC  0009               	tblrd		*+
   616  0021AE  CFF5 FFEE          	movff	tablat,postinc0
   617  0021B2  50E5               	movf	postdec1,w,c
   618  0021B4  50E1               	movf	fsr1l,w,c
   619  0021B6  E1FA               	bnz	copy_data2
   620                           
   621                           ; Clear objects allocated to BANK0 (28 bytes)
   622  0021B8  EE00  F0CA         	lfsr	0,__pbssBANK0
   623  0021BC  0E1C               	movlw	28
   624  0021BE                     clear_0:
   625  0021BE  6AEE               	clrf	postinc0,c
   626  0021C0  06E8               	decf	wreg,f,c
   627  0021C2  E1FD               	bnz	clear_0
   628                           
   629                           ; Clear objects allocated to COMRAM (36 bytes)
   630  0021C4  EE00  F043         	lfsr	0,__pbssCOMRAM
   631  0021C8  0E24               	movlw	36
   632  0021CA                     clear_1:
   633  0021CA  6AEE               	clrf	postinc0,c
   634  0021CC  06E8               	decf	wreg,f,c
   635  0021CE  E1FD               	bnz	clear_1
   636  0021D0                     end_of_initialization:
   637                           	callstack 0
   638  0021D0                     __end_of__initialization:
   639                           	callstack 0
   640  0021D0  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   641  0021D2  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   642  0021D4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   643  0021D6  6EF8               	movwf	tblptru,c
   644  0021D8  0100               	movlb	0
   645  0021DA  EF4C  F00A         	goto	_main	;jump to C main() function
   646                           
   647                           	psect	bssCOMRAM
   648  000043                     __pbssCOMRAM:
   649                           	callstack 0
   650  000043                     storeData@receivedMex:
   651                           	callstack 0
   652  000043                     	ds	9
   653  00004C                     _posVector:
   654                           	callstack 0
   655  00004C                     	ds	3
   656  00004F                     _pwmPeriod:
   657                           	callstack 0
   658  00004F                     	ds	2
   659  000051                     _single_cycle:
   660                           	callstack 0
   661  000051                     	ds	2
   662  000053                     _ADC_res:
   663                           	callstack 0
   664  000053                     	ds	2
   665  000055                     _newFeeder:
   666                           	callstack 0
   667  000055                     	ds	2
   668  000057                     _rotAngle:
   669                           	callstack 0
   670  000057                     	ds	2
   671  000059                     _tm0Error:
   672                           	callstack 0
   673  000059                     	ds	2
   674  00005B                     _stepToggle:
   675                           	callstack 0
   676  00005B                     	ds	1
   677  00005C                     _pwmStep:
   678                           	callstack 0
   679  00005C                     	ds	1
   680  00005D                     	ds	1
   681  00005E                     storeData@counter:
   682                           	callstack 0
   683  00005E                     	ds	1
   684  00005F                     __newSequence:
   685                           	callstack 0
   686  00005F                     	ds	1
   687  000060                     __fatalError:
   688                           	callstack 0
   689  000060                     	ds	1
   690  000061                     _dataCounter:
   691                           	callstack 0
   692  000061                     	ds	1
   693  000062                     _completeStep:
   694                           	callstack 0
   695  000062                     	ds	1
   696  000063                     _tm0Count:
   697                           	callstack 0
   698  000063                     	ds	1
   699  000064                     _therm_rel:
   700                           	callstack 0
   701  000064                     	ds	1
   702  000065                     _touch_rel:
   703                           	callstack 0
   704  000065                     	ds	1
   705  000066                     _tm0Limit:
   706                           	callstack 0
   707  000066                     	ds	1
   708                           
   709                           	psect	dataCOMRAM
   710  000067                     __pdataCOMRAM:
   711                           	callstack 0
   712  000067                     _motCounter:
   713                           	callstack 0
   714  000067                     	ds	6
   715  00006D                     storeData@mexLength:
   716                           	callstack 0
   717  00006D                     	ds	1
   718                           
   719                           	psect	bssBANK0
   720  0000CA                     __pbssBANK0:
   721                           	callstack 0
   722  0000CA                     _dataSequence:
   723                           	callstack 0
   724  0000CA                     	ds	20
   725  0000DE                     _newSequenceData:
   726                           	callstack 0
   727  0000DE                     	ds	8
   728                           
   729                           	psect	dataBANK0
   730  000080                     __pdataBANK0:
   731                           	callstack 0
   732  000080                     rotateObj@rotSequence:
   733                           	callstack 0
   734  000080                     	ds	4
   735  000084                     _stepMot3:
   736                           	callstack 0
   737  000084                     	ds	4
   738  000088                     _stepMot2:
   739                           	callstack 0
   740  000088                     	ds	4
   741  00008C                     _stepMot1:
   742                           	callstack 0
   743  00008C                     	ds	4
   744  000090                     	ds	2
   745  000092                     	ds	2
   746  000094                     _errString_Feed:
   747                           	callstack 0
   748  000094                     	ds	30
   749  0000B2                     _errString_Command:
   750                           	callstack 0
   751  0000B2                     	ds	24
   752                           
   753                           	psect	dataBANK1
   754  000100                     __pdataBANK1:
   755                           	callstack 0
   756  000100                     _errString_PointZ:
   757                           	callstack 0
   758  000100                     	ds	53
   759  000135                     _errString_Point:
   760                           	callstack 0
   761  000135                     	ds	41
   762  00015E                     _errString_ZEND:
   763                           	callstack 0
   764  00015E                     	ds	41
   765  000187                     _errString_Reset:
   766                           	callstack 0
   767  000187                     	ds	40
   768  0001AF                     _errString_Fatal:
   769                           	callstack 0
   770  0001AF                     	ds	39
   771  0001D6                     _errString_Bound:
   772                           	callstack 0
   773  0001D6                     	ds	33
   774                           
   775                           	psect	cstackBANK0
   776  0000E6                     __pcstackBANK0:
   777                           	callstack 0
   778  0000E6                     ??_rotateObj:
   779                           
   780                           ; 1 bytes @ 0x0
   781  0000E6                     	ds	2
   782  0000E8                     rotateObj@rotAngle:
   783                           	callstack 0
   784                           
   785                           ; 1 bytes @ 0x2
   786  0000E8                     	ds	1
   787  0000E9                     rotateObj@totStep:
   788                           	callstack 0
   789                           
   790                           ; 2 bytes @ 0x3
   791  0000E9                     	ds	2
   792  0000EB                     rotateObj@i:
   793                           	callstack 0
   794                           
   795                           ; 2 bytes @ 0x5
   796  0000EB                     	ds	2
   797  0000ED                     ??_executeData:
   798                           
   799                           ; 1 bytes @ 0x7
   800  0000ED                     	ds	2
   801  0000EF                     executeData@data:
   802                           	callstack 0
   803                           
   804                           ; 2 bytes @ 0x9
   805  0000EF                     	ds	2
   806  0000F1                     executeData@errCode:
   807                           	callstack 0
   808                           
   809                           ; 1 bytes @ 0xB
   810  0000F1                     	ds	1
   811  0000F2                     ??_main:
   812                           
   813                           ; 1 bytes @ 0xC
   814  0000F2                     	ds	2
   815  0000F4                     main@errCode:
   816                           	callstack 0
   817                           
   818                           ; 1 bytes @ 0xE
   819  0000F4                     	ds	1
   820  0000F5                     main@newData:
   821                           	callstack 0
   822                           
   823                           ; 2 bytes @ 0xF
   824  0000F5                     	ds	2
   825                           
   826                           	psect	cstackCOMRAM
   827  000001                     __pcstackCOMRAM:
   828                           	callstack 0
   829  000001                     ?_retPeriod:
   830                           	callstack 0
   831  000001                     i2uartTx@ptr:
   832                           	callstack 0
   833                           
   834                           ; 2 bytes @ 0x0
   835  000001                     	ds	2
   836  000003                     i2uartTx@length:
   837                           	callstack 0
   838                           
   839                           ; 1 bytes @ 0x2
   840  000003                     	ds	1
   841  000004                     i2uartTx@i:
   842                           	callstack 0
   843                           
   844                           ; 1 bytes @ 0x3
   845  000004                     	ds	1
   846  000005                     ??i2_printError:
   847                           
   848                           ; 1 bytes @ 0x4
   849  000005                     	ds	2
   850  000007                     i2printError@errCode:
   851                           	callstack 0
   852                           
   853                           ; 1 bytes @ 0x6
   854  000007                     	ds	1
   855  000008                     ??i2_storeData:
   856                           
   857                           ; 1 bytes @ 0x7
   858  000008                     	ds	2
   859  00000A                     i2storeData@data:
   860                           	callstack 0
   861                           
   862                           ; 1 bytes @ 0x9
   863  00000A                     	ds	1
   864  00000B                     ??_isr:
   865                           
   866                           ; 1 bytes @ 0xA
   867  00000B                     	ds	6
   868  000011                     isr@temp:
   869                           	callstack 0
   870                           
   871                           ; 1 bytes @ 0x10
   872  000011                     	ds	1
   873  000012                     ??_shiftData:
   874  000012                     ?_stepMade:
   875                           	callstack 0
   876  000012                     ?_stepCounter:
   877                           	callstack 0
   878  000012                     ?_returnTouch:
   879                           	callstack 0
   880  000012                     ?_returnTherm:
   881                           	callstack 0
   882  000012                     ?_getNewSequence:
   883                           	callstack 0
   884  000012                     ?_getData:
   885                           	callstack 0
   886  000012                     ?___xxtofl:
   887                           	callstack 0
   888  000012                     uartTx@ptr:
   889                           	callstack 0
   890  000012                     tim2Init@_pwmPeriod:
   891                           	callstack 0
   892  000012                     ___xxtofl@val:
   893                           	callstack 0
   894                           
   895                           ; 4 bytes @ 0x11
   896  000012                     	ds	2
   897  000014                     shiftData@i:
   898                           	callstack 0
   899  000014                     uartTx@length:
   900                           	callstack 0
   901  000014                     stepMade@temp:
   902                           	callstack 0
   903                           
   904                           ; 1 bytes @ 0x13
   905  000014                     	ds	1
   906  000015                     resetPosition@keepMovingX:
   907                           	callstack 0
   908  000015                     uartTx@i:
   909                           	callstack 0
   910  000015                     moveToPoint@x1:
   911                           	callstack 0
   912                           
   913                           ; 2 bytes @ 0x14
   914  000015                     	ds	1
   915  000016                     ??_printError:
   916  000016                     ??___xxtofl:
   917  000016                     resetPosition@keepMovingY:
   918                           	callstack 0
   919                           
   920                           ; 1 bytes @ 0x15
   921  000016                     	ds	1
   922  000017                     resetPosition@keepMovingZ:
   923                           	callstack 0
   924  000017                     moveToPoint@y1:
   925                           	callstack 0
   926                           
   927                           ; 2 bytes @ 0x16
   928  000017                     	ds	1
   929  000018                     printError@errCode:
   930                           	callstack 0
   931                           
   932                           ; 1 bytes @ 0x17
   933  000018                     	ds	1
   934  000019                     ??_storeData:
   935  000019                     moveToPoint@x2:
   936                           	callstack 0
   937                           
   938                           ; 2 bytes @ 0x18
   939  000019                     	ds	1
   940  00001A                     ___xxtofl@sign:
   941                           	callstack 0
   942                           
   943                           ; 1 bytes @ 0x19
   944  00001A                     	ds	1
   945  00001B                     storeData@data:
   946                           	callstack 0
   947  00001B                     ___xxtofl@exp:
   948                           	callstack 0
   949  00001B                     moveToPoint@y2:
   950                           	callstack 0
   951                           
   952                           ; 2 bytes @ 0x1A
   953  00001B                     	ds	1
   954  00001C                     ___xxtofl@arg:
   955                           	callstack 0
   956                           
   957                           ; 4 bytes @ 0x1B
   958  00001C                     	ds	1
   959  00001D                     ??_moveToPoint:
   960                           
   961                           ; 1 bytes @ 0x1C
   962  00001D                     	ds	2
   963  00001F                     moveToPoint@MOT1Direction:
   964                           	callstack 0
   965                           
   966                           ; 1 bytes @ 0x1E
   967  00001F                     	ds	1
   968  000020                     ?___fldiv:
   969                           	callstack 0
   970  000020                     moveToPoint@MOT2Direction:
   971                           	callstack 0
   972  000020                     ___fldiv@b:
   973                           	callstack 0
   974                           
   975                           ; 4 bytes @ 0x1F
   976  000020                     	ds	1
   977  000021                     moveToPoint@keepMovingX:
   978                           	callstack 0
   979                           
   980                           ; 1 bytes @ 0x20
   981  000021                     	ds	1
   982  000022                     moveToPoint@keepMovingY:
   983                           	callstack 0
   984                           
   985                           ; 1 bytes @ 0x21
   986  000022                     	ds	2
   987  000024                     ___fldiv@a:
   988                           	callstack 0
   989                           
   990                           ; 4 bytes @ 0x23
   991  000024                     	ds	4
   992  000028                     ??___fldiv:
   993                           
   994                           ; 1 bytes @ 0x27
   995  000028                     	ds	4
   996  00002C                     ___fldiv@rem:
   997                           	callstack 0
   998                           
   999                           ; 4 bytes @ 0x2B
  1000  00002C                     	ds	4
  1001  000030                     ___fldiv@sign:
  1002                           	callstack 0
  1003                           
  1004                           ; 1 bytes @ 0x2F
  1005  000030                     	ds	1
  1006  000031                     ___fldiv@new_exp:
  1007                           	callstack 0
  1008                           
  1009                           ; 2 bytes @ 0x30
  1010  000031                     	ds	2
  1011  000033                     ___fldiv@grs:
  1012                           	callstack 0
  1013                           
  1014                           ; 4 bytes @ 0x32
  1015  000033                     	ds	4
  1016  000037                     ___fldiv@bexp:
  1017                           	callstack 0
  1018                           
  1019                           ; 1 bytes @ 0x36
  1020  000037                     	ds	1
  1021  000038                     ___fldiv@aexp:
  1022                           	callstack 0
  1023                           
  1024                           ; 1 bytes @ 0x37
  1025  000038                     	ds	1
  1026  000039                     ?___fltol:
  1027                           	callstack 0
  1028  000039                     ___fltol@f1:
  1029                           	callstack 0
  1030                           
  1031                           ; 4 bytes @ 0x38
  1032  000039                     	ds	4
  1033  00003D                     ??___fltol:
  1034                           
  1035                           ; 1 bytes @ 0x3C
  1036  00003D                     	ds	4
  1037  000041                     ___fltol@sign1:
  1038                           	callstack 0
  1039                           
  1040                           ; 1 bytes @ 0x40
  1041  000041                     	ds	1
  1042  000042                     ___fltol@exp1:
  1043                           	callstack 0
  1044                           
  1045                           ; 1 bytes @ 0x41
  1046  000042                     	ds	1
  1047                           
  1048 ;;
  1049 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1050 ;;
  1051 ;; *************** function _main *****************
  1052 ;; Defined at:
  1053 ;;		line 19 in file "main.c"
  1054 ;; Parameters:    Size  Location     Type
  1055 ;;		None
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;  newData         2   15[BANK0 ] PTR struct .
  1058 ;;		 -> newSequenceData(8), 
  1059 ;;  errCode         1   14[BANK0 ] unsigned char 
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1069 ;;      Params:         0       0       0       0       0       0       0
  1070 ;;      Locals:         0       3       0       0       0       0       0
  1071 ;;      Temps:          0       2       0       0       0       0       0
  1072 ;;      Totals:         0       5       0       0       0       0       0
  1073 ;;Total ram usage:        5 bytes
  1074 ;; Hardware stack levels required when called:    7
  1075 ;; This function calls:
  1076 ;;		_clearTM0
  1077 ;;		_executeData
  1078 ;;		_getNewSequence
  1079 ;;		_initADC
  1080 ;;		_initPinMotors
  1081 ;;		_interruptInit
  1082 ;;		_newSequence
  1083 ;;		_printError
  1084 ;;		_readSeq
  1085 ;;		_reduceSeq
  1086 ;;		_resetNewSequence
  1087 ;;		_resetPosition
  1088 ;;		_shiftData
  1089 ;;		_storeData
  1090 ;;		_tim0Init
  1091 ;;		_tim1Init
  1092 ;;		_tim2Init
  1093 ;;		_usartInit
  1094 ;; This function is called by:
  1095 ;;		Startup code after reset
  1096 ;; This function uses a non-reentrant model
  1097 ;;
  1098                           
  1099                           	psect	text0
  1100  001498                     __ptext0:
  1101                           	callstack 0
  1102  001498                     _main:
  1103                           	callstack 24
  1104  001498  FFFF               	dw	65535	; assembler added errata NOP
  1105                           
  1106                           ;main.c: 23:     interruptInit();
  1107  00149A  EC92  F011         	call	_interruptInit	;wreg free
  1108  00149E                     
  1109                           ;main.c: 24:     initPinMotors();
  1110  00149E  ECE0  F011         	call	_initPinMotors	;wreg free
  1111  0014A2                     
  1112                           ;main.c: 25:     initADC();
  1113  0014A2  ECF3  F011         	call	_initADC	;wreg free
  1114  0014A6                     
  1115                           ;main.c: 26:     usartInit();
  1116  0014A6  EC06  F012         	call	_usartInit	;wreg free
  1117  0014AA                     
  1118                           ;main.c: 27:     tim0Init();
  1119  0014AA  EC28  F012         	call	_tim0Init	;wreg free
  1120  0014AE                     
  1121                           ;main.c: 28:     tim1Init();
  1122  0014AE  EC43  F012         	call	_tim1Init	;wreg free
  1123  0014B2                     
  1124                           ;main.c: 29:     tim2Init(10);
  1125  0014B2  0E00               	movlw	0
  1126  0014B4  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1127  0014B6  0E0A               	movlw	10
  1128  0014B8  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1129  0014BA  EC1F  F012         	call	_tim2Init	;wreg free
  1130  0014BE                     
  1131                           ;main.c: 32:     errCode = resetPosition();
  1132  0014BE  EC5A  F009         	call	_resetPosition	;wreg free
  1133  0014C2  0100               	movlb	0	; () banked
  1134  0014C4  6FF4               	movwf	main@errCode& (0+255),b
  1135  0014C6                     
  1136                           ; BSR set to: 0
  1137                           ;main.c: 33:     if(errCode != 0){
  1138  0014C6  51F4               	movf	main@errCode& (0+255),w,b
  1139  0014C8  B4D8               	btfsc	status,2,c
  1140  0014CA  EF69  F00A         	goto	u3821
  1141  0014CE  EF6C  F00A         	goto	u3820
  1142  0014D2                     u3821:
  1143  0014D2  FFFF               	dw	65535	; assembler added errata NOP
  1144  0014D4  EF73  F00A         	goto	l337
  1145  0014D8                     u3820:
  1146  0014D8  FFFF               	dw	65535	; assembler added errata NOP
  1147  0014DA                     
  1148                           ; BSR set to: 0
  1149                           ;main.c: 34:         printError(errCode);
  1150  0014DA  51F4               	movf	main@errCode& (0+255),w,b
  1151  0014DC  EC36  F00D         	call	_printError
  1152  0014E0                     l338:
  1153  0014E0  FFFF               	dw	65535	; assembler added errata NOP
  1154  0014E2  EF70  F00A         	goto	l338
  1155  0014E6                     l337:
  1156  0014E6  FFFF               	dw	65535	; assembler added errata NOP
  1157                           
  1158                           ; BSR set to: 0
  1159                           ;main.c: 39:     RCSTA1bits.CREN = 1;
  1160  0014E8  88AB               	bsf	171,4,c	;volatile
  1161  0014EA                     l4439:
  1162  0014EA  FFFF               	dw	65535	; assembler added errata NOP
  1163                           
  1164                           ;main.c: 42:         if(newSequence()){
  1165  0014EC  ECB4  F012         	call	_newSequence	;wreg free
  1166  0014F0  0900               	iorlw	0
  1167  0014F2  B4D8               	btfsc	status,2,c
  1168  0014F4  EF7E  F00A         	goto	u3831
  1169  0014F8  EF81  F00A         	goto	u3830
  1170  0014FC                     u3831:
  1171  0014FC  FFFF               	dw	65535	; assembler added errata NOP
  1172  0014FE  EF03  F00B         	goto	l4467
  1173  001502                     u3830:
  1174  001502  FFFF               	dw	65535	; assembler added errata NOP
  1175  001504                     
  1176                           ;main.c: 43:             t_newSequence* newData = getNewSequence();
  1177  001504  EC4A  F012         	call	_getNewSequence	;wreg free
  1178  001508  C012  F0F5         	movff	?_getNewSequence,main@newData
  1179  00150C  C013  F0F6         	movff	?_getNewSequence+1,main@newData+1
  1180  001510                     
  1181                           ;main.c: 45:             newFeeder[0] = newData ->init_posX;
  1182  001510  0100               	movlb	0	; () banked
  1183  001512  EE20 F002          	lfsr	2,2
  1184  001516  51F5               	movf	main@newData& (0+255),w,b
  1185  001518  26D9               	addwf	fsr2l,f,c
  1186  00151A  51F6               	movf	(main@newData+1)& (0+255),w,b
  1187  00151C  22DA               	addwfc	fsr2h,f,c
  1188  00151E  50DF               	movf	indf2,w,c
  1189  001520  6E55               	movwf	_newFeeder^0,c
  1190  001522                     
  1191                           ; BSR set to: 0
  1192                           ;main.c: 46:             newFeeder[1] = newData ->init_posY;
  1193  001522  EE20 F003          	lfsr	2,3
  1194  001526  51F5               	movf	main@newData& (0+255),w,b
  1195  001528  26D9               	addwf	fsr2l,f,c
  1196  00152A  51F6               	movf	(main@newData+1)& (0+255),w,b
  1197  00152C  22DA               	addwfc	fsr2h,f,c
  1198  00152E  50DF               	movf	indf2,w,c
  1199  001530  6E56               	movwf	(_newFeeder+1)^0,c
  1200  001532                     
  1201                           ; BSR set to: 0
  1202                           ;main.c: 50:             RCSTAbits.CREN = 0;
  1203  001532  98AB               	bcf	171,4,c	;volatile
  1204  001534                     
  1205                           ; BSR set to: 0
  1206                           ;main.c: 55:             if(newData ->end_posX > maxFeedX || newData ->end_posY > maxFee
      +                          dY){
  1207  001534  EE20 F005          	lfsr	2,5
  1208  001538  51F5               	movf	main@newData& (0+255),w,b
  1209  00153A  26D9               	addwf	fsr2l,f,c
  1210  00153C  51F6               	movf	(main@newData+1)& (0+255),w,b
  1211  00153E  22DA               	addwfc	fsr2h,f,c
  1212  001540  0E1F               	movlw	31
  1213  001542  60DF               	cpfslt	indf2,c
  1214  001544  EFA6  F00A         	goto	u3841
  1215  001548  EFA9  F00A         	goto	u3840
  1216  00154C                     u3841:
  1217  00154C  FFFF               	dw	65535	; assembler added errata NOP
  1218  00154E  EFB9  F00A         	goto	l4453
  1219  001552                     u3840:
  1220  001552  FFFF               	dw	65535	; assembler added errata NOP
  1221  001554                     
  1222                           ; BSR set to: 0
  1223  001554  EE20 F006          	lfsr	2,6
  1224  001558  51F5               	movf	main@newData& (0+255),w,b
  1225  00155A  26D9               	addwf	fsr2l,f,c
  1226  00155C  51F6               	movf	(main@newData+1)& (0+255),w,b
  1227  00155E  22DA               	addwfc	fsr2h,f,c
  1228  001560  0E64               	movlw	100
  1229  001562  64DF               	cpfsgt	indf2,c
  1230  001564  EFB6  F00A         	goto	u3851
  1231  001568  EFB9  F00A         	goto	u3850
  1232  00156C                     u3851:
  1233  00156C  FFFF               	dw	65535	; assembler added errata NOP
  1234  00156E  EFBE  F00A         	goto	l4455
  1235  001572                     u3850:
  1236  001572                     l4453:
  1237  001572  FFFF               	dw	65535	; assembler added errata NOP
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;main.c: 56:                 errCode = 5;
  1241  001574  0E05               	movlw	5
  1242  001576  6FF4               	movwf	main@errCode& (0+255),b
  1243                           
  1244                           ;main.c: 57:             }else{
  1245  001578  EFD2  F00A         	goto	l4457
  1246  00157C                     l4455:
  1247  00157C  FFFF               	dw	65535	; assembler added errata NOP
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;main.c: 58:                 storeData(newData ->end_posX);
  1251  00157E  EE20 F005          	lfsr	2,5
  1252  001582  51F5               	movf	main@newData& (0+255),w,b
  1253  001584  26D9               	addwf	fsr2l,f,c
  1254  001586  51F6               	movf	(main@newData+1)& (0+255),w,b
  1255  001588  22DA               	addwfc	fsr2h,f,c
  1256  00158A  50DF               	movf	indf2,w,c
  1257  00158C  EC21  F00B         	call	_storeData
  1258                           
  1259                           ;main.c: 59:                 storeData(newData ->end_posY);
  1260  001590  0100               	movlb	0	; () banked
  1261  001592  EE20 F006          	lfsr	2,6
  1262  001596  51F5               	movf	main@newData& (0+255),w,b
  1263  001598  26D9               	addwf	fsr2l,f,c
  1264  00159A  51F6               	movf	(main@newData+1)& (0+255),w,b
  1265  00159C  22DA               	addwfc	fsr2h,f,c
  1266  00159E  50DF               	movf	indf2,w,c
  1267  0015A0  EC21  F00B         	call	_storeData
  1268  0015A4                     l4457:
  1269  0015A4  FFFF               	dw	65535	; assembler added errata NOP
  1270                           
  1271                           ;main.c: 63:             if(errCode == 0){
  1272  0015A6  0100               	movlb	0	; () banked
  1273  0015A8  51F4               	movf	main@errCode& (0+255),w,b
  1274  0015AA  A4D8               	btfss	status,2,c
  1275  0015AC  EFDA  F00A         	goto	u3861
  1276  0015B0  EFDD  F00A         	goto	u3860
  1277  0015B4                     u3861:
  1278  0015B4  FFFF               	dw	65535	; assembler added errata NOP
  1279  0015B6  EFFB  F00A         	goto	l4461
  1280  0015BA                     u3860:
  1281  0015BA  FFFF               	dw	65535	; assembler added errata NOP
  1282  0015BC                     
  1283                           ; BSR set to: 0
  1284                           ;main.c: 65:                 storeData(0);
  1285  0015BC  0E00               	movlw	0
  1286  0015BE  EC21  F00B         	call	_storeData
  1287                           
  1288                           ;main.c: 66:                 storeData(0xFF);
  1289  0015C2  0EFF               	movlw	255
  1290  0015C4  EC21  F00B         	call	_storeData
  1291                           
  1292                           ;main.c: 67:                 storeData(newData ->end_rot - newData ->init_rot);
  1293  0015C8  0100               	movlb	0	; () banked
  1294  0015CA  EE20 F004          	lfsr	2,4
  1295  0015CE  51F5               	movf	main@newData& (0+255),w,b
  1296  0015D0  26D9               	addwf	fsr2l,f,c
  1297  0015D2  51F6               	movf	(main@newData+1)& (0+255),w,b
  1298  0015D4  22DA               	addwfc	fsr2h,f,c
  1299  0015D6  50DF               	movf	indf2,w,c
  1300  0015D8  6FF2               	movwf	??_main& (0+255),b
  1301  0015DA  EE20 F007          	lfsr	2,7
  1302  0015DE  51F5               	movf	main@newData& (0+255),w,b
  1303  0015E0  26D9               	addwf	fsr2l,f,c
  1304  0015E2  51F6               	movf	(main@newData+1)& (0+255),w,b
  1305  0015E4  22DA               	addwfc	fsr2h,f,c
  1306  0015E6  50DF               	movf	indf2,w,c
  1307  0015E8  6FF3               	movwf	(??_main+1)& (0+255),b
  1308  0015EA  51F2               	movf	??_main& (0+255),w,b
  1309  0015EC  5DF3               	subwf	(??_main+1)& (0+255),w,b
  1310  0015EE  EC21  F00B         	call	_storeData
  1311                           
  1312                           ;main.c: 68:             }else{
  1313  0015F2  EFFF  F00A         	goto	l4463
  1314  0015F6                     l4461:
  1315  0015F6  FFFF               	dw	65535	; assembler added errata NOP
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;main.c: 69:                 printError(errCode);
  1319  0015F8  51F4               	movf	main@errCode& (0+255),w,b
  1320  0015FA  EC36  F00D         	call	_printError
  1321  0015FE                     l4463:
  1322  0015FE  FFFF               	dw	65535	; assembler added errata NOP
  1323                           
  1324                           ;main.c: 73:             RCSTAbits.CREN = 1;
  1325  001600  88AB               	bsf	171,4,c	;volatile
  1326  001602                     
  1327                           ;main.c: 76:             resetNewSequence();
  1328  001602  EC7F  F012         	call	_resetNewSequence	;wreg free
  1329  001606                     l4467:
  1330  001606  FFFF               	dw	65535	; assembler added errata NOP
  1331                           
  1332                           ;main.c: 78:         if(readSeq()){
  1333  001608  ECB0  F012         	call	_readSeq	;wreg free
  1334  00160C  0900               	iorlw	0
  1335  00160E  B4D8               	btfsc	status,2,c
  1336  001610  EF0C  F00B         	goto	u3871
  1337  001614  EF0F  F00B         	goto	u3870
  1338  001618                     u3871:
  1339  001618  FFFF               	dw	65535	; assembler added errata NOP
  1340  00161A  EF75  F00A         	goto	l4439
  1341  00161E                     u3870:
  1342  00161E  FFFF               	dw	65535	; assembler added errata NOP
  1343  001620                     
  1344                           ;main.c: 82:             errCode = executeData();
  1345  001620  ECE3  F006         	call	_executeData	;wreg free
  1346  001624  0100               	movlb	0	; () banked
  1347  001626  6FF4               	movwf	main@errCode& (0+255),b
  1348  001628                     
  1349                           ; BSR set to: 0
  1350                           ;main.c: 84:             printError(errCode);
  1351  001628  51F4               	movf	main@errCode& (0+255),w,b
  1352  00162A  EC36  F00D         	call	_printError
  1353  00162E                     
  1354                           ;main.c: 87:             clearTM0();
  1355  00162E  EC58  F012         	call	_clearTM0	;wreg free
  1356  001632                     
  1357                           ;main.c: 91:             reduceSeq();
  1358  001632  ECAC  F012         	call	_reduceSeq	;wreg free
  1359  001636                     
  1360                           ;main.c: 92:             shiftData();
  1361  001636  ECEF  F010         	call	_shiftData	;wreg free
  1362  00163A  EF75  F00A         	goto	l4439
  1363  00163E  EFD2  F000         	goto	start
  1364  001642                     __end_of_main:
  1365                           	callstack 0
  1366                           
  1367 ;; *************** function _usartInit *****************
  1368 ;; Defined at:
  1369 ;;		line 92 in file "usart.c"
  1370 ;; Parameters:    Size  Location     Type
  1371 ;;		None
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;		None
  1374 ;; Return value:  Size  Location     Type
  1375 ;;                  1    wreg      void 
  1376 ;; Registers used:
  1377 ;;		wreg, status,2
  1378 ;; Tracked objects:
  1379 ;;		On entry : 0/0
  1380 ;;		On exit  : 0/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1383 ;;      Params:         0       0       0       0       0       0       0
  1384 ;;      Locals:         0       0       0       0       0       0       0
  1385 ;;      Temps:          0       0       0       0       0       0       0
  1386 ;;      Totals:         0       0       0       0       0       0       0
  1387 ;;Total ram usage:        0 bytes
  1388 ;; Hardware stack levels used:    1
  1389 ;; Hardware stack levels required when called:    4
  1390 ;; This function calls:
  1391 ;;		Nothing
  1392 ;; This function is called by:
  1393 ;;		_main
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text1
  1398  00240C                     __ptext1:
  1399                           	callstack 0
  1400  00240C                     _usartInit:
  1401                           	callstack 0
  1402  00240C  FFFF               	dw	65535	; assembler added errata NOP
  1403  00240E                     
  1404                           ;usart.c: 94:     TRISCbits.TRISC6 = 0;
  1405  00240E  9C94               	bcf	148,6,c	;volatile
  1406                           
  1407                           ;usart.c: 95:     TRISCbits.TRISC7 = 1;
  1408  002410  8E94               	bsf	148,7,c	;volatile
  1409                           
  1410                           ;usart.c: 97:     TXSTAbits.TX9 = 0;
  1411  002412  9CAC               	bcf	172,6,c	;volatile
  1412                           
  1413                           ;usart.c: 98:     TXSTAbits.TXEN = 1;
  1414  002414  8AAC               	bsf	172,5,c	;volatile
  1415                           
  1416                           ;usart.c: 99:     TXSTAbits.SYNC = 0;
  1417  002416  98AC               	bcf	172,4,c	;volatile
  1418                           
  1419                           ;usart.c: 100:     TXSTAbits.BRGH = 0;
  1420  002418  94AC               	bcf	172,2,c	;volatile
  1421                           
  1422                           ;usart.c: 102:     RCSTAbits.SPEN = 1;
  1423  00241A  8EAB               	bsf	171,7,c	;volatile
  1424                           
  1425                           ;usart.c: 103:     RCSTAbits.RX9 = 0;
  1426  00241C  9CAB               	bcf	171,6,c	;volatile
  1427                           
  1428                           ;usart.c: 104:     RCSTAbits.CREN = 0;
  1429  00241E  98AB               	bcf	171,4,c	;volatile
  1430                           
  1431                           ;usart.c: 105:     RCSTAbits.ADDEN = 0;
  1432  002420  96AB               	bcf	171,3,c	;volatile
  1433  002422                     
  1434                           ;usart.c: 108:     SPBRG = 25;
  1435  002422  0E19               	movlw	25
  1436  002424  6EAF               	movwf	175,c	;volatile
  1437  002426  0012               	return		;funcret
  1438  002428  FFFF               	dw	65535	; errata NOP
  1439  00242A                     __end_of_usartInit:
  1440                           	callstack 0
  1441                           
  1442 ;; *************** function _tim2Init *****************
  1443 ;; Defined at:
  1444 ;;		line 46 in file "timer.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;		None
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  1    wreg      void 
  1451 ;; Registers used:
  1452 ;;		None
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1458 ;;      Params:         2       0       0       0       0       0       0
  1459 ;;      Locals:         0       0       0       0       0       0       0
  1460 ;;      Temps:          0       0       0       0       0       0       0
  1461 ;;      Totals:         2       0       0       0       0       0       0
  1462 ;;Total ram usage:        2 bytes
  1463 ;; Hardware stack levels used:    1
  1464 ;; Hardware stack levels required when called:    4
  1465 ;; This function calls:
  1466 ;;		Nothing
  1467 ;; This function is called by:
  1468 ;;		_main
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472                           	psect	text2
  1473  00243E                     __ptext2:
  1474                           	callstack 0
  1475  00243E                     _tim2Init:
  1476                           	callstack 0
  1477  00243E  FFFF               	dw	65535	; assembler added errata NOP
  1478  002440                     
  1479                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1480  002440  94CA               	bcf	202,2,c	;volatile
  1481                           
  1482                           ;timer.c: 48:     T2CONbits.T2CKPS1 = 1;
  1483  002442  82CA               	bsf	202,1,c	;volatile
  1484                           
  1485                           ;timer.c: 52:     pwmPeriod = _pwmPeriod;
  1486  002444  C012  F04F         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1487  002448  C013  F050         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1488  00244C  0012               	return		;funcret
  1489  00244E  FFFF               	dw	65535	; errata NOP
  1490  002450                     __end_of_tim2Init:
  1491                           	callstack 0
  1492                           
  1493 ;; *************** function _tim1Init *****************
  1494 ;; Defined at:
  1495 ;;		line 33 in file "timer.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;		None
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;		None
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  1    wreg      void 
  1502 ;; Registers used:
  1503 ;;		wreg, status,2
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1509 ;;      Params:         0       0       0       0       0       0       0
  1510 ;;      Locals:         0       0       0       0       0       0       0
  1511 ;;      Temps:          0       0       0       0       0       0       0
  1512 ;;      Totals:         0       0       0       0       0       0       0
  1513 ;;Total ram usage:        0 bytes
  1514 ;; Hardware stack levels used:    1
  1515 ;; Hardware stack levels required when called:    4
  1516 ;; This function calls:
  1517 ;;		Nothing
  1518 ;; This function is called by:
  1519 ;;		_main
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text3
  1524  002486                     __ptext3:
  1525                           	callstack 0
  1526  002486                     _tim1Init:
  1527                           	callstack 0
  1528  002486  FFFF               	dw	65535	; assembler added errata NOP
  1529  002488                     
  1530                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1531  002488  0E30               	movlw	48
  1532  00248A  12CD               	iorwf	205,f,c	;volatile
  1533  00248C                     
  1534                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1535  00248C  92CD               	bcf	205,1,c	;volatile
  1536  00248E                     
  1537                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1538  00248E  80CD               	bsf	205,0,c	;volatile
  1539  002490  0012               	return		;funcret
  1540  002492  FFFF               	dw	65535	; errata NOP
  1541  002494                     __end_of_tim1Init:
  1542                           	callstack 0
  1543                           
  1544 ;; *************** function _tim0Init *****************
  1545 ;; Defined at:
  1546 ;;		line 21 in file "timer.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;		None
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;		None
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  1    wreg      void 
  1553 ;; Registers used:
  1554 ;;		wreg, status,2
  1555 ;; Tracked objects:
  1556 ;;		On entry : 0/0
  1557 ;;		On exit  : 0/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1560 ;;      Params:         0       0       0       0       0       0       0
  1561 ;;      Locals:         0       0       0       0       0       0       0
  1562 ;;      Temps:          0       0       0       0       0       0       0
  1563 ;;      Totals:         0       0       0       0       0       0       0
  1564 ;;Total ram usage:        0 bytes
  1565 ;; Hardware stack levels used:    1
  1566 ;; Hardware stack levels required when called:    4
  1567 ;; This function calls:
  1568 ;;		Nothing
  1569 ;; This function is called by:
  1570 ;;		_main
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573                           
  1574                           	psect	text4
  1575  002450                     __ptext4:
  1576                           	callstack 0
  1577  002450                     _tim0Init:
  1578                           	callstack 0
  1579  002450  FFFF               	dw	65535	; assembler added errata NOP
  1580  002452                     
  1581                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1582  002452  9ED5               	bcf	213,7,c	;volatile
  1583                           
  1584                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1585  002454  9CD5               	bcf	213,6,c	;volatile
  1586                           
  1587                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1588  002456  9AD5               	bcf	213,5,c	;volatile
  1589                           
  1590                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1591  002458  86D5               	bsf	213,3,c	;volatile
  1592  00245A                     
  1593                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1594  00245A  0E07               	movlw	7
  1595  00245C  12D5               	iorwf	213,f,c	;volatile
  1596  00245E  0012               	return		;funcret
  1597  002460  FFFF               	dw	65535	; errata NOP
  1598  002462                     __end_of_tim0Init:
  1599                           	callstack 0
  1600                           
  1601 ;; *************** function _storeData *****************
  1602 ;; Defined at:
  1603 ;;		line 164 in file "usart.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;  data            1    wreg     unsigned char 
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;  data            1   26[COMRAM] unsigned char 
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  1    wreg      void 
  1610 ;; Registers used:
  1611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1617 ;;      Params:         0       0       0       0       0       0       0
  1618 ;;      Locals:         1       0       0       0       0       0       0
  1619 ;;      Temps:          2       0       0       0       0       0       0
  1620 ;;      Totals:         3       0       0       0       0       0       0
  1621 ;;Total ram usage:        3 bytes
  1622 ;; Hardware stack levels used:    1
  1623 ;; Hardware stack levels required when called:    6
  1624 ;; This function calls:
  1625 ;;		_printError
  1626 ;; This function is called by:
  1627 ;;		_main
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631                           	psect	text5
  1632  001642                     __ptext5:
  1633                           	callstack 0
  1634  001642                     _storeData:
  1635                           	callstack 0
  1636  001642  FFFF               	dw	65535	; assembler added errata NOP
  1637                           
  1638                           ;incstack = 0
  1639                           ;storeData@data stored from wreg
  1640  001644  6E1B               	movwf	storeData@data^0,c
  1641  001646                     
  1642                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  1643  001646  0E43               	movlw	low storeData@receivedMex
  1644  001648  245E               	addwf	storeData@counter^0,w,c
  1645  00164A  6ED9               	movwf	fsr2l,c
  1646  00164C  6ADA               	clrf	fsr2h,c
  1647  00164E  0E00               	movlw	high storeData@receivedMex
  1648  001650  22DA               	addwfc	fsr2h,f,c
  1649  001652  C01B  FFDF         	movff	storeData@data,indf2
  1650  001656                     
  1651                           ;usart.c: 175:     counter++;
  1652  001656  2A5E               	incf	storeData@counter^0,f,c
  1653                           
  1654                           ;usart.c: 178:     switch(receivedMex[0]){
  1655  001658  EF3D  F00B         	goto	l4267
  1656  00165C                     l4259:
  1657  00165C  FFFF               	dw	65535	; assembler added errata NOP
  1658                           
  1659                           ;usart.c: 180:             mexLength = 5;
  1660  00165E  0E05               	movlw	5
  1661  001660  6E6D               	movwf	storeData@mexLength^0,c
  1662                           
  1663                           ;usart.c: 181:             break;
  1664  001662  EF58  F00B         	goto	l4269
  1665  001666                     l4261:
  1666  001666  FFFF               	dw	65535	; assembler added errata NOP
  1667                           
  1668                           ;usart.c: 183:             mexLength = 9;
  1669  001668  0E09               	movlw	9
  1670  00166A  6E6D               	movwf	storeData@mexLength^0,c
  1671                           
  1672                           ;usart.c: 184:             break;
  1673  00166C  EF58  F00B         	goto	l4269
  1674  001670                     l4263:
  1675  001670  FFFF               	dw	65535	; assembler added errata NOP
  1676                           
  1677                           ;usart.c: 186:             mexLength = 1;
  1678  001672  0E01               	movlw	1
  1679  001674  6E6D               	movwf	storeData@mexLength^0,c
  1680                           
  1681                           ;usart.c: 187:             break;
  1682  001676  EF58  F00B         	goto	l4269
  1683  00167A                     l4267:
  1684  00167A  FFFF               	dw	65535	; assembler added errata NOP
  1685  00167C  5043               	movf	storeData@receivedMex^0,w,c
  1686  00167E  6E19               	movwf	??_storeData^0,c
  1687  001680  6A1A               	clrf	(??_storeData+1)^0,c
  1688                           
  1689                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1690                           ; Switch size 1, requested type "simple"
  1691                           ; Number of cases is 1, Range of values is 0 to 0
  1692                           ; switch strategies available:
  1693                           ; Name         Instructions Cycles
  1694                           ; simple_byte            4     3 (average)
  1695                           ;	Chosen strategy is simple_byte
  1696  001682  501A               	movf	(??_storeData+1)^0,w,c
  1697  001684  0A00               	xorlw	0	; case 0
  1698  001686  B4D8               	btfsc	status,2,c
  1699  001688  EF48  F00B         	goto	l4619
  1700  00168C  EF58  F00B         	goto	l4269
  1701  001690                     l4619:
  1702  001690  FFFF               	dw	65535	; assembler added errata NOP
  1703                           
  1704                           ; Switch size 1, requested type "simple"
  1705                           ; Number of cases is 3, Range of values is 0 to 2
  1706                           ; switch strategies available:
  1707                           ; Name         Instructions Cycles
  1708                           ; simple_byte           10     6 (average)
  1709                           ;	Chosen strategy is simple_byte
  1710  001692  5019               	movf	??_storeData^0,w,c
  1711  001694  0A00               	xorlw	0	; case 0
  1712  001696  B4D8               	btfsc	status,2,c
  1713  001698  EF2E  F00B         	goto	l4259
  1714  00169C  0A01               	xorlw	1	; case 1
  1715  00169E  B4D8               	btfsc	status,2,c
  1716  0016A0  EF33  F00B         	goto	l4261
  1717  0016A4  0A03               	xorlw	3	; case 2
  1718  0016A6  B4D8               	btfsc	status,2,c
  1719  0016A8  EF38  F00B         	goto	l4263
  1720  0016AC  EF58  F00B         	goto	l4269
  1721  0016B0                     l4269:
  1722  0016B0  FFFF               	dw	65535	; assembler added errata NOP
  1723                           
  1724                           ;usart.c: 194:     if(counter >= mexLength){
  1725  0016B2  506D               	movf	storeData@mexLength^0,w,c
  1726  0016B4  5C5E               	subwf	storeData@counter^0,w,c
  1727  0016B6  A0D8               	btfss	status,0,c
  1728  0016B8  EF60  F00B         	goto	u3741
  1729  0016BC  EF63  F00B         	goto	u3740
  1730  0016C0                     u3741:
  1731  0016C0  FFFF               	dw	65535	; assembler added errata NOP
  1732  0016C2  EFDB  F00B         	goto	l598
  1733  0016C6                     u3740:
  1734  0016C6  FFFF               	dw	65535	; assembler added errata NOP
  1735  0016C8                     
  1736                           ;usart.c: 195:         counter = 0;
  1737  0016C8  0E00               	movlw	0
  1738  0016CA  6E5E               	movwf	storeData@counter^0,c
  1739                           
  1740                           ;usart.c: 198:         switch(receivedMex[0]){
  1741  0016CC  EFC0  F00B         	goto	l4291
  1742  0016D0                     l4273:
  1743  0016D0  FFFF               	dw	65535	; assembler added errata NOP
  1744                           
  1745                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1746  0016D2  5061               	movf	_dataCounter^0,w,c
  1747  0016D4  0D04               	mullw	4
  1748  0016D6  0ECA               	movlw	low _dataSequence
  1749  0016D8  24F3               	addwf	243,w,c
  1750  0016DA  6ED9               	movwf	fsr2l,c
  1751  0016DC  0E00               	movlw	high _dataSequence
  1752  0016DE  20F4               	addwfc	prodh,w,c
  1753  0016E0  6EDA               	movwf	fsr2h,c
  1754  0016E2  C044  FFDF         	movff	storeData@receivedMex+1,indf2
  1755                           
  1756                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  1757  0016E6  5061               	movf	_dataCounter^0,w,c
  1758  0016E8  0D04               	mullw	4
  1759  0016EA  0ECB               	movlw	low (_dataSequence+1)
  1760  0016EC  24F3               	addwf	243,w,c
  1761  0016EE  6ED9               	movwf	fsr2l,c
  1762  0016F0  0E00               	movlw	high (_dataSequence+1)
  1763  0016F2  20F4               	addwfc	prodh,w,c
  1764  0016F4  6EDA               	movwf	fsr2h,c
  1765  0016F6  5045               	movf	(storeData@receivedMex+2)^0,w,c
  1766  0016F8  0D05               	mullw	5
  1767  0016FA  CFF3 FFDF          	movff	prodl,indf2
  1768                           
  1769                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  1770  0016FE  5061               	movf	_dataCounter^0,w,c
  1771  001700  0D04               	mullw	4
  1772  001702  0ECC               	movlw	low (_dataSequence+2)
  1773  001704  24F3               	addwf	243,w,c
  1774  001706  6ED9               	movwf	fsr2l,c
  1775  001708  0E00               	movlw	high (_dataSequence+2)
  1776  00170A  20F4               	addwfc	prodh,w,c
  1777  00170C  6EDA               	movwf	fsr2h,c
  1778  00170E  5046               	movf	(storeData@receivedMex+3)^0,w,c
  1779  001710  0D05               	mullw	5
  1780  001712  CFF3 FFDF          	movff	prodl,indf2
  1781                           
  1782                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1783  001716  5061               	movf	_dataCounter^0,w,c
  1784  001718  0D04               	mullw	4
  1785  00171A  0ECD               	movlw	low (_dataSequence+3)
  1786  00171C  24F3               	addwf	243,w,c
  1787  00171E  6ED9               	movwf	fsr2l,c
  1788  001720  0E00               	movlw	high (_dataSequence+3)
  1789  001722  20F4               	addwfc	prodh,w,c
  1790  001724  6EDA               	movwf	fsr2h,c
  1791  001726  C047  FFDF         	movff	storeData@receivedMex+4,indf2
  1792  00172A                     
  1793                           ;usart.c: 205:                 dataCounter++;
  1794  00172A  2A61               	incf	_dataCounter^0,f,c
  1795                           
  1796                           ;usart.c: 206:                 break;
  1797  00172C  EFDB  F00B         	goto	l598
  1798  001730                     l595:
  1799  001730  FFFF               	dw	65535	; assembler added errata NOP
  1800                           
  1801                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  1802  001732  C044  F0DE         	movff	storeData@receivedMex+1,_newSequenceData
  1803                           
  1804                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  1805  001736  C045  F0DF         	movff	storeData@receivedMex+2,_newSequenceData+1
  1806  00173A                     
  1807                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 5;
  1808  00173A  5046               	movf	(storeData@receivedMex+3)^0,w,c
  1809  00173C  0D05               	mullw	5
  1810  00173E  CFF3 F0E0          	movff	prodl,_newSequenceData+2
  1811                           
  1812                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 5;
  1813  001742  5047               	movf	(storeData@receivedMex+4)^0,w,c
  1814  001744  0D05               	mullw	5
  1815  001746  CFF3 F0E1          	movff	prodl,_newSequenceData+3
  1816  00174A                     
  1817                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  1818  00174A  C048  F0E2         	movff	storeData@receivedMex+5,_newSequenceData+4
  1819                           
  1820                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 5;
  1821  00174E  5049               	movf	(storeData@receivedMex+6)^0,w,c
  1822  001750  0D05               	mullw	5
  1823  001752  CFF3 F0E3          	movff	prodl,_newSequenceData+5
  1824                           
  1825                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 5;
  1826  001756  504A               	movf	(storeData@receivedMex+7)^0,w,c
  1827  001758  0D05               	mullw	5
  1828  00175A  CFF3 F0E4          	movff	prodl,_newSequenceData+6
  1829  00175E                     
  1830                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  1831  00175E  C04B  F0E5         	movff	storeData@receivedMex+8,_newSequenceData+7
  1832  001762                     
  1833                           ;usart.c: 218:                 _newSequence = 1;
  1834  001762  0E01               	movlw	1
  1835  001764  6E5F               	movwf	__newSequence^0,c
  1836                           
  1837                           ;usart.c: 219:                 break;
  1838  001766  EFDB  F00B         	goto	l598
  1839  00176A                     l4285:
  1840  00176A  FFFF               	dw	65535	; assembler added errata NOP
  1841                           
  1842                           ;usart.c: 222:                 _fatalError = 1;
  1843  00176C  0E01               	movlw	1
  1844  00176E  6E60               	movwf	__fatalError^0,c
  1845                           
  1846                           ;usart.c: 223:                 break;
  1847  001770  EFDB  F00B         	goto	l598
  1848  001774                     l4287:
  1849  001774  FFFF               	dw	65535	; assembler added errata NOP
  1850                           
  1851                           ;usart.c: 226:                 printError(8);
  1852  001776  0E08               	movlw	8
  1853  001778  EC36  F00D         	call	_printError
  1854                           
  1855                           ;usart.c: 227:                 break;
  1856  00177C  EFDB  F00B         	goto	l598
  1857  001780                     l4291:
  1858  001780  FFFF               	dw	65535	; assembler added errata NOP
  1859  001782  5043               	movf	storeData@receivedMex^0,w,c
  1860  001784  6E19               	movwf	??_storeData^0,c
  1861  001786  6A1A               	clrf	(??_storeData+1)^0,c
  1862                           
  1863                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1864                           ; Switch size 1, requested type "simple"
  1865                           ; Number of cases is 1, Range of values is 0 to 0
  1866                           ; switch strategies available:
  1867                           ; Name         Instructions Cycles
  1868                           ; simple_byte            4     3 (average)
  1869                           ;	Chosen strategy is simple_byte
  1870  001788  501A               	movf	(??_storeData+1)^0,w,c
  1871  00178A  0A00               	xorlw	0	; case 0
  1872  00178C  B4D8               	btfsc	status,2,c
  1873  00178E  EFCB  F00B         	goto	l4621
  1874  001792  EFBA  F00B         	goto	l4287
  1875  001796                     l4621:
  1876  001796  FFFF               	dw	65535	; assembler added errata NOP
  1877                           
  1878                           ; Switch size 1, requested type "simple"
  1879                           ; Number of cases is 3, Range of values is 0 to 2
  1880                           ; switch strategies available:
  1881                           ; Name         Instructions Cycles
  1882                           ; simple_byte           10     6 (average)
  1883                           ;	Chosen strategy is simple_byte
  1884  001798  5019               	movf	??_storeData^0,w,c
  1885  00179A  0A00               	xorlw	0	; case 0
  1886  00179C  B4D8               	btfsc	status,2,c
  1887  00179E  EF68  F00B         	goto	l4273
  1888  0017A2  0A01               	xorlw	1	; case 1
  1889  0017A4  B4D8               	btfsc	status,2,c
  1890  0017A6  EF98  F00B         	goto	l595
  1891  0017AA  0A03               	xorlw	3	; case 2
  1892  0017AC  B4D8               	btfsc	status,2,c
  1893  0017AE  EFB5  F00B         	goto	l4285
  1894  0017B2  EFBA  F00B         	goto	l4287
  1895  0017B6                     l598:
  1896  0017B6  FFFF               	dw	65535	; assembler added errata NOP
  1897  0017B8  0012               	return		;funcret
  1898  0017BA  FFFF               	dw	65535	; errata NOP
  1899  0017BC                     __end_of_storeData:
  1900                           	callstack 0
  1901                           
  1902 ;; *************** function _printError *****************
  1903 ;; Defined at:
  1904 ;;		line 111 in file "usart.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;  errCode         1    wreg     unsigned char 
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;  errCode         1   23[COMRAM] unsigned char 
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      void 
  1911 ;; Registers used:
  1912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1918 ;;      Params:         0       0       0       0       0       0       0
  1919 ;;      Locals:         1       0       0       0       0       0       0
  1920 ;;      Temps:          2       0       0       0       0       0       0
  1921 ;;      Totals:         3       0       0       0       0       0       0
  1922 ;;Total ram usage:        3 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; Hardware stack levels required when called:    5
  1925 ;; This function calls:
  1926 ;;		_uartTx
  1927 ;; This function is called by:
  1928 ;;		_main
  1929 ;;		_storeData
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           	psect	text6
  1934  001A6C                     __ptext6:
  1935                           	callstack 0
  1936  001A6C                     _printError:
  1937                           	callstack 0
  1938  001A6C  FFFF               	dw	65535	; assembler added errata NOP
  1939                           
  1940                           ;incstack = 0
  1941                           ;printError@errCode stored from wreg
  1942  001A6E  6E18               	movwf	printError@errCode^0,c
  1943  001A70                     
  1944                           ;usart.c: 113:     switch(errCode){
  1945  001A70  EF92  F00D         	goto	l4115
  1946  001A74                     l4097:
  1947  001A74  FFFF               	dw	65535	; assembler added errata NOP
  1948                           
  1949                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1950  001A76  0E94               	movlw	low _errString_Feed
  1951  001A78  6E12               	movwf	uartTx@ptr^0,c
  1952  001A7A  0E00               	movlw	high _errString_Feed
  1953  001A7C  6E13               	movwf	(uartTx@ptr+1)^0,c
  1954  001A7E  0E1E               	movlw	30
  1955  001A80  6E14               	movwf	uartTx@length^0,c
  1956  001A82  EC1F  F011         	call	_uartTx	;wreg free
  1957                           
  1958                           ;usart.c: 116:             break;
  1959  001A86  EFC1  F00D         	goto	l565
  1960  001A8A                     l4099:
  1961  001A8A  FFFF               	dw	65535	; assembler added errata NOP
  1962                           
  1963                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1964  001A8C  0E5E               	movlw	low _errString_ZEND
  1965  001A8E  6E12               	movwf	uartTx@ptr^0,c
  1966  001A90  0E01               	movlw	high _errString_ZEND
  1967  001A92  6E13               	movwf	(uartTx@ptr+1)^0,c
  1968  001A94  0E29               	movlw	41
  1969  001A96  6E14               	movwf	uartTx@length^0,c
  1970  001A98  EC1F  F011         	call	_uartTx	;wreg free
  1971                           
  1972                           ;usart.c: 119:             break;
  1973  001A9C  EFC1  F00D         	goto	l565
  1974  001AA0                     l4101:
  1975  001AA0  FFFF               	dw	65535	; assembler added errata NOP
  1976                           
  1977                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1978  001AA2  0E87               	movlw	low _errString_Reset
  1979  001AA4  6E12               	movwf	uartTx@ptr^0,c
  1980  001AA6  0E01               	movlw	high _errString_Reset
  1981  001AA8  6E13               	movwf	(uartTx@ptr+1)^0,c
  1982  001AAA  0E28               	movlw	40
  1983  001AAC  6E14               	movwf	uartTx@length^0,c
  1984  001AAE  EC1F  F011         	call	_uartTx	;wreg free
  1985                           
  1986                           ;usart.c: 122:             break;
  1987  001AB2  EFC1  F00D         	goto	l565
  1988  001AB6                     l4103:
  1989  001AB6  FFFF               	dw	65535	; assembler added errata NOP
  1990                           
  1991                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1992  001AB8  0E35               	movlw	low _errString_Point
  1993  001ABA  6E12               	movwf	uartTx@ptr^0,c
  1994  001ABC  0E01               	movlw	high _errString_Point
  1995  001ABE  6E13               	movwf	(uartTx@ptr+1)^0,c
  1996  001AC0  0E29               	movlw	41
  1997  001AC2  6E14               	movwf	uartTx@length^0,c
  1998  001AC4  EC1F  F011         	call	_uartTx	;wreg free
  1999                           
  2000                           ;usart.c: 125:             break;
  2001  001AC8  EFC1  F00D         	goto	l565
  2002  001ACC                     l4105:
  2003  001ACC  FFFF               	dw	65535	; assembler added errata NOP
  2004                           
  2005                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2006  001ACE  0ED6               	movlw	low _errString_Bound
  2007  001AD0  6E12               	movwf	uartTx@ptr^0,c
  2008  001AD2  0E01               	movlw	high _errString_Bound
  2009  001AD4  6E13               	movwf	(uartTx@ptr+1)^0,c
  2010  001AD6  0E21               	movlw	33
  2011  001AD8  6E14               	movwf	uartTx@length^0,c
  2012  001ADA  EC1F  F011         	call	_uartTx	;wreg free
  2013                           
  2014                           ;usart.c: 128:             break;
  2015  001ADE  EFC1  F00D         	goto	l565
  2016  001AE2                     l4107:
  2017  001AE2  FFFF               	dw	65535	; assembler added errata NOP
  2018                           
  2019                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2020  001AE4  0E00               	movlw	low _errString_PointZ
  2021  001AE6  6E12               	movwf	uartTx@ptr^0,c
  2022  001AE8  0E01               	movlw	high _errString_PointZ
  2023  001AEA  6E13               	movwf	(uartTx@ptr+1)^0,c
  2024  001AEC  0E35               	movlw	53
  2025  001AEE  6E14               	movwf	uartTx@length^0,c
  2026  001AF0  EC1F  F011         	call	_uartTx	;wreg free
  2027                           
  2028                           ;usart.c: 131:             break;
  2029  001AF4  EFC1  F00D         	goto	l565
  2030  001AF8                     l4109:
  2031  001AF8  FFFF               	dw	65535	; assembler added errata NOP
  2032                           
  2033                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2034  001AFA  0EAF               	movlw	low _errString_Fatal
  2035  001AFC  6E12               	movwf	uartTx@ptr^0,c
  2036  001AFE  0E01               	movlw	high _errString_Fatal
  2037  001B00  6E13               	movwf	(uartTx@ptr+1)^0,c
  2038  001B02  0E27               	movlw	39
  2039  001B04  6E14               	movwf	uartTx@length^0,c
  2040  001B06  EC1F  F011         	call	_uartTx	;wreg free
  2041                           
  2042                           ;usart.c: 134:             break;
  2043  001B0A  EFC1  F00D         	goto	l565
  2044  001B0E                     l4111:
  2045  001B0E  FFFF               	dw	65535	; assembler added errata NOP
  2046                           
  2047                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2048  001B10  0EB2               	movlw	low _errString_Command
  2049  001B12  6E12               	movwf	uartTx@ptr^0,c
  2050  001B14  0E00               	movlw	high _errString_Command
  2051  001B16  6E13               	movwf	(uartTx@ptr+1)^0,c
  2052  001B18  0E18               	movlw	24
  2053  001B1A  6E14               	movwf	uartTx@length^0,c
  2054  001B1C  EC1F  F011         	call	_uartTx	;wreg free
  2055                           
  2056                           ;usart.c: 137:             break;
  2057  001B20  EFC1  F00D         	goto	l565
  2058  001B24                     l4115:
  2059  001B24  FFFF               	dw	65535	; assembler added errata NOP
  2060  001B26  5018               	movf	printError@errCode^0,w,c
  2061  001B28  6E16               	movwf	??_printError^0,c
  2062  001B2A  6A17               	clrf	(??_printError+1)^0,c
  2063                           
  2064                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2065                           ; Switch size 1, requested type "simple"
  2066                           ; Number of cases is 1, Range of values is 0 to 0
  2067                           ; switch strategies available:
  2068                           ; Name         Instructions Cycles
  2069                           ; simple_byte            4     3 (average)
  2070                           ;	Chosen strategy is simple_byte
  2071  001B2C  5017               	movf	(??_printError+1)^0,w,c
  2072  001B2E  0A00               	xorlw	0	; case 0
  2073  001B30  B4D8               	btfsc	status,2,c
  2074  001B32  EF9D  F00D         	goto	l4623
  2075  001B36  EFC1  F00D         	goto	l565
  2076  001B3A                     l4623:
  2077  001B3A  FFFF               	dw	65535	; assembler added errata NOP
  2078                           
  2079                           ; Switch size 1, requested type "simple"
  2080                           ; Number of cases is 8, Range of values is 1 to 8
  2081                           ; switch strategies available:
  2082                           ; Name         Instructions Cycles
  2083                           ; simple_byte           25    13 (average)
  2084                           ;	Chosen strategy is simple_byte
  2085  001B3C  5016               	movf	??_printError^0,w,c
  2086  001B3E  0A01               	xorlw	1	; case 1
  2087  001B40  B4D8               	btfsc	status,2,c
  2088  001B42  EF3A  F00D         	goto	l4097
  2089  001B46  0A03               	xorlw	3	; case 2
  2090  001B48  B4D8               	btfsc	status,2,c
  2091  001B4A  EF45  F00D         	goto	l4099
  2092  001B4E  0A01               	xorlw	1	; case 3
  2093  001B50  B4D8               	btfsc	status,2,c
  2094  001B52  EF50  F00D         	goto	l4101
  2095  001B56  0A07               	xorlw	7	; case 4
  2096  001B58  B4D8               	btfsc	status,2,c
  2097  001B5A  EF5B  F00D         	goto	l4103
  2098  001B5E  0A01               	xorlw	1	; case 5
  2099  001B60  B4D8               	btfsc	status,2,c
  2100  001B62  EF66  F00D         	goto	l4105
  2101  001B66  0A03               	xorlw	3	; case 6
  2102  001B68  B4D8               	btfsc	status,2,c
  2103  001B6A  EF71  F00D         	goto	l4107
  2104  001B6E  0A01               	xorlw	1	; case 7
  2105  001B70  B4D8               	btfsc	status,2,c
  2106  001B72  EF7C  F00D         	goto	l4109
  2107  001B76  0A0F               	xorlw	15	; case 8
  2108  001B78  B4D8               	btfsc	status,2,c
  2109  001B7A  EF87  F00D         	goto	l4111
  2110  001B7E  EFC1  F00D         	goto	l565
  2111  001B82                     l565:
  2112  001B82  FFFF               	dw	65535	; assembler added errata NOP
  2113  001B84  0012               	return		;funcret
  2114  001B86  FFFF               	dw	65535	; errata NOP
  2115  001B88                     __end_of_printError:
  2116                           	callstack 0
  2117                           
  2118 ;; *************** function _uartTx *****************
  2119 ;; Defined at:
  2120 ;;		line 148 in file "usart.c"
  2121 ;; Parameters:    Size  Location     Type
  2122 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2123 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2124 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2125 ;;  length          1   19[COMRAM] unsigned char 
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;  i               1   20[COMRAM] unsigned char 
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  1    wreg      void 
  2130 ;; Registers used:
  2131 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2137 ;;      Params:         3       0       0       0       0       0       0
  2138 ;;      Locals:         1       0       0       0       0       0       0
  2139 ;;      Temps:          0       0       0       0       0       0       0
  2140 ;;      Totals:         4       0       0       0       0       0       0
  2141 ;;Total ram usage:        4 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; Hardware stack levels required when called:    4
  2144 ;; This function calls:
  2145 ;;		Nothing
  2146 ;; This function is called by:
  2147 ;;		_printError
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151                           	psect	text7
  2152  00223E                     __ptext7:
  2153                           	callstack 0
  2154  00223E                     _uartTx:
  2155                           	callstack 0
  2156  00223E  FFFF               	dw	65535	; assembler added errata NOP
  2157  002240                     
  2158                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  2159  002240  0E01               	movlw	1
  2160  002242  6E15               	movwf	uartTx@i^0,c
  2161  002244  EF38  F011         	goto	l3601
  2162  002248                     l3597:
  2163  002248  FFFF               	dw	65535	; assembler added errata NOP
  2164                           
  2165                           ;usart.c: 153:         TXREG = *ptr;
  2166  00224A  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2167  00224E  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2168  002252  50DF               	movf	indf2,w,c
  2169  002254  6EAD               	movwf	173,c	;volatile
  2170  002256                     l570:
  2171  002256  FFFF               	dw	65535	; assembler added errata NOP
  2172  002258  A2AC               	btfss	172,1,c	;volatile
  2173  00225A  EF31  F011         	goto	u2721
  2174  00225E  EF34  F011         	goto	u2720
  2175  002262                     u2721:
  2176  002262  FFFF               	dw	65535	; assembler added errata NOP
  2177  002264  EF2B  F011         	goto	l570
  2178  002268                     u2720:
  2179  002268  FFFF               	dw	65535	; assembler added errata NOP
  2180  00226A                     
  2181                           ;usart.c: 157:         ptr++;
  2182  00226A  4A12               	infsnz	uartTx@ptr^0,f,c
  2183  00226C  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2184                           
  2185                           ;usart.c: 158:     }
  2186  00226E  2A15               	incf	uartTx@i^0,f,c
  2187  002270                     l3601:
  2188  002270  FFFF               	dw	65535	; assembler added errata NOP
  2189  002272  5014               	movf	uartTx@length^0,w,c
  2190  002274  5C15               	subwf	uartTx@i^0,w,c
  2191  002276  A0D8               	btfss	status,0,c
  2192  002278  EF40  F011         	goto	u2731
  2193  00227C  EF43  F011         	goto	u2730
  2194  002280                     u2731:
  2195  002280  FFFF               	dw	65535	; assembler added errata NOP
  2196  002282  EF24  F011         	goto	l3597
  2197  002286                     u2730:
  2198  002286  FFFF               	dw	65535	; assembler added errata NOP
  2199  002288  0012               	return		;funcret
  2200  00228A  FFFF               	dw	65535	; errata NOP
  2201  00228C                     __end_of_uartTx:
  2202                           	callstack 0
  2203                           
  2204 ;; *************** function _shiftData *****************
  2205 ;; Defined at:
  2206 ;;		line 81 in file "usart.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;		None
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;  i               1   19[COMRAM] unsigned char 
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  1    wreg      void 
  2213 ;; Registers used:
  2214 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2220 ;;      Params:         0       0       0       0       0       0       0
  2221 ;;      Locals:         1       0       0       0       0       0       0
  2222 ;;      Temps:          2       0       0       0       0       0       0
  2223 ;;      Totals:         3       0       0       0       0       0       0
  2224 ;;Total ram usage:        3 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    4
  2227 ;; This function calls:
  2228 ;;		Nothing
  2229 ;; This function is called by:
  2230 ;;		_main
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text8
  2235  0021DE                     __ptext8:
  2236                           	callstack 0
  2237  0021DE                     _shiftData:
  2238                           	callstack 0
  2239  0021DE  FFFF               	dw	65535	; assembler added errata NOP
  2240  0021E0                     
  2241                           ;usart.c: 82:     char i;;usart.c: 84:     for(i = 0; i < 4; i++){
  2242  0021E0  0E00               	movlw	0
  2243  0021E2  6E14               	movwf	shiftData@i^0,c
  2244  0021E4                     l4411:
  2245  0021E4  FFFF               	dw	65535	; assembler added errata NOP
  2246                           
  2247                           ;usart.c: 85:         dataSequence[i] = dataSequence[i+1];
  2248  0021E6  5014               	movf	shiftData@i^0,w,c
  2249  0021E8  6E12               	movwf	??_shiftData^0,c
  2250  0021EA  6A13               	clrf	(??_shiftData+1)^0,c
  2251  0021EC  90D8               	bcf	status,0,c
  2252  0021EE  3612               	rlcf	??_shiftData^0,f,c
  2253  0021F0  3613               	rlcf	(??_shiftData+1)^0,f,c
  2254  0021F2  90D8               	bcf	status,0,c
  2255  0021F4  3612               	rlcf	??_shiftData^0,f,c
  2256  0021F6  3613               	rlcf	(??_shiftData+1)^0,f,c
  2257  0021F8  0ECE               	movlw	low (_dataSequence+4)
  2258  0021FA  2412               	addwf	??_shiftData^0,w,c
  2259  0021FC  6ED9               	movwf	fsr2l,c
  2260  0021FE  0E00               	movlw	high (_dataSequence+4)
  2261  002200  2013               	addwfc	(??_shiftData+1)^0,w,c
  2262  002202  6EDA               	movwf	fsr2h,c
  2263  002204  5014               	movf	shiftData@i^0,w,c
  2264  002206  0D04               	mullw	4
  2265  002208  0ECA               	movlw	low _dataSequence
  2266  00220A  24F3               	addwf	243,w,c
  2267  00220C  6EE1               	movwf	fsr1l,c
  2268  00220E  0E00               	movlw	high _dataSequence
  2269  002210  20F4               	addwfc	prodh,w,c
  2270  002212  6EE2               	movwf	fsr1h,c
  2271  002214  CFDE FFE6          	movff	postinc2,postinc1
  2272  002218  CFDE FFE6          	movff	postinc2,postinc1
  2273  00221C  CFDE FFE6          	movff	postinc2,postinc1
  2274  002220  CFDE FFE6          	movff	postinc2,postinc1
  2275  002224                     
  2276                           ;usart.c: 86:     }
  2277  002224  2A14               	incf	shiftData@i^0,f,c
  2278  002226  0E03               	movlw	3
  2279  002228  6414               	cpfsgt	shiftData@i^0,c
  2280  00222A  EF19  F011         	goto	u3811
  2281  00222E  EF1C  F011         	goto	u3810
  2282  002232                     u3811:
  2283  002232  FFFF               	dw	65535	; assembler added errata NOP
  2284  002234  EFF2  F010         	goto	l4411
  2285  002238                     u3810:
  2286  002238  FFFF               	dw	65535	; assembler added errata NOP
  2287  00223A  0012               	return		;funcret
  2288  00223C  FFFF               	dw	65535	; errata NOP
  2289  00223E                     __end_of_shiftData:
  2290                           	callstack 0
  2291                           
  2292 ;; *************** function _resetPosition *****************
  2293 ;; Defined at:
  2294 ;;		line 165 in file "motors.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;		None
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2299 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2300 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2301 ;; Return value:  Size  Location     Type
  2302 ;;                  1    wreg      unsigned char 
  2303 ;; Registers used:
  2304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2305 ;; Tracked objects:
  2306 ;;		On entry : 0/0
  2307 ;;		On exit  : 0/0
  2308 ;;		Unchanged: 0/0
  2309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2310 ;;      Params:         0       0       0       0       0       0       0
  2311 ;;      Locals:         3       0       0       0       0       0       0
  2312 ;;      Temps:          0       0       0       0       0       0       0
  2313 ;;      Totals:         3       0       0       0       0       0       0
  2314 ;;Total ram usage:        3 bytes
  2315 ;; Hardware stack levels used:    1
  2316 ;; Hardware stack levels required when called:    5
  2317 ;; This function calls:
  2318 ;;		_resetStep
  2319 ;;		_resetTM0_Temp
  2320 ;;		_resetTM2_Temp
  2321 ;;		_stepMade
  2322 ;; This function is called by:
  2323 ;;		_main
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           	psect	text9
  2328  0012B4                     __ptext9:
  2329                           	callstack 0
  2330  0012B4                     _resetPosition:
  2331                           	callstack 0
  2332  0012B4  FFFF               	dw	65535	; assembler added errata NOP
  2333  0012B6                     
  2334                           ;motors.c: 185:     motCounter[0][1] = -1;
  2335  0012B6  6868               	setf	(_motCounter+1)^0,c
  2336                           
  2337                           ;motors.c: 186:     motCounter[1][1] = -1;
  2338  0012B8  686A               	setf	(_motCounter+3)^0,c
  2339                           
  2340                           ;motors.c: 187:     motCounter[2][1] = -1;
  2341  0012BA  686C               	setf	(_motCounter+5)^0,c
  2342  0012BC                     
  2343                           ;motors.c: 192:     unsigned char keepMovingX = 1;
  2344  0012BC  0E01               	movlw	1
  2345  0012BE  6E15               	movwf	resetPosition@keepMovingX^0,c
  2346                           
  2347                           ;motors.c: 193:     unsigned char keepMovingY = 1;
  2348  0012C0  0E01               	movlw	1
  2349  0012C2  6E16               	movwf	resetPosition@keepMovingY^0,c
  2350                           
  2351                           ;motors.c: 194:     unsigned char keepMovingZ = 1;
  2352  0012C4  0E01               	movlw	1
  2353  0012C6  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2354  0012C8                     
  2355                           ;motors.c: 197:     T2CONbits.TMR2ON = 1;
  2356  0012C8  84CA               	bsf	202,2,c	;volatile
  2357                           
  2358                           ;motors.c: 199:     tm0Error = 0;
  2359  0012CA  0E00               	movlw	0
  2360  0012CC  6E5A               	movwf	(_tm0Error+1)^0,c
  2361  0012CE  0E00               	movlw	0
  2362  0012D0  6E59               	movwf	_tm0Error^0,c
  2363                           
  2364                           ;motors.c: 200:     tm0Limit = 200;
  2365  0012D2  0EC8               	movlw	200
  2366  0012D4  6E66               	movwf	_tm0Limit^0,c
  2367  0012D6                     
  2368                           ;motors.c: 201:     T0CONbits.TMR0ON = 1;
  2369  0012D6  8ED5               	bsf	213,7,c	;volatile
  2370                           
  2371                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2372  0012D8  EF1C  F00A         	goto	l4195
  2373  0012DC                     l4153:
  2374  0012DC  FFFF               	dw	65535	; assembler added errata NOP
  2375                           
  2376                           ;motors.c: 205:         resetStep();
  2377  0012DE  EC98  F012         	call	_resetStep	;wreg free
  2378  0012E2                     
  2379                           ;motors.c: 208:         if(tm0Error){
  2380  0012E2  5059               	movf	_tm0Error^0,w,c
  2381  0012E4  105A               	iorwf	(_tm0Error+1)^0,w,c
  2382  0012E6  B4D8               	btfsc	status,2,c
  2383  0012E8  EF78  F009         	goto	u3581
  2384  0012EC  EF7B  F009         	goto	u3580
  2385  0012F0                     u3581:
  2386  0012F0  FFFF               	dw	65535	; assembler added errata NOP
  2387  0012F2  EF82  F009         	goto	l135
  2388  0012F6                     u3580:
  2389  0012F6  FFFF               	dw	65535	; assembler added errata NOP
  2390  0012F8                     
  2391                           ;motors.c: 216:             tm0Error = 3;
  2392  0012F8  0E00               	movlw	0
  2393  0012FA  6E5A               	movwf	(_tm0Error+1)^0,c
  2394  0012FC  0E03               	movlw	3
  2395  0012FE  6E59               	movwf	_tm0Error^0,c
  2396                           
  2397                           ;motors.c: 217:             break;
  2398  001300  EF3A  F00A         	goto	l136
  2399  001304                     l135:
  2400  001304  FFFF               	dw	65535	; assembler added errata NOP
  2401                           
  2402                           ;motors.c: 224:         if(PORTEbits.RE0 || !keepMovingX){
  2403  001306  B084               	btfsc	132,0,c	;volatile
  2404  001308  EF88  F009         	goto	u3591
  2405  00130C  EF8B  F009         	goto	u3590
  2406  001310                     u3591:
  2407  001310  FFFF               	dw	65535	; assembler added errata NOP
  2408  001312  EF95  F009         	goto	l4161
  2409  001316                     u3590:
  2410  001316  FFFF               	dw	65535	; assembler added errata NOP
  2411  001318  5015               	movf	resetPosition@keepMovingX^0,w,c
  2412  00131A  A4D8               	btfss	status,2,c
  2413  00131C  EF92  F009         	goto	u3601
  2414  001320  EF95  F009         	goto	u3600
  2415  001324                     u3601:
  2416  001324  FFFF               	dw	65535	; assembler added errata NOP
  2417  001326  EF9A  F009         	goto	l4163
  2418  00132A                     u3600:
  2419  00132A                     l4161:
  2420  00132A  FFFF               	dw	65535	; assembler added errata NOP
  2421                           
  2422                           ;motors.c: 226:             keepMovingX = 0;
  2423  00132C  0E00               	movlw	0
  2424  00132E  6E15               	movwf	resetPosition@keepMovingX^0,c
  2425                           
  2426                           ;motors.c: 227:         }else{
  2427  001330  EFB1  F009         	goto	l4169
  2428  001334                     l4163:
  2429  001334  FFFF               	dw	65535	; assembler added errata NOP
  2430                           
  2431                           ;motors.c: 233:             motCounter[0][0] += motCounter[0][1];
  2432  001336  5068               	movf	(_motCounter+1)^0,w,c
  2433  001338  2667               	addwf	_motCounter^0,f,c
  2434                           
  2435                           ;motors.c: 234:             if(motCounter[0][0] < 0){
  2436  00133A  BE67               	btfsc	_motCounter^0,7,c
  2437  00133C  EFA5  F009         	goto	u3610
  2438  001340  EFA2  F009         	goto	u3611
  2439  001344                     u3611:
  2440  001344  FFFF               	dw	65535	; assembler added errata NOP
  2441  001346  EFA8  F009         	goto	l4167
  2442  00134A                     u3610:
  2443  00134A  FFFF               	dw	65535	; assembler added errata NOP
  2444  00134C                     
  2445                           ;motors.c: 235:                 motCounter[0][0] = 3;
  2446  00134C  0E03               	movlw	3
  2447  00134E  6E67               	movwf	_motCounter^0,c
  2448  001350                     l4167:
  2449  001350  FFFF               	dw	65535	; assembler added errata NOP
  2450                           
  2451                           ;motors.c: 238:             LATA = stepMot1[motCounter[0][0]];
  2452  001352  0E8C               	movlw	low _stepMot1
  2453  001354  2467               	addwf	_motCounter^0,w,c
  2454  001356  6ED9               	movwf	fsr2l,c
  2455  001358  6ADA               	clrf	fsr2h,c
  2456  00135A  0E00               	movlw	high _stepMot1
  2457  00135C  22DA               	addwfc	fsr2h,f,c
  2458  00135E  50DF               	movf	indf2,w,c
  2459  001360  6E89               	movwf	137,c	;volatile
  2460  001362                     l4169:
  2461  001362  FFFF               	dw	65535	; assembler added errata NOP
  2462                           
  2463                           ;motors.c: 243:         if(PORTEbits.RE1 || !keepMovingY){
  2464  001364  B284               	btfsc	132,1,c	;volatile
  2465  001366  EFB7  F009         	goto	u3621
  2466  00136A  EFBA  F009         	goto	u3620
  2467  00136E                     u3621:
  2468  00136E  FFFF               	dw	65535	; assembler added errata NOP
  2469  001370  EFC4  F009         	goto	l4173
  2470  001374                     u3620:
  2471  001374  FFFF               	dw	65535	; assembler added errata NOP
  2472  001376  5016               	movf	resetPosition@keepMovingY^0,w,c
  2473  001378  A4D8               	btfss	status,2,c
  2474  00137A  EFC1  F009         	goto	u3631
  2475  00137E  EFC4  F009         	goto	u3630
  2476  001382                     u3631:
  2477  001382  FFFF               	dw	65535	; assembler added errata NOP
  2478  001384  EFC9  F009         	goto	l4175
  2479  001388                     u3630:
  2480  001388                     l4173:
  2481  001388  FFFF               	dw	65535	; assembler added errata NOP
  2482                           
  2483                           ;motors.c: 245:             keepMovingY = 0;
  2484  00138A  0E00               	movlw	0
  2485  00138C  6E16               	movwf	resetPosition@keepMovingY^0,c
  2486                           
  2487                           ;motors.c: 246:         }else{
  2488  00138E  EFE0  F009         	goto	l4181
  2489  001392                     l4175:
  2490  001392  FFFF               	dw	65535	; assembler added errata NOP
  2491                           
  2492                           ;motors.c: 252:             motCounter[1][0] += motCounter[1][1];
  2493  001394  506A               	movf	(_motCounter+3)^0,w,c
  2494  001396  2669               	addwf	(_motCounter+2)^0,f,c
  2495                           
  2496                           ;motors.c: 253:             if(motCounter[1][0] < 0){
  2497  001398  BE69               	btfsc	(_motCounter+2)^0,7,c
  2498  00139A  EFD4  F009         	goto	u3640
  2499  00139E  EFD1  F009         	goto	u3641
  2500  0013A2                     u3641:
  2501  0013A2  FFFF               	dw	65535	; assembler added errata NOP
  2502  0013A4  EFD7  F009         	goto	l4179
  2503  0013A8                     u3640:
  2504  0013A8  FFFF               	dw	65535	; assembler added errata NOP
  2505  0013AA                     
  2506                           ;motors.c: 254:                 motCounter[1][0] = 3;
  2507  0013AA  0E03               	movlw	3
  2508  0013AC  6E69               	movwf	(_motCounter+2)^0,c
  2509  0013AE                     l4179:
  2510  0013AE  FFFF               	dw	65535	; assembler added errata NOP
  2511                           
  2512                           ;motors.c: 257:             LATB = stepMot2[motCounter[1][0]];
  2513  0013B0  0E88               	movlw	low _stepMot2
  2514  0013B2  2469               	addwf	(_motCounter+2)^0,w,c
  2515  0013B4  6ED9               	movwf	fsr2l,c
  2516  0013B6  6ADA               	clrf	fsr2h,c
  2517  0013B8  0E00               	movlw	high _stepMot2
  2518  0013BA  22DA               	addwfc	fsr2h,f,c
  2519  0013BC  50DF               	movf	indf2,w,c
  2520  0013BE  6E8A               	movwf	138,c	;volatile
  2521  0013C0                     l4181:
  2522  0013C0  FFFF               	dw	65535	; assembler added errata NOP
  2523                           
  2524                           ;motors.c: 262:         if(PORTEbits.RE2 || !keepMovingZ){
  2525  0013C2  B484               	btfsc	132,2,c	;volatile
  2526  0013C4  EFE6  F009         	goto	u3651
  2527  0013C8  EFE9  F009         	goto	u3650
  2528  0013CC                     u3651:
  2529  0013CC  FFFF               	dw	65535	; assembler added errata NOP
  2530  0013CE  EFF3  F009         	goto	l4185
  2531  0013D2                     u3650:
  2532  0013D2  FFFF               	dw	65535	; assembler added errata NOP
  2533  0013D4  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2534  0013D6  A4D8               	btfss	status,2,c
  2535  0013D8  EFF0  F009         	goto	u3661
  2536  0013DC  EFF3  F009         	goto	u3660
  2537  0013E0                     u3661:
  2538  0013E0  FFFF               	dw	65535	; assembler added errata NOP
  2539  0013E2  EFF8  F009         	goto	l4187
  2540  0013E6                     u3660:
  2541  0013E6                     l4185:
  2542  0013E6  FFFF               	dw	65535	; assembler added errata NOP
  2543                           
  2544                           ;motors.c: 264:             keepMovingZ = 0;
  2545  0013E8  0E00               	movlw	0
  2546  0013EA  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2547                           
  2548                           ;motors.c: 265:         }else{
  2549  0013EC  EF0F  F00A         	goto	l4193
  2550  0013F0                     l4187:
  2551  0013F0  FFFF               	dw	65535	; assembler added errata NOP
  2552                           
  2553                           ;motors.c: 271:             motCounter[2][0] += motCounter[2][1];
  2554  0013F2  506C               	movf	(_motCounter+5)^0,w,c
  2555  0013F4  266B               	addwf	(_motCounter+4)^0,f,c
  2556                           
  2557                           ;motors.c: 272:             if(motCounter[2][0] < 0){
  2558  0013F6  BE6B               	btfsc	(_motCounter+4)^0,7,c
  2559  0013F8  EF03  F00A         	goto	u3670
  2560  0013FC  EF00  F00A         	goto	u3671
  2561  001400                     u3671:
  2562  001400  FFFF               	dw	65535	; assembler added errata NOP
  2563  001402  EF06  F00A         	goto	l4191
  2564  001406                     u3670:
  2565  001406  FFFF               	dw	65535	; assembler added errata NOP
  2566  001408                     
  2567                           ;motors.c: 273:                 motCounter[2][0] = 3;
  2568  001408  0E03               	movlw	3
  2569  00140A  6E6B               	movwf	(_motCounter+4)^0,c
  2570  00140C                     l4191:
  2571  00140C  FFFF               	dw	65535	; assembler added errata NOP
  2572                           
  2573                           ;motors.c: 276:             LATC = stepMot3[motCounter[2][0]];
  2574  00140E  0E84               	movlw	low _stepMot3
  2575  001410  246B               	addwf	(_motCounter+4)^0,w,c
  2576  001412  6ED9               	movwf	fsr2l,c
  2577  001414  6ADA               	clrf	fsr2h,c
  2578  001416  0E00               	movlw	high _stepMot3
  2579  001418  22DA               	addwfc	fsr2h,f,c
  2580  00141A  50DF               	movf	indf2,w,c
  2581  00141C  6E8B               	movwf	139,c	;volatile
  2582  00141E                     l4193:
  2583  00141E  FFFF               	dw	65535	; assembler added errata NOP
  2584  001420  EC15  F012         	call	_stepMade	;wreg free
  2585  001424  5012               	movf	?_stepMade^0,w,c
  2586  001426  1013               	iorwf	(?_stepMade+1)^0,w,c
  2587  001428  B4D8               	btfsc	status,2,c
  2588  00142A  EF19  F00A         	goto	u3681
  2589  00142E  EF1C  F00A         	goto	u3680
  2590  001432                     u3681:
  2591  001432  FFFF               	dw	65535	; assembler added errata NOP
  2592  001434  EF0F  F00A         	goto	l4193
  2593  001438                     u3680:
  2594  001438                     l4195:
  2595  001438  FFFF               	dw	65535	; assembler added errata NOP
  2596                           
  2597                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2598  00143A  5015               	movf	resetPosition@keepMovingX^0,w,c
  2599  00143C  A4D8               	btfss	status,2,c
  2600  00143E  EF23  F00A         	goto	u3691
  2601  001442  EF26  F00A         	goto	u3690
  2602  001446                     u3691:
  2603  001446  FFFF               	dw	65535	; assembler added errata NOP
  2604  001448  EF6E  F009         	goto	l4153
  2605  00144C                     u3690:
  2606  00144C  FFFF               	dw	65535	; assembler added errata NOP
  2607  00144E  5016               	movf	resetPosition@keepMovingY^0,w,c
  2608  001450  A4D8               	btfss	status,2,c
  2609  001452  EF2D  F00A         	goto	u3701
  2610  001456  EF30  F00A         	goto	u3700
  2611  00145A                     u3701:
  2612  00145A  FFFF               	dw	65535	; assembler added errata NOP
  2613  00145C  EF6E  F009         	goto	l4153
  2614  001460                     u3700:
  2615  001460  FFFF               	dw	65535	; assembler added errata NOP
  2616  001462  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2617  001464  A4D8               	btfss	status,2,c
  2618  001466  EF37  F00A         	goto	u3711
  2619  00146A  EF3A  F00A         	goto	u3710
  2620  00146E                     u3711:
  2621  00146E  FFFF               	dw	65535	; assembler added errata NOP
  2622  001470  EF6E  F009         	goto	l4153
  2623  001474                     u3710:
  2624  001474                     l136:
  2625  001474  FFFF               	dw	65535	; assembler added errata NOP
  2626                           
  2627                           ;motors.c: 296:     T0CONbits.TMR0ON = 0;
  2628  001476  9ED5               	bcf	213,7,c	;volatile
  2629                           
  2630                           ;motors.c: 297:     T2CONbits.TMR2ON = 0;
  2631  001478  94CA               	bcf	202,2,c	;volatile
  2632  00147A                     
  2633                           ;motors.c: 299:     resetTM0_Temp();
  2634  00147A  EC93  F012         	call	_resetTM0_Temp	;wreg free
  2635                           
  2636                           ;motors.c: 300:     resetTM2_Temp();
  2637  00147E  EC31  F012         	call	_resetTM2_Temp	;wreg free
  2638  001482                     
  2639                           ;motors.c: 302:     TMR0 = 0;
  2640  001482  0E00               	movlw	0
  2641  001484  6ED7               	movwf	215,c	;volatile
  2642  001486  0E00               	movlw	0
  2643  001488  6ED6               	movwf	214,c	;volatile
  2644  00148A                     
  2645                           ;motors.c: 303:     TMR2 = 0;
  2646  00148A  0E00               	movlw	0
  2647  00148C  6ECC               	movwf	204,c	;volatile
  2648                           
  2649                           ;motors.c: 306:     resetStep();
  2650  00148E  EC98  F012         	call	_resetStep	;wreg free
  2651  001492                     
  2652                           ;motors.c: 309:     return(tm0Error);
  2653  001492  5059               	movf	_tm0Error^0,w,c
  2654  001494  0012               	return		;funcret
  2655  001496  FFFF               	dw	65535	; errata NOP
  2656  001498                     __end_of_resetPosition:
  2657                           	callstack 0
  2658                           
  2659 ;; *************** function _resetNewSequence *****************
  2660 ;; Defined at:
  2661 ;;		line 73 in file "usart.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;		None
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;		None
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      void 
  2668 ;; Registers used:
  2669 ;;		wreg, status,2
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2675 ;;      Params:         0       0       0       0       0       0       0
  2676 ;;      Locals:         0       0       0       0       0       0       0
  2677 ;;      Temps:          0       0       0       0       0       0       0
  2678 ;;      Totals:         0       0       0       0       0       0       0
  2679 ;;Total ram usage:        0 bytes
  2680 ;; Hardware stack levels used:    1
  2681 ;; Hardware stack levels required when called:    4
  2682 ;; This function calls:
  2683 ;;		Nothing
  2684 ;; This function is called by:
  2685 ;;		_main
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           	psect	text10
  2690  0024FE                     __ptext10:
  2691                           	callstack 0
  2692  0024FE                     _resetNewSequence:
  2693                           	callstack 0
  2694  0024FE  FFFF               	dw	65535	; assembler added errata NOP
  2695  002500                     
  2696                           ;usart.c: 74:     _newSequence = 0;
  2697  002500  0E00               	movlw	0
  2698  002502  6E5F               	movwf	__newSequence^0,c
  2699  002504  0012               	return		;funcret
  2700  002506  FFFF               	dw	65535	; errata NOP
  2701  002508                     __end_of_resetNewSequence:
  2702                           	callstack 0
  2703                           
  2704 ;; *************** function _reduceSeq *****************
  2705 ;; Defined at:
  2706 ;;		line 50 in file "usart.c"
  2707 ;; Parameters:    Size  Location     Type
  2708 ;;		None
  2709 ;; Auto vars:     Size  Location     Type
  2710 ;;		None
  2711 ;; Return value:  Size  Location     Type
  2712 ;;                  1    wreg      void 
  2713 ;; Registers used:
  2714 ;;		status,2, status,0
  2715 ;; Tracked objects:
  2716 ;;		On entry : 0/0
  2717 ;;		On exit  : 0/0
  2718 ;;		Unchanged: 0/0
  2719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2720 ;;      Params:         0       0       0       0       0       0       0
  2721 ;;      Locals:         0       0       0       0       0       0       0
  2722 ;;      Temps:          0       0       0       0       0       0       0
  2723 ;;      Totals:         0       0       0       0       0       0       0
  2724 ;;Total ram usage:        0 bytes
  2725 ;; Hardware stack levels used:    1
  2726 ;; Hardware stack levels required when called:    4
  2727 ;; This function calls:
  2728 ;;		Nothing
  2729 ;; This function is called by:
  2730 ;;		_main
  2731 ;; This function uses a non-reentrant model
  2732 ;;
  2733                           
  2734                           	psect	text11
  2735  002558                     __ptext11:
  2736                           	callstack 0
  2737  002558                     _reduceSeq:
  2738                           	callstack 0
  2739  002558  FFFF               	dw	65535	; assembler added errata NOP
  2740  00255A                     
  2741                           ;usart.c: 51:     dataCounter--;
  2742  00255A  0661               	decf	_dataCounter^0,f,c
  2743  00255C  0012               	return		;funcret
  2744  00255E  FFFF               	dw	65535	; errata NOP
  2745  002560                     __end_of_reduceSeq:
  2746                           	callstack 0
  2747                           
  2748 ;; *************** function _readSeq *****************
  2749 ;; Defined at:
  2750 ;;		line 57 in file "usart.c"
  2751 ;; Parameters:    Size  Location     Type
  2752 ;;		None
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;		None
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  1    wreg      unsigned char 
  2757 ;; Registers used:
  2758 ;;		wreg, status,2
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2764 ;;      Params:         0       0       0       0       0       0       0
  2765 ;;      Locals:         0       0       0       0       0       0       0
  2766 ;;      Temps:          0       0       0       0       0       0       0
  2767 ;;      Totals:         0       0       0       0       0       0       0
  2768 ;;Total ram usage:        0 bytes
  2769 ;; Hardware stack levels used:    1
  2770 ;; Hardware stack levels required when called:    4
  2771 ;; This function calls:
  2772 ;;		Nothing
  2773 ;; This function is called by:
  2774 ;;		_main
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text12
  2779  002560                     __ptext12:
  2780                           	callstack 0
  2781  002560                     _readSeq:
  2782                           	callstack 0
  2783  002560  FFFF               	dw	65535	; assembler added errata NOP
  2784  002562                     
  2785                           ;usart.c: 58:     return dataCounter;
  2786  002562  5061               	movf	_dataCounter^0,w,c
  2787  002564  0012               	return		;funcret
  2788  002566  FFFF               	dw	65535	; errata NOP
  2789  002568                     __end_of_readSeq:
  2790                           	callstack 0
  2791                           
  2792 ;; *************** function _newSequence *****************
  2793 ;; Defined at:
  2794 ;;		line 65 in file "usart.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;		None
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;		None
  2799 ;; Return value:  Size  Location     Type
  2800 ;;                  1    wreg      unsigned char 
  2801 ;; Registers used:
  2802 ;;		wreg, status,2
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2808 ;;      Params:         0       0       0       0       0       0       0
  2809 ;;      Locals:         0       0       0       0       0       0       0
  2810 ;;      Temps:          0       0       0       0       0       0       0
  2811 ;;      Totals:         0       0       0       0       0       0       0
  2812 ;;Total ram usage:        0 bytes
  2813 ;; Hardware stack levels used:    1
  2814 ;; Hardware stack levels required when called:    4
  2815 ;; This function calls:
  2816 ;;		Nothing
  2817 ;; This function is called by:
  2818 ;;		_main
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           	psect	text13
  2823  002568                     __ptext13:
  2824                           	callstack 0
  2825  002568                     _newSequence:
  2826                           	callstack 0
  2827  002568  FFFF               	dw	65535	; assembler added errata NOP
  2828  00256A                     
  2829                           ;usart.c: 66:     return _newSequence;
  2830  00256A  505F               	movf	__newSequence^0,w,c
  2831  00256C  0012               	return		;funcret
  2832  00256E  FFFF               	dw	65535	; errata NOP
  2833  002570                     __end_of_newSequence:
  2834                           	callstack 0
  2835                           
  2836 ;; *************** function _interruptInit *****************
  2837 ;; Defined at:
  2838 ;;		line 35 in file "interrupt.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;		None
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;		None
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  1    wreg      void 
  2845 ;; Registers used:
  2846 ;;		None
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2852 ;;      Params:         0       0       0       0       0       0       0
  2853 ;;      Locals:         0       0       0       0       0       0       0
  2854 ;;      Temps:          0       0       0       0       0       0       0
  2855 ;;      Totals:         0       0       0       0       0       0       0
  2856 ;;Total ram usage:        0 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    4
  2859 ;; This function calls:
  2860 ;;		Nothing
  2861 ;; This function is called by:
  2862 ;;		_main
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           	psect	text14
  2867  002324                     __ptext14:
  2868                           	callstack 0
  2869  002324                     _interruptInit:
  2870                           	callstack 0
  2871  002324  FFFF               	dw	65535	; assembler added errata NOP
  2872  002326                     
  2873                           ;interrupt.c: 37:     if(!INTCONbits.GIE){
  2874  002326  BEF2               	btfsc	242,7,c	;volatile
  2875  002328  EF98  F011         	goto	u3721
  2876  00232C  EF9B  F011         	goto	u3720
  2877  002330                     u3721:
  2878  002330  FFFF               	dw	65535	; assembler added errata NOP
  2879  002332  EF9D  F011         	goto	l465
  2880  002336                     u3720:
  2881  002336  FFFF               	dw	65535	; assembler added errata NOP
  2882  002338                     
  2883                           ;interrupt.c: 38:         INTCONbits.GIE = 1;
  2884  002338  8EF2               	bsf	242,7,c	;volatile
  2885  00233A                     l465:
  2886  00233A  FFFF               	dw	65535	; assembler added errata NOP
  2887                           
  2888                           ;interrupt.c: 40:     if(!INTCONbits.PEIE){
  2889  00233C  BCF2               	btfsc	242,6,c	;volatile
  2890  00233E  EFA3  F011         	goto	u3731
  2891  002342  EFA6  F011         	goto	u3730
  2892  002346                     u3731:
  2893  002346  FFFF               	dw	65535	; assembler added errata NOP
  2894  002348  EFA8  F011         	goto	l466
  2895  00234C                     u3730:
  2896  00234C  FFFF               	dw	65535	; assembler added errata NOP
  2897  00234E                     
  2898                           ;interrupt.c: 41:         INTCONbits.PEIE = 1;
  2899  00234E  8CF2               	bsf	242,6,c	;volatile
  2900  002350                     l466:
  2901  002350  FFFF               	dw	65535	; assembler added errata NOP
  2902                           
  2903                           ;interrupt.c: 45:     RCONbits.IPEN = 1;
  2904  002352  8ED0               	bsf	208,7,c	;volatile
  2905                           
  2906                           ;interrupt.c: 46:     INTCONbits.T0IE = 1;
  2907  002354  8AF2               	bsf	242,5,c	;volatile
  2908                           
  2909                           ;interrupt.c: 47:     PIE1bits.TMR1IE = 1;
  2910  002356  809D               	bsf	157,0,c	;volatile
  2911                           
  2912                           ;interrupt.c: 48:     PIE1bits.TMR2IE = 1;
  2913  002358  829D               	bsf	157,1,c	;volatile
  2914                           
  2915                           ;interrupt.c: 49:     PIE1bits.RC1IE = 1;
  2916  00235A  8A9D               	bsf	157,5,c	;volatile
  2917  00235C  0012               	return		;funcret
  2918  00235E  FFFF               	dw	65535	; errata NOP
  2919  002360                     __end_of_interruptInit:
  2920                           	callstack 0
  2921                           
  2922 ;; *************** function _initPinMotors *****************
  2923 ;; Defined at:
  2924 ;;		line 49 in file "motors.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;		None
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;		None
  2929 ;; Return value:  Size  Location     Type
  2930 ;;                  1    wreg      void 
  2931 ;; Registers used:
  2932 ;;		wreg, status,2, status,0
  2933 ;; Tracked objects:
  2934 ;;		On entry : 0/0
  2935 ;;		On exit  : 0/0
  2936 ;;		Unchanged: 0/0
  2937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2938 ;;      Params:         0       0       0       0       0       0       0
  2939 ;;      Locals:         0       0       0       0       0       0       0
  2940 ;;      Temps:          0       0       0       0       0       0       0
  2941 ;;      Totals:         0       0       0       0       0       0       0
  2942 ;;Total ram usage:        0 bytes
  2943 ;; Hardware stack levels used:    1
  2944 ;; Hardware stack levels required when called:    4
  2945 ;; This function calls:
  2946 ;;		Nothing
  2947 ;; This function is called by:
  2948 ;;		_main
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           	psect	text15
  2953  0023C0                     __ptext15:
  2954                           	callstack 0
  2955  0023C0                     _initPinMotors:
  2956                           	callstack 0
  2957  0023C0  FFFF               	dw	65535	; assembler added errata NOP
  2958  0023C2                     
  2959                           ;motors.c: 51:     ADCON1bits.PCFG = 0x06;
  2960  0023C2  50C1               	movf	193,w,c	;volatile
  2961  0023C4  0BF0               	andlw	-16
  2962  0023C6  0906               	iorlw	6
  2963  0023C8  6EC1               	movwf	193,c	;volatile
  2964  0023CA                     
  2965                           ;motors.c: 52:     TRISA &= 0b11010001;
  2966  0023CA  0ED1               	movlw	209
  2967  0023CC  1692               	andwf	146,f,c	;volatile
  2968  0023CE                     
  2969                           ;motors.c: 54:     TRISB &= 0b00000010;
  2970  0023CE  0E02               	movlw	2
  2971  0023D0  1693               	andwf	147,f,c	;volatile
  2972  0023D2                     
  2973                           ;motors.c: 55:     TRISC &= 0b11000000;
  2974  0023D2  0EC0               	movlw	192
  2975  0023D4  1694               	andwf	148,f,c	;volatile
  2976  0023D6                     
  2977                           ;motors.c: 56:     TRISD &= 0b11000000;
  2978  0023D6  0EC0               	movlw	192
  2979  0023D8  1695               	andwf	149,f,c	;volatile
  2980  0023DA                     
  2981                           ;motors.c: 59:     TRISEbits.TRISE0 = 1;
  2982  0023DA  8096               	bsf	150,0,c	;volatile
  2983  0023DC                     
  2984                           ;motors.c: 60:     TRISEbits.TRISE1 = 1;
  2985  0023DC  8296               	bsf	150,1,c	;volatile
  2986  0023DE                     
  2987                           ;motors.c: 61:     TRISEbits.TRISE2 = 1;
  2988  0023DE  8496               	bsf	150,2,c	;volatile
  2989  0023E0                     
  2990                           ;motors.c: 64:     TRISDbits.TRISD7 = 1;
  2991  0023E0  8E95               	bsf	149,7,c	;volatile
  2992  0023E2  0012               	return		;funcret
  2993  0023E4  FFFF               	dw	65535	; errata NOP
  2994  0023E6                     __end_of_initPinMotors:
  2995                           	callstack 0
  2996                           
  2997 ;; *************** function _initADC *****************
  2998 ;; Defined at:
  2999 ;;		line 18 in file "adc.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;		None
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;		None
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      void 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3013 ;;      Params:         0       0       0       0       0       0       0
  3014 ;;      Locals:         0       0       0       0       0       0       0
  3015 ;;      Temps:          0       0       0       0       0       0       0
  3016 ;;      Totals:         0       0       0       0       0       0       0
  3017 ;;Total ram usage:        0 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    4
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_main
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           	psect	text16
  3028  0023E6                     __ptext16:
  3029                           	callstack 0
  3030  0023E6                     _initADC:
  3031                           	callstack 0
  3032  0023E6  FFFF               	dw	65535	; assembler added errata NOP
  3033  0023E8                     
  3034                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3035  0023E8  50C2               	movf	194,w,c	;volatile
  3036  0023EA  0B3F               	andlw	-193
  3037  0023EC  0940               	iorlw	64
  3038  0023EE  6EC2               	movwf	194,c	;volatile
  3039  0023F0                     
  3040                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3041  0023F0  8CC1               	bsf	193,6,c	;volatile
  3042                           
  3043                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3044  0023F2  0EC7               	movlw	-57
  3045  0023F4  16C2               	andwf	194,f,c	;volatile
  3046  0023F6                     
  3047                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3048  0023F6  94C2               	bcf	194,2,c	;volatile
  3049  0023F8                     
  3050                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3051  0023F8  90C2               	bcf	194,0,c	;volatile
  3052  0023FA                     
  3053                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3054  0023FA  9EC1               	bcf	193,7,c	;volatile
  3055                           
  3056                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3057  0023FC  50C1               	movf	193,w,c	;volatile
  3058  0023FE  0BF0               	andlw	-16
  3059  002400  090E               	iorlw	14
  3060  002402  6EC1               	movwf	193,c	;volatile
  3061  002404                     
  3062                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3063  002404  8C9D               	bsf	157,6,c	;volatile
  3064  002406                     
  3065                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3066  002406  8C9F               	bsf	159,6,c	;volatile
  3067  002408  0012               	return		;funcret
  3068  00240A  FFFF               	dw	65535	; errata NOP
  3069  00240C                     __end_of_initADC:
  3070                           	callstack 0
  3071                           
  3072 ;; *************** function _getNewSequence *****************
  3073 ;; Defined at:
  3074 ;;		line 43 in file "usart.c"
  3075 ;; Parameters:    Size  Location     Type
  3076 ;;		None
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;		None
  3079 ;; Return value:  Size  Location     Type
  3080 ;;                  2   17[COMRAM] PTR struct .
  3081 ;; Registers used:
  3082 ;;		wreg, status,2, status,0
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3088 ;;      Params:         2       0       0       0       0       0       0
  3089 ;;      Locals:         0       0       0       0       0       0       0
  3090 ;;      Temps:          0       0       0       0       0       0       0
  3091 ;;      Totals:         2       0       0       0       0       0       0
  3092 ;;Total ram usage:        2 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; Hardware stack levels required when called:    4
  3095 ;; This function calls:
  3096 ;;		Nothing
  3097 ;; This function is called by:
  3098 ;;		_main
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           	psect	text17
  3103  002494                     __ptext17:
  3104                           	callstack 0
  3105  002494                     _getNewSequence:
  3106                           	callstack 0
  3107  002494  FFFF               	dw	65535	; assembler added errata NOP
  3108  002496                     
  3109                           ;usart.c: 44:     return(&newSequenceData);
  3110  002496  0EDE               	movlw	low _newSequenceData
  3111  002498  6E12               	movwf	?_getNewSequence^0,c
  3112  00249A  0E00               	movlw	high _newSequenceData
  3113  00249C  6E13               	movwf	(?_getNewSequence+1)^0,c
  3114  00249E  0012               	return		;funcret
  3115  0024A0  FFFF               	dw	65535	; errata NOP
  3116  0024A2                     __end_of_getNewSequence:
  3117                           	callstack 0
  3118                           
  3119 ;; *************** function _executeData *****************
  3120 ;; Defined at:
  3121 ;;		line 105 in file "main.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;		None
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  data            2    9[BANK0 ] PTR struct .
  3126 ;;		 -> dataSequence(20), 
  3127 ;;  errCode         1   11[BANK0 ] unsigned char 
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  1    wreg      unsigned char 
  3130 ;; Registers used:
  3131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/0
  3134 ;;		On exit  : 0/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3137 ;;      Params:         0       0       0       0       0       0       0
  3138 ;;      Locals:         0       3       0       0       0       0       0
  3139 ;;      Temps:          0       2       0       0       0       0       0
  3140 ;;      Totals:         0       5       0       0       0       0       0
  3141 ;;Total ram usage:        5 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    6
  3144 ;; This function calls:
  3145 ;;		_getData
  3146 ;;		_liftArm
  3147 ;;		_moveToPoint
  3148 ;;		_pickObject
  3149 ;;		_releaseObj
  3150 ;;		_rotateObj
  3151 ;;		_touchObject
  3152 ;;		_touchTherm
  3153 ;; This function is called by:
  3154 ;;		_main
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           	psect	text18
  3159  000DC6                     __ptext18:
  3160                           	callstack 0
  3161  000DC6                     _executeData:
  3162                           	callstack 0
  3163  000DC6  FFFF               	dw	65535	; assembler added errata NOP
  3164  000DC8                     
  3165                           ;main.c: 106:     t_sequence *data = getData();
  3166  000DC8  EC51  F012         	call	_getData	;wreg free
  3167  000DCC  C012  F0EF         	movff	?_getData,executeData@data
  3168  000DD0  C013  F0F0         	movff	?_getData+1,executeData@data+1
  3169  000DD4                     
  3170                           ;main.c: 112:     switch(data->feederLine){
  3171  000DD4  EF95  F007         	goto	l4339
  3172  000DD8                     l4311:
  3173  000DD8  FFFF               	dw	65535	; assembler added errata NOP
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;main.c: 115:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3177  000DDA  C04C  F015         	movff	_posVector,moveToPoint@x1
  3178  000DDE  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3179  000DE0  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3180  000DE4  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3181  000DE6  0E0D               	movlw	low _feeder1Pos
  3182  000DE8  6EF6               	movwf	tblptrl,c
  3183  000DEA                     	if	1	;There is more than 1 active tblptr byte
  3184  000DEA  0E06               	movlw	high _feeder1Pos
  3185  000DEC  6EF7               	movwf	tblptrh,c
  3186  000DEE                     	endif
  3187  000DEE                     	if	0	;There are less than 3 active tblptr bytes
  3188  000DEE                     	endif
  3189  000DEE  0008               	tblrd		*
  3190  000DF0  FFFF               	dw	65535	; errata NOP
  3191  000DF2  50F5               	movf	tablat,w,c
  3192  000DF4  6E19               	movwf	moveToPoint@x2^0,c
  3193  000DF6  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3194  000DF8  0E0E               	movlw	low (_feeder1Pos+1)
  3195  000DFA  6EF6               	movwf	tblptrl,c
  3196  000DFC  0E06               	movlw	high (_feeder1Pos+1)
  3197  000DFE  6EF7               	movwf	tblptrh,c
  3198  000E00                     	if	0	;tblptru may be non-zero
  3199  000E00                     	endif
  3200  000E00                     	if	0	;tblptru may be non-zero
  3201  000E00                     	endif
  3202  000E00  0008               	tblrd		*
  3203  000E02  FFFF               	dw	65535	; errata NOP
  3204  000E04  50F5               	movf	tablat,w,c
  3205  000E06  6E1B               	movwf	moveToPoint@y2^0,c
  3206  000E08  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3207  000E0A  EC22  F005         	call	_moveToPoint	;wreg free
  3208  000E0E  0100               	movlb	0	; () banked
  3209  000E10  6FF1               	movwf	executeData@errCode& (0+255),b
  3210  000E12                     
  3211                           ; BSR set to: 0
  3212                           ;main.c: 117:             posVector[0] = feeder1Pos[0];
  3213  000E12  0E0D               	movlw	low _feeder1Pos
  3214  000E14  6EF6               	movwf	tblptrl,c
  3215  000E16                     	if	1	;There is more than 1 active tblptr byte
  3216  000E16  0E06               	movlw	high _feeder1Pos
  3217  000E18  6EF7               	movwf	tblptrh,c
  3218  000E1A                     	endif
  3219  000E1A                     	if	0	;There are less than 3 active tblptr bytes
  3220  000E1A                     	endif
  3221  000E1A  0008               	tblrd		*
  3222  000E1C  FFFF               	dw	65535	; errata NOP
  3223  000E1E  CFF5 F04C          	movff	tablat,_posVector
  3224  000E22                     
  3225                           ; BSR set to: 0
  3226                           ;main.c: 118:             posVector[1] = feeder1Pos[1];
  3227  000E22  0E0E               	movlw	low (_feeder1Pos+1)
  3228  000E24  6EF6               	movwf	tblptrl,c
  3229  000E26  0E06               	movlw	high (_feeder1Pos+1)
  3230  000E28  6EF7               	movwf	tblptrh,c
  3231  000E2A                     	if	0	;tblptru may be non-zero
  3232  000E2A                     	endif
  3233  000E2A                     	if	0	;tblptru may be non-zero
  3234  000E2A                     	endif
  3235  000E2A  0008               	tblrd		*
  3236  000E2C  FFFF               	dw	65535	; errata NOP
  3237  000E2E  CFF5 F04D          	movff	tablat,_posVector+1
  3238                           
  3239                           ;main.c: 119:             break;
  3240  000E32  EFB9  F007         	goto	l4341
  3241  000E36                     l4317:
  3242  000E36  FFFF               	dw	65535	; assembler added errata NOP
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 121:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3246  000E38  C04C  F015         	movff	_posVector,moveToPoint@x1
  3247  000E3C  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3248  000E3E  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3249  000E42  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3250  000E44  0E0B               	movlw	low _feeder2Pos
  3251  000E46  6EF6               	movwf	tblptrl,c
  3252  000E48                     	if	1	;There is more than 1 active tblptr byte
  3253  000E48  0E06               	movlw	high _feeder2Pos
  3254  000E4A  6EF7               	movwf	tblptrh,c
  3255  000E4C                     	endif
  3256  000E4C                     	if	0	;There are less than 3 active tblptr bytes
  3257  000E4C                     	endif
  3258  000E4C  0008               	tblrd		*
  3259  000E4E  FFFF               	dw	65535	; errata NOP
  3260  000E50  50F5               	movf	tablat,w,c
  3261  000E52  6E19               	movwf	moveToPoint@x2^0,c
  3262  000E54  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3263  000E56  0E0C               	movlw	low (_feeder2Pos+1)
  3264  000E58  6EF6               	movwf	tblptrl,c
  3265  000E5A  0E06               	movlw	high (_feeder2Pos+1)
  3266  000E5C  6EF7               	movwf	tblptrh,c
  3267  000E5E                     	if	0	;tblptru may be non-zero
  3268  000E5E                     	endif
  3269  000E5E                     	if	0	;tblptru may be non-zero
  3270  000E5E                     	endif
  3271  000E5E  0008               	tblrd		*
  3272  000E60  FFFF               	dw	65535	; errata NOP
  3273  000E62  50F5               	movf	tablat,w,c
  3274  000E64  6E1B               	movwf	moveToPoint@y2^0,c
  3275  000E66  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3276  000E68  EC22  F005         	call	_moveToPoint	;wreg free
  3277  000E6C  0100               	movlb	0	; () banked
  3278  000E6E  6FF1               	movwf	executeData@errCode& (0+255),b
  3279  000E70                     
  3280                           ; BSR set to: 0
  3281                           ;main.c: 122:             posVector[0] = feeder2Pos[0];
  3282  000E70  0E0B               	movlw	low _feeder2Pos
  3283  000E72  6EF6               	movwf	tblptrl,c
  3284  000E74                     	if	1	;There is more than 1 active tblptr byte
  3285  000E74  0E06               	movlw	high _feeder2Pos
  3286  000E76  6EF7               	movwf	tblptrh,c
  3287  000E78                     	endif
  3288  000E78                     	if	0	;There are less than 3 active tblptr bytes
  3289  000E78                     	endif
  3290  000E78  0008               	tblrd		*
  3291  000E7A  FFFF               	dw	65535	; errata NOP
  3292  000E7C  CFF5 F04C          	movff	tablat,_posVector
  3293  000E80                     
  3294                           ; BSR set to: 0
  3295                           ;main.c: 123:             posVector[1] = feeder2Pos[1];
  3296  000E80  0E0C               	movlw	low (_feeder2Pos+1)
  3297  000E82  6EF6               	movwf	tblptrl,c
  3298  000E84  0E06               	movlw	high (_feeder2Pos+1)
  3299  000E86  6EF7               	movwf	tblptrh,c
  3300  000E88                     	if	0	;tblptru may be non-zero
  3301  000E88                     	endif
  3302  000E88                     	if	0	;tblptru may be non-zero
  3303  000E88                     	endif
  3304  000E88  0008               	tblrd		*
  3305  000E8A  FFFF               	dw	65535	; errata NOP
  3306  000E8C  CFF5 F04D          	movff	tablat,_posVector+1
  3307                           
  3308                           ;main.c: 124:             break;
  3309  000E90  EFB9  F007         	goto	l4341
  3310  000E94                     l4323:
  3311  000E94  FFFF               	dw	65535	; assembler added errata NOP
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;main.c: 126:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3315  000E96  C04C  F015         	movff	_posVector,moveToPoint@x1
  3316  000E9A  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3317  000E9C  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3318  000EA0  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3319  000EA2  0E09               	movlw	low _feeder3Pos
  3320  000EA4  6EF6               	movwf	tblptrl,c
  3321  000EA6                     	if	1	;There is more than 1 active tblptr byte
  3322  000EA6  0E06               	movlw	high _feeder3Pos
  3323  000EA8  6EF7               	movwf	tblptrh,c
  3324  000EAA                     	endif
  3325  000EAA                     	if	0	;There are less than 3 active tblptr bytes
  3326  000EAA                     	endif
  3327  000EAA  0008               	tblrd		*
  3328  000EAC  FFFF               	dw	65535	; errata NOP
  3329  000EAE  50F5               	movf	tablat,w,c
  3330  000EB0  6E19               	movwf	moveToPoint@x2^0,c
  3331  000EB2  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3332  000EB4  0E0A               	movlw	low (_feeder3Pos+1)
  3333  000EB6  6EF6               	movwf	tblptrl,c
  3334  000EB8  0E06               	movlw	high (_feeder3Pos+1)
  3335  000EBA  6EF7               	movwf	tblptrh,c
  3336  000EBC                     	if	0	;tblptru may be non-zero
  3337  000EBC                     	endif
  3338  000EBC                     	if	0	;tblptru may be non-zero
  3339  000EBC                     	endif
  3340  000EBC  0008               	tblrd		*
  3341  000EBE  FFFF               	dw	65535	; errata NOP
  3342  000EC0  50F5               	movf	tablat,w,c
  3343  000EC2  6E1B               	movwf	moveToPoint@y2^0,c
  3344  000EC4  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3345  000EC6  EC22  F005         	call	_moveToPoint	;wreg free
  3346  000ECA  0100               	movlb	0	; () banked
  3347  000ECC  6FF1               	movwf	executeData@errCode& (0+255),b
  3348  000ECE                     
  3349                           ; BSR set to: 0
  3350                           ;main.c: 127:             posVector[0] = feeder3Pos[0];
  3351  000ECE  0E09               	movlw	low _feeder3Pos
  3352  000ED0  6EF6               	movwf	tblptrl,c
  3353  000ED2                     	if	1	;There is more than 1 active tblptr byte
  3354  000ED2  0E06               	movlw	high _feeder3Pos
  3355  000ED4  6EF7               	movwf	tblptrh,c
  3356  000ED6                     	endif
  3357  000ED6                     	if	0	;There are less than 3 active tblptr bytes
  3358  000ED6                     	endif
  3359  000ED6  0008               	tblrd		*
  3360  000ED8  FFFF               	dw	65535	; errata NOP
  3361  000EDA  CFF5 F04C          	movff	tablat,_posVector
  3362  000EDE                     
  3363                           ; BSR set to: 0
  3364                           ;main.c: 128:             posVector[1] = feeder3Pos[1];
  3365  000EDE  0E0A               	movlw	low (_feeder3Pos+1)
  3366  000EE0  6EF6               	movwf	tblptrl,c
  3367  000EE2  0E06               	movlw	high (_feeder3Pos+1)
  3368  000EE4  6EF7               	movwf	tblptrh,c
  3369  000EE6                     	if	0	;tblptru may be non-zero
  3370  000EE6                     	endif
  3371  000EE6                     	if	0	;tblptru may be non-zero
  3372  000EE6                     	endif
  3373  000EE6  0008               	tblrd		*
  3374  000EE8  FFFF               	dw	65535	; errata NOP
  3375  000EEA  CFF5 F04D          	movff	tablat,_posVector+1
  3376                           
  3377                           ;main.c: 129:             break;
  3378  000EEE  EFB9  F007         	goto	l4341
  3379  000EF2                     l4329:
  3380  000EF2  FFFF               	dw	65535	; assembler added errata NOP
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;main.c: 133:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3384  000EF4  C04C  F015         	movff	_posVector,moveToPoint@x1
  3385  000EF8  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3386  000EFA  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3387  000EFE  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3388  000F00  C055  F019         	movff	_newFeeder,moveToPoint@x2
  3389  000F04  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3390  000F06  C056  F01B         	movff	_newFeeder+1,moveToPoint@y2
  3391  000F0A  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3392  000F0C  EC22  F005         	call	_moveToPoint	;wreg free
  3393  000F10  0100               	movlb	0	; () banked
  3394  000F12  6FF1               	movwf	executeData@errCode& (0+255),b
  3395  000F14                     
  3396                           ; BSR set to: 0
  3397                           ;main.c: 134:             posVector[0] = newFeeder[0];
  3398  000F14  C055  F04C         	movff	_newFeeder,_posVector
  3399  000F18                     
  3400                           ; BSR set to: 0
  3401                           ;main.c: 135:             posVector[1] = newFeeder[1];
  3402  000F18  C056  F04D         	movff	_newFeeder+1,_posVector+1
  3403                           
  3404                           ;main.c: 136:             break;
  3405  000F1C  EFB9  F007         	goto	l4341
  3406  000F20                     l4335:
  3407  000F20  FFFF               	dw	65535	; assembler added errata NOP
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;main.c: 140:             errCode = 1;
  3411  000F22  0E01               	movlw	1
  3412  000F24  6FF1               	movwf	executeData@errCode& (0+255),b
  3413                           
  3414                           ;main.c: 141:             break;
  3415  000F26  EFB9  F007         	goto	l4341
  3416  000F2A                     l4339:
  3417  000F2A  FFFF               	dw	65535	; assembler added errata NOP
  3418  000F2C  C0EF  FFD9         	movff	executeData@data,fsr2l
  3419  000F30  C0F0  FFDA         	movff	executeData@data+1,fsr2h
  3420  000F34  50DF               	movf	indf2,w,c
  3421  000F36  0100               	movlb	0	; () banked
  3422  000F38  6FED               	movwf	??_executeData& (0+255),b
  3423  000F3A  6BEE               	clrf	(??_executeData+1)& (0+255),b
  3424                           
  3425                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3426                           ; Switch size 1, requested type "simple"
  3427                           ; Number of cases is 1, Range of values is 0 to 0
  3428                           ; switch strategies available:
  3429                           ; Name         Instructions Cycles
  3430                           ; simple_byte            4     3 (average)
  3431                           ;	Chosen strategy is simple_byte
  3432  000F3C  51EE               	movf	(??_executeData+1)& (0+255),w,b
  3433  000F3E  0A00               	xorlw	0	; case 0
  3434  000F40  B4D8               	btfsc	status,2,c
  3435  000F42  EFA5  F007         	goto	l4625
  3436  000F46  EF90  F007         	goto	l4335
  3437  000F4A                     l4625:
  3438  000F4A  FFFF               	dw	65535	; assembler added errata NOP
  3439                           
  3440                           ; BSR set to: 0
  3441                           ; Switch size 1, requested type "simple"
  3442                           ; Number of cases is 4, Range of values is 0 to 255
  3443                           ; switch strategies available:
  3444                           ; Name         Instructions Cycles
  3445                           ; simple_byte           13     7 (average)
  3446                           ;	Chosen strategy is simple_byte
  3447  000F4C  51ED               	movf	??_executeData& (0+255),w,b
  3448  000F4E  0A00               	xorlw	0	; case 0
  3449  000F50  B4D8               	btfsc	status,2,c
  3450  000F52  EFEC  F006         	goto	l4311
  3451  000F56  0A01               	xorlw	1	; case 1
  3452  000F58  B4D8               	btfsc	status,2,c
  3453  000F5A  EF1B  F007         	goto	l4317
  3454  000F5E  0A03               	xorlw	3	; case 2
  3455  000F60  B4D8               	btfsc	status,2,c
  3456  000F62  EF4A  F007         	goto	l4323
  3457  000F66  0AFD               	xorlw	253	; case 255
  3458  000F68  B4D8               	btfsc	status,2,c
  3459  000F6A  EF79  F007         	goto	l4329
  3460  000F6E  EF90  F007         	goto	l4335
  3461  000F72                     l4341:
  3462  000F72  FFFF               	dw	65535	; assembler added errata NOP
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;main.c: 145:     if(!errCode){
  3466  000F74  51F1               	movf	executeData@errCode& (0+255),w,b
  3467  000F76  A4D8               	btfss	status,2,c
  3468  000F78  EFC0  F007         	goto	u3751
  3469  000F7C  EFC3  F007         	goto	u3750
  3470  000F80                     u3751:
  3471  000F80  FFFF               	dw	65535	; assembler added errata NOP
  3472  000F82  EFD1  F007         	goto	l4347
  3473  000F86                     u3750:
  3474  000F86  FFFF               	dw	65535	; assembler added errata NOP
  3475  000F88                     
  3476                           ; BSR set to: 0
  3477                           ;main.c: 148:         errCode = touchObject();
  3478  000F88  EC52  F00E         	call	_touchObject	;wreg free
  3479  000F8C  0100               	movlb	0	; () banked
  3480  000F8E  6FF1               	movwf	executeData@errCode& (0+255),b
  3481  000F90                     
  3482                           ; BSR set to: 0
  3483                           ;main.c: 149:         if(errCode != 0){
  3484  000F90  51F1               	movf	executeData@errCode& (0+255),w,b
  3485  000F92  B4D8               	btfsc	status,2,c
  3486  000F94  EFCE  F007         	goto	u3761
  3487  000F98  EFD1  F007         	goto	u3760
  3488  000F9C                     u3761:
  3489  000F9C  FFFF               	dw	65535	; assembler added errata NOP
  3490  000F9E  EFD5  F007         	goto	l4351
  3491  000FA2                     u3760:
  3492  000FA2                     l4347:
  3493  000FA2  FFFF               	dw	65535	; assembler added errata NOP
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;main.c: 150:             return(errCode);
  3497  000FA4  51F1               	movf	executeData@errCode& (0+255),w,b
  3498  000FA6  EF5B  F008         	goto	l364
  3499  000FAA                     l4351:
  3500  000FAA  FFFF               	dw	65535	; assembler added errata NOP
  3501                           
  3502                           ; BSR set to: 0
  3503                           ;main.c: 153:         pickObject();
  3504  000FAC  ECC8  F011         	call	_pickObject	;wreg free
  3505  000FB0                     
  3506                           ;main.c: 156:         errCode = liftArm();
  3507  000FB0  EC4D  F010         	call	_liftArm	;wreg free
  3508  000FB4  0100               	movlb	0	; () banked
  3509  000FB6  6FF1               	movwf	executeData@errCode& (0+255),b
  3510  000FB8                     
  3511                           ; BSR set to: 0
  3512                           ;main.c: 157:         if(errCode != 0){
  3513  000FB8  51F1               	movf	executeData@errCode& (0+255),w,b
  3514  000FBA  B4D8               	btfsc	status,2,c
  3515  000FBC  EFE2  F007         	goto	u3771
  3516  000FC0  EFE5  F007         	goto	u3770
  3517  000FC4                     u3771:
  3518  000FC4  FFFF               	dw	65535	; assembler added errata NOP
  3519  000FC6  EFE8  F007         	goto	l4361
  3520  000FCA                     u3770:
  3521  000FCA  FFFF               	dw	65535	; assembler added errata NOP
  3522  000FCC  EFD1  F007         	goto	l4347
  3523  000FD0                     l4361:
  3524  000FD0  FFFF               	dw	65535	; assembler added errata NOP
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;main.c: 162:         errCode = moveToPoint(posVector[0], posVector[1], data->posX, data
      +                          ->posY);
  3528  000FD2  C04C  F015         	movff	_posVector,moveToPoint@x1
  3529  000FD6  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3530  000FD8  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3531  000FDC  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3532  000FDE  EE20 F001          	lfsr	2,1
  3533  000FE2  51EF               	movf	executeData@data& (0+255),w,b
  3534  000FE4  26D9               	addwf	fsr2l,f,c
  3535  000FE6  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3536  000FE8  22DA               	addwfc	fsr2h,f,c
  3537  000FEA  50DF               	movf	indf2,w,c
  3538  000FEC  6FED               	movwf	??_executeData& (0+255),b
  3539  000FEE  51ED               	movf	??_executeData& (0+255),w,b
  3540  000FF0  6E19               	movwf	moveToPoint@x2^0,c
  3541  000FF2  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3542  000FF4  EE20 F002          	lfsr	2,2
  3543  000FF8  51EF               	movf	executeData@data& (0+255),w,b
  3544  000FFA  26D9               	addwf	fsr2l,f,c
  3545  000FFC  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3546  000FFE  22DA               	addwfc	fsr2h,f,c
  3547  001000  50DF               	movf	indf2,w,c
  3548  001002  6FEE               	movwf	(??_executeData+1)& (0+255),b
  3549  001004  51EE               	movf	(??_executeData+1)& (0+255),w,b
  3550  001006  6E1B               	movwf	moveToPoint@y2^0,c
  3551  001008  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3552  00100A  EC22  F005         	call	_moveToPoint	;wreg free
  3553  00100E  0100               	movlb	0	; () banked
  3554  001010  6FF1               	movwf	executeData@errCode& (0+255),b
  3555  001012                     
  3556                           ; BSR set to: 0
  3557                           ;main.c: 163:         if(errCode != 0){
  3558  001012  51F1               	movf	executeData@errCode& (0+255),w,b
  3559  001014  B4D8               	btfsc	status,2,c
  3560  001016  EF0F  F008         	goto	u3781
  3561  00101A  EF12  F008         	goto	u3780
  3562  00101E                     u3781:
  3563  00101E  FFFF               	dw	65535	; assembler added errata NOP
  3564  001020  EF15  F008         	goto	l4369
  3565  001024                     u3780:
  3566  001024  FFFF               	dw	65535	; assembler added errata NOP
  3567  001026  EFD1  F007         	goto	l4347
  3568  00102A                     l4369:
  3569  00102A  FFFF               	dw	65535	; assembler added errata NOP
  3570                           
  3571                           ; BSR set to: 0
  3572                           ;main.c: 166:         posVector[0] = data->posX;
  3573  00102C  EE20 F001          	lfsr	2,1
  3574  001030  51EF               	movf	executeData@data& (0+255),w,b
  3575  001032  26D9               	addwf	fsr2l,f,c
  3576  001034  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3577  001036  22DA               	addwfc	fsr2h,f,c
  3578  001038  50DF               	movf	indf2,w,c
  3579  00103A  6E4C               	movwf	_posVector^0,c
  3580                           
  3581                           ;main.c: 167:         posVector[1] = data->posY;
  3582  00103C  EE20 F002          	lfsr	2,2
  3583  001040  51EF               	movf	executeData@data& (0+255),w,b
  3584  001042  26D9               	addwf	fsr2l,f,c
  3585  001044  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3586  001046  22DA               	addwfc	fsr2h,f,c
  3587  001048  50DF               	movf	indf2,w,c
  3588  00104A  6E4D               	movwf	(_posVector+1)^0,c
  3589                           
  3590                           ;main.c: 170:         rotAngle = data->rotation;
  3591  00104C  EE20 F003          	lfsr	2,3
  3592  001050  51EF               	movf	executeData@data& (0+255),w,b
  3593  001052  26D9               	addwf	fsr2l,f,c
  3594  001054  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3595  001056  22DA               	addwfc	fsr2h,f,c
  3596  001058  50DF               	movf	indf2,w,c
  3597  00105A  6FED               	movwf	??_executeData& (0+255),b
  3598  00105C  51ED               	movf	??_executeData& (0+255),w,b
  3599  00105E  6E57               	movwf	_rotAngle^0,c
  3600  001060  6A58               	clrf	(_rotAngle+1)^0,c
  3601  001062                     
  3602                           ; BSR set to: 0
  3603                           ;main.c: 172:         if(rotAngle < 0){
  3604  001062  BE58               	btfsc	(_rotAngle+1)^0,7,c
  3605  001064  EF39  F008         	goto	u3790
  3606  001068  EF36  F008         	goto	u3791
  3607  00106C                     u3791:
  3608  00106C  FFFF               	dw	65535	; assembler added errata NOP
  3609  00106E  EF3E  F008         	goto	l4375
  3610  001072                     u3790:
  3611  001072  FFFF               	dw	65535	; assembler added errata NOP
  3612  001074                     
  3613                           ; BSR set to: 0
  3614                           ;main.c: 173:             rotAngle += 360;
  3615  001074  0E68               	movlw	104
  3616  001076  2657               	addwf	_rotAngle^0,f,c
  3617  001078  0E01               	movlw	1
  3618  00107A  2258               	addwfc	(_rotAngle+1)^0,f,c
  3619  00107C                     l4375:
  3620  00107C  FFFF               	dw	65535	; assembler added errata NOP
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;main.c: 175:         rotateObj(rotAngle);
  3624  00107E  5057               	movf	_rotAngle^0,w,c
  3625  001080  ECE0  F00F         	call	_rotateObj
  3626  001084                     
  3627                           ;main.c: 178:         errCode = touchTherm();
  3628  001084  ECDC  F00E         	call	_touchTherm	;wreg free
  3629  001088  0100               	movlb	0	; () banked
  3630  00108A  6FF1               	movwf	executeData@errCode& (0+255),b
  3631  00108C                     
  3632                           ; BSR set to: 0
  3633                           ;main.c: 179:         if(errCode != 0){
  3634  00108C  51F1               	movf	executeData@errCode& (0+255),w,b
  3635  00108E  B4D8               	btfsc	status,2,c
  3636  001090  EF4C  F008         	goto	u3801
  3637  001094  EF4F  F008         	goto	u3800
  3638  001098                     u3801:
  3639  001098  FFFF               	dw	65535	; assembler added errata NOP
  3640  00109A  EF52  F008         	goto	l4385
  3641  00109E                     u3800:
  3642  00109E  FFFF               	dw	65535	; assembler added errata NOP
  3643  0010A0  EFD1  F007         	goto	l4347
  3644  0010A4                     l4385:
  3645  0010A4  FFFF               	dw	65535	; assembler added errata NOP
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;main.c: 183:         releaseObj();
  3649  0010A6  ECB0  F011         	call	_releaseObj	;wreg free
  3650  0010AA                     
  3651                           ;main.c: 186:         errCode = liftArm();
  3652  0010AA  EC4D  F010         	call	_liftArm	;wreg free
  3653  0010AE  0100               	movlb	0	; () banked
  3654  0010B0  6FF1               	movwf	executeData@errCode& (0+255),b
  3655  0010B2  EFD1  F007         	goto	l4347
  3656  0010B6                     l364:
  3657  0010B6  FFFF               	dw	65535	; assembler added errata NOP
  3658                           
  3659                           ; BSR set to: 0
  3660  0010B8  0012               	return		;funcret
  3661  0010BA  FFFF               	dw	65535	; errata NOP
  3662  0010BC                     __end_of_executeData:
  3663                           	callstack 0
  3664                           
  3665 ;; *************** function _touchTherm *****************
  3666 ;; Defined at:
  3667 ;;		line 603 in file "motors.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;		None
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;		None
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  1    wreg      unsigned char 
  3674 ;; Registers used:
  3675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3681 ;;      Params:         0       0       0       0       0       0       0
  3682 ;;      Locals:         0       0       0       0       0       0       0
  3683 ;;      Temps:          0       0       0       0       0       0       0
  3684 ;;      Totals:         0       0       0       0       0       0       0
  3685 ;;Total ram usage:        0 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; Hardware stack levels required when called:    5
  3688 ;; This function calls:
  3689 ;;		_resetStep
  3690 ;;		_resetTM0_Temp
  3691 ;;		_resetTM2_Temp
  3692 ;;		_resetTherm
  3693 ;;		_returnTherm
  3694 ;;		_startADC
  3695 ;;		_stepMade
  3696 ;;		_stopADC
  3697 ;; This function is called by:
  3698 ;;		_executeData
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           	psect	text19
  3703  001DB8                     __ptext19:
  3704                           	callstack 0
  3705  001DB8                     _touchTherm:
  3706                           	callstack 0
  3707  001DB8  FFFF               	dw	65535	; assembler added errata NOP
  3708  001DBA                     
  3709                           ;motors.c: 609:     motCounter[2][1] = 1;
  3710  001DBA  0E01               	movlw	1
  3711  001DBC  6E6C               	movwf	(_motCounter+5)^0,c
  3712  001DBE                     
  3713                           ;motors.c: 612:     T2CONbits.TMR2ON = 1;
  3714  001DBE  84CA               	bsf	202,2,c	;volatile
  3715                           
  3716                           ;motors.c: 614:     tm0Error = 0;
  3717  001DC0  0E00               	movlw	0
  3718  001DC2  6E5A               	movwf	(_tm0Error+1)^0,c
  3719  001DC4  0E00               	movlw	0
  3720  001DC6  6E59               	movwf	_tm0Error^0,c
  3721                           
  3722                           ;motors.c: 615:     tm0Limit = 200;
  3723  001DC8  0EC8               	movlw	200
  3724  001DCA  6E66               	movwf	_tm0Limit^0,c
  3725  001DCC                     
  3726                           ;motors.c: 616:     T0CONbits.TMR0ON = 1;
  3727  001DCC  8ED5               	bsf	213,7,c	;volatile
  3728  001DCE                     l3987:
  3729  001DCE  FFFF               	dw	65535	; assembler added errata NOP
  3730                           
  3731                           ;motors.c: 619:     startADC();
  3732  001DD0  EC84  F012         	call	_startADC	;wreg free
  3733                           
  3734                           ;motors.c: 622:     while(!returnTherm() || PORTDbits.RD7){
  3735  001DD4  EF2A  F00F         	goto	l4005
  3736  001DD8                     l3989:
  3737  001DD8  FFFF               	dw	65535	; assembler added errata NOP
  3738                           
  3739                           ;motors.c: 624:         resetStep();
  3740  001DDA  EC98  F012         	call	_resetStep	;wreg free
  3741  001DDE                     
  3742                           ;motors.c: 627:         if(tm0Error){
  3743  001DDE  5059               	movf	_tm0Error^0,w,c
  3744  001DE0  105A               	iorwf	(_tm0Error+1)^0,w,c
  3745  001DE2  B4D8               	btfsc	status,2,c
  3746  001DE4  EFF6  F00E         	goto	u3441
  3747  001DE8  EFF9  F00E         	goto	u3440
  3748  001DEC                     u3441:
  3749  001DEC  FFFF               	dw	65535	; assembler added errata NOP
  3750  001DEE  EF00  F00F         	goto	l3995
  3751  001DF2                     u3440:
  3752  001DF2  FFFF               	dw	65535	; assembler added errata NOP
  3753  001DF4                     
  3754                           ;motors.c: 632:             tm0Error = 6;
  3755  001DF4  0E00               	movlw	0
  3756  001DF6  6E5A               	movwf	(_tm0Error+1)^0,c
  3757  001DF8  0E06               	movlw	6
  3758  001DFA  6E59               	movwf	_tm0Error^0,c
  3759                           
  3760                           ;motors.c: 633:             break;
  3761  001DFC  EF40  F00F         	goto	l4009
  3762  001E00                     l3995:
  3763  001E00  FFFF               	dw	65535	; assembler added errata NOP
  3764                           
  3765                           ;motors.c: 641:             motCounter[2][0] += motCounter[2][1];
  3766  001E02  506C               	movf	(_motCounter+5)^0,w,c
  3767  001E04  266B               	addwf	(_motCounter+4)^0,f,c
  3768                           
  3769                           ;motors.c: 642:             if(motCounter[2][0] > 3){
  3770  001E06  506B               	movf	(_motCounter+4)^0,w,c
  3771  001E08  0A80               	xorlw	128
  3772  001E0A  0F7C               	addlw	-132
  3773  001E0C  A0D8               	btfss	status,0,c
  3774  001E0E  EF0B  F00F         	goto	u3451
  3775  001E12  EF0E  F00F         	goto	u3450
  3776  001E16                     u3451:
  3777  001E16  FFFF               	dw	65535	; assembler added errata NOP
  3778  001E18  EF11  F00F         	goto	l3999
  3779  001E1C                     u3450:
  3780  001E1C  FFFF               	dw	65535	; assembler added errata NOP
  3781  001E1E                     
  3782                           ;motors.c: 643:                 motCounter[2][0] = 0;
  3783  001E1E  0E00               	movlw	0
  3784  001E20  6E6B               	movwf	(_motCounter+4)^0,c
  3785  001E22                     l3999:
  3786  001E22  FFFF               	dw	65535	; assembler added errata NOP
  3787                           
  3788                           ;motors.c: 646:             LATC = stepMot3[motCounter[2][0]];
  3789  001E24  0E84               	movlw	low _stepMot3
  3790  001E26  246B               	addwf	(_motCounter+4)^0,w,c
  3791  001E28  6ED9               	movwf	fsr2l,c
  3792  001E2A  6ADA               	clrf	fsr2h,c
  3793  001E2C  0E00               	movlw	high _stepMot3
  3794  001E2E  22DA               	addwfc	fsr2h,f,c
  3795  001E30  50DF               	movf	indf2,w,c
  3796  001E32  6E8B               	movwf	139,c	;volatile
  3797  001E34                     l4001:
  3798  001E34  FFFF               	dw	65535	; assembler added errata NOP
  3799  001E36  EC15  F012         	call	_stepMade	;wreg free
  3800  001E3A  5012               	movf	?_stepMade^0,w,c
  3801  001E3C  1013               	iorwf	(?_stepMade+1)^0,w,c
  3802  001E3E  B4D8               	btfsc	status,2,c
  3803  001E40  EF24  F00F         	goto	u3461
  3804  001E44  EF27  F00F         	goto	u3460
  3805  001E48                     u3461:
  3806  001E48  FFFF               	dw	65535	; assembler added errata NOP
  3807  001E4A  EF1A  F00F         	goto	l4001
  3808  001E4E                     u3460:
  3809  001E4E  FFFF               	dw	65535	; assembler added errata NOP
  3810  001E50  EFE7  F00E         	goto	l3987
  3811  001E54                     l4005:
  3812  001E54  FFFF               	dw	65535	; assembler added errata NOP
  3813                           
  3814                           ;motors.c: 622:     while(!returnTherm() || PORTDbits.RD7){
  3815  001E56  EC6D  F012         	call	_returnTherm	;wreg free
  3816  001E5A  5012               	movf	?_returnTherm^0,w,c
  3817  001E5C  1013               	iorwf	(?_returnTherm+1)^0,w,c
  3818  001E5E  B4D8               	btfsc	status,2,c
  3819  001E60  EF34  F00F         	goto	u3471
  3820  001E64  EF37  F00F         	goto	u3470
  3821  001E68                     u3471:
  3822  001E68  FFFF               	dw	65535	; assembler added errata NOP
  3823  001E6A  EFEC  F00E         	goto	l3989
  3824  001E6E                     u3470:
  3825  001E6E  FFFF               	dw	65535	; assembler added errata NOP
  3826  001E70  BE83               	btfsc	131,7,c	;volatile
  3827  001E72  EF3D  F00F         	goto	u3481
  3828  001E76  EF40  F00F         	goto	u3480
  3829  001E7A                     u3481:
  3830  001E7A  FFFF               	dw	65535	; assembler added errata NOP
  3831  001E7C  EFEC  F00E         	goto	l3989
  3832  001E80                     u3480:
  3833  001E80                     l4009:
  3834  001E80  FFFF               	dw	65535	; assembler added errata NOP
  3835                           
  3836                           ;motors.c: 667:     stopADC();
  3837  001E82  ECB8  F012         	call	_stopADC	;wreg free
  3838  001E86                     
  3839                           ;motors.c: 670:     resetTherm();
  3840  001E86  EC8E  F012         	call	_resetTherm	;wreg free
  3841  001E8A                     
  3842                           ;motors.c: 673:     T0CONbits.TMR0ON = 0;
  3843  001E8A  9ED5               	bcf	213,7,c	;volatile
  3844  001E8C                     
  3845                           ;motors.c: 674:     T2CONbits.TMR2ON = 0;
  3846  001E8C  94CA               	bcf	202,2,c	;volatile
  3847  001E8E                     
  3848                           ;motors.c: 676:     resetTM0_Temp();
  3849  001E8E  EC93  F012         	call	_resetTM0_Temp	;wreg free
  3850  001E92                     
  3851                           ;motors.c: 677:     resetTM2_Temp();
  3852  001E92  EC31  F012         	call	_resetTM2_Temp	;wreg free
  3853                           
  3854                           ;motors.c: 679:     TMR0 = 0;
  3855  001E96  0E00               	movlw	0
  3856  001E98  6ED7               	movwf	215,c	;volatile
  3857  001E9A  0E00               	movlw	0
  3858  001E9C  6ED6               	movwf	214,c	;volatile
  3859                           
  3860                           ;motors.c: 680:     TMR2 = 0;
  3861  001E9E  0E00               	movlw	0
  3862  001EA0  6ECC               	movwf	204,c	;volatile
  3863  001EA2                     
  3864                           ;motors.c: 683:     resetStep();
  3865  001EA2  EC98  F012         	call	_resetStep	;wreg free
  3866  001EA6                     
  3867                           ;motors.c: 686:     if(PORTDbits.RD7){
  3868  001EA6  AE83               	btfss	131,7,c	;volatile
  3869  001EA8  EF58  F00F         	goto	u3491
  3870  001EAC  EF5B  F00F         	goto	u3490
  3871  001EB0                     u3491:
  3872  001EB0  FFFF               	dw	65535	; assembler added errata NOP
  3873  001EB2  EF60  F00F         	goto	l217
  3874  001EB6                     u3490:
  3875  001EB6  FFFF               	dw	65535	; assembler added errata NOP
  3876  001EB8                     
  3877                           ;motors.c: 687:         tm0Error = 2;
  3878  001EB8  0E00               	movlw	0
  3879  001EBA  6E5A               	movwf	(_tm0Error+1)^0,c
  3880  001EBC  0E02               	movlw	2
  3881  001EBE  6E59               	movwf	_tm0Error^0,c
  3882  001EC0                     l217:
  3883  001EC0  FFFF               	dw	65535	; assembler added errata NOP
  3884                           
  3885                           ;motors.c: 690:     return(tm0Error);
  3886  001EC2  5059               	movf	_tm0Error^0,w,c
  3887  001EC4  0012               	return		;funcret
  3888  001EC6  FFFF               	dw	65535	; errata NOP
  3889  001EC8                     __end_of_touchTherm:
  3890                           	callstack 0
  3891                           
  3892 ;; *************** function _returnTherm *****************
  3893 ;; Defined at:
  3894 ;;		line 58 in file "adc.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;		None
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;		None
  3899 ;; Return value:  Size  Location     Type
  3900 ;;                  2   17[COMRAM] unsigned int 
  3901 ;; Registers used:
  3902 ;;		None
  3903 ;; Tracked objects:
  3904 ;;		On entry : 0/0
  3905 ;;		On exit  : 0/0
  3906 ;;		Unchanged: 0/0
  3907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3908 ;;      Params:         2       0       0       0       0       0       0
  3909 ;;      Locals:         0       0       0       0       0       0       0
  3910 ;;      Temps:          0       0       0       0       0       0       0
  3911 ;;      Totals:         2       0       0       0       0       0       0
  3912 ;;Total ram usage:        2 bytes
  3913 ;; Hardware stack levels used:    1
  3914 ;; Hardware stack levels required when called:    4
  3915 ;; This function calls:
  3916 ;;		Nothing
  3917 ;; This function is called by:
  3918 ;;		_touchTherm
  3919 ;; This function uses a non-reentrant model
  3920 ;;
  3921                           
  3922                           	psect	text20
  3923  0024DA                     __ptext20:
  3924                           	callstack 0
  3925  0024DA                     _returnTherm:
  3926                           	callstack 0
  3927  0024DA  FFFF               	dw	65535	; assembler added errata NOP
  3928  0024DC                     
  3929                           ;adc.c: 59:     return therm_rel;
  3930  0024DC  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  3931  0024E0  6A13               	clrf	(?_returnTherm+1)^0,c
  3932  0024E2  0012               	return		;funcret
  3933  0024E4  FFFF               	dw	65535	; errata NOP
  3934  0024E6                     __end_of_returnTherm:
  3935                           	callstack 0
  3936                           
  3937 ;; *************** function _touchObject *****************
  3938 ;; Defined at:
  3939 ;;		line 505 in file "motors.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;		None
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;		None
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  1    wreg      unsigned char 
  3946 ;; Registers used:
  3947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3953 ;;      Params:         0       0       0       0       0       0       0
  3954 ;;      Locals:         0       0       0       0       0       0       0
  3955 ;;      Temps:          0       0       0       0       0       0       0
  3956 ;;      Totals:         0       0       0       0       0       0       0
  3957 ;;Total ram usage:        0 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    5
  3960 ;; This function calls:
  3961 ;;		_resetStep
  3962 ;;		_resetTM0_Temp
  3963 ;;		_resetTM2_Temp
  3964 ;;		_resetTherm
  3965 ;;		_resetTouch
  3966 ;;		_returnTouch
  3967 ;;		_startADC
  3968 ;;		_stepMade
  3969 ;;		_stopADC
  3970 ;; This function is called by:
  3971 ;;		_executeData
  3972 ;; This function uses a non-reentrant model
  3973 ;;
  3974                           
  3975                           	psect	text21
  3976  001CA4                     __ptext21:
  3977                           	callstack 0
  3978  001CA4                     _touchObject:
  3979                           	callstack 0
  3980  001CA4  FFFF               	dw	65535	; assembler added errata NOP
  3981  001CA6                     
  3982                           ;motors.c: 511:     motCounter[2][1] = 1;
  3983  001CA6  0E01               	movlw	1
  3984  001CA8  6E6C               	movwf	(_motCounter+5)^0,c
  3985  001CAA                     
  3986                           ;motors.c: 514:     T2CONbits.TMR2ON = 1;
  3987  001CAA  84CA               	bsf	202,2,c	;volatile
  3988                           
  3989                           ;motors.c: 516:     tm0Error = 0;
  3990  001CAC  0E00               	movlw	0
  3991  001CAE  6E5A               	movwf	(_tm0Error+1)^0,c
  3992  001CB0  0E00               	movlw	0
  3993  001CB2  6E59               	movwf	_tm0Error^0,c
  3994                           
  3995                           ;motors.c: 517:     tm0Limit = 200;
  3996  001CB4  0EC8               	movlw	200
  3997  001CB6  6E66               	movwf	_tm0Limit^0,c
  3998  001CB8                     
  3999                           ;motors.c: 518:     T0CONbits.TMR0ON = 1;
  4000  001CB8  8ED5               	bsf	213,7,c	;volatile
  4001  001CBA                     l3937:
  4002  001CBA  FFFF               	dw	65535	; assembler added errata NOP
  4003                           
  4004                           ;motors.c: 521:     startADC();
  4005  001CBC  EC84  F012         	call	_startADC	;wreg free
  4006                           
  4007                           ;motors.c: 524:     while(!returnTouch() || PORTDbits.RD7){
  4008  001CC0  EFA0  F00E         	goto	l3955
  4009  001CC4                     l3939:
  4010  001CC4  FFFF               	dw	65535	; assembler added errata NOP
  4011                           
  4012                           ;motors.c: 526:         resetStep();
  4013  001CC6  EC98  F012         	call	_resetStep	;wreg free
  4014  001CCA                     
  4015                           ;motors.c: 529:         if(tm0Error){
  4016  001CCA  5059               	movf	_tm0Error^0,w,c
  4017  001CCC  105A               	iorwf	(_tm0Error+1)^0,w,c
  4018  001CCE  B4D8               	btfsc	status,2,c
  4019  001CD0  EF6C  F00E         	goto	u3381
  4020  001CD4  EF6F  F00E         	goto	u3380
  4021  001CD8                     u3381:
  4022  001CD8  FFFF               	dw	65535	; assembler added errata NOP
  4023  001CDA  EF76  F00E         	goto	l3945
  4024  001CDE                     u3380:
  4025  001CDE  FFFF               	dw	65535	; assembler added errata NOP
  4026  001CE0                     
  4027                           ;motors.c: 534:             tm0Error = 6;
  4028  001CE0  0E00               	movlw	0
  4029  001CE2  6E5A               	movwf	(_tm0Error+1)^0,c
  4030  001CE4  0E06               	movlw	6
  4031  001CE6  6E59               	movwf	_tm0Error^0,c
  4032                           
  4033                           ;motors.c: 535:             break;
  4034  001CE8  EFB6  F00E         	goto	l3959
  4035  001CEC                     l3945:
  4036  001CEC  FFFF               	dw	65535	; assembler added errata NOP
  4037                           
  4038                           ;motors.c: 543:             motCounter[2][0] += motCounter[2][1];
  4039  001CEE  506C               	movf	(_motCounter+5)^0,w,c
  4040  001CF0  266B               	addwf	(_motCounter+4)^0,f,c
  4041                           
  4042                           ;motors.c: 544:             if(motCounter[2][0] > 3){
  4043  001CF2  506B               	movf	(_motCounter+4)^0,w,c
  4044  001CF4  0A80               	xorlw	128
  4045  001CF6  0F7C               	addlw	-132
  4046  001CF8  A0D8               	btfss	status,0,c
  4047  001CFA  EF81  F00E         	goto	u3391
  4048  001CFE  EF84  F00E         	goto	u3390
  4049  001D02                     u3391:
  4050  001D02  FFFF               	dw	65535	; assembler added errata NOP
  4051  001D04  EF87  F00E         	goto	l3949
  4052  001D08                     u3390:
  4053  001D08  FFFF               	dw	65535	; assembler added errata NOP
  4054  001D0A                     
  4055                           ;motors.c: 545:                 motCounter[2][0] = 0;
  4056  001D0A  0E00               	movlw	0
  4057  001D0C  6E6B               	movwf	(_motCounter+4)^0,c
  4058  001D0E                     l3949:
  4059  001D0E  FFFF               	dw	65535	; assembler added errata NOP
  4060                           
  4061                           ;motors.c: 548:             LATC = stepMot3[motCounter[2][0]];
  4062  001D10  0E84               	movlw	low _stepMot3
  4063  001D12  246B               	addwf	(_motCounter+4)^0,w,c
  4064  001D14  6ED9               	movwf	fsr2l,c
  4065  001D16  6ADA               	clrf	fsr2h,c
  4066  001D18  0E00               	movlw	high _stepMot3
  4067  001D1A  22DA               	addwfc	fsr2h,f,c
  4068  001D1C  50DF               	movf	indf2,w,c
  4069  001D1E  6E8B               	movwf	139,c	;volatile
  4070  001D20                     l3951:
  4071  001D20  FFFF               	dw	65535	; assembler added errata NOP
  4072  001D22  EC15  F012         	call	_stepMade	;wreg free
  4073  001D26  5012               	movf	?_stepMade^0,w,c
  4074  001D28  1013               	iorwf	(?_stepMade+1)^0,w,c
  4075  001D2A  B4D8               	btfsc	status,2,c
  4076  001D2C  EF9A  F00E         	goto	u3401
  4077  001D30  EF9D  F00E         	goto	u3400
  4078  001D34                     u3401:
  4079  001D34  FFFF               	dw	65535	; assembler added errata NOP
  4080  001D36  EF90  F00E         	goto	l3951
  4081  001D3A                     u3400:
  4082  001D3A  FFFF               	dw	65535	; assembler added errata NOP
  4083  001D3C  EF5D  F00E         	goto	l3937
  4084  001D40                     l3955:
  4085  001D40  FFFF               	dw	65535	; assembler added errata NOP
  4086                           
  4087                           ;motors.c: 524:     while(!returnTouch() || PORTDbits.RD7){
  4088  001D42  EC73  F012         	call	_returnTouch	;wreg free
  4089  001D46  5012               	movf	?_returnTouch^0,w,c
  4090  001D48  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4091  001D4A  B4D8               	btfsc	status,2,c
  4092  001D4C  EFAA  F00E         	goto	u3411
  4093  001D50  EFAD  F00E         	goto	u3410
  4094  001D54                     u3411:
  4095  001D54  FFFF               	dw	65535	; assembler added errata NOP
  4096  001D56  EF62  F00E         	goto	l3939
  4097  001D5A                     u3410:
  4098  001D5A  FFFF               	dw	65535	; assembler added errata NOP
  4099  001D5C  BE83               	btfsc	131,7,c	;volatile
  4100  001D5E  EFB3  F00E         	goto	u3421
  4101  001D62  EFB6  F00E         	goto	u3420
  4102  001D66                     u3421:
  4103  001D66  FFFF               	dw	65535	; assembler added errata NOP
  4104  001D68  EF62  F00E         	goto	l3939
  4105  001D6C                     u3420:
  4106  001D6C                     l3959:
  4107  001D6C  FFFF               	dw	65535	; assembler added errata NOP
  4108                           
  4109                           ;motors.c: 567:     stopADC();
  4110  001D6E  ECB8  F012         	call	_stopADC	;wreg free
  4111  001D72                     
  4112                           ;motors.c: 570:     resetTouch();
  4113  001D72  EC89  F012         	call	_resetTouch	;wreg free
  4114  001D76                     
  4115                           ;motors.c: 573:     T0CONbits.TMR0ON = 0;
  4116  001D76  9ED5               	bcf	213,7,c	;volatile
  4117  001D78                     
  4118                           ;motors.c: 574:     T2CONbits.TMR2ON = 0;
  4119  001D78  94CA               	bcf	202,2,c	;volatile
  4120  001D7A                     
  4121                           ;motors.c: 576:     resetTM0_Temp();
  4122  001D7A  EC93  F012         	call	_resetTM0_Temp	;wreg free
  4123  001D7E                     
  4124                           ;motors.c: 577:     resetTM2_Temp();
  4125  001D7E  EC31  F012         	call	_resetTM2_Temp	;wreg free
  4126                           
  4127                           ;motors.c: 579:     TMR0 = 0;
  4128  001D82  0E00               	movlw	0
  4129  001D84  6ED7               	movwf	215,c	;volatile
  4130  001D86  0E00               	movlw	0
  4131  001D88  6ED6               	movwf	214,c	;volatile
  4132                           
  4133                           ;motors.c: 580:     TMR2 = 0;
  4134  001D8A  0E00               	movlw	0
  4135  001D8C  6ECC               	movwf	204,c	;volatile
  4136  001D8E                     
  4137                           ;motors.c: 583:     resetStep();
  4138  001D8E  EC98  F012         	call	_resetStep	;wreg free
  4139  001D92                     
  4140                           ;motors.c: 584:     resetTherm();
  4141  001D92  EC8E  F012         	call	_resetTherm	;wreg free
  4142  001D96                     
  4143                           ;motors.c: 587:     if(PORTDbits.RD7){
  4144  001D96  AE83               	btfss	131,7,c	;volatile
  4145  001D98  EFD0  F00E         	goto	u3431
  4146  001D9C  EFD3  F00E         	goto	u3430
  4147  001DA0                     u3431:
  4148  001DA0  FFFF               	dw	65535	; assembler added errata NOP
  4149  001DA2  EFD8  F00E         	goto	l205
  4150  001DA6                     u3430:
  4151  001DA6  FFFF               	dw	65535	; assembler added errata NOP
  4152  001DA8                     
  4153                           ;motors.c: 588:         tm0Error = 2;
  4154  001DA8  0E00               	movlw	0
  4155  001DAA  6E5A               	movwf	(_tm0Error+1)^0,c
  4156  001DAC  0E02               	movlw	2
  4157  001DAE  6E59               	movwf	_tm0Error^0,c
  4158  001DB0                     l205:
  4159  001DB0  FFFF               	dw	65535	; assembler added errata NOP
  4160                           
  4161                           ;motors.c: 591:     return(tm0Error);
  4162  001DB2  5059               	movf	_tm0Error^0,w,c
  4163  001DB4  0012               	return		;funcret
  4164  001DB6  FFFF               	dw	65535	; errata NOP
  4165  001DB8                     __end_of_touchObject:
  4166                           	callstack 0
  4167                           
  4168 ;; *************** function _stopADC *****************
  4169 ;; Defined at:
  4170 ;;		line 44 in file "adc.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;		None
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  1    wreg      void 
  4177 ;; Registers used:
  4178 ;;		None
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4184 ;;      Params:         0       0       0       0       0       0       0
  4185 ;;      Locals:         0       0       0       0       0       0       0
  4186 ;;      Temps:          0       0       0       0       0       0       0
  4187 ;;      Totals:         0       0       0       0       0       0       0
  4188 ;;Total ram usage:        0 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    4
  4191 ;; This function calls:
  4192 ;;		Nothing
  4193 ;; This function is called by:
  4194 ;;		_touchObject
  4195 ;;		_touchTherm
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	text22
  4200  002570                     __ptext22:
  4201                           	callstack 0
  4202  002570                     _stopADC:
  4203                           	callstack 0
  4204  002570  FFFF               	dw	65535	; assembler added errata NOP
  4205  002572                     
  4206                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4207  002572  90C2               	bcf	194,0,c	;volatile
  4208  002574  0012               	return		;funcret
  4209  002576  FFFF               	dw	65535	; errata NOP
  4210  002578                     __end_of_stopADC:
  4211                           	callstack 0
  4212                           
  4213 ;; *************** function _startADC *****************
  4214 ;; Defined at:
  4215 ;;		line 36 in file "adc.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;		None
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;		None
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  1    wreg      void 
  4222 ;; Registers used:
  4223 ;;		None
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4229 ;;      Params:         0       0       0       0       0       0       0
  4230 ;;      Locals:         0       0       0       0       0       0       0
  4231 ;;      Temps:          0       0       0       0       0       0       0
  4232 ;;      Totals:         0       0       0       0       0       0       0
  4233 ;;Total ram usage:        0 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    4
  4236 ;; This function calls:
  4237 ;;		Nothing
  4238 ;; This function is called by:
  4239 ;;		_touchObject
  4240 ;;		_touchTherm
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           	psect	text23
  4245  002508                     __ptext23:
  4246                           	callstack 0
  4247  002508                     _startADC:
  4248                           	callstack 0
  4249  002508  FFFF               	dw	65535	; assembler added errata NOP
  4250  00250A                     
  4251                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4252  00250A  80C2               	bsf	194,0,c	;volatile
  4253                           
  4254                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4255  00250C  84C2               	bsf	194,2,c	;volatile
  4256  00250E  0012               	return		;funcret
  4257  002510  FFFF               	dw	65535	; errata NOP
  4258  002512                     __end_of_startADC:
  4259                           	callstack 0
  4260                           
  4261 ;; *************** function _returnTouch *****************
  4262 ;; Defined at:
  4263 ;;		line 51 in file "adc.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;		None
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;		None
  4268 ;; Return value:  Size  Location     Type
  4269 ;;                  2   17[COMRAM] unsigned int 
  4270 ;; Registers used:
  4271 ;;		None
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4277 ;;      Params:         2       0       0       0       0       0       0
  4278 ;;      Locals:         0       0       0       0       0       0       0
  4279 ;;      Temps:          0       0       0       0       0       0       0
  4280 ;;      Totals:         2       0       0       0       0       0       0
  4281 ;;Total ram usage:        2 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    4
  4284 ;; This function calls:
  4285 ;;		Nothing
  4286 ;; This function is called by:
  4287 ;;		_touchObject
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           	psect	text24
  4292  0024E6                     __ptext24:
  4293                           	callstack 0
  4294  0024E6                     _returnTouch:
  4295                           	callstack 0
  4296  0024E6  FFFF               	dw	65535	; assembler added errata NOP
  4297  0024E8                     
  4298                           ;adc.c: 52:     return touch_rel;
  4299  0024E8  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4300  0024EC  6A13               	clrf	(?_returnTouch+1)^0,c
  4301  0024EE  0012               	return		;funcret
  4302  0024F0  FFFF               	dw	65535	; errata NOP
  4303  0024F2                     __end_of_returnTouch:
  4304                           	callstack 0
  4305                           
  4306 ;; *************** function _resetTouch *****************
  4307 ;; Defined at:
  4308 ;;		line 65 in file "adc.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;		None
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;		None
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      void 
  4315 ;; Registers used:
  4316 ;;		wreg, status,2
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4322 ;;      Params:         0       0       0       0       0       0       0
  4323 ;;      Locals:         0       0       0       0       0       0       0
  4324 ;;      Temps:          0       0       0       0       0       0       0
  4325 ;;      Totals:         0       0       0       0       0       0       0
  4326 ;;Total ram usage:        0 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    4
  4329 ;; This function calls:
  4330 ;;		Nothing
  4331 ;; This function is called by:
  4332 ;;		_touchObject
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text25
  4337  002512                     __ptext25:
  4338                           	callstack 0
  4339  002512                     _resetTouch:
  4340                           	callstack 0
  4341  002512  FFFF               	dw	65535	; assembler added errata NOP
  4342  002514                     
  4343                           ;adc.c: 66:     touch_rel = 0;
  4344  002514  0E00               	movlw	0
  4345  002516  6E65               	movwf	_touch_rel^0,c	;volatile
  4346  002518  0012               	return		;funcret
  4347  00251A  FFFF               	dw	65535	; errata NOP
  4348  00251C                     __end_of_resetTouch:
  4349                           	callstack 0
  4350                           
  4351 ;; *************** function _resetTherm *****************
  4352 ;; Defined at:
  4353 ;;		line 72 in file "adc.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;		None
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;		None
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  1    wreg      void 
  4360 ;; Registers used:
  4361 ;;		wreg, status,2
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4367 ;;      Params:         0       0       0       0       0       0       0
  4368 ;;      Locals:         0       0       0       0       0       0       0
  4369 ;;      Temps:          0       0       0       0       0       0       0
  4370 ;;      Totals:         0       0       0       0       0       0       0
  4371 ;;Total ram usage:        0 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    4
  4374 ;; This function calls:
  4375 ;;		Nothing
  4376 ;; This function is called by:
  4377 ;;		_touchObject
  4378 ;;		_touchTherm
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           	psect	text26
  4383  00251C                     __ptext26:
  4384                           	callstack 0
  4385  00251C                     _resetTherm:
  4386                           	callstack 0
  4387  00251C  FFFF               	dw	65535	; assembler added errata NOP
  4388  00251E                     
  4389                           ;adc.c: 73:     therm_rel = 0;
  4390  00251E  0E00               	movlw	0
  4391  002520  6E64               	movwf	_therm_rel^0,c	;volatile
  4392  002522  0012               	return		;funcret
  4393  002524  FFFF               	dw	65535	; errata NOP
  4394  002526                     __end_of_resetTherm:
  4395                           	callstack 0
  4396                           
  4397 ;; *************** function _rotateObj *****************
  4398 ;; Defined at:
  4399 ;;		line 775 in file "motors.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  rotAngle        1    wreg     unsigned char 
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;  rotAngle        1    2[BANK0 ] unsigned char 
  4404 ;;  i               2    5[BANK0 ] unsigned int 
  4405 ;;  totStep         2    3[BANK0 ] int 
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  1    wreg      void 
  4408 ;; Registers used:
  4409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4415 ;;      Params:         0       0       0       0       0       0       0
  4416 ;;      Locals:         0       5       0       0       0       0       0
  4417 ;;      Temps:          0       2       0       0       0       0       0
  4418 ;;      Totals:         0       7       0       0       0       0       0
  4419 ;;Total ram usage:        7 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:    5
  4422 ;; This function calls:
  4423 ;;		___fldiv
  4424 ;;		___fltol
  4425 ;;		___xxtofl
  4426 ;;		_resetStep
  4427 ;;		_resetTM2_Temp
  4428 ;;		_stepMade
  4429 ;; This function is called by:
  4430 ;;		_executeData
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           	psect	text27
  4435  001FC0                     __ptext27:
  4436                           	callstack 0
  4437  001FC0                     _rotateObj:
  4438                           	callstack 0
  4439  001FC0  FFFF               	dw	65535	; assembler added errata NOP
  4440                           
  4441                           ;incstack = 0
  4442                           ;rotateObj@rotAngle stored from wreg
  4443  001FC2  0100               	movlb	0	; () banked
  4444  001FC4  6FE8               	movwf	rotateObj@rotAngle& (0+255),b
  4445  001FC6                     
  4446                           ;motors.c: 776:     static const float stepAngle = 0.08789;;motors.c: 777:     static ch
      +                          ar rotSequence[] = {0b100100, 0b001100, 0b011000, 0b110000};;motors.c: 778:     unsigned
      +                           int i;;motors.c: 779:     int totStep = rotAngle/stepAngle;
  4447  001FC6  0EAC               	movlw	172
  4448  001FC8  6E24               	movwf	___fldiv@a^0,c
  4449  001FCA  0EFF               	movlw	255
  4450  001FCC  6E25               	movwf	(___fldiv@a+1)^0,c
  4451  001FCE  0EB3               	movlw	179
  4452  001FD0  6E26               	movwf	(___fldiv@a+2)^0,c
  4453  001FD2  0E3D               	movlw	61
  4454  001FD4  6E27               	movwf	(___fldiv@a+3)^0,c
  4455  001FD6  0100               	movlb	0	; () banked
  4456  001FD8  51E8               	movf	rotateObj@rotAngle& (0+255),w,b
  4457  001FDA  6E12               	movwf	___xxtofl@val^0,c
  4458  001FDC  6A13               	clrf	(___xxtofl@val+1)^0,c
  4459  001FDE  6A14               	clrf	(___xxtofl@val+2)^0,c
  4460  001FE0  6A15               	clrf	(___xxtofl@val+3)^0,c
  4461  001FE2  0E01               	movlw	1
  4462  001FE4  EC5E  F008         	call	___xxtofl
  4463  001FE8  C012  F020         	movff	?___xxtofl,___fldiv@b
  4464  001FEC  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4465  001FF0  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4466  001FF4  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4467  001FF8  EC09  F003         	call	___fldiv	;wreg free
  4468  001FFC  C020  F039         	movff	?___fldiv,___fltol@f1
  4469  002000  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4470  002004  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4471  002008  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4472  00200C  EC9B  F00C         	call	___fltol	;wreg free
  4473  002010  C039  F0E9         	movff	?___fltol,rotateObj@totStep
  4474  002014  C03A  F0EA         	movff	?___fltol+1,rotateObj@totStep+1
  4475  002018                     
  4476                           ;motors.c: 782:     for(i = 0; i < totStep; i++){
  4477  002018  0E00               	movlw	0
  4478  00201A  0100               	movlb	0	; () banked
  4479  00201C  6FEC               	movwf	(rotateObj@i+1)& (0+255),b
  4480  00201E  0E00               	movlw	0
  4481  002020  6FEB               	movwf	rotateObj@i& (0+255),b
  4482  002022  EF39  F010         	goto	l4075
  4483  002026                     l4063:
  4484  002026  FFFF               	dw	65535	; assembler added errata NOP
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;motors.c: 784:         LATD &= 0xC3;
  4488  002028  0EC3               	movlw	195
  4489  00202A  168C               	andwf	140,f,c	;volatile
  4490  00202C                     
  4491                           ; BSR set to: 0
  4492                           ;motors.c: 786:         LATD |= rotSequence[i%4];
  4493  00202C  0E03               	movlw	3
  4494  00202E  15EB               	andwf	rotateObj@i& (0+255),w,b
  4495  002030  6FE6               	movwf	??_rotateObj& (0+255),b
  4496  002032  0E00               	movlw	0
  4497  002034  15EC               	andwf	(rotateObj@i+1)& (0+255),w,b
  4498  002036  6FE7               	movwf	(??_rotateObj+1)& (0+255),b
  4499  002038  0E80               	movlw	low rotateObj@rotSequence
  4500  00203A  25E6               	addwf	??_rotateObj& (0+255),w,b
  4501  00203C  6ED9               	movwf	fsr2l,c
  4502  00203E  0E00               	movlw	high rotateObj@rotSequence
  4503  002040  21E7               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4504  002042  6EDA               	movwf	fsr2h,c
  4505  002044  50DF               	movf	indf2,w,c
  4506  002046  128C               	iorwf	140,f,c	;volatile
  4507  002048                     
  4508                           ; BSR set to: 0
  4509                           ;motors.c: 789:         T2CONbits.TMR2ON = 1;
  4510  002048  84CA               	bsf	202,2,c	;volatile
  4511  00204A                     l4069:
  4512  00204A  FFFF               	dw	65535	; assembler added errata NOP
  4513  00204C  EC15  F012         	call	_stepMade	;wreg free
  4514  002050  5012               	movf	?_stepMade^0,w,c
  4515  002052  1013               	iorwf	(?_stepMade+1)^0,w,c
  4516  002054  B4D8               	btfsc	status,2,c
  4517  002056  EF2F  F010         	goto	u3541
  4518  00205A  EF32  F010         	goto	u3540
  4519  00205E                     u3541:
  4520  00205E  FFFF               	dw	65535	; assembler added errata NOP
  4521  002060  EF25  F010         	goto	l4069
  4522  002064                     u3540:
  4523  002064  FFFF               	dw	65535	; assembler added errata NOP
  4524  002066                     
  4525                           ;motors.c: 791:         T2CONbits.TMR2ON = 0;
  4526  002066  94CA               	bcf	202,2,c	;volatile
  4527  002068                     
  4528                           ;motors.c: 792:         TMR2 = 0;
  4529  002068  0E00               	movlw	0
  4530  00206A  6ECC               	movwf	204,c	;volatile
  4531  00206C                     
  4532                           ;motors.c: 793:     }
  4533  00206C  0100               	movlb	0	; () banked
  4534  00206E  4BEB               	infsnz	rotateObj@i& (0+255),f,b
  4535  002070  2BEC               	incf	(rotateObj@i+1)& (0+255),f,b
  4536  002072                     l4075:
  4537  002072  FFFF               	dw	65535	; assembler added errata NOP
  4538                           
  4539                           ; BSR set to: 0
  4540  002074  51E9               	movf	rotateObj@totStep& (0+255),w,b
  4541  002076  5DEB               	subwf	rotateObj@i& (0+255),w,b
  4542  002078  51EA               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4543  00207A  59EC               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4544  00207C  A0D8               	btfss	status,0,c
  4545  00207E  EF43  F010         	goto	u3551
  4546  002082  EF46  F010         	goto	u3550
  4547  002086                     u3551:
  4548  002086  FFFF               	dw	65535	; assembler added errata NOP
  4549  002088  EF13  F010         	goto	l4063
  4550  00208C                     u3550:
  4551  00208C  FFFF               	dw	65535	; assembler added errata NOP
  4552  00208E                     
  4553                           ; BSR set to: 0
  4554                           ;motors.c: 796:     resetTM2_Temp();
  4555  00208E  EC31  F012         	call	_resetTM2_Temp	;wreg free
  4556                           
  4557                           ;motors.c: 799:     resetStep();
  4558  002092  EC98  F012         	call	_resetStep	;wreg free
  4559  002096  0012               	return		;funcret
  4560  002098  FFFF               	dw	65535	; errata NOP
  4561  00209A                     __end_of_rotateObj:
  4562                           	callstack 0
  4563                           
  4564 ;; *************** function ___xxtofl *****************
  4565 ;; Defined at:
  4566 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;  sign            1    wreg     unsigned char 
  4569 ;;  val             4   17[COMRAM] long 
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  sign            1   25[COMRAM] unsigned char 
  4572 ;;  arg             4   27[COMRAM] unsigned long 
  4573 ;;  exp             1   26[COMRAM] unsigned char 
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  4   17[COMRAM] unsigned char 
  4576 ;; Registers used:
  4577 ;;		wreg, status,2, status,0
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4583 ;;      Params:         4       0       0       0       0       0       0
  4584 ;;      Locals:         6       0       0       0       0       0       0
  4585 ;;      Temps:          4       0       0       0       0       0       0
  4586 ;;      Totals:        14       0       0       0       0       0       0
  4587 ;;Total ram usage:       14 bytes
  4588 ;; Hardware stack levels used:    1
  4589 ;; Hardware stack levels required when called:    4
  4590 ;; This function calls:
  4591 ;;		Nothing
  4592 ;; This function is called by:
  4593 ;;		_rotateObj
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           	psect	text28
  4598  0010BC                     __ptext28:
  4599                           	callstack 0
  4600  0010BC                     ___xxtofl:
  4601                           	callstack 0
  4602  0010BC  FFFF               	dw	65535	; assembler added errata NOP
  4603                           
  4604                           ;incstack = 0
  4605                           ;___xxtofl@sign stored from wreg
  4606  0010BE  6E1A               	movwf	___xxtofl@sign^0,c
  4607  0010C0  501A               	movf	___xxtofl@sign^0,w,c
  4608  0010C2  B4D8               	btfsc	status,2,c
  4609  0010C4  EF66  F008         	goto	u3041
  4610  0010C8  EF69  F008         	goto	u3040
  4611  0010CC                     u3041:
  4612  0010CC  FFFF               	dw	65535	; assembler added errata NOP
  4613  0010CE  EF8E  F008         	goto	l1295
  4614  0010D2                     u3040:
  4615  0010D2  FFFF               	dw	65535	; assembler added errata NOP
  4616  0010D4  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4617  0010D6  EF72  F008         	goto	u3050
  4618  0010DA  EF6F  F008         	goto	u3051
  4619  0010DE                     u3051:
  4620  0010DE  FFFF               	dw	65535	; assembler added errata NOP
  4621  0010E0  EF8E  F008         	goto	l1295
  4622  0010E4                     u3050:
  4623  0010E4  FFFF               	dw	65535	; assembler added errata NOP
  4624  0010E6  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4625  0010EA  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4626  0010EE  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4627  0010F2  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4628  0010F6  1E16               	comf	??___xxtofl^0,f,c
  4629  0010F8  1E17               	comf	(??___xxtofl+1)^0,f,c
  4630  0010FA  1E18               	comf	(??___xxtofl+2)^0,f,c
  4631  0010FC  1E19               	comf	(??___xxtofl+3)^0,f,c
  4632  0010FE  2A16               	incf	??___xxtofl^0,f,c
  4633  001100  0E00               	movlw	0
  4634  001102  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4635  001104  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4636  001106  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4637  001108  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4638  00110C  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4639  001110  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4640  001114  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4641  001118  EF97  F008         	goto	l3791
  4642  00111C                     l1295:
  4643  00111C  FFFF               	dw	65535	; assembler added errata NOP
  4644  00111E  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4645  001122  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4646  001126  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4647  00112A  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4648  00112E                     l3791:
  4649  00112E  FFFF               	dw	65535	; assembler added errata NOP
  4650  001130  5012               	movf	___xxtofl@val^0,w,c
  4651  001132  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4652  001134  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4653  001136  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4654  001138  A4D8               	btfss	status,2,c
  4655  00113A  EFA1  F008         	goto	u3061
  4656  00113E  EFA4  F008         	goto	u3060
  4657  001142                     u3061:
  4658  001142  FFFF               	dw	65535	; assembler added errata NOP
  4659  001144  EFAF  F008         	goto	l3797
  4660  001148                     u3060:
  4661  001148  FFFF               	dw	65535	; assembler added errata NOP
  4662  00114A  0E00               	movlw	0
  4663  00114C  6E12               	movwf	?___xxtofl^0,c
  4664  00114E  0E00               	movlw	0
  4665  001150  6E13               	movwf	(?___xxtofl+1)^0,c
  4666  001152  0E00               	movlw	0
  4667  001154  6E14               	movwf	(?___xxtofl+2)^0,c
  4668  001156  0E00               	movlw	0
  4669  001158  6E15               	movwf	(?___xxtofl+3)^0,c
  4670  00115A  EF57  F009         	goto	l1298
  4671  00115E                     l3797:
  4672  00115E  FFFF               	dw	65535	; assembler added errata NOP
  4673  001160  0E96               	movlw	150
  4674  001162  6E1B               	movwf	___xxtofl@exp^0,c
  4675  001164  EFBB  F008         	goto	l3801
  4676  001168                     l3799:
  4677  001168  FFFF               	dw	65535	; assembler added errata NOP
  4678  00116A  2A1B               	incf	___xxtofl@exp^0,f,c
  4679  00116C  90D8               	bcf	status,0,c
  4680  00116E  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4681  001170  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4682  001172  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4683  001174  321C               	rrcf	___xxtofl@arg^0,f,c
  4684  001176                     l3801:
  4685  001176  FFFF               	dw	65535	; assembler added errata NOP
  4686  001178  0E00               	movlw	0
  4687  00117A  141C               	andwf	___xxtofl@arg^0,w,c
  4688  00117C  6E16               	movwf	??___xxtofl^0,c
  4689  00117E  0E00               	movlw	0
  4690  001180  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4691  001182  6E17               	movwf	(??___xxtofl+1)^0,c
  4692  001184  0E00               	movlw	0
  4693  001186  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4694  001188  6E18               	movwf	(??___xxtofl+2)^0,c
  4695  00118A  0EFE               	movlw	254
  4696  00118C  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4697  00118E  6E19               	movwf	(??___xxtofl+3)^0,c
  4698  001190  5016               	movf	??___xxtofl^0,w,c
  4699  001192  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4700  001194  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4701  001196  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4702  001198  A4D8               	btfss	status,2,c
  4703  00119A  EFD1  F008         	goto	u3071
  4704  00119E  EFD4  F008         	goto	u3070
  4705  0011A2                     u3071:
  4706  0011A2  FFFF               	dw	65535	; assembler added errata NOP
  4707  0011A4  EFB4  F008         	goto	l3799
  4708  0011A8                     u3070:
  4709  0011A8  FFFF               	dw	65535	; assembler added errata NOP
  4710  0011AA  EFE4  F008         	goto	l1302
  4711  0011AE                     l3803:
  4712  0011AE  FFFF               	dw	65535	; assembler added errata NOP
  4713  0011B0  2A1B               	incf	___xxtofl@exp^0,f,c
  4714  0011B2  0E01               	movlw	1
  4715  0011B4  261C               	addwf	___xxtofl@arg^0,f,c
  4716  0011B6  0E00               	movlw	0
  4717  0011B8  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4718  0011BA  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4719  0011BC  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4720  0011BE  90D8               	bcf	status,0,c
  4721  0011C0  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4722  0011C2  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4723  0011C4  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4724  0011C6  321C               	rrcf	___xxtofl@arg^0,f,c
  4725  0011C8                     l1302:
  4726  0011C8  FFFF               	dw	65535	; assembler added errata NOP
  4727  0011CA  0E00               	movlw	0
  4728  0011CC  141C               	andwf	___xxtofl@arg^0,w,c
  4729  0011CE  6E16               	movwf	??___xxtofl^0,c
  4730  0011D0  0E00               	movlw	0
  4731  0011D2  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4732  0011D4  6E17               	movwf	(??___xxtofl+1)^0,c
  4733  0011D6  0E00               	movlw	0
  4734  0011D8  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4735  0011DA  6E18               	movwf	(??___xxtofl+2)^0,c
  4736  0011DC  0EFF               	movlw	255
  4737  0011DE  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4738  0011E0  6E19               	movwf	(??___xxtofl+3)^0,c
  4739  0011E2  5016               	movf	??___xxtofl^0,w,c
  4740  0011E4  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4741  0011E6  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4742  0011E8  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4743  0011EA  A4D8               	btfss	status,2,c
  4744  0011EC  EFFA  F008         	goto	u3081
  4745  0011F0  EFFD  F008         	goto	u3080
  4746  0011F4                     u3081:
  4747  0011F4  FFFF               	dw	65535	; assembler added errata NOP
  4748  0011F6  EFD7  F008         	goto	l3803
  4749  0011FA                     u3080:
  4750  0011FA  FFFF               	dw	65535	; assembler added errata NOP
  4751  0011FC  EF07  F009         	goto	l3811
  4752  001200                     l3809:
  4753  001200  FFFF               	dw	65535	; assembler added errata NOP
  4754  001202  061B               	decf	___xxtofl@exp^0,f,c
  4755  001204  90D8               	bcf	status,0,c
  4756  001206  361C               	rlcf	___xxtofl@arg^0,f,c
  4757  001208  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4758  00120A  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4759  00120C  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4760  00120E                     l3811:
  4761  00120E  FFFF               	dw	65535	; assembler added errata NOP
  4762  001210  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4763  001212  EF0D  F009         	goto	u3091
  4764  001216  EF10  F009         	goto	u3090
  4765  00121A                     u3091:
  4766  00121A  FFFF               	dw	65535	; assembler added errata NOP
  4767  00121C  EF1A  F009         	goto	l1309
  4768  001220                     u3090:
  4769  001220  FFFF               	dw	65535	; assembler added errata NOP
  4770  001222  0E02               	movlw	2
  4771  001224  601B               	cpfslt	___xxtofl@exp^0,c
  4772  001226  EF17  F009         	goto	u3101
  4773  00122A  EF1A  F009         	goto	u3100
  4774  00122E                     u3101:
  4775  00122E  FFFF               	dw	65535	; assembler added errata NOP
  4776  001230  EF00  F009         	goto	l3809
  4777  001234                     u3100:
  4778  001234                     l1309:
  4779  001234  FFFF               	dw	65535	; assembler added errata NOP
  4780  001236  B01B               	btfsc	___xxtofl@exp^0,0,c
  4781  001238  EF20  F009         	goto	u3111
  4782  00123C  EF23  F009         	goto	u3110
  4783  001240                     u3111:
  4784  001240  FFFF               	dw	65535	; assembler added errata NOP
  4785  001242  EF25  F009         	goto	l3817
  4786  001246                     u3110:
  4787  001246  FFFF               	dw	65535	; assembler added errata NOP
  4788  001248  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4789  00124A                     l3817:
  4790  00124A  FFFF               	dw	65535	; assembler added errata NOP
  4791  00124C  90D8               	bcf	status,0,c
  4792  00124E  321B               	rrcf	___xxtofl@exp^0,f,c
  4793  001250  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4794  001254  6A17               	clrf	(??___xxtofl+1)^0,c
  4795  001256  6A18               	clrf	(??___xxtofl+2)^0,c
  4796  001258  6A19               	clrf	(??___xxtofl+3)^0,c
  4797  00125A  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4798  00125E  6A18               	clrf	(??___xxtofl+2)^0,c
  4799  001260  6A17               	clrf	(??___xxtofl+1)^0,c
  4800  001262  6A16               	clrf	??___xxtofl^0,c
  4801  001264  5016               	movf	??___xxtofl^0,w,c
  4802  001266  121C               	iorwf	___xxtofl@arg^0,f,c
  4803  001268  5017               	movf	(??___xxtofl+1)^0,w,c
  4804  00126A  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4805  00126C  5018               	movf	(??___xxtofl+2)^0,w,c
  4806  00126E  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4807  001270  5019               	movf	(??___xxtofl+3)^0,w,c
  4808  001272  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4809  001274  501A               	movf	___xxtofl@sign^0,w,c
  4810  001276  B4D8               	btfsc	status,2,c
  4811  001278  EF40  F009         	goto	u3121
  4812  00127C  EF43  F009         	goto	u3120
  4813  001280                     u3121:
  4814  001280  FFFF               	dw	65535	; assembler added errata NOP
  4815  001282  EF4E  F009         	goto	l3827
  4816  001286                     u3120:
  4817  001286  FFFF               	dw	65535	; assembler added errata NOP
  4818  001288  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4819  00128A  EF4C  F009         	goto	u3130
  4820  00128E  EF49  F009         	goto	u3131
  4821  001292                     u3131:
  4822  001292  FFFF               	dw	65535	; assembler added errata NOP
  4823  001294  EF4E  F009         	goto	l3827
  4824  001298                     u3130:
  4825  001298  FFFF               	dw	65535	; assembler added errata NOP
  4826  00129A  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4827  00129C                     l3827:
  4828  00129C  FFFF               	dw	65535	; assembler added errata NOP
  4829  00129E  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4830  0012A2  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4831  0012A6  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4832  0012AA  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  4833  0012AE                     l1298:
  4834  0012AE  FFFF               	dw	65535	; assembler added errata NOP
  4835  0012B0  0012               	return		;funcret
  4836  0012B2  FFFF               	dw	65535	; errata NOP
  4837  0012B4                     __end_of___xxtofl:
  4838                           	callstack 0
  4839                           
  4840 ;; *************** function ___fltol *****************
  4841 ;; Defined at:
  4842 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  4843 ;; Parameters:    Size  Location     Type
  4844 ;;  f1              4   56[COMRAM] unsigned char 
  4845 ;; Auto vars:     Size  Location     Type
  4846 ;;  exp1            1   65[COMRAM] unsigned char 
  4847 ;;  sign1           1   64[COMRAM] unsigned char 
  4848 ;; Return value:  Size  Location     Type
  4849 ;;                  4   56[COMRAM] long 
  4850 ;; Registers used:
  4851 ;;		wreg, status,2, status,0
  4852 ;; Tracked objects:
  4853 ;;		On entry : 0/0
  4854 ;;		On exit  : 0/0
  4855 ;;		Unchanged: 0/0
  4856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4857 ;;      Params:         4       0       0       0       0       0       0
  4858 ;;      Locals:         2       0       0       0       0       0       0
  4859 ;;      Temps:          4       0       0       0       0       0       0
  4860 ;;      Totals:        10       0       0       0       0       0       0
  4861 ;;Total ram usage:       10 bytes
  4862 ;; Hardware stack levels used:    1
  4863 ;; Hardware stack levels required when called:    4
  4864 ;; This function calls:
  4865 ;;		Nothing
  4866 ;; This function is called by:
  4867 ;;		_rotateObj
  4868 ;; This function uses a non-reentrant model
  4869 ;;
  4870                           
  4871                           	psect	text29
  4872  001936                     __ptext29:
  4873                           	callstack 0
  4874  001936                     ___fltol:
  4875                           	callstack 0
  4876  001936  FFFF               	dw	65535	; assembler added errata NOP
  4877  001938  343B               	rlcf	(___fltol@f1+2)^0,w,c
  4878  00193A  343C               	rlcf	(___fltol@f1+3)^0,w,c
  4879  00193C  6E42               	movwf	___fltol@exp1^0,c
  4880  00193E  5042               	movf	___fltol@exp1^0,w,c
  4881  001940  A4D8               	btfss	status,2,c
  4882  001942  EFA5  F00C         	goto	u2971
  4883  001946  EFA8  F00C         	goto	u2970
  4884  00194A                     u2971:
  4885  00194A  FFFF               	dw	65535	; assembler added errata NOP
  4886  00194C  EFB4  F00C         	goto	l3747
  4887  001950                     u2970:
  4888  001950  FFFF               	dw	65535	; assembler added errata NOP
  4889  001952                     l3743:
  4890  001952  FFFF               	dw	65535	; assembler added errata NOP
  4891  001954  0E00               	movlw	0
  4892  001956  6E39               	movwf	?___fltol^0,c
  4893  001958  0E00               	movlw	0
  4894  00195A  6E3A               	movwf	(?___fltol+1)^0,c
  4895  00195C  0E00               	movlw	0
  4896  00195E  6E3B               	movwf	(?___fltol+2)^0,c
  4897  001960  0E00               	movlw	0
  4898  001962  6E3C               	movwf	(?___fltol+3)^0,c
  4899  001964  EF33  F00D         	goto	l937
  4900  001968                     l3747:
  4901  001968  FFFF               	dw	65535	; assembler added errata NOP
  4902  00196A  C039  F03D         	movff	___fltol@f1,??___fltol
  4903  00196E  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  4904  001972  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  4905  001976  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  4906  00197A  0E20               	movlw	32
  4907  00197C  EFC6  F00C         	goto	u2980
  4908  001980                     u2985:
  4909  001980  FFFF               	dw	65535	; assembler added errata NOP
  4910  001982  90D8               	bcf	status,0,c
  4911  001984  3240               	rrcf	(??___fltol+3)^0,f,c
  4912  001986  323F               	rrcf	(??___fltol+2)^0,f,c
  4913  001988  323E               	rrcf	(??___fltol+1)^0,f,c
  4914  00198A  323D               	rrcf	??___fltol^0,f,c
  4915  00198C                     u2980:
  4916  00198C  FFFF               	dw	65535	; assembler added errata NOP
  4917  00198E  2EE8               	decfsz	wreg,f,c
  4918  001990  EFC0  F00C         	goto	u2985
  4919  001994  503D               	movf	??___fltol^0,w,c
  4920  001996  6E41               	movwf	___fltol@sign1^0,c
  4921  001998  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  4922  00199A  0EFF               	movlw	255
  4923  00199C  1639               	andwf	___fltol@f1^0,f,c
  4924  00199E  0EFF               	movlw	255
  4925  0019A0  163A               	andwf	(___fltol@f1+1)^0,f,c
  4926  0019A2  0EFF               	movlw	255
  4927  0019A4  163B               	andwf	(___fltol@f1+2)^0,f,c
  4928  0019A6  0E00               	movlw	0
  4929  0019A8  163C               	andwf	(___fltol@f1+3)^0,f,c
  4930  0019AA  0E96               	movlw	150
  4931  0019AC  5E42               	subwf	___fltol@exp1^0,f,c
  4932  0019AE  BE42               	btfsc	___fltol@exp1^0,7,c
  4933  0019B0  EFDF  F00C         	goto	u2990
  4934  0019B4  EFDC  F00C         	goto	u2991
  4935  0019B8                     u2991:
  4936  0019B8  FFFF               	dw	65535	; assembler added errata NOP
  4937  0019BA  EFF9  F00C         	goto	l3767
  4938  0019BE                     u2990:
  4939  0019BE  FFFF               	dw	65535	; assembler added errata NOP
  4940  0019C0  5042               	movf	___fltol@exp1^0,w,c
  4941  0019C2  0A80               	xorlw	128
  4942  0019C4  0F97               	addlw	151
  4943  0019C6  B0D8               	btfsc	status,0,c
  4944  0019C8  EFE8  F00C         	goto	u3001
  4945  0019CC  EFEB  F00C         	goto	u3000
  4946  0019D0                     u3001:
  4947  0019D0  FFFF               	dw	65535	; assembler added errata NOP
  4948  0019D2  EFEE  F00C         	goto	l3763
  4949  0019D6                     u3000:
  4950  0019D6  FFFF               	dw	65535	; assembler added errata NOP
  4951  0019D8  EFA9  F00C         	goto	l3743
  4952  0019DC                     l3763:
  4953  0019DC  FFFF               	dw	65535	; assembler added errata NOP
  4954  0019DE  90D8               	bcf	status,0,c
  4955  0019E0  323C               	rrcf	(___fltol@f1+3)^0,f,c
  4956  0019E2  323B               	rrcf	(___fltol@f1+2)^0,f,c
  4957  0019E4  323A               	rrcf	(___fltol@f1+1)^0,f,c
  4958  0019E6  3239               	rrcf	___fltol@f1^0,f,c
  4959  0019E8  3E42               	incfsz	___fltol@exp1^0,f,c
  4960  0019EA  EFEE  F00C         	goto	l3763
  4961  0019EE  EF17  F00D         	goto	l3777
  4962  0019F2                     l3767:
  4963  0019F2  FFFF               	dw	65535	; assembler added errata NOP
  4964  0019F4  0E1F               	movlw	31
  4965  0019F6  6442               	cpfsgt	___fltol@exp1^0,c
  4966  0019F8  EF00  F00D         	goto	u3011
  4967  0019FC  EF03  F00D         	goto	u3010
  4968  001A00                     u3011:
  4969  001A00  FFFF               	dw	65535	; assembler added errata NOP
  4970  001A02  EF0D  F00D         	goto	l3775
  4971  001A06                     u3010:
  4972  001A06  FFFF               	dw	65535	; assembler added errata NOP
  4973  001A08  EFA9  F00C         	goto	l3743
  4974  001A0C                     l3773:
  4975  001A0C  FFFF               	dw	65535	; assembler added errata NOP
  4976  001A0E  90D8               	bcf	status,0,c
  4977  001A10  3639               	rlcf	___fltol@f1^0,f,c
  4978  001A12  363A               	rlcf	(___fltol@f1+1)^0,f,c
  4979  001A14  363B               	rlcf	(___fltol@f1+2)^0,f,c
  4980  001A16  363C               	rlcf	(___fltol@f1+3)^0,f,c
  4981  001A18  0642               	decf	___fltol@exp1^0,f,c
  4982  001A1A                     l3775:
  4983  001A1A  FFFF               	dw	65535	; assembler added errata NOP
  4984  001A1C  5042               	movf	___fltol@exp1^0,w,c
  4985  001A1E  A4D8               	btfss	status,2,c
  4986  001A20  EF14  F00D         	goto	u3021
  4987  001A24  EF17  F00D         	goto	u3020
  4988  001A28                     u3021:
  4989  001A28  FFFF               	dw	65535	; assembler added errata NOP
  4990  001A2A  EF06  F00D         	goto	l3773
  4991  001A2E                     u3020:
  4992  001A2E                     l3777:
  4993  001A2E  FFFF               	dw	65535	; assembler added errata NOP
  4994  001A30  5041               	movf	___fltol@sign1^0,w,c
  4995  001A32  B4D8               	btfsc	status,2,c
  4996  001A34  EF1E  F00D         	goto	u3031
  4997  001A38  EF21  F00D         	goto	u3030
  4998  001A3C                     u3031:
  4999  001A3C  FFFF               	dw	65535	; assembler added errata NOP
  5000  001A3E  EF2A  F00D         	goto	l3781
  5001  001A42                     u3030:
  5002  001A42  FFFF               	dw	65535	; assembler added errata NOP
  5003  001A44  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5004  001A46  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5005  001A48  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5006  001A4A  6C39               	negf	___fltol@f1^0,c
  5007  001A4C  0E00               	movlw	0
  5008  001A4E  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5009  001A50  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5010  001A52  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5011  001A54                     l3781:
  5012  001A54  FFFF               	dw	65535	; assembler added errata NOP
  5013  001A56  C039  F039         	movff	___fltol@f1,?___fltol
  5014  001A5A  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5015  001A5E  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5016  001A62  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5017  001A66                     l937:
  5018  001A66  FFFF               	dw	65535	; assembler added errata NOP
  5019  001A68  0012               	return		;funcret
  5020  001A6A  FFFF               	dw	65535	; errata NOP
  5021  001A6C                     __end_of___fltol:
  5022                           	callstack 0
  5023                           
  5024 ;; *************** function ___fldiv *****************
  5025 ;; Defined at:
  5026 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;  b               4   31[COMRAM] long 
  5029 ;;  a               4   35[COMRAM] long 
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;  grs             4   50[COMRAM] unsigned long 
  5032 ;;  rem             4   43[COMRAM] unsigned long 
  5033 ;;  new_exp         2   48[COMRAM] short 
  5034 ;;  aexp            1   55[COMRAM] unsigned char 
  5035 ;;  bexp            1   54[COMRAM] unsigned char 
  5036 ;;  sign            1   47[COMRAM] unsigned char 
  5037 ;; Return value:  Size  Location     Type
  5038 ;;                  4   31[COMRAM] unsigned char 
  5039 ;; Registers used:
  5040 ;;		wreg, status,2, status,0
  5041 ;; Tracked objects:
  5042 ;;		On entry : 0/0
  5043 ;;		On exit  : 0/0
  5044 ;;		Unchanged: 0/0
  5045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5046 ;;      Params:         8       0       0       0       0       0       0
  5047 ;;      Locals:        13       0       0       0       0       0       0
  5048 ;;      Temps:          4       0       0       0       0       0       0
  5049 ;;      Totals:        25       0       0       0       0       0       0
  5050 ;;Total ram usage:       25 bytes
  5051 ;; Hardware stack levels used:    1
  5052 ;; Hardware stack levels required when called:    4
  5053 ;; This function calls:
  5054 ;;		Nothing
  5055 ;; This function is called by:
  5056 ;;		_rotateObj
  5057 ;; This function uses a non-reentrant model
  5058 ;;
  5059                           
  5060                           	psect	text30
  5061  000612                     __ptext30:
  5062                           	callstack 0
  5063  000612                     ___fldiv:
  5064                           	callstack 0
  5065  000612  FFFF               	dw	65535	; assembler added errata NOP
  5066  000614  5023               	movf	(___fldiv@b+3)^0,w,c
  5067  000616  0B80               	andlw	128
  5068  000618  6E30               	movwf	___fldiv@sign^0,c
  5069  00061A  5023               	movf	(___fldiv@b+3)^0,w,c
  5070  00061C  2423               	addwf	(___fldiv@b+3)^0,w,c
  5071  00061E  6E37               	movwf	___fldiv@bexp^0,c
  5072  000620  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5073  000622  EF15  F003         	goto	u2741
  5074  000626  EF18  F003         	goto	u2740
  5075  00062A                     u2741:
  5076  00062A  FFFF               	dw	65535	; assembler added errata NOP
  5077  00062C  EF1A  F003         	goto	l3609
  5078  000630                     u2740:
  5079  000630  FFFF               	dw	65535	; assembler added errata NOP
  5080  000632  8037               	bsf	___fldiv@bexp^0,0,c
  5081  000634                     l3609:
  5082  000634  FFFF               	dw	65535	; assembler added errata NOP
  5083  000636  5037               	movf	___fldiv@bexp^0,w,c
  5084  000638  B4D8               	btfsc	status,2,c
  5085  00063A  EF21  F003         	goto	u2751
  5086  00063E  EF24  F003         	goto	u2750
  5087  000642                     u2751:
  5088  000642  FFFF               	dw	65535	; assembler added errata NOP
  5089  000644  EF3D  F003         	goto	l3619
  5090  000648                     u2750:
  5091  000648  FFFF               	dw	65535	; assembler added errata NOP
  5092  00064A  2837               	incf	___fldiv@bexp^0,w,c
  5093  00064C  A4D8               	btfss	status,2,c
  5094  00064E  EF2B  F003         	goto	u2761
  5095  000652  EF2E  F003         	goto	u2760
  5096  000656                     u2761:
  5097  000656  FFFF               	dw	65535	; assembler added errata NOP
  5098  000658  EF37  F003         	goto	l3615
  5099  00065C                     u2760:
  5100  00065C  FFFF               	dw	65535	; assembler added errata NOP
  5101  00065E  0E00               	movlw	0
  5102  000660  6E20               	movwf	___fldiv@b^0,c
  5103  000662  0E00               	movlw	0
  5104  000664  6E21               	movwf	(___fldiv@b+1)^0,c
  5105  000666  0E00               	movlw	0
  5106  000668  6E22               	movwf	(___fldiv@b+2)^0,c
  5107  00066A  0E00               	movlw	0
  5108  00066C  6E23               	movwf	(___fldiv@b+3)^0,c
  5109  00066E                     l3615:
  5110  00066E  FFFF               	dw	65535	; assembler added errata NOP
  5111  000670  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5112  000672  0E00               	movlw	0
  5113  000674  6E23               	movwf	(___fldiv@b+3)^0,c
  5114  000676  EF46  F003         	goto	l3621
  5115  00067A                     l3619:
  5116  00067A  FFFF               	dw	65535	; assembler added errata NOP
  5117  00067C  0E00               	movlw	0
  5118  00067E  6E20               	movwf	___fldiv@b^0,c
  5119  000680  0E00               	movlw	0
  5120  000682  6E21               	movwf	(___fldiv@b+1)^0,c
  5121  000684  0E00               	movlw	0
  5122  000686  6E22               	movwf	(___fldiv@b+2)^0,c
  5123  000688  0E00               	movlw	0
  5124  00068A  6E23               	movwf	(___fldiv@b+3)^0,c
  5125  00068C                     l3621:
  5126  00068C  FFFF               	dw	65535	; assembler added errata NOP
  5127  00068E  5027               	movf	(___fldiv@a+3)^0,w,c
  5128  000690  0B80               	andlw	128
  5129  000692  1A30               	xorwf	___fldiv@sign^0,f,c
  5130  000694  5027               	movf	(___fldiv@a+3)^0,w,c
  5131  000696  2427               	addwf	(___fldiv@a+3)^0,w,c
  5132  000698  6E38               	movwf	___fldiv@aexp^0,c
  5133  00069A  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5134  00069C  EF52  F003         	goto	u2771
  5135  0006A0  EF55  F003         	goto	u2770
  5136  0006A4                     u2771:
  5137  0006A4  FFFF               	dw	65535	; assembler added errata NOP
  5138  0006A6  EF57  F003         	goto	l3629
  5139  0006AA                     u2770:
  5140  0006AA  FFFF               	dw	65535	; assembler added errata NOP
  5141  0006AC  8038               	bsf	___fldiv@aexp^0,0,c
  5142  0006AE                     l3629:
  5143  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5144  0006B0  5038               	movf	___fldiv@aexp^0,w,c
  5145  0006B2  B4D8               	btfsc	status,2,c
  5146  0006B4  EF5E  F003         	goto	u2781
  5147  0006B8  EF61  F003         	goto	u2780
  5148  0006BC                     u2781:
  5149  0006BC  FFFF               	dw	65535	; assembler added errata NOP
  5150  0006BE  EF7A  F003         	goto	l3639
  5151  0006C2                     u2780:
  5152  0006C2  FFFF               	dw	65535	; assembler added errata NOP
  5153  0006C4  2838               	incf	___fldiv@aexp^0,w,c
  5154  0006C6  A4D8               	btfss	status,2,c
  5155  0006C8  EF68  F003         	goto	u2791
  5156  0006CC  EF6B  F003         	goto	u2790
  5157  0006D0                     u2791:
  5158  0006D0  FFFF               	dw	65535	; assembler added errata NOP
  5159  0006D2  EF74  F003         	goto	l3635
  5160  0006D6                     u2790:
  5161  0006D6  FFFF               	dw	65535	; assembler added errata NOP
  5162  0006D8  0E00               	movlw	0
  5163  0006DA  6E24               	movwf	___fldiv@a^0,c
  5164  0006DC  0E00               	movlw	0
  5165  0006DE  6E25               	movwf	(___fldiv@a+1)^0,c
  5166  0006E0  0E00               	movlw	0
  5167  0006E2  6E26               	movwf	(___fldiv@a+2)^0,c
  5168  0006E4  0E00               	movlw	0
  5169  0006E6  6E27               	movwf	(___fldiv@a+3)^0,c
  5170  0006E8                     l3635:
  5171  0006E8  FFFF               	dw	65535	; assembler added errata NOP
  5172  0006EA  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5173  0006EC  0E00               	movlw	0
  5174  0006EE  6E27               	movwf	(___fldiv@a+3)^0,c
  5175  0006F0  EF83  F003         	goto	l3641
  5176  0006F4                     l3639:
  5177  0006F4  FFFF               	dw	65535	; assembler added errata NOP
  5178  0006F6  0E00               	movlw	0
  5179  0006F8  6E24               	movwf	___fldiv@a^0,c
  5180  0006FA  0E00               	movlw	0
  5181  0006FC  6E25               	movwf	(___fldiv@a+1)^0,c
  5182  0006FE  0E00               	movlw	0
  5183  000700  6E26               	movwf	(___fldiv@a+2)^0,c
  5184  000702  0E00               	movlw	0
  5185  000704  6E27               	movwf	(___fldiv@a+3)^0,c
  5186  000706                     l3641:
  5187  000706  FFFF               	dw	65535	; assembler added errata NOP
  5188  000708  5024               	movf	___fldiv@a^0,w,c
  5189  00070A  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5190  00070C  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5191  00070E  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5192  000710  A4D8               	btfss	status,2,c
  5193  000712  EF8D  F003         	goto	u2801
  5194  000716  EF90  F003         	goto	u2800
  5195  00071A                     u2801:
  5196  00071A  FFFF               	dw	65535	; assembler added errata NOP
  5197  00071C  EFAA  F003         	goto	l3653
  5198  000720                     u2800:
  5199  000720  FFFF               	dw	65535	; assembler added errata NOP
  5200  000722  0E00               	movlw	0
  5201  000724  6E20               	movwf	___fldiv@b^0,c
  5202  000726  0E00               	movlw	0
  5203  000728  6E21               	movwf	(___fldiv@b+1)^0,c
  5204  00072A  0E00               	movlw	0
  5205  00072C  6E22               	movwf	(___fldiv@b+2)^0,c
  5206  00072E  0E00               	movlw	0
  5207  000730  6E23               	movwf	(___fldiv@b+3)^0,c
  5208  000732  0E80               	movlw	128
  5209  000734  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5210  000736  0E7F               	movlw	127
  5211  000738  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5212  00073A                     l3647:
  5213  00073A  FFFF               	dw	65535	; assembler added errata NOP
  5214  00073C  5030               	movf	___fldiv@sign^0,w,c
  5215  00073E  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5216  000740  C020  F020         	movff	___fldiv@b,?___fldiv
  5217  000744  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5218  000748  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5219  00074C  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5220  000750  EF1F  F005         	goto	l1222
  5221  000754                     l3653:
  5222  000754  FFFF               	dw	65535	; assembler added errata NOP
  5223  000756  5037               	movf	___fldiv@bexp^0,w,c
  5224  000758  A4D8               	btfss	status,2,c
  5225  00075A  EFB1  F003         	goto	u2811
  5226  00075E  EFB4  F003         	goto	u2810
  5227  000762                     u2811:
  5228  000762  FFFF               	dw	65535	; assembler added errata NOP
  5229  000764  EFBF  F003         	goto	l3661
  5230  000768                     u2810:
  5231  000768  FFFF               	dw	65535	; assembler added errata NOP
  5232  00076A  0E00               	movlw	0
  5233  00076C  6E20               	movwf	?___fldiv^0,c
  5234  00076E  0E00               	movlw	0
  5235  000770  6E21               	movwf	(?___fldiv+1)^0,c
  5236  000772  0E00               	movlw	0
  5237  000774  6E22               	movwf	(?___fldiv+2)^0,c
  5238  000776  0E00               	movlw	0
  5239  000778  6E23               	movwf	(?___fldiv+3)^0,c
  5240  00077A  EF1F  F005         	goto	l1222
  5241  00077E                     l3661:
  5242  00077E  FFFF               	dw	65535	; assembler added errata NOP
  5243  000780  5038               	movf	___fldiv@aexp^0,w,c
  5244  000782  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5245  000786  6A29               	clrf	(??___fldiv+1)^0,c
  5246  000788  5E28               	subwf	??___fldiv^0,f,c
  5247  00078A  0E00               	movlw	0
  5248  00078C  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5249  00078E  0E7F               	movlw	127
  5250  000790  2428               	addwf	??___fldiv^0,w,c
  5251  000792  6E31               	movwf	___fldiv@new_exp^0,c
  5252  000794  0E00               	movlw	0
  5253  000796  2029               	addwfc	(??___fldiv+1)^0,w,c
  5254  000798  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5255  00079A  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5256  00079E  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5257  0007A2  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5258  0007A6  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5259  0007AA  0E00               	movlw	0
  5260  0007AC  6E20               	movwf	___fldiv@b^0,c
  5261  0007AE  0E00               	movlw	0
  5262  0007B0  6E21               	movwf	(___fldiv@b+1)^0,c
  5263  0007B2  0E00               	movlw	0
  5264  0007B4  6E22               	movwf	(___fldiv@b+2)^0,c
  5265  0007B6  0E00               	movlw	0
  5266  0007B8  6E23               	movwf	(___fldiv@b+3)^0,c
  5267  0007BA  0E00               	movlw	0
  5268  0007BC  6E33               	movwf	___fldiv@grs^0,c
  5269  0007BE  0E00               	movlw	0
  5270  0007C0  6E34               	movwf	(___fldiv@grs+1)^0,c
  5271  0007C2  0E00               	movlw	0
  5272  0007C4  6E35               	movwf	(___fldiv@grs+2)^0,c
  5273  0007C6  0E00               	movlw	0
  5274  0007C8  6E36               	movwf	(___fldiv@grs+3)^0,c
  5275  0007CA  0E00               	movlw	0
  5276  0007CC  6E38               	movwf	___fldiv@aexp^0,c
  5277  0007CE  EF2B  F004         	goto	l1224
  5278  0007D2                     l3671:
  5279  0007D2  FFFF               	dw	65535	; assembler added errata NOP
  5280  0007D4  5038               	movf	___fldiv@aexp^0,w,c
  5281  0007D6  B4D8               	btfsc	status,2,c
  5282  0007D8  EFF0  F003         	goto	u2821
  5283  0007DC  EFF3  F003         	goto	u2820
  5284  0007E0                     u2821:
  5285  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  5286  0007E2  EF0E  F004         	goto	l3679
  5287  0007E6                     u2820:
  5288  0007E6  FFFF               	dw	65535	; assembler added errata NOP
  5289  0007E8  90D8               	bcf	status,0,c
  5290  0007EA  362C               	rlcf	___fldiv@rem^0,f,c
  5291  0007EC  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5292  0007EE  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5293  0007F0  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5294  0007F2  90D8               	bcf	status,0,c
  5295  0007F4  3620               	rlcf	___fldiv@b^0,f,c
  5296  0007F6  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5297  0007F8  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5298  0007FA  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5299  0007FC  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5300  0007FE  EF03  F004         	goto	u2831
  5301  000802  EF06  F004         	goto	u2830
  5302  000806                     u2831:
  5303  000806  FFFF               	dw	65535	; assembler added errata NOP
  5304  000808  EF08  F004         	goto	l1227
  5305  00080C                     u2830:
  5306  00080C  FFFF               	dw	65535	; assembler added errata NOP
  5307  00080E  8020               	bsf	___fldiv@b^0,0,c
  5308  000810                     l1227:
  5309  000810  FFFF               	dw	65535	; assembler added errata NOP
  5310  000812  90D8               	bcf	status,0,c
  5311  000814  3633               	rlcf	___fldiv@grs^0,f,c
  5312  000816  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5313  000818  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5314  00081A  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5315  00081C                     l3679:
  5316  00081C  FFFF               	dw	65535	; assembler added errata NOP
  5317  00081E  5024               	movf	___fldiv@a^0,w,c
  5318  000820  5C2C               	subwf	___fldiv@rem^0,w,c
  5319  000822  5025               	movf	(___fldiv@a+1)^0,w,c
  5320  000824  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5321  000826  5026               	movf	(___fldiv@a+2)^0,w,c
  5322  000828  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5323  00082A  5027               	movf	(___fldiv@a+3)^0,w,c
  5324  00082C  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5325  00082E  A0D8               	btfss	status,0,c
  5326  000830  EF1C  F004         	goto	u2841
  5327  000834  EF1F  F004         	goto	u2840
  5328  000838                     u2841:
  5329  000838  FFFF               	dw	65535	; assembler added errata NOP
  5330  00083A  EF29  F004         	goto	l3685
  5331  00083E                     u2840:
  5332  00083E  FFFF               	dw	65535	; assembler added errata NOP
  5333  000840  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5334  000842  5024               	movf	___fldiv@a^0,w,c
  5335  000844  5E2C               	subwf	___fldiv@rem^0,f,c
  5336  000846  5025               	movf	(___fldiv@a+1)^0,w,c
  5337  000848  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5338  00084A  5026               	movf	(___fldiv@a+2)^0,w,c
  5339  00084C  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5340  00084E  5027               	movf	(___fldiv@a+3)^0,w,c
  5341  000850  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5342  000852                     l3685:
  5343  000852  FFFF               	dw	65535	; assembler added errata NOP
  5344  000854  2A38               	incf	___fldiv@aexp^0,f,c
  5345  000856                     l1224:
  5346  000856  FFFF               	dw	65535	; assembler added errata NOP
  5347  000858  0E19               	movlw	25
  5348  00085A  6438               	cpfsgt	___fldiv@aexp^0,c
  5349  00085C  EF32  F004         	goto	u2851
  5350  000860  EF35  F004         	goto	u2850
  5351  000864                     u2851:
  5352  000864  FFFF               	dw	65535	; assembler added errata NOP
  5353  000866  EFE9  F003         	goto	l3671
  5354  00086A                     u2850:
  5355  00086A  FFFF               	dw	65535	; assembler added errata NOP
  5356  00086C  502C               	movf	___fldiv@rem^0,w,c
  5357  00086E  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5358  000870  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5359  000872  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5360  000874  B4D8               	btfsc	status,2,c
  5361  000876  EF3F  F004         	goto	u2861
  5362  00087A  EF42  F004         	goto	u2860
  5363  00087E                     u2861:
  5364  00087E  FFFF               	dw	65535	; assembler added errata NOP
  5365  000880  EF5F  F004         	goto	l3697
  5366  000884                     u2860:
  5367  000884  FFFF               	dw	65535	; assembler added errata NOP
  5368  000886  8033               	bsf	___fldiv@grs^0,0,c
  5369  000888  EF5F  F004         	goto	l3697
  5370  00088C                     l3691:
  5371  00088C  FFFF               	dw	65535	; assembler added errata NOP
  5372  00088E  90D8               	bcf	status,0,c
  5373  000890  3620               	rlcf	___fldiv@b^0,f,c
  5374  000892  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5375  000894  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5376  000896  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5377  000898  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5378  00089A  EF51  F004         	goto	u2871
  5379  00089E  EF54  F004         	goto	u2870
  5380  0008A2                     u2871:
  5381  0008A2  FFFF               	dw	65535	; assembler added errata NOP
  5382  0008A4  EF56  F004         	goto	l1233
  5383  0008A8                     u2870:
  5384  0008A8  FFFF               	dw	65535	; assembler added errata NOP
  5385  0008AA  8020               	bsf	___fldiv@b^0,0,c
  5386  0008AC                     l1233:
  5387  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5388  0008AE  90D8               	bcf	status,0,c
  5389  0008B0  3633               	rlcf	___fldiv@grs^0,f,c
  5390  0008B2  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5391  0008B4  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5392  0008B6  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5393  0008B8  0631               	decf	___fldiv@new_exp^0,f,c
  5394  0008BA  A0D8               	btfss	status,0,c
  5395  0008BC  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5396  0008BE                     l3697:
  5397  0008BE  FFFF               	dw	65535	; assembler added errata NOP
  5398  0008C0  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5399  0008C2  EF65  F004         	goto	u2881
  5400  0008C6  EF68  F004         	goto	u2880
  5401  0008CA                     u2881:
  5402  0008CA  FFFF               	dw	65535	; assembler added errata NOP
  5403  0008CC  EF46  F004         	goto	l3691
  5404  0008D0                     u2880:
  5405  0008D0  FFFF               	dw	65535	; assembler added errata NOP
  5406  0008D2  0E00               	movlw	0
  5407  0008D4  6E38               	movwf	___fldiv@aexp^0,c
  5408  0008D6  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5409  0008D8  EF70  F004         	goto	u2891
  5410  0008DC  EF73  F004         	goto	u2890
  5411  0008E0                     u2891:
  5412  0008E0  FFFF               	dw	65535	; assembler added errata NOP
  5413  0008E2  EF9E  F004         	goto	l1235
  5414  0008E6                     u2890:
  5415  0008E6  FFFF               	dw	65535	; assembler added errata NOP
  5416  0008E8  0EFF               	movlw	255
  5417  0008EA  1433               	andwf	___fldiv@grs^0,w,c
  5418  0008EC  6E28               	movwf	??___fldiv^0,c
  5419  0008EE  0EFF               	movlw	255
  5420  0008F0  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5421  0008F2  6E29               	movwf	(??___fldiv+1)^0,c
  5422  0008F4  0EFF               	movlw	255
  5423  0008F6  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5424  0008F8  6E2A               	movwf	(??___fldiv+2)^0,c
  5425  0008FA  0E7F               	movlw	127
  5426  0008FC  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5427  0008FE  6E2B               	movwf	(??___fldiv+3)^0,c
  5428  000900  5028               	movf	??___fldiv^0,w,c
  5429  000902  1029               	iorwf	(??___fldiv+1)^0,w,c
  5430  000904  102A               	iorwf	(??___fldiv+2)^0,w,c
  5431  000906  102B               	iorwf	(??___fldiv+3)^0,w,c
  5432  000908  B4D8               	btfsc	status,2,c
  5433  00090A  EF89  F004         	goto	u2901
  5434  00090E  EF8C  F004         	goto	u2900
  5435  000912                     u2901:
  5436  000912  FFFF               	dw	65535	; assembler added errata NOP
  5437  000914  EF92  F004         	goto	l1236
  5438  000918                     u2900:
  5439  000918  FFFF               	dw	65535	; assembler added errata NOP
  5440  00091A                     l3705:
  5441  00091A  FFFF               	dw	65535	; assembler added errata NOP
  5442  00091C  0E01               	movlw	1
  5443  00091E  6E38               	movwf	___fldiv@aexp^0,c
  5444  000920  EF9E  F004         	goto	l1235
  5445  000924                     l1236:
  5446  000924  FFFF               	dw	65535	; assembler added errata NOP
  5447  000926  A020               	btfss	___fldiv@b^0,0,c
  5448  000928  EF98  F004         	goto	u2911
  5449  00092C  EF9B  F004         	goto	u2910
  5450  000930                     u2911:
  5451  000930  FFFF               	dw	65535	; assembler added errata NOP
  5452  000932  EF9E  F004         	goto	l1235
  5453  000936                     u2910:
  5454  000936  FFFF               	dw	65535	; assembler added errata NOP
  5455  000938  EF8D  F004         	goto	l3705
  5456  00093C                     l1235:
  5457  00093C  FFFF               	dw	65535	; assembler added errata NOP
  5458  00093E  5038               	movf	___fldiv@aexp^0,w,c
  5459  000940  B4D8               	btfsc	status,2,c
  5460  000942  EFA5  F004         	goto	u2921
  5461  000946  EFA8  F004         	goto	u2920
  5462  00094A                     u2921:
  5463  00094A  FFFF               	dw	65535	; assembler added errata NOP
  5464  00094C  EFCF  F004         	goto	l3717
  5465  000950                     u2920:
  5466  000950  FFFF               	dw	65535	; assembler added errata NOP
  5467  000952  0E01               	movlw	1
  5468  000954  2620               	addwf	___fldiv@b^0,f,c
  5469  000956  0E00               	movlw	0
  5470  000958  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5471  00095A  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5472  00095C  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5473  00095E  A023               	btfss	(___fldiv@b+3)^0,0,c
  5474  000960  EFB4  F004         	goto	u2931
  5475  000964  EFB7  F004         	goto	u2930
  5476  000968                     u2931:
  5477  000968  FFFF               	dw	65535	; assembler added errata NOP
  5478  00096A  EFCF  F004         	goto	l3717
  5479  00096E                     u2930:
  5480  00096E  FFFF               	dw	65535	; assembler added errata NOP
  5481  000970  C020  F028         	movff	___fldiv@b,??___fldiv
  5482  000974  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5483  000978  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5484  00097C  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5485  000980  342B               	rlcf	(??___fldiv+3)^0,w,c
  5486  000982  322B               	rrcf	(??___fldiv+3)^0,f,c
  5487  000984  322A               	rrcf	(??___fldiv+2)^0,f,c
  5488  000986  3229               	rrcf	(??___fldiv+1)^0,f,c
  5489  000988  3228               	rrcf	??___fldiv^0,f,c
  5490  00098A  C028  F020         	movff	??___fldiv,___fldiv@b
  5491  00098E  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5492  000992  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5493  000996  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5494  00099A  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5495  00099C  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5496  00099E                     l3717:
  5497  00099E  FFFF               	dw	65535	; assembler added errata NOP
  5498  0009A0  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5499  0009A2  EFDB  F004         	goto	u2941
  5500  0009A6  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5501  0009A8  E109               	bnz	u2940
  5502  0009AA  2831               	incf	___fldiv@new_exp^0,w,c
  5503  0009AC  A0D8               	btfss	status,0,c
  5504  0009AE  EFDB  F004         	goto	u2941
  5505  0009B2  EFDE  F004         	goto	u2940
  5506  0009B6                     u2941:
  5507  0009B6  FFFF               	dw	65535	; assembler added errata NOP
  5508  0009B8  EFEA  F004         	goto	l3721
  5509  0009BC                     u2940:
  5510  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  5511  0009BE  0E00               	movlw	0
  5512  0009C0  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5513  0009C2  6831               	setf	___fldiv@new_exp^0,c
  5514  0009C4  0E00               	movlw	0
  5515  0009C6  6E20               	movwf	___fldiv@b^0,c
  5516  0009C8  0E00               	movlw	0
  5517  0009CA  6E21               	movwf	(___fldiv@b+1)^0,c
  5518  0009CC  0E00               	movlw	0
  5519  0009CE  6E22               	movwf	(___fldiv@b+2)^0,c
  5520  0009D0  0E00               	movlw	0
  5521  0009D2  6E23               	movwf	(___fldiv@b+3)^0,c
  5522  0009D4                     l3721:
  5523  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  5524  0009D6  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5525  0009D8  EFF9  F004         	goto	u2950
  5526  0009DC  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5527  0009DE  E106               	bnz	u2951
  5528  0009E0  0431               	decf	___fldiv@new_exp^0,w,c
  5529  0009E2  B0D8               	btfsc	status,0,c
  5530  0009E4  EFF6  F004         	goto	u2951
  5531  0009E8  EFF9  F004         	goto	u2950
  5532  0009EC                     u2951:
  5533  0009EC  FFFF               	dw	65535	; assembler added errata NOP
  5534  0009EE  EF08  F005         	goto	l3725
  5535  0009F2                     u2950:
  5536  0009F2  FFFF               	dw	65535	; assembler added errata NOP
  5537  0009F4  0E00               	movlw	0
  5538  0009F6  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5539  0009F8  0E00               	movlw	0
  5540  0009FA  6E31               	movwf	___fldiv@new_exp^0,c
  5541  0009FC  0E00               	movlw	0
  5542  0009FE  6E20               	movwf	___fldiv@b^0,c
  5543  000A00  0E00               	movlw	0
  5544  000A02  6E21               	movwf	(___fldiv@b+1)^0,c
  5545  000A04  0E00               	movlw	0
  5546  000A06  6E22               	movwf	(___fldiv@b+2)^0,c
  5547  000A08  0E00               	movlw	0
  5548  000A0A  6E23               	movwf	(___fldiv@b+3)^0,c
  5549  000A0C  0E00               	movlw	0
  5550  000A0E  6E30               	movwf	___fldiv@sign^0,c
  5551  000A10                     l3725:
  5552  000A10  FFFF               	dw	65535	; assembler added errata NOP
  5553  000A12  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5554  000A16  A037               	btfss	___fldiv@bexp^0,0,c
  5555  000A18  EF10  F005         	goto	u2961
  5556  000A1C  EF13  F005         	goto	u2960
  5557  000A20                     u2961:
  5558  000A20  FFFF               	dw	65535	; assembler added errata NOP
  5559  000A22  EF17  F005         	goto	l3731
  5560  000A26                     u2960:
  5561  000A26  FFFF               	dw	65535	; assembler added errata NOP
  5562  000A28  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5563  000A2A  EF19  F005         	goto	l3733
  5564  000A2E                     l3731:
  5565  000A2E  FFFF               	dw	65535	; assembler added errata NOP
  5566  000A30  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5567  000A32                     l3733:
  5568  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5569  000A34  90D8               	bcf	status,0,c
  5570  000A36  3037               	rrcf	___fldiv@bexp^0,w,c
  5571  000A38  6E23               	movwf	(___fldiv@b+3)^0,c
  5572  000A3A  EF9D  F003         	goto	l3647
  5573  000A3E                     l1222:
  5574  000A3E  FFFF               	dw	65535	; assembler added errata NOP
  5575  000A40  0012               	return		;funcret
  5576  000A42  FFFF               	dw	65535	; errata NOP
  5577  000A44                     __end_of___fldiv:
  5578                           	callstack 0
  5579                           
  5580 ;; *************** function _releaseObj *****************
  5581 ;; Defined at:
  5582 ;;		line 822 in file "motors.c"
  5583 ;; Parameters:    Size  Location     Type
  5584 ;;		None
  5585 ;; Auto vars:     Size  Location     Type
  5586 ;;		None
  5587 ;; Return value:  Size  Location     Type
  5588 ;;                  1    wreg      void 
  5589 ;; Registers used:
  5590 ;;		wreg, status,2, status,0, cstack
  5591 ;; Tracked objects:
  5592 ;;		On entry : 0/0
  5593 ;;		On exit  : 0/0
  5594 ;;		Unchanged: 0/0
  5595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5596 ;;      Params:         0       0       0       0       0       0       0
  5597 ;;      Locals:         0       0       0       0       0       0       0
  5598 ;;      Temps:          0       0       0       0       0       0       0
  5599 ;;      Totals:         0       0       0       0       0       0       0
  5600 ;;Total ram usage:        0 bytes
  5601 ;; Hardware stack levels used:    1
  5602 ;; Hardware stack levels required when called:    5
  5603 ;; This function calls:
  5604 ;;		_resetTM2_Temp
  5605 ;;		_stepMade
  5606 ;; This function is called by:
  5607 ;;		_executeData
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           	psect	text31
  5612  002360                     __ptext31:
  5613                           	callstack 0
  5614  002360                     _releaseObj:
  5615                           	callstack 0
  5616  002360  FFFF               	dw	65535	; assembler added errata NOP
  5617  002362                     
  5618                           ;motors.c: 823:     LATDbits.LATD1 = 0;
  5619  002362  928C               	bcf	140,1,c	;volatile
  5620                           
  5621                           ;motors.c: 826:     T2CONbits.TMR2ON = 1;
  5622  002364  84CA               	bsf	202,2,c	;volatile
  5623  002366                     l4089:
  5624  002366  FFFF               	dw	65535	; assembler added errata NOP
  5625  002368  EC15  F012         	call	_stepMade	;wreg free
  5626  00236C  5012               	movf	?_stepMade^0,w,c
  5627  00236E  1013               	iorwf	(?_stepMade+1)^0,w,c
  5628  002370  B4D8               	btfsc	status,2,c
  5629  002372  EFBD  F011         	goto	u3571
  5630  002376  EFC0  F011         	goto	u3570
  5631  00237A                     u3571:
  5632  00237A  FFFF               	dw	65535	; assembler added errata NOP
  5633  00237C  EFB3  F011         	goto	l4089
  5634  002380                     u3570:
  5635  002380  FFFF               	dw	65535	; assembler added errata NOP
  5636  002382                     
  5637                           ;motors.c: 828:     T2CONbits.TMR2ON = 0;
  5638  002382  94CA               	bcf	202,2,c	;volatile
  5639  002384                     
  5640                           ;motors.c: 829:     TMR2 = 0;
  5641  002384  0E00               	movlw	0
  5642  002386  6ECC               	movwf	204,c	;volatile
  5643  002388                     
  5644                           ;motors.c: 832:     resetTM2_Temp();
  5645  002388  EC31  F012         	call	_resetTM2_Temp	;wreg free
  5646  00238C  0012               	return		;funcret
  5647  00238E  FFFF               	dw	65535	; errata NOP
  5648  002390                     __end_of_releaseObj:
  5649                           	callstack 0
  5650                           
  5651 ;; *************** function _pickObject *****************
  5652 ;; Defined at:
  5653 ;;		line 805 in file "motors.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;		None
  5656 ;; Auto vars:     Size  Location     Type
  5657 ;;		None
  5658 ;; Return value:  Size  Location     Type
  5659 ;;                  1    wreg      void 
  5660 ;; Registers used:
  5661 ;;		wreg, status,2, status,0, cstack
  5662 ;; Tracked objects:
  5663 ;;		On entry : 0/0
  5664 ;;		On exit  : 0/0
  5665 ;;		Unchanged: 0/0
  5666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5667 ;;      Params:         0       0       0       0       0       0       0
  5668 ;;      Locals:         0       0       0       0       0       0       0
  5669 ;;      Temps:          0       0       0       0       0       0       0
  5670 ;;      Totals:         0       0       0       0       0       0       0
  5671 ;;Total ram usage:        0 bytes
  5672 ;; Hardware stack levels used:    1
  5673 ;; Hardware stack levels required when called:    5
  5674 ;; This function calls:
  5675 ;;		_resetTM2_Temp
  5676 ;;		_stepMade
  5677 ;; This function is called by:
  5678 ;;		_executeData
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           	psect	text32
  5683  002390                     __ptext32:
  5684                           	callstack 0
  5685  002390                     _pickObject:
  5686                           	callstack 0
  5687  002390  FFFF               	dw	65535	; assembler added errata NOP
  5688  002392                     
  5689                           ;motors.c: 806:     LATDbits.LATD1 = 1;
  5690  002392  828C               	bsf	140,1,c	;volatile
  5691                           
  5692                           ;motors.c: 809:     T2CONbits.TMR2ON = 1;
  5693  002394  84CA               	bsf	202,2,c	;volatile
  5694  002396                     l4081:
  5695  002396  FFFF               	dw	65535	; assembler added errata NOP
  5696  002398  EC15  F012         	call	_stepMade	;wreg free
  5697  00239C  5012               	movf	?_stepMade^0,w,c
  5698  00239E  1013               	iorwf	(?_stepMade+1)^0,w,c
  5699  0023A0  B4D8               	btfsc	status,2,c
  5700  0023A2  EFD5  F011         	goto	u3561
  5701  0023A6  EFD8  F011         	goto	u3560
  5702  0023AA                     u3561:
  5703  0023AA  FFFF               	dw	65535	; assembler added errata NOP
  5704  0023AC  EFCB  F011         	goto	l4081
  5705  0023B0                     u3560:
  5706  0023B0  FFFF               	dw	65535	; assembler added errata NOP
  5707  0023B2                     
  5708                           ;motors.c: 811:     T2CONbits.TMR2ON = 0;
  5709  0023B2  94CA               	bcf	202,2,c	;volatile
  5710  0023B4                     
  5711                           ;motors.c: 812:     TMR2 = 0;
  5712  0023B4  0E00               	movlw	0
  5713  0023B6  6ECC               	movwf	204,c	;volatile
  5714  0023B8                     
  5715                           ;motors.c: 815:     resetTM2_Temp();
  5716  0023B8  EC31  F012         	call	_resetTM2_Temp	;wreg free
  5717  0023BC  0012               	return		;funcret
  5718  0023BE  FFFF               	dw	65535	; errata NOP
  5719  0023C0                     __end_of_pickObject:
  5720                           	callstack 0
  5721                           
  5722 ;; *************** function _moveToPoint *****************
  5723 ;; Defined at:
  5724 ;;		line 318 in file "motors.c"
  5725 ;; Parameters:    Size  Location     Type
  5726 ;;  x1              2   20[COMRAM] int 
  5727 ;;  y1              2   22[COMRAM] int 
  5728 ;;  x2              2   24[COMRAM] int 
  5729 ;;  y2              2   26[COMRAM] int 
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;  keepMovingY     1   33[COMRAM] unsigned char 
  5732 ;;  keepMovingX     1   32[COMRAM] unsigned char 
  5733 ;;  MOT2Directio    1   31[COMRAM] unsigned char 
  5734 ;;  MOT1Directio    1   30[COMRAM] unsigned char 
  5735 ;; Return value:  Size  Location     Type
  5736 ;;                  1    wreg      unsigned char 
  5737 ;; Registers used:
  5738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5739 ;; Tracked objects:
  5740 ;;		On entry : 0/0
  5741 ;;		On exit  : 0/0
  5742 ;;		Unchanged: 0/0
  5743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5744 ;;      Params:         8       0       0       0       0       0       0
  5745 ;;      Locals:         4       0       0       0       0       0       0
  5746 ;;      Temps:          2       0       0       0       0       0       0
  5747 ;;      Totals:        14       0       0       0       0       0       0
  5748 ;;Total ram usage:       14 bytes
  5749 ;; Hardware stack levels used:    1
  5750 ;; Hardware stack levels required when called:    5
  5751 ;; This function calls:
  5752 ;;		_resetStep
  5753 ;;		_resetTM0_Temp
  5754 ;;		_resetTM2_Temp
  5755 ;;		_stepCounter
  5756 ;;		_stepMade
  5757 ;; This function is called by:
  5758 ;;		_executeData
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762                           	psect	text33
  5763  000A44                     __ptext33:
  5764                           	callstack 0
  5765  000A44                     _moveToPoint:
  5766                           	callstack 0
  5767  000A44  FFFF               	dw	65535	; assembler added errata NOP
  5768  000A46                     
  5769                           ;motors.c: 320:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 323:     if(x2
      +                           > maxX || y2 > maxY){
  5770  000A46  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5771  000A48  E107               	bnz	u3141
  5772  000A4A  0E66               	movlw	102
  5773  000A4C  5C19               	subwf	moveToPoint@x2^0,w,c
  5774  000A4E  B0D8               	btfsc	status,0,c
  5775  000A50  EF2C  F005         	goto	u3141
  5776  000A54  EF2F  F005         	goto	u3140
  5777  000A58                     u3141:
  5778  000A58  FFFF               	dw	65535	; assembler added errata NOP
  5779  000A5A  EF3C  F005         	goto	l3835
  5780  000A5E                     u3140:
  5781  000A5E  FFFF               	dw	65535	; assembler added errata NOP
  5782  000A60  501C               	movf	(moveToPoint@y2+1)^0,w,c
  5783  000A62  E10A               	bnz	u3150
  5784  000A64  0E66               	movlw	102
  5785  000A66  5C1B               	subwf	moveToPoint@y2^0,w,c
  5786  000A68  A0D8               	btfss	status,0,c
  5787  000A6A  EF39  F005         	goto	u3151
  5788  000A6E  EF3C  F005         	goto	u3150
  5789  000A72                     u3151:
  5790  000A72  FFFF               	dw	65535	; assembler added errata NOP
  5791  000A74  EF40  F005         	goto	l3839
  5792  000A78                     u3150:
  5793  000A78                     l3835:
  5794  000A78  FFFF               	dw	65535	; assembler added errata NOP
  5795                           
  5796                           ;motors.c: 324:         return(5);
  5797  000A7A  0E05               	movlw	5
  5798  000A7C  EFE0  F006         	goto	l161
  5799  000A80                     l3839:
  5800  000A80  FFFF               	dw	65535	; assembler added errata NOP
  5801                           
  5802                           ;motors.c: 345:     if((x2 - x1) > 0){
  5803  000A82  5015               	movf	moveToPoint@x1^0,w,c
  5804  000A84  5C19               	subwf	moveToPoint@x2^0,w,c
  5805  000A86  6E1D               	movwf	??_moveToPoint^0,c
  5806  000A88  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5807  000A8A  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5808  000A8C  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5809  000A8E  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5810  000A90  EF52  F005         	goto	u3161
  5811  000A94  501E               	movf	(??_moveToPoint+1)^0,w,c
  5812  000A96  E109               	bnz	u3160
  5813  000A98  041D               	decf	??_moveToPoint^0,w,c
  5814  000A9A  A0D8               	btfss	status,0,c
  5815  000A9C  EF52  F005         	goto	u3161
  5816  000AA0  EF55  F005         	goto	u3160
  5817  000AA4                     u3161:
  5818  000AA4  FFFF               	dw	65535	; assembler added errata NOP
  5819  000AA6  EF5C  F005         	goto	l162
  5820  000AAA                     u3160:
  5821  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  5822  000AAC                     
  5823                           ;motors.c: 346:         motCounter[0][1] = 1;
  5824  000AAC  0E01               	movlw	1
  5825  000AAE  6E68               	movwf	(_motCounter+1)^0,c
  5826                           
  5827                           ;motors.c: 347:         MOT1Direction = 1;
  5828  000AB0  0E01               	movlw	1
  5829  000AB2  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5830                           
  5831                           ;motors.c: 348:     }else{
  5832  000AB4  EF60  F005         	goto	l3845
  5833  000AB8                     l162:
  5834  000AB8  FFFF               	dw	65535	; assembler added errata NOP
  5835                           
  5836                           ;motors.c: 349:         motCounter[0][1] = -1;
  5837  000ABA  6868               	setf	(_motCounter+1)^0,c
  5838  000ABC                     
  5839                           ;motors.c: 350:         MOT1Direction = 0;
  5840  000ABC  0E00               	movlw	0
  5841  000ABE  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5842  000AC0                     l3845:
  5843  000AC0  FFFF               	dw	65535	; assembler added errata NOP
  5844                           
  5845                           ;motors.c: 353:     if((y2 - y1) > 0){
  5846  000AC2  5017               	movf	moveToPoint@y1^0,w,c
  5847  000AC4  5C1B               	subwf	moveToPoint@y2^0,w,c
  5848  000AC6  6E1D               	movwf	??_moveToPoint^0,c
  5849  000AC8  5018               	movf	(moveToPoint@y1+1)^0,w,c
  5850  000ACA  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  5851  000ACC  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5852  000ACE  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5853  000AD0  EF72  F005         	goto	u3171
  5854  000AD4  501E               	movf	(??_moveToPoint+1)^0,w,c
  5855  000AD6  E109               	bnz	u3170
  5856  000AD8  041D               	decf	??_moveToPoint^0,w,c
  5857  000ADA  A0D8               	btfss	status,0,c
  5858  000ADC  EF72  F005         	goto	u3171
  5859  000AE0  EF75  F005         	goto	u3170
  5860  000AE4                     u3171:
  5861  000AE4  FFFF               	dw	65535	; assembler added errata NOP
  5862  000AE6  EF7C  F005         	goto	l164
  5863  000AEA                     u3170:
  5864  000AEA  FFFF               	dw	65535	; assembler added errata NOP
  5865  000AEC                     
  5866                           ;motors.c: 354:         motCounter[1][1] = 1;
  5867  000AEC  0E01               	movlw	1
  5868  000AEE  6E6A               	movwf	(_motCounter+3)^0,c
  5869                           
  5870                           ;motors.c: 355:         MOT2Direction = 1;
  5871  000AF0  0E01               	movlw	1
  5872  000AF2  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5873                           
  5874                           ;motors.c: 356:     }else{
  5875  000AF4  EF80  F005         	goto	l165
  5876  000AF8                     l164:
  5877  000AF8  FFFF               	dw	65535	; assembler added errata NOP
  5878                           
  5879                           ;motors.c: 357:         motCounter[1][1] = -1;
  5880  000AFA  686A               	setf	(_motCounter+3)^0,c
  5881  000AFC                     
  5882                           ;motors.c: 358:         MOT2Direction = 0;
  5883  000AFC  0E00               	movlw	0
  5884  000AFE  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5885  000B00                     l165:
  5886  000B00  FFFF               	dw	65535	; assembler added errata NOP
  5887                           
  5888                           ;motors.c: 363:     unsigned char keepMovingX = 1;
  5889  000B02  0E01               	movlw	1
  5890  000B04  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5891                           
  5892                           ;motors.c: 364:     unsigned char keepMovingY = 1;
  5893  000B06  0E01               	movlw	1
  5894  000B08  6E22               	movwf	moveToPoint@keepMovingY^0,c
  5895  000B0A                     
  5896                           ;motors.c: 367:     T2CONbits.TMR2ON = 1;
  5897  000B0A  84CA               	bsf	202,2,c	;volatile
  5898                           
  5899                           ;motors.c: 369:     tm0Error = 0;
  5900  000B0C  0E00               	movlw	0
  5901  000B0E  6E5A               	movwf	(_tm0Error+1)^0,c
  5902  000B10  0E00               	movlw	0
  5903  000B12  6E59               	movwf	_tm0Error^0,c
  5904                           
  5905                           ;motors.c: 370:     tm0Limit = 200;
  5906  000B14  0EC8               	movlw	200
  5907  000B16  6E66               	movwf	_tm0Limit^0,c
  5908  000B18                     
  5909                           ;motors.c: 371:     T0CONbits.TMR0ON = 1;
  5910  000B18  8ED5               	bsf	213,7,c	;volatile
  5911                           
  5912                           ;motors.c: 373:     while(keepMovingX || keepMovingY){
  5913  000B1A  EFBC  F006         	goto	l3917
  5914  000B1E                     l3855:
  5915  000B1E  FFFF               	dw	65535	; assembler added errata NOP
  5916                           
  5917                           ;motors.c: 376:         if(tm0Error){
  5918  000B20  5059               	movf	_tm0Error^0,w,c
  5919  000B22  105A               	iorwf	(_tm0Error+1)^0,w,c
  5920  000B24  B4D8               	btfsc	status,2,c
  5921  000B26  EF97  F005         	goto	u3181
  5922  000B2A  EF9A  F005         	goto	u3180
  5923  000B2E                     u3181:
  5924  000B2E  FFFF               	dw	65535	; assembler added errata NOP
  5925  000B30  EFA1  F005         	goto	l3859
  5926  000B34                     u3180:
  5927  000B34  FFFF               	dw	65535	; assembler added errata NOP
  5928  000B36                     
  5929                           ;motors.c: 382:             tm0Error = 4;
  5930  000B36  0E00               	movlw	0
  5931  000B38  6E5A               	movwf	(_tm0Error+1)^0,c
  5932  000B3A  0E04               	movlw	4
  5933  000B3C  6E59               	movwf	_tm0Error^0,c
  5934                           
  5935                           ;motors.c: 383:             break;
  5936  000B3E  EFD0  F006         	goto	l169
  5937  000B42                     l3859:
  5938  000B42  FFFF               	dw	65535	; assembler added errata NOP
  5939                           
  5940                           ;motors.c: 391:         if(MOT1Direction == 1){
  5941  000B44  041F               	decf	moveToPoint@MOT1Direction^0,w,c
  5942  000B46  A4D8               	btfss	status,2,c
  5943  000B48  EFA8  F005         	goto	u3191
  5944  000B4C  EFAB  F005         	goto	u3190
  5945  000B50                     u3191:
  5946  000B50  FFFF               	dw	65535	; assembler added errata NOP
  5947  000B52  EFEA  F005         	goto	l3873
  5948  000B56                     u3190:
  5949  000B56  FFFF               	dw	65535	; assembler added errata NOP
  5950  000B58                     
  5951                           ;motors.c: 392:             if(x1 + stepCounter() >= x2){
  5952  000B58  EC79  F012         	call	_stepCounter	;wreg free
  5953  000B5C  5015               	movf	moveToPoint@x1^0,w,c
  5954  000B5E  2612               	addwf	?_stepCounter^0,f,c
  5955  000B60  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5956  000B62  2213               	addwfc	(?_stepCounter+1)^0,f,c
  5957  000B64  5019               	movf	moveToPoint@x2^0,w,c
  5958  000B66  5C12               	subwf	?_stepCounter^0,w,c
  5959  000B68  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5960  000B6A  5813               	subwfb	(?_stepCounter+1)^0,w,c
  5961  000B6C  A0D8               	btfss	status,0,c
  5962  000B6E  EFBB  F005         	goto	u3201
  5963  000B72  EFBE  F005         	goto	u3200
  5964  000B76                     u3201:
  5965  000B76  FFFF               	dw	65535	; assembler added errata NOP
  5966  000B78  EFC4  F005         	goto	l3865
  5967  000B7C                     u3200:
  5968  000B7C  FFFF               	dw	65535	; assembler added errata NOP
  5969  000B7E                     l3863:
  5970  000B7E  FFFF               	dw	65535	; assembler added errata NOP
  5971                           
  5972                           ;motors.c: 394:                 keepMovingX = 0;
  5973  000B80  0E00               	movlw	0
  5974  000B82  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5975                           
  5976                           ;motors.c: 395:             }else if(keepMovingX){
  5977  000B84  EF28  F006         	goto	l3887
  5978  000B88                     l3865:
  5979  000B88  FFFF               	dw	65535	; assembler added errata NOP
  5980  000B8A  5021               	movf	moveToPoint@keepMovingX^0,w,c
  5981  000B8C  B4D8               	btfsc	status,2,c
  5982  000B8E  EFCB  F005         	goto	u3211
  5983  000B92  EFCE  F005         	goto	u3210
  5984  000B96                     u3211:
  5985  000B96  FFFF               	dw	65535	; assembler added errata NOP
  5986  000B98  EF28  F006         	goto	l3887
  5987  000B9C                     u3210:
  5988  000B9C  FFFF               	dw	65535	; assembler added errata NOP
  5989  000B9E                     
  5990                           ;motors.c: 401:             motCounter[0][0] += motCounter[0][1];
  5991  000B9E  5068               	movf	(_motCounter+1)^0,w,c
  5992  000BA0  2667               	addwf	_motCounter^0,f,c
  5993                           
  5994                           ;motors.c: 402:             if(motCounter[0][0] > 3){
  5995  000BA2  5067               	movf	_motCounter^0,w,c
  5996  000BA4  0A80               	xorlw	128
  5997  000BA6  0F7C               	addlw	-132
  5998  000BA8  A0D8               	btfss	status,0,c
  5999  000BAA  EFD9  F005         	goto	u3221
  6000  000BAE  EFDC  F005         	goto	u3220
  6001  000BB2                     u3221:
  6002  000BB2  FFFF               	dw	65535	; assembler added errata NOP
  6003  000BB4  EFDF  F005         	goto	l3871
  6004  000BB8                     u3220:
  6005  000BB8  FFFF               	dw	65535	; assembler added errata NOP
  6006  000BBA                     
  6007                           ;motors.c: 403:                 motCounter[0][0] = 0;
  6008  000BBA  0E00               	movlw	0
  6009  000BBC  6E67               	movwf	_motCounter^0,c
  6010  000BBE                     l3871:
  6011  000BBE  FFFF               	dw	65535	; assembler added errata NOP
  6012                           
  6013                           ;motors.c: 406:             LATA = stepMot1[motCounter[0][0]];
  6014  000BC0  0E8C               	movlw	low _stepMot1
  6015  000BC2  2467               	addwf	_motCounter^0,w,c
  6016  000BC4  6ED9               	movwf	fsr2l,c
  6017  000BC6  6ADA               	clrf	fsr2h,c
  6018  000BC8  0E00               	movlw	high _stepMot1
  6019  000BCA  22DA               	addwfc	fsr2h,f,c
  6020  000BCC  50DF               	movf	indf2,w,c
  6021  000BCE  6E89               	movwf	137,c	;volatile
  6022  000BD0  EF28  F006         	goto	l3887
  6023  000BD4                     l3873:
  6024  000BD4  FFFF               	dw	65535	; assembler added errata NOP
  6025  000BD6  501F               	movf	moveToPoint@MOT1Direction^0,w,c
  6026  000BD8  A4D8               	btfss	status,2,c
  6027  000BDA  EFF1  F005         	goto	u3231
  6028  000BDE  EFF4  F005         	goto	u3230
  6029  000BE2                     u3231:
  6030  000BE2  FFFF               	dw	65535	; assembler added errata NOP
  6031  000BE4  EF28  F006         	goto	l3887
  6032  000BE8                     u3230:
  6033  000BE8  FFFF               	dw	65535	; assembler added errata NOP
  6034  000BEA                     
  6035                           ;motors.c: 410:             if(x1 - stepCounter() <= x2){
  6036  000BEA  EC79  F012         	call	_stepCounter	;wreg free
  6037  000BEE  C015  F01D         	movff	moveToPoint@x1,??_moveToPoint
  6038  000BF2  C016  F01E         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6039  000BF6  5012               	movf	?_stepCounter^0,w,c
  6040  000BF8  5E1D               	subwf	??_moveToPoint^0,f,c
  6041  000BFA  5013               	movf	(?_stepCounter+1)^0,w,c
  6042  000BFC  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6043  000BFE  501D               	movf	??_moveToPoint^0,w,c
  6044  000C00  5C19               	subwf	moveToPoint@x2^0,w,c
  6045  000C02  501E               	movf	(??_moveToPoint+1)^0,w,c
  6046  000C04  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  6047  000C06  A0D8               	btfss	status,0,c
  6048  000C08  EF08  F006         	goto	u3241
  6049  000C0C  EF0B  F006         	goto	u3240
  6050  000C10                     u3241:
  6051  000C10  FFFF               	dw	65535	; assembler added errata NOP
  6052  000C12  EF0E  F006         	goto	l3879
  6053  000C16                     u3240:
  6054  000C16  FFFF               	dw	65535	; assembler added errata NOP
  6055  000C18  EFBF  F005         	goto	l3863
  6056  000C1C                     l3879:
  6057  000C1C  FFFF               	dw	65535	; assembler added errata NOP
  6058  000C1E  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6059  000C20  B4D8               	btfsc	status,2,c
  6060  000C22  EF15  F006         	goto	u3251
  6061  000C26  EF18  F006         	goto	u3250
  6062  000C2A                     u3251:
  6063  000C2A  FFFF               	dw	65535	; assembler added errata NOP
  6064  000C2C  EF28  F006         	goto	l3887
  6065  000C30                     u3250:
  6066  000C30  FFFF               	dw	65535	; assembler added errata NOP
  6067  000C32                     
  6068                           ;motors.c: 419:             motCounter[0][0] += motCounter[0][1];
  6069  000C32  5068               	movf	(_motCounter+1)^0,w,c
  6070  000C34  2667               	addwf	_motCounter^0,f,c
  6071                           
  6072                           ;motors.c: 420:             if(motCounter[0][0] < 0){
  6073  000C36  BE67               	btfsc	_motCounter^0,7,c
  6074  000C38  EF23  F006         	goto	u3260
  6075  000C3C  EF20  F006         	goto	u3261
  6076  000C40                     u3261:
  6077  000C40  FFFF               	dw	65535	; assembler added errata NOP
  6078  000C42  EFDF  F005         	goto	l3871
  6079  000C46                     u3260:
  6080  000C46  FFFF               	dw	65535	; assembler added errata NOP
  6081  000C48                     
  6082                           ;motors.c: 421:                 motCounter[0][0] = 3;
  6083  000C48  0E03               	movlw	3
  6084  000C4A  6E67               	movwf	_motCounter^0,c
  6085  000C4C  EFDF  F005         	goto	l3871
  6086  000C50                     l3887:
  6087  000C50  FFFF               	dw	65535	; assembler added errata NOP
  6088                           
  6089                           ;motors.c: 429:         if(MOT2Direction == 1){
  6090  000C52  0420               	decf	moveToPoint@MOT2Direction^0,w,c
  6091  000C54  A4D8               	btfss	status,2,c
  6092  000C56  EF2F  F006         	goto	u3271
  6093  000C5A  EF32  F006         	goto	u3270
  6094  000C5E                     u3271:
  6095  000C5E  FFFF               	dw	65535	; assembler added errata NOP
  6096  000C60  EF71  F006         	goto	l3901
  6097  000C64                     u3270:
  6098  000C64  FFFF               	dw	65535	; assembler added errata NOP
  6099  000C66                     
  6100                           ;motors.c: 431:             if(y1 + stepCounter() >= y2){
  6101  000C66  EC79  F012         	call	_stepCounter	;wreg free
  6102  000C6A  5017               	movf	moveToPoint@y1^0,w,c
  6103  000C6C  2612               	addwf	?_stepCounter^0,f,c
  6104  000C6E  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6105  000C70  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6106  000C72  501B               	movf	moveToPoint@y2^0,w,c
  6107  000C74  5C12               	subwf	?_stepCounter^0,w,c
  6108  000C76  501C               	movf	(moveToPoint@y2+1)^0,w,c
  6109  000C78  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6110  000C7A  A0D8               	btfss	status,0,c
  6111  000C7C  EF42  F006         	goto	u3281
  6112  000C80  EF45  F006         	goto	u3280
  6113  000C84                     u3281:
  6114  000C84  FFFF               	dw	65535	; assembler added errata NOP
  6115  000C86  EF4B  F006         	goto	l3893
  6116  000C8A                     u3280:
  6117  000C8A  FFFF               	dw	65535	; assembler added errata NOP
  6118  000C8C                     l3891:
  6119  000C8C  FFFF               	dw	65535	; assembler added errata NOP
  6120                           
  6121                           ;motors.c: 433:                 keepMovingY = 0;
  6122  000C8E  0E00               	movlw	0
  6123  000C90  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6124                           
  6125                           ;motors.c: 434:             }else if(keepMovingY){
  6126  000C92  EFAF  F006         	goto	l3915
  6127  000C96                     l3893:
  6128  000C96  FFFF               	dw	65535	; assembler added errata NOP
  6129  000C98  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6130  000C9A  B4D8               	btfsc	status,2,c
  6131  000C9C  EF52  F006         	goto	u3291
  6132  000CA0  EF55  F006         	goto	u3290
  6133  000CA4                     u3291:
  6134  000CA4  FFFF               	dw	65535	; assembler added errata NOP
  6135  000CA6  EFAF  F006         	goto	l186
  6136  000CAA                     u3290:
  6137  000CAA  FFFF               	dw	65535	; assembler added errata NOP
  6138  000CAC                     
  6139                           ;motors.c: 440:             motCounter[1][0] += motCounter[1][1];
  6140  000CAC  506A               	movf	(_motCounter+3)^0,w,c
  6141  000CAE  2669               	addwf	(_motCounter+2)^0,f,c
  6142                           
  6143                           ;motors.c: 441:             if(motCounter[1][0] > 3){
  6144  000CB0  5069               	movf	(_motCounter+2)^0,w,c
  6145  000CB2  0A80               	xorlw	128
  6146  000CB4  0F7C               	addlw	-132
  6147  000CB6  A0D8               	btfss	status,0,c
  6148  000CB8  EF60  F006         	goto	u3301
  6149  000CBC  EF63  F006         	goto	u3300
  6150  000CC0                     u3301:
  6151  000CC0  FFFF               	dw	65535	; assembler added errata NOP
  6152  000CC2  EF66  F006         	goto	l3899
  6153  000CC6                     u3300:
  6154  000CC6  FFFF               	dw	65535	; assembler added errata NOP
  6155  000CC8                     
  6156                           ;motors.c: 442:                 motCounter[1][0] = 0;
  6157  000CC8  0E00               	movlw	0
  6158  000CCA  6E69               	movwf	(_motCounter+2)^0,c
  6159  000CCC                     l3899:
  6160  000CCC  FFFF               	dw	65535	; assembler added errata NOP
  6161                           
  6162                           ;motors.c: 445:             LATB = stepMot2[motCounter[1][0]];
  6163  000CCE  0E88               	movlw	low _stepMot2
  6164  000CD0  2469               	addwf	(_motCounter+2)^0,w,c
  6165  000CD2  6ED9               	movwf	fsr2l,c
  6166  000CD4  6ADA               	clrf	fsr2h,c
  6167  000CD6  0E00               	movlw	high _stepMot2
  6168  000CD8  22DA               	addwfc	fsr2h,f,c
  6169  000CDA  50DF               	movf	indf2,w,c
  6170  000CDC  6E8A               	movwf	138,c	;volatile
  6171  000CDE  EFAF  F006         	goto	l3915
  6172  000CE2                     l3901:
  6173  000CE2  FFFF               	dw	65535	; assembler added errata NOP
  6174  000CE4  5020               	movf	moveToPoint@MOT2Direction^0,w,c
  6175  000CE6  A4D8               	btfss	status,2,c
  6176  000CE8  EF78  F006         	goto	u3311
  6177  000CEC  EF7B  F006         	goto	u3310
  6178  000CF0                     u3311:
  6179  000CF0  FFFF               	dw	65535	; assembler added errata NOP
  6180  000CF2  EFAF  F006         	goto	l3915
  6181  000CF6                     u3310:
  6182  000CF6  FFFF               	dw	65535	; assembler added errata NOP
  6183  000CF8                     
  6184                           ;motors.c: 450:             if(y1 - stepCounter() <= y2){
  6185  000CF8  EC79  F012         	call	_stepCounter	;wreg free
  6186  000CFC  C017  F01D         	movff	moveToPoint@y1,??_moveToPoint
  6187  000D00  C018  F01E         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6188  000D04  5012               	movf	?_stepCounter^0,w,c
  6189  000D06  5E1D               	subwf	??_moveToPoint^0,f,c
  6190  000D08  5013               	movf	(?_stepCounter+1)^0,w,c
  6191  000D0A  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6192  000D0C  501D               	movf	??_moveToPoint^0,w,c
  6193  000D0E  5C1B               	subwf	moveToPoint@y2^0,w,c
  6194  000D10  501E               	movf	(??_moveToPoint+1)^0,w,c
  6195  000D12  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6196  000D14  A0D8               	btfss	status,0,c
  6197  000D16  EF8F  F006         	goto	u3321
  6198  000D1A  EF92  F006         	goto	u3320
  6199  000D1E                     u3321:
  6200  000D1E  FFFF               	dw	65535	; assembler added errata NOP
  6201  000D20  EF95  F006         	goto	l3907
  6202  000D24                     u3320:
  6203  000D24  FFFF               	dw	65535	; assembler added errata NOP
  6204  000D26  EF46  F006         	goto	l3891
  6205  000D2A                     l3907:
  6206  000D2A  FFFF               	dw	65535	; assembler added errata NOP
  6207  000D2C  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6208  000D2E  B4D8               	btfsc	status,2,c
  6209  000D30  EF9C  F006         	goto	u3331
  6210  000D34  EF9F  F006         	goto	u3330
  6211  000D38                     u3331:
  6212  000D38  FFFF               	dw	65535	; assembler added errata NOP
  6213  000D3A  EFAF  F006         	goto	l3915
  6214  000D3E                     u3330:
  6215  000D3E  FFFF               	dw	65535	; assembler added errata NOP
  6216  000D40                     
  6217                           ;motors.c: 459:             motCounter[1][0] += motCounter[1][1];
  6218  000D40  506A               	movf	(_motCounter+3)^0,w,c
  6219  000D42  2669               	addwf	(_motCounter+2)^0,f,c
  6220                           
  6221                           ;motors.c: 460:             if(motCounter[1][0] < 0){
  6222  000D44  BE69               	btfsc	(_motCounter+2)^0,7,c
  6223  000D46  EFAA  F006         	goto	u3340
  6224  000D4A  EFA7  F006         	goto	u3341
  6225  000D4E                     u3341:
  6226  000D4E  FFFF               	dw	65535	; assembler added errata NOP
  6227  000D50  EF66  F006         	goto	l3899
  6228  000D54                     u3340:
  6229  000D54  FFFF               	dw	65535	; assembler added errata NOP
  6230  000D56                     
  6231                           ;motors.c: 461:                 motCounter[1][0] = 3;
  6232  000D56  0E03               	movlw	3
  6233  000D58  6E69               	movwf	(_motCounter+2)^0,c
  6234  000D5A  EF66  F006         	goto	l3899
  6235  000D5E                     l186:
  6236  000D5E                     l3915:
  6237  000D5E  FFFF               	dw	65535	; assembler added errata NOP
  6238  000D60  EC15  F012         	call	_stepMade	;wreg free
  6239  000D64  5012               	movf	?_stepMade^0,w,c
  6240  000D66  1013               	iorwf	(?_stepMade+1)^0,w,c
  6241  000D68  B4D8               	btfsc	status,2,c
  6242  000D6A  EFB9  F006         	goto	u3351
  6243  000D6E  EFBC  F006         	goto	u3350
  6244  000D72                     u3351:
  6245  000D72  FFFF               	dw	65535	; assembler added errata NOP
  6246  000D74  EFAF  F006         	goto	l3915
  6247  000D78                     u3350:
  6248  000D78                     l3917:
  6249  000D78  FFFF               	dw	65535	; assembler added errata NOP
  6250                           
  6251                           ;motors.c: 373:     while(keepMovingX || keepMovingY){
  6252  000D7A  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6253  000D7C  A4D8               	btfss	status,2,c
  6254  000D7E  EFC3  F006         	goto	u3361
  6255  000D82  EFC6  F006         	goto	u3360
  6256  000D86                     u3361:
  6257  000D86  FFFF               	dw	65535	; assembler added errata NOP
  6258  000D88  EF8F  F005         	goto	l3855
  6259  000D8C                     u3360:
  6260  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  6261  000D8E  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6262  000D90  A4D8               	btfss	status,2,c
  6263  000D92  EFCD  F006         	goto	u3371
  6264  000D96  EFD0  F006         	goto	u3370
  6265  000D9A                     u3371:
  6266  000D9A  FFFF               	dw	65535	; assembler added errata NOP
  6267  000D9C  EF8F  F005         	goto	l3855
  6268  000DA0                     u3370:
  6269  000DA0                     l169:
  6270  000DA0  FFFF               	dw	65535	; assembler added errata NOP
  6271                           
  6272                           ;motors.c: 484:     T0CONbits.TMR0ON = 0;
  6273  000DA2  9ED5               	bcf	213,7,c	;volatile
  6274                           
  6275                           ;motors.c: 485:     T2CONbits.TMR2ON = 0;
  6276  000DA4  94CA               	bcf	202,2,c	;volatile
  6277  000DA6                     
  6278                           ;motors.c: 487:     resetTM0_Temp();
  6279  000DA6  EC93  F012         	call	_resetTM0_Temp	;wreg free
  6280                           
  6281                           ;motors.c: 488:     resetTM2_Temp();
  6282  000DAA  EC31  F012         	call	_resetTM2_Temp	;wreg free
  6283  000DAE                     
  6284                           ;motors.c: 490:     TMR0 = 0;
  6285  000DAE  0E00               	movlw	0
  6286  000DB0  6ED7               	movwf	215,c	;volatile
  6287  000DB2  0E00               	movlw	0
  6288  000DB4  6ED6               	movwf	214,c	;volatile
  6289  000DB6                     
  6290                           ;motors.c: 491:     TMR2 = 0;
  6291  000DB6  0E00               	movlw	0
  6292  000DB8  6ECC               	movwf	204,c	;volatile
  6293                           
  6294                           ;motors.c: 494:     resetStep();
  6295  000DBA  EC98  F012         	call	_resetStep	;wreg free
  6296  000DBE                     
  6297                           ;motors.c: 496:     return(tm0Error);
  6298  000DBE  5059               	movf	_tm0Error^0,w,c
  6299  000DC0                     l161:
  6300  000DC0  FFFF               	dw	65535	; assembler added errata NOP
  6301  000DC2  0012               	return		;funcret
  6302  000DC4  FFFF               	dw	65535	; errata NOP
  6303  000DC6                     __end_of_moveToPoint:
  6304                           	callstack 0
  6305                           
  6306 ;; *************** function _stepCounter *****************
  6307 ;; Defined at:
  6308 ;;		line 71 in file "timer.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;		None
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;		None
  6313 ;; Return value:  Size  Location     Type
  6314 ;;                  2   17[COMRAM] unsigned int 
  6315 ;; Registers used:
  6316 ;;		None
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6322 ;;      Params:         2       0       0       0       0       0       0
  6323 ;;      Locals:         0       0       0       0       0       0       0
  6324 ;;      Temps:          0       0       0       0       0       0       0
  6325 ;;      Totals:         2       0       0       0       0       0       0
  6326 ;;Total ram usage:        2 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; Hardware stack levels required when called:    4
  6329 ;; This function calls:
  6330 ;;		Nothing
  6331 ;; This function is called by:
  6332 ;;		_moveToPoint
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           	psect	text34
  6337  0024F2                     __ptext34:
  6338                           	callstack 0
  6339  0024F2                     _stepCounter:
  6340                           	callstack 0
  6341  0024F2  FFFF               	dw	65535	; assembler added errata NOP
  6342  0024F4                     
  6343                           ;timer.c: 72:     return pwmStep;
  6344  0024F4  C05C  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6345  0024F8  6A13               	clrf	(?_stepCounter+1)^0,c
  6346  0024FA  0012               	return		;funcret
  6347  0024FC  FFFF               	dw	65535	; errata NOP
  6348  0024FE                     __end_of_stepCounter:
  6349                           	callstack 0
  6350                           
  6351 ;; *************** function _liftArm *****************
  6352 ;; Defined at:
  6353 ;;		line 697 in file "motors.c"
  6354 ;; Parameters:    Size  Location     Type
  6355 ;;		None
  6356 ;; Auto vars:     Size  Location     Type
  6357 ;;		None
  6358 ;; Return value:  Size  Location     Type
  6359 ;;                  1    wreg      unsigned char 
  6360 ;; Registers used:
  6361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : 0/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6367 ;;      Params:         0       0       0       0       0       0       0
  6368 ;;      Locals:         0       0       0       0       0       0       0
  6369 ;;      Temps:          0       0       0       0       0       0       0
  6370 ;;      Totals:         0       0       0       0       0       0       0
  6371 ;;Total ram usage:        0 bytes
  6372 ;; Hardware stack levels used:    1
  6373 ;; Hardware stack levels required when called:    5
  6374 ;; This function calls:
  6375 ;;		_resetStep
  6376 ;;		_resetTM0_Temp
  6377 ;;		_resetTM2_Temp
  6378 ;;		_stepMade
  6379 ;; This function is called by:
  6380 ;;		_executeData
  6381 ;; This function uses a non-reentrant model
  6382 ;;
  6383                           
  6384                           	psect	text35
  6385  00209A                     __ptext35:
  6386                           	callstack 0
  6387  00209A                     _liftArm:
  6388                           	callstack 0
  6389  00209A  FFFF               	dw	65535	; assembler added errata NOP
  6390  00209C                     
  6391                           ;motors.c: 703:     motCounter[2][1] = -1;
  6392  00209C  686C               	setf	(_motCounter+5)^0,c
  6393                           
  6394                           ;motors.c: 706:     T2CONbits.TMR2ON = 1;
  6395  00209E  84CA               	bsf	202,2,c	;volatile
  6396  0020A0                     
  6397                           ;motors.c: 708:     tm0Error = 0;
  6398  0020A0  0E00               	movlw	0
  6399  0020A2  6E5A               	movwf	(_tm0Error+1)^0,c
  6400  0020A4  0E00               	movlw	0
  6401  0020A6  6E59               	movwf	_tm0Error^0,c
  6402                           
  6403                           ;motors.c: 709:     tm0Limit = 200;
  6404  0020A8  0EC8               	movlw	200
  6405  0020AA  6E66               	movwf	_tm0Limit^0,c
  6406  0020AC                     
  6407                           ;motors.c: 710:     T0CONbits.TMR0ON = 1;
  6408  0020AC  8ED5               	bsf	213,7,c	;volatile
  6409                           
  6410                           ;motors.c: 714:     while(!PORTEbits.RE2){
  6411  0020AE  EF91  F010         	goto	l221
  6412  0020B2                     l4035:
  6413  0020B2  FFFF               	dw	65535	; assembler added errata NOP
  6414                           
  6415                           ;motors.c: 716:         resetStep();
  6416  0020B4  EC98  F012         	call	_resetStep	;wreg free
  6417  0020B8                     
  6418                           ;motors.c: 719:         if(tm0Error){
  6419  0020B8  5059               	movf	_tm0Error^0,w,c
  6420  0020BA  105A               	iorwf	(_tm0Error+1)^0,w,c
  6421  0020BC  B4D8               	btfsc	status,2,c
  6422  0020BE  EF63  F010         	goto	u3501
  6423  0020C2  EF66  F010         	goto	u3500
  6424  0020C6                     u3501:
  6425  0020C6  FFFF               	dw	65535	; assembler added errata NOP
  6426  0020C8  EF6D  F010         	goto	l4041
  6427  0020CC                     u3500:
  6428  0020CC  FFFF               	dw	65535	; assembler added errata NOP
  6429  0020CE                     
  6430                           ;motors.c: 724:             tm0Error = 6;
  6431  0020CE  0E00               	movlw	0
  6432  0020D0  6E5A               	movwf	(_tm0Error+1)^0,c
  6433  0020D2  0E06               	movlw	6
  6434  0020D4  6E59               	movwf	_tm0Error^0,c
  6435                           
  6436                           ;motors.c: 725:             break;
  6437  0020D6  EF9A  F010         	goto	l224
  6438  0020DA                     l4041:
  6439  0020DA  FFFF               	dw	65535	; assembler added errata NOP
  6440                           
  6441                           ;motors.c: 734:             motCounter[2][0] += motCounter[2][1];
  6442  0020DC  506C               	movf	(_motCounter+5)^0,w,c
  6443  0020DE  266B               	addwf	(_motCounter+4)^0,f,c
  6444                           
  6445                           ;motors.c: 735:             if(motCounter[2][0] < 0){
  6446  0020E0  BE6B               	btfsc	(_motCounter+4)^0,7,c
  6447  0020E2  EF78  F010         	goto	u3510
  6448  0020E6  EF75  F010         	goto	u3511
  6449  0020EA                     u3511:
  6450  0020EA  FFFF               	dw	65535	; assembler added errata NOP
  6451  0020EC  EF7B  F010         	goto	l4045
  6452  0020F0                     u3510:
  6453  0020F0  FFFF               	dw	65535	; assembler added errata NOP
  6454  0020F2                     
  6455                           ;motors.c: 736:                 motCounter[2][0] = 3;
  6456  0020F2  0E03               	movlw	3
  6457  0020F4  6E6B               	movwf	(_motCounter+4)^0,c
  6458  0020F6                     l4045:
  6459  0020F6  FFFF               	dw	65535	; assembler added errata NOP
  6460                           
  6461                           ;motors.c: 739:             LATC = stepMot3[motCounter[2][0]];
  6462  0020F8  0E84               	movlw	low _stepMot3
  6463  0020FA  246B               	addwf	(_motCounter+4)^0,w,c
  6464  0020FC  6ED9               	movwf	fsr2l,c
  6465  0020FE  6ADA               	clrf	fsr2h,c
  6466  002100  0E00               	movlw	high _stepMot3
  6467  002102  22DA               	addwfc	fsr2h,f,c
  6468  002104  50DF               	movf	indf2,w,c
  6469  002106  6E8B               	movwf	139,c	;volatile
  6470  002108                     l4047:
  6471  002108  FFFF               	dw	65535	; assembler added errata NOP
  6472  00210A  EC15  F012         	call	_stepMade	;wreg free
  6473  00210E  5012               	movf	?_stepMade^0,w,c
  6474  002110  1013               	iorwf	(?_stepMade+1)^0,w,c
  6475  002112  B4D8               	btfsc	status,2,c
  6476  002114  EF8E  F010         	goto	u3521
  6477  002118  EF91  F010         	goto	u3520
  6478  00211C                     u3521:
  6479  00211C  FFFF               	dw	65535	; assembler added errata NOP
  6480  00211E  EF84  F010         	goto	l4047
  6481  002122                     u3520:
  6482  002122                     l221:
  6483  002122  FFFF               	dw	65535	; assembler added errata NOP
  6484                           
  6485                           ;motors.c: 714:     while(!PORTEbits.RE2){
  6486  002124  A484               	btfss	132,2,c	;volatile
  6487  002126  EF97  F010         	goto	u3531
  6488  00212A  EF9A  F010         	goto	u3530
  6489  00212E                     u3531:
  6490  00212E  FFFF               	dw	65535	; assembler added errata NOP
  6491  002130  EF59  F010         	goto	l4035
  6492  002134                     u3530:
  6493  002134                     l224:
  6494  002134  FFFF               	dw	65535	; assembler added errata NOP
  6495                           
  6496                           ;motors.c: 756:     T0CONbits.TMR0ON = 0;
  6497  002136  9ED5               	bcf	213,7,c	;volatile
  6498                           
  6499                           ;motors.c: 757:     T2CONbits.TMR2ON = 0;
  6500  002138  94CA               	bcf	202,2,c	;volatile
  6501  00213A                     
  6502                           ;motors.c: 759:     resetTM0_Temp();
  6503  00213A  EC93  F012         	call	_resetTM0_Temp	;wreg free
  6504                           
  6505                           ;motors.c: 760:     resetTM2_Temp();
  6506  00213E  EC31  F012         	call	_resetTM2_Temp	;wreg free
  6507  002142                     
  6508                           ;motors.c: 762:     TMR0 = 0;
  6509  002142  0E00               	movlw	0
  6510  002144  6ED7               	movwf	215,c	;volatile
  6511  002146  0E00               	movlw	0
  6512  002148  6ED6               	movwf	214,c	;volatile
  6513  00214A                     
  6514                           ;motors.c: 763:     TMR2 = 0;
  6515  00214A  0E00               	movlw	0
  6516  00214C  6ECC               	movwf	204,c	;volatile
  6517                           
  6518                           ;motors.c: 766:     resetStep();
  6519  00214E  EC98  F012         	call	_resetStep	;wreg free
  6520  002152                     
  6521                           ;motors.c: 768:     return(tm0Error);
  6522  002152  5059               	movf	_tm0Error^0,w,c
  6523  002154  0012               	return		;funcret
  6524  002156  FFFF               	dw	65535	; errata NOP
  6525  002158                     __end_of_liftArm:
  6526                           	callstack 0
  6527                           
  6528 ;; *************** function _stepMade *****************
  6529 ;; Defined at:
  6530 ;;		line 60 in file "timer.c"
  6531 ;; Parameters:    Size  Location     Type
  6532 ;;		None
  6533 ;; Auto vars:     Size  Location     Type
  6534 ;;  temp            1   19[COMRAM] unsigned char 
  6535 ;; Return value:  Size  Location     Type
  6536 ;;                  2   17[COMRAM] unsigned int 
  6537 ;; Registers used:
  6538 ;;		wreg, status,2
  6539 ;; Tracked objects:
  6540 ;;		On entry : 0/0
  6541 ;;		On exit  : 0/0
  6542 ;;		Unchanged: 0/0
  6543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6544 ;;      Params:         2       0       0       0       0       0       0
  6545 ;;      Locals:         1       0       0       0       0       0       0
  6546 ;;      Temps:          0       0       0       0       0       0       0
  6547 ;;      Totals:         3       0       0       0       0       0       0
  6548 ;;Total ram usage:        3 bytes
  6549 ;; Hardware stack levels used:    1
  6550 ;; Hardware stack levels required when called:    4
  6551 ;; This function calls:
  6552 ;;		Nothing
  6553 ;; This function is called by:
  6554 ;;		_resetPosition
  6555 ;;		_moveToPoint
  6556 ;;		_touchObject
  6557 ;;		_touchTherm
  6558 ;;		_liftArm
  6559 ;;		_rotateObj
  6560 ;;		_pickObject
  6561 ;;		_releaseObj
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           	psect	text36
  6566  00242A                     __ptext36:
  6567                           	callstack 0
  6568  00242A                     _stepMade:
  6569                           	callstack 0
  6570  00242A  FFFF               	dw	65535	; assembler added errata NOP
  6571  00242C                     
  6572                           ;timer.c: 61:     unsigned char temp = stepToggle;
  6573  00242C  C05B  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6574  002430                     
  6575                           ;timer.c: 63:     stepToggle = 0;
  6576  002430  0E00               	movlw	0
  6577  002432  6E5B               	movwf	_stepToggle^0,c	;volatile
  6578  002434                     
  6579                           ;timer.c: 65:     return temp;
  6580  002434  C014  F012         	movff	stepMade@temp,?_stepMade
  6581  002438  6A13               	clrf	(?_stepMade+1)^0,c
  6582  00243A  0012               	return		;funcret
  6583  00243C  FFFF               	dw	65535	; errata NOP
  6584  00243E                     __end_of_stepMade:
  6585                           	callstack 0
  6586                           
  6587 ;; *************** function _resetTM2_Temp *****************
  6588 ;; Defined at:
  6589 ;;		line 26 in file "interrupt.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;		None
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;		None
  6594 ;; Return value:  Size  Location     Type
  6595 ;;                  1    wreg      void 
  6596 ;; Registers used:
  6597 ;;		wreg, status,2
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6603 ;;      Params:         0       0       0       0       0       0       0
  6604 ;;      Locals:         0       0       0       0       0       0       0
  6605 ;;      Temps:          0       0       0       0       0       0       0
  6606 ;;      Totals:         0       0       0       0       0       0       0
  6607 ;;Total ram usage:        0 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    4
  6610 ;; This function calls:
  6611 ;;		Nothing
  6612 ;; This function is called by:
  6613 ;;		_resetPosition
  6614 ;;		_moveToPoint
  6615 ;;		_touchObject
  6616 ;;		_touchTherm
  6617 ;;		_liftArm
  6618 ;;		_rotateObj
  6619 ;;		_pickObject
  6620 ;;		_releaseObj
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624                           	psect	text37
  6625  002462                     __ptext37:
  6626                           	callstack 0
  6627  002462                     _resetTM2_Temp:
  6628                           	callstack 0
  6629  002462  FFFF               	dw	65535	; assembler added errata NOP
  6630  002464                     
  6631                           ;interrupt.c: 27:     single_cycle = 0;
  6632  002464  0E00               	movlw	0
  6633  002466  6E52               	movwf	(_single_cycle+1)^0,c
  6634  002468  0E00               	movlw	0
  6635  00246A  6E51               	movwf	_single_cycle^0,c
  6636                           
  6637                           ;interrupt.c: 28:     completeStep = 0;
  6638  00246C  0E00               	movlw	0
  6639  00246E  6E62               	movwf	_completeStep^0,c
  6640  002470  0012               	return		;funcret
  6641  002472  FFFF               	dw	65535	; errata NOP
  6642  002474                     __end_of_resetTM2_Temp:
  6643                           	callstack 0
  6644                           
  6645 ;; *************** function _resetTM0_Temp *****************
  6646 ;; Defined at:
  6647 ;;		line 22 in file "interrupt.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;		None
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;		None
  6652 ;; Return value:  Size  Location     Type
  6653 ;;                  1    wreg      void 
  6654 ;; Registers used:
  6655 ;;		wreg, status,2
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6661 ;;      Params:         0       0       0       0       0       0       0
  6662 ;;      Locals:         0       0       0       0       0       0       0
  6663 ;;      Temps:          0       0       0       0       0       0       0
  6664 ;;      Totals:         0       0       0       0       0       0       0
  6665 ;;Total ram usage:        0 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    4
  6668 ;; This function calls:
  6669 ;;		Nothing
  6670 ;; This function is called by:
  6671 ;;		_resetPosition
  6672 ;;		_moveToPoint
  6673 ;;		_touchObject
  6674 ;;		_touchTherm
  6675 ;;		_liftArm
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           	psect	text38
  6680  002526                     __ptext38:
  6681                           	callstack 0
  6682  002526                     _resetTM0_Temp:
  6683                           	callstack 0
  6684  002526  FFFF               	dw	65535	; assembler added errata NOP
  6685  002528                     
  6686                           ;interrupt.c: 23:     tm0Count = 0;
  6687  002528  0E00               	movlw	0
  6688  00252A  6E63               	movwf	_tm0Count^0,c
  6689  00252C  0012               	return		;funcret
  6690  00252E  FFFF               	dw	65535	; errata NOP
  6691  002530                     __end_of_resetTM0_Temp:
  6692                           	callstack 0
  6693                           
  6694 ;; *************** function _resetStep *****************
  6695 ;; Defined at:
  6696 ;;		line 78 in file "timer.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;		None
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;		None
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  1    wreg      void 
  6703 ;; Registers used:
  6704 ;;		wreg, status,2
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6710 ;;      Params:         0       0       0       0       0       0       0
  6711 ;;      Locals:         0       0       0       0       0       0       0
  6712 ;;      Temps:          0       0       0       0       0       0       0
  6713 ;;      Totals:         0       0       0       0       0       0       0
  6714 ;;Total ram usage:        0 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    4
  6717 ;; This function calls:
  6718 ;;		Nothing
  6719 ;; This function is called by:
  6720 ;;		_resetPosition
  6721 ;;		_moveToPoint
  6722 ;;		_touchObject
  6723 ;;		_touchTherm
  6724 ;;		_liftArm
  6725 ;;		_rotateObj
  6726 ;; This function uses a non-reentrant model
  6727 ;;
  6728                           
  6729                           	psect	text39
  6730  002530                     __ptext39:
  6731                           	callstack 0
  6732  002530                     _resetStep:
  6733                           	callstack 0
  6734  002530  FFFF               	dw	65535	; assembler added errata NOP
  6735  002532                     
  6736                           ;timer.c: 79:     pwmStep = 0;
  6737  002532  0E00               	movlw	0
  6738  002534  6E5C               	movwf	_pwmStep^0,c	;volatile
  6739  002536  0012               	return		;funcret
  6740  002538  FFFF               	dw	65535	; errata NOP
  6741  00253A                     __end_of_resetStep:
  6742                           	callstack 0
  6743                           
  6744 ;; *************** function _getData *****************
  6745 ;; Defined at:
  6746 ;;		line 35 in file "usart.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;		None
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;		None
  6751 ;; Return value:  Size  Location     Type
  6752 ;;                  2   17[COMRAM] PTR struct .
  6753 ;; Registers used:
  6754 ;;		wreg, status,2, status,0
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6760 ;;      Params:         2       0       0       0       0       0       0
  6761 ;;      Locals:         0       0       0       0       0       0       0
  6762 ;;      Temps:          0       0       0       0       0       0       0
  6763 ;;      Totals:         2       0       0       0       0       0       0
  6764 ;;Total ram usage:        2 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    4
  6767 ;; This function calls:
  6768 ;;		Nothing
  6769 ;; This function is called by:
  6770 ;;		_executeData
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text40
  6775  0024A2                     __ptext40:
  6776                           	callstack 0
  6777  0024A2                     _getData:
  6778                           	callstack 0
  6779  0024A2  FFFF               	dw	65535	; assembler added errata NOP
  6780  0024A4                     
  6781                           ;usart.c: 36:     return(&dataSequence[0]);
  6782  0024A4  0ECA               	movlw	low _dataSequence
  6783  0024A6  6E12               	movwf	?_getData^0,c
  6784  0024A8  0E00               	movlw	high _dataSequence
  6785  0024AA  6E13               	movwf	(?_getData+1)^0,c
  6786  0024AC  0012               	return		;funcret
  6787  0024AE  FFFF               	dw	65535	; errata NOP
  6788  0024B0                     __end_of_getData:
  6789                           	callstack 0
  6790                           
  6791 ;; *************** function _clearTM0 *****************
  6792 ;; Defined at:
  6793 ;;		line 35 in file "motors.c"
  6794 ;; Parameters:    Size  Location     Type
  6795 ;;		None
  6796 ;; Auto vars:     Size  Location     Type
  6797 ;;		None
  6798 ;; Return value:  Size  Location     Type
  6799 ;;                  1    wreg      void 
  6800 ;; Registers used:
  6801 ;;		wreg, status,2
  6802 ;; Tracked objects:
  6803 ;;		On entry : 0/0
  6804 ;;		On exit  : 0/0
  6805 ;;		Unchanged: 0/0
  6806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6807 ;;      Params:         0       0       0       0       0       0       0
  6808 ;;      Locals:         0       0       0       0       0       0       0
  6809 ;;      Temps:          0       0       0       0       0       0       0
  6810 ;;      Totals:         0       0       0       0       0       0       0
  6811 ;;Total ram usage:        0 bytes
  6812 ;; Hardware stack levels used:    1
  6813 ;; Hardware stack levels required when called:    4
  6814 ;; This function calls:
  6815 ;;		Nothing
  6816 ;; This function is called by:
  6817 ;;		_main
  6818 ;; This function uses a non-reentrant model
  6819 ;;
  6820                           
  6821                           	psect	text41
  6822  0024B0                     __ptext41:
  6823                           	callstack 0
  6824  0024B0                     _clearTM0:
  6825                           	callstack 0
  6826  0024B0  FFFF               	dw	65535	; assembler added errata NOP
  6827  0024B2                     
  6828                           ;motors.c: 36:     tm0Error = 0;
  6829  0024B2  0E00               	movlw	0
  6830  0024B4  6E5A               	movwf	(_tm0Error+1)^0,c
  6831  0024B6  0E00               	movlw	0
  6832  0024B8  6E59               	movwf	_tm0Error^0,c
  6833  0024BA  0012               	return		;funcret
  6834  0024BC  FFFF               	dw	65535	; errata NOP
  6835  0024BE                     __end_of_clearTM0:
  6836                           	callstack 0
  6837                           
  6838 ;; *************** function _isr *****************
  6839 ;; Defined at:
  6840 ;;		line 52 in file "interrupt.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;		None
  6843 ;; Auto vars:     Size  Location     Type
  6844 ;;  temp            1   16[COMRAM] unsigned char 
  6845 ;; Return value:  Size  Location     Type
  6846 ;;                  1    wreg      void 
  6847 ;; Registers used:
  6848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6849 ;; Tracked objects:
  6850 ;;		On entry : 0/0
  6851 ;;		On exit  : 0/0
  6852 ;;		Unchanged: 0/0
  6853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6854 ;;      Params:         0       0       0       0       0       0       0
  6855 ;;      Locals:         1       0       0       0       0       0       0
  6856 ;;      Temps:          6       0       0       0       0       0       0
  6857 ;;      Totals:         7       0       0       0       0       0       0
  6858 ;;Total ram usage:        7 bytes
  6859 ;; Hardware stack levels used:    1
  6860 ;; Hardware stack levels required when called:    3
  6861 ;; This function calls:
  6862 ;;		_abortAll
  6863 ;;		_fatalError
  6864 ;;		_increaseStep
  6865 ;;		_retPeriod
  6866 ;;		_setThermRel
  6867 ;;		_setTouchRel
  6868 ;;		_toggleStep
  6869 ;;		_whatsTM0Limit
  6870 ;;		_writeTM0
  6871 ;;		i2_storeData
  6872 ;; This function is called by:
  6873 ;;		Interrupt level 2
  6874 ;; This function uses a non-reentrant model
  6875 ;;
  6876                           
  6877                           	psect	intcode
  6878  000008                     __pintcode:
  6879                           	callstack 0
  6880  000008                     _isr:
  6881                           	callstack 0
  6882  000008  FFFF               	dw	65535	; assembler added errata NOP
  6883                           
  6884                           ;incstack = 0
  6885  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6886  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6887  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6888  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6889  000018  CFF4 F010          	movff	prodh,??_isr+5
  6890  00001C                     
  6891                           ;interrupt.c: 56:     if(INTCONbits.T0IF){
  6892  00001C  A4F2               	btfss	242,2,c	;volatile
  6893  00001E  EF13  F000         	goto	i2u260_41
  6894  000022  EF16  F000         	goto	i2u260_40
  6895  000026                     i2u260_41:
  6896  000026  FFFF               	dw	65535	; assembler added errata NOP
  6897  000028  EF2C  F000         	goto	i2l3491
  6898  00002C                     i2u260_40:
  6899  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6900  00002E                     
  6901                           ;interrupt.c: 57:         INTCONbits.T0IF = 0;
  6902  00002E  94F2               	bcf	242,2,c	;volatile
  6903  000030                     
  6904                           ;interrupt.c: 60:         tm0Count++;
  6905  000030  2A63               	incf	_tm0Count^0,f,c
  6906  000032                     
  6907                           ;interrupt.c: 62:         if(tm0Count >= whatsTM0Limit()){
  6908  000032  ECBC  F012         	call	_whatsTM0Limit	;wreg free
  6909  000036  6E0B               	movwf	??_isr^0,c
  6910  000038  500B               	movf	??_isr^0,w,c
  6911  00003A  5C63               	subwf	_tm0Count^0,w,c
  6912  00003C  A0D8               	btfss	status,0,c
  6913  00003E  EF23  F000         	goto	i2u261_41
  6914  000042  EF26  F000         	goto	i2u261_40
  6915  000046                     i2u261_41:
  6916  000046  FFFF               	dw	65535	; assembler added errata NOP
  6917  000048  EF2C  F000         	goto	i2l3491
  6918  00004C                     i2u261_40:
  6919  00004C  FFFF               	dw	65535	; assembler added errata NOP
  6920  00004E                     
  6921                           ;interrupt.c: 63:             T0CONbits.TMR0ON = 0;
  6922  00004E  9ED5               	bcf	213,7,c	;volatile
  6923  000050                     
  6924                           ;interrupt.c: 64:             tm0Count = 0;
  6925  000050  0E00               	movlw	0
  6926  000052  6E63               	movwf	_tm0Count^0,c
  6927  000054                     
  6928                           ;interrupt.c: 65:             writeTM0();
  6929  000054  EC5F  F012         	call	_writeTM0	;wreg free
  6930  000058                     i2l3491:
  6931  000058  FFFF               	dw	65535	; assembler added errata NOP
  6932                           
  6933                           ;interrupt.c: 70:     if(PIR1bits.TMR1IF){
  6934  00005A  A09E               	btfss	158,0,c	;volatile
  6935  00005C  EF32  F000         	goto	i2u262_41
  6936  000060  EF35  F000         	goto	i2u262_40
  6937  000064                     i2u262_41:
  6938  000064  FFFF               	dw	65535	; assembler added errata NOP
  6939  000066  EF45  F000         	goto	i2l3499
  6940  00006A                     i2u262_40:
  6941  00006A  FFFF               	dw	65535	; assembler added errata NOP
  6942  00006C                     
  6943                           ;interrupt.c: 71:         PIR1bits.TMR1IF = 0;
  6944  00006C  909E               	bcf	158,0,c	;volatile
  6945  00006E                     
  6946                           ;interrupt.c: 72:         if(fatalError()){
  6947  00006E  ECC4  F012         	call	_fatalError	;wreg free
  6948  000072  0900               	iorlw	0
  6949  000074  B4D8               	btfsc	status,2,c
  6950  000076  EF3F  F000         	goto	i2u263_41
  6951  00007A  EF42  F000         	goto	i2u263_40
  6952  00007E                     i2u263_41:
  6953  00007E  FFFF               	dw	65535	; assembler added errata NOP
  6954  000080  EF45  F000         	goto	i2l3499
  6955  000084                     i2u263_40:
  6956  000084  FFFF               	dw	65535	; assembler added errata NOP
  6957  000086                     
  6958                           ;interrupt.c: 73:             abortAll();
  6959  000086  EC3A  F012         	call	_abortAll	;wreg free
  6960  00008A                     i2l3499:
  6961  00008A  FFFF               	dw	65535	; assembler added errata NOP
  6962                           
  6963                           ;interrupt.c: 78:     if(PIR1bits.TMR2IF){
  6964  00008C  A29E               	btfss	158,1,c	;volatile
  6965  00008E  EF4B  F000         	goto	i2u264_41
  6966  000092  EF4E  F000         	goto	i2u264_40
  6967  000096                     i2u264_41:
  6968  000096  FFFF               	dw	65535	; assembler added errata NOP
  6969  000098  EF80  F000         	goto	i2l3521
  6970  00009C                     i2u264_40:
  6971  00009C  FFFF               	dw	65535	; assembler added errata NOP
  6972  00009E                     
  6973                           ;interrupt.c: 79:         PIR1bits.TMR2IF = 0;
  6974  00009E  929E               	bcf	158,1,c	;volatile
  6975  0000A0                     
  6976                           ;interrupt.c: 80:         single_cycle++;
  6977  0000A0  4A51               	infsnz	_single_cycle^0,f,c
  6978  0000A2  2A52               	incf	(_single_cycle+1)^0,f,c
  6979  0000A4                     
  6980                           ;interrupt.c: 83:         if(single_cycle > retPeriod()){
  6981  0000A4  EC66  F012         	call	_retPeriod	;wreg free
  6982  0000A8  5051               	movf	_single_cycle^0,w,c
  6983  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  6984  0000AC  5052               	movf	(_single_cycle+1)^0,w,c
  6985  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  6986  0000B0  B0D8               	btfsc	status,0,c
  6987  0000B2  EF5D  F000         	goto	i2u265_41
  6988  0000B6  EF60  F000         	goto	i2u265_40
  6989  0000BA                     i2u265_41:
  6990  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  6991  0000BC  EF80  F000         	goto	i2l3521
  6992  0000C0                     i2u265_40:
  6993  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  6994  0000C2                     
  6995                           ;interrupt.c: 84:             single_cycle = 0;
  6996  0000C2  0E00               	movlw	0
  6997  0000C4  6E52               	movwf	(_single_cycle+1)^0,c
  6998  0000C6  0E00               	movlw	0
  6999  0000C8  6E51               	movwf	_single_cycle^0,c
  7000  0000CA                     
  7001                           ;interrupt.c: 85:             completeStep++;
  7002  0000CA  2A62               	incf	_completeStep^0,f,c
  7003  0000CC                     
  7004                           ;interrupt.c: 88:             if(completeStep != 0 && !(completeStep % 2)){
  7005  0000CC  5062               	movf	_completeStep^0,w,c
  7006  0000CE  B4D8               	btfsc	status,2,c
  7007  0000D0  EF6C  F000         	goto	i2u266_41
  7008  0000D4  EF6F  F000         	goto	i2u266_40
  7009  0000D8                     i2u266_41:
  7010  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  7011  0000DA  EF7D  F000         	goto	i2l3519
  7012  0000DE                     i2u266_40:
  7013  0000DE  FFFF               	dw	65535	; assembler added errata NOP
  7014  0000E0  B062               	btfsc	_completeStep^0,0,c
  7015  0000E2  EF75  F000         	goto	i2u267_41
  7016  0000E6  EF78  F000         	goto	i2u267_40
  7017  0000EA                     i2u267_41:
  7018  0000EA  FFFF               	dw	65535	; assembler added errata NOP
  7019  0000EC  EF7D  F000         	goto	i2l3519
  7020  0000F0                     i2u267_40:
  7021  0000F0  FFFF               	dw	65535	; assembler added errata NOP
  7022  0000F2                     
  7023                           ;interrupt.c: 90:                 completeStep = 0;
  7024  0000F2  0E00               	movlw	0
  7025  0000F4  6E62               	movwf	_completeStep^0,c
  7026  0000F6                     
  7027                           ;interrupt.c: 93:                 increaseStep();
  7028  0000F6  ECC0  F012         	call	_increaseStep	;wreg free
  7029  0000FA                     i2l3519:
  7030  0000FA  FFFF               	dw	65535	; assembler added errata NOP
  7031                           
  7032                           ;interrupt.c: 98:             toggleStep();
  7033  0000FC  EC9D  F012         	call	_toggleStep	;wreg free
  7034  000100                     i2l3521:
  7035  000100  FFFF               	dw	65535	; assembler added errata NOP
  7036                           
  7037                           ;interrupt.c: 103:     if(PIR1bits.ADIF){
  7038  000102  AC9E               	btfss	158,6,c	;volatile
  7039  000104  EF86  F000         	goto	i2u268_41
  7040  000108  EF89  F000         	goto	i2u268_40
  7041  00010C                     i2u268_41:
  7042  00010C  FFFF               	dw	65535	; assembler added errata NOP
  7043  00010E  EFB6  F000         	goto	i2l3533
  7044  000112                     i2u268_40:
  7045  000112  FFFF               	dw	65535	; assembler added errata NOP
  7046  000114                     
  7047                           ;interrupt.c: 104:         PIR1bits.ADIF = 0;
  7048  000114  9C9E               	bcf	158,6,c	;volatile
  7049                           
  7050                           ;interrupt.c: 107:         ADC_res = ADRESL;
  7051  000116  CFC3 F053          	movff	4035,_ADC_res	;volatile
  7052  00011A  6A54               	clrf	(_ADC_res+1)^0,c
  7053  00011C                     
  7054                           ;interrupt.c: 108:         ADC_res |= (ADRESH << 8);
  7055  00011C  50C4               	movf	196,w,c	;volatile
  7056  00011E  6E0C               	movwf	(??_isr+1)^0,c
  7057  000120  6A0B               	clrf	??_isr^0,c
  7058  000122  500B               	movf	??_isr^0,w,c
  7059  000124  1253               	iorwf	_ADC_res^0,f,c
  7060  000126  500C               	movf	(??_isr+1)^0,w,c
  7061  000128  1254               	iorwf	(_ADC_res+1)^0,f,c
  7062                           
  7063                           ;interrupt.c: 111:         if(ADC_res > therm_pressure){
  7064  00012A  0453               	decf	_ADC_res^0,w,c
  7065  00012C  0E04               	movlw	4
  7066  00012E  5854               	subwfb	(_ADC_res+1)^0,w,c
  7067  000130  A0D8               	btfss	status,0,c
  7068  000132  EF9D  F000         	goto	i2u269_41
  7069  000136  EFA0  F000         	goto	i2u269_40
  7070  00013A                     i2u269_41:
  7071  00013A  FFFF               	dw	65535	; assembler added errata NOP
  7072  00013C  EFA7  F000         	goto	i2l3529
  7073  000140                     i2u269_40:
  7074  000140  FFFF               	dw	65535	; assembler added errata NOP
  7075  000142                     
  7076                           ;interrupt.c: 113:             setTouchRel();
  7077  000142  ECA2  F012         	call	_setTouchRel	;wreg free
  7078                           
  7079                           ;interrupt.c: 114:             setThermRel();
  7080  000146  ECA7  F012         	call	_setThermRel	;wreg free
  7081                           
  7082                           ;interrupt.c: 115:         }else if(ADC_res > touch_pressure){
  7083  00014A  EFB6  F000         	goto	i2l3533
  7084  00014E                     i2l3529:
  7085  00014E  FFFF               	dw	65535	; assembler added errata NOP
  7086  000150  0453               	decf	_ADC_res^0,w,c
  7087  000152  0E02               	movlw	2
  7088  000154  5854               	subwfb	(_ADC_res+1)^0,w,c
  7089  000156  A0D8               	btfss	status,0,c
  7090  000158  EFB0  F000         	goto	i2u270_41
  7091  00015C  EFB3  F000         	goto	i2u270_40
  7092  000160                     i2u270_41:
  7093  000160  FFFF               	dw	65535	; assembler added errata NOP
  7094  000162  EFB6  F000         	goto	i2l3533
  7095  000166                     i2u270_40:
  7096  000166  FFFF               	dw	65535	; assembler added errata NOP
  7097  000168                     
  7098                           ;interrupt.c: 117:             setTouchRel();
  7099  000168  ECA2  F012         	call	_setTouchRel	;wreg free
  7100  00016C                     i2l3533:
  7101  00016C  FFFF               	dw	65535	; assembler added errata NOP
  7102                           
  7103                           ;interrupt.c: 122:     if(PIR1bits.RC1IF){
  7104  00016E  AA9E               	btfss	158,5,c	;volatile
  7105  000170  EFBC  F000         	goto	i2u271_41
  7106  000174  EFBF  F000         	goto	i2u271_40
  7107  000178                     i2u271_41:
  7108  000178  FFFF               	dw	65535	; assembler added errata NOP
  7109  00017A  EFC6  F000         	goto	i2l484
  7110  00017E                     i2u271_40:
  7111  00017E  FFFF               	dw	65535	; assembler added errata NOP
  7112  000180                     
  7113                           ;interrupt.c: 123:         PIR1bits.RC1IF = 0;
  7114  000180  9A9E               	bcf	158,5,c	;volatile
  7115                           
  7116                           ;interrupt.c: 126:         unsigned char temp = RCREG1;
  7117  000182  CFAE F011          	movff	4014,isr@temp	;volatile
  7118  000186                     
  7119                           ;interrupt.c: 128:         storeData(temp);
  7120  000186  5011               	movf	isr@temp^0,w,c
  7121  000188  ECDE  F00B         	call	i2_storeData
  7122  00018C                     i2l484:
  7123  00018C  FFFF               	dw	65535	; assembler added errata NOP
  7124  00018E  C010  FFF4         	movff	??_isr+5,prodh
  7125  000192  C00F  FFF3         	movff	??_isr+4,prodl
  7126  000196  C00E  FFDA         	movff	??_isr+3,fsr2h
  7127  00019A  C00D  FFD9         	movff	??_isr+2,fsr2l
  7128  00019E  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7129  0001A0  0011               	retfie		f
  7130  0001A2  FFFF               	dw	65535	; errata NOP
  7131  0001A4                     __end_of_isr:
  7132                           	callstack 0
  7133                           
  7134 ;; *************** function i2_storeData *****************
  7135 ;; Defined at:
  7136 ;;		line 164 in file "usart.c"
  7137 ;; Parameters:    Size  Location     Type
  7138 ;;  data            1    wreg     unsigned char 
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;  data            1    9[COMRAM] unsigned char 
  7141 ;; Return value:  Size  Location     Type
  7142 ;;                  1    wreg      void 
  7143 ;; Registers used:
  7144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7145 ;; Tracked objects:
  7146 ;;		On entry : 0/0
  7147 ;;		On exit  : 0/0
  7148 ;;		Unchanged: 0/0
  7149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7150 ;;      Params:         0       0       0       0       0       0       0
  7151 ;;      Locals:         1       0       0       0       0       0       0
  7152 ;;      Temps:          2       0       0       0       0       0       0
  7153 ;;      Totals:         3       0       0       0       0       0       0
  7154 ;;Total ram usage:        3 bytes
  7155 ;; Hardware stack levels used:    1
  7156 ;; Hardware stack levels required when called:    2
  7157 ;; This function calls:
  7158 ;;		i2_printError
  7159 ;; This function is called by:
  7160 ;;		_isr
  7161 ;; This function uses a non-reentrant model
  7162 ;;
  7163                           
  7164                           	psect	text43
  7165  0017BC                     __ptext43:
  7166                           	callstack 0
  7167  0017BC                     i2_storeData:
  7168                           	callstack 0
  7169  0017BC  FFFF               	dw	65535	; assembler added errata NOP
  7170                           
  7171                           ;incstack = 0
  7172                           ;i2storeData@data stored from wreg
  7173  0017BE  6E0A               	movwf	i2storeData@data^0,c
  7174  0017C0                     
  7175                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  7176  0017C0  0E43               	movlw	low storeData@receivedMex
  7177  0017C2  245E               	addwf	storeData@counter^0,w,c
  7178  0017C4  6ED9               	movwf	fsr2l,c
  7179  0017C6  6ADA               	clrf	fsr2h,c
  7180  0017C8  0E00               	movlw	high storeData@receivedMex
  7181  0017CA  22DA               	addwfc	fsr2h,f,c
  7182  0017CC  C00A  FFDF         	movff	i2storeData@data,indf2
  7183  0017D0                     
  7184                           ;usart.c: 175:     counter++;
  7185  0017D0  2A5E               	incf	storeData@counter^0,f,c
  7186                           
  7187                           ;usart.c: 178:     switch(receivedMex[0]){
  7188  0017D2  EFFA  F00B         	goto	i2l3381
  7189  0017D6                     i2l3373:
  7190  0017D6  FFFF               	dw	65535	; assembler added errata NOP
  7191                           
  7192                           ;usart.c: 180:             mexLength = 5;
  7193  0017D8  0E05               	movlw	5
  7194  0017DA  6E6D               	movwf	storeData@mexLength^0,c
  7195                           
  7196                           ;usart.c: 181:             break;
  7197  0017DC  EF15  F00C         	goto	i2l3383
  7198  0017E0                     i2l3375:
  7199  0017E0  FFFF               	dw	65535	; assembler added errata NOP
  7200                           
  7201                           ;usart.c: 183:             mexLength = 9;
  7202  0017E2  0E09               	movlw	9
  7203  0017E4  6E6D               	movwf	storeData@mexLength^0,c
  7204                           
  7205                           ;usart.c: 184:             break;
  7206  0017E6  EF15  F00C         	goto	i2l3383
  7207  0017EA                     i2l3377:
  7208  0017EA  FFFF               	dw	65535	; assembler added errata NOP
  7209                           
  7210                           ;usart.c: 186:             mexLength = 1;
  7211  0017EC  0E01               	movlw	1
  7212  0017EE  6E6D               	movwf	storeData@mexLength^0,c
  7213                           
  7214                           ;usart.c: 187:             break;
  7215  0017F0  EF15  F00C         	goto	i2l3383
  7216  0017F4                     i2l3381:
  7217  0017F4  FFFF               	dw	65535	; assembler added errata NOP
  7218  0017F6  5043               	movf	storeData@receivedMex^0,w,c
  7219  0017F8  6E08               	movwf	??i2_storeData^0,c
  7220  0017FA  6A09               	clrf	(??i2_storeData+1)^0,c
  7221                           
  7222                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7223                           ; Switch size 1, requested type "simple"
  7224                           ; Number of cases is 1, Range of values is 0 to 0
  7225                           ; switch strategies available:
  7226                           ; Name         Instructions Cycles
  7227                           ; simple_byte            4     3 (average)
  7228                           ;	Chosen strategy is simple_byte
  7229  0017FC  5009               	movf	(??i2_storeData+1)^0,w,c
  7230  0017FE  0A00               	xorlw	0	; case 0
  7231  001800  B4D8               	btfsc	status,2,c
  7232  001802  EF05  F00C         	goto	i2l4627
  7233  001806  EF15  F00C         	goto	i2l3383
  7234  00180A                     i2l4627:
  7235  00180A  FFFF               	dw	65535	; assembler added errata NOP
  7236                           
  7237                           ; Switch size 1, requested type "simple"
  7238                           ; Number of cases is 3, Range of values is 0 to 2
  7239                           ; switch strategies available:
  7240                           ; Name         Instructions Cycles
  7241                           ; simple_byte           10     6 (average)
  7242                           ;	Chosen strategy is simple_byte
  7243  00180C  5008               	movf	??i2_storeData^0,w,c
  7244  00180E  0A00               	xorlw	0	; case 0
  7245  001810  B4D8               	btfsc	status,2,c
  7246  001812  EFEB  F00B         	goto	i2l3373
  7247  001816  0A01               	xorlw	1	; case 1
  7248  001818  B4D8               	btfsc	status,2,c
  7249  00181A  EFF0  F00B         	goto	i2l3375
  7250  00181E  0A03               	xorlw	3	; case 2
  7251  001820  B4D8               	btfsc	status,2,c
  7252  001822  EFF5  F00B         	goto	i2l3377
  7253  001826  EF15  F00C         	goto	i2l3383
  7254  00182A                     i2l3383:
  7255  00182A  FFFF               	dw	65535	; assembler added errata NOP
  7256                           
  7257                           ;usart.c: 194:     if(counter >= mexLength){
  7258  00182C  506D               	movf	storeData@mexLength^0,w,c
  7259  00182E  5C5E               	subwf	storeData@counter^0,w,c
  7260  001830  A0D8               	btfss	status,0,c
  7261  001832  EF1D  F00C         	goto	i2u253_41
  7262  001836  EF20  F00C         	goto	i2u253_40
  7263  00183A                     i2u253_41:
  7264  00183A  FFFF               	dw	65535	; assembler added errata NOP
  7265  00183C  EF98  F00C         	goto	i2l598
  7266  001840                     i2u253_40:
  7267  001840  FFFF               	dw	65535	; assembler added errata NOP
  7268  001842                     
  7269                           ;usart.c: 195:         counter = 0;
  7270  001842  0E00               	movlw	0
  7271  001844  6E5E               	movwf	storeData@counter^0,c
  7272                           
  7273                           ;usart.c: 198:         switch(receivedMex[0]){
  7274  001846  EF7D  F00C         	goto	i2l3405
  7275  00184A                     i2l3387:
  7276  00184A  FFFF               	dw	65535	; assembler added errata NOP
  7277                           
  7278                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7279  00184C  5061               	movf	_dataCounter^0,w,c
  7280  00184E  0D04               	mullw	4
  7281  001850  0ECA               	movlw	low _dataSequence
  7282  001852  24F3               	addwf	243,w,c
  7283  001854  6ED9               	movwf	fsr2l,c
  7284  001856  0E00               	movlw	high _dataSequence
  7285  001858  20F4               	addwfc	prodh,w,c
  7286  00185A  6EDA               	movwf	fsr2h,c
  7287  00185C  C044  FFDF         	movff	storeData@receivedMex+1,indf2
  7288                           
  7289                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  7290  001860  5061               	movf	_dataCounter^0,w,c
  7291  001862  0D04               	mullw	4
  7292  001864  0ECB               	movlw	low (_dataSequence+1)
  7293  001866  24F3               	addwf	243,w,c
  7294  001868  6ED9               	movwf	fsr2l,c
  7295  00186A  0E00               	movlw	high (_dataSequence+1)
  7296  00186C  20F4               	addwfc	prodh,w,c
  7297  00186E  6EDA               	movwf	fsr2h,c
  7298  001870  5045               	movf	(storeData@receivedMex+2)^0,w,c
  7299  001872  0D05               	mullw	5
  7300  001874  CFF3 FFDF          	movff	prodl,indf2
  7301                           
  7302                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  7303  001878  5061               	movf	_dataCounter^0,w,c
  7304  00187A  0D04               	mullw	4
  7305  00187C  0ECC               	movlw	low (_dataSequence+2)
  7306  00187E  24F3               	addwf	243,w,c
  7307  001880  6ED9               	movwf	fsr2l,c
  7308  001882  0E00               	movlw	high (_dataSequence+2)
  7309  001884  20F4               	addwfc	prodh,w,c
  7310  001886  6EDA               	movwf	fsr2h,c
  7311  001888  5046               	movf	(storeData@receivedMex+3)^0,w,c
  7312  00188A  0D05               	mullw	5
  7313  00188C  CFF3 FFDF          	movff	prodl,indf2
  7314                           
  7315                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7316  001890  5061               	movf	_dataCounter^0,w,c
  7317  001892  0D04               	mullw	4
  7318  001894  0ECD               	movlw	low (_dataSequence+3)
  7319  001896  24F3               	addwf	243,w,c
  7320  001898  6ED9               	movwf	fsr2l,c
  7321  00189A  0E00               	movlw	high (_dataSequence+3)
  7322  00189C  20F4               	addwfc	prodh,w,c
  7323  00189E  6EDA               	movwf	fsr2h,c
  7324  0018A0  C047  FFDF         	movff	storeData@receivedMex+4,indf2
  7325  0018A4                     
  7326                           ;usart.c: 205:                 dataCounter++;
  7327  0018A4  2A61               	incf	_dataCounter^0,f,c
  7328                           
  7329                           ;usart.c: 206:                 break;
  7330  0018A6  EF98  F00C         	goto	i2l598
  7331  0018AA                     i2l595:
  7332  0018AA  FFFF               	dw	65535	; assembler added errata NOP
  7333                           
  7334                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  7335  0018AC  C044  F0DE         	movff	storeData@receivedMex+1,_newSequenceData
  7336                           
  7337                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  7338  0018B0  C045  F0DF         	movff	storeData@receivedMex+2,_newSequenceData+1
  7339  0018B4                     
  7340                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 5;
  7341  0018B4  5046               	movf	(storeData@receivedMex+3)^0,w,c
  7342  0018B6  0D05               	mullw	5
  7343  0018B8  CFF3 F0E0          	movff	prodl,_newSequenceData+2
  7344                           
  7345                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 5;
  7346  0018BC  5047               	movf	(storeData@receivedMex+4)^0,w,c
  7347  0018BE  0D05               	mullw	5
  7348  0018C0  CFF3 F0E1          	movff	prodl,_newSequenceData+3
  7349  0018C4                     
  7350                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  7351  0018C4  C048  F0E2         	movff	storeData@receivedMex+5,_newSequenceData+4
  7352                           
  7353                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 5;
  7354  0018C8  5049               	movf	(storeData@receivedMex+6)^0,w,c
  7355  0018CA  0D05               	mullw	5
  7356  0018CC  CFF3 F0E3          	movff	prodl,_newSequenceData+5
  7357                           
  7358                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 5;
  7359  0018D0  504A               	movf	(storeData@receivedMex+7)^0,w,c
  7360  0018D2  0D05               	mullw	5
  7361  0018D4  CFF3 F0E4          	movff	prodl,_newSequenceData+6
  7362  0018D8                     
  7363                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  7364  0018D8  C04B  F0E5         	movff	storeData@receivedMex+8,_newSequenceData+7
  7365  0018DC                     
  7366                           ;usart.c: 218:                 _newSequence = 1;
  7367  0018DC  0E01               	movlw	1
  7368  0018DE  6E5F               	movwf	__newSequence^0,c
  7369                           
  7370                           ;usart.c: 219:                 break;
  7371  0018E0  EF98  F00C         	goto	i2l598
  7372  0018E4                     i2l3399:
  7373  0018E4  FFFF               	dw	65535	; assembler added errata NOP
  7374                           
  7375                           ;usart.c: 222:                 _fatalError = 1;
  7376  0018E6  0E01               	movlw	1
  7377  0018E8  6E60               	movwf	__fatalError^0,c
  7378                           
  7379                           ;usart.c: 223:                 break;
  7380  0018EA  EF98  F00C         	goto	i2l598
  7381  0018EE                     i2l3401:
  7382  0018EE  FFFF               	dw	65535	; assembler added errata NOP
  7383                           
  7384                           ;usart.c: 226:                 printError(8);
  7385  0018F0  0E08               	movlw	8
  7386  0018F2  ECC4  F00D         	call	i2_printError
  7387                           
  7388                           ;usart.c: 227:                 break;
  7389  0018F6  EF98  F00C         	goto	i2l598
  7390  0018FA                     i2l3405:
  7391  0018FA  FFFF               	dw	65535	; assembler added errata NOP
  7392  0018FC  5043               	movf	storeData@receivedMex^0,w,c
  7393  0018FE  6E08               	movwf	??i2_storeData^0,c
  7394  001900  6A09               	clrf	(??i2_storeData+1)^0,c
  7395                           
  7396                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7397                           ; Switch size 1, requested type "simple"
  7398                           ; Number of cases is 1, Range of values is 0 to 0
  7399                           ; switch strategies available:
  7400                           ; Name         Instructions Cycles
  7401                           ; simple_byte            4     3 (average)
  7402                           ;	Chosen strategy is simple_byte
  7403  001902  5009               	movf	(??i2_storeData+1)^0,w,c
  7404  001904  0A00               	xorlw	0	; case 0
  7405  001906  B4D8               	btfsc	status,2,c
  7406  001908  EF88  F00C         	goto	i2l4629
  7407  00190C  EF77  F00C         	goto	i2l3401
  7408  001910                     i2l4629:
  7409  001910  FFFF               	dw	65535	; assembler added errata NOP
  7410                           
  7411                           ; Switch size 1, requested type "simple"
  7412                           ; Number of cases is 3, Range of values is 0 to 2
  7413                           ; switch strategies available:
  7414                           ; Name         Instructions Cycles
  7415                           ; simple_byte           10     6 (average)
  7416                           ;	Chosen strategy is simple_byte
  7417  001912  5008               	movf	??i2_storeData^0,w,c
  7418  001914  0A00               	xorlw	0	; case 0
  7419  001916  B4D8               	btfsc	status,2,c
  7420  001918  EF25  F00C         	goto	i2l3387
  7421  00191C  0A01               	xorlw	1	; case 1
  7422  00191E  B4D8               	btfsc	status,2,c
  7423  001920  EF55  F00C         	goto	i2l595
  7424  001924  0A03               	xorlw	3	; case 2
  7425  001926  B4D8               	btfsc	status,2,c
  7426  001928  EF72  F00C         	goto	i2l3399
  7427  00192C  EF77  F00C         	goto	i2l3401
  7428  001930                     i2l598:
  7429  001930  FFFF               	dw	65535	; assembler added errata NOP
  7430  001932  0012               	return		;funcret
  7431  001934  FFFF               	dw	65535	; errata NOP
  7432  001936                     __end_ofi2_storeData:
  7433                           	callstack 0
  7434                           
  7435 ;; *************** function _writeTM0 *****************
  7436 ;; Defined at:
  7437 ;;		line 28 in file "motors.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;		None
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;		None
  7442 ;; Return value:  Size  Location     Type
  7443 ;;                  1    wreg      void 
  7444 ;; Registers used:
  7445 ;;		wreg, status,2
  7446 ;; Tracked objects:
  7447 ;;		On entry : 0/0
  7448 ;;		On exit  : 0/0
  7449 ;;		Unchanged: 0/0
  7450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7451 ;;      Params:         0       0       0       0       0       0       0
  7452 ;;      Locals:         0       0       0       0       0       0       0
  7453 ;;      Temps:          0       0       0       0       0       0       0
  7454 ;;      Totals:         0       0       0       0       0       0       0
  7455 ;;Total ram usage:        0 bytes
  7456 ;; Hardware stack levels used:    1
  7457 ;; This function calls:
  7458 ;;		Nothing
  7459 ;; This function is called by:
  7460 ;;		_isr
  7461 ;; This function uses a non-reentrant model
  7462 ;;
  7463                           
  7464                           	psect	text44
  7465  0024BE                     __ptext44:
  7466                           	callstack 0
  7467  0024BE                     _writeTM0:
  7468                           	callstack 0
  7469  0024BE  FFFF               	dw	65535	; assembler added errata NOP
  7470  0024C0                     
  7471                           ;motors.c: 29:     tm0Error = 1;
  7472  0024C0  0E00               	movlw	0
  7473  0024C2  6E5A               	movwf	(_tm0Error+1)^0,c
  7474  0024C4  0E01               	movlw	1
  7475  0024C6  6E59               	movwf	_tm0Error^0,c
  7476  0024C8  0012               	return		;funcret
  7477  0024CA  FFFF               	dw	65535	; errata NOP
  7478  0024CC                     __end_of_writeTM0:
  7479                           	callstack 0
  7480                           
  7481 ;; *************** function _whatsTM0Limit *****************
  7482 ;; Defined at:
  7483 ;;		line 42 in file "motors.c"
  7484 ;; Parameters:    Size  Location     Type
  7485 ;;		None
  7486 ;; Auto vars:     Size  Location     Type
  7487 ;;		None
  7488 ;; Return value:  Size  Location     Type
  7489 ;;                  1    wreg      unsigned char 
  7490 ;; Registers used:
  7491 ;;		wreg, status,2
  7492 ;; Tracked objects:
  7493 ;;		On entry : 0/0
  7494 ;;		On exit  : 0/0
  7495 ;;		Unchanged: 0/0
  7496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7497 ;;      Params:         0       0       0       0       0       0       0
  7498 ;;      Locals:         0       0       0       0       0       0       0
  7499 ;;      Temps:          0       0       0       0       0       0       0
  7500 ;;      Totals:         0       0       0       0       0       0       0
  7501 ;;Total ram usage:        0 bytes
  7502 ;; Hardware stack levels used:    1
  7503 ;; This function calls:
  7504 ;;		Nothing
  7505 ;; This function is called by:
  7506 ;;		_isr
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           	psect	text45
  7511  002578                     __ptext45:
  7512                           	callstack 0
  7513  002578                     _whatsTM0Limit:
  7514                           	callstack 0
  7515  002578  FFFF               	dw	65535	; assembler added errata NOP
  7516  00257A                     
  7517                           ;motors.c: 43:     return(tm0Limit);
  7518  00257A  5066               	movf	_tm0Limit^0,w,c
  7519  00257C  0012               	return		;funcret
  7520  00257E  FFFF               	dw	65535	; errata NOP
  7521  002580                     __end_of_whatsTM0Limit:
  7522                           	callstack 0
  7523                           
  7524 ;; *************** function _toggleStep *****************
  7525 ;; Defined at:
  7526 ;;		line 93 in file "timer.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;		None
  7529 ;; Auto vars:     Size  Location     Type
  7530 ;;		None
  7531 ;; Return value:  Size  Location     Type
  7532 ;;                  1    wreg      void 
  7533 ;; Registers used:
  7534 ;;		wreg, status,2
  7535 ;; Tracked objects:
  7536 ;;		On entry : 0/0
  7537 ;;		On exit  : 0/0
  7538 ;;		Unchanged: 0/0
  7539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7540 ;;      Params:         0       0       0       0       0       0       0
  7541 ;;      Locals:         0       0       0       0       0       0       0
  7542 ;;      Temps:          0       0       0       0       0       0       0
  7543 ;;      Totals:         0       0       0       0       0       0       0
  7544 ;;Total ram usage:        0 bytes
  7545 ;; Hardware stack levels used:    1
  7546 ;; This function calls:
  7547 ;;		Nothing
  7548 ;; This function is called by:
  7549 ;;		_isr
  7550 ;; This function uses a non-reentrant model
  7551 ;;
  7552                           
  7553                           	psect	text46
  7554  00253A                     __ptext46:
  7555                           	callstack 0
  7556  00253A                     _toggleStep:
  7557                           	callstack 0
  7558  00253A  FFFF               	dw	65535	; assembler added errata NOP
  7559  00253C                     
  7560                           ;timer.c: 94:     stepToggle = 1;
  7561  00253C  0E01               	movlw	1
  7562  00253E  6E5B               	movwf	_stepToggle^0,c	;volatile
  7563  002540  0012               	return		;funcret
  7564  002542  FFFF               	dw	65535	; errata NOP
  7565  002544                     __end_of_toggleStep:
  7566                           	callstack 0
  7567                           
  7568 ;; *************** function _setTouchRel *****************
  7569 ;; Defined at:
  7570 ;;		line 86 in file "adc.c"
  7571 ;; Parameters:    Size  Location     Type
  7572 ;;		None
  7573 ;; Auto vars:     Size  Location     Type
  7574 ;;		None
  7575 ;; Return value:  Size  Location     Type
  7576 ;;                  1    wreg      void 
  7577 ;; Registers used:
  7578 ;;		wreg, status,2
  7579 ;; Tracked objects:
  7580 ;;		On entry : 0/0
  7581 ;;		On exit  : 0/0
  7582 ;;		Unchanged: 0/0
  7583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7584 ;;      Params:         0       0       0       0       0       0       0
  7585 ;;      Locals:         0       0       0       0       0       0       0
  7586 ;;      Temps:          0       0       0       0       0       0       0
  7587 ;;      Totals:         0       0       0       0       0       0       0
  7588 ;;Total ram usage:        0 bytes
  7589 ;; Hardware stack levels used:    1
  7590 ;; This function calls:
  7591 ;;		Nothing
  7592 ;; This function is called by:
  7593 ;;		_isr
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           	psect	text47
  7598  002544                     __ptext47:
  7599                           	callstack 0
  7600  002544                     _setTouchRel:
  7601                           	callstack 0
  7602  002544  FFFF               	dw	65535	; assembler added errata NOP
  7603  002546                     
  7604                           ;adc.c: 87:     touch_rel = 1;
  7605  002546  0E01               	movlw	1
  7606  002548  6E65               	movwf	_touch_rel^0,c	;volatile
  7607  00254A  0012               	return		;funcret
  7608  00254C  FFFF               	dw	65535	; errata NOP
  7609  00254E                     __end_of_setTouchRel:
  7610                           	callstack 0
  7611                           
  7612 ;; *************** function _setThermRel *****************
  7613 ;; Defined at:
  7614 ;;		line 79 in file "adc.c"
  7615 ;; Parameters:    Size  Location     Type
  7616 ;;		None
  7617 ;; Auto vars:     Size  Location     Type
  7618 ;;		None
  7619 ;; Return value:  Size  Location     Type
  7620 ;;                  1    wreg      void 
  7621 ;; Registers used:
  7622 ;;		wreg, status,2
  7623 ;; Tracked objects:
  7624 ;;		On entry : 0/0
  7625 ;;		On exit  : 0/0
  7626 ;;		Unchanged: 0/0
  7627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7628 ;;      Params:         0       0       0       0       0       0       0
  7629 ;;      Locals:         0       0       0       0       0       0       0
  7630 ;;      Temps:          0       0       0       0       0       0       0
  7631 ;;      Totals:         0       0       0       0       0       0       0
  7632 ;;Total ram usage:        0 bytes
  7633 ;; Hardware stack levels used:    1
  7634 ;; This function calls:
  7635 ;;		Nothing
  7636 ;; This function is called by:
  7637 ;;		_isr
  7638 ;; This function uses a non-reentrant model
  7639 ;;
  7640                           
  7641                           	psect	text48
  7642  00254E                     __ptext48:
  7643                           	callstack 0
  7644  00254E                     _setThermRel:
  7645                           	callstack 0
  7646  00254E  FFFF               	dw	65535	; assembler added errata NOP
  7647  002550                     
  7648                           ;adc.c: 80:     therm_rel = 1;
  7649  002550  0E01               	movlw	1
  7650  002552  6E64               	movwf	_therm_rel^0,c	;volatile
  7651  002554  0012               	return		;funcret
  7652  002556  FFFF               	dw	65535	; errata NOP
  7653  002558                     __end_of_setThermRel:
  7654                           	callstack 0
  7655                           
  7656 ;; *************** function _retPeriod *****************
  7657 ;; Defined at:
  7658 ;;		line 101 in file "timer.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;		None
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;		None
  7663 ;; Return value:  Size  Location     Type
  7664 ;;                  2    0[COMRAM] unsigned int 
  7665 ;; Registers used:
  7666 ;;		None
  7667 ;; Tracked objects:
  7668 ;;		On entry : 0/0
  7669 ;;		On exit  : 0/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7672 ;;      Params:         2       0       0       0       0       0       0
  7673 ;;      Locals:         0       0       0       0       0       0       0
  7674 ;;      Temps:          0       0       0       0       0       0       0
  7675 ;;      Totals:         2       0       0       0       0       0       0
  7676 ;;Total ram usage:        2 bytes
  7677 ;; Hardware stack levels used:    1
  7678 ;; This function calls:
  7679 ;;		Nothing
  7680 ;; This function is called by:
  7681 ;;		_isr
  7682 ;; This function uses a non-reentrant model
  7683 ;;
  7684                           
  7685                           	psect	text49
  7686  0024CC                     __ptext49:
  7687                           	callstack 0
  7688  0024CC                     _retPeriod:
  7689                           	callstack 0
  7690  0024CC  FFFF               	dw	65535	; assembler added errata NOP
  7691  0024CE                     
  7692                           ;timer.c: 102:     return pwmPeriod;
  7693  0024CE  C04F  F001         	movff	_pwmPeriod,?_retPeriod
  7694  0024D2  C050  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7695  0024D6  0012               	return		;funcret
  7696  0024D8  FFFF               	dw	65535	; errata NOP
  7697  0024DA                     __end_of_retPeriod:
  7698                           	callstack 0
  7699                           
  7700 ;; *************** function _increaseStep *****************
  7701 ;; Defined at:
  7702 ;;		line 85 in file "timer.c"
  7703 ;; Parameters:    Size  Location     Type
  7704 ;;		None
  7705 ;; Auto vars:     Size  Location     Type
  7706 ;;		None
  7707 ;; Return value:  Size  Location     Type
  7708 ;;                  1    wreg      void 
  7709 ;; Registers used:
  7710 ;;		status,2, status,0
  7711 ;; Tracked objects:
  7712 ;;		On entry : 0/0
  7713 ;;		On exit  : 0/0
  7714 ;;		Unchanged: 0/0
  7715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7716 ;;      Params:         0       0       0       0       0       0       0
  7717 ;;      Locals:         0       0       0       0       0       0       0
  7718 ;;      Temps:          0       0       0       0       0       0       0
  7719 ;;      Totals:         0       0       0       0       0       0       0
  7720 ;;Total ram usage:        0 bytes
  7721 ;; Hardware stack levels used:    1
  7722 ;; This function calls:
  7723 ;;		Nothing
  7724 ;; This function is called by:
  7725 ;;		_isr
  7726 ;; This function uses a non-reentrant model
  7727 ;;
  7728                           
  7729                           	psect	text50
  7730  002580                     __ptext50:
  7731                           	callstack 0
  7732  002580                     _increaseStep:
  7733                           	callstack 0
  7734  002580  FFFF               	dw	65535	; assembler added errata NOP
  7735  002582                     
  7736                           ;timer.c: 86:     pwmStep++;
  7737  002582  2A5C               	incf	_pwmStep^0,f,c	;volatile
  7738  002584  0012               	return		;funcret
  7739  002586  FFFF               	dw	65535	; errata NOP
  7740  002588                     __end_of_increaseStep:
  7741                           	callstack 0
  7742                           
  7743 ;; *************** function _fatalError *****************
  7744 ;; Defined at:
  7745 ;;		line 61 in file "usart.c"
  7746 ;; Parameters:    Size  Location     Type
  7747 ;;		None
  7748 ;; Auto vars:     Size  Location     Type
  7749 ;;		None
  7750 ;; Return value:  Size  Location     Type
  7751 ;;                  1    wreg      unsigned char 
  7752 ;; Registers used:
  7753 ;;		wreg, status,2
  7754 ;; Tracked objects:
  7755 ;;		On entry : 0/0
  7756 ;;		On exit  : 0/0
  7757 ;;		Unchanged: 0/0
  7758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7759 ;;      Params:         0       0       0       0       0       0       0
  7760 ;;      Locals:         0       0       0       0       0       0       0
  7761 ;;      Temps:          0       0       0       0       0       0       0
  7762 ;;      Totals:         0       0       0       0       0       0       0
  7763 ;;Total ram usage:        0 bytes
  7764 ;; Hardware stack levels used:    1
  7765 ;; This function calls:
  7766 ;;		Nothing
  7767 ;; This function is called by:
  7768 ;;		_isr
  7769 ;; This function uses a non-reentrant model
  7770 ;;
  7771                           
  7772                           	psect	text51
  7773  002588                     __ptext51:
  7774                           	callstack 0
  7775  002588                     _fatalError:
  7776                           	callstack 0
  7777  002588  FFFF               	dw	65535	; assembler added errata NOP
  7778  00258A                     
  7779                           ;usart.c: 62:     return _fatalError;
  7780  00258A  5060               	movf	__fatalError^0,w,c
  7781  00258C  0012               	return		;funcret
  7782  00258E  FFFF               	dw	65535	; errata NOP
  7783  002590                     __end_of_fatalError:
  7784                           	callstack 0
  7785                           
  7786 ;; *************** function _abortAll *****************
  7787 ;; Defined at:
  7788 ;;		line 839 in file "motors.c"
  7789 ;; Parameters:    Size  Location     Type
  7790 ;;		None
  7791 ;; Auto vars:     Size  Location     Type
  7792 ;;		None
  7793 ;; Return value:  Size  Location     Type
  7794 ;;                  1    wreg      void 
  7795 ;; Registers used:
  7796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/0
  7799 ;;		On exit  : 0/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7802 ;;      Params:         0       0       0       0       0       0       0
  7803 ;;      Locals:         0       0       0       0       0       0       0
  7804 ;;      Temps:          0       0       0       0       0       0       0
  7805 ;;      Totals:         0       0       0       0       0       0       0
  7806 ;;Total ram usage:        0 bytes
  7807 ;; Hardware stack levels used:    1
  7808 ;; Hardware stack levels required when called:    2
  7809 ;; This function calls:
  7810 ;;		i2_printError
  7811 ;; This function is called by:
  7812 ;;		_isr
  7813 ;; This function uses a non-reentrant model
  7814 ;;
  7815                           
  7816                           	psect	text52
  7817  002474                     __ptext52:
  7818                           	callstack 0
  7819  002474                     _abortAll:
  7820                           	callstack 0
  7821  002474  FFFF               	dw	65535	; assembler added errata NOP
  7822  002476                     
  7823                           ;motors.c: 847:     printError(7);
  7824  002476  0E07               	movlw	7
  7825  002478  ECC4  F00D         	call	i2_printError
  7826  00247C                     i2l257:
  7827  00247C  FFFF               	dw	65535	; assembler added errata NOP
  7828  00247E  EF3E  F012         	goto	i2l257
  7829  002482  0012               	return		;funcret
  7830  002484  FFFF               	dw	65535	; errata NOP
  7831  002486                     __end_of_abortAll:
  7832                           	callstack 0
  7833                           
  7834 ;; *************** function i2_printError *****************
  7835 ;; Defined at:
  7836 ;;		line 111 in file "usart.c"
  7837 ;; Parameters:    Size  Location     Type
  7838 ;;  errCode         1    wreg     unsigned char 
  7839 ;; Auto vars:     Size  Location     Type
  7840 ;;  errCode         1    6[COMRAM] unsigned char 
  7841 ;; Return value:  Size  Location     Type
  7842 ;;                  1    wreg      void 
  7843 ;; Registers used:
  7844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7845 ;; Tracked objects:
  7846 ;;		On entry : 0/0
  7847 ;;		On exit  : 0/0
  7848 ;;		Unchanged: 0/0
  7849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7850 ;;      Params:         0       0       0       0       0       0       0
  7851 ;;      Locals:         1       0       0       0       0       0       0
  7852 ;;      Temps:          2       0       0       0       0       0       0
  7853 ;;      Totals:         3       0       0       0       0       0       0
  7854 ;;Total ram usage:        3 bytes
  7855 ;; Hardware stack levels used:    1
  7856 ;; Hardware stack levels required when called:    1
  7857 ;; This function calls:
  7858 ;;		i2_uartTx
  7859 ;; This function is called by:
  7860 ;;		_abortAll
  7861 ;;		i2_storeData
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           	psect	text53
  7866  001B88                     __ptext53:
  7867                           	callstack 0
  7868  001B88                     i2_printError:
  7869                           	callstack 0
  7870  001B88  FFFF               	dw	65535	; assembler added errata NOP
  7871                           
  7872                           ;incstack = 0
  7873                           ;i2printError@errCode stored from wreg
  7874  001B8A  6E07               	movwf	i2printError@errCode^0,c
  7875  001B8C                     
  7876                           ;usart.c: 113:     switch(errCode){
  7877  001B8C  EF20  F00E         	goto	i2l3067
  7878  001B90                     i2l3049:
  7879  001B90  FFFF               	dw	65535	; assembler added errata NOP
  7880                           
  7881                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7882  001B92  0E94               	movlw	low _errString_Feed
  7883  001B94  6E01               	movwf	i2uartTx@ptr^0,c
  7884  001B96  0E00               	movlw	high _errString_Feed
  7885  001B98  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7886  001B9A  0E1E               	movlw	30
  7887  001B9C  6E03               	movwf	i2uartTx@length^0,c
  7888  001B9E  EC46  F011         	call	i2_uartTx	;wreg free
  7889                           
  7890                           ;usart.c: 116:             break;
  7891  001BA2  EF4F  F00E         	goto	i2l565
  7892  001BA6                     i2l3051:
  7893  001BA6  FFFF               	dw	65535	; assembler added errata NOP
  7894                           
  7895                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7896  001BA8  0E5E               	movlw	low _errString_ZEND
  7897  001BAA  6E01               	movwf	i2uartTx@ptr^0,c
  7898  001BAC  0E01               	movlw	high _errString_ZEND
  7899  001BAE  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7900  001BB0  0E29               	movlw	41
  7901  001BB2  6E03               	movwf	i2uartTx@length^0,c
  7902  001BB4  EC46  F011         	call	i2_uartTx	;wreg free
  7903                           
  7904                           ;usart.c: 119:             break;
  7905  001BB8  EF4F  F00E         	goto	i2l565
  7906  001BBC                     i2l3053:
  7907  001BBC  FFFF               	dw	65535	; assembler added errata NOP
  7908                           
  7909                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7910  001BBE  0E87               	movlw	low _errString_Reset
  7911  001BC0  6E01               	movwf	i2uartTx@ptr^0,c
  7912  001BC2  0E01               	movlw	high _errString_Reset
  7913  001BC4  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7914  001BC6  0E28               	movlw	40
  7915  001BC8  6E03               	movwf	i2uartTx@length^0,c
  7916  001BCA  EC46  F011         	call	i2_uartTx	;wreg free
  7917                           
  7918                           ;usart.c: 122:             break;
  7919  001BCE  EF4F  F00E         	goto	i2l565
  7920  001BD2                     i2l3055:
  7921  001BD2  FFFF               	dw	65535	; assembler added errata NOP
  7922                           
  7923                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7924  001BD4  0E35               	movlw	low _errString_Point
  7925  001BD6  6E01               	movwf	i2uartTx@ptr^0,c
  7926  001BD8  0E01               	movlw	high _errString_Point
  7927  001BDA  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7928  001BDC  0E29               	movlw	41
  7929  001BDE  6E03               	movwf	i2uartTx@length^0,c
  7930  001BE0  EC46  F011         	call	i2_uartTx	;wreg free
  7931                           
  7932                           ;usart.c: 125:             break;
  7933  001BE4  EF4F  F00E         	goto	i2l565
  7934  001BE8                     i2l3057:
  7935  001BE8  FFFF               	dw	65535	; assembler added errata NOP
  7936                           
  7937                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7938  001BEA  0ED6               	movlw	low _errString_Bound
  7939  001BEC  6E01               	movwf	i2uartTx@ptr^0,c
  7940  001BEE  0E01               	movlw	high _errString_Bound
  7941  001BF0  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7942  001BF2  0E21               	movlw	33
  7943  001BF4  6E03               	movwf	i2uartTx@length^0,c
  7944  001BF6  EC46  F011         	call	i2_uartTx	;wreg free
  7945                           
  7946                           ;usart.c: 128:             break;
  7947  001BFA  EF4F  F00E         	goto	i2l565
  7948  001BFE                     i2l3059:
  7949  001BFE  FFFF               	dw	65535	; assembler added errata NOP
  7950                           
  7951                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7952  001C00  0E00               	movlw	low _errString_PointZ
  7953  001C02  6E01               	movwf	i2uartTx@ptr^0,c
  7954  001C04  0E01               	movlw	high _errString_PointZ
  7955  001C06  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7956  001C08  0E35               	movlw	53
  7957  001C0A  6E03               	movwf	i2uartTx@length^0,c
  7958  001C0C  EC46  F011         	call	i2_uartTx	;wreg free
  7959                           
  7960                           ;usart.c: 131:             break;
  7961  001C10  EF4F  F00E         	goto	i2l565
  7962  001C14                     i2l3061:
  7963  001C14  FFFF               	dw	65535	; assembler added errata NOP
  7964                           
  7965                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7966  001C16  0EAF               	movlw	low _errString_Fatal
  7967  001C18  6E01               	movwf	i2uartTx@ptr^0,c
  7968  001C1A  0E01               	movlw	high _errString_Fatal
  7969  001C1C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7970  001C1E  0E27               	movlw	39
  7971  001C20  6E03               	movwf	i2uartTx@length^0,c
  7972  001C22  EC46  F011         	call	i2_uartTx	;wreg free
  7973                           
  7974                           ;usart.c: 134:             break;
  7975  001C26  EF4F  F00E         	goto	i2l565
  7976  001C2A                     i2l3063:
  7977  001C2A  FFFF               	dw	65535	; assembler added errata NOP
  7978                           
  7979                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7980  001C2C  0EB2               	movlw	low _errString_Command
  7981  001C2E  6E01               	movwf	i2uartTx@ptr^0,c
  7982  001C30  0E00               	movlw	high _errString_Command
  7983  001C32  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7984  001C34  0E18               	movlw	24
  7985  001C36  6E03               	movwf	i2uartTx@length^0,c
  7986  001C38  EC46  F011         	call	i2_uartTx	;wreg free
  7987                           
  7988                           ;usart.c: 137:             break;
  7989  001C3C  EF4F  F00E         	goto	i2l565
  7990  001C40                     i2l3067:
  7991  001C40  FFFF               	dw	65535	; assembler added errata NOP
  7992  001C42  5007               	movf	i2printError@errCode^0,w,c
  7993  001C44  6E05               	movwf	??i2_printError^0,c
  7994  001C46  6A06               	clrf	(??i2_printError+1)^0,c
  7995                           
  7996                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7997                           ; Switch size 1, requested type "simple"
  7998                           ; Number of cases is 1, Range of values is 0 to 0
  7999                           ; switch strategies available:
  8000                           ; Name         Instructions Cycles
  8001                           ; simple_byte            4     3 (average)
  8002                           ;	Chosen strategy is simple_byte
  8003  001C48  5006               	movf	(??i2_printError+1)^0,w,c
  8004  001C4A  0A00               	xorlw	0	; case 0
  8005  001C4C  B4D8               	btfsc	status,2,c
  8006  001C4E  EF2B  F00E         	goto	i2l4631
  8007  001C52  EF4F  F00E         	goto	i2l565
  8008  001C56                     i2l4631:
  8009  001C56  FFFF               	dw	65535	; assembler added errata NOP
  8010                           
  8011                           ; Switch size 1, requested type "simple"
  8012                           ; Number of cases is 8, Range of values is 1 to 8
  8013                           ; switch strategies available:
  8014                           ; Name         Instructions Cycles
  8015                           ; simple_byte           25    13 (average)
  8016                           ;	Chosen strategy is simple_byte
  8017  001C58  5005               	movf	??i2_printError^0,w,c
  8018  001C5A  0A01               	xorlw	1	; case 1
  8019  001C5C  B4D8               	btfsc	status,2,c
  8020  001C5E  EFC8  F00D         	goto	i2l3049
  8021  001C62  0A03               	xorlw	3	; case 2
  8022  001C64  B4D8               	btfsc	status,2,c
  8023  001C66  EFD3  F00D         	goto	i2l3051
  8024  001C6A  0A01               	xorlw	1	; case 3
  8025  001C6C  B4D8               	btfsc	status,2,c
  8026  001C6E  EFDE  F00D         	goto	i2l3053
  8027  001C72  0A07               	xorlw	7	; case 4
  8028  001C74  B4D8               	btfsc	status,2,c
  8029  001C76  EFE9  F00D         	goto	i2l3055
  8030  001C7A  0A01               	xorlw	1	; case 5
  8031  001C7C  B4D8               	btfsc	status,2,c
  8032  001C7E  EFF4  F00D         	goto	i2l3057
  8033  001C82  0A03               	xorlw	3	; case 6
  8034  001C84  B4D8               	btfsc	status,2,c
  8035  001C86  EFFF  F00D         	goto	i2l3059
  8036  001C8A  0A01               	xorlw	1	; case 7
  8037  001C8C  B4D8               	btfsc	status,2,c
  8038  001C8E  EF0A  F00E         	goto	i2l3061
  8039  001C92  0A0F               	xorlw	15	; case 8
  8040  001C94  B4D8               	btfsc	status,2,c
  8041  001C96  EF15  F00E         	goto	i2l3063
  8042  001C9A  EF4F  F00E         	goto	i2l565
  8043  001C9E                     i2l565:
  8044  001C9E  FFFF               	dw	65535	; assembler added errata NOP
  8045  001CA0  0012               	return		;funcret
  8046  001CA2  FFFF               	dw	65535	; errata NOP
  8047  001CA4                     __end_ofi2_printError:
  8048                           	callstack 0
  8049                           
  8050 ;; *************** function i2_uartTx *****************
  8051 ;; Defined at:
  8052 ;;		line 148 in file "usart.c"
  8053 ;; Parameters:    Size  Location     Type
  8054 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  8055 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  8056 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  8057 ;;  length          1    2[COMRAM] unsigned char 
  8058 ;; Auto vars:     Size  Location     Type
  8059 ;;  i               1    3[COMRAM] unsigned char 
  8060 ;; Return value:  Size  Location     Type
  8061 ;;                  1    wreg      void 
  8062 ;; Registers used:
  8063 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8064 ;; Tracked objects:
  8065 ;;		On entry : 0/0
  8066 ;;		On exit  : 0/0
  8067 ;;		Unchanged: 0/0
  8068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8069 ;;      Params:         3       0       0       0       0       0       0
  8070 ;;      Locals:         1       0       0       0       0       0       0
  8071 ;;      Temps:          0       0       0       0       0       0       0
  8072 ;;      Totals:         4       0       0       0       0       0       0
  8073 ;;Total ram usage:        4 bytes
  8074 ;; Hardware stack levels used:    1
  8075 ;; This function calls:
  8076 ;;		Nothing
  8077 ;; This function is called by:
  8078 ;;		i2_printError
  8079 ;; This function uses a non-reentrant model
  8080 ;;
  8081                           
  8082                           	psect	text54
  8083  00228C                     __ptext54:
  8084                           	callstack 0
  8085  00228C                     i2_uartTx:
  8086                           	callstack 0
  8087  00228C  FFFF               	dw	65535	; assembler added errata NOP
  8088  00228E                     
  8089                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  8090  00228E  0E01               	movlw	1
  8091  002290  6E04               	movwf	i2uartTx@i^0,c
  8092  002292  EF5F  F011         	goto	i2l2751
  8093  002296                     i2l2747:
  8094  002296  FFFF               	dw	65535	; assembler added errata NOP
  8095                           
  8096                           ;usart.c: 153:         TXREG = *ptr;
  8097  002298  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  8098  00229C  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  8099  0022A0  50DF               	movf	indf2,w,c
  8100  0022A2  6EAD               	movwf	173,c	;volatile
  8101  0022A4                     i2l570:
  8102  0022A4  FFFF               	dw	65535	; assembler added errata NOP
  8103  0022A6  A2AC               	btfss	172,1,c	;volatile
  8104  0022A8  EF58  F011         	goto	i2u183_41
  8105  0022AC  EF5B  F011         	goto	i2u183_40
  8106  0022B0                     i2u183_41:
  8107  0022B0  FFFF               	dw	65535	; assembler added errata NOP
  8108  0022B2  EF52  F011         	goto	i2l570
  8109  0022B6                     i2u183_40:
  8110  0022B6  FFFF               	dw	65535	; assembler added errata NOP
  8111  0022B8                     
  8112                           ;usart.c: 157:         ptr++;
  8113  0022B8  4A01               	infsnz	i2uartTx@ptr^0,f,c
  8114  0022BA  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  8115                           
  8116                           ;usart.c: 158:     }
  8117  0022BC  2A04               	incf	i2uartTx@i^0,f,c
  8118  0022BE                     i2l2751:
  8119  0022BE  FFFF               	dw	65535	; assembler added errata NOP
  8120  0022C0  5003               	movf	i2uartTx@length^0,w,c
  8121  0022C2  5C04               	subwf	i2uartTx@i^0,w,c
  8122  0022C4  A0D8               	btfss	status,0,c
  8123  0022C6  EF67  F011         	goto	i2u184_41
  8124  0022CA  EF6A  F011         	goto	i2u184_40
  8125  0022CE                     i2u184_41:
  8126  0022CE  FFFF               	dw	65535	; assembler added errata NOP
  8127  0022D0  EF4B  F011         	goto	i2l2747
  8128  0022D4                     i2u184_40:
  8129  0022D4  FFFF               	dw	65535	; assembler added errata NOP
  8130  0022D6  0012               	return		;funcret
  8131  0022D8  FFFF               	dw	65535	; errata NOP
  8132  0022DA                     __end_ofi2_uartTx:
  8133                           	callstack 0
  8134                           
  8135                           	psect	rparam
  8136  0000                     
  8137                           	psect	temp
  8138  00006E                     btemp:
  8139                           	callstack 0
  8140  00006E                     	ds	1
  8141  0000                     int$flags	set	btemp
  8142  0000                     wtemp8	set	btemp+1
  8143  0000                     ttemp5	set	btemp+1
  8144  0000                     ttemp6	set	btemp+4
  8145  0000                     ttemp7	set	btemp+8
  8146                           
  8147                           	psect	idloc
  8148                           
  8149                           ;Config register IDLOC0 @ 0x200000
  8150                           ;	unspecified, using default values
  8151  200000                     	org	2097152
  8152  200000  FF                 	db	255
  8153                           
  8154                           ;Config register IDLOC1 @ 0x200001
  8155                           ;	unspecified, using default values
  8156  200001                     	org	2097153
  8157  200001  FF                 	db	255
  8158                           
  8159                           ;Config register IDLOC2 @ 0x200002
  8160                           ;	unspecified, using default values
  8161  200002                     	org	2097154
  8162  200002  FF                 	db	255
  8163                           
  8164                           ;Config register IDLOC3 @ 0x200003
  8165                           ;	unspecified, using default values
  8166  200003                     	org	2097155
  8167  200003  FF                 	db	255
  8168                           
  8169                           ;Config register IDLOC4 @ 0x200004
  8170                           ;	unspecified, using default values
  8171  200004                     	org	2097156
  8172  200004  FF                 	db	255
  8173                           
  8174                           ;Config register IDLOC5 @ 0x200005
  8175                           ;	unspecified, using default values
  8176  200005                     	org	2097157
  8177  200005  FF                 	db	255
  8178                           
  8179                           ;Config register IDLOC6 @ 0x200006
  8180                           ;	unspecified, using default values
  8181  200006                     	org	2097158
  8182  200006  FF                 	db	255
  8183                           
  8184                           ;Config register IDLOC7 @ 0x200007
  8185                           ;	unspecified, using default values
  8186  200007                     	org	2097159
  8187  200007  FF                 	db	255
  8188                           
  8189                           	psect	config
  8190                           
  8191                           ; Padding undefined space
  8192  300000                     	org	3145728
  8193  300000  FF                 	db	255
  8194                           
  8195                           ;Config register CONFIG1H @ 0x300001
  8196                           ;	Oscillator Selection bits
  8197                           ;	OSC = XT, XT oscillator
  8198                           ;	Oscillator System Clock Switch Enable bit
  8199                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8200  300001                     	org	3145729
  8201  300001  21                 	db	33
  8202                           
  8203                           ;Config register CONFIG2L @ 0x300002
  8204                           ;	Power-up Timer Enable bit
  8205                           ;	PWRT = OFF, PWRT disabled
  8206                           ;	Brown-out Reset Enable bit
  8207                           ;	BOR = OFF, Brown-out Reset disabled
  8208                           ;	Brown-out Reset Voltage bits
  8209                           ;	BORV = 20, VBOR set to 2.0V
  8210  300002                     	org	3145730
  8211  300002  0D                 	db	13
  8212                           
  8213                           ;Config register CONFIG2H @ 0x300003
  8214                           ;	Watchdog Timer Enable bit
  8215                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8216                           ;	Watchdog Timer Postscale Select bits
  8217                           ;	WDTPS = 128, 1:128
  8218  300003                     	org	3145731
  8219  300003  0E                 	db	14
  8220                           
  8221                           ; Padding undefined space
  8222  300004                     	org	3145732
  8223  300004  FF                 	db	255
  8224                           
  8225                           ;Config register CONFIG3H @ 0x300005
  8226                           ;	CCP2 Mux bit
  8227                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8228  300005                     	org	3145733
  8229  300005  00                 	db	0
  8230                           
  8231                           ;Config register CONFIG4L @ 0x300006
  8232                           ;	Stack Full/Underflow Reset Enable bit
  8233                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8234                           ;	Low Voltage ICSP Enable bit
  8235                           ;	LVP = OFF, Low Voltage ICSP disabled
  8236                           ;	Background Debugger Enable bit
  8237                           ;	DEBUG = 0x1, unprogrammed default
  8238  300006                     	org	3145734
  8239  300006  80                 	db	128
  8240                           
  8241                           ; Padding undefined space
  8242  300007                     	org	3145735
  8243  300007  FF                 	db	255
  8244                           
  8245                           ;Config register CONFIG5L @ 0x300008
  8246                           ;	Code Protection bit
  8247                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8248                           ;	Code Protection bit
  8249                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8250                           ;	Code Protection bit
  8251                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8252                           ;	Code Protection bit
  8253                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8254  300008                     	org	3145736
  8255  300008  0F                 	db	15
  8256                           
  8257                           ;Config register CONFIG5H @ 0x300009
  8258                           ;	Boot Block Code Protection bit
  8259                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8260                           ;	Data EEPROM Code Protection bit
  8261                           ;	CPD = OFF, Data EEPROM not code protected
  8262  300009                     	org	3145737
  8263  300009  C0                 	db	192
  8264                           
  8265                           ;Config register CONFIG6L @ 0x30000A
  8266                           ;	Write Protection bit
  8267                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8268                           ;	Write Protection bit
  8269                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8270                           ;	Write Protection bit
  8271                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8272                           ;	Write Protection bit
  8273                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8274  30000A                     	org	3145738
  8275  30000A  0F                 	db	15
  8276                           
  8277                           ;Config register CONFIG6H @ 0x30000B
  8278                           ;	Configuration Register Write Protection bit
  8279                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8280                           ;	Boot Block Write Protection bit
  8281                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8282                           ;	Data EEPROM Write Protection bit
  8283                           ;	WRTD = OFF, Data EEPROM not write protected
  8284  30000B                     	org	3145739
  8285  30000B  E0                 	db	224
  8286                           
  8287                           ;Config register CONFIG7L @ 0x30000C
  8288                           ;	Table Read Protection bit
  8289                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8290                           ;	Table Read Protection bit
  8291                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8292                           ;	Table Read Protection bit
  8293                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8294                           ;	Table Read Protection bit
  8295                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8296  30000C                     	org	3145740
  8297  30000C  0F                 	db	15
  8298                           
  8299                           ;Config register CONFIG7H @ 0x30000D
  8300                           ;	Boot Block Table Read Protection bit
  8301                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8302  30000D                     	org	3145741
  8303  30000D  40                 	db	64
  8304                           tosu	equ	0xFFF
  8305                           tosh	equ	0xFFE
  8306                           tosl	equ	0xFFD
  8307                           stkptr	equ	0xFFC
  8308                           pclatu	equ	0xFFB
  8309                           pclath	equ	0xFFA
  8310                           pcl	equ	0xFF9
  8311                           tblptru	equ	0xFF8
  8312                           tblptrh	equ	0xFF7
  8313                           tblptrl	equ	0xFF6
  8314                           tablat	equ	0xFF5
  8315                           prodh	equ	0xFF4
  8316                           prodl	equ	0xFF3
  8317                           indf0	equ	0xFEF
  8318                           postinc0	equ	0xFEE
  8319                           postdec0	equ	0xFED
  8320                           preinc0	equ	0xFEC
  8321                           plusw0	equ	0xFEB
  8322                           fsr0h	equ	0xFEA
  8323                           fsr0l	equ	0xFE9
  8324                           wreg	equ	0xFE8
  8325                           indf1	equ	0xFE7
  8326                           postinc1	equ	0xFE6
  8327                           postdec1	equ	0xFE5
  8328                           preinc1	equ	0xFE4
  8329                           plusw1	equ	0xFE3
  8330                           fsr1h	equ	0xFE2
  8331                           fsr1l	equ	0xFE1
  8332                           bsr	equ	0xFE0
  8333                           indf2	equ	0xFDF
  8334                           postinc2	equ	0xFDE
  8335                           postdec2	equ	0xFDD
  8336                           preinc2	equ	0xFDC
  8337                           plusw2	equ	0xFDB
  8338                           fsr2h	equ	0xFDA
  8339                           fsr2l	equ	0xFD9
  8340                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    16
    Data        328
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     109
    BANK0           128     17     119
    BANK1           256      0     247
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK1[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10619
                                             12 BANK0      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    6535
                                              7 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3163
                                              0 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                          _resetStep
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2608
                                             20 COMRAM    14     6      8
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetTM2_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetTM0_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepMade
     _moveToPoint
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepCounter
       _stepMade
     _pickObject
       _resetTM2_Temp
       _stepMade
     _releaseObj
       _resetTM2_Temp
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _resetStep
       _resetTM2_Temp
       _stepMade
     _touchObject
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _resetTM0_Temp
     _resetTM2_Temp
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80     11      77       5       93.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1DB      15        0.0%
DATA                 0      0     1DB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Wed Apr 28 14:56:43 2021

                                                  ___fldiv@aexp 0038  
                                                  ___fldiv@bexp 0037  
                                         __end_of_interruptInit 2360  
                                                  ___fldiv@sign 0030  
                                                            l94 23E2  
                                                            l88 24BA  
                                                           l221 2122  
                                                           l205 1DB0  
                                                           l206 1DB4  
                                                           l135 1304  
                                                           l224 2134  
                                                           l240 2066  
                                                           l136 1474  
                                                           l161 0DC0  
                                                           l217 1EC0  
                                                           l162 0AB8  
                                                           l242 2096  
                                                           l402 2522  
                                                           l218 1EC4  
                                                           l155 1494  
                                                           l164 0AF8  
                                                           l229 2154  
                                                           l165 0B00  
                                                           l253 2382  
                                                           l254 238C  
                                                           l247 23B2  
                                                           l248 23BC  
                                                           l169 0DA0  
                                                           l337 14E6  
                                                           l186 0D5E  
                                                           l338 14E0  
                                                           l531 255C  
                                                           l339 14E2  
                                                           l364 10B6  
                                                           l540 256C  
                                                           l525 24AC  
                                                           l613 245E  
                                                           l462 2470  
                                                           l622 243A  
                                                           l390 2574  
                                                           l534 2564  
                                                           l543 2504  
                                                           l551 2426  
                                                           l528 249E  
                                                           l384 2408  
                                                           l616 2490  
                                                           l625 24FA  
                                                           l393 24EE  
                                                           l465 233A  
                                                           l466 2350  
                                                           l570 2256  
                                                           l459 252C  
                                                           l387 250E  
                                                           l467 235C  
                                                           l619 244C  
                                                           l628 2536  
                                                           l396 24E2  
                                                           l548 223A  
                                                           l565 1B82  
                                                           l574 2288  
                                                           l399 2518  
                                                           l595 1730  
                                                           l598 17B6  
                                                           l937 1A66  
                                                           _isr 0008  
                                                   _touchObject 1CA4  
                                                           prod 000FF3  
                                                           wreg 000FE8  
                                                  ___fltol@exp1 0042  
                                                   main@errCode 00F4  
                                                          l1222 0A3E  
                                                          l1302 11C8  
                                                          l1224 0856  
                                                          l1233 08AC  
                                                          l1235 093C  
                                                          l1227 0810  
                                                          l1236 0924  
                                                          l1309 1234  
                                                          l4001 1E34  
                                                          l4011 1E86  
                                                          l4021 1EA2  
                                                          l4013 1E8A  
                                                          l4005 1E54  
                                                          l4101 1AA0  
                                                          l4031 20A0  
                                                          l1295 111C  
                                                          l4023 1EA6  
                                                          l4015 1E8C  
                                                          l4007 1E70  
                                                          l4111 1B0E  
                                                          l4103 1AB6  
                                                          l4121 24A4  
                                                          l4041 20DA  
                                                          l4033 20AC  
                                                          l4025 1EB8  
                                                          l4017 1E8E  
                                                          l4009 1E80  
                                                          l4201 147A  
                                                          l4105 1ACC  
                                                          l1298 12AE  
                                                          l4051 2142  
                                                          l4043 20F2  
                                                          l4035 20B2  
                                                          l4019 1E92  
                                                          l4131 23CE  
                                                          l4211 2326  
                                                          l4203 1482  
                                                          l4107 1AE2  
                                                          l4115 1B24  
                                                          l4125 24B2  
                                                          l4053 214A  
                                                          l4045 20F6  
                                                          l4037 20B8  
                                                          l4029 209C  
                                                          l4061 2018  
                                                          l4221 23F6  
                                                          l4141 23DE  
                                                          l4133 23D2  
                                                          l4213 2338  
                                                          l4301 2500  
                                                          l4205 148A  
                                                          l4109 1AF8  
                                                          l4055 2152  
                                                          l4047 2108  
                                                          l4039 20CE  
                                                          l4071 2068  
                                                          l4063 2026  
                                                          l4311 0DD8  
                                                          l4223 23F8  
                                                          l4143 23E0  
                                                          l4135 23D6  
                                                          l4127 23C2  
                                                          l4215 234E  
                                                          l4303 2562  
                                                          l4207 1492  
                                                          l4151 12D6  
                                                          l4231 240E  
                                                          l4049 213A  
                                                          l4081 2396  
                                                          l4073 206C  
                                                          l4065 202C  
                                                          l4321 0E80  
                                                          l4313 0E12  
                                                          l4225 23FA  
                                                          l4217 23E8  
                                                          l4137 23DA  
                                                          l4129 23CA  
                                                          l4161 132A  
                                                          l4153 12DC  
                                                          l4145 12B6  
                                                          l3601 2270  
                                                          l4241 248C  
                                                          l4233 2422  
                                                          l4083 23B4  
                                                          l4091 2384  
                                                          l3611 064A  
                                                          l3603 0614  
                                                          l4067 2048  
                                                          l4075 2072  
                                                          l4059 1FC6  
                                                          l4331 0F14  
                                                          l4323 0E94  
                                                          l4315 0E22  
                                                          l4307 0DC8  
                                                          l4251 2496  
                                                          l4227 2404  
                                                          l4219 23F0  
                                                          l4139 23DC  
                                                          l4403 255A  
                                                          l4171 1376  
                                                          l4163 1334  
                                                          l4155 12E2  
                                                          l4147 12BC  
                                                          l4411 21E4  
                                                          l4235 2452  
                                                          l4243 248E  
                                                          l4085 23B8  
                                                          l4093 2388  
                                                          l3701 08D6  
                                                          l3621 068C  
                                                          l3613 065E  
                                                          l3605 0620  
                                                          l4077 208E  
                                                          l4069 204A  
                                                          l4333 0F18  
                                                          l4325 0ECE  
                                                          l4317 0E36  
                                                          l4341 0F72  
                                                          l4309 0DD4  
                                                          l4229 2406  
                                                          l4181 13C0  
                                                          l4173 1388  
                                                          l4165 134C  
                                                          l4157 12F8  
                                                          l4149 12C8  
                                                          l4413 2224  
                                                          l4405 21E0  
                                                          l4261 1666  
                                                          l4237 245A  
                                                          l4245 2440  
                                                          l4421 149E  
                                                          l4079 2392  
                                                          l4087 2362  
                                                          l3711 095E  
                                                          l3703 08E8  
                                                          l3631 06C4  
                                                          l3623 0694  
                                                          l3615 066E  
                                                          l3607 0632  
                                                          l4351 0FAA  
                                                          l4343 0F88  
                                                          l4335 0F20  
                                                          l4327 0EDE  
                                                          l4319 0E70  
                                                          l4247 256A  
                                                          l4191 140C  
                                                          l4183 13D4  
                                                          l4175 1392  
                                                          l4167 1350  
                                                          l4159 1318  
                                                          l4415 2226  
                                                          l4095 1A70  
                                                          l4271 16C8  
                                                          l4263 1670  
                                                          l4255 1646  
                                                          l4239 2488  
                                                          l4431 14B2  
                                                          l4423 14A2  
                                                          l4089 2366  
                                                          l3721 09D4  
                                                          l3713 0970  
                                                          l3705 091A  
                                                          l3641 0706  
                                                          l3633 06D8  
                                                          l3625 069A  
                                                          l3617 0672  
                                                          l3609 0634  
                                                          l3801 1176  
                                                          l4361 0FD0  
                                                          l4353 0FB0  
                                                          l4345 0F90  
                                                          l4329 0EF2  
                                                          l4193 141E  
                                                          l4185 13E6  
                                                          l4177 13AA  
                                                          l4169 1362  
                                                          l4097 1A74  
                                                          l4281 175E  
                                                          l4273 16D0  
                                                          l4257 1656  
                                                          l4441 1504  
                                                          l4433 14BE  
                                                          l4425 14A6  
                                                          l4417 1498  
                                                          l3571 2430  
                                                          l3731 0A2E  
                                                          l3723 09F4  
                                                          l3715 099A  
                                                          l3643 0722  
                                                          l3635 06E8  
                                                          l3627 06AC  
                                                          l3619 067A  
                                                          l3811 120E  
                                                          l3803 11AE  
                                                          l4371 1062  
                                                          l4363 1012  
                                                          l4355 0FB8  
                                                          l4347 0FA2  
                                                          l4339 0F2A  
                                                          l4187 13F0  
                                                          l4179 13AE  
                                                          l4195 1438  
                                                          l4099 1A8A  
                                                          l4283 1762  
                                                          l4275 172A  
                                                          l4291 1780  
                                                          l4259 165C  
                                                          l4267 167A  
                                                          l4451 1554  
                                                          l4443 1510  
                                                          l4435 14C6  
                                                          l4427 14AA  
                                                          l4419 1498  
                                                          l3573 2434  
                                                          l3581 24F4  
                                                          l3901 0CE2  
                                                          l3733 0A32  
                                                          l3725 0A10  
                                                          l3709 0952  
                                                          l3717 099E  
                                                          l3661 077E  
                                                          l3645 0732  
                                                          l3653 0754  
                                                          l3637 06EC  
                                                          l3629 06AE  
                                                          l3741 1938  
                                                          l3821 1274  
                                                          l3813 1222  
                                                          l3805 11B2  
                                                          l4373 1074  
                                                          l4197 144E  
                                                          l4189 1408  
                                                          l4621 1796  
                                                          l4285 176A  
                                                          l4277 173A  
                                                          l4269 16B0  
                                                          l4461 15F6  
                                                          l4453 1572  
                                                          l4445 1522  
                                                          l4437 14DA  
                                                          l4429 14AE  
                                                          l3567 2532  
                                                          l3911 0D56  
                                                          l3903 0CF8  
                                                          l3831 0A46  
                                                          l3727 0A16  
                                                          l3719 09BE  
                                                          l3671 07D2  
                                                          l3663 079A  
                                                          l3655 076A  
                                                          l3647 073A  
                                                          l3639 06F4  
                                                          l3751 199A  
                                                          l3743 1952  
                                                          l3823 1288  
                                                          l3815 1248  
                                                          l3807 11BE  
                                                          l3591 251E  
                                                          l3583 250A  
                                                          l4375 107C  
                                                          l4199 1462  
                                                          l4623 1B3A  
                                                          l4287 1774  
                                                          l4279 174A  
                                                          l4471 1628  
                                                          l4463 15FE  
                                                          l4455 157C  
                                                          l4447 1532  
                                                          l4439 14EA  
                                                          l3577 2528  
                                                          l3569 242C  
                                                          l3921 0DA6  
                                                          l3841 0AAC  
                                                          l3833 0A60  
                                                          l3729 0A28  
                                                          l3681 0840  
                                                          l3673 07E8  
                                                          l3665 07AA  
                                                          l3657 076A  
                                                          l3649 0740  
                                                          l3753 19AA  
                                                          l3825 129A  
                                                          l3817 124A  
                                                          l3809 1200  
                                                          l3585 24E8  
                                                          l3593 24DC  
                                                          l4385 10A4  
                                                          l4377 1084  
                                                          l4369 102A  
                                                          l4625 0F4A  
                                                          l4473 162E  
                                                          l4465 1602  
                                                          l4457 15A4  
                                                          l4449 1534  
                                                          l3579 2464  
                                                          l3923 0DAE  
                                                          l3907 0D2A  
                                                          l3915 0D5E  
                                                          l3851 0B0A  
                                                          l3843 0ABC  
                                                          l3835 0A78  
                                                          l3691 088C  
                                                          l3683 0842  
                                                          l3675 07FC  
                                                          l3667 07BA  
                                                          l3763 19DC  
                                                          l3755 19AE  
                                                          l3747 1968  
                                                          l3827 129C  
                                                          l3819 1250  
                                                          l3587 2572  
                                                          l3931 1CA6  
                                                          l4387 10AA  
                                                          l4379 108C  
                                                          l3595 2240  
                                                          l4619 1690  
                                                          l4475 1632  
                                                          l4459 15BC  
                                                          l4467 1606  
                                                          l3925 0DB6  
                                                          l3909 0D40  
                                                          l3861 0B58  
                                                          l3917 0D78  
                                                          l3853 0B18  
                                                          l3845 0AC0  
                                                          l3693 0898  
                                                          l3685 0852  
                                                          l3677 080E  
                                                          l3669 07CA  
                                                          l3781 1A54  
                                                          l3773 1A0C  
                                                          l3765 19E8  
                                                          l3757 19C0  
                                                          l3749 1998  
                                                          l3589 2514  
                                                          l3941 1CCA  
                                                          l3933 1CAA  
                                                          l3597 2248  
                                                          l4477 1636  
                                                          l4469 1620  
                                                          l3927 0DBE  
                                                          l3919 0D8E  
                                                          l3871 0BBE  
                                                          l3863 0B7E  
                                                          l3855 0B1E  
                                                          l3847 0AEC  
                                                          l3839 0A80  
                                                          l3695 08AA  
                                                          l3687 086C  
                                                          l3679 081C  
                                                          l3775 1A1A  
                                                          l3767 19F2  
                                                          l3791 112E  
                                                          l3951 1D20  
                                                          l3943 1CE0  
                                                          l3935 1CB8  
                                                          l3599 226A  
                                                          l3881 0C32  
                                                          l3865 0B88  
                                                          l3873 0BD4  
                                                          l3857 0B36  
                                                          l3849 0AFC  
                                                          l3689 0886  
                                                          l3697 08BE  
                                                          l3777 1A2E  
                                                          l3793 114A  
                                                          l3785 10C0  
                                                          l3961 1D72  
                                                          l3945 1CEC  
                                                          l3937 1CBA  
                                                          l3891 0C8C  
                                                          l3883 0C48  
                                                          l3875 0BEA  
                                                          l3867 0B9E  
                                                          l3859 0B42  
                                                          l3699 08D2  
                                                          l3779 1A44  
                                                          l3787 10D4  
                                                          l3971 1D8E  
                                                          l3963 1D76  
                                                          l3947 1D0A  
                                                          l3939 1CC4  
                                                          l3955 1D40  
                                                          l3893 0C96  
                                                          l3869 0BBA  
                                                          l3797 115E  
                                                          l3789 10E6  
                                                          l3973 1D92  
                                                          l3965 1D78  
                                                          l3957 1D5C  
                                                          l3949 1D0E  
                                                          l3981 1DBA  
                                                          l3895 0CAC  
                                                          l3879 0C1C  
                                                          l3887 0C50  
                                                          l3799 1168  
                                                          l3975 1D96  
                                                          l3967 1D7A  
                                                          l3959 1D6C  
                                                          l3991 1DDE  
                                                          l3983 1DBE  
                                                          l3897 0CC8  
                                                          l3889 0C66  
                                                          l3977 1DA8  
                                                          l3969 1D7E  
                                                          l3993 1DF4  
                                                          l3985 1DCC  
                                                          l3899 0CCC  
                                                          l3995 1E00  
                                                          l3987 1DCE  
                                                          ?_isr 0001  
                                                          l3997 1E1E  
                                                          l3989 1DD8  
                                                          l3999 1E22  
                                                          u3000 19D6  
                                                          u3001 19D0  
                                                          u3010 1A06  
                                                          u3011 1A00  
                                                          u3020 1A2E  
                                                          u3100 1234  
                                                          u3021 1A28  
                                                          u3101 122E  
                                                          _LATA 000F89  
                                                          u3030 1A42  
                                                          u3110 1246  
                                                          _LATB 000F8A  
                                                          u3031 1A3C  
                                                          u3111 1240  
                                                          _LATC 000F8B  
                                                          u3200 0B7C  
                                                          u3120 1286  
                                                          u3040 10D2  
                                                          _LATD 000F8C  
                                                          u3201 0B76  
                                                          u3121 1280  
                                                          u3041 10CC  
                                                          u3210 0B9C  
                                                          u3130 1298  
                                                          u3050 10E4  
                                                          u3211 0B96  
                                                          u3131 1292  
                                                          u3051 10DE  
                                                          u3300 0CC6  
                                                          u3220 0BB8  
                                                          u3140 0A5E  
                                                          u3060 1148  
                                                          u3301 0CC0  
                                                          u3221 0BB2  
                                                          u3141 0A58  
                                                          u3061 1142  
                                                          u3310 0CF6  
                                                          u3230 0BE8  
                                                          u3150 0A78  
                                                          u3070 11A8  
                                                          u3311 0CF0  
                                                          u3231 0BE2  
                                                          u3151 0A72  
                                                          u3071 11A2  
                                                          u3320 0D24  
                                                          u3240 0C16  
                                                          u3160 0AAA  
                                                          u3080 11FA  
                                                          u3400 1D3A  
                                                          u3321 0D1E  
                                                          u3241 0C10  
                                                          u3161 0AA4  
                                                          u3081 11F4  
                                                          u3401 1D34  
                                                          u3330 0D3E  
                                                          u3250 0C30  
                                                          u3170 0AEA  
                                                          u3090 1220  
                                                          u3410 1D5A  
                                                          u3331 0D38  
                                                          u3251 0C2A  
                                                          u3171 0AE4  
                                                          u3091 121A  
                                                          u3411 1D54  
                                                          u3500 20CC  
                                                          u3340 0D54  
                                                          u3260 0C46  
                                                          u3180 0B34  
                                                          u3420 1D6C  
                                                          u3501 20C6  
                                                          u3341 0D4E  
                                                          u3261 0C40  
                                                          u3181 0B2E  
                                                          u3421 1D66  
                                                          u3510 20F0  
                                                          u3350 0D78  
                                                          u3270 0C64  
                                                          u3190 0B56  
                                                          u3430 1DA6  
                                                          u3511 20EA  
                                                          u3351 0D72  
                                                          u3271 0C5E  
                                                          u3191 0B50  
                                                          u3431 1DA0  
                                                          u3520 2122  
                                                          u3360 0D8C  
                                                          u3280 0C8A  
                                                          u2800 0720  
                                                          u3440 1DF2  
                                                          u3600 132A  
                                                          u2720 2268  
                                                          u3521 211C  
                                                          u3361 0D86  
                                                          u3281 0C84  
                                                          u2801 071A  
                                                          u3441 1DEC  
                                                          u3601 1324  
                                                          u2721 2262  
                                                          u3530 2134  
                                                          u3370 0DA0  
                                                          u3290 0CAA  
                                                          u2810 0768  
                                                          u3450 1E1C  
                                                          u3610 134A  
                                                          u2730 2286  
                                                          u3531 212E  
                                                          u3371 0D9A  
                                                          u3291 0CA4  
                                                          u2811 0762  
                                                          u3451 1E16  
                                                          u3611 1344  
                                                          u2731 2280  
                                                          u2900 0918  
                                                          u2820 07E6  
                                                          u2740 0630  
                                                          u3540 2064  
                                                          u3380 1CDE  
                                                          u3460 1E4E  
                                                          u3700 1460  
                                                          u3620 1374  
                                                          u2901 0912  
                                                          u2821 07E0  
                                                          u2741 062A  
                                                          u3541 205E  
                                                          u3381 1CD8  
                                                          u3461 1E48  
                                                          u3701 145A  
                                                          u3621 136E  
                                                          u2910 0936  
                                                          u2830 080C  
                                                          u2750 0648  
                                                          u3550 208C  
                                                          u3390 1D08  
                                                          u3470 1E6E  
                                                          u3710 1474  
                                                          u3630 1388  
                                                          u2911 0930  
                                                          u2831 0806  
                                                          u2751 0642  
                                                          u3551 2086  
                                                          u3391 1D02  
                                                          u3471 1E68  
                                                          u3711 146E  
                                                          u3631 1382  
                                                          u3560 23B0  
                                                          u2920 0950  
                                                          u2840 083E  
                                                          u2760 065C  
                                                          u3480 1E80  
                                                          u3800 109E  
                                                          u3720 2336  
                                                          u3640 13A8  
                                                          u3561 23AA  
                                                          u2921 094A  
                                                          u2841 0838  
                                                          u2761 0656  
                                                          u3481 1E7A  
                                                          u3801 1098  
                                                          u3721 2330  
                                                          u3641 13A2  
                                                          u3570 2380  
                                                          u2930 096E  
                                                          u2850 086A  
                                                          u2770 06AA  
                                                          u3490 1EB6  
                                                          u3730 234C  
                                                          u3650 13D2  
                                                          u3810 2238  
                                                          u3571 237A  
                                                          u2931 0968  
                                                          u2851 0864  
                                                          u2771 06A4  
                                                          u3491 1EB0  
                                                          u3731 2346  
                                                          u3651 13CC  
                                                          u3811 2232  
                                                          u2940 09BC  
                                                          u2860 0884  
                                                          u2780 06C2  
                                                          u3660 13E6  
                                                          u3580 12F6  
                                                          u3740 16C6  
                                                          u3820 14D8  
                                                          u2941 09B6  
                                                          u2861 087E  
                                                          u2781 06BC  
                                                          u3661 13E0  
                                                          u3581 12F0  
                                                          u3741 16C0  
                                                          u3821 14D2  
                                                          u2950 09F2  
                                                          u2870 08A8  
                                                          u2790 06D6  
                                                          u3750 0F86  
                                                          u3670 1406  
                                                          u3590 1316  
                                                          u3830 1502  
                                                          u2951 09EC  
                                                          u2871 08A2  
                                                          u2791 06D0  
                                                          u3751 0F80  
                                                          u3671 1400  
                                                          u3591 1310  
                                                          u3831 14FC  
                                                          u2960 0A26  
                                                          u2880 08D0  
                                                          u3760 0FA2  
                                                          u3680 1438  
                                                          u3840 1552  
                                                          u2961 0A20  
                                                          u2881 08CA  
                                                          u3761 0F9C  
                                                          u3681 1432  
                                                          u3841 154C  
                                                          u2890 08E6  
                                                          u2970 1950  
                                                          u3770 0FCA  
                                                          u3690 144C  
                                                          u3850 1572  
                                                   main@newData 00F5  
                                                          u2891 08E0  
                                                          u2971 194A  
                                                          u3771 0FC4  
                                                          u3691 1446  
                                                          u3851 156C  
                                                          u2980 198C  
                                                          u3780 1024  
                                                          u3860 15BA  
                                                          u3781 101E  
                                                          u3861 15B4  
                                                          u2990 19BE  
                                                          u3790 1072  
                                                          u3870 161E  
                                                          u2991 19B8  
                                                          u3791 106C  
                                                          u3871 1618  
                                                          u2985 1980  
                                                          i2l91 257C  
                                                          i2l85 24C8  
                                                          _TMR0 000FD6  
                                                          _TMR2 000FCC  
                                           __end_ofi2_storeData 1936  
                                                          _main 1498  
                                                          _maxX 0092  
                                                          _maxY 0090  
                                          __end_ofi2_printError 1CA4  
                                                          fsr2h 000FDA  
                                                          indf2 000FDF  
                                                          fsr1l 000FE1  
                                                          fsr2l 000FD9  
                                                          btemp 006E  
                                                          prodh 000FF4  
                                                          prodl 000FF3  
                                                          start 01A4  
                                               ___fldiv@new_exp 0031  
                                                  ___param_bank 000000  
                                               ??_whatsTM0Limit 0001  
                                                         ??_isr 000B  
                                                  ?_executeData 0001  
                                               executeData@data 00EF  
                                                 ___fltol@sign1 0041  
                                                         ?_main 0001  
                                               __end_of___fldiv 0A44  
                                               __end_of___fltol 1A6C  
                                                         i2l405 2554  
                                                         i2l408 254A  
                                                         i2l257 247C  
                                                         i2l258 247E  
                                                         i2l631 2584  
                                                         i2l537 258C  
                                                         i2l570 22A4  
                                                         i2l634 2540  
                                                         i2l484 018C  
                                                         i2l565 1C9E  
                                                         i2l637 24D6  
                                                         i2l574 22D6  
                                                         i2l595 18AA  
                                                         i2l598 1930  
                                          rotateObj@rotSequence 0080  
                                                         _SPBRG 000FAF  
                                                         _TRISA 000F92  
                                                         _TRISB 000F93  
                                                         _TRISC 000F94  
                                                         _TRISD 000F95  
                                                         _TXREG 000FAD  
                                               __end_of_getData 24B0  
                                               i2storeData@data 000A  
                                               __end_of_initADC 240C  
                                                  ?_newSequence 0001  
                                               __end_of_liftArm 2158  
                                               __end_of_readSeq 2568  
                                                  stepMade@temp 0014  
                                                         tablat 000FF5  
                                                i2uartTx@length 0003  
                                               __end_of_stopADC 2578  
                                                         ttemp5 006F  
                                                         ttemp6 0072  
                                                         ttemp7 0076  
                                                         status 000FD8  
                                                         wtemp8 006F  
                                              __end_ofi2_uartTx 22DA  
                                                 ?_increaseStep 0001  
                                               __initialization 2158  
                                        __size_of_initPinMotors 0026  
                                                  __end_of_main 1642  
                                      resetPosition@keepMovingX 0015  
                                      resetPosition@keepMovingY 0016  
                                      resetPosition@keepMovingZ 0017  
                                                        ??_main 00F2  
                                                 __activetblptr 000002  
                                         __end_of_resetTM0_Temp 2530  
                                         __end_of_resetTM2_Temp 2474  
                                                   i2_storeData 17BC  
                                                  ?_setThermRel 0001  
                                                        _ADRESH 000FC4  
                                                        _ADRESL 000FC3  
                                                  ?_moveToPoint 0015  
                                                        i2l2205 2550  
                                                        i2l2215 2582  
                                                        i2l2207 2546  
                                                        i2l2209 258A  
                                                        i2l2217 253C  
                                                        i2l3051 1BA6  
                                                        i2l3061 1C14  
                                                        i2l3053 1BBC  
                                                        i2l3063 1C2A  
                                                        i2l3055 1BD2  
                                                        i2l3047 1B8C  
                                                        i2l3057 1BE8  
                                                        i2l3049 1B90  
                                                        i2l3401 18EE  
                                                        i2l3059 1BFE  
                                                        i2l3067 1C40  
                                                        i2l3405 18FA  
                                                        i2l3501 009E  
                                                        i2l3159 2476  
                                                        i2l3511 00CC  
                                                        i2l3503 00A0  
                                                        i2l1905 24C0  
                                                        i2l3513 00E0  
                                                        i2l3505 00A4  
                                                        i2l3521 0100  
                                                        i2l3371 17D0  
                                                        i2l3531 0168  
                                                        i2l3523 0114  
                                                        i2l3515 00F2  
                                                        i2l3507 00C2  
                                                        i2l1909 257A  
                                                        i2l3373 17D6  
                                                        i2l3381 17F4  
                                                        i2l3525 011C  
                                                        i2l3533 016C  
                                                        i2l3517 00F6  
                                                        i2l3509 00CA  
                                                        i2l2751 22BE  
                                                        i2l3367 24CE  
                                                        i2l3391 18B4  
                                                        i2l3375 17E0  
                                                        i2l3383 182A  
                                                        i2l3535 0180  
                                                        i2l3527 0142  
                                                        i2l3519 00FA  
                                                        i2l2745 228E  
                                                        i2l3393 18C4  
                                                        i2l3385 1842  
                                                        i2l3377 17EA  
                                                        i2l3369 17C0  
                                                        i2l3537 0186  
                                                        i2l3529 014E  
                                                        i2l3481 0030  
                                                        i2l2747 2296  
                                                        i2l3395 18D8  
                                                        i2l3387 184A  
                                                        i2l3483 0032  
                                                        i2l3491 0058  
                                                        i2l2749 22B8  
                                                        i2l3397 18DC  
                                                        i2l3389 18A4  
                                                        i2l3493 006C  
                                                        i2l3485 004E  
                                                        i2l3477 001C  
                                                        i2l4631 1C56  
                                                        i2l3399 18E4  
                                                        i2l3495 006E  
                                                        i2l3487 0050  
                                                        i2l3479 002E  
                                                        i2l3497 0086  
                                                        i2l3489 0054  
                                                        i2l4627 180A  
                                                        i2l3499 008A  
                                                        i2l4629 1910  
                                                        _RCREG1 000FAE  
                                                  ?_setTouchRel 0001  
                                              __end_of_abortAll 2486  
                                              __end_of___xxtofl 12B4  
                                              __end_of_clearTM0 24BE  
                                              _errString_PointZ 0100  
                                                ??_increaseStep 0001  
                                              __end_of_maxFeedX 0611  
                                              __end_of_maxFeedY 0610  
                                                     ??___fldiv 0028  
                                                     ??___fltol 003D  
                                              __end_of_tim0Init 2462  
                                              __end_of_tim1Init 2494  
                                              __end_of_tim2Init 2450  
                                                        clear_0 21BE  
                                                        clear_1 21CA  
                                                     ??_getData 0014  
                                                        _uartTx 223E  
                                                     ??_initADC 0012  
                                                     ??_liftArm 0015  
                                                     ??_readSeq 0012  
                                                  __pdataCOMRAM 0067  
                                         __end_of_resetPosition 1498  
                                                  __mediumconst 0000  
                                                        tblptrh 000FF7  
                                                        tblptrl 000FF6  
                                                        tblptru 000FF8  
                                                  ?_returnTherm 0012  
                                              __end_of_startADC 2512  
                                              __end_of_stepMade 243E  
                                                 _initPinMotors 23C0  
                                                  ?_returnTouch 0012  
                                                     ??_stopADC 0012  
                                         __size_ofi2_printError 011C  
                                              __end_of_writeTM0 24CC  
                                     __size_of_resetNewSequence 000A  
                                                  ___xxtofl@arg 001C  
                                                  ___xxtofl@exp 001B  
                                                  ___xxtofl@val 0012  
                                                    __accesstop 0080  
                                       __end_of__initialization 21D0  
                                                  _dataSequence 00CA  
                                                 ___rparam_used 000001  
                                                    ___fltol@f1 0039  
                                                  ?_stepCounter 0012  
                                                   i2uartTx@ptr 0001  
                                                __pcstackCOMRAM 0001  
                                                  __newSequence 005F  
                                                  __pidataBANK0 22DA  
                                                  __pidataBANK1 1EC8  
                                          __size_of_executeData 02F6  
                                                  i2_printError 1B88  
                                                  ?_touchObject 0001  
                                                _errString_ZEND 015E  
                                                _errString_Feed 0094  
                                                ?_initPinMotors 0001  
                                                     ?i2_uartTx 0001  
                                                    __pbssBANK0 00CA  
                                          __size_of_newSequence 0008  
                                                    _feeder1Pos 060D  
                                                    _feeder2Pos 060B  
                                                    _feeder3Pos 0609  
                                       __size_of_getNewSequence 000E  
                                                    _fatalError 2588  
                                            __size_of_reduceSeq 0008  
                                            __size_of_retPeriod 000E  
                                                _touch_pressure 0607  
                                            __size_of_shiftData 0060  
                                            __size_of_resetStep 000A  
                                                       _ADC_res 0053  
                                                       ?_uartTx 0012  
                                                     ?_abortAll 0001  
                                                     ?___xxtofl 0012  
                                          __end_of_increaseStep 2588  
                                                     ?_clearTM0 0001  
                                                    ??i2_uartTx 0004  
                                            __size_of_rotateObj 00DA  
                                             _errString_Command 00B2  
                                            __size_of_usartInit 001E  
                                        __size_of_interruptInit 003C  
                                          __size_of_setThermRel 000A  
                                            __size_of_storeData 017A  
                                                     ?_tim0Init 0001  
                                                     ?_tim1Init 0001  
                                                     ?_tim2Init 0012  
                                          __size_of_moveToPoint 0382  
                                          storeData@receivedMex 0043  
                                               _newSequenceData 00DE  
                                          __size_of_setTouchRel 000A  
                                                       __Hparam 0000  
                                                       __Lparam 0000  
                                        __end_of_touch_pressure 0609  
                                                       ___fldiv 0612  
                                                     ?_startADC 0001  
                                                     ?_stepMade 0012  
                                                       ___fltol 1936  
                                                  __psmallconst 0600  
                                                       __pcinit 2158  
                                         __end_of_whatsTM0Limit 2580  
                                                       _getData 24A2  
                                                       __ramtop 0600  
                                                     ?_writeTM0 0001  
                                                    _pickObject 2390  
                                                       __ptext0 1498  
                                                       __ptext1 240C  
                                                       __ptext2 243E  
                                                       __ptext3 2486  
                                                       __ptext4 2450  
                                                       __ptext5 1642  
                                                       __ptext6 1A6C  
                                                       __ptext7 223E  
                                                       __ptext8 21DE  
                                                       __ptext9 12B4  
                                               __size_of_uartTx 004E  
                                                     _T0CONbits 000FD5  
                                                       _initADC 23E6  
                                                     _T1CONbits 000FCD  
                                               ??_initPinMotors 0012  
                                                       _liftArm 209A  
                                                     _T2CONbits 000FCA  
                                                    ??_abortAll 0008  
                                                       _readSeq 2560  
                                                  __size_of_isr 019C  
                                                    ??___xxtofl 0016  
                                                  ?i2_storeData 0001  
                                                    ??_clearTM0 0012  
                                                    _motCounter 0067  
                                                       _pwmStep 005C  
                                                       _stopADC 2570  
                                             __end_of_reduceSeq 2560  
                                             __end_of_retPeriod 24DA  
                                                    _releaseObj 2360  
                                          __size_of_returnTherm 000C  
                                          end_of_initialization 21D0  
                                          __size_of_returnTouch 000C  
                                              _resetNewSequence 24FE  
                                              rotateObj@totStep 00E9  
                                             __end_of_shiftData 223E  
                                                       isr@temp 0011  
                                             __end_of_resetStep 253A  
                                                    ??_tim0Init 0012  
                                                 __Lmediumconst 0000  
                                                    ??_tim1Init 0012  
                                                    ??_tim2Init 0014  
                                              storeData@command 005D  
                                              storeData@counter 005E  
                                                    _resetTherm 251C  
                                                    _resetTouch 2512  
                                                       uartTx@i 0015  
                                                   ?_fatalError 0001  
                                                     _RCSTAbits 000FAB  
                                                       postdec1 000FE5  
                                             __end_of_rotateObj 209A  
                                                       postinc0 000FEE  
                                                       postinc1 000FE6  
                                                       postinc2 000FDE  
                                                    ??_startADC 0012  
                                                    ??_stepMade 0014  
                                          __size_of_stepCounter 000C  
                                                 _interruptInit 2324  
                                             __end_of_usartInit 242A  
                                             __end_of_storeData 17BC  
                                    __end_ofrotateObj@stepAngle 0605  
                                                    ??_writeTM0 0001  
                                                     _PORTDbits 000F83  
                                                    _printError 1A6C  
                                                     _PORTEbits 000F84  
                                           i2printError@errCode 0007  
                                                    _toggleStep 253A  
                                                 ___xxtofl@sign 001A  
                                                     _TRISCbits 000F94  
                                                     _TRISDbits 000F95  
                                                     _TRISEbits 000F96  
                                                   ___fldiv@grs 0033  
                                                   ___fldiv@rem 002C  
                                          __size_of_touchObject 0114  
                                                    _stepToggle 005B  
                                                  _completeStep 0062  
                                                    _touchTherm 1DB8  
                                                     _TXSTAbits 000FAC  
                                                _getNewSequence 2494  
                                        __size_of_resetTM0_Temp 000A  
                                        __size_of_resetTM2_Temp 0012  
                                                ?_interruptInit 0001  
                                                 __pidataCOMRAM 2590  
                                         __size_of_increaseStep 0008  
                                                   ?_pickObject 0001  
                                                   __fatalError 0060  
                                                __end_of_uartTx 228C  
                                                 moveToPoint@x1 0015  
                                                 moveToPoint@x2 0019  
                                                 moveToPoint@y1 0017  
                                                 moveToPoint@y2 001B  
                                           start_initialization 2158  
                                                     i2uartTx@i 0004  
                                                   __end_of_isr 01A4  
                                           __size_of_fatalError 0008  
                                                   ?_releaseObj 0001  
                                             __size_ofi2_uartTx 004E  
                                        __end_of_getNewSequence 24A2  
                                               _errString_Fatal 01AF  
                                               _errString_Bound 01D6  
                                                   ?_resetTherm 0001  
                                               _errString_Reset 0187  
                                                   ?_resetTouch 0001  
                                               _errString_Point 0135  
                                                  _increaseStep 2580  
                                        __size_of_resetPosition 01E4  
                                                 ??_executeData 00ED  
                                                   __pdataBANK0 0080  
                                                   __pdataBANK1 0100  
                                                   _dataCounter 0061  
                                                      ??_uartTx 0015  
                                        moveToPoint@keepMovingX 0021  
                                        moveToPoint@keepMovingY 0022  
                                                   ?_printError 0001  
                                                     ___fldiv@a 0024  
                                                     ___fldiv@b 0020  
                                                _therm_pressure 0605  
                                                   ?_toggleStep 0001  
                                                   __pbssCOMRAM 0043  
                                                 _resetTM0_Temp 2526  
                                                 _resetTM2_Temp 2462  
                                                 __pcstackBANK0 00E6  
                                                 ??_newSequence 0012  
                                             __size_of_abortAll 0012  
                                             __size_of___xxtofl 01F8  
                                          __size_ofi2_storeData 017A  
                                             __size_of_clearTM0 000E  
                                               ?_getNewSequence 0012  
                                                   ?_touchTherm 0001  
                                           __size_of_pickObject 0030  
                                            executeData@errCode 00F1  
                                             __size_of_tim0Init 0012  
                                             __size_of_tim1Init 000E  
                                             __size_of_tim2Init 0012  
                                               ??_interruptInit 0012  
                                                     __pintcode 0008  
                                                      ?___fldiv 0020  
                                                      ?___fltol 0039  
                                      __end_of_resetNewSequence 2508  
                                           __size_of_releaseObj 0030  
                                                 storeData@data 001B  
                                                      ?_getData 0012  
                                             __size_of_startADC 000A  
                                             __size_of_stepMade 0014  
                                        __end_of_therm_pressure 0607  
                                                      ?_initADC 0001  
                                                   __smallconst 0600  
                                                      ?_liftArm 0001  
                                                      ?_readSeq 0001  
                                                ?_resetTM0_Temp 0001  
                                             __size_of_writeTM0 000E  
                                                ?_resetTM2_Temp 0001  
                                           __end_of_executeData 10BC  
                                                    shiftData@i 0014  
                                           __size_of_resetTherm 000A  
                                                     _newFeeder 0055  
                                                 _resetPosition 12B4  
                                           __size_of_resetTouch 000A  
                                                 ??_setThermRel 0001  
                                                      ?_stopADC 0001  
                                                 ??_moveToPoint 001D  
                                                 ??_setTouchRel 0001  
                                           __end_of_newSequence 2570  
                                                     _reduceSeq 2558  
                                                      _LATAbits 000F89  
                                                      _LATBbits 000F8A  
                                                     _retPeriod 24CC  
                                                      _LATCbits 000F8B  
                                                      _LATDbits 000F8C  
                                           __size_of_printError 011C  
                                                      _IPR1bits 000F9F  
                                                      _PIE1bits 000F9D  
                                                     _shiftData 21DE  
                                                      i2u260_40 002C  
                                                      i2u260_41 0026  
                                                     _resetStep 2530  
                                                      i2u253_40 1840  
                                                      i2u261_40 004C  
                                                      i2u253_41 183A  
                                                      i2u261_41 0046  
                                                      i2u270_40 0166  
                                                      i2u262_40 006A  
                                                      i2u270_41 0160  
                                                      i2u262_41 0064  
                                                      i2u183_40 22B6  
                                                      i2u271_40 017E  
                                                      i2u263_40 0084  
                                                      i2u183_41 22B0  
                                                      i2u271_41 0178  
                                                      i2u263_41 007E  
                                                      i2u184_40 22D4  
                                                      i2u264_40 009C  
                                                      i2u184_41 22CE  
                                                      i2u264_41 0096  
                                                      i2u265_40 00C0  
                                                      i2u265_41 00BA  
                                                      _PIR1bits 000F9E  
                                                      i2u266_40 00DE  
                                                      i2u266_41 00D8  
                                                      i2u267_40 00F0  
                                                      i2u267_41 00EA  
                                                      i2u268_40 0112  
                                                      i2u268_41 010C  
                                                      i2u269_40 0140  
                                                      i2u269_41 013A  
                                           __size_of_toggleStep 000A  
                                                  ??_fatalError 0001  
                                                     _posVector 004C  
                                                      _RCONbits 000FD0  
                                                     _therm_rel 0064  
                                                     _pwmPeriod 004F  
                                                     _rotateObj 1FC0  
                                                    _ADCON0bits 000FC2  
                                                    _ADCON1bits 000FC1  
                                           __size_of_touchTherm 0110  
                                                     _usartInit 240C  
                                                     _touch_rel 0065  
                                            __end_of_feeder1Pos 060F  
                                            __end_of_feeder2Pos 060D  
                                            __end_of_feeder3Pos 060B  
                                                     _storeData 1642  
                                                ?_resetPosition 0001  
                                         __end_of_initPinMotors 23E6  
                                                 ??_returnTherm 0014  
                                                 ??_returnTouch 0014  
                                                      i2_uartTx 228C  
                                                     copy_data0 216C  
                                                     copy_data1 218C  
                                                     copy_data2 21AC  
                                            __end_of_fatalError 2590  
                                            rotateObj@stepAngle 0601  
                                                    ?_reduceSeq 0001  
                                                    ?_retPeriod 0001  
                                                    rotateObj@i 00EB  
                                        __size_of_whatsTM0Limit 0008  
                                           __end_of_setThermRel 2558  
                                           __end_of_moveToPoint 0DC6  
                                             printError@errCode 0018  
                                                    ?_shiftData 0001  
                                                 ??_stepCounter 0014  
                                                      __Hrparam 0000  
                                                    ?_resetStep 0001  
                                           __end_of_setTouchRel 254E  
                                                      __Lrparam 0000  
                                              __size_of___fldiv 0432  
                                              __size_of___fltol 0136  
                                                   _executeData 0DC6  
                                                  ??_pickObject 0015  
                                                    ?_rotateObj 0001  
                                      moveToPoint@MOT1Direction 001F  
                                               ??_resetTM0_Temp 0012  
                                                 ?i2_printError 0001  
                                               ??_resetTM2_Temp 0012  
                                              __size_of_getData 000E  
                                      moveToPoint@MOT2Direction 0020  
                                                 ??_touchObject 0015  
                                                      _abortAll 2474  
                                                    ?_usartInit 0001  
                                              __size_of_initADC 0026  
                                                      ___xxtofl 10BC  
                                              __size_of_liftArm 00BE  
                                                    ?_storeData 0001  
                                                      _clearTM0 24B0  
                                              __size_of_readSeq 0008  
                                            storeData@mexLength 006D  
                                                      _tm0Count 0063  
                                                      _tm0Error 0059  
                                                      _tm0Limit 0066  
                                                   _newSequence 2568  
                                                      __ptext10 24FE  
                                                      __ptext11 2558  
                                                      __ptext20 24DA  
                                                      __ptext12 2560  
                                                      __ptext21 1CA4  
                                                      __ptext13 2568  
                                                      __ptext30 0612  
                                                      __ptext22 2570  
                                                      __ptext14 2324  
                                                      __ptext31 2360  
                                                      __ptext23 2508  
                                                      __ptext15 23C0  
                                                      __ptext40 24A2  
                                                      __ptext32 2390  
                                                      __ptext24 24E6  
                                                      __ptext16 23E6  
                                                      __ptext41 24B0  
                                                      __ptext33 0A44  
                                                      __ptext25 2512  
                                                      __ptext17 2494  
                                                      __ptext50 2580  
                                                      __ptext34 24F2  
                                                      __ptext26 251C  
                                                      __ptext18 0DC6  
                                                      __ptext51 2588  
                                                      __ptext43 17BC  
                                                      __ptext35 209A  
                                                      __ptext27 1FC0  
                                                      __ptext19 1DB8  
                                                      __ptext52 2474  
                                                      __ptext44 24BE  
                                                      __ptext36 242A  
                                                      __ptext28 10BC  
                                                      __ptext53 1B88  
                                                      __ptext45 2578  
                                                      __ptext37 2462  
                                                      __ptext29 1936  
                                                      __ptext54 228C  
                                                      __ptext46 253A  
                                                      __ptext38 2526  
                                                      __ptext47 2544  
                                                      __ptext39 2530  
                                                      __ptext48 254E  
                                                      __ptext49 24CC  
                                                  ??_releaseObj 0015  
                                              __size_of_stopADC 0008  
                                                      _maxFeedX 0610  
                                                      _maxFeedY 060F  
                                           __end_of_returnTherm 24E6  
                                           __end_of_returnTouch 24F2  
                                                      _tim0Init 2450  
                                                      _tim1Init 2486  
                                                      _tim2Init 243E  
                                                 __size_of_main 01AA  
                                            __end_of_pickObject 23C0  
                                                  ??_resetTherm 0012  
                                                  ??_resetTouch 0012  
                                                     uartTx@ptr 0012  
                                                      _rotAngle 0057  
                                                      int$flags 006E  
                                                      _startADC 2508  
                                                      _stepMade 242A  
                                                      _stepMot1 008C  
                                                      _stepMot2 0088  
                                                      _stepMot3 0084  
                                           __end_of_stepCounter 24FE  
                                             rotateObj@rotAngle 00E8  
                                                ??i2_printError 0005  
                                            __end_of_releaseObj 2390  
                                                      _writeTM0 24BE  
                                                  ??_printError 0016  
                                                 _whatsTM0Limit 2578  
                                               ??_resetPosition 0015  
                                            tim2Init@_pwmPeriod 0012  
                                                    _INTCONbits 000FF2  
                                                  ??_toggleStep 0001  
                                              ??_getNewSequence 0014  
                                            __end_of_resetTherm 2526  
                                            __end_of_resetTouch 251C  
                                                   _setThermRel 254E  
                                                  uartTx@length 0014  
                                                  _single_cycle 0051  
                                                   _moveToPoint 0A44  
                                           __end_of_touchObject 1DB8  
                                                      intlevel2 2598  
                                                  ??_touchTherm 0015  
                                                   _setTouchRel 2544  
                                                   ??_reduceSeq 0012  
                                                   ??_retPeriod 0003  
                                                    _RCSTA1bits 000FAB  
                                            __end_of_printError 1B88  
                                                   ??_shiftData 0012  
                                                   ??_resetStep 0012  
                                            __end_of_toggleStep 2544  
                                             ?_resetNewSequence 0001  
                                                ?_whatsTM0Limit 0001  
                                                   ??_rotateObj 00E6  
                                            ??_resetNewSequence 0012  
                                            __end_of_touchTherm 1EC8  
                                                   ??_usartInit 0012  
                                                 ??i2_storeData 0008  
                                                   ??_storeData 0019  
                                                   _returnTherm 24DA  
                                                   _returnTouch 24E6  
                                                   _stepCounter 24F2  
