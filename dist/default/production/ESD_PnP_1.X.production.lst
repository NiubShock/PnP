

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Apr 27 16:10:47 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    74                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    75  0000                     
    76                           ; Version 2.20
    77                           ; Generated 12/02/2020 GMT
    78                           ; 
    79                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC18F452 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     
   111                           	psect	idataCOMRAM
   112  002550                     __pidataCOMRAM:
   113                           	callstack 0
   114                           
   115                           ;initializer for _motCounter
   116  002550  00                 	db	0
   117  002551  01                 	db	1
   118  002552  00                 	db	0
   119  002553  01                 	db	1
   120  002554  00                 	db	0
   121  002555  01                 	db	1
   122                           
   123                           ;initializer for storeData@mexLength
   124  002556  05                 	db	5
   125                           
   126                           	psect	idataBANK0
   127  0022BC                     __pidataBANK0:
   128                           	callstack 0
   129                           
   130                           ;initializer for rotateObj@rotSequence
   131  0022BC  24                 	db	36
   132  0022BD  0C                 	db	12
   133  0022BE  18                 	db	24
   134  0022BF  30                 	db	48
   135                           
   136                           ;initializer for _stepMot3
   137  0022C0  09                 	db	9
   138  0022C1  03                 	db	3
   139  0022C2  06                 	db	6
   140  0022C3  0C                 	db	12
   141                           
   142                           ;initializer for _stepMot2
   143  0022C4  11                 	db	17
   144  0022C5  05                 	db	5
   145  0022C6  0C                 	db	12
   146  0022C7  18                 	db	24
   147                           
   148                           ;initializer for _stepMot1
   149  0022C8  22                 	db	34
   150  0022C9  06                 	db	6
   151  0022CA  0C                 	db	12
   152  0022CB  28                 	db	40
   153                           
   154                           ;initializer for _maxY
   155  0022CC  00C9               	dw	201
   156                           
   157                           ;initializer for _maxX
   158  0022CE  00C9               	dw	201
   159                           
   160                           ;initializer for _errString_Feed
   161  0022D0  45                 	db	69
   162  0022D1  72                 	db	114
   163  0022D2  72                 	db	114
   164  0022D3  6F                 	db	111
   165  0022D4  72                 	db	114
   166  0022D5  2C                 	db	44
   167  0022D6  20                 	db	32
   168  0022D7  66                 	db	102
   169  0022D8  65                 	db	101
   170  0022D9  65                 	db	101
   171  0022DA  64                 	db	100
   172  0022DB  20                 	db	32
   173  0022DC  6C                 	db	108
   174  0022DD  69                 	db	105
   175  0022DE  6E                 	db	110
   176  0022DF  65                 	db	101
   177  0022E0  20                 	db	32
   178  0022E1  6E                 	db	110
   179  0022E2  6F                 	db	111
   180  0022E3  74                 	db	116
   181  0022E4  20                 	db	32
   182  0022E5  64                 	db	100
   183  0022E6  65                 	db	101
   184  0022E7  66                 	db	102
   185  0022E8  69                 	db	105
   186  0022E9  6E                 	db	110
   187  0022EA  65                 	db	101
   188  0022EB  64                 	db	100
   189  0022EC  0A                 	db	10
   190  0022ED  00                 	db	0
   191                           
   192                           ;initializer for _errString_Command
   193  0022EE  43                 	db	67
   194  0022EF  6F                 	db	111
   195  0022F0  6D                 	db	109
   196  0022F1  6D                 	db	109
   197  0022F2  61                 	db	97
   198  0022F3  6E                 	db	110
   199  0022F4  64                 	db	100
   200  0022F5  20                 	db	32
   201  0022F6  6E                 	db	110
   202  0022F7  6F                 	db	111
   203  0022F8  74                 	db	116
   204  0022F9  20                 	db	32
   205  0022FA  72                 	db	114
   206  0022FB  65                 	db	101
   207  0022FC  63                 	db	99
   208  0022FD  6F                 	db	111
   209  0022FE  67                 	db	103
   210  0022FF  6E                 	db	110
   211  002300  69                 	db	105
   212  002301  7A                 	db	122
   213  002302  65                 	db	101
   214  002303  64                 	db	100
   215  002304  0A                 	db	10
   216  002305  00                 	db	0
   217                           
   218                           	psect	idataBANK1
   219  001EB2                     __pidataBANK1:
   220                           	callstack 0
   221                           
   222                           ;initializer for _errString_PointZ
   223  001EB2  45                 	db	69
   224  001EB3  72                 	db	114
   225  001EB4  72                 	db	114
   226  001EB5  6F                 	db	111
   227  001EB6  72                 	db	114
   228  001EB7  2C                 	db	44
   229  001EB8  20                 	db	32
   230  001EB9  74                 	db	116
   231  001EBA  69                 	db	105
   232  001EBB  6D                 	db	109
   233  001EBC  65                 	db	101
   234  001EBD  20                 	db	32
   235  001EBE  65                 	db	101
   236  001EBF  78                 	db	120
   237  001EC0  63                 	db	99
   238  001EC1  65                 	db	101
   239  001EC2  65                 	db	101
   240  001EC3  64                 	db	100
   241  001EC4  65                 	db	101
   242  001EC5  64                 	db	100
   243  001EC6  20                 	db	32
   244  001EC7  74                 	db	116
   245  001EC8  6F                 	db	111
   246  001EC9  20                 	db	32
   247  001ECA  72                 	db	114
   248  001ECB  65                 	db	101
   249  001ECC  61                 	db	97
   250  001ECD  63                 	db	99
   251  001ECE  68                 	db	104
   252  001ECF  20                 	db	32
   253  001ED0  74                 	db	116
   254  001ED1  68                 	db	104
   255  001ED2  65                 	db	101
   256  001ED3  20                 	db	32
   257  001ED4  65                 	db	101
   258  001ED5  6E                 	db	110
   259  001ED6  64                 	db	100
   260  001ED7  20                 	db	32
   261  001ED8  6F                 	db	111
   262  001ED9  66                 	db	102
   263  001EDA  20                 	db	32
   264  001EDB  74                 	db	116
   265  001EDC  68                 	db	104
   266  001EDD  65                 	db	101
   267  001EDE  20                 	db	32
   268  001EDF  5A                 	db	90
   269  001EE0  20                 	db	32
   270  001EE1  41                 	db	65
   271  001EE2  78                 	db	120
   272  001EE3  69                 	db	105
   273  001EE4  73                 	db	115
   274  001EE5  0A                 	db	10
   275  001EE6  00                 	db	0
   276                           
   277                           ;initializer for _errString_Point
   278  001EE7  45                 	db	69
   279  001EE8  72                 	db	114
   280  001EE9  72                 	db	114
   281  001EEA  6F                 	db	111
   282  001EEB  72                 	db	114
   283  001EEC  2C                 	db	44
   284  001EED  20                 	db	32
   285  001EEE  74                 	db	116
   286  001EEF  69                 	db	105
   287  001EF0  6D                 	db	109
   288  001EF1  65                 	db	101
   289  001EF2  20                 	db	32
   290  001EF3  65                 	db	101
   291  001EF4  78                 	db	120
   292  001EF5  63                 	db	99
   293  001EF6  65                 	db	101
   294  001EF7  65                 	db	101
   295  001EF8  64                 	db	100
   296  001EF9  65                 	db	101
   297  001EFA  64                 	db	100
   298  001EFB  20                 	db	32
   299  001EFC  74                 	db	116
   300  001EFD  6F                 	db	111
   301  001EFE  20                 	db	32
   302  001EFF  72                 	db	114
   303  001F00  65                 	db	101
   304  001F01  61                 	db	97
   305  001F02  63                 	db	99
   306  001F03  68                 	db	104
   307  001F04  20                 	db	32
   308  001F05  74                 	db	116
   309  001F06  68                 	db	104
   310  001F07  65                 	db	101
   311  001F08  20                 	db	32
   312  001F09  70                 	db	112
   313  001F0A  6F                 	db	111
   314  001F0B  69                 	db	105
   315  001F0C  6E                 	db	110
   316  001F0D  74                 	db	116
   317  001F0E  0A                 	db	10
   318  001F0F  00                 	db	0
   319                           
   320                           ;initializer for _errString_ZEND
   321  001F10  45                 	db	69
   322  001F11  72                 	db	114
   323  001F12  72                 	db	114
   324  001F13  6F                 	db	111
   325  001F14  72                 	db	114
   326  001F15  2C                 	db	44
   327  001F16  20                 	db	32
   328  001F17  6E                 	db	110
   329  001F18  6F                 	db	111
   330  001F19  20                 	db	32
   331  001F1A  6F                 	db	111
   332  001F1B  62                 	db	98
   333  001F1C  6A                 	db	106
   334  001F1D  65                 	db	101
   335  001F1E  63                 	db	99
   336  001F1F  74                 	db	116
   337  001F20  20                 	db	32
   338  001F21  72                 	db	114
   339  001F22  65                 	db	101
   340  001F23  6C                 	db	108
   341  001F24  65                 	db	101
   342  001F25  76                 	db	118
   343  001F26  61                 	db	97
   344  001F27  74                 	db	116
   345  001F28  65                 	db	101
   346  001F29  64                 	db	100
   347  001F2A  20                 	db	32
   348  001F2B  61                 	db	97
   349  001F2C  6C                 	db	108
   350  001F2D  6F                 	db	111
   351  001F2E  6E                 	db	110
   352  001F2F  67                 	db	103
   353  001F30  20                 	db	32
   354  001F31  5A                 	db	90
   355  001F32  20                 	db	32
   356  001F33  41                 	db	65
   357  001F34  78                 	db	120
   358  001F35  69                 	db	105
   359  001F36  73                 	db	115
   360  001F37  0A                 	db	10
   361  001F38  00                 	db	0
   362                           
   363                           ;initializer for _errString_Reset
   364  001F39  45                 	db	69
   365  001F3A  72                 	db	114
   366  001F3B  72                 	db	114
   367  001F3C  6F                 	db	111
   368  001F3D  72                 	db	114
   369  001F3E  2C                 	db	44
   370  001F3F  20                 	db	32
   371  001F40  74                 	db	116
   372  001F41  69                 	db	105
   373  001F42  6D                 	db	109
   374  001F43  65                 	db	101
   375  001F44  20                 	db	32
   376  001F45  65                 	db	101
   377  001F46  78                 	db	120
   378  001F47  63                 	db	99
   379  001F48  65                 	db	101
   380  001F49  65                 	db	101
   381  001F4A  64                 	db	100
   382  001F4B  65                 	db	101
   383  001F4C  64                 	db	100
   384  001F4D  20                 	db	32
   385  001F4E  74                 	db	116
   386  001F4F  6F                 	db	111
   387  001F50  20                 	db	32
   388  001F51  72                 	db	114
   389  001F52  65                 	db	101
   390  001F53  73                 	db	115
   391  001F54  65                 	db	101
   392  001F55  74                 	db	116
   393  001F56  20                 	db	32
   394  001F57  70                 	db	112
   395  001F58  6F                 	db	111
   396  001F59  73                 	db	115
   397  001F5A  69                 	db	105
   398  001F5B  74                 	db	116
   399  001F5C  69                 	db	105
   400  001F5D  6F                 	db	111
   401  001F5E  6E                 	db	110
   402  001F5F  0A                 	db	10
   403  001F60  00                 	db	0
   404                           
   405                           ;initializer for _errString_Fatal
   406  001F61  46                 	db	70
   407  001F62  61                 	db	97
   408  001F63  74                 	db	116
   409  001F64  61                 	db	97
   410  001F65  6C                 	db	108
   411  001F66  20                 	db	32
   412  001F67  45                 	db	69
   413  001F68  72                 	db	114
   414  001F69  72                 	db	114
   415  001F6A  6F                 	db	111
   416  001F6B  72                 	db	114
   417  001F6C  2C                 	db	44
   418  001F6D  20                 	db	32
   419  001F6E  70                 	db	112
   420  001F6F  6C                 	db	108
   421  001F70  65                 	db	101
   422  001F71  61                 	db	97
   423  001F72  73                 	db	115
   424  001F73  65                 	db	101
   425  001F74  20                 	db	32
   426  001F75  72                 	db	114
   427  001F76  65                 	db	101
   428  001F77  73                 	db	115
   429  001F78  65                 	db	101
   430  001F79  74                 	db	116
   431  001F7A  20                 	db	32
   432  001F7B  74                 	db	116
   433  001F7C  68                 	db	104
   434  001F7D  65                 	db	101
   435  001F7E  20                 	db	32
   436  001F7F  64                 	db	100
   437  001F80  65                 	db	101
   438  001F81  76                 	db	118
   439  001F82  69                 	db	105
   440  001F83  63                 	db	99
   441  001F84  65                 	db	101
   442  001F85  21                 	db	33
   443  001F86  0A                 	db	10
   444  001F87  00                 	db	0
   445                           
   446                           ;initializer for _errString_Bound
   447  001F88  45                 	db	69
   448  001F89  72                 	db	114
   449  001F8A  72                 	db	114
   450  001F8B  6F                 	db	111
   451  001F8C  72                 	db	114
   452  001F8D  2C                 	db	44
   453  001F8E  20                 	db	32
   454  001F8F  70                 	db	112
   455  001F90  6F                 	db	111
   456  001F91  69                 	db	105
   457  001F92  6E                 	db	110
   458  001F93  74                 	db	116
   459  001F94  20                 	db	32
   460  001F95  6F                 	db	111
   461  001F96  75                 	db	117
   462  001F97  74                 	db	116
   463  001F98  73                 	db	115
   464  001F99  69                 	db	105
   465  001F9A  64                 	db	100
   466  001F9B  65                 	db	101
   467  001F9C  20                 	db	32
   468  001F9D  62                 	db	98
   469  001F9E  6F                 	db	111
   470  001F9F  75                 	db	117
   471  001FA0  6E                 	db	110
   472  001FA1  64                 	db	100
   473  001FA2  61                 	db	97
   474  001FA3  72                 	db	114
   475  001FA4  69                 	db	105
   476  001FA5  65                 	db	101
   477  001FA6  73                 	db	115
   478  001FA7  0A                 	db	10
   479  001FA8  00                 	db	0
   480                           
   481                           	psect	smallconst
   482  000600                     __psmallconst:
   483                           	callstack 0
   484  000600  00                 	db	0
   485  000601  FFAC               	dw	65452
   486  000603  3DB3               	dw	15795
   487  000605                     __end_ofrotateObj@stepAngle:
   488                           	callstack 0
   489  000605  0400               	dw	1024
   490  000607                     __end_of_therm_pressure:
   491                           	callstack 0
   492  000607  0200               	dw	512
   493  000609                     __end_of_touch_pressure:
   494                           	callstack 0
   495  000609                     _feeder3Pos:
   496                           	callstack 0
   497  000609  1E                 	db	30
   498  00060A  96                 	db	150
   499  00060B                     __end_of_feeder3Pos:
   500                           	callstack 0
   501  00060B                     _feeder2Pos:
   502                           	callstack 0
   503  00060B  1E                 	db	30
   504  00060C  64                 	db	100
   505  00060D                     __end_of_feeder2Pos:
   506                           	callstack 0
   507  00060D                     _feeder1Pos:
   508                           	callstack 0
   509  00060D  1E                 	db	30
   510  00060E  32                 	db	50
   511  00060F                     __end_of_feeder1Pos:
   512                           	callstack 0
   513  00060F  C8                 	db	200
   514  000610                     __end_of_maxFeedY:
   515                           	callstack 0
   516  000610  3C                 	db	60
   517  000611                     __end_of_maxFeedX:
   518                           	callstack 0
   519  0000                     _TMR0	set	4054
   520  0000                     _T1CONbits	set	4045
   521  0000                     _TXREG	set	4013
   522  0000                     _SPBRG	set	4015
   523  0000                     _TXSTAbits	set	4012
   524  0000                     _TRISCbits	set	3988
   525  0000                     _RCREG1	set	4014
   526  0000                     _ADRESH	set	4036
   527  0000                     _ADRESL	set	4035
   528  0000                     _PIR1bits	set	3998
   529  0000                     _RCONbits	set	4048
   530  0000                     _INTCONbits	set	4082
   531  0000                     _IPR1bits	set	3999
   532  0000                     _PIE1bits	set	3997
   533  0000                     _ADCON0bits	set	4034
   534  0000                     _RCSTAbits	set	4011
   535  0000                     _RCSTA1bits	set	4011
   536  0000                     _LATD	set	3980
   537  0000                     _PORTDbits	set	3971
   538  0000                     _TMR2	set	4044
   539  0000                     _LATC	set	3979
   540  0000                     _LATB	set	3978
   541  0000                     _LATA	set	3977
   542  0000                     _PORTEbits	set	3972
   543  0000                     _T0CONbits	set	4053
   544  0000                     _T2CONbits	set	4042
   545  0000                     _LATDbits	set	3980
   546  0000                     _LATCbits	set	3979
   547  0000                     _LATBbits	set	3978
   548  0000                     _LATAbits	set	3977
   549  0000                     _TRISDbits	set	3989
   550  0000                     _TRISEbits	set	3990
   551  0000                     _TRISD	set	3989
   552  0000                     _TRISC	set	3988
   553  0000                     _TRISB	set	3987
   554  0000                     _TRISA	set	3986
   555  0000                     _ADCON1bits	set	4033
   556  000611  00                 	db	0	; dummy byte at the end
   557  0000                     
   558                           ; #config settings
   559                           
   560                           	psect	cinit
   561  00213A                     __pcinit:
   562                           	callstack 0
   563  00213A                     start_initialization:
   564                           	callstack 0
   565  00213A                     __initialization:
   566                           	callstack 0
   567                           
   568                           ; Initialize objects allocated to BANK1 (247 bytes)
   569                           ; load TBLPTR registers with __pidataBANK1
   570  00213A  0EB2               	movlw	low __pidataBANK1
   571  00213C  6EF6               	movwf	tblptrl,c
   572  00213E  0E1E               	movlw	high __pidataBANK1
   573  002140  6EF7               	movwf	tblptrh,c
   574  002142  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   575  002144  6EF8               	movwf	tblptru,c
   576  002146  EE01  F000         	lfsr	0,__pdataBANK1
   577  00214A  EE10 F0F7          	lfsr	1,247
   578  00214E                     copy_data0:
   579  00214E  0009               	tblrd		*+
   580  002150  CFF5 FFEE          	movff	tablat,postinc0
   581  002154  50E5               	movf	postdec1,w,c
   582  002156  50E1               	movf	fsr1l,w,c
   583  002158  E1FA               	bnz	copy_data0
   584                           
   585                           ; Initialize objects allocated to BANK0 (74 bytes)
   586                           ; load TBLPTR registers with __pidataBANK0
   587  00215A  0EBC               	movlw	low __pidataBANK0
   588  00215C  6EF6               	movwf	tblptrl,c
   589  00215E  0E22               	movlw	high __pidataBANK0
   590  002160  6EF7               	movwf	tblptrh,c
   591  002162  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   592  002164  6EF8               	movwf	tblptru,c
   593  002166  EE00  F080         	lfsr	0,__pdataBANK0
   594  00216A  EE10 F04A          	lfsr	1,74
   595  00216E                     copy_data1:
   596  00216E  0009               	tblrd		*+
   597  002170  CFF5 FFEE          	movff	tablat,postinc0
   598  002174  50E5               	movf	postdec1,w,c
   599  002176  50E1               	movf	fsr1l,w,c
   600  002178  E1FA               	bnz	copy_data1
   601                           
   602                           ; Initialize objects allocated to COMRAM (7 bytes)
   603                           ; load TBLPTR registers with __pidataCOMRAM
   604  00217A  0E50               	movlw	low __pidataCOMRAM
   605  00217C  6EF6               	movwf	tblptrl,c
   606  00217E  0E25               	movlw	high __pidataCOMRAM
   607  002180  6EF7               	movwf	tblptrh,c
   608  002182  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   609  002184  6EF8               	movwf	tblptru,c
   610  002186  EE00  F067         	lfsr	0,__pdataCOMRAM
   611  00218A  EE10 F007          	lfsr	1,7
   612  00218E                     copy_data2:
   613  00218E  0009               	tblrd		*+
   614  002190  CFF5 FFEE          	movff	tablat,postinc0
   615  002194  50E5               	movf	postdec1,w,c
   616  002196  50E1               	movf	fsr1l,w,c
   617  002198  E1FA               	bnz	copy_data2
   618                           
   619                           ; Clear objects allocated to BANK0 (28 bytes)
   620  00219A  EE00  F0CA         	lfsr	0,__pbssBANK0
   621  00219E  0E1C               	movlw	28
   622  0021A0                     clear_0:
   623  0021A0  6AEE               	clrf	postinc0,c
   624  0021A2  06E8               	decf	wreg,f,c
   625  0021A4  E1FD               	bnz	clear_0
   626                           
   627                           ; Clear objects allocated to COMRAM (36 bytes)
   628  0021A6  EE00  F043         	lfsr	0,__pbssCOMRAM
   629  0021AA  0E24               	movlw	36
   630  0021AC                     clear_1:
   631  0021AC  6AEE               	clrf	postinc0,c
   632  0021AE  06E8               	decf	wreg,f,c
   633  0021B0  E1FD               	bnz	clear_1
   634  0021B2                     end_of_initialization:
   635                           	callstack 0
   636  0021B2                     __end_of__initialization:
   637                           	callstack 0
   638  0021B2  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   639  0021B4  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   640  0021B6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   641  0021B8  6EF8               	movwf	tblptru,c
   642  0021BA  0100               	movlb	0
   643  0021BC  EF49  F00A         	goto	_main	;jump to C main() function
   644                           
   645                           	psect	bssCOMRAM
   646  000043                     __pbssCOMRAM:
   647                           	callstack 0
   648  000043                     storeData@receivedMex:
   649                           	callstack 0
   650  000043                     	ds	9
   651  00004C                     _posVector:
   652                           	callstack 0
   653  00004C                     	ds	3
   654  00004F                     _pwmPeriod:
   655                           	callstack 0
   656  00004F                     	ds	2
   657  000051                     isr@single_cycle:
   658                           	callstack 0
   659  000051                     	ds	2
   660  000053                     _ADC_res:
   661                           	callstack 0
   662  000053                     	ds	2
   663  000055                     _newFeeder:
   664                           	callstack 0
   665  000055                     	ds	2
   666  000057                     _rotAngle:
   667                           	callstack 0
   668  000057                     	ds	2
   669  000059                     _tm0Error:
   670                           	callstack 0
   671  000059                     	ds	2
   672  00005B                     _stepToggle:
   673                           	callstack 0
   674  00005B                     	ds	1
   675  00005C                     _pwmStep:
   676                           	callstack 0
   677  00005C                     	ds	1
   678  00005D                     	ds	1
   679  00005E                     storeData@counter:
   680                           	callstack 0
   681  00005E                     	ds	1
   682  00005F                     __newSequence:
   683                           	callstack 0
   684  00005F                     	ds	1
   685  000060                     __fatalError:
   686                           	callstack 0
   687  000060                     	ds	1
   688  000061                     _dataCounter:
   689                           	callstack 0
   690  000061                     	ds	1
   691  000062                     isr@completeStep:
   692                           	callstack 0
   693  000062                     	ds	1
   694  000063                     isr@tm0Count:
   695                           	callstack 0
   696  000063                     	ds	1
   697  000064                     _therm_rel:
   698                           	callstack 0
   699  000064                     	ds	1
   700  000065                     _touch_rel:
   701                           	callstack 0
   702  000065                     	ds	1
   703  000066                     _tm0Limit:
   704                           	callstack 0
   705  000066                     	ds	1
   706                           
   707                           	psect	dataCOMRAM
   708  000067                     __pdataCOMRAM:
   709                           	callstack 0
   710  000067                     _motCounter:
   711                           	callstack 0
   712  000067                     	ds	6
   713  00006D                     storeData@mexLength:
   714                           	callstack 0
   715  00006D                     	ds	1
   716                           
   717                           	psect	bssBANK0
   718  0000CA                     __pbssBANK0:
   719                           	callstack 0
   720  0000CA                     _dataSequence:
   721                           	callstack 0
   722  0000CA                     	ds	20
   723  0000DE                     _newSequenceData:
   724                           	callstack 0
   725  0000DE                     	ds	8
   726                           
   727                           	psect	dataBANK0
   728  000080                     __pdataBANK0:
   729                           	callstack 0
   730  000080                     rotateObj@rotSequence:
   731                           	callstack 0
   732  000080                     	ds	4
   733  000084                     _stepMot3:
   734                           	callstack 0
   735  000084                     	ds	4
   736  000088                     _stepMot2:
   737                           	callstack 0
   738  000088                     	ds	4
   739  00008C                     _stepMot1:
   740                           	callstack 0
   741  00008C                     	ds	4
   742  000090                     	ds	2
   743  000092                     	ds	2
   744  000094                     _errString_Feed:
   745                           	callstack 0
   746  000094                     	ds	30
   747  0000B2                     _errString_Command:
   748                           	callstack 0
   749  0000B2                     	ds	24
   750                           
   751                           	psect	dataBANK1
   752  000100                     __pdataBANK1:
   753                           	callstack 0
   754  000100                     _errString_PointZ:
   755                           	callstack 0
   756  000100                     	ds	53
   757  000135                     _errString_Point:
   758                           	callstack 0
   759  000135                     	ds	41
   760  00015E                     _errString_ZEND:
   761                           	callstack 0
   762  00015E                     	ds	41
   763  000187                     _errString_Reset:
   764                           	callstack 0
   765  000187                     	ds	40
   766  0001AF                     _errString_Fatal:
   767                           	callstack 0
   768  0001AF                     	ds	39
   769  0001D6                     _errString_Bound:
   770                           	callstack 0
   771  0001D6                     	ds	33
   772                           
   773                           	psect	cstackBANK0
   774  0000E6                     __pcstackBANK0:
   775                           	callstack 0
   776  0000E6                     ??_rotateObj:
   777                           
   778                           ; 1 bytes @ 0x0
   779  0000E6                     	ds	2
   780  0000E8                     rotateObj@rotAngle:
   781                           	callstack 0
   782                           
   783                           ; 1 bytes @ 0x2
   784  0000E8                     	ds	1
   785  0000E9                     rotateObj@totStep:
   786                           	callstack 0
   787                           
   788                           ; 2 bytes @ 0x3
   789  0000E9                     	ds	2
   790  0000EB                     rotateObj@i:
   791                           	callstack 0
   792                           
   793                           ; 2 bytes @ 0x5
   794  0000EB                     	ds	2
   795  0000ED                     ??_executeData:
   796                           
   797                           ; 1 bytes @ 0x7
   798  0000ED                     	ds	2
   799  0000EF                     executeData@data:
   800                           	callstack 0
   801                           
   802                           ; 2 bytes @ 0x9
   803  0000EF                     	ds	2
   804  0000F1                     executeData@errCode:
   805                           	callstack 0
   806                           
   807                           ; 1 bytes @ 0xB
   808  0000F1                     	ds	1
   809  0000F2                     ??_main:
   810                           
   811                           ; 1 bytes @ 0xC
   812  0000F2                     	ds	2
   813  0000F4                     main@errCode:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0xE
   817  0000F4                     	ds	1
   818  0000F5                     main@newData:
   819                           	callstack 0
   820                           
   821                           ; 2 bytes @ 0xF
   822  0000F5                     	ds	2
   823                           
   824                           	psect	cstackCOMRAM
   825  000001                     __pcstackCOMRAM:
   826                           	callstack 0
   827  000001                     ?_retPeriod:
   828                           	callstack 0
   829  000001                     i2uartTx@ptr:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x0
   833  000001                     	ds	2
   834  000003                     i2uartTx@length:
   835                           	callstack 0
   836                           
   837                           ; 1 bytes @ 0x2
   838  000003                     	ds	1
   839  000004                     i2uartTx@i:
   840                           	callstack 0
   841                           
   842                           ; 1 bytes @ 0x3
   843  000004                     	ds	1
   844  000005                     ??i2_printError:
   845                           
   846                           ; 1 bytes @ 0x4
   847  000005                     	ds	2
   848  000007                     i2printError@errCode:
   849                           	callstack 0
   850                           
   851                           ; 1 bytes @ 0x6
   852  000007                     	ds	1
   853  000008                     ??i2_storeData:
   854                           
   855                           ; 1 bytes @ 0x7
   856  000008                     	ds	2
   857  00000A                     i2storeData@data:
   858                           	callstack 0
   859                           
   860                           ; 1 bytes @ 0x9
   861  00000A                     	ds	1
   862  00000B                     ??_isr:
   863                           
   864                           ; 1 bytes @ 0xA
   865  00000B                     	ds	6
   866  000011                     isr@temp:
   867                           	callstack 0
   868                           
   869                           ; 1 bytes @ 0x10
   870  000011                     	ds	1
   871  000012                     ??_shiftData:
   872  000012                     ?_stepMade:
   873                           	callstack 0
   874  000012                     ?_stepCounter:
   875                           	callstack 0
   876  000012                     ?_returnTouch:
   877                           	callstack 0
   878  000012                     ?_returnTherm:
   879                           	callstack 0
   880  000012                     ?_getNewSequence:
   881                           	callstack 0
   882  000012                     ?_getData:
   883                           	callstack 0
   884  000012                     ?___xxtofl:
   885                           	callstack 0
   886  000012                     uartTx@ptr:
   887                           	callstack 0
   888  000012                     tim2Init@_pwmPeriod:
   889                           	callstack 0
   890  000012                     ___xxtofl@val:
   891                           	callstack 0
   892                           
   893                           ; 4 bytes @ 0x11
   894  000012                     	ds	2
   895  000014                     shiftData@i:
   896                           	callstack 0
   897  000014                     uartTx@length:
   898                           	callstack 0
   899  000014                     stepMade@temp:
   900                           	callstack 0
   901                           
   902                           ; 1 bytes @ 0x13
   903  000014                     	ds	1
   904  000015                     resetPosition@keepMovingX:
   905                           	callstack 0
   906  000015                     uartTx@i:
   907                           	callstack 0
   908  000015                     moveToPoint@x1:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x14
   912  000015                     	ds	1
   913  000016                     ??_printError:
   914  000016                     ??___xxtofl:
   915  000016                     resetPosition@keepMovingY:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x15
   919  000016                     	ds	1
   920  000017                     resetPosition@keepMovingZ:
   921                           	callstack 0
   922  000017                     moveToPoint@y1:
   923                           	callstack 0
   924                           
   925                           ; 2 bytes @ 0x16
   926  000017                     	ds	1
   927  000018                     printError@errCode:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x17
   931  000018                     	ds	1
   932  000019                     ??_storeData:
   933  000019                     moveToPoint@x2:
   934                           	callstack 0
   935                           
   936                           ; 2 bytes @ 0x18
   937  000019                     	ds	1
   938  00001A                     ___xxtofl@sign:
   939                           	callstack 0
   940                           
   941                           ; 1 bytes @ 0x19
   942  00001A                     	ds	1
   943  00001B                     storeData@data:
   944                           	callstack 0
   945  00001B                     ___xxtofl@exp:
   946                           	callstack 0
   947  00001B                     moveToPoint@y2:
   948                           	callstack 0
   949                           
   950                           ; 2 bytes @ 0x1A
   951  00001B                     	ds	1
   952  00001C                     ___xxtofl@arg:
   953                           	callstack 0
   954                           
   955                           ; 4 bytes @ 0x1B
   956  00001C                     	ds	1
   957  00001D                     ??_moveToPoint:
   958                           
   959                           ; 1 bytes @ 0x1C
   960  00001D                     	ds	2
   961  00001F                     moveToPoint@MOT1Direction:
   962                           	callstack 0
   963                           
   964                           ; 1 bytes @ 0x1E
   965  00001F                     	ds	1
   966  000020                     ?___fldiv:
   967                           	callstack 0
   968  000020                     moveToPoint@MOT2Direction:
   969                           	callstack 0
   970  000020                     ___fldiv@b:
   971                           	callstack 0
   972                           
   973                           ; 4 bytes @ 0x1F
   974  000020                     	ds	1
   975  000021                     moveToPoint@keepMovingX:
   976                           	callstack 0
   977                           
   978                           ; 1 bytes @ 0x20
   979  000021                     	ds	1
   980  000022                     moveToPoint@keepMovingY:
   981                           	callstack 0
   982                           
   983                           ; 1 bytes @ 0x21
   984  000022                     	ds	2
   985  000024                     ___fldiv@a:
   986                           	callstack 0
   987                           
   988                           ; 4 bytes @ 0x23
   989  000024                     	ds	4
   990  000028                     ??___fldiv:
   991                           
   992                           ; 1 bytes @ 0x27
   993  000028                     	ds	4
   994  00002C                     ___fldiv@rem:
   995                           	callstack 0
   996                           
   997                           ; 4 bytes @ 0x2B
   998  00002C                     	ds	4
   999  000030                     ___fldiv@sign:
  1000                           	callstack 0
  1001                           
  1002                           ; 1 bytes @ 0x2F
  1003  000030                     	ds	1
  1004  000031                     ___fldiv@new_exp:
  1005                           	callstack 0
  1006                           
  1007                           ; 2 bytes @ 0x30
  1008  000031                     	ds	2
  1009  000033                     ___fldiv@grs:
  1010                           	callstack 0
  1011                           
  1012                           ; 4 bytes @ 0x32
  1013  000033                     	ds	4
  1014  000037                     ___fldiv@bexp:
  1015                           	callstack 0
  1016                           
  1017                           ; 1 bytes @ 0x36
  1018  000037                     	ds	1
  1019  000038                     ___fldiv@aexp:
  1020                           	callstack 0
  1021                           
  1022                           ; 1 bytes @ 0x37
  1023  000038                     	ds	1
  1024  000039                     ?___fltol:
  1025                           	callstack 0
  1026  000039                     ___fltol@f1:
  1027                           	callstack 0
  1028                           
  1029                           ; 4 bytes @ 0x38
  1030  000039                     	ds	4
  1031  00003D                     ??___fltol:
  1032                           
  1033                           ; 1 bytes @ 0x3C
  1034  00003D                     	ds	4
  1035  000041                     ___fltol@sign1:
  1036                           	callstack 0
  1037                           
  1038                           ; 1 bytes @ 0x40
  1039  000041                     	ds	1
  1040  000042                     ___fltol@exp1:
  1041                           	callstack 0
  1042                           
  1043                           ; 1 bytes @ 0x41
  1044  000042                     	ds	1
  1045                           
  1046 ;;
  1047 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1048 ;;
  1049 ;; *************** function _main *****************
  1050 ;; Defined at:
  1051 ;;		line 19 in file "main.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;		None
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  newData         2   15[BANK0 ] PTR struct .
  1056 ;;		 -> newSequenceData(8), 
  1057 ;;  errCode         1   14[BANK0 ] unsigned char 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      void 
  1060 ;; Registers used:
  1061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1067 ;;      Params:         0       0       0       0       0       0       0
  1068 ;;      Locals:         0       3       0       0       0       0       0
  1069 ;;      Temps:          0       2       0       0       0       0       0
  1070 ;;      Totals:         0       5       0       0       0       0       0
  1071 ;;Total ram usage:        5 bytes
  1072 ;; Hardware stack levels required when called:    7
  1073 ;; This function calls:
  1074 ;;		_clearTM0
  1075 ;;		_executeData
  1076 ;;		_getNewSequence
  1077 ;;		_initADC
  1078 ;;		_initPinMotors
  1079 ;;		_interruptInit
  1080 ;;		_newSequence
  1081 ;;		_printError
  1082 ;;		_readSeq
  1083 ;;		_reduceSeq
  1084 ;;		_resetNewSequence
  1085 ;;		_resetPosition
  1086 ;;		_shiftData
  1087 ;;		_storeData
  1088 ;;		_tim0Init
  1089 ;;		_tim1Init
  1090 ;;		_tim2Init
  1091 ;;		_usartInit
  1092 ;; This function is called by:
  1093 ;;		Startup code after reset
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text0
  1098  001492                     __ptext0:
  1099                           	callstack 0
  1100  001492                     _main:
  1101                           	callstack 24
  1102  001492  FFFF               	dw	65535	; assembler added errata NOP
  1103                           
  1104                           ;main.c: 23:     interruptInit();
  1105  001494  EC83  F011         	call	_interruptInit	;wreg free
  1106  001498                     
  1107                           ;main.c: 24:     initPinMotors();
  1108  001498  ECCD  F011         	call	_initPinMotors	;wreg free
  1109  00149C                     
  1110                           ;main.c: 25:     initADC();
  1111  00149C  ECE0  F011         	call	_initADC	;wreg free
  1112  0014A0                     
  1113                           ;main.c: 26:     usartInit();
  1114  0014A0  ECF3  F011         	call	_usartInit	;wreg free
  1115  0014A4                     
  1116                           ;main.c: 27:     tim0Init();
  1117  0014A4  EC16  F012         	call	_tim0Init	;wreg free
  1118  0014A8                     
  1119                           ;main.c: 28:     tim1Init();
  1120  0014A8  EC28  F012         	call	_tim1Init	;wreg free
  1121  0014AC                     
  1122                           ;main.c: 29:     tim2Init(10);
  1123  0014AC  0E00               	movlw	0
  1124  0014AE  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1125  0014B0  0E0A               	movlw	10
  1126  0014B2  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1127  0014B4  EC02  F012         	call	_tim2Init	;wreg free
  1128  0014B8                     
  1129                           ;main.c: 32:     errCode = resetPosition();
  1130  0014B8  EC5B  F009         	call	_resetPosition	;wreg free
  1131  0014BC  0100               	movlb	0	; () banked
  1132  0014BE  6FF4               	movwf	main@errCode& (0+255),b
  1133  0014C0                     
  1134                           ; BSR set to: 0
  1135                           ;main.c: 33:     if(errCode != 0){
  1136  0014C0  51F4               	movf	main@errCode& (0+255),w,b
  1137  0014C2  B4D8               	btfsc	status,2,c
  1138  0014C4  EF66  F00A         	goto	u3821
  1139  0014C8  EF69  F00A         	goto	u3820
  1140  0014CC                     u3821:
  1141  0014CC  FFFF               	dw	65535	; assembler added errata NOP
  1142  0014CE  EF70  F00A         	goto	l333
  1143  0014D2                     u3820:
  1144  0014D2  FFFF               	dw	65535	; assembler added errata NOP
  1145  0014D4                     
  1146                           ; BSR set to: 0
  1147                           ;main.c: 34:         printError(errCode);
  1148  0014D4  51F4               	movf	main@errCode& (0+255),w,b
  1149  0014D6  EC33  F00D         	call	_printError
  1150  0014DA                     l334:
  1151  0014DA  FFFF               	dw	65535	; assembler added errata NOP
  1152  0014DC  EF6D  F00A         	goto	l334
  1153  0014E0                     l333:
  1154  0014E0  FFFF               	dw	65535	; assembler added errata NOP
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;main.c: 39:     RCSTA1bits.CREN = 1;
  1158  0014E2  88AB               	bsf	171,4,c	;volatile
  1159  0014E4                     l4381:
  1160  0014E4  FFFF               	dw	65535	; assembler added errata NOP
  1161                           
  1162                           ;main.c: 42:         if(newSequence()){
  1163  0014E6  EC94  F012         	call	_newSequence	;wreg free
  1164  0014EA  0900               	iorlw	0
  1165  0014EC  B4D8               	btfsc	status,2,c
  1166  0014EE  EF7B  F00A         	goto	u3831
  1167  0014F2  EF7E  F00A         	goto	u3830
  1168  0014F6                     u3831:
  1169  0014F6  FFFF               	dw	65535	; assembler added errata NOP
  1170  0014F8  EF00  F00B         	goto	l4409
  1171  0014FC                     u3830:
  1172  0014FC  FFFF               	dw	65535	; assembler added errata NOP
  1173  0014FE                     
  1174                           ;main.c: 43:             t_newSequence* newData = getNewSequence();
  1175  0014FE  EC2F  F012         	call	_getNewSequence	;wreg free
  1176  001502  C012  F0F5         	movff	?_getNewSequence,main@newData
  1177  001506  C013  F0F6         	movff	?_getNewSequence+1,main@newData+1
  1178  00150A                     
  1179                           ;main.c: 45:             newFeeder[0] = newData ->init_posX;
  1180  00150A  0100               	movlb	0	; () banked
  1181  00150C  EE20 F002          	lfsr	2,2
  1182  001510  51F5               	movf	main@newData& (0+255),w,b
  1183  001512  26D9               	addwf	fsr2l,f,c
  1184  001514  51F6               	movf	(main@newData+1)& (0+255),w,b
  1185  001516  22DA               	addwfc	fsr2h,f,c
  1186  001518  50DF               	movf	indf2,w,c
  1187  00151A  6E55               	movwf	_newFeeder^0,c
  1188  00151C                     
  1189                           ; BSR set to: 0
  1190                           ;main.c: 46:             newFeeder[1] = newData ->init_posY;
  1191  00151C  EE20 F003          	lfsr	2,3
  1192  001520  51F5               	movf	main@newData& (0+255),w,b
  1193  001522  26D9               	addwf	fsr2l,f,c
  1194  001524  51F6               	movf	(main@newData+1)& (0+255),w,b
  1195  001526  22DA               	addwfc	fsr2h,f,c
  1196  001528  50DF               	movf	indf2,w,c
  1197  00152A  6E56               	movwf	(_newFeeder+1)^0,c
  1198  00152C                     
  1199                           ; BSR set to: 0
  1200                           ;main.c: 50:             RCSTAbits.CREN = 0;
  1201  00152C  98AB               	bcf	171,4,c	;volatile
  1202  00152E                     
  1203                           ; BSR set to: 0
  1204                           ;main.c: 55:             if(newData ->end_posX > maxFeedX || newData ->end_posY > maxFee
      +                          dY){
  1205  00152E  EE20 F005          	lfsr	2,5
  1206  001532  51F5               	movf	main@newData& (0+255),w,b
  1207  001534  26D9               	addwf	fsr2l,f,c
  1208  001536  51F6               	movf	(main@newData+1)& (0+255),w,b
  1209  001538  22DA               	addwfc	fsr2h,f,c
  1210  00153A  0E3D               	movlw	61
  1211  00153C  60DF               	cpfslt	indf2,c
  1212  00153E  EFA3  F00A         	goto	u3841
  1213  001542  EFA6  F00A         	goto	u3840
  1214  001546                     u3841:
  1215  001546  FFFF               	dw	65535	; assembler added errata NOP
  1216  001548  EFB6  F00A         	goto	l4395
  1217  00154C                     u3840:
  1218  00154C  FFFF               	dw	65535	; assembler added errata NOP
  1219  00154E                     
  1220                           ; BSR set to: 0
  1221  00154E  EE20 F006          	lfsr	2,6
  1222  001552  51F5               	movf	main@newData& (0+255),w,b
  1223  001554  26D9               	addwf	fsr2l,f,c
  1224  001556  51F6               	movf	(main@newData+1)& (0+255),w,b
  1225  001558  22DA               	addwfc	fsr2h,f,c
  1226  00155A  0EC8               	movlw	200
  1227  00155C  64DF               	cpfsgt	indf2,c
  1228  00155E  EFB3  F00A         	goto	u3851
  1229  001562  EFB6  F00A         	goto	u3850
  1230  001566                     u3851:
  1231  001566  FFFF               	dw	65535	; assembler added errata NOP
  1232  001568  EFBB  F00A         	goto	l4397
  1233  00156C                     u3850:
  1234  00156C                     l4395:
  1235  00156C  FFFF               	dw	65535	; assembler added errata NOP
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;main.c: 56:                 errCode = 5;
  1239  00156E  0E05               	movlw	5
  1240  001570  6FF4               	movwf	main@errCode& (0+255),b
  1241                           
  1242                           ;main.c: 57:             }else{
  1243  001572  EFCF  F00A         	goto	l4399
  1244  001576                     l4397:
  1245  001576  FFFF               	dw	65535	; assembler added errata NOP
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;main.c: 58:                 storeData(newData ->end_posX);
  1249  001578  EE20 F005          	lfsr	2,5
  1250  00157C  51F5               	movf	main@newData& (0+255),w,b
  1251  00157E  26D9               	addwf	fsr2l,f,c
  1252  001580  51F6               	movf	(main@newData+1)& (0+255),w,b
  1253  001582  22DA               	addwfc	fsr2h,f,c
  1254  001584  50DF               	movf	indf2,w,c
  1255  001586  EC1E  F00B         	call	_storeData
  1256                           
  1257                           ;main.c: 59:                 storeData(newData ->end_posY);
  1258  00158A  0100               	movlb	0	; () banked
  1259  00158C  EE20 F006          	lfsr	2,6
  1260  001590  51F5               	movf	main@newData& (0+255),w,b
  1261  001592  26D9               	addwf	fsr2l,f,c
  1262  001594  51F6               	movf	(main@newData+1)& (0+255),w,b
  1263  001596  22DA               	addwfc	fsr2h,f,c
  1264  001598  50DF               	movf	indf2,w,c
  1265  00159A  EC1E  F00B         	call	_storeData
  1266  00159E                     l4399:
  1267  00159E  FFFF               	dw	65535	; assembler added errata NOP
  1268                           
  1269                           ;main.c: 63:             if(errCode == 0){
  1270  0015A0  0100               	movlb	0	; () banked
  1271  0015A2  51F4               	movf	main@errCode& (0+255),w,b
  1272  0015A4  A4D8               	btfss	status,2,c
  1273  0015A6  EFD7  F00A         	goto	u3861
  1274  0015AA  EFDA  F00A         	goto	u3860
  1275  0015AE                     u3861:
  1276  0015AE  FFFF               	dw	65535	; assembler added errata NOP
  1277  0015B0  EFF8  F00A         	goto	l4403
  1278  0015B4                     u3860:
  1279  0015B4  FFFF               	dw	65535	; assembler added errata NOP
  1280  0015B6                     
  1281                           ; BSR set to: 0
  1282                           ;main.c: 65:                 storeData(0);
  1283  0015B6  0E00               	movlw	0
  1284  0015B8  EC1E  F00B         	call	_storeData
  1285                           
  1286                           ;main.c: 66:                 storeData(0xFF);
  1287  0015BC  0EFF               	movlw	255
  1288  0015BE  EC1E  F00B         	call	_storeData
  1289                           
  1290                           ;main.c: 67:                 storeData(newData ->end_rot - newData ->init_rot);
  1291  0015C2  0100               	movlb	0	; () banked
  1292  0015C4  EE20 F004          	lfsr	2,4
  1293  0015C8  51F5               	movf	main@newData& (0+255),w,b
  1294  0015CA  26D9               	addwf	fsr2l,f,c
  1295  0015CC  51F6               	movf	(main@newData+1)& (0+255),w,b
  1296  0015CE  22DA               	addwfc	fsr2h,f,c
  1297  0015D0  50DF               	movf	indf2,w,c
  1298  0015D2  6FF2               	movwf	??_main& (0+255),b
  1299  0015D4  EE20 F007          	lfsr	2,7
  1300  0015D8  51F5               	movf	main@newData& (0+255),w,b
  1301  0015DA  26D9               	addwf	fsr2l,f,c
  1302  0015DC  51F6               	movf	(main@newData+1)& (0+255),w,b
  1303  0015DE  22DA               	addwfc	fsr2h,f,c
  1304  0015E0  50DF               	movf	indf2,w,c
  1305  0015E2  6FF3               	movwf	(??_main+1)& (0+255),b
  1306  0015E4  51F2               	movf	??_main& (0+255),w,b
  1307  0015E6  5DF3               	subwf	(??_main+1)& (0+255),w,b
  1308  0015E8  EC1E  F00B         	call	_storeData
  1309                           
  1310                           ;main.c: 68:             }else{
  1311  0015EC  EFFC  F00A         	goto	l4405
  1312  0015F0                     l4403:
  1313  0015F0  FFFF               	dw	65535	; assembler added errata NOP
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;main.c: 69:                 printError(errCode);
  1317  0015F2  51F4               	movf	main@errCode& (0+255),w,b
  1318  0015F4  EC33  F00D         	call	_printError
  1319  0015F8                     l4405:
  1320  0015F8  FFFF               	dw	65535	; assembler added errata NOP
  1321                           
  1322                           ;main.c: 73:             RCSTAbits.CREN = 1;
  1323  0015FA  88AB               	bsf	171,4,c	;volatile
  1324  0015FC                     
  1325                           ;main.c: 76:             resetNewSequence();
  1326  0015FC  EC64  F012         	call	_resetNewSequence	;wreg free
  1327  001600                     l4409:
  1328  001600  FFFF               	dw	65535	; assembler added errata NOP
  1329                           
  1330                           ;main.c: 78:         if(readSeq()){
  1331  001602  EC90  F012         	call	_readSeq	;wreg free
  1332  001606  0900               	iorlw	0
  1333  001608  B4D8               	btfsc	status,2,c
  1334  00160A  EF09  F00B         	goto	u3871
  1335  00160E  EF0C  F00B         	goto	u3870
  1336  001612                     u3871:
  1337  001612  FFFF               	dw	65535	; assembler added errata NOP
  1338  001614  EF72  F00A         	goto	l4381
  1339  001618                     u3870:
  1340  001618  FFFF               	dw	65535	; assembler added errata NOP
  1341  00161A                     
  1342                           ;main.c: 82:             errCode = executeData();
  1343  00161A  ECDF  F006         	call	_executeData	;wreg free
  1344  00161E  0100               	movlb	0	; () banked
  1345  001620  6FF4               	movwf	main@errCode& (0+255),b
  1346  001622                     
  1347                           ; BSR set to: 0
  1348                           ;main.c: 84:             printError(errCode);
  1349  001622  51F4               	movf	main@errCode& (0+255),w,b
  1350  001624  EC33  F00D         	call	_printError
  1351  001628                     
  1352                           ;main.c: 87:             clearTM0();
  1353  001628  EC3D  F012         	call	_clearTM0	;wreg free
  1354  00162C                     
  1355                           ;main.c: 91:             reduceSeq();
  1356  00162C  EC8C  F012         	call	_reduceSeq	;wreg free
  1357  001630                     
  1358                           ;main.c: 92:             shiftData();
  1359  001630  ECE0  F010         	call	_shiftData	;wreg free
  1360  001634  EF72  F00A         	goto	l4381
  1361  001638  EFD2  F000         	goto	start
  1362  00163C                     __end_of_main:
  1363                           	callstack 0
  1364                           
  1365 ;; *************** function _usartInit *****************
  1366 ;; Defined at:
  1367 ;;		line 92 in file "usart.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;		None
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;		None
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1381 ;;      Params:         0       0       0       0       0       0       0
  1382 ;;      Locals:         0       0       0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0
  1384 ;;      Totals:         0       0       0       0       0       0       0
  1385 ;;Total ram usage:        0 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    4
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text1
  1396  0023E6                     __ptext1:
  1397                           	callstack 0
  1398  0023E6                     _usartInit:
  1399                           	callstack 0
  1400  0023E6  FFFF               	dw	65535	; assembler added errata NOP
  1401  0023E8                     
  1402                           ;usart.c: 94:     TRISCbits.TRISC6 = 0;
  1403  0023E8  9C94               	bcf	148,6,c	;volatile
  1404                           
  1405                           ;usart.c: 95:     TRISCbits.TRISC7 = 1;
  1406  0023EA  8E94               	bsf	148,7,c	;volatile
  1407                           
  1408                           ;usart.c: 97:     TXSTAbits.TX9 = 0;
  1409  0023EC  9CAC               	bcf	172,6,c	;volatile
  1410                           
  1411                           ;usart.c: 98:     TXSTAbits.TXEN = 1;
  1412  0023EE  8AAC               	bsf	172,5,c	;volatile
  1413                           
  1414                           ;usart.c: 99:     TXSTAbits.SYNC = 0;
  1415  0023F0  98AC               	bcf	172,4,c	;volatile
  1416                           
  1417                           ;usart.c: 100:     TXSTAbits.BRGH = 0;
  1418  0023F2  94AC               	bcf	172,2,c	;volatile
  1419                           
  1420                           ;usart.c: 102:     RCSTAbits.SPEN = 1;
  1421  0023F4  8EAB               	bsf	171,7,c	;volatile
  1422                           
  1423                           ;usart.c: 103:     RCSTAbits.RX9 = 0;
  1424  0023F6  9CAB               	bcf	171,6,c	;volatile
  1425                           
  1426                           ;usart.c: 104:     RCSTAbits.CREN = 0;
  1427  0023F8  98AB               	bcf	171,4,c	;volatile
  1428                           
  1429                           ;usart.c: 105:     RCSTAbits.ADDEN = 0;
  1430  0023FA  96AB               	bcf	171,3,c	;volatile
  1431  0023FC                     
  1432                           ;usart.c: 108:     SPBRG = 25;
  1433  0023FC  0E19               	movlw	25
  1434  0023FE  6EAF               	movwf	175,c	;volatile
  1435  002400  0012               	return		;funcret
  1436  002402  FFFF               	dw	65535	; errata NOP
  1437  002404                     __end_of_usartInit:
  1438                           	callstack 0
  1439                           
  1440 ;; *************** function _tim2Init *****************
  1441 ;; Defined at:
  1442 ;;		line 46 in file "timer.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1456 ;;      Params:         2       0       0       0       0       0       0
  1457 ;;      Locals:         0       0       0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0
  1459 ;;      Totals:         2       0       0       0       0       0       0
  1460 ;;Total ram usage:        2 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    4
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text2
  1471  002404                     __ptext2:
  1472                           	callstack 0
  1473  002404                     _tim2Init:
  1474                           	callstack 0
  1475  002404  FFFF               	dw	65535	; assembler added errata NOP
  1476  002406                     
  1477                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1478  002406  94CA               	bcf	202,2,c	;volatile
  1479  002408                     
  1480                           ;timer.c: 48:     T2CONbits.T2CKPS = 0x10;
  1481  002408  0EFC               	movlw	-4
  1482  00240A  16CA               	andwf	202,f,c	;volatile
  1483  00240C                     
  1484                           ;timer.c: 51:     pwmPeriod = _pwmPeriod;
  1485  00240C  C012  F04F         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1486  002410  C013  F050         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1487  002414  0012               	return		;funcret
  1488  002416  FFFF               	dw	65535	; errata NOP
  1489  002418                     __end_of_tim2Init:
  1490                           	callstack 0
  1491                           
  1492 ;; *************** function _tim1Init *****************
  1493 ;; Defined at:
  1494 ;;		line 33 in file "timer.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;		None
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      void 
  1501 ;; Registers used:
  1502 ;;		wreg, status,2
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1508 ;;      Params:         0       0       0       0       0       0       0
  1509 ;;      Locals:         0       0       0       0       0       0       0
  1510 ;;      Temps:          0       0       0       0       0       0       0
  1511 ;;      Totals:         0       0       0       0       0       0       0
  1512 ;;Total ram usage:        0 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    4
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_main
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           	psect	text3
  1523  002450                     __ptext3:
  1524                           	callstack 0
  1525  002450                     _tim1Init:
  1526                           	callstack 0
  1527  002450  FFFF               	dw	65535	; assembler added errata NOP
  1528  002452                     
  1529                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1530  002452  0E30               	movlw	48
  1531  002454  12CD               	iorwf	205,f,c	;volatile
  1532  002456                     
  1533                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1534  002456  92CD               	bcf	205,1,c	;volatile
  1535  002458                     
  1536                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1537  002458  80CD               	bsf	205,0,c	;volatile
  1538  00245A  0012               	return		;funcret
  1539  00245C  FFFF               	dw	65535	; errata NOP
  1540  00245E                     __end_of_tim1Init:
  1541                           	callstack 0
  1542                           
  1543 ;; *************** function _tim0Init *****************
  1544 ;; Defined at:
  1545 ;;		line 21 in file "timer.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;		None
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;		None
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, status,2
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1559 ;;      Params:         0       0       0       0       0       0       0
  1560 ;;      Locals:         0       0       0       0       0       0       0
  1561 ;;      Temps:          0       0       0       0       0       0       0
  1562 ;;      Totals:         0       0       0       0       0       0       0
  1563 ;;Total ram usage:        0 bytes
  1564 ;; Hardware stack levels used:    1
  1565 ;; Hardware stack levels required when called:    4
  1566 ;; This function calls:
  1567 ;;		Nothing
  1568 ;; This function is called by:
  1569 ;;		_main
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           	psect	text4
  1574  00242C                     __ptext4:
  1575                           	callstack 0
  1576  00242C                     _tim0Init:
  1577                           	callstack 0
  1578  00242C  FFFF               	dw	65535	; assembler added errata NOP
  1579  00242E                     
  1580                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1581  00242E  9ED5               	bcf	213,7,c	;volatile
  1582                           
  1583                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1584  002430  9CD5               	bcf	213,6,c	;volatile
  1585                           
  1586                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1587  002432  9AD5               	bcf	213,5,c	;volatile
  1588                           
  1589                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1590  002434  86D5               	bsf	213,3,c	;volatile
  1591  002436                     
  1592                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1593  002436  0E07               	movlw	7
  1594  002438  12D5               	iorwf	213,f,c	;volatile
  1595  00243A  0012               	return		;funcret
  1596  00243C  FFFF               	dw	65535	; errata NOP
  1597  00243E                     __end_of_tim0Init:
  1598                           	callstack 0
  1599                           
  1600 ;; *************** function _storeData *****************
  1601 ;; Defined at:
  1602 ;;		line 164 in file "usart.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  data            1    wreg     unsigned char 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  data            1   26[COMRAM] unsigned char 
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1616 ;;      Params:         0       0       0       0       0       0       0
  1617 ;;      Locals:         1       0       0       0       0       0       0
  1618 ;;      Temps:          2       0       0       0       0       0       0
  1619 ;;      Totals:         3       0       0       0       0       0       0
  1620 ;;Total ram usage:        3 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    6
  1623 ;; This function calls:
  1624 ;;		_printError
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text5
  1631  00163C                     __ptext5:
  1632                           	callstack 0
  1633  00163C                     _storeData:
  1634                           	callstack 0
  1635  00163C  FFFF               	dw	65535	; assembler added errata NOP
  1636                           
  1637                           ;incstack = 0
  1638                           ;storeData@data stored from wreg
  1639  00163E  6E1B               	movwf	storeData@data^0,c
  1640  001640                     
  1641                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  1642  001640  0E43               	movlw	low storeData@receivedMex
  1643  001642  245E               	addwf	storeData@counter^0,w,c
  1644  001644  6ED9               	movwf	fsr2l,c
  1645  001646  6ADA               	clrf	fsr2h,c
  1646  001648  0E00               	movlw	high storeData@receivedMex
  1647  00164A  22DA               	addwfc	fsr2h,f,c
  1648  00164C  C01B  FFDF         	movff	storeData@data,indf2
  1649  001650                     
  1650                           ;usart.c: 175:     counter++;
  1651  001650  2A5E               	incf	storeData@counter^0,f,c
  1652                           
  1653                           ;usart.c: 178:     switch(receivedMex[0]){
  1654  001652  EF3A  F00B         	goto	l4209
  1655  001656                     l4201:
  1656  001656  FFFF               	dw	65535	; assembler added errata NOP
  1657                           
  1658                           ;usart.c: 180:             mexLength = 5;
  1659  001658  0E05               	movlw	5
  1660  00165A  6E6D               	movwf	storeData@mexLength^0,c
  1661                           
  1662                           ;usart.c: 181:             break;
  1663  00165C  EF55  F00B         	goto	l4211
  1664  001660                     l4203:
  1665  001660  FFFF               	dw	65535	; assembler added errata NOP
  1666                           
  1667                           ;usart.c: 183:             mexLength = 9;
  1668  001662  0E09               	movlw	9
  1669  001664  6E6D               	movwf	storeData@mexLength^0,c
  1670                           
  1671                           ;usart.c: 184:             break;
  1672  001666  EF55  F00B         	goto	l4211
  1673  00166A                     l4205:
  1674  00166A  FFFF               	dw	65535	; assembler added errata NOP
  1675                           
  1676                           ;usart.c: 186:             mexLength = 1;
  1677  00166C  0E01               	movlw	1
  1678  00166E  6E6D               	movwf	storeData@mexLength^0,c
  1679                           
  1680                           ;usart.c: 187:             break;
  1681  001670  EF55  F00B         	goto	l4211
  1682  001674                     l4209:
  1683  001674  FFFF               	dw	65535	; assembler added errata NOP
  1684  001676  5043               	movf	storeData@receivedMex^0,w,c
  1685  001678  6E19               	movwf	??_storeData^0,c
  1686  00167A  6A1A               	clrf	(??_storeData+1)^0,c
  1687                           
  1688                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1689                           ; Switch size 1, requested type "simple"
  1690                           ; Number of cases is 1, Range of values is 0 to 0
  1691                           ; switch strategies available:
  1692                           ; Name         Instructions Cycles
  1693                           ; simple_byte            4     3 (average)
  1694                           ;	Chosen strategy is simple_byte
  1695  00167C  501A               	movf	(??_storeData+1)^0,w,c
  1696  00167E  0A00               	xorlw	0	; case 0
  1697  001680  B4D8               	btfsc	status,2,c
  1698  001682  EF45  F00B         	goto	l4561
  1699  001686  EF55  F00B         	goto	l4211
  1700  00168A                     l4561:
  1701  00168A  FFFF               	dw	65535	; assembler added errata NOP
  1702                           
  1703                           ; Switch size 1, requested type "simple"
  1704                           ; Number of cases is 3, Range of values is 0 to 2
  1705                           ; switch strategies available:
  1706                           ; Name         Instructions Cycles
  1707                           ; simple_byte           10     6 (average)
  1708                           ;	Chosen strategy is simple_byte
  1709  00168C  5019               	movf	??_storeData^0,w,c
  1710  00168E  0A00               	xorlw	0	; case 0
  1711  001690  B4D8               	btfsc	status,2,c
  1712  001692  EF2B  F00B         	goto	l4201
  1713  001696  0A01               	xorlw	1	; case 1
  1714  001698  B4D8               	btfsc	status,2,c
  1715  00169A  EF30  F00B         	goto	l4203
  1716  00169E  0A03               	xorlw	3	; case 2
  1717  0016A0  B4D8               	btfsc	status,2,c
  1718  0016A2  EF35  F00B         	goto	l4205
  1719  0016A6  EF55  F00B         	goto	l4211
  1720  0016AA                     l4211:
  1721  0016AA  FFFF               	dw	65535	; assembler added errata NOP
  1722                           
  1723                           ;usart.c: 194:     if(counter >= mexLength){
  1724  0016AC  506D               	movf	storeData@mexLength^0,w,c
  1725  0016AE  5C5E               	subwf	storeData@counter^0,w,c
  1726  0016B0  A0D8               	btfss	status,0,c
  1727  0016B2  EF5D  F00B         	goto	u3741
  1728  0016B6  EF60  F00B         	goto	u3740
  1729  0016BA                     u3741:
  1730  0016BA  FFFF               	dw	65535	; assembler added errata NOP
  1731  0016BC  EFD8  F00B         	goto	l588
  1732  0016C0                     u3740:
  1733  0016C0  FFFF               	dw	65535	; assembler added errata NOP
  1734  0016C2                     
  1735                           ;usart.c: 195:         counter = 0;
  1736  0016C2  0E00               	movlw	0
  1737  0016C4  6E5E               	movwf	storeData@counter^0,c
  1738                           
  1739                           ;usart.c: 198:         switch(receivedMex[0]){
  1740  0016C6  EFBD  F00B         	goto	l4233
  1741  0016CA                     l4215:
  1742  0016CA  FFFF               	dw	65535	; assembler added errata NOP
  1743                           
  1744                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1745  0016CC  5061               	movf	_dataCounter^0,w,c
  1746  0016CE  0D04               	mullw	4
  1747  0016D0  0ECA               	movlw	low _dataSequence
  1748  0016D2  24F3               	addwf	243,w,c
  1749  0016D4  6ED9               	movwf	fsr2l,c
  1750  0016D6  0E00               	movlw	high _dataSequence
  1751  0016D8  20F4               	addwfc	prodh,w,c
  1752  0016DA  6EDA               	movwf	fsr2h,c
  1753  0016DC  C044  FFDF         	movff	storeData@receivedMex+1,indf2
  1754                           
  1755                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 10;
  1756  0016E0  5061               	movf	_dataCounter^0,w,c
  1757  0016E2  0D04               	mullw	4
  1758  0016E4  0ECB               	movlw	low (_dataSequence+1)
  1759  0016E6  24F3               	addwf	243,w,c
  1760  0016E8  6ED9               	movwf	fsr2l,c
  1761  0016EA  0E00               	movlw	high (_dataSequence+1)
  1762  0016EC  20F4               	addwfc	prodh,w,c
  1763  0016EE  6EDA               	movwf	fsr2h,c
  1764  0016F0  5045               	movf	(storeData@receivedMex+2)^0,w,c
  1765  0016F2  0D0A               	mullw	10
  1766  0016F4  CFF3 FFDF          	movff	prodl,indf2
  1767                           
  1768                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 10;
  1769  0016F8  5061               	movf	_dataCounter^0,w,c
  1770  0016FA  0D04               	mullw	4
  1771  0016FC  0ECC               	movlw	low (_dataSequence+2)
  1772  0016FE  24F3               	addwf	243,w,c
  1773  001700  6ED9               	movwf	fsr2l,c
  1774  001702  0E00               	movlw	high (_dataSequence+2)
  1775  001704  20F4               	addwfc	prodh,w,c
  1776  001706  6EDA               	movwf	fsr2h,c
  1777  001708  5046               	movf	(storeData@receivedMex+3)^0,w,c
  1778  00170A  0D0A               	mullw	10
  1779  00170C  CFF3 FFDF          	movff	prodl,indf2
  1780                           
  1781                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1782  001710  5061               	movf	_dataCounter^0,w,c
  1783  001712  0D04               	mullw	4
  1784  001714  0ECD               	movlw	low (_dataSequence+3)
  1785  001716  24F3               	addwf	243,w,c
  1786  001718  6ED9               	movwf	fsr2l,c
  1787  00171A  0E00               	movlw	high (_dataSequence+3)
  1788  00171C  20F4               	addwfc	prodh,w,c
  1789  00171E  6EDA               	movwf	fsr2h,c
  1790  001720  C047  FFDF         	movff	storeData@receivedMex+4,indf2
  1791  001724                     
  1792                           ;usart.c: 205:                 dataCounter++;
  1793  001724  2A61               	incf	_dataCounter^0,f,c
  1794                           
  1795                           ;usart.c: 206:                 break;
  1796  001726  EFD8  F00B         	goto	l588
  1797  00172A                     l585:
  1798  00172A  FFFF               	dw	65535	; assembler added errata NOP
  1799                           
  1800                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  1801  00172C  C044  F0DE         	movff	storeData@receivedMex+1,_newSequenceData
  1802                           
  1803                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  1804  001730  C045  F0DF         	movff	storeData@receivedMex+2,_newSequenceData+1
  1805  001734                     
  1806                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 10;
  1807  001734  5046               	movf	(storeData@receivedMex+3)^0,w,c
  1808  001736  0D0A               	mullw	10
  1809  001738  CFF3 F0E0          	movff	prodl,_newSequenceData+2
  1810                           
  1811                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 10;
  1812  00173C  5047               	movf	(storeData@receivedMex+4)^0,w,c
  1813  00173E  0D0A               	mullw	10
  1814  001740  CFF3 F0E1          	movff	prodl,_newSequenceData+3
  1815  001744                     
  1816                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  1817  001744  C048  F0E2         	movff	storeData@receivedMex+5,_newSequenceData+4
  1818                           
  1819                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 10;
  1820  001748  5049               	movf	(storeData@receivedMex+6)^0,w,c
  1821  00174A  0D0A               	mullw	10
  1822  00174C  CFF3 F0E3          	movff	prodl,_newSequenceData+5
  1823                           
  1824                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 10;
  1825  001750  504A               	movf	(storeData@receivedMex+7)^0,w,c
  1826  001752  0D0A               	mullw	10
  1827  001754  CFF3 F0E4          	movff	prodl,_newSequenceData+6
  1828  001758                     
  1829                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  1830  001758  C04B  F0E5         	movff	storeData@receivedMex+8,_newSequenceData+7
  1831  00175C                     
  1832                           ;usart.c: 218:                 _newSequence = 1;
  1833  00175C  0E01               	movlw	1
  1834  00175E  6E5F               	movwf	__newSequence^0,c
  1835                           
  1836                           ;usart.c: 219:                 break;
  1837  001760  EFD8  F00B         	goto	l588
  1838  001764                     l4227:
  1839  001764  FFFF               	dw	65535	; assembler added errata NOP
  1840                           
  1841                           ;usart.c: 222:                 _fatalError = 1;
  1842  001766  0E01               	movlw	1
  1843  001768  6E60               	movwf	__fatalError^0,c
  1844                           
  1845                           ;usart.c: 223:                 break;
  1846  00176A  EFD8  F00B         	goto	l588
  1847  00176E                     l4229:
  1848  00176E  FFFF               	dw	65535	; assembler added errata NOP
  1849                           
  1850                           ;usart.c: 226:                 printError(8);
  1851  001770  0E08               	movlw	8
  1852  001772  EC33  F00D         	call	_printError
  1853                           
  1854                           ;usart.c: 227:                 break;
  1855  001776  EFD8  F00B         	goto	l588
  1856  00177A                     l4233:
  1857  00177A  FFFF               	dw	65535	; assembler added errata NOP
  1858  00177C  5043               	movf	storeData@receivedMex^0,w,c
  1859  00177E  6E19               	movwf	??_storeData^0,c
  1860  001780  6A1A               	clrf	(??_storeData+1)^0,c
  1861                           
  1862                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1863                           ; Switch size 1, requested type "simple"
  1864                           ; Number of cases is 1, Range of values is 0 to 0
  1865                           ; switch strategies available:
  1866                           ; Name         Instructions Cycles
  1867                           ; simple_byte            4     3 (average)
  1868                           ;	Chosen strategy is simple_byte
  1869  001782  501A               	movf	(??_storeData+1)^0,w,c
  1870  001784  0A00               	xorlw	0	; case 0
  1871  001786  B4D8               	btfsc	status,2,c
  1872  001788  EFC8  F00B         	goto	l4563
  1873  00178C  EFB7  F00B         	goto	l4229
  1874  001790                     l4563:
  1875  001790  FFFF               	dw	65535	; assembler added errata NOP
  1876                           
  1877                           ; Switch size 1, requested type "simple"
  1878                           ; Number of cases is 3, Range of values is 0 to 2
  1879                           ; switch strategies available:
  1880                           ; Name         Instructions Cycles
  1881                           ; simple_byte           10     6 (average)
  1882                           ;	Chosen strategy is simple_byte
  1883  001792  5019               	movf	??_storeData^0,w,c
  1884  001794  0A00               	xorlw	0	; case 0
  1885  001796  B4D8               	btfsc	status,2,c
  1886  001798  EF65  F00B         	goto	l4215
  1887  00179C  0A01               	xorlw	1	; case 1
  1888  00179E  B4D8               	btfsc	status,2,c
  1889  0017A0  EF95  F00B         	goto	l585
  1890  0017A4  0A03               	xorlw	3	; case 2
  1891  0017A6  B4D8               	btfsc	status,2,c
  1892  0017A8  EFB2  F00B         	goto	l4227
  1893  0017AC  EFB7  F00B         	goto	l4229
  1894  0017B0                     l588:
  1895  0017B0  FFFF               	dw	65535	; assembler added errata NOP
  1896  0017B2  0012               	return		;funcret
  1897  0017B4  FFFF               	dw	65535	; errata NOP
  1898  0017B6                     __end_of_storeData:
  1899                           	callstack 0
  1900                           
  1901 ;; *************** function _printError *****************
  1902 ;; Defined at:
  1903 ;;		line 111 in file "usart.c"
  1904 ;; Parameters:    Size  Location     Type
  1905 ;;  errCode         1    wreg     unsigned char 
  1906 ;; Auto vars:     Size  Location     Type
  1907 ;;  errCode         1   23[COMRAM] unsigned char 
  1908 ;; Return value:  Size  Location     Type
  1909 ;;                  1    wreg      void 
  1910 ;; Registers used:
  1911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1912 ;; Tracked objects:
  1913 ;;		On entry : 0/0
  1914 ;;		On exit  : 0/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1917 ;;      Params:         0       0       0       0       0       0       0
  1918 ;;      Locals:         1       0       0       0       0       0       0
  1919 ;;      Temps:          2       0       0       0       0       0       0
  1920 ;;      Totals:         3       0       0       0       0       0       0
  1921 ;;Total ram usage:        3 bytes
  1922 ;; Hardware stack levels used:    1
  1923 ;; Hardware stack levels required when called:    5
  1924 ;; This function calls:
  1925 ;;		_uartTx
  1926 ;; This function is called by:
  1927 ;;		_main
  1928 ;;		_storeData
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           	psect	text6
  1933  001A66                     __ptext6:
  1934                           	callstack 0
  1935  001A66                     _printError:
  1936                           	callstack 0
  1937  001A66  FFFF               	dw	65535	; assembler added errata NOP
  1938                           
  1939                           ;incstack = 0
  1940                           ;printError@errCode stored from wreg
  1941  001A68  6E18               	movwf	printError@errCode^0,c
  1942  001A6A                     
  1943                           ;usart.c: 113:     switch(errCode){
  1944  001A6A  EF8F  F00D         	goto	l4055
  1945  001A6E                     l4037:
  1946  001A6E  FFFF               	dw	65535	; assembler added errata NOP
  1947                           
  1948                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1949  001A70  0E94               	movlw	low _errString_Feed
  1950  001A72  6E12               	movwf	uartTx@ptr^0,c
  1951  001A74  0E00               	movlw	high _errString_Feed
  1952  001A76  6E13               	movwf	(uartTx@ptr+1)^0,c
  1953  001A78  0E1E               	movlw	30
  1954  001A7A  6E14               	movwf	uartTx@length^0,c
  1955  001A7C  EC10  F011         	call	_uartTx	;wreg free
  1956                           
  1957                           ;usart.c: 116:             break;
  1958  001A80  EFBE  F00D         	goto	l555
  1959  001A84                     l4039:
  1960  001A84  FFFF               	dw	65535	; assembler added errata NOP
  1961                           
  1962                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1963  001A86  0E5E               	movlw	low _errString_ZEND
  1964  001A88  6E12               	movwf	uartTx@ptr^0,c
  1965  001A8A  0E01               	movlw	high _errString_ZEND
  1966  001A8C  6E13               	movwf	(uartTx@ptr+1)^0,c
  1967  001A8E  0E29               	movlw	41
  1968  001A90  6E14               	movwf	uartTx@length^0,c
  1969  001A92  EC10  F011         	call	_uartTx	;wreg free
  1970                           
  1971                           ;usart.c: 119:             break;
  1972  001A96  EFBE  F00D         	goto	l555
  1973  001A9A                     l4041:
  1974  001A9A  FFFF               	dw	65535	; assembler added errata NOP
  1975                           
  1976                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1977  001A9C  0E87               	movlw	low _errString_Reset
  1978  001A9E  6E12               	movwf	uartTx@ptr^0,c
  1979  001AA0  0E01               	movlw	high _errString_Reset
  1980  001AA2  6E13               	movwf	(uartTx@ptr+1)^0,c
  1981  001AA4  0E28               	movlw	40
  1982  001AA6  6E14               	movwf	uartTx@length^0,c
  1983  001AA8  EC10  F011         	call	_uartTx	;wreg free
  1984                           
  1985                           ;usart.c: 122:             break;
  1986  001AAC  EFBE  F00D         	goto	l555
  1987  001AB0                     l4043:
  1988  001AB0  FFFF               	dw	65535	; assembler added errata NOP
  1989                           
  1990                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1991  001AB2  0E35               	movlw	low _errString_Point
  1992  001AB4  6E12               	movwf	uartTx@ptr^0,c
  1993  001AB6  0E01               	movlw	high _errString_Point
  1994  001AB8  6E13               	movwf	(uartTx@ptr+1)^0,c
  1995  001ABA  0E29               	movlw	41
  1996  001ABC  6E14               	movwf	uartTx@length^0,c
  1997  001ABE  EC10  F011         	call	_uartTx	;wreg free
  1998                           
  1999                           ;usart.c: 125:             break;
  2000  001AC2  EFBE  F00D         	goto	l555
  2001  001AC6                     l4045:
  2002  001AC6  FFFF               	dw	65535	; assembler added errata NOP
  2003                           
  2004                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2005  001AC8  0ED6               	movlw	low _errString_Bound
  2006  001ACA  6E12               	movwf	uartTx@ptr^0,c
  2007  001ACC  0E01               	movlw	high _errString_Bound
  2008  001ACE  6E13               	movwf	(uartTx@ptr+1)^0,c
  2009  001AD0  0E21               	movlw	33
  2010  001AD2  6E14               	movwf	uartTx@length^0,c
  2011  001AD4  EC10  F011         	call	_uartTx	;wreg free
  2012                           
  2013                           ;usart.c: 128:             break;
  2014  001AD8  EFBE  F00D         	goto	l555
  2015  001ADC                     l4047:
  2016  001ADC  FFFF               	dw	65535	; assembler added errata NOP
  2017                           
  2018                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2019  001ADE  0E00               	movlw	low _errString_PointZ
  2020  001AE0  6E12               	movwf	uartTx@ptr^0,c
  2021  001AE2  0E01               	movlw	high _errString_PointZ
  2022  001AE4  6E13               	movwf	(uartTx@ptr+1)^0,c
  2023  001AE6  0E35               	movlw	53
  2024  001AE8  6E14               	movwf	uartTx@length^0,c
  2025  001AEA  EC10  F011         	call	_uartTx	;wreg free
  2026                           
  2027                           ;usart.c: 131:             break;
  2028  001AEE  EFBE  F00D         	goto	l555
  2029  001AF2                     l4049:
  2030  001AF2  FFFF               	dw	65535	; assembler added errata NOP
  2031                           
  2032                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2033  001AF4  0EAF               	movlw	low _errString_Fatal
  2034  001AF6  6E12               	movwf	uartTx@ptr^0,c
  2035  001AF8  0E01               	movlw	high _errString_Fatal
  2036  001AFA  6E13               	movwf	(uartTx@ptr+1)^0,c
  2037  001AFC  0E27               	movlw	39
  2038  001AFE  6E14               	movwf	uartTx@length^0,c
  2039  001B00  EC10  F011         	call	_uartTx	;wreg free
  2040                           
  2041                           ;usart.c: 134:             break;
  2042  001B04  EFBE  F00D         	goto	l555
  2043  001B08                     l4051:
  2044  001B08  FFFF               	dw	65535	; assembler added errata NOP
  2045                           
  2046                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2047  001B0A  0EB2               	movlw	low _errString_Command
  2048  001B0C  6E12               	movwf	uartTx@ptr^0,c
  2049  001B0E  0E00               	movlw	high _errString_Command
  2050  001B10  6E13               	movwf	(uartTx@ptr+1)^0,c
  2051  001B12  0E18               	movlw	24
  2052  001B14  6E14               	movwf	uartTx@length^0,c
  2053  001B16  EC10  F011         	call	_uartTx	;wreg free
  2054                           
  2055                           ;usart.c: 137:             break;
  2056  001B1A  EFBE  F00D         	goto	l555
  2057  001B1E                     l4055:
  2058  001B1E  FFFF               	dw	65535	; assembler added errata NOP
  2059  001B20  5018               	movf	printError@errCode^0,w,c
  2060  001B22  6E16               	movwf	??_printError^0,c
  2061  001B24  6A17               	clrf	(??_printError+1)^0,c
  2062                           
  2063                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2064                           ; Switch size 1, requested type "simple"
  2065                           ; Number of cases is 1, Range of values is 0 to 0
  2066                           ; switch strategies available:
  2067                           ; Name         Instructions Cycles
  2068                           ; simple_byte            4     3 (average)
  2069                           ;	Chosen strategy is simple_byte
  2070  001B26  5017               	movf	(??_printError+1)^0,w,c
  2071  001B28  0A00               	xorlw	0	; case 0
  2072  001B2A  B4D8               	btfsc	status,2,c
  2073  001B2C  EF9A  F00D         	goto	l4565
  2074  001B30  EFBE  F00D         	goto	l555
  2075  001B34                     l4565:
  2076  001B34  FFFF               	dw	65535	; assembler added errata NOP
  2077                           
  2078                           ; Switch size 1, requested type "simple"
  2079                           ; Number of cases is 8, Range of values is 1 to 8
  2080                           ; switch strategies available:
  2081                           ; Name         Instructions Cycles
  2082                           ; simple_byte           25    13 (average)
  2083                           ;	Chosen strategy is simple_byte
  2084  001B36  5016               	movf	??_printError^0,w,c
  2085  001B38  0A01               	xorlw	1	; case 1
  2086  001B3A  B4D8               	btfsc	status,2,c
  2087  001B3C  EF37  F00D         	goto	l4037
  2088  001B40  0A03               	xorlw	3	; case 2
  2089  001B42  B4D8               	btfsc	status,2,c
  2090  001B44  EF42  F00D         	goto	l4039
  2091  001B48  0A01               	xorlw	1	; case 3
  2092  001B4A  B4D8               	btfsc	status,2,c
  2093  001B4C  EF4D  F00D         	goto	l4041
  2094  001B50  0A07               	xorlw	7	; case 4
  2095  001B52  B4D8               	btfsc	status,2,c
  2096  001B54  EF58  F00D         	goto	l4043
  2097  001B58  0A01               	xorlw	1	; case 5
  2098  001B5A  B4D8               	btfsc	status,2,c
  2099  001B5C  EF63  F00D         	goto	l4045
  2100  001B60  0A03               	xorlw	3	; case 6
  2101  001B62  B4D8               	btfsc	status,2,c
  2102  001B64  EF6E  F00D         	goto	l4047
  2103  001B68  0A01               	xorlw	1	; case 7
  2104  001B6A  B4D8               	btfsc	status,2,c
  2105  001B6C  EF79  F00D         	goto	l4049
  2106  001B70  0A0F               	xorlw	15	; case 8
  2107  001B72  B4D8               	btfsc	status,2,c
  2108  001B74  EF84  F00D         	goto	l4051
  2109  001B78  EFBE  F00D         	goto	l555
  2110  001B7C                     l555:
  2111  001B7C  FFFF               	dw	65535	; assembler added errata NOP
  2112  001B7E  0012               	return		;funcret
  2113  001B80  FFFF               	dw	65535	; errata NOP
  2114  001B82                     __end_of_printError:
  2115                           	callstack 0
  2116                           
  2117 ;; *************** function _uartTx *****************
  2118 ;; Defined at:
  2119 ;;		line 148 in file "usart.c"
  2120 ;; Parameters:    Size  Location     Type
  2121 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2122 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2123 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2124 ;;  length          1   19[COMRAM] unsigned char 
  2125 ;; Auto vars:     Size  Location     Type
  2126 ;;  i               1   20[COMRAM] unsigned char 
  2127 ;; Return value:  Size  Location     Type
  2128 ;;                  1    wreg      void 
  2129 ;; Registers used:
  2130 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2131 ;; Tracked objects:
  2132 ;;		On entry : 0/0
  2133 ;;		On exit  : 0/0
  2134 ;;		Unchanged: 0/0
  2135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2136 ;;      Params:         3       0       0       0       0       0       0
  2137 ;;      Locals:         1       0       0       0       0       0       0
  2138 ;;      Temps:          0       0       0       0       0       0       0
  2139 ;;      Totals:         4       0       0       0       0       0       0
  2140 ;;Total ram usage:        4 bytes
  2141 ;; Hardware stack levels used:    1
  2142 ;; Hardware stack levels required when called:    4
  2143 ;; This function calls:
  2144 ;;		Nothing
  2145 ;; This function is called by:
  2146 ;;		_printError
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149                           
  2150                           	psect	text7
  2151  002220                     __ptext7:
  2152                           	callstack 0
  2153  002220                     _uartTx:
  2154                           	callstack 0
  2155  002220  FFFF               	dw	65535	; assembler added errata NOP
  2156  002222                     
  2157                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  2158  002222  0E01               	movlw	1
  2159  002224  6E15               	movwf	uartTx@i^0,c
  2160  002226  EF29  F011         	goto	l3555
  2161  00222A                     l3551:
  2162  00222A  FFFF               	dw	65535	; assembler added errata NOP
  2163                           
  2164                           ;usart.c: 153:         TXREG = *ptr;
  2165  00222C  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2166  002230  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2167  002234  50DF               	movf	indf2,w,c
  2168  002236  6EAD               	movwf	173,c	;volatile
  2169  002238                     l560:
  2170  002238  FFFF               	dw	65535	; assembler added errata NOP
  2171  00223A  A2AC               	btfss	172,1,c	;volatile
  2172  00223C  EF22  F011         	goto	u2721
  2173  002240  EF25  F011         	goto	u2720
  2174  002244                     u2721:
  2175  002244  FFFF               	dw	65535	; assembler added errata NOP
  2176  002246  EF1C  F011         	goto	l560
  2177  00224A                     u2720:
  2178  00224A  FFFF               	dw	65535	; assembler added errata NOP
  2179  00224C                     
  2180                           ;usart.c: 157:         ptr++;
  2181  00224C  4A12               	infsnz	uartTx@ptr^0,f,c
  2182  00224E  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2183                           
  2184                           ;usart.c: 158:     }
  2185  002250  2A15               	incf	uartTx@i^0,f,c
  2186  002252                     l3555:
  2187  002252  FFFF               	dw	65535	; assembler added errata NOP
  2188  002254  5014               	movf	uartTx@length^0,w,c
  2189  002256  5C15               	subwf	uartTx@i^0,w,c
  2190  002258  A0D8               	btfss	status,0,c
  2191  00225A  EF31  F011         	goto	u2731
  2192  00225E  EF34  F011         	goto	u2730
  2193  002262                     u2731:
  2194  002262  FFFF               	dw	65535	; assembler added errata NOP
  2195  002264  EF15  F011         	goto	l3551
  2196  002268                     u2730:
  2197  002268  FFFF               	dw	65535	; assembler added errata NOP
  2198  00226A  0012               	return		;funcret
  2199  00226C  FFFF               	dw	65535	; errata NOP
  2200  00226E                     __end_of_uartTx:
  2201                           	callstack 0
  2202                           
  2203 ;; *************** function _shiftData *****************
  2204 ;; Defined at:
  2205 ;;		line 81 in file "usart.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;		None
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;  i               1   19[COMRAM] unsigned char 
  2210 ;; Return value:  Size  Location     Type
  2211 ;;                  1    wreg      void 
  2212 ;; Registers used:
  2213 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/0
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2219 ;;      Params:         0       0       0       0       0       0       0
  2220 ;;      Locals:         1       0       0       0       0       0       0
  2221 ;;      Temps:          2       0       0       0       0       0       0
  2222 ;;      Totals:         3       0       0       0       0       0       0
  2223 ;;Total ram usage:        3 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; Hardware stack levels required when called:    4
  2226 ;; This function calls:
  2227 ;;		Nothing
  2228 ;; This function is called by:
  2229 ;;		_main
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232                           
  2233                           	psect	text8
  2234  0021C0                     __ptext8:
  2235                           	callstack 0
  2236  0021C0                     _shiftData:
  2237                           	callstack 0
  2238  0021C0  FFFF               	dw	65535	; assembler added errata NOP
  2239  0021C2                     
  2240                           ;usart.c: 82:     char i;;usart.c: 84:     for(i = 0; i < 4; i++){
  2241  0021C2  0E00               	movlw	0
  2242  0021C4  6E14               	movwf	shiftData@i^0,c
  2243  0021C6                     l4353:
  2244  0021C6  FFFF               	dw	65535	; assembler added errata NOP
  2245                           
  2246                           ;usart.c: 85:         dataSequence[i] = dataSequence[i+1];
  2247  0021C8  5014               	movf	shiftData@i^0,w,c
  2248  0021CA  6E12               	movwf	??_shiftData^0,c
  2249  0021CC  6A13               	clrf	(??_shiftData+1)^0,c
  2250  0021CE  90D8               	bcf	status,0,c
  2251  0021D0  3612               	rlcf	??_shiftData^0,f,c
  2252  0021D2  3613               	rlcf	(??_shiftData+1)^0,f,c
  2253  0021D4  90D8               	bcf	status,0,c
  2254  0021D6  3612               	rlcf	??_shiftData^0,f,c
  2255  0021D8  3613               	rlcf	(??_shiftData+1)^0,f,c
  2256  0021DA  0ECE               	movlw	low (_dataSequence+4)
  2257  0021DC  2412               	addwf	??_shiftData^0,w,c
  2258  0021DE  6ED9               	movwf	fsr2l,c
  2259  0021E0  0E00               	movlw	high (_dataSequence+4)
  2260  0021E2  2013               	addwfc	(??_shiftData+1)^0,w,c
  2261  0021E4  6EDA               	movwf	fsr2h,c
  2262  0021E6  5014               	movf	shiftData@i^0,w,c
  2263  0021E8  0D04               	mullw	4
  2264  0021EA  0ECA               	movlw	low _dataSequence
  2265  0021EC  24F3               	addwf	243,w,c
  2266  0021EE  6EE1               	movwf	fsr1l,c
  2267  0021F0  0E00               	movlw	high _dataSequence
  2268  0021F2  20F4               	addwfc	prodh,w,c
  2269  0021F4  6EE2               	movwf	fsr1h,c
  2270  0021F6  CFDE FFE6          	movff	postinc2,postinc1
  2271  0021FA  CFDE FFE6          	movff	postinc2,postinc1
  2272  0021FE  CFDE FFE6          	movff	postinc2,postinc1
  2273  002202  CFDE FFE6          	movff	postinc2,postinc1
  2274  002206                     
  2275                           ;usart.c: 86:     }
  2276  002206  2A14               	incf	shiftData@i^0,f,c
  2277  002208  0E03               	movlw	3
  2278  00220A  6414               	cpfsgt	shiftData@i^0,c
  2279  00220C  EF0A  F011         	goto	u3811
  2280  002210  EF0D  F011         	goto	u3810
  2281  002214                     u3811:
  2282  002214  FFFF               	dw	65535	; assembler added errata NOP
  2283  002216  EFE3  F010         	goto	l4353
  2284  00221A                     u3810:
  2285  00221A  FFFF               	dw	65535	; assembler added errata NOP
  2286  00221C  0012               	return		;funcret
  2287  00221E  FFFF               	dw	65535	; errata NOP
  2288  002220                     __end_of_shiftData:
  2289                           	callstack 0
  2290                           
  2291 ;; *************** function _resetPosition *****************
  2292 ;; Defined at:
  2293 ;;		line 165 in file "motors.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;		None
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2298 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2299 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  1    wreg      unsigned char 
  2302 ;; Registers used:
  2303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2309 ;;      Params:         0       0       0       0       0       0       0
  2310 ;;      Locals:         3       0       0       0       0       0       0
  2311 ;;      Temps:          0       0       0       0       0       0       0
  2312 ;;      Totals:         3       0       0       0       0       0       0
  2313 ;;Total ram usage:        3 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    5
  2316 ;; This function calls:
  2317 ;;		_resetStep
  2318 ;;		_stepMade
  2319 ;; This function is called by:
  2320 ;;		_main
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           	psect	text9
  2325  0012B6                     __ptext9:
  2326                           	callstack 0
  2327  0012B6                     _resetPosition:
  2328                           	callstack 0
  2329  0012B6  FFFF               	dw	65535	; assembler added errata NOP
  2330  0012B8                     
  2331                           ;motors.c: 185:     motCounter[0][1] = -1;
  2332  0012B8  6868               	setf	(_motCounter+1)^0,c
  2333                           
  2334                           ;motors.c: 186:     motCounter[1][1] = -1;
  2335  0012BA  686A               	setf	(_motCounter+3)^0,c
  2336                           
  2337                           ;motors.c: 187:     motCounter[2][1] = -1;
  2338  0012BC  686C               	setf	(_motCounter+5)^0,c
  2339  0012BE                     
  2340                           ;motors.c: 192:     unsigned char keepMovingX = 1;
  2341  0012BE  0E01               	movlw	1
  2342  0012C0  6E15               	movwf	resetPosition@keepMovingX^0,c
  2343                           
  2344                           ;motors.c: 193:     unsigned char keepMovingY = 1;
  2345  0012C2  0E01               	movlw	1
  2346  0012C4  6E16               	movwf	resetPosition@keepMovingY^0,c
  2347                           
  2348                           ;motors.c: 194:     unsigned char keepMovingZ = 1;
  2349  0012C6  0E01               	movlw	1
  2350  0012C8  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2351  0012CA                     
  2352                           ;motors.c: 197:     T2CONbits.TMR2ON = 1;
  2353  0012CA  84CA               	bsf	202,2,c	;volatile
  2354                           
  2355                           ;motors.c: 199:     tm0Error = 0;
  2356  0012CC  0E00               	movlw	0
  2357  0012CE  6E5A               	movwf	(_tm0Error+1)^0,c
  2358  0012D0  0E00               	movlw	0
  2359  0012D2  6E59               	movwf	_tm0Error^0,c
  2360                           
  2361                           ;motors.c: 200:     tm0Limit = 100;
  2362  0012D4  0E64               	movlw	100
  2363  0012D6  6E66               	movwf	_tm0Limit^0,c
  2364  0012D8                     
  2365                           ;motors.c: 201:     T0CONbits.TMR0ON = 1;
  2366  0012D8  8ED5               	bsf	213,7,c	;volatile
  2367                           
  2368                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2369  0012DA  EF1D  F00A         	goto	l4135
  2370  0012DE                     l4093:
  2371  0012DE  FFFF               	dw	65535	; assembler added errata NOP
  2372                           
  2373                           ;motors.c: 205:         resetStep();
  2374  0012E0  EC78  F012         	call	_resetStep	;wreg free
  2375  0012E4                     
  2376                           ;motors.c: 208:         if(tm0Error){
  2377  0012E4  5059               	movf	_tm0Error^0,w,c
  2378  0012E6  105A               	iorwf	(_tm0Error+1)^0,w,c
  2379  0012E8  B4D8               	btfsc	status,2,c
  2380  0012EA  EF79  F009         	goto	u3581
  2381  0012EE  EF7C  F009         	goto	u3580
  2382  0012F2                     u3581:
  2383  0012F2  FFFF               	dw	65535	; assembler added errata NOP
  2384  0012F4  EF83  F009         	goto	l131
  2385  0012F8                     u3580:
  2386  0012F8  FFFF               	dw	65535	; assembler added errata NOP
  2387  0012FA                     
  2388                           ;motors.c: 216:             tm0Error = 3;
  2389  0012FA  0E00               	movlw	0
  2390  0012FC  6E5A               	movwf	(_tm0Error+1)^0,c
  2391  0012FE  0E03               	movlw	3
  2392  001300  6E59               	movwf	_tm0Error^0,c
  2393                           
  2394                           ;motors.c: 217:             break;
  2395  001302  EF3B  F00A         	goto	l132
  2396  001306                     l131:
  2397  001306  FFFF               	dw	65535	; assembler added errata NOP
  2398                           
  2399                           ;motors.c: 224:         if(PORTEbits.RE0 || !keepMovingX){
  2400  001308  B084               	btfsc	132,0,c	;volatile
  2401  00130A  EF89  F009         	goto	u3591
  2402  00130E  EF8C  F009         	goto	u3590
  2403  001312                     u3591:
  2404  001312  FFFF               	dw	65535	; assembler added errata NOP
  2405  001314  EF96  F009         	goto	l4101
  2406  001318                     u3590:
  2407  001318  FFFF               	dw	65535	; assembler added errata NOP
  2408  00131A  5015               	movf	resetPosition@keepMovingX^0,w,c
  2409  00131C  A4D8               	btfss	status,2,c
  2410  00131E  EF93  F009         	goto	u3601
  2411  001322  EF96  F009         	goto	u3600
  2412  001326                     u3601:
  2413  001326  FFFF               	dw	65535	; assembler added errata NOP
  2414  001328  EF9B  F009         	goto	l4103
  2415  00132C                     u3600:
  2416  00132C                     l4101:
  2417  00132C  FFFF               	dw	65535	; assembler added errata NOP
  2418                           
  2419                           ;motors.c: 226:             keepMovingX = 0;
  2420  00132E  0E00               	movlw	0
  2421  001330  6E15               	movwf	resetPosition@keepMovingX^0,c
  2422                           
  2423                           ;motors.c: 227:         }else{
  2424  001332  EFB2  F009         	goto	l4109
  2425  001336                     l4103:
  2426  001336  FFFF               	dw	65535	; assembler added errata NOP
  2427                           
  2428                           ;motors.c: 233:             motCounter[0][0] += motCounter[0][1];
  2429  001338  5068               	movf	(_motCounter+1)^0,w,c
  2430  00133A  2667               	addwf	_motCounter^0,f,c
  2431                           
  2432                           ;motors.c: 234:             if(motCounter[0][0] < 0){
  2433  00133C  BE67               	btfsc	_motCounter^0,7,c
  2434  00133E  EFA6  F009         	goto	u3610
  2435  001342  EFA3  F009         	goto	u3611
  2436  001346                     u3611:
  2437  001346  FFFF               	dw	65535	; assembler added errata NOP
  2438  001348  EFA9  F009         	goto	l4107
  2439  00134C                     u3610:
  2440  00134C  FFFF               	dw	65535	; assembler added errata NOP
  2441  00134E                     
  2442                           ;motors.c: 235:                 motCounter[0][0] = 3;
  2443  00134E  0E03               	movlw	3
  2444  001350  6E67               	movwf	_motCounter^0,c
  2445  001352                     l4107:
  2446  001352  FFFF               	dw	65535	; assembler added errata NOP
  2447                           
  2448                           ;motors.c: 238:             LATA = stepMot1[motCounter[0][0]];
  2449  001354  0E8C               	movlw	low _stepMot1
  2450  001356  2467               	addwf	_motCounter^0,w,c
  2451  001358  6ED9               	movwf	fsr2l,c
  2452  00135A  6ADA               	clrf	fsr2h,c
  2453  00135C  0E00               	movlw	high _stepMot1
  2454  00135E  22DA               	addwfc	fsr2h,f,c
  2455  001360  50DF               	movf	indf2,w,c
  2456  001362  6E89               	movwf	137,c	;volatile
  2457  001364                     l4109:
  2458  001364  FFFF               	dw	65535	; assembler added errata NOP
  2459                           
  2460                           ;motors.c: 243:         if(PORTEbits.RE1 || !keepMovingY){
  2461  001366  B284               	btfsc	132,1,c	;volatile
  2462  001368  EFB8  F009         	goto	u3621
  2463  00136C  EFBB  F009         	goto	u3620
  2464  001370                     u3621:
  2465  001370  FFFF               	dw	65535	; assembler added errata NOP
  2466  001372  EFC5  F009         	goto	l4113
  2467  001376                     u3620:
  2468  001376  FFFF               	dw	65535	; assembler added errata NOP
  2469  001378  5016               	movf	resetPosition@keepMovingY^0,w,c
  2470  00137A  A4D8               	btfss	status,2,c
  2471  00137C  EFC2  F009         	goto	u3631
  2472  001380  EFC5  F009         	goto	u3630
  2473  001384                     u3631:
  2474  001384  FFFF               	dw	65535	; assembler added errata NOP
  2475  001386  EFCA  F009         	goto	l4115
  2476  00138A                     u3630:
  2477  00138A                     l4113:
  2478  00138A  FFFF               	dw	65535	; assembler added errata NOP
  2479                           
  2480                           ;motors.c: 245:             keepMovingY = 0;
  2481  00138C  0E00               	movlw	0
  2482  00138E  6E16               	movwf	resetPosition@keepMovingY^0,c
  2483                           
  2484                           ;motors.c: 246:         }else{
  2485  001390  EFE1  F009         	goto	l4121
  2486  001394                     l4115:
  2487  001394  FFFF               	dw	65535	; assembler added errata NOP
  2488                           
  2489                           ;motors.c: 252:             motCounter[1][0] += motCounter[1][1];
  2490  001396  506A               	movf	(_motCounter+3)^0,w,c
  2491  001398  2669               	addwf	(_motCounter+2)^0,f,c
  2492                           
  2493                           ;motors.c: 253:             if(motCounter[1][0] < 0){
  2494  00139A  BE69               	btfsc	(_motCounter+2)^0,7,c
  2495  00139C  EFD5  F009         	goto	u3640
  2496  0013A0  EFD2  F009         	goto	u3641
  2497  0013A4                     u3641:
  2498  0013A4  FFFF               	dw	65535	; assembler added errata NOP
  2499  0013A6  EFD8  F009         	goto	l4119
  2500  0013AA                     u3640:
  2501  0013AA  FFFF               	dw	65535	; assembler added errata NOP
  2502  0013AC                     
  2503                           ;motors.c: 254:                 motCounter[1][0] = 3;
  2504  0013AC  0E03               	movlw	3
  2505  0013AE  6E69               	movwf	(_motCounter+2)^0,c
  2506  0013B0                     l4119:
  2507  0013B0  FFFF               	dw	65535	; assembler added errata NOP
  2508                           
  2509                           ;motors.c: 257:             LATB = stepMot2[motCounter[1][0]];
  2510  0013B2  0E88               	movlw	low _stepMot2
  2511  0013B4  2469               	addwf	(_motCounter+2)^0,w,c
  2512  0013B6  6ED9               	movwf	fsr2l,c
  2513  0013B8  6ADA               	clrf	fsr2h,c
  2514  0013BA  0E00               	movlw	high _stepMot2
  2515  0013BC  22DA               	addwfc	fsr2h,f,c
  2516  0013BE  50DF               	movf	indf2,w,c
  2517  0013C0  6E8A               	movwf	138,c	;volatile
  2518  0013C2                     l4121:
  2519  0013C2  FFFF               	dw	65535	; assembler added errata NOP
  2520                           
  2521                           ;motors.c: 262:         if(PORTEbits.RE2 || !keepMovingZ){
  2522  0013C4  B484               	btfsc	132,2,c	;volatile
  2523  0013C6  EFE7  F009         	goto	u3651
  2524  0013CA  EFEA  F009         	goto	u3650
  2525  0013CE                     u3651:
  2526  0013CE  FFFF               	dw	65535	; assembler added errata NOP
  2527  0013D0  EFF4  F009         	goto	l4125
  2528  0013D4                     u3650:
  2529  0013D4  FFFF               	dw	65535	; assembler added errata NOP
  2530  0013D6  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2531  0013D8  A4D8               	btfss	status,2,c
  2532  0013DA  EFF1  F009         	goto	u3661
  2533  0013DE  EFF4  F009         	goto	u3660
  2534  0013E2                     u3661:
  2535  0013E2  FFFF               	dw	65535	; assembler added errata NOP
  2536  0013E4  EFF9  F009         	goto	l4127
  2537  0013E8                     u3660:
  2538  0013E8                     l4125:
  2539  0013E8  FFFF               	dw	65535	; assembler added errata NOP
  2540                           
  2541                           ;motors.c: 264:             keepMovingZ = 0;
  2542  0013EA  0E00               	movlw	0
  2543  0013EC  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2544                           
  2545                           ;motors.c: 265:         }else{
  2546  0013EE  EF10  F00A         	goto	l4133
  2547  0013F2                     l4127:
  2548  0013F2  FFFF               	dw	65535	; assembler added errata NOP
  2549                           
  2550                           ;motors.c: 271:             motCounter[2][0] += motCounter[2][1];
  2551  0013F4  506C               	movf	(_motCounter+5)^0,w,c
  2552  0013F6  266B               	addwf	(_motCounter+4)^0,f,c
  2553                           
  2554                           ;motors.c: 272:             if(motCounter[2][0] < 0){
  2555  0013F8  BE6B               	btfsc	(_motCounter+4)^0,7,c
  2556  0013FA  EF04  F00A         	goto	u3670
  2557  0013FE  EF01  F00A         	goto	u3671
  2558  001402                     u3671:
  2559  001402  FFFF               	dw	65535	; assembler added errata NOP
  2560  001404  EF07  F00A         	goto	l4131
  2561  001408                     u3670:
  2562  001408  FFFF               	dw	65535	; assembler added errata NOP
  2563  00140A                     
  2564                           ;motors.c: 273:                 motCounter[2][0] = 3;
  2565  00140A  0E03               	movlw	3
  2566  00140C  6E6B               	movwf	(_motCounter+4)^0,c
  2567  00140E                     l4131:
  2568  00140E  FFFF               	dw	65535	; assembler added errata NOP
  2569                           
  2570                           ;motors.c: 276:             LATC = stepMot3[motCounter[2][0]];
  2571  001410  0E84               	movlw	low _stepMot3
  2572  001412  246B               	addwf	(_motCounter+4)^0,w,c
  2573  001414  6ED9               	movwf	fsr2l,c
  2574  001416  6ADA               	clrf	fsr2h,c
  2575  001418  0E00               	movlw	high _stepMot3
  2576  00141A  22DA               	addwfc	fsr2h,f,c
  2577  00141C  50DF               	movf	indf2,w,c
  2578  00141E  6E8B               	movwf	139,c	;volatile
  2579  001420                     l4133:
  2580  001420  FFFF               	dw	65535	; assembler added errata NOP
  2581  001422  EC0C  F012         	call	_stepMade	;wreg free
  2582  001426  5012               	movf	?_stepMade^0,w,c
  2583  001428  1013               	iorwf	(?_stepMade+1)^0,w,c
  2584  00142A  B4D8               	btfsc	status,2,c
  2585  00142C  EF1A  F00A         	goto	u3681
  2586  001430  EF1D  F00A         	goto	u3680
  2587  001434                     u3681:
  2588  001434  FFFF               	dw	65535	; assembler added errata NOP
  2589  001436  EF10  F00A         	goto	l4133
  2590  00143A                     u3680:
  2591  00143A                     l4135:
  2592  00143A  FFFF               	dw	65535	; assembler added errata NOP
  2593                           
  2594                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2595  00143C  5015               	movf	resetPosition@keepMovingX^0,w,c
  2596  00143E  A4D8               	btfss	status,2,c
  2597  001440  EF24  F00A         	goto	u3691
  2598  001444  EF27  F00A         	goto	u3690
  2599  001448                     u3691:
  2600  001448  FFFF               	dw	65535	; assembler added errata NOP
  2601  00144A  EF6F  F009         	goto	l4093
  2602  00144E                     u3690:
  2603  00144E  FFFF               	dw	65535	; assembler added errata NOP
  2604  001450  5016               	movf	resetPosition@keepMovingY^0,w,c
  2605  001452  A4D8               	btfss	status,2,c
  2606  001454  EF2E  F00A         	goto	u3701
  2607  001458  EF31  F00A         	goto	u3700
  2608  00145C                     u3701:
  2609  00145C  FFFF               	dw	65535	; assembler added errata NOP
  2610  00145E  EF6F  F009         	goto	l4093
  2611  001462                     u3700:
  2612  001462  FFFF               	dw	65535	; assembler added errata NOP
  2613  001464  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2614  001466  A4D8               	btfss	status,2,c
  2615  001468  EF38  F00A         	goto	u3711
  2616  00146C  EF3B  F00A         	goto	u3710
  2617  001470                     u3711:
  2618  001470  FFFF               	dw	65535	; assembler added errata NOP
  2619  001472  EF6F  F009         	goto	l4093
  2620  001476                     u3710:
  2621  001476                     l132:
  2622  001476  FFFF               	dw	65535	; assembler added errata NOP
  2623                           
  2624                           ;motors.c: 296:     T0CONbits.TMR0ON = 0;
  2625  001478  9ED5               	bcf	213,7,c	;volatile
  2626                           
  2627                           ;motors.c: 297:     T2CONbits.TMR2ON = 0;
  2628  00147A  94CA               	bcf	202,2,c	;volatile
  2629  00147C                     
  2630                           ;motors.c: 299:     TMR0 = 0;
  2631  00147C  0E00               	movlw	0
  2632  00147E  6ED7               	movwf	215,c	;volatile
  2633  001480  0E00               	movlw	0
  2634  001482  6ED6               	movwf	214,c	;volatile
  2635                           
  2636                           ;motors.c: 300:     TMR2 = 0;
  2637  001484  0E00               	movlw	0
  2638  001486  6ECC               	movwf	204,c	;volatile
  2639  001488                     
  2640                           ;motors.c: 303:     resetStep();
  2641  001488  EC78  F012         	call	_resetStep	;wreg free
  2642  00148C                     
  2643                           ;motors.c: 306:     return(tm0Error);
  2644  00148C  5059               	movf	_tm0Error^0,w,c
  2645  00148E  0012               	return		;funcret
  2646  001490  FFFF               	dw	65535	; errata NOP
  2647  001492                     __end_of_resetPosition:
  2648                           	callstack 0
  2649                           
  2650 ;; *************** function _resetNewSequence *****************
  2651 ;; Defined at:
  2652 ;;		line 73 in file "usart.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;		None
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;		None
  2657 ;; Return value:  Size  Location     Type
  2658 ;;                  1    wreg      void 
  2659 ;; Registers used:
  2660 ;;		wreg, status,2
  2661 ;; Tracked objects:
  2662 ;;		On entry : 0/0
  2663 ;;		On exit  : 0/0
  2664 ;;		Unchanged: 0/0
  2665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2666 ;;      Params:         0       0       0       0       0       0       0
  2667 ;;      Locals:         0       0       0       0       0       0       0
  2668 ;;      Temps:          0       0       0       0       0       0       0
  2669 ;;      Totals:         0       0       0       0       0       0       0
  2670 ;;Total ram usage:        0 bytes
  2671 ;; Hardware stack levels used:    1
  2672 ;; Hardware stack levels required when called:    4
  2673 ;; This function calls:
  2674 ;;		Nothing
  2675 ;; This function is called by:
  2676 ;;		_main
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           	psect	text10
  2681  0024C8                     __ptext10:
  2682                           	callstack 0
  2683  0024C8                     _resetNewSequence:
  2684                           	callstack 0
  2685  0024C8  FFFF               	dw	65535	; assembler added errata NOP
  2686  0024CA                     
  2687                           ;usart.c: 74:     _newSequence = 0;
  2688  0024CA  0E00               	movlw	0
  2689  0024CC  6E5F               	movwf	__newSequence^0,c
  2690  0024CE  0012               	return		;funcret
  2691  0024D0  FFFF               	dw	65535	; errata NOP
  2692  0024D2                     __end_of_resetNewSequence:
  2693                           	callstack 0
  2694                           
  2695 ;; *************** function _reduceSeq *****************
  2696 ;; Defined at:
  2697 ;;		line 50 in file "usart.c"
  2698 ;; Parameters:    Size  Location     Type
  2699 ;;		None
  2700 ;; Auto vars:     Size  Location     Type
  2701 ;;		None
  2702 ;; Return value:  Size  Location     Type
  2703 ;;                  1    wreg      void 
  2704 ;; Registers used:
  2705 ;;		status,2, status,0
  2706 ;; Tracked objects:
  2707 ;;		On entry : 0/0
  2708 ;;		On exit  : 0/0
  2709 ;;		Unchanged: 0/0
  2710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2711 ;;      Params:         0       0       0       0       0       0       0
  2712 ;;      Locals:         0       0       0       0       0       0       0
  2713 ;;      Temps:          0       0       0       0       0       0       0
  2714 ;;      Totals:         0       0       0       0       0       0       0
  2715 ;;Total ram usage:        0 bytes
  2716 ;; Hardware stack levels used:    1
  2717 ;; Hardware stack levels required when called:    4
  2718 ;; This function calls:
  2719 ;;		Nothing
  2720 ;; This function is called by:
  2721 ;;		_main
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           	psect	text11
  2726  002518                     __ptext11:
  2727                           	callstack 0
  2728  002518                     _reduceSeq:
  2729                           	callstack 0
  2730  002518  FFFF               	dw	65535	; assembler added errata NOP
  2731  00251A                     
  2732                           ;usart.c: 51:     dataCounter--;
  2733  00251A  0661               	decf	_dataCounter^0,f,c
  2734  00251C  0012               	return		;funcret
  2735  00251E  FFFF               	dw	65535	; errata NOP
  2736  002520                     __end_of_reduceSeq:
  2737                           	callstack 0
  2738                           
  2739 ;; *************** function _readSeq *****************
  2740 ;; Defined at:
  2741 ;;		line 57 in file "usart.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;		None
  2744 ;; Auto vars:     Size  Location     Type
  2745 ;;		None
  2746 ;; Return value:  Size  Location     Type
  2747 ;;                  1    wreg      unsigned char 
  2748 ;; Registers used:
  2749 ;;		wreg, status,2
  2750 ;; Tracked objects:
  2751 ;;		On entry : 0/0
  2752 ;;		On exit  : 0/0
  2753 ;;		Unchanged: 0/0
  2754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2755 ;;      Params:         0       0       0       0       0       0       0
  2756 ;;      Locals:         0       0       0       0       0       0       0
  2757 ;;      Temps:          0       0       0       0       0       0       0
  2758 ;;      Totals:         0       0       0       0       0       0       0
  2759 ;;Total ram usage:        0 bytes
  2760 ;; Hardware stack levels used:    1
  2761 ;; Hardware stack levels required when called:    4
  2762 ;; This function calls:
  2763 ;;		Nothing
  2764 ;; This function is called by:
  2765 ;;		_main
  2766 ;; This function uses a non-reentrant model
  2767 ;;
  2768                           
  2769                           	psect	text12
  2770  002520                     __ptext12:
  2771                           	callstack 0
  2772  002520                     _readSeq:
  2773                           	callstack 0
  2774  002520  FFFF               	dw	65535	; assembler added errata NOP
  2775  002522                     
  2776                           ;usart.c: 58:     return dataCounter;
  2777  002522  5061               	movf	_dataCounter^0,w,c
  2778  002524  0012               	return		;funcret
  2779  002526  FFFF               	dw	65535	; errata NOP
  2780  002528                     __end_of_readSeq:
  2781                           	callstack 0
  2782                           
  2783 ;; *************** function _newSequence *****************
  2784 ;; Defined at:
  2785 ;;		line 65 in file "usart.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;		None
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;		None
  2790 ;; Return value:  Size  Location     Type
  2791 ;;                  1    wreg      unsigned char 
  2792 ;; Registers used:
  2793 ;;		wreg, status,2
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2799 ;;      Params:         0       0       0       0       0       0       0
  2800 ;;      Locals:         0       0       0       0       0       0       0
  2801 ;;      Temps:          0       0       0       0       0       0       0
  2802 ;;      Totals:         0       0       0       0       0       0       0
  2803 ;;Total ram usage:        0 bytes
  2804 ;; Hardware stack levels used:    1
  2805 ;; Hardware stack levels required when called:    4
  2806 ;; This function calls:
  2807 ;;		Nothing
  2808 ;; This function is called by:
  2809 ;;		_main
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text13
  2814  002528                     __ptext13:
  2815                           	callstack 0
  2816  002528                     _newSequence:
  2817                           	callstack 0
  2818  002528  FFFF               	dw	65535	; assembler added errata NOP
  2819  00252A                     
  2820                           ;usart.c: 66:     return _newSequence;
  2821  00252A  505F               	movf	__newSequence^0,w,c
  2822  00252C  0012               	return		;funcret
  2823  00252E  FFFF               	dw	65535	; errata NOP
  2824  002530                     __end_of_newSequence:
  2825                           	callstack 0
  2826                           
  2827 ;; *************** function _interruptInit *****************
  2828 ;; Defined at:
  2829 ;;		line 21 in file "interrupt.c"
  2830 ;; Parameters:    Size  Location     Type
  2831 ;;		None
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;		None
  2834 ;; Return value:  Size  Location     Type
  2835 ;;                  1    wreg      void 
  2836 ;; Registers used:
  2837 ;;		None
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2843 ;;      Params:         0       0       0       0       0       0       0
  2844 ;;      Locals:         0       0       0       0       0       0       0
  2845 ;;      Temps:          0       0       0       0       0       0       0
  2846 ;;      Totals:         0       0       0       0       0       0       0
  2847 ;;Total ram usage:        0 bytes
  2848 ;; Hardware stack levels used:    1
  2849 ;; Hardware stack levels required when called:    4
  2850 ;; This function calls:
  2851 ;;		Nothing
  2852 ;; This function is called by:
  2853 ;;		_main
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text14
  2858  002306                     __ptext14:
  2859                           	callstack 0
  2860  002306                     _interruptInit:
  2861                           	callstack 0
  2862  002306  FFFF               	dw	65535	; assembler added errata NOP
  2863  002308                     
  2864                           ;interrupt.c: 23:     if(!INTCONbits.GIE){
  2865  002308  BEF2               	btfsc	242,7,c	;volatile
  2866  00230A  EF89  F011         	goto	u3721
  2867  00230E  EF8C  F011         	goto	u3720
  2868  002312                     u3721:
  2869  002312  FFFF               	dw	65535	; assembler added errata NOP
  2870  002314  EF8E  F011         	goto	l449
  2871  002318                     u3720:
  2872  002318  FFFF               	dw	65535	; assembler added errata NOP
  2873  00231A                     
  2874                           ;interrupt.c: 24:         INTCONbits.GIE = 1;
  2875  00231A  8EF2               	bsf	242,7,c	;volatile
  2876  00231C                     l449:
  2877  00231C  FFFF               	dw	65535	; assembler added errata NOP
  2878                           
  2879                           ;interrupt.c: 26:     if(!INTCONbits.PEIE){
  2880  00231E  BCF2               	btfsc	242,6,c	;volatile
  2881  002320  EF94  F011         	goto	u3731
  2882  002324  EF97  F011         	goto	u3730
  2883  002328                     u3731:
  2884  002328  FFFF               	dw	65535	; assembler added errata NOP
  2885  00232A  EF99  F011         	goto	l450
  2886  00232E                     u3730:
  2887  00232E  FFFF               	dw	65535	; assembler added errata NOP
  2888  002330                     
  2889                           ;interrupt.c: 27:         INTCONbits.PEIE = 1;
  2890  002330  8CF2               	bsf	242,6,c	;volatile
  2891  002332                     l450:
  2892  002332  FFFF               	dw	65535	; assembler added errata NOP
  2893                           
  2894                           ;interrupt.c: 31:     RCONbits.IPEN = 1;
  2895  002334  8ED0               	bsf	208,7,c	;volatile
  2896                           
  2897                           ;interrupt.c: 32:     INTCONbits.T0IE = 1;
  2898  002336  8AF2               	bsf	242,5,c	;volatile
  2899                           
  2900                           ;interrupt.c: 33:     PIE1bits.TMR1IE = 1;
  2901  002338  809D               	bsf	157,0,c	;volatile
  2902                           
  2903                           ;interrupt.c: 34:     PIE1bits.TMR2IE = 1;
  2904  00233A  829D               	bsf	157,1,c	;volatile
  2905                           
  2906                           ;interrupt.c: 35:     PIE1bits.RC1IE = 1;
  2907  00233C  8A9D               	bsf	157,5,c	;volatile
  2908  00233E  0012               	return		;funcret
  2909  002340  FFFF               	dw	65535	; errata NOP
  2910  002342                     __end_of_interruptInit:
  2911                           	callstack 0
  2912                           
  2913 ;; *************** function _initPinMotors *****************
  2914 ;; Defined at:
  2915 ;;		line 49 in file "motors.c"
  2916 ;; Parameters:    Size  Location     Type
  2917 ;;		None
  2918 ;; Auto vars:     Size  Location     Type
  2919 ;;		None
  2920 ;; Return value:  Size  Location     Type
  2921 ;;                  1    wreg      void 
  2922 ;; Registers used:
  2923 ;;		wreg, status,2, status,0
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2929 ;;      Params:         0       0       0       0       0       0       0
  2930 ;;      Locals:         0       0       0       0       0       0       0
  2931 ;;      Temps:          0       0       0       0       0       0       0
  2932 ;;      Totals:         0       0       0       0       0       0       0
  2933 ;;Total ram usage:        0 bytes
  2934 ;; Hardware stack levels used:    1
  2935 ;; Hardware stack levels required when called:    4
  2936 ;; This function calls:
  2937 ;;		Nothing
  2938 ;; This function is called by:
  2939 ;;		_main
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	text15
  2944  00239A                     __ptext15:
  2945                           	callstack 0
  2946  00239A                     _initPinMotors:
  2947                           	callstack 0
  2948  00239A  FFFF               	dw	65535	; assembler added errata NOP
  2949  00239C                     
  2950                           ;motors.c: 51:     ADCON1bits.PCFG = 0x06;
  2951  00239C  50C1               	movf	193,w,c	;volatile
  2952  00239E  0BF0               	andlw	-16
  2953  0023A0  0906               	iorlw	6
  2954  0023A2  6EC1               	movwf	193,c	;volatile
  2955  0023A4                     
  2956                           ;motors.c: 52:     TRISA &= 0b11010001;
  2957  0023A4  0ED1               	movlw	209
  2958  0023A6  1692               	andwf	146,f,c	;volatile
  2959  0023A8                     
  2960                           ;motors.c: 54:     TRISB &= 0b00000010;
  2961  0023A8  0E02               	movlw	2
  2962  0023AA  1693               	andwf	147,f,c	;volatile
  2963  0023AC                     
  2964                           ;motors.c: 55:     TRISC &= 0b11000000;
  2965  0023AC  0EC0               	movlw	192
  2966  0023AE  1694               	andwf	148,f,c	;volatile
  2967  0023B0                     
  2968                           ;motors.c: 56:     TRISD &= 0b11000000;
  2969  0023B0  0EC0               	movlw	192
  2970  0023B2  1695               	andwf	149,f,c	;volatile
  2971  0023B4                     
  2972                           ;motors.c: 59:     TRISEbits.TRISE0 = 1;
  2973  0023B4  8096               	bsf	150,0,c	;volatile
  2974  0023B6                     
  2975                           ;motors.c: 60:     TRISEbits.TRISE1 = 1;
  2976  0023B6  8296               	bsf	150,1,c	;volatile
  2977  0023B8                     
  2978                           ;motors.c: 61:     TRISEbits.TRISE2 = 1;
  2979  0023B8  8496               	bsf	150,2,c	;volatile
  2980  0023BA                     
  2981                           ;motors.c: 64:     TRISDbits.TRISD7 = 1;
  2982  0023BA  8E95               	bsf	149,7,c	;volatile
  2983  0023BC  0012               	return		;funcret
  2984  0023BE  FFFF               	dw	65535	; errata NOP
  2985  0023C0                     __end_of_initPinMotors:
  2986                           	callstack 0
  2987                           
  2988 ;; *************** function _initADC *****************
  2989 ;; Defined at:
  2990 ;;		line 18 in file "adc.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;		None
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;		None
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      void 
  2997 ;; Registers used:
  2998 ;;		wreg, status,2
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3004 ;;      Params:         0       0       0       0       0       0       0
  3005 ;;      Locals:         0       0       0       0       0       0       0
  3006 ;;      Temps:          0       0       0       0       0       0       0
  3007 ;;      Totals:         0       0       0       0       0       0       0
  3008 ;;Total ram usage:        0 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:    4
  3011 ;; This function calls:
  3012 ;;		Nothing
  3013 ;; This function is called by:
  3014 ;;		_main
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018                           	psect	text16
  3019  0023C0                     __ptext16:
  3020                           	callstack 0
  3021  0023C0                     _initADC:
  3022                           	callstack 0
  3023  0023C0  FFFF               	dw	65535	; assembler added errata NOP
  3024  0023C2                     
  3025                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3026  0023C2  50C2               	movf	194,w,c	;volatile
  3027  0023C4  0B3F               	andlw	-193
  3028  0023C6  0940               	iorlw	64
  3029  0023C8  6EC2               	movwf	194,c	;volatile
  3030  0023CA                     
  3031                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3032  0023CA  8CC1               	bsf	193,6,c	;volatile
  3033                           
  3034                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3035  0023CC  0EC7               	movlw	-57
  3036  0023CE  16C2               	andwf	194,f,c	;volatile
  3037  0023D0                     
  3038                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3039  0023D0  94C2               	bcf	194,2,c	;volatile
  3040  0023D2                     
  3041                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3042  0023D2  90C2               	bcf	194,0,c	;volatile
  3043  0023D4                     
  3044                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3045  0023D4  9EC1               	bcf	193,7,c	;volatile
  3046                           
  3047                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3048  0023D6  50C1               	movf	193,w,c	;volatile
  3049  0023D8  0BF0               	andlw	-16
  3050  0023DA  090E               	iorlw	14
  3051  0023DC  6EC1               	movwf	193,c	;volatile
  3052  0023DE                     
  3053                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3054  0023DE  8C9D               	bsf	157,6,c	;volatile
  3055  0023E0                     
  3056                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3057  0023E0  8C9F               	bsf	159,6,c	;volatile
  3058  0023E2  0012               	return		;funcret
  3059  0023E4  FFFF               	dw	65535	; errata NOP
  3060  0023E6                     __end_of_initADC:
  3061                           	callstack 0
  3062                           
  3063 ;; *************** function _getNewSequence *****************
  3064 ;; Defined at:
  3065 ;;		line 43 in file "usart.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;		None
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;		None
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  2   17[COMRAM] PTR struct .
  3072 ;; Registers used:
  3073 ;;		wreg, status,2, status,0
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3079 ;;      Params:         2       0       0       0       0       0       0
  3080 ;;      Locals:         0       0       0       0       0       0       0
  3081 ;;      Temps:          0       0       0       0       0       0       0
  3082 ;;      Totals:         2       0       0       0       0       0       0
  3083 ;;Total ram usage:        2 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:    4
  3086 ;; This function calls:
  3087 ;;		Nothing
  3088 ;; This function is called by:
  3089 ;;		_main
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           	psect	text17
  3094  00245E                     __ptext17:
  3095                           	callstack 0
  3096  00245E                     _getNewSequence:
  3097                           	callstack 0
  3098  00245E  FFFF               	dw	65535	; assembler added errata NOP
  3099  002460                     
  3100                           ;usart.c: 44:     return(&newSequenceData);
  3101  002460  0EDE               	movlw	low _newSequenceData
  3102  002462  6E12               	movwf	?_getNewSequence^0,c
  3103  002464  0E00               	movlw	high _newSequenceData
  3104  002466  6E13               	movwf	(?_getNewSequence+1)^0,c
  3105  002468  0012               	return		;funcret
  3106  00246A  FFFF               	dw	65535	; errata NOP
  3107  00246C                     __end_of_getNewSequence:
  3108                           	callstack 0
  3109                           
  3110 ;; *************** function _executeData *****************
  3111 ;; Defined at:
  3112 ;;		line 105 in file "main.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;		None
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  data            2    9[BANK0 ] PTR struct .
  3117 ;;		 -> dataSequence(20), 
  3118 ;;  errCode         1   11[BANK0 ] unsigned char 
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  1    wreg      unsigned char 
  3121 ;; Registers used:
  3122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3123 ;; Tracked objects:
  3124 ;;		On entry : 0/0
  3125 ;;		On exit  : 0/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3128 ;;      Params:         0       0       0       0       0       0       0
  3129 ;;      Locals:         0       3       0       0       0       0       0
  3130 ;;      Temps:          0       2       0       0       0       0       0
  3131 ;;      Totals:         0       5       0       0       0       0       0
  3132 ;;Total ram usage:        5 bytes
  3133 ;; Hardware stack levels used:    1
  3134 ;; Hardware stack levels required when called:    6
  3135 ;; This function calls:
  3136 ;;		_getData
  3137 ;;		_liftArm
  3138 ;;		_moveToPoint
  3139 ;;		_pickObject
  3140 ;;		_releaseObj
  3141 ;;		_rotateObj
  3142 ;;		_touchObject
  3143 ;;		_touchTherm
  3144 ;; This function is called by:
  3145 ;;		_main
  3146 ;; This function uses a non-reentrant model
  3147 ;;
  3148                           
  3149                           	psect	text18
  3150  000DBE                     __ptext18:
  3151                           	callstack 0
  3152  000DBE                     _executeData:
  3153                           	callstack 0
  3154  000DBE  FFFF               	dw	65535	; assembler added errata NOP
  3155  000DC0                     
  3156                           ;main.c: 106:     t_sequence *data = getData();
  3157  000DC0  EC36  F012         	call	_getData	;wreg free
  3158  000DC4  C012  F0EF         	movff	?_getData,executeData@data
  3159  000DC8  C013  F0F0         	movff	?_getData+1,executeData@data+1
  3160  000DCC                     
  3161                           ;main.c: 112:     switch(data->feederLine){
  3162  000DCC  EF91  F007         	goto	l4281
  3163  000DD0                     l4253:
  3164  000DD0  FFFF               	dw	65535	; assembler added errata NOP
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;main.c: 115:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3168  000DD2  C04C  F015         	movff	_posVector,moveToPoint@x1
  3169  000DD6  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3170  000DD8  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3171  000DDC  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3172  000DDE  0E0D               	movlw	low _feeder1Pos
  3173  000DE0  6EF6               	movwf	tblptrl,c
  3174  000DE2                     	if	1	;There is more than 1 active tblptr byte
  3175  000DE2  0E06               	movlw	high _feeder1Pos
  3176  000DE4  6EF7               	movwf	tblptrh,c
  3177  000DE6                     	endif
  3178  000DE6                     	if	0	;There are less than 3 active tblptr bytes
  3179  000DE6                     	endif
  3180  000DE6  0008               	tblrd		*
  3181  000DE8  FFFF               	dw	65535	; errata NOP
  3182  000DEA  50F5               	movf	tablat,w,c
  3183  000DEC  6E19               	movwf	moveToPoint@x2^0,c
  3184  000DEE  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3185  000DF0  0E0E               	movlw	low (_feeder1Pos+1)
  3186  000DF2  6EF6               	movwf	tblptrl,c
  3187  000DF4  0E06               	movlw	high (_feeder1Pos+1)
  3188  000DF6  6EF7               	movwf	tblptrh,c
  3189  000DF8                     	if	0	;tblptru may be non-zero
  3190  000DF8                     	endif
  3191  000DF8                     	if	0	;tblptru may be non-zero
  3192  000DF8                     	endif
  3193  000DF8  0008               	tblrd		*
  3194  000DFA  FFFF               	dw	65535	; errata NOP
  3195  000DFC  50F5               	movf	tablat,w,c
  3196  000DFE  6E1B               	movwf	moveToPoint@y2^0,c
  3197  000E00  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3198  000E02  EC22  F005         	call	_moveToPoint	;wreg free
  3199  000E06  0100               	movlb	0	; () banked
  3200  000E08  6FF1               	movwf	executeData@errCode& (0+255),b
  3201  000E0A                     
  3202                           ; BSR set to: 0
  3203                           ;main.c: 117:             posVector[0] = feeder1Pos[0];
  3204  000E0A  0E0D               	movlw	low _feeder1Pos
  3205  000E0C  6EF6               	movwf	tblptrl,c
  3206  000E0E                     	if	1	;There is more than 1 active tblptr byte
  3207  000E0E  0E06               	movlw	high _feeder1Pos
  3208  000E10  6EF7               	movwf	tblptrh,c
  3209  000E12                     	endif
  3210  000E12                     	if	0	;There are less than 3 active tblptr bytes
  3211  000E12                     	endif
  3212  000E12  0008               	tblrd		*
  3213  000E14  FFFF               	dw	65535	; errata NOP
  3214  000E16  CFF5 F04C          	movff	tablat,_posVector
  3215  000E1A                     
  3216                           ; BSR set to: 0
  3217                           ;main.c: 118:             posVector[1] = feeder1Pos[1];
  3218  000E1A  0E0E               	movlw	low (_feeder1Pos+1)
  3219  000E1C  6EF6               	movwf	tblptrl,c
  3220  000E1E  0E06               	movlw	high (_feeder1Pos+1)
  3221  000E20  6EF7               	movwf	tblptrh,c
  3222  000E22                     	if	0	;tblptru may be non-zero
  3223  000E22                     	endif
  3224  000E22                     	if	0	;tblptru may be non-zero
  3225  000E22                     	endif
  3226  000E22  0008               	tblrd		*
  3227  000E24  FFFF               	dw	65535	; errata NOP
  3228  000E26  CFF5 F04D          	movff	tablat,_posVector+1
  3229                           
  3230                           ;main.c: 119:             break;
  3231  000E2A  EFB5  F007         	goto	l4283
  3232  000E2E                     l4259:
  3233  000E2E  FFFF               	dw	65535	; assembler added errata NOP
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;main.c: 121:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3237  000E30  C04C  F015         	movff	_posVector,moveToPoint@x1
  3238  000E34  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3239  000E36  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3240  000E3A  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3241  000E3C  0E0B               	movlw	low _feeder2Pos
  3242  000E3E  6EF6               	movwf	tblptrl,c
  3243  000E40                     	if	1	;There is more than 1 active tblptr byte
  3244  000E40  0E06               	movlw	high _feeder2Pos
  3245  000E42  6EF7               	movwf	tblptrh,c
  3246  000E44                     	endif
  3247  000E44                     	if	0	;There are less than 3 active tblptr bytes
  3248  000E44                     	endif
  3249  000E44  0008               	tblrd		*
  3250  000E46  FFFF               	dw	65535	; errata NOP
  3251  000E48  50F5               	movf	tablat,w,c
  3252  000E4A  6E19               	movwf	moveToPoint@x2^0,c
  3253  000E4C  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3254  000E4E  0E0C               	movlw	low (_feeder2Pos+1)
  3255  000E50  6EF6               	movwf	tblptrl,c
  3256  000E52  0E06               	movlw	high (_feeder2Pos+1)
  3257  000E54  6EF7               	movwf	tblptrh,c
  3258  000E56                     	if	0	;tblptru may be non-zero
  3259  000E56                     	endif
  3260  000E56                     	if	0	;tblptru may be non-zero
  3261  000E56                     	endif
  3262  000E56  0008               	tblrd		*
  3263  000E58  FFFF               	dw	65535	; errata NOP
  3264  000E5A  50F5               	movf	tablat,w,c
  3265  000E5C  6E1B               	movwf	moveToPoint@y2^0,c
  3266  000E5E  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3267  000E60  EC22  F005         	call	_moveToPoint	;wreg free
  3268  000E64  0100               	movlb	0	; () banked
  3269  000E66  6FF1               	movwf	executeData@errCode& (0+255),b
  3270  000E68                     
  3271                           ; BSR set to: 0
  3272                           ;main.c: 122:             posVector[0] = feeder2Pos[0];
  3273  000E68  0E0B               	movlw	low _feeder2Pos
  3274  000E6A  6EF6               	movwf	tblptrl,c
  3275  000E6C                     	if	1	;There is more than 1 active tblptr byte
  3276  000E6C  0E06               	movlw	high _feeder2Pos
  3277  000E6E  6EF7               	movwf	tblptrh,c
  3278  000E70                     	endif
  3279  000E70                     	if	0	;There are less than 3 active tblptr bytes
  3280  000E70                     	endif
  3281  000E70  0008               	tblrd		*
  3282  000E72  FFFF               	dw	65535	; errata NOP
  3283  000E74  CFF5 F04C          	movff	tablat,_posVector
  3284  000E78                     
  3285                           ; BSR set to: 0
  3286                           ;main.c: 123:             posVector[1] = feeder2Pos[1];
  3287  000E78  0E0C               	movlw	low (_feeder2Pos+1)
  3288  000E7A  6EF6               	movwf	tblptrl,c
  3289  000E7C  0E06               	movlw	high (_feeder2Pos+1)
  3290  000E7E  6EF7               	movwf	tblptrh,c
  3291  000E80                     	if	0	;tblptru may be non-zero
  3292  000E80                     	endif
  3293  000E80                     	if	0	;tblptru may be non-zero
  3294  000E80                     	endif
  3295  000E80  0008               	tblrd		*
  3296  000E82  FFFF               	dw	65535	; errata NOP
  3297  000E84  CFF5 F04D          	movff	tablat,_posVector+1
  3298                           
  3299                           ;main.c: 124:             break;
  3300  000E88  EFB5  F007         	goto	l4283
  3301  000E8C                     l4265:
  3302  000E8C  FFFF               	dw	65535	; assembler added errata NOP
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;main.c: 126:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3306  000E8E  C04C  F015         	movff	_posVector,moveToPoint@x1
  3307  000E92  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3308  000E94  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3309  000E98  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3310  000E9A  0E09               	movlw	low _feeder3Pos
  3311  000E9C  6EF6               	movwf	tblptrl,c
  3312  000E9E                     	if	1	;There is more than 1 active tblptr byte
  3313  000E9E  0E06               	movlw	high _feeder3Pos
  3314  000EA0  6EF7               	movwf	tblptrh,c
  3315  000EA2                     	endif
  3316  000EA2                     	if	0	;There are less than 3 active tblptr bytes
  3317  000EA2                     	endif
  3318  000EA2  0008               	tblrd		*
  3319  000EA4  FFFF               	dw	65535	; errata NOP
  3320  000EA6  50F5               	movf	tablat,w,c
  3321  000EA8  6E19               	movwf	moveToPoint@x2^0,c
  3322  000EAA  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3323  000EAC  0E0A               	movlw	low (_feeder3Pos+1)
  3324  000EAE  6EF6               	movwf	tblptrl,c
  3325  000EB0  0E06               	movlw	high (_feeder3Pos+1)
  3326  000EB2  6EF7               	movwf	tblptrh,c
  3327  000EB4                     	if	0	;tblptru may be non-zero
  3328  000EB4                     	endif
  3329  000EB4                     	if	0	;tblptru may be non-zero
  3330  000EB4                     	endif
  3331  000EB4  0008               	tblrd		*
  3332  000EB6  FFFF               	dw	65535	; errata NOP
  3333  000EB8  50F5               	movf	tablat,w,c
  3334  000EBA  6E1B               	movwf	moveToPoint@y2^0,c
  3335  000EBC  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3336  000EBE  EC22  F005         	call	_moveToPoint	;wreg free
  3337  000EC2  0100               	movlb	0	; () banked
  3338  000EC4  6FF1               	movwf	executeData@errCode& (0+255),b
  3339  000EC6                     
  3340                           ; BSR set to: 0
  3341                           ;main.c: 127:             posVector[0] = feeder3Pos[0];
  3342  000EC6  0E09               	movlw	low _feeder3Pos
  3343  000EC8  6EF6               	movwf	tblptrl,c
  3344  000ECA                     	if	1	;There is more than 1 active tblptr byte
  3345  000ECA  0E06               	movlw	high _feeder3Pos
  3346  000ECC  6EF7               	movwf	tblptrh,c
  3347  000ECE                     	endif
  3348  000ECE                     	if	0	;There are less than 3 active tblptr bytes
  3349  000ECE                     	endif
  3350  000ECE  0008               	tblrd		*
  3351  000ED0  FFFF               	dw	65535	; errata NOP
  3352  000ED2  CFF5 F04C          	movff	tablat,_posVector
  3353  000ED6                     
  3354                           ; BSR set to: 0
  3355                           ;main.c: 128:             posVector[1] = feeder3Pos[1];
  3356  000ED6  0E0A               	movlw	low (_feeder3Pos+1)
  3357  000ED8  6EF6               	movwf	tblptrl,c
  3358  000EDA  0E06               	movlw	high (_feeder3Pos+1)
  3359  000EDC  6EF7               	movwf	tblptrh,c
  3360  000EDE                     	if	0	;tblptru may be non-zero
  3361  000EDE                     	endif
  3362  000EDE                     	if	0	;tblptru may be non-zero
  3363  000EDE                     	endif
  3364  000EDE  0008               	tblrd		*
  3365  000EE0  FFFF               	dw	65535	; errata NOP
  3366  000EE2  CFF5 F04D          	movff	tablat,_posVector+1
  3367                           
  3368                           ;main.c: 129:             break;
  3369  000EE6  EFB5  F007         	goto	l4283
  3370  000EEA                     l4271:
  3371  000EEA  FFFF               	dw	65535	; assembler added errata NOP
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;main.c: 133:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3375  000EEC  C04C  F015         	movff	_posVector,moveToPoint@x1
  3376  000EF0  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3377  000EF2  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3378  000EF6  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3379  000EF8  C055  F019         	movff	_newFeeder,moveToPoint@x2
  3380  000EFC  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3381  000EFE  C056  F01B         	movff	_newFeeder+1,moveToPoint@y2
  3382  000F02  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3383  000F04  EC22  F005         	call	_moveToPoint	;wreg free
  3384  000F08  0100               	movlb	0	; () banked
  3385  000F0A  6FF1               	movwf	executeData@errCode& (0+255),b
  3386  000F0C                     
  3387                           ; BSR set to: 0
  3388                           ;main.c: 134:             posVector[0] = newFeeder[0];
  3389  000F0C  C055  F04C         	movff	_newFeeder,_posVector
  3390  000F10                     
  3391                           ; BSR set to: 0
  3392                           ;main.c: 135:             posVector[1] = newFeeder[1];
  3393  000F10  C056  F04D         	movff	_newFeeder+1,_posVector+1
  3394                           
  3395                           ;main.c: 136:             break;
  3396  000F14  EFB5  F007         	goto	l4283
  3397  000F18                     l4277:
  3398  000F18  FFFF               	dw	65535	; assembler added errata NOP
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;main.c: 140:             errCode = 1;
  3402  000F1A  0E01               	movlw	1
  3403  000F1C  6FF1               	movwf	executeData@errCode& (0+255),b
  3404                           
  3405                           ;main.c: 141:             break;
  3406  000F1E  EFB5  F007         	goto	l4283
  3407  000F22                     l4281:
  3408  000F22  FFFF               	dw	65535	; assembler added errata NOP
  3409  000F24  C0EF  FFD9         	movff	executeData@data,fsr2l
  3410  000F28  C0F0  FFDA         	movff	executeData@data+1,fsr2h
  3411  000F2C  50DF               	movf	indf2,w,c
  3412  000F2E  0100               	movlb	0	; () banked
  3413  000F30  6FED               	movwf	??_executeData& (0+255),b
  3414  000F32  6BEE               	clrf	(??_executeData+1)& (0+255),b
  3415                           
  3416                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3417                           ; Switch size 1, requested type "simple"
  3418                           ; Number of cases is 1, Range of values is 0 to 0
  3419                           ; switch strategies available:
  3420                           ; Name         Instructions Cycles
  3421                           ; simple_byte            4     3 (average)
  3422                           ;	Chosen strategy is simple_byte
  3423  000F34  51EE               	movf	(??_executeData+1)& (0+255),w,b
  3424  000F36  0A00               	xorlw	0	; case 0
  3425  000F38  B4D8               	btfsc	status,2,c
  3426  000F3A  EFA1  F007         	goto	l4567
  3427  000F3E  EF8C  F007         	goto	l4277
  3428  000F42                     l4567:
  3429  000F42  FFFF               	dw	65535	; assembler added errata NOP
  3430                           
  3431                           ; BSR set to: 0
  3432                           ; Switch size 1, requested type "simple"
  3433                           ; Number of cases is 4, Range of values is 0 to 255
  3434                           ; switch strategies available:
  3435                           ; Name         Instructions Cycles
  3436                           ; simple_byte           13     7 (average)
  3437                           ;	Chosen strategy is simple_byte
  3438  000F44  51ED               	movf	??_executeData& (0+255),w,b
  3439  000F46  0A00               	xorlw	0	; case 0
  3440  000F48  B4D8               	btfsc	status,2,c
  3441  000F4A  EFE8  F006         	goto	l4253
  3442  000F4E  0A01               	xorlw	1	; case 1
  3443  000F50  B4D8               	btfsc	status,2,c
  3444  000F52  EF17  F007         	goto	l4259
  3445  000F56  0A03               	xorlw	3	; case 2
  3446  000F58  B4D8               	btfsc	status,2,c
  3447  000F5A  EF46  F007         	goto	l4265
  3448  000F5E  0AFD               	xorlw	253	; case 255
  3449  000F60  B4D8               	btfsc	status,2,c
  3450  000F62  EF75  F007         	goto	l4271
  3451  000F66  EF8C  F007         	goto	l4277
  3452  000F6A                     l4283:
  3453  000F6A  FFFF               	dw	65535	; assembler added errata NOP
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;main.c: 145:     if(!errCode){
  3457  000F6C  51F1               	movf	executeData@errCode& (0+255),w,b
  3458  000F6E  A4D8               	btfss	status,2,c
  3459  000F70  EFBC  F007         	goto	u3751
  3460  000F74  EFBF  F007         	goto	u3750
  3461  000F78                     u3751:
  3462  000F78  FFFF               	dw	65535	; assembler added errata NOP
  3463  000F7A  EFCD  F007         	goto	l4289
  3464  000F7E                     u3750:
  3465  000F7E  FFFF               	dw	65535	; assembler added errata NOP
  3466  000F80                     
  3467                           ; BSR set to: 0
  3468                           ;main.c: 148:         errCode = touchObject();
  3469  000F80  EC4F  F00E         	call	_touchObject	;wreg free
  3470  000F84  0100               	movlb	0	; () banked
  3471  000F86  6FF1               	movwf	executeData@errCode& (0+255),b
  3472  000F88                     
  3473                           ; BSR set to: 0
  3474                           ;main.c: 149:         if(errCode != 0){
  3475  000F88  51F1               	movf	executeData@errCode& (0+255),w,b
  3476  000F8A  B4D8               	btfsc	status,2,c
  3477  000F8C  EFCA  F007         	goto	u3761
  3478  000F90  EFCD  F007         	goto	u3760
  3479  000F94                     u3761:
  3480  000F94  FFFF               	dw	65535	; assembler added errata NOP
  3481  000F96  EFD1  F007         	goto	l4293
  3482  000F9A                     u3760:
  3483  000F9A                     l4289:
  3484  000F9A  FFFF               	dw	65535	; assembler added errata NOP
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;main.c: 150:             return(errCode);
  3488  000F9C  51F1               	movf	executeData@errCode& (0+255),w,b
  3489  000F9E  EF5C  F008         	goto	l360
  3490  000FA2                     l4293:
  3491  000FA2  FFFF               	dw	65535	; assembler added errata NOP
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;main.c: 153:         pickObject();
  3495  000FA4  ECB7  F011         	call	_pickObject	;wreg free
  3496  000FA8                     
  3497                           ;main.c: 156:         errCode = liftArm();
  3498  000FA8  EC42  F010         	call	_liftArm	;wreg free
  3499  000FAC  0100               	movlb	0	; () banked
  3500  000FAE  6FF1               	movwf	executeData@errCode& (0+255),b
  3501  000FB0                     
  3502                           ; BSR set to: 0
  3503                           ;main.c: 157:         if(errCode != 0){
  3504  000FB0  51F1               	movf	executeData@errCode& (0+255),w,b
  3505  000FB2  B4D8               	btfsc	status,2,c
  3506  000FB4  EFDE  F007         	goto	u3771
  3507  000FB8  EFE1  F007         	goto	u3770
  3508  000FBC                     u3771:
  3509  000FBC  FFFF               	dw	65535	; assembler added errata NOP
  3510  000FBE  EFE4  F007         	goto	l4303
  3511  000FC2                     u3770:
  3512  000FC2  FFFF               	dw	65535	; assembler added errata NOP
  3513  000FC4  EFCD  F007         	goto	l4289
  3514  000FC8                     l4303:
  3515  000FC8  FFFF               	dw	65535	; assembler added errata NOP
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;main.c: 162:         errCode = moveToPoint(posVector[0], posVector[1], data->posX, data
      +                          ->posY);
  3519  000FCA  C04C  F015         	movff	_posVector,moveToPoint@x1
  3520  000FCE  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3521  000FD0  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3522  000FD4  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3523  000FD6  EE20 F001          	lfsr	2,1
  3524  000FDA  51EF               	movf	executeData@data& (0+255),w,b
  3525  000FDC  26D9               	addwf	fsr2l,f,c
  3526  000FDE  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3527  000FE0  22DA               	addwfc	fsr2h,f,c
  3528  000FE2  50DF               	movf	indf2,w,c
  3529  000FE4  6FED               	movwf	??_executeData& (0+255),b
  3530  000FE6  51ED               	movf	??_executeData& (0+255),w,b
  3531  000FE8  6E19               	movwf	moveToPoint@x2^0,c
  3532  000FEA  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3533  000FEC  EE20 F002          	lfsr	2,2
  3534  000FF0  51EF               	movf	executeData@data& (0+255),w,b
  3535  000FF2  26D9               	addwf	fsr2l,f,c
  3536  000FF4  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3537  000FF6  22DA               	addwfc	fsr2h,f,c
  3538  000FF8  50DF               	movf	indf2,w,c
  3539  000FFA  6FEE               	movwf	(??_executeData+1)& (0+255),b
  3540  000FFC  51EE               	movf	(??_executeData+1)& (0+255),w,b
  3541  000FFE  6E1B               	movwf	moveToPoint@y2^0,c
  3542  001000  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3543  001002  EC22  F005         	call	_moveToPoint	;wreg free
  3544  001006  0100               	movlb	0	; () banked
  3545  001008  6FF1               	movwf	executeData@errCode& (0+255),b
  3546  00100A                     
  3547                           ; BSR set to: 0
  3548                           ;main.c: 163:         if(errCode != 0){
  3549  00100A  51F1               	movf	executeData@errCode& (0+255),w,b
  3550  00100C  B4D8               	btfsc	status,2,c
  3551  00100E  EF0B  F008         	goto	u3781
  3552  001012  EF0E  F008         	goto	u3780
  3553  001016                     u3781:
  3554  001016  FFFF               	dw	65535	; assembler added errata NOP
  3555  001018  EF11  F008         	goto	l4311
  3556  00101C                     u3780:
  3557  00101C  FFFF               	dw	65535	; assembler added errata NOP
  3558  00101E  EFCD  F007         	goto	l4289
  3559  001022                     l4311:
  3560  001022  FFFF               	dw	65535	; assembler added errata NOP
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;main.c: 166:         posVector[0] = data->posX;
  3564  001024  EE20 F001          	lfsr	2,1
  3565  001028  51EF               	movf	executeData@data& (0+255),w,b
  3566  00102A  26D9               	addwf	fsr2l,f,c
  3567  00102C  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3568  00102E  22DA               	addwfc	fsr2h,f,c
  3569  001030  50DF               	movf	indf2,w,c
  3570  001032  6E4C               	movwf	_posVector^0,c
  3571                           
  3572                           ;main.c: 167:         posVector[1] = data->posY;
  3573  001034  EE20 F002          	lfsr	2,2
  3574  001038  51EF               	movf	executeData@data& (0+255),w,b
  3575  00103A  26D9               	addwf	fsr2l,f,c
  3576  00103C  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3577  00103E  22DA               	addwfc	fsr2h,f,c
  3578  001040  50DF               	movf	indf2,w,c
  3579  001042  6E4D               	movwf	(_posVector+1)^0,c
  3580                           
  3581                           ;main.c: 170:         rotAngle = data->rotation - rotAngle;
  3582  001044  EE20 F003          	lfsr	2,3
  3583  001048  51EF               	movf	executeData@data& (0+255),w,b
  3584  00104A  26D9               	addwf	fsr2l,f,c
  3585  00104C  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3586  00104E  22DA               	addwfc	fsr2h,f,c
  3587  001050  50DF               	movf	indf2,w,c
  3588  001052  6FED               	movwf	??_executeData& (0+255),b
  3589  001054  5057               	movf	_rotAngle^0,w,c
  3590  001056  5DED               	subwf	??_executeData& (0+255),w,b
  3591  001058  6E57               	movwf	_rotAngle^0,c
  3592  00105A  5058               	movf	(_rotAngle+1)^0,w,c
  3593  00105C  A0D8               	btfss	status,0,c
  3594  00105E  2858               	incf	(_rotAngle+1)^0,w,c
  3595  001060  6A58               	clrf	(_rotAngle+1)^0,c
  3596  001062  5E58               	subwf	(_rotAngle+1)^0,f,c
  3597  001064                     
  3598                           ; BSR set to: 0
  3599                           ;main.c: 172:         if(rotAngle < 0){
  3600  001064  BE58               	btfsc	(_rotAngle+1)^0,7,c
  3601  001066  EF3A  F008         	goto	u3790
  3602  00106A  EF37  F008         	goto	u3791
  3603  00106E                     u3791:
  3604  00106E  FFFF               	dw	65535	; assembler added errata NOP
  3605  001070  EF3F  F008         	goto	l4317
  3606  001074                     u3790:
  3607  001074  FFFF               	dw	65535	; assembler added errata NOP
  3608  001076                     
  3609                           ; BSR set to: 0
  3610                           ;main.c: 173:             rotAngle += 360;
  3611  001076  0E68               	movlw	104
  3612  001078  2657               	addwf	_rotAngle^0,f,c
  3613  00107A  0E01               	movlw	1
  3614  00107C  2258               	addwfc	(_rotAngle+1)^0,f,c
  3615  00107E                     l4317:
  3616  00107E  FFFF               	dw	65535	; assembler added errata NOP
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;main.c: 175:         rotateObj(rotAngle);
  3620  001080  5057               	movf	_rotAngle^0,w,c
  3621  001082  ECD5  F00F         	call	_rotateObj
  3622  001086                     
  3623                           ;main.c: 178:         errCode = touchTherm();
  3624  001086  ECD5  F00E         	call	_touchTherm	;wreg free
  3625  00108A  0100               	movlb	0	; () banked
  3626  00108C  6FF1               	movwf	executeData@errCode& (0+255),b
  3627  00108E                     
  3628                           ; BSR set to: 0
  3629                           ;main.c: 179:         if(errCode != 0){
  3630  00108E  51F1               	movf	executeData@errCode& (0+255),w,b
  3631  001090  B4D8               	btfsc	status,2,c
  3632  001092  EF4D  F008         	goto	u3801
  3633  001096  EF50  F008         	goto	u3800
  3634  00109A                     u3801:
  3635  00109A  FFFF               	dw	65535	; assembler added errata NOP
  3636  00109C  EF53  F008         	goto	l4327
  3637  0010A0                     u3800:
  3638  0010A0  FFFF               	dw	65535	; assembler added errata NOP
  3639  0010A2  EFCD  F007         	goto	l4289
  3640  0010A6                     l4327:
  3641  0010A6  FFFF               	dw	65535	; assembler added errata NOP
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;main.c: 183:         releaseObj();
  3645  0010A8  ECA1  F011         	call	_releaseObj	;wreg free
  3646  0010AC                     
  3647                           ;main.c: 186:         errCode = liftArm();
  3648  0010AC  EC42  F010         	call	_liftArm	;wreg free
  3649  0010B0  0100               	movlb	0	; () banked
  3650  0010B2  6FF1               	movwf	executeData@errCode& (0+255),b
  3651  0010B4  EFCD  F007         	goto	l4289
  3652  0010B8                     l360:
  3653  0010B8  FFFF               	dw	65535	; assembler added errata NOP
  3654                           
  3655                           ; BSR set to: 0
  3656  0010BA  0012               	return		;funcret
  3657  0010BC  FFFF               	dw	65535	; errata NOP
  3658  0010BE                     __end_of_executeData:
  3659                           	callstack 0
  3660                           
  3661 ;; *************** function _touchTherm *****************
  3662 ;; Defined at:
  3663 ;;		line 594 in file "motors.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;		None
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;		None
  3668 ;; Return value:  Size  Location     Type
  3669 ;;                  1    wreg      unsigned char 
  3670 ;; Registers used:
  3671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3677 ;;      Params:         0       0       0       0       0       0       0
  3678 ;;      Locals:         0       0       0       0       0       0       0
  3679 ;;      Temps:          0       0       0       0       0       0       0
  3680 ;;      Totals:         0       0       0       0       0       0       0
  3681 ;;Total ram usage:        0 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    5
  3684 ;; This function calls:
  3685 ;;		_resetStep
  3686 ;;		_resetTherm
  3687 ;;		_returnTherm
  3688 ;;		_startADC
  3689 ;;		_stepMade
  3690 ;;		_stopADC
  3691 ;; This function is called by:
  3692 ;;		_executeData
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           	psect	text19
  3697  001DAA                     __ptext19:
  3698                           	callstack 0
  3699  001DAA                     _touchTherm:
  3700                           	callstack 0
  3701  001DAA  FFFF               	dw	65535	; assembler added errata NOP
  3702  001DAC                     
  3703                           ;motors.c: 600:     motCounter[2][1] = 1;
  3704  001DAC  0E01               	movlw	1
  3705  001DAE  6E6C               	movwf	(_motCounter+5)^0,c
  3706  001DB0                     
  3707                           ;motors.c: 603:     T2CONbits.TMR2ON = 1;
  3708  001DB0  84CA               	bsf	202,2,c	;volatile
  3709                           
  3710                           ;motors.c: 605:     tm0Error = 0;
  3711  001DB2  0E00               	movlw	0
  3712  001DB4  6E5A               	movwf	(_tm0Error+1)^0,c
  3713  001DB6  0E00               	movlw	0
  3714  001DB8  6E59               	movwf	_tm0Error^0,c
  3715                           
  3716                           ;motors.c: 606:     tm0Limit = 50;
  3717  001DBA  0E32               	movlw	50
  3718  001DBC  6E66               	movwf	_tm0Limit^0,c
  3719  001DBE                     
  3720                           ;motors.c: 607:     T0CONbits.TMR0ON = 1;
  3721  001DBE  8ED5               	bsf	213,7,c	;volatile
  3722  001DC0                     l3935:
  3723  001DC0  FFFF               	dw	65535	; assembler added errata NOP
  3724                           
  3725                           ;motors.c: 610:     startADC();
  3726  001DC2  EC69  F012         	call	_startADC	;wreg free
  3727                           
  3728                           ;motors.c: 613:     while(!returnTherm() || PORTDbits.RD7){
  3729  001DC6  EF23  F00F         	goto	l3953
  3730  001DCA                     l3937:
  3731  001DCA  FFFF               	dw	65535	; assembler added errata NOP
  3732                           
  3733                           ;motors.c: 615:         resetStep();
  3734  001DCC  EC78  F012         	call	_resetStep	;wreg free
  3735  001DD0                     
  3736                           ;motors.c: 618:         if(tm0Error){
  3737  001DD0  5059               	movf	_tm0Error^0,w,c
  3738  001DD2  105A               	iorwf	(_tm0Error+1)^0,w,c
  3739  001DD4  B4D8               	btfsc	status,2,c
  3740  001DD6  EFEF  F00E         	goto	u3441
  3741  001DDA  EFF2  F00E         	goto	u3440
  3742  001DDE                     u3441:
  3743  001DDE  FFFF               	dw	65535	; assembler added errata NOP
  3744  001DE0  EFF9  F00E         	goto	l3943
  3745  001DE4                     u3440:
  3746  001DE4  FFFF               	dw	65535	; assembler added errata NOP
  3747  001DE6                     
  3748                           ;motors.c: 623:             tm0Error = 6;
  3749  001DE6  0E00               	movlw	0
  3750  001DE8  6E5A               	movwf	(_tm0Error+1)^0,c
  3751  001DEA  0E06               	movlw	6
  3752  001DEC  6E59               	movwf	_tm0Error^0,c
  3753                           
  3754                           ;motors.c: 624:             break;
  3755  001DEE  EF39  F00F         	goto	l3957
  3756  001DF2                     l3943:
  3757  001DF2  FFFF               	dw	65535	; assembler added errata NOP
  3758                           
  3759                           ;motors.c: 632:             motCounter[2][0] += motCounter[2][1];
  3760  001DF4  506C               	movf	(_motCounter+5)^0,w,c
  3761  001DF6  266B               	addwf	(_motCounter+4)^0,f,c
  3762                           
  3763                           ;motors.c: 633:             if(motCounter[2][0] > 3){
  3764  001DF8  506B               	movf	(_motCounter+4)^0,w,c
  3765  001DFA  0A80               	xorlw	128
  3766  001DFC  0F7C               	addlw	-132
  3767  001DFE  A0D8               	btfss	status,0,c
  3768  001E00  EF04  F00F         	goto	u3451
  3769  001E04  EF07  F00F         	goto	u3450
  3770  001E08                     u3451:
  3771  001E08  FFFF               	dw	65535	; assembler added errata NOP
  3772  001E0A  EF0A  F00F         	goto	l3947
  3773  001E0E                     u3450:
  3774  001E0E  FFFF               	dw	65535	; assembler added errata NOP
  3775  001E10                     
  3776                           ;motors.c: 634:                 motCounter[2][0] = 0;
  3777  001E10  0E00               	movlw	0
  3778  001E12  6E6B               	movwf	(_motCounter+4)^0,c
  3779  001E14                     l3947:
  3780  001E14  FFFF               	dw	65535	; assembler added errata NOP
  3781                           
  3782                           ;motors.c: 637:             LATC = stepMot3[motCounter[2][0]];
  3783  001E16  0E84               	movlw	low _stepMot3
  3784  001E18  246B               	addwf	(_motCounter+4)^0,w,c
  3785  001E1A  6ED9               	movwf	fsr2l,c
  3786  001E1C  6ADA               	clrf	fsr2h,c
  3787  001E1E  0E00               	movlw	high _stepMot3
  3788  001E20  22DA               	addwfc	fsr2h,f,c
  3789  001E22  50DF               	movf	indf2,w,c
  3790  001E24  6E8B               	movwf	139,c	;volatile
  3791  001E26                     l3949:
  3792  001E26  FFFF               	dw	65535	; assembler added errata NOP
  3793  001E28  EC0C  F012         	call	_stepMade	;wreg free
  3794  001E2C  5012               	movf	?_stepMade^0,w,c
  3795  001E2E  1013               	iorwf	(?_stepMade+1)^0,w,c
  3796  001E30  B4D8               	btfsc	status,2,c
  3797  001E32  EF1D  F00F         	goto	u3461
  3798  001E36  EF20  F00F         	goto	u3460
  3799  001E3A                     u3461:
  3800  001E3A  FFFF               	dw	65535	; assembler added errata NOP
  3801  001E3C  EF13  F00F         	goto	l3949
  3802  001E40                     u3460:
  3803  001E40  FFFF               	dw	65535	; assembler added errata NOP
  3804  001E42  EFE0  F00E         	goto	l3935
  3805  001E46                     l3953:
  3806  001E46  FFFF               	dw	65535	; assembler added errata NOP
  3807                           
  3808                           ;motors.c: 613:     while(!returnTherm() || PORTDbits.RD7){
  3809  001E48  EC52  F012         	call	_returnTherm	;wreg free
  3810  001E4C  5012               	movf	?_returnTherm^0,w,c
  3811  001E4E  1013               	iorwf	(?_returnTherm+1)^0,w,c
  3812  001E50  B4D8               	btfsc	status,2,c
  3813  001E52  EF2D  F00F         	goto	u3471
  3814  001E56  EF30  F00F         	goto	u3470
  3815  001E5A                     u3471:
  3816  001E5A  FFFF               	dw	65535	; assembler added errata NOP
  3817  001E5C  EFE5  F00E         	goto	l3937
  3818  001E60                     u3470:
  3819  001E60  FFFF               	dw	65535	; assembler added errata NOP
  3820  001E62  BE83               	btfsc	131,7,c	;volatile
  3821  001E64  EF36  F00F         	goto	u3481
  3822  001E68  EF39  F00F         	goto	u3480
  3823  001E6C                     u3481:
  3824  001E6C  FFFF               	dw	65535	; assembler added errata NOP
  3825  001E6E  EFE5  F00E         	goto	l3937
  3826  001E72                     u3480:
  3827  001E72                     l3957:
  3828  001E72  FFFF               	dw	65535	; assembler added errata NOP
  3829                           
  3830                           ;motors.c: 658:     stopADC();
  3831  001E74  EC98  F012         	call	_stopADC	;wreg free
  3832  001E78                     
  3833                           ;motors.c: 661:     resetTherm();
  3834  001E78  EC73  F012         	call	_resetTherm	;wreg free
  3835  001E7C                     
  3836                           ;motors.c: 664:     T0CONbits.TMR0ON = 0;
  3837  001E7C  9ED5               	bcf	213,7,c	;volatile
  3838  001E7E                     
  3839                           ;motors.c: 665:     T2CONbits.TMR2ON = 0;
  3840  001E7E  94CA               	bcf	202,2,c	;volatile
  3841                           
  3842                           ;motors.c: 667:     TMR0 = 0;
  3843  001E80  0E00               	movlw	0
  3844  001E82  6ED7               	movwf	215,c	;volatile
  3845  001E84  0E00               	movlw	0
  3846  001E86  6ED6               	movwf	214,c	;volatile
  3847                           
  3848                           ;motors.c: 668:     TMR2 = 0;
  3849  001E88  0E00               	movlw	0
  3850  001E8A  6ECC               	movwf	204,c	;volatile
  3851  001E8C                     
  3852                           ;motors.c: 671:     resetStep();
  3853  001E8C  EC78  F012         	call	_resetStep	;wreg free
  3854  001E90                     
  3855                           ;motors.c: 674:     if(PORTDbits.RD7){
  3856  001E90  AE83               	btfss	131,7,c	;volatile
  3857  001E92  EF4D  F00F         	goto	u3491
  3858  001E96  EF50  F00F         	goto	u3490
  3859  001E9A                     u3491:
  3860  001E9A  FFFF               	dw	65535	; assembler added errata NOP
  3861  001E9C  EF55  F00F         	goto	l213
  3862  001EA0                     u3490:
  3863  001EA0  FFFF               	dw	65535	; assembler added errata NOP
  3864  001EA2                     
  3865                           ;motors.c: 675:         tm0Error = 2;
  3866  001EA2  0E00               	movlw	0
  3867  001EA4  6E5A               	movwf	(_tm0Error+1)^0,c
  3868  001EA6  0E02               	movlw	2
  3869  001EA8  6E59               	movwf	_tm0Error^0,c
  3870  001EAA                     l213:
  3871  001EAA  FFFF               	dw	65535	; assembler added errata NOP
  3872                           
  3873                           ;motors.c: 678:     return(tm0Error);
  3874  001EAC  5059               	movf	_tm0Error^0,w,c
  3875  001EAE  0012               	return		;funcret
  3876  001EB0  FFFF               	dw	65535	; errata NOP
  3877  001EB2                     __end_of_touchTherm:
  3878                           	callstack 0
  3879                           
  3880 ;; *************** function _returnTherm *****************
  3881 ;; Defined at:
  3882 ;;		line 58 in file "adc.c"
  3883 ;; Parameters:    Size  Location     Type
  3884 ;;		None
  3885 ;; Auto vars:     Size  Location     Type
  3886 ;;		None
  3887 ;; Return value:  Size  Location     Type
  3888 ;;                  2   17[COMRAM] unsigned int 
  3889 ;; Registers used:
  3890 ;;		None
  3891 ;; Tracked objects:
  3892 ;;		On entry : 0/0
  3893 ;;		On exit  : 0/0
  3894 ;;		Unchanged: 0/0
  3895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3896 ;;      Params:         2       0       0       0       0       0       0
  3897 ;;      Locals:         0       0       0       0       0       0       0
  3898 ;;      Temps:          0       0       0       0       0       0       0
  3899 ;;      Totals:         2       0       0       0       0       0       0
  3900 ;;Total ram usage:        2 bytes
  3901 ;; Hardware stack levels used:    1
  3902 ;; Hardware stack levels required when called:    4
  3903 ;; This function calls:
  3904 ;;		Nothing
  3905 ;; This function is called by:
  3906 ;;		_touchTherm
  3907 ;; This function uses a non-reentrant model
  3908 ;;
  3909                           
  3910                           	psect	text20
  3911  0024A4                     __ptext20:
  3912                           	callstack 0
  3913  0024A4                     _returnTherm:
  3914                           	callstack 0
  3915  0024A4  FFFF               	dw	65535	; assembler added errata NOP
  3916  0024A6                     
  3917                           ;adc.c: 59:     return therm_rel;
  3918  0024A6  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  3919  0024AA  6A13               	clrf	(?_returnTherm+1)^0,c
  3920  0024AC  0012               	return		;funcret
  3921  0024AE  FFFF               	dw	65535	; errata NOP
  3922  0024B0                     __end_of_returnTherm:
  3923                           	callstack 0
  3924                           
  3925 ;; *************** function _touchObject *****************
  3926 ;; Defined at:
  3927 ;;		line 499 in file "motors.c"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;		None
  3930 ;; Auto vars:     Size  Location     Type
  3931 ;;		None
  3932 ;; Return value:  Size  Location     Type
  3933 ;;                  1    wreg      unsigned char 
  3934 ;; Registers used:
  3935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3936 ;; Tracked objects:
  3937 ;;		On entry : 0/0
  3938 ;;		On exit  : 0/0
  3939 ;;		Unchanged: 0/0
  3940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3941 ;;      Params:         0       0       0       0       0       0       0
  3942 ;;      Locals:         0       0       0       0       0       0       0
  3943 ;;      Temps:          0       0       0       0       0       0       0
  3944 ;;      Totals:         0       0       0       0       0       0       0
  3945 ;;Total ram usage:        0 bytes
  3946 ;; Hardware stack levels used:    1
  3947 ;; Hardware stack levels required when called:    5
  3948 ;; This function calls:
  3949 ;;		_resetStep
  3950 ;;		_resetTherm
  3951 ;;		_resetTouch
  3952 ;;		_returnTouch
  3953 ;;		_startADC
  3954 ;;		_stepMade
  3955 ;;		_stopADC
  3956 ;; This function is called by:
  3957 ;;		_executeData
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           	psect	text21
  3962  001C9E                     __ptext21:
  3963                           	callstack 0
  3964  001C9E                     _touchObject:
  3965                           	callstack 0
  3966  001C9E  FFFF               	dw	65535	; assembler added errata NOP
  3967  001CA0                     
  3968                           ;motors.c: 505:     motCounter[2][1] = 1;
  3969  001CA0  0E01               	movlw	1
  3970  001CA2  6E6C               	movwf	(_motCounter+5)^0,c
  3971  001CA4                     
  3972                           ;motors.c: 508:     T2CONbits.TMR2ON = 1;
  3973  001CA4  84CA               	bsf	202,2,c	;volatile
  3974                           
  3975                           ;motors.c: 510:     tm0Error = 0;
  3976  001CA6  0E00               	movlw	0
  3977  001CA8  6E5A               	movwf	(_tm0Error+1)^0,c
  3978  001CAA  0E00               	movlw	0
  3979  001CAC  6E59               	movwf	_tm0Error^0,c
  3980                           
  3981                           ;motors.c: 511:     tm0Limit = 50;
  3982  001CAE  0E32               	movlw	50
  3983  001CB0  6E66               	movwf	_tm0Limit^0,c
  3984  001CB2                     
  3985                           ;motors.c: 512:     T0CONbits.TMR0ON = 1;
  3986  001CB2  8ED5               	bsf	213,7,c	;volatile
  3987  001CB4                     l3889:
  3988  001CB4  FFFF               	dw	65535	; assembler added errata NOP
  3989                           
  3990                           ;motors.c: 515:     startADC();
  3991  001CB6  EC69  F012         	call	_startADC	;wreg free
  3992                           
  3993                           ;motors.c: 518:     while(!returnTouch() || PORTDbits.RD7){
  3994  001CBA  EF9D  F00E         	goto	l3907
  3995  001CBE                     l3891:
  3996  001CBE  FFFF               	dw	65535	; assembler added errata NOP
  3997                           
  3998                           ;motors.c: 520:         resetStep();
  3999  001CC0  EC78  F012         	call	_resetStep	;wreg free
  4000  001CC4                     
  4001                           ;motors.c: 523:         if(tm0Error){
  4002  001CC4  5059               	movf	_tm0Error^0,w,c
  4003  001CC6  105A               	iorwf	(_tm0Error+1)^0,w,c
  4004  001CC8  B4D8               	btfsc	status,2,c
  4005  001CCA  EF69  F00E         	goto	u3381
  4006  001CCE  EF6C  F00E         	goto	u3380
  4007  001CD2                     u3381:
  4008  001CD2  FFFF               	dw	65535	; assembler added errata NOP
  4009  001CD4  EF73  F00E         	goto	l3897
  4010  001CD8                     u3380:
  4011  001CD8  FFFF               	dw	65535	; assembler added errata NOP
  4012  001CDA                     
  4013                           ;motors.c: 528:             tm0Error = 6;
  4014  001CDA  0E00               	movlw	0
  4015  001CDC  6E5A               	movwf	(_tm0Error+1)^0,c
  4016  001CDE  0E06               	movlw	6
  4017  001CE0  6E59               	movwf	_tm0Error^0,c
  4018                           
  4019                           ;motors.c: 529:             break;
  4020  001CE2  EFB3  F00E         	goto	l3911
  4021  001CE6                     l3897:
  4022  001CE6  FFFF               	dw	65535	; assembler added errata NOP
  4023                           
  4024                           ;motors.c: 537:             motCounter[2][0] += motCounter[2][1];
  4025  001CE8  506C               	movf	(_motCounter+5)^0,w,c
  4026  001CEA  266B               	addwf	(_motCounter+4)^0,f,c
  4027                           
  4028                           ;motors.c: 538:             if(motCounter[2][0] > 3){
  4029  001CEC  506B               	movf	(_motCounter+4)^0,w,c
  4030  001CEE  0A80               	xorlw	128
  4031  001CF0  0F7C               	addlw	-132
  4032  001CF2  A0D8               	btfss	status,0,c
  4033  001CF4  EF7E  F00E         	goto	u3391
  4034  001CF8  EF81  F00E         	goto	u3390
  4035  001CFC                     u3391:
  4036  001CFC  FFFF               	dw	65535	; assembler added errata NOP
  4037  001CFE  EF84  F00E         	goto	l3901
  4038  001D02                     u3390:
  4039  001D02  FFFF               	dw	65535	; assembler added errata NOP
  4040  001D04                     
  4041                           ;motors.c: 539:                 motCounter[2][0] = 0;
  4042  001D04  0E00               	movlw	0
  4043  001D06  6E6B               	movwf	(_motCounter+4)^0,c
  4044  001D08                     l3901:
  4045  001D08  FFFF               	dw	65535	; assembler added errata NOP
  4046                           
  4047                           ;motors.c: 542:             LATC = stepMot3[motCounter[2][0]];
  4048  001D0A  0E84               	movlw	low _stepMot3
  4049  001D0C  246B               	addwf	(_motCounter+4)^0,w,c
  4050  001D0E  6ED9               	movwf	fsr2l,c
  4051  001D10  6ADA               	clrf	fsr2h,c
  4052  001D12  0E00               	movlw	high _stepMot3
  4053  001D14  22DA               	addwfc	fsr2h,f,c
  4054  001D16  50DF               	movf	indf2,w,c
  4055  001D18  6E8B               	movwf	139,c	;volatile
  4056  001D1A                     l3903:
  4057  001D1A  FFFF               	dw	65535	; assembler added errata NOP
  4058  001D1C  EC0C  F012         	call	_stepMade	;wreg free
  4059  001D20  5012               	movf	?_stepMade^0,w,c
  4060  001D22  1013               	iorwf	(?_stepMade+1)^0,w,c
  4061  001D24  B4D8               	btfsc	status,2,c
  4062  001D26  EF97  F00E         	goto	u3401
  4063  001D2A  EF9A  F00E         	goto	u3400
  4064  001D2E                     u3401:
  4065  001D2E  FFFF               	dw	65535	; assembler added errata NOP
  4066  001D30  EF8D  F00E         	goto	l3903
  4067  001D34                     u3400:
  4068  001D34  FFFF               	dw	65535	; assembler added errata NOP
  4069  001D36  EF5A  F00E         	goto	l3889
  4070  001D3A                     l3907:
  4071  001D3A  FFFF               	dw	65535	; assembler added errata NOP
  4072                           
  4073                           ;motors.c: 518:     while(!returnTouch() || PORTDbits.RD7){
  4074  001D3C  EC58  F012         	call	_returnTouch	;wreg free
  4075  001D40  5012               	movf	?_returnTouch^0,w,c
  4076  001D42  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4077  001D44  B4D8               	btfsc	status,2,c
  4078  001D46  EFA7  F00E         	goto	u3411
  4079  001D4A  EFAA  F00E         	goto	u3410
  4080  001D4E                     u3411:
  4081  001D4E  FFFF               	dw	65535	; assembler added errata NOP
  4082  001D50  EF5F  F00E         	goto	l3891
  4083  001D54                     u3410:
  4084  001D54  FFFF               	dw	65535	; assembler added errata NOP
  4085  001D56  BE83               	btfsc	131,7,c	;volatile
  4086  001D58  EFB0  F00E         	goto	u3421
  4087  001D5C  EFB3  F00E         	goto	u3420
  4088  001D60                     u3421:
  4089  001D60  FFFF               	dw	65535	; assembler added errata NOP
  4090  001D62  EF5F  F00E         	goto	l3891
  4091  001D66                     u3420:
  4092  001D66                     l3911:
  4093  001D66  FFFF               	dw	65535	; assembler added errata NOP
  4094                           
  4095                           ;motors.c: 561:     stopADC();
  4096  001D68  EC98  F012         	call	_stopADC	;wreg free
  4097  001D6C                     
  4098                           ;motors.c: 564:     resetTouch();
  4099  001D6C  EC6E  F012         	call	_resetTouch	;wreg free
  4100  001D70                     
  4101                           ;motors.c: 567:     T0CONbits.TMR0ON = 0;
  4102  001D70  9ED5               	bcf	213,7,c	;volatile
  4103  001D72                     
  4104                           ;motors.c: 568:     T2CONbits.TMR2ON = 0;
  4105  001D72  94CA               	bcf	202,2,c	;volatile
  4106                           
  4107                           ;motors.c: 570:     TMR0 = 0;
  4108  001D74  0E00               	movlw	0
  4109  001D76  6ED7               	movwf	215,c	;volatile
  4110  001D78  0E00               	movlw	0
  4111  001D7A  6ED6               	movwf	214,c	;volatile
  4112                           
  4113                           ;motors.c: 571:     TMR2 = 0;
  4114  001D7C  0E00               	movlw	0
  4115  001D7E  6ECC               	movwf	204,c	;volatile
  4116  001D80                     
  4117                           ;motors.c: 574:     resetStep();
  4118  001D80  EC78  F012         	call	_resetStep	;wreg free
  4119  001D84                     
  4120                           ;motors.c: 575:     resetTherm();
  4121  001D84  EC73  F012         	call	_resetTherm	;wreg free
  4122  001D88                     
  4123                           ;motors.c: 578:     if(PORTDbits.RD7){
  4124  001D88  AE83               	btfss	131,7,c	;volatile
  4125  001D8A  EFC9  F00E         	goto	u3431
  4126  001D8E  EFCC  F00E         	goto	u3430
  4127  001D92                     u3431:
  4128  001D92  FFFF               	dw	65535	; assembler added errata NOP
  4129  001D94  EFD1  F00E         	goto	l201
  4130  001D98                     u3430:
  4131  001D98  FFFF               	dw	65535	; assembler added errata NOP
  4132  001D9A                     
  4133                           ;motors.c: 579:         tm0Error = 2;
  4134  001D9A  0E00               	movlw	0
  4135  001D9C  6E5A               	movwf	(_tm0Error+1)^0,c
  4136  001D9E  0E02               	movlw	2
  4137  001DA0  6E59               	movwf	_tm0Error^0,c
  4138  001DA2                     l201:
  4139  001DA2  FFFF               	dw	65535	; assembler added errata NOP
  4140                           
  4141                           ;motors.c: 582:     return(tm0Error);
  4142  001DA4  5059               	movf	_tm0Error^0,w,c
  4143  001DA6  0012               	return		;funcret
  4144  001DA8  FFFF               	dw	65535	; errata NOP
  4145  001DAA                     __end_of_touchObject:
  4146                           	callstack 0
  4147                           
  4148 ;; *************** function _stopADC *****************
  4149 ;; Defined at:
  4150 ;;		line 44 in file "adc.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;		None
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;		None
  4155 ;; Return value:  Size  Location     Type
  4156 ;;                  1    wreg      void 
  4157 ;; Registers used:
  4158 ;;		None
  4159 ;; Tracked objects:
  4160 ;;		On entry : 0/0
  4161 ;;		On exit  : 0/0
  4162 ;;		Unchanged: 0/0
  4163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4164 ;;      Params:         0       0       0       0       0       0       0
  4165 ;;      Locals:         0       0       0       0       0       0       0
  4166 ;;      Temps:          0       0       0       0       0       0       0
  4167 ;;      Totals:         0       0       0       0       0       0       0
  4168 ;;Total ram usage:        0 bytes
  4169 ;; Hardware stack levels used:    1
  4170 ;; Hardware stack levels required when called:    4
  4171 ;; This function calls:
  4172 ;;		Nothing
  4173 ;; This function is called by:
  4174 ;;		_touchObject
  4175 ;;		_touchTherm
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           	psect	text22
  4180  002530                     __ptext22:
  4181                           	callstack 0
  4182  002530                     _stopADC:
  4183                           	callstack 0
  4184  002530  FFFF               	dw	65535	; assembler added errata NOP
  4185  002532                     
  4186                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4187  002532  90C2               	bcf	194,0,c	;volatile
  4188  002534  0012               	return		;funcret
  4189  002536  FFFF               	dw	65535	; errata NOP
  4190  002538                     __end_of_stopADC:
  4191                           	callstack 0
  4192                           
  4193 ;; *************** function _startADC *****************
  4194 ;; Defined at:
  4195 ;;		line 36 in file "adc.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;		None
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;		None
  4200 ;; Return value:  Size  Location     Type
  4201 ;;                  1    wreg      void 
  4202 ;; Registers used:
  4203 ;;		None
  4204 ;; Tracked objects:
  4205 ;;		On entry : 0/0
  4206 ;;		On exit  : 0/0
  4207 ;;		Unchanged: 0/0
  4208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4209 ;;      Params:         0       0       0       0       0       0       0
  4210 ;;      Locals:         0       0       0       0       0       0       0
  4211 ;;      Temps:          0       0       0       0       0       0       0
  4212 ;;      Totals:         0       0       0       0       0       0       0
  4213 ;;Total ram usage:        0 bytes
  4214 ;; Hardware stack levels used:    1
  4215 ;; Hardware stack levels required when called:    4
  4216 ;; This function calls:
  4217 ;;		Nothing
  4218 ;; This function is called by:
  4219 ;;		_touchObject
  4220 ;;		_touchTherm
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           	psect	text23
  4225  0024D2                     __ptext23:
  4226                           	callstack 0
  4227  0024D2                     _startADC:
  4228                           	callstack 0
  4229  0024D2  FFFF               	dw	65535	; assembler added errata NOP
  4230  0024D4                     
  4231                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4232  0024D4  80C2               	bsf	194,0,c	;volatile
  4233                           
  4234                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4235  0024D6  84C2               	bsf	194,2,c	;volatile
  4236  0024D8  0012               	return		;funcret
  4237  0024DA  FFFF               	dw	65535	; errata NOP
  4238  0024DC                     __end_of_startADC:
  4239                           	callstack 0
  4240                           
  4241 ;; *************** function _returnTouch *****************
  4242 ;; Defined at:
  4243 ;;		line 51 in file "adc.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;		None
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;		None
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  2   17[COMRAM] unsigned int 
  4250 ;; Registers used:
  4251 ;;		None
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4257 ;;      Params:         2       0       0       0       0       0       0
  4258 ;;      Locals:         0       0       0       0       0       0       0
  4259 ;;      Temps:          0       0       0       0       0       0       0
  4260 ;;      Totals:         2       0       0       0       0       0       0
  4261 ;;Total ram usage:        2 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    4
  4264 ;; This function calls:
  4265 ;;		Nothing
  4266 ;; This function is called by:
  4267 ;;		_touchObject
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           	psect	text24
  4272  0024B0                     __ptext24:
  4273                           	callstack 0
  4274  0024B0                     _returnTouch:
  4275                           	callstack 0
  4276  0024B0  FFFF               	dw	65535	; assembler added errata NOP
  4277  0024B2                     
  4278                           ;adc.c: 52:     return touch_rel;
  4279  0024B2  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4280  0024B6  6A13               	clrf	(?_returnTouch+1)^0,c
  4281  0024B8  0012               	return		;funcret
  4282  0024BA  FFFF               	dw	65535	; errata NOP
  4283  0024BC                     __end_of_returnTouch:
  4284                           	callstack 0
  4285                           
  4286 ;; *************** function _resetTouch *****************
  4287 ;; Defined at:
  4288 ;;		line 65 in file "adc.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;		None
  4291 ;; Auto vars:     Size  Location     Type
  4292 ;;		None
  4293 ;; Return value:  Size  Location     Type
  4294 ;;                  1    wreg      void 
  4295 ;; Registers used:
  4296 ;;		wreg, status,2
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : 0/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4302 ;;      Params:         0       0       0       0       0       0       0
  4303 ;;      Locals:         0       0       0       0       0       0       0
  4304 ;;      Temps:          0       0       0       0       0       0       0
  4305 ;;      Totals:         0       0       0       0       0       0       0
  4306 ;;Total ram usage:        0 bytes
  4307 ;; Hardware stack levels used:    1
  4308 ;; Hardware stack levels required when called:    4
  4309 ;; This function calls:
  4310 ;;		Nothing
  4311 ;; This function is called by:
  4312 ;;		_touchObject
  4313 ;; This function uses a non-reentrant model
  4314 ;;
  4315                           
  4316                           	psect	text25
  4317  0024DC                     __ptext25:
  4318                           	callstack 0
  4319  0024DC                     _resetTouch:
  4320                           	callstack 0
  4321  0024DC  FFFF               	dw	65535	; assembler added errata NOP
  4322  0024DE                     
  4323                           ;adc.c: 66:     touch_rel = 0;
  4324  0024DE  0E00               	movlw	0
  4325  0024E0  6E65               	movwf	_touch_rel^0,c	;volatile
  4326  0024E2  0012               	return		;funcret
  4327  0024E4  FFFF               	dw	65535	; errata NOP
  4328  0024E6                     __end_of_resetTouch:
  4329                           	callstack 0
  4330                           
  4331 ;; *************** function _resetTherm *****************
  4332 ;; Defined at:
  4333 ;;		line 72 in file "adc.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;		None
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;		None
  4338 ;; Return value:  Size  Location     Type
  4339 ;;                  1    wreg      void 
  4340 ;; Registers used:
  4341 ;;		wreg, status,2
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4347 ;;      Params:         0       0       0       0       0       0       0
  4348 ;;      Locals:         0       0       0       0       0       0       0
  4349 ;;      Temps:          0       0       0       0       0       0       0
  4350 ;;      Totals:         0       0       0       0       0       0       0
  4351 ;;Total ram usage:        0 bytes
  4352 ;; Hardware stack levels used:    1
  4353 ;; Hardware stack levels required when called:    4
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		_touchObject
  4358 ;;		_touchTherm
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           	psect	text26
  4363  0024E6                     __ptext26:
  4364                           	callstack 0
  4365  0024E6                     _resetTherm:
  4366                           	callstack 0
  4367  0024E6  FFFF               	dw	65535	; assembler added errata NOP
  4368  0024E8                     
  4369                           ;adc.c: 73:     therm_rel = 0;
  4370  0024E8  0E00               	movlw	0
  4371  0024EA  6E64               	movwf	_therm_rel^0,c	;volatile
  4372  0024EC  0012               	return		;funcret
  4373  0024EE  FFFF               	dw	65535	; errata NOP
  4374  0024F0                     __end_of_resetTherm:
  4375                           	callstack 0
  4376                           
  4377 ;; *************** function _rotateObj *****************
  4378 ;; Defined at:
  4379 ;;		line 760 in file "motors.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  rotAngle        1    wreg     unsigned char 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  rotAngle        1    2[BANK0 ] unsigned char 
  4384 ;;  i               2    5[BANK0 ] unsigned int 
  4385 ;;  totStep         2    3[BANK0 ] int 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  1    wreg      void 
  4388 ;; Registers used:
  4389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4395 ;;      Params:         0       0       0       0       0       0       0
  4396 ;;      Locals:         0       5       0       0       0       0       0
  4397 ;;      Temps:          0       2       0       0       0       0       0
  4398 ;;      Totals:         0       7       0       0       0       0       0
  4399 ;;Total ram usage:        7 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    5
  4402 ;; This function calls:
  4403 ;;		___fldiv
  4404 ;;		___fltol
  4405 ;;		___xxtofl
  4406 ;;		_resetStep
  4407 ;;		_stepMade
  4408 ;; This function is called by:
  4409 ;;		_executeData
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413                           	psect	text27
  4414  001FAA                     __ptext27:
  4415                           	callstack 0
  4416  001FAA                     _rotateObj:
  4417                           	callstack 0
  4418  001FAA  FFFF               	dw	65535	; assembler added errata NOP
  4419                           
  4420                           ;incstack = 0
  4421                           ;rotateObj@rotAngle stored from wreg
  4422  001FAC  0100               	movlb	0	; () banked
  4423  001FAE  6FE8               	movwf	rotateObj@rotAngle& (0+255),b
  4424  001FB0                     
  4425                           ;motors.c: 761:     static const float stepAngle = 0.08789;;motors.c: 762:     static ch
      +                          ar rotSequence[] = {0b100100, 0b001100, 0b011000, 0b110000};;motors.c: 763:     unsigned
      +                           int i;;motors.c: 764:     int totStep = rotAngle/stepAngle;
  4426  001FB0  0EAC               	movlw	172
  4427  001FB2  6E24               	movwf	___fldiv@a^0,c
  4428  001FB4  0EFF               	movlw	255
  4429  001FB6  6E25               	movwf	(___fldiv@a+1)^0,c
  4430  001FB8  0EB3               	movlw	179
  4431  001FBA  6E26               	movwf	(___fldiv@a+2)^0,c
  4432  001FBC  0E3D               	movlw	61
  4433  001FBE  6E27               	movwf	(___fldiv@a+3)^0,c
  4434  001FC0  0100               	movlb	0	; () banked
  4435  001FC2  51E8               	movf	rotateObj@rotAngle& (0+255),w,b
  4436  001FC4  6E12               	movwf	___xxtofl@val^0,c
  4437  001FC6  6A13               	clrf	(___xxtofl@val+1)^0,c
  4438  001FC8  6A14               	clrf	(___xxtofl@val+2)^0,c
  4439  001FCA  6A15               	clrf	(___xxtofl@val+3)^0,c
  4440  001FCC  0E01               	movlw	1
  4441  001FCE  EC5F  F008         	call	___xxtofl
  4442  001FD2  C012  F020         	movff	?___xxtofl,___fldiv@b
  4443  001FD6  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4444  001FDA  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4445  001FDE  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4446  001FE2  EC09  F003         	call	___fldiv	;wreg free
  4447  001FE6  C020  F039         	movff	?___fldiv,___fltol@f1
  4448  001FEA  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4449  001FEE  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4450  001FF2  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4451  001FF6  EC98  F00C         	call	___fltol	;wreg free
  4452  001FFA  C039  F0E9         	movff	?___fltol,rotateObj@totStep
  4453  001FFE  C03A  F0EA         	movff	?___fltol+1,rotateObj@totStep+1
  4454  002002                     
  4455                           ;motors.c: 767:     for(i = 0; i < totStep; i++){
  4456  002002  0E00               	movlw	0
  4457  002004  0100               	movlb	0	; () banked
  4458  002006  6FEC               	movwf	(rotateObj@i+1)& (0+255),b
  4459  002008  0E00               	movlw	0
  4460  00200A  6FEB               	movwf	rotateObj@i& (0+255),b
  4461  00200C  EF2E  F010         	goto	l4017
  4462  002010                     l4005:
  4463  002010  FFFF               	dw	65535	; assembler added errata NOP
  4464                           
  4465                           ; BSR set to: 0
  4466                           ;motors.c: 769:         LATD &= 0xC3;
  4467  002012  0EC3               	movlw	195
  4468  002014  168C               	andwf	140,f,c	;volatile
  4469  002016                     
  4470                           ; BSR set to: 0
  4471                           ;motors.c: 771:         LATD |= rotSequence[i%4];
  4472  002016  0E03               	movlw	3
  4473  002018  15EB               	andwf	rotateObj@i& (0+255),w,b
  4474  00201A  6FE6               	movwf	??_rotateObj& (0+255),b
  4475  00201C  0E00               	movlw	0
  4476  00201E  15EC               	andwf	(rotateObj@i+1)& (0+255),w,b
  4477  002020  6FE7               	movwf	(??_rotateObj+1)& (0+255),b
  4478  002022  0E80               	movlw	low rotateObj@rotSequence
  4479  002024  25E6               	addwf	??_rotateObj& (0+255),w,b
  4480  002026  6ED9               	movwf	fsr2l,c
  4481  002028  0E00               	movlw	high rotateObj@rotSequence
  4482  00202A  21E7               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4483  00202C  6EDA               	movwf	fsr2h,c
  4484  00202E  50DF               	movf	indf2,w,c
  4485  002030  128C               	iorwf	140,f,c	;volatile
  4486  002032                     
  4487                           ; BSR set to: 0
  4488                           ;motors.c: 774:         T2CONbits.TMR2ON = 1;
  4489  002032  84CA               	bsf	202,2,c	;volatile
  4490  002034                     l4011:
  4491  002034  FFFF               	dw	65535	; assembler added errata NOP
  4492  002036  EC0C  F012         	call	_stepMade	;wreg free
  4493  00203A  5012               	movf	?_stepMade^0,w,c
  4494  00203C  1013               	iorwf	(?_stepMade+1)^0,w,c
  4495  00203E  B4D8               	btfsc	status,2,c
  4496  002040  EF24  F010         	goto	u3541
  4497  002044  EF27  F010         	goto	u3540
  4498  002048                     u3541:
  4499  002048  FFFF               	dw	65535	; assembler added errata NOP
  4500  00204A  EF1A  F010         	goto	l4011
  4501  00204E                     u3540:
  4502  00204E  FFFF               	dw	65535	; assembler added errata NOP
  4503  002050                     
  4504                           ;motors.c: 776:         T2CONbits.TMR2ON = 0;
  4505  002050  94CA               	bcf	202,2,c	;volatile
  4506  002052                     
  4507                           ;motors.c: 777:         TMR2 = 0;
  4508  002052  0E00               	movlw	0
  4509  002054  6ECC               	movwf	204,c	;volatile
  4510  002056                     
  4511                           ;motors.c: 778:     }
  4512  002056  0100               	movlb	0	; () banked
  4513  002058  4BEB               	infsnz	rotateObj@i& (0+255),f,b
  4514  00205A  2BEC               	incf	(rotateObj@i+1)& (0+255),f,b
  4515  00205C                     l4017:
  4516  00205C  FFFF               	dw	65535	; assembler added errata NOP
  4517                           
  4518                           ; BSR set to: 0
  4519  00205E  51E9               	movf	rotateObj@totStep& (0+255),w,b
  4520  002060  5DEB               	subwf	rotateObj@i& (0+255),w,b
  4521  002062  51EA               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4522  002064  59EC               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4523  002066  A0D8               	btfss	status,0,c
  4524  002068  EF38  F010         	goto	u3551
  4525  00206C  EF3B  F010         	goto	u3550
  4526  002070                     u3551:
  4527  002070  FFFF               	dw	65535	; assembler added errata NOP
  4528  002072  EF08  F010         	goto	l4005
  4529  002076                     u3550:
  4530  002076  FFFF               	dw	65535	; assembler added errata NOP
  4531  002078                     
  4532                           ; BSR set to: 0
  4533                           ;motors.c: 781:     TMR2 = 0;
  4534  002078  0E00               	movlw	0
  4535  00207A  6ECC               	movwf	204,c	;volatile
  4536  00207C                     
  4537                           ; BSR set to: 0
  4538                           ;motors.c: 784:     resetStep();
  4539  00207C  EC78  F012         	call	_resetStep	;wreg free
  4540  002080  0012               	return		;funcret
  4541  002082  FFFF               	dw	65535	; errata NOP
  4542  002084                     __end_of_rotateObj:
  4543                           	callstack 0
  4544                           
  4545 ;; *************** function ___xxtofl *****************
  4546 ;; Defined at:
  4547 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;  sign            1    wreg     unsigned char 
  4550 ;;  val             4   17[COMRAM] long 
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;  sign            1   25[COMRAM] unsigned char 
  4553 ;;  arg             4   27[COMRAM] unsigned long 
  4554 ;;  exp             1   26[COMRAM] unsigned char 
  4555 ;; Return value:  Size  Location     Type
  4556 ;;                  4   17[COMRAM] unsigned char 
  4557 ;; Registers used:
  4558 ;;		wreg, status,2, status,0
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4564 ;;      Params:         4       0       0       0       0       0       0
  4565 ;;      Locals:         6       0       0       0       0       0       0
  4566 ;;      Temps:          4       0       0       0       0       0       0
  4567 ;;      Totals:        14       0       0       0       0       0       0
  4568 ;;Total ram usage:       14 bytes
  4569 ;; Hardware stack levels used:    1
  4570 ;; Hardware stack levels required when called:    4
  4571 ;; This function calls:
  4572 ;;		Nothing
  4573 ;; This function is called by:
  4574 ;;		_rotateObj
  4575 ;; This function uses a non-reentrant model
  4576 ;;
  4577                           
  4578                           	psect	text28
  4579  0010BE                     __ptext28:
  4580                           	callstack 0
  4581  0010BE                     ___xxtofl:
  4582                           	callstack 0
  4583  0010BE  FFFF               	dw	65535	; assembler added errata NOP
  4584                           
  4585                           ;incstack = 0
  4586                           ;___xxtofl@sign stored from wreg
  4587  0010C0  6E1A               	movwf	___xxtofl@sign^0,c
  4588  0010C2  501A               	movf	___xxtofl@sign^0,w,c
  4589  0010C4  B4D8               	btfsc	status,2,c
  4590  0010C6  EF67  F008         	goto	u3041
  4591  0010CA  EF6A  F008         	goto	u3040
  4592  0010CE                     u3041:
  4593  0010CE  FFFF               	dw	65535	; assembler added errata NOP
  4594  0010D0  EF8F  F008         	goto	l1285
  4595  0010D4                     u3040:
  4596  0010D4  FFFF               	dw	65535	; assembler added errata NOP
  4597  0010D6  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4598  0010D8  EF73  F008         	goto	u3050
  4599  0010DC  EF70  F008         	goto	u3051
  4600  0010E0                     u3051:
  4601  0010E0  FFFF               	dw	65535	; assembler added errata NOP
  4602  0010E2  EF8F  F008         	goto	l1285
  4603  0010E6                     u3050:
  4604  0010E6  FFFF               	dw	65535	; assembler added errata NOP
  4605  0010E8  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4606  0010EC  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4607  0010F0  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4608  0010F4  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4609  0010F8  1E16               	comf	??___xxtofl^0,f,c
  4610  0010FA  1E17               	comf	(??___xxtofl+1)^0,f,c
  4611  0010FC  1E18               	comf	(??___xxtofl+2)^0,f,c
  4612  0010FE  1E19               	comf	(??___xxtofl+3)^0,f,c
  4613  001100  2A16               	incf	??___xxtofl^0,f,c
  4614  001102  0E00               	movlw	0
  4615  001104  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4616  001106  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4617  001108  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4618  00110A  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4619  00110E  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4620  001112  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4621  001116  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4622  00111A  EF98  F008         	goto	l3745
  4623  00111E                     l1285:
  4624  00111E  FFFF               	dw	65535	; assembler added errata NOP
  4625  001120  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4626  001124  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4627  001128  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4628  00112C  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4629  001130                     l3745:
  4630  001130  FFFF               	dw	65535	; assembler added errata NOP
  4631  001132  5012               	movf	___xxtofl@val^0,w,c
  4632  001134  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4633  001136  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4634  001138  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4635  00113A  A4D8               	btfss	status,2,c
  4636  00113C  EFA2  F008         	goto	u3061
  4637  001140  EFA5  F008         	goto	u3060
  4638  001144                     u3061:
  4639  001144  FFFF               	dw	65535	; assembler added errata NOP
  4640  001146  EFB0  F008         	goto	l3751
  4641  00114A                     u3060:
  4642  00114A  FFFF               	dw	65535	; assembler added errata NOP
  4643  00114C  0E00               	movlw	0
  4644  00114E  6E12               	movwf	?___xxtofl^0,c
  4645  001150  0E00               	movlw	0
  4646  001152  6E13               	movwf	(?___xxtofl+1)^0,c
  4647  001154  0E00               	movlw	0
  4648  001156  6E14               	movwf	(?___xxtofl+2)^0,c
  4649  001158  0E00               	movlw	0
  4650  00115A  6E15               	movwf	(?___xxtofl+3)^0,c
  4651  00115C  EF58  F009         	goto	l1288
  4652  001160                     l3751:
  4653  001160  FFFF               	dw	65535	; assembler added errata NOP
  4654  001162  0E96               	movlw	150
  4655  001164  6E1B               	movwf	___xxtofl@exp^0,c
  4656  001166  EFBC  F008         	goto	l3755
  4657  00116A                     l3753:
  4658  00116A  FFFF               	dw	65535	; assembler added errata NOP
  4659  00116C  2A1B               	incf	___xxtofl@exp^0,f,c
  4660  00116E  90D8               	bcf	status,0,c
  4661  001170  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4662  001172  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4663  001174  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4664  001176  321C               	rrcf	___xxtofl@arg^0,f,c
  4665  001178                     l3755:
  4666  001178  FFFF               	dw	65535	; assembler added errata NOP
  4667  00117A  0E00               	movlw	0
  4668  00117C  141C               	andwf	___xxtofl@arg^0,w,c
  4669  00117E  6E16               	movwf	??___xxtofl^0,c
  4670  001180  0E00               	movlw	0
  4671  001182  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4672  001184  6E17               	movwf	(??___xxtofl+1)^0,c
  4673  001186  0E00               	movlw	0
  4674  001188  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4675  00118A  6E18               	movwf	(??___xxtofl+2)^0,c
  4676  00118C  0EFE               	movlw	254
  4677  00118E  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4678  001190  6E19               	movwf	(??___xxtofl+3)^0,c
  4679  001192  5016               	movf	??___xxtofl^0,w,c
  4680  001194  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4681  001196  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4682  001198  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4683  00119A  A4D8               	btfss	status,2,c
  4684  00119C  EFD2  F008         	goto	u3071
  4685  0011A0  EFD5  F008         	goto	u3070
  4686  0011A4                     u3071:
  4687  0011A4  FFFF               	dw	65535	; assembler added errata NOP
  4688  0011A6  EFB5  F008         	goto	l3753
  4689  0011AA                     u3070:
  4690  0011AA  FFFF               	dw	65535	; assembler added errata NOP
  4691  0011AC  EFE5  F008         	goto	l1292
  4692  0011B0                     l3757:
  4693  0011B0  FFFF               	dw	65535	; assembler added errata NOP
  4694  0011B2  2A1B               	incf	___xxtofl@exp^0,f,c
  4695  0011B4  0E01               	movlw	1
  4696  0011B6  261C               	addwf	___xxtofl@arg^0,f,c
  4697  0011B8  0E00               	movlw	0
  4698  0011BA  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4699  0011BC  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4700  0011BE  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4701  0011C0  90D8               	bcf	status,0,c
  4702  0011C2  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4703  0011C4  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4704  0011C6  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4705  0011C8  321C               	rrcf	___xxtofl@arg^0,f,c
  4706  0011CA                     l1292:
  4707  0011CA  FFFF               	dw	65535	; assembler added errata NOP
  4708  0011CC  0E00               	movlw	0
  4709  0011CE  141C               	andwf	___xxtofl@arg^0,w,c
  4710  0011D0  6E16               	movwf	??___xxtofl^0,c
  4711  0011D2  0E00               	movlw	0
  4712  0011D4  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4713  0011D6  6E17               	movwf	(??___xxtofl+1)^0,c
  4714  0011D8  0E00               	movlw	0
  4715  0011DA  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4716  0011DC  6E18               	movwf	(??___xxtofl+2)^0,c
  4717  0011DE  0EFF               	movlw	255
  4718  0011E0  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4719  0011E2  6E19               	movwf	(??___xxtofl+3)^0,c
  4720  0011E4  5016               	movf	??___xxtofl^0,w,c
  4721  0011E6  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4722  0011E8  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4723  0011EA  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4724  0011EC  A4D8               	btfss	status,2,c
  4725  0011EE  EFFB  F008         	goto	u3081
  4726  0011F2  EFFE  F008         	goto	u3080
  4727  0011F6                     u3081:
  4728  0011F6  FFFF               	dw	65535	; assembler added errata NOP
  4729  0011F8  EFD8  F008         	goto	l3757
  4730  0011FC                     u3080:
  4731  0011FC  FFFF               	dw	65535	; assembler added errata NOP
  4732  0011FE  EF08  F009         	goto	l3765
  4733  001202                     l3763:
  4734  001202  FFFF               	dw	65535	; assembler added errata NOP
  4735  001204  061B               	decf	___xxtofl@exp^0,f,c
  4736  001206  90D8               	bcf	status,0,c
  4737  001208  361C               	rlcf	___xxtofl@arg^0,f,c
  4738  00120A  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4739  00120C  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4740  00120E  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4741  001210                     l3765:
  4742  001210  FFFF               	dw	65535	; assembler added errata NOP
  4743  001212  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4744  001214  EF0E  F009         	goto	u3091
  4745  001218  EF11  F009         	goto	u3090
  4746  00121C                     u3091:
  4747  00121C  FFFF               	dw	65535	; assembler added errata NOP
  4748  00121E  EF1B  F009         	goto	l1299
  4749  001222                     u3090:
  4750  001222  FFFF               	dw	65535	; assembler added errata NOP
  4751  001224  0E02               	movlw	2
  4752  001226  601B               	cpfslt	___xxtofl@exp^0,c
  4753  001228  EF18  F009         	goto	u3101
  4754  00122C  EF1B  F009         	goto	u3100
  4755  001230                     u3101:
  4756  001230  FFFF               	dw	65535	; assembler added errata NOP
  4757  001232  EF01  F009         	goto	l3763
  4758  001236                     u3100:
  4759  001236                     l1299:
  4760  001236  FFFF               	dw	65535	; assembler added errata NOP
  4761  001238  B01B               	btfsc	___xxtofl@exp^0,0,c
  4762  00123A  EF21  F009         	goto	u3111
  4763  00123E  EF24  F009         	goto	u3110
  4764  001242                     u3111:
  4765  001242  FFFF               	dw	65535	; assembler added errata NOP
  4766  001244  EF26  F009         	goto	l3771
  4767  001248                     u3110:
  4768  001248  FFFF               	dw	65535	; assembler added errata NOP
  4769  00124A  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4770  00124C                     l3771:
  4771  00124C  FFFF               	dw	65535	; assembler added errata NOP
  4772  00124E  90D8               	bcf	status,0,c
  4773  001250  321B               	rrcf	___xxtofl@exp^0,f,c
  4774  001252  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4775  001256  6A17               	clrf	(??___xxtofl+1)^0,c
  4776  001258  6A18               	clrf	(??___xxtofl+2)^0,c
  4777  00125A  6A19               	clrf	(??___xxtofl+3)^0,c
  4778  00125C  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4779  001260  6A18               	clrf	(??___xxtofl+2)^0,c
  4780  001262  6A17               	clrf	(??___xxtofl+1)^0,c
  4781  001264  6A16               	clrf	??___xxtofl^0,c
  4782  001266  5016               	movf	??___xxtofl^0,w,c
  4783  001268  121C               	iorwf	___xxtofl@arg^0,f,c
  4784  00126A  5017               	movf	(??___xxtofl+1)^0,w,c
  4785  00126C  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4786  00126E  5018               	movf	(??___xxtofl+2)^0,w,c
  4787  001270  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4788  001272  5019               	movf	(??___xxtofl+3)^0,w,c
  4789  001274  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4790  001276  501A               	movf	___xxtofl@sign^0,w,c
  4791  001278  B4D8               	btfsc	status,2,c
  4792  00127A  EF41  F009         	goto	u3121
  4793  00127E  EF44  F009         	goto	u3120
  4794  001282                     u3121:
  4795  001282  FFFF               	dw	65535	; assembler added errata NOP
  4796  001284  EF4F  F009         	goto	l3781
  4797  001288                     u3120:
  4798  001288  FFFF               	dw	65535	; assembler added errata NOP
  4799  00128A  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4800  00128C  EF4D  F009         	goto	u3130
  4801  001290  EF4A  F009         	goto	u3131
  4802  001294                     u3131:
  4803  001294  FFFF               	dw	65535	; assembler added errata NOP
  4804  001296  EF4F  F009         	goto	l3781
  4805  00129A                     u3130:
  4806  00129A  FFFF               	dw	65535	; assembler added errata NOP
  4807  00129C  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4808  00129E                     l3781:
  4809  00129E  FFFF               	dw	65535	; assembler added errata NOP
  4810  0012A0  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4811  0012A4  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4812  0012A8  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4813  0012AC  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  4814  0012B0                     l1288:
  4815  0012B0  FFFF               	dw	65535	; assembler added errata NOP
  4816  0012B2  0012               	return		;funcret
  4817  0012B4  FFFF               	dw	65535	; errata NOP
  4818  0012B6                     __end_of___xxtofl:
  4819                           	callstack 0
  4820                           
  4821 ;; *************** function ___fltol *****************
  4822 ;; Defined at:
  4823 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;  f1              4   56[COMRAM] unsigned char 
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;  exp1            1   65[COMRAM] unsigned char 
  4828 ;;  sign1           1   64[COMRAM] unsigned char 
  4829 ;; Return value:  Size  Location     Type
  4830 ;;                  4   56[COMRAM] long 
  4831 ;; Registers used:
  4832 ;;		wreg, status,2, status,0
  4833 ;; Tracked objects:
  4834 ;;		On entry : 0/0
  4835 ;;		On exit  : 0/0
  4836 ;;		Unchanged: 0/0
  4837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4838 ;;      Params:         4       0       0       0       0       0       0
  4839 ;;      Locals:         2       0       0       0       0       0       0
  4840 ;;      Temps:          4       0       0       0       0       0       0
  4841 ;;      Totals:        10       0       0       0       0       0       0
  4842 ;;Total ram usage:       10 bytes
  4843 ;; Hardware stack levels used:    1
  4844 ;; Hardware stack levels required when called:    4
  4845 ;; This function calls:
  4846 ;;		Nothing
  4847 ;; This function is called by:
  4848 ;;		_rotateObj
  4849 ;; This function uses a non-reentrant model
  4850 ;;
  4851                           
  4852                           	psect	text29
  4853  001930                     __ptext29:
  4854                           	callstack 0
  4855  001930                     ___fltol:
  4856                           	callstack 0
  4857  001930  FFFF               	dw	65535	; assembler added errata NOP
  4858  001932  343B               	rlcf	(___fltol@f1+2)^0,w,c
  4859  001934  343C               	rlcf	(___fltol@f1+3)^0,w,c
  4860  001936  6E42               	movwf	___fltol@exp1^0,c
  4861  001938  5042               	movf	___fltol@exp1^0,w,c
  4862  00193A  A4D8               	btfss	status,2,c
  4863  00193C  EFA2  F00C         	goto	u2971
  4864  001940  EFA5  F00C         	goto	u2970
  4865  001944                     u2971:
  4866  001944  FFFF               	dw	65535	; assembler added errata NOP
  4867  001946  EFB1  F00C         	goto	l3701
  4868  00194A                     u2970:
  4869  00194A  FFFF               	dw	65535	; assembler added errata NOP
  4870  00194C                     l3697:
  4871  00194C  FFFF               	dw	65535	; assembler added errata NOP
  4872  00194E  0E00               	movlw	0
  4873  001950  6E39               	movwf	?___fltol^0,c
  4874  001952  0E00               	movlw	0
  4875  001954  6E3A               	movwf	(?___fltol+1)^0,c
  4876  001956  0E00               	movlw	0
  4877  001958  6E3B               	movwf	(?___fltol+2)^0,c
  4878  00195A  0E00               	movlw	0
  4879  00195C  6E3C               	movwf	(?___fltol+3)^0,c
  4880  00195E  EF30  F00D         	goto	l927
  4881  001962                     l3701:
  4882  001962  FFFF               	dw	65535	; assembler added errata NOP
  4883  001964  C039  F03D         	movff	___fltol@f1,??___fltol
  4884  001968  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  4885  00196C  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  4886  001970  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  4887  001974  0E20               	movlw	32
  4888  001976  EFC3  F00C         	goto	u2980
  4889  00197A                     u2985:
  4890  00197A  FFFF               	dw	65535	; assembler added errata NOP
  4891  00197C  90D8               	bcf	status,0,c
  4892  00197E  3240               	rrcf	(??___fltol+3)^0,f,c
  4893  001980  323F               	rrcf	(??___fltol+2)^0,f,c
  4894  001982  323E               	rrcf	(??___fltol+1)^0,f,c
  4895  001984  323D               	rrcf	??___fltol^0,f,c
  4896  001986                     u2980:
  4897  001986  FFFF               	dw	65535	; assembler added errata NOP
  4898  001988  2EE8               	decfsz	wreg,f,c
  4899  00198A  EFBD  F00C         	goto	u2985
  4900  00198E  503D               	movf	??___fltol^0,w,c
  4901  001990  6E41               	movwf	___fltol@sign1^0,c
  4902  001992  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  4903  001994  0EFF               	movlw	255
  4904  001996  1639               	andwf	___fltol@f1^0,f,c
  4905  001998  0EFF               	movlw	255
  4906  00199A  163A               	andwf	(___fltol@f1+1)^0,f,c
  4907  00199C  0EFF               	movlw	255
  4908  00199E  163B               	andwf	(___fltol@f1+2)^0,f,c
  4909  0019A0  0E00               	movlw	0
  4910  0019A2  163C               	andwf	(___fltol@f1+3)^0,f,c
  4911  0019A4  0E96               	movlw	150
  4912  0019A6  5E42               	subwf	___fltol@exp1^0,f,c
  4913  0019A8  BE42               	btfsc	___fltol@exp1^0,7,c
  4914  0019AA  EFDC  F00C         	goto	u2990
  4915  0019AE  EFD9  F00C         	goto	u2991
  4916  0019B2                     u2991:
  4917  0019B2  FFFF               	dw	65535	; assembler added errata NOP
  4918  0019B4  EFF6  F00C         	goto	l3721
  4919  0019B8                     u2990:
  4920  0019B8  FFFF               	dw	65535	; assembler added errata NOP
  4921  0019BA  5042               	movf	___fltol@exp1^0,w,c
  4922  0019BC  0A80               	xorlw	128
  4923  0019BE  0F97               	addlw	151
  4924  0019C0  B0D8               	btfsc	status,0,c
  4925  0019C2  EFE5  F00C         	goto	u3001
  4926  0019C6  EFE8  F00C         	goto	u3000
  4927  0019CA                     u3001:
  4928  0019CA  FFFF               	dw	65535	; assembler added errata NOP
  4929  0019CC  EFEB  F00C         	goto	l3717
  4930  0019D0                     u3000:
  4931  0019D0  FFFF               	dw	65535	; assembler added errata NOP
  4932  0019D2  EFA6  F00C         	goto	l3697
  4933  0019D6                     l3717:
  4934  0019D6  FFFF               	dw	65535	; assembler added errata NOP
  4935  0019D8  90D8               	bcf	status,0,c
  4936  0019DA  323C               	rrcf	(___fltol@f1+3)^0,f,c
  4937  0019DC  323B               	rrcf	(___fltol@f1+2)^0,f,c
  4938  0019DE  323A               	rrcf	(___fltol@f1+1)^0,f,c
  4939  0019E0  3239               	rrcf	___fltol@f1^0,f,c
  4940  0019E2  3E42               	incfsz	___fltol@exp1^0,f,c
  4941  0019E4  EFEB  F00C         	goto	l3717
  4942  0019E8  EF14  F00D         	goto	l3731
  4943  0019EC                     l3721:
  4944  0019EC  FFFF               	dw	65535	; assembler added errata NOP
  4945  0019EE  0E1F               	movlw	31
  4946  0019F0  6442               	cpfsgt	___fltol@exp1^0,c
  4947  0019F2  EFFD  F00C         	goto	u3011
  4948  0019F6  EF00  F00D         	goto	u3010
  4949  0019FA                     u3011:
  4950  0019FA  FFFF               	dw	65535	; assembler added errata NOP
  4951  0019FC  EF0A  F00D         	goto	l3729
  4952  001A00                     u3010:
  4953  001A00  FFFF               	dw	65535	; assembler added errata NOP
  4954  001A02  EFA6  F00C         	goto	l3697
  4955  001A06                     l3727:
  4956  001A06  FFFF               	dw	65535	; assembler added errata NOP
  4957  001A08  90D8               	bcf	status,0,c
  4958  001A0A  3639               	rlcf	___fltol@f1^0,f,c
  4959  001A0C  363A               	rlcf	(___fltol@f1+1)^0,f,c
  4960  001A0E  363B               	rlcf	(___fltol@f1+2)^0,f,c
  4961  001A10  363C               	rlcf	(___fltol@f1+3)^0,f,c
  4962  001A12  0642               	decf	___fltol@exp1^0,f,c
  4963  001A14                     l3729:
  4964  001A14  FFFF               	dw	65535	; assembler added errata NOP
  4965  001A16  5042               	movf	___fltol@exp1^0,w,c
  4966  001A18  A4D8               	btfss	status,2,c
  4967  001A1A  EF11  F00D         	goto	u3021
  4968  001A1E  EF14  F00D         	goto	u3020
  4969  001A22                     u3021:
  4970  001A22  FFFF               	dw	65535	; assembler added errata NOP
  4971  001A24  EF03  F00D         	goto	l3727
  4972  001A28                     u3020:
  4973  001A28                     l3731:
  4974  001A28  FFFF               	dw	65535	; assembler added errata NOP
  4975  001A2A  5041               	movf	___fltol@sign1^0,w,c
  4976  001A2C  B4D8               	btfsc	status,2,c
  4977  001A2E  EF1B  F00D         	goto	u3031
  4978  001A32  EF1E  F00D         	goto	u3030
  4979  001A36                     u3031:
  4980  001A36  FFFF               	dw	65535	; assembler added errata NOP
  4981  001A38  EF27  F00D         	goto	l3735
  4982  001A3C                     u3030:
  4983  001A3C  FFFF               	dw	65535	; assembler added errata NOP
  4984  001A3E  1E3C               	comf	(___fltol@f1+3)^0,f,c
  4985  001A40  1E3B               	comf	(___fltol@f1+2)^0,f,c
  4986  001A42  1E3A               	comf	(___fltol@f1+1)^0,f,c
  4987  001A44  6C39               	negf	___fltol@f1^0,c
  4988  001A46  0E00               	movlw	0
  4989  001A48  223A               	addwfc	(___fltol@f1+1)^0,f,c
  4990  001A4A  223B               	addwfc	(___fltol@f1+2)^0,f,c
  4991  001A4C  223C               	addwfc	(___fltol@f1+3)^0,f,c
  4992  001A4E                     l3735:
  4993  001A4E  FFFF               	dw	65535	; assembler added errata NOP
  4994  001A50  C039  F039         	movff	___fltol@f1,?___fltol
  4995  001A54  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  4996  001A58  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  4997  001A5C  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  4998  001A60                     l927:
  4999  001A60  FFFF               	dw	65535	; assembler added errata NOP
  5000  001A62  0012               	return		;funcret
  5001  001A64  FFFF               	dw	65535	; errata NOP
  5002  001A66                     __end_of___fltol:
  5003                           	callstack 0
  5004                           
  5005 ;; *************** function ___fldiv *****************
  5006 ;; Defined at:
  5007 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5008 ;; Parameters:    Size  Location     Type
  5009 ;;  b               4   31[COMRAM] long 
  5010 ;;  a               4   35[COMRAM] long 
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;  grs             4   50[COMRAM] unsigned long 
  5013 ;;  rem             4   43[COMRAM] unsigned long 
  5014 ;;  new_exp         2   48[COMRAM] short 
  5015 ;;  aexp            1   55[COMRAM] unsigned char 
  5016 ;;  bexp            1   54[COMRAM] unsigned char 
  5017 ;;  sign            1   47[COMRAM] unsigned char 
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  4   31[COMRAM] unsigned char 
  5020 ;; Registers used:
  5021 ;;		wreg, status,2, status,0
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5027 ;;      Params:         8       0       0       0       0       0       0
  5028 ;;      Locals:        13       0       0       0       0       0       0
  5029 ;;      Temps:          4       0       0       0       0       0       0
  5030 ;;      Totals:        25       0       0       0       0       0       0
  5031 ;;Total ram usage:       25 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:    4
  5034 ;; This function calls:
  5035 ;;		Nothing
  5036 ;; This function is called by:
  5037 ;;		_rotateObj
  5038 ;; This function uses a non-reentrant model
  5039 ;;
  5040                           
  5041                           	psect	text30
  5042  000612                     __ptext30:
  5043                           	callstack 0
  5044  000612                     ___fldiv:
  5045                           	callstack 0
  5046  000612  FFFF               	dw	65535	; assembler added errata NOP
  5047  000614  5023               	movf	(___fldiv@b+3)^0,w,c
  5048  000616  0B80               	andlw	128
  5049  000618  6E30               	movwf	___fldiv@sign^0,c
  5050  00061A  5023               	movf	(___fldiv@b+3)^0,w,c
  5051  00061C  2423               	addwf	(___fldiv@b+3)^0,w,c
  5052  00061E  6E37               	movwf	___fldiv@bexp^0,c
  5053  000620  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5054  000622  EF15  F003         	goto	u2741
  5055  000626  EF18  F003         	goto	u2740
  5056  00062A                     u2741:
  5057  00062A  FFFF               	dw	65535	; assembler added errata NOP
  5058  00062C  EF1A  F003         	goto	l3563
  5059  000630                     u2740:
  5060  000630  FFFF               	dw	65535	; assembler added errata NOP
  5061  000632  8037               	bsf	___fldiv@bexp^0,0,c
  5062  000634                     l3563:
  5063  000634  FFFF               	dw	65535	; assembler added errata NOP
  5064  000636  5037               	movf	___fldiv@bexp^0,w,c
  5065  000638  B4D8               	btfsc	status,2,c
  5066  00063A  EF21  F003         	goto	u2751
  5067  00063E  EF24  F003         	goto	u2750
  5068  000642                     u2751:
  5069  000642  FFFF               	dw	65535	; assembler added errata NOP
  5070  000644  EF3D  F003         	goto	l3573
  5071  000648                     u2750:
  5072  000648  FFFF               	dw	65535	; assembler added errata NOP
  5073  00064A  2837               	incf	___fldiv@bexp^0,w,c
  5074  00064C  A4D8               	btfss	status,2,c
  5075  00064E  EF2B  F003         	goto	u2761
  5076  000652  EF2E  F003         	goto	u2760
  5077  000656                     u2761:
  5078  000656  FFFF               	dw	65535	; assembler added errata NOP
  5079  000658  EF37  F003         	goto	l3569
  5080  00065C                     u2760:
  5081  00065C  FFFF               	dw	65535	; assembler added errata NOP
  5082  00065E  0E00               	movlw	0
  5083  000660  6E20               	movwf	___fldiv@b^0,c
  5084  000662  0E00               	movlw	0
  5085  000664  6E21               	movwf	(___fldiv@b+1)^0,c
  5086  000666  0E00               	movlw	0
  5087  000668  6E22               	movwf	(___fldiv@b+2)^0,c
  5088  00066A  0E00               	movlw	0
  5089  00066C  6E23               	movwf	(___fldiv@b+3)^0,c
  5090  00066E                     l3569:
  5091  00066E  FFFF               	dw	65535	; assembler added errata NOP
  5092  000670  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5093  000672  0E00               	movlw	0
  5094  000674  6E23               	movwf	(___fldiv@b+3)^0,c
  5095  000676  EF46  F003         	goto	l3575
  5096  00067A                     l3573:
  5097  00067A  FFFF               	dw	65535	; assembler added errata NOP
  5098  00067C  0E00               	movlw	0
  5099  00067E  6E20               	movwf	___fldiv@b^0,c
  5100  000680  0E00               	movlw	0
  5101  000682  6E21               	movwf	(___fldiv@b+1)^0,c
  5102  000684  0E00               	movlw	0
  5103  000686  6E22               	movwf	(___fldiv@b+2)^0,c
  5104  000688  0E00               	movlw	0
  5105  00068A  6E23               	movwf	(___fldiv@b+3)^0,c
  5106  00068C                     l3575:
  5107  00068C  FFFF               	dw	65535	; assembler added errata NOP
  5108  00068E  5027               	movf	(___fldiv@a+3)^0,w,c
  5109  000690  0B80               	andlw	128
  5110  000692  1A30               	xorwf	___fldiv@sign^0,f,c
  5111  000694  5027               	movf	(___fldiv@a+3)^0,w,c
  5112  000696  2427               	addwf	(___fldiv@a+3)^0,w,c
  5113  000698  6E38               	movwf	___fldiv@aexp^0,c
  5114  00069A  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5115  00069C  EF52  F003         	goto	u2771
  5116  0006A0  EF55  F003         	goto	u2770
  5117  0006A4                     u2771:
  5118  0006A4  FFFF               	dw	65535	; assembler added errata NOP
  5119  0006A6  EF57  F003         	goto	l3583
  5120  0006AA                     u2770:
  5121  0006AA  FFFF               	dw	65535	; assembler added errata NOP
  5122  0006AC  8038               	bsf	___fldiv@aexp^0,0,c
  5123  0006AE                     l3583:
  5124  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5125  0006B0  5038               	movf	___fldiv@aexp^0,w,c
  5126  0006B2  B4D8               	btfsc	status,2,c
  5127  0006B4  EF5E  F003         	goto	u2781
  5128  0006B8  EF61  F003         	goto	u2780
  5129  0006BC                     u2781:
  5130  0006BC  FFFF               	dw	65535	; assembler added errata NOP
  5131  0006BE  EF7A  F003         	goto	l3593
  5132  0006C2                     u2780:
  5133  0006C2  FFFF               	dw	65535	; assembler added errata NOP
  5134  0006C4  2838               	incf	___fldiv@aexp^0,w,c
  5135  0006C6  A4D8               	btfss	status,2,c
  5136  0006C8  EF68  F003         	goto	u2791
  5137  0006CC  EF6B  F003         	goto	u2790
  5138  0006D0                     u2791:
  5139  0006D0  FFFF               	dw	65535	; assembler added errata NOP
  5140  0006D2  EF74  F003         	goto	l3589
  5141  0006D6                     u2790:
  5142  0006D6  FFFF               	dw	65535	; assembler added errata NOP
  5143  0006D8  0E00               	movlw	0
  5144  0006DA  6E24               	movwf	___fldiv@a^0,c
  5145  0006DC  0E00               	movlw	0
  5146  0006DE  6E25               	movwf	(___fldiv@a+1)^0,c
  5147  0006E0  0E00               	movlw	0
  5148  0006E2  6E26               	movwf	(___fldiv@a+2)^0,c
  5149  0006E4  0E00               	movlw	0
  5150  0006E6  6E27               	movwf	(___fldiv@a+3)^0,c
  5151  0006E8                     l3589:
  5152  0006E8  FFFF               	dw	65535	; assembler added errata NOP
  5153  0006EA  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5154  0006EC  0E00               	movlw	0
  5155  0006EE  6E27               	movwf	(___fldiv@a+3)^0,c
  5156  0006F0  EF83  F003         	goto	l3595
  5157  0006F4                     l3593:
  5158  0006F4  FFFF               	dw	65535	; assembler added errata NOP
  5159  0006F6  0E00               	movlw	0
  5160  0006F8  6E24               	movwf	___fldiv@a^0,c
  5161  0006FA  0E00               	movlw	0
  5162  0006FC  6E25               	movwf	(___fldiv@a+1)^0,c
  5163  0006FE  0E00               	movlw	0
  5164  000700  6E26               	movwf	(___fldiv@a+2)^0,c
  5165  000702  0E00               	movlw	0
  5166  000704  6E27               	movwf	(___fldiv@a+3)^0,c
  5167  000706                     l3595:
  5168  000706  FFFF               	dw	65535	; assembler added errata NOP
  5169  000708  5024               	movf	___fldiv@a^0,w,c
  5170  00070A  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5171  00070C  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5172  00070E  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5173  000710  A4D8               	btfss	status,2,c
  5174  000712  EF8D  F003         	goto	u2801
  5175  000716  EF90  F003         	goto	u2800
  5176  00071A                     u2801:
  5177  00071A  FFFF               	dw	65535	; assembler added errata NOP
  5178  00071C  EFAA  F003         	goto	l3607
  5179  000720                     u2800:
  5180  000720  FFFF               	dw	65535	; assembler added errata NOP
  5181  000722  0E00               	movlw	0
  5182  000724  6E20               	movwf	___fldiv@b^0,c
  5183  000726  0E00               	movlw	0
  5184  000728  6E21               	movwf	(___fldiv@b+1)^0,c
  5185  00072A  0E00               	movlw	0
  5186  00072C  6E22               	movwf	(___fldiv@b+2)^0,c
  5187  00072E  0E00               	movlw	0
  5188  000730  6E23               	movwf	(___fldiv@b+3)^0,c
  5189  000732  0E80               	movlw	128
  5190  000734  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5191  000736  0E7F               	movlw	127
  5192  000738  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5193  00073A                     l3601:
  5194  00073A  FFFF               	dw	65535	; assembler added errata NOP
  5195  00073C  5030               	movf	___fldiv@sign^0,w,c
  5196  00073E  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5197  000740  C020  F020         	movff	___fldiv@b,?___fldiv
  5198  000744  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5199  000748  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5200  00074C  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5201  000750  EF1F  F005         	goto	l1212
  5202  000754                     l3607:
  5203  000754  FFFF               	dw	65535	; assembler added errata NOP
  5204  000756  5037               	movf	___fldiv@bexp^0,w,c
  5205  000758  A4D8               	btfss	status,2,c
  5206  00075A  EFB1  F003         	goto	u2811
  5207  00075E  EFB4  F003         	goto	u2810
  5208  000762                     u2811:
  5209  000762  FFFF               	dw	65535	; assembler added errata NOP
  5210  000764  EFBF  F003         	goto	l3615
  5211  000768                     u2810:
  5212  000768  FFFF               	dw	65535	; assembler added errata NOP
  5213  00076A  0E00               	movlw	0
  5214  00076C  6E20               	movwf	?___fldiv^0,c
  5215  00076E  0E00               	movlw	0
  5216  000770  6E21               	movwf	(?___fldiv+1)^0,c
  5217  000772  0E00               	movlw	0
  5218  000774  6E22               	movwf	(?___fldiv+2)^0,c
  5219  000776  0E00               	movlw	0
  5220  000778  6E23               	movwf	(?___fldiv+3)^0,c
  5221  00077A  EF1F  F005         	goto	l1212
  5222  00077E                     l3615:
  5223  00077E  FFFF               	dw	65535	; assembler added errata NOP
  5224  000780  5038               	movf	___fldiv@aexp^0,w,c
  5225  000782  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5226  000786  6A29               	clrf	(??___fldiv+1)^0,c
  5227  000788  5E28               	subwf	??___fldiv^0,f,c
  5228  00078A  0E00               	movlw	0
  5229  00078C  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5230  00078E  0E7F               	movlw	127
  5231  000790  2428               	addwf	??___fldiv^0,w,c
  5232  000792  6E31               	movwf	___fldiv@new_exp^0,c
  5233  000794  0E00               	movlw	0
  5234  000796  2029               	addwfc	(??___fldiv+1)^0,w,c
  5235  000798  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5236  00079A  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5237  00079E  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5238  0007A2  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5239  0007A6  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5240  0007AA  0E00               	movlw	0
  5241  0007AC  6E20               	movwf	___fldiv@b^0,c
  5242  0007AE  0E00               	movlw	0
  5243  0007B0  6E21               	movwf	(___fldiv@b+1)^0,c
  5244  0007B2  0E00               	movlw	0
  5245  0007B4  6E22               	movwf	(___fldiv@b+2)^0,c
  5246  0007B6  0E00               	movlw	0
  5247  0007B8  6E23               	movwf	(___fldiv@b+3)^0,c
  5248  0007BA  0E00               	movlw	0
  5249  0007BC  6E33               	movwf	___fldiv@grs^0,c
  5250  0007BE  0E00               	movlw	0
  5251  0007C0  6E34               	movwf	(___fldiv@grs+1)^0,c
  5252  0007C2  0E00               	movlw	0
  5253  0007C4  6E35               	movwf	(___fldiv@grs+2)^0,c
  5254  0007C6  0E00               	movlw	0
  5255  0007C8  6E36               	movwf	(___fldiv@grs+3)^0,c
  5256  0007CA  0E00               	movlw	0
  5257  0007CC  6E38               	movwf	___fldiv@aexp^0,c
  5258  0007CE  EF2B  F004         	goto	l1214
  5259  0007D2                     l3625:
  5260  0007D2  FFFF               	dw	65535	; assembler added errata NOP
  5261  0007D4  5038               	movf	___fldiv@aexp^0,w,c
  5262  0007D6  B4D8               	btfsc	status,2,c
  5263  0007D8  EFF0  F003         	goto	u2821
  5264  0007DC  EFF3  F003         	goto	u2820
  5265  0007E0                     u2821:
  5266  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  5267  0007E2  EF0E  F004         	goto	l3633
  5268  0007E6                     u2820:
  5269  0007E6  FFFF               	dw	65535	; assembler added errata NOP
  5270  0007E8  90D8               	bcf	status,0,c
  5271  0007EA  362C               	rlcf	___fldiv@rem^0,f,c
  5272  0007EC  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5273  0007EE  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5274  0007F0  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5275  0007F2  90D8               	bcf	status,0,c
  5276  0007F4  3620               	rlcf	___fldiv@b^0,f,c
  5277  0007F6  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5278  0007F8  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5279  0007FA  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5280  0007FC  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5281  0007FE  EF03  F004         	goto	u2831
  5282  000802  EF06  F004         	goto	u2830
  5283  000806                     u2831:
  5284  000806  FFFF               	dw	65535	; assembler added errata NOP
  5285  000808  EF08  F004         	goto	l1217
  5286  00080C                     u2830:
  5287  00080C  FFFF               	dw	65535	; assembler added errata NOP
  5288  00080E  8020               	bsf	___fldiv@b^0,0,c
  5289  000810                     l1217:
  5290  000810  FFFF               	dw	65535	; assembler added errata NOP
  5291  000812  90D8               	bcf	status,0,c
  5292  000814  3633               	rlcf	___fldiv@grs^0,f,c
  5293  000816  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5294  000818  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5295  00081A  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5296  00081C                     l3633:
  5297  00081C  FFFF               	dw	65535	; assembler added errata NOP
  5298  00081E  5024               	movf	___fldiv@a^0,w,c
  5299  000820  5C2C               	subwf	___fldiv@rem^0,w,c
  5300  000822  5025               	movf	(___fldiv@a+1)^0,w,c
  5301  000824  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5302  000826  5026               	movf	(___fldiv@a+2)^0,w,c
  5303  000828  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5304  00082A  5027               	movf	(___fldiv@a+3)^0,w,c
  5305  00082C  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5306  00082E  A0D8               	btfss	status,0,c
  5307  000830  EF1C  F004         	goto	u2841
  5308  000834  EF1F  F004         	goto	u2840
  5309  000838                     u2841:
  5310  000838  FFFF               	dw	65535	; assembler added errata NOP
  5311  00083A  EF29  F004         	goto	l3639
  5312  00083E                     u2840:
  5313  00083E  FFFF               	dw	65535	; assembler added errata NOP
  5314  000840  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5315  000842  5024               	movf	___fldiv@a^0,w,c
  5316  000844  5E2C               	subwf	___fldiv@rem^0,f,c
  5317  000846  5025               	movf	(___fldiv@a+1)^0,w,c
  5318  000848  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5319  00084A  5026               	movf	(___fldiv@a+2)^0,w,c
  5320  00084C  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5321  00084E  5027               	movf	(___fldiv@a+3)^0,w,c
  5322  000850  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5323  000852                     l3639:
  5324  000852  FFFF               	dw	65535	; assembler added errata NOP
  5325  000854  2A38               	incf	___fldiv@aexp^0,f,c
  5326  000856                     l1214:
  5327  000856  FFFF               	dw	65535	; assembler added errata NOP
  5328  000858  0E19               	movlw	25
  5329  00085A  6438               	cpfsgt	___fldiv@aexp^0,c
  5330  00085C  EF32  F004         	goto	u2851
  5331  000860  EF35  F004         	goto	u2850
  5332  000864                     u2851:
  5333  000864  FFFF               	dw	65535	; assembler added errata NOP
  5334  000866  EFE9  F003         	goto	l3625
  5335  00086A                     u2850:
  5336  00086A  FFFF               	dw	65535	; assembler added errata NOP
  5337  00086C  502C               	movf	___fldiv@rem^0,w,c
  5338  00086E  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5339  000870  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5340  000872  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5341  000874  B4D8               	btfsc	status,2,c
  5342  000876  EF3F  F004         	goto	u2861
  5343  00087A  EF42  F004         	goto	u2860
  5344  00087E                     u2861:
  5345  00087E  FFFF               	dw	65535	; assembler added errata NOP
  5346  000880  EF5F  F004         	goto	l3651
  5347  000884                     u2860:
  5348  000884  FFFF               	dw	65535	; assembler added errata NOP
  5349  000886  8033               	bsf	___fldiv@grs^0,0,c
  5350  000888  EF5F  F004         	goto	l3651
  5351  00088C                     l3645:
  5352  00088C  FFFF               	dw	65535	; assembler added errata NOP
  5353  00088E  90D8               	bcf	status,0,c
  5354  000890  3620               	rlcf	___fldiv@b^0,f,c
  5355  000892  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5356  000894  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5357  000896  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5358  000898  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5359  00089A  EF51  F004         	goto	u2871
  5360  00089E  EF54  F004         	goto	u2870
  5361  0008A2                     u2871:
  5362  0008A2  FFFF               	dw	65535	; assembler added errata NOP
  5363  0008A4  EF56  F004         	goto	l1223
  5364  0008A8                     u2870:
  5365  0008A8  FFFF               	dw	65535	; assembler added errata NOP
  5366  0008AA  8020               	bsf	___fldiv@b^0,0,c
  5367  0008AC                     l1223:
  5368  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5369  0008AE  90D8               	bcf	status,0,c
  5370  0008B0  3633               	rlcf	___fldiv@grs^0,f,c
  5371  0008B2  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5372  0008B4  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5373  0008B6  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5374  0008B8  0631               	decf	___fldiv@new_exp^0,f,c
  5375  0008BA  A0D8               	btfss	status,0,c
  5376  0008BC  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5377  0008BE                     l3651:
  5378  0008BE  FFFF               	dw	65535	; assembler added errata NOP
  5379  0008C0  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5380  0008C2  EF65  F004         	goto	u2881
  5381  0008C6  EF68  F004         	goto	u2880
  5382  0008CA                     u2881:
  5383  0008CA  FFFF               	dw	65535	; assembler added errata NOP
  5384  0008CC  EF46  F004         	goto	l3645
  5385  0008D0                     u2880:
  5386  0008D0  FFFF               	dw	65535	; assembler added errata NOP
  5387  0008D2  0E00               	movlw	0
  5388  0008D4  6E38               	movwf	___fldiv@aexp^0,c
  5389  0008D6  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5390  0008D8  EF70  F004         	goto	u2891
  5391  0008DC  EF73  F004         	goto	u2890
  5392  0008E0                     u2891:
  5393  0008E0  FFFF               	dw	65535	; assembler added errata NOP
  5394  0008E2  EF9E  F004         	goto	l1225
  5395  0008E6                     u2890:
  5396  0008E6  FFFF               	dw	65535	; assembler added errata NOP
  5397  0008E8  0EFF               	movlw	255
  5398  0008EA  1433               	andwf	___fldiv@grs^0,w,c
  5399  0008EC  6E28               	movwf	??___fldiv^0,c
  5400  0008EE  0EFF               	movlw	255
  5401  0008F0  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5402  0008F2  6E29               	movwf	(??___fldiv+1)^0,c
  5403  0008F4  0EFF               	movlw	255
  5404  0008F6  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5405  0008F8  6E2A               	movwf	(??___fldiv+2)^0,c
  5406  0008FA  0E7F               	movlw	127
  5407  0008FC  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5408  0008FE  6E2B               	movwf	(??___fldiv+3)^0,c
  5409  000900  5028               	movf	??___fldiv^0,w,c
  5410  000902  1029               	iorwf	(??___fldiv+1)^0,w,c
  5411  000904  102A               	iorwf	(??___fldiv+2)^0,w,c
  5412  000906  102B               	iorwf	(??___fldiv+3)^0,w,c
  5413  000908  B4D8               	btfsc	status,2,c
  5414  00090A  EF89  F004         	goto	u2901
  5415  00090E  EF8C  F004         	goto	u2900
  5416  000912                     u2901:
  5417  000912  FFFF               	dw	65535	; assembler added errata NOP
  5418  000914  EF92  F004         	goto	l1226
  5419  000918                     u2900:
  5420  000918  FFFF               	dw	65535	; assembler added errata NOP
  5421  00091A                     l3659:
  5422  00091A  FFFF               	dw	65535	; assembler added errata NOP
  5423  00091C  0E01               	movlw	1
  5424  00091E  6E38               	movwf	___fldiv@aexp^0,c
  5425  000920  EF9E  F004         	goto	l1225
  5426  000924                     l1226:
  5427  000924  FFFF               	dw	65535	; assembler added errata NOP
  5428  000926  A020               	btfss	___fldiv@b^0,0,c
  5429  000928  EF98  F004         	goto	u2911
  5430  00092C  EF9B  F004         	goto	u2910
  5431  000930                     u2911:
  5432  000930  FFFF               	dw	65535	; assembler added errata NOP
  5433  000932  EF9E  F004         	goto	l1225
  5434  000936                     u2910:
  5435  000936  FFFF               	dw	65535	; assembler added errata NOP
  5436  000938  EF8D  F004         	goto	l3659
  5437  00093C                     l1225:
  5438  00093C  FFFF               	dw	65535	; assembler added errata NOP
  5439  00093E  5038               	movf	___fldiv@aexp^0,w,c
  5440  000940  B4D8               	btfsc	status,2,c
  5441  000942  EFA5  F004         	goto	u2921
  5442  000946  EFA8  F004         	goto	u2920
  5443  00094A                     u2921:
  5444  00094A  FFFF               	dw	65535	; assembler added errata NOP
  5445  00094C  EFCF  F004         	goto	l3671
  5446  000950                     u2920:
  5447  000950  FFFF               	dw	65535	; assembler added errata NOP
  5448  000952  0E01               	movlw	1
  5449  000954  2620               	addwf	___fldiv@b^0,f,c
  5450  000956  0E00               	movlw	0
  5451  000958  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5452  00095A  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5453  00095C  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5454  00095E  A023               	btfss	(___fldiv@b+3)^0,0,c
  5455  000960  EFB4  F004         	goto	u2931
  5456  000964  EFB7  F004         	goto	u2930
  5457  000968                     u2931:
  5458  000968  FFFF               	dw	65535	; assembler added errata NOP
  5459  00096A  EFCF  F004         	goto	l3671
  5460  00096E                     u2930:
  5461  00096E  FFFF               	dw	65535	; assembler added errata NOP
  5462  000970  C020  F028         	movff	___fldiv@b,??___fldiv
  5463  000974  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5464  000978  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5465  00097C  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5466  000980  342B               	rlcf	(??___fldiv+3)^0,w,c
  5467  000982  322B               	rrcf	(??___fldiv+3)^0,f,c
  5468  000984  322A               	rrcf	(??___fldiv+2)^0,f,c
  5469  000986  3229               	rrcf	(??___fldiv+1)^0,f,c
  5470  000988  3228               	rrcf	??___fldiv^0,f,c
  5471  00098A  C028  F020         	movff	??___fldiv,___fldiv@b
  5472  00098E  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5473  000992  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5474  000996  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5475  00099A  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5476  00099C  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5477  00099E                     l3671:
  5478  00099E  FFFF               	dw	65535	; assembler added errata NOP
  5479  0009A0  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5480  0009A2  EFDB  F004         	goto	u2941
  5481  0009A6  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5482  0009A8  E109               	bnz	u2940
  5483  0009AA  2831               	incf	___fldiv@new_exp^0,w,c
  5484  0009AC  A0D8               	btfss	status,0,c
  5485  0009AE  EFDB  F004         	goto	u2941
  5486  0009B2  EFDE  F004         	goto	u2940
  5487  0009B6                     u2941:
  5488  0009B6  FFFF               	dw	65535	; assembler added errata NOP
  5489  0009B8  EFEA  F004         	goto	l3675
  5490  0009BC                     u2940:
  5491  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  5492  0009BE  0E00               	movlw	0
  5493  0009C0  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5494  0009C2  6831               	setf	___fldiv@new_exp^0,c
  5495  0009C4  0E00               	movlw	0
  5496  0009C6  6E20               	movwf	___fldiv@b^0,c
  5497  0009C8  0E00               	movlw	0
  5498  0009CA  6E21               	movwf	(___fldiv@b+1)^0,c
  5499  0009CC  0E00               	movlw	0
  5500  0009CE  6E22               	movwf	(___fldiv@b+2)^0,c
  5501  0009D0  0E00               	movlw	0
  5502  0009D2  6E23               	movwf	(___fldiv@b+3)^0,c
  5503  0009D4                     l3675:
  5504  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  5505  0009D6  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5506  0009D8  EFF9  F004         	goto	u2950
  5507  0009DC  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5508  0009DE  E106               	bnz	u2951
  5509  0009E0  0431               	decf	___fldiv@new_exp^0,w,c
  5510  0009E2  B0D8               	btfsc	status,0,c
  5511  0009E4  EFF6  F004         	goto	u2951
  5512  0009E8  EFF9  F004         	goto	u2950
  5513  0009EC                     u2951:
  5514  0009EC  FFFF               	dw	65535	; assembler added errata NOP
  5515  0009EE  EF08  F005         	goto	l3679
  5516  0009F2                     u2950:
  5517  0009F2  FFFF               	dw	65535	; assembler added errata NOP
  5518  0009F4  0E00               	movlw	0
  5519  0009F6  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5520  0009F8  0E00               	movlw	0
  5521  0009FA  6E31               	movwf	___fldiv@new_exp^0,c
  5522  0009FC  0E00               	movlw	0
  5523  0009FE  6E20               	movwf	___fldiv@b^0,c
  5524  000A00  0E00               	movlw	0
  5525  000A02  6E21               	movwf	(___fldiv@b+1)^0,c
  5526  000A04  0E00               	movlw	0
  5527  000A06  6E22               	movwf	(___fldiv@b+2)^0,c
  5528  000A08  0E00               	movlw	0
  5529  000A0A  6E23               	movwf	(___fldiv@b+3)^0,c
  5530  000A0C  0E00               	movlw	0
  5531  000A0E  6E30               	movwf	___fldiv@sign^0,c
  5532  000A10                     l3679:
  5533  000A10  FFFF               	dw	65535	; assembler added errata NOP
  5534  000A12  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5535  000A16  A037               	btfss	___fldiv@bexp^0,0,c
  5536  000A18  EF10  F005         	goto	u2961
  5537  000A1C  EF13  F005         	goto	u2960
  5538  000A20                     u2961:
  5539  000A20  FFFF               	dw	65535	; assembler added errata NOP
  5540  000A22  EF17  F005         	goto	l3685
  5541  000A26                     u2960:
  5542  000A26  FFFF               	dw	65535	; assembler added errata NOP
  5543  000A28  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5544  000A2A  EF19  F005         	goto	l3687
  5545  000A2E                     l3685:
  5546  000A2E  FFFF               	dw	65535	; assembler added errata NOP
  5547  000A30  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5548  000A32                     l3687:
  5549  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5550  000A34  90D8               	bcf	status,0,c
  5551  000A36  3037               	rrcf	___fldiv@bexp^0,w,c
  5552  000A38  6E23               	movwf	(___fldiv@b+3)^0,c
  5553  000A3A  EF9D  F003         	goto	l3601
  5554  000A3E                     l1212:
  5555  000A3E  FFFF               	dw	65535	; assembler added errata NOP
  5556  000A40  0012               	return		;funcret
  5557  000A42  FFFF               	dw	65535	; errata NOP
  5558  000A44                     __end_of___fldiv:
  5559                           	callstack 0
  5560                           
  5561 ;; *************** function _releaseObj *****************
  5562 ;; Defined at:
  5563 ;;		line 803 in file "motors.c"
  5564 ;; Parameters:    Size  Location     Type
  5565 ;;		None
  5566 ;; Auto vars:     Size  Location     Type
  5567 ;;		None
  5568 ;; Return value:  Size  Location     Type
  5569 ;;                  1    wreg      void 
  5570 ;; Registers used:
  5571 ;;		wreg, status,2, status,0, cstack
  5572 ;; Tracked objects:
  5573 ;;		On entry : 0/0
  5574 ;;		On exit  : 0/0
  5575 ;;		Unchanged: 0/0
  5576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5577 ;;      Params:         0       0       0       0       0       0       0
  5578 ;;      Locals:         0       0       0       0       0       0       0
  5579 ;;      Temps:          0       0       0       0       0       0       0
  5580 ;;      Totals:         0       0       0       0       0       0       0
  5581 ;;Total ram usage:        0 bytes
  5582 ;; Hardware stack levels used:    1
  5583 ;; Hardware stack levels required when called:    5
  5584 ;; This function calls:
  5585 ;;		_stepMade
  5586 ;; This function is called by:
  5587 ;;		_executeData
  5588 ;; This function uses a non-reentrant model
  5589 ;;
  5590                           
  5591                           	psect	text31
  5592  002342                     __ptext31:
  5593                           	callstack 0
  5594  002342                     _releaseObj:
  5595                           	callstack 0
  5596  002342  FFFF               	dw	65535	; assembler added errata NOP
  5597  002344                     
  5598                           ;motors.c: 804:     LATDbits.LATD1 = 0;
  5599  002344  928C               	bcf	140,1,c	;volatile
  5600                           
  5601                           ;motors.c: 807:     T2CONbits.TMR2ON = 1;
  5602  002346  84CA               	bsf	202,2,c	;volatile
  5603  002348                     l4031:
  5604  002348  FFFF               	dw	65535	; assembler added errata NOP
  5605  00234A  EC0C  F012         	call	_stepMade	;wreg free
  5606  00234E  5012               	movf	?_stepMade^0,w,c
  5607  002350  1013               	iorwf	(?_stepMade+1)^0,w,c
  5608  002352  B4D8               	btfsc	status,2,c
  5609  002354  EFAE  F011         	goto	u3571
  5610  002358  EFB1  F011         	goto	u3570
  5611  00235C                     u3571:
  5612  00235C  FFFF               	dw	65535	; assembler added errata NOP
  5613  00235E  EFA4  F011         	goto	l4031
  5614  002362                     u3570:
  5615  002362  FFFF               	dw	65535	; assembler added errata NOP
  5616  002364                     
  5617                           ;motors.c: 809:     T2CONbits.TMR2ON = 0;
  5618  002364  94CA               	bcf	202,2,c	;volatile
  5619  002366                     
  5620                           ;motors.c: 810:     TMR2 = 0;
  5621  002366  0E00               	movlw	0
  5622  002368  6ECC               	movwf	204,c	;volatile
  5623  00236A  0012               	return		;funcret
  5624  00236C  FFFF               	dw	65535	; errata NOP
  5625  00236E                     __end_of_releaseObj:
  5626                           	callstack 0
  5627                           
  5628 ;; *************** function _pickObject *****************
  5629 ;; Defined at:
  5630 ;;		line 790 in file "motors.c"
  5631 ;; Parameters:    Size  Location     Type
  5632 ;;		None
  5633 ;; Auto vars:     Size  Location     Type
  5634 ;;		None
  5635 ;; Return value:  Size  Location     Type
  5636 ;;                  1    wreg      void 
  5637 ;; Registers used:
  5638 ;;		wreg, status,2, status,0, cstack
  5639 ;; Tracked objects:
  5640 ;;		On entry : 0/0
  5641 ;;		On exit  : 0/0
  5642 ;;		Unchanged: 0/0
  5643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5644 ;;      Params:         0       0       0       0       0       0       0
  5645 ;;      Locals:         0       0       0       0       0       0       0
  5646 ;;      Temps:          0       0       0       0       0       0       0
  5647 ;;      Totals:         0       0       0       0       0       0       0
  5648 ;;Total ram usage:        0 bytes
  5649 ;; Hardware stack levels used:    1
  5650 ;; Hardware stack levels required when called:    5
  5651 ;; This function calls:
  5652 ;;		_stepMade
  5653 ;; This function is called by:
  5654 ;;		_executeData
  5655 ;; This function uses a non-reentrant model
  5656 ;;
  5657                           
  5658                           	psect	text32
  5659  00236E                     __ptext32:
  5660                           	callstack 0
  5661  00236E                     _pickObject:
  5662                           	callstack 0
  5663  00236E  FFFF               	dw	65535	; assembler added errata NOP
  5664  002370                     
  5665                           ;motors.c: 791:     LATDbits.LATD1 = 1;
  5666  002370  828C               	bsf	140,1,c	;volatile
  5667                           
  5668                           ;motors.c: 794:     T2CONbits.TMR2ON = 1;
  5669  002372  84CA               	bsf	202,2,c	;volatile
  5670  002374                     l4025:
  5671  002374  FFFF               	dw	65535	; assembler added errata NOP
  5672  002376  EC0C  F012         	call	_stepMade	;wreg free
  5673  00237A  5012               	movf	?_stepMade^0,w,c
  5674  00237C  1013               	iorwf	(?_stepMade+1)^0,w,c
  5675  00237E  B4D8               	btfsc	status,2,c
  5676  002380  EFC4  F011         	goto	u3561
  5677  002384  EFC7  F011         	goto	u3560
  5678  002388                     u3561:
  5679  002388  FFFF               	dw	65535	; assembler added errata NOP
  5680  00238A  EFBA  F011         	goto	l4025
  5681  00238E                     u3560:
  5682  00238E  FFFF               	dw	65535	; assembler added errata NOP
  5683  002390                     
  5684                           ;motors.c: 796:     T2CONbits.TMR2ON = 0;
  5685  002390  94CA               	bcf	202,2,c	;volatile
  5686  002392                     
  5687                           ;motors.c: 797:     TMR2 = 0;
  5688  002392  0E00               	movlw	0
  5689  002394  6ECC               	movwf	204,c	;volatile
  5690  002396  0012               	return		;funcret
  5691  002398  FFFF               	dw	65535	; errata NOP
  5692  00239A                     __end_of_pickObject:
  5693                           	callstack 0
  5694                           
  5695 ;; *************** function _moveToPoint *****************
  5696 ;; Defined at:
  5697 ;;		line 315 in file "motors.c"
  5698 ;; Parameters:    Size  Location     Type
  5699 ;;  x1              2   20[COMRAM] int 
  5700 ;;  y1              2   22[COMRAM] int 
  5701 ;;  x2              2   24[COMRAM] int 
  5702 ;;  y2              2   26[COMRAM] int 
  5703 ;; Auto vars:     Size  Location     Type
  5704 ;;  keepMovingY     1   33[COMRAM] unsigned char 
  5705 ;;  keepMovingX     1   32[COMRAM] unsigned char 
  5706 ;;  MOT2Directio    1   31[COMRAM] unsigned char 
  5707 ;;  MOT1Directio    1   30[COMRAM] unsigned char 
  5708 ;; Return value:  Size  Location     Type
  5709 ;;                  1    wreg      unsigned char 
  5710 ;; Registers used:
  5711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5712 ;; Tracked objects:
  5713 ;;		On entry : 0/0
  5714 ;;		On exit  : 0/0
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5717 ;;      Params:         8       0       0       0       0       0       0
  5718 ;;      Locals:         4       0       0       0       0       0       0
  5719 ;;      Temps:          2       0       0       0       0       0       0
  5720 ;;      Totals:        14       0       0       0       0       0       0
  5721 ;;Total ram usage:       14 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; Hardware stack levels required when called:    5
  5724 ;; This function calls:
  5725 ;;		_resetStep
  5726 ;;		_stepCounter
  5727 ;;		_stepMade
  5728 ;; This function is called by:
  5729 ;;		_executeData
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           	psect	text33
  5734  000A44                     __ptext33:
  5735                           	callstack 0
  5736  000A44                     _moveToPoint:
  5737                           	callstack 0
  5738  000A44  FFFF               	dw	65535	; assembler added errata NOP
  5739  000A46                     
  5740                           ;motors.c: 317:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 320:     if(x2
      +                           > maxX || y2 > maxY){
  5741  000A46  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5742  000A48  E107               	bnz	u3141
  5743  000A4A  0ECA               	movlw	202
  5744  000A4C  5C19               	subwf	moveToPoint@x2^0,w,c
  5745  000A4E  B0D8               	btfsc	status,0,c
  5746  000A50  EF2C  F005         	goto	u3141
  5747  000A54  EF2F  F005         	goto	u3140
  5748  000A58                     u3141:
  5749  000A58  FFFF               	dw	65535	; assembler added errata NOP
  5750  000A5A  EF3C  F005         	goto	l3789
  5751  000A5E                     u3140:
  5752  000A5E  FFFF               	dw	65535	; assembler added errata NOP
  5753  000A60  501C               	movf	(moveToPoint@y2+1)^0,w,c
  5754  000A62  E10A               	bnz	u3150
  5755  000A64  0ECA               	movlw	202
  5756  000A66  5C1B               	subwf	moveToPoint@y2^0,w,c
  5757  000A68  A0D8               	btfss	status,0,c
  5758  000A6A  EF39  F005         	goto	u3151
  5759  000A6E  EF3C  F005         	goto	u3150
  5760  000A72                     u3151:
  5761  000A72  FFFF               	dw	65535	; assembler added errata NOP
  5762  000A74  EF40  F005         	goto	l3793
  5763  000A78                     u3150:
  5764  000A78                     l3789:
  5765  000A78  FFFF               	dw	65535	; assembler added errata NOP
  5766                           
  5767                           ;motors.c: 321:         return(5);
  5768  000A7A  0E05               	movlw	5
  5769  000A7C  EFDC  F006         	goto	l157
  5770  000A80                     l3793:
  5771  000A80  FFFF               	dw	65535	; assembler added errata NOP
  5772                           
  5773                           ;motors.c: 342:     if((x2 - x1) > 0){
  5774  000A82  5015               	movf	moveToPoint@x1^0,w,c
  5775  000A84  5C19               	subwf	moveToPoint@x2^0,w,c
  5776  000A86  6E1D               	movwf	??_moveToPoint^0,c
  5777  000A88  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5778  000A8A  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5779  000A8C  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5780  000A8E  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5781  000A90  EF52  F005         	goto	u3161
  5782  000A94  501E               	movf	(??_moveToPoint+1)^0,w,c
  5783  000A96  E109               	bnz	u3160
  5784  000A98  041D               	decf	??_moveToPoint^0,w,c
  5785  000A9A  A0D8               	btfss	status,0,c
  5786  000A9C  EF52  F005         	goto	u3161
  5787  000AA0  EF55  F005         	goto	u3160
  5788  000AA4                     u3161:
  5789  000AA4  FFFF               	dw	65535	; assembler added errata NOP
  5790  000AA6  EF5C  F005         	goto	l158
  5791  000AAA                     u3160:
  5792  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  5793  000AAC                     
  5794                           ;motors.c: 343:         motCounter[0][1] = 1;
  5795  000AAC  0E01               	movlw	1
  5796  000AAE  6E68               	movwf	(_motCounter+1)^0,c
  5797                           
  5798                           ;motors.c: 344:         MOT1Direction = 1;
  5799  000AB0  0E01               	movlw	1
  5800  000AB2  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5801                           
  5802                           ;motors.c: 345:     }else{
  5803  000AB4  EF60  F005         	goto	l3799
  5804  000AB8                     l158:
  5805  000AB8  FFFF               	dw	65535	; assembler added errata NOP
  5806                           
  5807                           ;motors.c: 346:         motCounter[0][1] = -1;
  5808  000ABA  6868               	setf	(_motCounter+1)^0,c
  5809  000ABC                     
  5810                           ;motors.c: 347:         MOT1Direction = 0;
  5811  000ABC  0E00               	movlw	0
  5812  000ABE  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5813  000AC0                     l3799:
  5814  000AC0  FFFF               	dw	65535	; assembler added errata NOP
  5815                           
  5816                           ;motors.c: 350:     if((y2 - y1) > 0){
  5817  000AC2  5017               	movf	moveToPoint@y1^0,w,c
  5818  000AC4  5C1B               	subwf	moveToPoint@y2^0,w,c
  5819  000AC6  6E1D               	movwf	??_moveToPoint^0,c
  5820  000AC8  5018               	movf	(moveToPoint@y1+1)^0,w,c
  5821  000ACA  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  5822  000ACC  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5823  000ACE  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5824  000AD0  EF72  F005         	goto	u3171
  5825  000AD4  501E               	movf	(??_moveToPoint+1)^0,w,c
  5826  000AD6  E109               	bnz	u3170
  5827  000AD8  041D               	decf	??_moveToPoint^0,w,c
  5828  000ADA  A0D8               	btfss	status,0,c
  5829  000ADC  EF72  F005         	goto	u3171
  5830  000AE0  EF75  F005         	goto	u3170
  5831  000AE4                     u3171:
  5832  000AE4  FFFF               	dw	65535	; assembler added errata NOP
  5833  000AE6  EF7C  F005         	goto	l160
  5834  000AEA                     u3170:
  5835  000AEA  FFFF               	dw	65535	; assembler added errata NOP
  5836  000AEC                     
  5837                           ;motors.c: 351:         motCounter[1][1] = 1;
  5838  000AEC  0E01               	movlw	1
  5839  000AEE  6E6A               	movwf	(_motCounter+3)^0,c
  5840                           
  5841                           ;motors.c: 352:         MOT2Direction = 1;
  5842  000AF0  0E01               	movlw	1
  5843  000AF2  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5844                           
  5845                           ;motors.c: 353:     }else{
  5846  000AF4  EF80  F005         	goto	l161
  5847  000AF8                     l160:
  5848  000AF8  FFFF               	dw	65535	; assembler added errata NOP
  5849                           
  5850                           ;motors.c: 354:         motCounter[2][1] = -1;
  5851  000AFA  686C               	setf	(_motCounter+5)^0,c
  5852  000AFC                     
  5853                           ;motors.c: 355:         MOT2Direction = 0;
  5854  000AFC  0E00               	movlw	0
  5855  000AFE  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5856  000B00                     l161:
  5857  000B00  FFFF               	dw	65535	; assembler added errata NOP
  5858                           
  5859                           ;motors.c: 360:     unsigned char keepMovingX = 1;
  5860  000B02  0E01               	movlw	1
  5861  000B04  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5862                           
  5863                           ;motors.c: 361:     unsigned char keepMovingY = 1;
  5864  000B06  0E01               	movlw	1
  5865  000B08  6E22               	movwf	moveToPoint@keepMovingY^0,c
  5866  000B0A                     
  5867                           ;motors.c: 364:     T2CONbits.TMR2ON = 1;
  5868  000B0A  84CA               	bsf	202,2,c	;volatile
  5869                           
  5870                           ;motors.c: 366:     tm0Error = 0;
  5871  000B0C  0E00               	movlw	0
  5872  000B0E  6E5A               	movwf	(_tm0Error+1)^0,c
  5873  000B10  0E00               	movlw	0
  5874  000B12  6E59               	movwf	_tm0Error^0,c
  5875                           
  5876                           ;motors.c: 367:     tm0Limit = 100;
  5877  000B14  0E64               	movlw	100
  5878  000B16  6E66               	movwf	_tm0Limit^0,c
  5879  000B18                     
  5880                           ;motors.c: 368:     T0CONbits.TMR0ON = 1;
  5881  000B18  8ED5               	bsf	213,7,c	;volatile
  5882                           
  5883                           ;motors.c: 370:     while(keepMovingX || keepMovingY){
  5884  000B1A  EFBC  F006         	goto	l3871
  5885  000B1E                     l3809:
  5886  000B1E  FFFF               	dw	65535	; assembler added errata NOP
  5887                           
  5888                           ;motors.c: 373:         if(tm0Error){
  5889  000B20  5059               	movf	_tm0Error^0,w,c
  5890  000B22  105A               	iorwf	(_tm0Error+1)^0,w,c
  5891  000B24  B4D8               	btfsc	status,2,c
  5892  000B26  EF97  F005         	goto	u3181
  5893  000B2A  EF9A  F005         	goto	u3180
  5894  000B2E                     u3181:
  5895  000B2E  FFFF               	dw	65535	; assembler added errata NOP
  5896  000B30  EFA1  F005         	goto	l3813
  5897  000B34                     u3180:
  5898  000B34  FFFF               	dw	65535	; assembler added errata NOP
  5899  000B36                     
  5900                           ;motors.c: 379:             tm0Error = 4;
  5901  000B36  0E00               	movlw	0
  5902  000B38  6E5A               	movwf	(_tm0Error+1)^0,c
  5903  000B3A  0E04               	movlw	4
  5904  000B3C  6E59               	movwf	_tm0Error^0,c
  5905                           
  5906                           ;motors.c: 380:             break;
  5907  000B3E  EFD0  F006         	goto	l165
  5908  000B42                     l3813:
  5909  000B42  FFFF               	dw	65535	; assembler added errata NOP
  5910                           
  5911                           ;motors.c: 388:         if(MOT1Direction == 1){
  5912  000B44  041F               	decf	moveToPoint@MOT1Direction^0,w,c
  5913  000B46  A4D8               	btfss	status,2,c
  5914  000B48  EFA8  F005         	goto	u3191
  5915  000B4C  EFAB  F005         	goto	u3190
  5916  000B50                     u3191:
  5917  000B50  FFFF               	dw	65535	; assembler added errata NOP
  5918  000B52  EFEA  F005         	goto	l3827
  5919  000B56                     u3190:
  5920  000B56  FFFF               	dw	65535	; assembler added errata NOP
  5921  000B58                     
  5922                           ;motors.c: 389:             if(x1 + stepCounter() >= x2){
  5923  000B58  EC5E  F012         	call	_stepCounter	;wreg free
  5924  000B5C  5015               	movf	moveToPoint@x1^0,w,c
  5925  000B5E  2612               	addwf	?_stepCounter^0,f,c
  5926  000B60  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5927  000B62  2213               	addwfc	(?_stepCounter+1)^0,f,c
  5928  000B64  5019               	movf	moveToPoint@x2^0,w,c
  5929  000B66  5C12               	subwf	?_stepCounter^0,w,c
  5930  000B68  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5931  000B6A  5813               	subwfb	(?_stepCounter+1)^0,w,c
  5932  000B6C  A0D8               	btfss	status,0,c
  5933  000B6E  EFBB  F005         	goto	u3201
  5934  000B72  EFBE  F005         	goto	u3200
  5935  000B76                     u3201:
  5936  000B76  FFFF               	dw	65535	; assembler added errata NOP
  5937  000B78  EFC4  F005         	goto	l3819
  5938  000B7C                     u3200:
  5939  000B7C  FFFF               	dw	65535	; assembler added errata NOP
  5940  000B7E                     l3817:
  5941  000B7E  FFFF               	dw	65535	; assembler added errata NOP
  5942                           
  5943                           ;motors.c: 391:                 keepMovingX = 0;
  5944  000B80  0E00               	movlw	0
  5945  000B82  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5946                           
  5947                           ;motors.c: 392:             }else if(keepMovingX){
  5948  000B84  EF28  F006         	goto	l3841
  5949  000B88                     l3819:
  5950  000B88  FFFF               	dw	65535	; assembler added errata NOP
  5951  000B8A  5021               	movf	moveToPoint@keepMovingX^0,w,c
  5952  000B8C  B4D8               	btfsc	status,2,c
  5953  000B8E  EFCB  F005         	goto	u3211
  5954  000B92  EFCE  F005         	goto	u3210
  5955  000B96                     u3211:
  5956  000B96  FFFF               	dw	65535	; assembler added errata NOP
  5957  000B98  EF28  F006         	goto	l3841
  5958  000B9C                     u3210:
  5959  000B9C  FFFF               	dw	65535	; assembler added errata NOP
  5960  000B9E                     
  5961                           ;motors.c: 398:             motCounter[0][0] += motCounter[0][1];
  5962  000B9E  5068               	movf	(_motCounter+1)^0,w,c
  5963  000BA0  2667               	addwf	_motCounter^0,f,c
  5964                           
  5965                           ;motors.c: 399:             if(motCounter[0][0] > 3){
  5966  000BA2  5067               	movf	_motCounter^0,w,c
  5967  000BA4  0A80               	xorlw	128
  5968  000BA6  0F7C               	addlw	-132
  5969  000BA8  A0D8               	btfss	status,0,c
  5970  000BAA  EFD9  F005         	goto	u3221
  5971  000BAE  EFDC  F005         	goto	u3220
  5972  000BB2                     u3221:
  5973  000BB2  FFFF               	dw	65535	; assembler added errata NOP
  5974  000BB4  EFDF  F005         	goto	l3825
  5975  000BB8                     u3220:
  5976  000BB8  FFFF               	dw	65535	; assembler added errata NOP
  5977  000BBA                     
  5978                           ;motors.c: 400:                 motCounter[0][0] = 0;
  5979  000BBA  0E00               	movlw	0
  5980  000BBC  6E67               	movwf	_motCounter^0,c
  5981  000BBE                     l3825:
  5982  000BBE  FFFF               	dw	65535	; assembler added errata NOP
  5983                           
  5984                           ;motors.c: 403:             LATA = stepMot1[motCounter[0][0]];
  5985  000BC0  0E8C               	movlw	low _stepMot1
  5986  000BC2  2467               	addwf	_motCounter^0,w,c
  5987  000BC4  6ED9               	movwf	fsr2l,c
  5988  000BC6  6ADA               	clrf	fsr2h,c
  5989  000BC8  0E00               	movlw	high _stepMot1
  5990  000BCA  22DA               	addwfc	fsr2h,f,c
  5991  000BCC  50DF               	movf	indf2,w,c
  5992  000BCE  6E89               	movwf	137,c	;volatile
  5993  000BD0  EF28  F006         	goto	l3841
  5994  000BD4                     l3827:
  5995  000BD4  FFFF               	dw	65535	; assembler added errata NOP
  5996  000BD6  501F               	movf	moveToPoint@MOT1Direction^0,w,c
  5997  000BD8  A4D8               	btfss	status,2,c
  5998  000BDA  EFF1  F005         	goto	u3231
  5999  000BDE  EFF4  F005         	goto	u3230
  6000  000BE2                     u3231:
  6001  000BE2  FFFF               	dw	65535	; assembler added errata NOP
  6002  000BE4  EF28  F006         	goto	l3841
  6003  000BE8                     u3230:
  6004  000BE8  FFFF               	dw	65535	; assembler added errata NOP
  6005  000BEA                     
  6006                           ;motors.c: 407:             if(x1 - stepCounter() <= x2){
  6007  000BEA  EC5E  F012         	call	_stepCounter	;wreg free
  6008  000BEE  C015  F01D         	movff	moveToPoint@x1,??_moveToPoint
  6009  000BF2  C016  F01E         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6010  000BF6  5012               	movf	?_stepCounter^0,w,c
  6011  000BF8  5E1D               	subwf	??_moveToPoint^0,f,c
  6012  000BFA  5013               	movf	(?_stepCounter+1)^0,w,c
  6013  000BFC  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6014  000BFE  501D               	movf	??_moveToPoint^0,w,c
  6015  000C00  5C19               	subwf	moveToPoint@x2^0,w,c
  6016  000C02  501E               	movf	(??_moveToPoint+1)^0,w,c
  6017  000C04  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  6018  000C06  A0D8               	btfss	status,0,c
  6019  000C08  EF08  F006         	goto	u3241
  6020  000C0C  EF0B  F006         	goto	u3240
  6021  000C10                     u3241:
  6022  000C10  FFFF               	dw	65535	; assembler added errata NOP
  6023  000C12  EF0E  F006         	goto	l3833
  6024  000C16                     u3240:
  6025  000C16  FFFF               	dw	65535	; assembler added errata NOP
  6026  000C18  EFBF  F005         	goto	l3817
  6027  000C1C                     l3833:
  6028  000C1C  FFFF               	dw	65535	; assembler added errata NOP
  6029  000C1E  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6030  000C20  B4D8               	btfsc	status,2,c
  6031  000C22  EF15  F006         	goto	u3251
  6032  000C26  EF18  F006         	goto	u3250
  6033  000C2A                     u3251:
  6034  000C2A  FFFF               	dw	65535	; assembler added errata NOP
  6035  000C2C  EF28  F006         	goto	l3841
  6036  000C30                     u3250:
  6037  000C30  FFFF               	dw	65535	; assembler added errata NOP
  6038  000C32                     
  6039                           ;motors.c: 416:             motCounter[0][0] += motCounter[0][1];
  6040  000C32  5068               	movf	(_motCounter+1)^0,w,c
  6041  000C34  2667               	addwf	_motCounter^0,f,c
  6042                           
  6043                           ;motors.c: 417:             if(motCounter[0][0] < 0){
  6044  000C36  BE67               	btfsc	_motCounter^0,7,c
  6045  000C38  EF23  F006         	goto	u3260
  6046  000C3C  EF20  F006         	goto	u3261
  6047  000C40                     u3261:
  6048  000C40  FFFF               	dw	65535	; assembler added errata NOP
  6049  000C42  EFDF  F005         	goto	l3825
  6050  000C46                     u3260:
  6051  000C46  FFFF               	dw	65535	; assembler added errata NOP
  6052  000C48                     
  6053                           ;motors.c: 418:                 motCounter[0][0] = 3;
  6054  000C48  0E03               	movlw	3
  6055  000C4A  6E67               	movwf	_motCounter^0,c
  6056  000C4C  EFDF  F005         	goto	l3825
  6057  000C50                     l3841:
  6058  000C50  FFFF               	dw	65535	; assembler added errata NOP
  6059                           
  6060                           ;motors.c: 426:         if(MOT2Direction == 1){
  6061  000C52  0420               	decf	moveToPoint@MOT2Direction^0,w,c
  6062  000C54  A4D8               	btfss	status,2,c
  6063  000C56  EF2F  F006         	goto	u3271
  6064  000C5A  EF32  F006         	goto	u3270
  6065  000C5E                     u3271:
  6066  000C5E  FFFF               	dw	65535	; assembler added errata NOP
  6067  000C60  EF71  F006         	goto	l3855
  6068  000C64                     u3270:
  6069  000C64  FFFF               	dw	65535	; assembler added errata NOP
  6070  000C66                     
  6071                           ;motors.c: 428:             if(y1 + stepCounter() >= y2){
  6072  000C66  EC5E  F012         	call	_stepCounter	;wreg free
  6073  000C6A  5017               	movf	moveToPoint@y1^0,w,c
  6074  000C6C  2612               	addwf	?_stepCounter^0,f,c
  6075  000C6E  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6076  000C70  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6077  000C72  501B               	movf	moveToPoint@y2^0,w,c
  6078  000C74  5C12               	subwf	?_stepCounter^0,w,c
  6079  000C76  501C               	movf	(moveToPoint@y2+1)^0,w,c
  6080  000C78  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6081  000C7A  A0D8               	btfss	status,0,c
  6082  000C7C  EF42  F006         	goto	u3281
  6083  000C80  EF45  F006         	goto	u3280
  6084  000C84                     u3281:
  6085  000C84  FFFF               	dw	65535	; assembler added errata NOP
  6086  000C86  EF4B  F006         	goto	l3847
  6087  000C8A                     u3280:
  6088  000C8A  FFFF               	dw	65535	; assembler added errata NOP
  6089  000C8C                     l3845:
  6090  000C8C  FFFF               	dw	65535	; assembler added errata NOP
  6091                           
  6092                           ;motors.c: 430:                 keepMovingY = 0;
  6093  000C8E  0E00               	movlw	0
  6094  000C90  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6095                           
  6096                           ;motors.c: 431:             }else if(keepMovingY){
  6097  000C92  EFAF  F006         	goto	l3869
  6098  000C96                     l3847:
  6099  000C96  FFFF               	dw	65535	; assembler added errata NOP
  6100  000C98  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6101  000C9A  B4D8               	btfsc	status,2,c
  6102  000C9C  EF52  F006         	goto	u3291
  6103  000CA0  EF55  F006         	goto	u3290
  6104  000CA4                     u3291:
  6105  000CA4  FFFF               	dw	65535	; assembler added errata NOP
  6106  000CA6  EFAF  F006         	goto	l182
  6107  000CAA                     u3290:
  6108  000CAA  FFFF               	dw	65535	; assembler added errata NOP
  6109  000CAC                     
  6110                           ;motors.c: 437:             motCounter[1][0] += motCounter[1][1];
  6111  000CAC  506A               	movf	(_motCounter+3)^0,w,c
  6112  000CAE  2669               	addwf	(_motCounter+2)^0,f,c
  6113                           
  6114                           ;motors.c: 438:             if(motCounter[1][0] > 3){
  6115  000CB0  5069               	movf	(_motCounter+2)^0,w,c
  6116  000CB2  0A80               	xorlw	128
  6117  000CB4  0F7C               	addlw	-132
  6118  000CB6  A0D8               	btfss	status,0,c
  6119  000CB8  EF60  F006         	goto	u3301
  6120  000CBC  EF63  F006         	goto	u3300
  6121  000CC0                     u3301:
  6122  000CC0  FFFF               	dw	65535	; assembler added errata NOP
  6123  000CC2  EF66  F006         	goto	l3853
  6124  000CC6                     u3300:
  6125  000CC6  FFFF               	dw	65535	; assembler added errata NOP
  6126  000CC8                     
  6127                           ;motors.c: 439:                 motCounter[1][0] = 0;
  6128  000CC8  0E00               	movlw	0
  6129  000CCA  6E69               	movwf	(_motCounter+2)^0,c
  6130  000CCC                     l3853:
  6131  000CCC  FFFF               	dw	65535	; assembler added errata NOP
  6132                           
  6133                           ;motors.c: 442:             LATB = stepMot2[motCounter[1][0]];
  6134  000CCE  0E88               	movlw	low _stepMot2
  6135  000CD0  2469               	addwf	(_motCounter+2)^0,w,c
  6136  000CD2  6ED9               	movwf	fsr2l,c
  6137  000CD4  6ADA               	clrf	fsr2h,c
  6138  000CD6  0E00               	movlw	high _stepMot2
  6139  000CD8  22DA               	addwfc	fsr2h,f,c
  6140  000CDA  50DF               	movf	indf2,w,c
  6141  000CDC  6E8A               	movwf	138,c	;volatile
  6142  000CDE  EFAF  F006         	goto	l3869
  6143  000CE2                     l3855:
  6144  000CE2  FFFF               	dw	65535	; assembler added errata NOP
  6145  000CE4  5020               	movf	moveToPoint@MOT2Direction^0,w,c
  6146  000CE6  A4D8               	btfss	status,2,c
  6147  000CE8  EF78  F006         	goto	u3311
  6148  000CEC  EF7B  F006         	goto	u3310
  6149  000CF0                     u3311:
  6150  000CF0  FFFF               	dw	65535	; assembler added errata NOP
  6151  000CF2  EFAF  F006         	goto	l3869
  6152  000CF6                     u3310:
  6153  000CF6  FFFF               	dw	65535	; assembler added errata NOP
  6154  000CF8                     
  6155                           ;motors.c: 447:             if(y1 - stepCounter() <= y2){
  6156  000CF8  EC5E  F012         	call	_stepCounter	;wreg free
  6157  000CFC  C017  F01D         	movff	moveToPoint@y1,??_moveToPoint
  6158  000D00  C018  F01E         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6159  000D04  5012               	movf	?_stepCounter^0,w,c
  6160  000D06  5E1D               	subwf	??_moveToPoint^0,f,c
  6161  000D08  5013               	movf	(?_stepCounter+1)^0,w,c
  6162  000D0A  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6163  000D0C  501D               	movf	??_moveToPoint^0,w,c
  6164  000D0E  5C1B               	subwf	moveToPoint@y2^0,w,c
  6165  000D10  501E               	movf	(??_moveToPoint+1)^0,w,c
  6166  000D12  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6167  000D14  A0D8               	btfss	status,0,c
  6168  000D16  EF8F  F006         	goto	u3321
  6169  000D1A  EF92  F006         	goto	u3320
  6170  000D1E                     u3321:
  6171  000D1E  FFFF               	dw	65535	; assembler added errata NOP
  6172  000D20  EF95  F006         	goto	l3861
  6173  000D24                     u3320:
  6174  000D24  FFFF               	dw	65535	; assembler added errata NOP
  6175  000D26  EF46  F006         	goto	l3845
  6176  000D2A                     l3861:
  6177  000D2A  FFFF               	dw	65535	; assembler added errata NOP
  6178  000D2C  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6179  000D2E  B4D8               	btfsc	status,2,c
  6180  000D30  EF9C  F006         	goto	u3331
  6181  000D34  EF9F  F006         	goto	u3330
  6182  000D38                     u3331:
  6183  000D38  FFFF               	dw	65535	; assembler added errata NOP
  6184  000D3A  EFAF  F006         	goto	l3869
  6185  000D3E                     u3330:
  6186  000D3E  FFFF               	dw	65535	; assembler added errata NOP
  6187  000D40                     
  6188                           ;motors.c: 456:             motCounter[1][0] += motCounter[1][1];
  6189  000D40  506A               	movf	(_motCounter+3)^0,w,c
  6190  000D42  2669               	addwf	(_motCounter+2)^0,f,c
  6191                           
  6192                           ;motors.c: 457:             if(motCounter[1][0] < 0){
  6193  000D44  BE69               	btfsc	(_motCounter+2)^0,7,c
  6194  000D46  EFAA  F006         	goto	u3340
  6195  000D4A  EFA7  F006         	goto	u3341
  6196  000D4E                     u3341:
  6197  000D4E  FFFF               	dw	65535	; assembler added errata NOP
  6198  000D50  EF66  F006         	goto	l3853
  6199  000D54                     u3340:
  6200  000D54  FFFF               	dw	65535	; assembler added errata NOP
  6201  000D56                     
  6202                           ;motors.c: 458:                 motCounter[1][0] = 3;
  6203  000D56  0E03               	movlw	3
  6204  000D58  6E69               	movwf	(_motCounter+2)^0,c
  6205  000D5A  EF66  F006         	goto	l3853
  6206  000D5E                     l182:
  6207  000D5E                     l3869:
  6208  000D5E  FFFF               	dw	65535	; assembler added errata NOP
  6209  000D60  EC0C  F012         	call	_stepMade	;wreg free
  6210  000D64  5012               	movf	?_stepMade^0,w,c
  6211  000D66  1013               	iorwf	(?_stepMade+1)^0,w,c
  6212  000D68  B4D8               	btfsc	status,2,c
  6213  000D6A  EFB9  F006         	goto	u3351
  6214  000D6E  EFBC  F006         	goto	u3350
  6215  000D72                     u3351:
  6216  000D72  FFFF               	dw	65535	; assembler added errata NOP
  6217  000D74  EFAF  F006         	goto	l3869
  6218  000D78                     u3350:
  6219  000D78                     l3871:
  6220  000D78  FFFF               	dw	65535	; assembler added errata NOP
  6221                           
  6222                           ;motors.c: 370:     while(keepMovingX || keepMovingY){
  6223  000D7A  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6224  000D7C  A4D8               	btfss	status,2,c
  6225  000D7E  EFC3  F006         	goto	u3361
  6226  000D82  EFC6  F006         	goto	u3360
  6227  000D86                     u3361:
  6228  000D86  FFFF               	dw	65535	; assembler added errata NOP
  6229  000D88  EF8F  F005         	goto	l3809
  6230  000D8C                     u3360:
  6231  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  6232  000D8E  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6233  000D90  A4D8               	btfss	status,2,c
  6234  000D92  EFCD  F006         	goto	u3371
  6235  000D96  EFD0  F006         	goto	u3370
  6236  000D9A                     u3371:
  6237  000D9A  FFFF               	dw	65535	; assembler added errata NOP
  6238  000D9C  EF8F  F005         	goto	l3809
  6239  000DA0                     u3370:
  6240  000DA0                     l165:
  6241  000DA0  FFFF               	dw	65535	; assembler added errata NOP
  6242                           
  6243                           ;motors.c: 481:     T0CONbits.TMR0ON = 0;
  6244  000DA2  9ED5               	bcf	213,7,c	;volatile
  6245                           
  6246                           ;motors.c: 482:     T2CONbits.TMR2ON = 0;
  6247  000DA4  94CA               	bcf	202,2,c	;volatile
  6248  000DA6                     
  6249                           ;motors.c: 484:     TMR0 = 0;
  6250  000DA6  0E00               	movlw	0
  6251  000DA8  6ED7               	movwf	215,c	;volatile
  6252  000DAA  0E00               	movlw	0
  6253  000DAC  6ED6               	movwf	214,c	;volatile
  6254                           
  6255                           ;motors.c: 485:     TMR2 = 0;
  6256  000DAE  0E00               	movlw	0
  6257  000DB0  6ECC               	movwf	204,c	;volatile
  6258  000DB2                     
  6259                           ;motors.c: 488:     resetStep();
  6260  000DB2  EC78  F012         	call	_resetStep	;wreg free
  6261  000DB6                     
  6262                           ;motors.c: 490:     return(tm0Error);
  6263  000DB6  5059               	movf	_tm0Error^0,w,c
  6264  000DB8                     l157:
  6265  000DB8  FFFF               	dw	65535	; assembler added errata NOP
  6266  000DBA  0012               	return		;funcret
  6267  000DBC  FFFF               	dw	65535	; errata NOP
  6268  000DBE                     __end_of_moveToPoint:
  6269                           	callstack 0
  6270                           
  6271 ;; *************** function _stepCounter *****************
  6272 ;; Defined at:
  6273 ;;		line 70 in file "timer.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;		None
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;		None
  6278 ;; Return value:  Size  Location     Type
  6279 ;;                  2   17[COMRAM] unsigned int 
  6280 ;; Registers used:
  6281 ;;		None
  6282 ;; Tracked objects:
  6283 ;;		On entry : 0/0
  6284 ;;		On exit  : 0/0
  6285 ;;		Unchanged: 0/0
  6286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6287 ;;      Params:         2       0       0       0       0       0       0
  6288 ;;      Locals:         0       0       0       0       0       0       0
  6289 ;;      Temps:          0       0       0       0       0       0       0
  6290 ;;      Totals:         2       0       0       0       0       0       0
  6291 ;;Total ram usage:        2 bytes
  6292 ;; Hardware stack levels used:    1
  6293 ;; Hardware stack levels required when called:    4
  6294 ;; This function calls:
  6295 ;;		Nothing
  6296 ;; This function is called by:
  6297 ;;		_moveToPoint
  6298 ;; This function uses a non-reentrant model
  6299 ;;
  6300                           
  6301                           	psect	text34
  6302  0024BC                     __ptext34:
  6303                           	callstack 0
  6304  0024BC                     _stepCounter:
  6305                           	callstack 0
  6306  0024BC  FFFF               	dw	65535	; assembler added errata NOP
  6307  0024BE                     
  6308                           ;timer.c: 71:     return pwmStep;
  6309  0024BE  C05C  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6310  0024C2  6A13               	clrf	(?_stepCounter+1)^0,c
  6311  0024C4  0012               	return		;funcret
  6312  0024C6  FFFF               	dw	65535	; errata NOP
  6313  0024C8                     __end_of_stepCounter:
  6314                           	callstack 0
  6315                           
  6316 ;; *************** function _liftArm *****************
  6317 ;; Defined at:
  6318 ;;		line 685 in file "motors.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;		None
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;		None
  6323 ;; Return value:  Size  Location     Type
  6324 ;;                  1    wreg      unsigned char 
  6325 ;; Registers used:
  6326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6332 ;;      Params:         0       0       0       0       0       0       0
  6333 ;;      Locals:         0       0       0       0       0       0       0
  6334 ;;      Temps:          0       0       0       0       0       0       0
  6335 ;;      Totals:         0       0       0       0       0       0       0
  6336 ;;Total ram usage:        0 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; Hardware stack levels required when called:    5
  6339 ;; This function calls:
  6340 ;;		_resetStep
  6341 ;;		_stepMade
  6342 ;; This function is called by:
  6343 ;;		_executeData
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           	psect	text35
  6348  002084                     __ptext35:
  6349                           	callstack 0
  6350  002084                     _liftArm:
  6351                           	callstack 0
  6352  002084  FFFF               	dw	65535	; assembler added errata NOP
  6353  002086                     
  6354                           ;motors.c: 691:     motCounter[2][1] = -1;
  6355  002086  686C               	setf	(_motCounter+5)^0,c
  6356                           
  6357                           ;motors.c: 694:     T2CONbits.TMR2ON = 1;
  6358  002088  84CA               	bsf	202,2,c	;volatile
  6359  00208A                     
  6360                           ;motors.c: 696:     tm0Error = 0;
  6361  00208A  0E00               	movlw	0
  6362  00208C  6E5A               	movwf	(_tm0Error+1)^0,c
  6363  00208E  0E00               	movlw	0
  6364  002090  6E59               	movwf	_tm0Error^0,c
  6365                           
  6366                           ;motors.c: 697:     tm0Limit = 50;
  6367  002092  0E32               	movlw	50
  6368  002094  6E66               	movwf	_tm0Limit^0,c
  6369  002096                     
  6370                           ;motors.c: 698:     T0CONbits.TMR0ON = 1;
  6371  002096  8ED5               	bsf	213,7,c	;volatile
  6372                           
  6373                           ;motors.c: 702:     while(!PORTEbits.RE2){
  6374  002098  EF86  F010         	goto	l217
  6375  00209C                     l3979:
  6376  00209C  FFFF               	dw	65535	; assembler added errata NOP
  6377                           
  6378                           ;motors.c: 704:         resetStep();
  6379  00209E  EC78  F012         	call	_resetStep	;wreg free
  6380  0020A2                     
  6381                           ;motors.c: 707:         if(tm0Error){
  6382  0020A2  5059               	movf	_tm0Error^0,w,c
  6383  0020A4  105A               	iorwf	(_tm0Error+1)^0,w,c
  6384  0020A6  B4D8               	btfsc	status,2,c
  6385  0020A8  EF58  F010         	goto	u3501
  6386  0020AC  EF5B  F010         	goto	u3500
  6387  0020B0                     u3501:
  6388  0020B0  FFFF               	dw	65535	; assembler added errata NOP
  6389  0020B2  EF62  F010         	goto	l3985
  6390  0020B6                     u3500:
  6391  0020B6  FFFF               	dw	65535	; assembler added errata NOP
  6392  0020B8                     
  6393                           ;motors.c: 712:             tm0Error = 6;
  6394  0020B8  0E00               	movlw	0
  6395  0020BA  6E5A               	movwf	(_tm0Error+1)^0,c
  6396  0020BC  0E06               	movlw	6
  6397  0020BE  6E59               	movwf	_tm0Error^0,c
  6398                           
  6399                           ;motors.c: 713:             break;
  6400  0020C0  EF8F  F010         	goto	l220
  6401  0020C4                     l3985:
  6402  0020C4  FFFF               	dw	65535	; assembler added errata NOP
  6403                           
  6404                           ;motors.c: 722:             motCounter[2][0] += motCounter[2][1];
  6405  0020C6  506C               	movf	(_motCounter+5)^0,w,c
  6406  0020C8  266B               	addwf	(_motCounter+4)^0,f,c
  6407                           
  6408                           ;motors.c: 723:             if(motCounter[2][0] < 0){
  6409  0020CA  BE6B               	btfsc	(_motCounter+4)^0,7,c
  6410  0020CC  EF6D  F010         	goto	u3510
  6411  0020D0  EF6A  F010         	goto	u3511
  6412  0020D4                     u3511:
  6413  0020D4  FFFF               	dw	65535	; assembler added errata NOP
  6414  0020D6  EF70  F010         	goto	l3989
  6415  0020DA                     u3510:
  6416  0020DA  FFFF               	dw	65535	; assembler added errata NOP
  6417  0020DC                     
  6418                           ;motors.c: 724:                 motCounter[2][0] = 3;
  6419  0020DC  0E03               	movlw	3
  6420  0020DE  6E6B               	movwf	(_motCounter+4)^0,c
  6421  0020E0                     l3989:
  6422  0020E0  FFFF               	dw	65535	; assembler added errata NOP
  6423                           
  6424                           ;motors.c: 727:             LATC = stepMot3[motCounter[2][0]];
  6425  0020E2  0E84               	movlw	low _stepMot3
  6426  0020E4  246B               	addwf	(_motCounter+4)^0,w,c
  6427  0020E6  6ED9               	movwf	fsr2l,c
  6428  0020E8  6ADA               	clrf	fsr2h,c
  6429  0020EA  0E00               	movlw	high _stepMot3
  6430  0020EC  22DA               	addwfc	fsr2h,f,c
  6431  0020EE  50DF               	movf	indf2,w,c
  6432  0020F0  6E8B               	movwf	139,c	;volatile
  6433  0020F2                     l3991:
  6434  0020F2  FFFF               	dw	65535	; assembler added errata NOP
  6435  0020F4  EC0C  F012         	call	_stepMade	;wreg free
  6436  0020F8  5012               	movf	?_stepMade^0,w,c
  6437  0020FA  1013               	iorwf	(?_stepMade+1)^0,w,c
  6438  0020FC  B4D8               	btfsc	status,2,c
  6439  0020FE  EF83  F010         	goto	u3521
  6440  002102  EF86  F010         	goto	u3520
  6441  002106                     u3521:
  6442  002106  FFFF               	dw	65535	; assembler added errata NOP
  6443  002108  EF79  F010         	goto	l3991
  6444  00210C                     u3520:
  6445  00210C                     l217:
  6446  00210C  FFFF               	dw	65535	; assembler added errata NOP
  6447                           
  6448                           ;motors.c: 702:     while(!PORTEbits.RE2){
  6449  00210E  A484               	btfss	132,2,c	;volatile
  6450  002110  EF8C  F010         	goto	u3531
  6451  002114  EF8F  F010         	goto	u3530
  6452  002118                     u3531:
  6453  002118  FFFF               	dw	65535	; assembler added errata NOP
  6454  00211A  EF4E  F010         	goto	l3979
  6455  00211E                     u3530:
  6456  00211E                     l220:
  6457  00211E  FFFF               	dw	65535	; assembler added errata NOP
  6458                           
  6459                           ;motors.c: 744:     T0CONbits.TMR0ON = 0;
  6460  002120  9ED5               	bcf	213,7,c	;volatile
  6461                           
  6462                           ;motors.c: 745:     T2CONbits.TMR2ON = 0;
  6463  002122  94CA               	bcf	202,2,c	;volatile
  6464  002124                     
  6465                           ;motors.c: 747:     TMR0 = 0;
  6466  002124  0E00               	movlw	0
  6467  002126  6ED7               	movwf	215,c	;volatile
  6468  002128  0E00               	movlw	0
  6469  00212A  6ED6               	movwf	214,c	;volatile
  6470                           
  6471                           ;motors.c: 748:     TMR2 = 0;
  6472  00212C  0E00               	movlw	0
  6473  00212E  6ECC               	movwf	204,c	;volatile
  6474  002130                     
  6475                           ;motors.c: 751:     resetStep();
  6476  002130  EC78  F012         	call	_resetStep	;wreg free
  6477  002134                     
  6478                           ;motors.c: 753:     return(tm0Error);
  6479  002134  5059               	movf	_tm0Error^0,w,c
  6480  002136  0012               	return		;funcret
  6481  002138  FFFF               	dw	65535	; errata NOP
  6482  00213A                     __end_of_liftArm:
  6483                           	callstack 0
  6484                           
  6485 ;; *************** function _stepMade *****************
  6486 ;; Defined at:
  6487 ;;		line 59 in file "timer.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;		None
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;  temp            1   19[COMRAM] unsigned char 
  6492 ;; Return value:  Size  Location     Type
  6493 ;;                  2   17[COMRAM] unsigned int 
  6494 ;; Registers used:
  6495 ;;		wreg, status,2
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6501 ;;      Params:         2       0       0       0       0       0       0
  6502 ;;      Locals:         1       0       0       0       0       0       0
  6503 ;;      Temps:          0       0       0       0       0       0       0
  6504 ;;      Totals:         3       0       0       0       0       0       0
  6505 ;;Total ram usage:        3 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; Hardware stack levels required when called:    4
  6508 ;; This function calls:
  6509 ;;		Nothing
  6510 ;; This function is called by:
  6511 ;;		_resetPosition
  6512 ;;		_moveToPoint
  6513 ;;		_touchObject
  6514 ;;		_touchTherm
  6515 ;;		_liftArm
  6516 ;;		_rotateObj
  6517 ;;		_pickObject
  6518 ;;		_releaseObj
  6519 ;; This function uses a non-reentrant model
  6520 ;;
  6521                           
  6522                           	psect	text36
  6523  002418                     __ptext36:
  6524                           	callstack 0
  6525  002418                     _stepMade:
  6526                           	callstack 0
  6527  002418  FFFF               	dw	65535	; assembler added errata NOP
  6528  00241A                     
  6529                           ;timer.c: 60:     unsigned char temp = stepToggle;
  6530  00241A  C05B  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6531  00241E                     
  6532                           ;timer.c: 62:     stepToggle = 0;
  6533  00241E  0E00               	movlw	0
  6534  002420  6E5B               	movwf	_stepToggle^0,c	;volatile
  6535  002422                     
  6536                           ;timer.c: 64:     return temp;
  6537  002422  C014  F012         	movff	stepMade@temp,?_stepMade
  6538  002426  6A13               	clrf	(?_stepMade+1)^0,c
  6539  002428  0012               	return		;funcret
  6540  00242A  FFFF               	dw	65535	; errata NOP
  6541  00242C                     __end_of_stepMade:
  6542                           	callstack 0
  6543                           
  6544 ;; *************** function _resetStep *****************
  6545 ;; Defined at:
  6546 ;;		line 77 in file "timer.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;		None
  6549 ;; Auto vars:     Size  Location     Type
  6550 ;;		None
  6551 ;; Return value:  Size  Location     Type
  6552 ;;                  1    wreg      void 
  6553 ;; Registers used:
  6554 ;;		wreg, status,2
  6555 ;; Tracked objects:
  6556 ;;		On entry : 0/0
  6557 ;;		On exit  : 0/0
  6558 ;;		Unchanged: 0/0
  6559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6560 ;;      Params:         0       0       0       0       0       0       0
  6561 ;;      Locals:         0       0       0       0       0       0       0
  6562 ;;      Temps:          0       0       0       0       0       0       0
  6563 ;;      Totals:         0       0       0       0       0       0       0
  6564 ;;Total ram usage:        0 bytes
  6565 ;; Hardware stack levels used:    1
  6566 ;; Hardware stack levels required when called:    4
  6567 ;; This function calls:
  6568 ;;		Nothing
  6569 ;; This function is called by:
  6570 ;;		_resetPosition
  6571 ;;		_moveToPoint
  6572 ;;		_touchObject
  6573 ;;		_touchTherm
  6574 ;;		_liftArm
  6575 ;;		_rotateObj
  6576 ;; This function uses a non-reentrant model
  6577 ;;
  6578                           
  6579                           	psect	text37
  6580  0024F0                     __ptext37:
  6581                           	callstack 0
  6582  0024F0                     _resetStep:
  6583                           	callstack 0
  6584  0024F0  FFFF               	dw	65535	; assembler added errata NOP
  6585  0024F2                     
  6586                           ;timer.c: 78:     pwmStep = 0;
  6587  0024F2  0E00               	movlw	0
  6588  0024F4  6E5C               	movwf	_pwmStep^0,c	;volatile
  6589  0024F6  0012               	return		;funcret
  6590  0024F8  FFFF               	dw	65535	; errata NOP
  6591  0024FA                     __end_of_resetStep:
  6592                           	callstack 0
  6593                           
  6594 ;; *************** function _getData *****************
  6595 ;; Defined at:
  6596 ;;		line 35 in file "usart.c"
  6597 ;; Parameters:    Size  Location     Type
  6598 ;;		None
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;		None
  6601 ;; Return value:  Size  Location     Type
  6602 ;;                  2   17[COMRAM] PTR struct .
  6603 ;; Registers used:
  6604 ;;		wreg, status,2, status,0
  6605 ;; Tracked objects:
  6606 ;;		On entry : 0/0
  6607 ;;		On exit  : 0/0
  6608 ;;		Unchanged: 0/0
  6609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6610 ;;      Params:         2       0       0       0       0       0       0
  6611 ;;      Locals:         0       0       0       0       0       0       0
  6612 ;;      Temps:          0       0       0       0       0       0       0
  6613 ;;      Totals:         2       0       0       0       0       0       0
  6614 ;;Total ram usage:        2 bytes
  6615 ;; Hardware stack levels used:    1
  6616 ;; Hardware stack levels required when called:    4
  6617 ;; This function calls:
  6618 ;;		Nothing
  6619 ;; This function is called by:
  6620 ;;		_executeData
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624                           	psect	text38
  6625  00246C                     __ptext38:
  6626                           	callstack 0
  6627  00246C                     _getData:
  6628                           	callstack 0
  6629  00246C  FFFF               	dw	65535	; assembler added errata NOP
  6630  00246E                     
  6631                           ;usart.c: 36:     return(&dataSequence[0]);
  6632  00246E  0ECA               	movlw	low _dataSequence
  6633  002470  6E12               	movwf	?_getData^0,c
  6634  002472  0E00               	movlw	high _dataSequence
  6635  002474  6E13               	movwf	(?_getData+1)^0,c
  6636  002476  0012               	return		;funcret
  6637  002478  FFFF               	dw	65535	; errata NOP
  6638  00247A                     __end_of_getData:
  6639                           	callstack 0
  6640                           
  6641 ;; *************** function _clearTM0 *****************
  6642 ;; Defined at:
  6643 ;;		line 35 in file "motors.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;		None
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;		None
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  1    wreg      void 
  6650 ;; Registers used:
  6651 ;;		wreg, status,2
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6657 ;;      Params:         0       0       0       0       0       0       0
  6658 ;;      Locals:         0       0       0       0       0       0       0
  6659 ;;      Temps:          0       0       0       0       0       0       0
  6660 ;;      Totals:         0       0       0       0       0       0       0
  6661 ;;Total ram usage:        0 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    4
  6664 ;; This function calls:
  6665 ;;		Nothing
  6666 ;; This function is called by:
  6667 ;;		_main
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671                           	psect	text39
  6672  00247A                     __ptext39:
  6673                           	callstack 0
  6674  00247A                     _clearTM0:
  6675                           	callstack 0
  6676  00247A  FFFF               	dw	65535	; assembler added errata NOP
  6677  00247C                     
  6678                           ;motors.c: 36:     tm0Error = 0;
  6679  00247C  0E00               	movlw	0
  6680  00247E  6E5A               	movwf	(_tm0Error+1)^0,c
  6681  002480  0E00               	movlw	0
  6682  002482  6E59               	movwf	_tm0Error^0,c
  6683  002484  0012               	return		;funcret
  6684  002486  FFFF               	dw	65535	; errata NOP
  6685  002488                     __end_of_clearTM0:
  6686                           	callstack 0
  6687                           
  6688 ;; *************** function _isr *****************
  6689 ;; Defined at:
  6690 ;;		line 38 in file "interrupt.c"
  6691 ;; Parameters:    Size  Location     Type
  6692 ;;		None
  6693 ;; Auto vars:     Size  Location     Type
  6694 ;;  temp            1   16[COMRAM] unsigned char 
  6695 ;; Return value:  Size  Location     Type
  6696 ;;                  1    wreg      void 
  6697 ;; Registers used:
  6698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6699 ;; Tracked objects:
  6700 ;;		On entry : 0/0
  6701 ;;		On exit  : 0/0
  6702 ;;		Unchanged: 0/0
  6703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6704 ;;      Params:         0       0       0       0       0       0       0
  6705 ;;      Locals:         1       0       0       0       0       0       0
  6706 ;;      Temps:          6       0       0       0       0       0       0
  6707 ;;      Totals:         7       0       0       0       0       0       0
  6708 ;;Total ram usage:        7 bytes
  6709 ;; Hardware stack levels used:    1
  6710 ;; Hardware stack levels required when called:    3
  6711 ;; This function calls:
  6712 ;;		_abortAll
  6713 ;;		_fatalError
  6714 ;;		_increaseStep
  6715 ;;		_retPeriod
  6716 ;;		_setThermRel
  6717 ;;		_setTouchRel
  6718 ;;		_toggleStep
  6719 ;;		_whatsTM0Limit
  6720 ;;		_writeTM0
  6721 ;;		i2_storeData
  6722 ;; This function is called by:
  6723 ;;		Interrupt level 2
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           	psect	intcode
  6728  000008                     __pintcode:
  6729                           	callstack 0
  6730  000008                     _isr:
  6731                           	callstack 0
  6732  000008  FFFF               	dw	65535	; assembler added errata NOP
  6733                           
  6734                           ;incstack = 0
  6735  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6736  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6737  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6738  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6739  000018  CFF4 F010          	movff	prodh,??_isr+5
  6740  00001C                     
  6741                           ;interrupt.c: 39:     static unsigned int single_cycle = 0;;interrupt.c: 40:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 41:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 44:     if(INTCONbits.T0IF){
  6742  00001C  A4F2               	btfss	242,2,c	;volatile
  6743  00001E  EF13  F000         	goto	i2u260_41
  6744  000022  EF16  F000         	goto	i2u260_40
  6745  000026                     i2u260_41:
  6746  000026  FFFF               	dw	65535	; assembler added errata NOP
  6747  000028  EF2C  F000         	goto	i2l3449
  6748  00002C                     i2u260_40:
  6749  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6750  00002E                     
  6751                           ;interrupt.c: 45:         INTCONbits.T0IF = 0;
  6752  00002E  94F2               	bcf	242,2,c	;volatile
  6753  000030                     
  6754                           ;interrupt.c: 48:         tm0Count++;
  6755  000030  2A63               	incf	isr@tm0Count^0,f,c
  6756  000032                     
  6757                           ;interrupt.c: 50:         if(tm0Count >= whatsTM0Limit()){
  6758  000032  EC9C  F012         	call	_whatsTM0Limit	;wreg free
  6759  000036  6E0B               	movwf	??_isr^0,c
  6760  000038  500B               	movf	??_isr^0,w,c
  6761  00003A  5C63               	subwf	isr@tm0Count^0,w,c
  6762  00003C  A0D8               	btfss	status,0,c
  6763  00003E  EF23  F000         	goto	i2u261_41
  6764  000042  EF26  F000         	goto	i2u261_40
  6765  000046                     i2u261_41:
  6766  000046  FFFF               	dw	65535	; assembler added errata NOP
  6767  000048  EF2C  F000         	goto	i2l3449
  6768  00004C                     i2u261_40:
  6769  00004C  FFFF               	dw	65535	; assembler added errata NOP
  6770  00004E                     
  6771                           ;interrupt.c: 51:             T0CONbits.TMR0ON = 0;
  6772  00004E  9ED5               	bcf	213,7,c	;volatile
  6773  000050                     
  6774                           ;interrupt.c: 52:             tm0Count = 0;
  6775  000050  0E00               	movlw	0
  6776  000052  6E63               	movwf	isr@tm0Count^0,c
  6777  000054                     
  6778                           ;interrupt.c: 53:             writeTM0();
  6779  000054  EC44  F012         	call	_writeTM0	;wreg free
  6780  000058                     i2l3449:
  6781  000058  FFFF               	dw	65535	; assembler added errata NOP
  6782                           
  6783                           ;interrupt.c: 58:     if(PIR1bits.TMR1IF){
  6784  00005A  A09E               	btfss	158,0,c	;volatile
  6785  00005C  EF32  F000         	goto	i2u262_41
  6786  000060  EF35  F000         	goto	i2u262_40
  6787  000064                     i2u262_41:
  6788  000064  FFFF               	dw	65535	; assembler added errata NOP
  6789  000066  EF45  F000         	goto	i2l3457
  6790  00006A                     i2u262_40:
  6791  00006A  FFFF               	dw	65535	; assembler added errata NOP
  6792  00006C                     
  6793                           ;interrupt.c: 59:         PIR1bits.TMR1IF = 0;
  6794  00006C  909E               	bcf	158,0,c	;volatile
  6795  00006E                     
  6796                           ;interrupt.c: 60:         if(fatalError()){
  6797  00006E  ECA4  F012         	call	_fatalError	;wreg free
  6798  000072  0900               	iorlw	0
  6799  000074  B4D8               	btfsc	status,2,c
  6800  000076  EF3F  F000         	goto	i2u263_41
  6801  00007A  EF42  F000         	goto	i2u263_40
  6802  00007E                     i2u263_41:
  6803  00007E  FFFF               	dw	65535	; assembler added errata NOP
  6804  000080  EF45  F000         	goto	i2l3457
  6805  000084                     i2u263_40:
  6806  000084  FFFF               	dw	65535	; assembler added errata NOP
  6807  000086                     
  6808                           ;interrupt.c: 61:             abortAll();
  6809  000086  EC1F  F012         	call	_abortAll	;wreg free
  6810  00008A                     i2l3457:
  6811  00008A  FFFF               	dw	65535	; assembler added errata NOP
  6812                           
  6813                           ;interrupt.c: 66:     if(PIR1bits.TMR2IF){
  6814  00008C  A29E               	btfss	158,1,c	;volatile
  6815  00008E  EF4B  F000         	goto	i2u264_41
  6816  000092  EF4E  F000         	goto	i2u264_40
  6817  000096                     i2u264_41:
  6818  000096  FFFF               	dw	65535	; assembler added errata NOP
  6819  000098  EF80  F000         	goto	i2l3479
  6820  00009C                     i2u264_40:
  6821  00009C  FFFF               	dw	65535	; assembler added errata NOP
  6822  00009E                     
  6823                           ;interrupt.c: 67:         PIR1bits.TMR2IF = 0;
  6824  00009E  929E               	bcf	158,1,c	;volatile
  6825  0000A0                     
  6826                           ;interrupt.c: 68:         single_cycle++;
  6827  0000A0  4A51               	infsnz	isr@single_cycle^0,f,c
  6828  0000A2  2A52               	incf	(isr@single_cycle+1)^0,f,c
  6829  0000A4                     
  6830                           ;interrupt.c: 71:         if(single_cycle > retPeriod()){
  6831  0000A4  EC4B  F012         	call	_retPeriod	;wreg free
  6832  0000A8  5051               	movf	isr@single_cycle^0,w,c
  6833  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  6834  0000AC  5052               	movf	(isr@single_cycle+1)^0,w,c
  6835  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  6836  0000B0  B0D8               	btfsc	status,0,c
  6837  0000B2  EF5D  F000         	goto	i2u265_41
  6838  0000B6  EF60  F000         	goto	i2u265_40
  6839  0000BA                     i2u265_41:
  6840  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  6841  0000BC  EF80  F000         	goto	i2l3479
  6842  0000C0                     i2u265_40:
  6843  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  6844  0000C2                     
  6845                           ;interrupt.c: 72:             single_cycle = 0;
  6846  0000C2  0E00               	movlw	0
  6847  0000C4  6E52               	movwf	(isr@single_cycle+1)^0,c
  6848  0000C6  0E00               	movlw	0
  6849  0000C8  6E51               	movwf	isr@single_cycle^0,c
  6850  0000CA                     
  6851                           ;interrupt.c: 73:             completeStep++;
  6852  0000CA  2A62               	incf	isr@completeStep^0,f,c
  6853  0000CC                     
  6854                           ;interrupt.c: 76:             if(completeStep != 0 && !(completeStep % 2)){
  6855  0000CC  5062               	movf	isr@completeStep^0,w,c
  6856  0000CE  B4D8               	btfsc	status,2,c
  6857  0000D0  EF6C  F000         	goto	i2u266_41
  6858  0000D4  EF6F  F000         	goto	i2u266_40
  6859  0000D8                     i2u266_41:
  6860  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  6861  0000DA  EF7D  F000         	goto	i2l3477
  6862  0000DE                     i2u266_40:
  6863  0000DE  FFFF               	dw	65535	; assembler added errata NOP
  6864  0000E0  B062               	btfsc	isr@completeStep^0,0,c
  6865  0000E2  EF75  F000         	goto	i2u267_41
  6866  0000E6  EF78  F000         	goto	i2u267_40
  6867  0000EA                     i2u267_41:
  6868  0000EA  FFFF               	dw	65535	; assembler added errata NOP
  6869  0000EC  EF7D  F000         	goto	i2l3477
  6870  0000F0                     i2u267_40:
  6871  0000F0  FFFF               	dw	65535	; assembler added errata NOP
  6872  0000F2                     
  6873                           ;interrupt.c: 78:                 completeStep = 0;
  6874  0000F2  0E00               	movlw	0
  6875  0000F4  6E62               	movwf	isr@completeStep^0,c
  6876  0000F6                     
  6877                           ;interrupt.c: 81:                 increaseStep();
  6878  0000F6  ECA0  F012         	call	_increaseStep	;wreg free
  6879  0000FA                     i2l3477:
  6880  0000FA  FFFF               	dw	65535	; assembler added errata NOP
  6881                           
  6882                           ;interrupt.c: 86:             toggleStep();
  6883  0000FC  EC7D  F012         	call	_toggleStep	;wreg free
  6884  000100                     i2l3479:
  6885  000100  FFFF               	dw	65535	; assembler added errata NOP
  6886                           
  6887                           ;interrupt.c: 91:     if(PIR1bits.ADIF){
  6888  000102  AC9E               	btfss	158,6,c	;volatile
  6889  000104  EF86  F000         	goto	i2u268_41
  6890  000108  EF89  F000         	goto	i2u268_40
  6891  00010C                     i2u268_41:
  6892  00010C  FFFF               	dw	65535	; assembler added errata NOP
  6893  00010E  EFB6  F000         	goto	i2l3491
  6894  000112                     i2u268_40:
  6895  000112  FFFF               	dw	65535	; assembler added errata NOP
  6896  000114                     
  6897                           ;interrupt.c: 92:         PIR1bits.ADIF = 0;
  6898  000114  9C9E               	bcf	158,6,c	;volatile
  6899                           
  6900                           ;interrupt.c: 95:         ADC_res = ADRESL;
  6901  000116  CFC3 F053          	movff	4035,_ADC_res	;volatile
  6902  00011A  6A54               	clrf	(_ADC_res+1)^0,c
  6903  00011C                     
  6904                           ;interrupt.c: 96:         ADC_res |= (ADRESH << 8);
  6905  00011C  50C4               	movf	196,w,c	;volatile
  6906  00011E  6E0C               	movwf	(??_isr+1)^0,c
  6907  000120  6A0B               	clrf	??_isr^0,c
  6908  000122  500B               	movf	??_isr^0,w,c
  6909  000124  1253               	iorwf	_ADC_res^0,f,c
  6910  000126  500C               	movf	(??_isr+1)^0,w,c
  6911  000128  1254               	iorwf	(_ADC_res+1)^0,f,c
  6912                           
  6913                           ;interrupt.c: 99:         if(ADC_res > therm_pressure){
  6914  00012A  0453               	decf	_ADC_res^0,w,c
  6915  00012C  0E04               	movlw	4
  6916  00012E  5854               	subwfb	(_ADC_res+1)^0,w,c
  6917  000130  A0D8               	btfss	status,0,c
  6918  000132  EF9D  F000         	goto	i2u269_41
  6919  000136  EFA0  F000         	goto	i2u269_40
  6920  00013A                     i2u269_41:
  6921  00013A  FFFF               	dw	65535	; assembler added errata NOP
  6922  00013C  EFA7  F000         	goto	i2l3487
  6923  000140                     i2u269_40:
  6924  000140  FFFF               	dw	65535	; assembler added errata NOP
  6925  000142                     
  6926                           ;interrupt.c: 101:             setTouchRel();
  6927  000142  EC82  F012         	call	_setTouchRel	;wreg free
  6928                           
  6929                           ;interrupt.c: 102:             setThermRel();
  6930  000146  EC87  F012         	call	_setThermRel	;wreg free
  6931                           
  6932                           ;interrupt.c: 103:         }else if(ADC_res > touch_pressure){
  6933  00014A  EFB6  F000         	goto	i2l3491
  6934  00014E                     i2l3487:
  6935  00014E  FFFF               	dw	65535	; assembler added errata NOP
  6936  000150  0453               	decf	_ADC_res^0,w,c
  6937  000152  0E02               	movlw	2
  6938  000154  5854               	subwfb	(_ADC_res+1)^0,w,c
  6939  000156  A0D8               	btfss	status,0,c
  6940  000158  EFB0  F000         	goto	i2u270_41
  6941  00015C  EFB3  F000         	goto	i2u270_40
  6942  000160                     i2u270_41:
  6943  000160  FFFF               	dw	65535	; assembler added errata NOP
  6944  000162  EFB6  F000         	goto	i2l3491
  6945  000166                     i2u270_40:
  6946  000166  FFFF               	dw	65535	; assembler added errata NOP
  6947  000168                     
  6948                           ;interrupt.c: 105:             setTouchRel();
  6949  000168  EC82  F012         	call	_setTouchRel	;wreg free
  6950  00016C                     i2l3491:
  6951  00016C  FFFF               	dw	65535	; assembler added errata NOP
  6952                           
  6953                           ;interrupt.c: 110:     if(PIR1bits.RC1IF){
  6954  00016E  AA9E               	btfss	158,5,c	;volatile
  6955  000170  EFBC  F000         	goto	i2u271_41
  6956  000174  EFBF  F000         	goto	i2u271_40
  6957  000178                     i2u271_41:
  6958  000178  FFFF               	dw	65535	; assembler added errata NOP
  6959  00017A  EFC6  F000         	goto	i2l474
  6960  00017E                     i2u271_40:
  6961  00017E  FFFF               	dw	65535	; assembler added errata NOP
  6962  000180                     
  6963                           ;interrupt.c: 111:         PIR1bits.RC1IF = 0;
  6964  000180  9A9E               	bcf	158,5,c	;volatile
  6965                           
  6966                           ;interrupt.c: 114:         unsigned char temp = RCREG1;
  6967  000182  CFAE F011          	movff	4014,isr@temp	;volatile
  6968  000186                     
  6969                           ;interrupt.c: 116:         storeData(temp);
  6970  000186  5011               	movf	isr@temp^0,w,c
  6971  000188  ECDB  F00B         	call	i2_storeData
  6972  00018C                     i2l474:
  6973  00018C  FFFF               	dw	65535	; assembler added errata NOP
  6974  00018E  C010  FFF4         	movff	??_isr+5,prodh
  6975  000192  C00F  FFF3         	movff	??_isr+4,prodl
  6976  000196  C00E  FFDA         	movff	??_isr+3,fsr2h
  6977  00019A  C00D  FFD9         	movff	??_isr+2,fsr2l
  6978  00019E  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6979  0001A0  0011               	retfie		f
  6980  0001A2  FFFF               	dw	65535	; errata NOP
  6981  0001A4                     __end_of_isr:
  6982                           	callstack 0
  6983                           
  6984 ;; *************** function i2_storeData *****************
  6985 ;; Defined at:
  6986 ;;		line 164 in file "usart.c"
  6987 ;; Parameters:    Size  Location     Type
  6988 ;;  data            1    wreg     unsigned char 
  6989 ;; Auto vars:     Size  Location     Type
  6990 ;;  data            1    9[COMRAM] unsigned char 
  6991 ;; Return value:  Size  Location     Type
  6992 ;;                  1    wreg      void 
  6993 ;; Registers used:
  6994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6995 ;; Tracked objects:
  6996 ;;		On entry : 0/0
  6997 ;;		On exit  : 0/0
  6998 ;;		Unchanged: 0/0
  6999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7000 ;;      Params:         0       0       0       0       0       0       0
  7001 ;;      Locals:         1       0       0       0       0       0       0
  7002 ;;      Temps:          2       0       0       0       0       0       0
  7003 ;;      Totals:         3       0       0       0       0       0       0
  7004 ;;Total ram usage:        3 bytes
  7005 ;; Hardware stack levels used:    1
  7006 ;; Hardware stack levels required when called:    2
  7007 ;; This function calls:
  7008 ;;		i2_printError
  7009 ;; This function is called by:
  7010 ;;		_isr
  7011 ;; This function uses a non-reentrant model
  7012 ;;
  7013                           
  7014                           	psect	text41
  7015  0017B6                     __ptext41:
  7016                           	callstack 0
  7017  0017B6                     i2_storeData:
  7018                           	callstack 0
  7019  0017B6  FFFF               	dw	65535	; assembler added errata NOP
  7020                           
  7021                           ;incstack = 0
  7022                           ;i2storeData@data stored from wreg
  7023  0017B8  6E0A               	movwf	i2storeData@data^0,c
  7024  0017BA                     
  7025                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  7026  0017BA  0E43               	movlw	low storeData@receivedMex
  7027  0017BC  245E               	addwf	storeData@counter^0,w,c
  7028  0017BE  6ED9               	movwf	fsr2l,c
  7029  0017C0  6ADA               	clrf	fsr2h,c
  7030  0017C2  0E00               	movlw	high storeData@receivedMex
  7031  0017C4  22DA               	addwfc	fsr2h,f,c
  7032  0017C6  C00A  FFDF         	movff	i2storeData@data,indf2
  7033  0017CA                     
  7034                           ;usart.c: 175:     counter++;
  7035  0017CA  2A5E               	incf	storeData@counter^0,f,c
  7036                           
  7037                           ;usart.c: 178:     switch(receivedMex[0]){
  7038  0017CC  EFF7  F00B         	goto	i2l3339
  7039  0017D0                     i2l3331:
  7040  0017D0  FFFF               	dw	65535	; assembler added errata NOP
  7041                           
  7042                           ;usart.c: 180:             mexLength = 5;
  7043  0017D2  0E05               	movlw	5
  7044  0017D4  6E6D               	movwf	storeData@mexLength^0,c
  7045                           
  7046                           ;usart.c: 181:             break;
  7047  0017D6  EF12  F00C         	goto	i2l3341
  7048  0017DA                     i2l3333:
  7049  0017DA  FFFF               	dw	65535	; assembler added errata NOP
  7050                           
  7051                           ;usart.c: 183:             mexLength = 9;
  7052  0017DC  0E09               	movlw	9
  7053  0017DE  6E6D               	movwf	storeData@mexLength^0,c
  7054                           
  7055                           ;usart.c: 184:             break;
  7056  0017E0  EF12  F00C         	goto	i2l3341
  7057  0017E4                     i2l3335:
  7058  0017E4  FFFF               	dw	65535	; assembler added errata NOP
  7059                           
  7060                           ;usart.c: 186:             mexLength = 1;
  7061  0017E6  0E01               	movlw	1
  7062  0017E8  6E6D               	movwf	storeData@mexLength^0,c
  7063                           
  7064                           ;usart.c: 187:             break;
  7065  0017EA  EF12  F00C         	goto	i2l3341
  7066  0017EE                     i2l3339:
  7067  0017EE  FFFF               	dw	65535	; assembler added errata NOP
  7068  0017F0  5043               	movf	storeData@receivedMex^0,w,c
  7069  0017F2  6E08               	movwf	??i2_storeData^0,c
  7070  0017F4  6A09               	clrf	(??i2_storeData+1)^0,c
  7071                           
  7072                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7073                           ; Switch size 1, requested type "simple"
  7074                           ; Number of cases is 1, Range of values is 0 to 0
  7075                           ; switch strategies available:
  7076                           ; Name         Instructions Cycles
  7077                           ; simple_byte            4     3 (average)
  7078                           ;	Chosen strategy is simple_byte
  7079  0017F6  5009               	movf	(??i2_storeData+1)^0,w,c
  7080  0017F8  0A00               	xorlw	0	; case 0
  7081  0017FA  B4D8               	btfsc	status,2,c
  7082  0017FC  EF02  F00C         	goto	i2l4569
  7083  001800  EF12  F00C         	goto	i2l3341
  7084  001804                     i2l4569:
  7085  001804  FFFF               	dw	65535	; assembler added errata NOP
  7086                           
  7087                           ; Switch size 1, requested type "simple"
  7088                           ; Number of cases is 3, Range of values is 0 to 2
  7089                           ; switch strategies available:
  7090                           ; Name         Instructions Cycles
  7091                           ; simple_byte           10     6 (average)
  7092                           ;	Chosen strategy is simple_byte
  7093  001806  5008               	movf	??i2_storeData^0,w,c
  7094  001808  0A00               	xorlw	0	; case 0
  7095  00180A  B4D8               	btfsc	status,2,c
  7096  00180C  EFE8  F00B         	goto	i2l3331
  7097  001810  0A01               	xorlw	1	; case 1
  7098  001812  B4D8               	btfsc	status,2,c
  7099  001814  EFED  F00B         	goto	i2l3333
  7100  001818  0A03               	xorlw	3	; case 2
  7101  00181A  B4D8               	btfsc	status,2,c
  7102  00181C  EFF2  F00B         	goto	i2l3335
  7103  001820  EF12  F00C         	goto	i2l3341
  7104  001824                     i2l3341:
  7105  001824  FFFF               	dw	65535	; assembler added errata NOP
  7106                           
  7107                           ;usart.c: 194:     if(counter >= mexLength){
  7108  001826  506D               	movf	storeData@mexLength^0,w,c
  7109  001828  5C5E               	subwf	storeData@counter^0,w,c
  7110  00182A  A0D8               	btfss	status,0,c
  7111  00182C  EF1A  F00C         	goto	i2u253_41
  7112  001830  EF1D  F00C         	goto	i2u253_40
  7113  001834                     i2u253_41:
  7114  001834  FFFF               	dw	65535	; assembler added errata NOP
  7115  001836  EF95  F00C         	goto	i2l588
  7116  00183A                     i2u253_40:
  7117  00183A  FFFF               	dw	65535	; assembler added errata NOP
  7118  00183C                     
  7119                           ;usart.c: 195:         counter = 0;
  7120  00183C  0E00               	movlw	0
  7121  00183E  6E5E               	movwf	storeData@counter^0,c
  7122                           
  7123                           ;usart.c: 198:         switch(receivedMex[0]){
  7124  001840  EF7A  F00C         	goto	i2l3363
  7125  001844                     i2l3345:
  7126  001844  FFFF               	dw	65535	; assembler added errata NOP
  7127                           
  7128                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7129  001846  5061               	movf	_dataCounter^0,w,c
  7130  001848  0D04               	mullw	4
  7131  00184A  0ECA               	movlw	low _dataSequence
  7132  00184C  24F3               	addwf	243,w,c
  7133  00184E  6ED9               	movwf	fsr2l,c
  7134  001850  0E00               	movlw	high _dataSequence
  7135  001852  20F4               	addwfc	prodh,w,c
  7136  001854  6EDA               	movwf	fsr2h,c
  7137  001856  C044  FFDF         	movff	storeData@receivedMex+1,indf2
  7138                           
  7139                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 10;
  7140  00185A  5061               	movf	_dataCounter^0,w,c
  7141  00185C  0D04               	mullw	4
  7142  00185E  0ECB               	movlw	low (_dataSequence+1)
  7143  001860  24F3               	addwf	243,w,c
  7144  001862  6ED9               	movwf	fsr2l,c
  7145  001864  0E00               	movlw	high (_dataSequence+1)
  7146  001866  20F4               	addwfc	prodh,w,c
  7147  001868  6EDA               	movwf	fsr2h,c
  7148  00186A  5045               	movf	(storeData@receivedMex+2)^0,w,c
  7149  00186C  0D0A               	mullw	10
  7150  00186E  CFF3 FFDF          	movff	prodl,indf2
  7151                           
  7152                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 10;
  7153  001872  5061               	movf	_dataCounter^0,w,c
  7154  001874  0D04               	mullw	4
  7155  001876  0ECC               	movlw	low (_dataSequence+2)
  7156  001878  24F3               	addwf	243,w,c
  7157  00187A  6ED9               	movwf	fsr2l,c
  7158  00187C  0E00               	movlw	high (_dataSequence+2)
  7159  00187E  20F4               	addwfc	prodh,w,c
  7160  001880  6EDA               	movwf	fsr2h,c
  7161  001882  5046               	movf	(storeData@receivedMex+3)^0,w,c
  7162  001884  0D0A               	mullw	10
  7163  001886  CFF3 FFDF          	movff	prodl,indf2
  7164                           
  7165                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7166  00188A  5061               	movf	_dataCounter^0,w,c
  7167  00188C  0D04               	mullw	4
  7168  00188E  0ECD               	movlw	low (_dataSequence+3)
  7169  001890  24F3               	addwf	243,w,c
  7170  001892  6ED9               	movwf	fsr2l,c
  7171  001894  0E00               	movlw	high (_dataSequence+3)
  7172  001896  20F4               	addwfc	prodh,w,c
  7173  001898  6EDA               	movwf	fsr2h,c
  7174  00189A  C047  FFDF         	movff	storeData@receivedMex+4,indf2
  7175  00189E                     
  7176                           ;usart.c: 205:                 dataCounter++;
  7177  00189E  2A61               	incf	_dataCounter^0,f,c
  7178                           
  7179                           ;usart.c: 206:                 break;
  7180  0018A0  EF95  F00C         	goto	i2l588
  7181  0018A4                     i2l585:
  7182  0018A4  FFFF               	dw	65535	; assembler added errata NOP
  7183                           
  7184                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  7185  0018A6  C044  F0DE         	movff	storeData@receivedMex+1,_newSequenceData
  7186                           
  7187                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  7188  0018AA  C045  F0DF         	movff	storeData@receivedMex+2,_newSequenceData+1
  7189  0018AE                     
  7190                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 10;
  7191  0018AE  5046               	movf	(storeData@receivedMex+3)^0,w,c
  7192  0018B0  0D0A               	mullw	10
  7193  0018B2  CFF3 F0E0          	movff	prodl,_newSequenceData+2
  7194                           
  7195                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 10;
  7196  0018B6  5047               	movf	(storeData@receivedMex+4)^0,w,c
  7197  0018B8  0D0A               	mullw	10
  7198  0018BA  CFF3 F0E1          	movff	prodl,_newSequenceData+3
  7199  0018BE                     
  7200                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  7201  0018BE  C048  F0E2         	movff	storeData@receivedMex+5,_newSequenceData+4
  7202                           
  7203                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 10;
  7204  0018C2  5049               	movf	(storeData@receivedMex+6)^0,w,c
  7205  0018C4  0D0A               	mullw	10
  7206  0018C6  CFF3 F0E3          	movff	prodl,_newSequenceData+5
  7207                           
  7208                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 10;
  7209  0018CA  504A               	movf	(storeData@receivedMex+7)^0,w,c
  7210  0018CC  0D0A               	mullw	10
  7211  0018CE  CFF3 F0E4          	movff	prodl,_newSequenceData+6
  7212  0018D2                     
  7213                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  7214  0018D2  C04B  F0E5         	movff	storeData@receivedMex+8,_newSequenceData+7
  7215  0018D6                     
  7216                           ;usart.c: 218:                 _newSequence = 1;
  7217  0018D6  0E01               	movlw	1
  7218  0018D8  6E5F               	movwf	__newSequence^0,c
  7219                           
  7220                           ;usart.c: 219:                 break;
  7221  0018DA  EF95  F00C         	goto	i2l588
  7222  0018DE                     i2l3357:
  7223  0018DE  FFFF               	dw	65535	; assembler added errata NOP
  7224                           
  7225                           ;usart.c: 222:                 _fatalError = 1;
  7226  0018E0  0E01               	movlw	1
  7227  0018E2  6E60               	movwf	__fatalError^0,c
  7228                           
  7229                           ;usart.c: 223:                 break;
  7230  0018E4  EF95  F00C         	goto	i2l588
  7231  0018E8                     i2l3359:
  7232  0018E8  FFFF               	dw	65535	; assembler added errata NOP
  7233                           
  7234                           ;usart.c: 226:                 printError(8);
  7235  0018EA  0E08               	movlw	8
  7236  0018EC  ECC1  F00D         	call	i2_printError
  7237                           
  7238                           ;usart.c: 227:                 break;
  7239  0018F0  EF95  F00C         	goto	i2l588
  7240  0018F4                     i2l3363:
  7241  0018F4  FFFF               	dw	65535	; assembler added errata NOP
  7242  0018F6  5043               	movf	storeData@receivedMex^0,w,c
  7243  0018F8  6E08               	movwf	??i2_storeData^0,c
  7244  0018FA  6A09               	clrf	(??i2_storeData+1)^0,c
  7245                           
  7246                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7247                           ; Switch size 1, requested type "simple"
  7248                           ; Number of cases is 1, Range of values is 0 to 0
  7249                           ; switch strategies available:
  7250                           ; Name         Instructions Cycles
  7251                           ; simple_byte            4     3 (average)
  7252                           ;	Chosen strategy is simple_byte
  7253  0018FC  5009               	movf	(??i2_storeData+1)^0,w,c
  7254  0018FE  0A00               	xorlw	0	; case 0
  7255  001900  B4D8               	btfsc	status,2,c
  7256  001902  EF85  F00C         	goto	i2l4571
  7257  001906  EF74  F00C         	goto	i2l3359
  7258  00190A                     i2l4571:
  7259  00190A  FFFF               	dw	65535	; assembler added errata NOP
  7260                           
  7261                           ; Switch size 1, requested type "simple"
  7262                           ; Number of cases is 3, Range of values is 0 to 2
  7263                           ; switch strategies available:
  7264                           ; Name         Instructions Cycles
  7265                           ; simple_byte           10     6 (average)
  7266                           ;	Chosen strategy is simple_byte
  7267  00190C  5008               	movf	??i2_storeData^0,w,c
  7268  00190E  0A00               	xorlw	0	; case 0
  7269  001910  B4D8               	btfsc	status,2,c
  7270  001912  EF22  F00C         	goto	i2l3345
  7271  001916  0A01               	xorlw	1	; case 1
  7272  001918  B4D8               	btfsc	status,2,c
  7273  00191A  EF52  F00C         	goto	i2l585
  7274  00191E  0A03               	xorlw	3	; case 2
  7275  001920  B4D8               	btfsc	status,2,c
  7276  001922  EF6F  F00C         	goto	i2l3357
  7277  001926  EF74  F00C         	goto	i2l3359
  7278  00192A                     i2l588:
  7279  00192A  FFFF               	dw	65535	; assembler added errata NOP
  7280  00192C  0012               	return		;funcret
  7281  00192E  FFFF               	dw	65535	; errata NOP
  7282  001930                     __end_ofi2_storeData:
  7283                           	callstack 0
  7284                           
  7285 ;; *************** function _writeTM0 *****************
  7286 ;; Defined at:
  7287 ;;		line 28 in file "motors.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;		None
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;		None
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  1    wreg      void 
  7294 ;; Registers used:
  7295 ;;		wreg, status,2
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7301 ;;      Params:         0       0       0       0       0       0       0
  7302 ;;      Locals:         0       0       0       0       0       0       0
  7303 ;;      Temps:          0       0       0       0       0       0       0
  7304 ;;      Totals:         0       0       0       0       0       0       0
  7305 ;;Total ram usage:        0 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; This function calls:
  7308 ;;		Nothing
  7309 ;; This function is called by:
  7310 ;;		_isr
  7311 ;; This function uses a non-reentrant model
  7312 ;;
  7313                           
  7314                           	psect	text42
  7315  002488                     __ptext42:
  7316                           	callstack 0
  7317  002488                     _writeTM0:
  7318                           	callstack 0
  7319  002488  FFFF               	dw	65535	; assembler added errata NOP
  7320  00248A                     
  7321                           ;motors.c: 29:     tm0Error = 1;
  7322  00248A  0E00               	movlw	0
  7323  00248C  6E5A               	movwf	(_tm0Error+1)^0,c
  7324  00248E  0E01               	movlw	1
  7325  002490  6E59               	movwf	_tm0Error^0,c
  7326  002492  0012               	return		;funcret
  7327  002494  FFFF               	dw	65535	; errata NOP
  7328  002496                     __end_of_writeTM0:
  7329                           	callstack 0
  7330                           
  7331 ;; *************** function _whatsTM0Limit *****************
  7332 ;; Defined at:
  7333 ;;		line 42 in file "motors.c"
  7334 ;; Parameters:    Size  Location     Type
  7335 ;;		None
  7336 ;; Auto vars:     Size  Location     Type
  7337 ;;		None
  7338 ;; Return value:  Size  Location     Type
  7339 ;;                  1    wreg      unsigned char 
  7340 ;; Registers used:
  7341 ;;		wreg, status,2
  7342 ;; Tracked objects:
  7343 ;;		On entry : 0/0
  7344 ;;		On exit  : 0/0
  7345 ;;		Unchanged: 0/0
  7346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7347 ;;      Params:         0       0       0       0       0       0       0
  7348 ;;      Locals:         0       0       0       0       0       0       0
  7349 ;;      Temps:          0       0       0       0       0       0       0
  7350 ;;      Totals:         0       0       0       0       0       0       0
  7351 ;;Total ram usage:        0 bytes
  7352 ;; Hardware stack levels used:    1
  7353 ;; This function calls:
  7354 ;;		Nothing
  7355 ;; This function is called by:
  7356 ;;		_isr
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           	psect	text43
  7361  002538                     __ptext43:
  7362                           	callstack 0
  7363  002538                     _whatsTM0Limit:
  7364                           	callstack 0
  7365  002538  FFFF               	dw	65535	; assembler added errata NOP
  7366  00253A                     
  7367                           ;motors.c: 43:     return(tm0Limit);
  7368  00253A  5066               	movf	_tm0Limit^0,w,c
  7369  00253C  0012               	return		;funcret
  7370  00253E  FFFF               	dw	65535	; errata NOP
  7371  002540                     __end_of_whatsTM0Limit:
  7372                           	callstack 0
  7373                           
  7374 ;; *************** function _toggleStep *****************
  7375 ;; Defined at:
  7376 ;;		line 92 in file "timer.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;		None
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;		None
  7381 ;; Return value:  Size  Location     Type
  7382 ;;                  1    wreg      void 
  7383 ;; Registers used:
  7384 ;;		wreg, status,2
  7385 ;; Tracked objects:
  7386 ;;		On entry : 0/0
  7387 ;;		On exit  : 0/0
  7388 ;;		Unchanged: 0/0
  7389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7390 ;;      Params:         0       0       0       0       0       0       0
  7391 ;;      Locals:         0       0       0       0       0       0       0
  7392 ;;      Temps:          0       0       0       0       0       0       0
  7393 ;;      Totals:         0       0       0       0       0       0       0
  7394 ;;Total ram usage:        0 bytes
  7395 ;; Hardware stack levels used:    1
  7396 ;; This function calls:
  7397 ;;		Nothing
  7398 ;; This function is called by:
  7399 ;;		_isr
  7400 ;; This function uses a non-reentrant model
  7401 ;;
  7402                           
  7403                           	psect	text44
  7404  0024FA                     __ptext44:
  7405                           	callstack 0
  7406  0024FA                     _toggleStep:
  7407                           	callstack 0
  7408  0024FA  FFFF               	dw	65535	; assembler added errata NOP
  7409  0024FC                     
  7410                           ;timer.c: 93:     stepToggle = 1;
  7411  0024FC  0E01               	movlw	1
  7412  0024FE  6E5B               	movwf	_stepToggle^0,c	;volatile
  7413  002500  0012               	return		;funcret
  7414  002502  FFFF               	dw	65535	; errata NOP
  7415  002504                     __end_of_toggleStep:
  7416                           	callstack 0
  7417                           
  7418 ;; *************** function _setTouchRel *****************
  7419 ;; Defined at:
  7420 ;;		line 86 in file "adc.c"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;		None
  7423 ;; Auto vars:     Size  Location     Type
  7424 ;;		None
  7425 ;; Return value:  Size  Location     Type
  7426 ;;                  1    wreg      void 
  7427 ;; Registers used:
  7428 ;;		wreg, status,2
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7434 ;;      Params:         0       0       0       0       0       0       0
  7435 ;;      Locals:         0       0       0       0       0       0       0
  7436 ;;      Temps:          0       0       0       0       0       0       0
  7437 ;;      Totals:         0       0       0       0       0       0       0
  7438 ;;Total ram usage:        0 bytes
  7439 ;; Hardware stack levels used:    1
  7440 ;; This function calls:
  7441 ;;		Nothing
  7442 ;; This function is called by:
  7443 ;;		_isr
  7444 ;; This function uses a non-reentrant model
  7445 ;;
  7446                           
  7447                           	psect	text45
  7448  002504                     __ptext45:
  7449                           	callstack 0
  7450  002504                     _setTouchRel:
  7451                           	callstack 0
  7452  002504  FFFF               	dw	65535	; assembler added errata NOP
  7453  002506                     
  7454                           ;adc.c: 87:     touch_rel = 1;
  7455  002506  0E01               	movlw	1
  7456  002508  6E65               	movwf	_touch_rel^0,c	;volatile
  7457  00250A  0012               	return		;funcret
  7458  00250C  FFFF               	dw	65535	; errata NOP
  7459  00250E                     __end_of_setTouchRel:
  7460                           	callstack 0
  7461                           
  7462 ;; *************** function _setThermRel *****************
  7463 ;; Defined at:
  7464 ;;		line 79 in file "adc.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;		None
  7467 ;; Auto vars:     Size  Location     Type
  7468 ;;		None
  7469 ;; Return value:  Size  Location     Type
  7470 ;;                  1    wreg      void 
  7471 ;; Registers used:
  7472 ;;		wreg, status,2
  7473 ;; Tracked objects:
  7474 ;;		On entry : 0/0
  7475 ;;		On exit  : 0/0
  7476 ;;		Unchanged: 0/0
  7477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7478 ;;      Params:         0       0       0       0       0       0       0
  7479 ;;      Locals:         0       0       0       0       0       0       0
  7480 ;;      Temps:          0       0       0       0       0       0       0
  7481 ;;      Totals:         0       0       0       0       0       0       0
  7482 ;;Total ram usage:        0 bytes
  7483 ;; Hardware stack levels used:    1
  7484 ;; This function calls:
  7485 ;;		Nothing
  7486 ;; This function is called by:
  7487 ;;		_isr
  7488 ;; This function uses a non-reentrant model
  7489 ;;
  7490                           
  7491                           	psect	text46
  7492  00250E                     __ptext46:
  7493                           	callstack 0
  7494  00250E                     _setThermRel:
  7495                           	callstack 0
  7496  00250E  FFFF               	dw	65535	; assembler added errata NOP
  7497  002510                     
  7498                           ;adc.c: 80:     therm_rel = 1;
  7499  002510  0E01               	movlw	1
  7500  002512  6E64               	movwf	_therm_rel^0,c	;volatile
  7501  002514  0012               	return		;funcret
  7502  002516  FFFF               	dw	65535	; errata NOP
  7503  002518                     __end_of_setThermRel:
  7504                           	callstack 0
  7505                           
  7506 ;; *************** function _retPeriod *****************
  7507 ;; Defined at:
  7508 ;;		line 100 in file "timer.c"
  7509 ;; Parameters:    Size  Location     Type
  7510 ;;		None
  7511 ;; Auto vars:     Size  Location     Type
  7512 ;;		None
  7513 ;; Return value:  Size  Location     Type
  7514 ;;                  2    0[COMRAM] unsigned int 
  7515 ;; Registers used:
  7516 ;;		None
  7517 ;; Tracked objects:
  7518 ;;		On entry : 0/0
  7519 ;;		On exit  : 0/0
  7520 ;;		Unchanged: 0/0
  7521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7522 ;;      Params:         2       0       0       0       0       0       0
  7523 ;;      Locals:         0       0       0       0       0       0       0
  7524 ;;      Temps:          0       0       0       0       0       0       0
  7525 ;;      Totals:         2       0       0       0       0       0       0
  7526 ;;Total ram usage:        2 bytes
  7527 ;; Hardware stack levels used:    1
  7528 ;; This function calls:
  7529 ;;		Nothing
  7530 ;; This function is called by:
  7531 ;;		_isr
  7532 ;; This function uses a non-reentrant model
  7533 ;;
  7534                           
  7535                           	psect	text47
  7536  002496                     __ptext47:
  7537                           	callstack 0
  7538  002496                     _retPeriod:
  7539                           	callstack 0
  7540  002496  FFFF               	dw	65535	; assembler added errata NOP
  7541  002498                     
  7542                           ;timer.c: 101:     return pwmPeriod;
  7543  002498  C04F  F001         	movff	_pwmPeriod,?_retPeriod
  7544  00249C  C050  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7545  0024A0  0012               	return		;funcret
  7546  0024A2  FFFF               	dw	65535	; errata NOP
  7547  0024A4                     __end_of_retPeriod:
  7548                           	callstack 0
  7549                           
  7550 ;; *************** function _increaseStep *****************
  7551 ;; Defined at:
  7552 ;;		line 84 in file "timer.c"
  7553 ;; Parameters:    Size  Location     Type
  7554 ;;		None
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;		None
  7557 ;; Return value:  Size  Location     Type
  7558 ;;                  1    wreg      void 
  7559 ;; Registers used:
  7560 ;;		status,2, status,0
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7566 ;;      Params:         0       0       0       0       0       0       0
  7567 ;;      Locals:         0       0       0       0       0       0       0
  7568 ;;      Temps:          0       0       0       0       0       0       0
  7569 ;;      Totals:         0       0       0       0       0       0       0
  7570 ;;Total ram usage:        0 bytes
  7571 ;; Hardware stack levels used:    1
  7572 ;; This function calls:
  7573 ;;		Nothing
  7574 ;; This function is called by:
  7575 ;;		_isr
  7576 ;; This function uses a non-reentrant model
  7577 ;;
  7578                           
  7579                           	psect	text48
  7580  002540                     __ptext48:
  7581                           	callstack 0
  7582  002540                     _increaseStep:
  7583                           	callstack 0
  7584  002540  FFFF               	dw	65535	; assembler added errata NOP
  7585  002542                     
  7586                           ;timer.c: 85:     pwmStep++;
  7587  002542  2A5C               	incf	_pwmStep^0,f,c	;volatile
  7588  002544  0012               	return		;funcret
  7589  002546  FFFF               	dw	65535	; errata NOP
  7590  002548                     __end_of_increaseStep:
  7591                           	callstack 0
  7592                           
  7593 ;; *************** function _fatalError *****************
  7594 ;; Defined at:
  7595 ;;		line 61 in file "usart.c"
  7596 ;; Parameters:    Size  Location     Type
  7597 ;;		None
  7598 ;; Auto vars:     Size  Location     Type
  7599 ;;		None
  7600 ;; Return value:  Size  Location     Type
  7601 ;;                  1    wreg      unsigned char 
  7602 ;; Registers used:
  7603 ;;		wreg, status,2
  7604 ;; Tracked objects:
  7605 ;;		On entry : 0/0
  7606 ;;		On exit  : 0/0
  7607 ;;		Unchanged: 0/0
  7608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7609 ;;      Params:         0       0       0       0       0       0       0
  7610 ;;      Locals:         0       0       0       0       0       0       0
  7611 ;;      Temps:          0       0       0       0       0       0       0
  7612 ;;      Totals:         0       0       0       0       0       0       0
  7613 ;;Total ram usage:        0 bytes
  7614 ;; Hardware stack levels used:    1
  7615 ;; This function calls:
  7616 ;;		Nothing
  7617 ;; This function is called by:
  7618 ;;		_isr
  7619 ;; This function uses a non-reentrant model
  7620 ;;
  7621                           
  7622                           	psect	text49
  7623  002548                     __ptext49:
  7624                           	callstack 0
  7625  002548                     _fatalError:
  7626                           	callstack 0
  7627  002548  FFFF               	dw	65535	; assembler added errata NOP
  7628  00254A                     
  7629                           ;usart.c: 62:     return _fatalError;
  7630  00254A  5060               	movf	__fatalError^0,w,c
  7631  00254C  0012               	return		;funcret
  7632  00254E  FFFF               	dw	65535	; errata NOP
  7633  002550                     __end_of_fatalError:
  7634                           	callstack 0
  7635                           
  7636 ;; *************** function _abortAll *****************
  7637 ;; Defined at:
  7638 ;;		line 817 in file "motors.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;		None
  7641 ;; Auto vars:     Size  Location     Type
  7642 ;;		None
  7643 ;; Return value:  Size  Location     Type
  7644 ;;                  1    wreg      void 
  7645 ;; Registers used:
  7646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7647 ;; Tracked objects:
  7648 ;;		On entry : 0/0
  7649 ;;		On exit  : 0/0
  7650 ;;		Unchanged: 0/0
  7651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7652 ;;      Params:         0       0       0       0       0       0       0
  7653 ;;      Locals:         0       0       0       0       0       0       0
  7654 ;;      Temps:          0       0       0       0       0       0       0
  7655 ;;      Totals:         0       0       0       0       0       0       0
  7656 ;;Total ram usage:        0 bytes
  7657 ;; Hardware stack levels used:    1
  7658 ;; Hardware stack levels required when called:    2
  7659 ;; This function calls:
  7660 ;;		i2_printError
  7661 ;; This function is called by:
  7662 ;;		_isr
  7663 ;; This function uses a non-reentrant model
  7664 ;;
  7665                           
  7666                           	psect	text50
  7667  00243E                     __ptext50:
  7668                           	callstack 0
  7669  00243E                     _abortAll:
  7670                           	callstack 0
  7671  00243E  FFFF               	dw	65535	; assembler added errata NOP
  7672  002440                     
  7673                           ;motors.c: 825:     printError(7);
  7674  002440  0E07               	movlw	7
  7675  002442  ECC1  F00D         	call	i2_printError
  7676  002446                     i2l253:
  7677  002446  FFFF               	dw	65535	; assembler added errata NOP
  7678  002448  EF23  F012         	goto	i2l253
  7679  00244C  0012               	return		;funcret
  7680  00244E  FFFF               	dw	65535	; errata NOP
  7681  002450                     __end_of_abortAll:
  7682                           	callstack 0
  7683                           
  7684 ;; *************** function i2_printError *****************
  7685 ;; Defined at:
  7686 ;;		line 111 in file "usart.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;  errCode         1    wreg     unsigned char 
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;  errCode         1    6[COMRAM] unsigned char 
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  1    wreg      void 
  7693 ;; Registers used:
  7694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7700 ;;      Params:         0       0       0       0       0       0       0
  7701 ;;      Locals:         1       0       0       0       0       0       0
  7702 ;;      Temps:          2       0       0       0       0       0       0
  7703 ;;      Totals:         3       0       0       0       0       0       0
  7704 ;;Total ram usage:        3 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; Hardware stack levels required when called:    1
  7707 ;; This function calls:
  7708 ;;		i2_uartTx
  7709 ;; This function is called by:
  7710 ;;		_abortAll
  7711 ;;		i2_storeData
  7712 ;; This function uses a non-reentrant model
  7713 ;;
  7714                           
  7715                           	psect	text51
  7716  001B82                     __ptext51:
  7717                           	callstack 0
  7718  001B82                     i2_printError:
  7719                           	callstack 0
  7720  001B82  FFFF               	dw	65535	; assembler added errata NOP
  7721                           
  7722                           ;incstack = 0
  7723                           ;i2printError@errCode stored from wreg
  7724  001B84  6E07               	movwf	i2printError@errCode^0,c
  7725  001B86                     
  7726                           ;usart.c: 113:     switch(errCode){
  7727  001B86  EF1D  F00E         	goto	i2l3023
  7728  001B8A                     i2l3005:
  7729  001B8A  FFFF               	dw	65535	; assembler added errata NOP
  7730                           
  7731                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7732  001B8C  0E94               	movlw	low _errString_Feed
  7733  001B8E  6E01               	movwf	i2uartTx@ptr^0,c
  7734  001B90  0E00               	movlw	high _errString_Feed
  7735  001B92  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7736  001B94  0E1E               	movlw	30
  7737  001B96  6E03               	movwf	i2uartTx@length^0,c
  7738  001B98  EC37  F011         	call	i2_uartTx	;wreg free
  7739                           
  7740                           ;usart.c: 116:             break;
  7741  001B9C  EF4C  F00E         	goto	i2l555
  7742  001BA0                     i2l3007:
  7743  001BA0  FFFF               	dw	65535	; assembler added errata NOP
  7744                           
  7745                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7746  001BA2  0E5E               	movlw	low _errString_ZEND
  7747  001BA4  6E01               	movwf	i2uartTx@ptr^0,c
  7748  001BA6  0E01               	movlw	high _errString_ZEND
  7749  001BA8  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7750  001BAA  0E29               	movlw	41
  7751  001BAC  6E03               	movwf	i2uartTx@length^0,c
  7752  001BAE  EC37  F011         	call	i2_uartTx	;wreg free
  7753                           
  7754                           ;usart.c: 119:             break;
  7755  001BB2  EF4C  F00E         	goto	i2l555
  7756  001BB6                     i2l3009:
  7757  001BB6  FFFF               	dw	65535	; assembler added errata NOP
  7758                           
  7759                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7760  001BB8  0E87               	movlw	low _errString_Reset
  7761  001BBA  6E01               	movwf	i2uartTx@ptr^0,c
  7762  001BBC  0E01               	movlw	high _errString_Reset
  7763  001BBE  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7764  001BC0  0E28               	movlw	40
  7765  001BC2  6E03               	movwf	i2uartTx@length^0,c
  7766  001BC4  EC37  F011         	call	i2_uartTx	;wreg free
  7767                           
  7768                           ;usart.c: 122:             break;
  7769  001BC8  EF4C  F00E         	goto	i2l555
  7770  001BCC                     i2l3011:
  7771  001BCC  FFFF               	dw	65535	; assembler added errata NOP
  7772                           
  7773                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7774  001BCE  0E35               	movlw	low _errString_Point
  7775  001BD0  6E01               	movwf	i2uartTx@ptr^0,c
  7776  001BD2  0E01               	movlw	high _errString_Point
  7777  001BD4  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7778  001BD6  0E29               	movlw	41
  7779  001BD8  6E03               	movwf	i2uartTx@length^0,c
  7780  001BDA  EC37  F011         	call	i2_uartTx	;wreg free
  7781                           
  7782                           ;usart.c: 125:             break;
  7783  001BDE  EF4C  F00E         	goto	i2l555
  7784  001BE2                     i2l3013:
  7785  001BE2  FFFF               	dw	65535	; assembler added errata NOP
  7786                           
  7787                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7788  001BE4  0ED6               	movlw	low _errString_Bound
  7789  001BE6  6E01               	movwf	i2uartTx@ptr^0,c
  7790  001BE8  0E01               	movlw	high _errString_Bound
  7791  001BEA  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7792  001BEC  0E21               	movlw	33
  7793  001BEE  6E03               	movwf	i2uartTx@length^0,c
  7794  001BF0  EC37  F011         	call	i2_uartTx	;wreg free
  7795                           
  7796                           ;usart.c: 128:             break;
  7797  001BF4  EF4C  F00E         	goto	i2l555
  7798  001BF8                     i2l3015:
  7799  001BF8  FFFF               	dw	65535	; assembler added errata NOP
  7800                           
  7801                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7802  001BFA  0E00               	movlw	low _errString_PointZ
  7803  001BFC  6E01               	movwf	i2uartTx@ptr^0,c
  7804  001BFE  0E01               	movlw	high _errString_PointZ
  7805  001C00  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7806  001C02  0E35               	movlw	53
  7807  001C04  6E03               	movwf	i2uartTx@length^0,c
  7808  001C06  EC37  F011         	call	i2_uartTx	;wreg free
  7809                           
  7810                           ;usart.c: 131:             break;
  7811  001C0A  EF4C  F00E         	goto	i2l555
  7812  001C0E                     i2l3017:
  7813  001C0E  FFFF               	dw	65535	; assembler added errata NOP
  7814                           
  7815                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7816  001C10  0EAF               	movlw	low _errString_Fatal
  7817  001C12  6E01               	movwf	i2uartTx@ptr^0,c
  7818  001C14  0E01               	movlw	high _errString_Fatal
  7819  001C16  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7820  001C18  0E27               	movlw	39
  7821  001C1A  6E03               	movwf	i2uartTx@length^0,c
  7822  001C1C  EC37  F011         	call	i2_uartTx	;wreg free
  7823                           
  7824                           ;usart.c: 134:             break;
  7825  001C20  EF4C  F00E         	goto	i2l555
  7826  001C24                     i2l3019:
  7827  001C24  FFFF               	dw	65535	; assembler added errata NOP
  7828                           
  7829                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7830  001C26  0EB2               	movlw	low _errString_Command
  7831  001C28  6E01               	movwf	i2uartTx@ptr^0,c
  7832  001C2A  0E00               	movlw	high _errString_Command
  7833  001C2C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7834  001C2E  0E18               	movlw	24
  7835  001C30  6E03               	movwf	i2uartTx@length^0,c
  7836  001C32  EC37  F011         	call	i2_uartTx	;wreg free
  7837                           
  7838                           ;usart.c: 137:             break;
  7839  001C36  EF4C  F00E         	goto	i2l555
  7840  001C3A                     i2l3023:
  7841  001C3A  FFFF               	dw	65535	; assembler added errata NOP
  7842  001C3C  5007               	movf	i2printError@errCode^0,w,c
  7843  001C3E  6E05               	movwf	??i2_printError^0,c
  7844  001C40  6A06               	clrf	(??i2_printError+1)^0,c
  7845                           
  7846                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7847                           ; Switch size 1, requested type "simple"
  7848                           ; Number of cases is 1, Range of values is 0 to 0
  7849                           ; switch strategies available:
  7850                           ; Name         Instructions Cycles
  7851                           ; simple_byte            4     3 (average)
  7852                           ;	Chosen strategy is simple_byte
  7853  001C42  5006               	movf	(??i2_printError+1)^0,w,c
  7854  001C44  0A00               	xorlw	0	; case 0
  7855  001C46  B4D8               	btfsc	status,2,c
  7856  001C48  EF28  F00E         	goto	i2l4573
  7857  001C4C  EF4C  F00E         	goto	i2l555
  7858  001C50                     i2l4573:
  7859  001C50  FFFF               	dw	65535	; assembler added errata NOP
  7860                           
  7861                           ; Switch size 1, requested type "simple"
  7862                           ; Number of cases is 8, Range of values is 1 to 8
  7863                           ; switch strategies available:
  7864                           ; Name         Instructions Cycles
  7865                           ; simple_byte           25    13 (average)
  7866                           ;	Chosen strategy is simple_byte
  7867  001C52  5005               	movf	??i2_printError^0,w,c
  7868  001C54  0A01               	xorlw	1	; case 1
  7869  001C56  B4D8               	btfsc	status,2,c
  7870  001C58  EFC5  F00D         	goto	i2l3005
  7871  001C5C  0A03               	xorlw	3	; case 2
  7872  001C5E  B4D8               	btfsc	status,2,c
  7873  001C60  EFD0  F00D         	goto	i2l3007
  7874  001C64  0A01               	xorlw	1	; case 3
  7875  001C66  B4D8               	btfsc	status,2,c
  7876  001C68  EFDB  F00D         	goto	i2l3009
  7877  001C6C  0A07               	xorlw	7	; case 4
  7878  001C6E  B4D8               	btfsc	status,2,c
  7879  001C70  EFE6  F00D         	goto	i2l3011
  7880  001C74  0A01               	xorlw	1	; case 5
  7881  001C76  B4D8               	btfsc	status,2,c
  7882  001C78  EFF1  F00D         	goto	i2l3013
  7883  001C7C  0A03               	xorlw	3	; case 6
  7884  001C7E  B4D8               	btfsc	status,2,c
  7885  001C80  EFFC  F00D         	goto	i2l3015
  7886  001C84  0A01               	xorlw	1	; case 7
  7887  001C86  B4D8               	btfsc	status,2,c
  7888  001C88  EF07  F00E         	goto	i2l3017
  7889  001C8C  0A0F               	xorlw	15	; case 8
  7890  001C8E  B4D8               	btfsc	status,2,c
  7891  001C90  EF12  F00E         	goto	i2l3019
  7892  001C94  EF4C  F00E         	goto	i2l555
  7893  001C98                     i2l555:
  7894  001C98  FFFF               	dw	65535	; assembler added errata NOP
  7895  001C9A  0012               	return		;funcret
  7896  001C9C  FFFF               	dw	65535	; errata NOP
  7897  001C9E                     __end_ofi2_printError:
  7898                           	callstack 0
  7899                           
  7900 ;; *************** function i2_uartTx *****************
  7901 ;; Defined at:
  7902 ;;		line 148 in file "usart.c"
  7903 ;; Parameters:    Size  Location     Type
  7904 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7905 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  7906 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  7907 ;;  length          1    2[COMRAM] unsigned char 
  7908 ;; Auto vars:     Size  Location     Type
  7909 ;;  i               1    3[COMRAM] unsigned char 
  7910 ;; Return value:  Size  Location     Type
  7911 ;;                  1    wreg      void 
  7912 ;; Registers used:
  7913 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7914 ;; Tracked objects:
  7915 ;;		On entry : 0/0
  7916 ;;		On exit  : 0/0
  7917 ;;		Unchanged: 0/0
  7918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7919 ;;      Params:         3       0       0       0       0       0       0
  7920 ;;      Locals:         1       0       0       0       0       0       0
  7921 ;;      Temps:          0       0       0       0       0       0       0
  7922 ;;      Totals:         4       0       0       0       0       0       0
  7923 ;;Total ram usage:        4 bytes
  7924 ;; Hardware stack levels used:    1
  7925 ;; This function calls:
  7926 ;;		Nothing
  7927 ;; This function is called by:
  7928 ;;		i2_printError
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           	psect	text52
  7933  00226E                     __ptext52:
  7934                           	callstack 0
  7935  00226E                     i2_uartTx:
  7936                           	callstack 0
  7937  00226E  FFFF               	dw	65535	; assembler added errata NOP
  7938  002270                     
  7939                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  7940  002270  0E01               	movlw	1
  7941  002272  6E04               	movwf	i2uartTx@i^0,c
  7942  002274  EF50  F011         	goto	i2l2721
  7943  002278                     i2l2717:
  7944  002278  FFFF               	dw	65535	; assembler added errata NOP
  7945                           
  7946                           ;usart.c: 153:         TXREG = *ptr;
  7947  00227A  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  7948  00227E  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  7949  002282  50DF               	movf	indf2,w,c
  7950  002284  6EAD               	movwf	173,c	;volatile
  7951  002286                     i2l560:
  7952  002286  FFFF               	dw	65535	; assembler added errata NOP
  7953  002288  A2AC               	btfss	172,1,c	;volatile
  7954  00228A  EF49  F011         	goto	i2u183_41
  7955  00228E  EF4C  F011         	goto	i2u183_40
  7956  002292                     i2u183_41:
  7957  002292  FFFF               	dw	65535	; assembler added errata NOP
  7958  002294  EF43  F011         	goto	i2l560
  7959  002298                     i2u183_40:
  7960  002298  FFFF               	dw	65535	; assembler added errata NOP
  7961  00229A                     
  7962                           ;usart.c: 157:         ptr++;
  7963  00229A  4A01               	infsnz	i2uartTx@ptr^0,f,c
  7964  00229C  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  7965                           
  7966                           ;usart.c: 158:     }
  7967  00229E  2A04               	incf	i2uartTx@i^0,f,c
  7968  0022A0                     i2l2721:
  7969  0022A0  FFFF               	dw	65535	; assembler added errata NOP
  7970  0022A2  5003               	movf	i2uartTx@length^0,w,c
  7971  0022A4  5C04               	subwf	i2uartTx@i^0,w,c
  7972  0022A6  A0D8               	btfss	status,0,c
  7973  0022A8  EF58  F011         	goto	i2u184_41
  7974  0022AC  EF5B  F011         	goto	i2u184_40
  7975  0022B0                     i2u184_41:
  7976  0022B0  FFFF               	dw	65535	; assembler added errata NOP
  7977  0022B2  EF3C  F011         	goto	i2l2717
  7978  0022B6                     i2u184_40:
  7979  0022B6  FFFF               	dw	65535	; assembler added errata NOP
  7980  0022B8  0012               	return		;funcret
  7981  0022BA  FFFF               	dw	65535	; errata NOP
  7982  0022BC                     __end_ofi2_uartTx:
  7983                           	callstack 0
  7984                           
  7985                           	psect	rparam
  7986  0000                     
  7987                           	psect	temp
  7988  00006E                     btemp:
  7989                           	callstack 0
  7990  00006E                     	ds	1
  7991  0000                     int$flags	set	btemp
  7992  0000                     wtemp8	set	btemp+1
  7993  0000                     ttemp5	set	btemp+1
  7994  0000                     ttemp6	set	btemp+4
  7995  0000                     ttemp7	set	btemp+8
  7996                           
  7997                           	psect	idloc
  7998                           
  7999                           ;Config register IDLOC0 @ 0x200000
  8000                           ;	unspecified, using default values
  8001  200000                     	org	2097152
  8002  200000  FF                 	db	255
  8003                           
  8004                           ;Config register IDLOC1 @ 0x200001
  8005                           ;	unspecified, using default values
  8006  200001                     	org	2097153
  8007  200001  FF                 	db	255
  8008                           
  8009                           ;Config register IDLOC2 @ 0x200002
  8010                           ;	unspecified, using default values
  8011  200002                     	org	2097154
  8012  200002  FF                 	db	255
  8013                           
  8014                           ;Config register IDLOC3 @ 0x200003
  8015                           ;	unspecified, using default values
  8016  200003                     	org	2097155
  8017  200003  FF                 	db	255
  8018                           
  8019                           ;Config register IDLOC4 @ 0x200004
  8020                           ;	unspecified, using default values
  8021  200004                     	org	2097156
  8022  200004  FF                 	db	255
  8023                           
  8024                           ;Config register IDLOC5 @ 0x200005
  8025                           ;	unspecified, using default values
  8026  200005                     	org	2097157
  8027  200005  FF                 	db	255
  8028                           
  8029                           ;Config register IDLOC6 @ 0x200006
  8030                           ;	unspecified, using default values
  8031  200006                     	org	2097158
  8032  200006  FF                 	db	255
  8033                           
  8034                           ;Config register IDLOC7 @ 0x200007
  8035                           ;	unspecified, using default values
  8036  200007                     	org	2097159
  8037  200007  FF                 	db	255
  8038                           
  8039                           	psect	config
  8040                           
  8041                           ; Padding undefined space
  8042  300000                     	org	3145728
  8043  300000  FF                 	db	255
  8044                           
  8045                           ;Config register CONFIG1H @ 0x300001
  8046                           ;	Oscillator Selection bits
  8047                           ;	OSC = XT, XT oscillator
  8048                           ;	Oscillator System Clock Switch Enable bit
  8049                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8050  300001                     	org	3145729
  8051  300001  21                 	db	33
  8052                           
  8053                           ;Config register CONFIG2L @ 0x300002
  8054                           ;	Power-up Timer Enable bit
  8055                           ;	PWRT = OFF, PWRT disabled
  8056                           ;	Brown-out Reset Enable bit
  8057                           ;	BOR = OFF, Brown-out Reset disabled
  8058                           ;	Brown-out Reset Voltage bits
  8059                           ;	BORV = 20, VBOR set to 2.0V
  8060  300002                     	org	3145730
  8061  300002  0D                 	db	13
  8062                           
  8063                           ;Config register CONFIG2H @ 0x300003
  8064                           ;	Watchdog Timer Enable bit
  8065                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8066                           ;	Watchdog Timer Postscale Select bits
  8067                           ;	WDTPS = 128, 1:128
  8068  300003                     	org	3145731
  8069  300003  0E                 	db	14
  8070                           
  8071                           ; Padding undefined space
  8072  300004                     	org	3145732
  8073  300004  FF                 	db	255
  8074                           
  8075                           ;Config register CONFIG3H @ 0x300005
  8076                           ;	CCP2 Mux bit
  8077                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8078  300005                     	org	3145733
  8079  300005  00                 	db	0
  8080                           
  8081                           ;Config register CONFIG4L @ 0x300006
  8082                           ;	Stack Full/Underflow Reset Enable bit
  8083                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8084                           ;	Low Voltage ICSP Enable bit
  8085                           ;	LVP = OFF, Low Voltage ICSP disabled
  8086                           ;	Background Debugger Enable bit
  8087                           ;	DEBUG = 0x1, unprogrammed default
  8088  300006                     	org	3145734
  8089  300006  80                 	db	128
  8090                           
  8091                           ; Padding undefined space
  8092  300007                     	org	3145735
  8093  300007  FF                 	db	255
  8094                           
  8095                           ;Config register CONFIG5L @ 0x300008
  8096                           ;	Code Protection bit
  8097                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8098                           ;	Code Protection bit
  8099                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8100                           ;	Code Protection bit
  8101                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8102                           ;	Code Protection bit
  8103                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8104  300008                     	org	3145736
  8105  300008  0F                 	db	15
  8106                           
  8107                           ;Config register CONFIG5H @ 0x300009
  8108                           ;	Boot Block Code Protection bit
  8109                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8110                           ;	Data EEPROM Code Protection bit
  8111                           ;	CPD = OFF, Data EEPROM not code protected
  8112  300009                     	org	3145737
  8113  300009  C0                 	db	192
  8114                           
  8115                           ;Config register CONFIG6L @ 0x30000A
  8116                           ;	Write Protection bit
  8117                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8118                           ;	Write Protection bit
  8119                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8120                           ;	Write Protection bit
  8121                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8122                           ;	Write Protection bit
  8123                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8124  30000A                     	org	3145738
  8125  30000A  0F                 	db	15
  8126                           
  8127                           ;Config register CONFIG6H @ 0x30000B
  8128                           ;	Configuration Register Write Protection bit
  8129                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8130                           ;	Boot Block Write Protection bit
  8131                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8132                           ;	Data EEPROM Write Protection bit
  8133                           ;	WRTD = OFF, Data EEPROM not write protected
  8134  30000B                     	org	3145739
  8135  30000B  E0                 	db	224
  8136                           
  8137                           ;Config register CONFIG7L @ 0x30000C
  8138                           ;	Table Read Protection bit
  8139                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8140                           ;	Table Read Protection bit
  8141                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8142                           ;	Table Read Protection bit
  8143                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8144                           ;	Table Read Protection bit
  8145                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8146  30000C                     	org	3145740
  8147  30000C  0F                 	db	15
  8148                           
  8149                           ;Config register CONFIG7H @ 0x30000D
  8150                           ;	Boot Block Table Read Protection bit
  8151                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8152  30000D                     	org	3145741
  8153  30000D  40                 	db	64
  8154                           tosu	equ	0xFFF
  8155                           tosh	equ	0xFFE
  8156                           tosl	equ	0xFFD
  8157                           stkptr	equ	0xFFC
  8158                           pclatu	equ	0xFFB
  8159                           pclath	equ	0xFFA
  8160                           pcl	equ	0xFF9
  8161                           tblptru	equ	0xFF8
  8162                           tblptrh	equ	0xFF7
  8163                           tblptrl	equ	0xFF6
  8164                           tablat	equ	0xFF5
  8165                           prodh	equ	0xFF4
  8166                           prodl	equ	0xFF3
  8167                           indf0	equ	0xFEF
  8168                           postinc0	equ	0xFEE
  8169                           postdec0	equ	0xFED
  8170                           preinc0	equ	0xFEC
  8171                           plusw0	equ	0xFEB
  8172                           fsr0h	equ	0xFEA
  8173                           fsr0l	equ	0xFE9
  8174                           wreg	equ	0xFE8
  8175                           indf1	equ	0xFE7
  8176                           postinc1	equ	0xFE6
  8177                           postdec1	equ	0xFE5
  8178                           preinc1	equ	0xFE4
  8179                           plusw1	equ	0xFE3
  8180                           fsr1h	equ	0xFE2
  8181                           fsr1l	equ	0xFE1
  8182                           bsr	equ	0xFE0
  8183                           indf2	equ	0xFDF
  8184                           postinc2	equ	0xFDE
  8185                           postdec2	equ	0xFDD
  8186                           preinc2	equ	0xFDC
  8187                           plusw2	equ	0xFDB
  8188                           fsr2h	equ	0xFDA
  8189                           fsr2l	equ	0xFD9
  8190                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    16
    Data        328
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     109
    BANK0           128     17     119
    BANK1           256      0     247
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK1[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10619
                                             12 BANK0      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    6535
                                              7 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                         _resetTherm
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                         _resetTherm
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3163
                                              0 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2608
                                             20 COMRAM    14     6      8
                          _resetStep
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _stepMade
     _moveToPoint
       _resetStep
       _stepCounter
       _stepMade
     _pickObject
       _stepMade
     _releaseObj
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _resetStep
       _stepMade
     _touchObject
       _resetStep
       _resetTherm
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80     11      77       5       93.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1DB      15        0.0%
DATA                 0      0     1DB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Apr 27 16:10:47 2021

                                                  ___fldiv@aexp 0038  
                                                  ___fldiv@bexp 0037  
                                         __end_of_interruptInit 2342  
                                                  ___fldiv@sign 0030  
                                                            l90 23BC  
                                                            l84 2484  
                                                           l201 1DA2  
                                                           l202 1DA6  
                                                           l131 1306  
                                                           l220 211E  
                                                           l132 1476  
                                                           l213 1EAA  
                                                           l214 1EAE  
                                                           l151 148E  
                                                           l160 0AF8  
                                                           l225 2136  
                                                           l217 210C  
                                                           l161 0B00  
                                                           l250 236A  
                                                           l243 2390  
                                                           l244 2396  
                                                           l236 2050  
                                                           l165 0DA0  
                                                           l157 0DB8  
                                                           l333 14E0  
                                                           l182 0D5E  
                                                           l158 0AB8  
                                                           l238 2080  
                                                           l334 14DA  
                                                           l335 14DC  
                                                           l360 10B8  
                                                           l249 2364  
                                                           l521 251C  
                                                           l450 2332  
                                                           l530 252C  
                                                           l515 2476  
                                                           l451 233E  
                                                           l603 243A  
                                                           l612 2428  
                                                           l380 23E2  
                                                           l524 2524  
                                                           l533 24CE  
                                                           l541 2400  
                                                           l518 2468  
                                                           l606 245A  
                                                           l615 24C4  
                                                           l383 24D8  
                                                           l392 24AC  
                                                           l560 2238  
                                                           l449 231C  
                                                           l609 2414  
                                                           l618 24F6  
                                                           l386 2534  
                                                           l538 221C  
                                                           l395 24E2  
                                                           l555 1B7C  
                                                           l564 226A  
                                                           l389 24B8  
                                                           l398 24EC  
                                                           l585 172A  
                                                           l588 17B0  
                                                           l927 1A60  
                                                           _isr 0008  
                                                   _touchObject 1C9E  
                                                           prod 000FF3  
                                                           wreg 000FE8  
                                                  ___fltol@exp1 0042  
                                                   main@errCode 00F4  
                                                          l1212 0A3E  
                                                          l1214 0856  
                                                          l1223 08AC  
                                                          l1225 093C  
                                                          l1217 0810  
                                                          l1226 0924  
                                                          l4001 1FB0  
                                                          l4011 2034  
                                                          l4003 2002  
                                                          l1292 11CA  
                                                          l1285 111E  
                                                          l4021 207C  
                                                          l4013 2052  
                                                          l4005 2010  
                                                          l4101 132C  
                                                          l4023 2370  
                                                          l4031 2348  
                                                          l4015 2056  
                                                          l4007 2016  
                                                          l4111 1378  
                                                          l4103 1336  
                                                          l1288 12B0  
                                                          l4025 2374  
                                                          l4033 2366  
                                                          l4009 2032  
                                                          l4017 205C  
                                                          l4121 13C2  
                                                          l4113 138A  
                                                          l4105 134E  
                                                          l4041 1A9A  
                                                          l4201 1656  
                                                          l4027 2392  
                                                          l1299 1236  
                                                          l4019 2078  
                                                          l4131 140E  
                                                          l4123 13D6  
                                                          l4115 1394  
                                                          l4107 1352  
                                                          l4051 1B08  
                                                          l4043 1AB0  
                                                          l4035 1A6A  
                                                          l4203 1660  
                                                          l4211 16AA  
                                                          l4061 246E  
                                                          l4029 2344  
                                                          l4141 147C  
                                                          l4133 1420  
                                                          l4125 13E8  
                                                          l4117 13AC  
                                                          l4109 1364  
                                                          l4045 1AC6  
                                                          l4037 1A6E  
                                                          l4221 1744  
                                                          l4213 16C2  
                                                          l4205 166A  
                                                          l4311 1022  
                                                          l4303 0FC8  
                                                          l4071 23A8  
                                                          l4151 231A  
                                                          l4143 1488  
                                                          l4127 13F2  
                                                          l4119 13B0  
                                                          l4135 143A  
                                                          l4047 1ADC  
                                                          l4039 1A84  
                                                          l4055 1B1E  
                                                          l4223 1758  
                                                          l4215 16CA  
                                                          l4065 247C  
                                                          l3601 073A  
                                                          l4321 108E  
                                                          l4313 1064  
                                                          l4305 100A  
                                                          l4161 23D2  
                                                          l4081 23B8  
                                                          l4073 23AC  
                                                          l4153 2330  
                                                          l4145 148C  
                                                          l4137 1450  
                                                          l4129 140A  
                                                          l4049 1AF2  
                                                          l4225 175C  
                                                          l4217 1724  
                                                          l4233 177A  
                                                          l4209 1674  
                                                          l4401 15B6  
                                                          l3531 2422  
                                                          l3611 076A  
                                                          l3603 0740  
                                                          l4315 1076  
                                                          l4251 0DCC  
                                                          l4163 23D4  
                                                          l4155 23C2  
                                                          l4083 23BA  
                                                          l4075 23B0  
                                                          l4067 239C  
                                                          l4243 24CA  
                                                          l4139 1464  
                                                          l4091 12D8  
                                                          l4227 1764  
                                                          l4219 1734  
                                                          l4171 23FC  
                                                          l4411 161A  
                                                          l4403 15F0  
                                                          l3525 24F2  
                                                          l3621 07BA  
                                                          l3701 1962  
                                                          l3541 2532  
                                                          l4317 107E  
                                                          l4261 0E68  
                                                          l4253 0DD0  
                                                          l4165 23DE  
                                                          l4157 23CA  
                                                          l4077 23B4  
                                                          l4069 23A4  
                                                          l4149 2308  
                                                          l4245 2522  
                                                          l4093 12DE  
                                                          l4085 12B8  
                                                          l4229 176E  
                                                          l4173 242E  
                                                          l4181 2458  
                                                          l4413 1622  
                                                          l4405 15F8  
                                                          l3527 241A  
                                                          l3535 24BE  
                                                          l3631 080E  
                                                          l3623 07CA  
                                                          l3615 077E  
                                                          l3607 0754  
                                                          l3711 19BA  
                                                          l3703 1992  
                                                          l3543 24DE  
                                                          l4327 10A6  
                                                          l4319 1086  
                                                          l4271 0EEA  
                                                          l4263 0E78  
                                                          l4255 0E0A  
                                                          l4167 23E0  
                                                          l4159 23D0  
                                                          l4079 23B6  
                                                          l4095 12E4  
                                                          l4087 12BE  
                                                          l3551 222A  
                                                          l4175 2436  
                                                          l4183 2406  
                                                          l4415 1628  
                                                          l4407 15FC  
                                                          l3529 241E  
                                                          l3801 0AEC  
                                                          l3641 086C  
                                                          l3633 081C  
                                                          l3625 07D2  
                                                          l3617 079A  
                                                          l3609 076A  
                                                          l3561 0632  
                                                          l3721 19EC  
                                                          l3705 1994  
                                                          l3545 24E8  
                                                          l3537 24D4  
                                                          l4329 10AC  
                                                          l4273 0F0C  
                                                          l4265 0E8C  
                                                          l4257 0E1A  
                                                          l4281 0F22  
                                                          l4249 0DC0  
                                                          l4193 2460  
                                                          l4345 251A  
                                                          l4097 12FA  
                                                          l4089 12CA  
                                                          l4353 21C6  
                                                          l3553 224C  
                                                          l4177 2452  
                                                          l4185 2408  
                                                          l4169 23E8  
                                                          l4417 162C  
                                                          l4409 1600  
                                                          l4361 1492  
                                                          l3811 0B36  
                                                          l3803 0AFC  
                                                          l3643 0886  
                                                          l3651 08BE  
                                                          l3635 0840  
                                                          l3627 07E8  
                                                          l3619 07AA  
                                                          l3571 0672  
                                                          l3563 0634  
                                                          l3731 1A28  
                                                          l3707 19A4  
                                                          l3539 24B2  
                                                          l3547 24A6  
                                                          l4275 0F10  
                                                          l4267 0EC6  
                                                          l4259 0E2E  
                                                          l4283 0F6A  
                                                          l4099 131A  
                                                          l4355 2206  
                                                          l4347 21C2  
                                                          l3555 2252  
                                                          l4179 2456  
                                                          l4187 240C  
                                                          l4419 1630  
                                                          l4371 14A8  
                                                          l4363 1498  
                                                          l3821 0B9E  
                                                          l3813 0B42  
                                                          l3805 0B0A  
                                                          l3653 08D2  
                                                          l3645 088C  
                                                          l3637 0842  
                                                          l3629 07FC  
                                                          l3581 06AC  
                                                          l3565 064A  
                                                          l3573 067A  
                                                          l3557 0614  
                                                          l3733 1A3E  
                                                          l3717 19D6  
                                                          l3709 19A8  
                                                          l3741 10D6  
                                                          l3901 1D08  
                                                          l4293 0FA2  
                                                          l4285 0F80  
                                                          l4277 0F18  
                                                          l4269 0ED6  
                                                          l4189 252A  
                                                          l4357 2208  
                                                          l3549 2222  
                                                          l4197 1640  
                                                          l4381 14E4  
                                                          l4373 14AC  
                                                          l4365 149C  
                                                          l3823 0BBA  
                                                          l3815 0B58  
                                                          l3807 0B18  
                                                          l3663 0952  
                                                          l3671 099E  
                                                          l3655 08D6  
                                                          l3647 0898  
                                                          l3639 0852  
                                                          l3591 06EC  
                                                          l3583 06AE  
                                                          l3575 068C  
                                                          l3567 065E  
                                                          l3559 0620  
                                                          l3735 1A4E  
                                                          l3727 1A06  
                                                          l3719 19E2  
                                                          l3751 1160  
                                                          l3743 10E8  
                                                          l3903 1D1A  
                                                          l3911 1D66  
                                                          l4295 0FA8  
                                                          l4287 0F88  
                                                          l4199 1650  
                                                          l4391 152E  
                                                          l4383 14FE  
                                                          l4375 14B8  
                                                          l4367 14A0  
                                                          l4359 1492  
                                                          l3833 0C1C  
                                                          l3825 0BBE  
                                                          l3841 0C50  
                                                          l3817 0B7E  
                                                          l3809 0B1E  
                                                          l3681 0A16  
                                                          l3673 09BE  
                                                          l3665 095E  
                                                          l3657 08E8  
                                                          l3649 08AA  
                                                          l3585 06C4  
                                                          l3593 06F4  
                                                          l3577 0694  
                                                          l3569 066E  
                                                          l3729 1A14  
                                                          l3761 11C0  
                                                          l3753 116A  
                                                          l3745 1130  
                                                          l3921 1D84  
                                                          l3913 1D6C  
                                                          l4297 0FB0  
                                                          l4289 0F9A  
                                                          l4561 168A  
                                                          l4393 154E  
                                                          l4385 150A  
                                                          l4377 14C0  
                                                          l4369 14A4  
                                                          l3851 0CC8  
                                                          l3843 0C66  
                                                          l3835 0C32  
                                                          l3819 0B88  
                                                          l3827 0BD4  
                                                          l3683 0A28  
                                                          l3675 09D4  
                                                          l3667 0970  
                                                          l3659 091A  
                                                          l3595 0706  
                                                          l3587 06D8  
                                                          l3579 069A  
                                                          l3771 124C  
                                                          l3763 1202  
                                                          l3755 1178  
                                                          l3747 114C  
                                                          l3739 10C2  
                                                          l3923 1D88  
                                                          l3915 1D70  
                                                          l3907 1D3A  
                                                          l3931 1DB0  
                                                          l4563 1790  
                                                          l4395 156C  
                                                          l4387 151C  
                                                          l4379 14D4  
                                                          l3861 0D2A  
                                                          l3853 0CCC  
                                                          l3845 0C8C  
                                                          l3837 0C48  
                                                          l3829 0BEA  
                                                          l3685 0A2E  
                                                          l3677 09F4  
                                                          l3669 099A  
                                                          l3597 0722  
                                                          l3589 06E8  
                                                          l3781 129E  
                                                          l3773 1252  
                                                          l3765 1210  
                                                          l3757 11B0  
                                                          l3925 1D9A  
                                                          l3917 1D72  
                                                          l3909 1D56  
                                                          l3941 1DE6  
                                                          l3933 1DBE  
                                                          l4565 1B34  
                                                          l4397 1576  
                                                          l4389 152C  
                                                          l3863 0D40  
                                                          l3847 0C96  
                                                          l3855 0CE2  
                                                          l3871 0D78  
                                                          l3687 0A32  
                                                          l3679 0A10  
                                                          l3599 0732  
                                                          l3695 1932  
                                                          l3775 1276  
                                                          l3767 1224  
                                                          l3759 11B4  
                                                          l3919 1D80  
                                                          l3943 1DF2  
                                                          l3935 1DC0  
                                                          l4567 0F42  
                                                          l4399 159E  
                                                          l3873 0D8E  
                                                          l3865 0D56  
                                                          l3857 0CF8  
                                                          l3849 0CAC  
                                                          l3793 0A80  
                                                          l3785 0A46  
                                                          l3697 194C  
                                                          l3777 128A  
                                                          l3769 124A  
                                                          l3961 1E7C  
                                                          l3945 1E10  
                                                          l3937 1DCA  
                                                          l3953 1E46  
                                                          l3929 1DAC  
                                                          l3875 0DA6  
                                                          l3795 0AAC  
                                                          l3787 0A60  
                                                          l3779 129C  
                                                          l3891 1CBE  
                                                          l3883 1CA0  
                                                          l3963 1E7E  
                                                          l3955 1E62  
                                                          l3947 1E14  
                                                          l3939 1DD0  
                                                          l3981 20A2  
                                                          l3973 2086  
                                                          l3877 0DB2  
                                                          l3869 0D5E  
                                                          l3797 0ABC  
                                                          l3789 0A78  
                                                          l3893 1CC4  
                                                          l3885 1CA4  
                                                          l3965 1E8C  
                                                          l3949 1E26  
                                                          l3957 1E72  
                                                          l3991 20F2  
                                                          l3983 20B8  
                                                          l3975 208A  
                                                          l3879 0DB6  
                                                          l3799 0AC0  
                                                          l3895 1CDA  
                                                          l3887 1CB2  
                                                          l3967 1E90  
                                                          l3959 1E78  
                                                          l3993 2124  
                                                          l3985 20C4  
                                                          l3977 2096  
                                                          l3897 1CE6  
                                                          l3889 1CB4  
                                                          l3969 1EA2  
                                                          l3995 2130  
                                                          l3987 20DC  
                                                          l3979 209C  
                                                          l3899 1D04  
                                                          ?_isr 0001  
                                                          l3997 2134  
                                                          l3989 20E0  
                                                          u3000 19D0  
                                                          u3001 19CA  
                                                          u3010 1A00  
                                                          u3011 19FA  
                                                          u3020 1A28  
                                                          u3100 1236  
                                                          u3021 1A22  
                                                          u3101 1230  
                                                          _LATA 000F89  
                                                          u3030 1A3C  
                                                          u3110 1248  
                                                          _LATB 000F8A  
                                                          u3031 1A36  
                                                          u3111 1242  
                                                          _LATC 000F8B  
                                                          u3200 0B7C  
                                                          u3120 1288  
                                                          u3040 10D4  
                                                          _LATD 000F8C  
                                                          u3201 0B76  
                                                          u3121 1282  
                                                          u3041 10CE  
                                                          u3210 0B9C  
                                                          u3130 129A  
                                                          u3050 10E6  
                                                          u3211 0B96  
                                                          u3131 1294  
                                                          u3051 10E0  
                                                          u3300 0CC6  
                                                          u3220 0BB8  
                                                          u3140 0A5E  
                                                          u3060 114A  
                                                          u3301 0CC0  
                                                          u3221 0BB2  
                                                          u3141 0A58  
                                                          u3061 1144  
                                                          u3310 0CF6  
                                                          u3230 0BE8  
                                                          u3150 0A78  
                                                          u3070 11AA  
                                                          u3311 0CF0  
                                                          u3231 0BE2  
                                                          u3151 0A72  
                                                          u3071 11A4  
                                                          u3320 0D24  
                                                          u3240 0C16  
                                                          u3160 0AAA  
                                                          u3080 11FC  
                                                          u3400 1D34  
                                                          u3321 0D1E  
                                                          u3241 0C10  
                                                          u3161 0AA4  
                                                          u3081 11F6  
                                                          u3401 1D2E  
                                                          u3330 0D3E  
                                                          u3250 0C30  
                                                          u3170 0AEA  
                                                          u3090 1222  
                                                          u3410 1D54  
                                                          u3331 0D38  
                                                          u3251 0C2A  
                                                          u3171 0AE4  
                                                          u3091 121C  
                                                          u3411 1D4E  
                                                          u3500 20B6  
                                                          u3340 0D54  
                                                          u3260 0C46  
                                                          u3180 0B34  
                                                          u3420 1D66  
                                                          u3501 20B0  
                                                          u3341 0D4E  
                                                          u3261 0C40  
                                                          u3181 0B2E  
                                                          u3421 1D60  
                                                          u3510 20DA  
                                                          u3350 0D78  
                                                          u3270 0C64  
                                                          u3190 0B56  
                                                          u3430 1D98  
                                                          u3511 20D4  
                                                          u3351 0D72  
                                                          u3271 0C5E  
                                                          u3191 0B50  
                                                          u3431 1D92  
                                                          u3520 210C  
                                                          u3360 0D8C  
                                                          u3280 0C8A  
                                                          u2800 0720  
                                                          u3440 1DE4  
                                                          u3600 132C  
                                                          u2720 224A  
                                                          u3521 2106  
                                                          u3361 0D86  
                                                          u3281 0C84  
                                                          u2801 071A  
                                                          u3441 1DDE  
                                                          u3601 1326  
                                                          u2721 2244  
                                                          u3530 211E  
                                                          u3370 0DA0  
                                                          u3290 0CAA  
                                                          u2810 0768  
                                                          u3450 1E0E  
                                                          u3610 134C  
                                                          u2730 2268  
                                                          u3531 2118  
                                                          u3371 0D9A  
                                                          u3291 0CA4  
                                                          u2811 0762  
                                                          u3451 1E08  
                                                          u3611 1346  
                                                          u2731 2262  
                                                          u2900 0918  
                                                          u2820 07E6  
                                                          u2740 0630  
                                                          u3540 204E  
                                                          u3380 1CD8  
                                                          u3460 1E40  
                                                          u3700 1462  
                                                          u3620 1376  
                                                          u2901 0912  
                                                          u2821 07E0  
                                                          u2741 062A  
                                                          u3541 2048  
                                                          u3381 1CD2  
                                                          u3461 1E3A  
                                                          u3701 145C  
                                                          u3621 1370  
                                                          u2910 0936  
                                                          u2830 080C  
                                                          u2750 0648  
                                                          u3550 2076  
                                                          u3390 1D02  
                                                          u3470 1E60  
                                                          u3710 1476  
                                                          u3630 138A  
                                                          u2911 0930  
                                                          u2831 0806  
                                                          u2751 0642  
                                                          u3551 2070  
                                                          u3391 1CFC  
                                                          u3471 1E5A  
                                                          u3711 1470  
                                                          u3631 1384  
                                                          u3560 238E  
                                                          u2920 0950  
                                                          u2840 083E  
                                                          u2760 065C  
                                                          u3480 1E72  
                                                          u3800 10A0  
                                                          u3720 2318  
                                                          u3640 13AA  
                                                          u3561 2388  
                                                          u2921 094A  
                                                          u2841 0838  
                                                          u2761 0656  
                                                          u3481 1E6C  
                                                          u3801 109A  
                                                          u3721 2312  
                                                          u3641 13A4  
                                                          u3570 2362  
                                                          u2930 096E  
                                                          u2850 086A  
                                                          u2770 06AA  
                                                          u3490 1EA0  
                                                          u3730 232E  
                                                          u3650 13D4  
                                                          u3810 221A  
                                                          u3571 235C  
                                                          u2931 0968  
                                                          u2851 0864  
                                                          u2771 06A4  
                                                          u3491 1E9A  
                                                          u3731 2328  
                                                          u3651 13CE  
                                                          u3811 2214  
                                                          u2940 09BC  
                                                          u2860 0884  
                                                          u2780 06C2  
                                                          u3660 13E8  
                                                          u3580 12F8  
                                                          u3740 16C0  
                                                          u3820 14D2  
                                                          u2941 09B6  
                                                          u2861 087E  
                                                          u2781 06BC  
                                                          u3661 13E2  
                                                          u3581 12F2  
                                                          u3741 16BA  
                                                          u3821 14CC  
                                                          u2950 09F2  
                                                          u2870 08A8  
                                                          u2790 06D6  
                                                          u3750 0F7E  
                                                          u3670 1408  
                                                          u3590 1318  
                                                          u3830 14FC  
                                                          u2951 09EC  
                                                          u2871 08A2  
                                                          u2791 06D0  
                                                          u3751 0F78  
                                                          u3671 1402  
                                                          u3591 1312  
                                                          u3831 14F6  
                                                          u2960 0A26  
                                                          u2880 08D0  
                                                          u3760 0F9A  
                                                          u3680 143A  
                                                          u3840 154C  
                                                          u2961 0A20  
                                                          u2881 08CA  
                                                          u3761 0F94  
                                                          u3681 1434  
                                                          u3841 1546  
                                                          u2890 08E6  
                                                          u2970 194A  
                                                          u3770 0FC2  
                                                          u3690 144E  
                                                          u3850 156C  
                                                   main@newData 00F5  
                                                          u2891 08E0  
                                                          u2971 1944  
                                                          u3771 0FBC  
                                                          u3691 1448  
                                                          u3851 1566  
                                                          u2980 1986  
                                                          u3780 101C  
                                                          u3860 15B4  
                                                          u3781 1016  
                                                          u3861 15AE  
                                                          u2990 19B8  
                                                          u3790 1074  
                                                          u3870 1618  
                                                          u2991 19B2  
                                                          u3791 106E  
                                                          u3871 1612  
                                                          u2985 197A  
                                                          i2l81 2492  
                                                          i2l87 253C  
                                                          _TMR0 000FD6  
                                                          _TMR2 000FCC  
                                           __end_ofi2_storeData 1930  
                                                          _main 1492  
                                                          _maxX 0092  
                                                          _maxY 0090  
                                          __end_ofi2_printError 1C9E  
                                                          fsr2h 000FDA  
                                                          indf2 000FDF  
                                                          fsr1l 000FE1  
                                                          fsr2l 000FD9  
                                                          btemp 006E  
                                                          prodh 000FF4  
                                                          prodl 000FF3  
                                                          start 01A4  
                                               ___fldiv@new_exp 0031  
                                                  ___param_bank 000000  
                                               ??_whatsTM0Limit 0001  
                                                         ??_isr 000B  
                                                  ?_executeData 0001  
                                               executeData@data 00EF  
                                                 ___fltol@sign1 0041  
                                                         ?_main 0001  
                                               __end_of___fldiv 0A44  
                                               __end_of___fltol 1A66  
                                                         i2l401 2514  
                                                         i2l404 250A  
                                                         i2l253 2446  
                                                         i2l254 2448  
                                                         i2l621 2544  
                                                         i2l527 254C  
                                                         i2l560 2286  
                                                         i2l624 2500  
                                                         i2l474 018C  
                                                         i2l555 1C98  
                                                         i2l627 24A0  
                                                         i2l564 22B8  
                                                         i2l585 18A4  
                                                         i2l588 192A  
                                          rotateObj@rotSequence 0080  
                                                         _SPBRG 000FAF  
                                                         _TRISA 000F92  
                                                         _TRISB 000F93  
                                                         _TRISC 000F94  
                                                         _TRISD 000F95  
                                                         _TXREG 000FAD  
                                               __end_of_getData 247A  
                                               i2storeData@data 000A  
                                               __end_of_initADC 23E6  
                                                  ?_newSequence 0001  
                                               __end_of_liftArm 213A  
                                               __end_of_readSeq 2528  
                                                  stepMade@temp 0014  
                                                         tablat 000FF5  
                                                i2uartTx@length 0003  
                                               __end_of_stopADC 2538  
                                                         ttemp5 006F  
                                                         ttemp6 0072  
                                                         ttemp7 0076  
                                                         status 000FD8  
                                                         wtemp8 006F  
                                              __end_ofi2_uartTx 22BC  
                                                 ?_increaseStep 0001  
                                               __initialization 213A  
                                        __size_of_initPinMotors 0026  
                                                  __end_of_main 163C  
                                      resetPosition@keepMovingX 0015  
                                      resetPosition@keepMovingY 0016  
                                      resetPosition@keepMovingZ 0017  
                                                        ??_main 00F2  
                                                 __activetblptr 000002  
                                                   i2_storeData 17B6  
                                                   isr@tm0Count 0063  
                                                  ?_setThermRel 0001  
                                                        _ADRESH 000FC4  
                                                        _ADRESL 000FC3  
                                                  ?_moveToPoint 0015  
                                                        i2l3011 1BCC  
                                                        i2l3003 1B86  
                                                        i2l3013 1BE2  
                                                        i2l3005 1B8A  
                                                        i2l3015 1BF8  
                                                        i2l3007 1BA0  
                                                        i2l3023 1C3A  
                                                        i2l3017 1C0E  
                                                        i2l3009 1BB6  
                                                        i2l3113 2440  
                                                        i2l3019 1C24  
                                                        i2l2181 2506  
                                                        i2l2183 254A  
                                                        i2l2191 24FC  
                                                        i2l2179 2510  
                                                        i2l3331 17D0  
                                                        i2l2189 2542  
                                                        i2l3325 2498  
                                                        i2l3333 17DA  
                                                        i2l3341 1824  
                                                        i2l3351 18BE  
                                                        i2l3343 183C  
                                                        i2l3335 17E4  
                                                        i2l3327 17BA  
                                                        i2l2721 22A0  
                                                        i2l3353 18D2  
                                                        i2l3345 1844  
                                                        i2l3329 17CA  
                                                        i2l3441 0032  
                                                        i2l2715 2270  
                                                        i2l3355 18D6  
                                                        i2l3347 189E  
                                                        i2l3363 18F4  
                                                        i2l3339 17EE  
                                                        i2l3451 006C  
                                                        i2l3443 004E  
                                                        i2l3435 001C  
                                                        i2l2717 2278  
                                                        i2l3357 18DE  
                                                        i2l3349 18AE  
                                                        i2l3461 00A0  
                                                        i2l3453 006E  
                                                        i2l3445 0050  
                                                        i2l3437 002E  
                                                        i2l2719 229A  
                                                        i2l3359 18E8  
                                                        i2l3471 00E0  
                                                        i2l3463 00A4  
                                                        i2l3455 0086  
                                                        i2l3447 0054  
                                                        i2l3439 0030  
                                                        i2l1881 253A  
                                                        i2l3481 0114  
                                                        i2l3473 00F2  
                                                        i2l3465 00C2  
                                                        i2l3457 008A  
                                                        i2l3449 0058  
                                                        i2l3483 011C  
                                                        i2l3491 016C  
                                                        i2l3475 00F6  
                                                        i2l3467 00CA  
                                                        i2l3459 009E  
                                                        i2l1877 248A  
                                                        i2l3493 0180  
                                                        i2l3485 0142  
                                                        i2l3477 00FA  
                                                        i2l3469 00CC  
                                                        i2l3495 0186  
                                                        i2l3487 014E  
                                                        i2l3479 0100  
                                                        i2l3489 0168  
                                                        i2l4571 190A  
                                                        i2l4573 1C50  
                                                        i2l4569 1804  
                                                        _RCREG1 000FAE  
                                                  ?_setTouchRel 0001  
                                              __end_of_abortAll 2450  
                                              __end_of___xxtofl 12B6  
                                              __end_of_clearTM0 2488  
                                              _errString_PointZ 0100  
                                                ??_increaseStep 0001  
                                              __end_of_maxFeedX 0611  
                                              __end_of_maxFeedY 0610  
                                                     ??___fldiv 0028  
                                                     ??___fltol 003D  
                                              __end_of_tim0Init 243E  
                                              __end_of_tim1Init 245E  
                                              __end_of_tim2Init 2418  
                                                        clear_0 21A0  
                                                        clear_1 21AC  
                                                     ??_getData 0014  
                                                        _uartTx 2220  
                                                     ??_initADC 0012  
                                                     ??_liftArm 0015  
                                                     ??_readSeq 0012  
                                                  __pdataCOMRAM 0067  
                                         __end_of_resetPosition 1492  
                                                  __mediumconst 0000  
                                                        tblptrh 000FF7  
                                                        tblptrl 000FF6  
                                                        tblptru 000FF8  
                                                  ?_returnTherm 0012  
                                              __end_of_startADC 24DC  
                                              __end_of_stepMade 242C  
                                                 _initPinMotors 239A  
                                                  ?_returnTouch 0012  
                                                     ??_stopADC 0012  
                                         __size_ofi2_printError 011C  
                                              __end_of_writeTM0 2496  
                                     __size_of_resetNewSequence 000A  
                                                  ___xxtofl@arg 001C  
                                                  ___xxtofl@exp 001B  
                                                  ___xxtofl@val 0012  
                                                    __accesstop 0080  
                                       __end_of__initialization 21B2  
                                                  _dataSequence 00CA  
                                                 ___rparam_used 000001  
                                                    ___fltol@f1 0039  
                                                  ?_stepCounter 0012  
                                                   i2uartTx@ptr 0001  
                                                __pcstackCOMRAM 0001  
                                                  __newSequence 005F  
                                                  __pidataBANK0 22BC  
                                                  __pidataBANK1 1EB2  
                                               isr@single_cycle 0051  
                                          __size_of_executeData 0300  
                                                  i2_printError 1B82  
                                                  ?_touchObject 0001  
                                                _errString_ZEND 015E  
                                                _errString_Feed 0094  
                                                ?_initPinMotors 0001  
                                                     ?i2_uartTx 0001  
                                                    __pbssBANK0 00CA  
                                          __size_of_newSequence 0008  
                                                    _feeder1Pos 060D  
                                                    _feeder2Pos 060B  
                                                    _feeder3Pos 0609  
                                       __size_of_getNewSequence 000E  
                                                    _fatalError 2548  
                                            __size_of_reduceSeq 0008  
                                            __size_of_retPeriod 000E  
                                                _touch_pressure 0607  
                                            __size_of_shiftData 0060  
                                            __size_of_resetStep 000A  
                                                       _ADC_res 0053  
                                                       ?_uartTx 0012  
                                                     ?_abortAll 0001  
                                                     ?___xxtofl 0012  
                                          __end_of_increaseStep 2548  
                                                     ?_clearTM0 0001  
                                                    ??i2_uartTx 0004  
                                            __size_of_rotateObj 00DA  
                                             _errString_Command 00B2  
                                            __size_of_usartInit 001E  
                                        __size_of_interruptInit 003C  
                                          __size_of_setThermRel 000A  
                                            __size_of_storeData 017A  
                                                     ?_tim0Init 0001  
                                                     ?_tim1Init 0001  
                                                     ?_tim2Init 0012  
                                          __size_of_moveToPoint 037A  
                                          storeData@receivedMex 0043  
                                               _newSequenceData 00DE  
                                          __size_of_setTouchRel 000A  
                                                       __Hparam 0000  
                                                       __Lparam 0000  
                                        __end_of_touch_pressure 0609  
                                                       ___fldiv 0612  
                                                     ?_startADC 0001  
                                                     ?_stepMade 0012  
                                                       ___fltol 1930  
                                                  __psmallconst 0600  
                                                       __pcinit 213A  
                                         __end_of_whatsTM0Limit 2540  
                                                       _getData 246C  
                                                       __ramtop 0600  
                                                     ?_writeTM0 0001  
                                                    _pickObject 236E  
                                                       __ptext0 1492  
                                                       __ptext1 23E6  
                                                       __ptext2 2404  
                                                       __ptext3 2450  
                                                       __ptext4 242C  
                                                       __ptext5 163C  
                                                       __ptext6 1A66  
                                                       __ptext7 2220  
                                                       __ptext8 21C0  
                                                       __ptext9 12B6  
                                               __size_of_uartTx 004E  
                                                     _T0CONbits 000FD5  
                                                       _initADC 23C0  
                                                     _T1CONbits 000FCD  
                                               ??_initPinMotors 0012  
                                                       _liftArm 2084  
                                                     _T2CONbits 000FCA  
                                                    ??_abortAll 0008  
                                                       _readSeq 2520  
                                                  __size_of_isr 019C  
                                                    ??___xxtofl 0016  
                                                  ?i2_storeData 0001  
                                                    ??_clearTM0 0012  
                                                    _motCounter 0067  
                                                       _pwmStep 005C  
                                                       _stopADC 2530  
                                             __end_of_reduceSeq 2520  
                                             __end_of_retPeriod 24A4  
                                                    _releaseObj 2342  
                                          __size_of_returnTherm 000C  
                                          end_of_initialization 21B2  
                                          __size_of_returnTouch 000C  
                                              _resetNewSequence 24C8  
                                              rotateObj@totStep 00E9  
                                             __end_of_shiftData 2220  
                                                       isr@temp 0011  
                                             __end_of_resetStep 24FA  
                                                    ??_tim0Init 0012  
                                                 __Lmediumconst 0000  
                                                    ??_tim1Init 0012  
                                                    ??_tim2Init 0014  
                                              storeData@command 005D  
                                              storeData@counter 005E  
                                                    _resetTherm 24E6  
                                                    _resetTouch 24DC  
                                                       uartTx@i 0015  
                                                   ?_fatalError 0001  
                                                     _RCSTAbits 000FAB  
                                                       postdec1 000FE5  
                                             __end_of_rotateObj 2084  
                                                       postinc0 000FEE  
                                                       postinc1 000FE6  
                                                       postinc2 000FDE  
                                                    ??_startADC 0012  
                                                    ??_stepMade 0014  
                                          __size_of_stepCounter 000C  
                                                 _interruptInit 2306  
                                             __end_of_usartInit 2404  
                                             __end_of_storeData 17B6  
                                    __end_ofrotateObj@stepAngle 0605  
                                                    ??_writeTM0 0001  
                                                     _PORTDbits 000F83  
                                                    _printError 1A66  
                                                     _PORTEbits 000F84  
                                           i2printError@errCode 0007  
                                                    _toggleStep 24FA  
                                                 ___xxtofl@sign 001A  
                                                     _TRISCbits 000F94  
                                                     _TRISDbits 000F95  
                                                     _TRISEbits 000F96  
                                                   ___fldiv@grs 0033  
                                                   ___fldiv@rem 002C  
                                          __size_of_touchObject 010C  
                                                    _stepToggle 005B  
                                                    _touchTherm 1DAA  
                                                     _TXSTAbits 000FAC  
                                                _getNewSequence 245E  
                                                ?_interruptInit 0001  
                                                 __pidataCOMRAM 2550  
                                         __size_of_increaseStep 0008  
                                                   ?_pickObject 0001  
                                                   __fatalError 0060  
                                                __end_of_uartTx 226E  
                                                 moveToPoint@x1 0015  
                                                 moveToPoint@x2 0019  
                                                 moveToPoint@y1 0017  
                                                 moveToPoint@y2 001B  
                                           start_initialization 213A  
                                                     i2uartTx@i 0004  
                                                   __end_of_isr 01A4  
                                           __size_of_fatalError 0008  
                                                   ?_releaseObj 0001  
                                             __size_ofi2_uartTx 004E  
                                        __end_of_getNewSequence 246C  
                                               _errString_Fatal 01AF  
                                               _errString_Bound 01D6  
                                                   ?_resetTherm 0001  
                                               _errString_Reset 0187  
                                                   ?_resetTouch 0001  
                                               _errString_Point 0135  
                                                  _increaseStep 2540  
                                        __size_of_resetPosition 01DC  
                                                 ??_executeData 00ED  
                                                   __pdataBANK0 0080  
                                                   __pdataBANK1 0100  
                                                   _dataCounter 0061  
                                                      ??_uartTx 0015  
                                        moveToPoint@keepMovingX 0021  
                                        moveToPoint@keepMovingY 0022  
                                                   ?_printError 0001  
                                                     ___fldiv@a 0024  
                                                     ___fldiv@b 0020  
                                                _therm_pressure 0605  
                                                   ?_toggleStep 0001  
                                                   __pbssCOMRAM 0043  
                                                 __pcstackBANK0 00E6  
                                                 ??_newSequence 0012  
                                             __size_of_abortAll 0012  
                                             __size_of___xxtofl 01F8  
                                          __size_ofi2_storeData 017A  
                                             __size_of_clearTM0 000E  
                                               ?_getNewSequence 0012  
                                                   ?_touchTherm 0001  
                                           __size_of_pickObject 002C  
                                            executeData@errCode 00F1  
                                             __size_of_tim0Init 0012  
                                             __size_of_tim1Init 000E  
                                             __size_of_tim2Init 0014  
                                               ??_interruptInit 0012  
                                                     __pintcode 0008  
                                                      ?___fldiv 0020  
                                                      ?___fltol 0039  
                                      __end_of_resetNewSequence 24D2  
                                           __size_of_releaseObj 002C  
                                                 storeData@data 001B  
                                                      ?_getData 0012  
                                             __size_of_startADC 000A  
                                             __size_of_stepMade 0014  
                                        __end_of_therm_pressure 0607  
                                                      ?_initADC 0001  
                                                   __smallconst 0600  
                                                      ?_liftArm 0001  
                                                      ?_readSeq 0001  
                                             __size_of_writeTM0 000E  
                                           __end_of_executeData 10BE  
                                                    shiftData@i 0014  
                                           __size_of_resetTherm 000A  
                                                     _newFeeder 0055  
                                                 _resetPosition 12B6  
                                           __size_of_resetTouch 000A  
                                                 ??_setThermRel 0001  
                                                      ?_stopADC 0001  
                                                 ??_moveToPoint 001D  
                                                 ??_setTouchRel 0001  
                                           __end_of_newSequence 2530  
                                                     _reduceSeq 2518  
                                                      _LATAbits 000F89  
                                                      _LATBbits 000F8A  
                                                     _retPeriod 2496  
                                                      _LATCbits 000F8B  
                                                      _LATDbits 000F8C  
                                           __size_of_printError 011C  
                                                      _IPR1bits 000F9F  
                                                      _PIE1bits 000F9D  
                                                     _shiftData 21C0  
                                                      i2u260_40 002C  
                                                      i2u260_41 0026  
                                                     _resetStep 24F0  
                                                      i2u253_40 183A  
                                                      i2u261_40 004C  
                                                      i2u253_41 1834  
                                                      i2u261_41 0046  
                                                      i2u270_40 0166  
                                                      i2u262_40 006A  
                                                      i2u270_41 0160  
                                                      i2u262_41 0064  
                                                      i2u183_40 2298  
                                                      i2u271_40 017E  
                                                      i2u263_40 0084  
                                                      i2u183_41 2292  
                                                      i2u271_41 0178  
                                                      i2u263_41 007E  
                                                      i2u184_40 22B6  
                                                      i2u264_40 009C  
                                                      i2u184_41 22B0  
                                                      i2u264_41 0096  
                                                      i2u265_40 00C0  
                                                      i2u265_41 00BA  
                                                      _PIR1bits 000F9E  
                                                      i2u266_40 00DE  
                                                      i2u266_41 00D8  
                                                      i2u267_40 00F0  
                                                      i2u267_41 00EA  
                                                      i2u268_40 0112  
                                                      i2u268_41 010C  
                                                      i2u269_40 0140  
                                                      i2u269_41 013A  
                                           __size_of_toggleStep 000A  
                                                  ??_fatalError 0001  
                                                     _posVector 004C  
                                                      _RCONbits 000FD0  
                                                     _therm_rel 0064  
                                                     _pwmPeriod 004F  
                                                     _rotateObj 1FAA  
                                                    _ADCON0bits 000FC2  
                                                    _ADCON1bits 000FC1  
                                           __size_of_touchTherm 0108  
                                                     _usartInit 23E6  
                                                     _touch_rel 0065  
                                            __end_of_feeder1Pos 060F  
                                            __end_of_feeder2Pos 060D  
                                            __end_of_feeder3Pos 060B  
                                                     _storeData 163C  
                                                ?_resetPosition 0001  
                                         __end_of_initPinMotors 23C0  
                                                 ??_returnTherm 0014  
                                                 ??_returnTouch 0014  
                                                      i2_uartTx 226E  
                                                     copy_data0 214E  
                                                     copy_data1 216E  
                                                     copy_data2 218E  
                                            __end_of_fatalError 2550  
                                            rotateObj@stepAngle 0601  
                                                    ?_reduceSeq 0001  
                                                    ?_retPeriod 0001  
                                                    rotateObj@i 00EB  
                                        __size_of_whatsTM0Limit 0008  
                                           __end_of_setThermRel 2518  
                                           __end_of_moveToPoint 0DBE  
                                             printError@errCode 0018  
                                                    ?_shiftData 0001  
                                                 ??_stepCounter 0014  
                                                      __Hrparam 0000  
                                                    ?_resetStep 0001  
                                           __end_of_setTouchRel 250E  
                                                      __Lrparam 0000  
                                              __size_of___fldiv 0432  
                                              __size_of___fltol 0136  
                                                   _executeData 0DBE  
                                                  ??_pickObject 0015  
                                                    ?_rotateObj 0001  
                                      moveToPoint@MOT1Direction 001F  
                                                 ?i2_printError 0001  
                                              __size_of_getData 000E  
                                      moveToPoint@MOT2Direction 0020  
                                                 ??_touchObject 0015  
                                                      _abortAll 243E  
                                                    ?_usartInit 0001  
                                              __size_of_initADC 0026  
                                                      ___xxtofl 10BE  
                                              __size_of_liftArm 00B6  
                                                    ?_storeData 0001  
                                                      _clearTM0 247A  
                                              __size_of_readSeq 0008  
                                            storeData@mexLength 006D  
                                                      _tm0Error 0059  
                                                      _tm0Limit 0066  
                                                   _newSequence 2528  
                                                      __ptext10 24C8  
                                                      __ptext11 2518  
                                                      __ptext20 24A4  
                                                      __ptext12 2520  
                                                      __ptext21 1C9E  
                                                      __ptext13 2528  
                                                      __ptext30 0612  
                                                      __ptext22 2530  
                                                      __ptext14 2306  
                                                      __ptext31 2342  
                                                      __ptext23 24D2  
                                                      __ptext15 239A  
                                                      __ptext32 236E  
                                                      __ptext24 24B0  
                                                      __ptext16 23C0  
                                                      __ptext41 17B6  
                                                      __ptext33 0A44  
                                                      __ptext25 24DC  
                                                      __ptext17 245E  
                                                      __ptext50 243E  
                                                      __ptext42 2488  
                                                      __ptext34 24BC  
                                                      __ptext26 24E6  
                                                      __ptext18 0DBE  
                                                      __ptext51 1B82  
                                                      __ptext43 2538  
                                                      __ptext35 2084  
                                                      __ptext27 1FAA  
                                                      __ptext19 1DAA  
                                                      __ptext52 226E  
                                                      __ptext44 24FA  
                                                      __ptext36 2418  
                                                      __ptext28 10BE  
                                                      __ptext45 2504  
                                                      __ptext37 24F0  
                                                      __ptext29 1930  
                                                      __ptext46 250E  
                                                      __ptext38 246C  
                                                      __ptext47 2496  
                                                      __ptext39 247A  
                                                      __ptext48 2540  
                                                      __ptext49 2548  
                                                  ??_releaseObj 0015  
                                              __size_of_stopADC 0008  
                                                      _maxFeedX 0610  
                                                      _maxFeedY 060F  
                                           __end_of_returnTherm 24B0  
                                           __end_of_returnTouch 24BC  
                                                      _tim0Init 242C  
                                                      _tim1Init 2450  
                                                      _tim2Init 2404  
                                                 __size_of_main 01AA  
                                            __end_of_pickObject 239A  
                                                  ??_resetTherm 0012  
                                                  ??_resetTouch 0012  
                                                     uartTx@ptr 0012  
                                                      _rotAngle 0057  
                                               isr@completeStep 0062  
                                                      int$flags 006E  
                                                      _startADC 24D2  
                                                      _stepMade 2418  
                                                      _stepMot1 008C  
                                                      _stepMot2 0088  
                                                      _stepMot3 0084  
                                           __end_of_stepCounter 24C8  
                                             rotateObj@rotAngle 00E8  
                                                ??i2_printError 0005  
                                            __end_of_releaseObj 236E  
                                                      _writeTM0 2488  
                                                  ??_printError 0016  
                                                 _whatsTM0Limit 2538  
                                               ??_resetPosition 0015  
                                            tim2Init@_pwmPeriod 0012  
                                                    _INTCONbits 000FF2  
                                                  ??_toggleStep 0001  
                                              ??_getNewSequence 0014  
                                            __end_of_resetTherm 24F0  
                                            __end_of_resetTouch 24E6  
                                                   _setThermRel 250E  
                                                  uartTx@length 0014  
                                                   _moveToPoint 0A44  
                                           __end_of_touchObject 1DAA  
                                                      intlevel2 2558  
                                                  ??_touchTherm 0015  
                                                   _setTouchRel 2504  
                                                   ??_reduceSeq 0012  
                                                   ??_retPeriod 0003  
                                                    _RCSTA1bits 000FAB  
                                            __end_of_printError 1B82  
                                                   ??_shiftData 0012  
                                                   ??_resetStep 0012  
                                            __end_of_toggleStep 2504  
                                             ?_resetNewSequence 0001  
                                                ?_whatsTM0Limit 0001  
                                                   ??_rotateObj 00E6  
                                            ??_resetNewSequence 0012  
                                            __end_of_touchTherm 1EB2  
                                                   ??_usartInit 0012  
                                                 ??i2_storeData 0008  
                                                   ??_storeData 0019  
                                                   _returnTherm 24A4  
                                                   _returnTouch 24B0  
                                                   _stepCounter 24BC  
