

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu Jan 28 10:54:59 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    72                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    73                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    74  0000                     
    75                           ; Version 2.20
    76                           ; Generated 12/02/2020 GMT
    77                           ; 
    78                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC18F452 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109  0000                     
   110                           	psect	idataCOMRAM
   111  0021AE                     __pidataCOMRAM:
   112                           	callstack 0
   113                           
   114                           ;initializer for rotateObj@rotSequence
   115  0021AE  09                 	db	9
   116  0021AF  03                 	db	3
   117  0021B0  06                 	db	6
   118  0021B1  0C                 	db	12
   119                           
   120                           ;initializer for _maxY
   121  0021B2  03E8               	dw	1000
   122                           
   123                           ;initializer for _maxX
   124  0021B4  03E8               	dw	1000
   125                           
   126                           ;initializer for storeData@mexLength
   127  0021B6  05                 	db	5
   128                           
   129                           	psect	idataBANK0
   130  001F48                     __pidataBANK0:
   131                           	callstack 0
   132                           
   133                           ;initializer for _errString_Bound
   134  001F48  45                 	db	69
   135  001F49  72                 	db	114
   136  001F4A  72                 	db	114
   137  001F4B  6F                 	db	111
   138  001F4C  72                 	db	114
   139  001F4D  2C                 	db	44
   140  001F4E  20                 	db	32
   141  001F4F  70                 	db	112
   142  001F50  6F                 	db	111
   143  001F51  69                 	db	105
   144  001F52  6E                 	db	110
   145  001F53  74                 	db	116
   146  001F54  20                 	db	32
   147  001F55  6F                 	db	111
   148  001F56  75                 	db	117
   149  001F57  74                 	db	116
   150  001F58  73                 	db	115
   151  001F59  69                 	db	105
   152  001F5A  64                 	db	100
   153  001F5B  65                 	db	101
   154  001F5C  20                 	db	32
   155  001F5D  62                 	db	98
   156  001F5E  6F                 	db	111
   157  001F5F  75                 	db	117
   158  001F60  6E                 	db	110
   159  001F61  64                 	db	100
   160  001F62  61                 	db	97
   161  001F63  72                 	db	114
   162  001F64  69                 	db	105
   163  001F65  65                 	db	101
   164  001F66  73                 	db	115
   165  001F67  00                 	db	0
   166                           
   167                           ;initializer for _errString_Feed
   168  001F68  45                 	db	69
   169  001F69  72                 	db	114
   170  001F6A  72                 	db	114
   171  001F6B  6F                 	db	111
   172  001F6C  72                 	db	114
   173  001F6D  2C                 	db	44
   174  001F6E  20                 	db	32
   175  001F6F  66                 	db	102
   176  001F70  65                 	db	101
   177  001F71  65                 	db	101
   178  001F72  64                 	db	100
   179  001F73  20                 	db	32
   180  001F74  6C                 	db	108
   181  001F75  69                 	db	105
   182  001F76  6E                 	db	110
   183  001F77  65                 	db	101
   184  001F78  20                 	db	32
   185  001F79  6E                 	db	110
   186  001F7A  6F                 	db	111
   187  001F7B  74                 	db	116
   188  001F7C  20                 	db	32
   189  001F7D  64                 	db	100
   190  001F7E  65                 	db	101
   191  001F7F  66                 	db	102
   192  001F80  69                 	db	105
   193  001F81  6E                 	db	110
   194  001F82  65                 	db	101
   195  001F83  64                 	db	100
   196  001F84  00                 	db	0
   197                           
   198                           ;initializer for _errString_Command
   199  001F85  43                 	db	67
   200  001F86  6F                 	db	111
   201  001F87  6D                 	db	109
   202  001F88  6D                 	db	109
   203  001F89  61                 	db	97
   204  001F8A  6E                 	db	110
   205  001F8B  64                 	db	100
   206  001F8C  20                 	db	32
   207  001F8D  6E                 	db	110
   208  001F8E  6F                 	db	111
   209  001F8F  74                 	db	116
   210  001F90  20                 	db	32
   211  001F91  72                 	db	114
   212  001F92  65                 	db	101
   213  001F93  63                 	db	99
   214  001F94  6F                 	db	111
   215  001F95  67                 	db	103
   216  001F96  6E                 	db	110
   217  001F97  69                 	db	105
   218  001F98  7A                 	db	122
   219  001F99  65                 	db	101
   220  001F9A  64                 	db	100
   221  001F9B  00                 	db	0
   222                           
   223                           	psect	idataBANK1
   224  0019FE                     __pidataBANK1:
   225                           	callstack 0
   226                           
   227                           ;initializer for _errString_PointZ
   228  0019FE  45                 	db	69
   229  0019FF  72                 	db	114
   230  001A00  72                 	db	114
   231  001A01  6F                 	db	111
   232  001A02  72                 	db	114
   233  001A03  2C                 	db	44
   234  001A04  20                 	db	32
   235  001A05  74                 	db	116
   236  001A06  69                 	db	105
   237  001A07  6D                 	db	109
   238  001A08  65                 	db	101
   239  001A09  20                 	db	32
   240  001A0A  65                 	db	101
   241  001A0B  78                 	db	120
   242  001A0C  63                 	db	99
   243  001A0D  65                 	db	101
   244  001A0E  65                 	db	101
   245  001A0F  64                 	db	100
   246  001A10  65                 	db	101
   247  001A11  64                 	db	100
   248  001A12  20                 	db	32
   249  001A13  74                 	db	116
   250  001A14  6F                 	db	111
   251  001A15  20                 	db	32
   252  001A16  72                 	db	114
   253  001A17  65                 	db	101
   254  001A18  61                 	db	97
   255  001A19  63                 	db	99
   256  001A1A  68                 	db	104
   257  001A1B  20                 	db	32
   258  001A1C  74                 	db	116
   259  001A1D  68                 	db	104
   260  001A1E  65                 	db	101
   261  001A1F  20                 	db	32
   262  001A20  65                 	db	101
   263  001A21  6E                 	db	110
   264  001A22  64                 	db	100
   265  001A23  20                 	db	32
   266  001A24  6F                 	db	111
   267  001A25  66                 	db	102
   268  001A26  20                 	db	32
   269  001A27  74                 	db	116
   270  001A28  68                 	db	104
   271  001A29  65                 	db	101
   272  001A2A  20                 	db	32
   273  001A2B  5A                 	db	90
   274  001A2C  20                 	db	32
   275  001A2D  41                 	db	65
   276  001A2E  78                 	db	120
   277  001A2F  69                 	db	105
   278  001A30  73                 	db	115
   279  001A31  00                 	db	0
   280                           
   281                           ;initializer for _errString_Point
   282  001A32  45                 	db	69
   283  001A33  72                 	db	114
   284  001A34  72                 	db	114
   285  001A35  6F                 	db	111
   286  001A36  72                 	db	114
   287  001A37  2C                 	db	44
   288  001A38  20                 	db	32
   289  001A39  74                 	db	116
   290  001A3A  69                 	db	105
   291  001A3B  6D                 	db	109
   292  001A3C  65                 	db	101
   293  001A3D  20                 	db	32
   294  001A3E  65                 	db	101
   295  001A3F  78                 	db	120
   296  001A40  63                 	db	99
   297  001A41  65                 	db	101
   298  001A42  65                 	db	101
   299  001A43  64                 	db	100
   300  001A44  65                 	db	101
   301  001A45  64                 	db	100
   302  001A46  20                 	db	32
   303  001A47  74                 	db	116
   304  001A48  6F                 	db	111
   305  001A49  20                 	db	32
   306  001A4A  72                 	db	114
   307  001A4B  65                 	db	101
   308  001A4C  61                 	db	97
   309  001A4D  63                 	db	99
   310  001A4E  68                 	db	104
   311  001A4F  20                 	db	32
   312  001A50  74                 	db	116
   313  001A51  68                 	db	104
   314  001A52  65                 	db	101
   315  001A53  20                 	db	32
   316  001A54  70                 	db	112
   317  001A55  6F                 	db	111
   318  001A56  69                 	db	105
   319  001A57  6E                 	db	110
   320  001A58  74                 	db	116
   321  001A59  00                 	db	0
   322                           
   323                           ;initializer for _errString_ZEND
   324  001A5A  45                 	db	69
   325  001A5B  72                 	db	114
   326  001A5C  72                 	db	114
   327  001A5D  6F                 	db	111
   328  001A5E  72                 	db	114
   329  001A5F  2C                 	db	44
   330  001A60  20                 	db	32
   331  001A61  6E                 	db	110
   332  001A62  6F                 	db	111
   333  001A63  20                 	db	32
   334  001A64  6F                 	db	111
   335  001A65  62                 	db	98
   336  001A66  6A                 	db	106
   337  001A67  65                 	db	101
   338  001A68  63                 	db	99
   339  001A69  74                 	db	116
   340  001A6A  20                 	db	32
   341  001A6B  72                 	db	114
   342  001A6C  65                 	db	101
   343  001A6D  6C                 	db	108
   344  001A6E  65                 	db	101
   345  001A6F  76                 	db	118
   346  001A70  61                 	db	97
   347  001A71  74                 	db	116
   348  001A72  65                 	db	101
   349  001A73  64                 	db	100
   350  001A74  20                 	db	32
   351  001A75  61                 	db	97
   352  001A76  6C                 	db	108
   353  001A77  6F                 	db	111
   354  001A78  6E                 	db	110
   355  001A79  67                 	db	103
   356  001A7A  20                 	db	32
   357  001A7B  5A                 	db	90
   358  001A7C  20                 	db	32
   359  001A7D  41                 	db	65
   360  001A7E  78                 	db	120
   361  001A7F  69                 	db	105
   362  001A80  73                 	db	115
   363  001A81  00                 	db	0
   364                           
   365                           ;initializer for _errString_Reset
   366  001A82  45                 	db	69
   367  001A83  72                 	db	114
   368  001A84  72                 	db	114
   369  001A85  6F                 	db	111
   370  001A86  72                 	db	114
   371  001A87  2C                 	db	44
   372  001A88  20                 	db	32
   373  001A89  74                 	db	116
   374  001A8A  69                 	db	105
   375  001A8B  6D                 	db	109
   376  001A8C  65                 	db	101
   377  001A8D  20                 	db	32
   378  001A8E  65                 	db	101
   379  001A8F  78                 	db	120
   380  001A90  63                 	db	99
   381  001A91  65                 	db	101
   382  001A92  65                 	db	101
   383  001A93  64                 	db	100
   384  001A94  65                 	db	101
   385  001A95  64                 	db	100
   386  001A96  20                 	db	32
   387  001A97  74                 	db	116
   388  001A98  6F                 	db	111
   389  001A99  20                 	db	32
   390  001A9A  72                 	db	114
   391  001A9B  65                 	db	101
   392  001A9C  73                 	db	115
   393  001A9D  65                 	db	101
   394  001A9E  74                 	db	116
   395  001A9F  20                 	db	32
   396  001AA0  70                 	db	112
   397  001AA1  6F                 	db	111
   398  001AA2  73                 	db	115
   399  001AA3  69                 	db	105
   400  001AA4  74                 	db	116
   401  001AA5  69                 	db	105
   402  001AA6  6F                 	db	111
   403  001AA7  6E                 	db	110
   404  001AA8  00                 	db	0
   405                           
   406                           ;initializer for _errString_Fatal
   407  001AA9  46                 	db	70
   408  001AAA  61                 	db	97
   409  001AAB  74                 	db	116
   410  001AAC  61                 	db	97
   411  001AAD  6C                 	db	108
   412  001AAE  20                 	db	32
   413  001AAF  45                 	db	69
   414  001AB0  72                 	db	114
   415  001AB1  72                 	db	114
   416  001AB2  6F                 	db	111
   417  001AB3  72                 	db	114
   418  001AB4  2C                 	db	44
   419  001AB5  20                 	db	32
   420  001AB6  70                 	db	112
   421  001AB7  6C                 	db	108
   422  001AB8  65                 	db	101
   423  001AB9  61                 	db	97
   424  001ABA  73                 	db	115
   425  001ABB  65                 	db	101
   426  001ABC  20                 	db	32
   427  001ABD  72                 	db	114
   428  001ABE  65                 	db	101
   429  001ABF  73                 	db	115
   430  001AC0  65                 	db	101
   431  001AC1  74                 	db	116
   432  001AC2  20                 	db	32
   433  001AC3  74                 	db	116
   434  001AC4  68                 	db	104
   435  001AC5  65                 	db	101
   436  001AC6  20                 	db	32
   437  001AC7  64                 	db	100
   438  001AC8  65                 	db	101
   439  001AC9  76                 	db	118
   440  001ACA  69                 	db	105
   441  001ACB  63                 	db	99
   442  001ACC  65                 	db	101
   443  001ACD  21                 	db	33
   444  001ACE  00                 	db	0
   445                           
   446                           	psect	smallconst
   447  000600                     __psmallconst:
   448                           	callstack 0
   449  000600  00                 	db	0
   450  000601  FFAC               	dw	65452
   451  000603  3DB3               	dw	15795
   452  000605                     __end_ofrotateObj@stepAngle:
   453                           	callstack 0
   454  000605  0400               	dw	1024
   455  000607                     __end_of_therm_pressure:
   456                           	callstack 0
   457  000607  0200               	dw	512
   458  000609                     __end_of_touch_pressure:
   459                           	callstack 0
   460  000609                     _feeder3Pos:
   461                           	callstack 0
   462  000609  19                 	db	25
   463  00060A  19                 	db	25
   464  00060B                     __end_of_feeder3Pos:
   465                           	callstack 0
   466  00060B                     _feeder2Pos:
   467                           	callstack 0
   468  00060B  0F                 	db	15
   469  00060C  0F                 	db	15
   470  00060D                     __end_of_feeder2Pos:
   471                           	callstack 0
   472  00060D                     _feeder1Pos:
   473                           	callstack 0
   474  00060D  05                 	db	5
   475  00060E  05                 	db	5
   476  00060F                     __end_of_feeder1Pos:
   477                           	callstack 0
   478  0000                     _TMR0	set	4054
   479  0000                     _TXREG	set	4013
   480  0000                     _SPBRG	set	4015
   481  0000                     _RCSTAbits	set	4011
   482  0000                     _TXSTAbits	set	4012
   483  0000                     _TRISCbits	set	3988
   484  0000                     _RCREG1	set	4014
   485  0000                     _ADRESH	set	4036
   486  0000                     _ADRESL	set	4035
   487  0000                     _PIR1bits	set	3998
   488  0000                     _IPR1bits	set	3999
   489  0000                     _ADCON0bits	set	4034
   490  0000                     _PIE1bits	set	3997
   491  0000                     _RCONbits	set	4048
   492  0000                     _INTCONbits	set	4082
   493  0000                     _RCSTA1bits	set	4011
   494  0000                     _LATD	set	3980
   495  0000                     _PORTDbits	set	3971
   496  0000                     _TMR2	set	4044
   497  0000                     _PORTEbits	set	3972
   498  0000                     _T0CONbits	set	4053
   499  0000                     _T2CONbits	set	4042
   500  0000                     _LATDbits	set	3980
   501  0000                     _LATCbits	set	3979
   502  0000                     _LATBbits	set	3978
   503  0000                     _LATAbits	set	3977
   504  0000                     _TRISDbits	set	3989
   505  0000                     _TRISEbits	set	3990
   506  0000                     _TRISD	set	3989
   507  0000                     _TRISC	set	3988
   508  0000                     _TRISB	set	3987
   509  0000                     _TRISA	set	3986
   510  0000                     _ADCON1bits	set	4033
   511  00060F  00                 	db	0	; dummy byte at the end
   512  0000                     
   513                           ; #config settings
   514                           
   515                           	psect	cinit
   516  001D06                     __pcinit:
   517                           	callstack 0
   518  001D06                     start_initialization:
   519                           	callstack 0
   520  001D06                     __initialization:
   521                           	callstack 0
   522                           
   523                           ; Initialize objects allocated to BANK1 (209 bytes)
   524                           ; load TBLPTR registers with __pidataBANK1
   525  001D06  0EFE               	movlw	low __pidataBANK1
   526  001D08  6EF6               	movwf	tblptrl,c
   527  001D0A  0E19               	movlw	high __pidataBANK1
   528  001D0C  6EF7               	movwf	tblptrh,c
   529  001D0E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   530  001D10  6EF8               	movwf	tblptru,c
   531  001D12  EE01  F000         	lfsr	0,__pdataBANK1
   532  001D16  EE10 F0D1          	lfsr	1,209
   533  001D1A                     copy_data0:
   534  001D1A  0009               	tblrd		*+
   535  001D1C  CFF5 FFEE          	movff	tablat,postinc0
   536  001D20  50E5               	movf	postdec1,w,c
   537  001D22  50E1               	movf	fsr1l,w,c
   538  001D24  E1FA               	bnz	copy_data0
   539                           
   540                           ; Initialize objects allocated to BANK0 (84 bytes)
   541                           ; load TBLPTR registers with __pidataBANK0
   542  001D26  0E48               	movlw	low __pidataBANK0
   543  001D28  6EF6               	movwf	tblptrl,c
   544  001D2A  0E1F               	movlw	high __pidataBANK0
   545  001D2C  6EF7               	movwf	tblptrh,c
   546  001D2E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   547  001D30  6EF8               	movwf	tblptru,c
   548  001D32  EE00  F080         	lfsr	0,__pdataBANK0
   549  001D36  EE10 F054          	lfsr	1,84
   550  001D3A                     copy_data1:
   551  001D3A  0009               	tblrd		*+
   552  001D3C  CFF5 FFEE          	movff	tablat,postinc0
   553  001D40  50E5               	movf	postdec1,w,c
   554  001D42  50E1               	movf	fsr1l,w,c
   555  001D44  E1FA               	bnz	copy_data1
   556                           
   557                           ; Initialize objects allocated to COMRAM (9 bytes)
   558                           ; load TBLPTR registers with __pidataCOMRAM
   559  001D46  0EAE               	movlw	low __pidataCOMRAM
   560  001D48  6EF6               	movwf	tblptrl,c
   561  001D4A  0E21               	movlw	high __pidataCOMRAM
   562  001D4C  6EF7               	movwf	tblptrh,c
   563  001D4E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   564  001D50  6EF8               	movwf	tblptru,c
   565  001D52  EE00  F065         	lfsr	0,__pdataCOMRAM
   566  001D56  EE10 F009          	lfsr	1,9
   567  001D5A                     copy_data2:
   568  001D5A  0009               	tblrd		*+
   569  001D5C  CFF5 FFEE          	movff	tablat,postinc0
   570  001D60  50E5               	movf	postdec1,w,c
   571  001D62  50E1               	movf	fsr1l,w,c
   572  001D64  E1FA               	bnz	copy_data2
   573                           
   574                           ; Clear objects allocated to BANK0 (28 bytes)
   575  001D66  EE00  F0D4         	lfsr	0,__pbssBANK0
   576  001D6A  0E1C               	movlw	28
   577  001D6C                     clear_0:
   578  001D6C  6AEE               	clrf	postinc0,c
   579  001D6E  06E8               	decf	wreg,f,c
   580  001D70  E1FD               	bnz	clear_0
   581                           
   582                           ; Clear objects allocated to COMRAM (34 bytes)
   583  001D72  EE00  F043         	lfsr	0,__pbssCOMRAM
   584  001D76  0E22               	movlw	34
   585  001D78                     clear_1:
   586  001D78  6AEE               	clrf	postinc0,c
   587  001D7A  06E8               	decf	wreg,f,c
   588  001D7C  E1FD               	bnz	clear_1
   589  001D7E                     end_of_initialization:
   590                           	callstack 0
   591  001D7E                     __end_of__initialization:
   592                           	callstack 0
   593  001D7E  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   594  001D80  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   595  001D82  0E00               	movlw	low (__Lmediumconst shr (0+16))
   596  001D84  6EF8               	movwf	tblptru,c
   597  001D86  0100               	movlb	0
   598  001D88  EF68  F00D         	goto	_main	;jump to C main() function
   599                           
   600                           	psect	bssCOMRAM
   601  000043                     __pbssCOMRAM:
   602                           	callstack 0
   603  000043                     storeData@receivedMex:
   604                           	callstack 0
   605  000043                     	ds	9
   606  00004C                     _posVector:
   607                           	callstack 0
   608  00004C                     	ds	3
   609  00004F                     isr@single_cycle:
   610                           	callstack 0
   611  00004F                     	ds	2
   612  000051                     _ADC_res:
   613                           	callstack 0
   614  000051                     	ds	2
   615  000053                     _pwmPeriod:
   616                           	callstack 0
   617  000053                     	ds	2
   618  000055                     _rotAngle:
   619                           	callstack 0
   620  000055                     	ds	2
   621  000057                     _tm0Error:
   622                           	callstack 0
   623  000057                     	ds	2
   624  000059                     	ds	1
   625  00005A                     storeData@counter:
   626                           	callstack 0
   627  00005A                     	ds	1
   628  00005B                     __newSequence:
   629                           	callstack 0
   630  00005B                     	ds	1
   631  00005C                     __fatalError:
   632                           	callstack 0
   633  00005C                     	ds	1
   634  00005D                     _dataCounter:
   635                           	callstack 0
   636  00005D                     	ds	1
   637  00005E                     isr@completeStep:
   638                           	callstack 0
   639  00005E                     	ds	1
   640  00005F                     isr@tm0Count:
   641                           	callstack 0
   642  00005F                     	ds	1
   643  000060                     _therm_rel:
   644                           	callstack 0
   645  000060                     	ds	1
   646  000061                     _touch_rel:
   647                           	callstack 0
   648  000061                     	ds	1
   649  000062                     _stepToggle:
   650                           	callstack 0
   651  000062                     	ds	1
   652  000063                     _pwmStep:
   653                           	callstack 0
   654  000063                     	ds	1
   655  000064                     _tm0Limit:
   656                           	callstack 0
   657  000064                     	ds	1
   658                           
   659                           	psect	dataCOMRAM
   660  000065                     __pdataCOMRAM:
   661                           	callstack 0
   662  000065                     rotateObj@rotSequence:
   663                           	callstack 0
   664  000065                     	ds	4
   665  000069                     	ds	2
   666  00006B                     	ds	2
   667  00006D                     storeData@mexLength:
   668                           	callstack 0
   669  00006D                     	ds	1
   670                           
   671                           	psect	bssBANK0
   672  0000D4                     __pbssBANK0:
   673                           	callstack 0
   674  0000D4                     _newSequenceData:
   675                           	callstack 0
   676  0000D4                     	ds	8
   677  0000DC                     _dataSequence:
   678                           	callstack 0
   679  0000DC                     	ds	20
   680                           
   681                           	psect	dataBANK0
   682  000080                     __pdataBANK0:
   683                           	callstack 0
   684  000080                     _errString_Bound:
   685                           	callstack 0
   686  000080                     	ds	32
   687  0000A0                     _errString_Feed:
   688                           	callstack 0
   689  0000A0                     	ds	29
   690  0000BD                     _errString_Command:
   691                           	callstack 0
   692  0000BD                     	ds	23
   693                           
   694                           	psect	dataBANK1
   695  000100                     __pdataBANK1:
   696                           	callstack 0
   697  000100                     _errString_PointZ:
   698                           	callstack 0
   699  000100                     	ds	52
   700  000134                     _errString_Point:
   701                           	callstack 0
   702  000134                     	ds	40
   703  00015C                     _errString_ZEND:
   704                           	callstack 0
   705  00015C                     	ds	40
   706  000184                     _errString_Reset:
   707                           	callstack 0
   708  000184                     	ds	39
   709  0001AB                     _errString_Fatal:
   710                           	callstack 0
   711  0001AB                     	ds	38
   712                           
   713                           	psect	cstackBANK0
   714  0000F0                     __pcstackBANK0:
   715                           	callstack 0
   716  0000F0                     ??_rotateObj:
   717                           
   718                           ; 1 bytes @ 0x0
   719  0000F0                     	ds	3
   720  0000F3                     rotateObj@rotAngle:
   721                           	callstack 0
   722                           
   723                           ; 1 bytes @ 0x3
   724  0000F3                     	ds	1
   725  0000F4                     rotateObj@totStep:
   726                           	callstack 0
   727                           
   728                           ; 2 bytes @ 0x4
   729  0000F4                     	ds	2
   730  0000F6                     rotateObj@i:
   731                           	callstack 0
   732                           
   733                           ; 1 bytes @ 0x6
   734  0000F6                     	ds	1
   735  0000F7                     ??_executeData:
   736                           
   737                           ; 1 bytes @ 0x7
   738  0000F7                     	ds	2
   739  0000F9                     executeData@errCode:
   740                           	callstack 0
   741                           
   742                           ; 1 bytes @ 0x9
   743  0000F9                     	ds	1
   744  0000FA                     executeData@data:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0xA
   748  0000FA                     	ds	2
   749  0000FC                     main@errCode:
   750                           	callstack 0
   751                           
   752                           ; 1 bytes @ 0xC
   753  0000FC                     	ds	1
   754                           
   755                           	psect	cstackCOMRAM
   756  000001                     __pcstackCOMRAM:
   757                           	callstack 0
   758  000001                     ?_retPeriod:
   759                           	callstack 0
   760  000001                     i2uartTx@ptr:
   761                           	callstack 0
   762                           
   763                           ; 2 bytes @ 0x0
   764  000001                     	ds	2
   765  000003                     i2uartTx@length:
   766                           	callstack 0
   767                           
   768                           ; 1 bytes @ 0x2
   769  000003                     	ds	1
   770  000004                     i2uartTx@i:
   771                           	callstack 0
   772                           
   773                           ; 1 bytes @ 0x3
   774  000004                     	ds	1
   775  000005                     ??i2_printError:
   776                           
   777                           ; 1 bytes @ 0x4
   778  000005                     	ds	2
   779  000007                     i2printError@errCode:
   780                           	callstack 0
   781                           
   782                           ; 1 bytes @ 0x6
   783  000007                     	ds	1
   784  000008                     ??_storeData:
   785                           
   786                           ; 1 bytes @ 0x7
   787  000008                     	ds	2
   788  00000A                     storeData@data:
   789                           	callstack 0
   790                           
   791                           ; 1 bytes @ 0x9
   792  00000A                     	ds	1
   793  00000B                     ??_isr:
   794                           
   795                           ; 1 bytes @ 0xA
   796  00000B                     	ds	6
   797  000011                     isr@temp:
   798                           	callstack 0
   799                           
   800                           ; 1 bytes @ 0x10
   801  000011                     	ds	1
   802  000012                     ??_shiftData:
   803  000012                     ?_stepMade:
   804                           	callstack 0
   805  000012                     ?_stepCounter:
   806                           	callstack 0
   807  000012                     ?_returnTouch:
   808                           	callstack 0
   809  000012                     ?_returnTherm:
   810                           	callstack 0
   811  000012                     ?_getData:
   812                           	callstack 0
   813  000012                     ?___xxtofl:
   814                           	callstack 0
   815  000012                     setStep@motor:
   816                           	callstack 0
   817  000012                     enableMotor@motor:
   818                           	callstack 0
   819  000012                     setDirection@motor:
   820                           	callstack 0
   821  000012                     setDecay@motor:
   822                           	callstack 0
   823  000012                     tim2Init@_pwmPeriod:
   824                           	callstack 0
   825  000012                     uartTx@ptr:
   826                           	callstack 0
   827  000012                     ___xxtofl@val:
   828                           	callstack 0
   829                           
   830                           ; 4 bytes @ 0x11
   831  000012                     	ds	1
   832  000013                     ??_setStep:
   833  000013                     ??_enableMotor:
   834  000013                     ??_setDirection:
   835  000013                     ??_setDecay:
   836                           
   837                           ; 1 bytes @ 0x12
   838  000013                     	ds	1
   839  000014                     stepMade@temp:
   840                           	callstack 0
   841  000014                     shiftData@i:
   842                           	callstack 0
   843  000014                     uartTx@length:
   844                           	callstack 0
   845                           
   846                           ; 1 bytes @ 0x13
   847  000014                     	ds	1
   848  000015                     setStep@step:
   849                           	callstack 0
   850  000015                     enableMotor@enable:
   851                           	callstack 0
   852  000015                     setDirection@direction:
   853                           	callstack 0
   854  000015                     setDecay@decay:
   855                           	callstack 0
   856  000015                     uartTx@i:
   857                           	callstack 0
   858                           
   859                           ; 1 bytes @ 0x14
   860  000015                     	ds	1
   861  000016                     ??_printError:
   862  000016                     ??___xxtofl:
   863  000016                     resetPosition@keepMovingX:
   864                           	callstack 0
   865  000016                     moveToPoint@x1:
   866                           	callstack 0
   867                           
   868                           ; 2 bytes @ 0x15
   869  000016                     	ds	1
   870  000017                     resetPosition@keepMovingY:
   871                           	callstack 0
   872                           
   873                           ; 1 bytes @ 0x16
   874  000017                     	ds	1
   875  000018                     resetPosition@keepMovingZ:
   876                           	callstack 0
   877  000018                     printError@errCode:
   878                           	callstack 0
   879  000018                     moveToPoint@y1:
   880                           	callstack 0
   881                           
   882                           ; 2 bytes @ 0x17
   883  000018                     	ds	2
   884  00001A                     ___xxtofl@sign:
   885                           	callstack 0
   886  00001A                     moveToPoint@x2:
   887                           	callstack 0
   888                           
   889                           ; 2 bytes @ 0x19
   890  00001A                     	ds	1
   891  00001B                     ___xxtofl@exp:
   892                           	callstack 0
   893                           
   894                           ; 1 bytes @ 0x1A
   895  00001B                     	ds	1
   896  00001C                     moveToPoint@y2:
   897                           	callstack 0
   898  00001C                     ___xxtofl@arg:
   899                           	callstack 0
   900                           
   901                           ; 4 bytes @ 0x1B
   902  00001C                     	ds	2
   903  00001E                     ??_moveToPoint:
   904                           
   905                           ; 1 bytes @ 0x1D
   906  00001E                     	ds	2
   907  000020                     ?___fldiv:
   908                           	callstack 0
   909  000020                     moveToPoint@keepMovingX:
   910                           	callstack 0
   911  000020                     ___fldiv@b:
   912                           	callstack 0
   913                           
   914                           ; 4 bytes @ 0x1F
   915  000020                     	ds	1
   916  000021                     moveToPoint@keepMovingY:
   917                           	callstack 0
   918                           
   919                           ; 1 bytes @ 0x20
   920  000021                     	ds	3
   921  000024                     ___fldiv@a:
   922                           	callstack 0
   923                           
   924                           ; 4 bytes @ 0x23
   925  000024                     	ds	4
   926  000028                     ??___fldiv:
   927                           
   928                           ; 1 bytes @ 0x27
   929  000028                     	ds	4
   930  00002C                     ___fldiv@rem:
   931                           	callstack 0
   932                           
   933                           ; 4 bytes @ 0x2B
   934  00002C                     	ds	4
   935  000030                     ___fldiv@sign:
   936                           	callstack 0
   937                           
   938                           ; 1 bytes @ 0x2F
   939  000030                     	ds	1
   940  000031                     ___fldiv@new_exp:
   941                           	callstack 0
   942                           
   943                           ; 2 bytes @ 0x30
   944  000031                     	ds	2
   945  000033                     ___fldiv@grs:
   946                           	callstack 0
   947                           
   948                           ; 4 bytes @ 0x32
   949  000033                     	ds	4
   950  000037                     ___fldiv@bexp:
   951                           	callstack 0
   952                           
   953                           ; 1 bytes @ 0x36
   954  000037                     	ds	1
   955  000038                     ___fldiv@aexp:
   956                           	callstack 0
   957                           
   958                           ; 1 bytes @ 0x37
   959  000038                     	ds	1
   960  000039                     ?___fltol:
   961                           	callstack 0
   962  000039                     ___fltol@f1:
   963                           	callstack 0
   964                           
   965                           ; 4 bytes @ 0x38
   966  000039                     	ds	4
   967  00003D                     ??___fltol:
   968                           
   969                           ; 1 bytes @ 0x3C
   970  00003D                     	ds	4
   971  000041                     ___fltol@sign1:
   972                           	callstack 0
   973                           
   974                           ; 1 bytes @ 0x40
   975  000041                     	ds	1
   976  000042                     ___fltol@exp1:
   977                           	callstack 0
   978                           
   979                           ; 1 bytes @ 0x41
   980  000042                     	ds	1
   981  000043                     
   982                           ; 1 bytes @ 0x42
   983 ;;
   984 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   985 ;;
   986 ;; *************** function _main *****************
   987 ;; Defined at:
   988 ;;		line 24 in file "main.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;		None
   991 ;; Auto vars:     Size  Location     Type
   992 ;;  errCode         1   12[BANK0 ] unsigned char 
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      void 
   995 ;; Registers used:
   996 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1002 ;;      Params:         0       0       0       0       0       0       0
  1003 ;;      Locals:         0       1       0       0       0       0       0
  1004 ;;      Temps:          0       0       0       0       0       0       0
  1005 ;;      Totals:         0       1       0       0       0       0       0
  1006 ;;Total ram usage:        1 bytes
  1007 ;; Hardware stack levels required when called:    7
  1008 ;; This function calls:
  1009 ;;		_clearTM0
  1010 ;;		_enableMotor
  1011 ;;		_executeData
  1012 ;;		_fatalError
  1013 ;;		_initADC
  1014 ;;		_initPinMotors
  1015 ;;		_interruptInit
  1016 ;;		_newSequence
  1017 ;;		_printError
  1018 ;;		_readSeq
  1019 ;;		_reduceSeq
  1020 ;;		_resetPosition
  1021 ;;		_shiftData
  1022 ;;		_tim0Init
  1023 ;;		_tim2Init
  1024 ;;		_usartInit
  1025 ;; This function is called by:
  1026 ;;		Startup code after reset
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           	psect	text0
  1031  001AD0                     __ptext0:
  1032                           	callstack 0
  1033  001AD0                     _main:
  1034                           	callstack 24
  1035  001AD0  FFFF               	dw	65535	; assembler added errata NOP
  1036                           
  1037                           ;main.c: 28:     interruptInit();
  1038  001AD2  EC1C  F010         	call	_interruptInit	;wreg free
  1039  001AD6                     
  1040                           ;main.c: 29:     initPinMotors();
  1041  001AD6  EC39  F010         	call	_initPinMotors	;wreg free
  1042  001ADA                     
  1043                           ;main.c: 30:     initADC();
  1044  001ADA  EC4C  F010         	call	_initADC	;wreg free
  1045  001ADE                     
  1046                           ;main.c: 31:     tim0Init();
  1047  001ADE  EC82  F010         	call	_tim0Init	;wreg free
  1048  001AE2                     
  1049                           ;main.c: 32:     tim2Init(10);
  1050  001AE2  0E00               	movlw	0
  1051  001AE4  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1052  001AE6  0E0A               	movlw	10
  1053  001AE8  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1054  001AEA  EC6E  F010         	call	_tim2Init	;wreg free
  1055                           
  1056                           ;main.c: 35:     resetPosition();
  1057  001AEE  EC4C  F007         	call	_resetPosition	;wreg free
  1058  001AF2                     
  1059                           ;main.c: 38:     usartInit();
  1060  001AF2  EC5F  F010         	call	_usartInit	;wreg free
  1061  001AF6                     
  1062                           ;main.c: 39:     RCSTA1bits.CREN = 1;
  1063  001AF6  88AB               	bsf	171,4,c	;volatile
  1064  001AF8                     l3800:
  1065  001AF8  FFFF               	dw	65535	; assembler added errata NOP
  1066                           
  1067                           ;main.c: 42:         if(fatalError()){
  1068  001AFA  ECE8  F010         	call	_fatalError	;wreg free
  1069  001AFE  0900               	iorlw	0
  1070  001B00  B4D8               	btfsc	status,2,c
  1071  001B02  EF85  F00D         	goto	u3191
  1072  001B06  EF88  F00D         	goto	u3190
  1073  001B0A                     u3191:
  1074  001B0A  FFFF               	dw	65535	; assembler added errata NOP
  1075  001B0C  EF9E  F00D         	goto	l3806
  1076  001B10                     u3190:
  1077  001B10  FFFF               	dw	65535	; assembler added errata NOP
  1078  001B12                     
  1079                           ;main.c: 44:             enableMotor(1, 0);
  1080  001B12  0E00               	movlw	0
  1081  001B14  6E12               	movwf	enableMotor@motor^0,c
  1082  001B16  0E01               	movlw	1
  1083  001B18  EC00  F00F         	call	_enableMotor
  1084                           
  1085                           ;main.c: 45:             enableMotor(1, 1);
  1086  001B1C  0E01               	movlw	1
  1087  001B1E  6E12               	movwf	enableMotor@motor^0,c
  1088  001B20  0E01               	movlw	1
  1089  001B22  EC00  F00F         	call	_enableMotor
  1090                           
  1091                           ;main.c: 46:             enableMotor(1, 2);
  1092  001B26  0E02               	movlw	2
  1093  001B28  6E12               	movwf	enableMotor@motor^0,c
  1094  001B2A  0E01               	movlw	1
  1095  001B2C  EC00  F00F         	call	_enableMotor
  1096  001B30                     
  1097                           ;main.c: 48:             printError(7);
  1098  001B30  0E07               	movlw	7
  1099  001B32  EC86  F00A         	call	_printError
  1100  001B36                     l289:
  1101  001B36  FFFF               	dw	65535	; assembler added errata NOP
  1102  001B38  EF9B  F00D         	goto	l289
  1103  001B3C                     l3806:
  1104  001B3C  FFFF               	dw	65535	; assembler added errata NOP
  1105  001B3E  ECE4  F010         	call	_newSequence	;wreg free
  1106  001B42  0900               	iorlw	0
  1107  001B44  B4D8               	btfsc	status,2,c
  1108  001B46  EFA7  F00D         	goto	u3201
  1109  001B4A  EFAA  F00D         	goto	u3200
  1110  001B4E                     u3201:
  1111  001B4E  FFFF               	dw	65535	; assembler added errata NOP
  1112  001B50  EFAD  F00D         	goto	l3810
  1113  001B54                     u3200:
  1114  001B54  FFFF               	dw	65535	; assembler added errata NOP
  1115  001B56  EF7C  F00D         	goto	l3800
  1116  001B5A                     l3810:
  1117  001B5A  FFFF               	dw	65535	; assembler added errata NOP
  1118  001B5C  ECE0  F010         	call	_readSeq	;wreg free
  1119  001B60  0900               	iorlw	0
  1120  001B62  B4D8               	btfsc	status,2,c
  1121  001B64  EFB6  F00D         	goto	u3211
  1122  001B68  EFB9  F00D         	goto	u3210
  1123  001B6C                     u3211:
  1124  001B6C  FFFF               	dw	65535	; assembler added errata NOP
  1125  001B6E  EFC9  F00D         	goto	l292
  1126  001B72                     u3210:
  1127  001B72  FFFF               	dw	65535	; assembler added errata NOP
  1128  001B74                     
  1129                           ;main.c: 55:             errCode = executeData();
  1130  001B74  EC21  F005         	call	_executeData	;wreg free
  1131  001B78  0100               	movlb	0	; () banked
  1132  001B7A  6FFC               	movwf	main@errCode& (0+255),b
  1133  001B7C                     
  1134                           ; BSR set to: 0
  1135                           ;main.c: 56:             printError(errCode);
  1136  001B7C  51FC               	movf	main@errCode& (0+255),w,b
  1137  001B7E  EC86  F00A         	call	_printError
  1138  001B82                     
  1139                           ;main.c: 57:             clearTM0();
  1140  001B82  EC92  F010         	call	_clearTM0	;wreg free
  1141  001B86                     
  1142                           ;main.c: 61:             reduceSeq();
  1143  001B86  ECDC  F010         	call	_reduceSeq	;wreg free
  1144  001B8A                     
  1145                           ;main.c: 62:             shiftData();
  1146  001B8A  EC74  F00F         	call	_shiftData	;wreg free
  1147  001B8E  EF7C  F00D         	goto	l3800
  1148  001B92                     l292:
  1149  001B92  FFFF               	dw	65535	; assembler added errata NOP
  1150  001B94  EF7C  F00D         	goto	l3800
  1151  001B98  EFB5  F000         	goto	start
  1152  001B9C                     __end_of_main:
  1153                           	callstack 0
  1154                           
  1155 ;; *************** function _usartInit *****************
  1156 ;; Defined at:
  1157 ;;		line 34 in file "usart.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;		None
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;		None
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  1    wreg      void 
  1164 ;; Registers used:
  1165 ;;		wreg, status,2
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1171 ;;      Params:         0       0       0       0       0       0       0
  1172 ;;      Locals:         0       0       0       0       0       0       0
  1173 ;;      Temps:          0       0       0       0       0       0       0
  1174 ;;      Totals:         0       0       0       0       0       0       0
  1175 ;;Total ram usage:        0 bytes
  1176 ;; Hardware stack levels used:    1
  1177 ;; Hardware stack levels required when called:    4
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_main
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           	psect	text1
  1186  0020BE                     __ptext1:
  1187                           	callstack 0
  1188  0020BE                     _usartInit:
  1189                           	callstack 0
  1190  0020BE  FFFF               	dw	65535	; assembler added errata NOP
  1191  0020C0                     
  1192                           ;usart.c: 36:     TRISCbits.TRISC6 = 0;
  1193  0020C0  9C94               	bcf	148,6,c	;volatile
  1194                           
  1195                           ;usart.c: 37:     TRISCbits.TRISC7 = 1;
  1196  0020C2  8E94               	bsf	148,7,c	;volatile
  1197                           
  1198                           ;usart.c: 39:     TXSTAbits.TX9 = 0;
  1199  0020C4  9CAC               	bcf	172,6,c	;volatile
  1200                           
  1201                           ;usart.c: 40:     TXSTAbits.TXEN = 1;
  1202  0020C6  8AAC               	bsf	172,5,c	;volatile
  1203                           
  1204                           ;usart.c: 41:     TXSTAbits.SYNC = 0;
  1205  0020C8  98AC               	bcf	172,4,c	;volatile
  1206                           
  1207                           ;usart.c: 42:     TXSTAbits.BRGH = 0;
  1208  0020CA  94AC               	bcf	172,2,c	;volatile
  1209                           
  1210                           ;usart.c: 44:     RCSTAbits.SPEN = 1;
  1211  0020CC  8EAB               	bsf	171,7,c	;volatile
  1212                           
  1213                           ;usart.c: 45:     RCSTAbits.RX9 = 0;
  1214  0020CE  9CAB               	bcf	171,6,c	;volatile
  1215                           
  1216                           ;usart.c: 46:     RCSTAbits.CREN = 0;
  1217  0020D0  98AB               	bcf	171,4,c	;volatile
  1218                           
  1219                           ;usart.c: 47:     RCSTAbits.ADDEN = 0;
  1220  0020D2  96AB               	bcf	171,3,c	;volatile
  1221  0020D4                     
  1222                           ;usart.c: 50:     SPBRG = 25;
  1223  0020D4  0E19               	movlw	25
  1224  0020D6  6EAF               	movwf	175,c	;volatile
  1225  0020D8  0012               	return		;funcret
  1226  0020DA  FFFF               	dw	65535	; errata NOP
  1227  0020DC                     __end_of_usartInit:
  1228                           	callstack 0
  1229                           
  1230 ;; *************** function _tim2Init *****************
  1231 ;; Defined at:
  1232 ;;		line 34 in file "pwm.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;		None
  1237 ;; Return value:  Size  Location     Type
  1238 ;;                  1    wreg      void 
  1239 ;; Registers used:
  1240 ;;		wreg, status,2
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1246 ;;      Params:         2       0       0       0       0       0       0
  1247 ;;      Locals:         0       0       0       0       0       0       0
  1248 ;;      Temps:          0       0       0       0       0       0       0
  1249 ;;      Totals:         2       0       0       0       0       0       0
  1250 ;;Total ram usage:        2 bytes
  1251 ;; Hardware stack levels used:    1
  1252 ;; Hardware stack levels required when called:    4
  1253 ;; This function calls:
  1254 ;;		Nothing
  1255 ;; This function is called by:
  1256 ;;		_main
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260                           	psect	text2
  1261  0020DC                     __ptext2:
  1262                           	callstack 0
  1263  0020DC                     _tim2Init:
  1264                           	callstack 0
  1265  0020DC  FFFF               	dw	65535	; assembler added errata NOP
  1266  0020DE                     
  1267                           ;pwm.c: 35:     T2CONbits.TMR2ON = 0;
  1268  0020DE  94CA               	bcf	202,2,c	;volatile
  1269  0020E0                     
  1270                           ;pwm.c: 36:     T2CONbits.T2CKPS = 0x03;
  1271  0020E0  0E03               	movlw	3
  1272  0020E2  12CA               	iorwf	202,f,c	;volatile
  1273  0020E4                     
  1274                           ;pwm.c: 39:     pwmPeriod = _pwmPeriod;
  1275  0020E4  C012  F053         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1276  0020E8  C013  F054         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1277  0020EC  0012               	return		;funcret
  1278  0020EE  FFFF               	dw	65535	; errata NOP
  1279  0020F0                     __end_of_tim2Init:
  1280                           	callstack 0
  1281                           
  1282 ;; *************** function _tim0Init *****************
  1283 ;; Defined at:
  1284 ;;		line 21 in file "pwm.c"
  1285 ;; Parameters:    Size  Location     Type
  1286 ;;		None
  1287 ;; Auto vars:     Size  Location     Type
  1288 ;;		None
  1289 ;; Return value:  Size  Location     Type
  1290 ;;                  1    wreg      void 
  1291 ;; Registers used:
  1292 ;;		wreg, status,2
  1293 ;; Tracked objects:
  1294 ;;		On entry : 0/0
  1295 ;;		On exit  : 0/0
  1296 ;;		Unchanged: 0/0
  1297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1298 ;;      Params:         0       0       0       0       0       0       0
  1299 ;;      Locals:         0       0       0       0       0       0       0
  1300 ;;      Temps:          0       0       0       0       0       0       0
  1301 ;;      Totals:         0       0       0       0       0       0       0
  1302 ;;Total ram usage:        0 bytes
  1303 ;; Hardware stack levels used:    1
  1304 ;; Hardware stack levels required when called:    4
  1305 ;; This function calls:
  1306 ;;		Nothing
  1307 ;; This function is called by:
  1308 ;;		_main
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           	psect	text3
  1313  002104                     __ptext3:
  1314                           	callstack 0
  1315  002104                     _tim0Init:
  1316                           	callstack 0
  1317  002104  FFFF               	dw	65535	; assembler added errata NOP
  1318  002106                     
  1319                           ;pwm.c: 22:     T0CONbits.TMR0ON = 0;
  1320  002106  9ED5               	bcf	213,7,c	;volatile
  1321                           
  1322                           ;pwm.c: 23:     T0CONbits.T08BIT = 0;
  1323  002108  9CD5               	bcf	213,6,c	;volatile
  1324                           
  1325                           ;pwm.c: 24:     T0CONbits.T0CS = 0;
  1326  00210A  9AD5               	bcf	213,5,c	;volatile
  1327                           
  1328                           ;pwm.c: 25:     T0CONbits.PSA = 1;
  1329  00210C  86D5               	bsf	213,3,c	;volatile
  1330  00210E                     
  1331                           ;pwm.c: 26:     T0CONbits.T0PS = 0x07;
  1332  00210E  0E07               	movlw	7
  1333  002110  12D5               	iorwf	213,f,c	;volatile
  1334  002112  0012               	return		;funcret
  1335  002114  FFFF               	dw	65535	; errata NOP
  1336  002116                     __end_of_tim0Init:
  1337                           	callstack 0
  1338                           
  1339 ;; *************** function _shiftData *****************
  1340 ;; Defined at:
  1341 ;;		line 120 in file "usart.c"
  1342 ;; Parameters:    Size  Location     Type
  1343 ;;		None
  1344 ;; Auto vars:     Size  Location     Type
  1345 ;;  i               1   19[COMRAM] unsigned char 
  1346 ;; Return value:  Size  Location     Type
  1347 ;;                  1    wreg      void 
  1348 ;; Registers used:
  1349 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1350 ;; Tracked objects:
  1351 ;;		On entry : 0/0
  1352 ;;		On exit  : 0/0
  1353 ;;		Unchanged: 0/0
  1354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1355 ;;      Params:         0       0       0       0       0       0       0
  1356 ;;      Locals:         1       0       0       0       0       0       0
  1357 ;;      Temps:          2       0       0       0       0       0       0
  1358 ;;      Totals:         3       0       0       0       0       0       0
  1359 ;;Total ram usage:        3 bytes
  1360 ;; Hardware stack levels used:    1
  1361 ;; Hardware stack levels required when called:    4
  1362 ;; This function calls:
  1363 ;;		Nothing
  1364 ;; This function is called by:
  1365 ;;		_main
  1366 ;; This function uses a non-reentrant model
  1367 ;;
  1368                           
  1369                           	psect	text4
  1370  001EE8                     __ptext4:
  1371                           	callstack 0
  1372  001EE8                     _shiftData:
  1373                           	callstack 0
  1374  001EE8  FFFF               	dw	65535	; assembler added errata NOP
  1375  001EEA                     
  1376                           ;usart.c: 121:     char i;;usart.c: 123:     for(i = 0; i < 4; i++){
  1377  001EEA  0E00               	movlw	0
  1378  001EEC  6E14               	movwf	shiftData@i^0,c
  1379  001EEE                     l3778:
  1380  001EEE  FFFF               	dw	65535	; assembler added errata NOP
  1381                           
  1382                           ;usart.c: 124:         dataSequence[i] = dataSequence[i+1];
  1383  001EF0  5014               	movf	shiftData@i^0,w,c
  1384  001EF2  6E12               	movwf	??_shiftData^0,c
  1385  001EF4  6A13               	clrf	(??_shiftData+1)^0,c
  1386  001EF6  90D8               	bcf	status,0,c
  1387  001EF8  3612               	rlcf	??_shiftData^0,f,c
  1388  001EFA  3613               	rlcf	(??_shiftData+1)^0,f,c
  1389  001EFC  90D8               	bcf	status,0,c
  1390  001EFE  3612               	rlcf	??_shiftData^0,f,c
  1391  001F00  3613               	rlcf	(??_shiftData+1)^0,f,c
  1392  001F02  0EE0               	movlw	low (_dataSequence+4)
  1393  001F04  2412               	addwf	??_shiftData^0,w,c
  1394  001F06  6ED9               	movwf	fsr2l,c
  1395  001F08  0E00               	movlw	high (_dataSequence+4)
  1396  001F0A  2013               	addwfc	(??_shiftData+1)^0,w,c
  1397  001F0C  6EDA               	movwf	fsr2h,c
  1398  001F0E  5014               	movf	shiftData@i^0,w,c
  1399  001F10  0D04               	mullw	4
  1400  001F12  0EDC               	movlw	low _dataSequence
  1401  001F14  24F3               	addwf	243,w,c
  1402  001F16  6EE1               	movwf	fsr1l,c
  1403  001F18  0E00               	movlw	high _dataSequence
  1404  001F1A  20F4               	addwfc	prodh,w,c
  1405  001F1C  6EE2               	movwf	fsr1h,c
  1406  001F1E  CFDE FFE6          	movff	postinc2,postinc1
  1407  001F22  CFDE FFE6          	movff	postinc2,postinc1
  1408  001F26  CFDE FFE6          	movff	postinc2,postinc1
  1409  001F2A  CFDE FFE6          	movff	postinc2,postinc1
  1410  001F2E                     
  1411                           ;usart.c: 125:     }
  1412  001F2E  2A14               	incf	shiftData@i^0,f,c
  1413  001F30  0E03               	movlw	3
  1414  001F32  6414               	cpfsgt	shiftData@i^0,c
  1415  001F34  EF9E  F00F         	goto	u3181
  1416  001F38  EFA1  F00F         	goto	u3180
  1417  001F3C                     u3181:
  1418  001F3C  FFFF               	dw	65535	; assembler added errata NOP
  1419  001F3E  EF77  F00F         	goto	l3778
  1420  001F42                     u3180:
  1421  001F42  FFFF               	dw	65535	; assembler added errata NOP
  1422  001F44  0012               	return		;funcret
  1423  001F46  FFFF               	dw	65535	; errata NOP
  1424  001F48                     __end_of_shiftData:
  1425                           	callstack 0
  1426                           
  1427 ;; *************** function _resetPosition *****************
  1428 ;; Defined at:
  1429 ;;		line 160 in file "motors.c"
  1430 ;; Parameters:    Size  Location     Type
  1431 ;;		None
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;  keepMovingZ     1   23[COMRAM] unsigned char 
  1434 ;;  keepMovingY     1   22[COMRAM] unsigned char 
  1435 ;;  keepMovingX     1   21[COMRAM] unsigned char 
  1436 ;; Return value:  Size  Location     Type
  1437 ;;                  1    wreg      unsigned char 
  1438 ;; Registers used:
  1439 ;;		wreg, status,2, status,0, cstack
  1440 ;; Tracked objects:
  1441 ;;		On entry : 0/0
  1442 ;;		On exit  : 0/0
  1443 ;;		Unchanged: 0/0
  1444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1445 ;;      Params:         0       0       0       0       0       0       0
  1446 ;;      Locals:         3       0       0       0       0       0       0
  1447 ;;      Temps:          0       0       0       0       0       0       0
  1448 ;;      Totals:         3       0       0       0       0       0       0
  1449 ;;Total ram usage:        3 bytes
  1450 ;; Hardware stack levels used:    1
  1451 ;; Hardware stack levels required when called:    5
  1452 ;; This function calls:
  1453 ;;		_enableMotor
  1454 ;;		_resetStep
  1455 ;;		_setDecay
  1456 ;;		_setDirection
  1457 ;;		_setStep
  1458 ;;		_stepMade
  1459 ;; This function is called by:
  1460 ;;		_main
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           	psect	text5
  1465  000E98                     __ptext5:
  1466                           	callstack 0
  1467  000E98                     _resetPosition:
  1468                           	callstack 0
  1469  000E98  FFFF               	dw	65535	; assembler added errata NOP
  1470  000E9A                     
  1471                           ;motors.c: 162:     setStep(0, 0);
  1472  000E9A  0E00               	movlw	0
  1473  000E9C  6E12               	movwf	setStep@motor^0,c
  1474  000E9E  0E00               	movlw	0
  1475  000EA0  EC94  F00C         	call	_setStep
  1476                           
  1477                           ;motors.c: 163:     setStep(1, 0);
  1478  000EA4  0E00               	movlw	0
  1479  000EA6  6E12               	movwf	setStep@motor^0,c
  1480  000EA8  0E01               	movlw	1
  1481  000EAA  EC94  F00C         	call	_setStep
  1482                           
  1483                           ;motors.c: 164:     setStep(2, 0);
  1484  000EAE  0E00               	movlw	0
  1485  000EB0  6E12               	movwf	setStep@motor^0,c
  1486  000EB2  0E02               	movlw	2
  1487  000EB4  EC94  F00C         	call	_setStep
  1488                           
  1489                           ;motors.c: 166:     setDirection(0, 0);
  1490  000EB8  0E00               	movlw	0
  1491  000EBA  6E12               	movwf	setDirection@motor^0,c
  1492  000EBC  0E00               	movlw	0
  1493  000EBE  EC3A  F00F         	call	_setDirection
  1494                           
  1495                           ;motors.c: 167:     setDirection(0, 1);
  1496  000EC2  0E01               	movlw	1
  1497  000EC4  6E12               	movwf	setDirection@motor^0,c
  1498  000EC6  0E00               	movlw	0
  1499  000EC8  EC3A  F00F         	call	_setDirection
  1500                           
  1501                           ;motors.c: 168:     setDirection(0, 2);
  1502  000ECC  0E02               	movlw	2
  1503  000ECE  6E12               	movwf	setDirection@motor^0,c
  1504  000ED0  0E00               	movlw	0
  1505  000ED2  EC3A  F00F         	call	_setDirection
  1506                           
  1507                           ;motors.c: 170:     setDecay(1, 0);
  1508  000ED6  0E00               	movlw	0
  1509  000ED8  6E12               	movwf	setDecay@motor^0,c
  1510  000EDA  0E01               	movlw	1
  1511  000EDC  ECC6  F00E         	call	_setDecay
  1512                           
  1513                           ;motors.c: 171:     setDecay(1, 1);
  1514  000EE0  0E01               	movlw	1
  1515  000EE2  6E12               	movwf	setDecay@motor^0,c
  1516  000EE4  0E01               	movlw	1
  1517  000EE6  ECC6  F00E         	call	_setDecay
  1518                           
  1519                           ;motors.c: 172:     setDecay(1, 2);
  1520  000EEA  0E02               	movlw	2
  1521  000EEC  6E12               	movwf	setDecay@motor^0,c
  1522  000EEE  0E01               	movlw	1
  1523  000EF0  ECC6  F00E         	call	_setDecay
  1524                           
  1525                           ;motors.c: 174:     enableMotor(0, 0);
  1526  000EF4  0E00               	movlw	0
  1527  000EF6  6E12               	movwf	enableMotor@motor^0,c
  1528  000EF8  0E00               	movlw	0
  1529  000EFA  EC00  F00F         	call	_enableMotor
  1530                           
  1531                           ;motors.c: 175:     enableMotor(0, 1);
  1532  000EFE  0E01               	movlw	1
  1533  000F00  6E12               	movwf	enableMotor@motor^0,c
  1534  000F02  0E00               	movlw	0
  1535  000F04  EC00  F00F         	call	_enableMotor
  1536                           
  1537                           ;motors.c: 176:     enableMotor(0, 2);
  1538  000F08  0E02               	movlw	2
  1539  000F0A  6E12               	movwf	enableMotor@motor^0,c
  1540  000F0C  0E00               	movlw	0
  1541  000F0E  EC00  F00F         	call	_enableMotor
  1542  000F12                     
  1543                           ;motors.c: 180:     unsigned char keepMovingX = 1;
  1544  000F12  0E01               	movlw	1
  1545  000F14  6E16               	movwf	resetPosition@keepMovingX^0,c
  1546  000F16                     
  1547                           ;motors.c: 181:     unsigned char keepMovingY = 1;
  1548  000F16  0E01               	movlw	1
  1549  000F18  6E17               	movwf	resetPosition@keepMovingY^0,c
  1550  000F1A                     
  1551                           ;motors.c: 182:     unsigned char keepMovingZ = 1;
  1552  000F1A  0E01               	movlw	1
  1553  000F1C  6E18               	movwf	resetPosition@keepMovingZ^0,c
  1554  000F1E                     
  1555                           ;motors.c: 185:     T2CONbits.TMR2ON = 1;
  1556  000F1E  84CA               	bsf	202,2,c	;volatile
  1557  000F20                     
  1558                           ;motors.c: 187:     tm0Error = 0;
  1559  000F20  0E00               	movlw	0
  1560  000F22  6E58               	movwf	(_tm0Error+1)^0,c
  1561  000F24  0E00               	movlw	0
  1562  000F26  6E57               	movwf	_tm0Error^0,c
  1563  000F28                     
  1564                           ;motors.c: 188:     tm0Limit = 200;
  1565  000F28  0EC8               	movlw	200
  1566  000F2A  6E64               	movwf	_tm0Limit^0,c
  1567  000F2C                     
  1568                           ;motors.c: 189:     T0CONbits.TMR0ON = 1;
  1569  000F2C  8ED5               	bsf	213,7,c	;volatile
  1570                           
  1571                           ;motors.c: 191:     while(keepMovingX || keepMovingY || keepMovingZ){
  1572  000F2E  EF1A  F008         	goto	l3628
  1573  000F32                     l3606:
  1574  000F32  FFFF               	dw	65535	; assembler added errata NOP
  1575                           
  1576                           ;motors.c: 194:         if(tm0Error){
  1577  000F34  5057               	movf	_tm0Error^0,w,c
  1578  000F36  1058               	iorwf	(_tm0Error+1)^0,w,c
  1579  000F38  B4D8               	btfsc	status,2,c
  1580  000F3A  EFA1  F007         	goto	u3021
  1581  000F3E  EFA4  F007         	goto	u3020
  1582  000F42                     u3021:
  1583  000F42  FFFF               	dw	65535	; assembler added errata NOP
  1584  000F44  EFAE  F007         	goto	l115
  1585  000F48                     u3020:
  1586  000F48  FFFF               	dw	65535	; assembler added errata NOP
  1587  000F4A                     
  1588                           ;motors.c: 196:             LATAbits.LATA2 = 0;
  1589  000F4A  9489               	bcf	137,2,c	;volatile
  1590                           
  1591                           ;motors.c: 197:             LATBbits.LATB4 = 0;
  1592  000F4C  988A               	bcf	138,4,c	;volatile
  1593                           
  1594                           ;motors.c: 198:             LATCbits.LATC2 = 0;
  1595  000F4E  948B               	bcf	139,2,c	;volatile
  1596  000F50                     
  1597                           ;motors.c: 200:             tm0Error = 3;
  1598  000F50  0E00               	movlw	0
  1599  000F52  6E58               	movwf	(_tm0Error+1)^0,c
  1600  000F54  0E03               	movlw	3
  1601  000F56  6E57               	movwf	_tm0Error^0,c
  1602                           
  1603                           ;motors.c: 201:             break;
  1604  000F58  EF38  F008         	goto	l116
  1605  000F5C                     l115:
  1606  000F5C  FFFF               	dw	65535	; assembler added errata NOP
  1607                           
  1608                           ;motors.c: 208:         if(PORTEbits.RE0 || !keepMovingX){
  1609  000F5E  B084               	btfsc	132,0,c	;volatile
  1610  000F60  EFB4  F007         	goto	u3031
  1611  000F64  EFB7  F007         	goto	u3030
  1612  000F68                     u3031:
  1613  000F68  FFFF               	dw	65535	; assembler added errata NOP
  1614  000F6A  EFC1  F007         	goto	l3614
  1615  000F6E                     u3030:
  1616  000F6E  FFFF               	dw	65535	; assembler added errata NOP
  1617  000F70  5016               	movf	resetPosition@keepMovingX^0,w,c
  1618  000F72  A4D8               	btfss	status,2,c
  1619  000F74  EFBE  F007         	goto	u3041
  1620  000F78  EFC1  F007         	goto	u3040
  1621  000F7C                     u3041:
  1622  000F7C  FFFF               	dw	65535	; assembler added errata NOP
  1623  000F7E  EFC6  F007         	goto	l117
  1624  000F82                     u3040:
  1625  000F82                     l3614:
  1626  000F82  FFFF               	dw	65535	; assembler added errata NOP
  1627                           
  1628                           ;motors.c: 210:             keepMovingX = 0;
  1629  000F84  0E00               	movlw	0
  1630  000F86  6E16               	movwf	resetPosition@keepMovingX^0,c
  1631                           
  1632                           ;motors.c: 211:         }else{
  1633  000F88  EFC8  F007         	goto	l120
  1634  000F8C                     l117:
  1635  000F8C  FFFF               	dw	65535	; assembler added errata NOP
  1636                           
  1637                           ;motors.c: 213:             LATAbits.LATA2 = 1;
  1638  000F8E  8489               	bsf	137,2,c	;volatile
  1639  000F90                     l120:
  1640  000F90  FFFF               	dw	65535	; assembler added errata NOP
  1641                           
  1642                           ;motors.c: 217:         if(PORTEbits.RE1 || !keepMovingY){
  1643  000F92  B284               	btfsc	132,1,c	;volatile
  1644  000F94  EFCE  F007         	goto	u3051
  1645  000F98  EFD1  F007         	goto	u3050
  1646  000F9C                     u3051:
  1647  000F9C  FFFF               	dw	65535	; assembler added errata NOP
  1648  000F9E  EFDB  F007         	goto	l3618
  1649  000FA2                     u3050:
  1650  000FA2  FFFF               	dw	65535	; assembler added errata NOP
  1651  000FA4  5017               	movf	resetPosition@keepMovingY^0,w,c
  1652  000FA6  A4D8               	btfss	status,2,c
  1653  000FA8  EFD8  F007         	goto	u3061
  1654  000FAC  EFDB  F007         	goto	u3060
  1655  000FB0                     u3061:
  1656  000FB0  FFFF               	dw	65535	; assembler added errata NOP
  1657  000FB2  EFE0  F007         	goto	l121
  1658  000FB6                     u3060:
  1659  000FB6                     l3618:
  1660  000FB6  FFFF               	dw	65535	; assembler added errata NOP
  1661                           
  1662                           ;motors.c: 219:             keepMovingY = 0;
  1663  000FB8  0E00               	movlw	0
  1664  000FBA  6E17               	movwf	resetPosition@keepMovingY^0,c
  1665                           
  1666                           ;motors.c: 220:         }else{
  1667  000FBC  EFE2  F007         	goto	l124
  1668  000FC0                     l121:
  1669  000FC0  FFFF               	dw	65535	; assembler added errata NOP
  1670                           
  1671                           ;motors.c: 222:             LATBbits.LATB4 = 1;
  1672  000FC2  888A               	bsf	138,4,c	;volatile
  1673  000FC4                     l124:
  1674  000FC4  FFFF               	dw	65535	; assembler added errata NOP
  1675                           
  1676                           ;motors.c: 226:         if(PORTEbits.RE2 || !keepMovingZ){
  1677  000FC6  B484               	btfsc	132,2,c	;volatile
  1678  000FC8  EFE8  F007         	goto	u3071
  1679  000FCC  EFEB  F007         	goto	u3070
  1680  000FD0                     u3071:
  1681  000FD0  FFFF               	dw	65535	; assembler added errata NOP
  1682  000FD2  EFF5  F007         	goto	l3622
  1683  000FD6                     u3070:
  1684  000FD6  FFFF               	dw	65535	; assembler added errata NOP
  1685  000FD8  5018               	movf	resetPosition@keepMovingZ^0,w,c
  1686  000FDA  A4D8               	btfss	status,2,c
  1687  000FDC  EFF2  F007         	goto	u3081
  1688  000FE0  EFF5  F007         	goto	u3080
  1689  000FE4                     u3081:
  1690  000FE4  FFFF               	dw	65535	; assembler added errata NOP
  1691  000FE6  EFFA  F007         	goto	l125
  1692  000FEA                     u3080:
  1693  000FEA                     l3622:
  1694  000FEA  FFFF               	dw	65535	; assembler added errata NOP
  1695                           
  1696                           ;motors.c: 228:             keepMovingZ = 0;
  1697  000FEC  0E00               	movlw	0
  1698  000FEE  6E18               	movwf	resetPosition@keepMovingZ^0,c
  1699                           
  1700                           ;motors.c: 229:         }else{
  1701  000FF0  EFFC  F007         	goto	l3624
  1702  000FF4                     l125:
  1703  000FF4  FFFF               	dw	65535	; assembler added errata NOP
  1704                           
  1705                           ;motors.c: 231:             LATCbits.LATC2 = 1;
  1706  000FF6  848B               	bsf	139,2,c	;volatile
  1707  000FF8                     l3624:
  1708  000FF8  FFFF               	dw	65535	; assembler added errata NOP
  1709  000FFA  EC78  F010         	call	_stepMade	;wreg free
  1710  000FFE  5012               	movf	?_stepMade^0,w,c
  1711  001000  1013               	iorwf	(?_stepMade+1)^0,w,c
  1712  001002  B4D8               	btfsc	status,2,c
  1713  001004  EF06  F008         	goto	u3091
  1714  001008  EF09  F008         	goto	u3090
  1715  00100C                     u3091:
  1716  00100C  FFFF               	dw	65535	; assembler added errata NOP
  1717  00100E  EFFC  F007         	goto	l3624
  1718  001012                     u3090:
  1719  001012  FFFF               	dw	65535	; assembler added errata NOP
  1720  001014                     
  1721                           ;motors.c: 238:         LATAbits.LATA2 = 0;
  1722  001014  9489               	bcf	137,2,c	;volatile
  1723                           
  1724                           ;motors.c: 239:         LATBbits.LATB4 = 0;
  1725  001016  988A               	bcf	138,4,c	;volatile
  1726                           
  1727                           ;motors.c: 240:         LATCbits.LATC2 = 0;
  1728  001018  948B               	bcf	139,2,c	;volatile
  1729  00101A                     l3626:
  1730  00101A  FFFF               	dw	65535	; assembler added errata NOP
  1731  00101C  EC78  F010         	call	_stepMade	;wreg free
  1732  001020  5012               	movf	?_stepMade^0,w,c
  1733  001022  1013               	iorwf	(?_stepMade+1)^0,w,c
  1734  001024  B4D8               	btfsc	status,2,c
  1735  001026  EF17  F008         	goto	u3101
  1736  00102A  EF1A  F008         	goto	u3100
  1737  00102E                     u3101:
  1738  00102E  FFFF               	dw	65535	; assembler added errata NOP
  1739  001030  EF0D  F008         	goto	l3626
  1740  001034                     u3100:
  1741  001034                     l3628:
  1742  001034  FFFF               	dw	65535	; assembler added errata NOP
  1743                           
  1744                           ;motors.c: 191:     while(keepMovingX || keepMovingY || keepMovingZ){
  1745  001036  5016               	movf	resetPosition@keepMovingX^0,w,c
  1746  001038  A4D8               	btfss	status,2,c
  1747  00103A  EF21  F008         	goto	u3111
  1748  00103E  EF24  F008         	goto	u3110
  1749  001042                     u3111:
  1750  001042  FFFF               	dw	65535	; assembler added errata NOP
  1751  001044  EF99  F007         	goto	l3606
  1752  001048                     u3110:
  1753  001048  FFFF               	dw	65535	; assembler added errata NOP
  1754  00104A  5017               	movf	resetPosition@keepMovingY^0,w,c
  1755  00104C  A4D8               	btfss	status,2,c
  1756  00104E  EF2B  F008         	goto	u3121
  1757  001052  EF2E  F008         	goto	u3120
  1758  001056                     u3121:
  1759  001056  FFFF               	dw	65535	; assembler added errata NOP
  1760  001058  EF99  F007         	goto	l3606
  1761  00105C                     u3120:
  1762  00105C  FFFF               	dw	65535	; assembler added errata NOP
  1763  00105E  5018               	movf	resetPosition@keepMovingZ^0,w,c
  1764  001060  A4D8               	btfss	status,2,c
  1765  001062  EF35  F008         	goto	u3131
  1766  001066  EF38  F008         	goto	u3130
  1767  00106A                     u3131:
  1768  00106A  FFFF               	dw	65535	; assembler added errata NOP
  1769  00106C  EF99  F007         	goto	l3606
  1770  001070                     u3130:
  1771  001070                     l116:
  1772  001070  FFFF               	dw	65535	; assembler added errata NOP
  1773                           
  1774                           ;motors.c: 247:     T0CONbits.TMR0ON = 0;
  1775  001072  9ED5               	bcf	213,7,c	;volatile
  1776                           
  1777                           ;motors.c: 248:     T2CONbits.TMR2ON = 0;
  1778  001074  94CA               	bcf	202,2,c	;volatile
  1779  001076                     
  1780                           ;motors.c: 250:     TMR0 = 0;
  1781  001076  0E00               	movlw	0
  1782  001078  6ED7               	movwf	215,c	;volatile
  1783  00107A  0E00               	movlw	0
  1784  00107C  6ED6               	movwf	214,c	;volatile
  1785                           
  1786                           ;motors.c: 251:     TMR2 = 0;
  1787  00107E  0E00               	movlw	0
  1788  001080  6ECC               	movwf	204,c	;volatile
  1789  001082                     
  1790                           ;motors.c: 254:     resetStep();
  1791  001082  ECC3  F010         	call	_resetStep	;wreg free
  1792  001086  0012               	return		;funcret
  1793  001088  FFFF               	dw	65535	; errata NOP
  1794  00108A                     __end_of_resetPosition:
  1795                           	callstack 0
  1796                           
  1797 ;; *************** function _setStep *****************
  1798 ;; Defined at:
  1799 ;;		line 69 in file "motors.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;  step            1    wreg     unsigned char 
  1802 ;;  motor           1   17[COMRAM] unsigned char 
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;  step            1   20[COMRAM] unsigned char 
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  1    wreg      void 
  1807 ;; Registers used:
  1808 ;;		wreg, status,2, status,0
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1814 ;;      Params:         1       0       0       0       0       0       0
  1815 ;;      Locals:         1       0       0       0       0       0       0
  1816 ;;      Temps:          2       0       0       0       0       0       0
  1817 ;;      Totals:         4       0       0       0       0       0       0
  1818 ;;Total ram usage:        4 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    4
  1821 ;; This function calls:
  1822 ;;		Nothing
  1823 ;; This function is called by:
  1824 ;;		_resetPosition
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           	psect	text6
  1829  001928                     __ptext6:
  1830                           	callstack 0
  1831  001928                     _setStep:
  1832                           	callstack 0
  1833  001928  FFFF               	dw	65535	; assembler added errata NOP
  1834                           
  1835                           ;incstack = 0
  1836                           ;setStep@step stored from wreg
  1837  00192A  6E15               	movwf	setStep@step^0,c
  1838  00192C                     
  1839                           ;motors.c: 70:     switch(motor){
  1840  00192C  EFE1  F00C         	goto	l3330
  1841  001930                     l3322:
  1842  001930  FFFF               	dw	65535	; assembler added errata NOP
  1843                           
  1844                           ;motors.c: 73:             LATAbits.LATA5 = (step & 0x01);
  1845  001932  C015  F013         	movff	setStep@step,??_setStep
  1846  001936  0E01               	movlw	1
  1847  001938  1613               	andwf	??_setStep^0,f,c
  1848  00193A  3A13               	swapf	??_setStep^0,f,c
  1849  00193C  4613               	rlncf	??_setStep^0,f,c
  1850  00193E  5089               	movf	137,w,c	;volatile
  1851  001940  1813               	xorwf	??_setStep^0,w,c
  1852  001942  0BDF               	andlw	-33
  1853  001944  1813               	xorwf	??_setStep^0,w,c
  1854  001946  6E89               	movwf	137,c	;volatile
  1855                           
  1856                           ;motors.c: 75:             LATBbits.LATB0 = (step & 0x02);
  1857  001948  C015  F013         	movff	setStep@step,??_setStep
  1858  00194C  0E02               	movlw	2
  1859  00194E  1613               	andwf	??_setStep^0,f,c
  1860  001950  508A               	movf	138,w,c	;volatile
  1861  001952  1813               	xorwf	??_setStep^0,w,c
  1862  001954  0BFE               	andlw	-2
  1863  001956  1813               	xorwf	??_setStep^0,w,c
  1864  001958  6E8A               	movwf	138,c	;volatile
  1865                           
  1866                           ;motors.c: 76:             break;
  1867  00195A  EFFC  F00C         	goto	l83
  1868  00195E                     l3324:
  1869  00195E  FFFF               	dw	65535	; assembler added errata NOP
  1870                           
  1871                           ;motors.c: 78:             LATBbits.LATB6 = (step & 0x01);
  1872  001960  C015  F013         	movff	setStep@step,??_setStep
  1873  001964  0E01               	movlw	1
  1874  001966  1613               	andwf	??_setStep^0,f,c
  1875  001968  3A13               	swapf	??_setStep^0,f,c
  1876  00196A  4613               	rlncf	??_setStep^0,f,c
  1877  00196C  4613               	rlncf	??_setStep^0,f,c
  1878  00196E  508A               	movf	138,w,c	;volatile
  1879  001970  1813               	xorwf	??_setStep^0,w,c
  1880  001972  0BBF               	andlw	-65
  1881  001974  1813               	xorwf	??_setStep^0,w,c
  1882  001976  6E8A               	movwf	138,c	;volatile
  1883                           
  1884                           ;motors.c: 79:             LATBbits.LATB7 = (step & 0x02);
  1885  001978  C015  F013         	movff	setStep@step,??_setStep
  1886  00197C  0E02               	movlw	2
  1887  00197E  1613               	andwf	??_setStep^0,f,c
  1888  001980  3213               	rrcf	??_setStep^0,f,c
  1889  001982  3213               	rrcf	??_setStep^0,f,c
  1890  001984  508A               	movf	138,w,c	;volatile
  1891  001986  1813               	xorwf	??_setStep^0,w,c
  1892  001988  0B7F               	andlw	-129
  1893  00198A  1813               	xorwf	??_setStep^0,w,c
  1894  00198C  6E8A               	movwf	138,c	;volatile
  1895                           
  1896                           ;motors.c: 80:             break;
  1897  00198E  EFFC  F00C         	goto	l83
  1898  001992                     l3326:
  1899  001992  FFFF               	dw	65535	; assembler added errata NOP
  1900                           
  1901                           ;motors.c: 82:             LATCbits.LATC4 = (step & 0x01);
  1902  001994  C015  F013         	movff	setStep@step,??_setStep
  1903  001998  0E01               	movlw	1
  1904  00199A  1613               	andwf	??_setStep^0,f,c
  1905  00199C  3A13               	swapf	??_setStep^0,f,c
  1906  00199E  508B               	movf	139,w,c	;volatile
  1907  0019A0  1813               	xorwf	??_setStep^0,w,c
  1908  0019A2  0BEF               	andlw	-17
  1909  0019A4  1813               	xorwf	??_setStep^0,w,c
  1910  0019A6  6E8B               	movwf	139,c	;volatile
  1911                           
  1912                           ;motors.c: 83:             LATCbits.LATC5 = (step & 0x02);
  1913  0019A8  C015  F013         	movff	setStep@step,??_setStep
  1914  0019AC  0E02               	movlw	2
  1915  0019AE  1613               	andwf	??_setStep^0,f,c
  1916  0019B0  3A13               	swapf	??_setStep^0,f,c
  1917  0019B2  4613               	rlncf	??_setStep^0,f,c
  1918  0019B4  508B               	movf	139,w,c	;volatile
  1919  0019B6  1813               	xorwf	??_setStep^0,w,c
  1920  0019B8  0BDF               	andlw	-33
  1921  0019BA  1813               	xorwf	??_setStep^0,w,c
  1922  0019BC  6E8B               	movwf	139,c	;volatile
  1923                           
  1924                           ;motors.c: 84:             break;
  1925  0019BE  EFFC  F00C         	goto	l83
  1926  0019C2                     l3330:
  1927  0019C2  FFFF               	dw	65535	; assembler added errata NOP
  1928  0019C4  5012               	movf	setStep@motor^0,w,c
  1929  0019C6  6E13               	movwf	??_setStep^0,c
  1930  0019C8  6A14               	clrf	(??_setStep+1)^0,c
  1931                           
  1932                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1933                           ; Switch size 1, requested type "simple"
  1934                           ; Number of cases is 1, Range of values is 0 to 0
  1935                           ; switch strategies available:
  1936                           ; Name         Instructions Cycles
  1937                           ; simple_byte            4     3 (average)
  1938                           ;	Chosen strategy is simple_byte
  1939  0019CA  5014               	movf	(??_setStep+1)^0,w,c
  1940  0019CC  0A00               	xorlw	0	; case 0
  1941  0019CE  B4D8               	btfsc	status,2,c
  1942  0019D0  EFEC  F00C         	goto	l4002
  1943  0019D4  EFFC  F00C         	goto	l83
  1944  0019D8                     l4002:
  1945  0019D8  FFFF               	dw	65535	; assembler added errata NOP
  1946                           
  1947                           ; Switch size 1, requested type "simple"
  1948                           ; Number of cases is 3, Range of values is 0 to 2
  1949                           ; switch strategies available:
  1950                           ; Name         Instructions Cycles
  1951                           ; simple_byte           10     6 (average)
  1952                           ;	Chosen strategy is simple_byte
  1953  0019DA  5013               	movf	??_setStep^0,w,c
  1954  0019DC  0A00               	xorlw	0	; case 0
  1955  0019DE  B4D8               	btfsc	status,2,c
  1956  0019E0  EF98  F00C         	goto	l3322
  1957  0019E4  0A01               	xorlw	1	; case 1
  1958  0019E6  B4D8               	btfsc	status,2,c
  1959  0019E8  EFAF  F00C         	goto	l3324
  1960  0019EC  0A03               	xorlw	3	; case 2
  1961  0019EE  B4D8               	btfsc	status,2,c
  1962  0019F0  EFC9  F00C         	goto	l3326
  1963  0019F4  EFFC  F00C         	goto	l83
  1964  0019F8                     l83:
  1965  0019F8  FFFF               	dw	65535	; assembler added errata NOP
  1966  0019FA  0012               	return		;funcret
  1967  0019FC  FFFF               	dw	65535	; errata NOP
  1968  0019FE                     __end_of_setStep:
  1969                           	callstack 0
  1970                           
  1971 ;; *************** function _setDecay *****************
  1972 ;; Defined at:
  1973 ;;		line 138 in file "motors.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;  decay           1    wreg     unsigned char 
  1976 ;;  motor           1   17[COMRAM] unsigned char 
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;  decay           1   20[COMRAM] unsigned char 
  1979 ;; Return value:  Size  Location     Type
  1980 ;;                  1    wreg      void 
  1981 ;; Registers used:
  1982 ;;		wreg, status,2, status,0
  1983 ;; Tracked objects:
  1984 ;;		On entry : 0/0
  1985 ;;		On exit  : 0/0
  1986 ;;		Unchanged: 0/0
  1987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1988 ;;      Params:         1       0       0       0       0       0       0
  1989 ;;      Locals:         1       0       0       0       0       0       0
  1990 ;;      Temps:          2       0       0       0       0       0       0
  1991 ;;      Totals:         4       0       0       0       0       0       0
  1992 ;;Total ram usage:        4 bytes
  1993 ;; Hardware stack levels used:    1
  1994 ;; Hardware stack levels required when called:    4
  1995 ;; This function calls:
  1996 ;;		Nothing
  1997 ;; This function is called by:
  1998 ;;		_resetPosition
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text7
  2003  001D8C                     __ptext7:
  2004                           	callstack 0
  2005  001D8C                     _setDecay:
  2006                           	callstack 0
  2007  001D8C  FFFF               	dw	65535	; assembler added errata NOP
  2008                           
  2009                           ;incstack = 0
  2010                           ;setDecay@decay stored from wreg
  2011  001D8E  6E15               	movwf	setDecay@decay^0,c
  2012  001D90                     
  2013                           ;motors.c: 139:     switch(motor){
  2014  001D90  EFE2  F00E         	goto	l3362
  2015  001D94                     l3354:
  2016  001D94  FFFF               	dw	65535	; assembler added errata NOP
  2017                           
  2018                           ;motors.c: 141:             LATBbits.LATB2 = decay;
  2019  001D96  B015               	btfsc	setDecay@decay^0,0,c
  2020  001D98  D002               	bra	u2695
  2021  001D9A  948A               	bcf	138,2,c	;volatile
  2022  001D9C  D001               	bra	u2696
  2023  001D9E                     u2695:
  2024  001D9E  848A               	bsf	138,2,c	;volatile
  2025  001DA0                     u2696:
  2026                           
  2027                           ;motors.c: 142:             break;
  2028  001DA0  EFFD  F00E         	goto	l110
  2029  001DA4                     l3356:
  2030  001DA4  FFFF               	dw	65535	; assembler added errata NOP
  2031                           
  2032                           ;motors.c: 144:             LATCbits.LATC0 = decay;
  2033  001DA6  B015               	btfsc	setDecay@decay^0,0,c
  2034  001DA8  D002               	bra	u2705
  2035  001DAA  908B               	bcf	139,0,c	;volatile
  2036  001DAC  D001               	bra	u2706
  2037  001DAE                     u2705:
  2038  001DAE  808B               	bsf	139,0,c	;volatile
  2039  001DB0                     u2706:
  2040                           
  2041                           ;motors.c: 145:             break;
  2042  001DB0  EFFD  F00E         	goto	l110
  2043  001DB4                     l3358:
  2044  001DB4  FFFF               	dw	65535	; assembler added errata NOP
  2045                           
  2046                           ;motors.c: 147:             LATDbits.LATD0 = decay;
  2047  001DB6  B015               	btfsc	setDecay@decay^0,0,c
  2048  001DB8  D002               	bra	u2715
  2049  001DBA  908C               	bcf	140,0,c	;volatile
  2050  001DBC  D001               	bra	u2716
  2051  001DBE                     u2715:
  2052  001DBE  808C               	bsf	140,0,c	;volatile
  2053  001DC0                     u2716:
  2054                           
  2055                           ;motors.c: 148:             break;
  2056  001DC0  EFFD  F00E         	goto	l110
  2057  001DC4                     l3362:
  2058  001DC4  FFFF               	dw	65535	; assembler added errata NOP
  2059  001DC6  5012               	movf	setDecay@motor^0,w,c
  2060  001DC8  6E13               	movwf	??_setDecay^0,c
  2061  001DCA  6A14               	clrf	(??_setDecay+1)^0,c
  2062                           
  2063                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2064                           ; Switch size 1, requested type "simple"
  2065                           ; Number of cases is 1, Range of values is 0 to 0
  2066                           ; switch strategies available:
  2067                           ; Name         Instructions Cycles
  2068                           ; simple_byte            4     3 (average)
  2069                           ;	Chosen strategy is simple_byte
  2070  001DCC  5014               	movf	(??_setDecay+1)^0,w,c
  2071  001DCE  0A00               	xorlw	0	; case 0
  2072  001DD0  B4D8               	btfsc	status,2,c
  2073  001DD2  EFED  F00E         	goto	l4004
  2074  001DD6  EFFD  F00E         	goto	l110
  2075  001DDA                     l4004:
  2076  001DDA  FFFF               	dw	65535	; assembler added errata NOP
  2077                           
  2078                           ; Switch size 1, requested type "simple"
  2079                           ; Number of cases is 3, Range of values is 0 to 2
  2080                           ; switch strategies available:
  2081                           ; Name         Instructions Cycles
  2082                           ; simple_byte           10     6 (average)
  2083                           ;	Chosen strategy is simple_byte
  2084  001DDC  5013               	movf	??_setDecay^0,w,c
  2085  001DDE  0A00               	xorlw	0	; case 0
  2086  001DE0  B4D8               	btfsc	status,2,c
  2087  001DE2  EFCA  F00E         	goto	l3354
  2088  001DE6  0A01               	xorlw	1	; case 1
  2089  001DE8  B4D8               	btfsc	status,2,c
  2090  001DEA  EFD2  F00E         	goto	l3356
  2091  001DEE  0A03               	xorlw	3	; case 2
  2092  001DF0  B4D8               	btfsc	status,2,c
  2093  001DF2  EFDA  F00E         	goto	l3358
  2094  001DF6  EFFD  F00E         	goto	l110
  2095  001DFA                     l110:
  2096  001DFA  FFFF               	dw	65535	; assembler added errata NOP
  2097  001DFC  0012               	return		;funcret
  2098  001DFE  FFFF               	dw	65535	; errata NOP
  2099  001E00                     __end_of_setDecay:
  2100                           	callstack 0
  2101                           
  2102 ;; *************** function _enableMotor *****************
  2103 ;; Defined at:
  2104 ;;		line 96 in file "motors.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  enable          1    wreg     unsigned char 
  2107 ;;  motor           1   17[COMRAM] unsigned char 
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;  enable          1   20[COMRAM] unsigned char 
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  1    wreg      void 
  2112 ;; Registers used:
  2113 ;;		wreg, status,2, status,0
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2119 ;;      Params:         1       0       0       0       0       0       0
  2120 ;;      Locals:         1       0       0       0       0       0       0
  2121 ;;      Temps:          2       0       0       0       0       0       0
  2122 ;;      Totals:         4       0       0       0       0       0       0
  2123 ;;Total ram usage:        4 bytes
  2124 ;; Hardware stack levels used:    1
  2125 ;; Hardware stack levels required when called:    4
  2126 ;; This function calls:
  2127 ;;		Nothing
  2128 ;; This function is called by:
  2129 ;;		_resetPosition
  2130 ;;		_main
  2131 ;; This function uses a non-reentrant model
  2132 ;;
  2133                           
  2134                           	psect	text8
  2135  001E00                     __ptext8:
  2136                           	callstack 0
  2137  001E00                     _enableMotor:
  2138                           	callstack 0
  2139  001E00  FFFF               	dw	65535	; assembler added errata NOP
  2140                           
  2141                           ;incstack = 0
  2142                           ;enableMotor@enable stored from wreg
  2143  001E02  6E15               	movwf	enableMotor@enable^0,c
  2144  001E04                     
  2145                           ;motors.c: 97:     switch(motor){
  2146  001E04  EF1C  F00F         	goto	l3346
  2147  001E08                     l3338:
  2148  001E08  FFFF               	dw	65535	; assembler added errata NOP
  2149                           
  2150                           ;motors.c: 99:             LATAbits.LATA3 = enable;
  2151  001E0A  B015               	btfsc	enableMotor@enable^0,0,c
  2152  001E0C  D002               	bra	u2665
  2153  001E0E  9689               	bcf	137,3,c	;volatile
  2154  001E10  D001               	bra	u2666
  2155  001E12                     u2665:
  2156  001E12  8689               	bsf	137,3,c	;volatile
  2157  001E14                     u2666:
  2158                           
  2159                           ;motors.c: 100:             break;
  2160  001E14  EF37  F00F         	goto	l92
  2161  001E18                     l3340:
  2162  001E18  FFFF               	dw	65535	; assembler added errata NOP
  2163                           
  2164                           ;motors.c: 102:             LATBbits.LATB5 = enable;
  2165  001E1A  B015               	btfsc	enableMotor@enable^0,0,c
  2166  001E1C  D002               	bra	u2675
  2167  001E1E  9A8A               	bcf	138,5,c	;volatile
  2168  001E20  D001               	bra	u2676
  2169  001E22                     u2675:
  2170  001E22  8A8A               	bsf	138,5,c	;volatile
  2171  001E24                     u2676:
  2172                           
  2173                           ;motors.c: 103:             break;
  2174  001E24  EF37  F00F         	goto	l92
  2175  001E28                     l3342:
  2176  001E28  FFFF               	dw	65535	; assembler added errata NOP
  2177                           
  2178                           ;motors.c: 105:             LATCbits.LATC3 = enable;
  2179  001E2A  B015               	btfsc	enableMotor@enable^0,0,c
  2180  001E2C  D002               	bra	u2685
  2181  001E2E  968B               	bcf	139,3,c	;volatile
  2182  001E30  D001               	bra	u2686
  2183  001E32                     u2685:
  2184  001E32  868B               	bsf	139,3,c	;volatile
  2185  001E34                     u2686:
  2186                           
  2187                           ;motors.c: 106:             break;
  2188  001E34  EF37  F00F         	goto	l92
  2189  001E38                     l3346:
  2190  001E38  FFFF               	dw	65535	; assembler added errata NOP
  2191  001E3A  5012               	movf	enableMotor@motor^0,w,c
  2192  001E3C  6E13               	movwf	??_enableMotor^0,c
  2193  001E3E  6A14               	clrf	(??_enableMotor+1)^0,c
  2194                           
  2195                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2196                           ; Switch size 1, requested type "simple"
  2197                           ; Number of cases is 1, Range of values is 0 to 0
  2198                           ; switch strategies available:
  2199                           ; Name         Instructions Cycles
  2200                           ; simple_byte            4     3 (average)
  2201                           ;	Chosen strategy is simple_byte
  2202  001E40  5014               	movf	(??_enableMotor+1)^0,w,c
  2203  001E42  0A00               	xorlw	0	; case 0
  2204  001E44  B4D8               	btfsc	status,2,c
  2205  001E46  EF27  F00F         	goto	l4006
  2206  001E4A  EF37  F00F         	goto	l92
  2207  001E4E                     l4006:
  2208  001E4E  FFFF               	dw	65535	; assembler added errata NOP
  2209                           
  2210                           ; Switch size 1, requested type "simple"
  2211                           ; Number of cases is 3, Range of values is 0 to 2
  2212                           ; switch strategies available:
  2213                           ; Name         Instructions Cycles
  2214                           ; simple_byte           10     6 (average)
  2215                           ;	Chosen strategy is simple_byte
  2216  001E50  5013               	movf	??_enableMotor^0,w,c
  2217  001E52  0A00               	xorlw	0	; case 0
  2218  001E54  B4D8               	btfsc	status,2,c
  2219  001E56  EF04  F00F         	goto	l3338
  2220  001E5A  0A01               	xorlw	1	; case 1
  2221  001E5C  B4D8               	btfsc	status,2,c
  2222  001E5E  EF0C  F00F         	goto	l3340
  2223  001E62  0A03               	xorlw	3	; case 2
  2224  001E64  B4D8               	btfsc	status,2,c
  2225  001E66  EF14  F00F         	goto	l3342
  2226  001E6A  EF37  F00F         	goto	l92
  2227  001E6E                     l92:
  2228  001E6E  FFFF               	dw	65535	; assembler added errata NOP
  2229  001E70  0012               	return		;funcret
  2230  001E72  FFFF               	dw	65535	; errata NOP
  2231  001E74                     __end_of_enableMotor:
  2232                           	callstack 0
  2233                           
  2234 ;; *************** function _reduceSeq *****************
  2235 ;; Defined at:
  2236 ;;		line 89 in file "usart.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;		None
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;		None
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  1    wreg      void 
  2243 ;; Registers used:
  2244 ;;		status,2, status,0
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2250 ;;      Params:         0       0       0       0       0       0       0
  2251 ;;      Locals:         0       0       0       0       0       0       0
  2252 ;;      Temps:          0       0       0       0       0       0       0
  2253 ;;      Totals:         0       0       0       0       0       0       0
  2254 ;;Total ram usage:        0 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    4
  2257 ;; This function calls:
  2258 ;;		Nothing
  2259 ;; This function is called by:
  2260 ;;		_main
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text9
  2265  0021B8                     __ptext9:
  2266                           	callstack 0
  2267  0021B8                     _reduceSeq:
  2268                           	callstack 0
  2269  0021B8  FFFF               	dw	65535	; assembler added errata NOP
  2270  0021BA                     
  2271                           ;usart.c: 90:     dataCounter--;
  2272  0021BA  065D               	decf	_dataCounter^0,f,c
  2273  0021BC  0012               	return		;funcret
  2274  0021BE  FFFF               	dw	65535	; errata NOP
  2275  0021C0                     __end_of_reduceSeq:
  2276                           	callstack 0
  2277                           
  2278 ;; *************** function _readSeq *****************
  2279 ;; Defined at:
  2280 ;;		line 96 in file "usart.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;		None
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;		None
  2285 ;; Return value:  Size  Location     Type
  2286 ;;                  1    wreg      unsigned char 
  2287 ;; Registers used:
  2288 ;;		wreg, status,2
  2289 ;; Tracked objects:
  2290 ;;		On entry : 0/0
  2291 ;;		On exit  : 0/0
  2292 ;;		Unchanged: 0/0
  2293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2294 ;;      Params:         0       0       0       0       0       0       0
  2295 ;;      Locals:         0       0       0       0       0       0       0
  2296 ;;      Temps:          0       0       0       0       0       0       0
  2297 ;;      Totals:         0       0       0       0       0       0       0
  2298 ;;Total ram usage:        0 bytes
  2299 ;; Hardware stack levels used:    1
  2300 ;; Hardware stack levels required when called:    4
  2301 ;; This function calls:
  2302 ;;		Nothing
  2303 ;; This function is called by:
  2304 ;;		_main
  2305 ;; This function uses a non-reentrant model
  2306 ;;
  2307                           
  2308                           	psect	text10
  2309  0021C0                     __ptext10:
  2310                           	callstack 0
  2311  0021C0                     _readSeq:
  2312                           	callstack 0
  2313  0021C0  FFFF               	dw	65535	; assembler added errata NOP
  2314  0021C2                     
  2315                           ;usart.c: 97:     return dataCounter;
  2316  0021C2  505D               	movf	_dataCounter^0,w,c
  2317  0021C4  0012               	return		;funcret
  2318  0021C6  FFFF               	dw	65535	; errata NOP
  2319  0021C8                     __end_of_readSeq:
  2320                           	callstack 0
  2321                           
  2322 ;; *************** function _printError *****************
  2323 ;; Defined at:
  2324 ;;		line 53 in file "usart.c"
  2325 ;; Parameters:    Size  Location     Type
  2326 ;;  errCode         1    wreg     unsigned char 
  2327 ;; Auto vars:     Size  Location     Type
  2328 ;;  errCode         1   23[COMRAM] unsigned char 
  2329 ;; Return value:  Size  Location     Type
  2330 ;;                  1    wreg      void 
  2331 ;; Registers used:
  2332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2333 ;; Tracked objects:
  2334 ;;		On entry : 0/0
  2335 ;;		On exit  : 0/0
  2336 ;;		Unchanged: 0/0
  2337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2338 ;;      Params:         0       0       0       0       0       0       0
  2339 ;;      Locals:         1       0       0       0       0       0       0
  2340 ;;      Temps:          2       0       0       0       0       0       0
  2341 ;;      Totals:         3       0       0       0       0       0       0
  2342 ;;Total ram usage:        3 bytes
  2343 ;; Hardware stack levels used:    1
  2344 ;; Hardware stack levels required when called:    5
  2345 ;; This function calls:
  2346 ;;		_uartTx
  2347 ;; This function is called by:
  2348 ;;		_main
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           	psect	text11
  2353  00150C                     __ptext11:
  2354                           	callstack 0
  2355  00150C                     _printError:
  2356                           	callstack 0
  2357  00150C  FFFF               	dw	65535	; assembler added errata NOP
  2358                           
  2359                           ;incstack = 0
  2360                           ;printError@errCode stored from wreg
  2361  00150E  6E18               	movwf	printError@errCode^0,c
  2362  001510                     
  2363                           ;usart.c: 55:     switch(errCode){
  2364  001510  EFE2  F00A         	goto	l3698
  2365  001514                     l3680:
  2366  001514  FFFF               	dw	65535	; assembler added errata NOP
  2367                           
  2368                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  2369  001516  0EA0               	movlw	low _errString_Feed
  2370  001518  6E12               	movwf	uartTx@ptr^0,c
  2371  00151A  0E00               	movlw	high _errString_Feed
  2372  00151C  6E13               	movwf	(uartTx@ptr+1)^0,c
  2373  00151E  0E1D               	movlw	29
  2374  001520  6E14               	movwf	uartTx@length^0,c
  2375  001522  ECCE  F00F         	call	_uartTx	;wreg free
  2376                           
  2377                           ;usart.c: 58:             break;
  2378  001526  EF11  F00B         	goto	l498
  2379  00152A                     l3682:
  2380  00152A  FFFF               	dw	65535	; assembler added errata NOP
  2381                           
  2382                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  2383  00152C  0E5C               	movlw	low _errString_ZEND
  2384  00152E  6E12               	movwf	uartTx@ptr^0,c
  2385  001530  0E01               	movlw	high _errString_ZEND
  2386  001532  6E13               	movwf	(uartTx@ptr+1)^0,c
  2387  001534  0E28               	movlw	40
  2388  001536  6E14               	movwf	uartTx@length^0,c
  2389  001538  ECCE  F00F         	call	_uartTx	;wreg free
  2390                           
  2391                           ;usart.c: 61:             break;
  2392  00153C  EF11  F00B         	goto	l498
  2393  001540                     l3684:
  2394  001540  FFFF               	dw	65535	; assembler added errata NOP
  2395                           
  2396                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  2397  001542  0E84               	movlw	low _errString_Reset
  2398  001544  6E12               	movwf	uartTx@ptr^0,c
  2399  001546  0E01               	movlw	high _errString_Reset
  2400  001548  6E13               	movwf	(uartTx@ptr+1)^0,c
  2401  00154A  0E27               	movlw	39
  2402  00154C  6E14               	movwf	uartTx@length^0,c
  2403  00154E  ECCE  F00F         	call	_uartTx	;wreg free
  2404                           
  2405                           ;usart.c: 64:             break;
  2406  001552  EF11  F00B         	goto	l498
  2407  001556                     l3686:
  2408  001556  FFFF               	dw	65535	; assembler added errata NOP
  2409                           
  2410                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  2411  001558  0E34               	movlw	low _errString_Point
  2412  00155A  6E12               	movwf	uartTx@ptr^0,c
  2413  00155C  0E01               	movlw	high _errString_Point
  2414  00155E  6E13               	movwf	(uartTx@ptr+1)^0,c
  2415  001560  0E28               	movlw	40
  2416  001562  6E14               	movwf	uartTx@length^0,c
  2417  001564  ECCE  F00F         	call	_uartTx	;wreg free
  2418                           
  2419                           ;usart.c: 67:             break;
  2420  001568  EF11  F00B         	goto	l498
  2421  00156C                     l3688:
  2422  00156C  FFFF               	dw	65535	; assembler added errata NOP
  2423                           
  2424                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2425  00156E  0E80               	movlw	low _errString_Bound
  2426  001570  6E12               	movwf	uartTx@ptr^0,c
  2427  001572  0E00               	movlw	high _errString_Bound
  2428  001574  6E13               	movwf	(uartTx@ptr+1)^0,c
  2429  001576  0E20               	movlw	32
  2430  001578  6E14               	movwf	uartTx@length^0,c
  2431  00157A  ECCE  F00F         	call	_uartTx	;wreg free
  2432                           
  2433                           ;usart.c: 70:             break;
  2434  00157E  EF11  F00B         	goto	l498
  2435  001582                     l3690:
  2436  001582  FFFF               	dw	65535	; assembler added errata NOP
  2437                           
  2438                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2439  001584  0E00               	movlw	low _errString_PointZ
  2440  001586  6E12               	movwf	uartTx@ptr^0,c
  2441  001588  0E01               	movlw	high _errString_PointZ
  2442  00158A  6E13               	movwf	(uartTx@ptr+1)^0,c
  2443  00158C  0E34               	movlw	52
  2444  00158E  6E14               	movwf	uartTx@length^0,c
  2445  001590  ECCE  F00F         	call	_uartTx	;wreg free
  2446                           
  2447                           ;usart.c: 73:             break;
  2448  001594  EF11  F00B         	goto	l498
  2449  001598                     l3692:
  2450  001598  FFFF               	dw	65535	; assembler added errata NOP
  2451                           
  2452                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2453  00159A  0EAB               	movlw	low _errString_Fatal
  2454  00159C  6E12               	movwf	uartTx@ptr^0,c
  2455  00159E  0E01               	movlw	high _errString_Fatal
  2456  0015A0  6E13               	movwf	(uartTx@ptr+1)^0,c
  2457  0015A2  0E26               	movlw	38
  2458  0015A4  6E14               	movwf	uartTx@length^0,c
  2459  0015A6  ECCE  F00F         	call	_uartTx	;wreg free
  2460                           
  2461                           ;usart.c: 76:             break;
  2462  0015AA  EF11  F00B         	goto	l498
  2463  0015AE                     l3694:
  2464  0015AE  FFFF               	dw	65535	; assembler added errata NOP
  2465                           
  2466                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2467  0015B0  0EBD               	movlw	low _errString_Command
  2468  0015B2  6E12               	movwf	uartTx@ptr^0,c
  2469  0015B4  0E00               	movlw	high _errString_Command
  2470  0015B6  6E13               	movwf	(uartTx@ptr+1)^0,c
  2471  0015B8  0E17               	movlw	23
  2472  0015BA  6E14               	movwf	uartTx@length^0,c
  2473  0015BC  ECCE  F00F         	call	_uartTx	;wreg free
  2474                           
  2475                           ;usart.c: 79:             break;
  2476  0015C0  EF11  F00B         	goto	l498
  2477  0015C4                     l3698:
  2478  0015C4  FFFF               	dw	65535	; assembler added errata NOP
  2479  0015C6  5018               	movf	printError@errCode^0,w,c
  2480  0015C8  6E16               	movwf	??_printError^0,c
  2481  0015CA  6A17               	clrf	(??_printError+1)^0,c
  2482                           
  2483                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2484                           ; Switch size 1, requested type "simple"
  2485                           ; Number of cases is 1, Range of values is 0 to 0
  2486                           ; switch strategies available:
  2487                           ; Name         Instructions Cycles
  2488                           ; simple_byte            4     3 (average)
  2489                           ;	Chosen strategy is simple_byte
  2490  0015CC  5017               	movf	(??_printError+1)^0,w,c
  2491  0015CE  0A00               	xorlw	0	; case 0
  2492  0015D0  B4D8               	btfsc	status,2,c
  2493  0015D2  EFED  F00A         	goto	l4008
  2494  0015D6  EF11  F00B         	goto	l498
  2495  0015DA                     l4008:
  2496  0015DA  FFFF               	dw	65535	; assembler added errata NOP
  2497                           
  2498                           ; Switch size 1, requested type "simple"
  2499                           ; Number of cases is 8, Range of values is 1 to 8
  2500                           ; switch strategies available:
  2501                           ; Name         Instructions Cycles
  2502                           ; simple_byte           25    13 (average)
  2503                           ;	Chosen strategy is simple_byte
  2504  0015DC  5016               	movf	??_printError^0,w,c
  2505  0015DE  0A01               	xorlw	1	; case 1
  2506  0015E0  B4D8               	btfsc	status,2,c
  2507  0015E2  EF8A  F00A         	goto	l3680
  2508  0015E6  0A03               	xorlw	3	; case 2
  2509  0015E8  B4D8               	btfsc	status,2,c
  2510  0015EA  EF95  F00A         	goto	l3682
  2511  0015EE  0A01               	xorlw	1	; case 3
  2512  0015F0  B4D8               	btfsc	status,2,c
  2513  0015F2  EFA0  F00A         	goto	l3684
  2514  0015F6  0A07               	xorlw	7	; case 4
  2515  0015F8  B4D8               	btfsc	status,2,c
  2516  0015FA  EFAB  F00A         	goto	l3686
  2517  0015FE  0A01               	xorlw	1	; case 5
  2518  001600  B4D8               	btfsc	status,2,c
  2519  001602  EFB6  F00A         	goto	l3688
  2520  001606  0A03               	xorlw	3	; case 6
  2521  001608  B4D8               	btfsc	status,2,c
  2522  00160A  EFC1  F00A         	goto	l3690
  2523  00160E  0A01               	xorlw	1	; case 7
  2524  001610  B4D8               	btfsc	status,2,c
  2525  001612  EFCC  F00A         	goto	l3692
  2526  001616  0A0F               	xorlw	15	; case 8
  2527  001618  B4D8               	btfsc	status,2,c
  2528  00161A  EFD7  F00A         	goto	l3694
  2529  00161E  EF11  F00B         	goto	l498
  2530  001622                     l498:
  2531  001622  FFFF               	dw	65535	; assembler added errata NOP
  2532  001624  0012               	return		;funcret
  2533  001626  FFFF               	dw	65535	; errata NOP
  2534  001628                     __end_of_printError:
  2535                           	callstack 0
  2536                           
  2537 ;; *************** function _uartTx *****************
  2538 ;; Defined at:
  2539 ;;		line 215 in file "usart.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2542 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  2543 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  2544 ;;  length          1   19[COMRAM] unsigned char 
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;  i               1   20[COMRAM] unsigned char 
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  1    wreg      void 
  2549 ;; Registers used:
  2550 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2551 ;; Tracked objects:
  2552 ;;		On entry : 0/0
  2553 ;;		On exit  : 0/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2556 ;;      Params:         3       0       0       0       0       0       0
  2557 ;;      Locals:         1       0       0       0       0       0       0
  2558 ;;      Temps:          0       0       0       0       0       0       0
  2559 ;;      Totals:         4       0       0       0       0       0       0
  2560 ;;Total ram usage:        4 bytes
  2561 ;; Hardware stack levels used:    1
  2562 ;; Hardware stack levels required when called:    4
  2563 ;; This function calls:
  2564 ;;		Nothing
  2565 ;; This function is called by:
  2566 ;;		_printError
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           	psect	text12
  2571  001F9C                     __ptext12:
  2572                           	callstack 0
  2573  001F9C                     _uartTx:
  2574                           	callstack 0
  2575  001F9C  FFFF               	dw	65535	; assembler added errata NOP
  2576  001F9E                     
  2577                           ;usart.c: 215: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 216: {;usa
      +                          rt.c: 218:     for(char i = 1; i < length; i++){
  2578  001F9E  0E01               	movlw	1
  2579  001FA0  6E15               	movwf	uartTx@i^0,c
  2580  001FA2  EFE7  F00F         	goto	l3568
  2581  001FA6                     l3564:
  2582  001FA6  FFFF               	dw	65535	; assembler added errata NOP
  2583                           
  2584                           ;usart.c: 220:         TXREG = *ptr;
  2585  001FA8  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2586  001FAC  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2587  001FB0  50DF               	movf	indf2,w,c
  2588  001FB2  6EAD               	movwf	173,c	;volatile
  2589  001FB4                     l550:
  2590  001FB4  FFFF               	dw	65535	; assembler added errata NOP
  2591  001FB6  A2AC               	btfss	172,1,c	;volatile
  2592  001FB8  EFE0  F00F         	goto	u3001
  2593  001FBC  EFE3  F00F         	goto	u3000
  2594  001FC0                     u3001:
  2595  001FC0  FFFF               	dw	65535	; assembler added errata NOP
  2596  001FC2  EFDA  F00F         	goto	l550
  2597  001FC6                     u3000:
  2598  001FC6  FFFF               	dw	65535	; assembler added errata NOP
  2599  001FC8                     
  2600                           ;usart.c: 224:         ptr++;
  2601  001FC8  4A12               	infsnz	uartTx@ptr^0,f,c
  2602  001FCA  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2603                           
  2604                           ;usart.c: 225:     }
  2605  001FCC  2A15               	incf	uartTx@i^0,f,c
  2606  001FCE                     l3568:
  2607  001FCE  FFFF               	dw	65535	; assembler added errata NOP
  2608  001FD0  5014               	movf	uartTx@length^0,w,c
  2609  001FD2  5C15               	subwf	uartTx@i^0,w,c
  2610  001FD4  A0D8               	btfss	status,0,c
  2611  001FD6  EFEF  F00F         	goto	u3011
  2612  001FDA  EFF2  F00F         	goto	u3010
  2613  001FDE                     u3011:
  2614  001FDE  FFFF               	dw	65535	; assembler added errata NOP
  2615  001FE0  EFD3  F00F         	goto	l3564
  2616  001FE4                     u3010:
  2617  001FE4  FFFF               	dw	65535	; assembler added errata NOP
  2618  001FE6  0012               	return		;funcret
  2619  001FE8  FFFF               	dw	65535	; errata NOP
  2620  001FEA                     __end_of_uartTx:
  2621                           	callstack 0
  2622                           
  2623 ;; *************** function _newSequence *****************
  2624 ;; Defined at:
  2625 ;;		line 104 in file "usart.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;		None
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;		None
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  1    wreg      unsigned char 
  2632 ;; Registers used:
  2633 ;;		wreg, status,2
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2639 ;;      Params:         0       0       0       0       0       0       0
  2640 ;;      Locals:         0       0       0       0       0       0       0
  2641 ;;      Temps:          0       0       0       0       0       0       0
  2642 ;;      Totals:         0       0       0       0       0       0       0
  2643 ;;Total ram usage:        0 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; Hardware stack levels required when called:    4
  2646 ;; This function calls:
  2647 ;;		Nothing
  2648 ;; This function is called by:
  2649 ;;		_main
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           	psect	text13
  2654  0021C8                     __ptext13:
  2655                           	callstack 0
  2656  0021C8                     _newSequence:
  2657                           	callstack 0
  2658  0021C8  FFFF               	dw	65535	; assembler added errata NOP
  2659  0021CA                     
  2660                           ;usart.c: 105:     return _newSequence;
  2661  0021CA  505B               	movf	__newSequence^0,w,c
  2662  0021CC  0012               	return		;funcret
  2663  0021CE  FFFF               	dw	65535	; errata NOP
  2664  0021D0                     __end_of_newSequence:
  2665                           	callstack 0
  2666                           
  2667 ;; *************** function _interruptInit *****************
  2668 ;; Defined at:
  2669 ;;		line 75 in file "main.c"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;		None
  2672 ;; Auto vars:     Size  Location     Type
  2673 ;;		None
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  1    wreg      void 
  2676 ;; Registers used:
  2677 ;;		None
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2683 ;;      Params:         0       0       0       0       0       0       0
  2684 ;;      Locals:         0       0       0       0       0       0       0
  2685 ;;      Temps:          0       0       0       0       0       0       0
  2686 ;;      Totals:         0       0       0       0       0       0       0
  2687 ;;Total ram usage:        0 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    4
  2690 ;; This function calls:
  2691 ;;		Nothing
  2692 ;; This function is called by:
  2693 ;;		_main
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text14
  2698  002038                     __ptext14:
  2699                           	callstack 0
  2700  002038                     _interruptInit:
  2701                           	callstack 0
  2702  002038  FFFF               	dw	65535	; assembler added errata NOP
  2703  00203A                     
  2704                           ;main.c: 77:     if(!INTCONbits.GIE){
  2705  00203A  BEF2               	btfsc	242,7,c	;volatile
  2706  00203C  EF22  F010         	goto	u3141
  2707  002040  EF25  F010         	goto	u3140
  2708  002044                     u3141:
  2709  002044  FFFF               	dw	65535	; assembler added errata NOP
  2710  002046  EF27  F010         	goto	l301
  2711  00204A                     u3140:
  2712  00204A  FFFF               	dw	65535	; assembler added errata NOP
  2713  00204C                     
  2714                           ;main.c: 78:         INTCONbits.GIE = 1;
  2715  00204C  8EF2               	bsf	242,7,c	;volatile
  2716  00204E                     l301:
  2717  00204E  FFFF               	dw	65535	; assembler added errata NOP
  2718                           
  2719                           ;main.c: 80:     if(!INTCONbits.PEIE){
  2720  002050  BCF2               	btfsc	242,6,c	;volatile
  2721  002052  EF2D  F010         	goto	u3151
  2722  002056  EF30  F010         	goto	u3150
  2723  00205A                     u3151:
  2724  00205A  FFFF               	dw	65535	; assembler added errata NOP
  2725  00205C  EF32  F010         	goto	l302
  2726  002060                     u3150:
  2727  002060  FFFF               	dw	65535	; assembler added errata NOP
  2728  002062                     
  2729                           ;main.c: 81:         INTCONbits.PEIE = 1;
  2730  002062  8CF2               	bsf	242,6,c	;volatile
  2731  002064                     l302:
  2732  002064  FFFF               	dw	65535	; assembler added errata NOP
  2733                           
  2734                           ;main.c: 85:     RCONbits.IPEN = 1;
  2735  002066  8ED0               	bsf	208,7,c	;volatile
  2736                           
  2737                           ;main.c: 86:     INTCONbits.T0IE = 1;
  2738  002068  8AF2               	bsf	242,5,c	;volatile
  2739                           
  2740                           ;main.c: 87:     PIE1bits.TMR2IE = 1;
  2741  00206A  829D               	bsf	157,1,c	;volatile
  2742                           
  2743                           ;main.c: 88:     PIE1bits.RC1IE = 1;
  2744  00206C  8A9D               	bsf	157,5,c	;volatile
  2745  00206E  0012               	return		;funcret
  2746  002070  FFFF               	dw	65535	; errata NOP
  2747  002072                     __end_of_interruptInit:
  2748                           	callstack 0
  2749                           
  2750 ;; *************** function _initPinMotors *****************
  2751 ;; Defined at:
  2752 ;;		line 44 in file "motors.c"
  2753 ;; Parameters:    Size  Location     Type
  2754 ;;		None
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;		None
  2757 ;; Return value:  Size  Location     Type
  2758 ;;                  1    wreg      void 
  2759 ;; Registers used:
  2760 ;;		wreg, status,2, status,0
  2761 ;; Tracked objects:
  2762 ;;		On entry : 0/0
  2763 ;;		On exit  : 0/0
  2764 ;;		Unchanged: 0/0
  2765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2766 ;;      Params:         0       0       0       0       0       0       0
  2767 ;;      Locals:         0       0       0       0       0       0       0
  2768 ;;      Temps:          0       0       0       0       0       0       0
  2769 ;;      Totals:         0       0       0       0       0       0       0
  2770 ;;Total ram usage:        0 bytes
  2771 ;; Hardware stack levels used:    1
  2772 ;; Hardware stack levels required when called:    4
  2773 ;; This function calls:
  2774 ;;		Nothing
  2775 ;; This function is called by:
  2776 ;;		_main
  2777 ;; This function uses a non-reentrant model
  2778 ;;
  2779                           
  2780                           	psect	text15
  2781  002072                     __ptext15:
  2782                           	callstack 0
  2783  002072                     _initPinMotors:
  2784                           	callstack 0
  2785  002072  FFFF               	dw	65535	; assembler added errata NOP
  2786  002074                     
  2787                           ;motors.c: 46:     ADCON1bits.PCFG = 0x06;
  2788  002074  50C1               	movf	193,w,c	;volatile
  2789  002076  0BF0               	andlw	-16
  2790  002078  0906               	iorlw	6
  2791  00207A  6EC1               	movwf	193,c	;volatile
  2792  00207C                     
  2793                           ;motors.c: 47:     TRISA &= 0b11010001;
  2794  00207C  0ED1               	movlw	209
  2795  00207E  1692               	andwf	146,f,c	;volatile
  2796  002080                     
  2797                           ;motors.c: 49:     TRISB &= 0b00000010;
  2798  002080  0E02               	movlw	2
  2799  002082  1693               	andwf	147,f,c	;volatile
  2800  002084                     
  2801                           ;motors.c: 50:     TRISC &= 0b11000000;
  2802  002084  0EC0               	movlw	192
  2803  002086  1694               	andwf	148,f,c	;volatile
  2804  002088                     
  2805                           ;motors.c: 51:     TRISD &= 0b11000000;
  2806  002088  0EC0               	movlw	192
  2807  00208A  1695               	andwf	149,f,c	;volatile
  2808  00208C                     
  2809                           ;motors.c: 54:     TRISEbits.TRISE0 = 1;
  2810  00208C  8096               	bsf	150,0,c	;volatile
  2811  00208E                     
  2812                           ;motors.c: 55:     TRISEbits.TRISE1 = 1;
  2813  00208E  8296               	bsf	150,1,c	;volatile
  2814  002090                     
  2815                           ;motors.c: 56:     TRISEbits.TRISE2 = 1;
  2816  002090  8496               	bsf	150,2,c	;volatile
  2817  002092                     
  2818                           ;motors.c: 59:     TRISDbits.TRISD7 = 1;
  2819  002092  8E95               	bsf	149,7,c	;volatile
  2820  002094  0012               	return		;funcret
  2821  002096  FFFF               	dw	65535	; errata NOP
  2822  002098                     __end_of_initPinMotors:
  2823                           	callstack 0
  2824                           
  2825 ;; *************** function _initADC *****************
  2826 ;; Defined at:
  2827 ;;		line 18 in file "adc.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;		None
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;		None
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      void 
  2834 ;; Registers used:
  2835 ;;		wreg, status,2
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2841 ;;      Params:         0       0       0       0       0       0       0
  2842 ;;      Locals:         0       0       0       0       0       0       0
  2843 ;;      Temps:          0       0       0       0       0       0       0
  2844 ;;      Totals:         0       0       0       0       0       0       0
  2845 ;;Total ram usage:        0 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    4
  2848 ;; This function calls:
  2849 ;;		Nothing
  2850 ;; This function is called by:
  2851 ;;		_main
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           	psect	text16
  2856  002098                     __ptext16:
  2857                           	callstack 0
  2858  002098                     _initADC:
  2859                           	callstack 0
  2860  002098  FFFF               	dw	65535	; assembler added errata NOP
  2861  00209A                     
  2862                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  2863  00209A  50C2               	movf	194,w,c	;volatile
  2864  00209C  0B3F               	andlw	-193
  2865  00209E  0940               	iorlw	64
  2866  0020A0  6EC2               	movwf	194,c	;volatile
  2867  0020A2                     
  2868                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  2869  0020A2  8CC1               	bsf	193,6,c	;volatile
  2870                           
  2871                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  2872  0020A4  0EC7               	movlw	-57
  2873  0020A6  16C2               	andwf	194,f,c	;volatile
  2874  0020A8                     
  2875                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  2876  0020A8  94C2               	bcf	194,2,c	;volatile
  2877  0020AA                     
  2878                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  2879  0020AA  90C2               	bcf	194,0,c	;volatile
  2880  0020AC                     
  2881                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  2882  0020AC  9EC1               	bcf	193,7,c	;volatile
  2883                           
  2884                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  2885  0020AE  50C1               	movf	193,w,c	;volatile
  2886  0020B0  0BF0               	andlw	-16
  2887  0020B2  090E               	iorlw	14
  2888  0020B4  6EC1               	movwf	193,c	;volatile
  2889  0020B6                     
  2890                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  2891  0020B6  8C9D               	bsf	157,6,c	;volatile
  2892  0020B8                     
  2893                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  2894  0020B8  8C9F               	bsf	159,6,c	;volatile
  2895  0020BA  0012               	return		;funcret
  2896  0020BC  FFFF               	dw	65535	; errata NOP
  2897  0020BE                     __end_of_initADC:
  2898                           	callstack 0
  2899                           
  2900 ;; *************** function _fatalError *****************
  2901 ;; Defined at:
  2902 ;;		line 100 in file "usart.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;		None
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;		None
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      unsigned char 
  2909 ;; Registers used:
  2910 ;;		wreg, status,2
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2916 ;;      Params:         0       0       0       0       0       0       0
  2917 ;;      Locals:         0       0       0       0       0       0       0
  2918 ;;      Temps:          0       0       0       0       0       0       0
  2919 ;;      Totals:         0       0       0       0       0       0       0
  2920 ;;Total ram usage:        0 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; Hardware stack levels required when called:    4
  2923 ;; This function calls:
  2924 ;;		Nothing
  2925 ;; This function is called by:
  2926 ;;		_main
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           	psect	text17
  2931  0021D0                     __ptext17:
  2932                           	callstack 0
  2933  0021D0                     _fatalError:
  2934                           	callstack 0
  2935  0021D0  FFFF               	dw	65535	; assembler added errata NOP
  2936  0021D2                     
  2937                           ;usart.c: 101:     return _fatalError;
  2938  0021D2  505C               	movf	__fatalError^0,w,c
  2939  0021D4  0012               	return		;funcret
  2940  0021D6  FFFF               	dw	65535	; errata NOP
  2941  0021D8                     __end_of_fatalError:
  2942                           	callstack 0
  2943                           
  2944 ;; *************** function _executeData *****************
  2945 ;; Defined at:
  2946 ;;		line 98 in file "main.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;		None
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  data            2   10[BANK0 ] PTR struct .
  2951 ;;		 -> dataSequence(20), 
  2952 ;;  errCode         1    9[BANK0 ] unsigned char 
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      unsigned char 
  2955 ;; Registers used:
  2956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2962 ;;      Params:         0       0       0       0       0       0       0
  2963 ;;      Locals:         0       3       0       0       0       0       0
  2964 ;;      Temps:          0       2       0       0       0       0       0
  2965 ;;      Totals:         0       5       0       0       0       0       0
  2966 ;;Total ram usage:        5 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    6
  2969 ;; This function calls:
  2970 ;;		_getData
  2971 ;;		_liftArm
  2972 ;;		_moveToPoint
  2973 ;;		_pickObject
  2974 ;;		_releaseObj
  2975 ;;		_rotateObj
  2976 ;;		_touchObject
  2977 ;;		_touchTherm
  2978 ;; This function is called by:
  2979 ;;		_main
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           	psect	text18
  2984  000A42                     __ptext18:
  2985                           	callstack 0
  2986  000A42                     _executeData:
  2987                           	callstack 0
  2988  000A42  FFFF               	dw	65535	; assembler added errata NOP
  2989  000A44                     
  2990                           ;main.c: 99:     t_sequence *data = getData();
  2991  000A44  EC8B  F010         	call	_getData	;wreg free
  2992  000A48  C012  F0FA         	movff	?_getData,executeData@data
  2993  000A4C  C013  F0FB         	movff	?_getData+1,executeData@data+1
  2994  000A50                     
  2995                           ;main.c: 101:     char errCode = 0;
  2996  000A50  0E00               	movlw	0
  2997  000A52  0100               	movlb	0	; () banked
  2998  000A54  6FF9               	movwf	executeData@errCode& (0+255),b
  2999                           
  3000                           ;main.c: 105:     switch(data->feederLine){
  3001  000A56  EFBF  F005         	goto	l3738
  3002  000A5A                     l3716:
  3003  000A5A  FFFF               	dw	65535	; assembler added errata NOP
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;main.c: 108:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3007  000A5C  C04C  F016         	movff	_posVector,moveToPoint@x1
  3008  000A60  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3009  000A62  C04D  F018         	movff	_posVector+1,moveToPoint@y1
  3010  000A66  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3011  000A68  0E0D               	movlw	low _feeder1Pos
  3012  000A6A  6EF6               	movwf	tblptrl,c
  3013  000A6C                     	if	1	;There is more than 1 active tblptr byte
  3014  000A6C  0E06               	movlw	high _feeder1Pos
  3015  000A6E  6EF7               	movwf	tblptrh,c
  3016  000A70                     	endif
  3017  000A70                     	if	0	;There are less than 3 active tblptr bytes
  3018  000A70                     	endif
  3019  000A70  0008               	tblrd		*
  3020  000A72  FFFF               	dw	65535	; errata NOP
  3021  000A74  50F5               	movf	tablat,w,c
  3022  000A76  6E1A               	movwf	moveToPoint@x2^0,c
  3023  000A78  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3024  000A7A  0E0E               	movlw	low (_feeder1Pos+1)
  3025  000A7C  6EF6               	movwf	tblptrl,c
  3026  000A7E  0E06               	movlw	high (_feeder1Pos+1)
  3027  000A80  6EF7               	movwf	tblptrh,c
  3028  000A82                     	if	0	;tblptru may be non-zero
  3029  000A82                     	endif
  3030  000A82                     	if	0	;tblptru may be non-zero
  3031  000A82                     	endif
  3032  000A82  0008               	tblrd		*
  3033  000A84  FFFF               	dw	65535	; errata NOP
  3034  000A86  50F5               	movf	tablat,w,c
  3035  000A88  6E1C               	movwf	moveToPoint@y2^0,c
  3036  000A8A  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3037  000A8C  EC45  F008         	call	_moveToPoint	;wreg free
  3038  000A90  0100               	movlb	0	; () banked
  3039  000A92  6FF9               	movwf	executeData@errCode& (0+255),b
  3040  000A94                     
  3041                           ; BSR set to: 0
  3042                           ;main.c: 110:             posVector[0] = feeder1Pos[0];
  3043  000A94  0E0D               	movlw	low _feeder1Pos
  3044  000A96  6EF6               	movwf	tblptrl,c
  3045  000A98                     	if	1	;There is more than 1 active tblptr byte
  3046  000A98  0E06               	movlw	high _feeder1Pos
  3047  000A9A  6EF7               	movwf	tblptrh,c
  3048  000A9C                     	endif
  3049  000A9C                     	if	0	;There are less than 3 active tblptr bytes
  3050  000A9C                     	endif
  3051  000A9C  0008               	tblrd		*
  3052  000A9E  FFFF               	dw	65535	; errata NOP
  3053  000AA0  CFF5 F04C          	movff	tablat,_posVector
  3054  000AA4                     
  3055                           ; BSR set to: 0
  3056                           ;main.c: 111:             posVector[1] = feeder1Pos[1];
  3057  000AA4  0E0E               	movlw	low (_feeder1Pos+1)
  3058  000AA6  6EF6               	movwf	tblptrl,c
  3059  000AA8  0E06               	movlw	high (_feeder1Pos+1)
  3060  000AAA  6EF7               	movwf	tblptrh,c
  3061  000AAC                     	if	0	;tblptru may be non-zero
  3062  000AAC                     	endif
  3063  000AAC                     	if	0	;tblptru may be non-zero
  3064  000AAC                     	endif
  3065  000AAC  0008               	tblrd		*
  3066  000AAE  FFFF               	dw	65535	; errata NOP
  3067  000AB0  CFF5 F04D          	movff	tablat,_posVector+1
  3068                           
  3069                           ;main.c: 112:             break;
  3070  000AB4  EFE2  F005         	goto	l3740
  3071  000AB8                     l3722:
  3072  000AB8  FFFF               	dw	65535	; assembler added errata NOP
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;main.c: 114:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3076  000ABA  C04C  F016         	movff	_posVector,moveToPoint@x1
  3077  000ABE  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3078  000AC0  C04D  F018         	movff	_posVector+1,moveToPoint@y1
  3079  000AC4  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3080  000AC6  0E0B               	movlw	low _feeder2Pos
  3081  000AC8  6EF6               	movwf	tblptrl,c
  3082  000ACA                     	if	1	;There is more than 1 active tblptr byte
  3083  000ACA  0E06               	movlw	high _feeder2Pos
  3084  000ACC  6EF7               	movwf	tblptrh,c
  3085  000ACE                     	endif
  3086  000ACE                     	if	0	;There are less than 3 active tblptr bytes
  3087  000ACE                     	endif
  3088  000ACE  0008               	tblrd		*
  3089  000AD0  FFFF               	dw	65535	; errata NOP
  3090  000AD2  50F5               	movf	tablat,w,c
  3091  000AD4  6E1A               	movwf	moveToPoint@x2^0,c
  3092  000AD6  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3093  000AD8  0E0C               	movlw	low (_feeder2Pos+1)
  3094  000ADA  6EF6               	movwf	tblptrl,c
  3095  000ADC  0E06               	movlw	high (_feeder2Pos+1)
  3096  000ADE  6EF7               	movwf	tblptrh,c
  3097  000AE0                     	if	0	;tblptru may be non-zero
  3098  000AE0                     	endif
  3099  000AE0                     	if	0	;tblptru may be non-zero
  3100  000AE0                     	endif
  3101  000AE0  0008               	tblrd		*
  3102  000AE2  FFFF               	dw	65535	; errata NOP
  3103  000AE4  50F5               	movf	tablat,w,c
  3104  000AE6  6E1C               	movwf	moveToPoint@y2^0,c
  3105  000AE8  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3106  000AEA  EC45  F008         	call	_moveToPoint	;wreg free
  3107  000AEE  0100               	movlb	0	; () banked
  3108  000AF0  6FF9               	movwf	executeData@errCode& (0+255),b
  3109  000AF2                     
  3110                           ; BSR set to: 0
  3111                           ;main.c: 115:             posVector[0] = feeder2Pos[0];
  3112  000AF2  0E0B               	movlw	low _feeder2Pos
  3113  000AF4  6EF6               	movwf	tblptrl,c
  3114  000AF6                     	if	1	;There is more than 1 active tblptr byte
  3115  000AF6  0E06               	movlw	high _feeder2Pos
  3116  000AF8  6EF7               	movwf	tblptrh,c
  3117  000AFA                     	endif
  3118  000AFA                     	if	0	;There are less than 3 active tblptr bytes
  3119  000AFA                     	endif
  3120  000AFA  0008               	tblrd		*
  3121  000AFC  FFFF               	dw	65535	; errata NOP
  3122  000AFE  CFF5 F04C          	movff	tablat,_posVector
  3123  000B02                     
  3124                           ; BSR set to: 0
  3125                           ;main.c: 116:             posVector[1] = feeder2Pos[1];
  3126  000B02  0E0C               	movlw	low (_feeder2Pos+1)
  3127  000B04  6EF6               	movwf	tblptrl,c
  3128  000B06  0E06               	movlw	high (_feeder2Pos+1)
  3129  000B08  6EF7               	movwf	tblptrh,c
  3130  000B0A                     	if	0	;tblptru may be non-zero
  3131  000B0A                     	endif
  3132  000B0A                     	if	0	;tblptru may be non-zero
  3133  000B0A                     	endif
  3134  000B0A  0008               	tblrd		*
  3135  000B0C  FFFF               	dw	65535	; errata NOP
  3136  000B0E  CFF5 F04D          	movff	tablat,_posVector+1
  3137                           
  3138                           ;main.c: 117:             break;
  3139  000B12  EFE2  F005         	goto	l3740
  3140  000B16                     l3728:
  3141  000B16  FFFF               	dw	65535	; assembler added errata NOP
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;main.c: 119:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3145  000B18  C04C  F016         	movff	_posVector,moveToPoint@x1
  3146  000B1C  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3147  000B1E  C04D  F018         	movff	_posVector+1,moveToPoint@y1
  3148  000B22  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3149  000B24  0E09               	movlw	low _feeder3Pos
  3150  000B26  6EF6               	movwf	tblptrl,c
  3151  000B28                     	if	1	;There is more than 1 active tblptr byte
  3152  000B28  0E06               	movlw	high _feeder3Pos
  3153  000B2A  6EF7               	movwf	tblptrh,c
  3154  000B2C                     	endif
  3155  000B2C                     	if	0	;There are less than 3 active tblptr bytes
  3156  000B2C                     	endif
  3157  000B2C  0008               	tblrd		*
  3158  000B2E  FFFF               	dw	65535	; errata NOP
  3159  000B30  50F5               	movf	tablat,w,c
  3160  000B32  6E1A               	movwf	moveToPoint@x2^0,c
  3161  000B34  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3162  000B36  0E0A               	movlw	low (_feeder3Pos+1)
  3163  000B38  6EF6               	movwf	tblptrl,c
  3164  000B3A  0E06               	movlw	high (_feeder3Pos+1)
  3165  000B3C  6EF7               	movwf	tblptrh,c
  3166  000B3E                     	if	0	;tblptru may be non-zero
  3167  000B3E                     	endif
  3168  000B3E                     	if	0	;tblptru may be non-zero
  3169  000B3E                     	endif
  3170  000B3E  0008               	tblrd		*
  3171  000B40  FFFF               	dw	65535	; errata NOP
  3172  000B42  50F5               	movf	tablat,w,c
  3173  000B44  6E1C               	movwf	moveToPoint@y2^0,c
  3174  000B46  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3175  000B48  EC45  F008         	call	_moveToPoint	;wreg free
  3176  000B4C  0100               	movlb	0	; () banked
  3177  000B4E  6FF9               	movwf	executeData@errCode& (0+255),b
  3178  000B50                     
  3179                           ; BSR set to: 0
  3180                           ;main.c: 120:             posVector[0] = feeder3Pos[0];
  3181  000B50  0E09               	movlw	low _feeder3Pos
  3182  000B52  6EF6               	movwf	tblptrl,c
  3183  000B54                     	if	1	;There is more than 1 active tblptr byte
  3184  000B54  0E06               	movlw	high _feeder3Pos
  3185  000B56  6EF7               	movwf	tblptrh,c
  3186  000B58                     	endif
  3187  000B58                     	if	0	;There are less than 3 active tblptr bytes
  3188  000B58                     	endif
  3189  000B58  0008               	tblrd		*
  3190  000B5A  FFFF               	dw	65535	; errata NOP
  3191  000B5C  CFF5 F04C          	movff	tablat,_posVector
  3192  000B60                     
  3193                           ; BSR set to: 0
  3194                           ;main.c: 121:             posVector[1] = feeder3Pos[1];
  3195  000B60  0E0A               	movlw	low (_feeder3Pos+1)
  3196  000B62  6EF6               	movwf	tblptrl,c
  3197  000B64  0E06               	movlw	high (_feeder3Pos+1)
  3198  000B66  6EF7               	movwf	tblptrh,c
  3199  000B68                     	if	0	;tblptru may be non-zero
  3200  000B68                     	endif
  3201  000B68                     	if	0	;tblptru may be non-zero
  3202  000B68                     	endif
  3203  000B68  0008               	tblrd		*
  3204  000B6A  FFFF               	dw	65535	; errata NOP
  3205  000B6C  CFF5 F04D          	movff	tablat,_posVector+1
  3206                           
  3207                           ;main.c: 122:             break;
  3208  000B70  EFE2  F005         	goto	l3740
  3209  000B74                     l3734:
  3210  000B74  FFFF               	dw	65535	; assembler added errata NOP
  3211                           
  3212                           ; BSR set to: 0
  3213                           ;main.c: 131:             errCode = 1;
  3214  000B76  0E01               	movlw	1
  3215  000B78  6FF9               	movwf	executeData@errCode& (0+255),b
  3216                           
  3217                           ;main.c: 132:             break;
  3218  000B7A  EFE2  F005         	goto	l3740
  3219  000B7E                     l3738:
  3220  000B7E  FFFF               	dw	65535	; assembler added errata NOP
  3221                           
  3222                           ; BSR set to: 0
  3223  000B80  C0FA  FFD9         	movff	executeData@data,fsr2l
  3224  000B84  C0FB  FFDA         	movff	executeData@data+1,fsr2h
  3225  000B88  50DF               	movf	indf2,w,c
  3226  000B8A  6FF7               	movwf	??_executeData& (0+255),b
  3227  000B8C  6BF8               	clrf	(??_executeData+1)& (0+255),b
  3228                           
  3229                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3230                           ; Switch size 1, requested type "simple"
  3231                           ; Number of cases is 1, Range of values is 0 to 0
  3232                           ; switch strategies available:
  3233                           ; Name         Instructions Cycles
  3234                           ; simple_byte            4     3 (average)
  3235                           ;	Chosen strategy is simple_byte
  3236  000B8E  51F8               	movf	(??_executeData+1)& (0+255),w,b
  3237  000B90  0A00               	xorlw	0	; case 0
  3238  000B92  B4D8               	btfsc	status,2,c
  3239  000B94  EFCE  F005         	goto	l4010
  3240  000B98  EFBA  F005         	goto	l3734
  3241  000B9C                     l4010:
  3242  000B9C  FFFF               	dw	65535	; assembler added errata NOP
  3243                           
  3244                           ; BSR set to: 0
  3245                           ; Switch size 1, requested type "simple"
  3246                           ; Number of cases is 4, Range of values is 48 to 255
  3247                           ; switch strategies available:
  3248                           ; Name         Instructions Cycles
  3249                           ; simple_byte           13     7 (average)
  3250                           ;	Chosen strategy is simple_byte
  3251  000B9E  51F7               	movf	??_executeData& (0+255),w,b
  3252  000BA0  0A30               	xorlw	48	; case 48
  3253  000BA2  B4D8               	btfsc	status,2,c
  3254  000BA4  EF2D  F005         	goto	l3716
  3255  000BA8  0A01               	xorlw	1	; case 49
  3256  000BAA  B4D8               	btfsc	status,2,c
  3257  000BAC  EF5C  F005         	goto	l3722
  3258  000BB0  0A03               	xorlw	3	; case 50
  3259  000BB2  B4D8               	btfsc	status,2,c
  3260  000BB4  EF8B  F005         	goto	l3728
  3261  000BB8  0ACD               	xorlw	205	; case 255
  3262  000BBA  B4D8               	btfsc	status,2,c
  3263  000BBC  EFE2  F005         	goto	l3740
  3264  000BC0  EFBA  F005         	goto	l3734
  3265  000BC4                     l3740:
  3266  000BC4  FFFF               	dw	65535	; assembler added errata NOP
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;main.c: 136:     if(!errCode){
  3270  000BC6  51F9               	movf	executeData@errCode& (0+255),w,b
  3271  000BC8  A4D8               	btfss	status,2,c
  3272  000BCA  EFE9  F005         	goto	u3161
  3273  000BCE  EFEC  F005         	goto	u3160
  3274  000BD2                     u3161:
  3275  000BD2  FFFF               	dw	65535	; assembler added errata NOP
  3276  000BD4  EF4C  F006         	goto	l3762
  3277  000BD8                     u3160:
  3278  000BD8  FFFF               	dw	65535	; assembler added errata NOP
  3279  000BDA                     
  3280                           ; BSR set to: 0
  3281  000BDA  EC1B  F00C         	call	_touchObject	;wreg free
  3282  000BDE                     
  3283                           ;main.c: 140:         pickObject();
  3284  000BDE  ECF8  F010         	call	_pickObject	;wreg free
  3285  000BE2  EC2B  F00E         	call	_liftArm	;wreg free
  3286  000BE6  C04C  F016         	movff	_posVector,moveToPoint@x1
  3287  000BEA  6A17               	clrf	(moveToPoint@x1+1)^0,c
  3288  000BEC  C04D  F018         	movff	_posVector+1,moveToPoint@y1
  3289  000BF0  6A19               	clrf	(moveToPoint@y1+1)^0,c
  3290  000BF2  0100               	movlb	0	; () banked
  3291  000BF4  EE20 F001          	lfsr	2,1
  3292  000BF8  51FA               	movf	executeData@data& (0+255),w,b
  3293  000BFA  26D9               	addwf	fsr2l,f,c
  3294  000BFC  51FB               	movf	(executeData@data+1)& (0+255),w,b
  3295  000BFE  22DA               	addwfc	fsr2h,f,c
  3296  000C00  50DF               	movf	indf2,w,c
  3297  000C02  6FF7               	movwf	??_executeData& (0+255),b
  3298  000C04  51F7               	movf	??_executeData& (0+255),w,b
  3299  000C06  6E1A               	movwf	moveToPoint@x2^0,c
  3300  000C08  6A1B               	clrf	(moveToPoint@x2+1)^0,c
  3301  000C0A  EE20 F002          	lfsr	2,2
  3302  000C0E  51FA               	movf	executeData@data& (0+255),w,b
  3303  000C10  26D9               	addwf	fsr2l,f,c
  3304  000C12  51FB               	movf	(executeData@data+1)& (0+255),w,b
  3305  000C14  22DA               	addwfc	fsr2h,f,c
  3306  000C16  50DF               	movf	indf2,w,c
  3307  000C18  6FF8               	movwf	(??_executeData+1)& (0+255),b
  3308  000C1A  51F8               	movf	(??_executeData+1)& (0+255),w,b
  3309  000C1C  6E1C               	movwf	moveToPoint@y2^0,c
  3310  000C1E  6A1D               	clrf	(moveToPoint@y2+1)^0,c
  3311  000C20  EC45  F008         	call	_moveToPoint	;wreg free
  3312                           
  3313                           ;main.c: 147:         posVector[0] = data->posX;
  3314  000C24  0100               	movlb	0	; () banked
  3315  000C26  EE20 F001          	lfsr	2,1
  3316  000C2A  51FA               	movf	executeData@data& (0+255),w,b
  3317  000C2C  26D9               	addwf	fsr2l,f,c
  3318  000C2E  51FB               	movf	(executeData@data+1)& (0+255),w,b
  3319  000C30  22DA               	addwfc	fsr2h,f,c
  3320  000C32  50DF               	movf	indf2,w,c
  3321  000C34  6E4C               	movwf	_posVector^0,c
  3322                           
  3323                           ;main.c: 148:         posVector[1] = data->posY;
  3324  000C36  EE20 F002          	lfsr	2,2
  3325  000C3A  51FA               	movf	executeData@data& (0+255),w,b
  3326  000C3C  26D9               	addwf	fsr2l,f,c
  3327  000C3E  51FB               	movf	(executeData@data+1)& (0+255),w,b
  3328  000C40  22DA               	addwfc	fsr2h,f,c
  3329  000C42  50DF               	movf	indf2,w,c
  3330  000C44  6E4D               	movwf	(_posVector+1)^0,c
  3331                           
  3332                           ;main.c: 151:         rotAngle = data->rotation - rotAngle;
  3333  000C46  EE20 F003          	lfsr	2,3
  3334  000C4A  51FA               	movf	executeData@data& (0+255),w,b
  3335  000C4C  26D9               	addwf	fsr2l,f,c
  3336  000C4E  51FB               	movf	(executeData@data+1)& (0+255),w,b
  3337  000C50  22DA               	addwfc	fsr2h,f,c
  3338  000C52  50DF               	movf	indf2,w,c
  3339  000C54  6FF7               	movwf	??_executeData& (0+255),b
  3340  000C56  5055               	movf	_rotAngle^0,w,c
  3341  000C58  5DF7               	subwf	??_executeData& (0+255),w,b
  3342  000C5A  6E55               	movwf	_rotAngle^0,c
  3343  000C5C  5056               	movf	(_rotAngle+1)^0,w,c
  3344  000C5E  A0D8               	btfss	status,0,c
  3345  000C60  2856               	incf	(_rotAngle+1)^0,w,c
  3346  000C62  6A56               	clrf	(_rotAngle+1)^0,c
  3347  000C64  5E56               	subwf	(_rotAngle+1)^0,f,c
  3348  000C66                     
  3349                           ; BSR set to: 0
  3350                           ;main.c: 153:         if(rotAngle < 0){
  3351  000C66  BE56               	btfsc	(_rotAngle+1)^0,7,c
  3352  000C68  EF3B  F006         	goto	u3170
  3353  000C6C  EF38  F006         	goto	u3171
  3354  000C70                     u3171:
  3355  000C70  FFFF               	dw	65535	; assembler added errata NOP
  3356  000C72  EF40  F006         	goto	l3754
  3357  000C76                     u3170:
  3358  000C76  FFFF               	dw	65535	; assembler added errata NOP
  3359  000C78                     
  3360                           ; BSR set to: 0
  3361                           ;main.c: 154:             rotAngle += 360;
  3362  000C78  0E68               	movlw	104
  3363  000C7A  2655               	addwf	_rotAngle^0,f,c
  3364  000C7C  0E01               	movlw	1
  3365  000C7E  2256               	addwfc	(_rotAngle+1)^0,f,c
  3366  000C80                     l3754:
  3367  000C80  FFFF               	dw	65535	; assembler added errata NOP
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;main.c: 156:         rotateObj(rotAngle);
  3371  000C82  5055               	movf	_rotAngle^0,w,c
  3372  000C84  ECCE  F00D         	call	_rotateObj
  3373  000C88  ECA2  F00B         	call	_touchTherm	;wreg free
  3374  000C8C                     
  3375                           ;main.c: 161:         releaseObj();
  3376  000C8C  ECF4  F010         	call	_releaseObj	;wreg free
  3377  000C90                     
  3378                           ;main.c: 164:         errCode = liftArm();
  3379  000C90  EC2B  F00E         	call	_liftArm	;wreg free
  3380  000C94  0100               	movlb	0	; () banked
  3381  000C96  6FF9               	movwf	executeData@errCode& (0+255),b
  3382  000C98                     l3762:
  3383  000C98  FFFF               	dw	65535	; assembler added errata NOP
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;main.c: 167:     return(errCode);
  3387  000C9A  51F9               	movf	executeData@errCode& (0+255),w,b
  3388  000C9C                     
  3389                           ; BSR set to: 0
  3390  000C9C  0012               	return		;funcret
  3391  000C9E  FFFF               	dw	65535	; errata NOP
  3392  000CA0                     __end_of_executeData:
  3393                           	callstack 0
  3394                           
  3395 ;; *************** function _touchTherm *****************
  3396 ;; Defined at:
  3397 ;;		line 430 in file "motors.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;		None
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;		None
  3402 ;; Return value:  Size  Location     Type
  3403 ;;                  1    wreg      unsigned char 
  3404 ;; Registers used:
  3405 ;;		wreg, status,2, status,0, cstack
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3411 ;;      Params:         0       0       0       0       0       0       0
  3412 ;;      Locals:         0       0       0       0       0       0       0
  3413 ;;      Temps:          0       0       0       0       0       0       0
  3414 ;;      Totals:         0       0       0       0       0       0       0
  3415 ;;Total ram usage:        0 bytes
  3416 ;; Hardware stack levels used:    1
  3417 ;; Hardware stack levels required when called:    5
  3418 ;; This function calls:
  3419 ;;		_resetStep
  3420 ;;		_resetTherm
  3421 ;;		_returnTherm
  3422 ;;		_setDirection
  3423 ;;		_startADC
  3424 ;;		_stepMade
  3425 ;;		_stopADC
  3426 ;; This function is called by:
  3427 ;;		_executeData
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           	psect	text19
  3432  001744                     __ptext19:
  3433                           	callstack 0
  3434  001744                     _touchTherm:
  3435                           	callstack 0
  3436  001744  FFFF               	dw	65535	; assembler added errata NOP
  3437  001746                     
  3438                           ;motors.c: 433:     setDirection(1, 2);
  3439  001746  0E02               	movlw	2
  3440  001748  6E12               	movwf	setDirection@motor^0,c
  3441  00174A  0E01               	movlw	1
  3442  00174C  EC3A  F00F         	call	_setDirection
  3443  001750                     
  3444                           ;motors.c: 435:     T2CONbits.TMR2ON = 1;
  3445  001750  84CA               	bsf	202,2,c	;volatile
  3446  001752                     
  3447                           ;motors.c: 437:     tm0Error = 0;
  3448  001752  0E00               	movlw	0
  3449  001754  6E58               	movwf	(_tm0Error+1)^0,c
  3450  001756  0E00               	movlw	0
  3451  001758  6E57               	movwf	_tm0Error^0,c
  3452  00175A                     
  3453                           ;motors.c: 438:     tm0Limit = 200;
  3454  00175A  0EC8               	movlw	200
  3455  00175C  6E64               	movwf	_tm0Limit^0,c
  3456  00175E                     
  3457                           ;motors.c: 439:     T0CONbits.TMR0ON = 1;
  3458  00175E  8ED5               	bsf	213,7,c	;volatile
  3459  001760                     
  3460                           ;motors.c: 442:     startADC();
  3461  001760  ECF0  F010         	call	_startADC	;wreg free
  3462                           
  3463                           ;motors.c: 445:     while(!returnTherm() || PORTDbits.RD7){
  3464  001764  EFE5  F00B         	goto	l3494
  3465  001768                     l3484:
  3466  001768  FFFF               	dw	65535	; assembler added errata NOP
  3467                           
  3468                           ;motors.c: 448:         if(tm0Error){
  3469  00176A  5057               	movf	_tm0Error^0,w,c
  3470  00176C  1058               	iorwf	(_tm0Error+1)^0,w,c
  3471  00176E  B4D8               	btfsc	status,2,c
  3472  001770  EFBC  F00B         	goto	u2891
  3473  001774  EFBF  F00B         	goto	u2890
  3474  001778                     u2891:
  3475  001778  FFFF               	dw	65535	; assembler added errata NOP
  3476  00177A  EFC7  F00B         	goto	l178
  3477  00177E                     u2890:
  3478  00177E  FFFF               	dw	65535	; assembler added errata NOP
  3479  001780                     
  3480                           ;motors.c: 450:             LATCbits.LATC2 = 0;
  3481  001780  948B               	bcf	139,2,c	;volatile
  3482  001782                     
  3483                           ;motors.c: 451:             tm0Error = 6;
  3484  001782  0E00               	movlw	0
  3485  001784  6E58               	movwf	(_tm0Error+1)^0,c
  3486  001786  0E06               	movlw	6
  3487  001788  6E57               	movwf	_tm0Error^0,c
  3488                           
  3489                           ;motors.c: 452:             break;
  3490  00178A  EFFB  F00B         	goto	l3498
  3491  00178E                     l178:
  3492  00178E  FFFF               	dw	65535	; assembler added errata NOP
  3493                           
  3494                           ;motors.c: 456:         LATCbits.LATC2 = 1;
  3495  001790  848B               	bsf	139,2,c	;volatile
  3496  001792                     l3490:
  3497  001792  FFFF               	dw	65535	; assembler added errata NOP
  3498  001794  EC78  F010         	call	_stepMade	;wreg free
  3499  001798  5012               	movf	?_stepMade^0,w,c
  3500  00179A  1013               	iorwf	(?_stepMade+1)^0,w,c
  3501  00179C  B4D8               	btfsc	status,2,c
  3502  00179E  EFD3  F00B         	goto	u2901
  3503  0017A2  EFD6  F00B         	goto	u2900
  3504  0017A6                     u2901:
  3505  0017A6  FFFF               	dw	65535	; assembler added errata NOP
  3506  0017A8  EFC9  F00B         	goto	l3490
  3507  0017AC                     u2900:
  3508  0017AC  FFFF               	dw	65535	; assembler added errata NOP
  3509  0017AE                     
  3510                           ;motors.c: 462:         LATCbits.LATC2 = 0;
  3511  0017AE  948B               	bcf	139,2,c	;volatile
  3512  0017B0                     l3492:
  3513  0017B0  FFFF               	dw	65535	; assembler added errata NOP
  3514  0017B2  EC78  F010         	call	_stepMade	;wreg free
  3515  0017B6  5012               	movf	?_stepMade^0,w,c
  3516  0017B8  1013               	iorwf	(?_stepMade+1)^0,w,c
  3517  0017BA  B4D8               	btfsc	status,2,c
  3518  0017BC  EFE2  F00B         	goto	u2911
  3519  0017C0  EFE5  F00B         	goto	u2910
  3520  0017C4                     u2911:
  3521  0017C4  FFFF               	dw	65535	; assembler added errata NOP
  3522  0017C6  EFD8  F00B         	goto	l3492
  3523  0017CA                     u2910:
  3524  0017CA                     l3494:
  3525  0017CA  FFFF               	dw	65535	; assembler added errata NOP
  3526                           
  3527                           ;motors.c: 445:     while(!returnTherm() || PORTDbits.RD7){
  3528  0017CC  ECA7  F010         	call	_returnTherm	;wreg free
  3529  0017D0  5012               	movf	?_returnTherm^0,w,c
  3530  0017D2  1013               	iorwf	(?_returnTherm+1)^0,w,c
  3531  0017D4  B4D8               	btfsc	status,2,c
  3532  0017D6  EFEF  F00B         	goto	u2921
  3533  0017DA  EFF2  F00B         	goto	u2920
  3534  0017DE                     u2921:
  3535  0017DE  FFFF               	dw	65535	; assembler added errata NOP
  3536  0017E0  EFB4  F00B         	goto	l3484
  3537  0017E4                     u2920:
  3538  0017E4  FFFF               	dw	65535	; assembler added errata NOP
  3539  0017E6  BE83               	btfsc	131,7,c	;volatile
  3540  0017E8  EFF8  F00B         	goto	u2931
  3541  0017EC  EFFB  F00B         	goto	u2930
  3542  0017F0                     u2931:
  3543  0017F0  FFFF               	dw	65535	; assembler added errata NOP
  3544  0017F2  EFB4  F00B         	goto	l3484
  3545  0017F6                     u2930:
  3546  0017F6                     l3498:
  3547  0017F6  FFFF               	dw	65535	; assembler added errata NOP
  3548                           
  3549                           ;motors.c: 469:     stopADC();
  3550  0017F8  ECEC  F010         	call	_stopADC	;wreg free
  3551  0017FC                     
  3552                           ;motors.c: 472:     resetTherm();
  3553  0017FC  ECB9  F010         	call	_resetTherm	;wreg free
  3554  001800                     
  3555                           ;motors.c: 475:     T0CONbits.TMR0ON = 0;
  3556  001800  9ED5               	bcf	213,7,c	;volatile
  3557  001802                     
  3558                           ;motors.c: 476:     T2CONbits.TMR2ON = 0;
  3559  001802  94CA               	bcf	202,2,c	;volatile
  3560                           
  3561                           ;motors.c: 478:     TMR0 = 0;
  3562  001804  0E00               	movlw	0
  3563  001806  6ED7               	movwf	215,c	;volatile
  3564  001808  0E00               	movlw	0
  3565  00180A  6ED6               	movwf	214,c	;volatile
  3566                           
  3567                           ;motors.c: 479:     TMR2 = 0;
  3568  00180C  0E00               	movlw	0
  3569  00180E  6ECC               	movwf	204,c	;volatile
  3570  001810                     
  3571                           ;motors.c: 482:     resetStep();
  3572  001810  ECC3  F010         	call	_resetStep	;wreg free
  3573  001814                     
  3574                           ;motors.c: 485:     if(PORTDbits.RD7){
  3575  001814  AE83               	btfss	131,7,c	;volatile
  3576  001816  EF0F  F00C         	goto	u2941
  3577  00181A  EF12  F00C         	goto	u2940
  3578  00181E                     u2941:
  3579  00181E  FFFF               	dw	65535	; assembler added errata NOP
  3580  001820  EF17  F00C         	goto	l186
  3581  001824                     u2940:
  3582  001824  FFFF               	dw	65535	; assembler added errata NOP
  3583  001826                     
  3584                           ;motors.c: 486:         tm0Error = 2;
  3585  001826  0E00               	movlw	0
  3586  001828  6E58               	movwf	(_tm0Error+1)^0,c
  3587  00182A  0E02               	movlw	2
  3588  00182C  6E57               	movwf	_tm0Error^0,c
  3589  00182E                     l186:
  3590  00182E  FFFF               	dw	65535	; assembler added errata NOP
  3591                           
  3592                           ;motors.c: 489:     return(tm0Error);
  3593  001830  5057               	movf	_tm0Error^0,w,c
  3594  001832  0012               	return		;funcret
  3595  001834  FFFF               	dw	65535	; errata NOP
  3596  001836                     __end_of_touchTherm:
  3597                           	callstack 0
  3598                           
  3599 ;; *************** function _returnTherm *****************
  3600 ;; Defined at:
  3601 ;;		line 57 in file "adc.c"
  3602 ;; Parameters:    Size  Location     Type
  3603 ;;		None
  3604 ;; Auto vars:     Size  Location     Type
  3605 ;;		None
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  2   17[COMRAM] unsigned int 
  3608 ;; Registers used:
  3609 ;;		None
  3610 ;; Tracked objects:
  3611 ;;		On entry : 0/0
  3612 ;;		On exit  : 0/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3615 ;;      Params:         2       0       0       0       0       0       0
  3616 ;;      Locals:         0       0       0       0       0       0       0
  3617 ;;      Temps:          0       0       0       0       0       0       0
  3618 ;;      Totals:         2       0       0       0       0       0       0
  3619 ;;Total ram usage:        2 bytes
  3620 ;; Hardware stack levels used:    1
  3621 ;; Hardware stack levels required when called:    4
  3622 ;; This function calls:
  3623 ;;		Nothing
  3624 ;; This function is called by:
  3625 ;;		_touchTherm
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           	psect	text20
  3630  00214E                     __ptext20:
  3631                           	callstack 0
  3632  00214E                     _returnTherm:
  3633                           	callstack 0
  3634  00214E  FFFF               	dw	65535	; assembler added errata NOP
  3635  002150                     
  3636                           ;adc.c: 58:     return therm_rel;
  3637  002150  C060  F012         	movff	_therm_rel,?_returnTherm	;volatile
  3638  002154  6A13               	clrf	(?_returnTherm+1)^0,c
  3639  002156  0012               	return		;funcret
  3640  002158  FFFF               	dw	65535	; errata NOP
  3641  00215A                     __end_of_returnTherm:
  3642                           	callstack 0
  3643                           
  3644 ;; *************** function _resetTherm *****************
  3645 ;; Defined at:
  3646 ;;		line 71 in file "adc.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;		None
  3649 ;; Auto vars:     Size  Location     Type
  3650 ;;		None
  3651 ;; Return value:  Size  Location     Type
  3652 ;;                  1    wreg      void 
  3653 ;; Registers used:
  3654 ;;		wreg, status,2
  3655 ;; Tracked objects:
  3656 ;;		On entry : 0/0
  3657 ;;		On exit  : 0/0
  3658 ;;		Unchanged: 0/0
  3659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3660 ;;      Params:         0       0       0       0       0       0       0
  3661 ;;      Locals:         0       0       0       0       0       0       0
  3662 ;;      Temps:          0       0       0       0       0       0       0
  3663 ;;      Totals:         0       0       0       0       0       0       0
  3664 ;;Total ram usage:        0 bytes
  3665 ;; Hardware stack levels used:    1
  3666 ;; Hardware stack levels required when called:    4
  3667 ;; This function calls:
  3668 ;;		Nothing
  3669 ;; This function is called by:
  3670 ;;		_touchTherm
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           	psect	text21
  3675  002172                     __ptext21:
  3676                           	callstack 0
  3677  002172                     _resetTherm:
  3678                           	callstack 0
  3679  002172  FFFF               	dw	65535	; assembler added errata NOP
  3680  002174                     
  3681                           ;adc.c: 72:     therm_rel = 0;
  3682  002174  0E00               	movlw	0
  3683  002176  6E60               	movwf	_therm_rel^0,c	;volatile
  3684  002178  0012               	return		;funcret
  3685  00217A  FFFF               	dw	65535	; errata NOP
  3686  00217C                     __end_of_resetTherm:
  3687                           	callstack 0
  3688                           
  3689 ;; *************** function _touchObject *****************
  3690 ;; Defined at:
  3691 ;;		line 359 in file "motors.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;		None
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;		None
  3696 ;; Return value:  Size  Location     Type
  3697 ;;                  1    wreg      unsigned char 
  3698 ;; Registers used:
  3699 ;;		wreg, status,2, status,0, cstack
  3700 ;; Tracked objects:
  3701 ;;		On entry : 0/0
  3702 ;;		On exit  : 0/0
  3703 ;;		Unchanged: 0/0
  3704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3705 ;;      Params:         0       0       0       0       0       0       0
  3706 ;;      Locals:         0       0       0       0       0       0       0
  3707 ;;      Temps:          0       0       0       0       0       0       0
  3708 ;;      Totals:         0       0       0       0       0       0       0
  3709 ;;Total ram usage:        0 bytes
  3710 ;; Hardware stack levels used:    1
  3711 ;; Hardware stack levels required when called:    5
  3712 ;; This function calls:
  3713 ;;		_resetStep
  3714 ;;		_resetTouch
  3715 ;;		_returnTouch
  3716 ;;		_setDirection
  3717 ;;		_startADC
  3718 ;;		_stepMade
  3719 ;;		_stopADC
  3720 ;; This function is called by:
  3721 ;;		_executeData
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           	psect	text22
  3726  001836                     __ptext22:
  3727                           	callstack 0
  3728  001836                     _touchObject:
  3729                           	callstack 0
  3730  001836  FFFF               	dw	65535	; assembler added errata NOP
  3731  001838                     
  3732                           ;motors.c: 362:     setDirection(1, 2);
  3733  001838  0E02               	movlw	2
  3734  00183A  6E12               	movwf	setDirection@motor^0,c
  3735  00183C  0E01               	movlw	1
  3736  00183E  EC3A  F00F         	call	_setDirection
  3737  001842                     
  3738                           ;motors.c: 364:     T2CONbits.TMR2ON = 1;
  3739  001842  84CA               	bsf	202,2,c	;volatile
  3740  001844                     
  3741                           ;motors.c: 366:     tm0Error = 0;
  3742  001844  0E00               	movlw	0
  3743  001846  6E58               	movwf	(_tm0Error+1)^0,c
  3744  001848  0E00               	movlw	0
  3745  00184A  6E57               	movwf	_tm0Error^0,c
  3746  00184C                     
  3747                           ;motors.c: 367:     tm0Limit = 200;
  3748  00184C  0EC8               	movlw	200
  3749  00184E  6E64               	movwf	_tm0Limit^0,c
  3750  001850                     
  3751                           ;motors.c: 368:     T0CONbits.TMR0ON = 1;
  3752  001850  8ED5               	bsf	213,7,c	;volatile
  3753  001852                     
  3754                           ;motors.c: 371:     startADC();
  3755  001852  ECF0  F010         	call	_startADC	;wreg free
  3756                           
  3757                           ;motors.c: 374:     while(!returnTouch() || PORTDbits.RD7){
  3758  001856  EF5E  F00C         	goto	l3452
  3759  00185A                     l3442:
  3760  00185A  FFFF               	dw	65535	; assembler added errata NOP
  3761                           
  3762                           ;motors.c: 377:         if(tm0Error){
  3763  00185C  5057               	movf	_tm0Error^0,w,c
  3764  00185E  1058               	iorwf	(_tm0Error+1)^0,w,c
  3765  001860  B4D8               	btfsc	status,2,c
  3766  001862  EF35  F00C         	goto	u2831
  3767  001866  EF38  F00C         	goto	u2830
  3768  00186A                     u2831:
  3769  00186A  FFFF               	dw	65535	; assembler added errata NOP
  3770  00186C  EF40  F00C         	goto	l164
  3771  001870                     u2830:
  3772  001870  FFFF               	dw	65535	; assembler added errata NOP
  3773  001872                     
  3774                           ;motors.c: 379:             LATCbits.LATC2 = 0;
  3775  001872  948B               	bcf	139,2,c	;volatile
  3776  001874                     
  3777                           ;motors.c: 380:             tm0Error = 6;
  3778  001874  0E00               	movlw	0
  3779  001876  6E58               	movwf	(_tm0Error+1)^0,c
  3780  001878  0E06               	movlw	6
  3781  00187A  6E57               	movwf	_tm0Error^0,c
  3782                           
  3783                           ;motors.c: 381:             break;
  3784  00187C  EF74  F00C         	goto	l3456
  3785  001880                     l164:
  3786  001880  FFFF               	dw	65535	; assembler added errata NOP
  3787                           
  3788                           ;motors.c: 385:         LATCbits.LATC2 = 1;
  3789  001882  848B               	bsf	139,2,c	;volatile
  3790  001884                     l3448:
  3791  001884  FFFF               	dw	65535	; assembler added errata NOP
  3792  001886  EC78  F010         	call	_stepMade	;wreg free
  3793  00188A  5012               	movf	?_stepMade^0,w,c
  3794  00188C  1013               	iorwf	(?_stepMade+1)^0,w,c
  3795  00188E  B4D8               	btfsc	status,2,c
  3796  001890  EF4C  F00C         	goto	u2841
  3797  001894  EF4F  F00C         	goto	u2840
  3798  001898                     u2841:
  3799  001898  FFFF               	dw	65535	; assembler added errata NOP
  3800  00189A  EF42  F00C         	goto	l3448
  3801  00189E                     u2840:
  3802  00189E  FFFF               	dw	65535	; assembler added errata NOP
  3803  0018A0                     
  3804                           ;motors.c: 391:         LATCbits.LATC2 = 0;
  3805  0018A0  948B               	bcf	139,2,c	;volatile
  3806  0018A2                     l3450:
  3807  0018A2  FFFF               	dw	65535	; assembler added errata NOP
  3808  0018A4  EC78  F010         	call	_stepMade	;wreg free
  3809  0018A8  5012               	movf	?_stepMade^0,w,c
  3810  0018AA  1013               	iorwf	(?_stepMade+1)^0,w,c
  3811  0018AC  B4D8               	btfsc	status,2,c
  3812  0018AE  EF5B  F00C         	goto	u2851
  3813  0018B2  EF5E  F00C         	goto	u2850
  3814  0018B6                     u2851:
  3815  0018B6  FFFF               	dw	65535	; assembler added errata NOP
  3816  0018B8  EF51  F00C         	goto	l3450
  3817  0018BC                     u2850:
  3818  0018BC                     l3452:
  3819  0018BC  FFFF               	dw	65535	; assembler added errata NOP
  3820                           
  3821                           ;motors.c: 374:     while(!returnTouch() || PORTDbits.RD7){
  3822  0018BE  ECAD  F010         	call	_returnTouch	;wreg free
  3823  0018C2  5012               	movf	?_returnTouch^0,w,c
  3824  0018C4  1013               	iorwf	(?_returnTouch+1)^0,w,c
  3825  0018C6  B4D8               	btfsc	status,2,c
  3826  0018C8  EF68  F00C         	goto	u2861
  3827  0018CC  EF6B  F00C         	goto	u2860
  3828  0018D0                     u2861:
  3829  0018D0  FFFF               	dw	65535	; assembler added errata NOP
  3830  0018D2  EF2D  F00C         	goto	l3442
  3831  0018D6                     u2860:
  3832  0018D6  FFFF               	dw	65535	; assembler added errata NOP
  3833  0018D8  BE83               	btfsc	131,7,c	;volatile
  3834  0018DA  EF71  F00C         	goto	u2871
  3835  0018DE  EF74  F00C         	goto	u2870
  3836  0018E2                     u2871:
  3837  0018E2  FFFF               	dw	65535	; assembler added errata NOP
  3838  0018E4  EF2D  F00C         	goto	l3442
  3839  0018E8                     u2870:
  3840  0018E8                     l3456:
  3841  0018E8  FFFF               	dw	65535	; assembler added errata NOP
  3842                           
  3843                           ;motors.c: 398:     stopADC();
  3844  0018EA  ECEC  F010         	call	_stopADC	;wreg free
  3845  0018EE                     
  3846                           ;motors.c: 401:     resetTouch();
  3847  0018EE  ECBE  F010         	call	_resetTouch	;wreg free
  3848  0018F2                     
  3849                           ;motors.c: 404:     T0CONbits.TMR0ON = 0;
  3850  0018F2  9ED5               	bcf	213,7,c	;volatile
  3851  0018F4                     
  3852                           ;motors.c: 405:     T2CONbits.TMR2ON = 0;
  3853  0018F4  94CA               	bcf	202,2,c	;volatile
  3854                           
  3855                           ;motors.c: 407:     TMR0 = 0;
  3856  0018F6  0E00               	movlw	0
  3857  0018F8  6ED7               	movwf	215,c	;volatile
  3858  0018FA  0E00               	movlw	0
  3859  0018FC  6ED6               	movwf	214,c	;volatile
  3860                           
  3861                           ;motors.c: 408:     TMR2 = 0;
  3862  0018FE  0E00               	movlw	0
  3863  001900  6ECC               	movwf	204,c	;volatile
  3864  001902                     
  3865                           ;motors.c: 411:     resetStep();
  3866  001902  ECC3  F010         	call	_resetStep	;wreg free
  3867  001906                     
  3868                           ;motors.c: 414:     if(PORTDbits.RD7){
  3869  001906  AE83               	btfss	131,7,c	;volatile
  3870  001908  EF88  F00C         	goto	u2881
  3871  00190C  EF8B  F00C         	goto	u2880
  3872  001910                     u2881:
  3873  001910  FFFF               	dw	65535	; assembler added errata NOP
  3874  001912  EF90  F00C         	goto	l172
  3875  001916                     u2880:
  3876  001916  FFFF               	dw	65535	; assembler added errata NOP
  3877  001918                     
  3878                           ;motors.c: 415:         tm0Error = 2;
  3879  001918  0E00               	movlw	0
  3880  00191A  6E58               	movwf	(_tm0Error+1)^0,c
  3881  00191C  0E02               	movlw	2
  3882  00191E  6E57               	movwf	_tm0Error^0,c
  3883  001920                     l172:
  3884  001920  FFFF               	dw	65535	; assembler added errata NOP
  3885                           
  3886                           ;motors.c: 418:     return(tm0Error);
  3887  001922  5057               	movf	_tm0Error^0,w,c
  3888  001924  0012               	return		;funcret
  3889  001926  FFFF               	dw	65535	; errata NOP
  3890  001928                     __end_of_touchObject:
  3891                           	callstack 0
  3892                           
  3893 ;; *************** function _stopADC *****************
  3894 ;; Defined at:
  3895 ;;		line 43 in file "adc.c"
  3896 ;; Parameters:    Size  Location     Type
  3897 ;;		None
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;		None
  3900 ;; Return value:  Size  Location     Type
  3901 ;;                  1    wreg      void 
  3902 ;; Registers used:
  3903 ;;		None
  3904 ;; Tracked objects:
  3905 ;;		On entry : 0/0
  3906 ;;		On exit  : 0/0
  3907 ;;		Unchanged: 0/0
  3908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3909 ;;      Params:         0       0       0       0       0       0       0
  3910 ;;      Locals:         0       0       0       0       0       0       0
  3911 ;;      Temps:          0       0       0       0       0       0       0
  3912 ;;      Totals:         0       0       0       0       0       0       0
  3913 ;;Total ram usage:        0 bytes
  3914 ;; Hardware stack levels used:    1
  3915 ;; Hardware stack levels required when called:    4
  3916 ;; This function calls:
  3917 ;;		Nothing
  3918 ;; This function is called by:
  3919 ;;		_touchObject
  3920 ;;		_touchTherm
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           	psect	text23
  3925  0021D8                     __ptext23:
  3926                           	callstack 0
  3927  0021D8                     _stopADC:
  3928                           	callstack 0
  3929  0021D8  FFFF               	dw	65535	; assembler added errata NOP
  3930  0021DA                     
  3931                           ;adc.c: 44:     ADCON0bits.ADON = 0;
  3932  0021DA  90C2               	bcf	194,0,c	;volatile
  3933  0021DC  0012               	return		;funcret
  3934  0021DE  FFFF               	dw	65535	; errata NOP
  3935  0021E0                     __end_of_stopADC:
  3936                           	callstack 0
  3937                           
  3938 ;; *************** function _startADC *****************
  3939 ;; Defined at:
  3940 ;;		line 36 in file "adc.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;		None
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;		None
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      void 
  3947 ;; Registers used:
  3948 ;;		None
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3954 ;;      Params:         0       0       0       0       0       0       0
  3955 ;;      Locals:         0       0       0       0       0       0       0
  3956 ;;      Temps:          0       0       0       0       0       0       0
  3957 ;;      Totals:         0       0       0       0       0       0       0
  3958 ;;Total ram usage:        0 bytes
  3959 ;; Hardware stack levels used:    1
  3960 ;; Hardware stack levels required when called:    4
  3961 ;; This function calls:
  3962 ;;		Nothing
  3963 ;; This function is called by:
  3964 ;;		_touchObject
  3965 ;;		_touchTherm
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text24
  3970  0021E0                     __ptext24:
  3971                           	callstack 0
  3972  0021E0                     _startADC:
  3973                           	callstack 0
  3974  0021E0  FFFF               	dw	65535	; assembler added errata NOP
  3975  0021E2                     
  3976                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  3977  0021E2  80C2               	bsf	194,0,c	;volatile
  3978  0021E4  0012               	return		;funcret
  3979  0021E6  FFFF               	dw	65535	; errata NOP
  3980  0021E8                     __end_of_startADC:
  3981                           	callstack 0
  3982                           
  3983 ;; *************** function _returnTouch *****************
  3984 ;; Defined at:
  3985 ;;		line 50 in file "adc.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;		None
  3988 ;; Auto vars:     Size  Location     Type
  3989 ;;		None
  3990 ;; Return value:  Size  Location     Type
  3991 ;;                  2   17[COMRAM] unsigned int 
  3992 ;; Registers used:
  3993 ;;		None
  3994 ;; Tracked objects:
  3995 ;;		On entry : 0/0
  3996 ;;		On exit  : 0/0
  3997 ;;		Unchanged: 0/0
  3998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3999 ;;      Params:         2       0       0       0       0       0       0
  4000 ;;      Locals:         0       0       0       0       0       0       0
  4001 ;;      Temps:          0       0       0       0       0       0       0
  4002 ;;      Totals:         2       0       0       0       0       0       0
  4003 ;;Total ram usage:        2 bytes
  4004 ;; Hardware stack levels used:    1
  4005 ;; Hardware stack levels required when called:    4
  4006 ;; This function calls:
  4007 ;;		Nothing
  4008 ;; This function is called by:
  4009 ;;		_touchObject
  4010 ;; This function uses a non-reentrant model
  4011 ;;
  4012                           
  4013                           	psect	text25
  4014  00215A                     __ptext25:
  4015                           	callstack 0
  4016  00215A                     _returnTouch:
  4017                           	callstack 0
  4018  00215A  FFFF               	dw	65535	; assembler added errata NOP
  4019  00215C                     
  4020                           ;adc.c: 51:     return touch_rel;
  4021  00215C  C061  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4022  002160  6A13               	clrf	(?_returnTouch+1)^0,c
  4023  002162  0012               	return		;funcret
  4024  002164  FFFF               	dw	65535	; errata NOP
  4025  002166                     __end_of_returnTouch:
  4026                           	callstack 0
  4027                           
  4028 ;; *************** function _resetTouch *****************
  4029 ;; Defined at:
  4030 ;;		line 64 in file "adc.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;		None
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;		None
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  1    wreg      void 
  4037 ;; Registers used:
  4038 ;;		wreg, status,2
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4044 ;;      Params:         0       0       0       0       0       0       0
  4045 ;;      Locals:         0       0       0       0       0       0       0
  4046 ;;      Temps:          0       0       0       0       0       0       0
  4047 ;;      Totals:         0       0       0       0       0       0       0
  4048 ;;Total ram usage:        0 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:    4
  4051 ;; This function calls:
  4052 ;;		Nothing
  4053 ;; This function is called by:
  4054 ;;		_touchObject
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           	psect	text26
  4059  00217C                     __ptext26:
  4060                           	callstack 0
  4061  00217C                     _resetTouch:
  4062                           	callstack 0
  4063  00217C  FFFF               	dw	65535	; assembler added errata NOP
  4064  00217E                     
  4065                           ;adc.c: 65:     touch_rel = 0;
  4066  00217E  0E00               	movlw	0
  4067  002180  6E61               	movwf	_touch_rel^0,c	;volatile
  4068  002182  0012               	return		;funcret
  4069  002184  FFFF               	dw	65535	; errata NOP
  4070  002186                     __end_of_resetTouch:
  4071                           	callstack 0
  4072                           
  4073 ;; *************** function _rotateObj *****************
  4074 ;; Defined at:
  4075 ;;		line 550 in file "motors.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  rotAngle        1    wreg     unsigned char 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;  rotAngle        1    3[BANK0 ] unsigned char 
  4080 ;;  totStep         2    4[BANK0 ] int 
  4081 ;;  i               1    6[BANK0 ] unsigned char 
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  1    wreg      void 
  4084 ;; Registers used:
  4085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4091 ;;      Params:         0       0       0       0       0       0       0
  4092 ;;      Locals:         0       4       0       0       0       0       0
  4093 ;;      Temps:          0       3       0       0       0       0       0
  4094 ;;      Totals:         0       7       0       0       0       0       0
  4095 ;;Total ram usage:        7 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; Hardware stack levels required when called:    5
  4098 ;; This function calls:
  4099 ;;		___fldiv
  4100 ;;		___fltol
  4101 ;;		___xxtofl
  4102 ;; This function is called by:
  4103 ;;		_executeData
  4104 ;; This function uses a non-reentrant model
  4105 ;;
  4106                           
  4107                           	psect	text27
  4108  001B9C                     __ptext27:
  4109                           	callstack 0
  4110  001B9C                     _rotateObj:
  4111                           	callstack 0
  4112  001B9C  FFFF               	dw	65535	; assembler added errata NOP
  4113                           
  4114                           ;incstack = 0
  4115                           ;rotateObj@rotAngle stored from wreg
  4116  001B9E  0100               	movlb	0	; () banked
  4117  001BA0  6FF3               	movwf	rotateObj@rotAngle& (0+255),b
  4118  001BA2                     
  4119                           ;motors.c: 551:     static const float stepAngle = 0.08789;;motors.c: 552:     static ch
      +                          ar rotSequence[] = {0b1001, 0b0011, 0b0110, 0b1100};;motors.c: 553:     unsigned char i;
      +                          ;motors.c: 554:     int totStep = rotAngle/stepAngle;
  4120  001BA2  0EAC               	movlw	172
  4121  001BA4  6E24               	movwf	___fldiv@a^0,c
  4122  001BA6  0EFF               	movlw	255
  4123  001BA8  6E25               	movwf	(___fldiv@a+1)^0,c
  4124  001BAA  0EB3               	movlw	179
  4125  001BAC  6E26               	movwf	(___fldiv@a+2)^0,c
  4126  001BAE  0E3D               	movlw	61
  4127  001BB0  6E27               	movwf	(___fldiv@a+3)^0,c
  4128  001BB2  0100               	movlb	0	; () banked
  4129  001BB4  51F3               	movf	rotateObj@rotAngle& (0+255),w,b
  4130  001BB6  6E12               	movwf	___xxtofl@val^0,c
  4131  001BB8  6A13               	clrf	(___xxtofl@val+1)^0,c
  4132  001BBA  6A14               	clrf	(___xxtofl@val+2)^0,c
  4133  001BBC  6A15               	clrf	(___xxtofl@val+3)^0,c
  4134  001BBE  0E01               	movlw	1
  4135  001BC0  EC50  F006         	call	___xxtofl
  4136  001BC4  C012  F020         	movff	?___xxtofl,___fldiv@b
  4137  001BC8  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4138  001BCC  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4139  001BD0  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4140  001BD4  EC08  F003         	call	___fldiv	;wreg free
  4141  001BD8  C020  F039         	movff	?___fldiv,___fltol@f1
  4142  001BDC  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4143  001BE0  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4144  001BE4  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4145  001BE8  ECEB  F009         	call	___fltol	;wreg free
  4146  001BEC  C039  F0F4         	movff	?___fltol,rotateObj@totStep
  4147  001BF0  C03A  F0F5         	movff	?___fltol+1,rotateObj@totStep+1
  4148  001BF4                     
  4149                           ;motors.c: 557:     for(i = 0; i < totStep; i++){
  4150  001BF4  0E00               	movlw	0
  4151  001BF6  0100               	movlb	0	; () banked
  4152  001BF8  6FF6               	movwf	rotateObj@i& (0+255),b
  4153  001BFA  EF14  F00E         	goto	l3552
  4154  001BFE                     l3546:
  4155  001BFE  FFFF               	dw	65535	; assembler added errata NOP
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;motors.c: 559:         LATD &= 0xC3;
  4159  001C00  0EC3               	movlw	195
  4160  001C02  168C               	andwf	140,f,c	;volatile
  4161  001C04                     
  4162                           ; BSR set to: 0
  4163                           ;motors.c: 561:         LATD |= rotSequence[i%4] << 2;
  4164  001C04  51F6               	movf	rotateObj@i& (0+255),w,b
  4165  001C06  0B03               	andlw	3
  4166  001C08  6FF0               	movwf	??_rotateObj& (0+255),b
  4167  001C0A  6BF1               	clrf	(??_rotateObj+1)& (0+255),b
  4168  001C0C  0E65               	movlw	low rotateObj@rotSequence
  4169  001C0E  25F0               	addwf	??_rotateObj& (0+255),w,b
  4170  001C10  6ED9               	movwf	fsr2l,c
  4171  001C12  0E00               	movlw	high rotateObj@rotSequence
  4172  001C14  21F1               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4173  001C16  6EDA               	movwf	fsr2h,c
  4174  001C18  50DF               	movf	indf2,w,c
  4175  001C1A  6FF2               	movwf	(??_rotateObj+2)& (0+255),b
  4176  001C1C  90D8               	bcf	status,0,c
  4177  001C1E  37F2               	rlcf	(??_rotateObj+2)& (0+255),f,b
  4178  001C20  90D8               	bcf	status,0,c
  4179  001C22  35F2               	rlcf	(??_rotateObj+2)& (0+255),w,b
  4180  001C24  128C               	iorwf	140,f,c	;volatile
  4181  001C26                     
  4182                           ; BSR set to: 0
  4183                           ;motors.c: 562:     }
  4184  001C26  2BF6               	incf	rotateObj@i& (0+255),f,b
  4185  001C28                     l3552:
  4186  001C28  FFFF               	dw	65535	; assembler added errata NOP
  4187                           
  4188                           ; BSR set to: 0
  4189  001C2A  51F6               	movf	rotateObj@i& (0+255),w,b
  4190  001C2C  6FF0               	movwf	??_rotateObj& (0+255),b
  4191  001C2E  6BF1               	clrf	(??_rotateObj+1)& (0+255),b
  4192  001C30  51F4               	movf	rotateObj@totStep& (0+255),w,b
  4193  001C32  5DF0               	subwf	??_rotateObj& (0+255),w,b
  4194  001C34  51F1               	movf	(??_rotateObj+1)& (0+255),w,b
  4195  001C36  0A80               	xorlw	128
  4196  001C38  6FF2               	movwf	(??_rotateObj+2)& (0+255),b
  4197  001C3A  51F5               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4198  001C3C  0A80               	xorlw	128
  4199  001C3E  59F2               	subwfb	(??_rotateObj+2)& (0+255),w,b
  4200  001C40  A0D8               	btfss	status,0,c
  4201  001C42  EF25  F00E         	goto	u2991
  4202  001C46  EF28  F00E         	goto	u2990
  4203  001C4A                     u2991:
  4204  001C4A  FFFF               	dw	65535	; assembler added errata NOP
  4205  001C4C  EFFF  F00D         	goto	l3546
  4206  001C50                     u2990:
  4207  001C50  FFFF               	dw	65535	; assembler added errata NOP
  4208  001C52                     
  4209                           ; BSR set to: 0
  4210  001C52  0012               	return		;funcret
  4211  001C54  FFFF               	dw	65535	; errata NOP
  4212  001C56                     __end_of_rotateObj:
  4213                           	callstack 0
  4214                           
  4215 ;; *************** function ___xxtofl *****************
  4216 ;; Defined at:
  4217 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;  sign            1    wreg     unsigned char 
  4220 ;;  val             4   17[COMRAM] long 
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;  sign            1   25[COMRAM] unsigned char 
  4223 ;;  arg             4   27[COMRAM] unsigned long 
  4224 ;;  exp             1   26[COMRAM] unsigned char 
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  4   17[COMRAM] unsigned char 
  4227 ;; Registers used:
  4228 ;;		wreg, status,2, status,0
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4234 ;;      Params:         4       0       0       0       0       0       0
  4235 ;;      Locals:         6       0       0       0       0       0       0
  4236 ;;      Temps:          4       0       0       0       0       0       0
  4237 ;;      Totals:        14       0       0       0       0       0       0
  4238 ;;Total ram usage:       14 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    4
  4241 ;; This function calls:
  4242 ;;		Nothing
  4243 ;; This function is called by:
  4244 ;;		_rotateObj
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           	psect	text28
  4249  000CA0                     __ptext28:
  4250                           	callstack 0
  4251  000CA0                     ___xxtofl:
  4252                           	callstack 0
  4253  000CA0  FFFF               	dw	65535	; assembler added errata NOP
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;incstack = 0
  4257                           ;___xxtofl@sign stored from wreg
  4258  000CA2  6E1A               	movwf	___xxtofl@sign^0,c
  4259  000CA4  501A               	movf	___xxtofl@sign^0,w,c
  4260  000CA6  B4D8               	btfsc	status,2,c
  4261  000CA8  EF58  F006         	goto	u2561
  4262  000CAC  EF5B  F006         	goto	u2560
  4263  000CB0                     u2561:
  4264  000CB0  FFFF               	dw	65535	; assembler added errata NOP
  4265  000CB2  EF80  F006         	goto	l1212
  4266  000CB6                     u2560:
  4267  000CB6  FFFF               	dw	65535	; assembler added errata NOP
  4268  000CB8  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4269  000CBA  EF64  F006         	goto	u2570
  4270  000CBE  EF61  F006         	goto	u2571
  4271  000CC2                     u2571:
  4272  000CC2  FFFF               	dw	65535	; assembler added errata NOP
  4273  000CC4  EF80  F006         	goto	l1212
  4274  000CC8                     u2570:
  4275  000CC8  FFFF               	dw	65535	; assembler added errata NOP
  4276  000CCA  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4277  000CCE  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4278  000CD2  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4279  000CD6  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4280  000CDA  1E16               	comf	??___xxtofl^0,f,c
  4281  000CDC  1E17               	comf	(??___xxtofl+1)^0,f,c
  4282  000CDE  1E18               	comf	(??___xxtofl+2)^0,f,c
  4283  000CE0  1E19               	comf	(??___xxtofl+3)^0,f,c
  4284  000CE2  2A16               	incf	??___xxtofl^0,f,c
  4285  000CE4  0E00               	movlw	0
  4286  000CE6  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4287  000CE8  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4288  000CEA  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4289  000CEC  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4290  000CF0  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4291  000CF4  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4292  000CF8  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4293  000CFC  EF89  F006         	goto	l3280
  4294  000D00                     l1212:
  4295  000D00  FFFF               	dw	65535	; assembler added errata NOP
  4296  000D02  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4297  000D06  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4298  000D0A  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4299  000D0E  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4300  000D12                     l3280:
  4301  000D12  FFFF               	dw	65535	; assembler added errata NOP
  4302  000D14  5012               	movf	___xxtofl@val^0,w,c
  4303  000D16  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4304  000D18  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4305  000D1A  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4306  000D1C  A4D8               	btfss	status,2,c
  4307  000D1E  EF93  F006         	goto	u2581
  4308  000D22  EF96  F006         	goto	u2580
  4309  000D26                     u2581:
  4310  000D26  FFFF               	dw	65535	; assembler added errata NOP
  4311  000D28  EFA1  F006         	goto	l3286
  4312  000D2C                     u2580:
  4313  000D2C  FFFF               	dw	65535	; assembler added errata NOP
  4314  000D2E  0E00               	movlw	0
  4315  000D30  6E12               	movwf	?___xxtofl^0,c
  4316  000D32  0E00               	movlw	0
  4317  000D34  6E13               	movwf	(?___xxtofl+1)^0,c
  4318  000D36  0E00               	movlw	0
  4319  000D38  6E14               	movwf	(?___xxtofl+2)^0,c
  4320  000D3A  0E00               	movlw	0
  4321  000D3C  6E15               	movwf	(?___xxtofl+3)^0,c
  4322  000D3E  EF49  F007         	goto	l1215
  4323  000D42                     l3286:
  4324  000D42  FFFF               	dw	65535	; assembler added errata NOP
  4325  000D44  0E96               	movlw	150
  4326  000D46  6E1B               	movwf	___xxtofl@exp^0,c
  4327  000D48  EFAD  F006         	goto	l3290
  4328  000D4C                     l3288:
  4329  000D4C  FFFF               	dw	65535	; assembler added errata NOP
  4330  000D4E  2A1B               	incf	___xxtofl@exp^0,f,c
  4331  000D50  90D8               	bcf	status,0,c
  4332  000D52  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4333  000D54  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4334  000D56  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4335  000D58  321C               	rrcf	___xxtofl@arg^0,f,c
  4336  000D5A                     l3290:
  4337  000D5A  FFFF               	dw	65535	; assembler added errata NOP
  4338  000D5C  0E00               	movlw	0
  4339  000D5E  141C               	andwf	___xxtofl@arg^0,w,c
  4340  000D60  6E16               	movwf	??___xxtofl^0,c
  4341  000D62  0E00               	movlw	0
  4342  000D64  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4343  000D66  6E17               	movwf	(??___xxtofl+1)^0,c
  4344  000D68  0E00               	movlw	0
  4345  000D6A  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4346  000D6C  6E18               	movwf	(??___xxtofl+2)^0,c
  4347  000D6E  0EFE               	movlw	254
  4348  000D70  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4349  000D72  6E19               	movwf	(??___xxtofl+3)^0,c
  4350  000D74  5016               	movf	??___xxtofl^0,w,c
  4351  000D76  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4352  000D78  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4353  000D7A  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4354  000D7C  A4D8               	btfss	status,2,c
  4355  000D7E  EFC3  F006         	goto	u2591
  4356  000D82  EFC6  F006         	goto	u2590
  4357  000D86                     u2591:
  4358  000D86  FFFF               	dw	65535	; assembler added errata NOP
  4359  000D88  EFA6  F006         	goto	l3288
  4360  000D8C                     u2590:
  4361  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  4362  000D8E  EFD6  F006         	goto	l1219
  4363  000D92                     l3292:
  4364  000D92  FFFF               	dw	65535	; assembler added errata NOP
  4365  000D94  2A1B               	incf	___xxtofl@exp^0,f,c
  4366  000D96  0E01               	movlw	1
  4367  000D98  261C               	addwf	___xxtofl@arg^0,f,c
  4368  000D9A  0E00               	movlw	0
  4369  000D9C  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4370  000D9E  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4371  000DA0  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4372  000DA2  90D8               	bcf	status,0,c
  4373  000DA4  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4374  000DA6  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4375  000DA8  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4376  000DAA  321C               	rrcf	___xxtofl@arg^0,f,c
  4377  000DAC                     l1219:
  4378  000DAC  FFFF               	dw	65535	; assembler added errata NOP
  4379  000DAE  0E00               	movlw	0
  4380  000DB0  141C               	andwf	___xxtofl@arg^0,w,c
  4381  000DB2  6E16               	movwf	??___xxtofl^0,c
  4382  000DB4  0E00               	movlw	0
  4383  000DB6  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4384  000DB8  6E17               	movwf	(??___xxtofl+1)^0,c
  4385  000DBA  0E00               	movlw	0
  4386  000DBC  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4387  000DBE  6E18               	movwf	(??___xxtofl+2)^0,c
  4388  000DC0  0EFF               	movlw	255
  4389  000DC2  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4390  000DC4  6E19               	movwf	(??___xxtofl+3)^0,c
  4391  000DC6  5016               	movf	??___xxtofl^0,w,c
  4392  000DC8  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4393  000DCA  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4394  000DCC  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4395  000DCE  A4D8               	btfss	status,2,c
  4396  000DD0  EFEC  F006         	goto	u2601
  4397  000DD4  EFEF  F006         	goto	u2600
  4398  000DD8                     u2601:
  4399  000DD8  FFFF               	dw	65535	; assembler added errata NOP
  4400  000DDA  EFC9  F006         	goto	l3292
  4401  000DDE                     u2600:
  4402  000DDE  FFFF               	dw	65535	; assembler added errata NOP
  4403  000DE0  EFF9  F006         	goto	l3300
  4404  000DE4                     l3298:
  4405  000DE4  FFFF               	dw	65535	; assembler added errata NOP
  4406  000DE6  061B               	decf	___xxtofl@exp^0,f,c
  4407  000DE8  90D8               	bcf	status,0,c
  4408  000DEA  361C               	rlcf	___xxtofl@arg^0,f,c
  4409  000DEC  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4410  000DEE  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4411  000DF0  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4412  000DF2                     l3300:
  4413  000DF2  FFFF               	dw	65535	; assembler added errata NOP
  4414  000DF4  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4415  000DF6  EFFF  F006         	goto	u2611
  4416  000DFA  EF02  F007         	goto	u2610
  4417  000DFE                     u2611:
  4418  000DFE  FFFF               	dw	65535	; assembler added errata NOP
  4419  000E00  EF0C  F007         	goto	l1226
  4420  000E04                     u2610:
  4421  000E04  FFFF               	dw	65535	; assembler added errata NOP
  4422  000E06  0E02               	movlw	2
  4423  000E08  601B               	cpfslt	___xxtofl@exp^0,c
  4424  000E0A  EF09  F007         	goto	u2621
  4425  000E0E  EF0C  F007         	goto	u2620
  4426  000E12                     u2621:
  4427  000E12  FFFF               	dw	65535	; assembler added errata NOP
  4428  000E14  EFF2  F006         	goto	l3298
  4429  000E18                     u2620:
  4430  000E18                     l1226:
  4431  000E18  FFFF               	dw	65535	; assembler added errata NOP
  4432  000E1A  B01B               	btfsc	___xxtofl@exp^0,0,c
  4433  000E1C  EF12  F007         	goto	u2631
  4434  000E20  EF15  F007         	goto	u2630
  4435  000E24                     u2631:
  4436  000E24  FFFF               	dw	65535	; assembler added errata NOP
  4437  000E26  EF17  F007         	goto	l3306
  4438  000E2A                     u2630:
  4439  000E2A  FFFF               	dw	65535	; assembler added errata NOP
  4440  000E2C  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4441  000E2E                     l3306:
  4442  000E2E  FFFF               	dw	65535	; assembler added errata NOP
  4443  000E30  90D8               	bcf	status,0,c
  4444  000E32  321B               	rrcf	___xxtofl@exp^0,f,c
  4445  000E34  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4446  000E38  6A17               	clrf	(??___xxtofl+1)^0,c
  4447  000E3A  6A18               	clrf	(??___xxtofl+2)^0,c
  4448  000E3C  6A19               	clrf	(??___xxtofl+3)^0,c
  4449  000E3E  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4450  000E42  6A18               	clrf	(??___xxtofl+2)^0,c
  4451  000E44  6A17               	clrf	(??___xxtofl+1)^0,c
  4452  000E46  6A16               	clrf	??___xxtofl^0,c
  4453  000E48  5016               	movf	??___xxtofl^0,w,c
  4454  000E4A  121C               	iorwf	___xxtofl@arg^0,f,c
  4455  000E4C  5017               	movf	(??___xxtofl+1)^0,w,c
  4456  000E4E  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4457  000E50  5018               	movf	(??___xxtofl+2)^0,w,c
  4458  000E52  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4459  000E54  5019               	movf	(??___xxtofl+3)^0,w,c
  4460  000E56  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4461  000E58  501A               	movf	___xxtofl@sign^0,w,c
  4462  000E5A  B4D8               	btfsc	status,2,c
  4463  000E5C  EF32  F007         	goto	u2641
  4464  000E60  EF35  F007         	goto	u2640
  4465  000E64                     u2641:
  4466  000E64  FFFF               	dw	65535	; assembler added errata NOP
  4467  000E66  EF40  F007         	goto	l3316
  4468  000E6A                     u2640:
  4469  000E6A  FFFF               	dw	65535	; assembler added errata NOP
  4470  000E6C  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4471  000E6E  EF3E  F007         	goto	u2650
  4472  000E72  EF3B  F007         	goto	u2651
  4473  000E76                     u2651:
  4474  000E76  FFFF               	dw	65535	; assembler added errata NOP
  4475  000E78  EF40  F007         	goto	l3316
  4476  000E7C                     u2650:
  4477  000E7C  FFFF               	dw	65535	; assembler added errata NOP
  4478  000E7E  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4479  000E80                     l3316:
  4480  000E80  FFFF               	dw	65535	; assembler added errata NOP
  4481  000E82  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4482  000E86  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4483  000E8A  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4484  000E8E  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  4485  000E92                     l1215:
  4486  000E92  FFFF               	dw	65535	; assembler added errata NOP
  4487  000E94  0012               	return		;funcret
  4488  000E96  FFFF               	dw	65535	; errata NOP
  4489  000E98                     __end_of___xxtofl:
  4490                           	callstack 0
  4491                           
  4492 ;; *************** function ___fltol *****************
  4493 ;; Defined at:
  4494 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;  f1              4   56[COMRAM] unsigned char 
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;  exp1            1   65[COMRAM] unsigned char 
  4499 ;;  sign1           1   64[COMRAM] unsigned char 
  4500 ;; Return value:  Size  Location     Type
  4501 ;;                  4   56[COMRAM] long 
  4502 ;; Registers used:
  4503 ;;		wreg, status,2, status,0
  4504 ;; Tracked objects:
  4505 ;;		On entry : 0/0
  4506 ;;		On exit  : 0/0
  4507 ;;		Unchanged: 0/0
  4508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4509 ;;      Params:         4       0       0       0       0       0       0
  4510 ;;      Locals:         2       0       0       0       0       0       0
  4511 ;;      Temps:          4       0       0       0       0       0       0
  4512 ;;      Totals:        10       0       0       0       0       0       0
  4513 ;;Total ram usage:       10 bytes
  4514 ;; Hardware stack levels used:    1
  4515 ;; Hardware stack levels required when called:    4
  4516 ;; This function calls:
  4517 ;;		Nothing
  4518 ;; This function is called by:
  4519 ;;		_rotateObj
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           	psect	text29
  4524  0013D6                     __ptext29:
  4525                           	callstack 0
  4526  0013D6                     ___fltol:
  4527                           	callstack 0
  4528  0013D6  FFFF               	dw	65535	; assembler added errata NOP
  4529  0013D8  343B               	rlcf	(___fltol@f1+2)^0,w,c
  4530  0013DA  343C               	rlcf	(___fltol@f1+3)^0,w,c
  4531  0013DC  6E42               	movwf	___fltol@exp1^0,c
  4532  0013DE  5042               	movf	___fltol@exp1^0,w,c
  4533  0013E0  A4D8               	btfss	status,2,c
  4534  0013E2  EFF5  F009         	goto	u2491
  4535  0013E6  EFF8  F009         	goto	u2490
  4536  0013EA                     u2491:
  4537  0013EA  FFFF               	dw	65535	; assembler added errata NOP
  4538  0013EC  EF04  F00A         	goto	l3236
  4539  0013F0                     u2490:
  4540  0013F0  FFFF               	dw	65535	; assembler added errata NOP
  4541  0013F2                     l3232:
  4542  0013F2  FFFF               	dw	65535	; assembler added errata NOP
  4543  0013F4  0E00               	movlw	0
  4544  0013F6  6E39               	movwf	?___fltol^0,c
  4545  0013F8  0E00               	movlw	0
  4546  0013FA  6E3A               	movwf	(?___fltol+1)^0,c
  4547  0013FC  0E00               	movlw	0
  4548  0013FE  6E3B               	movwf	(?___fltol+2)^0,c
  4549  001400  0E00               	movlw	0
  4550  001402  6E3C               	movwf	(?___fltol+3)^0,c
  4551  001404  EF83  F00A         	goto	l854
  4552  001408                     l3236:
  4553  001408  FFFF               	dw	65535	; assembler added errata NOP
  4554  00140A  C039  F03D         	movff	___fltol@f1,??___fltol
  4555  00140E  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  4556  001412  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  4557  001416  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  4558  00141A  0E20               	movlw	32
  4559  00141C  EF16  F00A         	goto	u2500
  4560  001420                     u2505:
  4561  001420  FFFF               	dw	65535	; assembler added errata NOP
  4562  001422  90D8               	bcf	status,0,c
  4563  001424  3240               	rrcf	(??___fltol+3)^0,f,c
  4564  001426  323F               	rrcf	(??___fltol+2)^0,f,c
  4565  001428  323E               	rrcf	(??___fltol+1)^0,f,c
  4566  00142A  323D               	rrcf	??___fltol^0,f,c
  4567  00142C                     u2500:
  4568  00142C  FFFF               	dw	65535	; assembler added errata NOP
  4569  00142E  2EE8               	decfsz	wreg,f,c
  4570  001430  EF10  F00A         	goto	u2505
  4571  001434  503D               	movf	??___fltol^0,w,c
  4572  001436  6E41               	movwf	___fltol@sign1^0,c
  4573  001438  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  4574  00143A  0EFF               	movlw	255
  4575  00143C  1639               	andwf	___fltol@f1^0,f,c
  4576  00143E  0EFF               	movlw	255
  4577  001440  163A               	andwf	(___fltol@f1+1)^0,f,c
  4578  001442  0EFF               	movlw	255
  4579  001444  163B               	andwf	(___fltol@f1+2)^0,f,c
  4580  001446  0E00               	movlw	0
  4581  001448  163C               	andwf	(___fltol@f1+3)^0,f,c
  4582  00144A  0E96               	movlw	150
  4583  00144C  5E42               	subwf	___fltol@exp1^0,f,c
  4584  00144E  BE42               	btfsc	___fltol@exp1^0,7,c
  4585  001450  EF2F  F00A         	goto	u2510
  4586  001454  EF2C  F00A         	goto	u2511
  4587  001458                     u2511:
  4588  001458  FFFF               	dw	65535	; assembler added errata NOP
  4589  00145A  EF49  F00A         	goto	l3256
  4590  00145E                     u2510:
  4591  00145E  FFFF               	dw	65535	; assembler added errata NOP
  4592  001460  5042               	movf	___fltol@exp1^0,w,c
  4593  001462  0A80               	xorlw	128
  4594  001464  0F97               	addlw	151
  4595  001466  B0D8               	btfsc	status,0,c
  4596  001468  EF38  F00A         	goto	u2521
  4597  00146C  EF3B  F00A         	goto	u2520
  4598  001470                     u2521:
  4599  001470  FFFF               	dw	65535	; assembler added errata NOP
  4600  001472  EF3E  F00A         	goto	l3252
  4601  001476                     u2520:
  4602  001476  FFFF               	dw	65535	; assembler added errata NOP
  4603  001478  EFF9  F009         	goto	l3232
  4604  00147C                     l3252:
  4605  00147C  FFFF               	dw	65535	; assembler added errata NOP
  4606  00147E  90D8               	bcf	status,0,c
  4607  001480  323C               	rrcf	(___fltol@f1+3)^0,f,c
  4608  001482  323B               	rrcf	(___fltol@f1+2)^0,f,c
  4609  001484  323A               	rrcf	(___fltol@f1+1)^0,f,c
  4610  001486  3239               	rrcf	___fltol@f1^0,f,c
  4611  001488  3E42               	incfsz	___fltol@exp1^0,f,c
  4612  00148A  EF3E  F00A         	goto	l3252
  4613  00148E  EF67  F00A         	goto	l3266
  4614  001492                     l3256:
  4615  001492  FFFF               	dw	65535	; assembler added errata NOP
  4616  001494  0E1F               	movlw	31
  4617  001496  6442               	cpfsgt	___fltol@exp1^0,c
  4618  001498  EF50  F00A         	goto	u2531
  4619  00149C  EF53  F00A         	goto	u2530
  4620  0014A0                     u2531:
  4621  0014A0  FFFF               	dw	65535	; assembler added errata NOP
  4622  0014A2  EF5D  F00A         	goto	l3264
  4623  0014A6                     u2530:
  4624  0014A6  FFFF               	dw	65535	; assembler added errata NOP
  4625  0014A8  EFF9  F009         	goto	l3232
  4626  0014AC                     l3262:
  4627  0014AC  FFFF               	dw	65535	; assembler added errata NOP
  4628  0014AE  90D8               	bcf	status,0,c
  4629  0014B0  3639               	rlcf	___fltol@f1^0,f,c
  4630  0014B2  363A               	rlcf	(___fltol@f1+1)^0,f,c
  4631  0014B4  363B               	rlcf	(___fltol@f1+2)^0,f,c
  4632  0014B6  363C               	rlcf	(___fltol@f1+3)^0,f,c
  4633  0014B8  0642               	decf	___fltol@exp1^0,f,c
  4634  0014BA                     l3264:
  4635  0014BA  FFFF               	dw	65535	; assembler added errata NOP
  4636  0014BC  5042               	movf	___fltol@exp1^0,w,c
  4637  0014BE  A4D8               	btfss	status,2,c
  4638  0014C0  EF64  F00A         	goto	u2541
  4639  0014C4  EF67  F00A         	goto	u2540
  4640  0014C8                     u2541:
  4641  0014C8  FFFF               	dw	65535	; assembler added errata NOP
  4642  0014CA  EF56  F00A         	goto	l3262
  4643  0014CE                     u2540:
  4644  0014CE                     l3266:
  4645  0014CE  FFFF               	dw	65535	; assembler added errata NOP
  4646  0014D0  5041               	movf	___fltol@sign1^0,w,c
  4647  0014D2  B4D8               	btfsc	status,2,c
  4648  0014D4  EF6E  F00A         	goto	u2551
  4649  0014D8  EF71  F00A         	goto	u2550
  4650  0014DC                     u2551:
  4651  0014DC  FFFF               	dw	65535	; assembler added errata NOP
  4652  0014DE  EF7A  F00A         	goto	l3270
  4653  0014E2                     u2550:
  4654  0014E2  FFFF               	dw	65535	; assembler added errata NOP
  4655  0014E4  1E3C               	comf	(___fltol@f1+3)^0,f,c
  4656  0014E6  1E3B               	comf	(___fltol@f1+2)^0,f,c
  4657  0014E8  1E3A               	comf	(___fltol@f1+1)^0,f,c
  4658  0014EA  6C39               	negf	___fltol@f1^0,c
  4659  0014EC  0E00               	movlw	0
  4660  0014EE  223A               	addwfc	(___fltol@f1+1)^0,f,c
  4661  0014F0  223B               	addwfc	(___fltol@f1+2)^0,f,c
  4662  0014F2  223C               	addwfc	(___fltol@f1+3)^0,f,c
  4663  0014F4                     l3270:
  4664  0014F4  FFFF               	dw	65535	; assembler added errata NOP
  4665  0014F6  C039  F039         	movff	___fltol@f1,?___fltol
  4666  0014FA  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  4667  0014FE  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  4668  001502  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  4669  001506                     l854:
  4670  001506  FFFF               	dw	65535	; assembler added errata NOP
  4671  001508  0012               	return		;funcret
  4672  00150A  FFFF               	dw	65535	; errata NOP
  4673  00150C                     __end_of___fltol:
  4674                           	callstack 0
  4675                           
  4676 ;; *************** function ___fldiv *****************
  4677 ;; Defined at:
  4678 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;  b               4   31[COMRAM] long 
  4681 ;;  a               4   35[COMRAM] long 
  4682 ;; Auto vars:     Size  Location     Type
  4683 ;;  grs             4   50[COMRAM] unsigned long 
  4684 ;;  rem             4   43[COMRAM] unsigned long 
  4685 ;;  new_exp         2   48[COMRAM] short 
  4686 ;;  aexp            1   55[COMRAM] unsigned char 
  4687 ;;  bexp            1   54[COMRAM] unsigned char 
  4688 ;;  sign            1   47[COMRAM] unsigned char 
  4689 ;; Return value:  Size  Location     Type
  4690 ;;                  4   31[COMRAM] unsigned char 
  4691 ;; Registers used:
  4692 ;;		wreg, status,2, status,0
  4693 ;; Tracked objects:
  4694 ;;		On entry : 0/0
  4695 ;;		On exit  : 0/0
  4696 ;;		Unchanged: 0/0
  4697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4698 ;;      Params:         8       0       0       0       0       0       0
  4699 ;;      Locals:        13       0       0       0       0       0       0
  4700 ;;      Temps:          4       0       0       0       0       0       0
  4701 ;;      Totals:        25       0       0       0       0       0       0
  4702 ;;Total ram usage:       25 bytes
  4703 ;; Hardware stack levels used:    1
  4704 ;; Hardware stack levels required when called:    4
  4705 ;; This function calls:
  4706 ;;		Nothing
  4707 ;; This function is called by:
  4708 ;;		_rotateObj
  4709 ;; This function uses a non-reentrant model
  4710 ;;
  4711                           
  4712                           	psect	text30
  4713  000610                     __ptext30:
  4714                           	callstack 0
  4715  000610                     ___fldiv:
  4716                           	callstack 0
  4717  000610  FFFF               	dw	65535	; assembler added errata NOP
  4718  000612  5023               	movf	(___fldiv@b+3)^0,w,c
  4719  000614  0B80               	andlw	128
  4720  000616  6E30               	movwf	___fldiv@sign^0,c
  4721  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  4722  00061A  2423               	addwf	(___fldiv@b+3)^0,w,c
  4723  00061C  6E37               	movwf	___fldiv@bexp^0,c
  4724  00061E  AE22               	btfss	(___fldiv@b+2)^0,7,c
  4725  000620  EF14  F003         	goto	u2261
  4726  000624  EF17  F003         	goto	u2260
  4727  000628                     u2261:
  4728  000628  FFFF               	dw	65535	; assembler added errata NOP
  4729  00062A  EF19  F003         	goto	l3098
  4730  00062E                     u2260:
  4731  00062E  FFFF               	dw	65535	; assembler added errata NOP
  4732  000630  8037               	bsf	___fldiv@bexp^0,0,c
  4733  000632                     l3098:
  4734  000632  FFFF               	dw	65535	; assembler added errata NOP
  4735  000634  5037               	movf	___fldiv@bexp^0,w,c
  4736  000636  B4D8               	btfsc	status,2,c
  4737  000638  EF20  F003         	goto	u2271
  4738  00063C  EF23  F003         	goto	u2270
  4739  000640                     u2271:
  4740  000640  FFFF               	dw	65535	; assembler added errata NOP
  4741  000642  EF3C  F003         	goto	l3108
  4742  000646                     u2270:
  4743  000646  FFFF               	dw	65535	; assembler added errata NOP
  4744  000648  2837               	incf	___fldiv@bexp^0,w,c
  4745  00064A  A4D8               	btfss	status,2,c
  4746  00064C  EF2A  F003         	goto	u2281
  4747  000650  EF2D  F003         	goto	u2280
  4748  000654                     u2281:
  4749  000654  FFFF               	dw	65535	; assembler added errata NOP
  4750  000656  EF36  F003         	goto	l3104
  4751  00065A                     u2280:
  4752  00065A  FFFF               	dw	65535	; assembler added errata NOP
  4753  00065C  0E00               	movlw	0
  4754  00065E  6E20               	movwf	___fldiv@b^0,c
  4755  000660  0E00               	movlw	0
  4756  000662  6E21               	movwf	(___fldiv@b+1)^0,c
  4757  000664  0E00               	movlw	0
  4758  000666  6E22               	movwf	(___fldiv@b+2)^0,c
  4759  000668  0E00               	movlw	0
  4760  00066A  6E23               	movwf	(___fldiv@b+3)^0,c
  4761  00066C                     l3104:
  4762  00066C  FFFF               	dw	65535	; assembler added errata NOP
  4763  00066E  8E22               	bsf	(___fldiv@b+2)^0,7,c
  4764  000670  0E00               	movlw	0
  4765  000672  6E23               	movwf	(___fldiv@b+3)^0,c
  4766  000674  EF45  F003         	goto	l3110
  4767  000678                     l3108:
  4768  000678  FFFF               	dw	65535	; assembler added errata NOP
  4769  00067A  0E00               	movlw	0
  4770  00067C  6E20               	movwf	___fldiv@b^0,c
  4771  00067E  0E00               	movlw	0
  4772  000680  6E21               	movwf	(___fldiv@b+1)^0,c
  4773  000682  0E00               	movlw	0
  4774  000684  6E22               	movwf	(___fldiv@b+2)^0,c
  4775  000686  0E00               	movlw	0
  4776  000688  6E23               	movwf	(___fldiv@b+3)^0,c
  4777  00068A                     l3110:
  4778  00068A  FFFF               	dw	65535	; assembler added errata NOP
  4779  00068C  5027               	movf	(___fldiv@a+3)^0,w,c
  4780  00068E  0B80               	andlw	128
  4781  000690  1A30               	xorwf	___fldiv@sign^0,f,c
  4782  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  4783  000694  2427               	addwf	(___fldiv@a+3)^0,w,c
  4784  000696  6E38               	movwf	___fldiv@aexp^0,c
  4785  000698  AE26               	btfss	(___fldiv@a+2)^0,7,c
  4786  00069A  EF51  F003         	goto	u2291
  4787  00069E  EF54  F003         	goto	u2290
  4788  0006A2                     u2291:
  4789  0006A2  FFFF               	dw	65535	; assembler added errata NOP
  4790  0006A4  EF56  F003         	goto	l3118
  4791  0006A8                     u2290:
  4792  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  4793  0006AA  8038               	bsf	___fldiv@aexp^0,0,c
  4794  0006AC                     l3118:
  4795  0006AC  FFFF               	dw	65535	; assembler added errata NOP
  4796  0006AE  5038               	movf	___fldiv@aexp^0,w,c
  4797  0006B0  B4D8               	btfsc	status,2,c
  4798  0006B2  EF5D  F003         	goto	u2301
  4799  0006B6  EF60  F003         	goto	u2300
  4800  0006BA                     u2301:
  4801  0006BA  FFFF               	dw	65535	; assembler added errata NOP
  4802  0006BC  EF79  F003         	goto	l3128
  4803  0006C0                     u2300:
  4804  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  4805  0006C2  2838               	incf	___fldiv@aexp^0,w,c
  4806  0006C4  A4D8               	btfss	status,2,c
  4807  0006C6  EF67  F003         	goto	u2311
  4808  0006CA  EF6A  F003         	goto	u2310
  4809  0006CE                     u2311:
  4810  0006CE  FFFF               	dw	65535	; assembler added errata NOP
  4811  0006D0  EF73  F003         	goto	l3124
  4812  0006D4                     u2310:
  4813  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  4814  0006D6  0E00               	movlw	0
  4815  0006D8  6E24               	movwf	___fldiv@a^0,c
  4816  0006DA  0E00               	movlw	0
  4817  0006DC  6E25               	movwf	(___fldiv@a+1)^0,c
  4818  0006DE  0E00               	movlw	0
  4819  0006E0  6E26               	movwf	(___fldiv@a+2)^0,c
  4820  0006E2  0E00               	movlw	0
  4821  0006E4  6E27               	movwf	(___fldiv@a+3)^0,c
  4822  0006E6                     l3124:
  4823  0006E6  FFFF               	dw	65535	; assembler added errata NOP
  4824  0006E8  8E26               	bsf	(___fldiv@a+2)^0,7,c
  4825  0006EA  0E00               	movlw	0
  4826  0006EC  6E27               	movwf	(___fldiv@a+3)^0,c
  4827  0006EE  EF82  F003         	goto	l3130
  4828  0006F2                     l3128:
  4829  0006F2  FFFF               	dw	65535	; assembler added errata NOP
  4830  0006F4  0E00               	movlw	0
  4831  0006F6  6E24               	movwf	___fldiv@a^0,c
  4832  0006F8  0E00               	movlw	0
  4833  0006FA  6E25               	movwf	(___fldiv@a+1)^0,c
  4834  0006FC  0E00               	movlw	0
  4835  0006FE  6E26               	movwf	(___fldiv@a+2)^0,c
  4836  000700  0E00               	movlw	0
  4837  000702  6E27               	movwf	(___fldiv@a+3)^0,c
  4838  000704                     l3130:
  4839  000704  FFFF               	dw	65535	; assembler added errata NOP
  4840  000706  5024               	movf	___fldiv@a^0,w,c
  4841  000708  1025               	iorwf	(___fldiv@a+1)^0,w,c
  4842  00070A  1026               	iorwf	(___fldiv@a+2)^0,w,c
  4843  00070C  1027               	iorwf	(___fldiv@a+3)^0,w,c
  4844  00070E  A4D8               	btfss	status,2,c
  4845  000710  EF8C  F003         	goto	u2321
  4846  000714  EF8F  F003         	goto	u2320
  4847  000718                     u2321:
  4848  000718  FFFF               	dw	65535	; assembler added errata NOP
  4849  00071A  EFA9  F003         	goto	l3142
  4850  00071E                     u2320:
  4851  00071E  FFFF               	dw	65535	; assembler added errata NOP
  4852  000720  0E00               	movlw	0
  4853  000722  6E20               	movwf	___fldiv@b^0,c
  4854  000724  0E00               	movlw	0
  4855  000726  6E21               	movwf	(___fldiv@b+1)^0,c
  4856  000728  0E00               	movlw	0
  4857  00072A  6E22               	movwf	(___fldiv@b+2)^0,c
  4858  00072C  0E00               	movlw	0
  4859  00072E  6E23               	movwf	(___fldiv@b+3)^0,c
  4860  000730  0E80               	movlw	128
  4861  000732  1222               	iorwf	(___fldiv@b+2)^0,f,c
  4862  000734  0E7F               	movlw	127
  4863  000736  1223               	iorwf	(___fldiv@b+3)^0,f,c
  4864  000738                     l3136:
  4865  000738  FFFF               	dw	65535	; assembler added errata NOP
  4866  00073A  5030               	movf	___fldiv@sign^0,w,c
  4867  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  4868  00073E  C020  F020         	movff	___fldiv@b,?___fldiv
  4869  000742  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  4870  000746  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  4871  00074A  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  4872  00074E  EF1E  F005         	goto	l1139
  4873  000752                     l3142:
  4874  000752  FFFF               	dw	65535	; assembler added errata NOP
  4875  000754  5037               	movf	___fldiv@bexp^0,w,c
  4876  000756  A4D8               	btfss	status,2,c
  4877  000758  EFB0  F003         	goto	u2331
  4878  00075C  EFB3  F003         	goto	u2330
  4879  000760                     u2331:
  4880  000760  FFFF               	dw	65535	; assembler added errata NOP
  4881  000762  EFBE  F003         	goto	l3150
  4882  000766                     u2330:
  4883  000766  FFFF               	dw	65535	; assembler added errata NOP
  4884  000768  0E00               	movlw	0
  4885  00076A  6E20               	movwf	?___fldiv^0,c
  4886  00076C  0E00               	movlw	0
  4887  00076E  6E21               	movwf	(?___fldiv+1)^0,c
  4888  000770  0E00               	movlw	0
  4889  000772  6E22               	movwf	(?___fldiv+2)^0,c
  4890  000774  0E00               	movlw	0
  4891  000776  6E23               	movwf	(?___fldiv+3)^0,c
  4892  000778  EF1E  F005         	goto	l1139
  4893  00077C                     l3150:
  4894  00077C  FFFF               	dw	65535	; assembler added errata NOP
  4895  00077E  5038               	movf	___fldiv@aexp^0,w,c
  4896  000780  C037  F028         	movff	___fldiv@bexp,??___fldiv
  4897  000784  6A29               	clrf	(??___fldiv+1)^0,c
  4898  000786  5E28               	subwf	??___fldiv^0,f,c
  4899  000788  0E00               	movlw	0
  4900  00078A  5A29               	subwfb	(??___fldiv+1)^0,f,c
  4901  00078C  0E7F               	movlw	127
  4902  00078E  2428               	addwf	??___fldiv^0,w,c
  4903  000790  6E31               	movwf	___fldiv@new_exp^0,c
  4904  000792  0E00               	movlw	0
  4905  000794  2029               	addwfc	(??___fldiv+1)^0,w,c
  4906  000796  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  4907  000798  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  4908  00079C  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  4909  0007A0  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  4910  0007A4  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  4911  0007A8  0E00               	movlw	0
  4912  0007AA  6E20               	movwf	___fldiv@b^0,c
  4913  0007AC  0E00               	movlw	0
  4914  0007AE  6E21               	movwf	(___fldiv@b+1)^0,c
  4915  0007B0  0E00               	movlw	0
  4916  0007B2  6E22               	movwf	(___fldiv@b+2)^0,c
  4917  0007B4  0E00               	movlw	0
  4918  0007B6  6E23               	movwf	(___fldiv@b+3)^0,c
  4919  0007B8  0E00               	movlw	0
  4920  0007BA  6E33               	movwf	___fldiv@grs^0,c
  4921  0007BC  0E00               	movlw	0
  4922  0007BE  6E34               	movwf	(___fldiv@grs+1)^0,c
  4923  0007C0  0E00               	movlw	0
  4924  0007C2  6E35               	movwf	(___fldiv@grs+2)^0,c
  4925  0007C4  0E00               	movlw	0
  4926  0007C6  6E36               	movwf	(___fldiv@grs+3)^0,c
  4927  0007C8  0E00               	movlw	0
  4928  0007CA  6E38               	movwf	___fldiv@aexp^0,c
  4929  0007CC  EF2A  F004         	goto	l1141
  4930  0007D0                     l3160:
  4931  0007D0  FFFF               	dw	65535	; assembler added errata NOP
  4932  0007D2  5038               	movf	___fldiv@aexp^0,w,c
  4933  0007D4  B4D8               	btfsc	status,2,c
  4934  0007D6  EFEF  F003         	goto	u2341
  4935  0007DA  EFF2  F003         	goto	u2340
  4936  0007DE                     u2341:
  4937  0007DE  FFFF               	dw	65535	; assembler added errata NOP
  4938  0007E0  EF0D  F004         	goto	l3168
  4939  0007E4                     u2340:
  4940  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  4941  0007E6  90D8               	bcf	status,0,c
  4942  0007E8  362C               	rlcf	___fldiv@rem^0,f,c
  4943  0007EA  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  4944  0007EC  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  4945  0007EE  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  4946  0007F0  90D8               	bcf	status,0,c
  4947  0007F2  3620               	rlcf	___fldiv@b^0,f,c
  4948  0007F4  3621               	rlcf	(___fldiv@b+1)^0,f,c
  4949  0007F6  3622               	rlcf	(___fldiv@b+2)^0,f,c
  4950  0007F8  3623               	rlcf	(___fldiv@b+3)^0,f,c
  4951  0007FA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  4952  0007FC  EF02  F004         	goto	u2351
  4953  000800  EF05  F004         	goto	u2350
  4954  000804                     u2351:
  4955  000804  FFFF               	dw	65535	; assembler added errata NOP
  4956  000806  EF07  F004         	goto	l1144
  4957  00080A                     u2350:
  4958  00080A  FFFF               	dw	65535	; assembler added errata NOP
  4959  00080C  8020               	bsf	___fldiv@b^0,0,c
  4960  00080E                     l1144:
  4961  00080E  FFFF               	dw	65535	; assembler added errata NOP
  4962  000810  90D8               	bcf	status,0,c
  4963  000812  3633               	rlcf	___fldiv@grs^0,f,c
  4964  000814  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  4965  000816  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  4966  000818  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  4967  00081A                     l3168:
  4968  00081A  FFFF               	dw	65535	; assembler added errata NOP
  4969  00081C  5024               	movf	___fldiv@a^0,w,c
  4970  00081E  5C2C               	subwf	___fldiv@rem^0,w,c
  4971  000820  5025               	movf	(___fldiv@a+1)^0,w,c
  4972  000822  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  4973  000824  5026               	movf	(___fldiv@a+2)^0,w,c
  4974  000826  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  4975  000828  5027               	movf	(___fldiv@a+3)^0,w,c
  4976  00082A  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  4977  00082C  A0D8               	btfss	status,0,c
  4978  00082E  EF1B  F004         	goto	u2361
  4979  000832  EF1E  F004         	goto	u2360
  4980  000836                     u2361:
  4981  000836  FFFF               	dw	65535	; assembler added errata NOP
  4982  000838  EF28  F004         	goto	l3174
  4983  00083C                     u2360:
  4984  00083C  FFFF               	dw	65535	; assembler added errata NOP
  4985  00083E  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  4986  000840  5024               	movf	___fldiv@a^0,w,c
  4987  000842  5E2C               	subwf	___fldiv@rem^0,f,c
  4988  000844  5025               	movf	(___fldiv@a+1)^0,w,c
  4989  000846  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  4990  000848  5026               	movf	(___fldiv@a+2)^0,w,c
  4991  00084A  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  4992  00084C  5027               	movf	(___fldiv@a+3)^0,w,c
  4993  00084E  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  4994  000850                     l3174:
  4995  000850  FFFF               	dw	65535	; assembler added errata NOP
  4996  000852  2A38               	incf	___fldiv@aexp^0,f,c
  4997  000854                     l1141:
  4998  000854  FFFF               	dw	65535	; assembler added errata NOP
  4999  000856  0E19               	movlw	25
  5000  000858  6438               	cpfsgt	___fldiv@aexp^0,c
  5001  00085A  EF31  F004         	goto	u2371
  5002  00085E  EF34  F004         	goto	u2370
  5003  000862                     u2371:
  5004  000862  FFFF               	dw	65535	; assembler added errata NOP
  5005  000864  EFE8  F003         	goto	l3160
  5006  000868                     u2370:
  5007  000868  FFFF               	dw	65535	; assembler added errata NOP
  5008  00086A  502C               	movf	___fldiv@rem^0,w,c
  5009  00086C  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5010  00086E  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5011  000870  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5012  000872  B4D8               	btfsc	status,2,c
  5013  000874  EF3E  F004         	goto	u2381
  5014  000878  EF41  F004         	goto	u2380
  5015  00087C                     u2381:
  5016  00087C  FFFF               	dw	65535	; assembler added errata NOP
  5017  00087E  EF5E  F004         	goto	l3186
  5018  000882                     u2380:
  5019  000882  FFFF               	dw	65535	; assembler added errata NOP
  5020  000884  8033               	bsf	___fldiv@grs^0,0,c
  5021  000886  EF5E  F004         	goto	l3186
  5022  00088A                     l3180:
  5023  00088A  FFFF               	dw	65535	; assembler added errata NOP
  5024  00088C  90D8               	bcf	status,0,c
  5025  00088E  3620               	rlcf	___fldiv@b^0,f,c
  5026  000890  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5027  000892  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5028  000894  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5029  000896  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5030  000898  EF50  F004         	goto	u2391
  5031  00089C  EF53  F004         	goto	u2390
  5032  0008A0                     u2391:
  5033  0008A0  FFFF               	dw	65535	; assembler added errata NOP
  5034  0008A2  EF55  F004         	goto	l1150
  5035  0008A6                     u2390:
  5036  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5037  0008A8  8020               	bsf	___fldiv@b^0,0,c
  5038  0008AA                     l1150:
  5039  0008AA  FFFF               	dw	65535	; assembler added errata NOP
  5040  0008AC  90D8               	bcf	status,0,c
  5041  0008AE  3633               	rlcf	___fldiv@grs^0,f,c
  5042  0008B0  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5043  0008B2  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5044  0008B4  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5045  0008B6  0631               	decf	___fldiv@new_exp^0,f,c
  5046  0008B8  A0D8               	btfss	status,0,c
  5047  0008BA  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5048  0008BC                     l3186:
  5049  0008BC  FFFF               	dw	65535	; assembler added errata NOP
  5050  0008BE  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5051  0008C0  EF64  F004         	goto	u2401
  5052  0008C4  EF67  F004         	goto	u2400
  5053  0008C8                     u2401:
  5054  0008C8  FFFF               	dw	65535	; assembler added errata NOP
  5055  0008CA  EF45  F004         	goto	l3180
  5056  0008CE                     u2400:
  5057  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5058  0008D0  0E00               	movlw	0
  5059  0008D2  6E38               	movwf	___fldiv@aexp^0,c
  5060  0008D4  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5061  0008D6  EF6F  F004         	goto	u2411
  5062  0008DA  EF72  F004         	goto	u2410
  5063  0008DE                     u2411:
  5064  0008DE  FFFF               	dw	65535	; assembler added errata NOP
  5065  0008E0  EF9D  F004         	goto	l1152
  5066  0008E4                     u2410:
  5067  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5068  0008E6  0EFF               	movlw	255
  5069  0008E8  1433               	andwf	___fldiv@grs^0,w,c
  5070  0008EA  6E28               	movwf	??___fldiv^0,c
  5071  0008EC  0EFF               	movlw	255
  5072  0008EE  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5073  0008F0  6E29               	movwf	(??___fldiv+1)^0,c
  5074  0008F2  0EFF               	movlw	255
  5075  0008F4  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5076  0008F6  6E2A               	movwf	(??___fldiv+2)^0,c
  5077  0008F8  0E7F               	movlw	127
  5078  0008FA  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5079  0008FC  6E2B               	movwf	(??___fldiv+3)^0,c
  5080  0008FE  5028               	movf	??___fldiv^0,w,c
  5081  000900  1029               	iorwf	(??___fldiv+1)^0,w,c
  5082  000902  102A               	iorwf	(??___fldiv+2)^0,w,c
  5083  000904  102B               	iorwf	(??___fldiv+3)^0,w,c
  5084  000906  B4D8               	btfsc	status,2,c
  5085  000908  EF88  F004         	goto	u2421
  5086  00090C  EF8B  F004         	goto	u2420
  5087  000910                     u2421:
  5088  000910  FFFF               	dw	65535	; assembler added errata NOP
  5089  000912  EF91  F004         	goto	l1153
  5090  000916                     u2420:
  5091  000916  FFFF               	dw	65535	; assembler added errata NOP
  5092  000918                     l3194:
  5093  000918  FFFF               	dw	65535	; assembler added errata NOP
  5094  00091A  0E01               	movlw	1
  5095  00091C  6E38               	movwf	___fldiv@aexp^0,c
  5096  00091E  EF9D  F004         	goto	l1152
  5097  000922                     l1153:
  5098  000922  FFFF               	dw	65535	; assembler added errata NOP
  5099  000924  A020               	btfss	___fldiv@b^0,0,c
  5100  000926  EF97  F004         	goto	u2431
  5101  00092A  EF9A  F004         	goto	u2430
  5102  00092E                     u2431:
  5103  00092E  FFFF               	dw	65535	; assembler added errata NOP
  5104  000930  EF9D  F004         	goto	l1152
  5105  000934                     u2430:
  5106  000934  FFFF               	dw	65535	; assembler added errata NOP
  5107  000936  EF8C  F004         	goto	l3194
  5108  00093A                     l1152:
  5109  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5110  00093C  5038               	movf	___fldiv@aexp^0,w,c
  5111  00093E  B4D8               	btfsc	status,2,c
  5112  000940  EFA4  F004         	goto	u2441
  5113  000944  EFA7  F004         	goto	u2440
  5114  000948                     u2441:
  5115  000948  FFFF               	dw	65535	; assembler added errata NOP
  5116  00094A  EFCE  F004         	goto	l3206
  5117  00094E                     u2440:
  5118  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5119  000950  0E01               	movlw	1
  5120  000952  2620               	addwf	___fldiv@b^0,f,c
  5121  000954  0E00               	movlw	0
  5122  000956  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5123  000958  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5124  00095A  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5125  00095C  A023               	btfss	(___fldiv@b+3)^0,0,c
  5126  00095E  EFB3  F004         	goto	u2451
  5127  000962  EFB6  F004         	goto	u2450
  5128  000966                     u2451:
  5129  000966  FFFF               	dw	65535	; assembler added errata NOP
  5130  000968  EFCE  F004         	goto	l3206
  5131  00096C                     u2450:
  5132  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5133  00096E  C020  F028         	movff	___fldiv@b,??___fldiv
  5134  000972  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5135  000976  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5136  00097A  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5137  00097E  342B               	rlcf	(??___fldiv+3)^0,w,c
  5138  000980  322B               	rrcf	(??___fldiv+3)^0,f,c
  5139  000982  322A               	rrcf	(??___fldiv+2)^0,f,c
  5140  000984  3229               	rrcf	(??___fldiv+1)^0,f,c
  5141  000986  3228               	rrcf	??___fldiv^0,f,c
  5142  000988  C028  F020         	movff	??___fldiv,___fldiv@b
  5143  00098C  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5144  000990  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5145  000994  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5146  000998  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5147  00099A  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5148  00099C                     l3206:
  5149  00099C  FFFF               	dw	65535	; assembler added errata NOP
  5150  00099E  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5151  0009A0  EFDA  F004         	goto	u2461
  5152  0009A4  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5153  0009A6  E109               	bnz	u2460
  5154  0009A8  2831               	incf	___fldiv@new_exp^0,w,c
  5155  0009AA  A0D8               	btfss	status,0,c
  5156  0009AC  EFDA  F004         	goto	u2461
  5157  0009B0  EFDD  F004         	goto	u2460
  5158  0009B4                     u2461:
  5159  0009B4  FFFF               	dw	65535	; assembler added errata NOP
  5160  0009B6  EFE9  F004         	goto	l3210
  5161  0009BA                     u2460:
  5162  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5163  0009BC  0E00               	movlw	0
  5164  0009BE  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5165  0009C0  6831               	setf	___fldiv@new_exp^0,c
  5166  0009C2  0E00               	movlw	0
  5167  0009C4  6E20               	movwf	___fldiv@b^0,c
  5168  0009C6  0E00               	movlw	0
  5169  0009C8  6E21               	movwf	(___fldiv@b+1)^0,c
  5170  0009CA  0E00               	movlw	0
  5171  0009CC  6E22               	movwf	(___fldiv@b+2)^0,c
  5172  0009CE  0E00               	movlw	0
  5173  0009D0  6E23               	movwf	(___fldiv@b+3)^0,c
  5174  0009D2                     l3210:
  5175  0009D2  FFFF               	dw	65535	; assembler added errata NOP
  5176  0009D4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5177  0009D6  EFF8  F004         	goto	u2470
  5178  0009DA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5179  0009DC  E106               	bnz	u2471
  5180  0009DE  0431               	decf	___fldiv@new_exp^0,w,c
  5181  0009E0  B0D8               	btfsc	status,0,c
  5182  0009E2  EFF5  F004         	goto	u2471
  5183  0009E6  EFF8  F004         	goto	u2470
  5184  0009EA                     u2471:
  5185  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  5186  0009EC  EF07  F005         	goto	l3214
  5187  0009F0                     u2470:
  5188  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5189  0009F2  0E00               	movlw	0
  5190  0009F4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5191  0009F6  0E00               	movlw	0
  5192  0009F8  6E31               	movwf	___fldiv@new_exp^0,c
  5193  0009FA  0E00               	movlw	0
  5194  0009FC  6E20               	movwf	___fldiv@b^0,c
  5195  0009FE  0E00               	movlw	0
  5196  000A00  6E21               	movwf	(___fldiv@b+1)^0,c
  5197  000A02  0E00               	movlw	0
  5198  000A04  6E22               	movwf	(___fldiv@b+2)^0,c
  5199  000A06  0E00               	movlw	0
  5200  000A08  6E23               	movwf	(___fldiv@b+3)^0,c
  5201  000A0A  0E00               	movlw	0
  5202  000A0C  6E30               	movwf	___fldiv@sign^0,c
  5203  000A0E                     l3214:
  5204  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  5205  000A10  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5206  000A14  A037               	btfss	___fldiv@bexp^0,0,c
  5207  000A16  EF0F  F005         	goto	u2481
  5208  000A1A  EF12  F005         	goto	u2480
  5209  000A1E                     u2481:
  5210  000A1E  FFFF               	dw	65535	; assembler added errata NOP
  5211  000A20  EF16  F005         	goto	l3220
  5212  000A24                     u2480:
  5213  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5214  000A26  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5215  000A28  EF18  F005         	goto	l3222
  5216  000A2C                     l3220:
  5217  000A2C  FFFF               	dw	65535	; assembler added errata NOP
  5218  000A2E  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5219  000A30                     l3222:
  5220  000A30  FFFF               	dw	65535	; assembler added errata NOP
  5221  000A32  90D8               	bcf	status,0,c
  5222  000A34  3037               	rrcf	___fldiv@bexp^0,w,c
  5223  000A36  6E23               	movwf	(___fldiv@b+3)^0,c
  5224  000A38  EF9C  F003         	goto	l3136
  5225  000A3C                     l1139:
  5226  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  5227  000A3E  0012               	return		;funcret
  5228  000A40  FFFF               	dw	65535	; errata NOP
  5229  000A42                     __end_of___fldiv:
  5230                           	callstack 0
  5231                           
  5232 ;; *************** function _releaseObj *****************
  5233 ;; Defined at:
  5234 ;;		line 575 in file "motors.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;		None
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;		None
  5239 ;; Return value:  Size  Location     Type
  5240 ;;                  1    wreg      void 
  5241 ;; Registers used:
  5242 ;;		None
  5243 ;; Tracked objects:
  5244 ;;		On entry : 0/0
  5245 ;;		On exit  : 0/0
  5246 ;;		Unchanged: 0/0
  5247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5248 ;;      Params:         0       0       0       0       0       0       0
  5249 ;;      Locals:         0       0       0       0       0       0       0
  5250 ;;      Temps:          0       0       0       0       0       0       0
  5251 ;;      Totals:         0       0       0       0       0       0       0
  5252 ;;Total ram usage:        0 bytes
  5253 ;; Hardware stack levels used:    1
  5254 ;; Hardware stack levels required when called:    4
  5255 ;; This function calls:
  5256 ;;		Nothing
  5257 ;; This function is called by:
  5258 ;;		_executeData
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           	psect	text31
  5263  0021E8                     __ptext31:
  5264                           	callstack 0
  5265  0021E8                     _releaseObj:
  5266                           	callstack 0
  5267  0021E8  FFFF               	dw	65535	; assembler added errata NOP
  5268  0021EA                     
  5269                           ;motors.c: 576:     LATDbits.LATD1 = 0;
  5270  0021EA  928C               	bcf	140,1,c	;volatile
  5271  0021EC  0012               	return		;funcret
  5272  0021EE  FFFF               	dw	65535	; errata NOP
  5273  0021F0                     __end_of_releaseObj:
  5274                           	callstack 0
  5275                           
  5276 ;; *************** function _pickObject *****************
  5277 ;; Defined at:
  5278 ;;		line 568 in file "motors.c"
  5279 ;; Parameters:    Size  Location     Type
  5280 ;;		None
  5281 ;; Auto vars:     Size  Location     Type
  5282 ;;		None
  5283 ;; Return value:  Size  Location     Type
  5284 ;;                  1    wreg      void 
  5285 ;; Registers used:
  5286 ;;		None
  5287 ;; Tracked objects:
  5288 ;;		On entry : 0/0
  5289 ;;		On exit  : 0/0
  5290 ;;		Unchanged: 0/0
  5291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5292 ;;      Params:         0       0       0       0       0       0       0
  5293 ;;      Locals:         0       0       0       0       0       0       0
  5294 ;;      Temps:          0       0       0       0       0       0       0
  5295 ;;      Totals:         0       0       0       0       0       0       0
  5296 ;;Total ram usage:        0 bytes
  5297 ;; Hardware stack levels used:    1
  5298 ;; Hardware stack levels required when called:    4
  5299 ;; This function calls:
  5300 ;;		Nothing
  5301 ;; This function is called by:
  5302 ;;		_executeData
  5303 ;; This function uses a non-reentrant model
  5304 ;;
  5305                           
  5306                           	psect	text32
  5307  0021F0                     __ptext32:
  5308                           	callstack 0
  5309  0021F0                     _pickObject:
  5310                           	callstack 0
  5311  0021F0  FFFF               	dw	65535	; assembler added errata NOP
  5312  0021F2                     
  5313                           ;motors.c: 569:     LATDbits.LATD1 = 1;
  5314  0021F2  828C               	bsf	140,1,c	;volatile
  5315  0021F4  0012               	return		;funcret
  5316  0021F6  FFFF               	dw	65535	; errata NOP
  5317  0021F8                     __end_of_pickObject:
  5318                           	callstack 0
  5319                           
  5320 ;; *************** function _moveToPoint *****************
  5321 ;; Defined at:
  5322 ;;		line 266 in file "motors.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;  x1              2   21[COMRAM] unsigned int 
  5325 ;;  y1              2   23[COMRAM] unsigned int 
  5326 ;;  x2              2   25[COMRAM] unsigned int 
  5327 ;;  y2              2   27[COMRAM] unsigned int 
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;  keepMovingY     1   32[COMRAM] unsigned char 
  5330 ;;  keepMovingX     1   31[COMRAM] unsigned char 
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  1    wreg      unsigned char 
  5333 ;; Registers used:
  5334 ;;		wreg, status,2, status,0, cstack
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5340 ;;      Params:         8       0       0       0       0       0       0
  5341 ;;      Locals:         2       0       0       0       0       0       0
  5342 ;;      Temps:          2       0       0       0       0       0       0
  5343 ;;      Totals:        12       0       0       0       0       0       0
  5344 ;;Total ram usage:       12 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; Hardware stack levels required when called:    5
  5347 ;; This function calls:
  5348 ;;		_resetStep
  5349 ;;		_setDirection
  5350 ;;		_stepCounter
  5351 ;;		_stepMade
  5352 ;; This function is called by:
  5353 ;;		_executeData
  5354 ;; This function uses a non-reentrant model
  5355 ;;
  5356                           
  5357                           	psect	text33
  5358  00108A                     __ptext33:
  5359                           	callstack 0
  5360  00108A                     _moveToPoint:
  5361                           	callstack 0
  5362  00108A  FFFF               	dw	65535	; assembler added errata NOP
  5363  00108C                     
  5364                           ;motors.c: 269:     if(x2 > maxX || y2 > maxY){
  5365  00108C  0EE9               	movlw	233
  5366  00108E  5C1A               	subwf	moveToPoint@x2^0,w,c
  5367  001090  0E03               	movlw	3
  5368  001092  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5369  001094  B0D8               	btfsc	status,0,c
  5370  001096  EF4F  F008         	goto	u2721
  5371  00109A  EF52  F008         	goto	u2720
  5372  00109E                     u2721:
  5373  00109E  FFFF               	dw	65535	; assembler added errata NOP
  5374  0010A0  EF5F  F008         	goto	l3372
  5375  0010A4                     u2720:
  5376  0010A4  FFFF               	dw	65535	; assembler added errata NOP
  5377  0010A6  0EE9               	movlw	233
  5378  0010A8  5C1C               	subwf	moveToPoint@y2^0,w,c
  5379  0010AA  0E03               	movlw	3
  5380  0010AC  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  5381  0010AE  A0D8               	btfss	status,0,c
  5382  0010B0  EF5C  F008         	goto	u2731
  5383  0010B4  EF5F  F008         	goto	u2730
  5384  0010B8                     u2731:
  5385  0010B8  FFFF               	dw	65535	; assembler added errata NOP
  5386  0010BA  EF63  F008         	goto	l3376
  5387  0010BE                     u2730:
  5388  0010BE                     l3372:
  5389  0010BE  FFFF               	dw	65535	; assembler added errata NOP
  5390                           
  5391                           ;motors.c: 270:         return(5);
  5392  0010C0  0E05               	movlw	5
  5393  0010C2  EF37  F009         	goto	l141
  5394  0010C6                     l3376:
  5395  0010C6  FFFF               	dw	65535	; assembler added errata NOP
  5396                           
  5397                           ;motors.c: 274:     if((x2 - x1) > 0){
  5398  0010C8  5016               	movf	moveToPoint@x1^0,w,c
  5399  0010CA  5C1A               	subwf	moveToPoint@x2^0,w,c
  5400  0010CC  6E1E               	movwf	??_moveToPoint^0,c
  5401  0010CE  5017               	movf	(moveToPoint@x1+1)^0,w,c
  5402  0010D0  581B               	subwfb	(moveToPoint@x2+1)^0,w,c
  5403  0010D2  6E1F               	movwf	(??_moveToPoint+1)^0,c
  5404  0010D4  501E               	movf	??_moveToPoint^0,w,c
  5405  0010D6  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  5406  0010D8  B4D8               	btfsc	status,2,c
  5407  0010DA  EF71  F008         	goto	u2741
  5408  0010DE  EF74  F008         	goto	u2740
  5409  0010E2                     u2741:
  5410  0010E2  FFFF               	dw	65535	; assembler added errata NOP
  5411  0010E4  EF7C  F008         	goto	l3380
  5412  0010E8                     u2740:
  5413  0010E8  FFFF               	dw	65535	; assembler added errata NOP
  5414  0010EA                     
  5415                           ;motors.c: 275:         setDirection(1, 0);
  5416  0010EA  0E00               	movlw	0
  5417  0010EC  6E12               	movwf	setDirection@motor^0,c
  5418  0010EE  0E01               	movlw	1
  5419  0010F0  EC3A  F00F         	call	_setDirection
  5420                           
  5421                           ;motors.c: 276:     }else{
  5422  0010F4  EF82  F008         	goto	l3382
  5423  0010F8                     l3380:
  5424  0010F8  FFFF               	dw	65535	; assembler added errata NOP
  5425                           
  5426                           ;motors.c: 277:         setDirection(0, 0);
  5427  0010FA  0E00               	movlw	0
  5428  0010FC  6E12               	movwf	setDirection@motor^0,c
  5429  0010FE  0E00               	movlw	0
  5430  001100  EC3A  F00F         	call	_setDirection
  5431  001104                     l3382:
  5432  001104  FFFF               	dw	65535	; assembler added errata NOP
  5433                           
  5434                           ;motors.c: 280:     if((y2 - y1) > 0){
  5435  001106  5018               	movf	moveToPoint@y1^0,w,c
  5436  001108  5C1C               	subwf	moveToPoint@y2^0,w,c
  5437  00110A  6E1E               	movwf	??_moveToPoint^0,c
  5438  00110C  5019               	movf	(moveToPoint@y1+1)^0,w,c
  5439  00110E  581D               	subwfb	(moveToPoint@y2+1)^0,w,c
  5440  001110  6E1F               	movwf	(??_moveToPoint+1)^0,c
  5441  001112  501E               	movf	??_moveToPoint^0,w,c
  5442  001114  101F               	iorwf	(??_moveToPoint+1)^0,w,c
  5443  001116  B4D8               	btfsc	status,2,c
  5444  001118  EF90  F008         	goto	u2751
  5445  00111C  EF93  F008         	goto	u2750
  5446  001120                     u2751:
  5447  001120  FFFF               	dw	65535	; assembler added errata NOP
  5448  001122  EF9B  F008         	goto	l3386
  5449  001126                     u2750:
  5450  001126  FFFF               	dw	65535	; assembler added errata NOP
  5451  001128                     
  5452                           ;motors.c: 281:         setDirection(1, 1);
  5453  001128  0E01               	movlw	1
  5454  00112A  6E12               	movwf	setDirection@motor^0,c
  5455  00112C  0E01               	movlw	1
  5456  00112E  EC3A  F00F         	call	_setDirection
  5457                           
  5458                           ;motors.c: 282:     }else{
  5459  001132  EFA1  F008         	goto	l3388
  5460  001136                     l3386:
  5461  001136  FFFF               	dw	65535	; assembler added errata NOP
  5462                           
  5463                           ;motors.c: 283:         setDirection(0, 1);
  5464  001138  0E01               	movlw	1
  5465  00113A  6E12               	movwf	setDirection@motor^0,c
  5466  00113C  0E00               	movlw	0
  5467  00113E  EC3A  F00F         	call	_setDirection
  5468  001142                     l3388:
  5469  001142  FFFF               	dw	65535	; assembler added errata NOP
  5470                           
  5471                           ;motors.c: 286:     unsigned char keepMovingX = 1;
  5472  001144  0E01               	movlw	1
  5473  001146  6E20               	movwf	moveToPoint@keepMovingX^0,c
  5474  001148                     
  5475                           ;motors.c: 287:     unsigned char keepMovingY = 1;
  5476  001148  0E01               	movlw	1
  5477  00114A  6E21               	movwf	moveToPoint@keepMovingY^0,c
  5478  00114C                     
  5479                           ;motors.c: 290:     T2CONbits.TMR2ON = 1;
  5480  00114C  84CA               	bsf	202,2,c	;volatile
  5481  00114E                     
  5482                           ;motors.c: 292:     tm0Error = 0;
  5483  00114E  0E00               	movlw	0
  5484  001150  6E58               	movwf	(_tm0Error+1)^0,c
  5485  001152  0E00               	movlw	0
  5486  001154  6E57               	movwf	_tm0Error^0,c
  5487  001156                     
  5488                           ;motors.c: 293:     tm0Limit = 200;
  5489  001156  0EC8               	movlw	200
  5490  001158  6E64               	movwf	_tm0Limit^0,c
  5491  00115A                     
  5492                           ;motors.c: 294:     T0CONbits.TMR0ON = 1;
  5493  00115A  8ED5               	bsf	213,7,c	;volatile
  5494                           
  5495                           ;motors.c: 296:     while(keepMovingX || keepMovingY){
  5496  00115C  EF17  F009         	goto	l3418
  5497  001160                     l3400:
  5498  001160  FFFF               	dw	65535	; assembler added errata NOP
  5499                           
  5500                           ;motors.c: 299:         if(tm0Error){
  5501  001162  5057               	movf	_tm0Error^0,w,c
  5502  001164  1058               	iorwf	(_tm0Error+1)^0,w,c
  5503  001166  B4D8               	btfsc	status,2,c
  5504  001168  EFB8  F008         	goto	u2761
  5505  00116C  EFBB  F008         	goto	u2760
  5506  001170                     u2761:
  5507  001170  FFFF               	dw	65535	; assembler added errata NOP
  5508  001172  EFC4  F008         	goto	l3406
  5509  001176                     u2760:
  5510  001176  FFFF               	dw	65535	; assembler added errata NOP
  5511  001178                     
  5512                           ;motors.c: 301:             LATAbits.LATA2 = 0;
  5513  001178  9489               	bcf	137,2,c	;volatile
  5514                           
  5515                           ;motors.c: 302:             LATBbits.LATB4 = 0;
  5516  00117A  988A               	bcf	138,4,c	;volatile
  5517  00117C                     
  5518                           ;motors.c: 303:             tm0Error = 4;
  5519  00117C  0E00               	movlw	0
  5520  00117E  6E58               	movwf	(_tm0Error+1)^0,c
  5521  001180  0E04               	movlw	4
  5522  001182  6E57               	movwf	_tm0Error^0,c
  5523                           
  5524                           ;motors.c: 304:             break;
  5525  001184  EF2B  F009         	goto	l149
  5526  001188                     l3406:
  5527  001188  FFFF               	dw	65535	; assembler added errata NOP
  5528                           
  5529                           ;motors.c: 312:         if(x1 + stepCounter() == x2){
  5530  00118A  ECB3  F010         	call	_stepCounter	;wreg free
  5531  00118E  5016               	movf	moveToPoint@x1^0,w,c
  5532  001190  2612               	addwf	?_stepCounter^0,f,c
  5533  001192  5017               	movf	(moveToPoint@x1+1)^0,w,c
  5534  001194  2213               	addwfc	(?_stepCounter+1)^0,f,c
  5535  001196  501A               	movf	moveToPoint@x2^0,w,c
  5536  001198  1812               	xorwf	?_stepCounter^0,w,c
  5537  00119A  E107               	bnz	u2771
  5538  00119C  501B               	movf	(moveToPoint@x2+1)^0,w,c
  5539  00119E  1813               	xorwf	(?_stepCounter+1)^0,w,c
  5540  0011A0  A4D8               	btfss	status,2,c
  5541  0011A2  EFD5  F008         	goto	u2771
  5542  0011A6  EFD8  F008         	goto	u2770
  5543  0011AA                     u2771:
  5544  0011AA  FFFF               	dw	65535	; assembler added errata NOP
  5545  0011AC  EFDD  F008         	goto	l150
  5546  0011B0                     u2770:
  5547  0011B0  FFFF               	dw	65535	; assembler added errata NOP
  5548  0011B2                     
  5549                           ;motors.c: 314:             keepMovingX = 0;
  5550  0011B2  0E00               	movlw	0
  5551  0011B4  6E20               	movwf	moveToPoint@keepMovingX^0,c
  5552                           
  5553                           ;motors.c: 315:         }else{
  5554  0011B6  EFDF  F008         	goto	l3410
  5555  0011BA                     l150:
  5556  0011BA  FFFF               	dw	65535	; assembler added errata NOP
  5557                           
  5558                           ;motors.c: 317:             LATAbits.LATA2 = 1;
  5559  0011BC  8489               	bsf	137,2,c	;volatile
  5560  0011BE                     l3410:
  5561  0011BE  FFFF               	dw	65535	; assembler added errata NOP
  5562                           
  5563                           ;motors.c: 321:         if(y1 + stepCounter() == y2){
  5564  0011C0  ECB3  F010         	call	_stepCounter	;wreg free
  5565  0011C4  5018               	movf	moveToPoint@y1^0,w,c
  5566  0011C6  2612               	addwf	?_stepCounter^0,f,c
  5567  0011C8  5019               	movf	(moveToPoint@y1+1)^0,w,c
  5568  0011CA  2213               	addwfc	(?_stepCounter+1)^0,f,c
  5569  0011CC  501C               	movf	moveToPoint@y2^0,w,c
  5570  0011CE  1812               	xorwf	?_stepCounter^0,w,c
  5571  0011D0  E107               	bnz	u2781
  5572  0011D2  501D               	movf	(moveToPoint@y2+1)^0,w,c
  5573  0011D4  1813               	xorwf	(?_stepCounter+1)^0,w,c
  5574  0011D6  A4D8               	btfss	status,2,c
  5575  0011D8  EFF0  F008         	goto	u2781
  5576  0011DC  EFF3  F008         	goto	u2780
  5577  0011E0                     u2781:
  5578  0011E0  FFFF               	dw	65535	; assembler added errata NOP
  5579  0011E2  EFF8  F008         	goto	l152
  5580  0011E6                     u2780:
  5581  0011E6  FFFF               	dw	65535	; assembler added errata NOP
  5582  0011E8                     
  5583                           ;motors.c: 323:             keepMovingY = 0;
  5584  0011E8  0E00               	movlw	0
  5585  0011EA  6E21               	movwf	moveToPoint@keepMovingY^0,c
  5586                           
  5587                           ;motors.c: 324:         }else{
  5588  0011EC  EFFA  F008         	goto	l3414
  5589  0011F0                     l152:
  5590  0011F0  FFFF               	dw	65535	; assembler added errata NOP
  5591                           
  5592                           ;motors.c: 326:             LATBbits.LATB4 = 1;
  5593  0011F2  888A               	bsf	138,4,c	;volatile
  5594  0011F4                     l3414:
  5595  0011F4  FFFF               	dw	65535	; assembler added errata NOP
  5596  0011F6  EC78  F010         	call	_stepMade	;wreg free
  5597  0011FA  5012               	movf	?_stepMade^0,w,c
  5598  0011FC  1013               	iorwf	(?_stepMade+1)^0,w,c
  5599  0011FE  B4D8               	btfsc	status,2,c
  5600  001200  EF04  F009         	goto	u2791
  5601  001204  EF07  F009         	goto	u2790
  5602  001208                     u2791:
  5603  001208  FFFF               	dw	65535	; assembler added errata NOP
  5604  00120A  EFFA  F008         	goto	l3414
  5605  00120E                     u2790:
  5606  00120E  FFFF               	dw	65535	; assembler added errata NOP
  5607  001210                     
  5608                           ;motors.c: 333:         LATAbits.LATA2 = 0;
  5609  001210  9489               	bcf	137,2,c	;volatile
  5610                           
  5611                           ;motors.c: 334:         LATBbits.LATB4 = 0;
  5612  001212  988A               	bcf	138,4,c	;volatile
  5613  001214                     l3416:
  5614  001214  FFFF               	dw	65535	; assembler added errata NOP
  5615  001216  EC78  F010         	call	_stepMade	;wreg free
  5616  00121A  5012               	movf	?_stepMade^0,w,c
  5617  00121C  1013               	iorwf	(?_stepMade+1)^0,w,c
  5618  00121E  B4D8               	btfsc	status,2,c
  5619  001220  EF14  F009         	goto	u2801
  5620  001224  EF17  F009         	goto	u2800
  5621  001228                     u2801:
  5622  001228  FFFF               	dw	65535	; assembler added errata NOP
  5623  00122A  EF0A  F009         	goto	l3416
  5624  00122E                     u2800:
  5625  00122E                     l3418:
  5626  00122E  FFFF               	dw	65535	; assembler added errata NOP
  5627                           
  5628                           ;motors.c: 296:     while(keepMovingX || keepMovingY){
  5629  001230  5020               	movf	moveToPoint@keepMovingX^0,w,c
  5630  001232  A4D8               	btfss	status,2,c
  5631  001234  EF1E  F009         	goto	u2811
  5632  001238  EF21  F009         	goto	u2810
  5633  00123C                     u2811:
  5634  00123C  FFFF               	dw	65535	; assembler added errata NOP
  5635  00123E  EFB0  F008         	goto	l3400
  5636  001242                     u2810:
  5637  001242  FFFF               	dw	65535	; assembler added errata NOP
  5638  001244  5021               	movf	moveToPoint@keepMovingY^0,w,c
  5639  001246  A4D8               	btfss	status,2,c
  5640  001248  EF28  F009         	goto	u2821
  5641  00124C  EF2B  F009         	goto	u2820
  5642  001250                     u2821:
  5643  001250  FFFF               	dw	65535	; assembler added errata NOP
  5644  001252  EFB0  F008         	goto	l3400
  5645  001256                     u2820:
  5646  001256                     l149:
  5647  001256  FFFF               	dw	65535	; assembler added errata NOP
  5648                           
  5649                           ;motors.c: 341:     T0CONbits.TMR0ON = 0;
  5650  001258  9ED5               	bcf	213,7,c	;volatile
  5651                           
  5652                           ;motors.c: 342:     T2CONbits.TMR2ON = 0;
  5653  00125A  94CA               	bcf	202,2,c	;volatile
  5654  00125C                     
  5655                           ;motors.c: 344:     TMR0 = 0;
  5656  00125C  0E00               	movlw	0
  5657  00125E  6ED7               	movwf	215,c	;volatile
  5658  001260  0E00               	movlw	0
  5659  001262  6ED6               	movwf	214,c	;volatile
  5660                           
  5661                           ;motors.c: 345:     TMR2 = 0;
  5662  001264  0E00               	movlw	0
  5663  001266  6ECC               	movwf	204,c	;volatile
  5664  001268                     
  5665                           ;motors.c: 348:     resetStep();
  5666  001268  ECC3  F010         	call	_resetStep	;wreg free
  5667  00126C                     
  5668                           ;motors.c: 350:     return(tm0Error);
  5669  00126C  5057               	movf	_tm0Error^0,w,c
  5670  00126E                     l141:
  5671  00126E  FFFF               	dw	65535	; assembler added errata NOP
  5672  001270  0012               	return		;funcret
  5673  001272  FFFF               	dw	65535	; errata NOP
  5674  001274                     __end_of_moveToPoint:
  5675                           	callstack 0
  5676                           
  5677 ;; *************** function _stepCounter *****************
  5678 ;; Defined at:
  5679 ;;		line 59 in file "pwm.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;		None
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;		None
  5684 ;; Return value:  Size  Location     Type
  5685 ;;                  2   17[COMRAM] unsigned int 
  5686 ;; Registers used:
  5687 ;;		None
  5688 ;; Tracked objects:
  5689 ;;		On entry : 0/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5693 ;;      Params:         2       0       0       0       0       0       0
  5694 ;;      Locals:         0       0       0       0       0       0       0
  5695 ;;      Temps:          0       0       0       0       0       0       0
  5696 ;;      Totals:         2       0       0       0       0       0       0
  5697 ;;Total ram usage:        2 bytes
  5698 ;; Hardware stack levels used:    1
  5699 ;; Hardware stack levels required when called:    4
  5700 ;; This function calls:
  5701 ;;		Nothing
  5702 ;; This function is called by:
  5703 ;;		_moveToPoint
  5704 ;; This function uses a non-reentrant model
  5705 ;;
  5706                           
  5707                           	psect	text34
  5708  002166                     __ptext34:
  5709                           	callstack 0
  5710  002166                     _stepCounter:
  5711                           	callstack 0
  5712  002166  FFFF               	dw	65535	; assembler added errata NOP
  5713  002168                     
  5714                           ;pwm.c: 60:     return pwmStep;
  5715  002168  C063  F012         	movff	_pwmStep,?_stepCounter	;volatile
  5716  00216C  6A13               	clrf	(?_stepCounter+1)^0,c
  5717  00216E  0012               	return		;funcret
  5718  002170  FFFF               	dw	65535	; errata NOP
  5719  002172                     __end_of_stepCounter:
  5720                           	callstack 0
  5721                           
  5722 ;; *************** function _liftArm *****************
  5723 ;; Defined at:
  5724 ;;		line 496 in file "motors.c"
  5725 ;; Parameters:    Size  Location     Type
  5726 ;;		None
  5727 ;; Auto vars:     Size  Location     Type
  5728 ;;		None
  5729 ;; Return value:  Size  Location     Type
  5730 ;;                  1    wreg      unsigned char 
  5731 ;; Registers used:
  5732 ;;		wreg, status,2, status,0, cstack
  5733 ;; Tracked objects:
  5734 ;;		On entry : 0/0
  5735 ;;		On exit  : 0/0
  5736 ;;		Unchanged: 0/0
  5737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5738 ;;      Params:         0       0       0       0       0       0       0
  5739 ;;      Locals:         0       0       0       0       0       0       0
  5740 ;;      Temps:          0       0       0       0       0       0       0
  5741 ;;      Totals:         0       0       0       0       0       0       0
  5742 ;;Total ram usage:        0 bytes
  5743 ;; Hardware stack levels used:    1
  5744 ;; Hardware stack levels required when called:    5
  5745 ;; This function calls:
  5746 ;;		_resetStep
  5747 ;;		_setDirection
  5748 ;;		_stepMade
  5749 ;; This function is called by:
  5750 ;;		_executeData
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           	psect	text35
  5755  001C56                     __ptext35:
  5756                           	callstack 0
  5757  001C56                     _liftArm:
  5758                           	callstack 0
  5759  001C56  FFFF               	dw	65535	; assembler added errata NOP
  5760  001C58                     
  5761                           ;motors.c: 499:     setDirection(0, 2);
  5762  001C58  0E02               	movlw	2
  5763  001C5A  6E12               	movwf	setDirection@motor^0,c
  5764  001C5C  0E00               	movlw	0
  5765  001C5E  EC3A  F00F         	call	_setDirection
  5766  001C62                     
  5767                           ;motors.c: 501:     T2CONbits.TMR2ON = 1;
  5768  001C62  84CA               	bsf	202,2,c	;volatile
  5769  001C64                     
  5770                           ;motors.c: 503:     tm0Error = 0;
  5771  001C64  0E00               	movlw	0
  5772  001C66  6E58               	movwf	(_tm0Error+1)^0,c
  5773  001C68  0E00               	movlw	0
  5774  001C6A  6E57               	movwf	_tm0Error^0,c
  5775  001C6C                     
  5776                           ;motors.c: 504:     tm0Limit = 200;
  5777  001C6C  0EC8               	movlw	200
  5778  001C6E  6E64               	movwf	_tm0Limit^0,c
  5779  001C70                     
  5780                           ;motors.c: 505:     T0CONbits.TMR0ON = 1;
  5781  001C70  8ED5               	bsf	213,7,c	;volatile
  5782                           
  5783                           ;motors.c: 509:     while(!PORTEbits.RE2){
  5784  001C72  EF6C  F00E         	goto	l190
  5785  001C76                     l3524:
  5786  001C76  FFFF               	dw	65535	; assembler added errata NOP
  5787                           
  5788                           ;motors.c: 512:         if(tm0Error){
  5789  001C78  5057               	movf	_tm0Error^0,w,c
  5790  001C7A  1058               	iorwf	(_tm0Error+1)^0,w,c
  5791  001C7C  B4D8               	btfsc	status,2,c
  5792  001C7E  EF43  F00E         	goto	u2951
  5793  001C82  EF46  F00E         	goto	u2950
  5794  001C86                     u2951:
  5795  001C86  FFFF               	dw	65535	; assembler added errata NOP
  5796  001C88  EF4E  F00E         	goto	l192
  5797  001C8C                     u2950:
  5798  001C8C  FFFF               	dw	65535	; assembler added errata NOP
  5799  001C8E                     
  5800                           ;motors.c: 514:             LATCbits.LATC2 = 0;
  5801  001C8E  948B               	bcf	139,2,c	;volatile
  5802  001C90                     
  5803                           ;motors.c: 515:             tm0Error = 6;
  5804  001C90  0E00               	movlw	0
  5805  001C92  6E58               	movwf	(_tm0Error+1)^0,c
  5806  001C94  0E06               	movlw	6
  5807  001C96  6E57               	movwf	_tm0Error^0,c
  5808                           
  5809                           ;motors.c: 516:             break;
  5810  001C98  EF75  F00E         	goto	l193
  5811  001C9C                     l192:
  5812  001C9C  FFFF               	dw	65535	; assembler added errata NOP
  5813                           
  5814                           ;motors.c: 521:         LATCbits.LATC2 = 1;
  5815  001C9E  848B               	bsf	139,2,c	;volatile
  5816  001CA0                     l3530:
  5817  001CA0  FFFF               	dw	65535	; assembler added errata NOP
  5818  001CA2  EC78  F010         	call	_stepMade	;wreg free
  5819  001CA6  5012               	movf	?_stepMade^0,w,c
  5820  001CA8  1013               	iorwf	(?_stepMade+1)^0,w,c
  5821  001CAA  B4D8               	btfsc	status,2,c
  5822  001CAC  EF5A  F00E         	goto	u2961
  5823  001CB0  EF5D  F00E         	goto	u2960
  5824  001CB4                     u2961:
  5825  001CB4  FFFF               	dw	65535	; assembler added errata NOP
  5826  001CB6  EF50  F00E         	goto	l3530
  5827  001CBA                     u2960:
  5828  001CBA  FFFF               	dw	65535	; assembler added errata NOP
  5829  001CBC                     
  5830                           ;motors.c: 527:         LATCbits.LATC2 = 0;
  5831  001CBC  948B               	bcf	139,2,c	;volatile
  5832  001CBE                     l3532:
  5833  001CBE  FFFF               	dw	65535	; assembler added errata NOP
  5834  001CC0  EC78  F010         	call	_stepMade	;wreg free
  5835  001CC4  5012               	movf	?_stepMade^0,w,c
  5836  001CC6  1013               	iorwf	(?_stepMade+1)^0,w,c
  5837  001CC8  B4D8               	btfsc	status,2,c
  5838  001CCA  EF69  F00E         	goto	u2971
  5839  001CCE  EF6C  F00E         	goto	u2970
  5840  001CD2                     u2971:
  5841  001CD2  FFFF               	dw	65535	; assembler added errata NOP
  5842  001CD4  EF5F  F00E         	goto	l3532
  5843  001CD8                     u2970:
  5844  001CD8                     l190:
  5845  001CD8  FFFF               	dw	65535	; assembler added errata NOP
  5846                           
  5847                           ;motors.c: 509:     while(!PORTEbits.RE2){
  5848  001CDA  A484               	btfss	132,2,c	;volatile
  5849  001CDC  EF72  F00E         	goto	u2981
  5850  001CE0  EF75  F00E         	goto	u2980
  5851  001CE4                     u2981:
  5852  001CE4  FFFF               	dw	65535	; assembler added errata NOP
  5853  001CE6  EF3B  F00E         	goto	l3524
  5854  001CEA                     u2980:
  5855  001CEA                     l193:
  5856  001CEA  FFFF               	dw	65535	; assembler added errata NOP
  5857                           
  5858                           ;motors.c: 534:     T0CONbits.TMR0ON = 0;
  5859  001CEC  9ED5               	bcf	213,7,c	;volatile
  5860                           
  5861                           ;motors.c: 535:     T2CONbits.TMR2ON = 0;
  5862  001CEE  94CA               	bcf	202,2,c	;volatile
  5863  001CF0                     
  5864                           ;motors.c: 537:     TMR0 = 0;
  5865  001CF0  0E00               	movlw	0
  5866  001CF2  6ED7               	movwf	215,c	;volatile
  5867  001CF4  0E00               	movlw	0
  5868  001CF6  6ED6               	movwf	214,c	;volatile
  5869                           
  5870                           ;motors.c: 538:     TMR2 = 0;
  5871  001CF8  0E00               	movlw	0
  5872  001CFA  6ECC               	movwf	204,c	;volatile
  5873  001CFC                     
  5874                           ;motors.c: 541:     resetStep();
  5875  001CFC  ECC3  F010         	call	_resetStep	;wreg free
  5876  001D00                     
  5877                           ;motors.c: 543:     return(tm0Error);
  5878  001D00  5057               	movf	_tm0Error^0,w,c
  5879  001D02  0012               	return		;funcret
  5880  001D04  FFFF               	dw	65535	; errata NOP
  5881  001D06                     __end_of_liftArm:
  5882                           	callstack 0
  5883                           
  5884 ;; *************** function _stepMade *****************
  5885 ;; Defined at:
  5886 ;;		line 47 in file "pwm.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;		None
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  temp            1   19[COMRAM] unsigned char 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  2   17[COMRAM] unsigned int 
  5893 ;; Registers used:
  5894 ;;		wreg, status,2
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5900 ;;      Params:         2       0       0       0       0       0       0
  5901 ;;      Locals:         1       0       0       0       0       0       0
  5902 ;;      Temps:          0       0       0       0       0       0       0
  5903 ;;      Totals:         3       0       0       0       0       0       0
  5904 ;;Total ram usage:        3 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    4
  5907 ;; This function calls:
  5908 ;;		Nothing
  5909 ;; This function is called by:
  5910 ;;		_resetPosition
  5911 ;;		_moveToPoint
  5912 ;;		_touchObject
  5913 ;;		_touchTherm
  5914 ;;		_liftArm
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text36
  5919  0020F0                     __ptext36:
  5920                           	callstack 0
  5921  0020F0                     _stepMade:
  5922                           	callstack 0
  5923  0020F0  FFFF               	dw	65535	; assembler added errata NOP
  5924  0020F2                     
  5925                           ;pwm.c: 48:     unsigned char temp = stepToggle;
  5926  0020F2  C062  F014         	movff	_stepToggle,stepMade@temp	;volatile
  5927  0020F6                     
  5928                           ;pwm.c: 50:     stepToggle = 0;
  5929  0020F6  0E00               	movlw	0
  5930  0020F8  6E62               	movwf	_stepToggle^0,c	;volatile
  5931  0020FA                     
  5932                           ;pwm.c: 52:     return temp;
  5933  0020FA  C014  F012         	movff	stepMade@temp,?_stepMade
  5934  0020FE  6A13               	clrf	(?_stepMade+1)^0,c
  5935  002100  0012               	return		;funcret
  5936  002102  FFFF               	dw	65535	; errata NOP
  5937  002104                     __end_of_stepMade:
  5938                           	callstack 0
  5939                           
  5940 ;; *************** function _setDirection *****************
  5941 ;; Defined at:
  5942 ;;		line 117 in file "motors.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;  direction       1    wreg     unsigned char 
  5945 ;;  motor           1   17[COMRAM] unsigned char 
  5946 ;; Auto vars:     Size  Location     Type
  5947 ;;  direction       1   20[COMRAM] unsigned char 
  5948 ;; Return value:  Size  Location     Type
  5949 ;;                  1    wreg      void 
  5950 ;; Registers used:
  5951 ;;		wreg, status,2, status,0
  5952 ;; Tracked objects:
  5953 ;;		On entry : 0/0
  5954 ;;		On exit  : 0/0
  5955 ;;		Unchanged: 0/0
  5956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5957 ;;      Params:         1       0       0       0       0       0       0
  5958 ;;      Locals:         1       0       0       0       0       0       0
  5959 ;;      Temps:          2       0       0       0       0       0       0
  5960 ;;      Totals:         4       0       0       0       0       0       0
  5961 ;;Total ram usage:        4 bytes
  5962 ;; Hardware stack levels used:    1
  5963 ;; Hardware stack levels required when called:    4
  5964 ;; This function calls:
  5965 ;;		Nothing
  5966 ;; This function is called by:
  5967 ;;		_resetPosition
  5968 ;;		_moveToPoint
  5969 ;;		_touchObject
  5970 ;;		_touchTherm
  5971 ;;		_liftArm
  5972 ;; This function uses a non-reentrant model
  5973 ;;
  5974                           
  5975                           	psect	text37
  5976  001E74                     __ptext37:
  5977                           	callstack 0
  5978  001E74                     _setDirection:
  5979                           	callstack 0
  5980  001E74  FFFF               	dw	65535	; assembler added errata NOP
  5981                           
  5982                           ;incstack = 0
  5983                           ;setDirection@direction stored from wreg
  5984  001E76  6E15               	movwf	setDirection@direction^0,c
  5985  001E78                     
  5986                           ;motors.c: 118:     switch(motor){
  5987  001E78  EF56  F00F         	goto	l3062
  5988  001E7C                     l3054:
  5989  001E7C  FFFF               	dw	65535	; assembler added errata NOP
  5990                           
  5991                           ;motors.c: 120:             LATAbits.LATA1 = direction;
  5992  001E7E  B015               	btfsc	setDirection@direction^0,0,c
  5993  001E80  D002               	bra	u2235
  5994  001E82  9289               	bcf	137,1,c	;volatile
  5995  001E84  D001               	bra	u2236
  5996  001E86                     u2235:
  5997  001E86  8289               	bsf	137,1,c	;volatile
  5998  001E88                     u2236:
  5999                           
  6000                           ;motors.c: 121:             break;
  6001  001E88  EF71  F00F         	goto	l101
  6002  001E8C                     l3056:
  6003  001E8C  FFFF               	dw	65535	; assembler added errata NOP
  6004                           
  6005                           ;motors.c: 123:             LATBbits.LATB3 = direction;
  6006  001E8E  B015               	btfsc	setDirection@direction^0,0,c
  6007  001E90  D002               	bra	u2245
  6008  001E92  968A               	bcf	138,3,c	;volatile
  6009  001E94  D001               	bra	u2246
  6010  001E96                     u2245:
  6011  001E96  868A               	bsf	138,3,c	;volatile
  6012  001E98                     u2246:
  6013                           
  6014                           ;motors.c: 124:             break;
  6015  001E98  EF71  F00F         	goto	l101
  6016  001E9C                     l3058:
  6017  001E9C  FFFF               	dw	65535	; assembler added errata NOP
  6018                           
  6019                           ;motors.c: 126:             LATCbits.LATC1 = direction;
  6020  001E9E  B015               	btfsc	setDirection@direction^0,0,c
  6021  001EA0  D002               	bra	u2255
  6022  001EA2  928B               	bcf	139,1,c	;volatile
  6023  001EA4  D001               	bra	u2256
  6024  001EA6                     u2255:
  6025  001EA6  828B               	bsf	139,1,c	;volatile
  6026  001EA8                     u2256:
  6027                           
  6028                           ;motors.c: 127:             break;
  6029  001EA8  EF71  F00F         	goto	l101
  6030  001EAC                     l3062:
  6031  001EAC  FFFF               	dw	65535	; assembler added errata NOP
  6032  001EAE  5012               	movf	setDirection@motor^0,w,c
  6033  001EB0  6E13               	movwf	??_setDirection^0,c
  6034  001EB2  6A14               	clrf	(??_setDirection+1)^0,c
  6035                           
  6036                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6037                           ; Switch size 1, requested type "simple"
  6038                           ; Number of cases is 1, Range of values is 0 to 0
  6039                           ; switch strategies available:
  6040                           ; Name         Instructions Cycles
  6041                           ; simple_byte            4     3 (average)
  6042                           ;	Chosen strategy is simple_byte
  6043  001EB4  5014               	movf	(??_setDirection+1)^0,w,c
  6044  001EB6  0A00               	xorlw	0	; case 0
  6045  001EB8  B4D8               	btfsc	status,2,c
  6046  001EBA  EF61  F00F         	goto	l4012
  6047  001EBE  EF71  F00F         	goto	l101
  6048  001EC2                     l4012:
  6049  001EC2  FFFF               	dw	65535	; assembler added errata NOP
  6050                           
  6051                           ; Switch size 1, requested type "simple"
  6052                           ; Number of cases is 3, Range of values is 0 to 2
  6053                           ; switch strategies available:
  6054                           ; Name         Instructions Cycles
  6055                           ; simple_byte           10     6 (average)
  6056                           ;	Chosen strategy is simple_byte
  6057  001EC4  5013               	movf	??_setDirection^0,w,c
  6058  001EC6  0A00               	xorlw	0	; case 0
  6059  001EC8  B4D8               	btfsc	status,2,c
  6060  001ECA  EF3E  F00F         	goto	l3054
  6061  001ECE  0A01               	xorlw	1	; case 1
  6062  001ED0  B4D8               	btfsc	status,2,c
  6063  001ED2  EF46  F00F         	goto	l3056
  6064  001ED6  0A03               	xorlw	3	; case 2
  6065  001ED8  B4D8               	btfsc	status,2,c
  6066  001EDA  EF4E  F00F         	goto	l3058
  6067  001EDE  EF71  F00F         	goto	l101
  6068  001EE2                     l101:
  6069  001EE2  FFFF               	dw	65535	; assembler added errata NOP
  6070  001EE4  0012               	return		;funcret
  6071  001EE6  FFFF               	dw	65535	; errata NOP
  6072  001EE8                     __end_of_setDirection:
  6073                           	callstack 0
  6074                           
  6075 ;; *************** function _resetStep *****************
  6076 ;; Defined at:
  6077 ;;		line 66 in file "pwm.c"
  6078 ;; Parameters:    Size  Location     Type
  6079 ;;		None
  6080 ;; Auto vars:     Size  Location     Type
  6081 ;;		None
  6082 ;; Return value:  Size  Location     Type
  6083 ;;                  1    wreg      void 
  6084 ;; Registers used:
  6085 ;;		wreg, status,2
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6091 ;;      Params:         0       0       0       0       0       0       0
  6092 ;;      Locals:         0       0       0       0       0       0       0
  6093 ;;      Temps:          0       0       0       0       0       0       0
  6094 ;;      Totals:         0       0       0       0       0       0       0
  6095 ;;Total ram usage:        0 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; Hardware stack levels required when called:    4
  6098 ;; This function calls:
  6099 ;;		Nothing
  6100 ;; This function is called by:
  6101 ;;		_resetPosition
  6102 ;;		_moveToPoint
  6103 ;;		_touchObject
  6104 ;;		_touchTherm
  6105 ;;		_liftArm
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109                           	psect	text38
  6110  002186                     __ptext38:
  6111                           	callstack 0
  6112  002186                     _resetStep:
  6113                           	callstack 0
  6114  002186  FFFF               	dw	65535	; assembler added errata NOP
  6115  002188                     
  6116                           ;pwm.c: 67:     pwmStep = 0;
  6117  002188  0E00               	movlw	0
  6118  00218A  6E63               	movwf	_pwmStep^0,c	;volatile
  6119  00218C  0012               	return		;funcret
  6120  00218E  FFFF               	dw	65535	; errata NOP
  6121  002190                     __end_of_resetStep:
  6122                           	callstack 0
  6123                           
  6124 ;; *************** function _getData *****************
  6125 ;; Defined at:
  6126 ;;		line 207 in file "usart.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;		None
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;		None
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  2   17[COMRAM] PTR struct .
  6133 ;; Registers used:
  6134 ;;		wreg, status,2, status,0
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6140 ;;      Params:         2       0       0       0       0       0       0
  6141 ;;      Locals:         0       0       0       0       0       0       0
  6142 ;;      Temps:          0       0       0       0       0       0       0
  6143 ;;      Totals:         2       0       0       0       0       0       0
  6144 ;;Total ram usage:        2 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    4
  6147 ;; This function calls:
  6148 ;;		Nothing
  6149 ;; This function is called by:
  6150 ;;		_executeData
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           	psect	text39
  6155  002116                     __ptext39:
  6156                           	callstack 0
  6157  002116                     _getData:
  6158                           	callstack 0
  6159  002116  FFFF               	dw	65535	; assembler added errata NOP
  6160  002118                     
  6161                           ;usart.c: 208:     return(&dataSequence[0]);
  6162  002118  0EDC               	movlw	low _dataSequence
  6163  00211A  6E12               	movwf	?_getData^0,c
  6164  00211C  0E00               	movlw	high _dataSequence
  6165  00211E  6E13               	movwf	(?_getData+1)^0,c
  6166  002120  0012               	return		;funcret
  6167  002122  FFFF               	dw	65535	; errata NOP
  6168  002124                     __end_of_getData:
  6169                           	callstack 0
  6170                           
  6171 ;; *************** function _clearTM0 *****************
  6172 ;; Defined at:
  6173 ;;		line 30 in file "motors.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;		None
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;		None
  6178 ;; Return value:  Size  Location     Type
  6179 ;;                  1    wreg      void 
  6180 ;; Registers used:
  6181 ;;		wreg, status,2
  6182 ;; Tracked objects:
  6183 ;;		On entry : 0/0
  6184 ;;		On exit  : 0/0
  6185 ;;		Unchanged: 0/0
  6186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6187 ;;      Params:         0       0       0       0       0       0       0
  6188 ;;      Locals:         0       0       0       0       0       0       0
  6189 ;;      Temps:          0       0       0       0       0       0       0
  6190 ;;      Totals:         0       0       0       0       0       0       0
  6191 ;;Total ram usage:        0 bytes
  6192 ;; Hardware stack levels used:    1
  6193 ;; Hardware stack levels required when called:    4
  6194 ;; This function calls:
  6195 ;;		Nothing
  6196 ;; This function is called by:
  6197 ;;		_main
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           	psect	text40
  6202  002124                     __ptext40:
  6203                           	callstack 0
  6204  002124                     _clearTM0:
  6205                           	callstack 0
  6206  002124  FFFF               	dw	65535	; assembler added errata NOP
  6207  002126                     
  6208                           ;motors.c: 31:     tm0Error = 0;
  6209  002126  0E00               	movlw	0
  6210  002128  6E58               	movwf	(_tm0Error+1)^0,c
  6211  00212A  0E00               	movlw	0
  6212  00212C  6E57               	movwf	_tm0Error^0,c
  6213  00212E  0012               	return		;funcret
  6214  002130  FFFF               	dw	65535	; errata NOP
  6215  002132                     __end_of_clearTM0:
  6216                           	callstack 0
  6217                           
  6218 ;; *************** function _isr *****************
  6219 ;; Defined at:
  6220 ;;		line 17 in file "interrupt.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;		None
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;  temp            1   16[COMRAM] unsigned char 
  6225 ;; Return value:  Size  Location     Type
  6226 ;;                  1    wreg      void 
  6227 ;; Registers used:
  6228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6229 ;; Tracked objects:
  6230 ;;		On entry : 0/0
  6231 ;;		On exit  : 0/0
  6232 ;;		Unchanged: 0/0
  6233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6234 ;;      Params:         0       0       0       0       0       0       0
  6235 ;;      Locals:         1       0       0       0       0       0       0
  6236 ;;      Temps:          6       0       0       0       0       0       0
  6237 ;;      Totals:         7       0       0       0       0       0       0
  6238 ;;Total ram usage:        7 bytes
  6239 ;; Hardware stack levels used:    1
  6240 ;; Hardware stack levels required when called:    3
  6241 ;; This function calls:
  6242 ;;		_increaseStep
  6243 ;;		_retPeriod
  6244 ;;		_setThermRel
  6245 ;;		_setTouchRel
  6246 ;;		_storeData
  6247 ;;		_toggleStep
  6248 ;;		_whatsTM0Limit
  6249 ;;		_writeTM0
  6250 ;; This function is called by:
  6251 ;;		Interrupt level 2
  6252 ;; This function uses a non-reentrant model
  6253 ;;
  6254                           
  6255                           	psect	intcode
  6256  000008                     __pintcode:
  6257                           	callstack 0
  6258  000008                     _isr:
  6259                           	callstack 0
  6260  000008  FFFF               	dw	65535	; assembler added errata NOP
  6261                           
  6262                           ;incstack = 0
  6263  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6264  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6265  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6266  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6267  000018  CFF4 F010          	movff	prodh,??_isr+5
  6268  00001C                     
  6269                           ;interrupt.c: 18:     static unsigned int single_cycle = 0;;interrupt.c: 19:     static 
      +                          unsigned char tm0Count = 0;;interrupt.c: 20:     static unsigned char completeStep = 0;;
      +                          interrupt.c: 23:     if(INTCONbits.T0IF){
  6270  00001C  A4F2               	btfss	242,2,c	;volatile
  6271  00001E  EF13  F000         	goto	i2u213_41
  6272  000022  EF16  F000         	goto	i2u213_40
  6273  000026                     i2u213_41:
  6274  000026  FFFF               	dw	65535	; assembler added errata NOP
  6275  000028  EF2C  F000         	goto	i2l2978
  6276  00002C                     i2u213_40:
  6277  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6278  00002E                     
  6279                           ;interrupt.c: 24:         INTCONbits.T0IF = 0;
  6280  00002E  94F2               	bcf	242,2,c	;volatile
  6281  000030                     
  6282                           ;interrupt.c: 27:         tm0Count++;
  6283  000030  2A5F               	incf	isr@tm0Count^0,f,c
  6284  000032                     
  6285                           ;interrupt.c: 29:         if(tm0Count >= whatsTM0Limit()){
  6286  000032  ECFC  F010         	call	_whatsTM0Limit	;wreg free
  6287  000036  6E0B               	movwf	??_isr^0,c
  6288  000038  500B               	movf	??_isr^0,w,c
  6289  00003A  5C5F               	subwf	isr@tm0Count^0,w,c
  6290  00003C  A0D8               	btfss	status,0,c
  6291  00003E  EF23  F000         	goto	i2u214_41
  6292  000042  EF26  F000         	goto	i2u214_40
  6293  000046                     i2u214_41:
  6294  000046  FFFF               	dw	65535	; assembler added errata NOP
  6295  000048  EF2C  F000         	goto	i2l2978
  6296  00004C                     i2u214_40:
  6297  00004C  FFFF               	dw	65535	; assembler added errata NOP
  6298  00004E                     
  6299                           ;interrupt.c: 30:             T0CONbits.TMR0ON = 0;
  6300  00004E  9ED5               	bcf	213,7,c	;volatile
  6301  000050                     
  6302                           ;interrupt.c: 31:             tm0Count = 0;
  6303  000050  0E00               	movlw	0
  6304  000052  6E5F               	movwf	isr@tm0Count^0,c
  6305  000054                     
  6306                           ;interrupt.c: 32:             writeTM0();
  6307  000054  EC99  F010         	call	_writeTM0	;wreg free
  6308  000058                     i2l2978:
  6309  000058  FFFF               	dw	65535	; assembler added errata NOP
  6310                           
  6311                           ;interrupt.c: 37:     if(PIR1bits.TMR2IF){
  6312  00005A  A29E               	btfss	158,1,c	;volatile
  6313  00005C  EF32  F000         	goto	i2u215_41
  6314  000060  EF35  F000         	goto	i2u215_40
  6315  000064                     i2u215_41:
  6316  000064  FFFF               	dw	65535	; assembler added errata NOP
  6317  000066  EF63  F000         	goto	i2l2998
  6318  00006A                     i2u215_40:
  6319  00006A  FFFF               	dw	65535	; assembler added errata NOP
  6320  00006C                     
  6321                           ;interrupt.c: 38:         PIR1bits.TMR2IF = 0;
  6322  00006C  929E               	bcf	158,1,c	;volatile
  6323  00006E                     
  6324                           ;interrupt.c: 39:         single_cycle++;
  6325  00006E  4A4F               	infsnz	isr@single_cycle^0,f,c
  6326  000070  2A50               	incf	(isr@single_cycle+1)^0,f,c
  6327  000072                     
  6328                           ;interrupt.c: 42:         if(single_cycle > retPeriod()){
  6329  000072  ECA0  F010         	call	_retPeriod	;wreg free
  6330  000076  504F               	movf	isr@single_cycle^0,w,c
  6331  000078  5C01               	subwf	?_retPeriod^0,w,c
  6332  00007A  5050               	movf	(isr@single_cycle+1)^0,w,c
  6333  00007C  5802               	subwfb	(?_retPeriod+1)^0,w,c
  6334  00007E  B0D8               	btfsc	status,0,c
  6335  000080  EF44  F000         	goto	i2u216_41
  6336  000084  EF47  F000         	goto	i2u216_40
  6337  000088                     i2u216_41:
  6338  000088  FFFF               	dw	65535	; assembler added errata NOP
  6339  00008A  EF63  F000         	goto	i2l2998
  6340  00008E                     i2u216_40:
  6341  00008E  FFFF               	dw	65535	; assembler added errata NOP
  6342  000090                     
  6343                           ;interrupt.c: 43:             completeStep++;
  6344  000090  2A5E               	incf	isr@completeStep^0,f,c
  6345  000092                     
  6346                           ;interrupt.c: 46:             if(completeStep != 0 && !(completeStep % 2)){
  6347  000092  505E               	movf	isr@completeStep^0,w,c
  6348  000094  B4D8               	btfsc	status,2,c
  6349  000096  EF4F  F000         	goto	i2u217_41
  6350  00009A  EF52  F000         	goto	i2u217_40
  6351  00009E                     i2u217_41:
  6352  00009E  FFFF               	dw	65535	; assembler added errata NOP
  6353  0000A0  EF60  F000         	goto	i2l2996
  6354  0000A4                     i2u217_40:
  6355  0000A4  FFFF               	dw	65535	; assembler added errata NOP
  6356  0000A6  B05E               	btfsc	isr@completeStep^0,0,c
  6357  0000A8  EF58  F000         	goto	i2u218_41
  6358  0000AC  EF5B  F000         	goto	i2u218_40
  6359  0000B0                     i2u218_41:
  6360  0000B0  FFFF               	dw	65535	; assembler added errata NOP
  6361  0000B2  EF60  F000         	goto	i2l2996
  6362  0000B6                     i2u218_40:
  6363  0000B6  FFFF               	dw	65535	; assembler added errata NOP
  6364  0000B8                     
  6365                           ;interrupt.c: 48:                 completeStep = 0;
  6366  0000B8  0E00               	movlw	0
  6367  0000BA  6E5E               	movwf	isr@completeStep^0,c
  6368  0000BC                     
  6369                           ;interrupt.c: 51:                 increaseStep();
  6370  0000BC  EC00  F011         	call	_increaseStep	;wreg free
  6371  0000C0                     i2l2996:
  6372  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  6373                           
  6374                           ;interrupt.c: 56:             toggleStep();
  6375  0000C2  ECC8  F010         	call	_toggleStep	;wreg free
  6376  0000C6                     i2l2998:
  6377  0000C6  FFFF               	dw	65535	; assembler added errata NOP
  6378                           
  6379                           ;interrupt.c: 61:     if(PIR1bits.ADIF){
  6380  0000C8  AC9E               	btfss	158,6,c	;volatile
  6381  0000CA  EF69  F000         	goto	i2u219_41
  6382  0000CE  EF6C  F000         	goto	i2u219_40
  6383  0000D2                     i2u219_41:
  6384  0000D2  FFFF               	dw	65535	; assembler added errata NOP
  6385  0000D4  EF99  F000         	goto	i2l3010
  6386  0000D8                     i2u219_40:
  6387  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  6388  0000DA                     
  6389                           ;interrupt.c: 62:         PIR1bits.ADIF = 0;
  6390  0000DA  9C9E               	bcf	158,6,c	;volatile
  6391                           
  6392                           ;interrupt.c: 65:         ADC_res = ADRESL;
  6393  0000DC  CFC3 F051          	movff	4035,_ADC_res	;volatile
  6394  0000E0  6A52               	clrf	(_ADC_res+1)^0,c
  6395  0000E2                     
  6396                           ;interrupt.c: 66:         ADC_res |= (ADRESH << 8);
  6397  0000E2  50C4               	movf	196,w,c	;volatile
  6398  0000E4  6E0C               	movwf	(??_isr+1)^0,c
  6399  0000E6  6A0B               	clrf	??_isr^0,c
  6400  0000E8  500B               	movf	??_isr^0,w,c
  6401  0000EA  1251               	iorwf	_ADC_res^0,f,c
  6402  0000EC  500C               	movf	(??_isr+1)^0,w,c
  6403  0000EE  1252               	iorwf	(_ADC_res+1)^0,f,c
  6404                           
  6405                           ;interrupt.c: 69:         if(ADC_res > therm_pressure){
  6406  0000F0  0451               	decf	_ADC_res^0,w,c
  6407  0000F2  0E04               	movlw	4
  6408  0000F4  5852               	subwfb	(_ADC_res+1)^0,w,c
  6409  0000F6  A0D8               	btfss	status,0,c
  6410  0000F8  EF80  F000         	goto	i2u220_41
  6411  0000FC  EF83  F000         	goto	i2u220_40
  6412  000100                     i2u220_41:
  6413  000100  FFFF               	dw	65535	; assembler added errata NOP
  6414  000102  EF8A  F000         	goto	i2l3006
  6415  000106                     i2u220_40:
  6416  000106  FFFF               	dw	65535	; assembler added errata NOP
  6417  000108                     
  6418                           ;interrupt.c: 71:             setTouchRel();
  6419  000108  ECCD  F010         	call	_setTouchRel	;wreg free
  6420                           
  6421                           ;interrupt.c: 72:             setThermRel();
  6422  00010C  ECD2  F010         	call	_setThermRel	;wreg free
  6423                           
  6424                           ;interrupt.c: 73:         }else if(ADC_res > touch_pressure){
  6425  000110  EF99  F000         	goto	i2l3010
  6426  000114                     i2l3006:
  6427  000114  FFFF               	dw	65535	; assembler added errata NOP
  6428  000116  0451               	decf	_ADC_res^0,w,c
  6429  000118  0E02               	movlw	2
  6430  00011A  5852               	subwfb	(_ADC_res+1)^0,w,c
  6431  00011C  A0D8               	btfss	status,0,c
  6432  00011E  EF93  F000         	goto	i2u221_41
  6433  000122  EF96  F000         	goto	i2u221_40
  6434  000126                     i2u221_41:
  6435  000126  FFFF               	dw	65535	; assembler added errata NOP
  6436  000128  EF99  F000         	goto	i2l3010
  6437  00012C                     i2u221_40:
  6438  00012C  FFFF               	dw	65535	; assembler added errata NOP
  6439  00012E                     
  6440                           ;interrupt.c: 75:             setTouchRel();
  6441  00012E  ECCD  F010         	call	_setTouchRel	;wreg free
  6442  000132                     i2l3010:
  6443  000132  FFFF               	dw	65535	; assembler added errata NOP
  6444                           
  6445                           ;interrupt.c: 80:     if(PIR1bits.RC1IF){
  6446  000134  AA9E               	btfss	158,5,c	;volatile
  6447  000136  EF9F  F000         	goto	i2u222_41
  6448  00013A  EFA2  F000         	goto	i2u222_40
  6449  00013E                     i2u222_41:
  6450  00013E  FFFF               	dw	65535	; assembler added errata NOP
  6451  000140  EFA9  F000         	goto	i2l443
  6452  000144                     i2u222_40:
  6453  000144  FFFF               	dw	65535	; assembler added errata NOP
  6454  000146                     
  6455                           ;interrupt.c: 81:         PIR1bits.RC1IF = 0;
  6456  000146  9A9E               	bcf	158,5,c	;volatile
  6457                           
  6458                           ;interrupt.c: 84:         unsigned char temp = RCREG1;
  6459  000148  CFAE F011          	movff	4014,isr@temp	;volatile
  6460  00014C                     
  6461                           ;interrupt.c: 86:         storeData(temp);
  6462  00014C  5011               	movf	isr@temp^0,w,c
  6463  00014E  EC3A  F009         	call	_storeData
  6464  000152                     i2l443:
  6465  000152  FFFF               	dw	65535	; assembler added errata NOP
  6466  000154  C010  FFF4         	movff	??_isr+5,prodh
  6467  000158  C00F  FFF3         	movff	??_isr+4,prodl
  6468  00015C  C00E  FFDA         	movff	??_isr+3,fsr2h
  6469  000160  C00D  FFD9         	movff	??_isr+2,fsr2l
  6470  000164  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6471  000166  0011               	retfie		f
  6472  000168  FFFF               	dw	65535	; errata NOP
  6473  00016A                     __end_of_isr:
  6474                           	callstack 0
  6475                           
  6476 ;; *************** function _writeTM0 *****************
  6477 ;; Defined at:
  6478 ;;		line 23 in file "motors.c"
  6479 ;; Parameters:    Size  Location     Type
  6480 ;;		None
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;		None
  6483 ;; Return value:  Size  Location     Type
  6484 ;;                  1    wreg      void 
  6485 ;; Registers used:
  6486 ;;		wreg, status,2
  6487 ;; Tracked objects:
  6488 ;;		On entry : 0/0
  6489 ;;		On exit  : 0/0
  6490 ;;		Unchanged: 0/0
  6491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6492 ;;      Params:         0       0       0       0       0       0       0
  6493 ;;      Locals:         0       0       0       0       0       0       0
  6494 ;;      Temps:          0       0       0       0       0       0       0
  6495 ;;      Totals:         0       0       0       0       0       0       0
  6496 ;;Total ram usage:        0 bytes
  6497 ;; Hardware stack levels used:    1
  6498 ;; This function calls:
  6499 ;;		Nothing
  6500 ;; This function is called by:
  6501 ;;		_isr
  6502 ;; This function uses a non-reentrant model
  6503 ;;
  6504                           
  6505                           	psect	text42
  6506  002132                     __ptext42:
  6507                           	callstack 0
  6508  002132                     _writeTM0:
  6509                           	callstack 0
  6510  002132  FFFF               	dw	65535	; assembler added errata NOP
  6511  002134                     
  6512                           ;motors.c: 24:     tm0Error = 1;
  6513  002134  0E00               	movlw	0
  6514  002136  6E58               	movwf	(_tm0Error+1)^0,c
  6515  002138  0E01               	movlw	1
  6516  00213A  6E57               	movwf	_tm0Error^0,c
  6517  00213C  0012               	return		;funcret
  6518  00213E  FFFF               	dw	65535	; errata NOP
  6519  002140                     __end_of_writeTM0:
  6520                           	callstack 0
  6521                           
  6522 ;; *************** function _whatsTM0Limit *****************
  6523 ;; Defined at:
  6524 ;;		line 37 in file "motors.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;		None
  6527 ;; Auto vars:     Size  Location     Type
  6528 ;;		None
  6529 ;; Return value:  Size  Location     Type
  6530 ;;                  1    wreg      unsigned char 
  6531 ;; Registers used:
  6532 ;;		wreg, status,2
  6533 ;; Tracked objects:
  6534 ;;		On entry : 0/0
  6535 ;;		On exit  : 0/0
  6536 ;;		Unchanged: 0/0
  6537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6538 ;;      Params:         0       0       0       0       0       0       0
  6539 ;;      Locals:         0       0       0       0       0       0       0
  6540 ;;      Temps:          0       0       0       0       0       0       0
  6541 ;;      Totals:         0       0       0       0       0       0       0
  6542 ;;Total ram usage:        0 bytes
  6543 ;; Hardware stack levels used:    1
  6544 ;; This function calls:
  6545 ;;		Nothing
  6546 ;; This function is called by:
  6547 ;;		_isr
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           	psect	text43
  6552  0021F8                     __ptext43:
  6553                           	callstack 0
  6554  0021F8                     _whatsTM0Limit:
  6555                           	callstack 0
  6556  0021F8  FFFF               	dw	65535	; assembler added errata NOP
  6557  0021FA                     
  6558                           ;motors.c: 38:     return(tm0Limit);
  6559  0021FA  5064               	movf	_tm0Limit^0,w,c
  6560  0021FC  0012               	return		;funcret
  6561  0021FE  FFFF               	dw	65535	; errata NOP
  6562  002200                     __end_of_whatsTM0Limit:
  6563                           	callstack 0
  6564                           
  6565 ;; *************** function _toggleStep *****************
  6566 ;; Defined at:
  6567 ;;		line 81 in file "pwm.c"
  6568 ;; Parameters:    Size  Location     Type
  6569 ;;		None
  6570 ;; Auto vars:     Size  Location     Type
  6571 ;;		None
  6572 ;; Return value:  Size  Location     Type
  6573 ;;                  1    wreg      void 
  6574 ;; Registers used:
  6575 ;;		wreg, status,2
  6576 ;; Tracked objects:
  6577 ;;		On entry : 0/0
  6578 ;;		On exit  : 0/0
  6579 ;;		Unchanged: 0/0
  6580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6581 ;;      Params:         0       0       0       0       0       0       0
  6582 ;;      Locals:         0       0       0       0       0       0       0
  6583 ;;      Temps:          0       0       0       0       0       0       0
  6584 ;;      Totals:         0       0       0       0       0       0       0
  6585 ;;Total ram usage:        0 bytes
  6586 ;; Hardware stack levels used:    1
  6587 ;; This function calls:
  6588 ;;		Nothing
  6589 ;; This function is called by:
  6590 ;;		_isr
  6591 ;; This function uses a non-reentrant model
  6592 ;;
  6593                           
  6594                           	psect	text44
  6595  002190                     __ptext44:
  6596                           	callstack 0
  6597  002190                     _toggleStep:
  6598                           	callstack 0
  6599  002190  FFFF               	dw	65535	; assembler added errata NOP
  6600  002192                     
  6601                           ;pwm.c: 82:     stepToggle = 1;
  6602  002192  0E01               	movlw	1
  6603  002194  6E62               	movwf	_stepToggle^0,c	;volatile
  6604  002196  0012               	return		;funcret
  6605  002198  FFFF               	dw	65535	; errata NOP
  6606  00219A                     __end_of_toggleStep:
  6607                           	callstack 0
  6608                           
  6609 ;; *************** function _storeData *****************
  6610 ;; Defined at:
  6611 ;;		line 131 in file "usart.c"
  6612 ;; Parameters:    Size  Location     Type
  6613 ;;  data            1    wreg     unsigned char 
  6614 ;; Auto vars:     Size  Location     Type
  6615 ;;  data            1    9[COMRAM] unsigned char 
  6616 ;; Return value:  Size  Location     Type
  6617 ;;                  1    wreg      void 
  6618 ;; Registers used:
  6619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6620 ;; Tracked objects:
  6621 ;;		On entry : 0/0
  6622 ;;		On exit  : 0/0
  6623 ;;		Unchanged: 0/0
  6624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6625 ;;      Params:         0       0       0       0       0       0       0
  6626 ;;      Locals:         1       0       0       0       0       0       0
  6627 ;;      Temps:          2       0       0       0       0       0       0
  6628 ;;      Totals:         3       0       0       0       0       0       0
  6629 ;;Total ram usage:        3 bytes
  6630 ;; Hardware stack levels used:    1
  6631 ;; Hardware stack levels required when called:    2
  6632 ;; This function calls:
  6633 ;;		i2_printError
  6634 ;; This function is called by:
  6635 ;;		_isr
  6636 ;; This function uses a non-reentrant model
  6637 ;;
  6638                           
  6639                           	psect	text45
  6640  001274                     __ptext45:
  6641                           	callstack 0
  6642  001274                     _storeData:
  6643                           	callstack 0
  6644  001274  FFFF               	dw	65535	; assembler added errata NOP
  6645                           
  6646                           ;incstack = 0
  6647                           ;storeData@data stored from wreg
  6648  001276  6E0A               	movwf	storeData@data^0,c
  6649  001278                     
  6650                           ;usart.c: 133:     static unsigned char counter = 0;;usart.c: 134:     static unsigned c
      +                          har mexLength = 5;;usart.c: 135:     static unsigned char command;;usart.c: 136:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 140:     receivedMex[counter] = data;
  6651  001278  0E43               	movlw	low storeData@receivedMex
  6652  00127A  245A               	addwf	storeData@counter^0,w,c
  6653  00127C  6ED9               	movwf	fsr2l,c
  6654  00127E  6ADA               	clrf	fsr2h,c
  6655  001280  0E00               	movlw	high storeData@receivedMex
  6656  001282  22DA               	addwfc	fsr2h,f,c
  6657  001284  C00A  FFDF         	movff	storeData@data,indf2
  6658  001288                     
  6659                           ;usart.c: 142:     counter++;
  6660  001288  2A5A               	incf	storeData@counter^0,f,c
  6661                           
  6662                           ;usart.c: 145:     switch(receivedMex[0]){
  6663  00128A  EF56  F009         	goto	i2l2898
  6664  00128E                     i2l2890:
  6665  00128E  FFFF               	dw	65535	; assembler added errata NOP
  6666                           
  6667                           ;usart.c: 147:             mexLength = 5;
  6668  001290  0E05               	movlw	5
  6669  001292  6E6D               	movwf	storeData@mexLength^0,c
  6670                           
  6671                           ;usart.c: 148:             break;
  6672  001294  EF71  F009         	goto	i2l2900
  6673  001298                     i2l2892:
  6674  001298  FFFF               	dw	65535	; assembler added errata NOP
  6675                           
  6676                           ;usart.c: 150:             mexLength = 9;
  6677  00129A  0E09               	movlw	9
  6678  00129C  6E6D               	movwf	storeData@mexLength^0,c
  6679                           
  6680                           ;usart.c: 151:             break;
  6681  00129E  EF71  F009         	goto	i2l2900
  6682  0012A2                     i2l2894:
  6683  0012A2  FFFF               	dw	65535	; assembler added errata NOP
  6684                           
  6685                           ;usart.c: 153:             mexLength = 1;
  6686  0012A4  0E01               	movlw	1
  6687  0012A6  6E6D               	movwf	storeData@mexLength^0,c
  6688                           
  6689                           ;usart.c: 154:             break;
  6690  0012A8  EF71  F009         	goto	i2l2900
  6691  0012AC                     i2l2898:
  6692  0012AC  FFFF               	dw	65535	; assembler added errata NOP
  6693  0012AE  5043               	movf	storeData@receivedMex^0,w,c
  6694  0012B0  6E08               	movwf	??_storeData^0,c
  6695  0012B2  6A09               	clrf	(??_storeData+1)^0,c
  6696                           
  6697                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6698                           ; Switch size 1, requested type "simple"
  6699                           ; Number of cases is 1, Range of values is 0 to 0
  6700                           ; switch strategies available:
  6701                           ; Name         Instructions Cycles
  6702                           ; simple_byte            4     3 (average)
  6703                           ;	Chosen strategy is simple_byte
  6704  0012B4  5009               	movf	(??_storeData+1)^0,w,c
  6705  0012B6  0A00               	xorlw	0	; case 0
  6706  0012B8  B4D8               	btfsc	status,2,c
  6707  0012BA  EF61  F009         	goto	i2l4014
  6708  0012BE  EF71  F009         	goto	i2l2900
  6709  0012C2                     i2l4014:
  6710  0012C2  FFFF               	dw	65535	; assembler added errata NOP
  6711                           
  6712                           ; Switch size 1, requested type "simple"
  6713                           ; Number of cases is 3, Range of values is 0 to 2
  6714                           ; switch strategies available:
  6715                           ; Name         Instructions Cycles
  6716                           ; simple_byte           10     6 (average)
  6717                           ;	Chosen strategy is simple_byte
  6718  0012C4  5008               	movf	??_storeData^0,w,c
  6719  0012C6  0A00               	xorlw	0	; case 0
  6720  0012C8  B4D8               	btfsc	status,2,c
  6721  0012CA  EF47  F009         	goto	i2l2890
  6722  0012CE  0A01               	xorlw	1	; case 1
  6723  0012D0  B4D8               	btfsc	status,2,c
  6724  0012D2  EF4C  F009         	goto	i2l2892
  6725  0012D6  0A03               	xorlw	3	; case 2
  6726  0012D8  B4D8               	btfsc	status,2,c
  6727  0012DA  EF51  F009         	goto	i2l2894
  6728  0012DE  EF71  F009         	goto	i2l2900
  6729  0012E2                     i2l2900:
  6730  0012E2  FFFF               	dw	65535	; assembler added errata NOP
  6731                           
  6732                           ;usart.c: 161:     if(counter >= mexLength){
  6733  0012E4  506D               	movf	storeData@mexLength^0,w,c
  6734  0012E6  5C5A               	subwf	storeData@counter^0,w,c
  6735  0012E8  A0D8               	btfss	status,0,c
  6736  0012EA  EF79  F009         	goto	i2u209_41
  6737  0012EE  EF7C  F009         	goto	i2u209_40
  6738  0012F2                     i2u209_41:
  6739  0012F2  FFFF               	dw	65535	; assembler added errata NOP
  6740  0012F4  EFE8  F009         	goto	i2l542
  6741  0012F8                     i2u209_40:
  6742  0012F8  FFFF               	dw	65535	; assembler added errata NOP
  6743  0012FA                     
  6744                           ;usart.c: 162:         counter = 0;
  6745  0012FA  0E00               	movlw	0
  6746  0012FC  6E5A               	movwf	storeData@counter^0,c
  6747                           
  6748                           ;usart.c: 166:         switch(receivedMex[0]){
  6749  0012FE  EFCD  F009         	goto	i2l2916
  6750  001302                     i2l2904:
  6751  001302  FFFF               	dw	65535	; assembler added errata NOP
  6752                           
  6753                           ;usart.c: 168:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  6754  001304  505D               	movf	_dataCounter^0,w,c
  6755  001306  0D04               	mullw	4
  6756  001308  0EDC               	movlw	low _dataSequence
  6757  00130A  24F3               	addwf	243,w,c
  6758  00130C  6ED9               	movwf	fsr2l,c
  6759  00130E  0E00               	movlw	high _dataSequence
  6760  001310  20F4               	addwfc	prodh,w,c
  6761  001312  6EDA               	movwf	fsr2h,c
  6762  001314  C044  FFDF         	movff	storeData@receivedMex+1,indf2
  6763                           
  6764                           ;usart.c: 169:                 dataSequence[dataCounter].posX = receivedMex[2];
  6765  001318  505D               	movf	_dataCounter^0,w,c
  6766  00131A  0D04               	mullw	4
  6767  00131C  0EDD               	movlw	low (_dataSequence+1)
  6768  00131E  24F3               	addwf	243,w,c
  6769  001320  6ED9               	movwf	fsr2l,c
  6770  001322  0E00               	movlw	high (_dataSequence+1)
  6771  001324  20F4               	addwfc	prodh,w,c
  6772  001326  6EDA               	movwf	fsr2h,c
  6773  001328  C045  FFDF         	movff	storeData@receivedMex+2,indf2
  6774                           
  6775                           ;usart.c: 170:                 dataSequence[dataCounter].posY = receivedMex[3];
  6776  00132C  505D               	movf	_dataCounter^0,w,c
  6777  00132E  0D04               	mullw	4
  6778  001330  0EDE               	movlw	low (_dataSequence+2)
  6779  001332  24F3               	addwf	243,w,c
  6780  001334  6ED9               	movwf	fsr2l,c
  6781  001336  0E00               	movlw	high (_dataSequence+2)
  6782  001338  20F4               	addwfc	prodh,w,c
  6783  00133A  6EDA               	movwf	fsr2h,c
  6784  00133C  C046  FFDF         	movff	storeData@receivedMex+3,indf2
  6785                           
  6786                           ;usart.c: 171:                 dataSequence[dataCounter].rotation = receivedMex[4];
  6787  001340  505D               	movf	_dataCounter^0,w,c
  6788  001342  0D04               	mullw	4
  6789  001344  0EDF               	movlw	low (_dataSequence+3)
  6790  001346  24F3               	addwf	243,w,c
  6791  001348  6ED9               	movwf	fsr2l,c
  6792  00134A  0E00               	movlw	high (_dataSequence+3)
  6793  00134C  20F4               	addwfc	prodh,w,c
  6794  00134E  6EDA               	movwf	fsr2h,c
  6795  001350  C047  FFDF         	movff	storeData@receivedMex+4,indf2
  6796  001354                     
  6797                           ;usart.c: 173:                 dataCounter++;
  6798  001354  2A5D               	incf	_dataCounter^0,f,c
  6799                           
  6800                           ;usart.c: 174:                 break;
  6801  001356  EFE8  F009         	goto	i2l542
  6802  00135A                     i2l539:
  6803  00135A  FFFF               	dw	65535	; assembler added errata NOP
  6804                           
  6805                           ;usart.c: 179:                 newSequenceData.L = receivedMex[1];
  6806  00135C  C044  F0D4         	movff	storeData@receivedMex+1,_newSequenceData
  6807                           
  6808                           ;usart.c: 180:                 newSequenceData.W = receivedMex[2];
  6809  001360  C045  F0D5         	movff	storeData@receivedMex+2,_newSequenceData+1
  6810                           
  6811                           ;usart.c: 181:                 newSequenceData.init_posX = receivedMex[3];
  6812  001364  C046  F0D6         	movff	storeData@receivedMex+3,_newSequenceData+2
  6813                           
  6814                           ;usart.c: 182:                 newSequenceData.init_posY = receivedMex[4];
  6815  001368  C047  F0D7         	movff	storeData@receivedMex+4,_newSequenceData+3
  6816                           
  6817                           ;usart.c: 183:                 newSequenceData.init_rot = receivedMex[5];
  6818  00136C  C048  F0D8         	movff	storeData@receivedMex+5,_newSequenceData+4
  6819                           
  6820                           ;usart.c: 184:                 newSequenceData.end_posX = receivedMex[6];
  6821  001370  C049  F0D9         	movff	storeData@receivedMex+6,_newSequenceData+5
  6822                           
  6823                           ;usart.c: 185:                 newSequenceData.end_posY = receivedMex[7];
  6824  001374  C04A  F0DA         	movff	storeData@receivedMex+7,_newSequenceData+6
  6825                           
  6826                           ;usart.c: 186:                 newSequenceData.end_rot = receivedMex[8];
  6827  001378  C04B  F0DB         	movff	storeData@receivedMex+8,_newSequenceData+7
  6828  00137C                     
  6829                           ;usart.c: 188:                 _newSequence = 1;
  6830  00137C  0E01               	movlw	1
  6831  00137E  6E5B               	movwf	__newSequence^0,c
  6832                           
  6833                           ;usart.c: 189:                 break;
  6834  001380  EFE8  F009         	goto	i2l542
  6835  001384                     i2l2910:
  6836  001384  FFFF               	dw	65535	; assembler added errata NOP
  6837                           
  6838                           ;usart.c: 192:                 _fatalError = 1;
  6839  001386  0E01               	movlw	1
  6840  001388  6E5C               	movwf	__fatalError^0,c
  6841                           
  6842                           ;usart.c: 193:                 break;
  6843  00138A  EFE8  F009         	goto	i2l542
  6844  00138E                     i2l2912:
  6845  00138E  FFFF               	dw	65535	; assembler added errata NOP
  6846                           
  6847                           ;usart.c: 196:                 printError(8);
  6848  001390  0E08               	movlw	8
  6849  001392  EC14  F00B         	call	i2_printError
  6850                           
  6851                           ;usart.c: 197:                 break;
  6852  001396  EFE8  F009         	goto	i2l542
  6853  00139A                     i2l2916:
  6854  00139A  FFFF               	dw	65535	; assembler added errata NOP
  6855  00139C  5043               	movf	storeData@receivedMex^0,w,c
  6856  00139E  6E08               	movwf	??_storeData^0,c
  6857  0013A0  6A09               	clrf	(??_storeData+1)^0,c
  6858                           
  6859                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6860                           ; Switch size 1, requested type "simple"
  6861                           ; Number of cases is 1, Range of values is 0 to 0
  6862                           ; switch strategies available:
  6863                           ; Name         Instructions Cycles
  6864                           ; simple_byte            4     3 (average)
  6865                           ;	Chosen strategy is simple_byte
  6866  0013A2  5009               	movf	(??_storeData+1)^0,w,c
  6867  0013A4  0A00               	xorlw	0	; case 0
  6868  0013A6  B4D8               	btfsc	status,2,c
  6869  0013A8  EFD8  F009         	goto	i2l4016
  6870  0013AC  EFC7  F009         	goto	i2l2912
  6871  0013B0                     i2l4016:
  6872  0013B0  FFFF               	dw	65535	; assembler added errata NOP
  6873                           
  6874                           ; Switch size 1, requested type "simple"
  6875                           ; Number of cases is 3, Range of values is 0 to 2
  6876                           ; switch strategies available:
  6877                           ; Name         Instructions Cycles
  6878                           ; simple_byte           10     6 (average)
  6879                           ;	Chosen strategy is simple_byte
  6880  0013B2  5008               	movf	??_storeData^0,w,c
  6881  0013B4  0A00               	xorlw	0	; case 0
  6882  0013B6  B4D8               	btfsc	status,2,c
  6883  0013B8  EF81  F009         	goto	i2l2904
  6884  0013BC  0A01               	xorlw	1	; case 1
  6885  0013BE  B4D8               	btfsc	status,2,c
  6886  0013C0  EFAD  F009         	goto	i2l539
  6887  0013C4  0A03               	xorlw	3	; case 2
  6888  0013C6  B4D8               	btfsc	status,2,c
  6889  0013C8  EFC2  F009         	goto	i2l2910
  6890  0013CC  EFC7  F009         	goto	i2l2912
  6891  0013D0                     i2l542:
  6892  0013D0  FFFF               	dw	65535	; assembler added errata NOP
  6893  0013D2  0012               	return		;funcret
  6894  0013D4  FFFF               	dw	65535	; errata NOP
  6895  0013D6                     __end_of_storeData:
  6896                           	callstack 0
  6897                           
  6898 ;; *************** function i2_printError *****************
  6899 ;; Defined at:
  6900 ;;		line 53 in file "usart.c"
  6901 ;; Parameters:    Size  Location     Type
  6902 ;;  errCode         1    wreg     unsigned char 
  6903 ;; Auto vars:     Size  Location     Type
  6904 ;;  errCode         1    6[COMRAM] unsigned char 
  6905 ;; Return value:  Size  Location     Type
  6906 ;;                  1    wreg      void 
  6907 ;; Registers used:
  6908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6909 ;; Tracked objects:
  6910 ;;		On entry : 0/0
  6911 ;;		On exit  : 0/0
  6912 ;;		Unchanged: 0/0
  6913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6914 ;;      Params:         0       0       0       0       0       0       0
  6915 ;;      Locals:         1       0       0       0       0       0       0
  6916 ;;      Temps:          2       0       0       0       0       0       0
  6917 ;;      Totals:         3       0       0       0       0       0       0
  6918 ;;Total ram usage:        3 bytes
  6919 ;; Hardware stack levels used:    1
  6920 ;; Hardware stack levels required when called:    1
  6921 ;; This function calls:
  6922 ;;		i2_uartTx
  6923 ;; This function is called by:
  6924 ;;		_storeData
  6925 ;; This function uses a non-reentrant model
  6926 ;;
  6927                           
  6928                           	psect	text46
  6929  001628                     __ptext46:
  6930                           	callstack 0
  6931  001628                     i2_printError:
  6932                           	callstack 0
  6933  001628  FFFF               	dw	65535	; assembler added errata NOP
  6934                           
  6935                           ;incstack = 0
  6936                           ;i2printError@errCode stored from wreg
  6937  00162A  6E07               	movwf	i2printError@errCode^0,c
  6938  00162C                     
  6939                           ;usart.c: 55:     switch(errCode){
  6940  00162C  EF70  F00B         	goto	i2l2726
  6941  001630                     i2l2708:
  6942  001630  FFFF               	dw	65535	; assembler added errata NOP
  6943                           
  6944                           ;usart.c: 57:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  6945  001632  0EA0               	movlw	low _errString_Feed
  6946  001634  6E01               	movwf	i2uartTx@ptr^0,c
  6947  001636  0E00               	movlw	high _errString_Feed
  6948  001638  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6949  00163A  0E1D               	movlw	29
  6950  00163C  6E03               	movwf	i2uartTx@length^0,c
  6951  00163E  ECF5  F00F         	call	i2_uartTx	;wreg free
  6952                           
  6953                           ;usart.c: 58:             break;
  6954  001642  EF9F  F00B         	goto	i2l498
  6955  001646                     i2l2710:
  6956  001646  FFFF               	dw	65535	; assembler added errata NOP
  6957                           
  6958                           ;usart.c: 60:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  6959  001648  0E5C               	movlw	low _errString_ZEND
  6960  00164A  6E01               	movwf	i2uartTx@ptr^0,c
  6961  00164C  0E01               	movlw	high _errString_ZEND
  6962  00164E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6963  001650  0E28               	movlw	40
  6964  001652  6E03               	movwf	i2uartTx@length^0,c
  6965  001654  ECF5  F00F         	call	i2_uartTx	;wreg free
  6966                           
  6967                           ;usart.c: 61:             break;
  6968  001658  EF9F  F00B         	goto	i2l498
  6969  00165C                     i2l2712:
  6970  00165C  FFFF               	dw	65535	; assembler added errata NOP
  6971                           
  6972                           ;usart.c: 63:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  6973  00165E  0E84               	movlw	low _errString_Reset
  6974  001660  6E01               	movwf	i2uartTx@ptr^0,c
  6975  001662  0E01               	movlw	high _errString_Reset
  6976  001664  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6977  001666  0E27               	movlw	39
  6978  001668  6E03               	movwf	i2uartTx@length^0,c
  6979  00166A  ECF5  F00F         	call	i2_uartTx	;wreg free
  6980                           
  6981                           ;usart.c: 64:             break;
  6982  00166E  EF9F  F00B         	goto	i2l498
  6983  001672                     i2l2714:
  6984  001672  FFFF               	dw	65535	; assembler added errata NOP
  6985                           
  6986                           ;usart.c: 66:             uartTx(&errString_Point[0], sizeof(errString_Point));
  6987  001674  0E34               	movlw	low _errString_Point
  6988  001676  6E01               	movwf	i2uartTx@ptr^0,c
  6989  001678  0E01               	movlw	high _errString_Point
  6990  00167A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  6991  00167C  0E28               	movlw	40
  6992  00167E  6E03               	movwf	i2uartTx@length^0,c
  6993  001680  ECF5  F00F         	call	i2_uartTx	;wreg free
  6994                           
  6995                           ;usart.c: 67:             break;
  6996  001684  EF9F  F00B         	goto	i2l498
  6997  001688                     i2l2716:
  6998  001688  FFFF               	dw	65535	; assembler added errata NOP
  6999                           
  7000                           ;usart.c: 69:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7001  00168A  0E80               	movlw	low _errString_Bound
  7002  00168C  6E01               	movwf	i2uartTx@ptr^0,c
  7003  00168E  0E00               	movlw	high _errString_Bound
  7004  001690  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7005  001692  0E20               	movlw	32
  7006  001694  6E03               	movwf	i2uartTx@length^0,c
  7007  001696  ECF5  F00F         	call	i2_uartTx	;wreg free
  7008                           
  7009                           ;usart.c: 70:             break;
  7010  00169A  EF9F  F00B         	goto	i2l498
  7011  00169E                     i2l2718:
  7012  00169E  FFFF               	dw	65535	; assembler added errata NOP
  7013                           
  7014                           ;usart.c: 72:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7015  0016A0  0E00               	movlw	low _errString_PointZ
  7016  0016A2  6E01               	movwf	i2uartTx@ptr^0,c
  7017  0016A4  0E01               	movlw	high _errString_PointZ
  7018  0016A6  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7019  0016A8  0E34               	movlw	52
  7020  0016AA  6E03               	movwf	i2uartTx@length^0,c
  7021  0016AC  ECF5  F00F         	call	i2_uartTx	;wreg free
  7022                           
  7023                           ;usart.c: 73:             break;
  7024  0016B0  EF9F  F00B         	goto	i2l498
  7025  0016B4                     i2l2720:
  7026  0016B4  FFFF               	dw	65535	; assembler added errata NOP
  7027                           
  7028                           ;usart.c: 75:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7029  0016B6  0EAB               	movlw	low _errString_Fatal
  7030  0016B8  6E01               	movwf	i2uartTx@ptr^0,c
  7031  0016BA  0E01               	movlw	high _errString_Fatal
  7032  0016BC  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7033  0016BE  0E26               	movlw	38
  7034  0016C0  6E03               	movwf	i2uartTx@length^0,c
  7035  0016C2  ECF5  F00F         	call	i2_uartTx	;wreg free
  7036                           
  7037                           ;usart.c: 76:             break;
  7038  0016C6  EF9F  F00B         	goto	i2l498
  7039  0016CA                     i2l2722:
  7040  0016CA  FFFF               	dw	65535	; assembler added errata NOP
  7041                           
  7042                           ;usart.c: 78:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7043  0016CC  0EBD               	movlw	low _errString_Command
  7044  0016CE  6E01               	movwf	i2uartTx@ptr^0,c
  7045  0016D0  0E00               	movlw	high _errString_Command
  7046  0016D2  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7047  0016D4  0E17               	movlw	23
  7048  0016D6  6E03               	movwf	i2uartTx@length^0,c
  7049  0016D8  ECF5  F00F         	call	i2_uartTx	;wreg free
  7050                           
  7051                           ;usart.c: 79:             break;
  7052  0016DC  EF9F  F00B         	goto	i2l498
  7053  0016E0                     i2l2726:
  7054  0016E0  FFFF               	dw	65535	; assembler added errata NOP
  7055  0016E2  5007               	movf	i2printError@errCode^0,w,c
  7056  0016E4  6E05               	movwf	??i2_printError^0,c
  7057  0016E6  6A06               	clrf	(??i2_printError+1)^0,c
  7058                           
  7059                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7060                           ; Switch size 1, requested type "simple"
  7061                           ; Number of cases is 1, Range of values is 0 to 0
  7062                           ; switch strategies available:
  7063                           ; Name         Instructions Cycles
  7064                           ; simple_byte            4     3 (average)
  7065                           ;	Chosen strategy is simple_byte
  7066  0016E8  5006               	movf	(??i2_printError+1)^0,w,c
  7067  0016EA  0A00               	xorlw	0	; case 0
  7068  0016EC  B4D8               	btfsc	status,2,c
  7069  0016EE  EF7B  F00B         	goto	i2l4018
  7070  0016F2  EF9F  F00B         	goto	i2l498
  7071  0016F6                     i2l4018:
  7072  0016F6  FFFF               	dw	65535	; assembler added errata NOP
  7073                           
  7074                           ; Switch size 1, requested type "simple"
  7075                           ; Number of cases is 8, Range of values is 1 to 8
  7076                           ; switch strategies available:
  7077                           ; Name         Instructions Cycles
  7078                           ; simple_byte           25    13 (average)
  7079                           ;	Chosen strategy is simple_byte
  7080  0016F8  5005               	movf	??i2_printError^0,w,c
  7081  0016FA  0A01               	xorlw	1	; case 1
  7082  0016FC  B4D8               	btfsc	status,2,c
  7083  0016FE  EF18  F00B         	goto	i2l2708
  7084  001702  0A03               	xorlw	3	; case 2
  7085  001704  B4D8               	btfsc	status,2,c
  7086  001706  EF23  F00B         	goto	i2l2710
  7087  00170A  0A01               	xorlw	1	; case 3
  7088  00170C  B4D8               	btfsc	status,2,c
  7089  00170E  EF2E  F00B         	goto	i2l2712
  7090  001712  0A07               	xorlw	7	; case 4
  7091  001714  B4D8               	btfsc	status,2,c
  7092  001716  EF39  F00B         	goto	i2l2714
  7093  00171A  0A01               	xorlw	1	; case 5
  7094  00171C  B4D8               	btfsc	status,2,c
  7095  00171E  EF44  F00B         	goto	i2l2716
  7096  001722  0A03               	xorlw	3	; case 6
  7097  001724  B4D8               	btfsc	status,2,c
  7098  001726  EF4F  F00B         	goto	i2l2718
  7099  00172A  0A01               	xorlw	1	; case 7
  7100  00172C  B4D8               	btfsc	status,2,c
  7101  00172E  EF5A  F00B         	goto	i2l2720
  7102  001732  0A0F               	xorlw	15	; case 8
  7103  001734  B4D8               	btfsc	status,2,c
  7104  001736  EF65  F00B         	goto	i2l2722
  7105  00173A  EF9F  F00B         	goto	i2l498
  7106  00173E                     i2l498:
  7107  00173E  FFFF               	dw	65535	; assembler added errata NOP
  7108  001740  0012               	return		;funcret
  7109  001742  FFFF               	dw	65535	; errata NOP
  7110  001744                     __end_ofi2_printError:
  7111                           	callstack 0
  7112                           
  7113 ;; *************** function i2_uartTx *****************
  7114 ;; Defined at:
  7115 ;;		line 215 in file "usart.c"
  7116 ;; Parameters:    Size  Location     Type
  7117 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  7118 ;;		 -> errString_Command(23), errString_Fatal(38), errString_PointZ(52), errString_Bound(32), 
  7119 ;;		 -> errString_Point(40), errString_Reset(39), errString_ZEND(40), errString_Feed(29), 
  7120 ;;  length          1    2[COMRAM] unsigned char 
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;  i               1    3[COMRAM] unsigned char 
  7123 ;; Return value:  Size  Location     Type
  7124 ;;                  1    wreg      void 
  7125 ;; Registers used:
  7126 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7132 ;;      Params:         3       0       0       0       0       0       0
  7133 ;;      Locals:         1       0       0       0       0       0       0
  7134 ;;      Temps:          0       0       0       0       0       0       0
  7135 ;;      Totals:         4       0       0       0       0       0       0
  7136 ;;Total ram usage:        4 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; This function calls:
  7139 ;;		Nothing
  7140 ;; This function is called by:
  7141 ;;		i2_printError
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           	psect	text47
  7146  001FEA                     __ptext47:
  7147                           	callstack 0
  7148  001FEA                     i2_uartTx:
  7149                           	callstack 0
  7150  001FEA  FFFF               	dw	65535	; assembler added errata NOP
  7151  001FEC                     
  7152                           ;usart.c: 215: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 216: {;usa
      +                          rt.c: 218:     for(char i = 1; i < length; i++){
  7153  001FEC  0E01               	movlw	1
  7154  001FEE  6E04               	movwf	i2uartTx@i^0,c
  7155  001FF0  EF0E  F010         	goto	i2l2454
  7156  001FF4                     i2l2450:
  7157  001FF4  FFFF               	dw	65535	; assembler added errata NOP
  7158                           
  7159                           ;usart.c: 220:         TXREG = *ptr;
  7160  001FF6  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  7161  001FFA  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  7162  001FFE  50DF               	movf	indf2,w,c
  7163  002000  6EAD               	movwf	173,c	;volatile
  7164  002002                     i2l550:
  7165  002002  FFFF               	dw	65535	; assembler added errata NOP
  7166  002004  A2AC               	btfss	172,1,c	;volatile
  7167  002006  EF07  F010         	goto	i2u156_41
  7168  00200A  EF0A  F010         	goto	i2u156_40
  7169  00200E                     i2u156_41:
  7170  00200E  FFFF               	dw	65535	; assembler added errata NOP
  7171  002010  EF01  F010         	goto	i2l550
  7172  002014                     i2u156_40:
  7173  002014  FFFF               	dw	65535	; assembler added errata NOP
  7174  002016                     
  7175                           ;usart.c: 224:         ptr++;
  7176  002016  4A01               	infsnz	i2uartTx@ptr^0,f,c
  7177  002018  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  7178                           
  7179                           ;usart.c: 225:     }
  7180  00201A  2A04               	incf	i2uartTx@i^0,f,c
  7181  00201C                     i2l2454:
  7182  00201C  FFFF               	dw	65535	; assembler added errata NOP
  7183  00201E  5003               	movf	i2uartTx@length^0,w,c
  7184  002020  5C04               	subwf	i2uartTx@i^0,w,c
  7185  002022  A0D8               	btfss	status,0,c
  7186  002024  EF16  F010         	goto	i2u157_41
  7187  002028  EF19  F010         	goto	i2u157_40
  7188  00202C                     i2u157_41:
  7189  00202C  FFFF               	dw	65535	; assembler added errata NOP
  7190  00202E  EFFA  F00F         	goto	i2l2450
  7191  002032                     i2u157_40:
  7192  002032  FFFF               	dw	65535	; assembler added errata NOP
  7193  002034  0012               	return		;funcret
  7194  002036  FFFF               	dw	65535	; errata NOP
  7195  002038                     __end_ofi2_uartTx:
  7196                           	callstack 0
  7197                           
  7198 ;; *************** function _setTouchRel *****************
  7199 ;; Defined at:
  7200 ;;		line 85 in file "adc.c"
  7201 ;; Parameters:    Size  Location     Type
  7202 ;;		None
  7203 ;; Auto vars:     Size  Location     Type
  7204 ;;		None
  7205 ;; Return value:  Size  Location     Type
  7206 ;;                  1    wreg      void 
  7207 ;; Registers used:
  7208 ;;		wreg, status,2
  7209 ;; Tracked objects:
  7210 ;;		On entry : 0/0
  7211 ;;		On exit  : 0/0
  7212 ;;		Unchanged: 0/0
  7213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7214 ;;      Params:         0       0       0       0       0       0       0
  7215 ;;      Locals:         0       0       0       0       0       0       0
  7216 ;;      Temps:          0       0       0       0       0       0       0
  7217 ;;      Totals:         0       0       0       0       0       0       0
  7218 ;;Total ram usage:        0 bytes
  7219 ;; Hardware stack levels used:    1
  7220 ;; This function calls:
  7221 ;;		Nothing
  7222 ;; This function is called by:
  7223 ;;		_isr
  7224 ;; This function uses a non-reentrant model
  7225 ;;
  7226                           
  7227                           	psect	text48
  7228  00219A                     __ptext48:
  7229                           	callstack 0
  7230  00219A                     _setTouchRel:
  7231                           	callstack 0
  7232  00219A  FFFF               	dw	65535	; assembler added errata NOP
  7233  00219C                     
  7234                           ;adc.c: 86:     touch_rel = 1;
  7235  00219C  0E01               	movlw	1
  7236  00219E  6E61               	movwf	_touch_rel^0,c	;volatile
  7237  0021A0  0012               	return		;funcret
  7238  0021A2  FFFF               	dw	65535	; errata NOP
  7239  0021A4                     __end_of_setTouchRel:
  7240                           	callstack 0
  7241                           
  7242 ;; *************** function _setThermRel *****************
  7243 ;; Defined at:
  7244 ;;		line 78 in file "adc.c"
  7245 ;; Parameters:    Size  Location     Type
  7246 ;;		None
  7247 ;; Auto vars:     Size  Location     Type
  7248 ;;		None
  7249 ;; Return value:  Size  Location     Type
  7250 ;;                  1    wreg      void 
  7251 ;; Registers used:
  7252 ;;		wreg, status,2
  7253 ;; Tracked objects:
  7254 ;;		On entry : 0/0
  7255 ;;		On exit  : 0/0
  7256 ;;		Unchanged: 0/0
  7257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7258 ;;      Params:         0       0       0       0       0       0       0
  7259 ;;      Locals:         0       0       0       0       0       0       0
  7260 ;;      Temps:          0       0       0       0       0       0       0
  7261 ;;      Totals:         0       0       0       0       0       0       0
  7262 ;;Total ram usage:        0 bytes
  7263 ;; Hardware stack levels used:    1
  7264 ;; This function calls:
  7265 ;;		Nothing
  7266 ;; This function is called by:
  7267 ;;		_isr
  7268 ;; This function uses a non-reentrant model
  7269 ;;
  7270                           
  7271                           	psect	text49
  7272  0021A4                     __ptext49:
  7273                           	callstack 0
  7274  0021A4                     _setThermRel:
  7275                           	callstack 0
  7276  0021A4  FFFF               	dw	65535	; assembler added errata NOP
  7277  0021A6                     
  7278                           ;adc.c: 79:     therm_rel = 1;
  7279  0021A6  0E01               	movlw	1
  7280  0021A8  6E60               	movwf	_therm_rel^0,c	;volatile
  7281  0021AA  0012               	return		;funcret
  7282  0021AC  FFFF               	dw	65535	; errata NOP
  7283  0021AE                     __end_of_setThermRel:
  7284                           	callstack 0
  7285                           
  7286 ;; *************** function _retPeriod *****************
  7287 ;; Defined at:
  7288 ;;		line 89 in file "pwm.c"
  7289 ;; Parameters:    Size  Location     Type
  7290 ;;		None
  7291 ;; Auto vars:     Size  Location     Type
  7292 ;;		None
  7293 ;; Return value:  Size  Location     Type
  7294 ;;                  2    0[COMRAM] unsigned int 
  7295 ;; Registers used:
  7296 ;;		None
  7297 ;; Tracked objects:
  7298 ;;		On entry : 0/0
  7299 ;;		On exit  : 0/0
  7300 ;;		Unchanged: 0/0
  7301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7302 ;;      Params:         2       0       0       0       0       0       0
  7303 ;;      Locals:         0       0       0       0       0       0       0
  7304 ;;      Temps:          0       0       0       0       0       0       0
  7305 ;;      Totals:         2       0       0       0       0       0       0
  7306 ;;Total ram usage:        2 bytes
  7307 ;; Hardware stack levels used:    1
  7308 ;; This function calls:
  7309 ;;		Nothing
  7310 ;; This function is called by:
  7311 ;;		_isr
  7312 ;; This function uses a non-reentrant model
  7313 ;;
  7314                           
  7315                           	psect	text50
  7316  002140                     __ptext50:
  7317                           	callstack 0
  7318  002140                     _retPeriod:
  7319                           	callstack 0
  7320  002140  FFFF               	dw	65535	; assembler added errata NOP
  7321  002142                     
  7322                           ;pwm.c: 90:     return pwmPeriod;
  7323  002142  C053  F001         	movff	_pwmPeriod,?_retPeriod
  7324  002146  C054  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7325  00214A  0012               	return		;funcret
  7326  00214C  FFFF               	dw	65535	; errata NOP
  7327  00214E                     __end_of_retPeriod:
  7328                           	callstack 0
  7329                           
  7330 ;; *************** function _increaseStep *****************
  7331 ;; Defined at:
  7332 ;;		line 73 in file "pwm.c"
  7333 ;; Parameters:    Size  Location     Type
  7334 ;;		None
  7335 ;; Auto vars:     Size  Location     Type
  7336 ;;		None
  7337 ;; Return value:  Size  Location     Type
  7338 ;;                  1    wreg      void 
  7339 ;; Registers used:
  7340 ;;		status,2, status,0
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7346 ;;      Params:         0       0       0       0       0       0       0
  7347 ;;      Locals:         0       0       0       0       0       0       0
  7348 ;;      Temps:          0       0       0       0       0       0       0
  7349 ;;      Totals:         0       0       0       0       0       0       0
  7350 ;;Total ram usage:        0 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; This function calls:
  7353 ;;		Nothing
  7354 ;; This function is called by:
  7355 ;;		_isr
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           	psect	text51
  7360  002200                     __ptext51:
  7361                           	callstack 0
  7362  002200                     _increaseStep:
  7363                           	callstack 0
  7364  002200  FFFF               	dw	65535	; assembler added errata NOP
  7365  002202                     
  7366                           ;pwm.c: 74:     pwmStep++;
  7367  002202  2A63               	incf	_pwmStep^0,f,c	;volatile
  7368  002204  0012               	return		;funcret
  7369  002206  FFFF               	dw	65535	; errata NOP
  7370  002208                     __end_of_increaseStep:
  7371                           	callstack 0
  7372                           
  7373                           	psect	rparam
  7374  0000                     
  7375                           	psect	temp
  7376  00006E                     btemp:
  7377                           	callstack 0
  7378  00006E                     	ds	1
  7379  0000                     int$flags	set	btemp
  7380  0000                     wtemp8	set	btemp+1
  7381  0000                     ttemp5	set	btemp+1
  7382  0000                     ttemp6	set	btemp+4
  7383  0000                     ttemp7	set	btemp+8
  7384                           
  7385                           	psect	idloc
  7386                           
  7387                           ;Config register IDLOC0 @ 0x200000
  7388                           ;	unspecified, using default values
  7389  200000                     	org	2097152
  7390  200000  FF                 	db	255
  7391                           
  7392                           ;Config register IDLOC1 @ 0x200001
  7393                           ;	unspecified, using default values
  7394  200001                     	org	2097153
  7395  200001  FF                 	db	255
  7396                           
  7397                           ;Config register IDLOC2 @ 0x200002
  7398                           ;	unspecified, using default values
  7399  200002                     	org	2097154
  7400  200002  FF                 	db	255
  7401                           
  7402                           ;Config register IDLOC3 @ 0x200003
  7403                           ;	unspecified, using default values
  7404  200003                     	org	2097155
  7405  200003  FF                 	db	255
  7406                           
  7407                           ;Config register IDLOC4 @ 0x200004
  7408                           ;	unspecified, using default values
  7409  200004                     	org	2097156
  7410  200004  FF                 	db	255
  7411                           
  7412                           ;Config register IDLOC5 @ 0x200005
  7413                           ;	unspecified, using default values
  7414  200005                     	org	2097157
  7415  200005  FF                 	db	255
  7416                           
  7417                           ;Config register IDLOC6 @ 0x200006
  7418                           ;	unspecified, using default values
  7419  200006                     	org	2097158
  7420  200006  FF                 	db	255
  7421                           
  7422                           ;Config register IDLOC7 @ 0x200007
  7423                           ;	unspecified, using default values
  7424  200007                     	org	2097159
  7425  200007  FF                 	db	255
  7426                           
  7427                           	psect	config
  7428                           
  7429                           ; Padding undefined space
  7430  300000                     	org	3145728
  7431  300000  FF                 	db	255
  7432                           
  7433                           ;Config register CONFIG1H @ 0x300001
  7434                           ;	Oscillator Selection bits
  7435                           ;	OSC = XT, XT oscillator
  7436                           ;	Oscillator System Clock Switch Enable bit
  7437                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  7438  300001                     	org	3145729
  7439  300001  21                 	db	33
  7440                           
  7441                           ;Config register CONFIG2L @ 0x300002
  7442                           ;	Power-up Timer Enable bit
  7443                           ;	PWRT = OFF, PWRT disabled
  7444                           ;	Brown-out Reset Enable bit
  7445                           ;	BOR = OFF, Brown-out Reset disabled
  7446                           ;	Brown-out Reset Voltage bits
  7447                           ;	BORV = 20, VBOR set to 2.0V
  7448  300002                     	org	3145730
  7449  300002  0D                 	db	13
  7450                           
  7451                           ;Config register CONFIG2H @ 0x300003
  7452                           ;	Watchdog Timer Enable bit
  7453                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7454                           ;	Watchdog Timer Postscale Select bits
  7455                           ;	WDTPS = 128, 1:128
  7456  300003                     	org	3145731
  7457  300003  0E                 	db	14
  7458                           
  7459                           ; Padding undefined space
  7460  300004                     	org	3145732
  7461  300004  FF                 	db	255
  7462                           
  7463                           ;Config register CONFIG3H @ 0x300005
  7464                           ;	CCP2 Mux bit
  7465                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  7466  300005                     	org	3145733
  7467  300005  00                 	db	0
  7468                           
  7469                           ;Config register CONFIG4L @ 0x300006
  7470                           ;	Stack Full/Underflow Reset Enable bit
  7471                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  7472                           ;	Low Voltage ICSP Enable bit
  7473                           ;	LVP = OFF, Low Voltage ICSP disabled
  7474                           ;	Background Debugger Enable bit
  7475                           ;	DEBUG = 0x1, unprogrammed default
  7476  300006                     	org	3145734
  7477  300006  80                 	db	128
  7478                           
  7479                           ; Padding undefined space
  7480  300007                     	org	3145735
  7481  300007  FF                 	db	255
  7482                           
  7483                           ;Config register CONFIG5L @ 0x300008
  7484                           ;	Code Protection bit
  7485                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  7486                           ;	Code Protection bit
  7487                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  7488                           ;	Code Protection bit
  7489                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  7490                           ;	Code Protection bit
  7491                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  7492  300008                     	org	3145736
  7493  300008  0F                 	db	15
  7494                           
  7495                           ;Config register CONFIG5H @ 0x300009
  7496                           ;	Boot Block Code Protection bit
  7497                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  7498                           ;	Data EEPROM Code Protection bit
  7499                           ;	CPD = OFF, Data EEPROM not code protected
  7500  300009                     	org	3145737
  7501  300009  C0                 	db	192
  7502                           
  7503                           ;Config register CONFIG6L @ 0x30000A
  7504                           ;	Write Protection bit
  7505                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  7506                           ;	Write Protection bit
  7507                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  7508                           ;	Write Protection bit
  7509                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  7510                           ;	Write Protection bit
  7511                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  7512  30000A                     	org	3145738
  7513  30000A  0F                 	db	15
  7514                           
  7515                           ;Config register CONFIG6H @ 0x30000B
  7516                           ;	Configuration Register Write Protection bit
  7517                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  7518                           ;	Boot Block Write Protection bit
  7519                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  7520                           ;	Data EEPROM Write Protection bit
  7521                           ;	WRTD = OFF, Data EEPROM not write protected
  7522  30000B                     	org	3145739
  7523  30000B  E0                 	db	224
  7524                           
  7525                           ;Config register CONFIG7L @ 0x30000C
  7526                           ;	Table Read Protection bit
  7527                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  7528                           ;	Table Read Protection bit
  7529                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  7530                           ;	Table Read Protection bit
  7531                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  7532                           ;	Table Read Protection bit
  7533                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  7534  30000C                     	org	3145740
  7535  30000C  0F                 	db	15
  7536                           
  7537                           ;Config register CONFIG7H @ 0x30000D
  7538                           ;	Boot Block Table Read Protection bit
  7539                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  7540  30000D                     	org	3145741
  7541  30000D  40                 	db	64
  7542                           tosu	equ	0xFFF
  7543                           tosh	equ	0xFFE
  7544                           tosl	equ	0xFFD
  7545                           stkptr	equ	0xFFC
  7546                           pclatu	equ	0xFFB
  7547                           pclath	equ	0xFFA
  7548                           pcl	equ	0xFF9
  7549                           tblptru	equ	0xFF8
  7550                           tblptrh	equ	0xFF7
  7551                           tblptrl	equ	0xFF6
  7552                           tablat	equ	0xFF5
  7553                           prodh	equ	0xFF4
  7554                           prodl	equ	0xFF3
  7555                           indf0	equ	0xFEF
  7556                           postinc0	equ	0xFEE
  7557                           postdec0	equ	0xFED
  7558                           preinc0	equ	0xFEC
  7559                           plusw0	equ	0xFEB
  7560                           fsr0h	equ	0xFEA
  7561                           fsr0l	equ	0xFE9
  7562                           wreg	equ	0xFE8
  7563                           indf1	equ	0xFE7
  7564                           postinc1	equ	0xFE6
  7565                           postdec1	equ	0xFE5
  7566                           preinc1	equ	0xFE4
  7567                           plusw1	equ	0xFE3
  7568                           fsr1h	equ	0xFE2
  7569                           fsr1l	equ	0xFE1
  7570                           bsr	equ	0xFE0
  7571                           indf2	equ	0xFDF
  7572                           postinc2	equ	0xFDE
  7573                           postdec2	equ	0xFDD
  7574                           preinc2	equ	0xFDC
  7575                           plusw2	equ	0xFDB
  7576                           fsr2h	equ	0xFDA
  7577                           fsr2l	equ	0xFD9
  7578                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    14
    Data        302
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     109
    BANK0           128     13     125
    BANK1           256      0     209
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 52
		 -> errString_Command(BANK0[23]), errString_Fatal(BANK1[38]), errString_PointZ(BANK1[52]), errString_Bound(BANK0[32]), 
		 -> errString_Point(BANK1[40]), errString_Reset(BANK1[39]), errString_ZEND(BANK1[40]), errString_Feed(BANK0[29]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 


Critical Paths under _main in COMRAM

    _resetPosition->_enableMotor
    _resetPosition->_setDecay
    _resetPosition->_setDirection
    _resetPosition->_setStep
    _printError->_uartTx
    _touchTherm->_setDirection
    _touchObject->_setDirection
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _moveToPoint->_setDirection
    _liftArm->_setDirection

Critical Paths under _isr in COMRAM

    _isr->_storeData
    _storeData->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   14798
                                             12 BANK0      1     1      0
                           _clearTM0
                        _enableMotor
                        _executeData
                         _fatalError
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                      _resetPosition
                          _shiftData
                           _tim0Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0    2807
                                             21 COMRAM     3     3      0
                        _enableMotor
                          _resetStep
                           _setDecay
                       _setDirection
                            _setStep
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _setStep                                              4     3      1     487
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _setDecay                                             4     3      1     394
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _enableMotor                                          4     3      1     664
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (2) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    9466
                                              7 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0    1058
                          _resetStep
                         _resetTherm
                        _returnTherm
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0    1058
                          _resetStep
                         _resetTouch
                        _returnTouch
                       _setDirection
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3129
                                              0 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         12     4      8    2882
                                             21 COMRAM    12     4      8
                          _resetStep
                       _setDirection
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0    1058
                          _resetStep
                       _setDirection
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _setDirection                                         4     3      1    1024
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0     552
                                             10 COMRAM     7     7      0
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                          _storeData
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _storeData                                            3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _enableMotor
   _executeData
     _getData
     _liftArm
       _resetStep
       _setDirection
       _stepMade
     _moveToPoint
       _resetStep
       _setDirection
       _stepCounter
       _stepMade
     _pickObject
     _releaseObj
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _touchObject
       _resetStep
       _resetTouch
       _returnTouch
       _setDirection
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTherm
       _returnTherm
       _setDirection
       _startADC
       _stepMade
       _stopADC
   _fatalError
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetPosition
     _enableMotor
     _resetStep
     _setDecay
     _setDirection
     _setStep
     _stepMade
   _shiftData
   _tim0Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _storeData
     i2_printError
       i2_uartTx
   _toggleStep
   _whatsTM0Limit
   _writeTM0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      D1       7       81.6%
BITBANK0            80      0       0       4        0.0%
BANK0               80      D      7D       5       97.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BB      15        0.0%
DATA                 0      0     1BB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu Jan 28 10:54:59 2021

                                                  ___fldiv@aexp 0038  
                                                  ___fldiv@bexp 0037  
                                         __end_of_interruptInit 2072  
                                                  ___fldiv@sign 0030  
                                                            l74 2094  
                                                            l83 19F8  
                                                            l68 212E  
                                                            l92 1E6E  
                                                           l101 1EE2  
                                                           l110 1DFA  
                                                           l200 1D02  
                                                           l120 0F90  
                                                           l121 0FC0  
                                                           l210 1C52  
                                                           l131 1014  
                                                           l115 0F5C  
                                                           l124 0FC4  
                                                           l116 1070  
                                                           l141 126E  
                                                           l213 21F4  
                                                           l301 204E  
                                                           l125 0FF4  
                                                           l117 0F8C  
                                                           l150 11BA  
                                                           l302 2064  
                                                           l303 206E  
                                                           l135 1086  
                                                           l152 11F0  
                                                           l216 21EC  
                                                           l315 0C9C  
                                                           l331 20EC  
                                                           l340 218C  
                                                           l156 1210  
                                                           l172 1920  
                                                           l164 1880  
                                                           l149 1256  
                                                           l173 1924  
                                                           l501 21BC  
                                                           l334 2100  
                                                           l190 1CD8  
                                                           l182 17AE  
                                                           l510 21CC  
                                                           l192 1C9C  
                                                           l168 18A0  
                                                           l504 21C4  
                                                           l328 2112  
                                                           l193 1CEA  
                                                           l337 216E  
                                                           l370 21DC  
                                                           l186 182E  
                                                           l178 178E  
                                                           l290 1B38  
                                                           l187 1832  
                                                           l507 21D4  
                                                           l196 1CBC  
                                                           l364 20BA  
                                                           l292 1B92  
                                                           l373 2162  
                                                           l382 2178  
                                                           l550 1FB4  
                                                           l518 1F44  
                                                           l367 21E4  
                                                           l376 2156  
                                                           l545 2120  
                                                           l289 1B36  
                                                           l554 1FE6  
                                                           l379 2182  
                                                           l484 20D8  
                                                           l498 1622  
                                                           l854 1506  
                                                           _isr 0008  
                                                   _touchObject 1836  
                                                           prod 000FF3  
                                                           wreg 000FE8  
                                                  ___fltol@exp1 0042  
                                                   main@errCode 00FC  
                                                          l1212 0D00  
                                                          l1141 0854  
                                                          l1150 08AA  
                                                          l1215 0E92  
                                                          l1152 093A  
                                                          l1144 080E  
                                                          l1153 0922  
                                                          l1226 0E18  
                                                          l1139 0A3C  
                                                          l1219 0DAC  
                                                          l3100 0648  
                                                          l3110 068A  
                                                          l3102 065C  
                                                          l3200 095C  
                                                          l3120 06C2  
                                                          l3112 0692  
                                                          l3104 066C  
                                                          l3210 09D2  
                                                          l3202 096E  
                                                          l3130 0704  
                                                          l3122 06D6  
                                                          l3114 0698  
                                                          l3106 0670  
                                                          l4010 0B9C  
                                                          l4002 19D8  
                                                          l4012 1EC2  
                                                          l3052 1E78  
                                                          l3220 0A2C  
                                                          l3212 09F2  
                                                          l3204 0998  
                                                          l3132 0720  
                                                          l3124 06E6  
                                                          l3116 06AA  
                                                          l3108 0678  
                                                          l3300 0DF2  
                                                          l4004 1DDA  
                                                          l3054 1E7C  
                                                          l3062 1EAC  
                                                          l3070 20F6  
                                                          l3222 0A30  
                                                          l3214 0A0E  
                                                          l3206 099C  
                                                          l3150 077C  
                                                          l3134 0730  
                                                          l3142 0752  
                                                          l3126 06EA  
                                                          l3118 06AC  
                                                          l3230 13D8  
                                                          l3310 0E58  
                                                          l3302 0E06  
                                                          l4006 1E4E  
                                                          l3056 1E8C  
                                                          l3072 20FA  
                                                          l3400 1160  
                                                          l3216 0A14  
                                                          l3208 09BC  
                                                          l3160 07D0  
                                                          l3152 0798  
                                                          l3144 0768  
                                                          l3136 0738  
                                                          l3128 06F2  
                                                          l3240 143A  
                                                          l3232 13F2  
                                                          l3312 0E6C  
                                                          l3304 0E2C  
                                                          l3080 21E2  
                                                          l4008 15DA  
                                                          l3320 192C  
                                                          l3058 1E9C  
                                                          l3410 11BE  
                                                          l3402 1178  
                                                          l3218 0A26  
                                                          l3170 083E  
                                                          l3162 07E6  
                                                          l3154 07A8  
                                                          l3146 0768  
                                                          l3138 073E  
                                                          l3242 144A  
                                                          l3314 0E7E  
                                                          l3306 0E2E  
                                                          l3082 215C  
                                                          l3090 2174  
                                                          l3322 1930  
                                                          l3330 19C2  
                                                          l3076 2188  
                                                          l3068 20F2  
                                                          l3420 1244  
                                                          l3412 11E8  
                                                          l3404 117C  
                                                          l3180 088A  
                                                          l3172 0840  
                                                          l3164 07FA  
                                                          l3156 07B8  
                                                          l3092 0612  
                                                          l3252 147C  
                                                          l3244 144E  
                                                          l3236 1408  
                                                          l3316 0E80  
                                                          l3308 0E34  
                                                          l3084 21DA  
                                                          l3500 17FC  
                                                          l3340 1E18  
                                                          l3324 195E  
                                                          l3078 2168  
                                                          l3422 125C  
                                                          l3414 11F4  
                                                          l3406 1188  
                                                          l3190 08D4  
                                                          l3182 0896  
                                                          l3174 0850  
                                                          l3166 080C  
                                                          l3158 07C8  
                                                          l3094 061E  
                                                          l3270 14F4  
                                                          l3262 14AC  
                                                          l3254 1488  
                                                          l3246 1460  
                                                          l3238 1438  
                                                          l3086 217E  
                                                          l3430 1838  
                                                          l3510 1826  
                                                          l3502 1800  
                                                          l3342 1E28  
                                                          l3326 1992  
                                                          l3520 1C6C  
                                                          l3424 1268  
                                                          l3416 1214  
                                                          l3408 11B2  
                                                          l3192 08E6  
                                                          l3184 08A8  
                                                          l3176 086A  
                                                          l3168 081A  
                                                          l3096 0630  
                                                          l3264 14BA  
                                                          l3256 1492  
                                                          l3280 0D12  
                                                          l3440 1852  
                                                          l3432 1842  
                                                          l3088 2150  
                                                          l3504 1802  
                                                          l3336 1E04  
                                                          l3352 1D90  
                                                          l3600 0F20  
                                                          l3530 1CA0  
                                                          l3522 1C70  
                                                          l3514 1C58  
                                                          l3426 126C  
                                                          l3418 122E  
                                                          l3370 10A6  
                                                          l3194 0918  
                                                          l3178 0884  
                                                          l3186 08BC  
                                                          l3098 0632  
                                                          l3266 14CE  
                                                          l3290 0D5A  
                                                          l3282 0D2E  
                                                          l3274 0CA4  
                                                          l3450 18A2  
                                                          l3442 185A  
                                                          l3434 1844  
                                                          l3506 1810  
                                                          l3338 1E08  
                                                          l3346 1E38  
                                                          l3354 1D94  
                                                          l3362 1DC4  
                                                          l3610 0F50  
                                                          l3602 0F28  
                                                          l3532 1CBE  
                                                          l3524 1C76  
                                                          l3516 1C62  
                                                          l3380 10F8  
                                                          l3372 10BE  
                                                          l3188 08D0  
                                                          l3268 14E4  
                                                          l3292 0D92  
                                                          l3276 0CB8  
                                                          l3460 18F2  
                                                          l3444 1872  
                                                          l3452 18BC  
                                                          l3436 184C  
                                                          l3508 1814  
                                                          l3356 1DA4  
                                                          l3620 0FD8  
                                                          l3612 0F70  
                                                          l3604 0F2C  
                                                          l3534 1CF0  
                                                          l3526 1C8E  
                                                          l3518 1C64  
                                                          l3390 1148  
                                                          l3382 1104  
                                                          l3198 0950  
                                                          l3294 0D96  
                                                          l3286 0D42  
                                                          l3278 0CCA  
                                                          l3550 1C26  
                                                          l3542 1BA2  
                                                          l3462 18F4  
                                                          l3454 18D8  
                                                          l3446 1874  
                                                          l3438 1850  
                                                          l3358 1DB4  
                                                          l3630 104A  
                                                          l3622 0FEA  
                                                          l3614 0F82  
                                                          l3606 0F32  
                                                          l3536 1CFC  
                                                          l3528 1C90  
                                                          l3392 114C  
                                                          l3384 1128  
                                                          l3376 10C6  
                                                          l3368 108C  
                                                          l3296 0DA2  
                                                          l3288 0D4C  
                                                          l3552 1C28  
                                                          l3544 1BF4  
                                                          l3464 1902  
                                                          l3448 1884  
                                                          l3456 18E8  
                                                          l3480 175E  
                                                          l3472 1746  
                                                          l3720 0AA4  
                                                          l3712 0A44  
                                                          l3640 203A  
                                                          l3704 21CA  
                                                          l3632 105E  
                                                          l3624 0FF8  
                                                          l3616 0FA4  
                                                          l3608 0F4A  
                                                          l3800 1AF8  
                                                          l3570 2126  
                                                          l3538 1D00  
                                                          l3394 114E  
                                                          l3386 1136  
                                                          l3378 10EA  
                                                          l3554 21F2  
                                                          l3298 0DE4  
                                                          l3546 1BFE  
                                                          l3466 1906  
                                                          l3458 18EE  
                                                          l3490 1792  
                                                          l3482 1760  
                                                          l3474 1750  
                                                          l3730 0B50  
                                                          l3722 0AB8  
                                                          l3714 0A50  
                                                          l3650 20A8  
                                                          l3642 204C  
                                                          l3562 1F9E  
                                                          l3634 1076  
                                                          l3626 101A  
                                                          l3618 0FB6  
                                                          l3810 1B5A  
                                                          l3802 1B12  
                                                          l3396 1156  
                                                          l3388 1142  
                                                          l3556 21EA  
                                                          l3548 1C04  
                                                          l3468 1918  
                                                          l3492 17B0  
                                                          l3484 1768  
                                                          l3476 1752  
                                                          l3732 0B60  
                                                          l3724 0AF2  
                                                          l3740 0BC4  
                                                          l3716 0A5A  
                                                          l3652 20AA  
                                                          l3580 2088  
                                                          l3572 2074  
                                                          l3644 2062  
                                                          l3564 1FA6  
                                                          l3708 21C2  
                                                          l3636 1082  
                                                          l3628 1034  
                                                          l3660 2106  
                                                          l3820 1B8A  
                                                          l3812 1B74  
                                                          l3804 1B30  
                                                          l3558 2118  
                                                          l3398 115A  
                                                          l3486 1780  
                                                          l3494 17CA  
                                                          l3478 175A  
                                                          l3750 0C66  
                                                          l3742 0BDA  
                                                          l3734 0B74  
                                                          l3726 0B02  
                                                          l3718 0A94  
                                                          l3654 20AC  
                                                          l3646 209A  
                                                          l3582 208C  
                                                          l3574 207C  
                                                          l3566 1FC8  
                                                          l3590 0E9A  
                                                          l3662 210E  
                                                          l3670 20C0  
                                                          l3814 1B7C  
                                                          l3806 1B3C  
                                                          l3496 17E6  
                                                          l3488 1782  
                                                          l3760 0C90  
                                                          l3752 0C78  
                                                          l3744 0BDE  
                                                          l3728 0B16  
                                                          l3656 20B6  
                                                          l3648 20A2  
                                                          l3584 208E  
                                                          l3576 2080  
                                                          l3568 1FCE  
                                                          l3680 1514  
                                                          l3592 0F12  
                                                          l3664 20DE  
                                                          l3672 20D4  
                                                          l3816 1B82  
                                                          l3498 17F6  
                                                          l3754 0C80  
                                                          l3746 0BE2  
                                                          l3762 0C98  
                                                          l3738 0B7E  
                                                          l3674 21D2  
                                                          l3658 20B8  
                                                          l3586 2090  
                                                          l3578 2084  
                                                          l3690 1582  
                                                          l3682 152A  
                                                          l3770 21BA  
                                                          l3594 0F16  
                                                          l3666 20E0  
                                                          l3818 1B86  
                                                          l3756 0C88  
                                                          l3748 0BE6  
                                                          l3588 2092  
                                                          l3692 1598  
                                                          l3684 1540  
                                                          l3596 0F1A  
                                                          l3780 1F2E  
                                                          l3772 1EEA  
                                                          l3668 20E4  
                                                          l3758 0C8C  
                                                          l3694 15AE  
                                                          l3686 1556  
                                                          l3678 1510  
                                                          l3598 0F1E  
                                                          l3782 1F30  
                                                          l3790 1ADA  
                                                          l3688 156C  
                                                          l3792 1ADE  
                                                          l3784 1AD0  
                                                          l3698 15C4  
                                                          l3778 1EEE  
                                                          l3794 1AE2  
                                                          l3786 1AD0  
                                                          l3796 1AF2  
                                                          l3788 1AD6  
                                                          l3798 1AF6  
                                                          ?_isr 0001  
                                                          u3000 1FC6  
                                                          u3001 1FC0  
                                                          u3010 1FE4  
                                                          u3011 1FDE  
                                                          u2300 06C0  
                                                          u3100 1034  
                                                          u3020 0F48  
                                                          u2301 06BA  
                                                          u3101 102E  
                                                          u3021 0F42  
                                                          u2310 06D4  
                                                          u3110 1048  
                                                          u3030 0F6E  
                                                          u2311 06CE  
                                                          u3111 1042  
                                                          u3031 0F68  
                                                          u2400 08CE  
                                                          u2320 071E  
                                                          u3120 105C  
                                                          u3040 0F82  
                                                          u3200 1B54  
                                                          _LATD 000F8C  
                                                          u2401 08C8  
                                                          u2321 0718  
                                                          u3121 1056  
                                                          u3041 0F7C  
                                                          u3201 1B4E  
                                                          u2410 08E4  
                                                          u2330 0766  
                                                          u3130 1070  
                                                          u3050 0FA2  
                                                          u3210 1B72  
                                                          u2235 1E86  
                                                          u2411 08DE  
                                                          u2331 0760  
                                                          u3131 106A  
                                                          u3051 0F9C  
                                                          u3211 1B6C  
                                                          u2236 1E88  
                                                          u2420 0916  
                                                          u2340 07E4  
                                                          u2260 062E  
                                                          u2500 142C  
                                                          u3140 204A  
                                                          u3060 0FB6  
                                                          u2245 1E96  
                                                          u2421 0910  
                                                          u2341 07DE  
                                                          u2261 0628  
                                                          u3141 2044  
                                                          u3061 0FB0  
                                                          u2246 1E98  
                                                          u2430 0934  
                                                          u2350 080A  
                                                          u2270 0646  
                                                          u2510 145E  
                                                          u3150 2060  
                                                          u3070 0FD6  
                                                          u2255 1EA6  
                                                          u2431 092E  
                                                          u2351 0804  
                                                          u2271 0640  
                                                          u2511 1458  
                                                          u3151 205A  
                                                          u3071 0FD0  
                                                          u2256 1EA8  
                                                          u2440 094E  
                                                          u2360 083C  
                                                          u2280 065A  
                                                          u2520 1476  
                                                          u2600 0DDE  
                                                          u3160 0BD8  
                                                          u3080 0FEA  
                                                          u2441 0948  
                                                          u2361 0836  
                                                          u2281 0654  
                                                          u2521 1470  
                                                          u2505 1420  
                                                          u2601 0DD8  
                                                          u3161 0BD2  
                                                          u3081 0FE4  
                                                          u2450 096C  
                                                          u2370 0868  
                                                          u2290 06A8  
                                                          u2530 14A6  
                                                          u2610 0E04  
                                                          u3170 0C76  
                                                          u3090 1012  
                                                          u2451 0966  
                                                          u2371 0862  
                                                          u2291 06A2  
                                                          u2531 14A0  
                                                          u2611 0DFE  
                                                          u3171 0C70  
                                                          u3091 100C  
                                                          u2460 09BA  
                                                          u2380 0882  
                                                          u2540 14CE  
                                                          u2620 0E18  
                                                          u3180 1F42  
                                                          u2461 09B4  
                                                          u2381 087C  
                                                          u2541 14C8  
                                                          u2621 0E12  
                                                          u3181 1F3C  
                                                          u2470 09F0  
                                                          u2390 08A6  
                                                          u2550 14E2  
                                                          u2630 0E2A  
                                                          u3190 1B10  
                                                          u2471 09EA  
                                                          u2391 08A0  
                                                          u2551 14DC  
                                                          u2631 0E24  
                                                          u3191 1B0A  
                                                          u2800 122E  
                                                          u2720 10A4  
                                                          u2480 0A24  
                                                          u2640 0E6A  
                                                          u2560 0CB6  
                                                          u2801 1228  
                                                          u2721 109E  
                                                          u2481 0A1E  
                                                          u2641 0E64  
                                                          u2561 0CB0  
                                                          u2705 1DAE  
                                                          u2810 1242  
                                                          u2730 10BE  
                                                          u2490 13F0  
                                                          u2650 0E7C  
                                                          u2570 0CC8  
                                                          u2706 1DB0  
                                                          u2811 123C  
                                                          u2731 10B8  
                                                          u2491 13EA  
                                                          u2651 0E76  
                                                          u2571 0CC2  
                                                          u2715 1DBE  
                                                          u2820 1256  
                                                          u2740 10E8  
                                                          u2580 0D2C  
                                                          u2900 17AC  
                                                          u2716 1DC0  
                                                          u2821 1250  
                                                          u2741 10E2  
                                                          u2581 0D26  
                                                          u2901 17A6  
                                                          u2750 1126  
                                                          u2590 0D8C  
                                                          u2830 1870  
                                                          u2910 17CA  
                                                          u2751 1120  
                                                          u2591 0D86  
                                                          u2831 186A  
                                                          u2911 17C4  
                                                          u2760 1176  
                                                          u2840 189E  
                                                          u2920 17E4  
                                                          u2761 1170  
                                                          u2841 1898  
                                                          u2921 17DE  
                                                          u2665 1E12  
                                                          u2770 11B0  
                                                          u2850 18BC  
                                                          u2930 17F6  
                                                          u2666 1E14  
                                                          u2771 11AA  
                                                          u2851 18B6  
                                                          u2931 17F0  
                                                          u2675 1E22  
                                                          u2780 11E6  
                                                          u2860 18D6  
                                                          u2940 1824  
                                                          u2676 1E24  
                                                          u2781 11E0  
                                                          u2861 18D0  
                                                          u2941 181E  
                                                          u2685 1E32  
                                                          u2950 1C8C  
                                                          u2790 120E  
                                                          u2870 18E8  
                                                          u2686 1E34  
                                                          u2951 1C86  
                                                          u2791 1208  
                                                          u2871 18E2  
                                                          u2695 1D9E  
                                                          u2960 1CBA  
                                                          u2880 1916  
                                                          u2696 1DA0  
                                                          u2961 1CB4  
                                                          u2881 1910  
                                                          u2970 1CD8  
                                                          u2890 177E  
                                                          u2971 1CD2  
                                                          u2891 1778  
                                                          u2980 1CEA  
                                                          u2981 1CE4  
                                                          u2990 1C50  
                                                          u2991 1C4A  
                                                          i2l71 21FC  
                                                          i2l65 213C  
                                                          _TMR0 000FD6  
                                                          _TMR2 000FCC  
                                                          _main 1AD0  
                                                          _maxX 006B  
                                                          _maxY 0069  
                                          __end_ofi2_printError 1744  
                                                          fsr2h 000FDA  
                                                          indf2 000FDF  
                                                          fsr1l 000FE1  
                                                          fsr2l 000FD9  
                                                          btemp 006E  
                                                          prodh 000FF4  
                                                          prodl 000FF3  
                                                          start 016A  
                                               ___fldiv@new_exp 0031  
                                                  ___param_bank 000000  
                                               ??_whatsTM0Limit 0001  
                                                         ??_isr 000B  
                                                  ?_executeData 0001  
                                               executeData@data 00FA  
                                                 ___fltol@sign1 0041  
                                                         ?_main 0001  
                                               __end_of___fldiv 0A42  
                                               __end_of___fltol 150C  
                                                         i2l343 2204  
                                                         i2l346 2196  
                                                         i2l443 0152  
                                                         i2l349 214A  
                                                         i2l550 2002  
                                                         i2l542 13D0  
                                                         i2l385 21AA  
                                                         i2l554 2034  
                                                         i2l539 135A  
                                                         i2l388 21A0  
                                                         i2l498 173E  
                                          rotateObj@rotSequence 0065  
                                                         _SPBRG 000FAF  
                                                         _TRISA 000F92  
                                                         _TRISB 000F93  
                                                         _TRISC 000F94  
                                                         _TRISD 000F95  
                                                         _TXREG 000FAD  
                                               __end_of_getData 2124  
                                               __end_of_initADC 20BE  
                                                  ?_newSequence 0001  
                                               __end_of_liftArm 1D06  
                                               __end_of_readSeq 21C8  
                                                  stepMade@temp 0014  
                                               __end_of_setStep 19FE  
                                                         tablat 000FF5  
                                                i2uartTx@length 0003  
                                               __end_of_stopADC 21E0  
                                                         ttemp5 006F  
                                                         ttemp6 0072  
                                                         ttemp7 0076  
                                                         status 000FD8  
                                                         wtemp8 006F  
                                              __end_ofi2_uartTx 2038  
                                                 ?_increaseStep 0001  
                                               __initialization 1D06  
                                        __size_of_initPinMotors 0026  
                                                  __end_of_main 1B9C  
                                      resetPosition@keepMovingX 0016  
                                      resetPosition@keepMovingY 0017  
                                      resetPosition@keepMovingZ 0018  
                                                        ??_main 0043  
                                                 __activetblptr 000002  
                                          __size_of_enableMotor 0074  
                                                   isr@tm0Count 005F  
                                                  ?_setThermRel 0001  
                                                        _ADRESH 000FC4  
                                                        _ADRESL 000FC3  
                                                  ?_moveToPoint 0016  
                                                        i2l2002 2202  
                                                        i2l2010 219C  
                                                        i2l2004 2192  
                                                        i2l2008 21A6  
                                                        i2l3000 00DA  
                                                        i2l3002 00E2  
                                                        i2l3010 0132  
                                                        i2l3012 0146  
                                                        i2l3004 0108  
                                                        i2l3014 014C  
                                                        i2l3006 0114  
                                                        i2l3008 012E  
                                                        i2l4014 12C2  
                                                        i2l4016 13B0  
                                                        i2l2450 1FF4  
                                                        i2l4018 16F6  
                                                        i2l2452 2016  
                                                        i2l2454 201C  
                                                        i2l2710 1646  
                                                        i2l2448 1FEC  
                                                        i2l2720 16B4  
                                                        i2l2712 165C  
                                                        i2l2722 16CA  
                                                        i2l2714 1672  
                                                        i2l2706 162C  
                                                        i2l2716 1688  
                                                        i2l2708 1630  
                                                        i2l2900 12E2  
                                                        i2l2718 169E  
                                                        i2l2726 16E0  
                                                        i2l2910 1384  
                                                        i2l2902 12FA  
                                                        i2l1782 2134  
                                                        i2l2912 138E  
                                                        i2l2904 1302  
                                                        i2l2906 1354  
                                                        i2l1786 21FA  
                                                        i2l2908 137C  
                                                        i2l2916 139A  
                                                        i2l2890 128E  
                                                        i2l2970 0032  
                                                        i2l2884 2142  
                                                        i2l2892 1298  
                                                        i2l2980 006C  
                                                        i2l2972 004E  
                                                        i2l2964 001C  
                                                        i2l2894 12A2  
                                                        i2l2886 1278  
                                                        i2l2990 00A6  
                                                        i2l2982 006E  
                                                        i2l2974 0050  
                                                        i2l2966 002E  
                                                        i2l2888 1288  
                                                        i2l2992 00B8  
                                                        i2l2984 0072  
                                                        i2l2976 0054  
                                                        i2l2968 0030  
                                                        i2l2898 12AC  
                                                        i2l2994 00BC  
                                                        i2l2986 0090  
                                                        i2l2978 0058  
                                                        i2l2996 00C0  
                                                        i2l2988 0092  
                                                        i2l2998 00C6  
                                                        _RCREG1 000FAE  
                                                  ?_setTouchRel 0001  
                                                 setDecay@decay 0015  
                                              __end_of___xxtofl 0E98  
                                                 setDecay@motor 0012  
                                              __end_of_clearTM0 2132  
                                              _errString_PointZ 0100  
                                                ??_increaseStep 0001  
                                                     ??___fldiv 0028  
                                                     ??___fltol 003D  
                                              __end_of_tim0Init 2116  
                                              __end_of_tim2Init 20F0  
                                                        clear_0 1D6C  
                                                        clear_1 1D78  
                                                     ??_getData 0014  
                                                        _uartTx 1F9C  
                                              __end_of_setDecay 1E00  
                                                     ??_initADC 0012  
                                                     ??_liftArm 0016  
                                                     ??_readSeq 0012  
                                                  __pdataCOMRAM 0065  
                                         __end_of_resetPosition 108A  
                                                  __mediumconst 0000  
                                                     ??_setStep 0013  
                                                        tblptrh 000FF7  
                                                        tblptrl 000FF6  
                                                        tblptru 000FF8  
                                                  ?_returnTherm 0012  
                                              __end_of_startADC 21E8  
                                              __end_of_stepMade 2104  
                                                 _initPinMotors 2072  
                                                  ?_returnTouch 0012  
                                                     ??_stopADC 0012  
                                         __size_ofi2_printError 011C  
                                              __end_of_writeTM0 2140  
                                                  ___xxtofl@arg 001C  
                                                  ___xxtofl@exp 001B  
                                                  ___xxtofl@val 0012  
                                                    __accesstop 0080  
                                       __end_of__initialization 1D7E  
                                                  _dataSequence 00DC  
                                                 ___rparam_used 000001  
                                                    ___fltol@f1 0039  
                                                  ?_stepCounter 0012  
                                                   i2uartTx@ptr 0001  
                                                __pcstackCOMRAM 0001  
                                                  __newSequence 005B  
                                                  __pidataBANK0 1F48  
                                                  __pidataBANK1 19FE  
                                               isr@single_cycle 004F  
                                          __size_of_executeData 025E  
                                                 ?_setDirection 0012  
                                                  i2_printError 1628  
                                                  ?_touchObject 0001  
                                                _errString_ZEND 015C  
                                                _errString_Feed 00A0  
                                                ?_initPinMotors 0001  
                                                     ?i2_uartTx 0001  
                                                    __pbssBANK0 00D4  
                                          __size_of_newSequence 0008  
                                                    _feeder1Pos 060D  
                                                    _feeder2Pos 060B  
                                                    _feeder3Pos 0609  
                                                    _fatalError 21D0  
                                            __size_of_reduceSeq 0008  
                                            __size_of_retPeriod 000E  
                                                _touch_pressure 0607  
                                            __size_of_shiftData 0060  
                                            __size_of_resetStep 000A  
                                                       _ADC_res 0051  
                                                       ?_uartTx 0012  
                                                ??_setDirection 0013  
                                                     ?___xxtofl 0012  
                                          __end_of_increaseStep 2208  
                                                     ?_clearTM0 0001  
                                                    ??i2_uartTx 0004  
                                            __size_of_rotateObj 00BA  
                                             _errString_Command 00BD  
                                            __size_of_usartInit 001E  
                                        __size_of_interruptInit 003A  
                                          __size_of_setThermRel 000A  
                                            __size_of_storeData 0162  
                                                     ?_tim0Init 0001  
                                                     ?_tim2Init 0012  
                                          __size_of_moveToPoint 01EA  
                                          storeData@receivedMex 0043  
                                               _newSequenceData 00D4  
                                                     ?_setDecay 0012  
                                          __size_of_setTouchRel 000A  
                                                   setStep@step 0015  
                                                       __Hparam 0000  
                                                       __Lparam 0000  
                                        __end_of_touch_pressure 0609  
                                                       ___fldiv 0610  
                                                     ?_startADC 0001  
                                                     ?_stepMade 0012  
                                                       ___fltol 13D6  
                                                  __psmallconst 0600  
                                                       __pcinit 1D06  
                                         __end_of_whatsTM0Limit 2200  
                                                       _getData 2116  
                                                       __ramtop 0600  
                                                     ?_writeTM0 0001  
                                                    _pickObject 21F0  
                                                       __ptext0 1AD0  
                                                       __ptext1 20BE  
                                                       __ptext2 20DC  
                                                       __ptext3 2104  
                                                       __ptext4 1EE8  
                                                       __ptext5 0E98  
                                                       __ptext6 1928  
                                                       __ptext7 1D8C  
                                                       __ptext8 1E00  
                                                       __ptext9 21B8  
                                               __size_of_uartTx 004E  
                                                     _T0CONbits 000FD5  
                                                       _initADC 2098  
                                               ??_initPinMotors 0012  
                                                       _liftArm 1C56  
                                                     _T2CONbits 000FCA  
                                                       _readSeq 21C0  
                                                  __size_of_isr 0162  
                                                    ??___xxtofl 0016  
                                                    ??_clearTM0 0012  
                                                       _setStep 1928  
                                                       _pwmStep 0063  
                                                       _stopADC 21D8  
                                             __end_of_reduceSeq 21C0  
                                             __end_of_retPeriod 214E  
                                                    _releaseObj 21E8  
                                          __size_of_returnTherm 000C  
                                          end_of_initialization 1D7E  
                                          __size_of_returnTouch 000C  
                                              rotateObj@totStep 00F4  
                                             __end_of_shiftData 1F48  
                                                       isr@temp 0011  
                                             __end_of_resetStep 2190  
                                                    ??_tim0Init 0012  
                                                 __Lmediumconst 0000  
                                                    ??_tim2Init 0014  
                                              storeData@command 0059  
                                              storeData@counter 005A  
                                                    ??_setDecay 0013  
                                              enableMotor@motor 0012  
                                                    _resetTherm 2172  
                                                    _resetTouch 217C  
                                                       uartTx@i 0015  
                                                   ?_fatalError 0001  
                                                     _RCSTAbits 000FAB  
                                                       postdec1 000FE5  
                                             __end_of_rotateObj 1C56  
                                                       postinc0 000FEE  
                                                       postinc1 000FE6  
                                                       postinc2 000FDE  
                                                    ??_startADC 0012  
                                                    ??_stepMade 0014  
                                          __size_of_stepCounter 000C  
                                                 _interruptInit 2038  
                                             __end_of_usartInit 20DC  
                                             __end_of_storeData 13D6  
                                    __end_ofrotateObj@stepAngle 0605  
                                                    ??_writeTM0 0001  
                                                     _PORTDbits 000F83  
                                                    _printError 150C  
                                                     _PORTEbits 000F84  
                                                 ??_enableMotor 0013  
                                           i2printError@errCode 0007  
                                                    _toggleStep 2190  
                                                 ___xxtofl@sign 001A  
                                                     _TRISCbits 000F94  
                                                     _TRISDbits 000F95  
                                                     _TRISEbits 000F96  
                                                   ___fldiv@grs 0033  
                                                   ___fldiv@rem 002C  
                                          __size_of_touchObject 00F2  
                                                    _stepToggle 0062  
                                                    _touchTherm 1744  
                                          __end_of_setDirection 1EE8  
                                                     _TXSTAbits 000FAC  
                                                ?_interruptInit 0001  
                                                 __pidataCOMRAM 21AE  
                                         __size_of_increaseStep 0008  
                                                   ?_pickObject 0001  
                                                   __fatalError 005C  
                                                __end_of_uartTx 1FEA  
                                                 moveToPoint@x1 0016  
                                                 moveToPoint@x2 001A  
                                                 moveToPoint@y1 0018  
                                                 moveToPoint@y2 001C  
                                           start_initialization 1D06  
                                                     i2uartTx@i 0004  
                                                   __end_of_isr 016A  
                                           __size_of_fatalError 0008  
                                           __end_of_enableMotor 1E74  
                                                   ?_releaseObj 0001  
                                             __size_ofi2_uartTx 004E  
                                               _errString_Fatal 01AB  
                                               _errString_Bound 0080  
                                                   ?_resetTherm 0001  
                                               _errString_Reset 0184  
                                                   ?_resetTouch 0001  
                                               _errString_Point 0134  
                                                  _increaseStep 2200  
                                        __size_of_resetPosition 01F2  
                                                 ??_executeData 00F7  
                                                   __pdataBANK0 0080  
                                                   __pdataBANK1 0100  
                                                   _dataCounter 005D  
                                                      ??_uartTx 0015  
                                        moveToPoint@keepMovingX 0020  
                                        moveToPoint@keepMovingY 0021  
                                                   ?_printError 0001  
                                                     ___fldiv@a 0024  
                                                     ___fldiv@b 0020  
                                                _therm_pressure 0605  
                                                   ?_toggleStep 0001  
                                                   __pbssCOMRAM 0043  
                                                 __pcstackBANK0 00F0  
                                                 ??_newSequence 0012  
                                             __size_of___xxtofl 01F8  
                                             __size_of_clearTM0 000E  
                                                   ?_touchTherm 0001  
                                           __size_of_pickObject 0008  
                                            executeData@errCode 00F9  
                                             __size_of_tim0Init 0012  
                                             __size_of_tim2Init 0014  
                                               ??_interruptInit 0012  
                                             __size_of_setDecay 0074  
                                                     __pintcode 0008  
                                                      ?___fldiv 0020  
                                                      ?___fltol 0039  
                                           __size_of_releaseObj 0008  
                                                 storeData@data 000A  
                                                      ?_getData 0012  
                                             __size_of_startADC 0008  
                                             __size_of_stepMade 0014  
                                        __end_of_therm_pressure 0607  
                                                      ?_initADC 0001  
                                                   __smallconst 0600  
                                                      ?_liftArm 0001  
                                                   _enableMotor 1E00  
                                                      ?_readSeq 0001  
                                             __size_of_writeTM0 000E  
                                           __end_of_executeData 0CA0  
                                                    shiftData@i 0014  
                                                      ?_setStep 0012  
                                           __size_of_resetTherm 000A  
                                                 _resetPosition 0E98  
                                           __size_of_resetTouch 000A  
                                                 ??_setThermRel 0001  
                                                      ?_stopADC 0001  
                                         __size_of_setDirection 0074  
                                                 ??_moveToPoint 001E  
                                                 ??_setTouchRel 0001  
                                           __end_of_newSequence 21D0  
                                                     _reduceSeq 21B8  
                                                      _LATAbits 000F89  
                                                      _LATBbits 000F8A  
                                                     _retPeriod 2140  
                                                      _LATCbits 000F8B  
                                                      _LATDbits 000F8C  
                                           __size_of_printError 011C  
                                                      _IPR1bits 000F9F  
                                                      _PIE1bits 000F9D  
                                                     _shiftData 1EE8  
                                                      i2u220_40 0106  
                                                      i2u220_41 0100  
                                                      i2u221_40 012C  
                                                      i2u213_40 002C  
                                                      i2u221_41 0126  
                                                      i2u213_41 0026  
                                                      i2u222_40 0144  
                                                      i2u214_40 004C  
                                                      i2u222_41 013E  
                                                      i2u214_41 0046  
                                                      i2u215_40 006A  
                                                      i2u215_41 0064  
                                                      i2u216_40 008E  
                                                      i2u216_41 0088  
                                                      i2u209_40 12F8  
                                                      i2u217_40 00A4  
                                                      i2u209_41 12F2  
                                                      i2u217_41 009E  
                                                      i2u218_40 00B6  
                                                      i2u218_41 00B0  
                                                      i2u219_40 00D8  
                                                      i2u219_41 00D2  
                                                      i2u156_40 2014  
                                                      i2u156_41 200E  
                                                     _resetStep 2186  
                                                      i2u157_40 2032  
                                                      i2u157_41 202C  
                                                      _PIR1bits 000F9E  
                                           __size_of_toggleStep 000A  
                                                  ??_fatalError 0012  
                                                     _posVector 004C  
                                                      _RCONbits 000FD0  
                                                     _therm_rel 0060  
                                                     _pwmPeriod 0053  
                                             setDirection@motor 0012  
                                                     _rotateObj 1B9C  
                                                    _ADCON0bits 000FC2  
                                                    _ADCON1bits 000FC1  
                                           __size_of_touchTherm 00F2  
                                                  _setDirection 1E74  
                                                     _usartInit 20BE  
                                                     _touch_rel 0061  
                                            __end_of_feeder1Pos 060F  
                                            __end_of_feeder2Pos 060D  
                                            __end_of_feeder3Pos 060B  
                                                     _storeData 1274  
                                                ?_resetPosition 0001  
                                         __end_of_initPinMotors 2098  
                                                 ??_returnTherm 0014  
                                                 ??_returnTouch 0014  
                                                      i2_uartTx 1FEA  
                                                     copy_data0 1D1A  
                                                     copy_data1 1D3A  
                                                     copy_data2 1D5A  
                                            __end_of_fatalError 21D8  
                                            rotateObj@stepAngle 0601  
                                                    ?_reduceSeq 0001  
                                                    ?_retPeriod 0001  
                                                  setStep@motor 0012  
                                                    rotateObj@i 00F6  
                                        __size_of_whatsTM0Limit 0008  
                                           __end_of_setThermRel 21AE  
                                           __end_of_moveToPoint 1274  
                                             printError@errCode 0018  
                                                    ?_shiftData 0001  
                                                 ??_stepCounter 0014  
                                                      __Hrparam 0000  
                                                    ?_resetStep 0001  
                                           __end_of_setTouchRel 21A4  
                                                      __Lrparam 0000  
                                              __size_of___fldiv 0432  
                                              __size_of___fltol 0136  
                                                   _executeData 0A42  
                                                  ??_pickObject 0012  
                                                    ?_rotateObj 0001  
                                                 ?i2_printError 0001  
                                              __size_of_getData 000E  
                                                 ??_touchObject 0016  
                                                    ?_usartInit 0001  
                                              __size_of_initADC 0026  
                                                      ___xxtofl 0CA0  
                                              __size_of_liftArm 00B0  
                                                    ?_storeData 0001  
                                                      _clearTM0 2124  
                                              __size_of_readSeq 0008  
                                            storeData@mexLength 006D  
                                                      _tm0Error 0057  
                                                      _tm0Limit 0064  
                                              __size_of_setStep 00D6  
                                                   _newSequence 21C8  
                                                      __ptext10 21C0  
                                                      __ptext11 150C  
                                                      __ptext20 214E  
                                                      __ptext12 1F9C  
                                                      __ptext21 2172  
                                                      __ptext13 21C8  
                                                      __ptext30 0610  
                                                      __ptext22 1836  
                                                      __ptext14 2038  
                                                      __ptext31 21E8  
                                                      __ptext23 21D8  
                                                      __ptext15 2072  
                                                      __ptext40 2124  
                                                      __ptext32 21F0  
                                                      __ptext24 21E0  
                                                      __ptext16 2098  
                                                      __ptext33 108A  
                                                      __ptext25 215A  
                                                      __ptext17 21D0  
                                                      __ptext50 2140  
                                                      __ptext42 2132  
                                                      __ptext34 2166  
                                                      __ptext26 217C  
                                                      __ptext18 0A42  
                                                      __ptext51 2200  
                                                      __ptext43 21F8  
                                                      __ptext35 1C56  
                                                      __ptext27 1B9C  
                                                      __ptext19 1744  
                                                      __ptext44 2190  
                                                      __ptext36 20F0  
                                                      __ptext28 0CA0  
                                                      __ptext45 1274  
                                                      __ptext37 1E74  
                                                      __ptext29 13D6  
                                                      __ptext46 1628  
                                                      __ptext38 2186  
                                                      __ptext47 1FEA  
                                                      __ptext39 2116  
                                                      __ptext48 219A  
                                                      __ptext49 21A4  
                                                  ??_releaseObj 0012  
                                              __size_of_stopADC 0008  
                                           __end_of_returnTherm 215A  
                                           __end_of_returnTouch 2166  
                                                      _tim0Init 2104  
                                                      _tim2Init 20DC  
                                                 __size_of_main 00CC  
                                                      _setDecay 1D8C  
                                            __end_of_pickObject 21F8  
                                                  ??_resetTherm 0012  
                                                  ??_resetTouch 0012  
                                                     uartTx@ptr 0012  
                                                      _rotAngle 0055  
                                               isr@completeStep 005E  
                                                      int$flags 006E  
                                                      _startADC 21E0  
                                                      _stepMade 20F0  
                                           __end_of_stepCounter 2172  
                                             rotateObj@rotAngle 00F3  
                                                ??i2_printError 0005  
                                            __end_of_releaseObj 21F0  
                                                      _writeTM0 2132  
                                                  ??_printError 0016  
                                                 _whatsTM0Limit 21F8  
                                               ??_resetPosition 0016  
                                            tim2Init@_pwmPeriod 0012  
                                                    _INTCONbits 000FF2  
                                                  ??_toggleStep 0001  
                                            __end_of_resetTherm 217C  
                                            __end_of_resetTouch 2186  
                                                   _setThermRel 21A4  
                                                  uartTx@length 0014  
                                                   _moveToPoint 108A  
                                           __end_of_touchObject 1928  
                                                      intlevel2 2208  
                                             enableMotor@enable 0015  
                                                  ??_touchTherm 0016  
                                                   _setTouchRel 219A  
                                                   ??_reduceSeq 0012  
                                                   ??_retPeriod 0003  
                                                    _RCSTA1bits 000FAB  
                                            __end_of_printError 1628  
                                         setDirection@direction 0015  
                                                   ??_shiftData 0012  
                                                   ??_resetStep 0012  
                                            __end_of_toggleStep 219A  
                                                ?_whatsTM0Limit 0001  
                                                   ??_rotateObj 00F0  
                                            __end_of_touchTherm 1836  
                                                  ?_enableMotor 0012  
                                                   ??_usartInit 0012  
                                                   ??_storeData 0008  
                                                   _returnTherm 214E  
                                                   _returnTouch 215A  
                                                   _stepCounter 2166  
