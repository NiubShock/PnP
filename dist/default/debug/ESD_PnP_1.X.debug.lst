

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Wed Apr 28 15:12:42 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    76                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    77  0000                     
    78                           ; Version 2.20
    79                           ; Generated 12/02/2020 GMT
    80                           ; 
    81                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F452 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataCOMRAM
   114  002590                     __pidataCOMRAM:
   115                           	callstack 0
   116                           
   117                           ;initializer for _motCounter
   118  002590  00                 	db	0
   119  002591  01                 	db	1
   120  002592  00                 	db	0
   121  002593  01                 	db	1
   122  002594  00                 	db	0
   123  002595  01                 	db	1
   124                           
   125                           ;initializer for storeData@mexLength
   126  002596  05                 	db	5
   127                           
   128                           	psect	idataBANK0
   129  0022DA                     __pidataBANK0:
   130                           	callstack 0
   131                           
   132                           ;initializer for rotateObj@rotSequence
   133  0022DA  24                 	db	36
   134  0022DB  0C                 	db	12
   135  0022DC  18                 	db	24
   136  0022DD  30                 	db	48
   137                           
   138                           ;initializer for _stepMot3
   139  0022DE  09                 	db	9
   140  0022DF  03                 	db	3
   141  0022E0  06                 	db	6
   142  0022E1  0C                 	db	12
   143                           
   144                           ;initializer for _stepMot2
   145  0022E2  11                 	db	17
   146  0022E3  05                 	db	5
   147  0022E4  0C                 	db	12
   148  0022E5  18                 	db	24
   149                           
   150                           ;initializer for _stepMot1
   151  0022E6  22                 	db	34
   152  0022E7  06                 	db	6
   153  0022E8  0C                 	db	12
   154  0022E9  28                 	db	40
   155                           
   156                           ;initializer for _maxY
   157  0022EA  0065               	dw	101
   158                           
   159                           ;initializer for _maxX
   160  0022EC  0065               	dw	101
   161                           
   162                           ;initializer for _errString_Feed
   163  0022EE  45                 	db	69
   164  0022EF  72                 	db	114
   165  0022F0  72                 	db	114
   166  0022F1  6F                 	db	111
   167  0022F2  72                 	db	114
   168  0022F3  2C                 	db	44
   169  0022F4  20                 	db	32
   170  0022F5  66                 	db	102
   171  0022F6  65                 	db	101
   172  0022F7  65                 	db	101
   173  0022F8  64                 	db	100
   174  0022F9  20                 	db	32
   175  0022FA  6C                 	db	108
   176  0022FB  69                 	db	105
   177  0022FC  6E                 	db	110
   178  0022FD  65                 	db	101
   179  0022FE  20                 	db	32
   180  0022FF  6E                 	db	110
   181  002300  6F                 	db	111
   182  002301  74                 	db	116
   183  002302  20                 	db	32
   184  002303  64                 	db	100
   185  002304  65                 	db	101
   186  002305  66                 	db	102
   187  002306  69                 	db	105
   188  002307  6E                 	db	110
   189  002308  65                 	db	101
   190  002309  64                 	db	100
   191  00230A  0A                 	db	10
   192  00230B  00                 	db	0
   193                           
   194                           ;initializer for _errString_Command
   195  00230C  43                 	db	67
   196  00230D  6F                 	db	111
   197  00230E  6D                 	db	109
   198  00230F  6D                 	db	109
   199  002310  61                 	db	97
   200  002311  6E                 	db	110
   201  002312  64                 	db	100
   202  002313  20                 	db	32
   203  002314  6E                 	db	110
   204  002315  6F                 	db	111
   205  002316  74                 	db	116
   206  002317  20                 	db	32
   207  002318  72                 	db	114
   208  002319  65                 	db	101
   209  00231A  63                 	db	99
   210  00231B  6F                 	db	111
   211  00231C  67                 	db	103
   212  00231D  6E                 	db	110
   213  00231E  69                 	db	105
   214  00231F  7A                 	db	122
   215  002320  65                 	db	101
   216  002321  64                 	db	100
   217  002322  0A                 	db	10
   218  002323  00                 	db	0
   219                           
   220                           	psect	idataBANK1
   221  001EC8                     __pidataBANK1:
   222                           	callstack 0
   223                           
   224                           ;initializer for _errString_PointZ
   225  001EC8  45                 	db	69
   226  001EC9  72                 	db	114
   227  001ECA  72                 	db	114
   228  001ECB  6F                 	db	111
   229  001ECC  72                 	db	114
   230  001ECD  2C                 	db	44
   231  001ECE  20                 	db	32
   232  001ECF  74                 	db	116
   233  001ED0  69                 	db	105
   234  001ED1  6D                 	db	109
   235  001ED2  65                 	db	101
   236  001ED3  20                 	db	32
   237  001ED4  65                 	db	101
   238  001ED5  78                 	db	120
   239  001ED6  63                 	db	99
   240  001ED7  65                 	db	101
   241  001ED8  65                 	db	101
   242  001ED9  64                 	db	100
   243  001EDA  65                 	db	101
   244  001EDB  64                 	db	100
   245  001EDC  20                 	db	32
   246  001EDD  74                 	db	116
   247  001EDE  6F                 	db	111
   248  001EDF  20                 	db	32
   249  001EE0  72                 	db	114
   250  001EE1  65                 	db	101
   251  001EE2  61                 	db	97
   252  001EE3  63                 	db	99
   253  001EE4  68                 	db	104
   254  001EE5  20                 	db	32
   255  001EE6  74                 	db	116
   256  001EE7  68                 	db	104
   257  001EE8  65                 	db	101
   258  001EE9  20                 	db	32
   259  001EEA  65                 	db	101
   260  001EEB  6E                 	db	110
   261  001EEC  64                 	db	100
   262  001EED  20                 	db	32
   263  001EEE  6F                 	db	111
   264  001EEF  66                 	db	102
   265  001EF0  20                 	db	32
   266  001EF1  74                 	db	116
   267  001EF2  68                 	db	104
   268  001EF3  65                 	db	101
   269  001EF4  20                 	db	32
   270  001EF5  5A                 	db	90
   271  001EF6  20                 	db	32
   272  001EF7  41                 	db	65
   273  001EF8  78                 	db	120
   274  001EF9  69                 	db	105
   275  001EFA  73                 	db	115
   276  001EFB  0A                 	db	10
   277  001EFC  00                 	db	0
   278                           
   279                           ;initializer for _errString_Point
   280  001EFD  45                 	db	69
   281  001EFE  72                 	db	114
   282  001EFF  72                 	db	114
   283  001F00  6F                 	db	111
   284  001F01  72                 	db	114
   285  001F02  2C                 	db	44
   286  001F03  20                 	db	32
   287  001F04  74                 	db	116
   288  001F05  69                 	db	105
   289  001F06  6D                 	db	109
   290  001F07  65                 	db	101
   291  001F08  20                 	db	32
   292  001F09  65                 	db	101
   293  001F0A  78                 	db	120
   294  001F0B  63                 	db	99
   295  001F0C  65                 	db	101
   296  001F0D  65                 	db	101
   297  001F0E  64                 	db	100
   298  001F0F  65                 	db	101
   299  001F10  64                 	db	100
   300  001F11  20                 	db	32
   301  001F12  74                 	db	116
   302  001F13  6F                 	db	111
   303  001F14  20                 	db	32
   304  001F15  72                 	db	114
   305  001F16  65                 	db	101
   306  001F17  61                 	db	97
   307  001F18  63                 	db	99
   308  001F19  68                 	db	104
   309  001F1A  20                 	db	32
   310  001F1B  74                 	db	116
   311  001F1C  68                 	db	104
   312  001F1D  65                 	db	101
   313  001F1E  20                 	db	32
   314  001F1F  70                 	db	112
   315  001F20  6F                 	db	111
   316  001F21  69                 	db	105
   317  001F22  6E                 	db	110
   318  001F23  74                 	db	116
   319  001F24  0A                 	db	10
   320  001F25  00                 	db	0
   321                           
   322                           ;initializer for _errString_ZEND
   323  001F26  45                 	db	69
   324  001F27  72                 	db	114
   325  001F28  72                 	db	114
   326  001F29  6F                 	db	111
   327  001F2A  72                 	db	114
   328  001F2B  2C                 	db	44
   329  001F2C  20                 	db	32
   330  001F2D  6E                 	db	110
   331  001F2E  6F                 	db	111
   332  001F2F  20                 	db	32
   333  001F30  6F                 	db	111
   334  001F31  62                 	db	98
   335  001F32  6A                 	db	106
   336  001F33  65                 	db	101
   337  001F34  63                 	db	99
   338  001F35  74                 	db	116
   339  001F36  20                 	db	32
   340  001F37  72                 	db	114
   341  001F38  65                 	db	101
   342  001F39  6C                 	db	108
   343  001F3A  65                 	db	101
   344  001F3B  76                 	db	118
   345  001F3C  61                 	db	97
   346  001F3D  74                 	db	116
   347  001F3E  65                 	db	101
   348  001F3F  64                 	db	100
   349  001F40  20                 	db	32
   350  001F41  61                 	db	97
   351  001F42  6C                 	db	108
   352  001F43  6F                 	db	111
   353  001F44  6E                 	db	110
   354  001F45  67                 	db	103
   355  001F46  20                 	db	32
   356  001F47  5A                 	db	90
   357  001F48  20                 	db	32
   358  001F49  41                 	db	65
   359  001F4A  78                 	db	120
   360  001F4B  69                 	db	105
   361  001F4C  73                 	db	115
   362  001F4D  0A                 	db	10
   363  001F4E  00                 	db	0
   364                           
   365                           ;initializer for _errString_Reset
   366  001F4F  45                 	db	69
   367  001F50  72                 	db	114
   368  001F51  72                 	db	114
   369  001F52  6F                 	db	111
   370  001F53  72                 	db	114
   371  001F54  2C                 	db	44
   372  001F55  20                 	db	32
   373  001F56  74                 	db	116
   374  001F57  69                 	db	105
   375  001F58  6D                 	db	109
   376  001F59  65                 	db	101
   377  001F5A  20                 	db	32
   378  001F5B  65                 	db	101
   379  001F5C  78                 	db	120
   380  001F5D  63                 	db	99
   381  001F5E  65                 	db	101
   382  001F5F  65                 	db	101
   383  001F60  64                 	db	100
   384  001F61  65                 	db	101
   385  001F62  64                 	db	100
   386  001F63  20                 	db	32
   387  001F64  74                 	db	116
   388  001F65  6F                 	db	111
   389  001F66  20                 	db	32
   390  001F67  72                 	db	114
   391  001F68  65                 	db	101
   392  001F69  73                 	db	115
   393  001F6A  65                 	db	101
   394  001F6B  74                 	db	116
   395  001F6C  20                 	db	32
   396  001F6D  70                 	db	112
   397  001F6E  6F                 	db	111
   398  001F6F  73                 	db	115
   399  001F70  69                 	db	105
   400  001F71  74                 	db	116
   401  001F72  69                 	db	105
   402  001F73  6F                 	db	111
   403  001F74  6E                 	db	110
   404  001F75  0A                 	db	10
   405  001F76  00                 	db	0
   406                           
   407                           ;initializer for _errString_Fatal
   408  001F77  46                 	db	70
   409  001F78  61                 	db	97
   410  001F79  74                 	db	116
   411  001F7A  61                 	db	97
   412  001F7B  6C                 	db	108
   413  001F7C  20                 	db	32
   414  001F7D  45                 	db	69
   415  001F7E  72                 	db	114
   416  001F7F  72                 	db	114
   417  001F80  6F                 	db	111
   418  001F81  72                 	db	114
   419  001F82  2C                 	db	44
   420  001F83  20                 	db	32
   421  001F84  70                 	db	112
   422  001F85  6C                 	db	108
   423  001F86  65                 	db	101
   424  001F87  61                 	db	97
   425  001F88  73                 	db	115
   426  001F89  65                 	db	101
   427  001F8A  20                 	db	32
   428  001F8B  72                 	db	114
   429  001F8C  65                 	db	101
   430  001F8D  73                 	db	115
   431  001F8E  65                 	db	101
   432  001F8F  74                 	db	116
   433  001F90  20                 	db	32
   434  001F91  74                 	db	116
   435  001F92  68                 	db	104
   436  001F93  65                 	db	101
   437  001F94  20                 	db	32
   438  001F95  64                 	db	100
   439  001F96  65                 	db	101
   440  001F97  76                 	db	118
   441  001F98  69                 	db	105
   442  001F99  63                 	db	99
   443  001F9A  65                 	db	101
   444  001F9B  21                 	db	33
   445  001F9C  0A                 	db	10
   446  001F9D  00                 	db	0
   447                           
   448                           ;initializer for _errString_Bound
   449  001F9E  45                 	db	69
   450  001F9F  72                 	db	114
   451  001FA0  72                 	db	114
   452  001FA1  6F                 	db	111
   453  001FA2  72                 	db	114
   454  001FA3  2C                 	db	44
   455  001FA4  20                 	db	32
   456  001FA5  70                 	db	112
   457  001FA6  6F                 	db	111
   458  001FA7  69                 	db	105
   459  001FA8  6E                 	db	110
   460  001FA9  74                 	db	116
   461  001FAA  20                 	db	32
   462  001FAB  6F                 	db	111
   463  001FAC  75                 	db	117
   464  001FAD  74                 	db	116
   465  001FAE  73                 	db	115
   466  001FAF  69                 	db	105
   467  001FB0  64                 	db	100
   468  001FB1  65                 	db	101
   469  001FB2  20                 	db	32
   470  001FB3  62                 	db	98
   471  001FB4  6F                 	db	111
   472  001FB5  75                 	db	117
   473  001FB6  6E                 	db	110
   474  001FB7  64                 	db	100
   475  001FB8  61                 	db	97
   476  001FB9  72                 	db	114
   477  001FBA  69                 	db	105
   478  001FBB  65                 	db	101
   479  001FBC  73                 	db	115
   480  001FBD  0A                 	db	10
   481  001FBE  00                 	db	0
   482                           
   483                           	psect	smallconst
   484  000600                     __psmallconst:
   485                           	callstack 0
   486  000600  00                 	db	0
   487  000601  0000               	dw	0
   488  000603  4120               	dw	16672
   489  000605                     __end_ofrotateObj@stepAngle:
   490                           	callstack 0
   491  000605  0400               	dw	1024
   492  000607                     __end_of_therm_pressure:
   493                           	callstack 0
   494  000607  0200               	dw	512
   495  000609                     __end_of_touch_pressure:
   496                           	callstack 0
   497  000609                     _feeder3Pos:
   498                           	callstack 0
   499  000609  0F                 	db	15
   500  00060A  50                 	db	80
   501  00060B                     __end_of_feeder3Pos:
   502                           	callstack 0
   503  00060B                     _feeder2Pos:
   504                           	callstack 0
   505  00060B  0F                 	db	15
   506  00060C  32                 	db	50
   507  00060D                     __end_of_feeder2Pos:
   508                           	callstack 0
   509  00060D                     _feeder1Pos:
   510                           	callstack 0
   511  00060D  0F                 	db	15
   512  00060E  14                 	db	20
   513  00060F                     __end_of_feeder1Pos:
   514                           	callstack 0
   515  00060F  64                 	db	100
   516  000610                     __end_of_maxFeedY:
   517                           	callstack 0
   518  000610  1E                 	db	30
   519  000611                     __end_of_maxFeedX:
   520                           	callstack 0
   521  0000                     _TMR0	set	4054
   522  0000                     _T1CONbits	set	4045
   523  0000                     _TXREG	set	4013
   524  0000                     _SPBRG	set	4015
   525  0000                     _TXSTAbits	set	4012
   526  0000                     _TRISCbits	set	3988
   527  0000                     _RCREG1	set	4014
   528  0000                     _ADRESH	set	4036
   529  0000                     _ADRESL	set	4035
   530  0000                     _PIR1bits	set	3998
   531  0000                     _RCONbits	set	4048
   532  0000                     _INTCONbits	set	4082
   533  0000                     _IPR1bits	set	3999
   534  0000                     _PIE1bits	set	3997
   535  0000                     _ADCON0bits	set	4034
   536  0000                     _RCSTAbits	set	4011
   537  0000                     _RCSTA1bits	set	4011
   538  0000                     _LATD	set	3980
   539  0000                     _PORTDbits	set	3971
   540  0000                     _TMR2	set	4044
   541  0000                     _LATC	set	3979
   542  0000                     _LATB	set	3978
   543  0000                     _LATA	set	3977
   544  0000                     _PORTEbits	set	3972
   545  0000                     _T0CONbits	set	4053
   546  0000                     _T2CONbits	set	4042
   547  0000                     _LATDbits	set	3980
   548  0000                     _LATCbits	set	3979
   549  0000                     _LATBbits	set	3978
   550  0000                     _LATAbits	set	3977
   551  0000                     _TRISDbits	set	3989
   552  0000                     _TRISEbits	set	3990
   553  0000                     _TRISD	set	3989
   554  0000                     _TRISC	set	3988
   555  0000                     _TRISB	set	3987
   556  0000                     _TRISA	set	3986
   557  0000                     _ADCON1bits	set	4033
   558  000611  00                 	db	0	; dummy byte at the end
   559  0000                     
   560                           ; #config settings
   561                           
   562                           	psect	cinit
   563  002158                     __pcinit:
   564                           	callstack 0
   565  002158                     start_initialization:
   566                           	callstack 0
   567  002158                     __initialization:
   568                           	callstack 0
   569                           
   570                           ; Initialize objects allocated to BANK1 (247 bytes)
   571                           ; load TBLPTR registers with __pidataBANK1
   572  002158  0EC8               	movlw	low __pidataBANK1
   573  00215A  6EF6               	movwf	tblptrl,c
   574  00215C  0E1E               	movlw	high __pidataBANK1
   575  00215E  6EF7               	movwf	tblptrh,c
   576  002160  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   577  002162  6EF8               	movwf	tblptru,c
   578  002164  EE01  F000         	lfsr	0,__pdataBANK1
   579  002168  EE10 F0F7          	lfsr	1,247
   580  00216C                     copy_data0:
   581  00216C  0009               	tblrd		*+
   582  00216E  CFF5 FFEE          	movff	tablat,postinc0
   583  002172  50E5               	movf	postdec1,w,c
   584  002174  50E1               	movf	fsr1l,w,c
   585  002176  E1FA               	bnz	copy_data0
   586                           
   587                           ; Initialize objects allocated to BANK0 (74 bytes)
   588                           ; load TBLPTR registers with __pidataBANK0
   589  002178  0EDA               	movlw	low __pidataBANK0
   590  00217A  6EF6               	movwf	tblptrl,c
   591  00217C  0E22               	movlw	high __pidataBANK0
   592  00217E  6EF7               	movwf	tblptrh,c
   593  002180  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   594  002182  6EF8               	movwf	tblptru,c
   595  002184  EE00  F080         	lfsr	0,__pdataBANK0
   596  002188  EE10 F04A          	lfsr	1,74
   597  00218C                     copy_data1:
   598  00218C  0009               	tblrd		*+
   599  00218E  CFF5 FFEE          	movff	tablat,postinc0
   600  002192  50E5               	movf	postdec1,w,c
   601  002194  50E1               	movf	fsr1l,w,c
   602  002196  E1FA               	bnz	copy_data1
   603                           
   604                           ; Initialize objects allocated to COMRAM (7 bytes)
   605                           ; load TBLPTR registers with __pidataCOMRAM
   606  002198  0E90               	movlw	low __pidataCOMRAM
   607  00219A  6EF6               	movwf	tblptrl,c
   608  00219C  0E25               	movlw	high __pidataCOMRAM
   609  00219E  6EF7               	movwf	tblptrh,c
   610  0021A0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   611  0021A2  6EF8               	movwf	tblptru,c
   612  0021A4  EE00  F067         	lfsr	0,__pdataCOMRAM
   613  0021A8  EE10 F007          	lfsr	1,7
   614  0021AC                     copy_data2:
   615  0021AC  0009               	tblrd		*+
   616  0021AE  CFF5 FFEE          	movff	tablat,postinc0
   617  0021B2  50E5               	movf	postdec1,w,c
   618  0021B4  50E1               	movf	fsr1l,w,c
   619  0021B6  E1FA               	bnz	copy_data2
   620                           
   621                           ; Clear objects allocated to BANK0 (28 bytes)
   622  0021B8  EE00  F0CA         	lfsr	0,__pbssBANK0
   623  0021BC  0E1C               	movlw	28
   624  0021BE                     clear_0:
   625  0021BE  6AEE               	clrf	postinc0,c
   626  0021C0  06E8               	decf	wreg,f,c
   627  0021C2  E1FD               	bnz	clear_0
   628                           
   629                           ; Clear objects allocated to COMRAM (36 bytes)
   630  0021C4  EE00  F043         	lfsr	0,__pbssCOMRAM
   631  0021C8  0E24               	movlw	36
   632  0021CA                     clear_1:
   633  0021CA  6AEE               	clrf	postinc0,c
   634  0021CC  06E8               	decf	wreg,f,c
   635  0021CE  E1FD               	bnz	clear_1
   636  0021D0                     end_of_initialization:
   637                           	callstack 0
   638  0021D0                     __end_of__initialization:
   639                           	callstack 0
   640  0021D0  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   641  0021D2  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   642  0021D4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   643  0021D6  6EF8               	movwf	tblptru,c
   644  0021D8  0100               	movlb	0
   645  0021DA  EF4C  F00A         	goto	_main	;jump to C main() function
   646                           
   647                           	psect	bssCOMRAM
   648  000043                     __pbssCOMRAM:
   649                           	callstack 0
   650  000043                     storeData@receivedMex:
   651                           	callstack 0
   652  000043                     	ds	9
   653  00004C                     _posVector:
   654                           	callstack 0
   655  00004C                     	ds	3
   656  00004F                     _pwmPeriod:
   657                           	callstack 0
   658  00004F                     	ds	2
   659  000051                     _single_cycle:
   660                           	callstack 0
   661  000051                     	ds	2
   662  000053                     _ADC_res:
   663                           	callstack 0
   664  000053                     	ds	2
   665  000055                     _newFeeder:
   666                           	callstack 0
   667  000055                     	ds	2
   668  000057                     _rotAngle:
   669                           	callstack 0
   670  000057                     	ds	2
   671  000059                     _tm0Error:
   672                           	callstack 0
   673  000059                     	ds	2
   674  00005B                     _stepToggle:
   675                           	callstack 0
   676  00005B                     	ds	1
   677  00005C                     _pwmStep:
   678                           	callstack 0
   679  00005C                     	ds	1
   680  00005D                     	ds	1
   681  00005E                     storeData@counter:
   682                           	callstack 0
   683  00005E                     	ds	1
   684  00005F                     __newSequence:
   685                           	callstack 0
   686  00005F                     	ds	1
   687  000060                     __fatalError:
   688                           	callstack 0
   689  000060                     	ds	1
   690  000061                     _dataCounter:
   691                           	callstack 0
   692  000061                     	ds	1
   693  000062                     _completeStep:
   694                           	callstack 0
   695  000062                     	ds	1
   696  000063                     _tm0Count:
   697                           	callstack 0
   698  000063                     	ds	1
   699  000064                     _therm_rel:
   700                           	callstack 0
   701  000064                     	ds	1
   702  000065                     _touch_rel:
   703                           	callstack 0
   704  000065                     	ds	1
   705  000066                     _tm0Limit:
   706                           	callstack 0
   707  000066                     	ds	1
   708                           
   709                           	psect	dataCOMRAM
   710  000067                     __pdataCOMRAM:
   711                           	callstack 0
   712  000067                     _motCounter:
   713                           	callstack 0
   714  000067                     	ds	6
   715  00006D                     storeData@mexLength:
   716                           	callstack 0
   717  00006D                     	ds	1
   718                           
   719                           	psect	bssBANK0
   720  0000CA                     __pbssBANK0:
   721                           	callstack 0
   722  0000CA                     _dataSequence:
   723                           	callstack 0
   724  0000CA                     	ds	20
   725  0000DE                     _newSequenceData:
   726                           	callstack 0
   727  0000DE                     	ds	8
   728                           
   729                           	psect	dataBANK0
   730  000080                     __pdataBANK0:
   731                           	callstack 0
   732  000080                     rotateObj@rotSequence:
   733                           	callstack 0
   734  000080                     	ds	4
   735  000084                     _stepMot3:
   736                           	callstack 0
   737  000084                     	ds	4
   738  000088                     _stepMot2:
   739                           	callstack 0
   740  000088                     	ds	4
   741  00008C                     _stepMot1:
   742                           	callstack 0
   743  00008C                     	ds	4
   744  000090                     	ds	2
   745  000092                     	ds	2
   746  000094                     _errString_Feed:
   747                           	callstack 0
   748  000094                     	ds	30
   749  0000B2                     _errString_Command:
   750                           	callstack 0
   751  0000B2                     	ds	24
   752                           
   753                           	psect	dataBANK1
   754  000100                     __pdataBANK1:
   755                           	callstack 0
   756  000100                     _errString_PointZ:
   757                           	callstack 0
   758  000100                     	ds	53
   759  000135                     _errString_Point:
   760                           	callstack 0
   761  000135                     	ds	41
   762  00015E                     _errString_ZEND:
   763                           	callstack 0
   764  00015E                     	ds	41
   765  000187                     _errString_Reset:
   766                           	callstack 0
   767  000187                     	ds	40
   768  0001AF                     _errString_Fatal:
   769                           	callstack 0
   770  0001AF                     	ds	39
   771  0001D6                     _errString_Bound:
   772                           	callstack 0
   773  0001D6                     	ds	33
   774                           
   775                           	psect	cstackBANK0
   776  0000E6                     __pcstackBANK0:
   777                           	callstack 0
   778  0000E6                     ??_rotateObj:
   779                           
   780                           ; 1 bytes @ 0x0
   781  0000E6                     	ds	2
   782  0000E8                     rotateObj@rotAngle:
   783                           	callstack 0
   784                           
   785                           ; 1 bytes @ 0x2
   786  0000E8                     	ds	1
   787  0000E9                     rotateObj@totStep:
   788                           	callstack 0
   789                           
   790                           ; 2 bytes @ 0x3
   791  0000E9                     	ds	2
   792  0000EB                     rotateObj@i:
   793                           	callstack 0
   794                           
   795                           ; 2 bytes @ 0x5
   796  0000EB                     	ds	2
   797  0000ED                     ??_executeData:
   798                           
   799                           ; 1 bytes @ 0x7
   800  0000ED                     	ds	2
   801  0000EF                     executeData@data:
   802                           	callstack 0
   803                           
   804                           ; 2 bytes @ 0x9
   805  0000EF                     	ds	2
   806  0000F1                     executeData@errCode:
   807                           	callstack 0
   808                           
   809                           ; 1 bytes @ 0xB
   810  0000F1                     	ds	1
   811  0000F2                     ??_main:
   812                           
   813                           ; 1 bytes @ 0xC
   814  0000F2                     	ds	2
   815  0000F4                     main@errCode:
   816                           	callstack 0
   817                           
   818                           ; 1 bytes @ 0xE
   819  0000F4                     	ds	1
   820  0000F5                     main@newData:
   821                           	callstack 0
   822                           
   823                           ; 2 bytes @ 0xF
   824  0000F5                     	ds	2
   825                           
   826                           	psect	cstackCOMRAM
   827  000001                     __pcstackCOMRAM:
   828                           	callstack 0
   829  000001                     ?_retPeriod:
   830                           	callstack 0
   831  000001                     i2uartTx@ptr:
   832                           	callstack 0
   833                           
   834                           ; 2 bytes @ 0x0
   835  000001                     	ds	2
   836  000003                     i2uartTx@length:
   837                           	callstack 0
   838                           
   839                           ; 1 bytes @ 0x2
   840  000003                     	ds	1
   841  000004                     i2uartTx@i:
   842                           	callstack 0
   843                           
   844                           ; 1 bytes @ 0x3
   845  000004                     	ds	1
   846  000005                     ??i2_printError:
   847                           
   848                           ; 1 bytes @ 0x4
   849  000005                     	ds	2
   850  000007                     i2printError@errCode:
   851                           	callstack 0
   852                           
   853                           ; 1 bytes @ 0x6
   854  000007                     	ds	1
   855  000008                     ??i2_storeData:
   856                           
   857                           ; 1 bytes @ 0x7
   858  000008                     	ds	2
   859  00000A                     i2storeData@data:
   860                           	callstack 0
   861                           
   862                           ; 1 bytes @ 0x9
   863  00000A                     	ds	1
   864  00000B                     ??_isr:
   865                           
   866                           ; 1 bytes @ 0xA
   867  00000B                     	ds	6
   868  000011                     isr@temp:
   869                           	callstack 0
   870                           
   871                           ; 1 bytes @ 0x10
   872  000011                     	ds	1
   873  000012                     ??_shiftData:
   874  000012                     ?_stepMade:
   875                           	callstack 0
   876  000012                     ?_stepCounter:
   877                           	callstack 0
   878  000012                     ?_returnTouch:
   879                           	callstack 0
   880  000012                     ?_returnTherm:
   881                           	callstack 0
   882  000012                     ?_getNewSequence:
   883                           	callstack 0
   884  000012                     ?_getData:
   885                           	callstack 0
   886  000012                     ?___xxtofl:
   887                           	callstack 0
   888  000012                     uartTx@ptr:
   889                           	callstack 0
   890  000012                     tim2Init@_pwmPeriod:
   891                           	callstack 0
   892  000012                     ___xxtofl@val:
   893                           	callstack 0
   894                           
   895                           ; 4 bytes @ 0x11
   896  000012                     	ds	2
   897  000014                     shiftData@i:
   898                           	callstack 0
   899  000014                     uartTx@length:
   900                           	callstack 0
   901  000014                     stepMade@temp:
   902                           	callstack 0
   903                           
   904                           ; 1 bytes @ 0x13
   905  000014                     	ds	1
   906  000015                     resetPosition@keepMovingX:
   907                           	callstack 0
   908  000015                     uartTx@i:
   909                           	callstack 0
   910  000015                     moveToPoint@x1:
   911                           	callstack 0
   912                           
   913                           ; 2 bytes @ 0x14
   914  000015                     	ds	1
   915  000016                     ??_printError:
   916  000016                     ??___xxtofl:
   917  000016                     resetPosition@keepMovingY:
   918                           	callstack 0
   919                           
   920                           ; 1 bytes @ 0x15
   921  000016                     	ds	1
   922  000017                     resetPosition@keepMovingZ:
   923                           	callstack 0
   924  000017                     moveToPoint@y1:
   925                           	callstack 0
   926                           
   927                           ; 2 bytes @ 0x16
   928  000017                     	ds	1
   929  000018                     printError@errCode:
   930                           	callstack 0
   931                           
   932                           ; 1 bytes @ 0x17
   933  000018                     	ds	1
   934  000019                     ??_storeData:
   935  000019                     moveToPoint@x2:
   936                           	callstack 0
   937                           
   938                           ; 2 bytes @ 0x18
   939  000019                     	ds	1
   940  00001A                     ___xxtofl@sign:
   941                           	callstack 0
   942                           
   943                           ; 1 bytes @ 0x19
   944  00001A                     	ds	1
   945  00001B                     storeData@data:
   946                           	callstack 0
   947  00001B                     ___xxtofl@exp:
   948                           	callstack 0
   949  00001B                     moveToPoint@y2:
   950                           	callstack 0
   951                           
   952                           ; 2 bytes @ 0x1A
   953  00001B                     	ds	1
   954  00001C                     ___xxtofl@arg:
   955                           	callstack 0
   956                           
   957                           ; 4 bytes @ 0x1B
   958  00001C                     	ds	1
   959  00001D                     ??_moveToPoint:
   960                           
   961                           ; 1 bytes @ 0x1C
   962  00001D                     	ds	2
   963  00001F                     moveToPoint@MOT1Direction:
   964                           	callstack 0
   965                           
   966                           ; 1 bytes @ 0x1E
   967  00001F                     	ds	1
   968  000020                     ?___fldiv:
   969                           	callstack 0
   970  000020                     moveToPoint@MOT2Direction:
   971                           	callstack 0
   972  000020                     ___fldiv@b:
   973                           	callstack 0
   974                           
   975                           ; 4 bytes @ 0x1F
   976  000020                     	ds	1
   977  000021                     moveToPoint@keepMovingX:
   978                           	callstack 0
   979                           
   980                           ; 1 bytes @ 0x20
   981  000021                     	ds	1
   982  000022                     moveToPoint@keepMovingY:
   983                           	callstack 0
   984                           
   985                           ; 1 bytes @ 0x21
   986  000022                     	ds	2
   987  000024                     ___fldiv@a:
   988                           	callstack 0
   989                           
   990                           ; 4 bytes @ 0x23
   991  000024                     	ds	4
   992  000028                     ??___fldiv:
   993                           
   994                           ; 1 bytes @ 0x27
   995  000028                     	ds	4
   996  00002C                     ___fldiv@rem:
   997                           	callstack 0
   998                           
   999                           ; 4 bytes @ 0x2B
  1000  00002C                     	ds	4
  1001  000030                     ___fldiv@sign:
  1002                           	callstack 0
  1003                           
  1004                           ; 1 bytes @ 0x2F
  1005  000030                     	ds	1
  1006  000031                     ___fldiv@new_exp:
  1007                           	callstack 0
  1008                           
  1009                           ; 2 bytes @ 0x30
  1010  000031                     	ds	2
  1011  000033                     ___fldiv@grs:
  1012                           	callstack 0
  1013                           
  1014                           ; 4 bytes @ 0x32
  1015  000033                     	ds	4
  1016  000037                     ___fldiv@bexp:
  1017                           	callstack 0
  1018                           
  1019                           ; 1 bytes @ 0x36
  1020  000037                     	ds	1
  1021  000038                     ___fldiv@aexp:
  1022                           	callstack 0
  1023                           
  1024                           ; 1 bytes @ 0x37
  1025  000038                     	ds	1
  1026  000039                     ?___fltol:
  1027                           	callstack 0
  1028  000039                     ___fltol@f1:
  1029                           	callstack 0
  1030                           
  1031                           ; 4 bytes @ 0x38
  1032  000039                     	ds	4
  1033  00003D                     ??___fltol:
  1034                           
  1035                           ; 1 bytes @ 0x3C
  1036  00003D                     	ds	4
  1037  000041                     ___fltol@sign1:
  1038                           	callstack 0
  1039                           
  1040                           ; 1 bytes @ 0x40
  1041  000041                     	ds	1
  1042  000042                     ___fltol@exp1:
  1043                           	callstack 0
  1044                           
  1045                           ; 1 bytes @ 0x41
  1046  000042                     	ds	1
  1047                           
  1048 ;;
  1049 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1050 ;;
  1051 ;; *************** function _main *****************
  1052 ;; Defined at:
  1053 ;;		line 19 in file "main.c"
  1054 ;; Parameters:    Size  Location     Type
  1055 ;;		None
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;  newData         2   15[BANK0 ] PTR struct .
  1058 ;;		 -> newSequenceData(8), 
  1059 ;;  errCode         1   14[BANK0 ] unsigned char 
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1069 ;;      Params:         0       0       0       0       0       0       0
  1070 ;;      Locals:         0       3       0       0       0       0       0
  1071 ;;      Temps:          0       2       0       0       0       0       0
  1072 ;;      Totals:         0       5       0       0       0       0       0
  1073 ;;Total ram usage:        5 bytes
  1074 ;; Hardware stack levels required when called:    7
  1075 ;; This function calls:
  1076 ;;		_clearTM0
  1077 ;;		_executeData
  1078 ;;		_getNewSequence
  1079 ;;		_initADC
  1080 ;;		_initPinMotors
  1081 ;;		_interruptInit
  1082 ;;		_newSequence
  1083 ;;		_printError
  1084 ;;		_readSeq
  1085 ;;		_reduceSeq
  1086 ;;		_resetNewSequence
  1087 ;;		_resetPosition
  1088 ;;		_shiftData
  1089 ;;		_storeData
  1090 ;;		_tim0Init
  1091 ;;		_tim1Init
  1092 ;;		_tim2Init
  1093 ;;		_usartInit
  1094 ;; This function is called by:
  1095 ;;		Startup code after reset
  1096 ;; This function uses a non-reentrant model
  1097 ;;
  1098                           
  1099                           	psect	text0
  1100  001498                     __ptext0:
  1101                           	callstack 0
  1102  001498                     _main:
  1103                           	callstack 24
  1104  001498  FFFF               	dw	65535	; assembler added errata NOP
  1105                           
  1106                           ;main.c: 23:     interruptInit();
  1107  00149A  EC92  F011         	call	_interruptInit	;wreg free
  1108  00149E                     
  1109                           ;main.c: 24:     initPinMotors();
  1110  00149E  ECE0  F011         	call	_initPinMotors	;wreg free
  1111  0014A2                     
  1112                           ;main.c: 25:     initADC();
  1113  0014A2  ECF3  F011         	call	_initADC	;wreg free
  1114  0014A6                     
  1115                           ;main.c: 26:     usartInit();
  1116  0014A6  EC06  F012         	call	_usartInit	;wreg free
  1117  0014AA                     
  1118                           ;main.c: 27:     tim0Init();
  1119  0014AA  EC28  F012         	call	_tim0Init	;wreg free
  1120  0014AE                     
  1121                           ;main.c: 28:     tim1Init();
  1122  0014AE  EC43  F012         	call	_tim1Init	;wreg free
  1123  0014B2                     
  1124                           ;main.c: 29:     tim2Init(10);
  1125  0014B2  0E00               	movlw	0
  1126  0014B4  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1127  0014B6  0E0A               	movlw	10
  1128  0014B8  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1129  0014BA  EC1F  F012         	call	_tim2Init	;wreg free
  1130  0014BE                     
  1131                           ;main.c: 32:     errCode = resetPosition();
  1132  0014BE  EC5A  F009         	call	_resetPosition	;wreg free
  1133  0014C2  0100               	movlb	0	; () banked
  1134  0014C4  6FF4               	movwf	main@errCode& (0+255),b
  1135  0014C6                     
  1136                           ; BSR set to: 0
  1137                           ;main.c: 33:     if(errCode != 0){
  1138  0014C6  51F4               	movf	main@errCode& (0+255),w,b
  1139  0014C8  B4D8               	btfsc	status,2,c
  1140  0014CA  EF69  F00A         	goto	u3821
  1141  0014CE  EF6C  F00A         	goto	u3820
  1142  0014D2                     u3821:
  1143  0014D2  FFFF               	dw	65535	; assembler added errata NOP
  1144  0014D4  EF73  F00A         	goto	l337
  1145  0014D8                     u3820:
  1146  0014D8  FFFF               	dw	65535	; assembler added errata NOP
  1147  0014DA                     
  1148                           ; BSR set to: 0
  1149                           ;main.c: 34:         printError(errCode);
  1150  0014DA  51F4               	movf	main@errCode& (0+255),w,b
  1151  0014DC  EC36  F00D         	call	_printError
  1152  0014E0                     l338:
  1153  0014E0  FFFF               	dw	65535	; assembler added errata NOP
  1154  0014E2  EF70  F00A         	goto	l338
  1155  0014E6                     l337:
  1156  0014E6  FFFF               	dw	65535	; assembler added errata NOP
  1157                           
  1158                           ; BSR set to: 0
  1159                           ;main.c: 39:     RCSTA1bits.CREN = 1;
  1160  0014E8  88AB               	bsf	171,4,c	;volatile
  1161  0014EA                     l4445:
  1162  0014EA  FFFF               	dw	65535	; assembler added errata NOP
  1163                           
  1164                           ;main.c: 42:         if(newSequence()){
  1165  0014EC  ECB4  F012         	call	_newSequence	;wreg free
  1166  0014F0  0900               	iorlw	0
  1167  0014F2  B4D8               	btfsc	status,2,c
  1168  0014F4  EF7E  F00A         	goto	u3831
  1169  0014F8  EF81  F00A         	goto	u3830
  1170  0014FC                     u3831:
  1171  0014FC  FFFF               	dw	65535	; assembler added errata NOP
  1172  0014FE  EF03  F00B         	goto	l4473
  1173  001502                     u3830:
  1174  001502  FFFF               	dw	65535	; assembler added errata NOP
  1175  001504                     
  1176                           ;main.c: 43:             t_newSequence* newData = getNewSequence();
  1177  001504  EC4A  F012         	call	_getNewSequence	;wreg free
  1178  001508  C012  F0F5         	movff	?_getNewSequence,main@newData
  1179  00150C  C013  F0F6         	movff	?_getNewSequence+1,main@newData+1
  1180  001510                     
  1181                           ;main.c: 45:             newFeeder[0] = newData ->init_posX;
  1182  001510  0100               	movlb	0	; () banked
  1183  001512  EE20 F002          	lfsr	2,2
  1184  001516  51F5               	movf	main@newData& (0+255),w,b
  1185  001518  26D9               	addwf	fsr2l,f,c
  1186  00151A  51F6               	movf	(main@newData+1)& (0+255),w,b
  1187  00151C  22DA               	addwfc	fsr2h,f,c
  1188  00151E  50DF               	movf	indf2,w,c
  1189  001520  6E55               	movwf	_newFeeder^0,c
  1190  001522                     
  1191                           ; BSR set to: 0
  1192                           ;main.c: 46:             newFeeder[1] = newData ->init_posY;
  1193  001522  EE20 F003          	lfsr	2,3
  1194  001526  51F5               	movf	main@newData& (0+255),w,b
  1195  001528  26D9               	addwf	fsr2l,f,c
  1196  00152A  51F6               	movf	(main@newData+1)& (0+255),w,b
  1197  00152C  22DA               	addwfc	fsr2h,f,c
  1198  00152E  50DF               	movf	indf2,w,c
  1199  001530  6E56               	movwf	(_newFeeder+1)^0,c
  1200  001532                     
  1201                           ; BSR set to: 0
  1202                           ;main.c: 50:             RCSTAbits.CREN = 0;
  1203  001532  98AB               	bcf	171,4,c	;volatile
  1204  001534                     
  1205                           ; BSR set to: 0
  1206                           ;main.c: 55:             if(newData ->end_posX > maxFeedX || newData ->end_posY > maxFee
      +                          dY){
  1207  001534  EE20 F005          	lfsr	2,5
  1208  001538  51F5               	movf	main@newData& (0+255),w,b
  1209  00153A  26D9               	addwf	fsr2l,f,c
  1210  00153C  51F6               	movf	(main@newData+1)& (0+255),w,b
  1211  00153E  22DA               	addwfc	fsr2h,f,c
  1212  001540  0E1F               	movlw	31
  1213  001542  60DF               	cpfslt	indf2,c
  1214  001544  EFA6  F00A         	goto	u3841
  1215  001548  EFA9  F00A         	goto	u3840
  1216  00154C                     u3841:
  1217  00154C  FFFF               	dw	65535	; assembler added errata NOP
  1218  00154E  EFB9  F00A         	goto	l4459
  1219  001552                     u3840:
  1220  001552  FFFF               	dw	65535	; assembler added errata NOP
  1221  001554                     
  1222                           ; BSR set to: 0
  1223  001554  EE20 F006          	lfsr	2,6
  1224  001558  51F5               	movf	main@newData& (0+255),w,b
  1225  00155A  26D9               	addwf	fsr2l,f,c
  1226  00155C  51F6               	movf	(main@newData+1)& (0+255),w,b
  1227  00155E  22DA               	addwfc	fsr2h,f,c
  1228  001560  0E64               	movlw	100
  1229  001562  64DF               	cpfsgt	indf2,c
  1230  001564  EFB6  F00A         	goto	u3851
  1231  001568  EFB9  F00A         	goto	u3850
  1232  00156C                     u3851:
  1233  00156C  FFFF               	dw	65535	; assembler added errata NOP
  1234  00156E  EFBE  F00A         	goto	l4461
  1235  001572                     u3850:
  1236  001572                     l4459:
  1237  001572  FFFF               	dw	65535	; assembler added errata NOP
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;main.c: 56:                 errCode = 5;
  1241  001574  0E05               	movlw	5
  1242  001576  6FF4               	movwf	main@errCode& (0+255),b
  1243                           
  1244                           ;main.c: 57:             }else{
  1245  001578  EFD2  F00A         	goto	l4463
  1246  00157C                     l4461:
  1247  00157C  FFFF               	dw	65535	; assembler added errata NOP
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;main.c: 58:                 storeData(newData ->end_posX);
  1251  00157E  EE20 F005          	lfsr	2,5
  1252  001582  51F5               	movf	main@newData& (0+255),w,b
  1253  001584  26D9               	addwf	fsr2l,f,c
  1254  001586  51F6               	movf	(main@newData+1)& (0+255),w,b
  1255  001588  22DA               	addwfc	fsr2h,f,c
  1256  00158A  50DF               	movf	indf2,w,c
  1257  00158C  EC21  F00B         	call	_storeData
  1258                           
  1259                           ;main.c: 59:                 storeData(newData ->end_posY);
  1260  001590  0100               	movlb	0	; () banked
  1261  001592  EE20 F006          	lfsr	2,6
  1262  001596  51F5               	movf	main@newData& (0+255),w,b
  1263  001598  26D9               	addwf	fsr2l,f,c
  1264  00159A  51F6               	movf	(main@newData+1)& (0+255),w,b
  1265  00159C  22DA               	addwfc	fsr2h,f,c
  1266  00159E  50DF               	movf	indf2,w,c
  1267  0015A0  EC21  F00B         	call	_storeData
  1268  0015A4                     l4463:
  1269  0015A4  FFFF               	dw	65535	; assembler added errata NOP
  1270                           
  1271                           ;main.c: 63:             if(errCode == 0){
  1272  0015A6  0100               	movlb	0	; () banked
  1273  0015A8  51F4               	movf	main@errCode& (0+255),w,b
  1274  0015AA  A4D8               	btfss	status,2,c
  1275  0015AC  EFDA  F00A         	goto	u3861
  1276  0015B0  EFDD  F00A         	goto	u3860
  1277  0015B4                     u3861:
  1278  0015B4  FFFF               	dw	65535	; assembler added errata NOP
  1279  0015B6  EFFB  F00A         	goto	l4467
  1280  0015BA                     u3860:
  1281  0015BA  FFFF               	dw	65535	; assembler added errata NOP
  1282  0015BC                     
  1283                           ; BSR set to: 0
  1284                           ;main.c: 65:                 storeData(0);
  1285  0015BC  0E00               	movlw	0
  1286  0015BE  EC21  F00B         	call	_storeData
  1287                           
  1288                           ;main.c: 66:                 storeData(0xFF);
  1289  0015C2  0EFF               	movlw	255
  1290  0015C4  EC21  F00B         	call	_storeData
  1291                           
  1292                           ;main.c: 67:                 storeData(newData ->end_rot - newData ->init_rot);
  1293  0015C8  0100               	movlb	0	; () banked
  1294  0015CA  EE20 F004          	lfsr	2,4
  1295  0015CE  51F5               	movf	main@newData& (0+255),w,b
  1296  0015D0  26D9               	addwf	fsr2l,f,c
  1297  0015D2  51F6               	movf	(main@newData+1)& (0+255),w,b
  1298  0015D4  22DA               	addwfc	fsr2h,f,c
  1299  0015D6  50DF               	movf	indf2,w,c
  1300  0015D8  6FF2               	movwf	??_main& (0+255),b
  1301  0015DA  EE20 F007          	lfsr	2,7
  1302  0015DE  51F5               	movf	main@newData& (0+255),w,b
  1303  0015E0  26D9               	addwf	fsr2l,f,c
  1304  0015E2  51F6               	movf	(main@newData+1)& (0+255),w,b
  1305  0015E4  22DA               	addwfc	fsr2h,f,c
  1306  0015E6  50DF               	movf	indf2,w,c
  1307  0015E8  6FF3               	movwf	(??_main+1)& (0+255),b
  1308  0015EA  51F2               	movf	??_main& (0+255),w,b
  1309  0015EC  5DF3               	subwf	(??_main+1)& (0+255),w,b
  1310  0015EE  EC21  F00B         	call	_storeData
  1311                           
  1312                           ;main.c: 68:             }else{
  1313  0015F2  EFFF  F00A         	goto	l4469
  1314  0015F6                     l4467:
  1315  0015F6  FFFF               	dw	65535	; assembler added errata NOP
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;main.c: 69:                 printError(errCode);
  1319  0015F8  51F4               	movf	main@errCode& (0+255),w,b
  1320  0015FA  EC36  F00D         	call	_printError
  1321  0015FE                     l4469:
  1322  0015FE  FFFF               	dw	65535	; assembler added errata NOP
  1323                           
  1324                           ;main.c: 73:             RCSTAbits.CREN = 1;
  1325  001600  88AB               	bsf	171,4,c	;volatile
  1326  001602                     
  1327                           ;main.c: 76:             resetNewSequence();
  1328  001602  EC7F  F012         	call	_resetNewSequence	;wreg free
  1329  001606                     l4473:
  1330  001606  FFFF               	dw	65535	; assembler added errata NOP
  1331                           
  1332                           ;main.c: 78:         if(readSeq()){
  1333  001608  ECB0  F012         	call	_readSeq	;wreg free
  1334  00160C  0900               	iorlw	0
  1335  00160E  B4D8               	btfsc	status,2,c
  1336  001610  EF0C  F00B         	goto	u3871
  1337  001614  EF0F  F00B         	goto	u3870
  1338  001618                     u3871:
  1339  001618  FFFF               	dw	65535	; assembler added errata NOP
  1340  00161A  EF75  F00A         	goto	l4445
  1341  00161E                     u3870:
  1342  00161E  FFFF               	dw	65535	; assembler added errata NOP
  1343  001620                     
  1344                           ;main.c: 82:             errCode = executeData();
  1345  001620  ECE3  F006         	call	_executeData	;wreg free
  1346  001624  0100               	movlb	0	; () banked
  1347  001626  6FF4               	movwf	main@errCode& (0+255),b
  1348  001628                     
  1349                           ; BSR set to: 0
  1350                           ;main.c: 84:             printError(errCode);
  1351  001628  51F4               	movf	main@errCode& (0+255),w,b
  1352  00162A  EC36  F00D         	call	_printError
  1353  00162E                     
  1354                           ;main.c: 87:             clearTM0();
  1355  00162E  EC58  F012         	call	_clearTM0	;wreg free
  1356  001632                     
  1357                           ;main.c: 91:             reduceSeq();
  1358  001632  ECAC  F012         	call	_reduceSeq	;wreg free
  1359  001636                     
  1360                           ;main.c: 92:             shiftData();
  1361  001636  ECEF  F010         	call	_shiftData	;wreg free
  1362  00163A  EF75  F00A         	goto	l4445
  1363  00163E  EFD2  F000         	goto	start
  1364  001642                     __end_of_main:
  1365                           	callstack 0
  1366                           
  1367 ;; *************** function _usartInit *****************
  1368 ;; Defined at:
  1369 ;;		line 92 in file "usart.c"
  1370 ;; Parameters:    Size  Location     Type
  1371 ;;		None
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;		None
  1374 ;; Return value:  Size  Location     Type
  1375 ;;                  1    wreg      void 
  1376 ;; Registers used:
  1377 ;;		wreg, status,2
  1378 ;; Tracked objects:
  1379 ;;		On entry : 0/0
  1380 ;;		On exit  : 0/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1383 ;;      Params:         0       0       0       0       0       0       0
  1384 ;;      Locals:         0       0       0       0       0       0       0
  1385 ;;      Temps:          0       0       0       0       0       0       0
  1386 ;;      Totals:         0       0       0       0       0       0       0
  1387 ;;Total ram usage:        0 bytes
  1388 ;; Hardware stack levels used:    1
  1389 ;; Hardware stack levels required when called:    4
  1390 ;; This function calls:
  1391 ;;		Nothing
  1392 ;; This function is called by:
  1393 ;;		_main
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text1
  1398  00240C                     __ptext1:
  1399                           	callstack 0
  1400  00240C                     _usartInit:
  1401                           	callstack 0
  1402  00240C  FFFF               	dw	65535	; assembler added errata NOP
  1403  00240E                     
  1404                           ;usart.c: 94:     TRISCbits.TRISC6 = 0;
  1405  00240E  9C94               	bcf	148,6,c	;volatile
  1406                           
  1407                           ;usart.c: 95:     TRISCbits.TRISC7 = 1;
  1408  002410  8E94               	bsf	148,7,c	;volatile
  1409                           
  1410                           ;usart.c: 97:     TXSTAbits.TX9 = 0;
  1411  002412  9CAC               	bcf	172,6,c	;volatile
  1412                           
  1413                           ;usart.c: 98:     TXSTAbits.TXEN = 1;
  1414  002414  8AAC               	bsf	172,5,c	;volatile
  1415                           
  1416                           ;usart.c: 99:     TXSTAbits.SYNC = 0;
  1417  002416  98AC               	bcf	172,4,c	;volatile
  1418                           
  1419                           ;usart.c: 100:     TXSTAbits.BRGH = 0;
  1420  002418  94AC               	bcf	172,2,c	;volatile
  1421                           
  1422                           ;usart.c: 102:     RCSTAbits.SPEN = 1;
  1423  00241A  8EAB               	bsf	171,7,c	;volatile
  1424                           
  1425                           ;usart.c: 103:     RCSTAbits.RX9 = 0;
  1426  00241C  9CAB               	bcf	171,6,c	;volatile
  1427                           
  1428                           ;usart.c: 104:     RCSTAbits.CREN = 0;
  1429  00241E  98AB               	bcf	171,4,c	;volatile
  1430                           
  1431                           ;usart.c: 105:     RCSTAbits.ADDEN = 0;
  1432  002420  96AB               	bcf	171,3,c	;volatile
  1433  002422                     
  1434                           ;usart.c: 108:     SPBRG = 25;
  1435  002422  0E19               	movlw	25
  1436  002424  6EAF               	movwf	175,c	;volatile
  1437  002426  0012               	return		;funcret
  1438  002428  FFFF               	dw	65535	; errata NOP
  1439  00242A                     __end_of_usartInit:
  1440                           	callstack 0
  1441                           
  1442 ;; *************** function _tim2Init *****************
  1443 ;; Defined at:
  1444 ;;		line 46 in file "timer.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;		None
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  1    wreg      void 
  1451 ;; Registers used:
  1452 ;;		None
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1458 ;;      Params:         2       0       0       0       0       0       0
  1459 ;;      Locals:         0       0       0       0       0       0       0
  1460 ;;      Temps:          0       0       0       0       0       0       0
  1461 ;;      Totals:         2       0       0       0       0       0       0
  1462 ;;Total ram usage:        2 bytes
  1463 ;; Hardware stack levels used:    1
  1464 ;; Hardware stack levels required when called:    4
  1465 ;; This function calls:
  1466 ;;		Nothing
  1467 ;; This function is called by:
  1468 ;;		_main
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472                           	psect	text2
  1473  00243E                     __ptext2:
  1474                           	callstack 0
  1475  00243E                     _tim2Init:
  1476                           	callstack 0
  1477  00243E  FFFF               	dw	65535	; assembler added errata NOP
  1478  002440                     
  1479                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1480  002440  94CA               	bcf	202,2,c	;volatile
  1481                           
  1482                           ;timer.c: 48:     T2CONbits.T2CKPS1 = 1;
  1483  002442  82CA               	bsf	202,1,c	;volatile
  1484                           
  1485                           ;timer.c: 52:     pwmPeriod = _pwmPeriod;
  1486  002444  C012  F04F         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1487  002448  C013  F050         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1488  00244C  0012               	return		;funcret
  1489  00244E  FFFF               	dw	65535	; errata NOP
  1490  002450                     __end_of_tim2Init:
  1491                           	callstack 0
  1492                           
  1493 ;; *************** function _tim1Init *****************
  1494 ;; Defined at:
  1495 ;;		line 33 in file "timer.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;		None
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;		None
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  1    wreg      void 
  1502 ;; Registers used:
  1503 ;;		wreg, status,2
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1509 ;;      Params:         0       0       0       0       0       0       0
  1510 ;;      Locals:         0       0       0       0       0       0       0
  1511 ;;      Temps:          0       0       0       0       0       0       0
  1512 ;;      Totals:         0       0       0       0       0       0       0
  1513 ;;Total ram usage:        0 bytes
  1514 ;; Hardware stack levels used:    1
  1515 ;; Hardware stack levels required when called:    4
  1516 ;; This function calls:
  1517 ;;		Nothing
  1518 ;; This function is called by:
  1519 ;;		_main
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text3
  1524  002486                     __ptext3:
  1525                           	callstack 0
  1526  002486                     _tim1Init:
  1527                           	callstack 0
  1528  002486  FFFF               	dw	65535	; assembler added errata NOP
  1529  002488                     
  1530                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1531  002488  0E30               	movlw	48
  1532  00248A  12CD               	iorwf	205,f,c	;volatile
  1533  00248C                     
  1534                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1535  00248C  92CD               	bcf	205,1,c	;volatile
  1536  00248E                     
  1537                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1538  00248E  80CD               	bsf	205,0,c	;volatile
  1539  002490  0012               	return		;funcret
  1540  002492  FFFF               	dw	65535	; errata NOP
  1541  002494                     __end_of_tim1Init:
  1542                           	callstack 0
  1543                           
  1544 ;; *************** function _tim0Init *****************
  1545 ;; Defined at:
  1546 ;;		line 21 in file "timer.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;		None
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;		None
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  1    wreg      void 
  1553 ;; Registers used:
  1554 ;;		wreg, status,2
  1555 ;; Tracked objects:
  1556 ;;		On entry : 0/0
  1557 ;;		On exit  : 0/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1560 ;;      Params:         0       0       0       0       0       0       0
  1561 ;;      Locals:         0       0       0       0       0       0       0
  1562 ;;      Temps:          0       0       0       0       0       0       0
  1563 ;;      Totals:         0       0       0       0       0       0       0
  1564 ;;Total ram usage:        0 bytes
  1565 ;; Hardware stack levels used:    1
  1566 ;; Hardware stack levels required when called:    4
  1567 ;; This function calls:
  1568 ;;		Nothing
  1569 ;; This function is called by:
  1570 ;;		_main
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573                           
  1574                           	psect	text4
  1575  002450                     __ptext4:
  1576                           	callstack 0
  1577  002450                     _tim0Init:
  1578                           	callstack 0
  1579  002450  FFFF               	dw	65535	; assembler added errata NOP
  1580  002452                     
  1581                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1582  002452  9ED5               	bcf	213,7,c	;volatile
  1583                           
  1584                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1585  002454  9CD5               	bcf	213,6,c	;volatile
  1586                           
  1587                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1588  002456  9AD5               	bcf	213,5,c	;volatile
  1589                           
  1590                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1591  002458  86D5               	bsf	213,3,c	;volatile
  1592  00245A                     
  1593                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1594  00245A  0E07               	movlw	7
  1595  00245C  12D5               	iorwf	213,f,c	;volatile
  1596  00245E  0012               	return		;funcret
  1597  002460  FFFF               	dw	65535	; errata NOP
  1598  002462                     __end_of_tim0Init:
  1599                           	callstack 0
  1600                           
  1601 ;; *************** function _storeData *****************
  1602 ;; Defined at:
  1603 ;;		line 164 in file "usart.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;  data            1    wreg     unsigned char 
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;  data            1   26[COMRAM] unsigned char 
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  1    wreg      void 
  1610 ;; Registers used:
  1611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1617 ;;      Params:         0       0       0       0       0       0       0
  1618 ;;      Locals:         1       0       0       0       0       0       0
  1619 ;;      Temps:          2       0       0       0       0       0       0
  1620 ;;      Totals:         3       0       0       0       0       0       0
  1621 ;;Total ram usage:        3 bytes
  1622 ;; Hardware stack levels used:    1
  1623 ;; Hardware stack levels required when called:    6
  1624 ;; This function calls:
  1625 ;;		_printError
  1626 ;; This function is called by:
  1627 ;;		_main
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631                           	psect	text5
  1632  001642                     __ptext5:
  1633                           	callstack 0
  1634  001642                     _storeData:
  1635                           	callstack 0
  1636  001642  FFFF               	dw	65535	; assembler added errata NOP
  1637                           
  1638                           ;incstack = 0
  1639                           ;storeData@data stored from wreg
  1640  001644  6E1B               	movwf	storeData@data^0,c
  1641  001646                     
  1642                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  1643  001646  0E43               	movlw	low storeData@receivedMex
  1644  001648  245E               	addwf	storeData@counter^0,w,c
  1645  00164A  6ED9               	movwf	fsr2l,c
  1646  00164C  6ADA               	clrf	fsr2h,c
  1647  00164E  0E00               	movlw	high storeData@receivedMex
  1648  001650  22DA               	addwfc	fsr2h,f,c
  1649  001652  C01B  FFDF         	movff	storeData@data,indf2
  1650  001656                     
  1651                           ;usart.c: 175:     counter++;
  1652  001656  2A5E               	incf	storeData@counter^0,f,c
  1653                           
  1654                           ;usart.c: 178:     switch(receivedMex[0]){
  1655  001658  EF3D  F00B         	goto	l4273
  1656  00165C                     l4265:
  1657  00165C  FFFF               	dw	65535	; assembler added errata NOP
  1658                           
  1659                           ;usart.c: 180:             mexLength = 5;
  1660  00165E  0E05               	movlw	5
  1661  001660  6E6D               	movwf	storeData@mexLength^0,c
  1662                           
  1663                           ;usart.c: 181:             break;
  1664  001662  EF58  F00B         	goto	l4275
  1665  001666                     l4267:
  1666  001666  FFFF               	dw	65535	; assembler added errata NOP
  1667                           
  1668                           ;usart.c: 183:             mexLength = 9;
  1669  001668  0E09               	movlw	9
  1670  00166A  6E6D               	movwf	storeData@mexLength^0,c
  1671                           
  1672                           ;usart.c: 184:             break;
  1673  00166C  EF58  F00B         	goto	l4275
  1674  001670                     l4269:
  1675  001670  FFFF               	dw	65535	; assembler added errata NOP
  1676                           
  1677                           ;usart.c: 186:             mexLength = 1;
  1678  001672  0E01               	movlw	1
  1679  001674  6E6D               	movwf	storeData@mexLength^0,c
  1680                           
  1681                           ;usart.c: 187:             break;
  1682  001676  EF58  F00B         	goto	l4275
  1683  00167A                     l4273:
  1684  00167A  FFFF               	dw	65535	; assembler added errata NOP
  1685  00167C  5043               	movf	storeData@receivedMex^0,w,c
  1686  00167E  6E19               	movwf	??_storeData^0,c
  1687  001680  6A1A               	clrf	(??_storeData+1)^0,c
  1688                           
  1689                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1690                           ; Switch size 1, requested type "simple"
  1691                           ; Number of cases is 1, Range of values is 0 to 0
  1692                           ; switch strategies available:
  1693                           ; Name         Instructions Cycles
  1694                           ; simple_byte            4     3 (average)
  1695                           ;	Chosen strategy is simple_byte
  1696  001682  501A               	movf	(??_storeData+1)^0,w,c
  1697  001684  0A00               	xorlw	0	; case 0
  1698  001686  B4D8               	btfsc	status,2,c
  1699  001688  EF48  F00B         	goto	l4625
  1700  00168C  EF58  F00B         	goto	l4275
  1701  001690                     l4625:
  1702  001690  FFFF               	dw	65535	; assembler added errata NOP
  1703                           
  1704                           ; Switch size 1, requested type "simple"
  1705                           ; Number of cases is 3, Range of values is 0 to 2
  1706                           ; switch strategies available:
  1707                           ; Name         Instructions Cycles
  1708                           ; simple_byte           10     6 (average)
  1709                           ;	Chosen strategy is simple_byte
  1710  001692  5019               	movf	??_storeData^0,w,c
  1711  001694  0A00               	xorlw	0	; case 0
  1712  001696  B4D8               	btfsc	status,2,c
  1713  001698  EF2E  F00B         	goto	l4265
  1714  00169C  0A01               	xorlw	1	; case 1
  1715  00169E  B4D8               	btfsc	status,2,c
  1716  0016A0  EF33  F00B         	goto	l4267
  1717  0016A4  0A03               	xorlw	3	; case 2
  1718  0016A6  B4D8               	btfsc	status,2,c
  1719  0016A8  EF38  F00B         	goto	l4269
  1720  0016AC  EF58  F00B         	goto	l4275
  1721  0016B0                     l4275:
  1722  0016B0  FFFF               	dw	65535	; assembler added errata NOP
  1723                           
  1724                           ;usart.c: 194:     if(counter >= mexLength){
  1725  0016B2  506D               	movf	storeData@mexLength^0,w,c
  1726  0016B4  5C5E               	subwf	storeData@counter^0,w,c
  1727  0016B6  A0D8               	btfss	status,0,c
  1728  0016B8  EF60  F00B         	goto	u3741
  1729  0016BC  EF63  F00B         	goto	u3740
  1730  0016C0                     u3741:
  1731  0016C0  FFFF               	dw	65535	; assembler added errata NOP
  1732  0016C2  EFDB  F00B         	goto	l598
  1733  0016C6                     u3740:
  1734  0016C6  FFFF               	dw	65535	; assembler added errata NOP
  1735  0016C8                     
  1736                           ;usart.c: 195:         counter = 0;
  1737  0016C8  0E00               	movlw	0
  1738  0016CA  6E5E               	movwf	storeData@counter^0,c
  1739                           
  1740                           ;usart.c: 198:         switch(receivedMex[0]){
  1741  0016CC  EFC0  F00B         	goto	l4297
  1742  0016D0                     l4279:
  1743  0016D0  FFFF               	dw	65535	; assembler added errata NOP
  1744                           
  1745                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1746  0016D2  5061               	movf	_dataCounter^0,w,c
  1747  0016D4  0D04               	mullw	4
  1748  0016D6  0ECA               	movlw	low _dataSequence
  1749  0016D8  24F3               	addwf	243,w,c
  1750  0016DA  6ED9               	movwf	fsr2l,c
  1751  0016DC  0E00               	movlw	high _dataSequence
  1752  0016DE  20F4               	addwfc	prodh,w,c
  1753  0016E0  6EDA               	movwf	fsr2h,c
  1754  0016E2  C044  FFDF         	movff	storeData@receivedMex+1,indf2
  1755                           
  1756                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  1757  0016E6  5061               	movf	_dataCounter^0,w,c
  1758  0016E8  0D04               	mullw	4
  1759  0016EA  0ECB               	movlw	low (_dataSequence+1)
  1760  0016EC  24F3               	addwf	243,w,c
  1761  0016EE  6ED9               	movwf	fsr2l,c
  1762  0016F0  0E00               	movlw	high (_dataSequence+1)
  1763  0016F2  20F4               	addwfc	prodh,w,c
  1764  0016F4  6EDA               	movwf	fsr2h,c
  1765  0016F6  5045               	movf	(storeData@receivedMex+2)^0,w,c
  1766  0016F8  0D05               	mullw	5
  1767  0016FA  CFF3 FFDF          	movff	prodl,indf2
  1768                           
  1769                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  1770  0016FE  5061               	movf	_dataCounter^0,w,c
  1771  001700  0D04               	mullw	4
  1772  001702  0ECC               	movlw	low (_dataSequence+2)
  1773  001704  24F3               	addwf	243,w,c
  1774  001706  6ED9               	movwf	fsr2l,c
  1775  001708  0E00               	movlw	high (_dataSequence+2)
  1776  00170A  20F4               	addwfc	prodh,w,c
  1777  00170C  6EDA               	movwf	fsr2h,c
  1778  00170E  5046               	movf	(storeData@receivedMex+3)^0,w,c
  1779  001710  0D05               	mullw	5
  1780  001712  CFF3 FFDF          	movff	prodl,indf2
  1781                           
  1782                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1783  001716  5061               	movf	_dataCounter^0,w,c
  1784  001718  0D04               	mullw	4
  1785  00171A  0ECD               	movlw	low (_dataSequence+3)
  1786  00171C  24F3               	addwf	243,w,c
  1787  00171E  6ED9               	movwf	fsr2l,c
  1788  001720  0E00               	movlw	high (_dataSequence+3)
  1789  001722  20F4               	addwfc	prodh,w,c
  1790  001724  6EDA               	movwf	fsr2h,c
  1791  001726  C047  FFDF         	movff	storeData@receivedMex+4,indf2
  1792  00172A                     
  1793                           ;usart.c: 205:                 dataCounter++;
  1794  00172A  2A61               	incf	_dataCounter^0,f,c
  1795                           
  1796                           ;usart.c: 206:                 break;
  1797  00172C  EFDB  F00B         	goto	l598
  1798  001730                     l595:
  1799  001730  FFFF               	dw	65535	; assembler added errata NOP
  1800                           
  1801                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  1802  001732  C044  F0DE         	movff	storeData@receivedMex+1,_newSequenceData
  1803                           
  1804                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  1805  001736  C045  F0DF         	movff	storeData@receivedMex+2,_newSequenceData+1
  1806  00173A                     
  1807                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 5;
  1808  00173A  5046               	movf	(storeData@receivedMex+3)^0,w,c
  1809  00173C  0D05               	mullw	5
  1810  00173E  CFF3 F0E0          	movff	prodl,_newSequenceData+2
  1811                           
  1812                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 5;
  1813  001742  5047               	movf	(storeData@receivedMex+4)^0,w,c
  1814  001744  0D05               	mullw	5
  1815  001746  CFF3 F0E1          	movff	prodl,_newSequenceData+3
  1816  00174A                     
  1817                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  1818  00174A  C048  F0E2         	movff	storeData@receivedMex+5,_newSequenceData+4
  1819                           
  1820                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 5;
  1821  00174E  5049               	movf	(storeData@receivedMex+6)^0,w,c
  1822  001750  0D05               	mullw	5
  1823  001752  CFF3 F0E3          	movff	prodl,_newSequenceData+5
  1824                           
  1825                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 5;
  1826  001756  504A               	movf	(storeData@receivedMex+7)^0,w,c
  1827  001758  0D05               	mullw	5
  1828  00175A  CFF3 F0E4          	movff	prodl,_newSequenceData+6
  1829  00175E                     
  1830                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  1831  00175E  C04B  F0E5         	movff	storeData@receivedMex+8,_newSequenceData+7
  1832  001762                     
  1833                           ;usart.c: 218:                 _newSequence = 1;
  1834  001762  0E01               	movlw	1
  1835  001764  6E5F               	movwf	__newSequence^0,c
  1836                           
  1837                           ;usart.c: 219:                 break;
  1838  001766  EFDB  F00B         	goto	l598
  1839  00176A                     l4291:
  1840  00176A  FFFF               	dw	65535	; assembler added errata NOP
  1841                           
  1842                           ;usart.c: 222:                 _fatalError = 1;
  1843  00176C  0E01               	movlw	1
  1844  00176E  6E60               	movwf	__fatalError^0,c
  1845                           
  1846                           ;usart.c: 223:                 break;
  1847  001770  EFDB  F00B         	goto	l598
  1848  001774                     l4293:
  1849  001774  FFFF               	dw	65535	; assembler added errata NOP
  1850                           
  1851                           ;usart.c: 226:                 printError(8);
  1852  001776  0E08               	movlw	8
  1853  001778  EC36  F00D         	call	_printError
  1854                           
  1855                           ;usart.c: 227:                 break;
  1856  00177C  EFDB  F00B         	goto	l598
  1857  001780                     l4297:
  1858  001780  FFFF               	dw	65535	; assembler added errata NOP
  1859  001782  5043               	movf	storeData@receivedMex^0,w,c
  1860  001784  6E19               	movwf	??_storeData^0,c
  1861  001786  6A1A               	clrf	(??_storeData+1)^0,c
  1862                           
  1863                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1864                           ; Switch size 1, requested type "simple"
  1865                           ; Number of cases is 1, Range of values is 0 to 0
  1866                           ; switch strategies available:
  1867                           ; Name         Instructions Cycles
  1868                           ; simple_byte            4     3 (average)
  1869                           ;	Chosen strategy is simple_byte
  1870  001788  501A               	movf	(??_storeData+1)^0,w,c
  1871  00178A  0A00               	xorlw	0	; case 0
  1872  00178C  B4D8               	btfsc	status,2,c
  1873  00178E  EFCB  F00B         	goto	l4627
  1874  001792  EFBA  F00B         	goto	l4293
  1875  001796                     l4627:
  1876  001796  FFFF               	dw	65535	; assembler added errata NOP
  1877                           
  1878                           ; Switch size 1, requested type "simple"
  1879                           ; Number of cases is 3, Range of values is 0 to 2
  1880                           ; switch strategies available:
  1881                           ; Name         Instructions Cycles
  1882                           ; simple_byte           10     6 (average)
  1883                           ;	Chosen strategy is simple_byte
  1884  001798  5019               	movf	??_storeData^0,w,c
  1885  00179A  0A00               	xorlw	0	; case 0
  1886  00179C  B4D8               	btfsc	status,2,c
  1887  00179E  EF68  F00B         	goto	l4279
  1888  0017A2  0A01               	xorlw	1	; case 1
  1889  0017A4  B4D8               	btfsc	status,2,c
  1890  0017A6  EF98  F00B         	goto	l595
  1891  0017AA  0A03               	xorlw	3	; case 2
  1892  0017AC  B4D8               	btfsc	status,2,c
  1893  0017AE  EFB5  F00B         	goto	l4291
  1894  0017B2  EFBA  F00B         	goto	l4293
  1895  0017B6                     l598:
  1896  0017B6  FFFF               	dw	65535	; assembler added errata NOP
  1897  0017B8  0012               	return		;funcret
  1898  0017BA  FFFF               	dw	65535	; errata NOP
  1899  0017BC                     __end_of_storeData:
  1900                           	callstack 0
  1901                           
  1902 ;; *************** function _printError *****************
  1903 ;; Defined at:
  1904 ;;		line 111 in file "usart.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;  errCode         1    wreg     unsigned char 
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;  errCode         1   23[COMRAM] unsigned char 
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      void 
  1911 ;; Registers used:
  1912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1918 ;;      Params:         0       0       0       0       0       0       0
  1919 ;;      Locals:         1       0       0       0       0       0       0
  1920 ;;      Temps:          2       0       0       0       0       0       0
  1921 ;;      Totals:         3       0       0       0       0       0       0
  1922 ;;Total ram usage:        3 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; Hardware stack levels required when called:    5
  1925 ;; This function calls:
  1926 ;;		_uartTx
  1927 ;; This function is called by:
  1928 ;;		_main
  1929 ;;		_storeData
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           	psect	text6
  1934  001A6C                     __ptext6:
  1935                           	callstack 0
  1936  001A6C                     _printError:
  1937                           	callstack 0
  1938  001A6C  FFFF               	dw	65535	; assembler added errata NOP
  1939                           
  1940                           ;incstack = 0
  1941                           ;printError@errCode stored from wreg
  1942  001A6E  6E18               	movwf	printError@errCode^0,c
  1943  001A70                     
  1944                           ;usart.c: 113:     switch(errCode){
  1945  001A70  EF92  F00D         	goto	l4121
  1946  001A74                     l4103:
  1947  001A74  FFFF               	dw	65535	; assembler added errata NOP
  1948                           
  1949                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  1950  001A76  0E94               	movlw	low _errString_Feed
  1951  001A78  6E12               	movwf	uartTx@ptr^0,c
  1952  001A7A  0E00               	movlw	high _errString_Feed
  1953  001A7C  6E13               	movwf	(uartTx@ptr+1)^0,c
  1954  001A7E  0E1E               	movlw	30
  1955  001A80  6E14               	movwf	uartTx@length^0,c
  1956  001A82  EC1F  F011         	call	_uartTx	;wreg free
  1957                           
  1958                           ;usart.c: 116:             break;
  1959  001A86  EFC1  F00D         	goto	l565
  1960  001A8A                     l4105:
  1961  001A8A  FFFF               	dw	65535	; assembler added errata NOP
  1962                           
  1963                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  1964  001A8C  0E5E               	movlw	low _errString_ZEND
  1965  001A8E  6E12               	movwf	uartTx@ptr^0,c
  1966  001A90  0E01               	movlw	high _errString_ZEND
  1967  001A92  6E13               	movwf	(uartTx@ptr+1)^0,c
  1968  001A94  0E29               	movlw	41
  1969  001A96  6E14               	movwf	uartTx@length^0,c
  1970  001A98  EC1F  F011         	call	_uartTx	;wreg free
  1971                           
  1972                           ;usart.c: 119:             break;
  1973  001A9C  EFC1  F00D         	goto	l565
  1974  001AA0                     l4107:
  1975  001AA0  FFFF               	dw	65535	; assembler added errata NOP
  1976                           
  1977                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  1978  001AA2  0E87               	movlw	low _errString_Reset
  1979  001AA4  6E12               	movwf	uartTx@ptr^0,c
  1980  001AA6  0E01               	movlw	high _errString_Reset
  1981  001AA8  6E13               	movwf	(uartTx@ptr+1)^0,c
  1982  001AAA  0E28               	movlw	40
  1983  001AAC  6E14               	movwf	uartTx@length^0,c
  1984  001AAE  EC1F  F011         	call	_uartTx	;wreg free
  1985                           
  1986                           ;usart.c: 122:             break;
  1987  001AB2  EFC1  F00D         	goto	l565
  1988  001AB6                     l4109:
  1989  001AB6  FFFF               	dw	65535	; assembler added errata NOP
  1990                           
  1991                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  1992  001AB8  0E35               	movlw	low _errString_Point
  1993  001ABA  6E12               	movwf	uartTx@ptr^0,c
  1994  001ABC  0E01               	movlw	high _errString_Point
  1995  001ABE  6E13               	movwf	(uartTx@ptr+1)^0,c
  1996  001AC0  0E29               	movlw	41
  1997  001AC2  6E14               	movwf	uartTx@length^0,c
  1998  001AC4  EC1F  F011         	call	_uartTx	;wreg free
  1999                           
  2000                           ;usart.c: 125:             break;
  2001  001AC8  EFC1  F00D         	goto	l565
  2002  001ACC                     l4111:
  2003  001ACC  FFFF               	dw	65535	; assembler added errata NOP
  2004                           
  2005                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2006  001ACE  0ED6               	movlw	low _errString_Bound
  2007  001AD0  6E12               	movwf	uartTx@ptr^0,c
  2008  001AD2  0E01               	movlw	high _errString_Bound
  2009  001AD4  6E13               	movwf	(uartTx@ptr+1)^0,c
  2010  001AD6  0E21               	movlw	33
  2011  001AD8  6E14               	movwf	uartTx@length^0,c
  2012  001ADA  EC1F  F011         	call	_uartTx	;wreg free
  2013                           
  2014                           ;usart.c: 128:             break;
  2015  001ADE  EFC1  F00D         	goto	l565
  2016  001AE2                     l4113:
  2017  001AE2  FFFF               	dw	65535	; assembler added errata NOP
  2018                           
  2019                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2020  001AE4  0E00               	movlw	low _errString_PointZ
  2021  001AE6  6E12               	movwf	uartTx@ptr^0,c
  2022  001AE8  0E01               	movlw	high _errString_PointZ
  2023  001AEA  6E13               	movwf	(uartTx@ptr+1)^0,c
  2024  001AEC  0E35               	movlw	53
  2025  001AEE  6E14               	movwf	uartTx@length^0,c
  2026  001AF0  EC1F  F011         	call	_uartTx	;wreg free
  2027                           
  2028                           ;usart.c: 131:             break;
  2029  001AF4  EFC1  F00D         	goto	l565
  2030  001AF8                     l4115:
  2031  001AF8  FFFF               	dw	65535	; assembler added errata NOP
  2032                           
  2033                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2034  001AFA  0EAF               	movlw	low _errString_Fatal
  2035  001AFC  6E12               	movwf	uartTx@ptr^0,c
  2036  001AFE  0E01               	movlw	high _errString_Fatal
  2037  001B00  6E13               	movwf	(uartTx@ptr+1)^0,c
  2038  001B02  0E27               	movlw	39
  2039  001B04  6E14               	movwf	uartTx@length^0,c
  2040  001B06  EC1F  F011         	call	_uartTx	;wreg free
  2041                           
  2042                           ;usart.c: 134:             break;
  2043  001B0A  EFC1  F00D         	goto	l565
  2044  001B0E                     l4117:
  2045  001B0E  FFFF               	dw	65535	; assembler added errata NOP
  2046                           
  2047                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2048  001B10  0EB2               	movlw	low _errString_Command
  2049  001B12  6E12               	movwf	uartTx@ptr^0,c
  2050  001B14  0E00               	movlw	high _errString_Command
  2051  001B16  6E13               	movwf	(uartTx@ptr+1)^0,c
  2052  001B18  0E18               	movlw	24
  2053  001B1A  6E14               	movwf	uartTx@length^0,c
  2054  001B1C  EC1F  F011         	call	_uartTx	;wreg free
  2055                           
  2056                           ;usart.c: 137:             break;
  2057  001B20  EFC1  F00D         	goto	l565
  2058  001B24                     l4121:
  2059  001B24  FFFF               	dw	65535	; assembler added errata NOP
  2060  001B26  5018               	movf	printError@errCode^0,w,c
  2061  001B28  6E16               	movwf	??_printError^0,c
  2062  001B2A  6A17               	clrf	(??_printError+1)^0,c
  2063                           
  2064                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2065                           ; Switch size 1, requested type "simple"
  2066                           ; Number of cases is 1, Range of values is 0 to 0
  2067                           ; switch strategies available:
  2068                           ; Name         Instructions Cycles
  2069                           ; simple_byte            4     3 (average)
  2070                           ;	Chosen strategy is simple_byte
  2071  001B2C  5017               	movf	(??_printError+1)^0,w,c
  2072  001B2E  0A00               	xorlw	0	; case 0
  2073  001B30  B4D8               	btfsc	status,2,c
  2074  001B32  EF9D  F00D         	goto	l4629
  2075  001B36  EFC1  F00D         	goto	l565
  2076  001B3A                     l4629:
  2077  001B3A  FFFF               	dw	65535	; assembler added errata NOP
  2078                           
  2079                           ; Switch size 1, requested type "simple"
  2080                           ; Number of cases is 8, Range of values is 1 to 8
  2081                           ; switch strategies available:
  2082                           ; Name         Instructions Cycles
  2083                           ; simple_byte           25    13 (average)
  2084                           ;	Chosen strategy is simple_byte
  2085  001B3C  5016               	movf	??_printError^0,w,c
  2086  001B3E  0A01               	xorlw	1	; case 1
  2087  001B40  B4D8               	btfsc	status,2,c
  2088  001B42  EF3A  F00D         	goto	l4103
  2089  001B46  0A03               	xorlw	3	; case 2
  2090  001B48  B4D8               	btfsc	status,2,c
  2091  001B4A  EF45  F00D         	goto	l4105
  2092  001B4E  0A01               	xorlw	1	; case 3
  2093  001B50  B4D8               	btfsc	status,2,c
  2094  001B52  EF50  F00D         	goto	l4107
  2095  001B56  0A07               	xorlw	7	; case 4
  2096  001B58  B4D8               	btfsc	status,2,c
  2097  001B5A  EF5B  F00D         	goto	l4109
  2098  001B5E  0A01               	xorlw	1	; case 5
  2099  001B60  B4D8               	btfsc	status,2,c
  2100  001B62  EF66  F00D         	goto	l4111
  2101  001B66  0A03               	xorlw	3	; case 6
  2102  001B68  B4D8               	btfsc	status,2,c
  2103  001B6A  EF71  F00D         	goto	l4113
  2104  001B6E  0A01               	xorlw	1	; case 7
  2105  001B70  B4D8               	btfsc	status,2,c
  2106  001B72  EF7C  F00D         	goto	l4115
  2107  001B76  0A0F               	xorlw	15	; case 8
  2108  001B78  B4D8               	btfsc	status,2,c
  2109  001B7A  EF87  F00D         	goto	l4117
  2110  001B7E  EFC1  F00D         	goto	l565
  2111  001B82                     l565:
  2112  001B82  FFFF               	dw	65535	; assembler added errata NOP
  2113  001B84  0012               	return		;funcret
  2114  001B86  FFFF               	dw	65535	; errata NOP
  2115  001B88                     __end_of_printError:
  2116                           	callstack 0
  2117                           
  2118 ;; *************** function _uartTx *****************
  2119 ;; Defined at:
  2120 ;;		line 148 in file "usart.c"
  2121 ;; Parameters:    Size  Location     Type
  2122 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2123 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2124 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2125 ;;  length          1   19[COMRAM] unsigned char 
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;  i               1   20[COMRAM] unsigned char 
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  1    wreg      void 
  2130 ;; Registers used:
  2131 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2137 ;;      Params:         3       0       0       0       0       0       0
  2138 ;;      Locals:         1       0       0       0       0       0       0
  2139 ;;      Temps:          0       0       0       0       0       0       0
  2140 ;;      Totals:         4       0       0       0       0       0       0
  2141 ;;Total ram usage:        4 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; Hardware stack levels required when called:    4
  2144 ;; This function calls:
  2145 ;;		Nothing
  2146 ;; This function is called by:
  2147 ;;		_printError
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151                           	psect	text7
  2152  00223E                     __ptext7:
  2153                           	callstack 0
  2154  00223E                     _uartTx:
  2155                           	callstack 0
  2156  00223E  FFFF               	dw	65535	; assembler added errata NOP
  2157  002240                     
  2158                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  2159  002240  0E01               	movlw	1
  2160  002242  6E15               	movwf	uartTx@i^0,c
  2161  002244  EF38  F011         	goto	l3605
  2162  002248                     l3601:
  2163  002248  FFFF               	dw	65535	; assembler added errata NOP
  2164                           
  2165                           ;usart.c: 153:         TXREG = *ptr;
  2166  00224A  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2167  00224E  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2168  002252  50DF               	movf	indf2,w,c
  2169  002254  6EAD               	movwf	173,c	;volatile
  2170  002256                     l570:
  2171  002256  FFFF               	dw	65535	; assembler added errata NOP
  2172  002258  A2AC               	btfss	172,1,c	;volatile
  2173  00225A  EF31  F011         	goto	u2721
  2174  00225E  EF34  F011         	goto	u2720
  2175  002262                     u2721:
  2176  002262  FFFF               	dw	65535	; assembler added errata NOP
  2177  002264  EF2B  F011         	goto	l570
  2178  002268                     u2720:
  2179  002268  FFFF               	dw	65535	; assembler added errata NOP
  2180  00226A                     
  2181                           ;usart.c: 157:         ptr++;
  2182  00226A  4A12               	infsnz	uartTx@ptr^0,f,c
  2183  00226C  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2184                           
  2185                           ;usart.c: 158:     }
  2186  00226E  2A15               	incf	uartTx@i^0,f,c
  2187  002270                     l3605:
  2188  002270  FFFF               	dw	65535	; assembler added errata NOP
  2189  002272  5014               	movf	uartTx@length^0,w,c
  2190  002274  5C15               	subwf	uartTx@i^0,w,c
  2191  002276  A0D8               	btfss	status,0,c
  2192  002278  EF40  F011         	goto	u2731
  2193  00227C  EF43  F011         	goto	u2730
  2194  002280                     u2731:
  2195  002280  FFFF               	dw	65535	; assembler added errata NOP
  2196  002282  EF24  F011         	goto	l3601
  2197  002286                     u2730:
  2198  002286  FFFF               	dw	65535	; assembler added errata NOP
  2199  002288  0012               	return		;funcret
  2200  00228A  FFFF               	dw	65535	; errata NOP
  2201  00228C                     __end_of_uartTx:
  2202                           	callstack 0
  2203                           
  2204 ;; *************** function _shiftData *****************
  2205 ;; Defined at:
  2206 ;;		line 81 in file "usart.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;		None
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;  i               1   19[COMRAM] unsigned char 
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  1    wreg      void 
  2213 ;; Registers used:
  2214 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2220 ;;      Params:         0       0       0       0       0       0       0
  2221 ;;      Locals:         1       0       0       0       0       0       0
  2222 ;;      Temps:          2       0       0       0       0       0       0
  2223 ;;      Totals:         3       0       0       0       0       0       0
  2224 ;;Total ram usage:        3 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    4
  2227 ;; This function calls:
  2228 ;;		Nothing
  2229 ;; This function is called by:
  2230 ;;		_main
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text8
  2235  0021DE                     __ptext8:
  2236                           	callstack 0
  2237  0021DE                     _shiftData:
  2238                           	callstack 0
  2239  0021DE  FFFF               	dw	65535	; assembler added errata NOP
  2240  0021E0                     
  2241                           ;usart.c: 82:     char i;;usart.c: 84:     for(i = 0; i < 4; i++){
  2242  0021E0  0E00               	movlw	0
  2243  0021E2  6E14               	movwf	shiftData@i^0,c
  2244  0021E4                     l4417:
  2245  0021E4  FFFF               	dw	65535	; assembler added errata NOP
  2246                           
  2247                           ;usart.c: 85:         dataSequence[i] = dataSequence[i+1];
  2248  0021E6  5014               	movf	shiftData@i^0,w,c
  2249  0021E8  6E12               	movwf	??_shiftData^0,c
  2250  0021EA  6A13               	clrf	(??_shiftData+1)^0,c
  2251  0021EC  90D8               	bcf	status,0,c
  2252  0021EE  3612               	rlcf	??_shiftData^0,f,c
  2253  0021F0  3613               	rlcf	(??_shiftData+1)^0,f,c
  2254  0021F2  90D8               	bcf	status,0,c
  2255  0021F4  3612               	rlcf	??_shiftData^0,f,c
  2256  0021F6  3613               	rlcf	(??_shiftData+1)^0,f,c
  2257  0021F8  0ECE               	movlw	low (_dataSequence+4)
  2258  0021FA  2412               	addwf	??_shiftData^0,w,c
  2259  0021FC  6ED9               	movwf	fsr2l,c
  2260  0021FE  0E00               	movlw	high (_dataSequence+4)
  2261  002200  2013               	addwfc	(??_shiftData+1)^0,w,c
  2262  002202  6EDA               	movwf	fsr2h,c
  2263  002204  5014               	movf	shiftData@i^0,w,c
  2264  002206  0D04               	mullw	4
  2265  002208  0ECA               	movlw	low _dataSequence
  2266  00220A  24F3               	addwf	243,w,c
  2267  00220C  6EE1               	movwf	fsr1l,c
  2268  00220E  0E00               	movlw	high _dataSequence
  2269  002210  20F4               	addwfc	prodh,w,c
  2270  002212  6EE2               	movwf	fsr1h,c
  2271  002214  CFDE FFE6          	movff	postinc2,postinc1
  2272  002218  CFDE FFE6          	movff	postinc2,postinc1
  2273  00221C  CFDE FFE6          	movff	postinc2,postinc1
  2274  002220  CFDE FFE6          	movff	postinc2,postinc1
  2275  002224                     
  2276                           ;usart.c: 86:     }
  2277  002224  2A14               	incf	shiftData@i^0,f,c
  2278  002226  0E03               	movlw	3
  2279  002228  6414               	cpfsgt	shiftData@i^0,c
  2280  00222A  EF19  F011         	goto	u3811
  2281  00222E  EF1C  F011         	goto	u3810
  2282  002232                     u3811:
  2283  002232  FFFF               	dw	65535	; assembler added errata NOP
  2284  002234  EFF2  F010         	goto	l4417
  2285  002238                     u3810:
  2286  002238  FFFF               	dw	65535	; assembler added errata NOP
  2287  00223A  0012               	return		;funcret
  2288  00223C  FFFF               	dw	65535	; errata NOP
  2289  00223E                     __end_of_shiftData:
  2290                           	callstack 0
  2291                           
  2292 ;; *************** function _resetPosition *****************
  2293 ;; Defined at:
  2294 ;;		line 165 in file "motors.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;		None
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2299 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2300 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2301 ;; Return value:  Size  Location     Type
  2302 ;;                  1    wreg      unsigned char 
  2303 ;; Registers used:
  2304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2305 ;; Tracked objects:
  2306 ;;		On entry : 0/0
  2307 ;;		On exit  : 0/0
  2308 ;;		Unchanged: 0/0
  2309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2310 ;;      Params:         0       0       0       0       0       0       0
  2311 ;;      Locals:         3       0       0       0       0       0       0
  2312 ;;      Temps:          0       0       0       0       0       0       0
  2313 ;;      Totals:         3       0       0       0       0       0       0
  2314 ;;Total ram usage:        3 bytes
  2315 ;; Hardware stack levels used:    1
  2316 ;; Hardware stack levels required when called:    5
  2317 ;; This function calls:
  2318 ;;		_resetStep
  2319 ;;		_resetTM0_Temp
  2320 ;;		_resetTM2_Temp
  2321 ;;		_stepMade
  2322 ;; This function is called by:
  2323 ;;		_main
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           	psect	text9
  2328  0012B4                     __ptext9:
  2329                           	callstack 0
  2330  0012B4                     _resetPosition:
  2331                           	callstack 0
  2332  0012B4  FFFF               	dw	65535	; assembler added errata NOP
  2333  0012B6                     
  2334                           ;motors.c: 185:     motCounter[0][1] = -1;
  2335  0012B6  6868               	setf	(_motCounter+1)^0,c
  2336                           
  2337                           ;motors.c: 186:     motCounter[1][1] = -1;
  2338  0012B8  686A               	setf	(_motCounter+3)^0,c
  2339                           
  2340                           ;motors.c: 187:     motCounter[2][1] = -1;
  2341  0012BA  686C               	setf	(_motCounter+5)^0,c
  2342  0012BC                     
  2343                           ;motors.c: 192:     unsigned char keepMovingX = 1;
  2344  0012BC  0E01               	movlw	1
  2345  0012BE  6E15               	movwf	resetPosition@keepMovingX^0,c
  2346                           
  2347                           ;motors.c: 193:     unsigned char keepMovingY = 1;
  2348  0012C0  0E01               	movlw	1
  2349  0012C2  6E16               	movwf	resetPosition@keepMovingY^0,c
  2350                           
  2351                           ;motors.c: 194:     unsigned char keepMovingZ = 1;
  2352  0012C4  0E01               	movlw	1
  2353  0012C6  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2354  0012C8                     
  2355                           ;motors.c: 197:     T2CONbits.TMR2ON = 1;
  2356  0012C8  84CA               	bsf	202,2,c	;volatile
  2357                           
  2358                           ;motors.c: 199:     tm0Error = 0;
  2359  0012CA  0E00               	movlw	0
  2360  0012CC  6E5A               	movwf	(_tm0Error+1)^0,c
  2361  0012CE  0E00               	movlw	0
  2362  0012D0  6E59               	movwf	_tm0Error^0,c
  2363                           
  2364                           ;motors.c: 200:     tm0Limit = 200;
  2365  0012D2  0EC8               	movlw	200
  2366  0012D4  6E66               	movwf	_tm0Limit^0,c
  2367  0012D6                     
  2368                           ;motors.c: 201:     T0CONbits.TMR0ON = 1;
  2369  0012D6  8ED5               	bsf	213,7,c	;volatile
  2370                           
  2371                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2372  0012D8  EF1C  F00A         	goto	l4201
  2373  0012DC                     l4159:
  2374  0012DC  FFFF               	dw	65535	; assembler added errata NOP
  2375                           
  2376                           ;motors.c: 205:         resetStep();
  2377  0012DE  EC98  F012         	call	_resetStep	;wreg free
  2378  0012E2                     
  2379                           ;motors.c: 208:         if(tm0Error){
  2380  0012E2  5059               	movf	_tm0Error^0,w,c
  2381  0012E4  105A               	iorwf	(_tm0Error+1)^0,w,c
  2382  0012E6  B4D8               	btfsc	status,2,c
  2383  0012E8  EF78  F009         	goto	u3581
  2384  0012EC  EF7B  F009         	goto	u3580
  2385  0012F0                     u3581:
  2386  0012F0  FFFF               	dw	65535	; assembler added errata NOP
  2387  0012F2  EF82  F009         	goto	l135
  2388  0012F6                     u3580:
  2389  0012F6  FFFF               	dw	65535	; assembler added errata NOP
  2390  0012F8                     
  2391                           ;motors.c: 216:             tm0Error = 3;
  2392  0012F8  0E00               	movlw	0
  2393  0012FA  6E5A               	movwf	(_tm0Error+1)^0,c
  2394  0012FC  0E03               	movlw	3
  2395  0012FE  6E59               	movwf	_tm0Error^0,c
  2396                           
  2397                           ;motors.c: 217:             break;
  2398  001300  EF3A  F00A         	goto	l136
  2399  001304                     l135:
  2400  001304  FFFF               	dw	65535	; assembler added errata NOP
  2401                           
  2402                           ;motors.c: 224:         if(PORTEbits.RE0 || !keepMovingX){
  2403  001306  B084               	btfsc	132,0,c	;volatile
  2404  001308  EF88  F009         	goto	u3591
  2405  00130C  EF8B  F009         	goto	u3590
  2406  001310                     u3591:
  2407  001310  FFFF               	dw	65535	; assembler added errata NOP
  2408  001312  EF95  F009         	goto	l4167
  2409  001316                     u3590:
  2410  001316  FFFF               	dw	65535	; assembler added errata NOP
  2411  001318  5015               	movf	resetPosition@keepMovingX^0,w,c
  2412  00131A  A4D8               	btfss	status,2,c
  2413  00131C  EF92  F009         	goto	u3601
  2414  001320  EF95  F009         	goto	u3600
  2415  001324                     u3601:
  2416  001324  FFFF               	dw	65535	; assembler added errata NOP
  2417  001326  EF9A  F009         	goto	l4169
  2418  00132A                     u3600:
  2419  00132A                     l4167:
  2420  00132A  FFFF               	dw	65535	; assembler added errata NOP
  2421                           
  2422                           ;motors.c: 226:             keepMovingX = 0;
  2423  00132C  0E00               	movlw	0
  2424  00132E  6E15               	movwf	resetPosition@keepMovingX^0,c
  2425                           
  2426                           ;motors.c: 227:         }else{
  2427  001330  EFB1  F009         	goto	l4175
  2428  001334                     l4169:
  2429  001334  FFFF               	dw	65535	; assembler added errata NOP
  2430                           
  2431                           ;motors.c: 233:             motCounter[0][0] += motCounter[0][1];
  2432  001336  5068               	movf	(_motCounter+1)^0,w,c
  2433  001338  2667               	addwf	_motCounter^0,f,c
  2434                           
  2435                           ;motors.c: 234:             if(motCounter[0][0] < 0){
  2436  00133A  BE67               	btfsc	_motCounter^0,7,c
  2437  00133C  EFA5  F009         	goto	u3610
  2438  001340  EFA2  F009         	goto	u3611
  2439  001344                     u3611:
  2440  001344  FFFF               	dw	65535	; assembler added errata NOP
  2441  001346  EFA8  F009         	goto	l4173
  2442  00134A                     u3610:
  2443  00134A  FFFF               	dw	65535	; assembler added errata NOP
  2444  00134C                     
  2445                           ;motors.c: 235:                 motCounter[0][0] = 3;
  2446  00134C  0E03               	movlw	3
  2447  00134E  6E67               	movwf	_motCounter^0,c
  2448  001350                     l4173:
  2449  001350  FFFF               	dw	65535	; assembler added errata NOP
  2450                           
  2451                           ;motors.c: 238:             LATA = stepMot1[motCounter[0][0]];
  2452  001352  0E8C               	movlw	low _stepMot1
  2453  001354  2467               	addwf	_motCounter^0,w,c
  2454  001356  6ED9               	movwf	fsr2l,c
  2455  001358  6ADA               	clrf	fsr2h,c
  2456  00135A  0E00               	movlw	high _stepMot1
  2457  00135C  22DA               	addwfc	fsr2h,f,c
  2458  00135E  50DF               	movf	indf2,w,c
  2459  001360  6E89               	movwf	137,c	;volatile
  2460  001362                     l4175:
  2461  001362  FFFF               	dw	65535	; assembler added errata NOP
  2462                           
  2463                           ;motors.c: 243:         if(PORTEbits.RE1 || !keepMovingY){
  2464  001364  B284               	btfsc	132,1,c	;volatile
  2465  001366  EFB7  F009         	goto	u3621
  2466  00136A  EFBA  F009         	goto	u3620
  2467  00136E                     u3621:
  2468  00136E  FFFF               	dw	65535	; assembler added errata NOP
  2469  001370  EFC4  F009         	goto	l4179
  2470  001374                     u3620:
  2471  001374  FFFF               	dw	65535	; assembler added errata NOP
  2472  001376  5016               	movf	resetPosition@keepMovingY^0,w,c
  2473  001378  A4D8               	btfss	status,2,c
  2474  00137A  EFC1  F009         	goto	u3631
  2475  00137E  EFC4  F009         	goto	u3630
  2476  001382                     u3631:
  2477  001382  FFFF               	dw	65535	; assembler added errata NOP
  2478  001384  EFC9  F009         	goto	l4181
  2479  001388                     u3630:
  2480  001388                     l4179:
  2481  001388  FFFF               	dw	65535	; assembler added errata NOP
  2482                           
  2483                           ;motors.c: 245:             keepMovingY = 0;
  2484  00138A  0E00               	movlw	0
  2485  00138C  6E16               	movwf	resetPosition@keepMovingY^0,c
  2486                           
  2487                           ;motors.c: 246:         }else{
  2488  00138E  EFE0  F009         	goto	l4187
  2489  001392                     l4181:
  2490  001392  FFFF               	dw	65535	; assembler added errata NOP
  2491                           
  2492                           ;motors.c: 252:             motCounter[1][0] += motCounter[1][1];
  2493  001394  506A               	movf	(_motCounter+3)^0,w,c
  2494  001396  2669               	addwf	(_motCounter+2)^0,f,c
  2495                           
  2496                           ;motors.c: 253:             if(motCounter[1][0] < 0){
  2497  001398  BE69               	btfsc	(_motCounter+2)^0,7,c
  2498  00139A  EFD4  F009         	goto	u3640
  2499  00139E  EFD1  F009         	goto	u3641
  2500  0013A2                     u3641:
  2501  0013A2  FFFF               	dw	65535	; assembler added errata NOP
  2502  0013A4  EFD7  F009         	goto	l4185
  2503  0013A8                     u3640:
  2504  0013A8  FFFF               	dw	65535	; assembler added errata NOP
  2505  0013AA                     
  2506                           ;motors.c: 254:                 motCounter[1][0] = 3;
  2507  0013AA  0E03               	movlw	3
  2508  0013AC  6E69               	movwf	(_motCounter+2)^0,c
  2509  0013AE                     l4185:
  2510  0013AE  FFFF               	dw	65535	; assembler added errata NOP
  2511                           
  2512                           ;motors.c: 257:             LATB = stepMot2[motCounter[1][0]];
  2513  0013B0  0E88               	movlw	low _stepMot2
  2514  0013B2  2469               	addwf	(_motCounter+2)^0,w,c
  2515  0013B4  6ED9               	movwf	fsr2l,c
  2516  0013B6  6ADA               	clrf	fsr2h,c
  2517  0013B8  0E00               	movlw	high _stepMot2
  2518  0013BA  22DA               	addwfc	fsr2h,f,c
  2519  0013BC  50DF               	movf	indf2,w,c
  2520  0013BE  6E8A               	movwf	138,c	;volatile
  2521  0013C0                     l4187:
  2522  0013C0  FFFF               	dw	65535	; assembler added errata NOP
  2523                           
  2524                           ;motors.c: 262:         if(PORTEbits.RE2 || !keepMovingZ){
  2525  0013C2  B484               	btfsc	132,2,c	;volatile
  2526  0013C4  EFE6  F009         	goto	u3651
  2527  0013C8  EFE9  F009         	goto	u3650
  2528  0013CC                     u3651:
  2529  0013CC  FFFF               	dw	65535	; assembler added errata NOP
  2530  0013CE  EFF3  F009         	goto	l4191
  2531  0013D2                     u3650:
  2532  0013D2  FFFF               	dw	65535	; assembler added errata NOP
  2533  0013D4  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2534  0013D6  A4D8               	btfss	status,2,c
  2535  0013D8  EFF0  F009         	goto	u3661
  2536  0013DC  EFF3  F009         	goto	u3660
  2537  0013E0                     u3661:
  2538  0013E0  FFFF               	dw	65535	; assembler added errata NOP
  2539  0013E2  EFF8  F009         	goto	l4193
  2540  0013E6                     u3660:
  2541  0013E6                     l4191:
  2542  0013E6  FFFF               	dw	65535	; assembler added errata NOP
  2543                           
  2544                           ;motors.c: 264:             keepMovingZ = 0;
  2545  0013E8  0E00               	movlw	0
  2546  0013EA  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2547                           
  2548                           ;motors.c: 265:         }else{
  2549  0013EC  EF0F  F00A         	goto	l4199
  2550  0013F0                     l4193:
  2551  0013F0  FFFF               	dw	65535	; assembler added errata NOP
  2552                           
  2553                           ;motors.c: 271:             motCounter[2][0] += motCounter[2][1];
  2554  0013F2  506C               	movf	(_motCounter+5)^0,w,c
  2555  0013F4  266B               	addwf	(_motCounter+4)^0,f,c
  2556                           
  2557                           ;motors.c: 272:             if(motCounter[2][0] < 0){
  2558  0013F6  BE6B               	btfsc	(_motCounter+4)^0,7,c
  2559  0013F8  EF03  F00A         	goto	u3670
  2560  0013FC  EF00  F00A         	goto	u3671
  2561  001400                     u3671:
  2562  001400  FFFF               	dw	65535	; assembler added errata NOP
  2563  001402  EF06  F00A         	goto	l4197
  2564  001406                     u3670:
  2565  001406  FFFF               	dw	65535	; assembler added errata NOP
  2566  001408                     
  2567                           ;motors.c: 273:                 motCounter[2][0] = 3;
  2568  001408  0E03               	movlw	3
  2569  00140A  6E6B               	movwf	(_motCounter+4)^0,c
  2570  00140C                     l4197:
  2571  00140C  FFFF               	dw	65535	; assembler added errata NOP
  2572                           
  2573                           ;motors.c: 276:             LATC = stepMot3[motCounter[2][0]];
  2574  00140E  0E84               	movlw	low _stepMot3
  2575  001410  246B               	addwf	(_motCounter+4)^0,w,c
  2576  001412  6ED9               	movwf	fsr2l,c
  2577  001414  6ADA               	clrf	fsr2h,c
  2578  001416  0E00               	movlw	high _stepMot3
  2579  001418  22DA               	addwfc	fsr2h,f,c
  2580  00141A  50DF               	movf	indf2,w,c
  2581  00141C  6E8B               	movwf	139,c	;volatile
  2582  00141E                     l4199:
  2583  00141E  FFFF               	dw	65535	; assembler added errata NOP
  2584  001420  EC15  F012         	call	_stepMade	;wreg free
  2585  001424  5012               	movf	?_stepMade^0,w,c
  2586  001426  1013               	iorwf	(?_stepMade+1)^0,w,c
  2587  001428  B4D8               	btfsc	status,2,c
  2588  00142A  EF19  F00A         	goto	u3681
  2589  00142E  EF1C  F00A         	goto	u3680
  2590  001432                     u3681:
  2591  001432  FFFF               	dw	65535	; assembler added errata NOP
  2592  001434  EF0F  F00A         	goto	l4199
  2593  001438                     u3680:
  2594  001438                     l4201:
  2595  001438  FFFF               	dw	65535	; assembler added errata NOP
  2596                           
  2597                           ;motors.c: 203:     while(keepMovingX || keepMovingY || keepMovingZ){
  2598  00143A  5015               	movf	resetPosition@keepMovingX^0,w,c
  2599  00143C  A4D8               	btfss	status,2,c
  2600  00143E  EF23  F00A         	goto	u3691
  2601  001442  EF26  F00A         	goto	u3690
  2602  001446                     u3691:
  2603  001446  FFFF               	dw	65535	; assembler added errata NOP
  2604  001448  EF6E  F009         	goto	l4159
  2605  00144C                     u3690:
  2606  00144C  FFFF               	dw	65535	; assembler added errata NOP
  2607  00144E  5016               	movf	resetPosition@keepMovingY^0,w,c
  2608  001450  A4D8               	btfss	status,2,c
  2609  001452  EF2D  F00A         	goto	u3701
  2610  001456  EF30  F00A         	goto	u3700
  2611  00145A                     u3701:
  2612  00145A  FFFF               	dw	65535	; assembler added errata NOP
  2613  00145C  EF6E  F009         	goto	l4159
  2614  001460                     u3700:
  2615  001460  FFFF               	dw	65535	; assembler added errata NOP
  2616  001462  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2617  001464  A4D8               	btfss	status,2,c
  2618  001466  EF37  F00A         	goto	u3711
  2619  00146A  EF3A  F00A         	goto	u3710
  2620  00146E                     u3711:
  2621  00146E  FFFF               	dw	65535	; assembler added errata NOP
  2622  001470  EF6E  F009         	goto	l4159
  2623  001474                     u3710:
  2624  001474                     l136:
  2625  001474  FFFF               	dw	65535	; assembler added errata NOP
  2626                           
  2627                           ;motors.c: 296:     T0CONbits.TMR0ON = 0;
  2628  001476  9ED5               	bcf	213,7,c	;volatile
  2629                           
  2630                           ;motors.c: 297:     T2CONbits.TMR2ON = 0;
  2631  001478  94CA               	bcf	202,2,c	;volatile
  2632  00147A                     
  2633                           ;motors.c: 299:     resetTM0_Temp();
  2634  00147A  EC93  F012         	call	_resetTM0_Temp	;wreg free
  2635                           
  2636                           ;motors.c: 300:     resetTM2_Temp();
  2637  00147E  EC31  F012         	call	_resetTM2_Temp	;wreg free
  2638  001482                     
  2639                           ;motors.c: 302:     TMR0 = 0;
  2640  001482  0E00               	movlw	0
  2641  001484  6ED7               	movwf	215,c	;volatile
  2642  001486  0E00               	movlw	0
  2643  001488  6ED6               	movwf	214,c	;volatile
  2644  00148A                     
  2645                           ;motors.c: 303:     TMR2 = 0;
  2646  00148A  0E00               	movlw	0
  2647  00148C  6ECC               	movwf	204,c	;volatile
  2648                           
  2649                           ;motors.c: 306:     resetStep();
  2650  00148E  EC98  F012         	call	_resetStep	;wreg free
  2651  001492                     
  2652                           ;motors.c: 309:     return(tm0Error);
  2653  001492  5059               	movf	_tm0Error^0,w,c
  2654  001494  0012               	return		;funcret
  2655  001496  FFFF               	dw	65535	; errata NOP
  2656  001498                     __end_of_resetPosition:
  2657                           	callstack 0
  2658                           
  2659 ;; *************** function _resetNewSequence *****************
  2660 ;; Defined at:
  2661 ;;		line 73 in file "usart.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;		None
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;		None
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      void 
  2668 ;; Registers used:
  2669 ;;		wreg, status,2
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2675 ;;      Params:         0       0       0       0       0       0       0
  2676 ;;      Locals:         0       0       0       0       0       0       0
  2677 ;;      Temps:          0       0       0       0       0       0       0
  2678 ;;      Totals:         0       0       0       0       0       0       0
  2679 ;;Total ram usage:        0 bytes
  2680 ;; Hardware stack levels used:    1
  2681 ;; Hardware stack levels required when called:    4
  2682 ;; This function calls:
  2683 ;;		Nothing
  2684 ;; This function is called by:
  2685 ;;		_main
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           	psect	text10
  2690  0024FE                     __ptext10:
  2691                           	callstack 0
  2692  0024FE                     _resetNewSequence:
  2693                           	callstack 0
  2694  0024FE  FFFF               	dw	65535	; assembler added errata NOP
  2695  002500                     
  2696                           ;usart.c: 74:     _newSequence = 0;
  2697  002500  0E00               	movlw	0
  2698  002502  6E5F               	movwf	__newSequence^0,c
  2699  002504  0012               	return		;funcret
  2700  002506  FFFF               	dw	65535	; errata NOP
  2701  002508                     __end_of_resetNewSequence:
  2702                           	callstack 0
  2703                           
  2704 ;; *************** function _reduceSeq *****************
  2705 ;; Defined at:
  2706 ;;		line 50 in file "usart.c"
  2707 ;; Parameters:    Size  Location     Type
  2708 ;;		None
  2709 ;; Auto vars:     Size  Location     Type
  2710 ;;		None
  2711 ;; Return value:  Size  Location     Type
  2712 ;;                  1    wreg      void 
  2713 ;; Registers used:
  2714 ;;		status,2, status,0
  2715 ;; Tracked objects:
  2716 ;;		On entry : 0/0
  2717 ;;		On exit  : 0/0
  2718 ;;		Unchanged: 0/0
  2719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2720 ;;      Params:         0       0       0       0       0       0       0
  2721 ;;      Locals:         0       0       0       0       0       0       0
  2722 ;;      Temps:          0       0       0       0       0       0       0
  2723 ;;      Totals:         0       0       0       0       0       0       0
  2724 ;;Total ram usage:        0 bytes
  2725 ;; Hardware stack levels used:    1
  2726 ;; Hardware stack levels required when called:    4
  2727 ;; This function calls:
  2728 ;;		Nothing
  2729 ;; This function is called by:
  2730 ;;		_main
  2731 ;; This function uses a non-reentrant model
  2732 ;;
  2733                           
  2734                           	psect	text11
  2735  002558                     __ptext11:
  2736                           	callstack 0
  2737  002558                     _reduceSeq:
  2738                           	callstack 0
  2739  002558  FFFF               	dw	65535	; assembler added errata NOP
  2740  00255A                     
  2741                           ;usart.c: 51:     dataCounter--;
  2742  00255A  0661               	decf	_dataCounter^0,f,c
  2743  00255C  0012               	return		;funcret
  2744  00255E  FFFF               	dw	65535	; errata NOP
  2745  002560                     __end_of_reduceSeq:
  2746                           	callstack 0
  2747                           
  2748 ;; *************** function _readSeq *****************
  2749 ;; Defined at:
  2750 ;;		line 57 in file "usart.c"
  2751 ;; Parameters:    Size  Location     Type
  2752 ;;		None
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;		None
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  1    wreg      unsigned char 
  2757 ;; Registers used:
  2758 ;;		wreg, status,2
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2764 ;;      Params:         0       0       0       0       0       0       0
  2765 ;;      Locals:         0       0       0       0       0       0       0
  2766 ;;      Temps:          0       0       0       0       0       0       0
  2767 ;;      Totals:         0       0       0       0       0       0       0
  2768 ;;Total ram usage:        0 bytes
  2769 ;; Hardware stack levels used:    1
  2770 ;; Hardware stack levels required when called:    4
  2771 ;; This function calls:
  2772 ;;		Nothing
  2773 ;; This function is called by:
  2774 ;;		_main
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text12
  2779  002560                     __ptext12:
  2780                           	callstack 0
  2781  002560                     _readSeq:
  2782                           	callstack 0
  2783  002560  FFFF               	dw	65535	; assembler added errata NOP
  2784  002562                     
  2785                           ;usart.c: 58:     return dataCounter;
  2786  002562  5061               	movf	_dataCounter^0,w,c
  2787  002564  0012               	return		;funcret
  2788  002566  FFFF               	dw	65535	; errata NOP
  2789  002568                     __end_of_readSeq:
  2790                           	callstack 0
  2791                           
  2792 ;; *************** function _newSequence *****************
  2793 ;; Defined at:
  2794 ;;		line 65 in file "usart.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;		None
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;		None
  2799 ;; Return value:  Size  Location     Type
  2800 ;;                  1    wreg      unsigned char 
  2801 ;; Registers used:
  2802 ;;		wreg, status,2
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2808 ;;      Params:         0       0       0       0       0       0       0
  2809 ;;      Locals:         0       0       0       0       0       0       0
  2810 ;;      Temps:          0       0       0       0       0       0       0
  2811 ;;      Totals:         0       0       0       0       0       0       0
  2812 ;;Total ram usage:        0 bytes
  2813 ;; Hardware stack levels used:    1
  2814 ;; Hardware stack levels required when called:    4
  2815 ;; This function calls:
  2816 ;;		Nothing
  2817 ;; This function is called by:
  2818 ;;		_main
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           	psect	text13
  2823  002568                     __ptext13:
  2824                           	callstack 0
  2825  002568                     _newSequence:
  2826                           	callstack 0
  2827  002568  FFFF               	dw	65535	; assembler added errata NOP
  2828  00256A                     
  2829                           ;usart.c: 66:     return _newSequence;
  2830  00256A  505F               	movf	__newSequence^0,w,c
  2831  00256C  0012               	return		;funcret
  2832  00256E  FFFF               	dw	65535	; errata NOP
  2833  002570                     __end_of_newSequence:
  2834                           	callstack 0
  2835                           
  2836 ;; *************** function _interruptInit *****************
  2837 ;; Defined at:
  2838 ;;		line 35 in file "interrupt.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;		None
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;		None
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  1    wreg      void 
  2845 ;; Registers used:
  2846 ;;		None
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2852 ;;      Params:         0       0       0       0       0       0       0
  2853 ;;      Locals:         0       0       0       0       0       0       0
  2854 ;;      Temps:          0       0       0       0       0       0       0
  2855 ;;      Totals:         0       0       0       0       0       0       0
  2856 ;;Total ram usage:        0 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    4
  2859 ;; This function calls:
  2860 ;;		Nothing
  2861 ;; This function is called by:
  2862 ;;		_main
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           	psect	text14
  2867  002324                     __ptext14:
  2868                           	callstack 0
  2869  002324                     _interruptInit:
  2870                           	callstack 0
  2871  002324  FFFF               	dw	65535	; assembler added errata NOP
  2872  002326                     
  2873                           ;interrupt.c: 37:     if(!INTCONbits.GIE){
  2874  002326  BEF2               	btfsc	242,7,c	;volatile
  2875  002328  EF98  F011         	goto	u3721
  2876  00232C  EF9B  F011         	goto	u3720
  2877  002330                     u3721:
  2878  002330  FFFF               	dw	65535	; assembler added errata NOP
  2879  002332  EF9D  F011         	goto	l465
  2880  002336                     u3720:
  2881  002336  FFFF               	dw	65535	; assembler added errata NOP
  2882  002338                     
  2883                           ;interrupt.c: 38:         INTCONbits.GIE = 1;
  2884  002338  8EF2               	bsf	242,7,c	;volatile
  2885  00233A                     l465:
  2886  00233A  FFFF               	dw	65535	; assembler added errata NOP
  2887                           
  2888                           ;interrupt.c: 40:     if(!INTCONbits.PEIE){
  2889  00233C  BCF2               	btfsc	242,6,c	;volatile
  2890  00233E  EFA3  F011         	goto	u3731
  2891  002342  EFA6  F011         	goto	u3730
  2892  002346                     u3731:
  2893  002346  FFFF               	dw	65535	; assembler added errata NOP
  2894  002348  EFA8  F011         	goto	l466
  2895  00234C                     u3730:
  2896  00234C  FFFF               	dw	65535	; assembler added errata NOP
  2897  00234E                     
  2898                           ;interrupt.c: 41:         INTCONbits.PEIE = 1;
  2899  00234E  8CF2               	bsf	242,6,c	;volatile
  2900  002350                     l466:
  2901  002350  FFFF               	dw	65535	; assembler added errata NOP
  2902                           
  2903                           ;interrupt.c: 45:     RCONbits.IPEN = 1;
  2904  002352  8ED0               	bsf	208,7,c	;volatile
  2905                           
  2906                           ;interrupt.c: 46:     INTCONbits.T0IE = 1;
  2907  002354  8AF2               	bsf	242,5,c	;volatile
  2908                           
  2909                           ;interrupt.c: 47:     PIE1bits.TMR1IE = 1;
  2910  002356  809D               	bsf	157,0,c	;volatile
  2911                           
  2912                           ;interrupt.c: 48:     PIE1bits.TMR2IE = 1;
  2913  002358  829D               	bsf	157,1,c	;volatile
  2914                           
  2915                           ;interrupt.c: 49:     PIE1bits.RC1IE = 1;
  2916  00235A  8A9D               	bsf	157,5,c	;volatile
  2917  00235C  0012               	return		;funcret
  2918  00235E  FFFF               	dw	65535	; errata NOP
  2919  002360                     __end_of_interruptInit:
  2920                           	callstack 0
  2921                           
  2922 ;; *************** function _initPinMotors *****************
  2923 ;; Defined at:
  2924 ;;		line 49 in file "motors.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;		None
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;		None
  2929 ;; Return value:  Size  Location     Type
  2930 ;;                  1    wreg      void 
  2931 ;; Registers used:
  2932 ;;		wreg, status,2, status,0
  2933 ;; Tracked objects:
  2934 ;;		On entry : 0/0
  2935 ;;		On exit  : 0/0
  2936 ;;		Unchanged: 0/0
  2937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2938 ;;      Params:         0       0       0       0       0       0       0
  2939 ;;      Locals:         0       0       0       0       0       0       0
  2940 ;;      Temps:          0       0       0       0       0       0       0
  2941 ;;      Totals:         0       0       0       0       0       0       0
  2942 ;;Total ram usage:        0 bytes
  2943 ;; Hardware stack levels used:    1
  2944 ;; Hardware stack levels required when called:    4
  2945 ;; This function calls:
  2946 ;;		Nothing
  2947 ;; This function is called by:
  2948 ;;		_main
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           	psect	text15
  2953  0023C0                     __ptext15:
  2954                           	callstack 0
  2955  0023C0                     _initPinMotors:
  2956                           	callstack 0
  2957  0023C0  FFFF               	dw	65535	; assembler added errata NOP
  2958  0023C2                     
  2959                           ;motors.c: 51:     ADCON1bits.PCFG = 0x06;
  2960  0023C2  50C1               	movf	193,w,c	;volatile
  2961  0023C4  0BF0               	andlw	-16
  2962  0023C6  0906               	iorlw	6
  2963  0023C8  6EC1               	movwf	193,c	;volatile
  2964  0023CA                     
  2965                           ;motors.c: 52:     TRISA &= 0b11010001;
  2966  0023CA  0ED1               	movlw	209
  2967  0023CC  1692               	andwf	146,f,c	;volatile
  2968  0023CE                     
  2969                           ;motors.c: 54:     TRISB &= 0b00000010;
  2970  0023CE  0E02               	movlw	2
  2971  0023D0  1693               	andwf	147,f,c	;volatile
  2972  0023D2                     
  2973                           ;motors.c: 55:     TRISC &= 0b11000000;
  2974  0023D2  0EC0               	movlw	192
  2975  0023D4  1694               	andwf	148,f,c	;volatile
  2976  0023D6                     
  2977                           ;motors.c: 56:     TRISD &= 0b11000000;
  2978  0023D6  0EC0               	movlw	192
  2979  0023D8  1695               	andwf	149,f,c	;volatile
  2980  0023DA                     
  2981                           ;motors.c: 59:     TRISEbits.TRISE0 = 1;
  2982  0023DA  8096               	bsf	150,0,c	;volatile
  2983  0023DC                     
  2984                           ;motors.c: 60:     TRISEbits.TRISE1 = 1;
  2985  0023DC  8296               	bsf	150,1,c	;volatile
  2986  0023DE                     
  2987                           ;motors.c: 61:     TRISEbits.TRISE2 = 1;
  2988  0023DE  8496               	bsf	150,2,c	;volatile
  2989  0023E0                     
  2990                           ;motors.c: 64:     TRISDbits.TRISD7 = 1;
  2991  0023E0  8E95               	bsf	149,7,c	;volatile
  2992  0023E2  0012               	return		;funcret
  2993  0023E4  FFFF               	dw	65535	; errata NOP
  2994  0023E6                     __end_of_initPinMotors:
  2995                           	callstack 0
  2996                           
  2997 ;; *************** function _initADC *****************
  2998 ;; Defined at:
  2999 ;;		line 18 in file "adc.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;		None
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;		None
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      void 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3013 ;;      Params:         0       0       0       0       0       0       0
  3014 ;;      Locals:         0       0       0       0       0       0       0
  3015 ;;      Temps:          0       0       0       0       0       0       0
  3016 ;;      Totals:         0       0       0       0       0       0       0
  3017 ;;Total ram usage:        0 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    4
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_main
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           	psect	text16
  3028  0023E6                     __ptext16:
  3029                           	callstack 0
  3030  0023E6                     _initADC:
  3031                           	callstack 0
  3032  0023E6  FFFF               	dw	65535	; assembler added errata NOP
  3033  0023E8                     
  3034                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3035  0023E8  50C2               	movf	194,w,c	;volatile
  3036  0023EA  0B3F               	andlw	-193
  3037  0023EC  0940               	iorlw	64
  3038  0023EE  6EC2               	movwf	194,c	;volatile
  3039  0023F0                     
  3040                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3041  0023F0  8CC1               	bsf	193,6,c	;volatile
  3042                           
  3043                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3044  0023F2  0EC7               	movlw	-57
  3045  0023F4  16C2               	andwf	194,f,c	;volatile
  3046  0023F6                     
  3047                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3048  0023F6  94C2               	bcf	194,2,c	;volatile
  3049  0023F8                     
  3050                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3051  0023F8  90C2               	bcf	194,0,c	;volatile
  3052  0023FA                     
  3053                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3054  0023FA  9EC1               	bcf	193,7,c	;volatile
  3055                           
  3056                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3057  0023FC  50C1               	movf	193,w,c	;volatile
  3058  0023FE  0BF0               	andlw	-16
  3059  002400  090E               	iorlw	14
  3060  002402  6EC1               	movwf	193,c	;volatile
  3061  002404                     
  3062                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3063  002404  8C9D               	bsf	157,6,c	;volatile
  3064  002406                     
  3065                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3066  002406  8C9F               	bsf	159,6,c	;volatile
  3067  002408  0012               	return		;funcret
  3068  00240A  FFFF               	dw	65535	; errata NOP
  3069  00240C                     __end_of_initADC:
  3070                           	callstack 0
  3071                           
  3072 ;; *************** function _getNewSequence *****************
  3073 ;; Defined at:
  3074 ;;		line 43 in file "usart.c"
  3075 ;; Parameters:    Size  Location     Type
  3076 ;;		None
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;		None
  3079 ;; Return value:  Size  Location     Type
  3080 ;;                  2   17[COMRAM] PTR struct .
  3081 ;; Registers used:
  3082 ;;		wreg, status,2, status,0
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3088 ;;      Params:         2       0       0       0       0       0       0
  3089 ;;      Locals:         0       0       0       0       0       0       0
  3090 ;;      Temps:          0       0       0       0       0       0       0
  3091 ;;      Totals:         2       0       0       0       0       0       0
  3092 ;;Total ram usage:        2 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; Hardware stack levels required when called:    4
  3095 ;; This function calls:
  3096 ;;		Nothing
  3097 ;; This function is called by:
  3098 ;;		_main
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           	psect	text17
  3103  002494                     __ptext17:
  3104                           	callstack 0
  3105  002494                     _getNewSequence:
  3106                           	callstack 0
  3107  002494  FFFF               	dw	65535	; assembler added errata NOP
  3108  002496                     
  3109                           ;usart.c: 44:     return(&newSequenceData);
  3110  002496  0EDE               	movlw	low _newSequenceData
  3111  002498  6E12               	movwf	?_getNewSequence^0,c
  3112  00249A  0E00               	movlw	high _newSequenceData
  3113  00249C  6E13               	movwf	(?_getNewSequence+1)^0,c
  3114  00249E  0012               	return		;funcret
  3115  0024A0  FFFF               	dw	65535	; errata NOP
  3116  0024A2                     __end_of_getNewSequence:
  3117                           	callstack 0
  3118                           
  3119 ;; *************** function _executeData *****************
  3120 ;; Defined at:
  3121 ;;		line 105 in file "main.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;		None
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  data            2    9[BANK0 ] PTR struct .
  3126 ;;		 -> dataSequence(20), 
  3127 ;;  errCode         1   11[BANK0 ] unsigned char 
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  1    wreg      unsigned char 
  3130 ;; Registers used:
  3131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/0
  3134 ;;		On exit  : 0/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3137 ;;      Params:         0       0       0       0       0       0       0
  3138 ;;      Locals:         0       3       0       0       0       0       0
  3139 ;;      Temps:          0       2       0       0       0       0       0
  3140 ;;      Totals:         0       5       0       0       0       0       0
  3141 ;;Total ram usage:        5 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    6
  3144 ;; This function calls:
  3145 ;;		_getData
  3146 ;;		_liftArm
  3147 ;;		_moveToPoint
  3148 ;;		_pickObject
  3149 ;;		_releaseObj
  3150 ;;		_rotateObj
  3151 ;;		_touchObject
  3152 ;;		_touchTherm
  3153 ;; This function is called by:
  3154 ;;		_main
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           	psect	text18
  3159  000DC6                     __ptext18:
  3160                           	callstack 0
  3161  000DC6                     _executeData:
  3162                           	callstack 0
  3163  000DC6  FFFF               	dw	65535	; assembler added errata NOP
  3164  000DC8                     
  3165                           ;main.c: 106:     t_sequence *data = getData();
  3166  000DC8  EC51  F012         	call	_getData	;wreg free
  3167  000DCC  C012  F0EF         	movff	?_getData,executeData@data
  3168  000DD0  C013  F0F0         	movff	?_getData+1,executeData@data+1
  3169  000DD4                     
  3170                           ;main.c: 112:     switch(data->feederLine){
  3171  000DD4  EF95  F007         	goto	l4345
  3172  000DD8                     l4317:
  3173  000DD8  FFFF               	dw	65535	; assembler added errata NOP
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;main.c: 115:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3177  000DDA  C04C  F015         	movff	_posVector,moveToPoint@x1
  3178  000DDE  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3179  000DE0  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3180  000DE4  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3181  000DE6  0E0D               	movlw	low _feeder1Pos
  3182  000DE8  6EF6               	movwf	tblptrl,c
  3183  000DEA                     	if	1	;There is more than 1 active tblptr byte
  3184  000DEA  0E06               	movlw	high _feeder1Pos
  3185  000DEC  6EF7               	movwf	tblptrh,c
  3186  000DEE                     	endif
  3187  000DEE                     	if	0	;There are less than 3 active tblptr bytes
  3188  000DEE                     	endif
  3189  000DEE  0008               	tblrd		*
  3190  000DF0  FFFF               	dw	65535	; errata NOP
  3191  000DF2  50F5               	movf	tablat,w,c
  3192  000DF4  6E19               	movwf	moveToPoint@x2^0,c
  3193  000DF6  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3194  000DF8  0E0E               	movlw	low (_feeder1Pos+1)
  3195  000DFA  6EF6               	movwf	tblptrl,c
  3196  000DFC  0E06               	movlw	high (_feeder1Pos+1)
  3197  000DFE  6EF7               	movwf	tblptrh,c
  3198  000E00                     	if	0	;tblptru may be non-zero
  3199  000E00                     	endif
  3200  000E00                     	if	0	;tblptru may be non-zero
  3201  000E00                     	endif
  3202  000E00  0008               	tblrd		*
  3203  000E02  FFFF               	dw	65535	; errata NOP
  3204  000E04  50F5               	movf	tablat,w,c
  3205  000E06  6E1B               	movwf	moveToPoint@y2^0,c
  3206  000E08  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3207  000E0A  EC22  F005         	call	_moveToPoint	;wreg free
  3208  000E0E  0100               	movlb	0	; () banked
  3209  000E10  6FF1               	movwf	executeData@errCode& (0+255),b
  3210  000E12                     
  3211                           ; BSR set to: 0
  3212                           ;main.c: 117:             posVector[0] = feeder1Pos[0];
  3213  000E12  0E0D               	movlw	low _feeder1Pos
  3214  000E14  6EF6               	movwf	tblptrl,c
  3215  000E16                     	if	1	;There is more than 1 active tblptr byte
  3216  000E16  0E06               	movlw	high _feeder1Pos
  3217  000E18  6EF7               	movwf	tblptrh,c
  3218  000E1A                     	endif
  3219  000E1A                     	if	0	;There are less than 3 active tblptr bytes
  3220  000E1A                     	endif
  3221  000E1A  0008               	tblrd		*
  3222  000E1C  FFFF               	dw	65535	; errata NOP
  3223  000E1E  CFF5 F04C          	movff	tablat,_posVector
  3224  000E22                     
  3225                           ; BSR set to: 0
  3226                           ;main.c: 118:             posVector[1] = feeder1Pos[1];
  3227  000E22  0E0E               	movlw	low (_feeder1Pos+1)
  3228  000E24  6EF6               	movwf	tblptrl,c
  3229  000E26  0E06               	movlw	high (_feeder1Pos+1)
  3230  000E28  6EF7               	movwf	tblptrh,c
  3231  000E2A                     	if	0	;tblptru may be non-zero
  3232  000E2A                     	endif
  3233  000E2A                     	if	0	;tblptru may be non-zero
  3234  000E2A                     	endif
  3235  000E2A  0008               	tblrd		*
  3236  000E2C  FFFF               	dw	65535	; errata NOP
  3237  000E2E  CFF5 F04D          	movff	tablat,_posVector+1
  3238                           
  3239                           ;main.c: 119:             break;
  3240  000E32  EFB9  F007         	goto	l4347
  3241  000E36                     l4323:
  3242  000E36  FFFF               	dw	65535	; assembler added errata NOP
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 121:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3246  000E38  C04C  F015         	movff	_posVector,moveToPoint@x1
  3247  000E3C  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3248  000E3E  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3249  000E42  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3250  000E44  0E0B               	movlw	low _feeder2Pos
  3251  000E46  6EF6               	movwf	tblptrl,c
  3252  000E48                     	if	1	;There is more than 1 active tblptr byte
  3253  000E48  0E06               	movlw	high _feeder2Pos
  3254  000E4A  6EF7               	movwf	tblptrh,c
  3255  000E4C                     	endif
  3256  000E4C                     	if	0	;There are less than 3 active tblptr bytes
  3257  000E4C                     	endif
  3258  000E4C  0008               	tblrd		*
  3259  000E4E  FFFF               	dw	65535	; errata NOP
  3260  000E50  50F5               	movf	tablat,w,c
  3261  000E52  6E19               	movwf	moveToPoint@x2^0,c
  3262  000E54  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3263  000E56  0E0C               	movlw	low (_feeder2Pos+1)
  3264  000E58  6EF6               	movwf	tblptrl,c
  3265  000E5A  0E06               	movlw	high (_feeder2Pos+1)
  3266  000E5C  6EF7               	movwf	tblptrh,c
  3267  000E5E                     	if	0	;tblptru may be non-zero
  3268  000E5E                     	endif
  3269  000E5E                     	if	0	;tblptru may be non-zero
  3270  000E5E                     	endif
  3271  000E5E  0008               	tblrd		*
  3272  000E60  FFFF               	dw	65535	; errata NOP
  3273  000E62  50F5               	movf	tablat,w,c
  3274  000E64  6E1B               	movwf	moveToPoint@y2^0,c
  3275  000E66  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3276  000E68  EC22  F005         	call	_moveToPoint	;wreg free
  3277  000E6C  0100               	movlb	0	; () banked
  3278  000E6E  6FF1               	movwf	executeData@errCode& (0+255),b
  3279  000E70                     
  3280                           ; BSR set to: 0
  3281                           ;main.c: 122:             posVector[0] = feeder2Pos[0];
  3282  000E70  0E0B               	movlw	low _feeder2Pos
  3283  000E72  6EF6               	movwf	tblptrl,c
  3284  000E74                     	if	1	;There is more than 1 active tblptr byte
  3285  000E74  0E06               	movlw	high _feeder2Pos
  3286  000E76  6EF7               	movwf	tblptrh,c
  3287  000E78                     	endif
  3288  000E78                     	if	0	;There are less than 3 active tblptr bytes
  3289  000E78                     	endif
  3290  000E78  0008               	tblrd		*
  3291  000E7A  FFFF               	dw	65535	; errata NOP
  3292  000E7C  CFF5 F04C          	movff	tablat,_posVector
  3293  000E80                     
  3294                           ; BSR set to: 0
  3295                           ;main.c: 123:             posVector[1] = feeder2Pos[1];
  3296  000E80  0E0C               	movlw	low (_feeder2Pos+1)
  3297  000E82  6EF6               	movwf	tblptrl,c
  3298  000E84  0E06               	movlw	high (_feeder2Pos+1)
  3299  000E86  6EF7               	movwf	tblptrh,c
  3300  000E88                     	if	0	;tblptru may be non-zero
  3301  000E88                     	endif
  3302  000E88                     	if	0	;tblptru may be non-zero
  3303  000E88                     	endif
  3304  000E88  0008               	tblrd		*
  3305  000E8A  FFFF               	dw	65535	; errata NOP
  3306  000E8C  CFF5 F04D          	movff	tablat,_posVector+1
  3307                           
  3308                           ;main.c: 124:             break;
  3309  000E90  EFB9  F007         	goto	l4347
  3310  000E94                     l4329:
  3311  000E94  FFFF               	dw	65535	; assembler added errata NOP
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;main.c: 126:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3315  000E96  C04C  F015         	movff	_posVector,moveToPoint@x1
  3316  000E9A  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3317  000E9C  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3318  000EA0  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3319  000EA2  0E09               	movlw	low _feeder3Pos
  3320  000EA4  6EF6               	movwf	tblptrl,c
  3321  000EA6                     	if	1	;There is more than 1 active tblptr byte
  3322  000EA6  0E06               	movlw	high _feeder3Pos
  3323  000EA8  6EF7               	movwf	tblptrh,c
  3324  000EAA                     	endif
  3325  000EAA                     	if	0	;There are less than 3 active tblptr bytes
  3326  000EAA                     	endif
  3327  000EAA  0008               	tblrd		*
  3328  000EAC  FFFF               	dw	65535	; errata NOP
  3329  000EAE  50F5               	movf	tablat,w,c
  3330  000EB0  6E19               	movwf	moveToPoint@x2^0,c
  3331  000EB2  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3332  000EB4  0E0A               	movlw	low (_feeder3Pos+1)
  3333  000EB6  6EF6               	movwf	tblptrl,c
  3334  000EB8  0E06               	movlw	high (_feeder3Pos+1)
  3335  000EBA  6EF7               	movwf	tblptrh,c
  3336  000EBC                     	if	0	;tblptru may be non-zero
  3337  000EBC                     	endif
  3338  000EBC                     	if	0	;tblptru may be non-zero
  3339  000EBC                     	endif
  3340  000EBC  0008               	tblrd		*
  3341  000EBE  FFFF               	dw	65535	; errata NOP
  3342  000EC0  50F5               	movf	tablat,w,c
  3343  000EC2  6E1B               	movwf	moveToPoint@y2^0,c
  3344  000EC4  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3345  000EC6  EC22  F005         	call	_moveToPoint	;wreg free
  3346  000ECA  0100               	movlb	0	; () banked
  3347  000ECC  6FF1               	movwf	executeData@errCode& (0+255),b
  3348  000ECE                     
  3349                           ; BSR set to: 0
  3350                           ;main.c: 127:             posVector[0] = feeder3Pos[0];
  3351  000ECE  0E09               	movlw	low _feeder3Pos
  3352  000ED0  6EF6               	movwf	tblptrl,c
  3353  000ED2                     	if	1	;There is more than 1 active tblptr byte
  3354  000ED2  0E06               	movlw	high _feeder3Pos
  3355  000ED4  6EF7               	movwf	tblptrh,c
  3356  000ED6                     	endif
  3357  000ED6                     	if	0	;There are less than 3 active tblptr bytes
  3358  000ED6                     	endif
  3359  000ED6  0008               	tblrd		*
  3360  000ED8  FFFF               	dw	65535	; errata NOP
  3361  000EDA  CFF5 F04C          	movff	tablat,_posVector
  3362  000EDE                     
  3363                           ; BSR set to: 0
  3364                           ;main.c: 128:             posVector[1] = feeder3Pos[1];
  3365  000EDE  0E0A               	movlw	low (_feeder3Pos+1)
  3366  000EE0  6EF6               	movwf	tblptrl,c
  3367  000EE2  0E06               	movlw	high (_feeder3Pos+1)
  3368  000EE4  6EF7               	movwf	tblptrh,c
  3369  000EE6                     	if	0	;tblptru may be non-zero
  3370  000EE6                     	endif
  3371  000EE6                     	if	0	;tblptru may be non-zero
  3372  000EE6                     	endif
  3373  000EE6  0008               	tblrd		*
  3374  000EE8  FFFF               	dw	65535	; errata NOP
  3375  000EEA  CFF5 F04D          	movff	tablat,_posVector+1
  3376                           
  3377                           ;main.c: 129:             break;
  3378  000EEE  EFB9  F007         	goto	l4347
  3379  000EF2                     l4335:
  3380  000EF2  FFFF               	dw	65535	; assembler added errata NOP
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;main.c: 133:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3384  000EF4  C04C  F015         	movff	_posVector,moveToPoint@x1
  3385  000EF8  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3386  000EFA  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3387  000EFE  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3388  000F00  C055  F019         	movff	_newFeeder,moveToPoint@x2
  3389  000F04  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3390  000F06  C056  F01B         	movff	_newFeeder+1,moveToPoint@y2
  3391  000F0A  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3392  000F0C  EC22  F005         	call	_moveToPoint	;wreg free
  3393  000F10  0100               	movlb	0	; () banked
  3394  000F12  6FF1               	movwf	executeData@errCode& (0+255),b
  3395  000F14                     
  3396                           ; BSR set to: 0
  3397                           ;main.c: 134:             posVector[0] = newFeeder[0];
  3398  000F14  C055  F04C         	movff	_newFeeder,_posVector
  3399  000F18                     
  3400                           ; BSR set to: 0
  3401                           ;main.c: 135:             posVector[1] = newFeeder[1];
  3402  000F18  C056  F04D         	movff	_newFeeder+1,_posVector+1
  3403                           
  3404                           ;main.c: 136:             break;
  3405  000F1C  EFB9  F007         	goto	l4347
  3406  000F20                     l4341:
  3407  000F20  FFFF               	dw	65535	; assembler added errata NOP
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;main.c: 140:             errCode = 1;
  3411  000F22  0E01               	movlw	1
  3412  000F24  6FF1               	movwf	executeData@errCode& (0+255),b
  3413                           
  3414                           ;main.c: 141:             break;
  3415  000F26  EFB9  F007         	goto	l4347
  3416  000F2A                     l4345:
  3417  000F2A  FFFF               	dw	65535	; assembler added errata NOP
  3418  000F2C  C0EF  FFD9         	movff	executeData@data,fsr2l
  3419  000F30  C0F0  FFDA         	movff	executeData@data+1,fsr2h
  3420  000F34  50DF               	movf	indf2,w,c
  3421  000F36  0100               	movlb	0	; () banked
  3422  000F38  6FED               	movwf	??_executeData& (0+255),b
  3423  000F3A  6BEE               	clrf	(??_executeData+1)& (0+255),b
  3424                           
  3425                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3426                           ; Switch size 1, requested type "simple"
  3427                           ; Number of cases is 1, Range of values is 0 to 0
  3428                           ; switch strategies available:
  3429                           ; Name         Instructions Cycles
  3430                           ; simple_byte            4     3 (average)
  3431                           ;	Chosen strategy is simple_byte
  3432  000F3C  51EE               	movf	(??_executeData+1)& (0+255),w,b
  3433  000F3E  0A00               	xorlw	0	; case 0
  3434  000F40  B4D8               	btfsc	status,2,c
  3435  000F42  EFA5  F007         	goto	l4631
  3436  000F46  EF90  F007         	goto	l4341
  3437  000F4A                     l4631:
  3438  000F4A  FFFF               	dw	65535	; assembler added errata NOP
  3439                           
  3440                           ; BSR set to: 0
  3441                           ; Switch size 1, requested type "simple"
  3442                           ; Number of cases is 4, Range of values is 0 to 255
  3443                           ; switch strategies available:
  3444                           ; Name         Instructions Cycles
  3445                           ; simple_byte           13     7 (average)
  3446                           ;	Chosen strategy is simple_byte
  3447  000F4C  51ED               	movf	??_executeData& (0+255),w,b
  3448  000F4E  0A00               	xorlw	0	; case 0
  3449  000F50  B4D8               	btfsc	status,2,c
  3450  000F52  EFEC  F006         	goto	l4317
  3451  000F56  0A01               	xorlw	1	; case 1
  3452  000F58  B4D8               	btfsc	status,2,c
  3453  000F5A  EF1B  F007         	goto	l4323
  3454  000F5E  0A03               	xorlw	3	; case 2
  3455  000F60  B4D8               	btfsc	status,2,c
  3456  000F62  EF4A  F007         	goto	l4329
  3457  000F66  0AFD               	xorlw	253	; case 255
  3458  000F68  B4D8               	btfsc	status,2,c
  3459  000F6A  EF79  F007         	goto	l4335
  3460  000F6E  EF90  F007         	goto	l4341
  3461  000F72                     l4347:
  3462  000F72  FFFF               	dw	65535	; assembler added errata NOP
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;main.c: 145:     if(!errCode){
  3466  000F74  51F1               	movf	executeData@errCode& (0+255),w,b
  3467  000F76  A4D8               	btfss	status,2,c
  3468  000F78  EFC0  F007         	goto	u3751
  3469  000F7C  EFC3  F007         	goto	u3750
  3470  000F80                     u3751:
  3471  000F80  FFFF               	dw	65535	; assembler added errata NOP
  3472  000F82  EFD1  F007         	goto	l4353
  3473  000F86                     u3750:
  3474  000F86  FFFF               	dw	65535	; assembler added errata NOP
  3475  000F88                     
  3476                           ; BSR set to: 0
  3477                           ;main.c: 148:         errCode = touchObject();
  3478  000F88  ECDB  F00E         	call	_touchObject	;wreg free
  3479  000F8C  0100               	movlb	0	; () banked
  3480  000F8E  6FF1               	movwf	executeData@errCode& (0+255),b
  3481  000F90                     
  3482                           ; BSR set to: 0
  3483                           ;main.c: 149:         if(errCode != 0){
  3484  000F90  51F1               	movf	executeData@errCode& (0+255),w,b
  3485  000F92  B4D8               	btfsc	status,2,c
  3486  000F94  EFCE  F007         	goto	u3761
  3487  000F98  EFD1  F007         	goto	u3760
  3488  000F9C                     u3761:
  3489  000F9C  FFFF               	dw	65535	; assembler added errata NOP
  3490  000F9E  EFD5  F007         	goto	l4357
  3491  000FA2                     u3760:
  3492  000FA2                     l4353:
  3493  000FA2  FFFF               	dw	65535	; assembler added errata NOP
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;main.c: 150:             return(errCode);
  3497  000FA4  51F1               	movf	executeData@errCode& (0+255),w,b
  3498  000FA6  EF5B  F008         	goto	l364
  3499  000FAA                     l4357:
  3500  000FAA  FFFF               	dw	65535	; assembler added errata NOP
  3501                           
  3502                           ; BSR set to: 0
  3503                           ;main.c: 153:         pickObject();
  3504  000FAC  ECC8  F011         	call	_pickObject	;wreg free
  3505  000FB0                     
  3506                           ;main.c: 156:         errCode = liftArm();
  3507  000FB0  EC4D  F010         	call	_liftArm	;wreg free
  3508  000FB4  0100               	movlb	0	; () banked
  3509  000FB6  6FF1               	movwf	executeData@errCode& (0+255),b
  3510  000FB8                     
  3511                           ; BSR set to: 0
  3512                           ;main.c: 157:         if(errCode != 0){
  3513  000FB8  51F1               	movf	executeData@errCode& (0+255),w,b
  3514  000FBA  B4D8               	btfsc	status,2,c
  3515  000FBC  EFE2  F007         	goto	u3771
  3516  000FC0  EFE5  F007         	goto	u3770
  3517  000FC4                     u3771:
  3518  000FC4  FFFF               	dw	65535	; assembler added errata NOP
  3519  000FC6  EFE8  F007         	goto	l4367
  3520  000FCA                     u3770:
  3521  000FCA  FFFF               	dw	65535	; assembler added errata NOP
  3522  000FCC  EFD1  F007         	goto	l4353
  3523  000FD0                     l4367:
  3524  000FD0  FFFF               	dw	65535	; assembler added errata NOP
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;main.c: 162:         errCode = moveToPoint(posVector[0], posVector[1], data->posX, data
      +                          ->posY);
  3528  000FD2  C04C  F015         	movff	_posVector,moveToPoint@x1
  3529  000FD6  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3530  000FD8  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3531  000FDC  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3532  000FDE  EE20 F001          	lfsr	2,1
  3533  000FE2  51EF               	movf	executeData@data& (0+255),w,b
  3534  000FE4  26D9               	addwf	fsr2l,f,c
  3535  000FE6  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3536  000FE8  22DA               	addwfc	fsr2h,f,c
  3537  000FEA  50DF               	movf	indf2,w,c
  3538  000FEC  6FED               	movwf	??_executeData& (0+255),b
  3539  000FEE  51ED               	movf	??_executeData& (0+255),w,b
  3540  000FF0  6E19               	movwf	moveToPoint@x2^0,c
  3541  000FF2  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3542  000FF4  EE20 F002          	lfsr	2,2
  3543  000FF8  51EF               	movf	executeData@data& (0+255),w,b
  3544  000FFA  26D9               	addwf	fsr2l,f,c
  3545  000FFC  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3546  000FFE  22DA               	addwfc	fsr2h,f,c
  3547  001000  50DF               	movf	indf2,w,c
  3548  001002  6FEE               	movwf	(??_executeData+1)& (0+255),b
  3549  001004  51EE               	movf	(??_executeData+1)& (0+255),w,b
  3550  001006  6E1B               	movwf	moveToPoint@y2^0,c
  3551  001008  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3552  00100A  EC22  F005         	call	_moveToPoint	;wreg free
  3553  00100E  0100               	movlb	0	; () banked
  3554  001010  6FF1               	movwf	executeData@errCode& (0+255),b
  3555  001012                     
  3556                           ; BSR set to: 0
  3557                           ;main.c: 163:         if(errCode != 0){
  3558  001012  51F1               	movf	executeData@errCode& (0+255),w,b
  3559  001014  B4D8               	btfsc	status,2,c
  3560  001016  EF0F  F008         	goto	u3781
  3561  00101A  EF12  F008         	goto	u3780
  3562  00101E                     u3781:
  3563  00101E  FFFF               	dw	65535	; assembler added errata NOP
  3564  001020  EF15  F008         	goto	l4375
  3565  001024                     u3780:
  3566  001024  FFFF               	dw	65535	; assembler added errata NOP
  3567  001026  EFD1  F007         	goto	l4353
  3568  00102A                     l4375:
  3569  00102A  FFFF               	dw	65535	; assembler added errata NOP
  3570                           
  3571                           ; BSR set to: 0
  3572                           ;main.c: 166:         posVector[0] = data->posX;
  3573  00102C  EE20 F001          	lfsr	2,1
  3574  001030  51EF               	movf	executeData@data& (0+255),w,b
  3575  001032  26D9               	addwf	fsr2l,f,c
  3576  001034  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3577  001036  22DA               	addwfc	fsr2h,f,c
  3578  001038  50DF               	movf	indf2,w,c
  3579  00103A  6E4C               	movwf	_posVector^0,c
  3580                           
  3581                           ;main.c: 167:         posVector[1] = data->posY;
  3582  00103C  EE20 F002          	lfsr	2,2
  3583  001040  51EF               	movf	executeData@data& (0+255),w,b
  3584  001042  26D9               	addwf	fsr2l,f,c
  3585  001044  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3586  001046  22DA               	addwfc	fsr2h,f,c
  3587  001048  50DF               	movf	indf2,w,c
  3588  00104A  6E4D               	movwf	(_posVector+1)^0,c
  3589                           
  3590                           ;main.c: 170:         rotAngle = data->rotation;
  3591  00104C  EE20 F003          	lfsr	2,3
  3592  001050  51EF               	movf	executeData@data& (0+255),w,b
  3593  001052  26D9               	addwf	fsr2l,f,c
  3594  001054  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3595  001056  22DA               	addwfc	fsr2h,f,c
  3596  001058  50DF               	movf	indf2,w,c
  3597  00105A  6FED               	movwf	??_executeData& (0+255),b
  3598  00105C  51ED               	movf	??_executeData& (0+255),w,b
  3599  00105E  6E57               	movwf	_rotAngle^0,c
  3600  001060  6A58               	clrf	(_rotAngle+1)^0,c
  3601  001062                     
  3602                           ; BSR set to: 0
  3603                           ;main.c: 172:         if(rotAngle < 0){
  3604  001062  BE58               	btfsc	(_rotAngle+1)^0,7,c
  3605  001064  EF39  F008         	goto	u3790
  3606  001068  EF36  F008         	goto	u3791
  3607  00106C                     u3791:
  3608  00106C  FFFF               	dw	65535	; assembler added errata NOP
  3609  00106E  EF3E  F008         	goto	l4381
  3610  001072                     u3790:
  3611  001072  FFFF               	dw	65535	; assembler added errata NOP
  3612  001074                     
  3613                           ; BSR set to: 0
  3614                           ;main.c: 173:             rotAngle += 360;
  3615  001074  0E68               	movlw	104
  3616  001076  2657               	addwf	_rotAngle^0,f,c
  3617  001078  0E01               	movlw	1
  3618  00107A  2258               	addwfc	(_rotAngle+1)^0,f,c
  3619  00107C                     l4381:
  3620  00107C  FFFF               	dw	65535	; assembler added errata NOP
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;main.c: 175:         rotateObj(rotAngle);
  3624  00107E  5057               	movf	_rotAngle^0,w,c
  3625  001080  ECE0  F00F         	call	_rotateObj
  3626  001084                     
  3627                           ;main.c: 178:         errCode = touchTherm();
  3628  001084  EC52  F00E         	call	_touchTherm	;wreg free
  3629  001088  0100               	movlb	0	; () banked
  3630  00108A  6FF1               	movwf	executeData@errCode& (0+255),b
  3631  00108C                     
  3632                           ; BSR set to: 0
  3633                           ;main.c: 179:         if(errCode != 0){
  3634  00108C  51F1               	movf	executeData@errCode& (0+255),w,b
  3635  00108E  B4D8               	btfsc	status,2,c
  3636  001090  EF4C  F008         	goto	u3801
  3637  001094  EF4F  F008         	goto	u3800
  3638  001098                     u3801:
  3639  001098  FFFF               	dw	65535	; assembler added errata NOP
  3640  00109A  EF52  F008         	goto	l4391
  3641  00109E                     u3800:
  3642  00109E  FFFF               	dw	65535	; assembler added errata NOP
  3643  0010A0  EFD1  F007         	goto	l4353
  3644  0010A4                     l4391:
  3645  0010A4  FFFF               	dw	65535	; assembler added errata NOP
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;main.c: 183:         releaseObj();
  3649  0010A6  ECB0  F011         	call	_releaseObj	;wreg free
  3650  0010AA                     
  3651                           ;main.c: 186:         errCode = liftArm();
  3652  0010AA  EC4D  F010         	call	_liftArm	;wreg free
  3653  0010AE  0100               	movlb	0	; () banked
  3654  0010B0  6FF1               	movwf	executeData@errCode& (0+255),b
  3655  0010B2  EFD1  F007         	goto	l4353
  3656  0010B6                     l364:
  3657  0010B6  FFFF               	dw	65535	; assembler added errata NOP
  3658                           
  3659                           ; BSR set to: 0
  3660  0010B8  0012               	return		;funcret
  3661  0010BA  FFFF               	dw	65535	; errata NOP
  3662  0010BC                     __end_of_executeData:
  3663                           	callstack 0
  3664                           
  3665 ;; *************** function _touchTherm *****************
  3666 ;; Defined at:
  3667 ;;		line 603 in file "motors.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;		None
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;		None
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  1    wreg      unsigned char 
  3674 ;; Registers used:
  3675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3681 ;;      Params:         0       0       0       0       0       0       0
  3682 ;;      Locals:         0       0       0       0       0       0       0
  3683 ;;      Temps:          0       0       0       0       0       0       0
  3684 ;;      Totals:         0       0       0       0       0       0       0
  3685 ;;Total ram usage:        0 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; Hardware stack levels required when called:    5
  3688 ;; This function calls:
  3689 ;;		_resetStep
  3690 ;;		_resetTM0_Temp
  3691 ;;		_resetTM2_Temp
  3692 ;;		_resetTherm
  3693 ;;		_resetTouch
  3694 ;;		_returnTherm
  3695 ;;		_startADC
  3696 ;;		_stepMade
  3697 ;;		_stopADC
  3698 ;; This function is called by:
  3699 ;;		_executeData
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text19
  3704  001CA4                     __ptext19:
  3705                           	callstack 0
  3706  001CA4                     _touchTherm:
  3707                           	callstack 0
  3708  001CA4  FFFF               	dw	65535	; assembler added errata NOP
  3709  001CA6                     
  3710                           ;motors.c: 609:     motCounter[2][1] = 1;
  3711  001CA6  0E01               	movlw	1
  3712  001CA8  6E6C               	movwf	(_motCounter+5)^0,c
  3713  001CAA                     
  3714                           ;motors.c: 612:     T2CONbits.TMR2ON = 1;
  3715  001CAA  84CA               	bsf	202,2,c	;volatile
  3716                           
  3717                           ;motors.c: 614:     tm0Error = 0;
  3718  001CAC  0E00               	movlw	0
  3719  001CAE  6E5A               	movwf	(_tm0Error+1)^0,c
  3720  001CB0  0E00               	movlw	0
  3721  001CB2  6E59               	movwf	_tm0Error^0,c
  3722                           
  3723                           ;motors.c: 615:     tm0Limit = 200;
  3724  001CB4  0EC8               	movlw	200
  3725  001CB6  6E66               	movwf	_tm0Limit^0,c
  3726  001CB8                     
  3727                           ;motors.c: 616:     T0CONbits.TMR0ON = 1;
  3728  001CB8  8ED5               	bsf	213,7,c	;volatile
  3729  001CBA                     
  3730                           ;motors.c: 619:     startADC();
  3731  001CBA  EC84  F012         	call	_startADC	;wreg free
  3732                           
  3733                           ;motors.c: 622:     resetTouch();
  3734  001CBE  EC89  F012         	call	_resetTouch	;wreg free
  3735                           
  3736                           ;motors.c: 623:     resetTherm();
  3737  001CC2  EC8E  F012         	call	_resetTherm	;wreg free
  3738                           
  3739                           ;motors.c: 626:     while(!returnTherm() || PORTDbits.RD7){
  3740  001CC6  EFA3  F00E         	goto	l4009
  3741  001CCA                     l3993:
  3742  001CCA  FFFF               	dw	65535	; assembler added errata NOP
  3743                           
  3744                           ;motors.c: 628:         resetStep();
  3745  001CCC  EC98  F012         	call	_resetStep	;wreg free
  3746  001CD0                     
  3747                           ;motors.c: 631:         if(tm0Error){
  3748  001CD0  5059               	movf	_tm0Error^0,w,c
  3749  001CD2  105A               	iorwf	(_tm0Error+1)^0,w,c
  3750  001CD4  B4D8               	btfsc	status,2,c
  3751  001CD6  EF6F  F00E         	goto	u3441
  3752  001CDA  EF72  F00E         	goto	u3440
  3753  001CDE                     u3441:
  3754  001CDE  FFFF               	dw	65535	; assembler added errata NOP
  3755  001CE0  EF79  F00E         	goto	l3999
  3756  001CE4                     u3440:
  3757  001CE4  FFFF               	dw	65535	; assembler added errata NOP
  3758  001CE6                     
  3759                           ;motors.c: 636:             tm0Error = 6;
  3760  001CE6  0E00               	movlw	0
  3761  001CE8  6E5A               	movwf	(_tm0Error+1)^0,c
  3762  001CEA  0E06               	movlw	6
  3763  001CEC  6E59               	movwf	_tm0Error^0,c
  3764                           
  3765                           ;motors.c: 637:             break;
  3766  001CEE  EFB9  F00E         	goto	l4013
  3767  001CF2                     l3999:
  3768  001CF2  FFFF               	dw	65535	; assembler added errata NOP
  3769                           
  3770                           ;motors.c: 645:             motCounter[2][0] += motCounter[2][1];
  3771  001CF4  506C               	movf	(_motCounter+5)^0,w,c
  3772  001CF6  266B               	addwf	(_motCounter+4)^0,f,c
  3773                           
  3774                           ;motors.c: 646:             if(motCounter[2][0] > 3){
  3775  001CF8  506B               	movf	(_motCounter+4)^0,w,c
  3776  001CFA  0A80               	xorlw	128
  3777  001CFC  0F7C               	addlw	-132
  3778  001CFE  A0D8               	btfss	status,0,c
  3779  001D00  EF84  F00E         	goto	u3451
  3780  001D04  EF87  F00E         	goto	u3450
  3781  001D08                     u3451:
  3782  001D08  FFFF               	dw	65535	; assembler added errata NOP
  3783  001D0A  EF8A  F00E         	goto	l4003
  3784  001D0E                     u3450:
  3785  001D0E  FFFF               	dw	65535	; assembler added errata NOP
  3786  001D10                     
  3787                           ;motors.c: 647:                 motCounter[2][0] = 0;
  3788  001D10  0E00               	movlw	0
  3789  001D12  6E6B               	movwf	(_motCounter+4)^0,c
  3790  001D14                     l4003:
  3791  001D14  FFFF               	dw	65535	; assembler added errata NOP
  3792                           
  3793                           ;motors.c: 650:             LATC = stepMot3[motCounter[2][0]];
  3794  001D16  0E84               	movlw	low _stepMot3
  3795  001D18  246B               	addwf	(_motCounter+4)^0,w,c
  3796  001D1A  6ED9               	movwf	fsr2l,c
  3797  001D1C  6ADA               	clrf	fsr2h,c
  3798  001D1E  0E00               	movlw	high _stepMot3
  3799  001D20  22DA               	addwfc	fsr2h,f,c
  3800  001D22  50DF               	movf	indf2,w,c
  3801  001D24  6E8B               	movwf	139,c	;volatile
  3802  001D26                     l4005:
  3803  001D26  FFFF               	dw	65535	; assembler added errata NOP
  3804  001D28  EC15  F012         	call	_stepMade	;wreg free
  3805  001D2C  5012               	movf	?_stepMade^0,w,c
  3806  001D2E  1013               	iorwf	(?_stepMade+1)^0,w,c
  3807  001D30  B4D8               	btfsc	status,2,c
  3808  001D32  EF9D  F00E         	goto	u3461
  3809  001D36  EFA0  F00E         	goto	u3460
  3810  001D3A                     u3461:
  3811  001D3A  FFFF               	dw	65535	; assembler added errata NOP
  3812  001D3C  EF93  F00E         	goto	l4005
  3813  001D40                     u3460:
  3814  001D40  FFFF               	dw	65535	; assembler added errata NOP
  3815  001D42                     
  3816                           ;motors.c: 665:         startADC();
  3817  001D42  EC84  F012         	call	_startADC	;wreg free
  3818  001D46                     l4009:
  3819  001D46  FFFF               	dw	65535	; assembler added errata NOP
  3820                           
  3821                           ;motors.c: 626:     while(!returnTherm() || PORTDbits.RD7){
  3822  001D48  EC6D  F012         	call	_returnTherm	;wreg free
  3823  001D4C  5012               	movf	?_returnTherm^0,w,c
  3824  001D4E  1013               	iorwf	(?_returnTherm+1)^0,w,c
  3825  001D50  B4D8               	btfsc	status,2,c
  3826  001D52  EFAD  F00E         	goto	u3471
  3827  001D56  EFB0  F00E         	goto	u3470
  3828  001D5A                     u3471:
  3829  001D5A  FFFF               	dw	65535	; assembler added errata NOP
  3830  001D5C  EF65  F00E         	goto	l3993
  3831  001D60                     u3470:
  3832  001D60  FFFF               	dw	65535	; assembler added errata NOP
  3833  001D62  BE83               	btfsc	131,7,c	;volatile
  3834  001D64  EFB6  F00E         	goto	u3481
  3835  001D68  EFB9  F00E         	goto	u3480
  3836  001D6C                     u3481:
  3837  001D6C  FFFF               	dw	65535	; assembler added errata NOP
  3838  001D6E  EF65  F00E         	goto	l3993
  3839  001D72                     u3480:
  3840  001D72                     l4013:
  3841  001D72  FFFF               	dw	65535	; assembler added errata NOP
  3842                           
  3843                           ;motors.c: 671:     stopADC();
  3844  001D74  ECB8  F012         	call	_stopADC	;wreg free
  3845  001D78                     
  3846                           ;motors.c: 674:     T0CONbits.TMR0ON = 0;
  3847  001D78  9ED5               	bcf	213,7,c	;volatile
  3848  001D7A                     
  3849                           ;motors.c: 675:     T2CONbits.TMR2ON = 0;
  3850  001D7A  94CA               	bcf	202,2,c	;volatile
  3851  001D7C                     
  3852                           ;motors.c: 677:     resetTM0_Temp();
  3853  001D7C  EC93  F012         	call	_resetTM0_Temp	;wreg free
  3854  001D80                     
  3855                           ;motors.c: 678:     resetTM2_Temp();
  3856  001D80  EC31  F012         	call	_resetTM2_Temp	;wreg free
  3857  001D84                     
  3858                           ;motors.c: 680:     TMR0 = 0;
  3859  001D84  0E00               	movlw	0
  3860  001D86  6ED7               	movwf	215,c	;volatile
  3861  001D88  0E00               	movlw	0
  3862  001D8A  6ED6               	movwf	214,c	;volatile
  3863  001D8C                     
  3864                           ;motors.c: 681:     TMR2 = 0;
  3865  001D8C  0E00               	movlw	0
  3866  001D8E  6ECC               	movwf	204,c	;volatile
  3867  001D90                     
  3868                           ;motors.c: 684:     resetStep();
  3869  001D90  EC98  F012         	call	_resetStep	;wreg free
  3870  001D94                     
  3871                           ;motors.c: 687:     if(PORTDbits.RD7){
  3872  001D94  AE83               	btfss	131,7,c	;volatile
  3873  001D96  EFCF  F00E         	goto	u3491
  3874  001D9A  EFD2  F00E         	goto	u3490
  3875  001D9E                     u3491:
  3876  001D9E  FFFF               	dw	65535	; assembler added errata NOP
  3877  001DA0  EFD7  F00E         	goto	l217
  3878  001DA4                     u3490:
  3879  001DA4  FFFF               	dw	65535	; assembler added errata NOP
  3880  001DA6                     
  3881                           ;motors.c: 688:         tm0Error = 2;
  3882  001DA6  0E00               	movlw	0
  3883  001DA8  6E5A               	movwf	(_tm0Error+1)^0,c
  3884  001DAA  0E02               	movlw	2
  3885  001DAC  6E59               	movwf	_tm0Error^0,c
  3886  001DAE                     l217:
  3887  001DAE  FFFF               	dw	65535	; assembler added errata NOP
  3888                           
  3889                           ;motors.c: 691:     return(tm0Error);
  3890  001DB0  5059               	movf	_tm0Error^0,w,c
  3891  001DB2  0012               	return		;funcret
  3892  001DB4  FFFF               	dw	65535	; errata NOP
  3893  001DB6                     __end_of_touchTherm:
  3894                           	callstack 0
  3895                           
  3896 ;; *************** function _returnTherm *****************
  3897 ;; Defined at:
  3898 ;;		line 58 in file "adc.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;		None
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;		None
  3903 ;; Return value:  Size  Location     Type
  3904 ;;                  2   17[COMRAM] unsigned int 
  3905 ;; Registers used:
  3906 ;;		None
  3907 ;; Tracked objects:
  3908 ;;		On entry : 0/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3912 ;;      Params:         2       0       0       0       0       0       0
  3913 ;;      Locals:         0       0       0       0       0       0       0
  3914 ;;      Temps:          0       0       0       0       0       0       0
  3915 ;;      Totals:         2       0       0       0       0       0       0
  3916 ;;Total ram usage:        2 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; Hardware stack levels required when called:    4
  3919 ;; This function calls:
  3920 ;;		Nothing
  3921 ;; This function is called by:
  3922 ;;		_touchTherm
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           	psect	text20
  3927  0024DA                     __ptext20:
  3928                           	callstack 0
  3929  0024DA                     _returnTherm:
  3930                           	callstack 0
  3931  0024DA  FFFF               	dw	65535	; assembler added errata NOP
  3932  0024DC                     
  3933                           ;adc.c: 59:     return therm_rel;
  3934  0024DC  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  3935  0024E0  6A13               	clrf	(?_returnTherm+1)^0,c
  3936  0024E2  0012               	return		;funcret
  3937  0024E4  FFFF               	dw	65535	; errata NOP
  3938  0024E6                     __end_of_returnTherm:
  3939                           	callstack 0
  3940                           
  3941 ;; *************** function _touchObject *****************
  3942 ;; Defined at:
  3943 ;;		line 505 in file "motors.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;		None
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;		None
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  1    wreg      unsigned char 
  3950 ;; Registers used:
  3951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3957 ;;      Params:         0       0       0       0       0       0       0
  3958 ;;      Locals:         0       0       0       0       0       0       0
  3959 ;;      Temps:          0       0       0       0       0       0       0
  3960 ;;      Totals:         0       0       0       0       0       0       0
  3961 ;;Total ram usage:        0 bytes
  3962 ;; Hardware stack levels used:    1
  3963 ;; Hardware stack levels required when called:    5
  3964 ;; This function calls:
  3965 ;;		_resetStep
  3966 ;;		_resetTM0_Temp
  3967 ;;		_resetTM2_Temp
  3968 ;;		_resetTherm
  3969 ;;		_resetTouch
  3970 ;;		_returnTouch
  3971 ;;		_startADC
  3972 ;;		_stepMade
  3973 ;;		_stopADC
  3974 ;; This function is called by:
  3975 ;;		_executeData
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text21
  3980  001DB6                     __ptext21:
  3981                           	callstack 0
  3982  001DB6                     _touchObject:
  3983                           	callstack 0
  3984  001DB6  FFFF               	dw	65535	; assembler added errata NOP
  3985  001DB8                     
  3986                           ;motors.c: 511:     motCounter[2][1] = 1;
  3987  001DB8  0E01               	movlw	1
  3988  001DBA  6E6C               	movwf	(_motCounter+5)^0,c
  3989  001DBC                     
  3990                           ;motors.c: 514:     T2CONbits.TMR2ON = 1;
  3991  001DBC  84CA               	bsf	202,2,c	;volatile
  3992                           
  3993                           ;motors.c: 516:     tm0Error = 0;
  3994  001DBE  0E00               	movlw	0
  3995  001DC0  6E5A               	movwf	(_tm0Error+1)^0,c
  3996  001DC2  0E00               	movlw	0
  3997  001DC4  6E59               	movwf	_tm0Error^0,c
  3998                           
  3999                           ;motors.c: 517:     tm0Limit = 200;
  4000  001DC6  0EC8               	movlw	200
  4001  001DC8  6E66               	movwf	_tm0Limit^0,c
  4002  001DCA                     
  4003                           ;motors.c: 518:     T0CONbits.TMR0ON = 1;
  4004  001DCA  8ED5               	bsf	213,7,c	;volatile
  4005  001DCC                     
  4006                           ;motors.c: 521:     startADC();
  4007  001DCC  EC84  F012         	call	_startADC	;wreg free
  4008                           
  4009                           ;motors.c: 524:     resetTouch();
  4010  001DD0  EC89  F012         	call	_resetTouch	;wreg free
  4011                           
  4012                           ;motors.c: 525:     resetTherm();
  4013  001DD4  EC8E  F012         	call	_resetTherm	;wreg free
  4014                           
  4015                           ;motors.c: 528:     while(!returnTouch() || PORTDbits.RD7){
  4016  001DD8  EF2C  F00F         	goto	l3959
  4017  001DDC                     l3943:
  4018  001DDC  FFFF               	dw	65535	; assembler added errata NOP
  4019                           
  4020                           ;motors.c: 530:         resetStep();
  4021  001DDE  EC98  F012         	call	_resetStep	;wreg free
  4022  001DE2                     
  4023                           ;motors.c: 533:         if(tm0Error){
  4024  001DE2  5059               	movf	_tm0Error^0,w,c
  4025  001DE4  105A               	iorwf	(_tm0Error+1)^0,w,c
  4026  001DE6  B4D8               	btfsc	status,2,c
  4027  001DE8  EFF8  F00E         	goto	u3381
  4028  001DEC  EFFB  F00E         	goto	u3380
  4029  001DF0                     u3381:
  4030  001DF0  FFFF               	dw	65535	; assembler added errata NOP
  4031  001DF2  EF02  F00F         	goto	l3949
  4032  001DF6                     u3380:
  4033  001DF6  FFFF               	dw	65535	; assembler added errata NOP
  4034  001DF8                     
  4035                           ;motors.c: 538:             tm0Error = 6;
  4036  001DF8  0E00               	movlw	0
  4037  001DFA  6E5A               	movwf	(_tm0Error+1)^0,c
  4038  001DFC  0E06               	movlw	6
  4039  001DFE  6E59               	movwf	_tm0Error^0,c
  4040                           
  4041                           ;motors.c: 539:             break;
  4042  001E00  EF42  F00F         	goto	l3963
  4043  001E04                     l3949:
  4044  001E04  FFFF               	dw	65535	; assembler added errata NOP
  4045                           
  4046                           ;motors.c: 547:             motCounter[2][0] += motCounter[2][1];
  4047  001E06  506C               	movf	(_motCounter+5)^0,w,c
  4048  001E08  266B               	addwf	(_motCounter+4)^0,f,c
  4049                           
  4050                           ;motors.c: 548:             if(motCounter[2][0] > 3){
  4051  001E0A  506B               	movf	(_motCounter+4)^0,w,c
  4052  001E0C  0A80               	xorlw	128
  4053  001E0E  0F7C               	addlw	-132
  4054  001E10  A0D8               	btfss	status,0,c
  4055  001E12  EF0D  F00F         	goto	u3391
  4056  001E16  EF10  F00F         	goto	u3390
  4057  001E1A                     u3391:
  4058  001E1A  FFFF               	dw	65535	; assembler added errata NOP
  4059  001E1C  EF13  F00F         	goto	l3953
  4060  001E20                     u3390:
  4061  001E20  FFFF               	dw	65535	; assembler added errata NOP
  4062  001E22                     
  4063                           ;motors.c: 549:                 motCounter[2][0] = 0;
  4064  001E22  0E00               	movlw	0
  4065  001E24  6E6B               	movwf	(_motCounter+4)^0,c
  4066  001E26                     l3953:
  4067  001E26  FFFF               	dw	65535	; assembler added errata NOP
  4068                           
  4069                           ;motors.c: 552:             LATC = stepMot3[motCounter[2][0]];
  4070  001E28  0E84               	movlw	low _stepMot3
  4071  001E2A  246B               	addwf	(_motCounter+4)^0,w,c
  4072  001E2C  6ED9               	movwf	fsr2l,c
  4073  001E2E  6ADA               	clrf	fsr2h,c
  4074  001E30  0E00               	movlw	high _stepMot3
  4075  001E32  22DA               	addwfc	fsr2h,f,c
  4076  001E34  50DF               	movf	indf2,w,c
  4077  001E36  6E8B               	movwf	139,c	;volatile
  4078  001E38                     l3955:
  4079  001E38  FFFF               	dw	65535	; assembler added errata NOP
  4080  001E3A  EC15  F012         	call	_stepMade	;wreg free
  4081  001E3E  5012               	movf	?_stepMade^0,w,c
  4082  001E40  1013               	iorwf	(?_stepMade+1)^0,w,c
  4083  001E42  B4D8               	btfsc	status,2,c
  4084  001E44  EF26  F00F         	goto	u3401
  4085  001E48  EF29  F00F         	goto	u3400
  4086  001E4C                     u3401:
  4087  001E4C  FFFF               	dw	65535	; assembler added errata NOP
  4088  001E4E  EF1C  F00F         	goto	l3955
  4089  001E52                     u3400:
  4090  001E52  FFFF               	dw	65535	; assembler added errata NOP
  4091  001E54                     
  4092                           ;motors.c: 566:         startADC();
  4093  001E54  EC84  F012         	call	_startADC	;wreg free
  4094  001E58                     l3959:
  4095  001E58  FFFF               	dw	65535	; assembler added errata NOP
  4096                           
  4097                           ;motors.c: 528:     while(!returnTouch() || PORTDbits.RD7){
  4098  001E5A  EC73  F012         	call	_returnTouch	;wreg free
  4099  001E5E  5012               	movf	?_returnTouch^0,w,c
  4100  001E60  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4101  001E62  B4D8               	btfsc	status,2,c
  4102  001E64  EF36  F00F         	goto	u3411
  4103  001E68  EF39  F00F         	goto	u3410
  4104  001E6C                     u3411:
  4105  001E6C  FFFF               	dw	65535	; assembler added errata NOP
  4106  001E6E  EFEE  F00E         	goto	l3943
  4107  001E72                     u3410:
  4108  001E72  FFFF               	dw	65535	; assembler added errata NOP
  4109  001E74  BE83               	btfsc	131,7,c	;volatile
  4110  001E76  EF3F  F00F         	goto	u3421
  4111  001E7A  EF42  F00F         	goto	u3420
  4112  001E7E                     u3421:
  4113  001E7E  FFFF               	dw	65535	; assembler added errata NOP
  4114  001E80  EFEE  F00E         	goto	l3943
  4115  001E84                     u3420:
  4116  001E84                     l3963:
  4117  001E84  FFFF               	dw	65535	; assembler added errata NOP
  4118                           
  4119                           ;motors.c: 571:     stopADC();
  4120  001E86  ECB8  F012         	call	_stopADC	;wreg free
  4121  001E8A                     
  4122                           ;motors.c: 574:     T0CONbits.TMR0ON = 0;
  4123  001E8A  9ED5               	bcf	213,7,c	;volatile
  4124  001E8C                     
  4125                           ;motors.c: 575:     T2CONbits.TMR2ON = 0;
  4126  001E8C  94CA               	bcf	202,2,c	;volatile
  4127  001E8E                     
  4128                           ;motors.c: 577:     resetTM0_Temp();
  4129  001E8E  EC93  F012         	call	_resetTM0_Temp	;wreg free
  4130  001E92                     
  4131                           ;motors.c: 578:     resetTM2_Temp();
  4132  001E92  EC31  F012         	call	_resetTM2_Temp	;wreg free
  4133  001E96                     
  4134                           ;motors.c: 580:     TMR0 = 0;
  4135  001E96  0E00               	movlw	0
  4136  001E98  6ED7               	movwf	215,c	;volatile
  4137  001E9A  0E00               	movlw	0
  4138  001E9C  6ED6               	movwf	214,c	;volatile
  4139  001E9E                     
  4140                           ;motors.c: 581:     TMR2 = 0;
  4141  001E9E  0E00               	movlw	0
  4142  001EA0  6ECC               	movwf	204,c	;volatile
  4143  001EA2                     
  4144                           ;motors.c: 584:     resetStep();
  4145  001EA2  EC98  F012         	call	_resetStep	;wreg free
  4146  001EA6                     
  4147                           ;motors.c: 587:     if(PORTDbits.RD7){
  4148  001EA6  AE83               	btfss	131,7,c	;volatile
  4149  001EA8  EF58  F00F         	goto	u3431
  4150  001EAC  EF5B  F00F         	goto	u3430
  4151  001EB0                     u3431:
  4152  001EB0  FFFF               	dw	65535	; assembler added errata NOP
  4153  001EB2  EF60  F00F         	goto	l205
  4154  001EB6                     u3430:
  4155  001EB6  FFFF               	dw	65535	; assembler added errata NOP
  4156  001EB8                     
  4157                           ;motors.c: 588:         tm0Error = 2;
  4158  001EB8  0E00               	movlw	0
  4159  001EBA  6E5A               	movwf	(_tm0Error+1)^0,c
  4160  001EBC  0E02               	movlw	2
  4161  001EBE  6E59               	movwf	_tm0Error^0,c
  4162  001EC0                     l205:
  4163  001EC0  FFFF               	dw	65535	; assembler added errata NOP
  4164                           
  4165                           ;motors.c: 591:     return(tm0Error);
  4166  001EC2  5059               	movf	_tm0Error^0,w,c
  4167  001EC4  0012               	return		;funcret
  4168  001EC6  FFFF               	dw	65535	; errata NOP
  4169  001EC8                     __end_of_touchObject:
  4170                           	callstack 0
  4171                           
  4172 ;; *************** function _stopADC *****************
  4173 ;; Defined at:
  4174 ;;		line 44 in file "adc.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;		None
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;		None
  4179 ;; Return value:  Size  Location     Type
  4180 ;;                  1    wreg      void 
  4181 ;; Registers used:
  4182 ;;		None
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4188 ;;      Params:         0       0       0       0       0       0       0
  4189 ;;      Locals:         0       0       0       0       0       0       0
  4190 ;;      Temps:          0       0       0       0       0       0       0
  4191 ;;      Totals:         0       0       0       0       0       0       0
  4192 ;;Total ram usage:        0 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:    4
  4195 ;; This function calls:
  4196 ;;		Nothing
  4197 ;; This function is called by:
  4198 ;;		_touchObject
  4199 ;;		_touchTherm
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           	psect	text22
  4204  002570                     __ptext22:
  4205                           	callstack 0
  4206  002570                     _stopADC:
  4207                           	callstack 0
  4208  002570  FFFF               	dw	65535	; assembler added errata NOP
  4209  002572                     
  4210                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4211  002572  90C2               	bcf	194,0,c	;volatile
  4212  002574  0012               	return		;funcret
  4213  002576  FFFF               	dw	65535	; errata NOP
  4214  002578                     __end_of_stopADC:
  4215                           	callstack 0
  4216                           
  4217 ;; *************** function _startADC *****************
  4218 ;; Defined at:
  4219 ;;		line 36 in file "adc.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;		None
  4222 ;; Auto vars:     Size  Location     Type
  4223 ;;		None
  4224 ;; Return value:  Size  Location     Type
  4225 ;;                  1    wreg      void 
  4226 ;; Registers used:
  4227 ;;		None
  4228 ;; Tracked objects:
  4229 ;;		On entry : 0/0
  4230 ;;		On exit  : 0/0
  4231 ;;		Unchanged: 0/0
  4232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4233 ;;      Params:         0       0       0       0       0       0       0
  4234 ;;      Locals:         0       0       0       0       0       0       0
  4235 ;;      Temps:          0       0       0       0       0       0       0
  4236 ;;      Totals:         0       0       0       0       0       0       0
  4237 ;;Total ram usage:        0 bytes
  4238 ;; Hardware stack levels used:    1
  4239 ;; Hardware stack levels required when called:    4
  4240 ;; This function calls:
  4241 ;;		Nothing
  4242 ;; This function is called by:
  4243 ;;		_touchObject
  4244 ;;		_touchTherm
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           	psect	text23
  4249  002508                     __ptext23:
  4250                           	callstack 0
  4251  002508                     _startADC:
  4252                           	callstack 0
  4253  002508  FFFF               	dw	65535	; assembler added errata NOP
  4254  00250A                     
  4255                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4256  00250A  80C2               	bsf	194,0,c	;volatile
  4257                           
  4258                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4259  00250C  84C2               	bsf	194,2,c	;volatile
  4260  00250E  0012               	return		;funcret
  4261  002510  FFFF               	dw	65535	; errata NOP
  4262  002512                     __end_of_startADC:
  4263                           	callstack 0
  4264                           
  4265 ;; *************** function _returnTouch *****************
  4266 ;; Defined at:
  4267 ;;		line 51 in file "adc.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;		None
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;		None
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  2   17[COMRAM] unsigned int 
  4274 ;; Registers used:
  4275 ;;		None
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4281 ;;      Params:         2       0       0       0       0       0       0
  4282 ;;      Locals:         0       0       0       0       0       0       0
  4283 ;;      Temps:          0       0       0       0       0       0       0
  4284 ;;      Totals:         2       0       0       0       0       0       0
  4285 ;;Total ram usage:        2 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:    4
  4288 ;; This function calls:
  4289 ;;		Nothing
  4290 ;; This function is called by:
  4291 ;;		_touchObject
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           	psect	text24
  4296  0024E6                     __ptext24:
  4297                           	callstack 0
  4298  0024E6                     _returnTouch:
  4299                           	callstack 0
  4300  0024E6  FFFF               	dw	65535	; assembler added errata NOP
  4301  0024E8                     
  4302                           ;adc.c: 52:     return touch_rel;
  4303  0024E8  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4304  0024EC  6A13               	clrf	(?_returnTouch+1)^0,c
  4305  0024EE  0012               	return		;funcret
  4306  0024F0  FFFF               	dw	65535	; errata NOP
  4307  0024F2                     __end_of_returnTouch:
  4308                           	callstack 0
  4309                           
  4310 ;; *************** function _resetTouch *****************
  4311 ;; Defined at:
  4312 ;;		line 65 in file "adc.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;		None
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;		None
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  1    wreg      void 
  4319 ;; Registers used:
  4320 ;;		wreg, status,2
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4326 ;;      Params:         0       0       0       0       0       0       0
  4327 ;;      Locals:         0       0       0       0       0       0       0
  4328 ;;      Temps:          0       0       0       0       0       0       0
  4329 ;;      Totals:         0       0       0       0       0       0       0
  4330 ;;Total ram usage:        0 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; Hardware stack levels required when called:    4
  4333 ;; This function calls:
  4334 ;;		Nothing
  4335 ;; This function is called by:
  4336 ;;		_touchObject
  4337 ;;		_touchTherm
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           	psect	text25
  4342  002512                     __ptext25:
  4343                           	callstack 0
  4344  002512                     _resetTouch:
  4345                           	callstack 0
  4346  002512  FFFF               	dw	65535	; assembler added errata NOP
  4347  002514                     
  4348                           ;adc.c: 66:     touch_rel = 0;
  4349  002514  0E00               	movlw	0
  4350  002516  6E65               	movwf	_touch_rel^0,c	;volatile
  4351  002518  0012               	return		;funcret
  4352  00251A  FFFF               	dw	65535	; errata NOP
  4353  00251C                     __end_of_resetTouch:
  4354                           	callstack 0
  4355                           
  4356 ;; *************** function _resetTherm *****************
  4357 ;; Defined at:
  4358 ;;		line 72 in file "adc.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;		None
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;		None
  4363 ;; Return value:  Size  Location     Type
  4364 ;;                  1    wreg      void 
  4365 ;; Registers used:
  4366 ;;		wreg, status,2
  4367 ;; Tracked objects:
  4368 ;;		On entry : 0/0
  4369 ;;		On exit  : 0/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4372 ;;      Params:         0       0       0       0       0       0       0
  4373 ;;      Locals:         0       0       0       0       0       0       0
  4374 ;;      Temps:          0       0       0       0       0       0       0
  4375 ;;      Totals:         0       0       0       0       0       0       0
  4376 ;;Total ram usage:        0 bytes
  4377 ;; Hardware stack levels used:    1
  4378 ;; Hardware stack levels required when called:    4
  4379 ;; This function calls:
  4380 ;;		Nothing
  4381 ;; This function is called by:
  4382 ;;		_touchObject
  4383 ;;		_touchTherm
  4384 ;; This function uses a non-reentrant model
  4385 ;;
  4386                           
  4387                           	psect	text26
  4388  00251C                     __ptext26:
  4389                           	callstack 0
  4390  00251C                     _resetTherm:
  4391                           	callstack 0
  4392  00251C  FFFF               	dw	65535	; assembler added errata NOP
  4393  00251E                     
  4394                           ;adc.c: 73:     therm_rel = 0;
  4395  00251E  0E00               	movlw	0
  4396  002520  6E64               	movwf	_therm_rel^0,c	;volatile
  4397  002522  0012               	return		;funcret
  4398  002524  FFFF               	dw	65535	; errata NOP
  4399  002526                     __end_of_resetTherm:
  4400                           	callstack 0
  4401                           
  4402 ;; *************** function _rotateObj *****************
  4403 ;; Defined at:
  4404 ;;		line 776 in file "motors.c"
  4405 ;; Parameters:    Size  Location     Type
  4406 ;;  rotAngle        1    wreg     unsigned char 
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;  rotAngle        1    2[BANK0 ] unsigned char 
  4409 ;;  i               2    5[BANK0 ] unsigned int 
  4410 ;;  totStep         2    3[BANK0 ] int 
  4411 ;; Return value:  Size  Location     Type
  4412 ;;                  1    wreg      void 
  4413 ;; Registers used:
  4414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4415 ;; Tracked objects:
  4416 ;;		On entry : 0/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4420 ;;      Params:         0       0       0       0       0       0       0
  4421 ;;      Locals:         0       5       0       0       0       0       0
  4422 ;;      Temps:          0       2       0       0       0       0       0
  4423 ;;      Totals:         0       7       0       0       0       0       0
  4424 ;;Total ram usage:        7 bytes
  4425 ;; Hardware stack levels used:    1
  4426 ;; Hardware stack levels required when called:    5
  4427 ;; This function calls:
  4428 ;;		___fldiv
  4429 ;;		___fltol
  4430 ;;		___xxtofl
  4431 ;;		_resetStep
  4432 ;;		_resetTM2_Temp
  4433 ;;		_stepMade
  4434 ;; This function is called by:
  4435 ;;		_executeData
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           	psect	text27
  4440  001FC0                     __ptext27:
  4441                           	callstack 0
  4442  001FC0                     _rotateObj:
  4443                           	callstack 0
  4444  001FC0  FFFF               	dw	65535	; assembler added errata NOP
  4445                           
  4446                           ;incstack = 0
  4447                           ;rotateObj@rotAngle stored from wreg
  4448  001FC2  0100               	movlb	0	; () banked
  4449  001FC4  6FE8               	movwf	rotateObj@rotAngle& (0+255),b
  4450  001FC6                     
  4451                           ;motors.c: 778:     static const float stepAngle = 10;;motors.c: 779:     static char ro
      +                          tSequence[] = {0b100100, 0b001100, 0b011000, 0b110000};;motors.c: 780:     unsigned int 
      +                          i;;motors.c: 781:     int totStep = rotAngle/stepAngle;
  4452  001FC6  0E00               	movlw	0
  4453  001FC8  6E24               	movwf	___fldiv@a^0,c
  4454  001FCA  0E00               	movlw	0
  4455  001FCC  6E25               	movwf	(___fldiv@a+1)^0,c
  4456  001FCE  0E20               	movlw	32
  4457  001FD0  6E26               	movwf	(___fldiv@a+2)^0,c
  4458  001FD2  0E41               	movlw	65
  4459  001FD4  6E27               	movwf	(___fldiv@a+3)^0,c
  4460  001FD6  0100               	movlb	0	; () banked
  4461  001FD8  51E8               	movf	rotateObj@rotAngle& (0+255),w,b
  4462  001FDA  6E12               	movwf	___xxtofl@val^0,c
  4463  001FDC  6A13               	clrf	(___xxtofl@val+1)^0,c
  4464  001FDE  6A14               	clrf	(___xxtofl@val+2)^0,c
  4465  001FE0  6A15               	clrf	(___xxtofl@val+3)^0,c
  4466  001FE2  0E01               	movlw	1
  4467  001FE4  EC5E  F008         	call	___xxtofl
  4468  001FE8  C012  F020         	movff	?___xxtofl,___fldiv@b
  4469  001FEC  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4470  001FF0  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4471  001FF4  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4472  001FF8  EC09  F003         	call	___fldiv	;wreg free
  4473  001FFC  C020  F039         	movff	?___fldiv,___fltol@f1
  4474  002000  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4475  002004  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4476  002008  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4477  00200C  EC9B  F00C         	call	___fltol	;wreg free
  4478  002010  C039  F0E9         	movff	?___fltol,rotateObj@totStep
  4479  002014  C03A  F0EA         	movff	?___fltol+1,rotateObj@totStep+1
  4480  002018                     
  4481                           ;motors.c: 784:     for(i = 0; i < totStep; i++){
  4482  002018  0E00               	movlw	0
  4483  00201A  0100               	movlb	0	; () banked
  4484  00201C  6FEC               	movwf	(rotateObj@i+1)& (0+255),b
  4485  00201E  0E00               	movlw	0
  4486  002020  6FEB               	movwf	rotateObj@i& (0+255),b
  4487  002022  EF39  F010         	goto	l4081
  4488  002026                     l4069:
  4489  002026  FFFF               	dw	65535	; assembler added errata NOP
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;motors.c: 786:         LATD &= 0xC3;
  4493  002028  0EC3               	movlw	195
  4494  00202A  168C               	andwf	140,f,c	;volatile
  4495  00202C                     
  4496                           ; BSR set to: 0
  4497                           ;motors.c: 788:         LATD |= rotSequence[i%4];
  4498  00202C  0E03               	movlw	3
  4499  00202E  15EB               	andwf	rotateObj@i& (0+255),w,b
  4500  002030  6FE6               	movwf	??_rotateObj& (0+255),b
  4501  002032  0E00               	movlw	0
  4502  002034  15EC               	andwf	(rotateObj@i+1)& (0+255),w,b
  4503  002036  6FE7               	movwf	(??_rotateObj+1)& (0+255),b
  4504  002038  0E80               	movlw	low rotateObj@rotSequence
  4505  00203A  25E6               	addwf	??_rotateObj& (0+255),w,b
  4506  00203C  6ED9               	movwf	fsr2l,c
  4507  00203E  0E00               	movlw	high rotateObj@rotSequence
  4508  002040  21E7               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4509  002042  6EDA               	movwf	fsr2h,c
  4510  002044  50DF               	movf	indf2,w,c
  4511  002046  128C               	iorwf	140,f,c	;volatile
  4512  002048                     
  4513                           ; BSR set to: 0
  4514                           ;motors.c: 791:         T2CONbits.TMR2ON = 1;
  4515  002048  84CA               	bsf	202,2,c	;volatile
  4516  00204A                     l4075:
  4517  00204A  FFFF               	dw	65535	; assembler added errata NOP
  4518  00204C  EC15  F012         	call	_stepMade	;wreg free
  4519  002050  5012               	movf	?_stepMade^0,w,c
  4520  002052  1013               	iorwf	(?_stepMade+1)^0,w,c
  4521  002054  B4D8               	btfsc	status,2,c
  4522  002056  EF2F  F010         	goto	u3541
  4523  00205A  EF32  F010         	goto	u3540
  4524  00205E                     u3541:
  4525  00205E  FFFF               	dw	65535	; assembler added errata NOP
  4526  002060  EF25  F010         	goto	l4075
  4527  002064                     u3540:
  4528  002064  FFFF               	dw	65535	; assembler added errata NOP
  4529  002066                     
  4530                           ;motors.c: 793:         T2CONbits.TMR2ON = 0;
  4531  002066  94CA               	bcf	202,2,c	;volatile
  4532  002068                     
  4533                           ;motors.c: 794:         TMR2 = 0;
  4534  002068  0E00               	movlw	0
  4535  00206A  6ECC               	movwf	204,c	;volatile
  4536  00206C                     
  4537                           ;motors.c: 795:     }
  4538  00206C  0100               	movlb	0	; () banked
  4539  00206E  4BEB               	infsnz	rotateObj@i& (0+255),f,b
  4540  002070  2BEC               	incf	(rotateObj@i+1)& (0+255),f,b
  4541  002072                     l4081:
  4542  002072  FFFF               	dw	65535	; assembler added errata NOP
  4543                           
  4544                           ; BSR set to: 0
  4545  002074  51E9               	movf	rotateObj@totStep& (0+255),w,b
  4546  002076  5DEB               	subwf	rotateObj@i& (0+255),w,b
  4547  002078  51EA               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4548  00207A  59EC               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4549  00207C  A0D8               	btfss	status,0,c
  4550  00207E  EF43  F010         	goto	u3551
  4551  002082  EF46  F010         	goto	u3550
  4552  002086                     u3551:
  4553  002086  FFFF               	dw	65535	; assembler added errata NOP
  4554  002088  EF13  F010         	goto	l4069
  4555  00208C                     u3550:
  4556  00208C  FFFF               	dw	65535	; assembler added errata NOP
  4557  00208E                     
  4558                           ; BSR set to: 0
  4559                           ;motors.c: 798:     resetTM2_Temp();
  4560  00208E  EC31  F012         	call	_resetTM2_Temp	;wreg free
  4561                           
  4562                           ;motors.c: 801:     resetStep();
  4563  002092  EC98  F012         	call	_resetStep	;wreg free
  4564  002096  0012               	return		;funcret
  4565  002098  FFFF               	dw	65535	; errata NOP
  4566  00209A                     __end_of_rotateObj:
  4567                           	callstack 0
  4568                           
  4569 ;; *************** function ___xxtofl *****************
  4570 ;; Defined at:
  4571 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4572 ;; Parameters:    Size  Location     Type
  4573 ;;  sign            1    wreg     unsigned char 
  4574 ;;  val             4   17[COMRAM] long 
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;  sign            1   25[COMRAM] unsigned char 
  4577 ;;  arg             4   27[COMRAM] unsigned long 
  4578 ;;  exp             1   26[COMRAM] unsigned char 
  4579 ;; Return value:  Size  Location     Type
  4580 ;;                  4   17[COMRAM] unsigned char 
  4581 ;; Registers used:
  4582 ;;		wreg, status,2, status,0
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4588 ;;      Params:         4       0       0       0       0       0       0
  4589 ;;      Locals:         6       0       0       0       0       0       0
  4590 ;;      Temps:          4       0       0       0       0       0       0
  4591 ;;      Totals:        14       0       0       0       0       0       0
  4592 ;;Total ram usage:       14 bytes
  4593 ;; Hardware stack levels used:    1
  4594 ;; Hardware stack levels required when called:    4
  4595 ;; This function calls:
  4596 ;;		Nothing
  4597 ;; This function is called by:
  4598 ;;		_rotateObj
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           	psect	text28
  4603  0010BC                     __ptext28:
  4604                           	callstack 0
  4605  0010BC                     ___xxtofl:
  4606                           	callstack 0
  4607  0010BC  FFFF               	dw	65535	; assembler added errata NOP
  4608                           
  4609                           ;incstack = 0
  4610                           ;___xxtofl@sign stored from wreg
  4611  0010BE  6E1A               	movwf	___xxtofl@sign^0,c
  4612  0010C0  501A               	movf	___xxtofl@sign^0,w,c
  4613  0010C2  B4D8               	btfsc	status,2,c
  4614  0010C4  EF66  F008         	goto	u3041
  4615  0010C8  EF69  F008         	goto	u3040
  4616  0010CC                     u3041:
  4617  0010CC  FFFF               	dw	65535	; assembler added errata NOP
  4618  0010CE  EF8E  F008         	goto	l1295
  4619  0010D2                     u3040:
  4620  0010D2  FFFF               	dw	65535	; assembler added errata NOP
  4621  0010D4  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4622  0010D6  EF72  F008         	goto	u3050
  4623  0010DA  EF6F  F008         	goto	u3051
  4624  0010DE                     u3051:
  4625  0010DE  FFFF               	dw	65535	; assembler added errata NOP
  4626  0010E0  EF8E  F008         	goto	l1295
  4627  0010E4                     u3050:
  4628  0010E4  FFFF               	dw	65535	; assembler added errata NOP
  4629  0010E6  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4630  0010EA  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4631  0010EE  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4632  0010F2  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4633  0010F6  1E16               	comf	??___xxtofl^0,f,c
  4634  0010F8  1E17               	comf	(??___xxtofl+1)^0,f,c
  4635  0010FA  1E18               	comf	(??___xxtofl+2)^0,f,c
  4636  0010FC  1E19               	comf	(??___xxtofl+3)^0,f,c
  4637  0010FE  2A16               	incf	??___xxtofl^0,f,c
  4638  001100  0E00               	movlw	0
  4639  001102  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4640  001104  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4641  001106  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4642  001108  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4643  00110C  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4644  001110  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4645  001114  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4646  001118  EF97  F008         	goto	l3795
  4647  00111C                     l1295:
  4648  00111C  FFFF               	dw	65535	; assembler added errata NOP
  4649  00111E  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4650  001122  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4651  001126  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4652  00112A  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4653  00112E                     l3795:
  4654  00112E  FFFF               	dw	65535	; assembler added errata NOP
  4655  001130  5012               	movf	___xxtofl@val^0,w,c
  4656  001132  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4657  001134  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4658  001136  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4659  001138  A4D8               	btfss	status,2,c
  4660  00113A  EFA1  F008         	goto	u3061
  4661  00113E  EFA4  F008         	goto	u3060
  4662  001142                     u3061:
  4663  001142  FFFF               	dw	65535	; assembler added errata NOP
  4664  001144  EFAF  F008         	goto	l3801
  4665  001148                     u3060:
  4666  001148  FFFF               	dw	65535	; assembler added errata NOP
  4667  00114A  0E00               	movlw	0
  4668  00114C  6E12               	movwf	?___xxtofl^0,c
  4669  00114E  0E00               	movlw	0
  4670  001150  6E13               	movwf	(?___xxtofl+1)^0,c
  4671  001152  0E00               	movlw	0
  4672  001154  6E14               	movwf	(?___xxtofl+2)^0,c
  4673  001156  0E00               	movlw	0
  4674  001158  6E15               	movwf	(?___xxtofl+3)^0,c
  4675  00115A  EF57  F009         	goto	l1298
  4676  00115E                     l3801:
  4677  00115E  FFFF               	dw	65535	; assembler added errata NOP
  4678  001160  0E96               	movlw	150
  4679  001162  6E1B               	movwf	___xxtofl@exp^0,c
  4680  001164  EFBB  F008         	goto	l3805
  4681  001168                     l3803:
  4682  001168  FFFF               	dw	65535	; assembler added errata NOP
  4683  00116A  2A1B               	incf	___xxtofl@exp^0,f,c
  4684  00116C  90D8               	bcf	status,0,c
  4685  00116E  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4686  001170  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4687  001172  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4688  001174  321C               	rrcf	___xxtofl@arg^0,f,c
  4689  001176                     l3805:
  4690  001176  FFFF               	dw	65535	; assembler added errata NOP
  4691  001178  0E00               	movlw	0
  4692  00117A  141C               	andwf	___xxtofl@arg^0,w,c
  4693  00117C  6E16               	movwf	??___xxtofl^0,c
  4694  00117E  0E00               	movlw	0
  4695  001180  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4696  001182  6E17               	movwf	(??___xxtofl+1)^0,c
  4697  001184  0E00               	movlw	0
  4698  001186  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4699  001188  6E18               	movwf	(??___xxtofl+2)^0,c
  4700  00118A  0EFE               	movlw	254
  4701  00118C  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4702  00118E  6E19               	movwf	(??___xxtofl+3)^0,c
  4703  001190  5016               	movf	??___xxtofl^0,w,c
  4704  001192  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4705  001194  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4706  001196  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4707  001198  A4D8               	btfss	status,2,c
  4708  00119A  EFD1  F008         	goto	u3071
  4709  00119E  EFD4  F008         	goto	u3070
  4710  0011A2                     u3071:
  4711  0011A2  FFFF               	dw	65535	; assembler added errata NOP
  4712  0011A4  EFB4  F008         	goto	l3803
  4713  0011A8                     u3070:
  4714  0011A8  FFFF               	dw	65535	; assembler added errata NOP
  4715  0011AA  EFE4  F008         	goto	l1302
  4716  0011AE                     l3807:
  4717  0011AE  FFFF               	dw	65535	; assembler added errata NOP
  4718  0011B0  2A1B               	incf	___xxtofl@exp^0,f,c
  4719  0011B2  0E01               	movlw	1
  4720  0011B4  261C               	addwf	___xxtofl@arg^0,f,c
  4721  0011B6  0E00               	movlw	0
  4722  0011B8  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4723  0011BA  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4724  0011BC  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4725  0011BE  90D8               	bcf	status,0,c
  4726  0011C0  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4727  0011C2  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4728  0011C4  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4729  0011C6  321C               	rrcf	___xxtofl@arg^0,f,c
  4730  0011C8                     l1302:
  4731  0011C8  FFFF               	dw	65535	; assembler added errata NOP
  4732  0011CA  0E00               	movlw	0
  4733  0011CC  141C               	andwf	___xxtofl@arg^0,w,c
  4734  0011CE  6E16               	movwf	??___xxtofl^0,c
  4735  0011D0  0E00               	movlw	0
  4736  0011D2  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4737  0011D4  6E17               	movwf	(??___xxtofl+1)^0,c
  4738  0011D6  0E00               	movlw	0
  4739  0011D8  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4740  0011DA  6E18               	movwf	(??___xxtofl+2)^0,c
  4741  0011DC  0EFF               	movlw	255
  4742  0011DE  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4743  0011E0  6E19               	movwf	(??___xxtofl+3)^0,c
  4744  0011E2  5016               	movf	??___xxtofl^0,w,c
  4745  0011E4  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4746  0011E6  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4747  0011E8  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4748  0011EA  A4D8               	btfss	status,2,c
  4749  0011EC  EFFA  F008         	goto	u3081
  4750  0011F0  EFFD  F008         	goto	u3080
  4751  0011F4                     u3081:
  4752  0011F4  FFFF               	dw	65535	; assembler added errata NOP
  4753  0011F6  EFD7  F008         	goto	l3807
  4754  0011FA                     u3080:
  4755  0011FA  FFFF               	dw	65535	; assembler added errata NOP
  4756  0011FC  EF07  F009         	goto	l3815
  4757  001200                     l3813:
  4758  001200  FFFF               	dw	65535	; assembler added errata NOP
  4759  001202  061B               	decf	___xxtofl@exp^0,f,c
  4760  001204  90D8               	bcf	status,0,c
  4761  001206  361C               	rlcf	___xxtofl@arg^0,f,c
  4762  001208  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4763  00120A  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4764  00120C  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4765  00120E                     l3815:
  4766  00120E  FFFF               	dw	65535	; assembler added errata NOP
  4767  001210  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4768  001212  EF0D  F009         	goto	u3091
  4769  001216  EF10  F009         	goto	u3090
  4770  00121A                     u3091:
  4771  00121A  FFFF               	dw	65535	; assembler added errata NOP
  4772  00121C  EF1A  F009         	goto	l1309
  4773  001220                     u3090:
  4774  001220  FFFF               	dw	65535	; assembler added errata NOP
  4775  001222  0E02               	movlw	2
  4776  001224  601B               	cpfslt	___xxtofl@exp^0,c
  4777  001226  EF17  F009         	goto	u3101
  4778  00122A  EF1A  F009         	goto	u3100
  4779  00122E                     u3101:
  4780  00122E  FFFF               	dw	65535	; assembler added errata NOP
  4781  001230  EF00  F009         	goto	l3813
  4782  001234                     u3100:
  4783  001234                     l1309:
  4784  001234  FFFF               	dw	65535	; assembler added errata NOP
  4785  001236  B01B               	btfsc	___xxtofl@exp^0,0,c
  4786  001238  EF20  F009         	goto	u3111
  4787  00123C  EF23  F009         	goto	u3110
  4788  001240                     u3111:
  4789  001240  FFFF               	dw	65535	; assembler added errata NOP
  4790  001242  EF25  F009         	goto	l3821
  4791  001246                     u3110:
  4792  001246  FFFF               	dw	65535	; assembler added errata NOP
  4793  001248  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4794  00124A                     l3821:
  4795  00124A  FFFF               	dw	65535	; assembler added errata NOP
  4796  00124C  90D8               	bcf	status,0,c
  4797  00124E  321B               	rrcf	___xxtofl@exp^0,f,c
  4798  001250  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4799  001254  6A17               	clrf	(??___xxtofl+1)^0,c
  4800  001256  6A18               	clrf	(??___xxtofl+2)^0,c
  4801  001258  6A19               	clrf	(??___xxtofl+3)^0,c
  4802  00125A  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4803  00125E  6A18               	clrf	(??___xxtofl+2)^0,c
  4804  001260  6A17               	clrf	(??___xxtofl+1)^0,c
  4805  001262  6A16               	clrf	??___xxtofl^0,c
  4806  001264  5016               	movf	??___xxtofl^0,w,c
  4807  001266  121C               	iorwf	___xxtofl@arg^0,f,c
  4808  001268  5017               	movf	(??___xxtofl+1)^0,w,c
  4809  00126A  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4810  00126C  5018               	movf	(??___xxtofl+2)^0,w,c
  4811  00126E  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4812  001270  5019               	movf	(??___xxtofl+3)^0,w,c
  4813  001272  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4814  001274  501A               	movf	___xxtofl@sign^0,w,c
  4815  001276  B4D8               	btfsc	status,2,c
  4816  001278  EF40  F009         	goto	u3121
  4817  00127C  EF43  F009         	goto	u3120
  4818  001280                     u3121:
  4819  001280  FFFF               	dw	65535	; assembler added errata NOP
  4820  001282  EF4E  F009         	goto	l3831
  4821  001286                     u3120:
  4822  001286  FFFF               	dw	65535	; assembler added errata NOP
  4823  001288  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4824  00128A  EF4C  F009         	goto	u3130
  4825  00128E  EF49  F009         	goto	u3131
  4826  001292                     u3131:
  4827  001292  FFFF               	dw	65535	; assembler added errata NOP
  4828  001294  EF4E  F009         	goto	l3831
  4829  001298                     u3130:
  4830  001298  FFFF               	dw	65535	; assembler added errata NOP
  4831  00129A  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4832  00129C                     l3831:
  4833  00129C  FFFF               	dw	65535	; assembler added errata NOP
  4834  00129E  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4835  0012A2  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4836  0012A6  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4837  0012AA  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  4838  0012AE                     l1298:
  4839  0012AE  FFFF               	dw	65535	; assembler added errata NOP
  4840  0012B0  0012               	return		;funcret
  4841  0012B2  FFFF               	dw	65535	; errata NOP
  4842  0012B4                     __end_of___xxtofl:
  4843                           	callstack 0
  4844                           
  4845 ;; *************** function ___fltol *****************
  4846 ;; Defined at:
  4847 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;  f1              4   56[COMRAM] unsigned char 
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;  exp1            1   65[COMRAM] unsigned char 
  4852 ;;  sign1           1   64[COMRAM] unsigned char 
  4853 ;; Return value:  Size  Location     Type
  4854 ;;                  4   56[COMRAM] long 
  4855 ;; Registers used:
  4856 ;;		wreg, status,2, status,0
  4857 ;; Tracked objects:
  4858 ;;		On entry : 0/0
  4859 ;;		On exit  : 0/0
  4860 ;;		Unchanged: 0/0
  4861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4862 ;;      Params:         4       0       0       0       0       0       0
  4863 ;;      Locals:         2       0       0       0       0       0       0
  4864 ;;      Temps:          4       0       0       0       0       0       0
  4865 ;;      Totals:        10       0       0       0       0       0       0
  4866 ;;Total ram usage:       10 bytes
  4867 ;; Hardware stack levels used:    1
  4868 ;; Hardware stack levels required when called:    4
  4869 ;; This function calls:
  4870 ;;		Nothing
  4871 ;; This function is called by:
  4872 ;;		_rotateObj
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           	psect	text29
  4877  001936                     __ptext29:
  4878                           	callstack 0
  4879  001936                     ___fltol:
  4880                           	callstack 0
  4881  001936  FFFF               	dw	65535	; assembler added errata NOP
  4882  001938  343B               	rlcf	(___fltol@f1+2)^0,w,c
  4883  00193A  343C               	rlcf	(___fltol@f1+3)^0,w,c
  4884  00193C  6E42               	movwf	___fltol@exp1^0,c
  4885  00193E  5042               	movf	___fltol@exp1^0,w,c
  4886  001940  A4D8               	btfss	status,2,c
  4887  001942  EFA5  F00C         	goto	u2971
  4888  001946  EFA8  F00C         	goto	u2970
  4889  00194A                     u2971:
  4890  00194A  FFFF               	dw	65535	; assembler added errata NOP
  4891  00194C  EFB4  F00C         	goto	l3751
  4892  001950                     u2970:
  4893  001950  FFFF               	dw	65535	; assembler added errata NOP
  4894  001952                     l3747:
  4895  001952  FFFF               	dw	65535	; assembler added errata NOP
  4896  001954  0E00               	movlw	0
  4897  001956  6E39               	movwf	?___fltol^0,c
  4898  001958  0E00               	movlw	0
  4899  00195A  6E3A               	movwf	(?___fltol+1)^0,c
  4900  00195C  0E00               	movlw	0
  4901  00195E  6E3B               	movwf	(?___fltol+2)^0,c
  4902  001960  0E00               	movlw	0
  4903  001962  6E3C               	movwf	(?___fltol+3)^0,c
  4904  001964  EF33  F00D         	goto	l937
  4905  001968                     l3751:
  4906  001968  FFFF               	dw	65535	; assembler added errata NOP
  4907  00196A  C039  F03D         	movff	___fltol@f1,??___fltol
  4908  00196E  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  4909  001972  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  4910  001976  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  4911  00197A  0E20               	movlw	32
  4912  00197C  EFC6  F00C         	goto	u2980
  4913  001980                     u2985:
  4914  001980  FFFF               	dw	65535	; assembler added errata NOP
  4915  001982  90D8               	bcf	status,0,c
  4916  001984  3240               	rrcf	(??___fltol+3)^0,f,c
  4917  001986  323F               	rrcf	(??___fltol+2)^0,f,c
  4918  001988  323E               	rrcf	(??___fltol+1)^0,f,c
  4919  00198A  323D               	rrcf	??___fltol^0,f,c
  4920  00198C                     u2980:
  4921  00198C  FFFF               	dw	65535	; assembler added errata NOP
  4922  00198E  2EE8               	decfsz	wreg,f,c
  4923  001990  EFC0  F00C         	goto	u2985
  4924  001994  503D               	movf	??___fltol^0,w,c
  4925  001996  6E41               	movwf	___fltol@sign1^0,c
  4926  001998  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  4927  00199A  0EFF               	movlw	255
  4928  00199C  1639               	andwf	___fltol@f1^0,f,c
  4929  00199E  0EFF               	movlw	255
  4930  0019A0  163A               	andwf	(___fltol@f1+1)^0,f,c
  4931  0019A2  0EFF               	movlw	255
  4932  0019A4  163B               	andwf	(___fltol@f1+2)^0,f,c
  4933  0019A6  0E00               	movlw	0
  4934  0019A8  163C               	andwf	(___fltol@f1+3)^0,f,c
  4935  0019AA  0E96               	movlw	150
  4936  0019AC  5E42               	subwf	___fltol@exp1^0,f,c
  4937  0019AE  BE42               	btfsc	___fltol@exp1^0,7,c
  4938  0019B0  EFDF  F00C         	goto	u2990
  4939  0019B4  EFDC  F00C         	goto	u2991
  4940  0019B8                     u2991:
  4941  0019B8  FFFF               	dw	65535	; assembler added errata NOP
  4942  0019BA  EFF9  F00C         	goto	l3771
  4943  0019BE                     u2990:
  4944  0019BE  FFFF               	dw	65535	; assembler added errata NOP
  4945  0019C0  5042               	movf	___fltol@exp1^0,w,c
  4946  0019C2  0A80               	xorlw	128
  4947  0019C4  0F97               	addlw	151
  4948  0019C6  B0D8               	btfsc	status,0,c
  4949  0019C8  EFE8  F00C         	goto	u3001
  4950  0019CC  EFEB  F00C         	goto	u3000
  4951  0019D0                     u3001:
  4952  0019D0  FFFF               	dw	65535	; assembler added errata NOP
  4953  0019D2  EFEE  F00C         	goto	l3767
  4954  0019D6                     u3000:
  4955  0019D6  FFFF               	dw	65535	; assembler added errata NOP
  4956  0019D8  EFA9  F00C         	goto	l3747
  4957  0019DC                     l3767:
  4958  0019DC  FFFF               	dw	65535	; assembler added errata NOP
  4959  0019DE  90D8               	bcf	status,0,c
  4960  0019E0  323C               	rrcf	(___fltol@f1+3)^0,f,c
  4961  0019E2  323B               	rrcf	(___fltol@f1+2)^0,f,c
  4962  0019E4  323A               	rrcf	(___fltol@f1+1)^0,f,c
  4963  0019E6  3239               	rrcf	___fltol@f1^0,f,c
  4964  0019E8  3E42               	incfsz	___fltol@exp1^0,f,c
  4965  0019EA  EFEE  F00C         	goto	l3767
  4966  0019EE  EF17  F00D         	goto	l3781
  4967  0019F2                     l3771:
  4968  0019F2  FFFF               	dw	65535	; assembler added errata NOP
  4969  0019F4  0E1F               	movlw	31
  4970  0019F6  6442               	cpfsgt	___fltol@exp1^0,c
  4971  0019F8  EF00  F00D         	goto	u3011
  4972  0019FC  EF03  F00D         	goto	u3010
  4973  001A00                     u3011:
  4974  001A00  FFFF               	dw	65535	; assembler added errata NOP
  4975  001A02  EF0D  F00D         	goto	l3779
  4976  001A06                     u3010:
  4977  001A06  FFFF               	dw	65535	; assembler added errata NOP
  4978  001A08  EFA9  F00C         	goto	l3747
  4979  001A0C                     l3777:
  4980  001A0C  FFFF               	dw	65535	; assembler added errata NOP
  4981  001A0E  90D8               	bcf	status,0,c
  4982  001A10  3639               	rlcf	___fltol@f1^0,f,c
  4983  001A12  363A               	rlcf	(___fltol@f1+1)^0,f,c
  4984  001A14  363B               	rlcf	(___fltol@f1+2)^0,f,c
  4985  001A16  363C               	rlcf	(___fltol@f1+3)^0,f,c
  4986  001A18  0642               	decf	___fltol@exp1^0,f,c
  4987  001A1A                     l3779:
  4988  001A1A  FFFF               	dw	65535	; assembler added errata NOP
  4989  001A1C  5042               	movf	___fltol@exp1^0,w,c
  4990  001A1E  A4D8               	btfss	status,2,c
  4991  001A20  EF14  F00D         	goto	u3021
  4992  001A24  EF17  F00D         	goto	u3020
  4993  001A28                     u3021:
  4994  001A28  FFFF               	dw	65535	; assembler added errata NOP
  4995  001A2A  EF06  F00D         	goto	l3777
  4996  001A2E                     u3020:
  4997  001A2E                     l3781:
  4998  001A2E  FFFF               	dw	65535	; assembler added errata NOP
  4999  001A30  5041               	movf	___fltol@sign1^0,w,c
  5000  001A32  B4D8               	btfsc	status,2,c
  5001  001A34  EF1E  F00D         	goto	u3031
  5002  001A38  EF21  F00D         	goto	u3030
  5003  001A3C                     u3031:
  5004  001A3C  FFFF               	dw	65535	; assembler added errata NOP
  5005  001A3E  EF2A  F00D         	goto	l3785
  5006  001A42                     u3030:
  5007  001A42  FFFF               	dw	65535	; assembler added errata NOP
  5008  001A44  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5009  001A46  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5010  001A48  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5011  001A4A  6C39               	negf	___fltol@f1^0,c
  5012  001A4C  0E00               	movlw	0
  5013  001A4E  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5014  001A50  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5015  001A52  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5016  001A54                     l3785:
  5017  001A54  FFFF               	dw	65535	; assembler added errata NOP
  5018  001A56  C039  F039         	movff	___fltol@f1,?___fltol
  5019  001A5A  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5020  001A5E  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5021  001A62  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5022  001A66                     l937:
  5023  001A66  FFFF               	dw	65535	; assembler added errata NOP
  5024  001A68  0012               	return		;funcret
  5025  001A6A  FFFF               	dw	65535	; errata NOP
  5026  001A6C                     __end_of___fltol:
  5027                           	callstack 0
  5028                           
  5029 ;; *************** function ___fldiv *****************
  5030 ;; Defined at:
  5031 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;  b               4   31[COMRAM] long 
  5034 ;;  a               4   35[COMRAM] long 
  5035 ;; Auto vars:     Size  Location     Type
  5036 ;;  grs             4   50[COMRAM] unsigned long 
  5037 ;;  rem             4   43[COMRAM] unsigned long 
  5038 ;;  new_exp         2   48[COMRAM] short 
  5039 ;;  aexp            1   55[COMRAM] unsigned char 
  5040 ;;  bexp            1   54[COMRAM] unsigned char 
  5041 ;;  sign            1   47[COMRAM] unsigned char 
  5042 ;; Return value:  Size  Location     Type
  5043 ;;                  4   31[COMRAM] unsigned char 
  5044 ;; Registers used:
  5045 ;;		wreg, status,2, status,0
  5046 ;; Tracked objects:
  5047 ;;		On entry : 0/0
  5048 ;;		On exit  : 0/0
  5049 ;;		Unchanged: 0/0
  5050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5051 ;;      Params:         8       0       0       0       0       0       0
  5052 ;;      Locals:        13       0       0       0       0       0       0
  5053 ;;      Temps:          4       0       0       0       0       0       0
  5054 ;;      Totals:        25       0       0       0       0       0       0
  5055 ;;Total ram usage:       25 bytes
  5056 ;; Hardware stack levels used:    1
  5057 ;; Hardware stack levels required when called:    4
  5058 ;; This function calls:
  5059 ;;		Nothing
  5060 ;; This function is called by:
  5061 ;;		_rotateObj
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           	psect	text30
  5066  000612                     __ptext30:
  5067                           	callstack 0
  5068  000612                     ___fldiv:
  5069                           	callstack 0
  5070  000612  FFFF               	dw	65535	; assembler added errata NOP
  5071  000614  5023               	movf	(___fldiv@b+3)^0,w,c
  5072  000616  0B80               	andlw	128
  5073  000618  6E30               	movwf	___fldiv@sign^0,c
  5074  00061A  5023               	movf	(___fldiv@b+3)^0,w,c
  5075  00061C  2423               	addwf	(___fldiv@b+3)^0,w,c
  5076  00061E  6E37               	movwf	___fldiv@bexp^0,c
  5077  000620  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5078  000622  EF15  F003         	goto	u2741
  5079  000626  EF18  F003         	goto	u2740
  5080  00062A                     u2741:
  5081  00062A  FFFF               	dw	65535	; assembler added errata NOP
  5082  00062C  EF1A  F003         	goto	l3613
  5083  000630                     u2740:
  5084  000630  FFFF               	dw	65535	; assembler added errata NOP
  5085  000632  8037               	bsf	___fldiv@bexp^0,0,c
  5086  000634                     l3613:
  5087  000634  FFFF               	dw	65535	; assembler added errata NOP
  5088  000636  5037               	movf	___fldiv@bexp^0,w,c
  5089  000638  B4D8               	btfsc	status,2,c
  5090  00063A  EF21  F003         	goto	u2751
  5091  00063E  EF24  F003         	goto	u2750
  5092  000642                     u2751:
  5093  000642  FFFF               	dw	65535	; assembler added errata NOP
  5094  000644  EF3D  F003         	goto	l3623
  5095  000648                     u2750:
  5096  000648  FFFF               	dw	65535	; assembler added errata NOP
  5097  00064A  2837               	incf	___fldiv@bexp^0,w,c
  5098  00064C  A4D8               	btfss	status,2,c
  5099  00064E  EF2B  F003         	goto	u2761
  5100  000652  EF2E  F003         	goto	u2760
  5101  000656                     u2761:
  5102  000656  FFFF               	dw	65535	; assembler added errata NOP
  5103  000658  EF37  F003         	goto	l3619
  5104  00065C                     u2760:
  5105  00065C  FFFF               	dw	65535	; assembler added errata NOP
  5106  00065E  0E00               	movlw	0
  5107  000660  6E20               	movwf	___fldiv@b^0,c
  5108  000662  0E00               	movlw	0
  5109  000664  6E21               	movwf	(___fldiv@b+1)^0,c
  5110  000666  0E00               	movlw	0
  5111  000668  6E22               	movwf	(___fldiv@b+2)^0,c
  5112  00066A  0E00               	movlw	0
  5113  00066C  6E23               	movwf	(___fldiv@b+3)^0,c
  5114  00066E                     l3619:
  5115  00066E  FFFF               	dw	65535	; assembler added errata NOP
  5116  000670  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5117  000672  0E00               	movlw	0
  5118  000674  6E23               	movwf	(___fldiv@b+3)^0,c
  5119  000676  EF46  F003         	goto	l3625
  5120  00067A                     l3623:
  5121  00067A  FFFF               	dw	65535	; assembler added errata NOP
  5122  00067C  0E00               	movlw	0
  5123  00067E  6E20               	movwf	___fldiv@b^0,c
  5124  000680  0E00               	movlw	0
  5125  000682  6E21               	movwf	(___fldiv@b+1)^0,c
  5126  000684  0E00               	movlw	0
  5127  000686  6E22               	movwf	(___fldiv@b+2)^0,c
  5128  000688  0E00               	movlw	0
  5129  00068A  6E23               	movwf	(___fldiv@b+3)^0,c
  5130  00068C                     l3625:
  5131  00068C  FFFF               	dw	65535	; assembler added errata NOP
  5132  00068E  5027               	movf	(___fldiv@a+3)^0,w,c
  5133  000690  0B80               	andlw	128
  5134  000692  1A30               	xorwf	___fldiv@sign^0,f,c
  5135  000694  5027               	movf	(___fldiv@a+3)^0,w,c
  5136  000696  2427               	addwf	(___fldiv@a+3)^0,w,c
  5137  000698  6E38               	movwf	___fldiv@aexp^0,c
  5138  00069A  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5139  00069C  EF52  F003         	goto	u2771
  5140  0006A0  EF55  F003         	goto	u2770
  5141  0006A4                     u2771:
  5142  0006A4  FFFF               	dw	65535	; assembler added errata NOP
  5143  0006A6  EF57  F003         	goto	l3633
  5144  0006AA                     u2770:
  5145  0006AA  FFFF               	dw	65535	; assembler added errata NOP
  5146  0006AC  8038               	bsf	___fldiv@aexp^0,0,c
  5147  0006AE                     l3633:
  5148  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5149  0006B0  5038               	movf	___fldiv@aexp^0,w,c
  5150  0006B2  B4D8               	btfsc	status,2,c
  5151  0006B4  EF5E  F003         	goto	u2781
  5152  0006B8  EF61  F003         	goto	u2780
  5153  0006BC                     u2781:
  5154  0006BC  FFFF               	dw	65535	; assembler added errata NOP
  5155  0006BE  EF7A  F003         	goto	l3643
  5156  0006C2                     u2780:
  5157  0006C2  FFFF               	dw	65535	; assembler added errata NOP
  5158  0006C4  2838               	incf	___fldiv@aexp^0,w,c
  5159  0006C6  A4D8               	btfss	status,2,c
  5160  0006C8  EF68  F003         	goto	u2791
  5161  0006CC  EF6B  F003         	goto	u2790
  5162  0006D0                     u2791:
  5163  0006D0  FFFF               	dw	65535	; assembler added errata NOP
  5164  0006D2  EF74  F003         	goto	l3639
  5165  0006D6                     u2790:
  5166  0006D6  FFFF               	dw	65535	; assembler added errata NOP
  5167  0006D8  0E00               	movlw	0
  5168  0006DA  6E24               	movwf	___fldiv@a^0,c
  5169  0006DC  0E00               	movlw	0
  5170  0006DE  6E25               	movwf	(___fldiv@a+1)^0,c
  5171  0006E0  0E00               	movlw	0
  5172  0006E2  6E26               	movwf	(___fldiv@a+2)^0,c
  5173  0006E4  0E00               	movlw	0
  5174  0006E6  6E27               	movwf	(___fldiv@a+3)^0,c
  5175  0006E8                     l3639:
  5176  0006E8  FFFF               	dw	65535	; assembler added errata NOP
  5177  0006EA  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5178  0006EC  0E00               	movlw	0
  5179  0006EE  6E27               	movwf	(___fldiv@a+3)^0,c
  5180  0006F0  EF83  F003         	goto	l3645
  5181  0006F4                     l3643:
  5182  0006F4  FFFF               	dw	65535	; assembler added errata NOP
  5183  0006F6  0E00               	movlw	0
  5184  0006F8  6E24               	movwf	___fldiv@a^0,c
  5185  0006FA  0E00               	movlw	0
  5186  0006FC  6E25               	movwf	(___fldiv@a+1)^0,c
  5187  0006FE  0E00               	movlw	0
  5188  000700  6E26               	movwf	(___fldiv@a+2)^0,c
  5189  000702  0E00               	movlw	0
  5190  000704  6E27               	movwf	(___fldiv@a+3)^0,c
  5191  000706                     l3645:
  5192  000706  FFFF               	dw	65535	; assembler added errata NOP
  5193  000708  5024               	movf	___fldiv@a^0,w,c
  5194  00070A  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5195  00070C  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5196  00070E  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5197  000710  A4D8               	btfss	status,2,c
  5198  000712  EF8D  F003         	goto	u2801
  5199  000716  EF90  F003         	goto	u2800
  5200  00071A                     u2801:
  5201  00071A  FFFF               	dw	65535	; assembler added errata NOP
  5202  00071C  EFAA  F003         	goto	l3657
  5203  000720                     u2800:
  5204  000720  FFFF               	dw	65535	; assembler added errata NOP
  5205  000722  0E00               	movlw	0
  5206  000724  6E20               	movwf	___fldiv@b^0,c
  5207  000726  0E00               	movlw	0
  5208  000728  6E21               	movwf	(___fldiv@b+1)^0,c
  5209  00072A  0E00               	movlw	0
  5210  00072C  6E22               	movwf	(___fldiv@b+2)^0,c
  5211  00072E  0E00               	movlw	0
  5212  000730  6E23               	movwf	(___fldiv@b+3)^0,c
  5213  000732  0E80               	movlw	128
  5214  000734  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5215  000736  0E7F               	movlw	127
  5216  000738  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5217  00073A                     l3651:
  5218  00073A  FFFF               	dw	65535	; assembler added errata NOP
  5219  00073C  5030               	movf	___fldiv@sign^0,w,c
  5220  00073E  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5221  000740  C020  F020         	movff	___fldiv@b,?___fldiv
  5222  000744  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5223  000748  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5224  00074C  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5225  000750  EF1F  F005         	goto	l1222
  5226  000754                     l3657:
  5227  000754  FFFF               	dw	65535	; assembler added errata NOP
  5228  000756  5037               	movf	___fldiv@bexp^0,w,c
  5229  000758  A4D8               	btfss	status,2,c
  5230  00075A  EFB1  F003         	goto	u2811
  5231  00075E  EFB4  F003         	goto	u2810
  5232  000762                     u2811:
  5233  000762  FFFF               	dw	65535	; assembler added errata NOP
  5234  000764  EFBF  F003         	goto	l3665
  5235  000768                     u2810:
  5236  000768  FFFF               	dw	65535	; assembler added errata NOP
  5237  00076A  0E00               	movlw	0
  5238  00076C  6E20               	movwf	?___fldiv^0,c
  5239  00076E  0E00               	movlw	0
  5240  000770  6E21               	movwf	(?___fldiv+1)^0,c
  5241  000772  0E00               	movlw	0
  5242  000774  6E22               	movwf	(?___fldiv+2)^0,c
  5243  000776  0E00               	movlw	0
  5244  000778  6E23               	movwf	(?___fldiv+3)^0,c
  5245  00077A  EF1F  F005         	goto	l1222
  5246  00077E                     l3665:
  5247  00077E  FFFF               	dw	65535	; assembler added errata NOP
  5248  000780  5038               	movf	___fldiv@aexp^0,w,c
  5249  000782  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5250  000786  6A29               	clrf	(??___fldiv+1)^0,c
  5251  000788  5E28               	subwf	??___fldiv^0,f,c
  5252  00078A  0E00               	movlw	0
  5253  00078C  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5254  00078E  0E7F               	movlw	127
  5255  000790  2428               	addwf	??___fldiv^0,w,c
  5256  000792  6E31               	movwf	___fldiv@new_exp^0,c
  5257  000794  0E00               	movlw	0
  5258  000796  2029               	addwfc	(??___fldiv+1)^0,w,c
  5259  000798  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5260  00079A  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5261  00079E  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5262  0007A2  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5263  0007A6  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5264  0007AA  0E00               	movlw	0
  5265  0007AC  6E20               	movwf	___fldiv@b^0,c
  5266  0007AE  0E00               	movlw	0
  5267  0007B0  6E21               	movwf	(___fldiv@b+1)^0,c
  5268  0007B2  0E00               	movlw	0
  5269  0007B4  6E22               	movwf	(___fldiv@b+2)^0,c
  5270  0007B6  0E00               	movlw	0
  5271  0007B8  6E23               	movwf	(___fldiv@b+3)^0,c
  5272  0007BA  0E00               	movlw	0
  5273  0007BC  6E33               	movwf	___fldiv@grs^0,c
  5274  0007BE  0E00               	movlw	0
  5275  0007C0  6E34               	movwf	(___fldiv@grs+1)^0,c
  5276  0007C2  0E00               	movlw	0
  5277  0007C4  6E35               	movwf	(___fldiv@grs+2)^0,c
  5278  0007C6  0E00               	movlw	0
  5279  0007C8  6E36               	movwf	(___fldiv@grs+3)^0,c
  5280  0007CA  0E00               	movlw	0
  5281  0007CC  6E38               	movwf	___fldiv@aexp^0,c
  5282  0007CE  EF2B  F004         	goto	l1224
  5283  0007D2                     l3675:
  5284  0007D2  FFFF               	dw	65535	; assembler added errata NOP
  5285  0007D4  5038               	movf	___fldiv@aexp^0,w,c
  5286  0007D6  B4D8               	btfsc	status,2,c
  5287  0007D8  EFF0  F003         	goto	u2821
  5288  0007DC  EFF3  F003         	goto	u2820
  5289  0007E0                     u2821:
  5290  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  5291  0007E2  EF0E  F004         	goto	l3683
  5292  0007E6                     u2820:
  5293  0007E6  FFFF               	dw	65535	; assembler added errata NOP
  5294  0007E8  90D8               	bcf	status,0,c
  5295  0007EA  362C               	rlcf	___fldiv@rem^0,f,c
  5296  0007EC  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5297  0007EE  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5298  0007F0  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5299  0007F2  90D8               	bcf	status,0,c
  5300  0007F4  3620               	rlcf	___fldiv@b^0,f,c
  5301  0007F6  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5302  0007F8  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5303  0007FA  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5304  0007FC  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5305  0007FE  EF03  F004         	goto	u2831
  5306  000802  EF06  F004         	goto	u2830
  5307  000806                     u2831:
  5308  000806  FFFF               	dw	65535	; assembler added errata NOP
  5309  000808  EF08  F004         	goto	l1227
  5310  00080C                     u2830:
  5311  00080C  FFFF               	dw	65535	; assembler added errata NOP
  5312  00080E  8020               	bsf	___fldiv@b^0,0,c
  5313  000810                     l1227:
  5314  000810  FFFF               	dw	65535	; assembler added errata NOP
  5315  000812  90D8               	bcf	status,0,c
  5316  000814  3633               	rlcf	___fldiv@grs^0,f,c
  5317  000816  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5318  000818  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5319  00081A  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5320  00081C                     l3683:
  5321  00081C  FFFF               	dw	65535	; assembler added errata NOP
  5322  00081E  5024               	movf	___fldiv@a^0,w,c
  5323  000820  5C2C               	subwf	___fldiv@rem^0,w,c
  5324  000822  5025               	movf	(___fldiv@a+1)^0,w,c
  5325  000824  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5326  000826  5026               	movf	(___fldiv@a+2)^0,w,c
  5327  000828  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5328  00082A  5027               	movf	(___fldiv@a+3)^0,w,c
  5329  00082C  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5330  00082E  A0D8               	btfss	status,0,c
  5331  000830  EF1C  F004         	goto	u2841
  5332  000834  EF1F  F004         	goto	u2840
  5333  000838                     u2841:
  5334  000838  FFFF               	dw	65535	; assembler added errata NOP
  5335  00083A  EF29  F004         	goto	l3689
  5336  00083E                     u2840:
  5337  00083E  FFFF               	dw	65535	; assembler added errata NOP
  5338  000840  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5339  000842  5024               	movf	___fldiv@a^0,w,c
  5340  000844  5E2C               	subwf	___fldiv@rem^0,f,c
  5341  000846  5025               	movf	(___fldiv@a+1)^0,w,c
  5342  000848  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5343  00084A  5026               	movf	(___fldiv@a+2)^0,w,c
  5344  00084C  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5345  00084E  5027               	movf	(___fldiv@a+3)^0,w,c
  5346  000850  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5347  000852                     l3689:
  5348  000852  FFFF               	dw	65535	; assembler added errata NOP
  5349  000854  2A38               	incf	___fldiv@aexp^0,f,c
  5350  000856                     l1224:
  5351  000856  FFFF               	dw	65535	; assembler added errata NOP
  5352  000858  0E19               	movlw	25
  5353  00085A  6438               	cpfsgt	___fldiv@aexp^0,c
  5354  00085C  EF32  F004         	goto	u2851
  5355  000860  EF35  F004         	goto	u2850
  5356  000864                     u2851:
  5357  000864  FFFF               	dw	65535	; assembler added errata NOP
  5358  000866  EFE9  F003         	goto	l3675
  5359  00086A                     u2850:
  5360  00086A  FFFF               	dw	65535	; assembler added errata NOP
  5361  00086C  502C               	movf	___fldiv@rem^0,w,c
  5362  00086E  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5363  000870  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5364  000872  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5365  000874  B4D8               	btfsc	status,2,c
  5366  000876  EF3F  F004         	goto	u2861
  5367  00087A  EF42  F004         	goto	u2860
  5368  00087E                     u2861:
  5369  00087E  FFFF               	dw	65535	; assembler added errata NOP
  5370  000880  EF5F  F004         	goto	l3701
  5371  000884                     u2860:
  5372  000884  FFFF               	dw	65535	; assembler added errata NOP
  5373  000886  8033               	bsf	___fldiv@grs^0,0,c
  5374  000888  EF5F  F004         	goto	l3701
  5375  00088C                     l3695:
  5376  00088C  FFFF               	dw	65535	; assembler added errata NOP
  5377  00088E  90D8               	bcf	status,0,c
  5378  000890  3620               	rlcf	___fldiv@b^0,f,c
  5379  000892  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5380  000894  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5381  000896  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5382  000898  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5383  00089A  EF51  F004         	goto	u2871
  5384  00089E  EF54  F004         	goto	u2870
  5385  0008A2                     u2871:
  5386  0008A2  FFFF               	dw	65535	; assembler added errata NOP
  5387  0008A4  EF56  F004         	goto	l1233
  5388  0008A8                     u2870:
  5389  0008A8  FFFF               	dw	65535	; assembler added errata NOP
  5390  0008AA  8020               	bsf	___fldiv@b^0,0,c
  5391  0008AC                     l1233:
  5392  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5393  0008AE  90D8               	bcf	status,0,c
  5394  0008B0  3633               	rlcf	___fldiv@grs^0,f,c
  5395  0008B2  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5396  0008B4  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5397  0008B6  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5398  0008B8  0631               	decf	___fldiv@new_exp^0,f,c
  5399  0008BA  A0D8               	btfss	status,0,c
  5400  0008BC  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5401  0008BE                     l3701:
  5402  0008BE  FFFF               	dw	65535	; assembler added errata NOP
  5403  0008C0  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5404  0008C2  EF65  F004         	goto	u2881
  5405  0008C6  EF68  F004         	goto	u2880
  5406  0008CA                     u2881:
  5407  0008CA  FFFF               	dw	65535	; assembler added errata NOP
  5408  0008CC  EF46  F004         	goto	l3695
  5409  0008D0                     u2880:
  5410  0008D0  FFFF               	dw	65535	; assembler added errata NOP
  5411  0008D2  0E00               	movlw	0
  5412  0008D4  6E38               	movwf	___fldiv@aexp^0,c
  5413  0008D6  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5414  0008D8  EF70  F004         	goto	u2891
  5415  0008DC  EF73  F004         	goto	u2890
  5416  0008E0                     u2891:
  5417  0008E0  FFFF               	dw	65535	; assembler added errata NOP
  5418  0008E2  EF9E  F004         	goto	l1235
  5419  0008E6                     u2890:
  5420  0008E6  FFFF               	dw	65535	; assembler added errata NOP
  5421  0008E8  0EFF               	movlw	255
  5422  0008EA  1433               	andwf	___fldiv@grs^0,w,c
  5423  0008EC  6E28               	movwf	??___fldiv^0,c
  5424  0008EE  0EFF               	movlw	255
  5425  0008F0  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5426  0008F2  6E29               	movwf	(??___fldiv+1)^0,c
  5427  0008F4  0EFF               	movlw	255
  5428  0008F6  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5429  0008F8  6E2A               	movwf	(??___fldiv+2)^0,c
  5430  0008FA  0E7F               	movlw	127
  5431  0008FC  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5432  0008FE  6E2B               	movwf	(??___fldiv+3)^0,c
  5433  000900  5028               	movf	??___fldiv^0,w,c
  5434  000902  1029               	iorwf	(??___fldiv+1)^0,w,c
  5435  000904  102A               	iorwf	(??___fldiv+2)^0,w,c
  5436  000906  102B               	iorwf	(??___fldiv+3)^0,w,c
  5437  000908  B4D8               	btfsc	status,2,c
  5438  00090A  EF89  F004         	goto	u2901
  5439  00090E  EF8C  F004         	goto	u2900
  5440  000912                     u2901:
  5441  000912  FFFF               	dw	65535	; assembler added errata NOP
  5442  000914  EF92  F004         	goto	l1236
  5443  000918                     u2900:
  5444  000918  FFFF               	dw	65535	; assembler added errata NOP
  5445  00091A                     l3709:
  5446  00091A  FFFF               	dw	65535	; assembler added errata NOP
  5447  00091C  0E01               	movlw	1
  5448  00091E  6E38               	movwf	___fldiv@aexp^0,c
  5449  000920  EF9E  F004         	goto	l1235
  5450  000924                     l1236:
  5451  000924  FFFF               	dw	65535	; assembler added errata NOP
  5452  000926  A020               	btfss	___fldiv@b^0,0,c
  5453  000928  EF98  F004         	goto	u2911
  5454  00092C  EF9B  F004         	goto	u2910
  5455  000930                     u2911:
  5456  000930  FFFF               	dw	65535	; assembler added errata NOP
  5457  000932  EF9E  F004         	goto	l1235
  5458  000936                     u2910:
  5459  000936  FFFF               	dw	65535	; assembler added errata NOP
  5460  000938  EF8D  F004         	goto	l3709
  5461  00093C                     l1235:
  5462  00093C  FFFF               	dw	65535	; assembler added errata NOP
  5463  00093E  5038               	movf	___fldiv@aexp^0,w,c
  5464  000940  B4D8               	btfsc	status,2,c
  5465  000942  EFA5  F004         	goto	u2921
  5466  000946  EFA8  F004         	goto	u2920
  5467  00094A                     u2921:
  5468  00094A  FFFF               	dw	65535	; assembler added errata NOP
  5469  00094C  EFCF  F004         	goto	l3721
  5470  000950                     u2920:
  5471  000950  FFFF               	dw	65535	; assembler added errata NOP
  5472  000952  0E01               	movlw	1
  5473  000954  2620               	addwf	___fldiv@b^0,f,c
  5474  000956  0E00               	movlw	0
  5475  000958  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5476  00095A  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5477  00095C  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5478  00095E  A023               	btfss	(___fldiv@b+3)^0,0,c
  5479  000960  EFB4  F004         	goto	u2931
  5480  000964  EFB7  F004         	goto	u2930
  5481  000968                     u2931:
  5482  000968  FFFF               	dw	65535	; assembler added errata NOP
  5483  00096A  EFCF  F004         	goto	l3721
  5484  00096E                     u2930:
  5485  00096E  FFFF               	dw	65535	; assembler added errata NOP
  5486  000970  C020  F028         	movff	___fldiv@b,??___fldiv
  5487  000974  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5488  000978  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5489  00097C  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5490  000980  342B               	rlcf	(??___fldiv+3)^0,w,c
  5491  000982  322B               	rrcf	(??___fldiv+3)^0,f,c
  5492  000984  322A               	rrcf	(??___fldiv+2)^0,f,c
  5493  000986  3229               	rrcf	(??___fldiv+1)^0,f,c
  5494  000988  3228               	rrcf	??___fldiv^0,f,c
  5495  00098A  C028  F020         	movff	??___fldiv,___fldiv@b
  5496  00098E  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5497  000992  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5498  000996  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5499  00099A  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5500  00099C  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5501  00099E                     l3721:
  5502  00099E  FFFF               	dw	65535	; assembler added errata NOP
  5503  0009A0  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5504  0009A2  EFDB  F004         	goto	u2941
  5505  0009A6  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5506  0009A8  E109               	bnz	u2940
  5507  0009AA  2831               	incf	___fldiv@new_exp^0,w,c
  5508  0009AC  A0D8               	btfss	status,0,c
  5509  0009AE  EFDB  F004         	goto	u2941
  5510  0009B2  EFDE  F004         	goto	u2940
  5511  0009B6                     u2941:
  5512  0009B6  FFFF               	dw	65535	; assembler added errata NOP
  5513  0009B8  EFEA  F004         	goto	l3725
  5514  0009BC                     u2940:
  5515  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  5516  0009BE  0E00               	movlw	0
  5517  0009C0  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5518  0009C2  6831               	setf	___fldiv@new_exp^0,c
  5519  0009C4  0E00               	movlw	0
  5520  0009C6  6E20               	movwf	___fldiv@b^0,c
  5521  0009C8  0E00               	movlw	0
  5522  0009CA  6E21               	movwf	(___fldiv@b+1)^0,c
  5523  0009CC  0E00               	movlw	0
  5524  0009CE  6E22               	movwf	(___fldiv@b+2)^0,c
  5525  0009D0  0E00               	movlw	0
  5526  0009D2  6E23               	movwf	(___fldiv@b+3)^0,c
  5527  0009D4                     l3725:
  5528  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  5529  0009D6  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5530  0009D8  EFF9  F004         	goto	u2950
  5531  0009DC  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5532  0009DE  E106               	bnz	u2951
  5533  0009E0  0431               	decf	___fldiv@new_exp^0,w,c
  5534  0009E2  B0D8               	btfsc	status,0,c
  5535  0009E4  EFF6  F004         	goto	u2951
  5536  0009E8  EFF9  F004         	goto	u2950
  5537  0009EC                     u2951:
  5538  0009EC  FFFF               	dw	65535	; assembler added errata NOP
  5539  0009EE  EF08  F005         	goto	l3729
  5540  0009F2                     u2950:
  5541  0009F2  FFFF               	dw	65535	; assembler added errata NOP
  5542  0009F4  0E00               	movlw	0
  5543  0009F6  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5544  0009F8  0E00               	movlw	0
  5545  0009FA  6E31               	movwf	___fldiv@new_exp^0,c
  5546  0009FC  0E00               	movlw	0
  5547  0009FE  6E20               	movwf	___fldiv@b^0,c
  5548  000A00  0E00               	movlw	0
  5549  000A02  6E21               	movwf	(___fldiv@b+1)^0,c
  5550  000A04  0E00               	movlw	0
  5551  000A06  6E22               	movwf	(___fldiv@b+2)^0,c
  5552  000A08  0E00               	movlw	0
  5553  000A0A  6E23               	movwf	(___fldiv@b+3)^0,c
  5554  000A0C  0E00               	movlw	0
  5555  000A0E  6E30               	movwf	___fldiv@sign^0,c
  5556  000A10                     l3729:
  5557  000A10  FFFF               	dw	65535	; assembler added errata NOP
  5558  000A12  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5559  000A16  A037               	btfss	___fldiv@bexp^0,0,c
  5560  000A18  EF10  F005         	goto	u2961
  5561  000A1C  EF13  F005         	goto	u2960
  5562  000A20                     u2961:
  5563  000A20  FFFF               	dw	65535	; assembler added errata NOP
  5564  000A22  EF17  F005         	goto	l3735
  5565  000A26                     u2960:
  5566  000A26  FFFF               	dw	65535	; assembler added errata NOP
  5567  000A28  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5568  000A2A  EF19  F005         	goto	l3737
  5569  000A2E                     l3735:
  5570  000A2E  FFFF               	dw	65535	; assembler added errata NOP
  5571  000A30  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5572  000A32                     l3737:
  5573  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5574  000A34  90D8               	bcf	status,0,c
  5575  000A36  3037               	rrcf	___fldiv@bexp^0,w,c
  5576  000A38  6E23               	movwf	(___fldiv@b+3)^0,c
  5577  000A3A  EF9D  F003         	goto	l3651
  5578  000A3E                     l1222:
  5579  000A3E  FFFF               	dw	65535	; assembler added errata NOP
  5580  000A40  0012               	return		;funcret
  5581  000A42  FFFF               	dw	65535	; errata NOP
  5582  000A44                     __end_of___fldiv:
  5583                           	callstack 0
  5584                           
  5585 ;; *************** function _releaseObj *****************
  5586 ;; Defined at:
  5587 ;;		line 824 in file "motors.c"
  5588 ;; Parameters:    Size  Location     Type
  5589 ;;		None
  5590 ;; Auto vars:     Size  Location     Type
  5591 ;;		None
  5592 ;; Return value:  Size  Location     Type
  5593 ;;                  1    wreg      void 
  5594 ;; Registers used:
  5595 ;;		wreg, status,2, status,0, cstack
  5596 ;; Tracked objects:
  5597 ;;		On entry : 0/0
  5598 ;;		On exit  : 0/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5601 ;;      Params:         0       0       0       0       0       0       0
  5602 ;;      Locals:         0       0       0       0       0       0       0
  5603 ;;      Temps:          0       0       0       0       0       0       0
  5604 ;;      Totals:         0       0       0       0       0       0       0
  5605 ;;Total ram usage:        0 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; Hardware stack levels required when called:    5
  5608 ;; This function calls:
  5609 ;;		_resetTM2_Temp
  5610 ;;		_stepMade
  5611 ;; This function is called by:
  5612 ;;		_executeData
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           	psect	text31
  5617  002360                     __ptext31:
  5618                           	callstack 0
  5619  002360                     _releaseObj:
  5620                           	callstack 0
  5621  002360  FFFF               	dw	65535	; assembler added errata NOP
  5622  002362                     
  5623                           ;motors.c: 825:     LATDbits.LATD1 = 0;
  5624  002362  928C               	bcf	140,1,c	;volatile
  5625                           
  5626                           ;motors.c: 828:     T2CONbits.TMR2ON = 1;
  5627  002364  84CA               	bsf	202,2,c	;volatile
  5628  002366                     l4095:
  5629  002366  FFFF               	dw	65535	; assembler added errata NOP
  5630  002368  EC15  F012         	call	_stepMade	;wreg free
  5631  00236C  5012               	movf	?_stepMade^0,w,c
  5632  00236E  1013               	iorwf	(?_stepMade+1)^0,w,c
  5633  002370  B4D8               	btfsc	status,2,c
  5634  002372  EFBD  F011         	goto	u3571
  5635  002376  EFC0  F011         	goto	u3570
  5636  00237A                     u3571:
  5637  00237A  FFFF               	dw	65535	; assembler added errata NOP
  5638  00237C  EFB3  F011         	goto	l4095
  5639  002380                     u3570:
  5640  002380  FFFF               	dw	65535	; assembler added errata NOP
  5641  002382                     
  5642                           ;motors.c: 830:     T2CONbits.TMR2ON = 0;
  5643  002382  94CA               	bcf	202,2,c	;volatile
  5644  002384                     
  5645                           ;motors.c: 831:     TMR2 = 0;
  5646  002384  0E00               	movlw	0
  5647  002386  6ECC               	movwf	204,c	;volatile
  5648  002388                     
  5649                           ;motors.c: 834:     resetTM2_Temp();
  5650  002388  EC31  F012         	call	_resetTM2_Temp	;wreg free
  5651  00238C  0012               	return		;funcret
  5652  00238E  FFFF               	dw	65535	; errata NOP
  5653  002390                     __end_of_releaseObj:
  5654                           	callstack 0
  5655                           
  5656 ;; *************** function _pickObject *****************
  5657 ;; Defined at:
  5658 ;;		line 807 in file "motors.c"
  5659 ;; Parameters:    Size  Location     Type
  5660 ;;		None
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;		None
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  1    wreg      void 
  5665 ;; Registers used:
  5666 ;;		wreg, status,2, status,0, cstack
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5672 ;;      Params:         0       0       0       0       0       0       0
  5673 ;;      Locals:         0       0       0       0       0       0       0
  5674 ;;      Temps:          0       0       0       0       0       0       0
  5675 ;;      Totals:         0       0       0       0       0       0       0
  5676 ;;Total ram usage:        0 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    5
  5679 ;; This function calls:
  5680 ;;		_resetTM2_Temp
  5681 ;;		_stepMade
  5682 ;; This function is called by:
  5683 ;;		_executeData
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687                           	psect	text32
  5688  002390                     __ptext32:
  5689                           	callstack 0
  5690  002390                     _pickObject:
  5691                           	callstack 0
  5692  002390  FFFF               	dw	65535	; assembler added errata NOP
  5693  002392                     
  5694                           ;motors.c: 808:     LATDbits.LATD1 = 1;
  5695  002392  828C               	bsf	140,1,c	;volatile
  5696                           
  5697                           ;motors.c: 811:     T2CONbits.TMR2ON = 1;
  5698  002394  84CA               	bsf	202,2,c	;volatile
  5699  002396                     l4087:
  5700  002396  FFFF               	dw	65535	; assembler added errata NOP
  5701  002398  EC15  F012         	call	_stepMade	;wreg free
  5702  00239C  5012               	movf	?_stepMade^0,w,c
  5703  00239E  1013               	iorwf	(?_stepMade+1)^0,w,c
  5704  0023A0  B4D8               	btfsc	status,2,c
  5705  0023A2  EFD5  F011         	goto	u3561
  5706  0023A6  EFD8  F011         	goto	u3560
  5707  0023AA                     u3561:
  5708  0023AA  FFFF               	dw	65535	; assembler added errata NOP
  5709  0023AC  EFCB  F011         	goto	l4087
  5710  0023B0                     u3560:
  5711  0023B0  FFFF               	dw	65535	; assembler added errata NOP
  5712  0023B2                     
  5713                           ;motors.c: 813:     T2CONbits.TMR2ON = 0;
  5714  0023B2  94CA               	bcf	202,2,c	;volatile
  5715  0023B4                     
  5716                           ;motors.c: 814:     TMR2 = 0;
  5717  0023B4  0E00               	movlw	0
  5718  0023B6  6ECC               	movwf	204,c	;volatile
  5719  0023B8                     
  5720                           ;motors.c: 817:     resetTM2_Temp();
  5721  0023B8  EC31  F012         	call	_resetTM2_Temp	;wreg free
  5722  0023BC  0012               	return		;funcret
  5723  0023BE  FFFF               	dw	65535	; errata NOP
  5724  0023C0                     __end_of_pickObject:
  5725                           	callstack 0
  5726                           
  5727 ;; *************** function _moveToPoint *****************
  5728 ;; Defined at:
  5729 ;;		line 318 in file "motors.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  x1              2   20[COMRAM] int 
  5732 ;;  y1              2   22[COMRAM] int 
  5733 ;;  x2              2   24[COMRAM] int 
  5734 ;;  y2              2   26[COMRAM] int 
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;  keepMovingY     1   33[COMRAM] unsigned char 
  5737 ;;  keepMovingX     1   32[COMRAM] unsigned char 
  5738 ;;  MOT2Directio    1   31[COMRAM] unsigned char 
  5739 ;;  MOT1Directio    1   30[COMRAM] unsigned char 
  5740 ;; Return value:  Size  Location     Type
  5741 ;;                  1    wreg      unsigned char 
  5742 ;; Registers used:
  5743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5744 ;; Tracked objects:
  5745 ;;		On entry : 0/0
  5746 ;;		On exit  : 0/0
  5747 ;;		Unchanged: 0/0
  5748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5749 ;;      Params:         8       0       0       0       0       0       0
  5750 ;;      Locals:         4       0       0       0       0       0       0
  5751 ;;      Temps:          2       0       0       0       0       0       0
  5752 ;;      Totals:        14       0       0       0       0       0       0
  5753 ;;Total ram usage:       14 bytes
  5754 ;; Hardware stack levels used:    1
  5755 ;; Hardware stack levels required when called:    5
  5756 ;; This function calls:
  5757 ;;		_resetStep
  5758 ;;		_resetTM0_Temp
  5759 ;;		_resetTM2_Temp
  5760 ;;		_stepCounter
  5761 ;;		_stepMade
  5762 ;; This function is called by:
  5763 ;;		_executeData
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           	psect	text33
  5768  000A44                     __ptext33:
  5769                           	callstack 0
  5770  000A44                     _moveToPoint:
  5771                           	callstack 0
  5772  000A44  FFFF               	dw	65535	; assembler added errata NOP
  5773  000A46                     
  5774                           ;motors.c: 320:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 323:     if(x2
      +                           > maxX || y2 > maxY){
  5775  000A46  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5776  000A48  E107               	bnz	u3141
  5777  000A4A  0E66               	movlw	102
  5778  000A4C  5C19               	subwf	moveToPoint@x2^0,w,c
  5779  000A4E  B0D8               	btfsc	status,0,c
  5780  000A50  EF2C  F005         	goto	u3141
  5781  000A54  EF2F  F005         	goto	u3140
  5782  000A58                     u3141:
  5783  000A58  FFFF               	dw	65535	; assembler added errata NOP
  5784  000A5A  EF3C  F005         	goto	l3839
  5785  000A5E                     u3140:
  5786  000A5E  FFFF               	dw	65535	; assembler added errata NOP
  5787  000A60  501C               	movf	(moveToPoint@y2+1)^0,w,c
  5788  000A62  E10A               	bnz	u3150
  5789  000A64  0E66               	movlw	102
  5790  000A66  5C1B               	subwf	moveToPoint@y2^0,w,c
  5791  000A68  A0D8               	btfss	status,0,c
  5792  000A6A  EF39  F005         	goto	u3151
  5793  000A6E  EF3C  F005         	goto	u3150
  5794  000A72                     u3151:
  5795  000A72  FFFF               	dw	65535	; assembler added errata NOP
  5796  000A74  EF40  F005         	goto	l3843
  5797  000A78                     u3150:
  5798  000A78                     l3839:
  5799  000A78  FFFF               	dw	65535	; assembler added errata NOP
  5800                           
  5801                           ;motors.c: 324:         return(5);
  5802  000A7A  0E05               	movlw	5
  5803  000A7C  EFE0  F006         	goto	l161
  5804  000A80                     l3843:
  5805  000A80  FFFF               	dw	65535	; assembler added errata NOP
  5806                           
  5807                           ;motors.c: 345:     if((x2 - x1) > 0){
  5808  000A82  5015               	movf	moveToPoint@x1^0,w,c
  5809  000A84  5C19               	subwf	moveToPoint@x2^0,w,c
  5810  000A86  6E1D               	movwf	??_moveToPoint^0,c
  5811  000A88  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5812  000A8A  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5813  000A8C  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5814  000A8E  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5815  000A90  EF52  F005         	goto	u3161
  5816  000A94  501E               	movf	(??_moveToPoint+1)^0,w,c
  5817  000A96  E109               	bnz	u3160
  5818  000A98  041D               	decf	??_moveToPoint^0,w,c
  5819  000A9A  A0D8               	btfss	status,0,c
  5820  000A9C  EF52  F005         	goto	u3161
  5821  000AA0  EF55  F005         	goto	u3160
  5822  000AA4                     u3161:
  5823  000AA4  FFFF               	dw	65535	; assembler added errata NOP
  5824  000AA6  EF5C  F005         	goto	l162
  5825  000AAA                     u3160:
  5826  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  5827  000AAC                     
  5828                           ;motors.c: 346:         motCounter[0][1] = 1;
  5829  000AAC  0E01               	movlw	1
  5830  000AAE  6E68               	movwf	(_motCounter+1)^0,c
  5831                           
  5832                           ;motors.c: 347:         MOT1Direction = 1;
  5833  000AB0  0E01               	movlw	1
  5834  000AB2  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5835                           
  5836                           ;motors.c: 348:     }else{
  5837  000AB4  EF60  F005         	goto	l3849
  5838  000AB8                     l162:
  5839  000AB8  FFFF               	dw	65535	; assembler added errata NOP
  5840                           
  5841                           ;motors.c: 349:         motCounter[0][1] = -1;
  5842  000ABA  6868               	setf	(_motCounter+1)^0,c
  5843  000ABC                     
  5844                           ;motors.c: 350:         MOT1Direction = 0;
  5845  000ABC  0E00               	movlw	0
  5846  000ABE  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5847  000AC0                     l3849:
  5848  000AC0  FFFF               	dw	65535	; assembler added errata NOP
  5849                           
  5850                           ;motors.c: 353:     if((y2 - y1) > 0){
  5851  000AC2  5017               	movf	moveToPoint@y1^0,w,c
  5852  000AC4  5C1B               	subwf	moveToPoint@y2^0,w,c
  5853  000AC6  6E1D               	movwf	??_moveToPoint^0,c
  5854  000AC8  5018               	movf	(moveToPoint@y1+1)^0,w,c
  5855  000ACA  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  5856  000ACC  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5857  000ACE  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5858  000AD0  EF72  F005         	goto	u3171
  5859  000AD4  501E               	movf	(??_moveToPoint+1)^0,w,c
  5860  000AD6  E109               	bnz	u3170
  5861  000AD8  041D               	decf	??_moveToPoint^0,w,c
  5862  000ADA  A0D8               	btfss	status,0,c
  5863  000ADC  EF72  F005         	goto	u3171
  5864  000AE0  EF75  F005         	goto	u3170
  5865  000AE4                     u3171:
  5866  000AE4  FFFF               	dw	65535	; assembler added errata NOP
  5867  000AE6  EF7C  F005         	goto	l164
  5868  000AEA                     u3170:
  5869  000AEA  FFFF               	dw	65535	; assembler added errata NOP
  5870  000AEC                     
  5871                           ;motors.c: 354:         motCounter[1][1] = 1;
  5872  000AEC  0E01               	movlw	1
  5873  000AEE  6E6A               	movwf	(_motCounter+3)^0,c
  5874                           
  5875                           ;motors.c: 355:         MOT2Direction = 1;
  5876  000AF0  0E01               	movlw	1
  5877  000AF2  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5878                           
  5879                           ;motors.c: 356:     }else{
  5880  000AF4  EF80  F005         	goto	l165
  5881  000AF8                     l164:
  5882  000AF8  FFFF               	dw	65535	; assembler added errata NOP
  5883                           
  5884                           ;motors.c: 357:         motCounter[1][1] = -1;
  5885  000AFA  686A               	setf	(_motCounter+3)^0,c
  5886  000AFC                     
  5887                           ;motors.c: 358:         MOT2Direction = 0;
  5888  000AFC  0E00               	movlw	0
  5889  000AFE  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5890  000B00                     l165:
  5891  000B00  FFFF               	dw	65535	; assembler added errata NOP
  5892                           
  5893                           ;motors.c: 363:     unsigned char keepMovingX = 1;
  5894  000B02  0E01               	movlw	1
  5895  000B04  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5896                           
  5897                           ;motors.c: 364:     unsigned char keepMovingY = 1;
  5898  000B06  0E01               	movlw	1
  5899  000B08  6E22               	movwf	moveToPoint@keepMovingY^0,c
  5900  000B0A                     
  5901                           ;motors.c: 367:     T2CONbits.TMR2ON = 1;
  5902  000B0A  84CA               	bsf	202,2,c	;volatile
  5903                           
  5904                           ;motors.c: 369:     tm0Error = 0;
  5905  000B0C  0E00               	movlw	0
  5906  000B0E  6E5A               	movwf	(_tm0Error+1)^0,c
  5907  000B10  0E00               	movlw	0
  5908  000B12  6E59               	movwf	_tm0Error^0,c
  5909                           
  5910                           ;motors.c: 370:     tm0Limit = 200;
  5911  000B14  0EC8               	movlw	200
  5912  000B16  6E66               	movwf	_tm0Limit^0,c
  5913  000B18                     
  5914                           ;motors.c: 371:     T0CONbits.TMR0ON = 1;
  5915  000B18  8ED5               	bsf	213,7,c	;volatile
  5916                           
  5917                           ;motors.c: 373:     while(keepMovingX || keepMovingY){
  5918  000B1A  EFBC  F006         	goto	l3921
  5919  000B1E                     l3859:
  5920  000B1E  FFFF               	dw	65535	; assembler added errata NOP
  5921                           
  5922                           ;motors.c: 376:         if(tm0Error){
  5923  000B20  5059               	movf	_tm0Error^0,w,c
  5924  000B22  105A               	iorwf	(_tm0Error+1)^0,w,c
  5925  000B24  B4D8               	btfsc	status,2,c
  5926  000B26  EF97  F005         	goto	u3181
  5927  000B2A  EF9A  F005         	goto	u3180
  5928  000B2E                     u3181:
  5929  000B2E  FFFF               	dw	65535	; assembler added errata NOP
  5930  000B30  EFA1  F005         	goto	l3863
  5931  000B34                     u3180:
  5932  000B34  FFFF               	dw	65535	; assembler added errata NOP
  5933  000B36                     
  5934                           ;motors.c: 382:             tm0Error = 4;
  5935  000B36  0E00               	movlw	0
  5936  000B38  6E5A               	movwf	(_tm0Error+1)^0,c
  5937  000B3A  0E04               	movlw	4
  5938  000B3C  6E59               	movwf	_tm0Error^0,c
  5939                           
  5940                           ;motors.c: 383:             break;
  5941  000B3E  EFD0  F006         	goto	l169
  5942  000B42                     l3863:
  5943  000B42  FFFF               	dw	65535	; assembler added errata NOP
  5944                           
  5945                           ;motors.c: 391:         if(MOT1Direction == 1){
  5946  000B44  041F               	decf	moveToPoint@MOT1Direction^0,w,c
  5947  000B46  A4D8               	btfss	status,2,c
  5948  000B48  EFA8  F005         	goto	u3191
  5949  000B4C  EFAB  F005         	goto	u3190
  5950  000B50                     u3191:
  5951  000B50  FFFF               	dw	65535	; assembler added errata NOP
  5952  000B52  EFEA  F005         	goto	l3877
  5953  000B56                     u3190:
  5954  000B56  FFFF               	dw	65535	; assembler added errata NOP
  5955  000B58                     
  5956                           ;motors.c: 392:             if(x1 + stepCounter() >= x2){
  5957  000B58  EC79  F012         	call	_stepCounter	;wreg free
  5958  000B5C  5015               	movf	moveToPoint@x1^0,w,c
  5959  000B5E  2612               	addwf	?_stepCounter^0,f,c
  5960  000B60  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5961  000B62  2213               	addwfc	(?_stepCounter+1)^0,f,c
  5962  000B64  5019               	movf	moveToPoint@x2^0,w,c
  5963  000B66  5C12               	subwf	?_stepCounter^0,w,c
  5964  000B68  501A               	movf	(moveToPoint@x2+1)^0,w,c
  5965  000B6A  5813               	subwfb	(?_stepCounter+1)^0,w,c
  5966  000B6C  A0D8               	btfss	status,0,c
  5967  000B6E  EFBB  F005         	goto	u3201
  5968  000B72  EFBE  F005         	goto	u3200
  5969  000B76                     u3201:
  5970  000B76  FFFF               	dw	65535	; assembler added errata NOP
  5971  000B78  EFC4  F005         	goto	l3869
  5972  000B7C                     u3200:
  5973  000B7C  FFFF               	dw	65535	; assembler added errata NOP
  5974  000B7E                     l3867:
  5975  000B7E  FFFF               	dw	65535	; assembler added errata NOP
  5976                           
  5977                           ;motors.c: 394:                 keepMovingX = 0;
  5978  000B80  0E00               	movlw	0
  5979  000B82  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5980                           
  5981                           ;motors.c: 395:             }else if(keepMovingX){
  5982  000B84  EF28  F006         	goto	l3891
  5983  000B88                     l3869:
  5984  000B88  FFFF               	dw	65535	; assembler added errata NOP
  5985  000B8A  5021               	movf	moveToPoint@keepMovingX^0,w,c
  5986  000B8C  B4D8               	btfsc	status,2,c
  5987  000B8E  EFCB  F005         	goto	u3211
  5988  000B92  EFCE  F005         	goto	u3210
  5989  000B96                     u3211:
  5990  000B96  FFFF               	dw	65535	; assembler added errata NOP
  5991  000B98  EF28  F006         	goto	l3891
  5992  000B9C                     u3210:
  5993  000B9C  FFFF               	dw	65535	; assembler added errata NOP
  5994  000B9E                     
  5995                           ;motors.c: 401:             motCounter[0][0] += motCounter[0][1];
  5996  000B9E  5068               	movf	(_motCounter+1)^0,w,c
  5997  000BA0  2667               	addwf	_motCounter^0,f,c
  5998                           
  5999                           ;motors.c: 402:             if(motCounter[0][0] > 3){
  6000  000BA2  5067               	movf	_motCounter^0,w,c
  6001  000BA4  0A80               	xorlw	128
  6002  000BA6  0F7C               	addlw	-132
  6003  000BA8  A0D8               	btfss	status,0,c
  6004  000BAA  EFD9  F005         	goto	u3221
  6005  000BAE  EFDC  F005         	goto	u3220
  6006  000BB2                     u3221:
  6007  000BB2  FFFF               	dw	65535	; assembler added errata NOP
  6008  000BB4  EFDF  F005         	goto	l3875
  6009  000BB8                     u3220:
  6010  000BB8  FFFF               	dw	65535	; assembler added errata NOP
  6011  000BBA                     
  6012                           ;motors.c: 403:                 motCounter[0][0] = 0;
  6013  000BBA  0E00               	movlw	0
  6014  000BBC  6E67               	movwf	_motCounter^0,c
  6015  000BBE                     l3875:
  6016  000BBE  FFFF               	dw	65535	; assembler added errata NOP
  6017                           
  6018                           ;motors.c: 406:             LATA = stepMot1[motCounter[0][0]];
  6019  000BC0  0E8C               	movlw	low _stepMot1
  6020  000BC2  2467               	addwf	_motCounter^0,w,c
  6021  000BC4  6ED9               	movwf	fsr2l,c
  6022  000BC6  6ADA               	clrf	fsr2h,c
  6023  000BC8  0E00               	movlw	high _stepMot1
  6024  000BCA  22DA               	addwfc	fsr2h,f,c
  6025  000BCC  50DF               	movf	indf2,w,c
  6026  000BCE  6E89               	movwf	137,c	;volatile
  6027  000BD0  EF28  F006         	goto	l3891
  6028  000BD4                     l3877:
  6029  000BD4  FFFF               	dw	65535	; assembler added errata NOP
  6030  000BD6  501F               	movf	moveToPoint@MOT1Direction^0,w,c
  6031  000BD8  A4D8               	btfss	status,2,c
  6032  000BDA  EFF1  F005         	goto	u3231
  6033  000BDE  EFF4  F005         	goto	u3230
  6034  000BE2                     u3231:
  6035  000BE2  FFFF               	dw	65535	; assembler added errata NOP
  6036  000BE4  EF28  F006         	goto	l3891
  6037  000BE8                     u3230:
  6038  000BE8  FFFF               	dw	65535	; assembler added errata NOP
  6039  000BEA                     
  6040                           ;motors.c: 410:             if(x1 - stepCounter() <= x2){
  6041  000BEA  EC79  F012         	call	_stepCounter	;wreg free
  6042  000BEE  C015  F01D         	movff	moveToPoint@x1,??_moveToPoint
  6043  000BF2  C016  F01E         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6044  000BF6  5012               	movf	?_stepCounter^0,w,c
  6045  000BF8  5E1D               	subwf	??_moveToPoint^0,f,c
  6046  000BFA  5013               	movf	(?_stepCounter+1)^0,w,c
  6047  000BFC  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6048  000BFE  501D               	movf	??_moveToPoint^0,w,c
  6049  000C00  5C19               	subwf	moveToPoint@x2^0,w,c
  6050  000C02  501E               	movf	(??_moveToPoint+1)^0,w,c
  6051  000C04  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  6052  000C06  A0D8               	btfss	status,0,c
  6053  000C08  EF08  F006         	goto	u3241
  6054  000C0C  EF0B  F006         	goto	u3240
  6055  000C10                     u3241:
  6056  000C10  FFFF               	dw	65535	; assembler added errata NOP
  6057  000C12  EF0E  F006         	goto	l3883
  6058  000C16                     u3240:
  6059  000C16  FFFF               	dw	65535	; assembler added errata NOP
  6060  000C18  EFBF  F005         	goto	l3867
  6061  000C1C                     l3883:
  6062  000C1C  FFFF               	dw	65535	; assembler added errata NOP
  6063  000C1E  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6064  000C20  B4D8               	btfsc	status,2,c
  6065  000C22  EF15  F006         	goto	u3251
  6066  000C26  EF18  F006         	goto	u3250
  6067  000C2A                     u3251:
  6068  000C2A  FFFF               	dw	65535	; assembler added errata NOP
  6069  000C2C  EF28  F006         	goto	l3891
  6070  000C30                     u3250:
  6071  000C30  FFFF               	dw	65535	; assembler added errata NOP
  6072  000C32                     
  6073                           ;motors.c: 419:             motCounter[0][0] += motCounter[0][1];
  6074  000C32  5068               	movf	(_motCounter+1)^0,w,c
  6075  000C34  2667               	addwf	_motCounter^0,f,c
  6076                           
  6077                           ;motors.c: 420:             if(motCounter[0][0] < 0){
  6078  000C36  BE67               	btfsc	_motCounter^0,7,c
  6079  000C38  EF23  F006         	goto	u3260
  6080  000C3C  EF20  F006         	goto	u3261
  6081  000C40                     u3261:
  6082  000C40  FFFF               	dw	65535	; assembler added errata NOP
  6083  000C42  EFDF  F005         	goto	l3875
  6084  000C46                     u3260:
  6085  000C46  FFFF               	dw	65535	; assembler added errata NOP
  6086  000C48                     
  6087                           ;motors.c: 421:                 motCounter[0][0] = 3;
  6088  000C48  0E03               	movlw	3
  6089  000C4A  6E67               	movwf	_motCounter^0,c
  6090  000C4C  EFDF  F005         	goto	l3875
  6091  000C50                     l3891:
  6092  000C50  FFFF               	dw	65535	; assembler added errata NOP
  6093                           
  6094                           ;motors.c: 429:         if(MOT2Direction == 1){
  6095  000C52  0420               	decf	moveToPoint@MOT2Direction^0,w,c
  6096  000C54  A4D8               	btfss	status,2,c
  6097  000C56  EF2F  F006         	goto	u3271
  6098  000C5A  EF32  F006         	goto	u3270
  6099  000C5E                     u3271:
  6100  000C5E  FFFF               	dw	65535	; assembler added errata NOP
  6101  000C60  EF71  F006         	goto	l3905
  6102  000C64                     u3270:
  6103  000C64  FFFF               	dw	65535	; assembler added errata NOP
  6104  000C66                     
  6105                           ;motors.c: 431:             if(y1 + stepCounter() >= y2){
  6106  000C66  EC79  F012         	call	_stepCounter	;wreg free
  6107  000C6A  5017               	movf	moveToPoint@y1^0,w,c
  6108  000C6C  2612               	addwf	?_stepCounter^0,f,c
  6109  000C6E  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6110  000C70  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6111  000C72  501B               	movf	moveToPoint@y2^0,w,c
  6112  000C74  5C12               	subwf	?_stepCounter^0,w,c
  6113  000C76  501C               	movf	(moveToPoint@y2+1)^0,w,c
  6114  000C78  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6115  000C7A  A0D8               	btfss	status,0,c
  6116  000C7C  EF42  F006         	goto	u3281
  6117  000C80  EF45  F006         	goto	u3280
  6118  000C84                     u3281:
  6119  000C84  FFFF               	dw	65535	; assembler added errata NOP
  6120  000C86  EF4B  F006         	goto	l3897
  6121  000C8A                     u3280:
  6122  000C8A  FFFF               	dw	65535	; assembler added errata NOP
  6123  000C8C                     l3895:
  6124  000C8C  FFFF               	dw	65535	; assembler added errata NOP
  6125                           
  6126                           ;motors.c: 433:                 keepMovingY = 0;
  6127  000C8E  0E00               	movlw	0
  6128  000C90  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6129                           
  6130                           ;motors.c: 434:             }else if(keepMovingY){
  6131  000C92  EFAF  F006         	goto	l3919
  6132  000C96                     l3897:
  6133  000C96  FFFF               	dw	65535	; assembler added errata NOP
  6134  000C98  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6135  000C9A  B4D8               	btfsc	status,2,c
  6136  000C9C  EF52  F006         	goto	u3291
  6137  000CA0  EF55  F006         	goto	u3290
  6138  000CA4                     u3291:
  6139  000CA4  FFFF               	dw	65535	; assembler added errata NOP
  6140  000CA6  EFAF  F006         	goto	l186
  6141  000CAA                     u3290:
  6142  000CAA  FFFF               	dw	65535	; assembler added errata NOP
  6143  000CAC                     
  6144                           ;motors.c: 440:             motCounter[1][0] += motCounter[1][1];
  6145  000CAC  506A               	movf	(_motCounter+3)^0,w,c
  6146  000CAE  2669               	addwf	(_motCounter+2)^0,f,c
  6147                           
  6148                           ;motors.c: 441:             if(motCounter[1][0] > 3){
  6149  000CB0  5069               	movf	(_motCounter+2)^0,w,c
  6150  000CB2  0A80               	xorlw	128
  6151  000CB4  0F7C               	addlw	-132
  6152  000CB6  A0D8               	btfss	status,0,c
  6153  000CB8  EF60  F006         	goto	u3301
  6154  000CBC  EF63  F006         	goto	u3300
  6155  000CC0                     u3301:
  6156  000CC0  FFFF               	dw	65535	; assembler added errata NOP
  6157  000CC2  EF66  F006         	goto	l3903
  6158  000CC6                     u3300:
  6159  000CC6  FFFF               	dw	65535	; assembler added errata NOP
  6160  000CC8                     
  6161                           ;motors.c: 442:                 motCounter[1][0] = 0;
  6162  000CC8  0E00               	movlw	0
  6163  000CCA  6E69               	movwf	(_motCounter+2)^0,c
  6164  000CCC                     l3903:
  6165  000CCC  FFFF               	dw	65535	; assembler added errata NOP
  6166                           
  6167                           ;motors.c: 445:             LATB = stepMot2[motCounter[1][0]];
  6168  000CCE  0E88               	movlw	low _stepMot2
  6169  000CD0  2469               	addwf	(_motCounter+2)^0,w,c
  6170  000CD2  6ED9               	movwf	fsr2l,c
  6171  000CD4  6ADA               	clrf	fsr2h,c
  6172  000CD6  0E00               	movlw	high _stepMot2
  6173  000CD8  22DA               	addwfc	fsr2h,f,c
  6174  000CDA  50DF               	movf	indf2,w,c
  6175  000CDC  6E8A               	movwf	138,c	;volatile
  6176  000CDE  EFAF  F006         	goto	l3919
  6177  000CE2                     l3905:
  6178  000CE2  FFFF               	dw	65535	; assembler added errata NOP
  6179  000CE4  5020               	movf	moveToPoint@MOT2Direction^0,w,c
  6180  000CE6  A4D8               	btfss	status,2,c
  6181  000CE8  EF78  F006         	goto	u3311
  6182  000CEC  EF7B  F006         	goto	u3310
  6183  000CF0                     u3311:
  6184  000CF0  FFFF               	dw	65535	; assembler added errata NOP
  6185  000CF2  EFAF  F006         	goto	l3919
  6186  000CF6                     u3310:
  6187  000CF6  FFFF               	dw	65535	; assembler added errata NOP
  6188  000CF8                     
  6189                           ;motors.c: 450:             if(y1 - stepCounter() <= y2){
  6190  000CF8  EC79  F012         	call	_stepCounter	;wreg free
  6191  000CFC  C017  F01D         	movff	moveToPoint@y1,??_moveToPoint
  6192  000D00  C018  F01E         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6193  000D04  5012               	movf	?_stepCounter^0,w,c
  6194  000D06  5E1D               	subwf	??_moveToPoint^0,f,c
  6195  000D08  5013               	movf	(?_stepCounter+1)^0,w,c
  6196  000D0A  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6197  000D0C  501D               	movf	??_moveToPoint^0,w,c
  6198  000D0E  5C1B               	subwf	moveToPoint@y2^0,w,c
  6199  000D10  501E               	movf	(??_moveToPoint+1)^0,w,c
  6200  000D12  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6201  000D14  A0D8               	btfss	status,0,c
  6202  000D16  EF8F  F006         	goto	u3321
  6203  000D1A  EF92  F006         	goto	u3320
  6204  000D1E                     u3321:
  6205  000D1E  FFFF               	dw	65535	; assembler added errata NOP
  6206  000D20  EF95  F006         	goto	l3911
  6207  000D24                     u3320:
  6208  000D24  FFFF               	dw	65535	; assembler added errata NOP
  6209  000D26  EF46  F006         	goto	l3895
  6210  000D2A                     l3911:
  6211  000D2A  FFFF               	dw	65535	; assembler added errata NOP
  6212  000D2C  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6213  000D2E  B4D8               	btfsc	status,2,c
  6214  000D30  EF9C  F006         	goto	u3331
  6215  000D34  EF9F  F006         	goto	u3330
  6216  000D38                     u3331:
  6217  000D38  FFFF               	dw	65535	; assembler added errata NOP
  6218  000D3A  EFAF  F006         	goto	l3919
  6219  000D3E                     u3330:
  6220  000D3E  FFFF               	dw	65535	; assembler added errata NOP
  6221  000D40                     
  6222                           ;motors.c: 459:             motCounter[1][0] += motCounter[1][1];
  6223  000D40  506A               	movf	(_motCounter+3)^0,w,c
  6224  000D42  2669               	addwf	(_motCounter+2)^0,f,c
  6225                           
  6226                           ;motors.c: 460:             if(motCounter[1][0] < 0){
  6227  000D44  BE69               	btfsc	(_motCounter+2)^0,7,c
  6228  000D46  EFAA  F006         	goto	u3340
  6229  000D4A  EFA7  F006         	goto	u3341
  6230  000D4E                     u3341:
  6231  000D4E  FFFF               	dw	65535	; assembler added errata NOP
  6232  000D50  EF66  F006         	goto	l3903
  6233  000D54                     u3340:
  6234  000D54  FFFF               	dw	65535	; assembler added errata NOP
  6235  000D56                     
  6236                           ;motors.c: 461:                 motCounter[1][0] = 3;
  6237  000D56  0E03               	movlw	3
  6238  000D58  6E69               	movwf	(_motCounter+2)^0,c
  6239  000D5A  EF66  F006         	goto	l3903
  6240  000D5E                     l186:
  6241  000D5E                     l3919:
  6242  000D5E  FFFF               	dw	65535	; assembler added errata NOP
  6243  000D60  EC15  F012         	call	_stepMade	;wreg free
  6244  000D64  5012               	movf	?_stepMade^0,w,c
  6245  000D66  1013               	iorwf	(?_stepMade+1)^0,w,c
  6246  000D68  B4D8               	btfsc	status,2,c
  6247  000D6A  EFB9  F006         	goto	u3351
  6248  000D6E  EFBC  F006         	goto	u3350
  6249  000D72                     u3351:
  6250  000D72  FFFF               	dw	65535	; assembler added errata NOP
  6251  000D74  EFAF  F006         	goto	l3919
  6252  000D78                     u3350:
  6253  000D78                     l3921:
  6254  000D78  FFFF               	dw	65535	; assembler added errata NOP
  6255                           
  6256                           ;motors.c: 373:     while(keepMovingX || keepMovingY){
  6257  000D7A  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6258  000D7C  A4D8               	btfss	status,2,c
  6259  000D7E  EFC3  F006         	goto	u3361
  6260  000D82  EFC6  F006         	goto	u3360
  6261  000D86                     u3361:
  6262  000D86  FFFF               	dw	65535	; assembler added errata NOP
  6263  000D88  EF8F  F005         	goto	l3859
  6264  000D8C                     u3360:
  6265  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  6266  000D8E  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6267  000D90  A4D8               	btfss	status,2,c
  6268  000D92  EFCD  F006         	goto	u3371
  6269  000D96  EFD0  F006         	goto	u3370
  6270  000D9A                     u3371:
  6271  000D9A  FFFF               	dw	65535	; assembler added errata NOP
  6272  000D9C  EF8F  F005         	goto	l3859
  6273  000DA0                     u3370:
  6274  000DA0                     l169:
  6275  000DA0  FFFF               	dw	65535	; assembler added errata NOP
  6276                           
  6277                           ;motors.c: 484:     T0CONbits.TMR0ON = 0;
  6278  000DA2  9ED5               	bcf	213,7,c	;volatile
  6279                           
  6280                           ;motors.c: 485:     T2CONbits.TMR2ON = 0;
  6281  000DA4  94CA               	bcf	202,2,c	;volatile
  6282  000DA6                     
  6283                           ;motors.c: 487:     resetTM0_Temp();
  6284  000DA6  EC93  F012         	call	_resetTM0_Temp	;wreg free
  6285                           
  6286                           ;motors.c: 488:     resetTM2_Temp();
  6287  000DAA  EC31  F012         	call	_resetTM2_Temp	;wreg free
  6288  000DAE                     
  6289                           ;motors.c: 490:     TMR0 = 0;
  6290  000DAE  0E00               	movlw	0
  6291  000DB0  6ED7               	movwf	215,c	;volatile
  6292  000DB2  0E00               	movlw	0
  6293  000DB4  6ED6               	movwf	214,c	;volatile
  6294  000DB6                     
  6295                           ;motors.c: 491:     TMR2 = 0;
  6296  000DB6  0E00               	movlw	0
  6297  000DB8  6ECC               	movwf	204,c	;volatile
  6298                           
  6299                           ;motors.c: 494:     resetStep();
  6300  000DBA  EC98  F012         	call	_resetStep	;wreg free
  6301  000DBE                     
  6302                           ;motors.c: 496:     return(tm0Error);
  6303  000DBE  5059               	movf	_tm0Error^0,w,c
  6304  000DC0                     l161:
  6305  000DC0  FFFF               	dw	65535	; assembler added errata NOP
  6306  000DC2  0012               	return		;funcret
  6307  000DC4  FFFF               	dw	65535	; errata NOP
  6308  000DC6                     __end_of_moveToPoint:
  6309                           	callstack 0
  6310                           
  6311 ;; *************** function _stepCounter *****************
  6312 ;; Defined at:
  6313 ;;		line 71 in file "timer.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;		None
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;		None
  6318 ;; Return value:  Size  Location     Type
  6319 ;;                  2   17[COMRAM] unsigned int 
  6320 ;; Registers used:
  6321 ;;		None
  6322 ;; Tracked objects:
  6323 ;;		On entry : 0/0
  6324 ;;		On exit  : 0/0
  6325 ;;		Unchanged: 0/0
  6326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6327 ;;      Params:         2       0       0       0       0       0       0
  6328 ;;      Locals:         0       0       0       0       0       0       0
  6329 ;;      Temps:          0       0       0       0       0       0       0
  6330 ;;      Totals:         2       0       0       0       0       0       0
  6331 ;;Total ram usage:        2 bytes
  6332 ;; Hardware stack levels used:    1
  6333 ;; Hardware stack levels required when called:    4
  6334 ;; This function calls:
  6335 ;;		Nothing
  6336 ;; This function is called by:
  6337 ;;		_moveToPoint
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           	psect	text34
  6342  0024F2                     __ptext34:
  6343                           	callstack 0
  6344  0024F2                     _stepCounter:
  6345                           	callstack 0
  6346  0024F2  FFFF               	dw	65535	; assembler added errata NOP
  6347  0024F4                     
  6348                           ;timer.c: 72:     return pwmStep;
  6349  0024F4  C05C  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6350  0024F8  6A13               	clrf	(?_stepCounter+1)^0,c
  6351  0024FA  0012               	return		;funcret
  6352  0024FC  FFFF               	dw	65535	; errata NOP
  6353  0024FE                     __end_of_stepCounter:
  6354                           	callstack 0
  6355                           
  6356 ;; *************** function _liftArm *****************
  6357 ;; Defined at:
  6358 ;;		line 698 in file "motors.c"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;		None
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;		None
  6363 ;; Return value:  Size  Location     Type
  6364 ;;                  1    wreg      unsigned char 
  6365 ;; Registers used:
  6366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6367 ;; Tracked objects:
  6368 ;;		On entry : 0/0
  6369 ;;		On exit  : 0/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6372 ;;      Params:         0       0       0       0       0       0       0
  6373 ;;      Locals:         0       0       0       0       0       0       0
  6374 ;;      Temps:          0       0       0       0       0       0       0
  6375 ;;      Totals:         0       0       0       0       0       0       0
  6376 ;;Total ram usage:        0 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:    5
  6379 ;; This function calls:
  6380 ;;		_resetStep
  6381 ;;		_resetTM0_Temp
  6382 ;;		_resetTM2_Temp
  6383 ;;		_stepMade
  6384 ;; This function is called by:
  6385 ;;		_executeData
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388                           
  6389                           	psect	text35
  6390  00209A                     __ptext35:
  6391                           	callstack 0
  6392  00209A                     _liftArm:
  6393                           	callstack 0
  6394  00209A  FFFF               	dw	65535	; assembler added errata NOP
  6395  00209C                     
  6396                           ;motors.c: 704:     motCounter[2][1] = -1;
  6397  00209C  686C               	setf	(_motCounter+5)^0,c
  6398                           
  6399                           ;motors.c: 707:     T2CONbits.TMR2ON = 1;
  6400  00209E  84CA               	bsf	202,2,c	;volatile
  6401  0020A0                     
  6402                           ;motors.c: 709:     tm0Error = 0;
  6403  0020A0  0E00               	movlw	0
  6404  0020A2  6E5A               	movwf	(_tm0Error+1)^0,c
  6405  0020A4  0E00               	movlw	0
  6406  0020A6  6E59               	movwf	_tm0Error^0,c
  6407                           
  6408                           ;motors.c: 710:     tm0Limit = 200;
  6409  0020A8  0EC8               	movlw	200
  6410  0020AA  6E66               	movwf	_tm0Limit^0,c
  6411  0020AC                     
  6412                           ;motors.c: 711:     T0CONbits.TMR0ON = 1;
  6413  0020AC  8ED5               	bsf	213,7,c	;volatile
  6414                           
  6415                           ;motors.c: 715:     while(!PORTEbits.RE2){
  6416  0020AE  EF91  F010         	goto	l221
  6417  0020B2                     l4041:
  6418  0020B2  FFFF               	dw	65535	; assembler added errata NOP
  6419                           
  6420                           ;motors.c: 717:         resetStep();
  6421  0020B4  EC98  F012         	call	_resetStep	;wreg free
  6422  0020B8                     
  6423                           ;motors.c: 720:         if(tm0Error){
  6424  0020B8  5059               	movf	_tm0Error^0,w,c
  6425  0020BA  105A               	iorwf	(_tm0Error+1)^0,w,c
  6426  0020BC  B4D8               	btfsc	status,2,c
  6427  0020BE  EF63  F010         	goto	u3501
  6428  0020C2  EF66  F010         	goto	u3500
  6429  0020C6                     u3501:
  6430  0020C6  FFFF               	dw	65535	; assembler added errata NOP
  6431  0020C8  EF6D  F010         	goto	l4047
  6432  0020CC                     u3500:
  6433  0020CC  FFFF               	dw	65535	; assembler added errata NOP
  6434  0020CE                     
  6435                           ;motors.c: 725:             tm0Error = 6;
  6436  0020CE  0E00               	movlw	0
  6437  0020D0  6E5A               	movwf	(_tm0Error+1)^0,c
  6438  0020D2  0E06               	movlw	6
  6439  0020D4  6E59               	movwf	_tm0Error^0,c
  6440                           
  6441                           ;motors.c: 726:             break;
  6442  0020D6  EF9A  F010         	goto	l224
  6443  0020DA                     l4047:
  6444  0020DA  FFFF               	dw	65535	; assembler added errata NOP
  6445                           
  6446                           ;motors.c: 735:             motCounter[2][0] += motCounter[2][1];
  6447  0020DC  506C               	movf	(_motCounter+5)^0,w,c
  6448  0020DE  266B               	addwf	(_motCounter+4)^0,f,c
  6449                           
  6450                           ;motors.c: 736:             if(motCounter[2][0] < 0){
  6451  0020E0  BE6B               	btfsc	(_motCounter+4)^0,7,c
  6452  0020E2  EF78  F010         	goto	u3510
  6453  0020E6  EF75  F010         	goto	u3511
  6454  0020EA                     u3511:
  6455  0020EA  FFFF               	dw	65535	; assembler added errata NOP
  6456  0020EC  EF7B  F010         	goto	l4051
  6457  0020F0                     u3510:
  6458  0020F0  FFFF               	dw	65535	; assembler added errata NOP
  6459  0020F2                     
  6460                           ;motors.c: 737:                 motCounter[2][0] = 3;
  6461  0020F2  0E03               	movlw	3
  6462  0020F4  6E6B               	movwf	(_motCounter+4)^0,c
  6463  0020F6                     l4051:
  6464  0020F6  FFFF               	dw	65535	; assembler added errata NOP
  6465                           
  6466                           ;motors.c: 740:             LATC = stepMot3[motCounter[2][0]];
  6467  0020F8  0E84               	movlw	low _stepMot3
  6468  0020FA  246B               	addwf	(_motCounter+4)^0,w,c
  6469  0020FC  6ED9               	movwf	fsr2l,c
  6470  0020FE  6ADA               	clrf	fsr2h,c
  6471  002100  0E00               	movlw	high _stepMot3
  6472  002102  22DA               	addwfc	fsr2h,f,c
  6473  002104  50DF               	movf	indf2,w,c
  6474  002106  6E8B               	movwf	139,c	;volatile
  6475  002108                     l4053:
  6476  002108  FFFF               	dw	65535	; assembler added errata NOP
  6477  00210A  EC15  F012         	call	_stepMade	;wreg free
  6478  00210E  5012               	movf	?_stepMade^0,w,c
  6479  002110  1013               	iorwf	(?_stepMade+1)^0,w,c
  6480  002112  B4D8               	btfsc	status,2,c
  6481  002114  EF8E  F010         	goto	u3521
  6482  002118  EF91  F010         	goto	u3520
  6483  00211C                     u3521:
  6484  00211C  FFFF               	dw	65535	; assembler added errata NOP
  6485  00211E  EF84  F010         	goto	l4053
  6486  002122                     u3520:
  6487  002122                     l221:
  6488  002122  FFFF               	dw	65535	; assembler added errata NOP
  6489                           
  6490                           ;motors.c: 715:     while(!PORTEbits.RE2){
  6491  002124  A484               	btfss	132,2,c	;volatile
  6492  002126  EF97  F010         	goto	u3531
  6493  00212A  EF9A  F010         	goto	u3530
  6494  00212E                     u3531:
  6495  00212E  FFFF               	dw	65535	; assembler added errata NOP
  6496  002130  EF59  F010         	goto	l4041
  6497  002134                     u3530:
  6498  002134                     l224:
  6499  002134  FFFF               	dw	65535	; assembler added errata NOP
  6500                           
  6501                           ;motors.c: 757:     T0CONbits.TMR0ON = 0;
  6502  002136  9ED5               	bcf	213,7,c	;volatile
  6503                           
  6504                           ;motors.c: 758:     T2CONbits.TMR2ON = 0;
  6505  002138  94CA               	bcf	202,2,c	;volatile
  6506  00213A                     
  6507                           ;motors.c: 760:     resetTM0_Temp();
  6508  00213A  EC93  F012         	call	_resetTM0_Temp	;wreg free
  6509                           
  6510                           ;motors.c: 761:     resetTM2_Temp();
  6511  00213E  EC31  F012         	call	_resetTM2_Temp	;wreg free
  6512  002142                     
  6513                           ;motors.c: 763:     TMR0 = 0;
  6514  002142  0E00               	movlw	0
  6515  002144  6ED7               	movwf	215,c	;volatile
  6516  002146  0E00               	movlw	0
  6517  002148  6ED6               	movwf	214,c	;volatile
  6518  00214A                     
  6519                           ;motors.c: 764:     TMR2 = 0;
  6520  00214A  0E00               	movlw	0
  6521  00214C  6ECC               	movwf	204,c	;volatile
  6522                           
  6523                           ;motors.c: 767:     resetStep();
  6524  00214E  EC98  F012         	call	_resetStep	;wreg free
  6525  002152                     
  6526                           ;motors.c: 769:     return(tm0Error);
  6527  002152  5059               	movf	_tm0Error^0,w,c
  6528  002154  0012               	return		;funcret
  6529  002156  FFFF               	dw	65535	; errata NOP
  6530  002158                     __end_of_liftArm:
  6531                           	callstack 0
  6532                           
  6533 ;; *************** function _stepMade *****************
  6534 ;; Defined at:
  6535 ;;		line 60 in file "timer.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;		None
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;  temp            1   19[COMRAM] unsigned char 
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  2   17[COMRAM] unsigned int 
  6542 ;; Registers used:
  6543 ;;		wreg, status,2
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6549 ;;      Params:         2       0       0       0       0       0       0
  6550 ;;      Locals:         1       0       0       0       0       0       0
  6551 ;;      Temps:          0       0       0       0       0       0       0
  6552 ;;      Totals:         3       0       0       0       0       0       0
  6553 ;;Total ram usage:        3 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    4
  6556 ;; This function calls:
  6557 ;;		Nothing
  6558 ;; This function is called by:
  6559 ;;		_resetPosition
  6560 ;;		_moveToPoint
  6561 ;;		_touchObject
  6562 ;;		_touchTherm
  6563 ;;		_liftArm
  6564 ;;		_rotateObj
  6565 ;;		_pickObject
  6566 ;;		_releaseObj
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           	psect	text36
  6571  00242A                     __ptext36:
  6572                           	callstack 0
  6573  00242A                     _stepMade:
  6574                           	callstack 0
  6575  00242A  FFFF               	dw	65535	; assembler added errata NOP
  6576  00242C                     
  6577                           ;timer.c: 61:     unsigned char temp = stepToggle;
  6578  00242C  C05B  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6579  002430                     
  6580                           ;timer.c: 63:     stepToggle = 0;
  6581  002430  0E00               	movlw	0
  6582  002432  6E5B               	movwf	_stepToggle^0,c	;volatile
  6583  002434                     
  6584                           ;timer.c: 65:     return temp;
  6585  002434  C014  F012         	movff	stepMade@temp,?_stepMade
  6586  002438  6A13               	clrf	(?_stepMade+1)^0,c
  6587  00243A  0012               	return		;funcret
  6588  00243C  FFFF               	dw	65535	; errata NOP
  6589  00243E                     __end_of_stepMade:
  6590                           	callstack 0
  6591                           
  6592 ;; *************** function _resetTM2_Temp *****************
  6593 ;; Defined at:
  6594 ;;		line 26 in file "interrupt.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;		None
  6597 ;; Auto vars:     Size  Location     Type
  6598 ;;		None
  6599 ;; Return value:  Size  Location     Type
  6600 ;;                  1    wreg      void 
  6601 ;; Registers used:
  6602 ;;		wreg, status,2
  6603 ;; Tracked objects:
  6604 ;;		On entry : 0/0
  6605 ;;		On exit  : 0/0
  6606 ;;		Unchanged: 0/0
  6607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6608 ;;      Params:         0       0       0       0       0       0       0
  6609 ;;      Locals:         0       0       0       0       0       0       0
  6610 ;;      Temps:          0       0       0       0       0       0       0
  6611 ;;      Totals:         0       0       0       0       0       0       0
  6612 ;;Total ram usage:        0 bytes
  6613 ;; Hardware stack levels used:    1
  6614 ;; Hardware stack levels required when called:    4
  6615 ;; This function calls:
  6616 ;;		Nothing
  6617 ;; This function is called by:
  6618 ;;		_resetPosition
  6619 ;;		_moveToPoint
  6620 ;;		_touchObject
  6621 ;;		_touchTherm
  6622 ;;		_liftArm
  6623 ;;		_rotateObj
  6624 ;;		_pickObject
  6625 ;;		_releaseObj
  6626 ;; This function uses a non-reentrant model
  6627 ;;
  6628                           
  6629                           	psect	text37
  6630  002462                     __ptext37:
  6631                           	callstack 0
  6632  002462                     _resetTM2_Temp:
  6633                           	callstack 0
  6634  002462  FFFF               	dw	65535	; assembler added errata NOP
  6635  002464                     
  6636                           ;interrupt.c: 27:     single_cycle = 0;
  6637  002464  0E00               	movlw	0
  6638  002466  6E52               	movwf	(_single_cycle+1)^0,c
  6639  002468  0E00               	movlw	0
  6640  00246A  6E51               	movwf	_single_cycle^0,c
  6641                           
  6642                           ;interrupt.c: 28:     completeStep = 0;
  6643  00246C  0E00               	movlw	0
  6644  00246E  6E62               	movwf	_completeStep^0,c
  6645  002470  0012               	return		;funcret
  6646  002472  FFFF               	dw	65535	; errata NOP
  6647  002474                     __end_of_resetTM2_Temp:
  6648                           	callstack 0
  6649                           
  6650 ;; *************** function _resetTM0_Temp *****************
  6651 ;; Defined at:
  6652 ;;		line 22 in file "interrupt.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;		None
  6655 ;; Auto vars:     Size  Location     Type
  6656 ;;		None
  6657 ;; Return value:  Size  Location     Type
  6658 ;;                  1    wreg      void 
  6659 ;; Registers used:
  6660 ;;		wreg, status,2
  6661 ;; Tracked objects:
  6662 ;;		On entry : 0/0
  6663 ;;		On exit  : 0/0
  6664 ;;		Unchanged: 0/0
  6665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6666 ;;      Params:         0       0       0       0       0       0       0
  6667 ;;      Locals:         0       0       0       0       0       0       0
  6668 ;;      Temps:          0       0       0       0       0       0       0
  6669 ;;      Totals:         0       0       0       0       0       0       0
  6670 ;;Total ram usage:        0 bytes
  6671 ;; Hardware stack levels used:    1
  6672 ;; Hardware stack levels required when called:    4
  6673 ;; This function calls:
  6674 ;;		Nothing
  6675 ;; This function is called by:
  6676 ;;		_resetPosition
  6677 ;;		_moveToPoint
  6678 ;;		_touchObject
  6679 ;;		_touchTherm
  6680 ;;		_liftArm
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           	psect	text38
  6685  002526                     __ptext38:
  6686                           	callstack 0
  6687  002526                     _resetTM0_Temp:
  6688                           	callstack 0
  6689  002526  FFFF               	dw	65535	; assembler added errata NOP
  6690  002528                     
  6691                           ;interrupt.c: 23:     tm0Count = 0;
  6692  002528  0E00               	movlw	0
  6693  00252A  6E63               	movwf	_tm0Count^0,c
  6694  00252C  0012               	return		;funcret
  6695  00252E  FFFF               	dw	65535	; errata NOP
  6696  002530                     __end_of_resetTM0_Temp:
  6697                           	callstack 0
  6698                           
  6699 ;; *************** function _resetStep *****************
  6700 ;; Defined at:
  6701 ;;		line 78 in file "timer.c"
  6702 ;; Parameters:    Size  Location     Type
  6703 ;;		None
  6704 ;; Auto vars:     Size  Location     Type
  6705 ;;		None
  6706 ;; Return value:  Size  Location     Type
  6707 ;;                  1    wreg      void 
  6708 ;; Registers used:
  6709 ;;		wreg, status,2
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6715 ;;      Params:         0       0       0       0       0       0       0
  6716 ;;      Locals:         0       0       0       0       0       0       0
  6717 ;;      Temps:          0       0       0       0       0       0       0
  6718 ;;      Totals:         0       0       0       0       0       0       0
  6719 ;;Total ram usage:        0 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:    4
  6722 ;; This function calls:
  6723 ;;		Nothing
  6724 ;; This function is called by:
  6725 ;;		_resetPosition
  6726 ;;		_moveToPoint
  6727 ;;		_touchObject
  6728 ;;		_touchTherm
  6729 ;;		_liftArm
  6730 ;;		_rotateObj
  6731 ;; This function uses a non-reentrant model
  6732 ;;
  6733                           
  6734                           	psect	text39
  6735  002530                     __ptext39:
  6736                           	callstack 0
  6737  002530                     _resetStep:
  6738                           	callstack 0
  6739  002530  FFFF               	dw	65535	; assembler added errata NOP
  6740  002532                     
  6741                           ;timer.c: 79:     pwmStep = 0;
  6742  002532  0E00               	movlw	0
  6743  002534  6E5C               	movwf	_pwmStep^0,c	;volatile
  6744  002536  0012               	return		;funcret
  6745  002538  FFFF               	dw	65535	; errata NOP
  6746  00253A                     __end_of_resetStep:
  6747                           	callstack 0
  6748                           
  6749 ;; *************** function _getData *****************
  6750 ;; Defined at:
  6751 ;;		line 35 in file "usart.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;		None
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;		None
  6756 ;; Return value:  Size  Location     Type
  6757 ;;                  2   17[COMRAM] PTR struct .
  6758 ;; Registers used:
  6759 ;;		wreg, status,2, status,0
  6760 ;; Tracked objects:
  6761 ;;		On entry : 0/0
  6762 ;;		On exit  : 0/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6765 ;;      Params:         2       0       0       0       0       0       0
  6766 ;;      Locals:         0       0       0       0       0       0       0
  6767 ;;      Temps:          0       0       0       0       0       0       0
  6768 ;;      Totals:         2       0       0       0       0       0       0
  6769 ;;Total ram usage:        2 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; Hardware stack levels required when called:    4
  6772 ;; This function calls:
  6773 ;;		Nothing
  6774 ;; This function is called by:
  6775 ;;		_executeData
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           	psect	text40
  6780  0024A2                     __ptext40:
  6781                           	callstack 0
  6782  0024A2                     _getData:
  6783                           	callstack 0
  6784  0024A2  FFFF               	dw	65535	; assembler added errata NOP
  6785  0024A4                     
  6786                           ;usart.c: 36:     return(&dataSequence[0]);
  6787  0024A4  0ECA               	movlw	low _dataSequence
  6788  0024A6  6E12               	movwf	?_getData^0,c
  6789  0024A8  0E00               	movlw	high _dataSequence
  6790  0024AA  6E13               	movwf	(?_getData+1)^0,c
  6791  0024AC  0012               	return		;funcret
  6792  0024AE  FFFF               	dw	65535	; errata NOP
  6793  0024B0                     __end_of_getData:
  6794                           	callstack 0
  6795                           
  6796 ;; *************** function _clearTM0 *****************
  6797 ;; Defined at:
  6798 ;;		line 35 in file "motors.c"
  6799 ;; Parameters:    Size  Location     Type
  6800 ;;		None
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;		None
  6803 ;; Return value:  Size  Location     Type
  6804 ;;                  1    wreg      void 
  6805 ;; Registers used:
  6806 ;;		wreg, status,2
  6807 ;; Tracked objects:
  6808 ;;		On entry : 0/0
  6809 ;;		On exit  : 0/0
  6810 ;;		Unchanged: 0/0
  6811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6812 ;;      Params:         0       0       0       0       0       0       0
  6813 ;;      Locals:         0       0       0       0       0       0       0
  6814 ;;      Temps:          0       0       0       0       0       0       0
  6815 ;;      Totals:         0       0       0       0       0       0       0
  6816 ;;Total ram usage:        0 bytes
  6817 ;; Hardware stack levels used:    1
  6818 ;; Hardware stack levels required when called:    4
  6819 ;; This function calls:
  6820 ;;		Nothing
  6821 ;; This function is called by:
  6822 ;;		_main
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           	psect	text41
  6827  0024B0                     __ptext41:
  6828                           	callstack 0
  6829  0024B0                     _clearTM0:
  6830                           	callstack 0
  6831  0024B0  FFFF               	dw	65535	; assembler added errata NOP
  6832  0024B2                     
  6833                           ;motors.c: 36:     tm0Error = 0;
  6834  0024B2  0E00               	movlw	0
  6835  0024B4  6E5A               	movwf	(_tm0Error+1)^0,c
  6836  0024B6  0E00               	movlw	0
  6837  0024B8  6E59               	movwf	_tm0Error^0,c
  6838  0024BA  0012               	return		;funcret
  6839  0024BC  FFFF               	dw	65535	; errata NOP
  6840  0024BE                     __end_of_clearTM0:
  6841                           	callstack 0
  6842                           
  6843 ;; *************** function _isr *****************
  6844 ;; Defined at:
  6845 ;;		line 52 in file "interrupt.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;		None
  6848 ;; Auto vars:     Size  Location     Type
  6849 ;;  temp            1   16[COMRAM] unsigned char 
  6850 ;; Return value:  Size  Location     Type
  6851 ;;                  1    wreg      void 
  6852 ;; Registers used:
  6853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6854 ;; Tracked objects:
  6855 ;;		On entry : 0/0
  6856 ;;		On exit  : 0/0
  6857 ;;		Unchanged: 0/0
  6858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6859 ;;      Params:         0       0       0       0       0       0       0
  6860 ;;      Locals:         1       0       0       0       0       0       0
  6861 ;;      Temps:          6       0       0       0       0       0       0
  6862 ;;      Totals:         7       0       0       0       0       0       0
  6863 ;;Total ram usage:        7 bytes
  6864 ;; Hardware stack levels used:    1
  6865 ;; Hardware stack levels required when called:    3
  6866 ;; This function calls:
  6867 ;;		_abortAll
  6868 ;;		_fatalError
  6869 ;;		_increaseStep
  6870 ;;		_retPeriod
  6871 ;;		_setThermRel
  6872 ;;		_setTouchRel
  6873 ;;		_toggleStep
  6874 ;;		_whatsTM0Limit
  6875 ;;		_writeTM0
  6876 ;;		i2_storeData
  6877 ;; This function is called by:
  6878 ;;		Interrupt level 2
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           	psect	intcode
  6883  000008                     __pintcode:
  6884                           	callstack 0
  6885  000008                     _isr:
  6886                           	callstack 0
  6887  000008  FFFF               	dw	65535	; assembler added errata NOP
  6888                           
  6889                           ;incstack = 0
  6890  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6891  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6892  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6893  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6894  000018  CFF4 F010          	movff	prodh,??_isr+5
  6895  00001C                     
  6896                           ;interrupt.c: 56:     if(INTCONbits.T0IF){
  6897  00001C  A4F2               	btfss	242,2,c	;volatile
  6898  00001E  EF13  F000         	goto	i2u260_41
  6899  000022  EF16  F000         	goto	i2u260_40
  6900  000026                     i2u260_41:
  6901  000026  FFFF               	dw	65535	; assembler added errata NOP
  6902  000028  EF2C  F000         	goto	i2l3495
  6903  00002C                     i2u260_40:
  6904  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6905  00002E                     
  6906                           ;interrupt.c: 57:         INTCONbits.T0IF = 0;
  6907  00002E  94F2               	bcf	242,2,c	;volatile
  6908  000030                     
  6909                           ;interrupt.c: 60:         tm0Count++;
  6910  000030  2A63               	incf	_tm0Count^0,f,c
  6911  000032                     
  6912                           ;interrupt.c: 62:         if(tm0Count >= whatsTM0Limit()){
  6913  000032  ECBC  F012         	call	_whatsTM0Limit	;wreg free
  6914  000036  6E0B               	movwf	??_isr^0,c
  6915  000038  500B               	movf	??_isr^0,w,c
  6916  00003A  5C63               	subwf	_tm0Count^0,w,c
  6917  00003C  A0D8               	btfss	status,0,c
  6918  00003E  EF23  F000         	goto	i2u261_41
  6919  000042  EF26  F000         	goto	i2u261_40
  6920  000046                     i2u261_41:
  6921  000046  FFFF               	dw	65535	; assembler added errata NOP
  6922  000048  EF2C  F000         	goto	i2l3495
  6923  00004C                     i2u261_40:
  6924  00004C  FFFF               	dw	65535	; assembler added errata NOP
  6925  00004E                     
  6926                           ;interrupt.c: 63:             T0CONbits.TMR0ON = 0;
  6927  00004E  9ED5               	bcf	213,7,c	;volatile
  6928  000050                     
  6929                           ;interrupt.c: 64:             tm0Count = 0;
  6930  000050  0E00               	movlw	0
  6931  000052  6E63               	movwf	_tm0Count^0,c
  6932  000054                     
  6933                           ;interrupt.c: 65:             writeTM0();
  6934  000054  EC5F  F012         	call	_writeTM0	;wreg free
  6935  000058                     i2l3495:
  6936  000058  FFFF               	dw	65535	; assembler added errata NOP
  6937                           
  6938                           ;interrupt.c: 70:     if(PIR1bits.TMR1IF){
  6939  00005A  A09E               	btfss	158,0,c	;volatile
  6940  00005C  EF32  F000         	goto	i2u262_41
  6941  000060  EF35  F000         	goto	i2u262_40
  6942  000064                     i2u262_41:
  6943  000064  FFFF               	dw	65535	; assembler added errata NOP
  6944  000066  EF45  F000         	goto	i2l3503
  6945  00006A                     i2u262_40:
  6946  00006A  FFFF               	dw	65535	; assembler added errata NOP
  6947  00006C                     
  6948                           ;interrupt.c: 71:         PIR1bits.TMR1IF = 0;
  6949  00006C  909E               	bcf	158,0,c	;volatile
  6950  00006E                     
  6951                           ;interrupt.c: 72:         if(fatalError()){
  6952  00006E  ECC4  F012         	call	_fatalError	;wreg free
  6953  000072  0900               	iorlw	0
  6954  000074  B4D8               	btfsc	status,2,c
  6955  000076  EF3F  F000         	goto	i2u263_41
  6956  00007A  EF42  F000         	goto	i2u263_40
  6957  00007E                     i2u263_41:
  6958  00007E  FFFF               	dw	65535	; assembler added errata NOP
  6959  000080  EF45  F000         	goto	i2l3503
  6960  000084                     i2u263_40:
  6961  000084  FFFF               	dw	65535	; assembler added errata NOP
  6962  000086                     
  6963                           ;interrupt.c: 73:             abortAll();
  6964  000086  EC3A  F012         	call	_abortAll	;wreg free
  6965  00008A                     i2l3503:
  6966  00008A  FFFF               	dw	65535	; assembler added errata NOP
  6967                           
  6968                           ;interrupt.c: 78:     if(PIR1bits.TMR2IF){
  6969  00008C  A29E               	btfss	158,1,c	;volatile
  6970  00008E  EF4B  F000         	goto	i2u264_41
  6971  000092  EF4E  F000         	goto	i2u264_40
  6972  000096                     i2u264_41:
  6973  000096  FFFF               	dw	65535	; assembler added errata NOP
  6974  000098  EF80  F000         	goto	i2l3525
  6975  00009C                     i2u264_40:
  6976  00009C  FFFF               	dw	65535	; assembler added errata NOP
  6977  00009E                     
  6978                           ;interrupt.c: 79:         PIR1bits.TMR2IF = 0;
  6979  00009E  929E               	bcf	158,1,c	;volatile
  6980  0000A0                     
  6981                           ;interrupt.c: 80:         single_cycle++;
  6982  0000A0  4A51               	infsnz	_single_cycle^0,f,c
  6983  0000A2  2A52               	incf	(_single_cycle+1)^0,f,c
  6984  0000A4                     
  6985                           ;interrupt.c: 83:         if(single_cycle > retPeriod()){
  6986  0000A4  EC66  F012         	call	_retPeriod	;wreg free
  6987  0000A8  5051               	movf	_single_cycle^0,w,c
  6988  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  6989  0000AC  5052               	movf	(_single_cycle+1)^0,w,c
  6990  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  6991  0000B0  B0D8               	btfsc	status,0,c
  6992  0000B2  EF5D  F000         	goto	i2u265_41
  6993  0000B6  EF60  F000         	goto	i2u265_40
  6994  0000BA                     i2u265_41:
  6995  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  6996  0000BC  EF80  F000         	goto	i2l3525
  6997  0000C0                     i2u265_40:
  6998  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  6999  0000C2                     
  7000                           ;interrupt.c: 84:             single_cycle = 0;
  7001  0000C2  0E00               	movlw	0
  7002  0000C4  6E52               	movwf	(_single_cycle+1)^0,c
  7003  0000C6  0E00               	movlw	0
  7004  0000C8  6E51               	movwf	_single_cycle^0,c
  7005  0000CA                     
  7006                           ;interrupt.c: 85:             completeStep++;
  7007  0000CA  2A62               	incf	_completeStep^0,f,c
  7008  0000CC                     
  7009                           ;interrupt.c: 88:             if(completeStep != 0 && !(completeStep % 2)){
  7010  0000CC  5062               	movf	_completeStep^0,w,c
  7011  0000CE  B4D8               	btfsc	status,2,c
  7012  0000D0  EF6C  F000         	goto	i2u266_41
  7013  0000D4  EF6F  F000         	goto	i2u266_40
  7014  0000D8                     i2u266_41:
  7015  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  7016  0000DA  EF7D  F000         	goto	i2l3523
  7017  0000DE                     i2u266_40:
  7018  0000DE  FFFF               	dw	65535	; assembler added errata NOP
  7019  0000E0  B062               	btfsc	_completeStep^0,0,c
  7020  0000E2  EF75  F000         	goto	i2u267_41
  7021  0000E6  EF78  F000         	goto	i2u267_40
  7022  0000EA                     i2u267_41:
  7023  0000EA  FFFF               	dw	65535	; assembler added errata NOP
  7024  0000EC  EF7D  F000         	goto	i2l3523
  7025  0000F0                     i2u267_40:
  7026  0000F0  FFFF               	dw	65535	; assembler added errata NOP
  7027  0000F2                     
  7028                           ;interrupt.c: 90:                 completeStep = 0;
  7029  0000F2  0E00               	movlw	0
  7030  0000F4  6E62               	movwf	_completeStep^0,c
  7031  0000F6                     
  7032                           ;interrupt.c: 93:                 increaseStep();
  7033  0000F6  ECC0  F012         	call	_increaseStep	;wreg free
  7034  0000FA                     i2l3523:
  7035  0000FA  FFFF               	dw	65535	; assembler added errata NOP
  7036                           
  7037                           ;interrupt.c: 98:             toggleStep();
  7038  0000FC  EC9D  F012         	call	_toggleStep	;wreg free
  7039  000100                     i2l3525:
  7040  000100  FFFF               	dw	65535	; assembler added errata NOP
  7041                           
  7042                           ;interrupt.c: 103:     if(PIR1bits.ADIF){
  7043  000102  AC9E               	btfss	158,6,c	;volatile
  7044  000104  EF86  F000         	goto	i2u268_41
  7045  000108  EF89  F000         	goto	i2u268_40
  7046  00010C                     i2u268_41:
  7047  00010C  FFFF               	dw	65535	; assembler added errata NOP
  7048  00010E  EFB6  F000         	goto	i2l3537
  7049  000112                     i2u268_40:
  7050  000112  FFFF               	dw	65535	; assembler added errata NOP
  7051  000114                     
  7052                           ;interrupt.c: 104:         PIR1bits.ADIF = 0;
  7053  000114  9C9E               	bcf	158,6,c	;volatile
  7054                           
  7055                           ;interrupt.c: 107:         ADC_res = ADRESL;
  7056  000116  CFC3 F053          	movff	4035,_ADC_res	;volatile
  7057  00011A  6A54               	clrf	(_ADC_res+1)^0,c
  7058  00011C                     
  7059                           ;interrupt.c: 108:         ADC_res |= (ADRESH << 8);
  7060  00011C  50C4               	movf	196,w,c	;volatile
  7061  00011E  6E0C               	movwf	(??_isr+1)^0,c
  7062  000120  6A0B               	clrf	??_isr^0,c
  7063  000122  500B               	movf	??_isr^0,w,c
  7064  000124  1253               	iorwf	_ADC_res^0,f,c
  7065  000126  500C               	movf	(??_isr+1)^0,w,c
  7066  000128  1254               	iorwf	(_ADC_res+1)^0,f,c
  7067                           
  7068                           ;interrupt.c: 111:         if(ADC_res > therm_pressure){
  7069  00012A  0453               	decf	_ADC_res^0,w,c
  7070  00012C  0E04               	movlw	4
  7071  00012E  5854               	subwfb	(_ADC_res+1)^0,w,c
  7072  000130  A0D8               	btfss	status,0,c
  7073  000132  EF9D  F000         	goto	i2u269_41
  7074  000136  EFA0  F000         	goto	i2u269_40
  7075  00013A                     i2u269_41:
  7076  00013A  FFFF               	dw	65535	; assembler added errata NOP
  7077  00013C  EFA7  F000         	goto	i2l3533
  7078  000140                     i2u269_40:
  7079  000140  FFFF               	dw	65535	; assembler added errata NOP
  7080  000142                     
  7081                           ;interrupt.c: 113:             setTouchRel();
  7082  000142  ECA2  F012         	call	_setTouchRel	;wreg free
  7083                           
  7084                           ;interrupt.c: 114:             setThermRel();
  7085  000146  ECA7  F012         	call	_setThermRel	;wreg free
  7086                           
  7087                           ;interrupt.c: 115:         }else if(ADC_res > touch_pressure){
  7088  00014A  EFB6  F000         	goto	i2l3537
  7089  00014E                     i2l3533:
  7090  00014E  FFFF               	dw	65535	; assembler added errata NOP
  7091  000150  0453               	decf	_ADC_res^0,w,c
  7092  000152  0E02               	movlw	2
  7093  000154  5854               	subwfb	(_ADC_res+1)^0,w,c
  7094  000156  A0D8               	btfss	status,0,c
  7095  000158  EFB0  F000         	goto	i2u270_41
  7096  00015C  EFB3  F000         	goto	i2u270_40
  7097  000160                     i2u270_41:
  7098  000160  FFFF               	dw	65535	; assembler added errata NOP
  7099  000162  EFB6  F000         	goto	i2l3537
  7100  000166                     i2u270_40:
  7101  000166  FFFF               	dw	65535	; assembler added errata NOP
  7102  000168                     
  7103                           ;interrupt.c: 117:             setTouchRel();
  7104  000168  ECA2  F012         	call	_setTouchRel	;wreg free
  7105  00016C                     i2l3537:
  7106  00016C  FFFF               	dw	65535	; assembler added errata NOP
  7107                           
  7108                           ;interrupt.c: 122:     if(PIR1bits.RC1IF){
  7109  00016E  AA9E               	btfss	158,5,c	;volatile
  7110  000170  EFBC  F000         	goto	i2u271_41
  7111  000174  EFBF  F000         	goto	i2u271_40
  7112  000178                     i2u271_41:
  7113  000178  FFFF               	dw	65535	; assembler added errata NOP
  7114  00017A  EFC6  F000         	goto	i2l484
  7115  00017E                     i2u271_40:
  7116  00017E  FFFF               	dw	65535	; assembler added errata NOP
  7117  000180                     
  7118                           ;interrupt.c: 123:         PIR1bits.RC1IF = 0;
  7119  000180  9A9E               	bcf	158,5,c	;volatile
  7120                           
  7121                           ;interrupt.c: 126:         unsigned char temp = RCREG1;
  7122  000182  CFAE F011          	movff	4014,isr@temp	;volatile
  7123  000186                     
  7124                           ;interrupt.c: 128:         storeData(temp);
  7125  000186  5011               	movf	isr@temp^0,w,c
  7126  000188  ECDE  F00B         	call	i2_storeData
  7127  00018C                     i2l484:
  7128  00018C  FFFF               	dw	65535	; assembler added errata NOP
  7129  00018E  C010  FFF4         	movff	??_isr+5,prodh
  7130  000192  C00F  FFF3         	movff	??_isr+4,prodl
  7131  000196  C00E  FFDA         	movff	??_isr+3,fsr2h
  7132  00019A  C00D  FFD9         	movff	??_isr+2,fsr2l
  7133  00019E  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7134  0001A0  0011               	retfie		f
  7135  0001A2  FFFF               	dw	65535	; errata NOP
  7136  0001A4                     __end_of_isr:
  7137                           	callstack 0
  7138                           
  7139 ;; *************** function i2_storeData *****************
  7140 ;; Defined at:
  7141 ;;		line 164 in file "usart.c"
  7142 ;; Parameters:    Size  Location     Type
  7143 ;;  data            1    wreg     unsigned char 
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;  data            1    9[COMRAM] unsigned char 
  7146 ;; Return value:  Size  Location     Type
  7147 ;;                  1    wreg      void 
  7148 ;; Registers used:
  7149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7155 ;;      Params:         0       0       0       0       0       0       0
  7156 ;;      Locals:         1       0       0       0       0       0       0
  7157 ;;      Temps:          2       0       0       0       0       0       0
  7158 ;;      Totals:         3       0       0       0       0       0       0
  7159 ;;Total ram usage:        3 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; Hardware stack levels required when called:    2
  7162 ;; This function calls:
  7163 ;;		i2_printError
  7164 ;; This function is called by:
  7165 ;;		_isr
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           	psect	text43
  7170  0017BC                     __ptext43:
  7171                           	callstack 0
  7172  0017BC                     i2_storeData:
  7173                           	callstack 0
  7174  0017BC  FFFF               	dw	65535	; assembler added errata NOP
  7175                           
  7176                           ;incstack = 0
  7177                           ;i2storeData@data stored from wreg
  7178  0017BE  6E0A               	movwf	i2storeData@data^0,c
  7179  0017C0                     
  7180                           ;usart.c: 166:     static unsigned char counter = 0;;usart.c: 167:     static unsigned c
      +                          har mexLength = 5;;usart.c: 168:     static unsigned char command;;usart.c: 169:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 173:     receivedMex[counter] = data;
  7181  0017C0  0E43               	movlw	low storeData@receivedMex
  7182  0017C2  245E               	addwf	storeData@counter^0,w,c
  7183  0017C4  6ED9               	movwf	fsr2l,c
  7184  0017C6  6ADA               	clrf	fsr2h,c
  7185  0017C8  0E00               	movlw	high storeData@receivedMex
  7186  0017CA  22DA               	addwfc	fsr2h,f,c
  7187  0017CC  C00A  FFDF         	movff	i2storeData@data,indf2
  7188  0017D0                     
  7189                           ;usart.c: 175:     counter++;
  7190  0017D0  2A5E               	incf	storeData@counter^0,f,c
  7191                           
  7192                           ;usart.c: 178:     switch(receivedMex[0]){
  7193  0017D2  EFFA  F00B         	goto	i2l3385
  7194  0017D6                     i2l3377:
  7195  0017D6  FFFF               	dw	65535	; assembler added errata NOP
  7196                           
  7197                           ;usart.c: 180:             mexLength = 5;
  7198  0017D8  0E05               	movlw	5
  7199  0017DA  6E6D               	movwf	storeData@mexLength^0,c
  7200                           
  7201                           ;usart.c: 181:             break;
  7202  0017DC  EF15  F00C         	goto	i2l3387
  7203  0017E0                     i2l3379:
  7204  0017E0  FFFF               	dw	65535	; assembler added errata NOP
  7205                           
  7206                           ;usart.c: 183:             mexLength = 9;
  7207  0017E2  0E09               	movlw	9
  7208  0017E4  6E6D               	movwf	storeData@mexLength^0,c
  7209                           
  7210                           ;usart.c: 184:             break;
  7211  0017E6  EF15  F00C         	goto	i2l3387
  7212  0017EA                     i2l3381:
  7213  0017EA  FFFF               	dw	65535	; assembler added errata NOP
  7214                           
  7215                           ;usart.c: 186:             mexLength = 1;
  7216  0017EC  0E01               	movlw	1
  7217  0017EE  6E6D               	movwf	storeData@mexLength^0,c
  7218                           
  7219                           ;usart.c: 187:             break;
  7220  0017F0  EF15  F00C         	goto	i2l3387
  7221  0017F4                     i2l3385:
  7222  0017F4  FFFF               	dw	65535	; assembler added errata NOP
  7223  0017F6  5043               	movf	storeData@receivedMex^0,w,c
  7224  0017F8  6E08               	movwf	??i2_storeData^0,c
  7225  0017FA  6A09               	clrf	(??i2_storeData+1)^0,c
  7226                           
  7227                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7228                           ; Switch size 1, requested type "simple"
  7229                           ; Number of cases is 1, Range of values is 0 to 0
  7230                           ; switch strategies available:
  7231                           ; Name         Instructions Cycles
  7232                           ; simple_byte            4     3 (average)
  7233                           ;	Chosen strategy is simple_byte
  7234  0017FC  5009               	movf	(??i2_storeData+1)^0,w,c
  7235  0017FE  0A00               	xorlw	0	; case 0
  7236  001800  B4D8               	btfsc	status,2,c
  7237  001802  EF05  F00C         	goto	i2l4633
  7238  001806  EF15  F00C         	goto	i2l3387
  7239  00180A                     i2l4633:
  7240  00180A  FFFF               	dw	65535	; assembler added errata NOP
  7241                           
  7242                           ; Switch size 1, requested type "simple"
  7243                           ; Number of cases is 3, Range of values is 0 to 2
  7244                           ; switch strategies available:
  7245                           ; Name         Instructions Cycles
  7246                           ; simple_byte           10     6 (average)
  7247                           ;	Chosen strategy is simple_byte
  7248  00180C  5008               	movf	??i2_storeData^0,w,c
  7249  00180E  0A00               	xorlw	0	; case 0
  7250  001810  B4D8               	btfsc	status,2,c
  7251  001812  EFEB  F00B         	goto	i2l3377
  7252  001816  0A01               	xorlw	1	; case 1
  7253  001818  B4D8               	btfsc	status,2,c
  7254  00181A  EFF0  F00B         	goto	i2l3379
  7255  00181E  0A03               	xorlw	3	; case 2
  7256  001820  B4D8               	btfsc	status,2,c
  7257  001822  EFF5  F00B         	goto	i2l3381
  7258  001826  EF15  F00C         	goto	i2l3387
  7259  00182A                     i2l3387:
  7260  00182A  FFFF               	dw	65535	; assembler added errata NOP
  7261                           
  7262                           ;usart.c: 194:     if(counter >= mexLength){
  7263  00182C  506D               	movf	storeData@mexLength^0,w,c
  7264  00182E  5C5E               	subwf	storeData@counter^0,w,c
  7265  001830  A0D8               	btfss	status,0,c
  7266  001832  EF1D  F00C         	goto	i2u253_41
  7267  001836  EF20  F00C         	goto	i2u253_40
  7268  00183A                     i2u253_41:
  7269  00183A  FFFF               	dw	65535	; assembler added errata NOP
  7270  00183C  EF98  F00C         	goto	i2l598
  7271  001840                     i2u253_40:
  7272  001840  FFFF               	dw	65535	; assembler added errata NOP
  7273  001842                     
  7274                           ;usart.c: 195:         counter = 0;
  7275  001842  0E00               	movlw	0
  7276  001844  6E5E               	movwf	storeData@counter^0,c
  7277                           
  7278                           ;usart.c: 198:         switch(receivedMex[0]){
  7279  001846  EF7D  F00C         	goto	i2l3409
  7280  00184A                     i2l3391:
  7281  00184A  FFFF               	dw	65535	; assembler added errata NOP
  7282                           
  7283                           ;usart.c: 200:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7284  00184C  5061               	movf	_dataCounter^0,w,c
  7285  00184E  0D04               	mullw	4
  7286  001850  0ECA               	movlw	low _dataSequence
  7287  001852  24F3               	addwf	243,w,c
  7288  001854  6ED9               	movwf	fsr2l,c
  7289  001856  0E00               	movlw	high _dataSequence
  7290  001858  20F4               	addwfc	prodh,w,c
  7291  00185A  6EDA               	movwf	fsr2h,c
  7292  00185C  C044  FFDF         	movff	storeData@receivedMex+1,indf2
  7293                           
  7294                           ;usart.c: 201:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  7295  001860  5061               	movf	_dataCounter^0,w,c
  7296  001862  0D04               	mullw	4
  7297  001864  0ECB               	movlw	low (_dataSequence+1)
  7298  001866  24F3               	addwf	243,w,c
  7299  001868  6ED9               	movwf	fsr2l,c
  7300  00186A  0E00               	movlw	high (_dataSequence+1)
  7301  00186C  20F4               	addwfc	prodh,w,c
  7302  00186E  6EDA               	movwf	fsr2h,c
  7303  001870  5045               	movf	(storeData@receivedMex+2)^0,w,c
  7304  001872  0D05               	mullw	5
  7305  001874  CFF3 FFDF          	movff	prodl,indf2
  7306                           
  7307                           ;usart.c: 202:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  7308  001878  5061               	movf	_dataCounter^0,w,c
  7309  00187A  0D04               	mullw	4
  7310  00187C  0ECC               	movlw	low (_dataSequence+2)
  7311  00187E  24F3               	addwf	243,w,c
  7312  001880  6ED9               	movwf	fsr2l,c
  7313  001882  0E00               	movlw	high (_dataSequence+2)
  7314  001884  20F4               	addwfc	prodh,w,c
  7315  001886  6EDA               	movwf	fsr2h,c
  7316  001888  5046               	movf	(storeData@receivedMex+3)^0,w,c
  7317  00188A  0D05               	mullw	5
  7318  00188C  CFF3 FFDF          	movff	prodl,indf2
  7319                           
  7320                           ;usart.c: 203:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7321  001890  5061               	movf	_dataCounter^0,w,c
  7322  001892  0D04               	mullw	4
  7323  001894  0ECD               	movlw	low (_dataSequence+3)
  7324  001896  24F3               	addwf	243,w,c
  7325  001898  6ED9               	movwf	fsr2l,c
  7326  00189A  0E00               	movlw	high (_dataSequence+3)
  7327  00189C  20F4               	addwfc	prodh,w,c
  7328  00189E  6EDA               	movwf	fsr2h,c
  7329  0018A0  C047  FFDF         	movff	storeData@receivedMex+4,indf2
  7330  0018A4                     
  7331                           ;usart.c: 205:                 dataCounter++;
  7332  0018A4  2A61               	incf	_dataCounter^0,f,c
  7333                           
  7334                           ;usart.c: 206:                 break;
  7335  0018A6  EF98  F00C         	goto	i2l598
  7336  0018AA                     i2l595:
  7337  0018AA  FFFF               	dw	65535	; assembler added errata NOP
  7338                           
  7339                           ;usart.c: 209:                 newSequenceData.L = receivedMex[1];
  7340  0018AC  C044  F0DE         	movff	storeData@receivedMex+1,_newSequenceData
  7341                           
  7342                           ;usart.c: 210:                 newSequenceData.W = receivedMex[2];
  7343  0018B0  C045  F0DF         	movff	storeData@receivedMex+2,_newSequenceData+1
  7344  0018B4                     
  7345                           ;usart.c: 211:                 newSequenceData.init_posX = receivedMex[3] * 5;
  7346  0018B4  5046               	movf	(storeData@receivedMex+3)^0,w,c
  7347  0018B6  0D05               	mullw	5
  7348  0018B8  CFF3 F0E0          	movff	prodl,_newSequenceData+2
  7349                           
  7350                           ;usart.c: 212:                 newSequenceData.init_posY = receivedMex[4] * 5;
  7351  0018BC  5047               	movf	(storeData@receivedMex+4)^0,w,c
  7352  0018BE  0D05               	mullw	5
  7353  0018C0  CFF3 F0E1          	movff	prodl,_newSequenceData+3
  7354  0018C4                     
  7355                           ;usart.c: 213:                 newSequenceData.init_rot = receivedMex[5];
  7356  0018C4  C048  F0E2         	movff	storeData@receivedMex+5,_newSequenceData+4
  7357                           
  7358                           ;usart.c: 214:                 newSequenceData.end_posX = receivedMex[6] * 5;
  7359  0018C8  5049               	movf	(storeData@receivedMex+6)^0,w,c
  7360  0018CA  0D05               	mullw	5
  7361  0018CC  CFF3 F0E3          	movff	prodl,_newSequenceData+5
  7362                           
  7363                           ;usart.c: 215:                 newSequenceData.end_posY = receivedMex[7] * 5;
  7364  0018D0  504A               	movf	(storeData@receivedMex+7)^0,w,c
  7365  0018D2  0D05               	mullw	5
  7366  0018D4  CFF3 F0E4          	movff	prodl,_newSequenceData+6
  7367  0018D8                     
  7368                           ;usart.c: 216:                 newSequenceData.end_rot = receivedMex[8];
  7369  0018D8  C04B  F0E5         	movff	storeData@receivedMex+8,_newSequenceData+7
  7370  0018DC                     
  7371                           ;usart.c: 218:                 _newSequence = 1;
  7372  0018DC  0E01               	movlw	1
  7373  0018DE  6E5F               	movwf	__newSequence^0,c
  7374                           
  7375                           ;usart.c: 219:                 break;
  7376  0018E0  EF98  F00C         	goto	i2l598
  7377  0018E4                     i2l3403:
  7378  0018E4  FFFF               	dw	65535	; assembler added errata NOP
  7379                           
  7380                           ;usart.c: 222:                 _fatalError = 1;
  7381  0018E6  0E01               	movlw	1
  7382  0018E8  6E60               	movwf	__fatalError^0,c
  7383                           
  7384                           ;usart.c: 223:                 break;
  7385  0018EA  EF98  F00C         	goto	i2l598
  7386  0018EE                     i2l3405:
  7387  0018EE  FFFF               	dw	65535	; assembler added errata NOP
  7388                           
  7389                           ;usart.c: 226:                 printError(8);
  7390  0018F0  0E08               	movlw	8
  7391  0018F2  ECC4  F00D         	call	i2_printError
  7392                           
  7393                           ;usart.c: 227:                 break;
  7394  0018F6  EF98  F00C         	goto	i2l598
  7395  0018FA                     i2l3409:
  7396  0018FA  FFFF               	dw	65535	; assembler added errata NOP
  7397  0018FC  5043               	movf	storeData@receivedMex^0,w,c
  7398  0018FE  6E08               	movwf	??i2_storeData^0,c
  7399  001900  6A09               	clrf	(??i2_storeData+1)^0,c
  7400                           
  7401                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7402                           ; Switch size 1, requested type "simple"
  7403                           ; Number of cases is 1, Range of values is 0 to 0
  7404                           ; switch strategies available:
  7405                           ; Name         Instructions Cycles
  7406                           ; simple_byte            4     3 (average)
  7407                           ;	Chosen strategy is simple_byte
  7408  001902  5009               	movf	(??i2_storeData+1)^0,w,c
  7409  001904  0A00               	xorlw	0	; case 0
  7410  001906  B4D8               	btfsc	status,2,c
  7411  001908  EF88  F00C         	goto	i2l4635
  7412  00190C  EF77  F00C         	goto	i2l3405
  7413  001910                     i2l4635:
  7414  001910  FFFF               	dw	65535	; assembler added errata NOP
  7415                           
  7416                           ; Switch size 1, requested type "simple"
  7417                           ; Number of cases is 3, Range of values is 0 to 2
  7418                           ; switch strategies available:
  7419                           ; Name         Instructions Cycles
  7420                           ; simple_byte           10     6 (average)
  7421                           ;	Chosen strategy is simple_byte
  7422  001912  5008               	movf	??i2_storeData^0,w,c
  7423  001914  0A00               	xorlw	0	; case 0
  7424  001916  B4D8               	btfsc	status,2,c
  7425  001918  EF25  F00C         	goto	i2l3391
  7426  00191C  0A01               	xorlw	1	; case 1
  7427  00191E  B4D8               	btfsc	status,2,c
  7428  001920  EF55  F00C         	goto	i2l595
  7429  001924  0A03               	xorlw	3	; case 2
  7430  001926  B4D8               	btfsc	status,2,c
  7431  001928  EF72  F00C         	goto	i2l3403
  7432  00192C  EF77  F00C         	goto	i2l3405
  7433  001930                     i2l598:
  7434  001930  FFFF               	dw	65535	; assembler added errata NOP
  7435  001932  0012               	return		;funcret
  7436  001934  FFFF               	dw	65535	; errata NOP
  7437  001936                     __end_ofi2_storeData:
  7438                           	callstack 0
  7439                           
  7440 ;; *************** function _writeTM0 *****************
  7441 ;; Defined at:
  7442 ;;		line 28 in file "motors.c"
  7443 ;; Parameters:    Size  Location     Type
  7444 ;;		None
  7445 ;; Auto vars:     Size  Location     Type
  7446 ;;		None
  7447 ;; Return value:  Size  Location     Type
  7448 ;;                  1    wreg      void 
  7449 ;; Registers used:
  7450 ;;		wreg, status,2
  7451 ;; Tracked objects:
  7452 ;;		On entry : 0/0
  7453 ;;		On exit  : 0/0
  7454 ;;		Unchanged: 0/0
  7455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7456 ;;      Params:         0       0       0       0       0       0       0
  7457 ;;      Locals:         0       0       0       0       0       0       0
  7458 ;;      Temps:          0       0       0       0       0       0       0
  7459 ;;      Totals:         0       0       0       0       0       0       0
  7460 ;;Total ram usage:        0 bytes
  7461 ;; Hardware stack levels used:    1
  7462 ;; This function calls:
  7463 ;;		Nothing
  7464 ;; This function is called by:
  7465 ;;		_isr
  7466 ;; This function uses a non-reentrant model
  7467 ;;
  7468                           
  7469                           	psect	text44
  7470  0024BE                     __ptext44:
  7471                           	callstack 0
  7472  0024BE                     _writeTM0:
  7473                           	callstack 0
  7474  0024BE  FFFF               	dw	65535	; assembler added errata NOP
  7475  0024C0                     
  7476                           ;motors.c: 29:     tm0Error = 1;
  7477  0024C0  0E00               	movlw	0
  7478  0024C2  6E5A               	movwf	(_tm0Error+1)^0,c
  7479  0024C4  0E01               	movlw	1
  7480  0024C6  6E59               	movwf	_tm0Error^0,c
  7481  0024C8  0012               	return		;funcret
  7482  0024CA  FFFF               	dw	65535	; errata NOP
  7483  0024CC                     __end_of_writeTM0:
  7484                           	callstack 0
  7485                           
  7486 ;; *************** function _whatsTM0Limit *****************
  7487 ;; Defined at:
  7488 ;;		line 42 in file "motors.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;		None
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;		None
  7493 ;; Return value:  Size  Location     Type
  7494 ;;                  1    wreg      unsigned char 
  7495 ;; Registers used:
  7496 ;;		wreg, status,2
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7502 ;;      Params:         0       0       0       0       0       0       0
  7503 ;;      Locals:         0       0       0       0       0       0       0
  7504 ;;      Temps:          0       0       0       0       0       0       0
  7505 ;;      Totals:         0       0       0       0       0       0       0
  7506 ;;Total ram usage:        0 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; This function calls:
  7509 ;;		Nothing
  7510 ;; This function is called by:
  7511 ;;		_isr
  7512 ;; This function uses a non-reentrant model
  7513 ;;
  7514                           
  7515                           	psect	text45
  7516  002578                     __ptext45:
  7517                           	callstack 0
  7518  002578                     _whatsTM0Limit:
  7519                           	callstack 0
  7520  002578  FFFF               	dw	65535	; assembler added errata NOP
  7521  00257A                     
  7522                           ;motors.c: 43:     return(tm0Limit);
  7523  00257A  5066               	movf	_tm0Limit^0,w,c
  7524  00257C  0012               	return		;funcret
  7525  00257E  FFFF               	dw	65535	; errata NOP
  7526  002580                     __end_of_whatsTM0Limit:
  7527                           	callstack 0
  7528                           
  7529 ;; *************** function _toggleStep *****************
  7530 ;; Defined at:
  7531 ;;		line 93 in file "timer.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;		None
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;		None
  7536 ;; Return value:  Size  Location     Type
  7537 ;;                  1    wreg      void 
  7538 ;; Registers used:
  7539 ;;		wreg, status,2
  7540 ;; Tracked objects:
  7541 ;;		On entry : 0/0
  7542 ;;		On exit  : 0/0
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7545 ;;      Params:         0       0       0       0       0       0       0
  7546 ;;      Locals:         0       0       0       0       0       0       0
  7547 ;;      Temps:          0       0       0       0       0       0       0
  7548 ;;      Totals:         0       0       0       0       0       0       0
  7549 ;;Total ram usage:        0 bytes
  7550 ;; Hardware stack levels used:    1
  7551 ;; This function calls:
  7552 ;;		Nothing
  7553 ;; This function is called by:
  7554 ;;		_isr
  7555 ;; This function uses a non-reentrant model
  7556 ;;
  7557                           
  7558                           	psect	text46
  7559  00253A                     __ptext46:
  7560                           	callstack 0
  7561  00253A                     _toggleStep:
  7562                           	callstack 0
  7563  00253A  FFFF               	dw	65535	; assembler added errata NOP
  7564  00253C                     
  7565                           ;timer.c: 94:     stepToggle = 1;
  7566  00253C  0E01               	movlw	1
  7567  00253E  6E5B               	movwf	_stepToggle^0,c	;volatile
  7568  002540  0012               	return		;funcret
  7569  002542  FFFF               	dw	65535	; errata NOP
  7570  002544                     __end_of_toggleStep:
  7571                           	callstack 0
  7572                           
  7573 ;; *************** function _setTouchRel *****************
  7574 ;; Defined at:
  7575 ;;		line 86 in file "adc.c"
  7576 ;; Parameters:    Size  Location     Type
  7577 ;;		None
  7578 ;; Auto vars:     Size  Location     Type
  7579 ;;		None
  7580 ;; Return value:  Size  Location     Type
  7581 ;;                  1    wreg      void 
  7582 ;; Registers used:
  7583 ;;		wreg, status,2
  7584 ;; Tracked objects:
  7585 ;;		On entry : 0/0
  7586 ;;		On exit  : 0/0
  7587 ;;		Unchanged: 0/0
  7588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7589 ;;      Params:         0       0       0       0       0       0       0
  7590 ;;      Locals:         0       0       0       0       0       0       0
  7591 ;;      Temps:          0       0       0       0       0       0       0
  7592 ;;      Totals:         0       0       0       0       0       0       0
  7593 ;;Total ram usage:        0 bytes
  7594 ;; Hardware stack levels used:    1
  7595 ;; This function calls:
  7596 ;;		Nothing
  7597 ;; This function is called by:
  7598 ;;		_isr
  7599 ;; This function uses a non-reentrant model
  7600 ;;
  7601                           
  7602                           	psect	text47
  7603  002544                     __ptext47:
  7604                           	callstack 0
  7605  002544                     _setTouchRel:
  7606                           	callstack 0
  7607  002544  FFFF               	dw	65535	; assembler added errata NOP
  7608  002546                     
  7609                           ;adc.c: 87:     touch_rel = 1;
  7610  002546  0E01               	movlw	1
  7611  002548  6E65               	movwf	_touch_rel^0,c	;volatile
  7612  00254A  0012               	return		;funcret
  7613  00254C  FFFF               	dw	65535	; errata NOP
  7614  00254E                     __end_of_setTouchRel:
  7615                           	callstack 0
  7616                           
  7617 ;; *************** function _setThermRel *****************
  7618 ;; Defined at:
  7619 ;;		line 79 in file "adc.c"
  7620 ;; Parameters:    Size  Location     Type
  7621 ;;		None
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;		None
  7624 ;; Return value:  Size  Location     Type
  7625 ;;                  1    wreg      void 
  7626 ;; Registers used:
  7627 ;;		wreg, status,2
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7633 ;;      Params:         0       0       0       0       0       0       0
  7634 ;;      Locals:         0       0       0       0       0       0       0
  7635 ;;      Temps:          0       0       0       0       0       0       0
  7636 ;;      Totals:         0       0       0       0       0       0       0
  7637 ;;Total ram usage:        0 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; This function calls:
  7640 ;;		Nothing
  7641 ;; This function is called by:
  7642 ;;		_isr
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           	psect	text48
  7647  00254E                     __ptext48:
  7648                           	callstack 0
  7649  00254E                     _setThermRel:
  7650                           	callstack 0
  7651  00254E  FFFF               	dw	65535	; assembler added errata NOP
  7652  002550                     
  7653                           ;adc.c: 80:     therm_rel = 1;
  7654  002550  0E01               	movlw	1
  7655  002552  6E64               	movwf	_therm_rel^0,c	;volatile
  7656  002554  0012               	return		;funcret
  7657  002556  FFFF               	dw	65535	; errata NOP
  7658  002558                     __end_of_setThermRel:
  7659                           	callstack 0
  7660                           
  7661 ;; *************** function _retPeriod *****************
  7662 ;; Defined at:
  7663 ;;		line 101 in file "timer.c"
  7664 ;; Parameters:    Size  Location     Type
  7665 ;;		None
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;		None
  7668 ;; Return value:  Size  Location     Type
  7669 ;;                  2    0[COMRAM] unsigned int 
  7670 ;; Registers used:
  7671 ;;		None
  7672 ;; Tracked objects:
  7673 ;;		On entry : 0/0
  7674 ;;		On exit  : 0/0
  7675 ;;		Unchanged: 0/0
  7676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7677 ;;      Params:         2       0       0       0       0       0       0
  7678 ;;      Locals:         0       0       0       0       0       0       0
  7679 ;;      Temps:          0       0       0       0       0       0       0
  7680 ;;      Totals:         2       0       0       0       0       0       0
  7681 ;;Total ram usage:        2 bytes
  7682 ;; Hardware stack levels used:    1
  7683 ;; This function calls:
  7684 ;;		Nothing
  7685 ;; This function is called by:
  7686 ;;		_isr
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           	psect	text49
  7691  0024CC                     __ptext49:
  7692                           	callstack 0
  7693  0024CC                     _retPeriod:
  7694                           	callstack 0
  7695  0024CC  FFFF               	dw	65535	; assembler added errata NOP
  7696  0024CE                     
  7697                           ;timer.c: 102:     return pwmPeriod;
  7698  0024CE  C04F  F001         	movff	_pwmPeriod,?_retPeriod
  7699  0024D2  C050  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7700  0024D6  0012               	return		;funcret
  7701  0024D8  FFFF               	dw	65535	; errata NOP
  7702  0024DA                     __end_of_retPeriod:
  7703                           	callstack 0
  7704                           
  7705 ;; *************** function _increaseStep *****************
  7706 ;; Defined at:
  7707 ;;		line 85 in file "timer.c"
  7708 ;; Parameters:    Size  Location     Type
  7709 ;;		None
  7710 ;; Auto vars:     Size  Location     Type
  7711 ;;		None
  7712 ;; Return value:  Size  Location     Type
  7713 ;;                  1    wreg      void 
  7714 ;; Registers used:
  7715 ;;		status,2, status,0
  7716 ;; Tracked objects:
  7717 ;;		On entry : 0/0
  7718 ;;		On exit  : 0/0
  7719 ;;		Unchanged: 0/0
  7720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7721 ;;      Params:         0       0       0       0       0       0       0
  7722 ;;      Locals:         0       0       0       0       0       0       0
  7723 ;;      Temps:          0       0       0       0       0       0       0
  7724 ;;      Totals:         0       0       0       0       0       0       0
  7725 ;;Total ram usage:        0 bytes
  7726 ;; Hardware stack levels used:    1
  7727 ;; This function calls:
  7728 ;;		Nothing
  7729 ;; This function is called by:
  7730 ;;		_isr
  7731 ;; This function uses a non-reentrant model
  7732 ;;
  7733                           
  7734                           	psect	text50
  7735  002580                     __ptext50:
  7736                           	callstack 0
  7737  002580                     _increaseStep:
  7738                           	callstack 0
  7739  002580  FFFF               	dw	65535	; assembler added errata NOP
  7740  002582                     
  7741                           ;timer.c: 86:     pwmStep++;
  7742  002582  2A5C               	incf	_pwmStep^0,f,c	;volatile
  7743  002584  0012               	return		;funcret
  7744  002586  FFFF               	dw	65535	; errata NOP
  7745  002588                     __end_of_increaseStep:
  7746                           	callstack 0
  7747                           
  7748 ;; *************** function _fatalError *****************
  7749 ;; Defined at:
  7750 ;;		line 61 in file "usart.c"
  7751 ;; Parameters:    Size  Location     Type
  7752 ;;		None
  7753 ;; Auto vars:     Size  Location     Type
  7754 ;;		None
  7755 ;; Return value:  Size  Location     Type
  7756 ;;                  1    wreg      unsigned char 
  7757 ;; Registers used:
  7758 ;;		wreg, status,2
  7759 ;; Tracked objects:
  7760 ;;		On entry : 0/0
  7761 ;;		On exit  : 0/0
  7762 ;;		Unchanged: 0/0
  7763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7764 ;;      Params:         0       0       0       0       0       0       0
  7765 ;;      Locals:         0       0       0       0       0       0       0
  7766 ;;      Temps:          0       0       0       0       0       0       0
  7767 ;;      Totals:         0       0       0       0       0       0       0
  7768 ;;Total ram usage:        0 bytes
  7769 ;; Hardware stack levels used:    1
  7770 ;; This function calls:
  7771 ;;		Nothing
  7772 ;; This function is called by:
  7773 ;;		_isr
  7774 ;; This function uses a non-reentrant model
  7775 ;;
  7776                           
  7777                           	psect	text51
  7778  002588                     __ptext51:
  7779                           	callstack 0
  7780  002588                     _fatalError:
  7781                           	callstack 0
  7782  002588  FFFF               	dw	65535	; assembler added errata NOP
  7783  00258A                     
  7784                           ;usart.c: 62:     return _fatalError;
  7785  00258A  5060               	movf	__fatalError^0,w,c
  7786  00258C  0012               	return		;funcret
  7787  00258E  FFFF               	dw	65535	; errata NOP
  7788  002590                     __end_of_fatalError:
  7789                           	callstack 0
  7790                           
  7791 ;; *************** function _abortAll *****************
  7792 ;; Defined at:
  7793 ;;		line 841 in file "motors.c"
  7794 ;; Parameters:    Size  Location     Type
  7795 ;;		None
  7796 ;; Auto vars:     Size  Location     Type
  7797 ;;		None
  7798 ;; Return value:  Size  Location     Type
  7799 ;;                  1    wreg      void 
  7800 ;; Registers used:
  7801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7802 ;; Tracked objects:
  7803 ;;		On entry : 0/0
  7804 ;;		On exit  : 0/0
  7805 ;;		Unchanged: 0/0
  7806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7807 ;;      Params:         0       0       0       0       0       0       0
  7808 ;;      Locals:         0       0       0       0       0       0       0
  7809 ;;      Temps:          0       0       0       0       0       0       0
  7810 ;;      Totals:         0       0       0       0       0       0       0
  7811 ;;Total ram usage:        0 bytes
  7812 ;; Hardware stack levels used:    1
  7813 ;; Hardware stack levels required when called:    2
  7814 ;; This function calls:
  7815 ;;		i2_printError
  7816 ;; This function is called by:
  7817 ;;		_isr
  7818 ;; This function uses a non-reentrant model
  7819 ;;
  7820                           
  7821                           	psect	text52
  7822  002474                     __ptext52:
  7823                           	callstack 0
  7824  002474                     _abortAll:
  7825                           	callstack 0
  7826  002474  FFFF               	dw	65535	; assembler added errata NOP
  7827  002476                     
  7828                           ;motors.c: 849:     printError(7);
  7829  002476  0E07               	movlw	7
  7830  002478  ECC4  F00D         	call	i2_printError
  7831  00247C                     i2l257:
  7832  00247C  FFFF               	dw	65535	; assembler added errata NOP
  7833  00247E  EF3E  F012         	goto	i2l257
  7834  002482  0012               	return		;funcret
  7835  002484  FFFF               	dw	65535	; errata NOP
  7836  002486                     __end_of_abortAll:
  7837                           	callstack 0
  7838                           
  7839 ;; *************** function i2_printError *****************
  7840 ;; Defined at:
  7841 ;;		line 111 in file "usart.c"
  7842 ;; Parameters:    Size  Location     Type
  7843 ;;  errCode         1    wreg     unsigned char 
  7844 ;; Auto vars:     Size  Location     Type
  7845 ;;  errCode         1    6[COMRAM] unsigned char 
  7846 ;; Return value:  Size  Location     Type
  7847 ;;                  1    wreg      void 
  7848 ;; Registers used:
  7849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7850 ;; Tracked objects:
  7851 ;;		On entry : 0/0
  7852 ;;		On exit  : 0/0
  7853 ;;		Unchanged: 0/0
  7854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7855 ;;      Params:         0       0       0       0       0       0       0
  7856 ;;      Locals:         1       0       0       0       0       0       0
  7857 ;;      Temps:          2       0       0       0       0       0       0
  7858 ;;      Totals:         3       0       0       0       0       0       0
  7859 ;;Total ram usage:        3 bytes
  7860 ;; Hardware stack levels used:    1
  7861 ;; Hardware stack levels required when called:    1
  7862 ;; This function calls:
  7863 ;;		i2_uartTx
  7864 ;; This function is called by:
  7865 ;;		_abortAll
  7866 ;;		i2_storeData
  7867 ;; This function uses a non-reentrant model
  7868 ;;
  7869                           
  7870                           	psect	text53
  7871  001B88                     __ptext53:
  7872                           	callstack 0
  7873  001B88                     i2_printError:
  7874                           	callstack 0
  7875  001B88  FFFF               	dw	65535	; assembler added errata NOP
  7876                           
  7877                           ;incstack = 0
  7878                           ;i2printError@errCode stored from wreg
  7879  001B8A  6E07               	movwf	i2printError@errCode^0,c
  7880  001B8C                     
  7881                           ;usart.c: 113:     switch(errCode){
  7882  001B8C  EF20  F00E         	goto	i2l3071
  7883  001B90                     i2l3053:
  7884  001B90  FFFF               	dw	65535	; assembler added errata NOP
  7885                           
  7886                           ;usart.c: 115:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  7887  001B92  0E94               	movlw	low _errString_Feed
  7888  001B94  6E01               	movwf	i2uartTx@ptr^0,c
  7889  001B96  0E00               	movlw	high _errString_Feed
  7890  001B98  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7891  001B9A  0E1E               	movlw	30
  7892  001B9C  6E03               	movwf	i2uartTx@length^0,c
  7893  001B9E  EC46  F011         	call	i2_uartTx	;wreg free
  7894                           
  7895                           ;usart.c: 116:             break;
  7896  001BA2  EF4F  F00E         	goto	i2l565
  7897  001BA6                     i2l3055:
  7898  001BA6  FFFF               	dw	65535	; assembler added errata NOP
  7899                           
  7900                           ;usart.c: 118:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  7901  001BA8  0E5E               	movlw	low _errString_ZEND
  7902  001BAA  6E01               	movwf	i2uartTx@ptr^0,c
  7903  001BAC  0E01               	movlw	high _errString_ZEND
  7904  001BAE  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7905  001BB0  0E29               	movlw	41
  7906  001BB2  6E03               	movwf	i2uartTx@length^0,c
  7907  001BB4  EC46  F011         	call	i2_uartTx	;wreg free
  7908                           
  7909                           ;usart.c: 119:             break;
  7910  001BB8  EF4F  F00E         	goto	i2l565
  7911  001BBC                     i2l3057:
  7912  001BBC  FFFF               	dw	65535	; assembler added errata NOP
  7913                           
  7914                           ;usart.c: 121:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  7915  001BBE  0E87               	movlw	low _errString_Reset
  7916  001BC0  6E01               	movwf	i2uartTx@ptr^0,c
  7917  001BC2  0E01               	movlw	high _errString_Reset
  7918  001BC4  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7919  001BC6  0E28               	movlw	40
  7920  001BC8  6E03               	movwf	i2uartTx@length^0,c
  7921  001BCA  EC46  F011         	call	i2_uartTx	;wreg free
  7922                           
  7923                           ;usart.c: 122:             break;
  7924  001BCE  EF4F  F00E         	goto	i2l565
  7925  001BD2                     i2l3059:
  7926  001BD2  FFFF               	dw	65535	; assembler added errata NOP
  7927                           
  7928                           ;usart.c: 124:             uartTx(&errString_Point[0], sizeof(errString_Point));
  7929  001BD4  0E35               	movlw	low _errString_Point
  7930  001BD6  6E01               	movwf	i2uartTx@ptr^0,c
  7931  001BD8  0E01               	movlw	high _errString_Point
  7932  001BDA  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7933  001BDC  0E29               	movlw	41
  7934  001BDE  6E03               	movwf	i2uartTx@length^0,c
  7935  001BE0  EC46  F011         	call	i2_uartTx	;wreg free
  7936                           
  7937                           ;usart.c: 125:             break;
  7938  001BE4  EF4F  F00E         	goto	i2l565
  7939  001BE8                     i2l3061:
  7940  001BE8  FFFF               	dw	65535	; assembler added errata NOP
  7941                           
  7942                           ;usart.c: 127:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  7943  001BEA  0ED6               	movlw	low _errString_Bound
  7944  001BEC  6E01               	movwf	i2uartTx@ptr^0,c
  7945  001BEE  0E01               	movlw	high _errString_Bound
  7946  001BF0  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7947  001BF2  0E21               	movlw	33
  7948  001BF4  6E03               	movwf	i2uartTx@length^0,c
  7949  001BF6  EC46  F011         	call	i2_uartTx	;wreg free
  7950                           
  7951                           ;usart.c: 128:             break;
  7952  001BFA  EF4F  F00E         	goto	i2l565
  7953  001BFE                     i2l3063:
  7954  001BFE  FFFF               	dw	65535	; assembler added errata NOP
  7955                           
  7956                           ;usart.c: 130:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  7957  001C00  0E00               	movlw	low _errString_PointZ
  7958  001C02  6E01               	movwf	i2uartTx@ptr^0,c
  7959  001C04  0E01               	movlw	high _errString_PointZ
  7960  001C06  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7961  001C08  0E35               	movlw	53
  7962  001C0A  6E03               	movwf	i2uartTx@length^0,c
  7963  001C0C  EC46  F011         	call	i2_uartTx	;wreg free
  7964                           
  7965                           ;usart.c: 131:             break;
  7966  001C10  EF4F  F00E         	goto	i2l565
  7967  001C14                     i2l3065:
  7968  001C14  FFFF               	dw	65535	; assembler added errata NOP
  7969                           
  7970                           ;usart.c: 133:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  7971  001C16  0EAF               	movlw	low _errString_Fatal
  7972  001C18  6E01               	movwf	i2uartTx@ptr^0,c
  7973  001C1A  0E01               	movlw	high _errString_Fatal
  7974  001C1C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7975  001C1E  0E27               	movlw	39
  7976  001C20  6E03               	movwf	i2uartTx@length^0,c
  7977  001C22  EC46  F011         	call	i2_uartTx	;wreg free
  7978                           
  7979                           ;usart.c: 134:             break;
  7980  001C26  EF4F  F00E         	goto	i2l565
  7981  001C2A                     i2l3067:
  7982  001C2A  FFFF               	dw	65535	; assembler added errata NOP
  7983                           
  7984                           ;usart.c: 136:             uartTx(&errString_Command[0], sizeof(errString_Command));
  7985  001C2C  0EB2               	movlw	low _errString_Command
  7986  001C2E  6E01               	movwf	i2uartTx@ptr^0,c
  7987  001C30  0E00               	movlw	high _errString_Command
  7988  001C32  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  7989  001C34  0E18               	movlw	24
  7990  001C36  6E03               	movwf	i2uartTx@length^0,c
  7991  001C38  EC46  F011         	call	i2_uartTx	;wreg free
  7992                           
  7993                           ;usart.c: 137:             break;
  7994  001C3C  EF4F  F00E         	goto	i2l565
  7995  001C40                     i2l3071:
  7996  001C40  FFFF               	dw	65535	; assembler added errata NOP
  7997  001C42  5007               	movf	i2printError@errCode^0,w,c
  7998  001C44  6E05               	movwf	??i2_printError^0,c
  7999  001C46  6A06               	clrf	(??i2_printError+1)^0,c
  8000                           
  8001                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8002                           ; Switch size 1, requested type "simple"
  8003                           ; Number of cases is 1, Range of values is 0 to 0
  8004                           ; switch strategies available:
  8005                           ; Name         Instructions Cycles
  8006                           ; simple_byte            4     3 (average)
  8007                           ;	Chosen strategy is simple_byte
  8008  001C48  5006               	movf	(??i2_printError+1)^0,w,c
  8009  001C4A  0A00               	xorlw	0	; case 0
  8010  001C4C  B4D8               	btfsc	status,2,c
  8011  001C4E  EF2B  F00E         	goto	i2l4637
  8012  001C52  EF4F  F00E         	goto	i2l565
  8013  001C56                     i2l4637:
  8014  001C56  FFFF               	dw	65535	; assembler added errata NOP
  8015                           
  8016                           ; Switch size 1, requested type "simple"
  8017                           ; Number of cases is 8, Range of values is 1 to 8
  8018                           ; switch strategies available:
  8019                           ; Name         Instructions Cycles
  8020                           ; simple_byte           25    13 (average)
  8021                           ;	Chosen strategy is simple_byte
  8022  001C58  5005               	movf	??i2_printError^0,w,c
  8023  001C5A  0A01               	xorlw	1	; case 1
  8024  001C5C  B4D8               	btfsc	status,2,c
  8025  001C5E  EFC8  F00D         	goto	i2l3053
  8026  001C62  0A03               	xorlw	3	; case 2
  8027  001C64  B4D8               	btfsc	status,2,c
  8028  001C66  EFD3  F00D         	goto	i2l3055
  8029  001C6A  0A01               	xorlw	1	; case 3
  8030  001C6C  B4D8               	btfsc	status,2,c
  8031  001C6E  EFDE  F00D         	goto	i2l3057
  8032  001C72  0A07               	xorlw	7	; case 4
  8033  001C74  B4D8               	btfsc	status,2,c
  8034  001C76  EFE9  F00D         	goto	i2l3059
  8035  001C7A  0A01               	xorlw	1	; case 5
  8036  001C7C  B4D8               	btfsc	status,2,c
  8037  001C7E  EFF4  F00D         	goto	i2l3061
  8038  001C82  0A03               	xorlw	3	; case 6
  8039  001C84  B4D8               	btfsc	status,2,c
  8040  001C86  EFFF  F00D         	goto	i2l3063
  8041  001C8A  0A01               	xorlw	1	; case 7
  8042  001C8C  B4D8               	btfsc	status,2,c
  8043  001C8E  EF0A  F00E         	goto	i2l3065
  8044  001C92  0A0F               	xorlw	15	; case 8
  8045  001C94  B4D8               	btfsc	status,2,c
  8046  001C96  EF15  F00E         	goto	i2l3067
  8047  001C9A  EF4F  F00E         	goto	i2l565
  8048  001C9E                     i2l565:
  8049  001C9E  FFFF               	dw	65535	; assembler added errata NOP
  8050  001CA0  0012               	return		;funcret
  8051  001CA2  FFFF               	dw	65535	; errata NOP
  8052  001CA4                     __end_ofi2_printError:
  8053                           	callstack 0
  8054                           
  8055 ;; *************** function i2_uartTx *****************
  8056 ;; Defined at:
  8057 ;;		line 148 in file "usart.c"
  8058 ;; Parameters:    Size  Location     Type
  8059 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  8060 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  8061 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  8062 ;;  length          1    2[COMRAM] unsigned char 
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;  i               1    3[COMRAM] unsigned char 
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  1    wreg      void 
  8067 ;; Registers used:
  8068 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8074 ;;      Params:         3       0       0       0       0       0       0
  8075 ;;      Locals:         1       0       0       0       0       0       0
  8076 ;;      Temps:          0       0       0       0       0       0       0
  8077 ;;      Totals:         4       0       0       0       0       0       0
  8078 ;;Total ram usage:        4 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; This function calls:
  8081 ;;		Nothing
  8082 ;; This function is called by:
  8083 ;;		i2_printError
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           	psect	text54
  8088  00228C                     __ptext54:
  8089                           	callstack 0
  8090  00228C                     i2_uartTx:
  8091                           	callstack 0
  8092  00228C  FFFF               	dw	65535	; assembler added errata NOP
  8093  00228E                     
  8094                           ;usart.c: 148: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 149: {;usa
      +                          rt.c: 151:     for(char i = 1; i < length; i++){
  8095  00228E  0E01               	movlw	1
  8096  002290  6E04               	movwf	i2uartTx@i^0,c
  8097  002292  EF5F  F011         	goto	i2l2753
  8098  002296                     i2l2749:
  8099  002296  FFFF               	dw	65535	; assembler added errata NOP
  8100                           
  8101                           ;usart.c: 153:         TXREG = *ptr;
  8102  002298  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  8103  00229C  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  8104  0022A0  50DF               	movf	indf2,w,c
  8105  0022A2  6EAD               	movwf	173,c	;volatile
  8106  0022A4                     i2l570:
  8107  0022A4  FFFF               	dw	65535	; assembler added errata NOP
  8108  0022A6  A2AC               	btfss	172,1,c	;volatile
  8109  0022A8  EF58  F011         	goto	i2u183_41
  8110  0022AC  EF5B  F011         	goto	i2u183_40
  8111  0022B0                     i2u183_41:
  8112  0022B0  FFFF               	dw	65535	; assembler added errata NOP
  8113  0022B2  EF52  F011         	goto	i2l570
  8114  0022B6                     i2u183_40:
  8115  0022B6  FFFF               	dw	65535	; assembler added errata NOP
  8116  0022B8                     
  8117                           ;usart.c: 157:         ptr++;
  8118  0022B8  4A01               	infsnz	i2uartTx@ptr^0,f,c
  8119  0022BA  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  8120                           
  8121                           ;usart.c: 158:     }
  8122  0022BC  2A04               	incf	i2uartTx@i^0,f,c
  8123  0022BE                     i2l2753:
  8124  0022BE  FFFF               	dw	65535	; assembler added errata NOP
  8125  0022C0  5003               	movf	i2uartTx@length^0,w,c
  8126  0022C2  5C04               	subwf	i2uartTx@i^0,w,c
  8127  0022C4  A0D8               	btfss	status,0,c
  8128  0022C6  EF67  F011         	goto	i2u184_41
  8129  0022CA  EF6A  F011         	goto	i2u184_40
  8130  0022CE                     i2u184_41:
  8131  0022CE  FFFF               	dw	65535	; assembler added errata NOP
  8132  0022D0  EF4B  F011         	goto	i2l2749
  8133  0022D4                     i2u184_40:
  8134  0022D4  FFFF               	dw	65535	; assembler added errata NOP
  8135  0022D6  0012               	return		;funcret
  8136  0022D8  FFFF               	dw	65535	; errata NOP
  8137  0022DA                     __end_ofi2_uartTx:
  8138                           	callstack 0
  8139                           
  8140                           	psect	rparam
  8141  0000                     
  8142                           	psect	temp
  8143  00006E                     btemp:
  8144                           	callstack 0
  8145  00006E                     	ds	1
  8146  0000                     int$flags	set	btemp
  8147  0000                     wtemp8	set	btemp+1
  8148  0000                     ttemp5	set	btemp+1
  8149  0000                     ttemp6	set	btemp+4
  8150  0000                     ttemp7	set	btemp+8
  8151                           
  8152                           	psect	idloc
  8153                           
  8154                           ;Config register IDLOC0 @ 0x200000
  8155                           ;	unspecified, using default values
  8156  200000                     	org	2097152
  8157  200000  FF                 	db	255
  8158                           
  8159                           ;Config register IDLOC1 @ 0x200001
  8160                           ;	unspecified, using default values
  8161  200001                     	org	2097153
  8162  200001  FF                 	db	255
  8163                           
  8164                           ;Config register IDLOC2 @ 0x200002
  8165                           ;	unspecified, using default values
  8166  200002                     	org	2097154
  8167  200002  FF                 	db	255
  8168                           
  8169                           ;Config register IDLOC3 @ 0x200003
  8170                           ;	unspecified, using default values
  8171  200003                     	org	2097155
  8172  200003  FF                 	db	255
  8173                           
  8174                           ;Config register IDLOC4 @ 0x200004
  8175                           ;	unspecified, using default values
  8176  200004                     	org	2097156
  8177  200004  FF                 	db	255
  8178                           
  8179                           ;Config register IDLOC5 @ 0x200005
  8180                           ;	unspecified, using default values
  8181  200005                     	org	2097157
  8182  200005  FF                 	db	255
  8183                           
  8184                           ;Config register IDLOC6 @ 0x200006
  8185                           ;	unspecified, using default values
  8186  200006                     	org	2097158
  8187  200006  FF                 	db	255
  8188                           
  8189                           ;Config register IDLOC7 @ 0x200007
  8190                           ;	unspecified, using default values
  8191  200007                     	org	2097159
  8192  200007  FF                 	db	255
  8193                           
  8194                           	psect	config
  8195                           
  8196                           ; Padding undefined space
  8197  300000                     	org	3145728
  8198  300000  FF                 	db	255
  8199                           
  8200                           ;Config register CONFIG1H @ 0x300001
  8201                           ;	Oscillator Selection bits
  8202                           ;	OSC = XT, XT oscillator
  8203                           ;	Oscillator System Clock Switch Enable bit
  8204                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8205  300001                     	org	3145729
  8206  300001  21                 	db	33
  8207                           
  8208                           ;Config register CONFIG2L @ 0x300002
  8209                           ;	Power-up Timer Enable bit
  8210                           ;	PWRT = OFF, PWRT disabled
  8211                           ;	Brown-out Reset Enable bit
  8212                           ;	BOR = OFF, Brown-out Reset disabled
  8213                           ;	Brown-out Reset Voltage bits
  8214                           ;	BORV = 20, VBOR set to 2.0V
  8215  300002                     	org	3145730
  8216  300002  0D                 	db	13
  8217                           
  8218                           ;Config register CONFIG2H @ 0x300003
  8219                           ;	Watchdog Timer Enable bit
  8220                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8221                           ;	Watchdog Timer Postscale Select bits
  8222                           ;	WDTPS = 128, 1:128
  8223  300003                     	org	3145731
  8224  300003  0E                 	db	14
  8225                           
  8226                           ; Padding undefined space
  8227  300004                     	org	3145732
  8228  300004  FF                 	db	255
  8229                           
  8230                           ;Config register CONFIG3H @ 0x300005
  8231                           ;	CCP2 Mux bit
  8232                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8233  300005                     	org	3145733
  8234  300005  00                 	db	0
  8235                           
  8236                           ;Config register CONFIG4L @ 0x300006
  8237                           ;	Stack Full/Underflow Reset Enable bit
  8238                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8239                           ;	Low Voltage ICSP Enable bit
  8240                           ;	LVP = OFF, Low Voltage ICSP disabled
  8241                           ;	Background Debugger Enable bit
  8242                           ;	DEBUG = 0x1, unprogrammed default
  8243  300006                     	org	3145734
  8244  300006  80                 	db	128
  8245                           
  8246                           ; Padding undefined space
  8247  300007                     	org	3145735
  8248  300007  FF                 	db	255
  8249                           
  8250                           ;Config register CONFIG5L @ 0x300008
  8251                           ;	Code Protection bit
  8252                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8253                           ;	Code Protection bit
  8254                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8255                           ;	Code Protection bit
  8256                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8257                           ;	Code Protection bit
  8258                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8259  300008                     	org	3145736
  8260  300008  0F                 	db	15
  8261                           
  8262                           ;Config register CONFIG5H @ 0x300009
  8263                           ;	Boot Block Code Protection bit
  8264                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8265                           ;	Data EEPROM Code Protection bit
  8266                           ;	CPD = OFF, Data EEPROM not code protected
  8267  300009                     	org	3145737
  8268  300009  C0                 	db	192
  8269                           
  8270                           ;Config register CONFIG6L @ 0x30000A
  8271                           ;	Write Protection bit
  8272                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8273                           ;	Write Protection bit
  8274                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8275                           ;	Write Protection bit
  8276                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8277                           ;	Write Protection bit
  8278                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8279  30000A                     	org	3145738
  8280  30000A  0F                 	db	15
  8281                           
  8282                           ;Config register CONFIG6H @ 0x30000B
  8283                           ;	Configuration Register Write Protection bit
  8284                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8285                           ;	Boot Block Write Protection bit
  8286                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8287                           ;	Data EEPROM Write Protection bit
  8288                           ;	WRTD = OFF, Data EEPROM not write protected
  8289  30000B                     	org	3145739
  8290  30000B  E0                 	db	224
  8291                           
  8292                           ;Config register CONFIG7L @ 0x30000C
  8293                           ;	Table Read Protection bit
  8294                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8295                           ;	Table Read Protection bit
  8296                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8297                           ;	Table Read Protection bit
  8298                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8299                           ;	Table Read Protection bit
  8300                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8301  30000C                     	org	3145740
  8302  30000C  0F                 	db	15
  8303                           
  8304                           ;Config register CONFIG7H @ 0x30000D
  8305                           ;	Boot Block Table Read Protection bit
  8306                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8307  30000D                     	org	3145741
  8308  30000D  40                 	db	64
  8309                           tosu	equ	0xFFF
  8310                           tosh	equ	0xFFE
  8311                           tosl	equ	0xFFD
  8312                           stkptr	equ	0xFFC
  8313                           pclatu	equ	0xFFB
  8314                           pclath	equ	0xFFA
  8315                           pcl	equ	0xFF9
  8316                           tblptru	equ	0xFF8
  8317                           tblptrh	equ	0xFF7
  8318                           tblptrl	equ	0xFF6
  8319                           tablat	equ	0xFF5
  8320                           prodh	equ	0xFF4
  8321                           prodl	equ	0xFF3
  8322                           indf0	equ	0xFEF
  8323                           postinc0	equ	0xFEE
  8324                           postdec0	equ	0xFED
  8325                           preinc0	equ	0xFEC
  8326                           plusw0	equ	0xFEB
  8327                           fsr0h	equ	0xFEA
  8328                           fsr0l	equ	0xFE9
  8329                           wreg	equ	0xFE8
  8330                           indf1	equ	0xFE7
  8331                           postinc1	equ	0xFE6
  8332                           postdec1	equ	0xFE5
  8333                           preinc1	equ	0xFE4
  8334                           plusw1	equ	0xFE3
  8335                           fsr1h	equ	0xFE2
  8336                           fsr1l	equ	0xFE1
  8337                           bsr	equ	0xFE0
  8338                           indf2	equ	0xFDF
  8339                           postinc2	equ	0xFDE
  8340                           postdec2	equ	0xFDD
  8341                           preinc2	equ	0xFDC
  8342                           plusw2	equ	0xFDB
  8343                           fsr2h	equ	0xFDA
  8344                           fsr2l	equ	0xFD9
  8345                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    16
    Data        328
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     109
    BANK0           128     17     119
    BANK1           256      0     247
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK1[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10619
                                             12 BANK0      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    6535
                                              7 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3163
                                              0 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                          _resetStep
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2608
                                             20 COMRAM    14     6      8
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetTM2_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetTM0_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepMade
     _moveToPoint
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepCounter
       _stepMade
     _pickObject
       _resetTM2_Temp
       _stepMade
     _releaseObj
       _resetTM2_Temp
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _resetStep
       _resetTM2_Temp
       _stepMade
     _touchObject
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _resetTM0_Temp
     _resetTM2_Temp
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80     11      77       5       93.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1DB      15        0.0%
DATA                 0      0     1DB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Wed Apr 28 15:12:42 2021

                                        ___fldiv@aexp 0038  
                                        ___fldiv@bexp 0037  
                               __end_of_interruptInit 2360  
                                        ___fldiv@sign 0030  
                                                  l94 23E2  
                                                  l88 24BA  
                                                 l221 2122  
                                                 l205 1EC0  
                                                 l206 1EC4  
                                                 l135 1304  
                                                 l224 2134  
                                                 l240 2066  
                                                 l136 1474  
                                                 l161 0DC0  
                                                 l217 1DAE  
                                                 l162 0AB8  
                                                 l242 2096  
                                                 l402 2522  
                                                 l218 1DB2  
                                                 l155 1494  
                                                 l164 0AF8  
                                                 l229 2154  
                                                 l165 0B00  
                                                 l253 2382  
                                                 l254 238C  
                                                 l247 23B2  
                                                 l248 23BC  
                                                 l169 0DA0  
                                                 l337 14E6  
                                                 l186 0D5E  
                                                 l338 14E0  
                                                 l531 255C  
                                                 l339 14E2  
                                                 l364 10B6  
                                                 l540 256C  
                                                 l525 24AC  
                                                 l613 245E  
                                                 l462 2470  
                                                 l622 243A  
                                                 l390 2574  
                                                 l534 2564  
                                                 l543 2504  
                                                 l551 2426  
                                                 l528 249E  
                                                 l384 2408  
                                                 l616 2490  
                                                 l625 24FA  
                                                 l393 24EE  
                                                 l465 233A  
                                                 l466 2350  
                                                 l570 2256  
                                                 l459 252C  
                                                 l387 250E  
                                                 l467 235C  
                                                 l619 244C  
                                                 l628 2536  
                                                 l396 24E2  
                                                 l548 223A  
                                                 l565 1B82  
                                                 l574 2288  
                                                 l399 2518  
                                                 l595 1730  
                                                 l598 17B6  
                                                 l937 1A66  
                                                 _isr 0008  
                                         _touchObject 1DB6  
                                                 prod 000FF3  
                                                 wreg 000FE8  
                                        ___fltol@exp1 0042  
                                         main@errCode 00F4  
                                                l1222 0A3E  
                                                l1302 11C8  
                                                l1224 0856  
                                                l1233 08AC  
                                                l1235 093C  
                                                l1227 0810  
                                                l1236 0924  
                                                l1309 1234  
                                                l4001 1D10  
                                                l4011 1D62  
                                                l4003 1D14  
                                                l4021 1D80  
                                                l4005 1D26  
                                                l4013 1D72  
                                                l4101 1A70  
                                                l1295 111C  
                                                l4031 1DA6  
                                                l4023 1D84  
                                                l4015 1D78  
                                                l4007 1D42  
                                                l4111 1ACC  
                                                l4103 1A74  
                                                l4041 20B2  
                                                l4025 1D8C  
                                                l4017 1D7A  
                                                l4009 1D46  
                                                l4201 1438  
                                                l4113 1AE2  
                                                l4105 1A8A  
                                                l4121 1B24  
                                                l1298 12AE  
                                                l4131 24B2  
                                                l4051 20F6  
                                                l4043 20B8  
                                                l4035 209C  
                                                l4027 1D90  
                                                l4019 1D7C  
                                                l4211 148A  
                                                l4203 144E  
                                                l4115 1AF8  
                                                l4107 1AA0  
                                                l4061 2152  
                                                l4053 2108  
                                                l4045 20CE  
                                                l4037 20A0  
                                                l4029 1D94  
                                                l4141 23D6  
                                                l4133 23C2  
                                                l4221 234E  
                                                l4213 1492  
                                                l4205 1462  
                                                l4117 1B0E  
                                                l4109 1AB6  
                                                l4127 24A4  
                                                l4055 213A  
                                                l4047 20DA  
                                                l4039 20AC  
                                                l4071 202C  
                                                l4231 23FA  
                                                l4223 23E8  
                                                l4143 23DA  
                                                l4135 23CA  
                                                l4207 147A  
                                                l4151 12B6  
                                                l4057 2142  
                                                l4049 20F2  
                                                l4073 2048  
                                                l4081 2072  
                                                l4065 1FC6  
                                                l4321 0E22  
                                                l4313 0DC8  
                                                l4233 2404  
                                                l4225 23F0  
                                                l4145 23DC  
                                                l4137 23CE  
                                                l4217 2326  
                                                l4209 1482  
                                                l4161 12E2  
                                                l4153 12BC  
                                                l3601 2248  
                                                l4241 2452  
                                                l4059 214A  
                                                l4091 23B8  
                                                l3611 0632  
                                                l4083 208E  
                                                l4075 204A  
                                                l4067 2018  
                                                l4331 0ECE  
                                                l4323 0E36  
                                                l4315 0DD4  
                                                l4235 2406  
                                                l4227 23F6  
                                                l4147 23DE  
                                                l4139 23D2  
                                                l4219 2338  
                                                l4307 2500  
                                                l4171 134C  
                                                l4163 12F8  
                                                l4155 12C8  
                                                l4411 21E0  
                                                l3603 226A  
                                                l4243 245A  
                                                l4251 2440  
                                                l4085 2392  
                                                l4093 2362  
                                                l3701 08BE  
                                                l3621 0672  
                                                l3613 0634  
                                                l4077 2068  
                                                l4069 2026  
                                                l4341 0F20  
                                                l4333 0EDE  
                                                l4325 0E70  
                                                l4317 0DD8  
                                                l4229 23F8  
                                                l4149 23E0  
                                                l4253 256A  
                                                l4309 2562  
                                                l4181 1392  
                                                l4173 1350  
                                                l4165 1318  
                                                l4157 12D6  
                                                l4421 2226  
                                                l3605 2270  
                                                l4261 1646  
                                                l4245 2488  
                                                l4237 240E  
                                                l4087 2396  
                                                l4095 2366  
                                                l3703 08D2  
                                                l3631 06AC  
                                                l3615 064A  
                                                l3623 067A  
                                                l3607 0614  
                                                l4079 206C  
                                                l4351 0F90  
                                                l4335 0EF2  
                                                l4327 0E80  
                                                l4319 0E12  
                                                l4191 13E6  
                                                l4183 13AA  
                                                l4175 1362  
                                                l4167 132A  
                                                l4159 12DC  
                                                l4263 1656  
                                                l4247 248C  
                                                l4239 2422  
                                                l4431 14A6  
                                                l4423 1498  
                                                l4089 23B4  
                                                l4097 2384  
                                                l3713 0952  
                                                l3721 099E  
                                                l3705 08D6  
                                                l3641 06EC  
                                                l3633 06AE  
                                                l3625 068C  
                                                l3617 065E  
                                                l3609 0620  
                                                l3801 115E  
                                                l4361 0FB8  
                                                l4353 0FA2  
                                                l4337 0F14  
                                                l4329 0E94  
                                                l4345 0F2A  
                                                l4257 2496  
                                                l4409 255A  
                                                l4193 13F0  
                                                l4185 13AE  
                                                l4177 1376  
                                                l4169 1334  
                                                l4417 21E4  
                                                l4281 172A  
                                                l4265 165C  
                                                l4273 167A  
                                                l4249 248E  
                                                l4441 14C6  
                                                l4433 14AA  
                                                l4425 1498  
                                                l3571 2532  
                                                l4099 2388  
                                                l3731 0A16  
                                                l3723 09BE  
                                                l3715 095E  
                                                l3707 08E8  
                                                l3651 073A  
                                                l3635 06C4  
                                                l3643 06F4  
                                                l3627 0694  
                                                l3619 066E  
                                                l3811 11BE  
                                                l3803 1168  
                                                l4339 0F18  
                                                l4347 0F72  
                                                l4195 1408  
                                                l4187 13C0  
                                                l4179 1388  
                                                l4419 2224  
                                                l4291 176A  
                                                l4283 173A  
                                                l4267 1666  
                                                l4275 16B0  
                                                l4451 1522  
                                                l4443 14DA  
                                                l4435 14AE  
                                                l4427 149E  
                                                l3581 2528  
                                                l3573 242C  
                                                l3901 0CC8  
                                                l3733 0A28  
                                                l3725 09D4  
                                                l3717 0970  
                                                l3709 091A  
                                                l3661 076A  
                                                l3653 0740  
                                                l3645 0706  
                                                l3637 06D8  
                                                l3629 069A  
                                                l3821 124A  
                                                l3813 1200  
                                                l3805 1176  
                                                l4381 107C  
                                                l4357 0FAA  
                                                l4349 0F88  
                                                l4197 140C  
                                                l4189 13D4  
                                                l4293 1774  
                                                l4285 174A  
                                                l4277 16C8  
                                                l4269 1670  
                                                l4461 157C  
                                                l4453 1532  
                                                l4445 14EA  
                                                l4437 14B2  
                                                l4429 14A2  
                                                l3583 2464  
                                                l3575 2430  
                                                l3911 0D2A  
                                                l3903 0CCC  
                                                l3735 0A2E  
                                                l3727 09F4  
                                                l3719 099A  
                                                l3671 07BA  
                                                l3647 0722  
                                                l3639 06E8  
                                                l3751 1968  
                                                l3831 129C  
                                                l3823 1250  
                                                l3815 120E  
                                                l3807 11AE  
                                                l3591 251E  
                                                l4391 10A4  
                                                l4383 1084  
                                                l4375 102A  
                                                l4367 0FD0  
                                                l4359 0FB0  
                                                l4631 0F4A  
                                                l4199 141E  
                                                l4287 175E  
                                                l4279 16D0  
                                                l4471 1602  
                                                l4463 15A4  
                                                l4455 1534  
                                                l4447 1504  
                                                l4439 14BE  
                                                l3577 2434  
                                                l3585 24F4  
                                                l3913 0D40  
                                                l3905 0CE2  
                                                l3921 0D78  
                                                l3737 0A32  
                                                l3729 0A10  
                                                l3681 080E  
                                                l3673 07CA  
                                                l3665 077E  
                                                l3649 0732  
                                                l3657 0754  
                                                l3761 19C0  
                                                l3753 1998  
                                                l3745 1938  
                                                l3825 1274  
                                                l3817 1222  
                                                l3809 11B2  
                                                l3593 24E8  
                                                l4393 10AA  
                                                l4385 108C  
                                                l4377 1062  
                                                l4369 1012  
                                                l4289 1762  
                                                l4297 1780  
                                                l4625 1690  
                                                l4481 1632  
                                                l4465 15BC  
                                                l4457 1554  
                                                l4449 1510  
                                                l4473 1606  
                                                l3931 0DBE  
                                                l3923 0D8E  
                                                l3915 0D56  
                                                l3907 0CF8  
                                                l3851 0AEC  
                                                l3843 0A80  
                                                l3835 0A46  
                                                l3691 086C  
                                                l3683 081C  
                                                l3675 07D2  
                                                l3667 079A  
                                                l3659 076A  
                                                l3771 19F2  
                                                l3755 199A  
                                                l3747 1952  
                                                l3827 1288  
                                                l3819 1248  
                                                l3587 250A  
                                                l3595 2572  
                                                l4379 1074  
                                                l4627 1796  
                                                l4483 1636  
                                                l4475 1620  
                                                l4467 15F6  
                                                l4459 1572  
                                                l3925 0DA6  
                                                l3861 0B36  
                                                l3853 0AFC  
                                                l3845 0AAC  
                                                l3837 0A60  
                                                l3693 0886  
                                                l3685 0840  
                                                l3677 07E8  
                                                l3669 07AA  
                                                l3781 1A2E  
                                                l3757 19AA  
                                                l3829 129A  
                                                l3589 2514  
                                                l3941 1DCC  
                                                l3597 24DC  
                                                l4629 1B3A  
                                                l4477 1628  
                                                l4469 15FE  
                                                l3927 0DAE  
                                                l3919 0D5E  
                                                l3871 0B9E  
                                                l3863 0B42  
                                                l3855 0B0A  
                                                l3847 0ABC  
                                                l3839 0A78  
                                                l3695 088C  
                                                l3687 0842  
                                                l3679 07FC  
                                                l3783 1A44  
                                                l3767 19DC  
                                                l3759 19AE  
                                                l3791 10D4  
                                                l3951 1E22  
                                                l3943 1DDC  
                                                l3935 1DB8  
                                                l3599 2240  
                                                l4479 162E  
                                                l3929 0DB6  
                                                l3873 0BBA  
                                                l3865 0B58  
                                                l3857 0B18  
                                                l3849 0AC0  
                                                l3697 0898  
                                                l3689 0852  
                                                l3785 1A54  
                                                l3777 1A0C  
                                                l3769 19E8  
                                                l3793 10E6  
                                                l3961 1E74  
                                                l3953 1E26  
                                                l3945 1DE2  
                                                l3937 1DBC  
                                                l3883 0C1C  
                                                l3875 0BBE  
                                                l3891 0C50  
                                                l3867 0B7E  
                                                l3859 0B1E  
                                                l3699 08AA  
                                                l3779 1A1A  
                                                l3795 112E  
                                                l3971 1E92  
                                                l3955 1E38  
                                                l3963 1E84  
                                                l3947 1DF8  
                                                l3939 1DCA  
                                                l3893 0C66  
                                                l3885 0C32  
                                                l3869 0B88  
                                                l3877 0BD4  
                                                l3797 114A  
                                                l3789 10C0  
                                                l3981 1EB8  
                                                l3973 1E96  
                                                l3965 1E8A  
                                                l3957 1E54  
                                                l3949 1E04  
                                                l3895 0C8C  
                                                l3887 0C48  
                                                l3879 0BEA  
                                                l3975 1E9E  
                                                l3967 1E8C  
                                                l3959 1E58  
                                                l3991 1CBA  
                                                l3897 0C96  
                                                l3977 1EA2  
                                                l3969 1E8E  
                                                l3993 1CCA  
                                                l3985 1CA6  
                                                l3899 0CAC  
                                                l3979 1EA6  
                                                l3995 1CD0  
                                                l3987 1CAA  
                                                ?_isr 0001  
                                                l3997 1CE6  
                                                l3989 1CB8  
                                                l3999 1CF2  
                                                u3000 19D6  
                                                u3001 19D0  
                                                u3010 1A06  
                                                u3011 1A00  
                                                u3020 1A2E  
                                                u3100 1234  
                                                u3021 1A28  
                                                u3101 122E  
                                                _LATA 000F89  
                                                u3030 1A42  
                                                u3110 1246  
                                                _LATB 000F8A  
                                                u3031 1A3C  
                                                u3111 1240  
                                                _LATC 000F8B  
                                                u3200 0B7C  
                                                u3120 1286  
                                                u3040 10D2  
                                                _LATD 000F8C  
                                                u3201 0B76  
                                                u3121 1280  
                                                u3041 10CC  
                                                u3210 0B9C  
                                                u3130 1298  
                                                u3050 10E4  
                                                u3211 0B96  
                                                u3131 1292  
                                                u3051 10DE  
                                                u3300 0CC6  
                                                u3220 0BB8  
                                                u3140 0A5E  
                                                u3060 1148  
                                                u3301 0CC0  
                                                u3221 0BB2  
                                                u3141 0A58  
                                                u3061 1142  
                                                u3310 0CF6  
                                                u3230 0BE8  
                                                u3150 0A78  
                                                u3070 11A8  
                                                u3311 0CF0  
                                                u3231 0BE2  
                                                u3151 0A72  
                                                u3071 11A2  
                                                u3320 0D24  
                                                u3240 0C16  
                                                u3160 0AAA  
                                                u3080 11FA  
                                                u3400 1E52  
                                                u3321 0D1E  
                                                u3241 0C10  
                                                u3161 0AA4  
                                                u3081 11F4  
                                                u3401 1E4C  
                                                u3330 0D3E  
                                                u3250 0C30  
                                                u3170 0AEA  
                                                u3090 1220  
                                                u3410 1E72  
                                                u3331 0D38  
                                                u3251 0C2A  
                                                u3171 0AE4  
                                                u3091 121A  
                                                u3411 1E6C  
                                                u3500 20CC  
                                                u3340 0D54  
                                                u3260 0C46  
                                                u3180 0B34  
                                                u3420 1E84  
                                                u3501 20C6  
                                                u3341 0D4E  
                                                u3261 0C40  
                                                u3181 0B2E  
                                                u3421 1E7E  
                                                u3510 20F0  
                                                u3350 0D78  
                                                u3270 0C64  
                                                u3190 0B56  
                                                u3430 1EB6  
                                                u3511 20EA  
                                                u3351 0D72  
                                                u3271 0C5E  
                                                u3191 0B50  
                                                u3431 1EB0  
                                                u3520 2122  
                                                u3360 0D8C  
                                                u3280 0C8A  
                                                u2800 0720  
                                                u3440 1CE4  
                                                u3600 132A  
                                                u2720 2268  
                                                u3521 211C  
                                                u3361 0D86  
                                                u3281 0C84  
                                                u2801 071A  
                                                u3441 1CDE  
                                                u3601 1324  
                                                u2721 2262  
                                                u3530 2134  
                                                u3370 0DA0  
                                                u3290 0CAA  
                                                u2810 0768  
                                                u3450 1D0E  
                                                u3610 134A  
                                                u2730 2286  
                                                u3531 212E  
                                                u3371 0D9A  
                                                u3291 0CA4  
                                                u2811 0762  
                                                u3451 1D08  
                                                u3611 1344  
                                                u2731 2280  
                                                u2900 0918  
                                                u2820 07E6  
                                                u2740 0630  
                                                u3540 2064  
                                                u3380 1DF6  
                                                u3460 1D40  
                                                u3700 1460  
                                                u3620 1374  
                                                u2901 0912  
                                                u2821 07E0  
                                                u2741 062A  
                                                u3541 205E  
                                                u3381 1DF0  
                                                u3461 1D3A  
                                                u3701 145A  
                                                u3621 136E  
                                                u2910 0936  
                                                u2830 080C  
                                                u2750 0648  
                                                u3550 208C  
                                                u3390 1E20  
                                                u3470 1D60  
                                                u3710 1474  
                                                u3630 1388  
                                                u2911 0930  
                                                u2831 0806  
                                                u2751 0642  
                                                u3551 2086  
                                                u3391 1E1A  
                                                u3471 1D5A  
                                                u3711 146E  
                                                u3631 1382  
                                                u3560 23B0  
                                                u2920 0950  
                                                u2840 083E  
                                                u2760 065C  
                                                u3480 1D72  
                                                u3800 109E  
                                                u3720 2336  
                                                u3640 13A8  
                                                u3561 23AA  
                                                u2921 094A  
                                                u2841 0838  
                                                u2761 0656  
                                                u3481 1D6C  
                                                u3801 1098  
                                                u3721 2330  
                                                u3641 13A2  
                                                u3570 2380  
                                                u2930 096E  
                                                u2850 086A  
                                                u2770 06AA  
                                                u3490 1DA4  
                                                u3730 234C  
                                                u3650 13D2  
                                                u3810 2238  
                                                u3571 237A  
                                                u2931 0968  
                                                u2851 0864  
                                                u2771 06A4  
                                                u3491 1D9E  
                                                u3731 2346  
                                                u3651 13CC  
                                                u3811 2232  
                                                u2940 09BC  
                                                u2860 0884  
                                                u2780 06C2  
                                                u3660 13E6  
                                                u3580 12F6  
                                                u3740 16C6  
                                                u3820 14D8  
                                                u2941 09B6  
                                                u2861 087E  
                                                u2781 06BC  
                                                u3661 13E0  
                                                u3581 12F0  
                                                u3741 16C0  
                                                u3821 14D2  
                                                u2950 09F2  
                                                u2870 08A8  
                                                u2790 06D6  
                                                u3750 0F86  
                                                u3670 1406  
                                                u3590 1316  
                                                u3830 1502  
                                                u2951 09EC  
                                                u2871 08A2  
                                                u2791 06D0  
                                                u3751 0F80  
                                                u3671 1400  
                                                u3591 1310  
                                                u3831 14FC  
                                                u2960 0A26  
                                                u2880 08D0  
                                                u3760 0FA2  
                                                u3680 1438  
                                                u3840 1552  
                                                u2961 0A20  
                                                u2881 08CA  
                                                u3761 0F9C  
                                                u3681 1432  
                                                u3841 154C  
                                                u2890 08E6  
                                                u2970 1950  
                                                u3770 0FCA  
                                                u3690 144C  
                                                u3850 1572  
                                         main@newData 00F5  
                                                u2891 08E0  
                                                u2971 194A  
                                                u3771 0FC4  
                                                u3691 1446  
                                                u3851 156C  
                                                u2980 198C  
                                                u3780 1024  
                                                u3860 15BA  
                                                u3781 101E  
                                                u3861 15B4  
                                                u2990 19BE  
                                                u3790 1072  
                                                u3870 161E  
                                                u2991 19B8  
                                                u3791 106C  
                                                u3871 1618  
                                                u2985 1980  
                                                i2l91 257C  
                                                i2l85 24C8  
                                                _TMR0 000FD6  
                                                _TMR2 000FCC  
                                 __end_ofi2_storeData 1936  
                                                _main 1498  
                                                _maxX 0092  
                                                _maxY 0090  
                                __end_ofi2_printError 1CA4  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                btemp 006E  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 01A4  
                                     ___fldiv@new_exp 0031  
                                        ___param_bank 000000  
                                     ??_whatsTM0Limit 0001  
                                               ??_isr 000B  
                                        ?_executeData 0001  
                                     executeData@data 00EF  
                                       ___fltol@sign1 0041  
                                               ?_main 0001  
                                     __end_of___fldiv 0A44  
                                     __end_of___fltol 1A6C  
                                               i2l405 2554  
                                               i2l408 254A  
                                               i2l257 247C  
                                               i2l258 247E  
                                               i2l631 2584  
                                               i2l537 258C  
                                               i2l570 22A4  
                                               i2l634 2540  
                                               i2l484 018C  
                                               i2l565 1C9E  
                                               i2l637 24D6  
                                               i2l574 22D6  
                                               i2l595 18AA  
                                               i2l598 1930  
                                rotateObj@rotSequence 0080  
                                               _SPBRG 000FAF  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                                               _TRISC 000F94  
                                               _TRISD 000F95  
                                               _TXREG 000FAD  
                                     __end_of_getData 24B0  
                                     i2storeData@data 000A  
                                     __end_of_initADC 240C  
                                        ?_newSequence 0001  
                                     __end_of_liftArm 2158  
                                     __end_of_readSeq 2568  
                                        stepMade@temp 0014  
                                               tablat 000FF5  
                                      i2uartTx@length 0003  
                                     __end_of_stopADC 2578  
                                               ttemp5 006F  
                                               ttemp6 0072  
                                               ttemp7 0076  
                                               status 000FD8  
                                               wtemp8 006F  
                                    __end_ofi2_uartTx 22DA  
                                       ?_increaseStep 0001  
                                     __initialization 2158  
                              __size_of_initPinMotors 0026  
                                        __end_of_main 1642  
                            resetPosition@keepMovingX 0015  
                            resetPosition@keepMovingY 0016  
                            resetPosition@keepMovingZ 0017  
                                              ??_main 00F2  
                                       __activetblptr 000002  
                               __end_of_resetTM0_Temp 2530  
                               __end_of_resetTM2_Temp 2474  
                                         i2_storeData 17BC  
                                        ?_setThermRel 0001  
                                              _ADRESH 000FC4  
                                              _ADRESL 000FC3  
                                        ?_moveToPoint 0015  
                                              i2l2211 258A  
                                              i2l2207 2550  
                                              i2l2217 2582  
                                              i2l2209 2546  
                                              i2l3051 1B8C  
                                              i2l2219 253C  
                                              i2l3061 1BE8  
                                              i2l3053 1B90  
                                              i2l3063 1BFE  
                                              i2l3055 1BA6  
                                              i2l3071 1C40  
                                              i2l3065 1C14  
                                              i2l3057 1BBC  
                                              i2l3401 18DC  
                                              i2l3067 1C2A  
                                              i2l3059 1BD2  
                                              i2l3163 2476  
                                              i2l3403 18E4  
                                              i2l3405 18EE  
                                              i2l3501 0086  
                                              i2l1911 257A  
                                              i2l3511 00C2  
                                              i2l3503 008A  
                                              i2l3409 18FA  
                                              i2l3521 00F6  
                                              i2l3513 00CA  
                                              i2l3505 009E  
                                              i2l3371 24CE  
                                              i2l1907 24C0  
                                              i2l3531 0142  
                                              i2l3523 00FA  
                                              i2l3515 00CC  
                                              i2l3507 00A0  
                                              i2l3381 17EA  
                                              i2l3373 17C0  
                                              i2l3541 0186  
                                              i2l3533 014E  
                                              i2l3517 00E0  
                                              i2l3509 00A4  
                                              i2l3525 0100  
                                              i2l2751 22B8  
                                              i2l3391 184A  
                                              i2l3375 17D0  
                                              i2l3535 0168  
                                              i2l3527 0114  
                                              i2l3519 00F2  
                                              i2l2753 22BE  
                                              i2l3393 18A4  
                                              i2l3377 17D6  
                                              i2l3385 17F4  
                                              i2l3529 011C  
                                              i2l3537 016C  
                                              i2l3481 001C  
                                              i2l2747 228E  
                                              i2l3395 18B4  
                                              i2l3379 17E0  
                                              i2l3387 182A  
                                              i2l3539 0180  
                                              i2l3491 0050  
                                              i2l3483 002E  
                                              i2l2749 2296  
                                              i2l3397 18C4  
                                              i2l3389 1842  
                                              i2l3493 0054  
                                              i2l3485 0030  
                                              i2l3399 18D8  
                                              i2l3487 0032  
                                              i2l3495 0058  
                                              i2l4633 180A  
                                              i2l3497 006C  
                                              i2l3489 004E  
                                              i2l4635 1910  
                                              i2l3499 006E  
                                              i2l4637 1C56  
                                              _RCREG1 000FAE  
                                        ?_setTouchRel 0001  
                                    __end_of_abortAll 2486  
                                    __end_of___xxtofl 12B4  
                                    __end_of_clearTM0 24BE  
                                    _errString_PointZ 0100  
                                      ??_increaseStep 0001  
                                    __end_of_maxFeedX 0611  
                                    __end_of_maxFeedY 0610  
                                           ??___fldiv 0028  
                                           ??___fltol 003D  
                                    __end_of_tim0Init 2462  
                                    __end_of_tim1Init 2494  
                                    __end_of_tim2Init 2450  
                                              clear_0 21BE  
                                              clear_1 21CA  
                                           ??_getData 0014  
                                              _uartTx 223E  
                                           ??_initADC 0012  
                                           ??_liftArm 0015  
                                           ??_readSeq 0012  
                                        __pdataCOMRAM 0067  
                               __end_of_resetPosition 1498  
                                        __mediumconst 0000  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                                        ?_returnTherm 0012  
                                    __end_of_startADC 2512  
                                    __end_of_stepMade 243E  
                                       _initPinMotors 23C0  
                                        ?_returnTouch 0012  
                                           ??_stopADC 0012  
                               __size_ofi2_printError 011C  
                                    __end_of_writeTM0 24CC  
                           __size_of_resetNewSequence 000A  
                                        ___xxtofl@arg 001C  
                                        ___xxtofl@exp 001B  
                                        ___xxtofl@val 0012  
                                          __accesstop 0080  
                             __end_of__initialization 21D0  
                                        _dataSequence 00CA  
                                       ___rparam_used 000001  
                                          ___fltol@f1 0039  
                                        ?_stepCounter 0012  
                                         i2uartTx@ptr 0001  
                                      __pcstackCOMRAM 0001  
                                        __newSequence 005F  
                                        __pidataBANK0 22DA  
                                        __pidataBANK1 1EC8  
                                __size_of_executeData 02F6  
                                        i2_printError 1B88  
                                        ?_touchObject 0001  
                                      _errString_ZEND 015E  
                                      _errString_Feed 0094  
                                      ?_initPinMotors 0001  
                                           ?i2_uartTx 0001  
                                          __pbssBANK0 00CA  
                                __size_of_newSequence 0008  
                                          _feeder1Pos 060D  
                                          _feeder2Pos 060B  
                                          _feeder3Pos 0609  
                             __size_of_getNewSequence 000E  
                                          _fatalError 2588  
                                  __size_of_reduceSeq 0008  
                                  __size_of_retPeriod 000E  
                                      _touch_pressure 0607  
                                  __size_of_shiftData 0060  
                                  __size_of_resetStep 000A  
                                             _ADC_res 0053  
                                             ?_uartTx 0012  
                                           ?_abortAll 0001  
                                           ?___xxtofl 0012  
                                __end_of_increaseStep 2588  
                                           ?_clearTM0 0001  
                                          ??i2_uartTx 0004  
                                  __size_of_rotateObj 00DA  
                                   _errString_Command 00B2  
                                  __size_of_usartInit 001E  
                              __size_of_interruptInit 003C  
                                __size_of_setThermRel 000A  
                                  __size_of_storeData 017A  
                                           ?_tim0Init 0001  
                                           ?_tim1Init 0001  
                                           ?_tim2Init 0012  
                                __size_of_moveToPoint 0382  
                                storeData@receivedMex 0043  
                                     _newSequenceData 00DE  
                                __size_of_setTouchRel 000A  
                                             __Hparam 0000  
                                             __Lparam 0000  
                              __end_of_touch_pressure 0609  
                                             ___fldiv 0612  
                                           ?_startADC 0001  
                                           ?_stepMade 0012  
                                             ___fltol 1936  
                                        __psmallconst 0600  
                                             __pcinit 2158  
                               __end_of_whatsTM0Limit 2580  
                                             _getData 24A2  
                                             __ramtop 0600  
                                           ?_writeTM0 0001  
                                          _pickObject 2390  
                                             __ptext0 1498  
                                             __ptext1 240C  
                                             __ptext2 243E  
                                             __ptext3 2486  
                                             __ptext4 2450  
                                             __ptext5 1642  
                                             __ptext6 1A6C  
                                             __ptext7 223E  
                                             __ptext8 21DE  
                                             __ptext9 12B4  
                                     __size_of_uartTx 004E  
                                           _T0CONbits 000FD5  
                                             _initADC 23E6  
                                           _T1CONbits 000FCD  
                                     ??_initPinMotors 0012  
                                             _liftArm 209A  
                                           _T2CONbits 000FCA  
                                          ??_abortAll 0008  
                                             _readSeq 2560  
                                        __size_of_isr 019C  
                                          ??___xxtofl 0016  
                                        ?i2_storeData 0001  
                                          ??_clearTM0 0012  
                                          _motCounter 0067  
                                             _pwmStep 005C  
                                             _stopADC 2570  
                                   __end_of_reduceSeq 2560  
                                   __end_of_retPeriod 24DA  
                                          _releaseObj 2360  
                                __size_of_returnTherm 000C  
                                end_of_initialization 21D0  
                                __size_of_returnTouch 000C  
                                    _resetNewSequence 24FE  
                                    rotateObj@totStep 00E9  
                                   __end_of_shiftData 223E  
                                             isr@temp 0011  
                                   __end_of_resetStep 253A  
                                          ??_tim0Init 0012  
                                       __Lmediumconst 0000  
                                          ??_tim1Init 0012  
                                          ??_tim2Init 0014  
                                    storeData@command 005D  
                                    storeData@counter 005E  
                                          _resetTherm 251C  
                                          _resetTouch 2512  
                                             uartTx@i 0015  
                                         ?_fatalError 0001  
                                           _RCSTAbits 000FAB  
                                             postdec1 000FE5  
                                   __end_of_rotateObj 209A  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                                          ??_startADC 0012  
                                          ??_stepMade 0014  
                                __size_of_stepCounter 000C  
                                       _interruptInit 2324  
                                   __end_of_usartInit 242A  
                                   __end_of_storeData 17BC  
                          __end_ofrotateObj@stepAngle 0605  
                                          ??_writeTM0 0001  
                                           _PORTDbits 000F83  
                                          _printError 1A6C  
                                           _PORTEbits 000F84  
                                 i2printError@errCode 0007  
                                          _toggleStep 253A  
                                       ___xxtofl@sign 001A  
                                           _TRISCbits 000F94  
                                           _TRISDbits 000F95  
                                           _TRISEbits 000F96  
                                         ___fldiv@grs 0033  
                                         ___fldiv@rem 002C  
                                __size_of_touchObject 0112  
                                          _stepToggle 005B  
                                        _completeStep 0062  
                                          _touchTherm 1CA4  
                                           _TXSTAbits 000FAC  
                                      _getNewSequence 2494  
                              __size_of_resetTM0_Temp 000A  
                              __size_of_resetTM2_Temp 0012  
                                      ?_interruptInit 0001  
                                       __pidataCOMRAM 2590  
                               __size_of_increaseStep 0008  
                                         ?_pickObject 0001  
                                         __fatalError 0060  
                                      __end_of_uartTx 228C  
                                       moveToPoint@x1 0015  
                                       moveToPoint@x2 0019  
                                       moveToPoint@y1 0017  
                                       moveToPoint@y2 001B  
                                 start_initialization 2158  
                                           i2uartTx@i 0004  
                                         __end_of_isr 01A4  
                                 __size_of_fatalError 0008  
                                         ?_releaseObj 0001  
                                   __size_ofi2_uartTx 004E  
                              __end_of_getNewSequence 24A2  
                                     _errString_Fatal 01AF  
                                     _errString_Bound 01D6  
                                         ?_resetTherm 0001  
                                     _errString_Reset 0187  
                                         ?_resetTouch 0001  
                                     _errString_Point 0135  
                                        _increaseStep 2580  
                              __size_of_resetPosition 01E4  
                                       ??_executeData 00ED  
                                         __pdataBANK0 0080  
                                         __pdataBANK1 0100  
                                         _dataCounter 0061  
                                            ??_uartTx 0015  
                              moveToPoint@keepMovingX 0021  
                              moveToPoint@keepMovingY 0022  
                                         ?_printError 0001  
                                           ___fldiv@a 0024  
                                           ___fldiv@b 0020  
                                      _therm_pressure 0605  
                                         ?_toggleStep 0001  
                                         __pbssCOMRAM 0043  
                                       _resetTM0_Temp 2526  
                                       _resetTM2_Temp 2462  
                                       __pcstackBANK0 00E6  
                                       ??_newSequence 0012  
                                   __size_of_abortAll 0012  
                                   __size_of___xxtofl 01F8  
                                __size_ofi2_storeData 017A  
                                   __size_of_clearTM0 000E  
                                     ?_getNewSequence 0012  
                                         ?_touchTherm 0001  
                                 __size_of_pickObject 0030  
                                  executeData@errCode 00F1  
                                   __size_of_tim0Init 0012  
                                   __size_of_tim1Init 000E  
                                   __size_of_tim2Init 0012  
                                     ??_interruptInit 0012  
                                           __pintcode 0008  
                                            ?___fldiv 0020  
                                            ?___fltol 0039  
                            __end_of_resetNewSequence 2508  
                                 __size_of_releaseObj 0030  
                                       storeData@data 001B  
                                            ?_getData 0012  
                                   __size_of_startADC 000A  
                                   __size_of_stepMade 0014  
                              __end_of_therm_pressure 0607  
                                            ?_initADC 0001  
                                         __smallconst 0600  
                                            ?_liftArm 0001  
                                            ?_readSeq 0001  
                                      ?_resetTM0_Temp 0001  
                                   __size_of_writeTM0 000E  
                                      ?_resetTM2_Temp 0001  
                                 __end_of_executeData 10BC  
                                          shiftData@i 0014  
                                 __size_of_resetTherm 000A  
                                           _newFeeder 0055  
                                       _resetPosition 12B4  
                                 __size_of_resetTouch 000A  
                                       ??_setThermRel 0001  
                                            ?_stopADC 0001  
                                       ??_moveToPoint 001D  
                                       ??_setTouchRel 0001  
                                 __end_of_newSequence 2570  
                                           _reduceSeq 2558  
                                            _LATAbits 000F89  
                                            _LATBbits 000F8A  
                                           _retPeriod 24CC  
                                            _LATCbits 000F8B  
                                            _LATDbits 000F8C  
                                 __size_of_printError 011C  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                                           _shiftData 21DE  
                                            i2u260_40 002C  
                                            i2u260_41 0026  
                                           _resetStep 2530  
                                            i2u253_40 1840  
                                            i2u261_40 004C  
                                            i2u253_41 183A  
                                            i2u261_41 0046  
                                            i2u270_40 0166  
                                            i2u262_40 006A  
                                            i2u270_41 0160  
                                            i2u262_41 0064  
                                            i2u183_40 22B6  
                                            i2u271_40 017E  
                                            i2u263_40 0084  
                                            i2u183_41 22B0  
                                            i2u271_41 0178  
                                            i2u263_41 007E  
                                            i2u184_40 22D4  
                                            i2u264_40 009C  
                                            i2u184_41 22CE  
                                            i2u264_41 0096  
                                            i2u265_40 00C0  
                                            i2u265_41 00BA  
                                            _PIR1bits 000F9E  
                                            i2u266_40 00DE  
                                            i2u266_41 00D8  
                                            i2u267_40 00F0  
                                            i2u267_41 00EA  
                                            i2u268_40 0112  
                                            i2u268_41 010C  
                                            i2u269_40 0140  
                                            i2u269_41 013A  
                                 __size_of_toggleStep 000A  
                                        ??_fatalError 0001  
                                           _posVector 004C  
                                            _RCONbits 000FD0  
                                           _therm_rel 0064  
                                           _pwmPeriod 004F  
                                           _rotateObj 1FC0  
                                          _ADCON0bits 000FC2  
                                          _ADCON1bits 000FC1  
                                 __size_of_touchTherm 0112  
                                           _usartInit 240C  
                                           _touch_rel 0065  
                                  __end_of_feeder1Pos 060F  
                                  __end_of_feeder2Pos 060D  
                                  __end_of_feeder3Pos 060B  
                                           _storeData 1642  
                                      ?_resetPosition 0001  
                               __end_of_initPinMotors 23E6  
                                       ??_returnTherm 0014  
                                       ??_returnTouch 0014  
                                            i2_uartTx 228C  
                                           copy_data0 216C  
                                           copy_data1 218C  
                                           copy_data2 21AC  
                                  __end_of_fatalError 2590  
                                  rotateObj@stepAngle 0601  
                                          ?_reduceSeq 0001  
                                          ?_retPeriod 0001  
                                          rotateObj@i 00EB  
                              __size_of_whatsTM0Limit 0008  
                                 __end_of_setThermRel 2558  
                                 __end_of_moveToPoint 0DC6  
                                   printError@errCode 0018  
                                          ?_shiftData 0001  
                                       ??_stepCounter 0014  
                                            __Hrparam 0000  
                                          ?_resetStep 0001  
                                 __end_of_setTouchRel 254E  
                                            __Lrparam 0000  
                                    __size_of___fldiv 0432  
                                    __size_of___fltol 0136  
                                         _executeData 0DC6  
                                        ??_pickObject 0015  
                                          ?_rotateObj 0001  
                            moveToPoint@MOT1Direction 001F  
                                     ??_resetTM0_Temp 0012  
                                       ?i2_printError 0001  
                                     ??_resetTM2_Temp 0012  
                                    __size_of_getData 000E  
                            moveToPoint@MOT2Direction 0020  
                                       ??_touchObject 0015  
                                            _abortAll 2474  
                                          ?_usartInit 0001  
                                    __size_of_initADC 0026  
                                            ___xxtofl 10BC  
                                    __size_of_liftArm 00BE  
                                          ?_storeData 0001  
                                            _clearTM0 24B0  
                                    __size_of_readSeq 0008  
                                  storeData@mexLength 006D  
                                            _tm0Count 0063  
                                            _tm0Error 0059  
                                            _tm0Limit 0066  
                                         _newSequence 2568  
                                            __ptext10 24FE  
                                            __ptext11 2558  
                                            __ptext20 24DA  
                                            __ptext12 2560  
                                            __ptext21 1DB6  
                                            __ptext13 2568  
                                            __ptext30 0612  
                                            __ptext22 2570  
                                            __ptext14 2324  
                                            __ptext31 2360  
                                            __ptext23 2508  
                                            __ptext15 23C0  
                                            __ptext40 24A2  
                                            __ptext32 2390  
                                            __ptext24 24E6  
                                            __ptext16 23E6  
                                            __ptext41 24B0  
                                            __ptext33 0A44  
                                            __ptext25 2512  
                                            __ptext17 2494  
                                            __ptext50 2580  
                                            __ptext34 24F2  
                                            __ptext26 251C  
                                            __ptext18 0DC6  
                                            __ptext51 2588  
                                            __ptext43 17BC  
                                            __ptext35 209A  
                                            __ptext27 1FC0  
                                            __ptext19 1CA4  
                                            __ptext52 2474  
                                            __ptext44 24BE  
                                            __ptext36 242A  
                                            __ptext28 10BC  
                                            __ptext53 1B88  
                                            __ptext45 2578  
                                            __ptext37 2462  
                                            __ptext29 1936  
                                            __ptext54 228C  
                                            __ptext46 253A  
                                            __ptext38 2526  
                                            __ptext47 2544  
                                            __ptext39 2530  
                                            __ptext48 254E  
                                            __ptext49 24CC  
                                        ??_releaseObj 0015  
                                    __size_of_stopADC 0008  
                                            _maxFeedX 0610  
                                            _maxFeedY 060F  
                                 __end_of_returnTherm 24E6  
                                 __end_of_returnTouch 24F2  
                                            _tim0Init 2450  
                                            _tim1Init 2486  
                                            _tim2Init 243E  
                                       __size_of_main 01AA  
                                  __end_of_pickObject 23C0  
                                        ??_resetTherm 0012  
                                        ??_resetTouch 0012  
                                           uartTx@ptr 0012  
                                            _rotAngle 0057  
                                            int$flags 006E  
                                            _startADC 2508  
                                            _stepMade 242A  
                                            _stepMot1 008C  
                                            _stepMot2 0088  
                                            _stepMot3 0084  
                                 __end_of_stepCounter 24FE  
                                   rotateObj@rotAngle 00E8  
                                      ??i2_printError 0005  
                                  __end_of_releaseObj 2390  
                                            _writeTM0 24BE  
                                        ??_printError 0016  
                                       _whatsTM0Limit 2578  
                                     ??_resetPosition 0015  
                                  tim2Init@_pwmPeriod 0012  
                                          _INTCONbits 000FF2  
                                        ??_toggleStep 0001  
                                    ??_getNewSequence 0014  
                                  __end_of_resetTherm 2526  
                                  __end_of_resetTouch 251C  
                                         _setThermRel 254E  
                                        uartTx@length 0014  
                                        _single_cycle 0051  
                                         _moveToPoint 0A44  
                                 __end_of_touchObject 1EC8  
                                            intlevel2 2598  
                                        ??_touchTherm 0015  
                                         _setTouchRel 2544  
                                         ??_reduceSeq 0012  
                                         ??_retPeriod 0003  
                                          _RCSTA1bits 000FAB  
                                  __end_of_printError 1B88  
                                         ??_shiftData 0012  
                                         ??_resetStep 0012  
                                  __end_of_toggleStep 2544  
                                   ?_resetNewSequence 0001  
                                      ?_whatsTM0Limit 0001  
                                         ??_rotateObj 00E6  
                                  ??_resetNewSequence 0012  
                                  __end_of_touchTherm 1DB6  
                                         ??_usartInit 0012  
                                       ??i2_storeData 0008  
                                         ??_storeData 0019  
                                         _returnTherm 24DA  
                                         _returnTouch 24E6  
                                         _stepCounter 24F2  
