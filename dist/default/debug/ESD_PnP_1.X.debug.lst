

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sun May 02 09:05:48 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    76                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    77  0000                     
    78                           ; Version 2.20
    79                           ; Generated 12/02/2020 GMT
    80                           ; 
    81                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F452 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataCOMRAM
   114  002714                     __pidataCOMRAM:
   115                           	callstack 0
   116                           
   117                           ;initializer for _motCounter
   118  002714  00                 	db	0
   119  002715  01                 	db	1
   120  002716  00                 	db	0
   121  002717  01                 	db	1
   122  002718  00                 	db	0
   123  002719  01                 	db	1
   124                           
   125                           ;initializer for _mexLength
   126  00271A  05                 	db	5
   127                           
   128                           	psect	idataBANK0
   129  002462                     __pidataBANK0:
   130                           	callstack 0
   131                           
   132                           ;initializer for rotateObj@rotSequence
   133  002462  24                 	db	36
   134  002463  0C                 	db	12
   135  002464  18                 	db	24
   136  002465  30                 	db	48
   137                           
   138                           ;initializer for _stepMot3
   139  002466  09                 	db	9
   140  002467  03                 	db	3
   141  002468  06                 	db	6
   142  002469  0C                 	db	12
   143                           
   144                           ;initializer for _stepMot2
   145  00246A  11                 	db	17
   146  00246B  05                 	db	5
   147  00246C  0C                 	db	12
   148  00246D  18                 	db	24
   149                           
   150                           ;initializer for _stepMot1
   151  00246E  22                 	db	34
   152  00246F  06                 	db	6
   153  002470  0C                 	db	12
   154  002471  28                 	db	40
   155                           
   156                           ;initializer for _errString_Feed
   157  002472  45                 	db	69
   158  002473  72                 	db	114
   159  002474  72                 	db	114
   160  002475  6F                 	db	111
   161  002476  72                 	db	114
   162  002477  2C                 	db	44
   163  002478  20                 	db	32
   164  002479  66                 	db	102
   165  00247A  65                 	db	101
   166  00247B  65                 	db	101
   167  00247C  64                 	db	100
   168  00247D  20                 	db	32
   169  00247E  6C                 	db	108
   170  00247F  69                 	db	105
   171  002480  6E                 	db	110
   172  002481  65                 	db	101
   173  002482  20                 	db	32
   174  002483  6E                 	db	110
   175  002484  6F                 	db	111
   176  002485  74                 	db	116
   177  002486  20                 	db	32
   178  002487  64                 	db	100
   179  002488  65                 	db	101
   180  002489  66                 	db	102
   181  00248A  69                 	db	105
   182  00248B  6E                 	db	110
   183  00248C  65                 	db	101
   184  00248D  64                 	db	100
   185  00248E  0A                 	db	10
   186  00248F  00                 	db	0
   187                           
   188                           ;initializer for _errString_Command
   189  002490  43                 	db	67
   190  002491  6F                 	db	111
   191  002492  6D                 	db	109
   192  002493  6D                 	db	109
   193  002494  61                 	db	97
   194  002495  6E                 	db	110
   195  002496  64                 	db	100
   196  002497  20                 	db	32
   197  002498  6E                 	db	110
   198  002499  6F                 	db	111
   199  00249A  74                 	db	116
   200  00249B  20                 	db	32
   201  00249C  72                 	db	114
   202  00249D  65                 	db	101
   203  00249E  63                 	db	99
   204  00249F  6F                 	db	111
   205  0024A0  67                 	db	103
   206  0024A1  6E                 	db	110
   207  0024A2  69                 	db	105
   208  0024A3  7A                 	db	122
   209  0024A4  65                 	db	101
   210  0024A5  64                 	db	100
   211  0024A6  0A                 	db	10
   212  0024A7  00                 	db	0
   213                           
   214                           	psect	idataBANK1
   215  00212A                     __pidataBANK1:
   216                           	callstack 0
   217                           
   218                           ;initializer for _errString_PointZ
   219  00212A  45                 	db	69
   220  00212B  72                 	db	114
   221  00212C  72                 	db	114
   222  00212D  6F                 	db	111
   223  00212E  72                 	db	114
   224  00212F  2C                 	db	44
   225  002130  20                 	db	32
   226  002131  74                 	db	116
   227  002132  69                 	db	105
   228  002133  6D                 	db	109
   229  002134  65                 	db	101
   230  002135  20                 	db	32
   231  002136  65                 	db	101
   232  002137  78                 	db	120
   233  002138  63                 	db	99
   234  002139  65                 	db	101
   235  00213A  65                 	db	101
   236  00213B  64                 	db	100
   237  00213C  65                 	db	101
   238  00213D  64                 	db	100
   239  00213E  20                 	db	32
   240  00213F  74                 	db	116
   241  002140  6F                 	db	111
   242  002141  20                 	db	32
   243  002142  72                 	db	114
   244  002143  65                 	db	101
   245  002144  61                 	db	97
   246  002145  63                 	db	99
   247  002146  68                 	db	104
   248  002147  20                 	db	32
   249  002148  74                 	db	116
   250  002149  68                 	db	104
   251  00214A  65                 	db	101
   252  00214B  20                 	db	32
   253  00214C  65                 	db	101
   254  00214D  6E                 	db	110
   255  00214E  64                 	db	100
   256  00214F  20                 	db	32
   257  002150  6F                 	db	111
   258  002151  66                 	db	102
   259  002152  20                 	db	32
   260  002153  74                 	db	116
   261  002154  68                 	db	104
   262  002155  65                 	db	101
   263  002156  20                 	db	32
   264  002157  5A                 	db	90
   265  002158  20                 	db	32
   266  002159  41                 	db	65
   267  00215A  78                 	db	120
   268  00215B  69                 	db	105
   269  00215C  73                 	db	115
   270  00215D  0A                 	db	10
   271  00215E  00                 	db	0
   272                           
   273                           ;initializer for _errString_Point
   274  00215F  45                 	db	69
   275  002160  72                 	db	114
   276  002161  72                 	db	114
   277  002162  6F                 	db	111
   278  002163  72                 	db	114
   279  002164  2C                 	db	44
   280  002165  20                 	db	32
   281  002166  74                 	db	116
   282  002167  69                 	db	105
   283  002168  6D                 	db	109
   284  002169  65                 	db	101
   285  00216A  20                 	db	32
   286  00216B  65                 	db	101
   287  00216C  78                 	db	120
   288  00216D  63                 	db	99
   289  00216E  65                 	db	101
   290  00216F  65                 	db	101
   291  002170  64                 	db	100
   292  002171  65                 	db	101
   293  002172  64                 	db	100
   294  002173  20                 	db	32
   295  002174  74                 	db	116
   296  002175  6F                 	db	111
   297  002176  20                 	db	32
   298  002177  72                 	db	114
   299  002178  65                 	db	101
   300  002179  61                 	db	97
   301  00217A  63                 	db	99
   302  00217B  68                 	db	104
   303  00217C  20                 	db	32
   304  00217D  74                 	db	116
   305  00217E  68                 	db	104
   306  00217F  65                 	db	101
   307  002180  20                 	db	32
   308  002181  70                 	db	112
   309  002182  6F                 	db	111
   310  002183  69                 	db	105
   311  002184  6E                 	db	110
   312  002185  74                 	db	116
   313  002186  0A                 	db	10
   314  002187  00                 	db	0
   315                           
   316                           ;initializer for _errString_ZEND
   317  002188  45                 	db	69
   318  002189  72                 	db	114
   319  00218A  72                 	db	114
   320  00218B  6F                 	db	111
   321  00218C  72                 	db	114
   322  00218D  2C                 	db	44
   323  00218E  20                 	db	32
   324  00218F  6E                 	db	110
   325  002190  6F                 	db	111
   326  002191  20                 	db	32
   327  002192  6F                 	db	111
   328  002193  62                 	db	98
   329  002194  6A                 	db	106
   330  002195  65                 	db	101
   331  002196  63                 	db	99
   332  002197  74                 	db	116
   333  002198  20                 	db	32
   334  002199  72                 	db	114
   335  00219A  65                 	db	101
   336  00219B  6C                 	db	108
   337  00219C  65                 	db	101
   338  00219D  76                 	db	118
   339  00219E  61                 	db	97
   340  00219F  74                 	db	116
   341  0021A0  65                 	db	101
   342  0021A1  64                 	db	100
   343  0021A2  20                 	db	32
   344  0021A3  61                 	db	97
   345  0021A4  6C                 	db	108
   346  0021A5  6F                 	db	111
   347  0021A6  6E                 	db	110
   348  0021A7  67                 	db	103
   349  0021A8  20                 	db	32
   350  0021A9  5A                 	db	90
   351  0021AA  20                 	db	32
   352  0021AB  41                 	db	65
   353  0021AC  78                 	db	120
   354  0021AD  69                 	db	105
   355  0021AE  73                 	db	115
   356  0021AF  0A                 	db	10
   357  0021B0  00                 	db	0
   358                           
   359                           ;initializer for _errString_Reset
   360  0021B1  45                 	db	69
   361  0021B2  72                 	db	114
   362  0021B3  72                 	db	114
   363  0021B4  6F                 	db	111
   364  0021B5  72                 	db	114
   365  0021B6  2C                 	db	44
   366  0021B7  20                 	db	32
   367  0021B8  74                 	db	116
   368  0021B9  69                 	db	105
   369  0021BA  6D                 	db	109
   370  0021BB  65                 	db	101
   371  0021BC  20                 	db	32
   372  0021BD  65                 	db	101
   373  0021BE  78                 	db	120
   374  0021BF  63                 	db	99
   375  0021C0  65                 	db	101
   376  0021C1  65                 	db	101
   377  0021C2  64                 	db	100
   378  0021C3  65                 	db	101
   379  0021C4  64                 	db	100
   380  0021C5  20                 	db	32
   381  0021C6  74                 	db	116
   382  0021C7  6F                 	db	111
   383  0021C8  20                 	db	32
   384  0021C9  72                 	db	114
   385  0021CA  65                 	db	101
   386  0021CB  73                 	db	115
   387  0021CC  65                 	db	101
   388  0021CD  74                 	db	116
   389  0021CE  20                 	db	32
   390  0021CF  70                 	db	112
   391  0021D0  6F                 	db	111
   392  0021D1  73                 	db	115
   393  0021D2  69                 	db	105
   394  0021D3  74                 	db	116
   395  0021D4  69                 	db	105
   396  0021D5  6F                 	db	111
   397  0021D6  6E                 	db	110
   398  0021D7  0A                 	db	10
   399  0021D8  00                 	db	0
   400                           
   401                           ;initializer for _errString_Fatal
   402  0021D9  46                 	db	70
   403  0021DA  61                 	db	97
   404  0021DB  74                 	db	116
   405  0021DC  61                 	db	97
   406  0021DD  6C                 	db	108
   407  0021DE  20                 	db	32
   408  0021DF  45                 	db	69
   409  0021E0  72                 	db	114
   410  0021E1  72                 	db	114
   411  0021E2  6F                 	db	111
   412  0021E3  72                 	db	114
   413  0021E4  2C                 	db	44
   414  0021E5  20                 	db	32
   415  0021E6  70                 	db	112
   416  0021E7  6C                 	db	108
   417  0021E8  65                 	db	101
   418  0021E9  61                 	db	97
   419  0021EA  73                 	db	115
   420  0021EB  65                 	db	101
   421  0021EC  20                 	db	32
   422  0021ED  72                 	db	114
   423  0021EE  65                 	db	101
   424  0021EF  73                 	db	115
   425  0021F0  65                 	db	101
   426  0021F1  74                 	db	116
   427  0021F2  20                 	db	32
   428  0021F3  74                 	db	116
   429  0021F4  68                 	db	104
   430  0021F5  65                 	db	101
   431  0021F6  20                 	db	32
   432  0021F7  64                 	db	100
   433  0021F8  65                 	db	101
   434  0021F9  76                 	db	118
   435  0021FA  69                 	db	105
   436  0021FB  63                 	db	99
   437  0021FC  65                 	db	101
   438  0021FD  21                 	db	33
   439  0021FE  0A                 	db	10
   440  0021FF  00                 	db	0
   441                           
   442                           ;initializer for _errString_Bound
   443  002200  45                 	db	69
   444  002201  72                 	db	114
   445  002202  72                 	db	114
   446  002203  6F                 	db	111
   447  002204  72                 	db	114
   448  002205  2C                 	db	44
   449  002206  20                 	db	32
   450  002207  70                 	db	112
   451  002208  6F                 	db	111
   452  002209  69                 	db	105
   453  00220A  6E                 	db	110
   454  00220B  74                 	db	116
   455  00220C  20                 	db	32
   456  00220D  6F                 	db	111
   457  00220E  75                 	db	117
   458  00220F  74                 	db	116
   459  002210  73                 	db	115
   460  002211  69                 	db	105
   461  002212  64                 	db	100
   462  002213  65                 	db	101
   463  002214  20                 	db	32
   464  002215  62                 	db	98
   465  002216  6F                 	db	111
   466  002217  75                 	db	117
   467  002218  6E                 	db	110
   468  002219  64                 	db	100
   469  00221A  61                 	db	97
   470  00221B  72                 	db	114
   471  00221C  69                 	db	105
   472  00221D  65                 	db	101
   473  00221E  73                 	db	115
   474  00221F  0A                 	db	10
   475  002220  00                 	db	0
   476                           
   477                           	psect	smallconst
   478  000600                     __psmallconst:
   479                           	callstack 0
   480  000600  00                 	db	0
   481  000601  0000               	dw	0
   482  000603  4000               	dw	16384
   483  000605                     __end_ofrotateObj@stepAngle:
   484                           	callstack 0
   485  000605  0065               	dw	101
   486  000607                     __end_of_maxY:
   487                           	callstack 0
   488  000607  0065               	dw	101
   489  000609                     __end_of_maxX:
   490                           	callstack 0
   491  000609  0400               	dw	1024
   492  00060B                     __end_of_therm_pressure:
   493                           	callstack 0
   494  00060B  0200               	dw	512
   495  00060D                     __end_of_touch_pressure:
   496                           	callstack 0
   497  00060D                     _feeder3Pos:
   498                           	callstack 0
   499  00060D  0F                 	db	15
   500  00060E  50                 	db	80
   501  00060F                     __end_of_feeder3Pos:
   502                           	callstack 0
   503  00060F                     _feeder2Pos:
   504                           	callstack 0
   505  00060F  0F                 	db	15
   506  000610  32                 	db	50
   507  000611                     __end_of_feeder2Pos:
   508                           	callstack 0
   509  000611                     _feeder1Pos:
   510                           	callstack 0
   511  000611  0F                 	db	15
   512  000612  14                 	db	20
   513  000613                     __end_of_feeder1Pos:
   514                           	callstack 0
   515  000613  64                 	db	100
   516  000614                     __end_of_maxFeedY:
   517                           	callstack 0
   518  000614  1E                 	db	30
   519  000615                     __end_of_maxFeedX:
   520                           	callstack 0
   521  0000                     _TMR0	set	4054
   522  0000                     _T1CONbits	set	4045
   523  0000                     _TXREG	set	4013
   524  0000                     _SPBRG	set	4015
   525  0000                     _RCSTAbits	set	4011
   526  0000                     _TXSTAbits	set	4012
   527  0000                     _TRISCbits	set	3988
   528  0000                     _RCREG1	set	4014
   529  0000                     _ADRESH	set	4036
   530  0000                     _ADRESL	set	4035
   531  0000                     _PIR1bits	set	3998
   532  0000                     _RCONbits	set	4048
   533  0000                     _INTCONbits	set	4082
   534  0000                     _IPR1bits	set	3999
   535  0000                     _PIE1bits	set	3997
   536  0000                     _ADCON0bits	set	4034
   537  0000                     _RCSTA1bits	set	4011
   538  0000                     _LATD	set	3980
   539  0000                     _PORTDbits	set	3971
   540  0000                     _TMR2	set	4044
   541  0000                     _LATC	set	3979
   542  0000                     _LATB	set	3978
   543  0000                     _LATA	set	3977
   544  0000                     _PORTEbits	set	3972
   545  0000                     _T0CONbits	set	4053
   546  0000                     _T2CONbits	set	4042
   547  0000                     _LATDbits	set	3980
   548  0000                     _LATCbits	set	3979
   549  0000                     _LATBbits	set	3978
   550  0000                     _LATAbits	set	3977
   551  0000                     _TRISDbits	set	3989
   552  0000                     _TRISEbits	set	3990
   553  0000                     _TRISD	set	3989
   554  0000                     _TRISC	set	3988
   555  0000                     _TRISB	set	3987
   556  0000                     _TRISA	set	3986
   557  0000                     _ADCON1bits	set	4033
   558  000615  00                 	db	0	; dummy byte at the end
   559  0000                     
   560                           ; #config settings
   561                           
   562                           	psect	cinit
   563  0022E0                     __pcinit:
   564                           	callstack 0
   565  0022E0                     start_initialization:
   566                           	callstack 0
   567  0022E0                     __initialization:
   568                           	callstack 0
   569                           
   570                           ; Initialize objects allocated to BANK1 (247 bytes)
   571                           ; load TBLPTR registers with __pidataBANK1
   572  0022E0  0E2A               	movlw	low __pidataBANK1
   573  0022E2  6EF6               	movwf	tblptrl,c
   574  0022E4  0E21               	movlw	high __pidataBANK1
   575  0022E6  6EF7               	movwf	tblptrh,c
   576  0022E8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   577  0022EA  6EF8               	movwf	tblptru,c
   578  0022EC  EE01  F000         	lfsr	0,__pdataBANK1
   579  0022F0  EE10 F0F7          	lfsr	1,247
   580  0022F4                     copy_data0:
   581  0022F4  0009               	tblrd		*+
   582  0022F6  CFF5 FFEE          	movff	tablat,postinc0
   583  0022FA  50E5               	movf	postdec1,w,c
   584  0022FC  50E1               	movf	fsr1l,w,c
   585  0022FE  E1FA               	bnz	copy_data0
   586                           
   587                           ; Initialize objects allocated to BANK0 (70 bytes)
   588                           ; load TBLPTR registers with __pidataBANK0
   589  002300  0E62               	movlw	low __pidataBANK0
   590  002302  6EF6               	movwf	tblptrl,c
   591  002304  0E24               	movlw	high __pidataBANK0
   592  002306  6EF7               	movwf	tblptrh,c
   593  002308  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   594  00230A  6EF8               	movwf	tblptru,c
   595  00230C  EE00  F080         	lfsr	0,__pdataBANK0
   596  002310  EE10 F046          	lfsr	1,70
   597  002314                     copy_data1:
   598  002314  0009               	tblrd		*+
   599  002316  CFF5 FFEE          	movff	tablat,postinc0
   600  00231A  50E5               	movf	postdec1,w,c
   601  00231C  50E1               	movf	fsr1l,w,c
   602  00231E  E1FA               	bnz	copy_data1
   603                           
   604                           ; Initialize objects allocated to COMRAM (7 bytes)
   605                           ; load TBLPTR registers with __pidataCOMRAM
   606  002320  0E14               	movlw	low __pidataCOMRAM
   607  002322  6EF6               	movwf	tblptrl,c
   608  002324  0E27               	movlw	high __pidataCOMRAM
   609  002326  6EF7               	movwf	tblptrh,c
   610  002328  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   611  00232A  6EF8               	movwf	tblptru,c
   612  00232C  EE00  F067         	lfsr	0,__pdataCOMRAM
   613  002330  EE10 F007          	lfsr	1,7
   614  002334                     copy_data2:
   615  002334  0009               	tblrd		*+
   616  002336  CFF5 FFEE          	movff	tablat,postinc0
   617  00233A  50E5               	movf	postdec1,w,c
   618  00233C  50E1               	movf	fsr1l,w,c
   619  00233E  E1FA               	bnz	copy_data2
   620                           
   621                           ; Clear objects allocated to BANK0 (28 bytes)
   622  002340  EE00  F0C6         	lfsr	0,__pbssBANK0
   623  002344  0E1C               	movlw	28
   624  002346                     clear_0:
   625  002346  6AEE               	clrf	postinc0,c
   626  002348  06E8               	decf	wreg,f,c
   627  00234A  E1FD               	bnz	clear_0
   628                           
   629                           ; Clear objects allocated to COMRAM (36 bytes)
   630  00234C  EE00  F043         	lfsr	0,__pbssCOMRAM
   631  002350  0E24               	movlw	36
   632  002352                     clear_1:
   633  002352  6AEE               	clrf	postinc0,c
   634  002354  06E8               	decf	wreg,f,c
   635  002356  E1FD               	bnz	clear_1
   636  002358                     end_of_initialization:
   637                           	callstack 0
   638  002358                     __end_of__initialization:
   639                           	callstack 0
   640  002358  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   641  00235A  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   642  00235C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   643  00235E  6EF8               	movwf	tblptru,c
   644  002360  0100               	movlb	0
   645  002362  EFB3  F00C         	goto	_main	;jump to C main() function
   646                           
   647                           	psect	bssCOMRAM
   648  000043                     __pbssCOMRAM:
   649                           	callstack 0
   650  000043                     _receivedMex:
   651                           	callstack 0
   652  000043                     	ds	9
   653  00004C                     _posVector:
   654                           	callstack 0
   655  00004C                     	ds	3
   656  00004F                     _pwmPeriod:
   657                           	callstack 0
   658  00004F                     	ds	2
   659  000051                     _single_cycle:
   660                           	callstack 0
   661  000051                     	ds	2
   662  000053                     _ADC_res:
   663                           	callstack 0
   664  000053                     	ds	2
   665  000055                     _newFeeder:
   666                           	callstack 0
   667  000055                     	ds	2
   668  000057                     _rotAngle:
   669                           	callstack 0
   670  000057                     	ds	2
   671  000059                     _tm0Error:
   672                           	callstack 0
   673  000059                     	ds	2
   674  00005B                     _stepToggle:
   675                           	callstack 0
   676  00005B                     	ds	1
   677  00005C                     _pwmStep:
   678                           	callstack 0
   679  00005C                     	ds	1
   680  00005D                     _neverCheck:
   681                           	callstack 0
   682  00005D                     	ds	1
   683  00005E                     _counter:
   684                           	callstack 0
   685  00005E                     	ds	1
   686  00005F                     __newSequence:
   687                           	callstack 0
   688  00005F                     	ds	1
   689  000060                     __fatalError:
   690                           	callstack 0
   691  000060                     	ds	1
   692  000061                     _dataCounter:
   693                           	callstack 0
   694  000061                     	ds	1
   695  000062                     _completeStep:
   696                           	callstack 0
   697  000062                     	ds	1
   698  000063                     _tm0Count:
   699                           	callstack 0
   700  000063                     	ds	1
   701  000064                     _therm_rel:
   702                           	callstack 0
   703  000064                     	ds	1
   704  000065                     _touch_rel:
   705                           	callstack 0
   706  000065                     	ds	1
   707  000066                     _tm0Limit:
   708                           	callstack 0
   709  000066                     	ds	1
   710                           
   711                           	psect	dataCOMRAM
   712  000067                     __pdataCOMRAM:
   713                           	callstack 0
   714  000067                     _motCounter:
   715                           	callstack 0
   716  000067                     	ds	6
   717  00006D                     _mexLength:
   718                           	callstack 0
   719  00006D                     	ds	1
   720                           
   721                           	psect	bssBANK0
   722  0000C6                     __pbssBANK0:
   723                           	callstack 0
   724  0000C6                     _dataSequence:
   725                           	callstack 0
   726  0000C6                     	ds	20
   727  0000DA                     _newSequenceData:
   728                           	callstack 0
   729  0000DA                     	ds	8
   730                           
   731                           	psect	dataBANK0
   732  000080                     __pdataBANK0:
   733                           	callstack 0
   734  000080                     rotateObj@rotSequence:
   735                           	callstack 0
   736  000080                     	ds	4
   737  000084                     _stepMot3:
   738                           	callstack 0
   739  000084                     	ds	4
   740  000088                     _stepMot2:
   741                           	callstack 0
   742  000088                     	ds	4
   743  00008C                     _stepMot1:
   744                           	callstack 0
   745  00008C                     	ds	4
   746  000090                     _errString_Feed:
   747                           	callstack 0
   748  000090                     	ds	30
   749  0000AE                     _errString_Command:
   750                           	callstack 0
   751  0000AE                     	ds	24
   752                           
   753                           	psect	dataBANK1
   754  000100                     __pdataBANK1:
   755                           	callstack 0
   756  000100                     _errString_PointZ:
   757                           	callstack 0
   758  000100                     	ds	53
   759  000135                     _errString_Point:
   760                           	callstack 0
   761  000135                     	ds	41
   762  00015E                     _errString_ZEND:
   763                           	callstack 0
   764  00015E                     	ds	41
   765  000187                     _errString_Reset:
   766                           	callstack 0
   767  000187                     	ds	40
   768  0001AF                     _errString_Fatal:
   769                           	callstack 0
   770  0001AF                     	ds	39
   771  0001D6                     _errString_Bound:
   772                           	callstack 0
   773  0001D6                     	ds	33
   774                           
   775                           	psect	cstackBANK0
   776  0000E2                     __pcstackBANK0:
   777                           	callstack 0
   778  0000E2                     rotateObj@rotAngle:
   779                           	callstack 0
   780                           
   781                           ; 1 bytes @ 0x0
   782  0000E2                     	ds	1
   783  0000E3                     rotateObj@totStep:
   784                           	callstack 0
   785                           
   786                           ; 2 bytes @ 0x1
   787  0000E3                     	ds	2
   788  0000E5                     rotateObj@i:
   789                           	callstack 0
   790                           
   791                           ; 2 bytes @ 0x3
   792  0000E5                     	ds	2
   793  0000E7                     rotateObj@c:
   794                           	callstack 0
   795                           
   796                           ; 2 bytes @ 0x5
   797  0000E7                     	ds	2
   798  0000E9                     ??_executeData:
   799                           
   800                           ; 1 bytes @ 0x7
   801  0000E9                     	ds	2
   802  0000EB                     executeData@data:
   803                           	callstack 0
   804                           
   805                           ; 2 bytes @ 0x9
   806  0000EB                     	ds	2
   807  0000ED                     executeData@errCode:
   808                           	callstack 0
   809                           
   810                           ; 1 bytes @ 0xB
   811  0000ED                     	ds	1
   812  0000EE                     ??_main:
   813                           
   814                           ; 1 bytes @ 0xC
   815  0000EE                     	ds	2
   816  0000F0                     main@errCode:
   817                           	callstack 0
   818                           
   819                           ; 1 bytes @ 0xE
   820  0000F0                     	ds	1
   821  0000F1                     main@newData:
   822                           	callstack 0
   823                           
   824                           ; 2 bytes @ 0xF
   825  0000F1                     	ds	2
   826                           
   827                           	psect	cstackCOMRAM
   828  000001                     __pcstackCOMRAM:
   829                           	callstack 0
   830  000001                     ?_retPeriod:
   831                           	callstack 0
   832  000001                     i2uartTx@ptr:
   833                           	callstack 0
   834                           
   835                           ; 2 bytes @ 0x0
   836  000001                     	ds	2
   837  000003                     i2uartTx@length:
   838                           	callstack 0
   839                           
   840                           ; 1 bytes @ 0x2
   841  000003                     	ds	1
   842  000004                     i2uartTx@i:
   843                           	callstack 0
   844                           
   845                           ; 1 bytes @ 0x3
   846  000004                     	ds	1
   847  000005                     ??i2_printError:
   848                           
   849                           ; 1 bytes @ 0x4
   850  000005                     	ds	2
   851  000007                     i2printError@errCode:
   852                           	callstack 0
   853                           
   854                           ; 1 bytes @ 0x6
   855  000007                     	ds	1
   856  000008                     ??i2_storeData:
   857                           
   858                           ; 1 bytes @ 0x7
   859  000008                     	ds	2
   860  00000A                     i2storeData@data:
   861                           	callstack 0
   862                           
   863                           ; 1 bytes @ 0x9
   864  00000A                     	ds	1
   865  00000B                     ??_isr:
   866                           
   867                           ; 1 bytes @ 0xA
   868  00000B                     	ds	6
   869  000011                     isr@temp:
   870                           	callstack 0
   871                           
   872                           ; 1 bytes @ 0x10
   873  000011                     	ds	1
   874  000012                     ??_shiftData:
   875  000012                     ?_stepMade:
   876                           	callstack 0
   877  000012                     ?_stepCounter:
   878                           	callstack 0
   879  000012                     ?_returnTouch:
   880                           	callstack 0
   881  000012                     ?_returnTherm:
   882                           	callstack 0
   883  000012                     ?_getNewSequence:
   884                           	callstack 0
   885  000012                     ?_getData:
   886                           	callstack 0
   887  000012                     ?___xxtofl:
   888                           	callstack 0
   889  000012                     uartTx@ptr:
   890                           	callstack 0
   891  000012                     tim2Init@_pwmPeriod:
   892                           	callstack 0
   893  000012                     ___xxtofl@val:
   894                           	callstack 0
   895                           
   896                           ; 4 bytes @ 0x11
   897  000012                     	ds	2
   898  000014                     shiftData@i:
   899                           	callstack 0
   900  000014                     uartTx@length:
   901                           	callstack 0
   902  000014                     stepMade@temp:
   903                           	callstack 0
   904                           
   905                           ; 1 bytes @ 0x13
   906  000014                     	ds	1
   907  000015                     resetPosition@keepMovingX:
   908                           	callstack 0
   909  000015                     uartTx@i:
   910                           	callstack 0
   911  000015                     moveToPoint@x1:
   912                           	callstack 0
   913                           
   914                           ; 2 bytes @ 0x14
   915  000015                     	ds	1
   916  000016                     ??_printError:
   917  000016                     ??___xxtofl:
   918  000016                     resetPosition@keepMovingY:
   919                           	callstack 0
   920                           
   921                           ; 1 bytes @ 0x15
   922  000016                     	ds	1
   923  000017                     resetPosition@keepMovingZ:
   924                           	callstack 0
   925  000017                     moveToPoint@y1:
   926                           	callstack 0
   927                           
   928                           ; 2 bytes @ 0x16
   929  000017                     	ds	1
   930  000018                     printError@errCode:
   931                           	callstack 0
   932                           
   933                           ; 1 bytes @ 0x17
   934  000018                     	ds	1
   935  000019                     ??_storeData:
   936  000019                     moveToPoint@x2:
   937                           	callstack 0
   938                           
   939                           ; 2 bytes @ 0x18
   940  000019                     	ds	1
   941  00001A                     ___xxtofl@sign:
   942                           	callstack 0
   943                           
   944                           ; 1 bytes @ 0x19
   945  00001A                     	ds	1
   946  00001B                     storeData@data:
   947                           	callstack 0
   948  00001B                     ___xxtofl@exp:
   949                           	callstack 0
   950  00001B                     moveToPoint@y2:
   951                           	callstack 0
   952                           
   953                           ; 2 bytes @ 0x1A
   954  00001B                     	ds	1
   955  00001C                     ___xxtofl@arg:
   956                           	callstack 0
   957                           
   958                           ; 4 bytes @ 0x1B
   959  00001C                     	ds	1
   960  00001D                     ??_moveToPoint:
   961                           
   962                           ; 1 bytes @ 0x1C
   963  00001D                     	ds	2
   964  00001F                     moveToPoint@MOT1Direction:
   965                           	callstack 0
   966                           
   967                           ; 1 bytes @ 0x1E
   968  00001F                     	ds	1
   969  000020                     ?___fldiv:
   970                           	callstack 0
   971  000020                     moveToPoint@MOT2Direction:
   972                           	callstack 0
   973  000020                     ___fldiv@b:
   974                           	callstack 0
   975                           
   976                           ; 4 bytes @ 0x1F
   977  000020                     	ds	1
   978  000021                     moveToPoint@keepMovingX:
   979                           	callstack 0
   980                           
   981                           ; 1 bytes @ 0x20
   982  000021                     	ds	1
   983  000022                     moveToPoint@keepMovingY:
   984                           	callstack 0
   985                           
   986                           ; 1 bytes @ 0x21
   987  000022                     	ds	2
   988  000024                     ___fldiv@a:
   989                           	callstack 0
   990                           
   991                           ; 4 bytes @ 0x23
   992  000024                     	ds	4
   993  000028                     ??___fldiv:
   994                           
   995                           ; 1 bytes @ 0x27
   996  000028                     	ds	4
   997  00002C                     ___fldiv@rem:
   998                           	callstack 0
   999                           
  1000                           ; 4 bytes @ 0x2B
  1001  00002C                     	ds	4
  1002  000030                     ___fldiv@sign:
  1003                           	callstack 0
  1004                           
  1005                           ; 1 bytes @ 0x2F
  1006  000030                     	ds	1
  1007  000031                     ___fldiv@new_exp:
  1008                           	callstack 0
  1009                           
  1010                           ; 2 bytes @ 0x30
  1011  000031                     	ds	2
  1012  000033                     ___fldiv@grs:
  1013                           	callstack 0
  1014                           
  1015                           ; 4 bytes @ 0x32
  1016  000033                     	ds	4
  1017  000037                     ___fldiv@bexp:
  1018                           	callstack 0
  1019                           
  1020                           ; 1 bytes @ 0x36
  1021  000037                     	ds	1
  1022  000038                     ___fldiv@aexp:
  1023                           	callstack 0
  1024                           
  1025                           ; 1 bytes @ 0x37
  1026  000038                     	ds	1
  1027  000039                     ?___fltol:
  1028                           	callstack 0
  1029  000039                     ___fltol@f1:
  1030                           	callstack 0
  1031                           
  1032                           ; 4 bytes @ 0x38
  1033  000039                     	ds	4
  1034  00003D                     ??___fltol:
  1035                           
  1036                           ; 1 bytes @ 0x3C
  1037  00003D                     	ds	4
  1038  000041                     ___fltol@sign1:
  1039                           	callstack 0
  1040                           
  1041                           ; 1 bytes @ 0x40
  1042  000041                     	ds	1
  1043  000042                     ___fltol@exp1:
  1044                           	callstack 0
  1045                           
  1046                           ; 1 bytes @ 0x41
  1047  000042                     	ds	1
  1048  000043                     
  1049                           ; 1 bytes @ 0x42
  1050 ;;
  1051 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1052 ;;
  1053 ;; *************** function _main *****************
  1054 ;; Defined at:
  1055 ;;		line 18 in file "main.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;		None
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;  newData         2   15[BANK0 ] PTR struct .
  1060 ;;		 -> newSequenceData(8), 
  1061 ;;  errCode         1   14[BANK0 ] unsigned char 
  1062 ;; Return value:  Size  Location     Type
  1063 ;;                  1    wreg      void 
  1064 ;; Registers used:
  1065 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1066 ;; Tracked objects:
  1067 ;;		On entry : 0/0
  1068 ;;		On exit  : 0/0
  1069 ;;		Unchanged: 0/0
  1070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1071 ;;      Params:         0       0       0       0       0       0       0
  1072 ;;      Locals:         0       3       0       0       0       0       0
  1073 ;;      Temps:          0       2       0       0       0       0       0
  1074 ;;      Totals:         0       5       0       0       0       0       0
  1075 ;;Total ram usage:        5 bytes
  1076 ;; Hardware stack levels required when called:    7
  1077 ;; This function calls:
  1078 ;;		_clearTM0
  1079 ;;		_executeData
  1080 ;;		_getNewSequence
  1081 ;;		_initADC
  1082 ;;		_initPinMotors
  1083 ;;		_interruptInit
  1084 ;;		_newSequence
  1085 ;;		_printError
  1086 ;;		_readSeq
  1087 ;;		_reduceSeq
  1088 ;;		_resetNewSequence
  1089 ;;		_resetPosition
  1090 ;;		_shiftData
  1091 ;;		_storeData
  1092 ;;		_tim0Init
  1093 ;;		_tim1Init
  1094 ;;		_tim2Init
  1095 ;;		_usartInit
  1096 ;; This function is called by:
  1097 ;;		Startup code after reset
  1098 ;; This function uses a non-reentrant model
  1099 ;;
  1100                           
  1101                           	psect	text0
  1102  001966                     __ptext0:
  1103                           	callstack 0
  1104  001966                     _main:
  1105                           	callstack 24
  1106  001966  FFFF               	dw	65535	; assembler added errata NOP
  1107                           
  1108                           ;main.c: 22:     interruptInit();
  1109  001968  EC54  F012         	call	_interruptInit	;wreg free
  1110  00196C                     
  1111                           ;main.c: 23:     initPinMotors();
  1112  00196C  ECA2  F012         	call	_initPinMotors	;wreg free
  1113  001970                     
  1114                           ;main.c: 24:     initADC();
  1115  001970  ECB5  F012         	call	_initADC	;wreg free
  1116  001974                     
  1117                           ;main.c: 25:     usartInit();
  1118  001974  ECC8  F012         	call	_usartInit	;wreg free
  1119  001978                     
  1120                           ;main.c: 26:     tim0Init();
  1121  001978  ECEA  F012         	call	_tim0Init	;wreg free
  1122  00197C                     
  1123                           ;main.c: 27:     tim1Init();
  1124  00197C  EC05  F013         	call	_tim1Init	;wreg free
  1125  001980                     
  1126                           ;main.c: 28:     tim2Init(10);
  1127  001980  0E00               	movlw	0
  1128  001982  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1129  001984  0E0A               	movlw	10
  1130  001986  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1131  001988  ECE1  F012         	call	_tim2Init	;wreg free
  1132  00198C                     
  1133                           ;main.c: 31:     errCode = resetPosition();
  1134  00198C  ECC1  F00B         	call	_resetPosition	;wreg free
  1135  001990  0100               	movlb	0	; () banked
  1136  001992  6FF0               	movwf	main@errCode& (0+255),b
  1137  001994                     
  1138                           ; BSR set to: 0
  1139                           ;main.c: 32:     if(errCode != 0){
  1140  001994  51F0               	movf	main@errCode& (0+255),w,b
  1141  001996  B4D8               	btfsc	status,2,c
  1142  001998  EFD0  F00C         	goto	u4131
  1143  00199C  EFD3  F00C         	goto	u4130
  1144  0019A0                     u4131:
  1145  0019A0  FFFF               	dw	65535	; assembler added errata NOP
  1146  0019A2  EFDA  F00C         	goto	l325
  1147  0019A6                     u4130:
  1148  0019A6  FFFF               	dw	65535	; assembler added errata NOP
  1149  0019A8                     
  1150                           ; BSR set to: 0
  1151                           ;main.c: 33:         printError(errCode);
  1152  0019A8  51F0               	movf	main@errCode& (0+255),w,b
  1153  0019AA  ECEA  F00D         	call	_printError
  1154  0019AE                     l326:
  1155  0019AE  FFFF               	dw	65535	; assembler added errata NOP
  1156  0019B0  EFD7  F00C         	goto	l326
  1157  0019B4                     l325:
  1158  0019B4  FFFF               	dw	65535	; assembler added errata NOP
  1159                           
  1160                           ; BSR set to: 0
  1161                           ;main.c: 38:     RCSTA1bits.CREN = 1;
  1162  0019B6  88AB               	bsf	171,4,c	;volatile
  1163  0019B8                     l4658:
  1164  0019B8  FFFF               	dw	65535	; assembler added errata NOP
  1165                           
  1166                           ;main.c: 41:         if(newSequence()){
  1167  0019BA  EC76  F013         	call	_newSequence	;wreg free
  1168  0019BE  0900               	iorlw	0
  1169  0019C0  B4D8               	btfsc	status,2,c
  1170  0019C2  EFE5  F00C         	goto	u4141
  1171  0019C6  EFE8  F00C         	goto	u4140
  1172  0019CA                     u4141:
  1173  0019CA  FFFF               	dw	65535	; assembler added errata NOP
  1174  0019CC  EF31  F00D         	goto	l4678
  1175  0019D0                     u4140:
  1176  0019D0  FFFF               	dw	65535	; assembler added errata NOP
  1177  0019D2                     
  1178                           ;main.c: 42:             t_newSequence* newData = getNewSequence();
  1179  0019D2  EC0C  F013         	call	_getNewSequence	;wreg free
  1180  0019D6  C012  F0F1         	movff	?_getNewSequence,main@newData
  1181  0019DA  C013  F0F2         	movff	?_getNewSequence+1,main@newData+1
  1182  0019DE                     
  1183                           ;main.c: 44:             newFeeder[0] = newData ->init_posX;
  1184  0019DE  0100               	movlb	0	; () banked
  1185  0019E0  EE20 F002          	lfsr	2,2
  1186  0019E4  51F1               	movf	main@newData& (0+255),w,b
  1187  0019E6  26D9               	addwf	fsr2l,f,c
  1188  0019E8  51F2               	movf	(main@newData+1)& (0+255),w,b
  1189  0019EA  22DA               	addwfc	fsr2h,f,c
  1190  0019EC  50DF               	movf	indf2,w,c
  1191  0019EE  6E55               	movwf	_newFeeder^0,c
  1192  0019F0                     
  1193                           ; BSR set to: 0
  1194                           ;main.c: 45:             newFeeder[1] = newData ->init_posY;
  1195  0019F0  EE20 F003          	lfsr	2,3
  1196  0019F4  51F1               	movf	main@newData& (0+255),w,b
  1197  0019F6  26D9               	addwf	fsr2l,f,c
  1198  0019F8  51F2               	movf	(main@newData+1)& (0+255),w,b
  1199  0019FA  22DA               	addwfc	fsr2h,f,c
  1200  0019FC  50DF               	movf	indf2,w,c
  1201  0019FE  6E56               	movwf	(_newFeeder+1)^0,c
  1202  001A00                     
  1203                           ; BSR set to: 0
  1204                           ;main.c: 48:             storeData(1);
  1205  001A00  0E01               	movlw	1
  1206  001A02  EC41  F008         	call	_storeData
  1207  001A06                     
  1208                           ;main.c: 49:             storeData(0xFF);
  1209  001A06  0EFF               	movlw	255
  1210  001A08  EC41  F008         	call	_storeData
  1211  001A0C                     
  1212                           ;main.c: 50:             storeData(newData ->end_posX);
  1213  001A0C  0100               	movlb	0	; () banked
  1214  001A0E  EE20 F005          	lfsr	2,5
  1215  001A12  51F1               	movf	main@newData& (0+255),w,b
  1216  001A14  26D9               	addwf	fsr2l,f,c
  1217  001A16  51F2               	movf	(main@newData+1)& (0+255),w,b
  1218  001A18  22DA               	addwfc	fsr2h,f,c
  1219  001A1A  50DF               	movf	indf2,w,c
  1220  001A1C  EC41  F008         	call	_storeData
  1221  001A20                     
  1222                           ;main.c: 51:             storeData(newData ->end_posY);
  1223  001A20  0100               	movlb	0	; () banked
  1224  001A22  EE20 F006          	lfsr	2,6
  1225  001A26  51F1               	movf	main@newData& (0+255),w,b
  1226  001A28  26D9               	addwf	fsr2l,f,c
  1227  001A2A  51F2               	movf	(main@newData+1)& (0+255),w,b
  1228  001A2C  22DA               	addwfc	fsr2h,f,c
  1229  001A2E  50DF               	movf	indf2,w,c
  1230  001A30  EC41  F008         	call	_storeData
  1231  001A34                     
  1232                           ;main.c: 52:             storeData(newData ->end_rot - newData ->init_rot);
  1233  001A34  0100               	movlb	0	; () banked
  1234  001A36  EE20 F004          	lfsr	2,4
  1235  001A3A  51F1               	movf	main@newData& (0+255),w,b
  1236  001A3C  26D9               	addwf	fsr2l,f,c
  1237  001A3E  51F2               	movf	(main@newData+1)& (0+255),w,b
  1238  001A40  22DA               	addwfc	fsr2h,f,c
  1239  001A42  50DF               	movf	indf2,w,c
  1240  001A44  6FEE               	movwf	??_main& (0+255),b
  1241  001A46  EE20 F007          	lfsr	2,7
  1242  001A4A  51F1               	movf	main@newData& (0+255),w,b
  1243  001A4C  26D9               	addwf	fsr2l,f,c
  1244  001A4E  51F2               	movf	(main@newData+1)& (0+255),w,b
  1245  001A50  22DA               	addwfc	fsr2h,f,c
  1246  001A52  50DF               	movf	indf2,w,c
  1247  001A54  6FEF               	movwf	(??_main+1)& (0+255),b
  1248  001A56  51EE               	movf	??_main& (0+255),w,b
  1249  001A58  5DEF               	subwf	(??_main+1)& (0+255),w,b
  1250  001A5A  EC41  F008         	call	_storeData
  1251  001A5E                     
  1252                           ;main.c: 55:             resetNewSequence();
  1253  001A5E  EC41  F013         	call	_resetNewSequence	;wreg free
  1254  001A62                     l4678:
  1255  001A62  FFFF               	dw	65535	; assembler added errata NOP
  1256                           
  1257                           ;main.c: 57:         if(readSeq()){
  1258  001A64  EC72  F013         	call	_readSeq	;wreg free
  1259  001A68  0900               	iorlw	0
  1260  001A6A  B4D8               	btfsc	status,2,c
  1261  001A6C  EF3A  F00D         	goto	u4151
  1262  001A70  EF3D  F00D         	goto	u4150
  1263  001A74                     u4151:
  1264  001A74  FFFF               	dw	65535	; assembler added errata NOP
  1265  001A76  EFDC  F00C         	goto	l4658
  1266  001A7A                     u4150:
  1267  001A7A  FFFF               	dw	65535	; assembler added errata NOP
  1268  001A7C                     
  1269                           ;main.c: 61:             errCode = executeData();
  1270  001A7C  ECC6  F006         	call	_executeData	;wreg free
  1271  001A80  0100               	movlb	0	; () banked
  1272  001A82  6FF0               	movwf	main@errCode& (0+255),b
  1273  001A84                     
  1274                           ; BSR set to: 0
  1275                           ;main.c: 63:             printError(errCode);
  1276  001A84  51F0               	movf	main@errCode& (0+255),w,b
  1277  001A86  ECEA  F00D         	call	_printError
  1278  001A8A                     
  1279                           ;main.c: 66:             clearTM0();
  1280  001A8A  EC1A  F013         	call	_clearTM0	;wreg free
  1281  001A8E                     
  1282                           ;main.c: 70:             reduceSeq();
  1283  001A8E  EC6E  F013         	call	_reduceSeq	;wreg free
  1284  001A92                     
  1285                           ;main.c: 71:             shiftData();
  1286  001A92  ECB3  F011         	call	_shiftData	;wreg free
  1287  001A96  EFDC  F00C         	goto	l4658
  1288  001A9A  EFD2  F000         	goto	start
  1289  001A9E                     __end_of_main:
  1290                           	callstack 0
  1291                           
  1292 ;; *************** function _usartInit *****************
  1293 ;; Defined at:
  1294 ;;		line 111 in file "usart.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;		None
  1297 ;; Auto vars:     Size  Location     Type
  1298 ;;		None
  1299 ;; Return value:  Size  Location     Type
  1300 ;;                  1    wreg      void 
  1301 ;; Registers used:
  1302 ;;		wreg, status,2
  1303 ;; Tracked objects:
  1304 ;;		On entry : 0/0
  1305 ;;		On exit  : 0/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1308 ;;      Params:         0       0       0       0       0       0       0
  1309 ;;      Locals:         0       0       0       0       0       0       0
  1310 ;;      Temps:          0       0       0       0       0       0       0
  1311 ;;      Totals:         0       0       0       0       0       0       0
  1312 ;;Total ram usage:        0 bytes
  1313 ;; Hardware stack levels used:    1
  1314 ;; Hardware stack levels required when called:    4
  1315 ;; This function calls:
  1316 ;;		Nothing
  1317 ;; This function is called by:
  1318 ;;		_main
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           	psect	text1
  1323  002590                     __ptext1:
  1324                           	callstack 0
  1325  002590                     _usartInit:
  1326                           	callstack 0
  1327  002590  FFFF               	dw	65535	; assembler added errata NOP
  1328  002592                     
  1329                           ;usart.c: 113:     TRISCbits.TRISC6 = 0;
  1330  002592  9C94               	bcf	148,6,c	;volatile
  1331                           
  1332                           ;usart.c: 114:     TRISCbits.TRISC7 = 1;
  1333  002594  8E94               	bsf	148,7,c	;volatile
  1334                           
  1335                           ;usart.c: 116:     TXSTAbits.TX9 = 0;
  1336  002596  9CAC               	bcf	172,6,c	;volatile
  1337                           
  1338                           ;usart.c: 117:     TXSTAbits.TXEN = 1;
  1339  002598  8AAC               	bsf	172,5,c	;volatile
  1340                           
  1341                           ;usart.c: 118:     TXSTAbits.SYNC = 0;
  1342  00259A  98AC               	bcf	172,4,c	;volatile
  1343                           
  1344                           ;usart.c: 119:     TXSTAbits.BRGH = 0;
  1345  00259C  94AC               	bcf	172,2,c	;volatile
  1346                           
  1347                           ;usart.c: 121:     RCSTAbits.SPEN = 1;
  1348  00259E  8EAB               	bsf	171,7,c	;volatile
  1349                           
  1350                           ;usart.c: 122:     RCSTAbits.RX9 = 0;
  1351  0025A0  9CAB               	bcf	171,6,c	;volatile
  1352                           
  1353                           ;usart.c: 123:     RCSTAbits.CREN = 0;
  1354  0025A2  98AB               	bcf	171,4,c	;volatile
  1355                           
  1356                           ;usart.c: 124:     RCSTAbits.ADDEN = 0;
  1357  0025A4  96AB               	bcf	171,3,c	;volatile
  1358  0025A6                     
  1359                           ;usart.c: 127:     SPBRG = 25;
  1360  0025A6  0E19               	movlw	25
  1361  0025A8  6EAF               	movwf	175,c	;volatile
  1362  0025AA  0012               	return		;funcret
  1363  0025AC  FFFF               	dw	65535	; errata NOP
  1364  0025AE                     __end_of_usartInit:
  1365                           	callstack 0
  1366                           
  1367 ;; *************** function _tim2Init *****************
  1368 ;; Defined at:
  1369 ;;		line 46 in file "timer.c"
  1370 ;; Parameters:    Size  Location     Type
  1371 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;		None
  1374 ;; Return value:  Size  Location     Type
  1375 ;;                  1    wreg      void 
  1376 ;; Registers used:
  1377 ;;		None
  1378 ;; Tracked objects:
  1379 ;;		On entry : 0/0
  1380 ;;		On exit  : 0/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1383 ;;      Params:         2       0       0       0       0       0       0
  1384 ;;      Locals:         0       0       0       0       0       0       0
  1385 ;;      Temps:          0       0       0       0       0       0       0
  1386 ;;      Totals:         2       0       0       0       0       0       0
  1387 ;;Total ram usage:        2 bytes
  1388 ;; Hardware stack levels used:    1
  1389 ;; Hardware stack levels required when called:    4
  1390 ;; This function calls:
  1391 ;;		Nothing
  1392 ;; This function is called by:
  1393 ;;		_main
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text2
  1398  0025C2                     __ptext2:
  1399                           	callstack 0
  1400  0025C2                     _tim2Init:
  1401                           	callstack 0
  1402  0025C2  FFFF               	dw	65535	; assembler added errata NOP
  1403  0025C4                     
  1404                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1405  0025C4  94CA               	bcf	202,2,c	;volatile
  1406                           
  1407                           ;timer.c: 48:     T2CONbits.T2CKPS1 = 1;
  1408  0025C6  82CA               	bsf	202,1,c	;volatile
  1409                           
  1410                           ;timer.c: 52:     pwmPeriod = _pwmPeriod;
  1411  0025C8  C012  F04F         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1412  0025CC  C013  F050         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1413  0025D0  0012               	return		;funcret
  1414  0025D2  FFFF               	dw	65535	; errata NOP
  1415  0025D4                     __end_of_tim2Init:
  1416                           	callstack 0
  1417                           
  1418 ;; *************** function _tim1Init *****************
  1419 ;; Defined at:
  1420 ;;		line 33 in file "timer.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;		None
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;		None
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		wreg, status,2
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1434 ;;      Params:         0       0       0       0       0       0       0
  1435 ;;      Locals:         0       0       0       0       0       0       0
  1436 ;;      Temps:          0       0       0       0       0       0       0
  1437 ;;      Totals:         0       0       0       0       0       0       0
  1438 ;;Total ram usage:        0 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; Hardware stack levels required when called:    4
  1441 ;; This function calls:
  1442 ;;		Nothing
  1443 ;; This function is called by:
  1444 ;;		_main
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text3
  1449  00260A                     __ptext3:
  1450                           	callstack 0
  1451  00260A                     _tim1Init:
  1452                           	callstack 0
  1453  00260A  FFFF               	dw	65535	; assembler added errata NOP
  1454  00260C                     
  1455                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1456  00260C  0E30               	movlw	48
  1457  00260E  12CD               	iorwf	205,f,c	;volatile
  1458  002610                     
  1459                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1460  002610  92CD               	bcf	205,1,c	;volatile
  1461  002612                     
  1462                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1463  002612  80CD               	bsf	205,0,c	;volatile
  1464  002614  0012               	return		;funcret
  1465  002616  FFFF               	dw	65535	; errata NOP
  1466  002618                     __end_of_tim1Init:
  1467                           	callstack 0
  1468                           
  1469 ;; *************** function _tim0Init *****************
  1470 ;; Defined at:
  1471 ;;		line 21 in file "timer.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;		None
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;		None
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  1    wreg      void 
  1478 ;; Registers used:
  1479 ;;		wreg, status,2
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1485 ;;      Params:         0       0       0       0       0       0       0
  1486 ;;      Locals:         0       0       0       0       0       0       0
  1487 ;;      Temps:          0       0       0       0       0       0       0
  1488 ;;      Totals:         0       0       0       0       0       0       0
  1489 ;;Total ram usage:        0 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    4
  1492 ;; This function calls:
  1493 ;;		Nothing
  1494 ;; This function is called by:
  1495 ;;		_main
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text4
  1500  0025D4                     __ptext4:
  1501                           	callstack 0
  1502  0025D4                     _tim0Init:
  1503                           	callstack 0
  1504  0025D4  FFFF               	dw	65535	; assembler added errata NOP
  1505  0025D6                     
  1506                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1507  0025D6  9ED5               	bcf	213,7,c	;volatile
  1508                           
  1509                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1510  0025D8  9CD5               	bcf	213,6,c	;volatile
  1511                           
  1512                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1513  0025DA  9AD5               	bcf	213,5,c	;volatile
  1514                           
  1515                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1516  0025DC  86D5               	bsf	213,3,c	;volatile
  1517  0025DE                     
  1518                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1519  0025DE  0E07               	movlw	7
  1520  0025E0  12D5               	iorwf	213,f,c	;volatile
  1521  0025E2  0012               	return		;funcret
  1522  0025E4  FFFF               	dw	65535	; errata NOP
  1523  0025E6                     __end_of_tim0Init:
  1524                           	callstack 0
  1525                           
  1526 ;; *************** function _storeData *****************
  1527 ;; Defined at:
  1528 ;;		line 183 in file "usart.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  data            1    wreg     unsigned char 
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;  data            1   26[COMRAM] unsigned char 
  1533 ;; Return value:  Size  Location     Type
  1534 ;;                  1    wreg      void 
  1535 ;; Registers used:
  1536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1537 ;; Tracked objects:
  1538 ;;		On entry : 0/0
  1539 ;;		On exit  : 0/0
  1540 ;;		Unchanged: 0/0
  1541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1542 ;;      Params:         0       0       0       0       0       0       0
  1543 ;;      Locals:         1       0       0       0       0       0       0
  1544 ;;      Temps:          2       0       0       0       0       0       0
  1545 ;;      Totals:         3       0       0       0       0       0       0
  1546 ;;Total ram usage:        3 bytes
  1547 ;; Hardware stack levels used:    1
  1548 ;; Hardware stack levels required when called:    6
  1549 ;; This function calls:
  1550 ;;		_printError
  1551 ;; This function is called by:
  1552 ;;		_main
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556                           	psect	text5
  1557  001082                     __ptext5:
  1558                           	callstack 0
  1559  001082                     _storeData:
  1560                           	callstack 0
  1561  001082  FFFF               	dw	65535	; assembler added errata NOP
  1562                           
  1563                           ;incstack = 0
  1564                           ;storeData@data stored from wreg
  1565  001084  6E1B               	movwf	storeData@data^0,c
  1566  001086                     
  1567                           ;usart.c: 189:     receivedMex[counter] = data;
  1568  001086  0E43               	movlw	low _receivedMex
  1569  001088  245E               	addwf	_counter^0,w,c
  1570  00108A  6ED9               	movwf	fsr2l,c
  1571  00108C  6ADA               	clrf	fsr2h,c
  1572  00108E  0E00               	movlw	high _receivedMex
  1573  001090  22DA               	addwfc	fsr2h,f,c
  1574  001092  C01B  FFDF         	movff	storeData@data,indf2
  1575  001096                     
  1576                           ;usart.c: 191:     counter++;
  1577  001096  2A5E               	incf	_counter^0,f,c
  1578                           
  1579                           ;usart.c: 194:     switch(receivedMex[0]){
  1580  001098  EF68  F008         	goto	l4464
  1581  00109C                     l4454:
  1582  00109C  FFFF               	dw	65535	; assembler added errata NOP
  1583                           
  1584                           ;usart.c: 196:             mexLength = 5;
  1585  00109E  0E05               	movlw	5
  1586  0010A0  6E6D               	movwf	_mexLength^0,c
  1587                           
  1588                           ;usart.c: 197:             neverCheck = 0;
  1589  0010A2  0E00               	movlw	0
  1590  0010A4  6E5D               	movwf	_neverCheck^0,c
  1591                           
  1592                           ;usart.c: 198:             break;
  1593  0010A6  EF83  F008         	goto	l4466
  1594  0010AA                     l4456:
  1595  0010AA  FFFF               	dw	65535	; assembler added errata NOP
  1596                           
  1597                           ;usart.c: 200:             mexLength = 9;
  1598  0010AC  0E09               	movlw	9
  1599  0010AE  6E6D               	movwf	_mexLength^0,c
  1600                           
  1601                           ;usart.c: 201:             neverCheck = 0;
  1602  0010B0  0E00               	movlw	0
  1603  0010B2  6E5D               	movwf	_neverCheck^0,c
  1604                           
  1605                           ;usart.c: 202:             break;
  1606  0010B4  EF83  F008         	goto	l4466
  1607  0010B8                     l4458:
  1608  0010B8  FFFF               	dw	65535	; assembler added errata NOP
  1609                           
  1610                           ;usart.c: 204:             mexLength = 1;
  1611  0010BA  0E01               	movlw	1
  1612  0010BC  6E6D               	movwf	_mexLength^0,c
  1613                           
  1614                           ;usart.c: 205:             neverCheck = 0;
  1615  0010BE  0E00               	movlw	0
  1616  0010C0  6E5D               	movwf	_neverCheck^0,c
  1617                           
  1618                           ;usart.c: 206:             break;
  1619  0010C2  EF83  F008         	goto	l4466
  1620  0010C6                     l4460:
  1621  0010C6  FFFF               	dw	65535	; assembler added errata NOP
  1622                           
  1623                           ;usart.c: 208:             neverCheck = 1;
  1624  0010C8  0E01               	movlw	1
  1625  0010CA  6E5D               	movwf	_neverCheck^0,c
  1626                           
  1627                           ;usart.c: 209:             break;
  1628  0010CC  EF83  F008         	goto	l4466
  1629  0010D0                     l4464:
  1630  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  1631  0010D2  5043               	movf	_receivedMex^0,w,c
  1632  0010D4  6E19               	movwf	??_storeData^0,c
  1633  0010D6  6A1A               	clrf	(??_storeData+1)^0,c
  1634                           
  1635                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1636                           ; Switch size 1, requested type "simple"
  1637                           ; Number of cases is 1, Range of values is 0 to 0
  1638                           ; switch strategies available:
  1639                           ; Name         Instructions Cycles
  1640                           ; simple_byte            4     3 (average)
  1641                           ;	Chosen strategy is simple_byte
  1642  0010D8  501A               	movf	(??_storeData+1)^0,w,c
  1643  0010DA  0A00               	xorlw	0	; case 0
  1644  0010DC  B4D8               	btfsc	status,2,c
  1645  0010DE  EF73  F008         	goto	l4830
  1646  0010E2  EF63  F008         	goto	l4460
  1647  0010E6                     l4830:
  1648  0010E6  FFFF               	dw	65535	; assembler added errata NOP
  1649                           
  1650                           ; Switch size 1, requested type "simple"
  1651                           ; Number of cases is 3, Range of values is 1 to 3
  1652                           ; switch strategies available:
  1653                           ; Name         Instructions Cycles
  1654                           ; simple_byte           10     6 (average)
  1655                           ;	Chosen strategy is simple_byte
  1656  0010E8  5019               	movf	??_storeData^0,w,c
  1657  0010EA  0A01               	xorlw	1	; case 1
  1658  0010EC  B4D8               	btfsc	status,2,c
  1659  0010EE  EF4E  F008         	goto	l4454
  1660  0010F2  0A03               	xorlw	3	; case 2
  1661  0010F4  B4D8               	btfsc	status,2,c
  1662  0010F6  EF55  F008         	goto	l4456
  1663  0010FA  0A01               	xorlw	1	; case 3
  1664  0010FC  B4D8               	btfsc	status,2,c
  1665  0010FE  EF5C  F008         	goto	l4458
  1666  001102  EF63  F008         	goto	l4460
  1667  001106                     l4466:
  1668  001106  FFFF               	dw	65535	; assembler added errata NOP
  1669                           
  1670                           ;usart.c: 214:     if(counter == mexLength && !neverCheck){
  1671  001108  506D               	movf	_mexLength^0,w,c
  1672  00110A  185E               	xorwf	_counter^0,w,c
  1673  00110C  A4D8               	btfss	status,2,c
  1674  00110E  EF8B  F008         	goto	u3971
  1675  001112  EF8E  F008         	goto	u3970
  1676  001116                     u3971:
  1677  001116  FFFF               	dw	65535	; assembler added errata NOP
  1678  001118  EF80  F009         	goto	l599
  1679  00111C                     u3970:
  1680  00111C  FFFF               	dw	65535	; assembler added errata NOP
  1681  00111E  505D               	movf	_neverCheck^0,w,c
  1682  001120  A4D8               	btfss	status,2,c
  1683  001122  EF95  F008         	goto	u3981
  1684  001126  EF98  F008         	goto	u3980
  1685  00112A                     u3981:
  1686  00112A  FFFF               	dw	65535	; assembler added errata NOP
  1687  00112C  EF80  F009         	goto	l599
  1688  001130                     u3980:
  1689  001130  FFFF               	dw	65535	; assembler added errata NOP
  1690  001132                     
  1691                           ;usart.c: 215:         counter = 0;
  1692  001132  0E00               	movlw	0
  1693  001134  6E5E               	movwf	_counter^0,c
  1694                           
  1695                           ;usart.c: 218:         switch(receivedMex[0]){
  1696  001136  EF62  F009         	goto	l4508
  1697  00113A                     l4472:
  1698  00113A  FFFF               	dw	65535	; assembler added errata NOP
  1699                           
  1700                           ;usart.c: 220:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1701  00113C  5061               	movf	_dataCounter^0,w,c
  1702  00113E  0D04               	mullw	4
  1703  001140  0EC6               	movlw	low _dataSequence
  1704  001142  24F3               	addwf	243,w,c
  1705  001144  6ED9               	movwf	fsr2l,c
  1706  001146  0E00               	movlw	high _dataSequence
  1707  001148  20F4               	addwfc	prodh,w,c
  1708  00114A  6EDA               	movwf	fsr2h,c
  1709  00114C  C044  FFDF         	movff	_receivedMex+1,indf2
  1710                           
  1711                           ;usart.c: 221:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  1712  001150  5061               	movf	_dataCounter^0,w,c
  1713  001152  0D04               	mullw	4
  1714  001154  0EC7               	movlw	low (_dataSequence+1)
  1715  001156  24F3               	addwf	243,w,c
  1716  001158  6ED9               	movwf	fsr2l,c
  1717  00115A  0E00               	movlw	high (_dataSequence+1)
  1718  00115C  20F4               	addwfc	prodh,w,c
  1719  00115E  6EDA               	movwf	fsr2h,c
  1720  001160  5045               	movf	(_receivedMex+2)^0,w,c
  1721  001162  0D05               	mullw	5
  1722  001164  CFF3 FFDF          	movff	prodl,indf2
  1723                           
  1724                           ;usart.c: 222:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  1725  001168  5061               	movf	_dataCounter^0,w,c
  1726  00116A  0D04               	mullw	4
  1727  00116C  0EC8               	movlw	low (_dataSequence+2)
  1728  00116E  24F3               	addwf	243,w,c
  1729  001170  6ED9               	movwf	fsr2l,c
  1730  001172  0E00               	movlw	high (_dataSequence+2)
  1731  001174  20F4               	addwfc	prodh,w,c
  1732  001176  6EDA               	movwf	fsr2h,c
  1733  001178  5046               	movf	(_receivedMex+3)^0,w,c
  1734  00117A  0D05               	mullw	5
  1735  00117C  CFF3 FFDF          	movff	prodl,indf2
  1736                           
  1737                           ;usart.c: 223:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1738  001180  5061               	movf	_dataCounter^0,w,c
  1739  001182  0D04               	mullw	4
  1740  001184  0EC9               	movlw	low (_dataSequence+3)
  1741  001186  24F3               	addwf	243,w,c
  1742  001188  6ED9               	movwf	fsr2l,c
  1743  00118A  0E00               	movlw	high (_dataSequence+3)
  1744  00118C  20F4               	addwfc	prodh,w,c
  1745  00118E  6EDA               	movwf	fsr2h,c
  1746  001190  C047  FFDF         	movff	_receivedMex+4,indf2
  1747                           
  1748                           ;usart.c: 226:                 if((dataSequence[dataCounter].posX > maxX || dataSequence
      +                          [dataCounter].posY > maxY) &&
  1749  001194  5061               	movf	_dataCounter^0,w,c
  1750  001196  0D04               	mullw	4
  1751  001198  0EC7               	movlw	low (_dataSequence+1)
  1752  00119A  24F3               	addwf	243,w,c
  1753  00119C  6ED9               	movwf	fsr2l,c
  1754  00119E  0E00               	movlw	high (_dataSequence+1)
  1755  0011A0  20F4               	addwfc	prodh,w,c
  1756  0011A2  6EDA               	movwf	fsr2h,c
  1757  0011A4  0E66               	movlw	102
  1758  0011A6  60DF               	cpfslt	indf2,c
  1759  0011A8  EFD8  F008         	goto	u3991
  1760  0011AC  EFDB  F008         	goto	u3990
  1761  0011B0                     u3991:
  1762  0011B0  FFFF               	dw	65535	; assembler added errata NOP
  1763  0011B2  EFED  F008         	goto	l4476
  1764  0011B6                     u3990:
  1765  0011B6  FFFF               	dw	65535	; assembler added errata NOP
  1766  0011B8  5061               	movf	_dataCounter^0,w,c
  1767  0011BA  0D04               	mullw	4
  1768  0011BC  0EC8               	movlw	low (_dataSequence+2)
  1769  0011BE  24F3               	addwf	243,w,c
  1770  0011C0  6ED9               	movwf	fsr2l,c
  1771  0011C2  0E00               	movlw	high (_dataSequence+2)
  1772  0011C4  20F4               	addwfc	prodh,w,c
  1773  0011C6  6EDA               	movwf	fsr2h,c
  1774  0011C8  0E65               	movlw	101
  1775  0011CA  64DF               	cpfsgt	indf2,c
  1776  0011CC  EFEA  F008         	goto	u4001
  1777  0011D0  EFED  F008         	goto	u4000
  1778  0011D4                     u4001:
  1779  0011D4  FFFF               	dw	65535	; assembler added errata NOP
  1780  0011D6  EF05  F009         	goto	l4480
  1781  0011DA                     u4000:
  1782  0011DA                     l4476:
  1783  0011DA  FFFF               	dw	65535	; assembler added errata NOP
  1784  0011DC  5061               	movf	_dataCounter^0,w,c
  1785  0011DE  0D04               	mullw	4
  1786  0011E0  0EC6               	movlw	low _dataSequence
  1787  0011E2  24F3               	addwf	243,w,c
  1788  0011E4  6ED9               	movwf	fsr2l,c
  1789  0011E6  0E00               	movlw	high _dataSequence
  1790  0011E8  20F4               	addwfc	prodh,w,c
  1791  0011EA  6EDA               	movwf	fsr2h,c
  1792  0011EC  28DE               	incf	postinc2,w,c
  1793  0011EE  B4D8               	btfsc	status,2,c
  1794  0011F0  EFFC  F008         	goto	u4011
  1795  0011F4  EFFF  F008         	goto	u4010
  1796  0011F8                     u4011:
  1797  0011F8  FFFF               	dw	65535	; assembler added errata NOP
  1798  0011FA  EF05  F009         	goto	l4480
  1799  0011FE                     u4010:
  1800  0011FE  FFFF               	dw	65535	; assembler added errata NOP
  1801  001200                     
  1802                           ;usart.c: 227:                         dataSequence[dataCounter].feederLine != 0xFF){;us
      +                          art.c: 228:                     printError(5);
  1803  001200  0E05               	movlw	5
  1804  001202  ECEA  F00D         	call	_printError
  1805                           
  1806                           ;usart.c: 229:                 }else{
  1807  001206  EF7D  F009         	goto	l4510
  1808  00120A                     l4480:
  1809  00120A  FFFF               	dw	65535	; assembler added errata NOP
  1810                           
  1811                           ;usart.c: 230:                     dataCounter++;
  1812  00120C  2A61               	incf	_dataCounter^0,f,c
  1813  00120E  EF7D  F009         	goto	l4510
  1814  001212                     l592:
  1815  001212  FFFF               	dw	65535	; assembler added errata NOP
  1816                           
  1817                           ;usart.c: 235:                 newSequenceData.L = receivedMex[1];
  1818  001214  C044  F0DA         	movff	_receivedMex+1,_newSequenceData
  1819                           
  1820                           ;usart.c: 236:                 newSequenceData.W = receivedMex[2];
  1821  001218  C045  F0DB         	movff	_receivedMex+2,_newSequenceData+1
  1822  00121C                     
  1823                           ;usart.c: 237:                 newSequenceData.init_posX = receivedMex[3] * 5;
  1824  00121C  5046               	movf	(_receivedMex+3)^0,w,c
  1825  00121E  0D05               	mullw	5
  1826  001220  CFF3 F0DC          	movff	prodl,_newSequenceData+2
  1827                           
  1828                           ;usart.c: 238:                 newSequenceData.init_posY = receivedMex[4] * 5;
  1829  001224  5047               	movf	(_receivedMex+4)^0,w,c
  1830  001226  0D05               	mullw	5
  1831  001228  CFF3 F0DD          	movff	prodl,_newSequenceData+3
  1832  00122C                     
  1833                           ;usart.c: 239:                 newSequenceData.init_rot = receivedMex[5];
  1834  00122C  C048  F0DE         	movff	_receivedMex+5,_newSequenceData+4
  1835                           
  1836                           ;usart.c: 240:                 newSequenceData.end_posX = receivedMex[6] * 5;
  1837  001230  5049               	movf	(_receivedMex+6)^0,w,c
  1838  001232  0D05               	mullw	5
  1839  001234  CFF3 F0DF          	movff	prodl,_newSequenceData+5
  1840                           
  1841                           ;usart.c: 241:                 newSequenceData.end_posY = receivedMex[7] * 5;
  1842  001238  504A               	movf	(_receivedMex+7)^0,w,c
  1843  00123A  0D05               	mullw	5
  1844  00123C  CFF3 F0E0          	movff	prodl,_newSequenceData+6
  1845  001240                     
  1846                           ;usart.c: 242:                 newSequenceData.end_rot = receivedMex[8];
  1847  001240  C04B  F0E1         	movff	_receivedMex+8,_newSequenceData+7
  1848  001244                     
  1849                           ;usart.c: 245:                 if(newSequenceData.init_posX > maxFeedX ||
  1850  001244  0E1F               	movlw	31
  1851  001246  0100               	movlb	0	; () banked
  1852  001248  61DC               	cpfslt	(_newSequenceData+2)& (0+255),b
  1853  00124A  EF29  F009         	goto	u4021
  1854  00124E  EF2C  F009         	goto	u4020
  1855  001252                     u4021:
  1856  001252  FFFF               	dw	65535	; assembler added errata NOP
  1857  001254  EF4A  F009         	goto	l4496
  1858  001258                     u4020:
  1859  001258  FFFF               	dw	65535	; assembler added errata NOP
  1860  00125A                     
  1861                           ; BSR set to: 0
  1862  00125A  0E66               	movlw	102
  1863  00125C  61DF               	cpfslt	(_newSequenceData+5)& (0+255),b
  1864  00125E  EF33  F009         	goto	u4031
  1865  001262  EF36  F009         	goto	u4030
  1866  001266                     u4031:
  1867  001266  FFFF               	dw	65535	; assembler added errata NOP
  1868  001268  EF4A  F009         	goto	l4496
  1869  00126C                     u4030:
  1870  00126C  FFFF               	dw	65535	; assembler added errata NOP
  1871  00126E                     
  1872                           ; BSR set to: 0
  1873  00126E  0E65               	movlw	101
  1874  001270  61DD               	cpfslt	(_newSequenceData+3)& (0+255),b
  1875  001272  EF3D  F009         	goto	u4041
  1876  001276  EF40  F009         	goto	u4040
  1877  00127A                     u4041:
  1878  00127A  FFFF               	dw	65535	; assembler added errata NOP
  1879  00127C  EF4A  F009         	goto	l4496
  1880  001280                     u4040:
  1881  001280  FFFF               	dw	65535	; assembler added errata NOP
  1882  001282                     
  1883                           ; BSR set to: 0
  1884  001282  0E65               	movlw	101
  1885  001284  65E0               	cpfsgt	(_newSequenceData+6)& (0+255),b
  1886  001286  EF47  F009         	goto	u4051
  1887  00128A  EF4A  F009         	goto	u4050
  1888  00128E                     u4051:
  1889  00128E  FFFF               	dw	65535	; assembler added errata NOP
  1890  001290  EF52  F009         	goto	l4500
  1891  001294                     u4050:
  1892  001294                     l4496:
  1893  001294  FFFF               	dw	65535	; assembler added errata NOP
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;usart.c: 248:                         newSequenceData.end_posY > maxY){;usart.c: 249:  
      +                                             _newSequence = 0;
  1897  001296  0E00               	movlw	0
  1898  001298  6E5F               	movwf	__newSequence^0,c
  1899  00129A                     
  1900                           ; BSR set to: 0
  1901                           ;usart.c: 250:                     printError(5);
  1902  00129A  0E05               	movlw	5
  1903  00129C  ECEA  F00D         	call	_printError
  1904                           
  1905                           ;usart.c: 251:                 }else{
  1906  0012A0  EF7D  F009         	goto	l4510
  1907  0012A4                     l4500:
  1908  0012A4  FFFF               	dw	65535	; assembler added errata NOP
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;usart.c: 252:                     _newSequence = 1;
  1912  0012A6  0E01               	movlw	1
  1913  0012A8  6E5F               	movwf	__newSequence^0,c
  1914  0012AA  EF7D  F009         	goto	l4510
  1915  0012AE                     l4502:
  1916  0012AE  FFFF               	dw	65535	; assembler added errata NOP
  1917                           
  1918                           ;usart.c: 257:                 _fatalError = 1;
  1919  0012B0  0E01               	movlw	1
  1920  0012B2  6E60               	movwf	__fatalError^0,c
  1921                           
  1922                           ;usart.c: 258:                 break;
  1923  0012B4  EF7D  F009         	goto	l4510
  1924  0012B8                     l4504:
  1925  0012B8  FFFF               	dw	65535	; assembler added errata NOP
  1926                           
  1927                           ;usart.c: 261:                 printError(8);
  1928  0012BA  0E08               	movlw	8
  1929  0012BC  ECEA  F00D         	call	_printError
  1930                           
  1931                           ;usart.c: 262:                 break;
  1932  0012C0  EF7D  F009         	goto	l4510
  1933  0012C4                     l4508:
  1934  0012C4  FFFF               	dw	65535	; assembler added errata NOP
  1935  0012C6  5043               	movf	_receivedMex^0,w,c
  1936  0012C8  6E19               	movwf	??_storeData^0,c
  1937  0012CA  6A1A               	clrf	(??_storeData+1)^0,c
  1938                           
  1939                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1940                           ; Switch size 1, requested type "simple"
  1941                           ; Number of cases is 1, Range of values is 0 to 0
  1942                           ; switch strategies available:
  1943                           ; Name         Instructions Cycles
  1944                           ; simple_byte            4     3 (average)
  1945                           ;	Chosen strategy is simple_byte
  1946  0012CC  501A               	movf	(??_storeData+1)^0,w,c
  1947  0012CE  0A00               	xorlw	0	; case 0
  1948  0012D0  B4D8               	btfsc	status,2,c
  1949  0012D2  EF6D  F009         	goto	l4832
  1950  0012D6  EF5C  F009         	goto	l4504
  1951  0012DA                     l4832:
  1952  0012DA  FFFF               	dw	65535	; assembler added errata NOP
  1953                           
  1954                           ; Switch size 1, requested type "simple"
  1955                           ; Number of cases is 3, Range of values is 1 to 3
  1956                           ; switch strategies available:
  1957                           ; Name         Instructions Cycles
  1958                           ; simple_byte           10     6 (average)
  1959                           ;	Chosen strategy is simple_byte
  1960  0012DC  5019               	movf	??_storeData^0,w,c
  1961  0012DE  0A01               	xorlw	1	; case 1
  1962  0012E0  B4D8               	btfsc	status,2,c
  1963  0012E2  EF9D  F008         	goto	l4472
  1964  0012E6  0A03               	xorlw	3	; case 2
  1965  0012E8  B4D8               	btfsc	status,2,c
  1966  0012EA  EF09  F009         	goto	l592
  1967  0012EE  0A01               	xorlw	1	; case 3
  1968  0012F0  B4D8               	btfsc	status,2,c
  1969  0012F2  EF57  F009         	goto	l4502
  1970  0012F6  EF5C  F009         	goto	l4504
  1971  0012FA                     l4510:
  1972  0012FA  FFFF               	dw	65535	; assembler added errata NOP
  1973                           
  1974                           ;usart.c: 266:         receivedMex[0] = 0;
  1975  0012FC  0E00               	movlw	0
  1976  0012FE  6E43               	movwf	_receivedMex^0,c
  1977  001300                     l599:
  1978  001300  FFFF               	dw	65535	; assembler added errata NOP
  1979  001302  0012               	return		;funcret
  1980  001304  FFFF               	dw	65535	; errata NOP
  1981  001306                     __end_of_storeData:
  1982                           	callstack 0
  1983                           
  1984 ;; *************** function _printError *****************
  1985 ;; Defined at:
  1986 ;;		line 130 in file "usart.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;  errCode         1    wreg     unsigned char 
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;  errCode         1   23[COMRAM] unsigned char 
  1991 ;; Return value:  Size  Location     Type
  1992 ;;                  1    wreg      void 
  1993 ;; Registers used:
  1994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1995 ;; Tracked objects:
  1996 ;;		On entry : 0/0
  1997 ;;		On exit  : 0/0
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2000 ;;      Params:         0       0       0       0       0       0       0
  2001 ;;      Locals:         1       0       0       0       0       0       0
  2002 ;;      Temps:          2       0       0       0       0       0       0
  2003 ;;      Totals:         3       0       0       0       0       0       0
  2004 ;;Total ram usage:        3 bytes
  2005 ;; Hardware stack levels used:    1
  2006 ;; Hardware stack levels required when called:    5
  2007 ;; This function calls:
  2008 ;;		_uartTx
  2009 ;; This function is called by:
  2010 ;;		_main
  2011 ;;		_storeData
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           	psect	text6
  2016  001BD4                     __ptext6:
  2017                           	callstack 0
  2018  001BD4                     _printError:
  2019                           	callstack 0
  2020  001BD4  FFFF               	dw	65535	; assembler added errata NOP
  2021                           
  2022                           ;incstack = 0
  2023                           ;printError@errCode stored from wreg
  2024  001BD6  6E18               	movwf	printError@errCode^0,c
  2025  001BD8                     
  2026                           ;usart.c: 132:     switch(errCode){
  2027  001BD8  EF46  F00E         	goto	l4310
  2028  001BDC                     l4292:
  2029  001BDC  FFFF               	dw	65535	; assembler added errata NOP
  2030                           
  2031                           ;usart.c: 134:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  2032  001BDE  0E90               	movlw	low _errString_Feed
  2033  001BE0  6E12               	movwf	uartTx@ptr^0,c
  2034  001BE2  0E00               	movlw	high _errString_Feed
  2035  001BE4  6E13               	movwf	(uartTx@ptr+1)^0,c
  2036  001BE6  0E1E               	movlw	30
  2037  001BE8  6E14               	movwf	uartTx@length^0,c
  2038  001BEA  ECE3  F011         	call	_uartTx	;wreg free
  2039                           
  2040                           ;usart.c: 135:             break;
  2041  001BEE  EF75  F00E         	goto	l566
  2042  001BF2                     l4294:
  2043  001BF2  FFFF               	dw	65535	; assembler added errata NOP
  2044                           
  2045                           ;usart.c: 137:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  2046  001BF4  0E5E               	movlw	low _errString_ZEND
  2047  001BF6  6E12               	movwf	uartTx@ptr^0,c
  2048  001BF8  0E01               	movlw	high _errString_ZEND
  2049  001BFA  6E13               	movwf	(uartTx@ptr+1)^0,c
  2050  001BFC  0E29               	movlw	41
  2051  001BFE  6E14               	movwf	uartTx@length^0,c
  2052  001C00  ECE3  F011         	call	_uartTx	;wreg free
  2053                           
  2054                           ;usart.c: 138:             break;
  2055  001C04  EF75  F00E         	goto	l566
  2056  001C08                     l4296:
  2057  001C08  FFFF               	dw	65535	; assembler added errata NOP
  2058                           
  2059                           ;usart.c: 140:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  2060  001C0A  0E87               	movlw	low _errString_Reset
  2061  001C0C  6E12               	movwf	uartTx@ptr^0,c
  2062  001C0E  0E01               	movlw	high _errString_Reset
  2063  001C10  6E13               	movwf	(uartTx@ptr+1)^0,c
  2064  001C12  0E28               	movlw	40
  2065  001C14  6E14               	movwf	uartTx@length^0,c
  2066  001C16  ECE3  F011         	call	_uartTx	;wreg free
  2067                           
  2068                           ;usart.c: 141:             break;
  2069  001C1A  EF75  F00E         	goto	l566
  2070  001C1E                     l4298:
  2071  001C1E  FFFF               	dw	65535	; assembler added errata NOP
  2072                           
  2073                           ;usart.c: 143:             uartTx(&errString_Point[0], sizeof(errString_Point));
  2074  001C20  0E35               	movlw	low _errString_Point
  2075  001C22  6E12               	movwf	uartTx@ptr^0,c
  2076  001C24  0E01               	movlw	high _errString_Point
  2077  001C26  6E13               	movwf	(uartTx@ptr+1)^0,c
  2078  001C28  0E29               	movlw	41
  2079  001C2A  6E14               	movwf	uartTx@length^0,c
  2080  001C2C  ECE3  F011         	call	_uartTx	;wreg free
  2081                           
  2082                           ;usart.c: 144:             break;
  2083  001C30  EF75  F00E         	goto	l566
  2084  001C34                     l4300:
  2085  001C34  FFFF               	dw	65535	; assembler added errata NOP
  2086                           
  2087                           ;usart.c: 146:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2088  001C36  0ED6               	movlw	low _errString_Bound
  2089  001C38  6E12               	movwf	uartTx@ptr^0,c
  2090  001C3A  0E01               	movlw	high _errString_Bound
  2091  001C3C  6E13               	movwf	(uartTx@ptr+1)^0,c
  2092  001C3E  0E21               	movlw	33
  2093  001C40  6E14               	movwf	uartTx@length^0,c
  2094  001C42  ECE3  F011         	call	_uartTx	;wreg free
  2095                           
  2096                           ;usart.c: 147:             break;
  2097  001C46  EF75  F00E         	goto	l566
  2098  001C4A                     l4302:
  2099  001C4A  FFFF               	dw	65535	; assembler added errata NOP
  2100                           
  2101                           ;usart.c: 149:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2102  001C4C  0E00               	movlw	low _errString_PointZ
  2103  001C4E  6E12               	movwf	uartTx@ptr^0,c
  2104  001C50  0E01               	movlw	high _errString_PointZ
  2105  001C52  6E13               	movwf	(uartTx@ptr+1)^0,c
  2106  001C54  0E35               	movlw	53
  2107  001C56  6E14               	movwf	uartTx@length^0,c
  2108  001C58  ECE3  F011         	call	_uartTx	;wreg free
  2109                           
  2110                           ;usart.c: 150:             break;
  2111  001C5C  EF75  F00E         	goto	l566
  2112  001C60                     l4304:
  2113  001C60  FFFF               	dw	65535	; assembler added errata NOP
  2114                           
  2115                           ;usart.c: 152:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2116  001C62  0EAF               	movlw	low _errString_Fatal
  2117  001C64  6E12               	movwf	uartTx@ptr^0,c
  2118  001C66  0E01               	movlw	high _errString_Fatal
  2119  001C68  6E13               	movwf	(uartTx@ptr+1)^0,c
  2120  001C6A  0E27               	movlw	39
  2121  001C6C  6E14               	movwf	uartTx@length^0,c
  2122  001C6E  ECE3  F011         	call	_uartTx	;wreg free
  2123                           
  2124                           ;usart.c: 153:             break;
  2125  001C72  EF75  F00E         	goto	l566
  2126  001C76                     l4306:
  2127  001C76  FFFF               	dw	65535	; assembler added errata NOP
  2128                           
  2129                           ;usart.c: 155:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2130  001C78  0EAE               	movlw	low _errString_Command
  2131  001C7A  6E12               	movwf	uartTx@ptr^0,c
  2132  001C7C  0E00               	movlw	high _errString_Command
  2133  001C7E  6E13               	movwf	(uartTx@ptr+1)^0,c
  2134  001C80  0E18               	movlw	24
  2135  001C82  6E14               	movwf	uartTx@length^0,c
  2136  001C84  ECE3  F011         	call	_uartTx	;wreg free
  2137                           
  2138                           ;usart.c: 156:             break;
  2139  001C88  EF75  F00E         	goto	l566
  2140  001C8C                     l4310:
  2141  001C8C  FFFF               	dw	65535	; assembler added errata NOP
  2142  001C8E  5018               	movf	printError@errCode^0,w,c
  2143  001C90  6E16               	movwf	??_printError^0,c
  2144  001C92  6A17               	clrf	(??_printError+1)^0,c
  2145                           
  2146                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2147                           ; Switch size 1, requested type "simple"
  2148                           ; Number of cases is 1, Range of values is 0 to 0
  2149                           ; switch strategies available:
  2150                           ; Name         Instructions Cycles
  2151                           ; simple_byte            4     3 (average)
  2152                           ;	Chosen strategy is simple_byte
  2153  001C94  5017               	movf	(??_printError+1)^0,w,c
  2154  001C96  0A00               	xorlw	0	; case 0
  2155  001C98  B4D8               	btfsc	status,2,c
  2156  001C9A  EF51  F00E         	goto	l4834
  2157  001C9E  EF75  F00E         	goto	l566
  2158  001CA2                     l4834:
  2159  001CA2  FFFF               	dw	65535	; assembler added errata NOP
  2160                           
  2161                           ; Switch size 1, requested type "simple"
  2162                           ; Number of cases is 8, Range of values is 1 to 8
  2163                           ; switch strategies available:
  2164                           ; Name         Instructions Cycles
  2165                           ; simple_byte           25    13 (average)
  2166                           ;	Chosen strategy is simple_byte
  2167  001CA4  5016               	movf	??_printError^0,w,c
  2168  001CA6  0A01               	xorlw	1	; case 1
  2169  001CA8  B4D8               	btfsc	status,2,c
  2170  001CAA  EFEE  F00D         	goto	l4292
  2171  001CAE  0A03               	xorlw	3	; case 2
  2172  001CB0  B4D8               	btfsc	status,2,c
  2173  001CB2  EFF9  F00D         	goto	l4294
  2174  001CB6  0A01               	xorlw	1	; case 3
  2175  001CB8  B4D8               	btfsc	status,2,c
  2176  001CBA  EF04  F00E         	goto	l4296
  2177  001CBE  0A07               	xorlw	7	; case 4
  2178  001CC0  B4D8               	btfsc	status,2,c
  2179  001CC2  EF0F  F00E         	goto	l4298
  2180  001CC6  0A01               	xorlw	1	; case 5
  2181  001CC8  B4D8               	btfsc	status,2,c
  2182  001CCA  EF1A  F00E         	goto	l4300
  2183  001CCE  0A03               	xorlw	3	; case 6
  2184  001CD0  B4D8               	btfsc	status,2,c
  2185  001CD2  EF25  F00E         	goto	l4302
  2186  001CD6  0A01               	xorlw	1	; case 7
  2187  001CD8  B4D8               	btfsc	status,2,c
  2188  001CDA  EF30  F00E         	goto	l4304
  2189  001CDE  0A0F               	xorlw	15	; case 8
  2190  001CE0  B4D8               	btfsc	status,2,c
  2191  001CE2  EF3B  F00E         	goto	l4306
  2192  001CE6  EF75  F00E         	goto	l566
  2193  001CEA                     l566:
  2194  001CEA  FFFF               	dw	65535	; assembler added errata NOP
  2195  001CEC  0012               	return		;funcret
  2196  001CEE  FFFF               	dw	65535	; errata NOP
  2197  001CF0                     __end_of_printError:
  2198                           	callstack 0
  2199                           
  2200 ;; *************** function _uartTx *****************
  2201 ;; Defined at:
  2202 ;;		line 167 in file "usart.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2205 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2206 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2207 ;;  length          1   19[COMRAM] unsigned char 
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;  i               1   20[COMRAM] unsigned char 
  2210 ;; Return value:  Size  Location     Type
  2211 ;;                  1    wreg      void 
  2212 ;; Registers used:
  2213 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/0
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2219 ;;      Params:         3       0       0       0       0       0       0
  2220 ;;      Locals:         1       0       0       0       0       0       0
  2221 ;;      Temps:          0       0       0       0       0       0       0
  2222 ;;      Totals:         4       0       0       0       0       0       0
  2223 ;;Total ram usage:        4 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; Hardware stack levels required when called:    4
  2226 ;; This function calls:
  2227 ;;		Nothing
  2228 ;; This function is called by:
  2229 ;;		_printError
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232                           
  2233                           	psect	text7
  2234  0023C6                     __ptext7:
  2235                           	callstack 0
  2236  0023C6                     _uartTx:
  2237                           	callstack 0
  2238  0023C6  FFFF               	dw	65535	; assembler added errata NOP
  2239  0023C8                     
  2240                           ;usart.c: 167: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 168: {;usa
      +                          rt.c: 170:     for(char i = 1; i < length; i++){
  2241  0023C8  0E01               	movlw	1
  2242  0023CA  6E15               	movwf	uartTx@i^0,c
  2243  0023CC  EFFC  F011         	goto	l3796
  2244  0023D0                     l3792:
  2245  0023D0  FFFF               	dw	65535	; assembler added errata NOP
  2246                           
  2247                           ;usart.c: 172:         TXREG = *ptr;
  2248  0023D2  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2249  0023D6  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2250  0023DA  50DF               	movf	indf2,w,c
  2251  0023DC  6EAD               	movwf	173,c	;volatile
  2252  0023DE                     l571:
  2253  0023DE  FFFF               	dw	65535	; assembler added errata NOP
  2254  0023E0  A2AC               	btfss	172,1,c	;volatile
  2255  0023E2  EFF5  F011         	goto	u2961
  2256  0023E6  EFF8  F011         	goto	u2960
  2257  0023EA                     u2961:
  2258  0023EA  FFFF               	dw	65535	; assembler added errata NOP
  2259  0023EC  EFEF  F011         	goto	l571
  2260  0023F0                     u2960:
  2261  0023F0  FFFF               	dw	65535	; assembler added errata NOP
  2262  0023F2                     
  2263                           ;usart.c: 176:         ptr++;
  2264  0023F2  4A12               	infsnz	uartTx@ptr^0,f,c
  2265  0023F4  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2266                           
  2267                           ;usart.c: 177:     }
  2268  0023F6  2A15               	incf	uartTx@i^0,f,c
  2269  0023F8                     l3796:
  2270  0023F8  FFFF               	dw	65535	; assembler added errata NOP
  2271  0023FA  5014               	movf	uartTx@length^0,w,c
  2272  0023FC  5C15               	subwf	uartTx@i^0,w,c
  2273  0023FE  A0D8               	btfss	status,0,c
  2274  002400  EF04  F012         	goto	u2971
  2275  002404  EF07  F012         	goto	u2970
  2276  002408                     u2971:
  2277  002408  FFFF               	dw	65535	; assembler added errata NOP
  2278  00240A  EFE8  F011         	goto	l3792
  2279  00240E                     u2970:
  2280  00240E  FFFF               	dw	65535	; assembler added errata NOP
  2281  002410  0012               	return		;funcret
  2282  002412  FFFF               	dw	65535	; errata NOP
  2283  002414                     __end_of_uartTx:
  2284                           	callstack 0
  2285                           
  2286 ;; *************** function _shiftData *****************
  2287 ;; Defined at:
  2288 ;;		line 100 in file "usart.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;		None
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;  i               1   19[COMRAM] unsigned char 
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2302 ;;      Params:         0       0       0       0       0       0       0
  2303 ;;      Locals:         1       0       0       0       0       0       0
  2304 ;;      Temps:          2       0       0       0       0       0       0
  2305 ;;      Totals:         3       0       0       0       0       0       0
  2306 ;;Total ram usage:        3 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:    4
  2309 ;; This function calls:
  2310 ;;		Nothing
  2311 ;; This function is called by:
  2312 ;;		_main
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	text8
  2317  002366                     __ptext8:
  2318                           	callstack 0
  2319  002366                     _shiftData:
  2320                           	callstack 0
  2321  002366  FFFF               	dw	65535	; assembler added errata NOP
  2322  002368                     
  2323                           ;usart.c: 101:     char i;;usart.c: 103:     for(i = 0; i < 4; i++){
  2324  002368  0E00               	movlw	0
  2325  00236A  6E14               	movwf	shiftData@i^0,c
  2326  00236C                     l4630:
  2327  00236C  FFFF               	dw	65535	; assembler added errata NOP
  2328                           
  2329                           ;usart.c: 104:         dataSequence[i] = dataSequence[i+1];
  2330  00236E  5014               	movf	shiftData@i^0,w,c
  2331  002370  6E12               	movwf	??_shiftData^0,c
  2332  002372  6A13               	clrf	(??_shiftData+1)^0,c
  2333  002374  90D8               	bcf	status,0,c
  2334  002376  3612               	rlcf	??_shiftData^0,f,c
  2335  002378  3613               	rlcf	(??_shiftData+1)^0,f,c
  2336  00237A  90D8               	bcf	status,0,c
  2337  00237C  3612               	rlcf	??_shiftData^0,f,c
  2338  00237E  3613               	rlcf	(??_shiftData+1)^0,f,c
  2339  002380  0ECA               	movlw	low (_dataSequence+4)
  2340  002382  2412               	addwf	??_shiftData^0,w,c
  2341  002384  6ED9               	movwf	fsr2l,c
  2342  002386  0E00               	movlw	high (_dataSequence+4)
  2343  002388  2013               	addwfc	(??_shiftData+1)^0,w,c
  2344  00238A  6EDA               	movwf	fsr2h,c
  2345  00238C  5014               	movf	shiftData@i^0,w,c
  2346  00238E  0D04               	mullw	4
  2347  002390  0EC6               	movlw	low _dataSequence
  2348  002392  24F3               	addwf	243,w,c
  2349  002394  6EE1               	movwf	fsr1l,c
  2350  002396  0E00               	movlw	high _dataSequence
  2351  002398  20F4               	addwfc	prodh,w,c
  2352  00239A  6EE2               	movwf	fsr1h,c
  2353  00239C  CFDE FFE6          	movff	postinc2,postinc1
  2354  0023A0  CFDE FFE6          	movff	postinc2,postinc1
  2355  0023A4  CFDE FFE6          	movff	postinc2,postinc1
  2356  0023A8  CFDE FFE6          	movff	postinc2,postinc1
  2357  0023AC                     
  2358                           ;usart.c: 105:     }
  2359  0023AC  2A14               	incf	shiftData@i^0,f,c
  2360  0023AE  0E03               	movlw	3
  2361  0023B0  6414               	cpfsgt	shiftData@i^0,c
  2362  0023B2  EFDD  F011         	goto	u4121
  2363  0023B6  EFE0  F011         	goto	u4120
  2364  0023BA                     u4121:
  2365  0023BA  FFFF               	dw	65535	; assembler added errata NOP
  2366  0023BC  EFB6  F011         	goto	l4630
  2367  0023C0                     u4120:
  2368  0023C0  FFFF               	dw	65535	; assembler added errata NOP
  2369  0023C2  0012               	return		;funcret
  2370  0023C4  FFFF               	dw	65535	; errata NOP
  2371  0023C6                     __end_of_shiftData:
  2372                           	callstack 0
  2373                           
  2374 ;; *************** function _resetPosition *****************
  2375 ;; Defined at:
  2376 ;;		line 162 in file "motors.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;		None
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2381 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2382 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  1    wreg      unsigned char 
  2385 ;; Registers used:
  2386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2392 ;;      Params:         0       0       0       0       0       0       0
  2393 ;;      Locals:         3       0       0       0       0       0       0
  2394 ;;      Temps:          0       0       0       0       0       0       0
  2395 ;;      Totals:         3       0       0       0       0       0       0
  2396 ;;Total ram usage:        3 bytes
  2397 ;; Hardware stack levels used:    1
  2398 ;; Hardware stack levels required when called:    5
  2399 ;; This function calls:
  2400 ;;		_resetStep
  2401 ;;		_resetTM0_Temp
  2402 ;;		_resetTM2_Temp
  2403 ;;		_stepMade
  2404 ;; This function is called by:
  2405 ;;		_main
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           	psect	text9
  2410  001782                     __ptext9:
  2411                           	callstack 0
  2412  001782                     _resetPosition:
  2413                           	callstack 0
  2414  001782  FFFF               	dw	65535	; assembler added errata NOP
  2415  001784                     
  2416                           ;motors.c: 182:     motCounter[0][1] = -1;
  2417  001784  6868               	setf	(_motCounter+1)^0,c
  2418                           
  2419                           ;motors.c: 183:     motCounter[1][1] = -1;
  2420  001786  686A               	setf	(_motCounter+3)^0,c
  2421                           
  2422                           ;motors.c: 184:     motCounter[2][1] = -1;
  2423  001788  686C               	setf	(_motCounter+5)^0,c
  2424  00178A                     
  2425                           ;motors.c: 189:     unsigned char keepMovingX = 1;
  2426  00178A  0E01               	movlw	1
  2427  00178C  6E15               	movwf	resetPosition@keepMovingX^0,c
  2428                           
  2429                           ;motors.c: 190:     unsigned char keepMovingY = 1;
  2430  00178E  0E01               	movlw	1
  2431  001790  6E16               	movwf	resetPosition@keepMovingY^0,c
  2432                           
  2433                           ;motors.c: 191:     unsigned char keepMovingZ = 1;
  2434  001792  0E01               	movlw	1
  2435  001794  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2436  001796                     
  2437                           ;motors.c: 194:     T2CONbits.TMR2ON = 1;
  2438  001796  84CA               	bsf	202,2,c	;volatile
  2439                           
  2440                           ;motors.c: 196:     tm0Error = 0;
  2441  001798  0E00               	movlw	0
  2442  00179A  6E5A               	movwf	(_tm0Error+1)^0,c
  2443  00179C  0E00               	movlw	0
  2444  00179E  6E59               	movwf	_tm0Error^0,c
  2445                           
  2446                           ;motors.c: 197:     tm0Limit = 200;
  2447  0017A0  0EC8               	movlw	200
  2448  0017A2  6E66               	movwf	_tm0Limit^0,c
  2449  0017A4                     
  2450                           ;motors.c: 198:     T0CONbits.TMR0ON = 1;
  2451  0017A4  8ED5               	bsf	213,7,c	;volatile
  2452                           
  2453                           ;motors.c: 200:     while(keepMovingX || keepMovingY || keepMovingZ){
  2454  0017A6  EF83  F00C         	goto	l4390
  2455  0017AA                     l4348:
  2456  0017AA  FFFF               	dw	65535	; assembler added errata NOP
  2457                           
  2458                           ;motors.c: 202:         resetStep();
  2459  0017AC  EC5A  F013         	call	_resetStep	;wreg free
  2460  0017B0                     
  2461                           ;motors.c: 205:         if(tm0Error){
  2462  0017B0  5059               	movf	_tm0Error^0,w,c
  2463  0017B2  105A               	iorwf	(_tm0Error+1)^0,w,c
  2464  0017B4  B4D8               	btfsc	status,2,c
  2465  0017B6  EFDF  F00B         	goto	u3811
  2466  0017BA  EFE2  F00B         	goto	u3810
  2467  0017BE                     u3811:
  2468  0017BE  FFFF               	dw	65535	; assembler added errata NOP
  2469  0017C0  EFE9  F00B         	goto	l131
  2470  0017C4                     u3810:
  2471  0017C4  FFFF               	dw	65535	; assembler added errata NOP
  2472  0017C6                     
  2473                           ;motors.c: 213:             tm0Error = 3;
  2474  0017C6  0E00               	movlw	0
  2475  0017C8  6E5A               	movwf	(_tm0Error+1)^0,c
  2476  0017CA  0E03               	movlw	3
  2477  0017CC  6E59               	movwf	_tm0Error^0,c
  2478                           
  2479                           ;motors.c: 214:             break;
  2480  0017CE  EFA1  F00C         	goto	l132
  2481  0017D2                     l131:
  2482  0017D2  FFFF               	dw	65535	; assembler added errata NOP
  2483                           
  2484                           ;motors.c: 221:         if(PORTEbits.RE0 || !keepMovingX){
  2485  0017D4  B084               	btfsc	132,0,c	;volatile
  2486  0017D6  EFEF  F00B         	goto	u3821
  2487  0017DA  EFF2  F00B         	goto	u3820
  2488  0017DE                     u3821:
  2489  0017DE  FFFF               	dw	65535	; assembler added errata NOP
  2490  0017E0  EFFC  F00B         	goto	l4356
  2491  0017E4                     u3820:
  2492  0017E4  FFFF               	dw	65535	; assembler added errata NOP
  2493  0017E6  5015               	movf	resetPosition@keepMovingX^0,w,c
  2494  0017E8  A4D8               	btfss	status,2,c
  2495  0017EA  EFF9  F00B         	goto	u3831
  2496  0017EE  EFFC  F00B         	goto	u3830
  2497  0017F2                     u3831:
  2498  0017F2  FFFF               	dw	65535	; assembler added errata NOP
  2499  0017F4  EF01  F00C         	goto	l4358
  2500  0017F8                     u3830:
  2501  0017F8                     l4356:
  2502  0017F8  FFFF               	dw	65535	; assembler added errata NOP
  2503                           
  2504                           ;motors.c: 223:             keepMovingX = 0;
  2505  0017FA  0E00               	movlw	0
  2506  0017FC  6E15               	movwf	resetPosition@keepMovingX^0,c
  2507                           
  2508                           ;motors.c: 224:         }else{
  2509  0017FE  EF18  F00C         	goto	l4364
  2510  001802                     l4358:
  2511  001802  FFFF               	dw	65535	; assembler added errata NOP
  2512                           
  2513                           ;motors.c: 230:             motCounter[0][0] += motCounter[0][1];
  2514  001804  5068               	movf	(_motCounter+1)^0,w,c
  2515  001806  2667               	addwf	_motCounter^0,f,c
  2516                           
  2517                           ;motors.c: 231:             if(motCounter[0][0] < 0){
  2518  001808  BE67               	btfsc	_motCounter^0,7,c
  2519  00180A  EF0C  F00C         	goto	u3840
  2520  00180E  EF09  F00C         	goto	u3841
  2521  001812                     u3841:
  2522  001812  FFFF               	dw	65535	; assembler added errata NOP
  2523  001814  EF0F  F00C         	goto	l4362
  2524  001818                     u3840:
  2525  001818  FFFF               	dw	65535	; assembler added errata NOP
  2526  00181A                     
  2527                           ;motors.c: 232:                 motCounter[0][0] = 3;
  2528  00181A  0E03               	movlw	3
  2529  00181C  6E67               	movwf	_motCounter^0,c
  2530  00181E                     l4362:
  2531  00181E  FFFF               	dw	65535	; assembler added errata NOP
  2532                           
  2533                           ;motors.c: 235:             LATA = stepMot1[motCounter[0][0]];
  2534  001820  0E8C               	movlw	low _stepMot1
  2535  001822  2467               	addwf	_motCounter^0,w,c
  2536  001824  6ED9               	movwf	fsr2l,c
  2537  001826  6ADA               	clrf	fsr2h,c
  2538  001828  0E00               	movlw	high _stepMot1
  2539  00182A  22DA               	addwfc	fsr2h,f,c
  2540  00182C  50DF               	movf	indf2,w,c
  2541  00182E  6E89               	movwf	137,c	;volatile
  2542  001830                     l4364:
  2543  001830  FFFF               	dw	65535	; assembler added errata NOP
  2544                           
  2545                           ;motors.c: 240:         if(PORTEbits.RE1 || !keepMovingY){
  2546  001832  B284               	btfsc	132,1,c	;volatile
  2547  001834  EF1E  F00C         	goto	u3851
  2548  001838  EF21  F00C         	goto	u3850
  2549  00183C                     u3851:
  2550  00183C  FFFF               	dw	65535	; assembler added errata NOP
  2551  00183E  EF2B  F00C         	goto	l4368
  2552  001842                     u3850:
  2553  001842  FFFF               	dw	65535	; assembler added errata NOP
  2554  001844  5016               	movf	resetPosition@keepMovingY^0,w,c
  2555  001846  A4D8               	btfss	status,2,c
  2556  001848  EF28  F00C         	goto	u3861
  2557  00184C  EF2B  F00C         	goto	u3860
  2558  001850                     u3861:
  2559  001850  FFFF               	dw	65535	; assembler added errata NOP
  2560  001852  EF30  F00C         	goto	l4370
  2561  001856                     u3860:
  2562  001856                     l4368:
  2563  001856  FFFF               	dw	65535	; assembler added errata NOP
  2564                           
  2565                           ;motors.c: 242:             keepMovingY = 0;
  2566  001858  0E00               	movlw	0
  2567  00185A  6E16               	movwf	resetPosition@keepMovingY^0,c
  2568                           
  2569                           ;motors.c: 243:         }else{
  2570  00185C  EF47  F00C         	goto	l4376
  2571  001860                     l4370:
  2572  001860  FFFF               	dw	65535	; assembler added errata NOP
  2573                           
  2574                           ;motors.c: 249:             motCounter[1][0] += motCounter[1][1];
  2575  001862  506A               	movf	(_motCounter+3)^0,w,c
  2576  001864  2669               	addwf	(_motCounter+2)^0,f,c
  2577                           
  2578                           ;motors.c: 250:             if(motCounter[1][0] < 0){
  2579  001866  BE69               	btfsc	(_motCounter+2)^0,7,c
  2580  001868  EF3B  F00C         	goto	u3870
  2581  00186C  EF38  F00C         	goto	u3871
  2582  001870                     u3871:
  2583  001870  FFFF               	dw	65535	; assembler added errata NOP
  2584  001872  EF3E  F00C         	goto	l4374
  2585  001876                     u3870:
  2586  001876  FFFF               	dw	65535	; assembler added errata NOP
  2587  001878                     
  2588                           ;motors.c: 251:                 motCounter[1][0] = 3;
  2589  001878  0E03               	movlw	3
  2590  00187A  6E69               	movwf	(_motCounter+2)^0,c
  2591  00187C                     l4374:
  2592  00187C  FFFF               	dw	65535	; assembler added errata NOP
  2593                           
  2594                           ;motors.c: 254:             LATB = stepMot2[motCounter[1][0]];
  2595  00187E  0E88               	movlw	low _stepMot2
  2596  001880  2469               	addwf	(_motCounter+2)^0,w,c
  2597  001882  6ED9               	movwf	fsr2l,c
  2598  001884  6ADA               	clrf	fsr2h,c
  2599  001886  0E00               	movlw	high _stepMot2
  2600  001888  22DA               	addwfc	fsr2h,f,c
  2601  00188A  50DF               	movf	indf2,w,c
  2602  00188C  6E8A               	movwf	138,c	;volatile
  2603  00188E                     l4376:
  2604  00188E  FFFF               	dw	65535	; assembler added errata NOP
  2605                           
  2606                           ;motors.c: 259:         if(PORTEbits.RE2 || !keepMovingZ){
  2607  001890  B484               	btfsc	132,2,c	;volatile
  2608  001892  EF4D  F00C         	goto	u3881
  2609  001896  EF50  F00C         	goto	u3880
  2610  00189A                     u3881:
  2611  00189A  FFFF               	dw	65535	; assembler added errata NOP
  2612  00189C  EF5A  F00C         	goto	l4380
  2613  0018A0                     u3880:
  2614  0018A0  FFFF               	dw	65535	; assembler added errata NOP
  2615  0018A2  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2616  0018A4  A4D8               	btfss	status,2,c
  2617  0018A6  EF57  F00C         	goto	u3891
  2618  0018AA  EF5A  F00C         	goto	u3890
  2619  0018AE                     u3891:
  2620  0018AE  FFFF               	dw	65535	; assembler added errata NOP
  2621  0018B0  EF5F  F00C         	goto	l4382
  2622  0018B4                     u3890:
  2623  0018B4                     l4380:
  2624  0018B4  FFFF               	dw	65535	; assembler added errata NOP
  2625                           
  2626                           ;motors.c: 261:             keepMovingZ = 0;
  2627  0018B6  0E00               	movlw	0
  2628  0018B8  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2629                           
  2630                           ;motors.c: 262:         }else{
  2631  0018BA  EF76  F00C         	goto	l4388
  2632  0018BE                     l4382:
  2633  0018BE  FFFF               	dw	65535	; assembler added errata NOP
  2634                           
  2635                           ;motors.c: 268:             motCounter[2][0] += motCounter[2][1];
  2636  0018C0  506C               	movf	(_motCounter+5)^0,w,c
  2637  0018C2  266B               	addwf	(_motCounter+4)^0,f,c
  2638                           
  2639                           ;motors.c: 269:             if(motCounter[2][0] < 0){
  2640  0018C4  BE6B               	btfsc	(_motCounter+4)^0,7,c
  2641  0018C6  EF6A  F00C         	goto	u3900
  2642  0018CA  EF67  F00C         	goto	u3901
  2643  0018CE                     u3901:
  2644  0018CE  FFFF               	dw	65535	; assembler added errata NOP
  2645  0018D0  EF6D  F00C         	goto	l4386
  2646  0018D4                     u3900:
  2647  0018D4  FFFF               	dw	65535	; assembler added errata NOP
  2648  0018D6                     
  2649                           ;motors.c: 270:                 motCounter[2][0] = 3;
  2650  0018D6  0E03               	movlw	3
  2651  0018D8  6E6B               	movwf	(_motCounter+4)^0,c
  2652  0018DA                     l4386:
  2653  0018DA  FFFF               	dw	65535	; assembler added errata NOP
  2654                           
  2655                           ;motors.c: 273:             LATC = stepMot3[motCounter[2][0]];
  2656  0018DC  0E84               	movlw	low _stepMot3
  2657  0018DE  246B               	addwf	(_motCounter+4)^0,w,c
  2658  0018E0  6ED9               	movwf	fsr2l,c
  2659  0018E2  6ADA               	clrf	fsr2h,c
  2660  0018E4  0E00               	movlw	high _stepMot3
  2661  0018E6  22DA               	addwfc	fsr2h,f,c
  2662  0018E8  50DF               	movf	indf2,w,c
  2663  0018EA  6E8B               	movwf	139,c	;volatile
  2664  0018EC                     l4388:
  2665  0018EC  FFFF               	dw	65535	; assembler added errata NOP
  2666  0018EE  ECD7  F012         	call	_stepMade	;wreg free
  2667  0018F2  5012               	movf	?_stepMade^0,w,c
  2668  0018F4  1013               	iorwf	(?_stepMade+1)^0,w,c
  2669  0018F6  B4D8               	btfsc	status,2,c
  2670  0018F8  EF80  F00C         	goto	u3911
  2671  0018FC  EF83  F00C         	goto	u3910
  2672  001900                     u3911:
  2673  001900  FFFF               	dw	65535	; assembler added errata NOP
  2674  001902  EF76  F00C         	goto	l4388
  2675  001906                     u3910:
  2676  001906                     l4390:
  2677  001906  FFFF               	dw	65535	; assembler added errata NOP
  2678                           
  2679                           ;motors.c: 200:     while(keepMovingX || keepMovingY || keepMovingZ){
  2680  001908  5015               	movf	resetPosition@keepMovingX^0,w,c
  2681  00190A  A4D8               	btfss	status,2,c
  2682  00190C  EF8A  F00C         	goto	u3921
  2683  001910  EF8D  F00C         	goto	u3920
  2684  001914                     u3921:
  2685  001914  FFFF               	dw	65535	; assembler added errata NOP
  2686  001916  EFD5  F00B         	goto	l4348
  2687  00191A                     u3920:
  2688  00191A  FFFF               	dw	65535	; assembler added errata NOP
  2689  00191C  5016               	movf	resetPosition@keepMovingY^0,w,c
  2690  00191E  A4D8               	btfss	status,2,c
  2691  001920  EF94  F00C         	goto	u3931
  2692  001924  EF97  F00C         	goto	u3930
  2693  001928                     u3931:
  2694  001928  FFFF               	dw	65535	; assembler added errata NOP
  2695  00192A  EFD5  F00B         	goto	l4348
  2696  00192E                     u3930:
  2697  00192E  FFFF               	dw	65535	; assembler added errata NOP
  2698  001930  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2699  001932  A4D8               	btfss	status,2,c
  2700  001934  EF9E  F00C         	goto	u3941
  2701  001938  EFA1  F00C         	goto	u3940
  2702  00193C                     u3941:
  2703  00193C  FFFF               	dw	65535	; assembler added errata NOP
  2704  00193E  EFD5  F00B         	goto	l4348
  2705  001942                     u3940:
  2706  001942                     l132:
  2707  001942  FFFF               	dw	65535	; assembler added errata NOP
  2708                           
  2709                           ;motors.c: 293:     T0CONbits.TMR0ON = 0;
  2710  001944  9ED5               	bcf	213,7,c	;volatile
  2711                           
  2712                           ;motors.c: 294:     T2CONbits.TMR2ON = 0;
  2713  001946  94CA               	bcf	202,2,c	;volatile
  2714  001948                     
  2715                           ;motors.c: 296:     resetTM0_Temp();
  2716  001948  EC55  F013         	call	_resetTM0_Temp	;wreg free
  2717                           
  2718                           ;motors.c: 297:     resetTM2_Temp();
  2719  00194C  ECF3  F012         	call	_resetTM2_Temp	;wreg free
  2720  001950                     
  2721                           ;motors.c: 299:     TMR0 = 0;
  2722  001950  0E00               	movlw	0
  2723  001952  6ED7               	movwf	215,c	;volatile
  2724  001954  0E00               	movlw	0
  2725  001956  6ED6               	movwf	214,c	;volatile
  2726  001958                     
  2727                           ;motors.c: 300:     TMR2 = 0;
  2728  001958  0E00               	movlw	0
  2729  00195A  6ECC               	movwf	204,c	;volatile
  2730                           
  2731                           ;motors.c: 303:     resetStep();
  2732  00195C  EC5A  F013         	call	_resetStep	;wreg free
  2733  001960                     
  2734                           ;motors.c: 306:     return(tm0Error);
  2735  001960  5059               	movf	_tm0Error^0,w,c
  2736  001962  0012               	return		;funcret
  2737  001964  FFFF               	dw	65535	; errata NOP
  2738  001966                     __end_of_resetPosition:
  2739                           	callstack 0
  2740                           
  2741 ;; *************** function _resetNewSequence *****************
  2742 ;; Defined at:
  2743 ;;		line 92 in file "usart.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;		None
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;		None
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  1    wreg      void 
  2750 ;; Registers used:
  2751 ;;		wreg, status,2
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2757 ;;      Params:         0       0       0       0       0       0       0
  2758 ;;      Locals:         0       0       0       0       0       0       0
  2759 ;;      Temps:          0       0       0       0       0       0       0
  2760 ;;      Totals:         0       0       0       0       0       0       0
  2761 ;;Total ram usage:        0 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    4
  2764 ;; This function calls:
  2765 ;;		Nothing
  2766 ;; This function is called by:
  2767 ;;		_main
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           	psect	text10
  2772  002682                     __ptext10:
  2773                           	callstack 0
  2774  002682                     _resetNewSequence:
  2775                           	callstack 0
  2776  002682  FFFF               	dw	65535	; assembler added errata NOP
  2777  002684                     
  2778                           ;usart.c: 93:     _newSequence = 0;
  2779  002684  0E00               	movlw	0
  2780  002686  6E5F               	movwf	__newSequence^0,c
  2781  002688  0012               	return		;funcret
  2782  00268A  FFFF               	dw	65535	; errata NOP
  2783  00268C                     __end_of_resetNewSequence:
  2784                           	callstack 0
  2785                           
  2786 ;; *************** function _reduceSeq *****************
  2787 ;; Defined at:
  2788 ;;		line 62 in file "usart.c"
  2789 ;; Parameters:    Size  Location     Type
  2790 ;;		None
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;		None
  2793 ;; Return value:  Size  Location     Type
  2794 ;;                  1    wreg      void 
  2795 ;; Registers used:
  2796 ;;		status,2, status,0
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2802 ;;      Params:         0       0       0       0       0       0       0
  2803 ;;      Locals:         0       0       0       0       0       0       0
  2804 ;;      Temps:          0       0       0       0       0       0       0
  2805 ;;      Totals:         0       0       0       0       0       0       0
  2806 ;;Total ram usage:        0 bytes
  2807 ;; Hardware stack levels used:    1
  2808 ;; Hardware stack levels required when called:    4
  2809 ;; This function calls:
  2810 ;;		Nothing
  2811 ;; This function is called by:
  2812 ;;		_main
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815                           
  2816                           	psect	text11
  2817  0026DC                     __ptext11:
  2818                           	callstack 0
  2819  0026DC                     _reduceSeq:
  2820                           	callstack 0
  2821  0026DC  FFFF               	dw	65535	; assembler added errata NOP
  2822  0026DE                     
  2823                           ;usart.c: 63:     dataCounter--;
  2824  0026DE  0661               	decf	_dataCounter^0,f,c
  2825  0026E0  0012               	return		;funcret
  2826  0026E2  FFFF               	dw	65535	; errata NOP
  2827  0026E4                     __end_of_reduceSeq:
  2828                           	callstack 0
  2829                           
  2830 ;; *************** function _readSeq *****************
  2831 ;; Defined at:
  2832 ;;		line 76 in file "usart.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;		None
  2835 ;; Auto vars:     Size  Location     Type
  2836 ;;		None
  2837 ;; Return value:  Size  Location     Type
  2838 ;;                  1    wreg      unsigned char 
  2839 ;; Registers used:
  2840 ;;		wreg, status,2
  2841 ;; Tracked objects:
  2842 ;;		On entry : 0/0
  2843 ;;		On exit  : 0/0
  2844 ;;		Unchanged: 0/0
  2845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2846 ;;      Params:         0       0       0       0       0       0       0
  2847 ;;      Locals:         0       0       0       0       0       0       0
  2848 ;;      Temps:          0       0       0       0       0       0       0
  2849 ;;      Totals:         0       0       0       0       0       0       0
  2850 ;;Total ram usage:        0 bytes
  2851 ;; Hardware stack levels used:    1
  2852 ;; Hardware stack levels required when called:    4
  2853 ;; This function calls:
  2854 ;;		Nothing
  2855 ;; This function is called by:
  2856 ;;		_main
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           	psect	text12
  2861  0026E4                     __ptext12:
  2862                           	callstack 0
  2863  0026E4                     _readSeq:
  2864                           	callstack 0
  2865  0026E4  FFFF               	dw	65535	; assembler added errata NOP
  2866  0026E6                     
  2867                           ;usart.c: 77:     return dataCounter;
  2868  0026E6  5061               	movf	_dataCounter^0,w,c
  2869  0026E8  0012               	return		;funcret
  2870  0026EA  FFFF               	dw	65535	; errata NOP
  2871  0026EC                     __end_of_readSeq:
  2872                           	callstack 0
  2873                           
  2874 ;; *************** function _newSequence *****************
  2875 ;; Defined at:
  2876 ;;		line 84 in file "usart.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;		None
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;		None
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      unsigned char 
  2883 ;; Registers used:
  2884 ;;		wreg, status,2
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2890 ;;      Params:         0       0       0       0       0       0       0
  2891 ;;      Locals:         0       0       0       0       0       0       0
  2892 ;;      Temps:          0       0       0       0       0       0       0
  2893 ;;      Totals:         0       0       0       0       0       0       0
  2894 ;;Total ram usage:        0 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    4
  2897 ;; This function calls:
  2898 ;;		Nothing
  2899 ;; This function is called by:
  2900 ;;		_main
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           	psect	text13
  2905  0026EC                     __ptext13:
  2906                           	callstack 0
  2907  0026EC                     _newSequence:
  2908                           	callstack 0
  2909  0026EC  FFFF               	dw	65535	; assembler added errata NOP
  2910  0026EE                     
  2911                           ;usart.c: 85:     return _newSequence;
  2912  0026EE  505F               	movf	__newSequence^0,w,c
  2913  0026F0  0012               	return		;funcret
  2914  0026F2  FFFF               	dw	65535	; errata NOP
  2915  0026F4                     __end_of_newSequence:
  2916                           	callstack 0
  2917                           
  2918 ;; *************** function _interruptInit *****************
  2919 ;; Defined at:
  2920 ;;		line 35 in file "interrupt.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;		None
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;		None
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  1    wreg      void 
  2927 ;; Registers used:
  2928 ;;		None
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2934 ;;      Params:         0       0       0       0       0       0       0
  2935 ;;      Locals:         0       0       0       0       0       0       0
  2936 ;;      Temps:          0       0       0       0       0       0       0
  2937 ;;      Totals:         0       0       0       0       0       0       0
  2938 ;;Total ram usage:        0 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; Hardware stack levels required when called:    4
  2941 ;; This function calls:
  2942 ;;		Nothing
  2943 ;; This function is called by:
  2944 ;;		_main
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948                           	psect	text14
  2949  0024A8                     __ptext14:
  2950                           	callstack 0
  2951  0024A8                     _interruptInit:
  2952                           	callstack 0
  2953  0024A8  FFFF               	dw	65535	; assembler added errata NOP
  2954  0024AA                     
  2955                           ;interrupt.c: 37:     if(!INTCONbits.GIE){
  2956  0024AA  BEF2               	btfsc	242,7,c	;volatile
  2957  0024AC  EF5A  F012         	goto	u3951
  2958  0024B0  EF5D  F012         	goto	u3950
  2959  0024B4                     u3951:
  2960  0024B4  FFFF               	dw	65535	; assembler added errata NOP
  2961  0024B6  EF5F  F012         	goto	l447
  2962  0024BA                     u3950:
  2963  0024BA  FFFF               	dw	65535	; assembler added errata NOP
  2964  0024BC                     
  2965                           ;interrupt.c: 38:         INTCONbits.GIE = 1;
  2966  0024BC  8EF2               	bsf	242,7,c	;volatile
  2967  0024BE                     l447:
  2968  0024BE  FFFF               	dw	65535	; assembler added errata NOP
  2969                           
  2970                           ;interrupt.c: 40:     if(!INTCONbits.PEIE){
  2971  0024C0  BCF2               	btfsc	242,6,c	;volatile
  2972  0024C2  EF65  F012         	goto	u3961
  2973  0024C6  EF68  F012         	goto	u3960
  2974  0024CA                     u3961:
  2975  0024CA  FFFF               	dw	65535	; assembler added errata NOP
  2976  0024CC  EF6A  F012         	goto	l448
  2977  0024D0                     u3960:
  2978  0024D0  FFFF               	dw	65535	; assembler added errata NOP
  2979  0024D2                     
  2980                           ;interrupt.c: 41:         INTCONbits.PEIE = 1;
  2981  0024D2  8CF2               	bsf	242,6,c	;volatile
  2982  0024D4                     l448:
  2983  0024D4  FFFF               	dw	65535	; assembler added errata NOP
  2984                           
  2985                           ;interrupt.c: 45:     RCONbits.IPEN = 1;
  2986  0024D6  8ED0               	bsf	208,7,c	;volatile
  2987                           
  2988                           ;interrupt.c: 46:     INTCONbits.T0IE = 1;
  2989  0024D8  8AF2               	bsf	242,5,c	;volatile
  2990                           
  2991                           ;interrupt.c: 47:     PIE1bits.TMR1IE = 1;
  2992  0024DA  809D               	bsf	157,0,c	;volatile
  2993                           
  2994                           ;interrupt.c: 48:     PIE1bits.TMR2IE = 1;
  2995  0024DC  829D               	bsf	157,1,c	;volatile
  2996                           
  2997                           ;interrupt.c: 49:     PIE1bits.RC1IE = 1;
  2998  0024DE  8A9D               	bsf	157,5,c	;volatile
  2999  0024E0  0012               	return		;funcret
  3000  0024E2  FFFF               	dw	65535	; errata NOP
  3001  0024E4                     __end_of_interruptInit:
  3002                           	callstack 0
  3003                           
  3004 ;; *************** function _initPinMotors *****************
  3005 ;; Defined at:
  3006 ;;		line 46 in file "motors.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;		None
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;		None
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  1    wreg      void 
  3013 ;; Registers used:
  3014 ;;		wreg, status,2, status,0
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3020 ;;      Params:         0       0       0       0       0       0       0
  3021 ;;      Locals:         0       0       0       0       0       0       0
  3022 ;;      Temps:          0       0       0       0       0       0       0
  3023 ;;      Totals:         0       0       0       0       0       0       0
  3024 ;;Total ram usage:        0 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:    4
  3027 ;; This function calls:
  3028 ;;		Nothing
  3029 ;; This function is called by:
  3030 ;;		_main
  3031 ;; This function uses a non-reentrant model
  3032 ;;
  3033                           
  3034                           	psect	text15
  3035  002544                     __ptext15:
  3036                           	callstack 0
  3037  002544                     _initPinMotors:
  3038                           	callstack 0
  3039  002544  FFFF               	dw	65535	; assembler added errata NOP
  3040  002546                     
  3041                           ;motors.c: 48:     ADCON1bits.PCFG = 0x06;
  3042  002546  50C1               	movf	193,w,c	;volatile
  3043  002548  0BF0               	andlw	-16
  3044  00254A  0906               	iorlw	6
  3045  00254C  6EC1               	movwf	193,c	;volatile
  3046  00254E                     
  3047                           ;motors.c: 49:     TRISA &= 0b11010001;
  3048  00254E  0ED1               	movlw	209
  3049  002550  1692               	andwf	146,f,c	;volatile
  3050  002552                     
  3051                           ;motors.c: 51:     TRISB &= 0b00000010;
  3052  002552  0E02               	movlw	2
  3053  002554  1693               	andwf	147,f,c	;volatile
  3054  002556                     
  3055                           ;motors.c: 52:     TRISC &= 0b11000000;
  3056  002556  0EC0               	movlw	192
  3057  002558  1694               	andwf	148,f,c	;volatile
  3058  00255A                     
  3059                           ;motors.c: 53:     TRISD &= 0b11000000;
  3060  00255A  0EC0               	movlw	192
  3061  00255C  1695               	andwf	149,f,c	;volatile
  3062  00255E                     
  3063                           ;motors.c: 56:     TRISEbits.TRISE0 = 1;
  3064  00255E  8096               	bsf	150,0,c	;volatile
  3065  002560                     
  3066                           ;motors.c: 57:     TRISEbits.TRISE1 = 1;
  3067  002560  8296               	bsf	150,1,c	;volatile
  3068  002562                     
  3069                           ;motors.c: 58:     TRISEbits.TRISE2 = 1;
  3070  002562  8496               	bsf	150,2,c	;volatile
  3071  002564                     
  3072                           ;motors.c: 61:     TRISDbits.TRISD7 = 1;
  3073  002564  8E95               	bsf	149,7,c	;volatile
  3074  002566  0012               	return		;funcret
  3075  002568  FFFF               	dw	65535	; errata NOP
  3076  00256A                     __end_of_initPinMotors:
  3077                           	callstack 0
  3078                           
  3079 ;; *************** function _initADC *****************
  3080 ;; Defined at:
  3081 ;;		line 18 in file "adc.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;		None
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;		None
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      void 
  3088 ;; Registers used:
  3089 ;;		wreg, status,2
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3095 ;;      Params:         0       0       0       0       0       0       0
  3096 ;;      Locals:         0       0       0       0       0       0       0
  3097 ;;      Temps:          0       0       0       0       0       0       0
  3098 ;;      Totals:         0       0       0       0       0       0       0
  3099 ;;Total ram usage:        0 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    4
  3102 ;; This function calls:
  3103 ;;		Nothing
  3104 ;; This function is called by:
  3105 ;;		_main
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           	psect	text16
  3110  00256A                     __ptext16:
  3111                           	callstack 0
  3112  00256A                     _initADC:
  3113                           	callstack 0
  3114  00256A  FFFF               	dw	65535	; assembler added errata NOP
  3115  00256C                     
  3116                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3117  00256C  50C2               	movf	194,w,c	;volatile
  3118  00256E  0B3F               	andlw	-193
  3119  002570  0940               	iorlw	64
  3120  002572  6EC2               	movwf	194,c	;volatile
  3121  002574                     
  3122                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3123  002574  8CC1               	bsf	193,6,c	;volatile
  3124                           
  3125                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3126  002576  0EC7               	movlw	-57
  3127  002578  16C2               	andwf	194,f,c	;volatile
  3128  00257A                     
  3129                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3130  00257A  94C2               	bcf	194,2,c	;volatile
  3131  00257C                     
  3132                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3133  00257C  90C2               	bcf	194,0,c	;volatile
  3134  00257E                     
  3135                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3136  00257E  9EC1               	bcf	193,7,c	;volatile
  3137                           
  3138                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3139  002580  50C1               	movf	193,w,c	;volatile
  3140  002582  0BF0               	andlw	-16
  3141  002584  090E               	iorlw	14
  3142  002586  6EC1               	movwf	193,c	;volatile
  3143  002588                     
  3144                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3145  002588  8C9D               	bsf	157,6,c	;volatile
  3146  00258A                     
  3147                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3148  00258A  8C9F               	bsf	159,6,c	;volatile
  3149  00258C  0012               	return		;funcret
  3150  00258E  FFFF               	dw	65535	; errata NOP
  3151  002590                     __end_of_initADC:
  3152                           	callstack 0
  3153                           
  3154 ;; *************** function _getNewSequence *****************
  3155 ;; Defined at:
  3156 ;;		line 55 in file "usart.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;		None
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;		None
  3161 ;; Return value:  Size  Location     Type
  3162 ;;                  2   17[COMRAM] PTR struct .
  3163 ;; Registers used:
  3164 ;;		wreg, status,2, status,0
  3165 ;; Tracked objects:
  3166 ;;		On entry : 0/0
  3167 ;;		On exit  : 0/0
  3168 ;;		Unchanged: 0/0
  3169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3170 ;;      Params:         2       0       0       0       0       0       0
  3171 ;;      Locals:         0       0       0       0       0       0       0
  3172 ;;      Temps:          0       0       0       0       0       0       0
  3173 ;;      Totals:         2       0       0       0       0       0       0
  3174 ;;Total ram usage:        2 bytes
  3175 ;; Hardware stack levels used:    1
  3176 ;; Hardware stack levels required when called:    4
  3177 ;; This function calls:
  3178 ;;		Nothing
  3179 ;; This function is called by:
  3180 ;;		_main
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           	psect	text17
  3185  002618                     __ptext17:
  3186                           	callstack 0
  3187  002618                     _getNewSequence:
  3188                           	callstack 0
  3189  002618  FFFF               	dw	65535	; assembler added errata NOP
  3190  00261A                     
  3191                           ;usart.c: 56:     return(&newSequenceData);
  3192  00261A  0EDA               	movlw	low _newSequenceData
  3193  00261C  6E12               	movwf	?_getNewSequence^0,c
  3194  00261E  0E00               	movlw	high _newSequenceData
  3195  002620  6E13               	movwf	(?_getNewSequence+1)^0,c
  3196  002622  0012               	return		;funcret
  3197  002624  FFFF               	dw	65535	; errata NOP
  3198  002626                     __end_of_getNewSequence:
  3199                           	callstack 0
  3200                           
  3201 ;; *************** function _executeData *****************
  3202 ;; Defined at:
  3203 ;;		line 84 in file "main.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;		None
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;  data            2    9[BANK0 ] PTR struct .
  3208 ;;		 -> dataSequence(20), 
  3209 ;;  errCode         1   11[BANK0 ] unsigned char 
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  1    wreg      unsigned char 
  3212 ;; Registers used:
  3213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3219 ;;      Params:         0       0       0       0       0       0       0
  3220 ;;      Locals:         0       3       0       0       0       0       0
  3221 ;;      Temps:          0       2       0       0       0       0       0
  3222 ;;      Totals:         0       5       0       0       0       0       0
  3223 ;;Total ram usage:        5 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; Hardware stack levels required when called:    6
  3226 ;; This function calls:
  3227 ;;		_getData
  3228 ;;		_liftArm
  3229 ;;		_moveToPoint
  3230 ;;		_pickObject
  3231 ;;		_releaseObj
  3232 ;;		_rotateObj
  3233 ;;		_touchObject
  3234 ;;		_touchTherm
  3235 ;; This function is called by:
  3236 ;;		_main
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           	psect	text18
  3241  000D8C                     __ptext18:
  3242                           	callstack 0
  3243  000D8C                     _executeData:
  3244                           	callstack 0
  3245  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  3246  000D8E                     
  3247                           ;main.c: 85:     t_sequence *data = getData();
  3248  000D8E  EC13  F013         	call	_getData	;wreg free
  3249  000D92  C012  F0EB         	movff	?_getData,executeData@data
  3250  000D96  C013  F0EC         	movff	?_getData+1,executeData@data+1
  3251  000D9A                     
  3252                           ;main.c: 91:     switch(data->feederLine){
  3253  000D9A  EF78  F007         	goto	l4558
  3254  000D9E                     l4530:
  3255  000D9E  FFFF               	dw	65535	; assembler added errata NOP
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;main.c: 94:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0]
      +                          , feeder1Pos[1]);
  3259  000DA0  C04C  F015         	movff	_posVector,moveToPoint@x1
  3260  000DA4  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3261  000DA6  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3262  000DAA  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3263  000DAC  0E11               	movlw	low _feeder1Pos
  3264  000DAE  6EF6               	movwf	tblptrl,c
  3265  000DB0                     	if	1	;There is more than 1 active tblptr byte
  3266  000DB0  0E06               	movlw	high _feeder1Pos
  3267  000DB2  6EF7               	movwf	tblptrh,c
  3268  000DB4                     	endif
  3269  000DB4                     	if	0	;There are less than 3 active tblptr bytes
  3270  000DB4                     	endif
  3271  000DB4  0008               	tblrd		*
  3272  000DB6  FFFF               	dw	65535	; errata NOP
  3273  000DB8  50F5               	movf	tablat,w,c
  3274  000DBA  6E19               	movwf	moveToPoint@x2^0,c
  3275  000DBC  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3276  000DBE  0E12               	movlw	low (_feeder1Pos+1)
  3277  000DC0  6EF6               	movwf	tblptrl,c
  3278  000DC2  0E06               	movlw	high (_feeder1Pos+1)
  3279  000DC4  6EF7               	movwf	tblptrh,c
  3280  000DC6                     	if	0	;tblptru may be non-zero
  3281  000DC6                     	endif
  3282  000DC6                     	if	0	;tblptru may be non-zero
  3283  000DC6                     	endif
  3284  000DC6  0008               	tblrd		*
  3285  000DC8  FFFF               	dw	65535	; errata NOP
  3286  000DCA  50F5               	movf	tablat,w,c
  3287  000DCC  6E1B               	movwf	moveToPoint@y2^0,c
  3288  000DCE  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3289  000DD0  EC24  F005         	call	_moveToPoint	;wreg free
  3290  000DD4  0100               	movlb	0	; () banked
  3291  000DD6  6FED               	movwf	executeData@errCode& (0+255),b
  3292  000DD8                     
  3293                           ; BSR set to: 0
  3294                           ;main.c: 96:             posVector[0] = feeder1Pos[0];
  3295  000DD8  0E11               	movlw	low _feeder1Pos
  3296  000DDA  6EF6               	movwf	tblptrl,c
  3297  000DDC                     	if	1	;There is more than 1 active tblptr byte
  3298  000DDC  0E06               	movlw	high _feeder1Pos
  3299  000DDE  6EF7               	movwf	tblptrh,c
  3300  000DE0                     	endif
  3301  000DE0                     	if	0	;There are less than 3 active tblptr bytes
  3302  000DE0                     	endif
  3303  000DE0  0008               	tblrd		*
  3304  000DE2  FFFF               	dw	65535	; errata NOP
  3305  000DE4  CFF5 F04C          	movff	tablat,_posVector
  3306  000DE8                     
  3307                           ; BSR set to: 0
  3308                           ;main.c: 97:             posVector[1] = feeder1Pos[1];
  3309  000DE8  0E12               	movlw	low (_feeder1Pos+1)
  3310  000DEA  6EF6               	movwf	tblptrl,c
  3311  000DEC  0E06               	movlw	high (_feeder1Pos+1)
  3312  000DEE  6EF7               	movwf	tblptrh,c
  3313  000DF0                     	if	0	;tblptru may be non-zero
  3314  000DF0                     	endif
  3315  000DF0                     	if	0	;tblptru may be non-zero
  3316  000DF0                     	endif
  3317  000DF0  0008               	tblrd		*
  3318  000DF2  FFFF               	dw	65535	; errata NOP
  3319  000DF4  CFF5 F04D          	movff	tablat,_posVector+1
  3320                           
  3321                           ;main.c: 98:             break;
  3322  000DF8  EF9C  F007         	goto	l4560
  3323  000DFC                     l4536:
  3324  000DFC  FFFF               	dw	65535	; assembler added errata NOP
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;main.c: 100:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3328  000DFE  C04C  F015         	movff	_posVector,moveToPoint@x1
  3329  000E02  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3330  000E04  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3331  000E08  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3332  000E0A  0E0F               	movlw	low _feeder2Pos
  3333  000E0C  6EF6               	movwf	tblptrl,c
  3334  000E0E                     	if	1	;There is more than 1 active tblptr byte
  3335  000E0E  0E06               	movlw	high _feeder2Pos
  3336  000E10  6EF7               	movwf	tblptrh,c
  3337  000E12                     	endif
  3338  000E12                     	if	0	;There are less than 3 active tblptr bytes
  3339  000E12                     	endif
  3340  000E12  0008               	tblrd		*
  3341  000E14  FFFF               	dw	65535	; errata NOP
  3342  000E16  50F5               	movf	tablat,w,c
  3343  000E18  6E19               	movwf	moveToPoint@x2^0,c
  3344  000E1A  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3345  000E1C  0E10               	movlw	low (_feeder2Pos+1)
  3346  000E1E  6EF6               	movwf	tblptrl,c
  3347  000E20  0E06               	movlw	high (_feeder2Pos+1)
  3348  000E22  6EF7               	movwf	tblptrh,c
  3349  000E24                     	if	0	;tblptru may be non-zero
  3350  000E24                     	endif
  3351  000E24                     	if	0	;tblptru may be non-zero
  3352  000E24                     	endif
  3353  000E24  0008               	tblrd		*
  3354  000E26  FFFF               	dw	65535	; errata NOP
  3355  000E28  50F5               	movf	tablat,w,c
  3356  000E2A  6E1B               	movwf	moveToPoint@y2^0,c
  3357  000E2C  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3358  000E2E  EC24  F005         	call	_moveToPoint	;wreg free
  3359  000E32  0100               	movlb	0	; () banked
  3360  000E34  6FED               	movwf	executeData@errCode& (0+255),b
  3361  000E36                     
  3362                           ; BSR set to: 0
  3363                           ;main.c: 101:             posVector[0] = feeder2Pos[0];
  3364  000E36  0E0F               	movlw	low _feeder2Pos
  3365  000E38  6EF6               	movwf	tblptrl,c
  3366  000E3A                     	if	1	;There is more than 1 active tblptr byte
  3367  000E3A  0E06               	movlw	high _feeder2Pos
  3368  000E3C  6EF7               	movwf	tblptrh,c
  3369  000E3E                     	endif
  3370  000E3E                     	if	0	;There are less than 3 active tblptr bytes
  3371  000E3E                     	endif
  3372  000E3E  0008               	tblrd		*
  3373  000E40  FFFF               	dw	65535	; errata NOP
  3374  000E42  CFF5 F04C          	movff	tablat,_posVector
  3375  000E46                     
  3376                           ; BSR set to: 0
  3377                           ;main.c: 102:             posVector[1] = feeder2Pos[1];
  3378  000E46  0E10               	movlw	low (_feeder2Pos+1)
  3379  000E48  6EF6               	movwf	tblptrl,c
  3380  000E4A  0E06               	movlw	high (_feeder2Pos+1)
  3381  000E4C  6EF7               	movwf	tblptrh,c
  3382  000E4E                     	if	0	;tblptru may be non-zero
  3383  000E4E                     	endif
  3384  000E4E                     	if	0	;tblptru may be non-zero
  3385  000E4E                     	endif
  3386  000E4E  0008               	tblrd		*
  3387  000E50  FFFF               	dw	65535	; errata NOP
  3388  000E52  CFF5 F04D          	movff	tablat,_posVector+1
  3389                           
  3390                           ;main.c: 103:             break;
  3391  000E56  EF9C  F007         	goto	l4560
  3392  000E5A                     l4542:
  3393  000E5A  FFFF               	dw	65535	; assembler added errata NOP
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;main.c: 105:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3397  000E5C  C04C  F015         	movff	_posVector,moveToPoint@x1
  3398  000E60  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3399  000E62  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3400  000E66  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3401  000E68  0E0D               	movlw	low _feeder3Pos
  3402  000E6A  6EF6               	movwf	tblptrl,c
  3403  000E6C                     	if	1	;There is more than 1 active tblptr byte
  3404  000E6C  0E06               	movlw	high _feeder3Pos
  3405  000E6E  6EF7               	movwf	tblptrh,c
  3406  000E70                     	endif
  3407  000E70                     	if	0	;There are less than 3 active tblptr bytes
  3408  000E70                     	endif
  3409  000E70  0008               	tblrd		*
  3410  000E72  FFFF               	dw	65535	; errata NOP
  3411  000E74  50F5               	movf	tablat,w,c
  3412  000E76  6E19               	movwf	moveToPoint@x2^0,c
  3413  000E78  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3414  000E7A  0E0E               	movlw	low (_feeder3Pos+1)
  3415  000E7C  6EF6               	movwf	tblptrl,c
  3416  000E7E  0E06               	movlw	high (_feeder3Pos+1)
  3417  000E80  6EF7               	movwf	tblptrh,c
  3418  000E82                     	if	0	;tblptru may be non-zero
  3419  000E82                     	endif
  3420  000E82                     	if	0	;tblptru may be non-zero
  3421  000E82                     	endif
  3422  000E82  0008               	tblrd		*
  3423  000E84  FFFF               	dw	65535	; errata NOP
  3424  000E86  50F5               	movf	tablat,w,c
  3425  000E88  6E1B               	movwf	moveToPoint@y2^0,c
  3426  000E8A  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3427  000E8C  EC24  F005         	call	_moveToPoint	;wreg free
  3428  000E90  0100               	movlb	0	; () banked
  3429  000E92  6FED               	movwf	executeData@errCode& (0+255),b
  3430  000E94                     
  3431                           ; BSR set to: 0
  3432                           ;main.c: 106:             posVector[0] = feeder3Pos[0];
  3433  000E94  0E0D               	movlw	low _feeder3Pos
  3434  000E96  6EF6               	movwf	tblptrl,c
  3435  000E98                     	if	1	;There is more than 1 active tblptr byte
  3436  000E98  0E06               	movlw	high _feeder3Pos
  3437  000E9A  6EF7               	movwf	tblptrh,c
  3438  000E9C                     	endif
  3439  000E9C                     	if	0	;There are less than 3 active tblptr bytes
  3440  000E9C                     	endif
  3441  000E9C  0008               	tblrd		*
  3442  000E9E  FFFF               	dw	65535	; errata NOP
  3443  000EA0  CFF5 F04C          	movff	tablat,_posVector
  3444  000EA4                     
  3445                           ; BSR set to: 0
  3446                           ;main.c: 107:             posVector[1] = feeder3Pos[1];
  3447  000EA4  0E0E               	movlw	low (_feeder3Pos+1)
  3448  000EA6  6EF6               	movwf	tblptrl,c
  3449  000EA8  0E06               	movlw	high (_feeder3Pos+1)
  3450  000EAA  6EF7               	movwf	tblptrh,c
  3451  000EAC                     	if	0	;tblptru may be non-zero
  3452  000EAC                     	endif
  3453  000EAC                     	if	0	;tblptru may be non-zero
  3454  000EAC                     	endif
  3455  000EAC  0008               	tblrd		*
  3456  000EAE  FFFF               	dw	65535	; errata NOP
  3457  000EB0  CFF5 F04D          	movff	tablat,_posVector+1
  3458                           
  3459                           ;main.c: 108:             break;
  3460  000EB4  EF9C  F007         	goto	l4560
  3461  000EB8                     l4548:
  3462  000EB8  FFFF               	dw	65535	; assembler added errata NOP
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;main.c: 112:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3466  000EBA  C04C  F015         	movff	_posVector,moveToPoint@x1
  3467  000EBE  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3468  000EC0  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3469  000EC4  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3470  000EC6  C055  F019         	movff	_newFeeder,moveToPoint@x2
  3471  000ECA  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3472  000ECC  C056  F01B         	movff	_newFeeder+1,moveToPoint@y2
  3473  000ED0  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3474  000ED2  EC24  F005         	call	_moveToPoint	;wreg free
  3475  000ED6  0100               	movlb	0	; () banked
  3476  000ED8  6FED               	movwf	executeData@errCode& (0+255),b
  3477  000EDA                     
  3478                           ; BSR set to: 0
  3479                           ;main.c: 113:             posVector[0] = newFeeder[0];
  3480  000EDA  C055  F04C         	movff	_newFeeder,_posVector
  3481  000EDE                     
  3482                           ; BSR set to: 0
  3483                           ;main.c: 114:             posVector[1] = newFeeder[1];
  3484  000EDE  C056  F04D         	movff	_newFeeder+1,_posVector+1
  3485                           
  3486                           ;main.c: 115:             break;
  3487  000EE2  EF9C  F007         	goto	l4560
  3488  000EE6                     l4554:
  3489  000EE6  FFFF               	dw	65535	; assembler added errata NOP
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;main.c: 119:             errCode = 1;
  3493  000EE8  0E01               	movlw	1
  3494  000EEA  6FED               	movwf	executeData@errCode& (0+255),b
  3495                           
  3496                           ;main.c: 120:             break;
  3497  000EEC  EF9C  F007         	goto	l4560
  3498  000EF0                     l4558:
  3499  000EF0  FFFF               	dw	65535	; assembler added errata NOP
  3500  000EF2  C0EB  FFD9         	movff	executeData@data,fsr2l
  3501  000EF6  C0EC  FFDA         	movff	executeData@data+1,fsr2h
  3502  000EFA  50DF               	movf	indf2,w,c
  3503  000EFC  0100               	movlb	0	; () banked
  3504  000EFE  6FE9               	movwf	??_executeData& (0+255),b
  3505  000F00  6BEA               	clrf	(??_executeData+1)& (0+255),b
  3506                           
  3507                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3508                           ; Switch size 1, requested type "simple"
  3509                           ; Number of cases is 1, Range of values is 0 to 0
  3510                           ; switch strategies available:
  3511                           ; Name         Instructions Cycles
  3512                           ; simple_byte            4     3 (average)
  3513                           ;	Chosen strategy is simple_byte
  3514  000F02  51EA               	movf	(??_executeData+1)& (0+255),w,b
  3515  000F04  0A00               	xorlw	0	; case 0
  3516  000F06  B4D8               	btfsc	status,2,c
  3517  000F08  EF88  F007         	goto	l4836
  3518  000F0C  EF73  F007         	goto	l4554
  3519  000F10                     l4836:
  3520  000F10  FFFF               	dw	65535	; assembler added errata NOP
  3521                           
  3522                           ; BSR set to: 0
  3523                           ; Switch size 1, requested type "simple"
  3524                           ; Number of cases is 4, Range of values is 0 to 255
  3525                           ; switch strategies available:
  3526                           ; Name         Instructions Cycles
  3527                           ; simple_byte           13     7 (average)
  3528                           ;	Chosen strategy is simple_byte
  3529  000F12  51E9               	movf	??_executeData& (0+255),w,b
  3530  000F14  0A00               	xorlw	0	; case 0
  3531  000F16  B4D8               	btfsc	status,2,c
  3532  000F18  EFCF  F006         	goto	l4530
  3533  000F1C  0A01               	xorlw	1	; case 1
  3534  000F1E  B4D8               	btfsc	status,2,c
  3535  000F20  EFFE  F006         	goto	l4536
  3536  000F24  0A03               	xorlw	3	; case 2
  3537  000F26  B4D8               	btfsc	status,2,c
  3538  000F28  EF2D  F007         	goto	l4542
  3539  000F2C  0AFD               	xorlw	253	; case 255
  3540  000F2E  B4D8               	btfsc	status,2,c
  3541  000F30  EF5C  F007         	goto	l4548
  3542  000F34  EF73  F007         	goto	l4554
  3543  000F38                     l4560:
  3544  000F38  FFFF               	dw	65535	; assembler added errata NOP
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;main.c: 124:     if(!errCode){
  3548  000F3A  51ED               	movf	executeData@errCode& (0+255),w,b
  3549  000F3C  A4D8               	btfss	status,2,c
  3550  000F3E  EFA3  F007         	goto	u4061
  3551  000F42  EFA6  F007         	goto	u4060
  3552  000F46                     u4061:
  3553  000F46  FFFF               	dw	65535	; assembler added errata NOP
  3554  000F48  EFB4  F007         	goto	l4566
  3555  000F4C                     u4060:
  3556  000F4C  FFFF               	dw	65535	; assembler added errata NOP
  3557  000F4E                     
  3558                           ; BSR set to: 0
  3559                           ;main.c: 127:         errCode = touchObject();
  3560  000F4E  EC8F  F00F         	call	_touchObject	;wreg free
  3561  000F52  0100               	movlb	0	; () banked
  3562  000F54  6FED               	movwf	executeData@errCode& (0+255),b
  3563  000F56                     
  3564                           ; BSR set to: 0
  3565                           ;main.c: 128:         if(errCode != 0){
  3566  000F56  51ED               	movf	executeData@errCode& (0+255),w,b
  3567  000F58  B4D8               	btfsc	status,2,c
  3568  000F5A  EFB1  F007         	goto	u4071
  3569  000F5E  EFB4  F007         	goto	u4070
  3570  000F62                     u4071:
  3571  000F62  FFFF               	dw	65535	; assembler added errata NOP
  3572  000F64  EFB8  F007         	goto	l4570
  3573  000F68                     u4070:
  3574  000F68                     l4566:
  3575  000F68  FFFF               	dw	65535	; assembler added errata NOP
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;main.c: 129:             return(errCode);
  3579  000F6A  51ED               	movf	executeData@errCode& (0+255),w,b
  3580  000F6C  EF3E  F008         	goto	l346
  3581  000F70                     l4570:
  3582  000F70  FFFF               	dw	65535	; assembler added errata NOP
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;main.c: 132:         pickObject();
  3586  000F72  EC8A  F012         	call	_pickObject	;wreg free
  3587  000F76                     
  3588                           ;main.c: 135:         errCode = liftArm();
  3589  000F76  EC11  F011         	call	_liftArm	;wreg free
  3590  000F7A  0100               	movlb	0	; () banked
  3591  000F7C  6FED               	movwf	executeData@errCode& (0+255),b
  3592  000F7E                     
  3593                           ; BSR set to: 0
  3594                           ;main.c: 136:         if(errCode != 0){
  3595  000F7E  51ED               	movf	executeData@errCode& (0+255),w,b
  3596  000F80  B4D8               	btfsc	status,2,c
  3597  000F82  EFC5  F007         	goto	u4081
  3598  000F86  EFC8  F007         	goto	u4080
  3599  000F8A                     u4081:
  3600  000F8A  FFFF               	dw	65535	; assembler added errata NOP
  3601  000F8C  EFCB  F007         	goto	l4580
  3602  000F90                     u4080:
  3603  000F90  FFFF               	dw	65535	; assembler added errata NOP
  3604  000F92  EFB4  F007         	goto	l4566
  3605  000F96                     l4580:
  3606  000F96  FFFF               	dw	65535	; assembler added errata NOP
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;main.c: 141:         errCode = moveToPoint(posVector[0], posVector[1], data->posX, data
      +                          ->posY);
  3610  000F98  C04C  F015         	movff	_posVector,moveToPoint@x1
  3611  000F9C  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3612  000F9E  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3613  000FA2  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3614  000FA4  EE20 F001          	lfsr	2,1
  3615  000FA8  51EB               	movf	executeData@data& (0+255),w,b
  3616  000FAA  26D9               	addwf	fsr2l,f,c
  3617  000FAC  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3618  000FAE  22DA               	addwfc	fsr2h,f,c
  3619  000FB0  50DF               	movf	indf2,w,c
  3620  000FB2  6FE9               	movwf	??_executeData& (0+255),b
  3621  000FB4  51E9               	movf	??_executeData& (0+255),w,b
  3622  000FB6  6E19               	movwf	moveToPoint@x2^0,c
  3623  000FB8  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3624  000FBA  EE20 F002          	lfsr	2,2
  3625  000FBE  51EB               	movf	executeData@data& (0+255),w,b
  3626  000FC0  26D9               	addwf	fsr2l,f,c
  3627  000FC2  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3628  000FC4  22DA               	addwfc	fsr2h,f,c
  3629  000FC6  50DF               	movf	indf2,w,c
  3630  000FC8  6FEA               	movwf	(??_executeData+1)& (0+255),b
  3631  000FCA  51EA               	movf	(??_executeData+1)& (0+255),w,b
  3632  000FCC  6E1B               	movwf	moveToPoint@y2^0,c
  3633  000FCE  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3634  000FD0  EC24  F005         	call	_moveToPoint	;wreg free
  3635  000FD4  0100               	movlb	0	; () banked
  3636  000FD6  6FED               	movwf	executeData@errCode& (0+255),b
  3637  000FD8                     
  3638                           ; BSR set to: 0
  3639                           ;main.c: 142:         if(errCode != 0){
  3640  000FD8  51ED               	movf	executeData@errCode& (0+255),w,b
  3641  000FDA  B4D8               	btfsc	status,2,c
  3642  000FDC  EFF2  F007         	goto	u4091
  3643  000FE0  EFF5  F007         	goto	u4090
  3644  000FE4                     u4091:
  3645  000FE4  FFFF               	dw	65535	; assembler added errata NOP
  3646  000FE6  EFF8  F007         	goto	l4588
  3647  000FEA                     u4090:
  3648  000FEA  FFFF               	dw	65535	; assembler added errata NOP
  3649  000FEC  EFB4  F007         	goto	l4566
  3650  000FF0                     l4588:
  3651  000FF0  FFFF               	dw	65535	; assembler added errata NOP
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;main.c: 145:         posVector[0] = data->posX;
  3655  000FF2  EE20 F001          	lfsr	2,1
  3656  000FF6  51EB               	movf	executeData@data& (0+255),w,b
  3657  000FF8  26D9               	addwf	fsr2l,f,c
  3658  000FFA  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3659  000FFC  22DA               	addwfc	fsr2h,f,c
  3660  000FFE  50DF               	movf	indf2,w,c
  3661  001000  6E4C               	movwf	_posVector^0,c
  3662                           
  3663                           ;main.c: 146:         posVector[1] = data->posY;
  3664  001002  EE20 F002          	lfsr	2,2
  3665  001006  51EB               	movf	executeData@data& (0+255),w,b
  3666  001008  26D9               	addwf	fsr2l,f,c
  3667  00100A  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3668  00100C  22DA               	addwfc	fsr2h,f,c
  3669  00100E  50DF               	movf	indf2,w,c
  3670  001010  6E4D               	movwf	(_posVector+1)^0,c
  3671                           
  3672                           ;main.c: 149:         rotAngle = data->rotation;
  3673  001012  EE20 F003          	lfsr	2,3
  3674  001016  51EB               	movf	executeData@data& (0+255),w,b
  3675  001018  26D9               	addwf	fsr2l,f,c
  3676  00101A  51EC               	movf	(executeData@data+1)& (0+255),w,b
  3677  00101C  22DA               	addwfc	fsr2h,f,c
  3678  00101E  50DF               	movf	indf2,w,c
  3679  001020  6FE9               	movwf	??_executeData& (0+255),b
  3680  001022  51E9               	movf	??_executeData& (0+255),w,b
  3681  001024  6E57               	movwf	_rotAngle^0,c
  3682  001026  6A58               	clrf	(_rotAngle+1)^0,c
  3683  001028                     
  3684                           ; BSR set to: 0
  3685                           ;main.c: 151:         if(rotAngle < 0){
  3686  001028  BE58               	btfsc	(_rotAngle+1)^0,7,c
  3687  00102A  EF1C  F008         	goto	u4100
  3688  00102E  EF19  F008         	goto	u4101
  3689  001032                     u4101:
  3690  001032  FFFF               	dw	65535	; assembler added errata NOP
  3691  001034  EF21  F008         	goto	l4594
  3692  001038                     u4100:
  3693  001038  FFFF               	dw	65535	; assembler added errata NOP
  3694  00103A                     
  3695                           ; BSR set to: 0
  3696                           ;main.c: 152:             rotAngle += 360;
  3697  00103A  0E68               	movlw	104
  3698  00103C  2657               	addwf	_rotAngle^0,f,c
  3699  00103E  0E01               	movlw	1
  3700  001040  2258               	addwfc	(_rotAngle+1)^0,f,c
  3701  001042                     l4594:
  3702  001042  FFFF               	dw	65535	; assembler added errata NOP
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;main.c: 154:         rotateObj(rotAngle);
  3706  001044  5057               	movf	_rotAngle^0,w,c
  3707  001046  EC18  F010         	call	_rotateObj
  3708  00104A                     
  3709                           ;main.c: 157:         errCode = touchTherm();
  3710  00104A  EC06  F00F         	call	_touchTherm	;wreg free
  3711  00104E  0100               	movlb	0	; () banked
  3712  001050  6FED               	movwf	executeData@errCode& (0+255),b
  3713  001052                     
  3714                           ; BSR set to: 0
  3715                           ;main.c: 158:         if(errCode != 0){
  3716  001052  51ED               	movf	executeData@errCode& (0+255),w,b
  3717  001054  B4D8               	btfsc	status,2,c
  3718  001056  EF2F  F008         	goto	u4111
  3719  00105A  EF32  F008         	goto	u4110
  3720  00105E                     u4111:
  3721  00105E  FFFF               	dw	65535	; assembler added errata NOP
  3722  001060  EF35  F008         	goto	l4604
  3723  001064                     u4110:
  3724  001064  FFFF               	dw	65535	; assembler added errata NOP
  3725  001066  EFB4  F007         	goto	l4566
  3726  00106A                     l4604:
  3727  00106A  FFFF               	dw	65535	; assembler added errata NOP
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;main.c: 162:         releaseObj();
  3731  00106C  EC72  F012         	call	_releaseObj	;wreg free
  3732  001070                     
  3733                           ;main.c: 165:         errCode = liftArm();
  3734  001070  EC11  F011         	call	_liftArm	;wreg free
  3735  001074  0100               	movlb	0	; () banked
  3736  001076  6FED               	movwf	executeData@errCode& (0+255),b
  3737  001078  EFB4  F007         	goto	l4566
  3738  00107C                     l346:
  3739  00107C  FFFF               	dw	65535	; assembler added errata NOP
  3740                           
  3741                           ; BSR set to: 0
  3742  00107E  0012               	return		;funcret
  3743  001080  FFFF               	dw	65535	; errata NOP
  3744  001082                     __end_of_executeData:
  3745                           	callstack 0
  3746                           
  3747 ;; *************** function _touchTherm *****************
  3748 ;; Defined at:
  3749 ;;		line 595 in file "motors.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;		None
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;		None
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  1    wreg      unsigned char 
  3756 ;; Registers used:
  3757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3763 ;;      Params:         0       0       0       0       0       0       0
  3764 ;;      Locals:         0       0       0       0       0       0       0
  3765 ;;      Temps:          0       0       0       0       0       0       0
  3766 ;;      Totals:         0       0       0       0       0       0       0
  3767 ;;Total ram usage:        0 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    5
  3770 ;; This function calls:
  3771 ;;		_resetStep
  3772 ;;		_resetTM0_Temp
  3773 ;;		_resetTM2_Temp
  3774 ;;		_resetTherm
  3775 ;;		_resetTouch
  3776 ;;		_returnTherm
  3777 ;;		_startADC
  3778 ;;		_stepMade
  3779 ;;		_stopADC
  3780 ;; This function is called by:
  3781 ;;		_executeData
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           	psect	text19
  3786  001E0C                     __ptext19:
  3787                           	callstack 0
  3788  001E0C                     _touchTherm:
  3789                           	callstack 0
  3790  001E0C  FFFF               	dw	65535	; assembler added errata NOP
  3791  001E0E                     
  3792                           ;motors.c: 601:     motCounter[2][1] = 1;
  3793  001E0E  0E01               	movlw	1
  3794  001E10  6E6C               	movwf	(_motCounter+5)^0,c
  3795  001E12                     
  3796                           ;motors.c: 604:     T2CONbits.TMR2ON = 1;
  3797  001E12  84CA               	bsf	202,2,c	;volatile
  3798                           
  3799                           ;motors.c: 606:     tm0Error = 0;
  3800  001E14  0E00               	movlw	0
  3801  001E16  6E5A               	movwf	(_tm0Error+1)^0,c
  3802  001E18  0E00               	movlw	0
  3803  001E1A  6E59               	movwf	_tm0Error^0,c
  3804                           
  3805                           ;motors.c: 607:     tm0Limit = 200;
  3806  001E1C  0EC8               	movlw	200
  3807  001E1E  6E66               	movwf	_tm0Limit^0,c
  3808  001E20                     
  3809                           ;motors.c: 608:     T0CONbits.TMR0ON = 1;
  3810  001E20  8ED5               	bsf	213,7,c	;volatile
  3811  001E22                     
  3812                           ;motors.c: 611:     startADC();
  3813  001E22  EC46  F013         	call	_startADC	;wreg free
  3814                           
  3815                           ;motors.c: 614:     resetTouch();
  3816  001E26  EC4B  F013         	call	_resetTouch	;wreg free
  3817                           
  3818                           ;motors.c: 615:     resetTherm();
  3819  001E2A  EC50  F013         	call	_resetTherm	;wreg free
  3820                           
  3821                           ;motors.c: 618:     while(!returnTherm() || PORTDbits.RD7){
  3822  001E2E  EF57  F00F         	goto	l4192
  3823  001E32                     l4176:
  3824  001E32  FFFF               	dw	65535	; assembler added errata NOP
  3825                           
  3826                           ;motors.c: 620:         resetStep();
  3827  001E34  EC5A  F013         	call	_resetStep	;wreg free
  3828  001E38                     
  3829                           ;motors.c: 623:         if(tm0Error){
  3830  001E38  5059               	movf	_tm0Error^0,w,c
  3831  001E3A  105A               	iorwf	(_tm0Error+1)^0,w,c
  3832  001E3C  B4D8               	btfsc	status,2,c
  3833  001E3E  EF23  F00F         	goto	u3661
  3834  001E42  EF26  F00F         	goto	u3660
  3835  001E46                     u3661:
  3836  001E46  FFFF               	dw	65535	; assembler added errata NOP
  3837  001E48  EF2D  F00F         	goto	l4182
  3838  001E4C                     u3660:
  3839  001E4C  FFFF               	dw	65535	; assembler added errata NOP
  3840  001E4E                     
  3841                           ;motors.c: 628:             tm0Error = 6;
  3842  001E4E  0E00               	movlw	0
  3843  001E50  6E5A               	movwf	(_tm0Error+1)^0,c
  3844  001E52  0E06               	movlw	6
  3845  001E54  6E59               	movwf	_tm0Error^0,c
  3846                           
  3847                           ;motors.c: 629:             break;
  3848  001E56  EF6D  F00F         	goto	l4196
  3849  001E5A                     l4182:
  3850  001E5A  FFFF               	dw	65535	; assembler added errata NOP
  3851                           
  3852                           ;motors.c: 637:             motCounter[2][0] += motCounter[2][1];
  3853  001E5C  506C               	movf	(_motCounter+5)^0,w,c
  3854  001E5E  266B               	addwf	(_motCounter+4)^0,f,c
  3855                           
  3856                           ;motors.c: 638:             if(motCounter[2][0] > 3){
  3857  001E60  506B               	movf	(_motCounter+4)^0,w,c
  3858  001E62  0A80               	xorlw	128
  3859  001E64  0F7C               	addlw	-132
  3860  001E66  A0D8               	btfss	status,0,c
  3861  001E68  EF38  F00F         	goto	u3671
  3862  001E6C  EF3B  F00F         	goto	u3670
  3863  001E70                     u3671:
  3864  001E70  FFFF               	dw	65535	; assembler added errata NOP
  3865  001E72  EF3E  F00F         	goto	l4186
  3866  001E76                     u3670:
  3867  001E76  FFFF               	dw	65535	; assembler added errata NOP
  3868  001E78                     
  3869                           ;motors.c: 639:                 motCounter[2][0] = 0;
  3870  001E78  0E00               	movlw	0
  3871  001E7A  6E6B               	movwf	(_motCounter+4)^0,c
  3872  001E7C                     l4186:
  3873  001E7C  FFFF               	dw	65535	; assembler added errata NOP
  3874                           
  3875                           ;motors.c: 642:             LATC = stepMot3[motCounter[2][0]];
  3876  001E7E  0E84               	movlw	low _stepMot3
  3877  001E80  246B               	addwf	(_motCounter+4)^0,w,c
  3878  001E82  6ED9               	movwf	fsr2l,c
  3879  001E84  6ADA               	clrf	fsr2h,c
  3880  001E86  0E00               	movlw	high _stepMot3
  3881  001E88  22DA               	addwfc	fsr2h,f,c
  3882  001E8A  50DF               	movf	indf2,w,c
  3883  001E8C  6E8B               	movwf	139,c	;volatile
  3884  001E8E                     l4188:
  3885  001E8E  FFFF               	dw	65535	; assembler added errata NOP
  3886  001E90  ECD7  F012         	call	_stepMade	;wreg free
  3887  001E94  5012               	movf	?_stepMade^0,w,c
  3888  001E96  1013               	iorwf	(?_stepMade+1)^0,w,c
  3889  001E98  B4D8               	btfsc	status,2,c
  3890  001E9A  EF51  F00F         	goto	u3681
  3891  001E9E  EF54  F00F         	goto	u3680
  3892  001EA2                     u3681:
  3893  001EA2  FFFF               	dw	65535	; assembler added errata NOP
  3894  001EA4  EF47  F00F         	goto	l4188
  3895  001EA8                     u3680:
  3896  001EA8  FFFF               	dw	65535	; assembler added errata NOP
  3897  001EAA                     
  3898                           ;motors.c: 657:         startADC();
  3899  001EAA  EC46  F013         	call	_startADC	;wreg free
  3900  001EAE                     l4192:
  3901  001EAE  FFFF               	dw	65535	; assembler added errata NOP
  3902                           
  3903                           ;motors.c: 618:     while(!returnTherm() || PORTDbits.RD7){
  3904  001EB0  EC2F  F013         	call	_returnTherm	;wreg free
  3905  001EB4  5012               	movf	?_returnTherm^0,w,c
  3906  001EB6  1013               	iorwf	(?_returnTherm+1)^0,w,c
  3907  001EB8  B4D8               	btfsc	status,2,c
  3908  001EBA  EF61  F00F         	goto	u3691
  3909  001EBE  EF64  F00F         	goto	u3690
  3910  001EC2                     u3691:
  3911  001EC2  FFFF               	dw	65535	; assembler added errata NOP
  3912  001EC4  EF19  F00F         	goto	l4176
  3913  001EC8                     u3690:
  3914  001EC8  FFFF               	dw	65535	; assembler added errata NOP
  3915  001ECA  BE83               	btfsc	131,7,c	;volatile
  3916  001ECC  EF6A  F00F         	goto	u3701
  3917  001ED0  EF6D  F00F         	goto	u3700
  3918  001ED4                     u3701:
  3919  001ED4  FFFF               	dw	65535	; assembler added errata NOP
  3920  001ED6  EF19  F00F         	goto	l4176
  3921  001EDA                     u3700:
  3922  001EDA                     l4196:
  3923  001EDA  FFFF               	dw	65535	; assembler added errata NOP
  3924                           
  3925                           ;motors.c: 663:     stopADC();
  3926  001EDC  EC7A  F013         	call	_stopADC	;wreg free
  3927  001EE0                     
  3928                           ;motors.c: 666:     T0CONbits.TMR0ON = 0;
  3929  001EE0  9ED5               	bcf	213,7,c	;volatile
  3930  001EE2                     
  3931                           ;motors.c: 667:     T2CONbits.TMR2ON = 0;
  3932  001EE2  94CA               	bcf	202,2,c	;volatile
  3933  001EE4                     
  3934                           ;motors.c: 669:     resetTM0_Temp();
  3935  001EE4  EC55  F013         	call	_resetTM0_Temp	;wreg free
  3936  001EE8                     
  3937                           ;motors.c: 670:     resetTM2_Temp();
  3938  001EE8  ECF3  F012         	call	_resetTM2_Temp	;wreg free
  3939  001EEC                     
  3940                           ;motors.c: 672:     TMR0 = 0;
  3941  001EEC  0E00               	movlw	0
  3942  001EEE  6ED7               	movwf	215,c	;volatile
  3943  001EF0  0E00               	movlw	0
  3944  001EF2  6ED6               	movwf	214,c	;volatile
  3945  001EF4                     
  3946                           ;motors.c: 673:     TMR2 = 0;
  3947  001EF4  0E00               	movlw	0
  3948  001EF6  6ECC               	movwf	204,c	;volatile
  3949  001EF8                     
  3950                           ;motors.c: 676:     resetStep();
  3951  001EF8  EC5A  F013         	call	_resetStep	;wreg free
  3952  001EFC                     
  3953                           ;motors.c: 679:     if(PORTDbits.RD7){
  3954  001EFC  AE83               	btfss	131,7,c	;volatile
  3955  001EFE  EF83  F00F         	goto	u3711
  3956  001F02  EF86  F00F         	goto	u3710
  3957  001F06                     u3711:
  3958  001F06  FFFF               	dw	65535	; assembler added errata NOP
  3959  001F08  EF8B  F00F         	goto	l210
  3960  001F0C                     u3710:
  3961  001F0C  FFFF               	dw	65535	; assembler added errata NOP
  3962  001F0E                     
  3963                           ;motors.c: 680:         tm0Error = 2;
  3964  001F0E  0E00               	movlw	0
  3965  001F10  6E5A               	movwf	(_tm0Error+1)^0,c
  3966  001F12  0E02               	movlw	2
  3967  001F14  6E59               	movwf	_tm0Error^0,c
  3968  001F16                     l210:
  3969  001F16  FFFF               	dw	65535	; assembler added errata NOP
  3970                           
  3971                           ;motors.c: 683:     return(tm0Error);
  3972  001F18  5059               	movf	_tm0Error^0,w,c
  3973  001F1A  0012               	return		;funcret
  3974  001F1C  FFFF               	dw	65535	; errata NOP
  3975  001F1E                     __end_of_touchTherm:
  3976                           	callstack 0
  3977                           
  3978 ;; *************** function _returnTherm *****************
  3979 ;; Defined at:
  3980 ;;		line 58 in file "adc.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;		None
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  2   17[COMRAM] unsigned int 
  3987 ;; Registers used:
  3988 ;;		None
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3994 ;;      Params:         2       0       0       0       0       0       0
  3995 ;;      Locals:         0       0       0       0       0       0       0
  3996 ;;      Temps:          0       0       0       0       0       0       0
  3997 ;;      Totals:         2       0       0       0       0       0       0
  3998 ;;Total ram usage:        2 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    4
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		_touchTherm
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text20
  4009  00265E                     __ptext20:
  4010                           	callstack 0
  4011  00265E                     _returnTherm:
  4012                           	callstack 0
  4013  00265E  FFFF               	dw	65535	; assembler added errata NOP
  4014  002660                     
  4015                           ;adc.c: 59:     return therm_rel;
  4016  002660  C064  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4017  002664  6A13               	clrf	(?_returnTherm+1)^0,c
  4018  002666  0012               	return		;funcret
  4019  002668  FFFF               	dw	65535	; errata NOP
  4020  00266A                     __end_of_returnTherm:
  4021                           	callstack 0
  4022                           
  4023 ;; *************** function _touchObject *****************
  4024 ;; Defined at:
  4025 ;;		line 497 in file "motors.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;		None
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;		None
  4030 ;; Return value:  Size  Location     Type
  4031 ;;                  1    wreg      unsigned char 
  4032 ;; Registers used:
  4033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4039 ;;      Params:         0       0       0       0       0       0       0
  4040 ;;      Locals:         0       0       0       0       0       0       0
  4041 ;;      Temps:          0       0       0       0       0       0       0
  4042 ;;      Totals:         0       0       0       0       0       0       0
  4043 ;;Total ram usage:        0 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; Hardware stack levels required when called:    5
  4046 ;; This function calls:
  4047 ;;		_resetStep
  4048 ;;		_resetTM0_Temp
  4049 ;;		_resetTM2_Temp
  4050 ;;		_resetTherm
  4051 ;;		_resetTouch
  4052 ;;		_returnTouch
  4053 ;;		_startADC
  4054 ;;		_stepMade
  4055 ;;		_stopADC
  4056 ;; This function is called by:
  4057 ;;		_executeData
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	text21
  4062  001F1E                     __ptext21:
  4063                           	callstack 0
  4064  001F1E                     _touchObject:
  4065                           	callstack 0
  4066  001F1E  FFFF               	dw	65535	; assembler added errata NOP
  4067  001F20                     
  4068                           ;motors.c: 503:     motCounter[2][1] = 1;
  4069  001F20  0E01               	movlw	1
  4070  001F22  6E6C               	movwf	(_motCounter+5)^0,c
  4071  001F24                     
  4072                           ;motors.c: 506:     T2CONbits.TMR2ON = 1;
  4073  001F24  84CA               	bsf	202,2,c	;volatile
  4074                           
  4075                           ;motors.c: 508:     tm0Error = 0;
  4076  001F26  0E00               	movlw	0
  4077  001F28  6E5A               	movwf	(_tm0Error+1)^0,c
  4078  001F2A  0E00               	movlw	0
  4079  001F2C  6E59               	movwf	_tm0Error^0,c
  4080                           
  4081                           ;motors.c: 509:     tm0Limit = 200;
  4082  001F2E  0EC8               	movlw	200
  4083  001F30  6E66               	movwf	_tm0Limit^0,c
  4084  001F32                     
  4085                           ;motors.c: 510:     T0CONbits.TMR0ON = 1;
  4086  001F32  8ED5               	bsf	213,7,c	;volatile
  4087  001F34                     
  4088                           ;motors.c: 513:     startADC();
  4089  001F34  EC46  F013         	call	_startADC	;wreg free
  4090                           
  4091                           ;motors.c: 516:     resetTouch();
  4092  001F38  EC4B  F013         	call	_resetTouch	;wreg free
  4093                           
  4094                           ;motors.c: 517:     resetTherm();
  4095  001F3C  EC50  F013         	call	_resetTherm	;wreg free
  4096                           
  4097                           ;motors.c: 520:     while(!returnTouch() || PORTDbits.RD7){
  4098  001F40  EFE0  F00F         	goto	l4142
  4099  001F44                     l4126:
  4100  001F44  FFFF               	dw	65535	; assembler added errata NOP
  4101                           
  4102                           ;motors.c: 522:         resetStep();
  4103  001F46  EC5A  F013         	call	_resetStep	;wreg free
  4104  001F4A                     
  4105                           ;motors.c: 525:         if(tm0Error){
  4106  001F4A  5059               	movf	_tm0Error^0,w,c
  4107  001F4C  105A               	iorwf	(_tm0Error+1)^0,w,c
  4108  001F4E  B4D8               	btfsc	status,2,c
  4109  001F50  EFAC  F00F         	goto	u3601
  4110  001F54  EFAF  F00F         	goto	u3600
  4111  001F58                     u3601:
  4112  001F58  FFFF               	dw	65535	; assembler added errata NOP
  4113  001F5A  EFB6  F00F         	goto	l4132
  4114  001F5E                     u3600:
  4115  001F5E  FFFF               	dw	65535	; assembler added errata NOP
  4116  001F60                     
  4117                           ;motors.c: 530:             tm0Error = 6;
  4118  001F60  0E00               	movlw	0
  4119  001F62  6E5A               	movwf	(_tm0Error+1)^0,c
  4120  001F64  0E06               	movlw	6
  4121  001F66  6E59               	movwf	_tm0Error^0,c
  4122                           
  4123                           ;motors.c: 531:             break;
  4124  001F68  EFF6  F00F         	goto	l4146
  4125  001F6C                     l4132:
  4126  001F6C  FFFF               	dw	65535	; assembler added errata NOP
  4127                           
  4128                           ;motors.c: 539:             motCounter[2][0] += motCounter[2][1];
  4129  001F6E  506C               	movf	(_motCounter+5)^0,w,c
  4130  001F70  266B               	addwf	(_motCounter+4)^0,f,c
  4131                           
  4132                           ;motors.c: 540:             if(motCounter[2][0] > 3){
  4133  001F72  506B               	movf	(_motCounter+4)^0,w,c
  4134  001F74  0A80               	xorlw	128
  4135  001F76  0F7C               	addlw	-132
  4136  001F78  A0D8               	btfss	status,0,c
  4137  001F7A  EFC1  F00F         	goto	u3611
  4138  001F7E  EFC4  F00F         	goto	u3610
  4139  001F82                     u3611:
  4140  001F82  FFFF               	dw	65535	; assembler added errata NOP
  4141  001F84  EFC7  F00F         	goto	l4136
  4142  001F88                     u3610:
  4143  001F88  FFFF               	dw	65535	; assembler added errata NOP
  4144  001F8A                     
  4145                           ;motors.c: 541:                 motCounter[2][0] = 0;
  4146  001F8A  0E00               	movlw	0
  4147  001F8C  6E6B               	movwf	(_motCounter+4)^0,c
  4148  001F8E                     l4136:
  4149  001F8E  FFFF               	dw	65535	; assembler added errata NOP
  4150                           
  4151                           ;motors.c: 544:             LATC = stepMot3[motCounter[2][0]];
  4152  001F90  0E84               	movlw	low _stepMot3
  4153  001F92  246B               	addwf	(_motCounter+4)^0,w,c
  4154  001F94  6ED9               	movwf	fsr2l,c
  4155  001F96  6ADA               	clrf	fsr2h,c
  4156  001F98  0E00               	movlw	high _stepMot3
  4157  001F9A  22DA               	addwfc	fsr2h,f,c
  4158  001F9C  50DF               	movf	indf2,w,c
  4159  001F9E  6E8B               	movwf	139,c	;volatile
  4160  001FA0                     l4138:
  4161  001FA0  FFFF               	dw	65535	; assembler added errata NOP
  4162  001FA2  ECD7  F012         	call	_stepMade	;wreg free
  4163  001FA6  5012               	movf	?_stepMade^0,w,c
  4164  001FA8  1013               	iorwf	(?_stepMade+1)^0,w,c
  4165  001FAA  B4D8               	btfsc	status,2,c
  4166  001FAC  EFDA  F00F         	goto	u3621
  4167  001FB0  EFDD  F00F         	goto	u3620
  4168  001FB4                     u3621:
  4169  001FB4  FFFF               	dw	65535	; assembler added errata NOP
  4170  001FB6  EFD0  F00F         	goto	l4138
  4171  001FBA                     u3620:
  4172  001FBA  FFFF               	dw	65535	; assembler added errata NOP
  4173  001FBC                     
  4174                           ;motors.c: 558:         startADC();
  4175  001FBC  EC46  F013         	call	_startADC	;wreg free
  4176  001FC0                     l4142:
  4177  001FC0  FFFF               	dw	65535	; assembler added errata NOP
  4178                           
  4179                           ;motors.c: 520:     while(!returnTouch() || PORTDbits.RD7){
  4180  001FC2  EC35  F013         	call	_returnTouch	;wreg free
  4181  001FC6  5012               	movf	?_returnTouch^0,w,c
  4182  001FC8  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4183  001FCA  B4D8               	btfsc	status,2,c
  4184  001FCC  EFEA  F00F         	goto	u3631
  4185  001FD0  EFED  F00F         	goto	u3630
  4186  001FD4                     u3631:
  4187  001FD4  FFFF               	dw	65535	; assembler added errata NOP
  4188  001FD6  EFA2  F00F         	goto	l4126
  4189  001FDA                     u3630:
  4190  001FDA  FFFF               	dw	65535	; assembler added errata NOP
  4191  001FDC  BE83               	btfsc	131,7,c	;volatile
  4192  001FDE  EFF3  F00F         	goto	u3641
  4193  001FE2  EFF6  F00F         	goto	u3640
  4194  001FE6                     u3641:
  4195  001FE6  FFFF               	dw	65535	; assembler added errata NOP
  4196  001FE8  EFA2  F00F         	goto	l4126
  4197  001FEC                     u3640:
  4198  001FEC                     l4146:
  4199  001FEC  FFFF               	dw	65535	; assembler added errata NOP
  4200                           
  4201                           ;motors.c: 563:     stopADC();
  4202  001FEE  EC7A  F013         	call	_stopADC	;wreg free
  4203  001FF2                     
  4204                           ;motors.c: 566:     T0CONbits.TMR0ON = 0;
  4205  001FF2  9ED5               	bcf	213,7,c	;volatile
  4206  001FF4                     
  4207                           ;motors.c: 567:     T2CONbits.TMR2ON = 0;
  4208  001FF4  94CA               	bcf	202,2,c	;volatile
  4209  001FF6                     
  4210                           ;motors.c: 569:     resetTM0_Temp();
  4211  001FF6  EC55  F013         	call	_resetTM0_Temp	;wreg free
  4212  001FFA                     
  4213                           ;motors.c: 570:     resetTM2_Temp();
  4214  001FFA  ECF3  F012         	call	_resetTM2_Temp	;wreg free
  4215  001FFE                     
  4216                           ;motors.c: 572:     TMR0 = 0;
  4217  001FFE  0E00               	movlw	0
  4218  002000  6ED7               	movwf	215,c	;volatile
  4219  002002  0E00               	movlw	0
  4220  002004  6ED6               	movwf	214,c	;volatile
  4221  002006                     
  4222                           ;motors.c: 573:     TMR2 = 0;
  4223  002006  0E00               	movlw	0
  4224  002008  6ECC               	movwf	204,c	;volatile
  4225  00200A                     
  4226                           ;motors.c: 576:     resetStep();
  4227  00200A  EC5A  F013         	call	_resetStep	;wreg free
  4228  00200E                     
  4229                           ;motors.c: 579:     if(PORTDbits.RD7){
  4230  00200E  AE83               	btfss	131,7,c	;volatile
  4231  002010  EF0C  F010         	goto	u3651
  4232  002014  EF0F  F010         	goto	u3650
  4233  002018                     u3651:
  4234  002018  FFFF               	dw	65535	; assembler added errata NOP
  4235  00201A  EF14  F010         	goto	l198
  4236  00201E                     u3650:
  4237  00201E  FFFF               	dw	65535	; assembler added errata NOP
  4238  002020                     
  4239                           ;motors.c: 580:         tm0Error = 2;
  4240  002020  0E00               	movlw	0
  4241  002022  6E5A               	movwf	(_tm0Error+1)^0,c
  4242  002024  0E02               	movlw	2
  4243  002026  6E59               	movwf	_tm0Error^0,c
  4244  002028                     l198:
  4245  002028  FFFF               	dw	65535	; assembler added errata NOP
  4246                           
  4247                           ;motors.c: 583:     return(tm0Error);
  4248  00202A  5059               	movf	_tm0Error^0,w,c
  4249  00202C  0012               	return		;funcret
  4250  00202E  FFFF               	dw	65535	; errata NOP
  4251  002030                     __end_of_touchObject:
  4252                           	callstack 0
  4253                           
  4254 ;; *************** function _stopADC *****************
  4255 ;; Defined at:
  4256 ;;		line 44 in file "adc.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;		None
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;		None
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      void 
  4263 ;; Registers used:
  4264 ;;		None
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4270 ;;      Params:         0       0       0       0       0       0       0
  4271 ;;      Locals:         0       0       0       0       0       0       0
  4272 ;;      Temps:          0       0       0       0       0       0       0
  4273 ;;      Totals:         0       0       0       0       0       0       0
  4274 ;;Total ram usage:        0 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    4
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_touchObject
  4281 ;;		_touchTherm
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           	psect	text22
  4286  0026F4                     __ptext22:
  4287                           	callstack 0
  4288  0026F4                     _stopADC:
  4289                           	callstack 0
  4290  0026F4  FFFF               	dw	65535	; assembler added errata NOP
  4291  0026F6                     
  4292                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4293  0026F6  90C2               	bcf	194,0,c	;volatile
  4294  0026F8  0012               	return		;funcret
  4295  0026FA  FFFF               	dw	65535	; errata NOP
  4296  0026FC                     __end_of_stopADC:
  4297                           	callstack 0
  4298                           
  4299 ;; *************** function _startADC *****************
  4300 ;; Defined at:
  4301 ;;		line 36 in file "adc.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;		None
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;		None
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		None
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4315 ;;      Params:         0       0       0       0       0       0       0
  4316 ;;      Locals:         0       0       0       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0
  4318 ;;      Totals:         0       0       0       0       0       0       0
  4319 ;;Total ram usage:        0 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    4
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_touchObject
  4326 ;;		_touchTherm
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           	psect	text23
  4331  00268C                     __ptext23:
  4332                           	callstack 0
  4333  00268C                     _startADC:
  4334                           	callstack 0
  4335  00268C  FFFF               	dw	65535	; assembler added errata NOP
  4336  00268E                     
  4337                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4338  00268E  80C2               	bsf	194,0,c	;volatile
  4339                           
  4340                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4341  002690  84C2               	bsf	194,2,c	;volatile
  4342  002692  0012               	return		;funcret
  4343  002694  FFFF               	dw	65535	; errata NOP
  4344  002696                     __end_of_startADC:
  4345                           	callstack 0
  4346                           
  4347 ;; *************** function _returnTouch *****************
  4348 ;; Defined at:
  4349 ;;		line 51 in file "adc.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;		None
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;		None
  4354 ;; Return value:  Size  Location     Type
  4355 ;;                  2   17[COMRAM] unsigned int 
  4356 ;; Registers used:
  4357 ;;		None
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4363 ;;      Params:         2       0       0       0       0       0       0
  4364 ;;      Locals:         0       0       0       0       0       0       0
  4365 ;;      Temps:          0       0       0       0       0       0       0
  4366 ;;      Totals:         2       0       0       0       0       0       0
  4367 ;;Total ram usage:        2 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; Hardware stack levels required when called:    4
  4370 ;; This function calls:
  4371 ;;		Nothing
  4372 ;; This function is called by:
  4373 ;;		_touchObject
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           	psect	text24
  4378  00266A                     __ptext24:
  4379                           	callstack 0
  4380  00266A                     _returnTouch:
  4381                           	callstack 0
  4382  00266A  FFFF               	dw	65535	; assembler added errata NOP
  4383  00266C                     
  4384                           ;adc.c: 52:     return touch_rel;
  4385  00266C  C065  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4386  002670  6A13               	clrf	(?_returnTouch+1)^0,c
  4387  002672  0012               	return		;funcret
  4388  002674  FFFF               	dw	65535	; errata NOP
  4389  002676                     __end_of_returnTouch:
  4390                           	callstack 0
  4391                           
  4392 ;; *************** function _resetTouch *****************
  4393 ;; Defined at:
  4394 ;;		line 65 in file "adc.c"
  4395 ;; Parameters:    Size  Location     Type
  4396 ;;		None
  4397 ;; Auto vars:     Size  Location     Type
  4398 ;;		None
  4399 ;; Return value:  Size  Location     Type
  4400 ;;                  1    wreg      void 
  4401 ;; Registers used:
  4402 ;;		wreg, status,2
  4403 ;; Tracked objects:
  4404 ;;		On entry : 0/0
  4405 ;;		On exit  : 0/0
  4406 ;;		Unchanged: 0/0
  4407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4408 ;;      Params:         0       0       0       0       0       0       0
  4409 ;;      Locals:         0       0       0       0       0       0       0
  4410 ;;      Temps:          0       0       0       0       0       0       0
  4411 ;;      Totals:         0       0       0       0       0       0       0
  4412 ;;Total ram usage:        0 bytes
  4413 ;; Hardware stack levels used:    1
  4414 ;; Hardware stack levels required when called:    4
  4415 ;; This function calls:
  4416 ;;		Nothing
  4417 ;; This function is called by:
  4418 ;;		_touchObject
  4419 ;;		_touchTherm
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           	psect	text25
  4424  002696                     __ptext25:
  4425                           	callstack 0
  4426  002696                     _resetTouch:
  4427                           	callstack 0
  4428  002696  FFFF               	dw	65535	; assembler added errata NOP
  4429  002698                     
  4430                           ;adc.c: 66:     touch_rel = 0;
  4431  002698  0E00               	movlw	0
  4432  00269A  6E65               	movwf	_touch_rel^0,c	;volatile
  4433  00269C  0012               	return		;funcret
  4434  00269E  FFFF               	dw	65535	; errata NOP
  4435  0026A0                     __end_of_resetTouch:
  4436                           	callstack 0
  4437                           
  4438 ;; *************** function _resetTherm *****************
  4439 ;; Defined at:
  4440 ;;		line 72 in file "adc.c"
  4441 ;; Parameters:    Size  Location     Type
  4442 ;;		None
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;		None
  4445 ;; Return value:  Size  Location     Type
  4446 ;;                  1    wreg      void 
  4447 ;; Registers used:
  4448 ;;		wreg, status,2
  4449 ;; Tracked objects:
  4450 ;;		On entry : 0/0
  4451 ;;		On exit  : 0/0
  4452 ;;		Unchanged: 0/0
  4453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4454 ;;      Params:         0       0       0       0       0       0       0
  4455 ;;      Locals:         0       0       0       0       0       0       0
  4456 ;;      Temps:          0       0       0       0       0       0       0
  4457 ;;      Totals:         0       0       0       0       0       0       0
  4458 ;;Total ram usage:        0 bytes
  4459 ;; Hardware stack levels used:    1
  4460 ;; Hardware stack levels required when called:    4
  4461 ;; This function calls:
  4462 ;;		Nothing
  4463 ;; This function is called by:
  4464 ;;		_touchObject
  4465 ;;		_touchTherm
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           	psect	text26
  4470  0026A0                     __ptext26:
  4471                           	callstack 0
  4472  0026A0                     _resetTherm:
  4473                           	callstack 0
  4474  0026A0  FFFF               	dw	65535	; assembler added errata NOP
  4475  0026A2                     
  4476                           ;adc.c: 73:     therm_rel = 0;
  4477  0026A2  0E00               	movlw	0
  4478  0026A4  6E64               	movwf	_therm_rel^0,c	;volatile
  4479  0026A6  0012               	return		;funcret
  4480  0026A8  FFFF               	dw	65535	; errata NOP
  4481  0026AA                     __end_of_resetTherm:
  4482                           	callstack 0
  4483                           
  4484 ;; *************** function _rotateObj *****************
  4485 ;; Defined at:
  4486 ;;		line 768 in file "motors.c"
  4487 ;; Parameters:    Size  Location     Type
  4488 ;;  rotAngle        1    wreg     unsigned char 
  4489 ;; Auto vars:     Size  Location     Type
  4490 ;;  rotAngle        1    0[BANK0 ] unsigned char 
  4491 ;;  c               2    5[BANK0 ] unsigned int 
  4492 ;;  i               2    3[BANK0 ] unsigned int 
  4493 ;;  totStep         2    1[BANK0 ] int 
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  1    wreg      void 
  4496 ;; Registers used:
  4497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4503 ;;      Params:         0       0       0       0       0       0       0
  4504 ;;      Locals:         0       7       0       0       0       0       0
  4505 ;;      Temps:          0       0       0       0       0       0       0
  4506 ;;      Totals:         0       7       0       0       0       0       0
  4507 ;;Total ram usage:        7 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    5
  4510 ;; This function calls:
  4511 ;;		___fldiv
  4512 ;;		___fltol
  4513 ;;		___xxtofl
  4514 ;;		_resetStep
  4515 ;;		_resetTM2_Temp
  4516 ;;		_stepMade
  4517 ;; This function is called by:
  4518 ;;		_executeData
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           	psect	text27
  4523  002030                     __ptext27:
  4524                           	callstack 0
  4525  002030                     _rotateObj:
  4526                           	callstack 0
  4527  002030  FFFF               	dw	65535	; assembler added errata NOP
  4528                           
  4529                           ;incstack = 0
  4530                           ;rotateObj@rotAngle stored from wreg
  4531  002032  0100               	movlb	0	; () banked
  4532  002034  6FE2               	movwf	rotateObj@rotAngle& (0+255),b
  4533  002036                     
  4534                           ;motors.c: 770:     static const float stepAngle = 2;;motors.c: 771:     static char rot
      +                          Sequence[] = {0b100100, 0b001100, 0b011000, 0b110000};;motors.c: 772:     unsigned int i
      +                          , c = 0;
  4535  002036  0E00               	movlw	0
  4536  002038  0100               	movlb	0	; () banked
  4537  00203A  6FE8               	movwf	(rotateObj@c+1)& (0+255),b
  4538  00203C  0E00               	movlw	0
  4539  00203E  6FE7               	movwf	rotateObj@c& (0+255),b
  4540  002040                     
  4541                           ; BSR set to: 0
  4542                           ;motors.c: 773:     int totStep = rotAngle/stepAngle;
  4543  002040  0E00               	movlw	0
  4544  002042  6E24               	movwf	___fldiv@a^0,c
  4545  002044  0E00               	movlw	0
  4546  002046  6E25               	movwf	(___fldiv@a+1)^0,c
  4547  002048  0E00               	movlw	0
  4548  00204A  6E26               	movwf	(___fldiv@a+2)^0,c
  4549  00204C  0E40               	movlw	64
  4550  00204E  6E27               	movwf	(___fldiv@a+3)^0,c
  4551  002050  51E2               	movf	rotateObj@rotAngle& (0+255),w,b
  4552  002052  6E12               	movwf	___xxtofl@val^0,c
  4553  002054  6A13               	clrf	(___xxtofl@val+1)^0,c
  4554  002056  6A14               	clrf	(___xxtofl@val+2)^0,c
  4555  002058  6A15               	clrf	(___xxtofl@val+3)^0,c
  4556  00205A  0E01               	movlw	1
  4557  00205C  ECC5  F00A         	call	___xxtofl
  4558  002060  C012  F020         	movff	?___xxtofl,___fldiv@b
  4559  002064  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4560  002068  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4561  00206C  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4562  002070  EC0B  F003         	call	___fldiv	;wreg free
  4563  002074  C020  F039         	movff	?___fldiv,___fltol@f1
  4564  002078  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4565  00207C  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4566  002080  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4567  002084  EC4F  F00D         	call	___fltol	;wreg free
  4568  002088  C039  F0E3         	movff	?___fltol,rotateObj@totStep
  4569  00208C  C03A  F0E4         	movff	?___fltol+1,rotateObj@totStep+1
  4570  002090                     
  4571                           ;motors.c: 776:     for(i = 0; i < totStep; i++){
  4572  002090  0E00               	movlw	0
  4573  002092  0100               	movlb	0	; () banked
  4574  002094  6FE6               	movwf	(rotateObj@i+1)& (0+255),b
  4575  002096  0E00               	movlw	0
  4576  002098  6FE5               	movwf	rotateObj@i& (0+255),b
  4577  00209A  EF81  F010         	goto	l4270
  4578  00209E                     l4254:
  4579  00209E  FFFF               	dw	65535	; assembler added errata NOP
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;motors.c: 780:         LATD = rotSequence[c];
  4583  0020A0  0E80               	movlw	low rotateObj@rotSequence
  4584  0020A2  25E7               	addwf	rotateObj@c& (0+255),w,b
  4585  0020A4  6ED9               	movwf	fsr2l,c
  4586  0020A6  0E00               	movlw	high rotateObj@rotSequence
  4587  0020A8  21E8               	addwfc	(rotateObj@c+1)& (0+255),w,b
  4588  0020AA  6EDA               	movwf	fsr2h,c
  4589  0020AC  50DF               	movf	indf2,w,c
  4590  0020AE  6E8C               	movwf	140,c	;volatile
  4591  0020B0                     
  4592                           ; BSR set to: 0
  4593                           ;motors.c: 782:         c++;
  4594  0020B0  4BE7               	infsnz	rotateObj@c& (0+255),f,b
  4595  0020B2  2BE8               	incf	(rotateObj@c+1)& (0+255),f,b
  4596  0020B4                     
  4597                           ; BSR set to: 0
  4598                           ;motors.c: 783:         if (c >= 4) {c = 0;}
  4599  0020B4  51E8               	movf	(rotateObj@c+1)& (0+255),w,b
  4600  0020B6  E10A               	bnz	u3760
  4601  0020B8  0E04               	movlw	4
  4602  0020BA  5DE7               	subwf	rotateObj@c& (0+255),w,b
  4603  0020BC  A0D8               	btfss	status,0,c
  4604  0020BE  EF63  F010         	goto	u3761
  4605  0020C2  EF66  F010         	goto	u3760
  4606  0020C6                     u3761:
  4607  0020C6  FFFF               	dw	65535	; assembler added errata NOP
  4608  0020C8  EF6B  F010         	goto	l4262
  4609  0020CC                     u3760:
  4610  0020CC  FFFF               	dw	65535	; assembler added errata NOP
  4611  0020CE                     
  4612                           ; BSR set to: 0
  4613  0020CE  0E00               	movlw	0
  4614  0020D0  6FE8               	movwf	(rotateObj@c+1)& (0+255),b
  4615  0020D2  0E00               	movlw	0
  4616  0020D4  6FE7               	movwf	rotateObj@c& (0+255),b
  4617  0020D6                     l4262:
  4618  0020D6  FFFF               	dw	65535	; assembler added errata NOP
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;motors.c: 786:         T2CONbits.TMR2ON = 1;
  4622  0020D8  84CA               	bsf	202,2,c	;volatile
  4623  0020DA                     l4264:
  4624  0020DA  FFFF               	dw	65535	; assembler added errata NOP
  4625  0020DC  ECD7  F012         	call	_stepMade	;wreg free
  4626  0020E0  5012               	movf	?_stepMade^0,w,c
  4627  0020E2  1013               	iorwf	(?_stepMade+1)^0,w,c
  4628  0020E4  B4D8               	btfsc	status,2,c
  4629  0020E6  EF77  F010         	goto	u3771
  4630  0020EA  EF7A  F010         	goto	u3770
  4631  0020EE                     u3771:
  4632  0020EE  FFFF               	dw	65535	; assembler added errata NOP
  4633  0020F0  EF6D  F010         	goto	l4264
  4634  0020F4                     u3770:
  4635  0020F4  FFFF               	dw	65535	; assembler added errata NOP
  4636  0020F6                     
  4637                           ;motors.c: 788:         T2CONbits.TMR2ON = 0;
  4638  0020F6  94CA               	bcf	202,2,c	;volatile
  4639  0020F8                     
  4640                           ;motors.c: 789:         TMR2 = 0;
  4641  0020F8  0E00               	movlw	0
  4642  0020FA  6ECC               	movwf	204,c	;volatile
  4643  0020FC                     
  4644                           ;motors.c: 790:     }
  4645  0020FC  0100               	movlb	0	; () banked
  4646  0020FE  4BE5               	infsnz	rotateObj@i& (0+255),f,b
  4647  002100  2BE6               	incf	(rotateObj@i+1)& (0+255),f,b
  4648  002102                     l4270:
  4649  002102  FFFF               	dw	65535	; assembler added errata NOP
  4650                           
  4651                           ; BSR set to: 0
  4652  002104  51E3               	movf	rotateObj@totStep& (0+255),w,b
  4653  002106  5DE5               	subwf	rotateObj@i& (0+255),w,b
  4654  002108  51E4               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4655  00210A  59E6               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4656  00210C  A0D8               	btfss	status,0,c
  4657  00210E  EF8B  F010         	goto	u3781
  4658  002112  EF8E  F010         	goto	u3780
  4659  002116                     u3781:
  4660  002116  FFFF               	dw	65535	; assembler added errata NOP
  4661  002118  EF4F  F010         	goto	l4254
  4662  00211C                     u3780:
  4663  00211C  FFFF               	dw	65535	; assembler added errata NOP
  4664  00211E                     
  4665                           ; BSR set to: 0
  4666                           ;motors.c: 793:     resetTM2_Temp();
  4667  00211E  ECF3  F012         	call	_resetTM2_Temp	;wreg free
  4668                           
  4669                           ;motors.c: 796:     resetStep();
  4670  002122  EC5A  F013         	call	_resetStep	;wreg free
  4671  002126  0012               	return		;funcret
  4672  002128  FFFF               	dw	65535	; errata NOP
  4673  00212A                     __end_of_rotateObj:
  4674                           	callstack 0
  4675                           
  4676 ;; *************** function ___xxtofl *****************
  4677 ;; Defined at:
  4678 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;  sign            1    wreg     unsigned char 
  4681 ;;  val             4   17[COMRAM] long 
  4682 ;; Auto vars:     Size  Location     Type
  4683 ;;  sign            1   25[COMRAM] unsigned char 
  4684 ;;  arg             4   27[COMRAM] unsigned long 
  4685 ;;  exp             1   26[COMRAM] unsigned char 
  4686 ;; Return value:  Size  Location     Type
  4687 ;;                  4   17[COMRAM] unsigned char 
  4688 ;; Registers used:
  4689 ;;		wreg, status,2, status,0
  4690 ;; Tracked objects:
  4691 ;;		On entry : 0/0
  4692 ;;		On exit  : 0/0
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4695 ;;      Params:         4       0       0       0       0       0       0
  4696 ;;      Locals:         6       0       0       0       0       0       0
  4697 ;;      Temps:          4       0       0       0       0       0       0
  4698 ;;      Totals:        14       0       0       0       0       0       0
  4699 ;;Total ram usage:       14 bytes
  4700 ;; Hardware stack levels used:    1
  4701 ;; Hardware stack levels required when called:    4
  4702 ;; This function calls:
  4703 ;;		Nothing
  4704 ;; This function is called by:
  4705 ;;		_rotateObj
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           	psect	text28
  4710  00158A                     __ptext28:
  4711                           	callstack 0
  4712  00158A                     ___xxtofl:
  4713                           	callstack 0
  4714  00158A  FFFF               	dw	65535	; assembler added errata NOP
  4715                           
  4716                           ;incstack = 0
  4717                           ;___xxtofl@sign stored from wreg
  4718  00158C  6E1A               	movwf	___xxtofl@sign^0,c
  4719  00158E  501A               	movf	___xxtofl@sign^0,w,c
  4720  001590  B4D8               	btfsc	status,2,c
  4721  001592  EFCD  F00A         	goto	u3281
  4722  001596  EFD0  F00A         	goto	u3280
  4723  00159A                     u3281:
  4724  00159A  FFFF               	dw	65535	; assembler added errata NOP
  4725  00159C  EFF5  F00A         	goto	l1296
  4726  0015A0                     u3280:
  4727  0015A0  FFFF               	dw	65535	; assembler added errata NOP
  4728  0015A2  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4729  0015A4  EFD9  F00A         	goto	u3290
  4730  0015A8  EFD6  F00A         	goto	u3291
  4731  0015AC                     u3291:
  4732  0015AC  FFFF               	dw	65535	; assembler added errata NOP
  4733  0015AE  EFF5  F00A         	goto	l1296
  4734  0015B2                     u3290:
  4735  0015B2  FFFF               	dw	65535	; assembler added errata NOP
  4736  0015B4  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4737  0015B8  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4738  0015BC  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4739  0015C0  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4740  0015C4  1E16               	comf	??___xxtofl^0,f,c
  4741  0015C6  1E17               	comf	(??___xxtofl+1)^0,f,c
  4742  0015C8  1E18               	comf	(??___xxtofl+2)^0,f,c
  4743  0015CA  1E19               	comf	(??___xxtofl+3)^0,f,c
  4744  0015CC  2A16               	incf	??___xxtofl^0,f,c
  4745  0015CE  0E00               	movlw	0
  4746  0015D0  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4747  0015D2  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4748  0015D4  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4749  0015D6  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4750  0015DA  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4751  0015DE  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4752  0015E2  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4753  0015E6  EFFE  F00A         	goto	l3986
  4754  0015EA                     l1296:
  4755  0015EA  FFFF               	dw	65535	; assembler added errata NOP
  4756  0015EC  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4757  0015F0  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4758  0015F4  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4759  0015F8  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4760  0015FC                     l3986:
  4761  0015FC  FFFF               	dw	65535	; assembler added errata NOP
  4762  0015FE  5012               	movf	___xxtofl@val^0,w,c
  4763  001600  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4764  001602  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4765  001604  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4766  001606  A4D8               	btfss	status,2,c
  4767  001608  EF08  F00B         	goto	u3301
  4768  00160C  EF0B  F00B         	goto	u3300
  4769  001610                     u3301:
  4770  001610  FFFF               	dw	65535	; assembler added errata NOP
  4771  001612  EF16  F00B         	goto	l3992
  4772  001616                     u3300:
  4773  001616  FFFF               	dw	65535	; assembler added errata NOP
  4774  001618  0E00               	movlw	0
  4775  00161A  6E12               	movwf	?___xxtofl^0,c
  4776  00161C  0E00               	movlw	0
  4777  00161E  6E13               	movwf	(?___xxtofl+1)^0,c
  4778  001620  0E00               	movlw	0
  4779  001622  6E14               	movwf	(?___xxtofl+2)^0,c
  4780  001624  0E00               	movlw	0
  4781  001626  6E15               	movwf	(?___xxtofl+3)^0,c
  4782  001628  EFBE  F00B         	goto	l1299
  4783  00162C                     l3992:
  4784  00162C  FFFF               	dw	65535	; assembler added errata NOP
  4785  00162E  0E96               	movlw	150
  4786  001630  6E1B               	movwf	___xxtofl@exp^0,c
  4787  001632  EF22  F00B         	goto	l3996
  4788  001636                     l3994:
  4789  001636  FFFF               	dw	65535	; assembler added errata NOP
  4790  001638  2A1B               	incf	___xxtofl@exp^0,f,c
  4791  00163A  90D8               	bcf	status,0,c
  4792  00163C  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4793  00163E  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4794  001640  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4795  001642  321C               	rrcf	___xxtofl@arg^0,f,c
  4796  001644                     l3996:
  4797  001644  FFFF               	dw	65535	; assembler added errata NOP
  4798  001646  0E00               	movlw	0
  4799  001648  141C               	andwf	___xxtofl@arg^0,w,c
  4800  00164A  6E16               	movwf	??___xxtofl^0,c
  4801  00164C  0E00               	movlw	0
  4802  00164E  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4803  001650  6E17               	movwf	(??___xxtofl+1)^0,c
  4804  001652  0E00               	movlw	0
  4805  001654  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4806  001656  6E18               	movwf	(??___xxtofl+2)^0,c
  4807  001658  0EFE               	movlw	254
  4808  00165A  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4809  00165C  6E19               	movwf	(??___xxtofl+3)^0,c
  4810  00165E  5016               	movf	??___xxtofl^0,w,c
  4811  001660  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4812  001662  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4813  001664  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4814  001666  A4D8               	btfss	status,2,c
  4815  001668  EF38  F00B         	goto	u3311
  4816  00166C  EF3B  F00B         	goto	u3310
  4817  001670                     u3311:
  4818  001670  FFFF               	dw	65535	; assembler added errata NOP
  4819  001672  EF1B  F00B         	goto	l3994
  4820  001676                     u3310:
  4821  001676  FFFF               	dw	65535	; assembler added errata NOP
  4822  001678  EF4B  F00B         	goto	l1303
  4823  00167C                     l3998:
  4824  00167C  FFFF               	dw	65535	; assembler added errata NOP
  4825  00167E  2A1B               	incf	___xxtofl@exp^0,f,c
  4826  001680  0E01               	movlw	1
  4827  001682  261C               	addwf	___xxtofl@arg^0,f,c
  4828  001684  0E00               	movlw	0
  4829  001686  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4830  001688  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4831  00168A  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4832  00168C  90D8               	bcf	status,0,c
  4833  00168E  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4834  001690  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4835  001692  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4836  001694  321C               	rrcf	___xxtofl@arg^0,f,c
  4837  001696                     l1303:
  4838  001696  FFFF               	dw	65535	; assembler added errata NOP
  4839  001698  0E00               	movlw	0
  4840  00169A  141C               	andwf	___xxtofl@arg^0,w,c
  4841  00169C  6E16               	movwf	??___xxtofl^0,c
  4842  00169E  0E00               	movlw	0
  4843  0016A0  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4844  0016A2  6E17               	movwf	(??___xxtofl+1)^0,c
  4845  0016A4  0E00               	movlw	0
  4846  0016A6  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4847  0016A8  6E18               	movwf	(??___xxtofl+2)^0,c
  4848  0016AA  0EFF               	movlw	255
  4849  0016AC  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4850  0016AE  6E19               	movwf	(??___xxtofl+3)^0,c
  4851  0016B0  5016               	movf	??___xxtofl^0,w,c
  4852  0016B2  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4853  0016B4  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4854  0016B6  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4855  0016B8  A4D8               	btfss	status,2,c
  4856  0016BA  EF61  F00B         	goto	u3321
  4857  0016BE  EF64  F00B         	goto	u3320
  4858  0016C2                     u3321:
  4859  0016C2  FFFF               	dw	65535	; assembler added errata NOP
  4860  0016C4  EF3E  F00B         	goto	l3998
  4861  0016C8                     u3320:
  4862  0016C8  FFFF               	dw	65535	; assembler added errata NOP
  4863  0016CA  EF6E  F00B         	goto	l4006
  4864  0016CE                     l4004:
  4865  0016CE  FFFF               	dw	65535	; assembler added errata NOP
  4866  0016D0  061B               	decf	___xxtofl@exp^0,f,c
  4867  0016D2  90D8               	bcf	status,0,c
  4868  0016D4  361C               	rlcf	___xxtofl@arg^0,f,c
  4869  0016D6  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4870  0016D8  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4871  0016DA  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4872  0016DC                     l4006:
  4873  0016DC  FFFF               	dw	65535	; assembler added errata NOP
  4874  0016DE  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4875  0016E0  EF74  F00B         	goto	u3331
  4876  0016E4  EF77  F00B         	goto	u3330
  4877  0016E8                     u3331:
  4878  0016E8  FFFF               	dw	65535	; assembler added errata NOP
  4879  0016EA  EF81  F00B         	goto	l1310
  4880  0016EE                     u3330:
  4881  0016EE  FFFF               	dw	65535	; assembler added errata NOP
  4882  0016F0  0E02               	movlw	2
  4883  0016F2  601B               	cpfslt	___xxtofl@exp^0,c
  4884  0016F4  EF7E  F00B         	goto	u3341
  4885  0016F8  EF81  F00B         	goto	u3340
  4886  0016FC                     u3341:
  4887  0016FC  FFFF               	dw	65535	; assembler added errata NOP
  4888  0016FE  EF67  F00B         	goto	l4004
  4889  001702                     u3340:
  4890  001702                     l1310:
  4891  001702  FFFF               	dw	65535	; assembler added errata NOP
  4892  001704  B01B               	btfsc	___xxtofl@exp^0,0,c
  4893  001706  EF87  F00B         	goto	u3351
  4894  00170A  EF8A  F00B         	goto	u3350
  4895  00170E                     u3351:
  4896  00170E  FFFF               	dw	65535	; assembler added errata NOP
  4897  001710  EF8C  F00B         	goto	l4012
  4898  001714                     u3350:
  4899  001714  FFFF               	dw	65535	; assembler added errata NOP
  4900  001716  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4901  001718                     l4012:
  4902  001718  FFFF               	dw	65535	; assembler added errata NOP
  4903  00171A  90D8               	bcf	status,0,c
  4904  00171C  321B               	rrcf	___xxtofl@exp^0,f,c
  4905  00171E  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4906  001722  6A17               	clrf	(??___xxtofl+1)^0,c
  4907  001724  6A18               	clrf	(??___xxtofl+2)^0,c
  4908  001726  6A19               	clrf	(??___xxtofl+3)^0,c
  4909  001728  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4910  00172C  6A18               	clrf	(??___xxtofl+2)^0,c
  4911  00172E  6A17               	clrf	(??___xxtofl+1)^0,c
  4912  001730  6A16               	clrf	??___xxtofl^0,c
  4913  001732  5016               	movf	??___xxtofl^0,w,c
  4914  001734  121C               	iorwf	___xxtofl@arg^0,f,c
  4915  001736  5017               	movf	(??___xxtofl+1)^0,w,c
  4916  001738  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4917  00173A  5018               	movf	(??___xxtofl+2)^0,w,c
  4918  00173C  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4919  00173E  5019               	movf	(??___xxtofl+3)^0,w,c
  4920  001740  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4921  001742  501A               	movf	___xxtofl@sign^0,w,c
  4922  001744  B4D8               	btfsc	status,2,c
  4923  001746  EFA7  F00B         	goto	u3361
  4924  00174A  EFAA  F00B         	goto	u3360
  4925  00174E                     u3361:
  4926  00174E  FFFF               	dw	65535	; assembler added errata NOP
  4927  001750  EFB5  F00B         	goto	l4022
  4928  001754                     u3360:
  4929  001754  FFFF               	dw	65535	; assembler added errata NOP
  4930  001756  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4931  001758  EFB3  F00B         	goto	u3370
  4932  00175C  EFB0  F00B         	goto	u3371
  4933  001760                     u3371:
  4934  001760  FFFF               	dw	65535	; assembler added errata NOP
  4935  001762  EFB5  F00B         	goto	l4022
  4936  001766                     u3370:
  4937  001766  FFFF               	dw	65535	; assembler added errata NOP
  4938  001768  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4939  00176A                     l4022:
  4940  00176A  FFFF               	dw	65535	; assembler added errata NOP
  4941  00176C  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4942  001770  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4943  001774  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4944  001778  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  4945  00177C                     l1299:
  4946  00177C  FFFF               	dw	65535	; assembler added errata NOP
  4947  00177E  0012               	return		;funcret
  4948  001780  FFFF               	dw	65535	; errata NOP
  4949  001782                     __end_of___xxtofl:
  4950                           	callstack 0
  4951                           
  4952 ;; *************** function ___fltol *****************
  4953 ;; Defined at:
  4954 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  4955 ;; Parameters:    Size  Location     Type
  4956 ;;  f1              4   56[COMRAM] unsigned char 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  exp1            1   65[COMRAM] unsigned char 
  4959 ;;  sign1           1   64[COMRAM] unsigned char 
  4960 ;; Return value:  Size  Location     Type
  4961 ;;                  4   56[COMRAM] long 
  4962 ;; Registers used:
  4963 ;;		wreg, status,2, status,0
  4964 ;; Tracked objects:
  4965 ;;		On entry : 0/0
  4966 ;;		On exit  : 0/0
  4967 ;;		Unchanged: 0/0
  4968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4969 ;;      Params:         4       0       0       0       0       0       0
  4970 ;;      Locals:         2       0       0       0       0       0       0
  4971 ;;      Temps:          4       0       0       0       0       0       0
  4972 ;;      Totals:        10       0       0       0       0       0       0
  4973 ;;Total ram usage:       10 bytes
  4974 ;; Hardware stack levels used:    1
  4975 ;; Hardware stack levels required when called:    4
  4976 ;; This function calls:
  4977 ;;		Nothing
  4978 ;; This function is called by:
  4979 ;;		_rotateObj
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           	psect	text29
  4984  001A9E                     __ptext29:
  4985                           	callstack 0
  4986  001A9E                     ___fltol:
  4987                           	callstack 0
  4988  001A9E  FFFF               	dw	65535	; assembler added errata NOP
  4989  001AA0  343B               	rlcf	(___fltol@f1+2)^0,w,c
  4990  001AA2  343C               	rlcf	(___fltol@f1+3)^0,w,c
  4991  001AA4  6E42               	movwf	___fltol@exp1^0,c
  4992  001AA6  5042               	movf	___fltol@exp1^0,w,c
  4993  001AA8  A4D8               	btfss	status,2,c
  4994  001AAA  EF59  F00D         	goto	u3211
  4995  001AAE  EF5C  F00D         	goto	u3210
  4996  001AB2                     u3211:
  4997  001AB2  FFFF               	dw	65535	; assembler added errata NOP
  4998  001AB4  EF68  F00D         	goto	l3942
  4999  001AB8                     u3210:
  5000  001AB8  FFFF               	dw	65535	; assembler added errata NOP
  5001  001ABA                     l3938:
  5002  001ABA  FFFF               	dw	65535	; assembler added errata NOP
  5003  001ABC  0E00               	movlw	0
  5004  001ABE  6E39               	movwf	?___fltol^0,c
  5005  001AC0  0E00               	movlw	0
  5006  001AC2  6E3A               	movwf	(?___fltol+1)^0,c
  5007  001AC4  0E00               	movlw	0
  5008  001AC6  6E3B               	movwf	(?___fltol+2)^0,c
  5009  001AC8  0E00               	movlw	0
  5010  001ACA  6E3C               	movwf	(?___fltol+3)^0,c
  5011  001ACC  EFE7  F00D         	goto	l938
  5012  001AD0                     l3942:
  5013  001AD0  FFFF               	dw	65535	; assembler added errata NOP
  5014  001AD2  C039  F03D         	movff	___fltol@f1,??___fltol
  5015  001AD6  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5016  001ADA  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5017  001ADE  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5018  001AE2  0E20               	movlw	32
  5019  001AE4  EF7A  F00D         	goto	u3220
  5020  001AE8                     u3225:
  5021  001AE8  FFFF               	dw	65535	; assembler added errata NOP
  5022  001AEA  90D8               	bcf	status,0,c
  5023  001AEC  3240               	rrcf	(??___fltol+3)^0,f,c
  5024  001AEE  323F               	rrcf	(??___fltol+2)^0,f,c
  5025  001AF0  323E               	rrcf	(??___fltol+1)^0,f,c
  5026  001AF2  323D               	rrcf	??___fltol^0,f,c
  5027  001AF4                     u3220:
  5028  001AF4  FFFF               	dw	65535	; assembler added errata NOP
  5029  001AF6  2EE8               	decfsz	wreg,f,c
  5030  001AF8  EF74  F00D         	goto	u3225
  5031  001AFC  503D               	movf	??___fltol^0,w,c
  5032  001AFE  6E41               	movwf	___fltol@sign1^0,c
  5033  001B00  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5034  001B02  0EFF               	movlw	255
  5035  001B04  1639               	andwf	___fltol@f1^0,f,c
  5036  001B06  0EFF               	movlw	255
  5037  001B08  163A               	andwf	(___fltol@f1+1)^0,f,c
  5038  001B0A  0EFF               	movlw	255
  5039  001B0C  163B               	andwf	(___fltol@f1+2)^0,f,c
  5040  001B0E  0E00               	movlw	0
  5041  001B10  163C               	andwf	(___fltol@f1+3)^0,f,c
  5042  001B12  0E96               	movlw	150
  5043  001B14  5E42               	subwf	___fltol@exp1^0,f,c
  5044  001B16  BE42               	btfsc	___fltol@exp1^0,7,c
  5045  001B18  EF93  F00D         	goto	u3230
  5046  001B1C  EF90  F00D         	goto	u3231
  5047  001B20                     u3231:
  5048  001B20  FFFF               	dw	65535	; assembler added errata NOP
  5049  001B22  EFAD  F00D         	goto	l3962
  5050  001B26                     u3230:
  5051  001B26  FFFF               	dw	65535	; assembler added errata NOP
  5052  001B28  5042               	movf	___fltol@exp1^0,w,c
  5053  001B2A  0A80               	xorlw	128
  5054  001B2C  0F97               	addlw	151
  5055  001B2E  B0D8               	btfsc	status,0,c
  5056  001B30  EF9C  F00D         	goto	u3241
  5057  001B34  EF9F  F00D         	goto	u3240
  5058  001B38                     u3241:
  5059  001B38  FFFF               	dw	65535	; assembler added errata NOP
  5060  001B3A  EFA2  F00D         	goto	l3958
  5061  001B3E                     u3240:
  5062  001B3E  FFFF               	dw	65535	; assembler added errata NOP
  5063  001B40  EF5D  F00D         	goto	l3938
  5064  001B44                     l3958:
  5065  001B44  FFFF               	dw	65535	; assembler added errata NOP
  5066  001B46  90D8               	bcf	status,0,c
  5067  001B48  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5068  001B4A  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5069  001B4C  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5070  001B4E  3239               	rrcf	___fltol@f1^0,f,c
  5071  001B50  3E42               	incfsz	___fltol@exp1^0,f,c
  5072  001B52  EFA2  F00D         	goto	l3958
  5073  001B56  EFCB  F00D         	goto	l3972
  5074  001B5A                     l3962:
  5075  001B5A  FFFF               	dw	65535	; assembler added errata NOP
  5076  001B5C  0E1F               	movlw	31
  5077  001B5E  6442               	cpfsgt	___fltol@exp1^0,c
  5078  001B60  EFB4  F00D         	goto	u3251
  5079  001B64  EFB7  F00D         	goto	u3250
  5080  001B68                     u3251:
  5081  001B68  FFFF               	dw	65535	; assembler added errata NOP
  5082  001B6A  EFC1  F00D         	goto	l3970
  5083  001B6E                     u3250:
  5084  001B6E  FFFF               	dw	65535	; assembler added errata NOP
  5085  001B70  EF5D  F00D         	goto	l3938
  5086  001B74                     l3968:
  5087  001B74  FFFF               	dw	65535	; assembler added errata NOP
  5088  001B76  90D8               	bcf	status,0,c
  5089  001B78  3639               	rlcf	___fltol@f1^0,f,c
  5090  001B7A  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5091  001B7C  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5092  001B7E  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5093  001B80  0642               	decf	___fltol@exp1^0,f,c
  5094  001B82                     l3970:
  5095  001B82  FFFF               	dw	65535	; assembler added errata NOP
  5096  001B84  5042               	movf	___fltol@exp1^0,w,c
  5097  001B86  A4D8               	btfss	status,2,c
  5098  001B88  EFC8  F00D         	goto	u3261
  5099  001B8C  EFCB  F00D         	goto	u3260
  5100  001B90                     u3261:
  5101  001B90  FFFF               	dw	65535	; assembler added errata NOP
  5102  001B92  EFBA  F00D         	goto	l3968
  5103  001B96                     u3260:
  5104  001B96                     l3972:
  5105  001B96  FFFF               	dw	65535	; assembler added errata NOP
  5106  001B98  5041               	movf	___fltol@sign1^0,w,c
  5107  001B9A  B4D8               	btfsc	status,2,c
  5108  001B9C  EFD2  F00D         	goto	u3271
  5109  001BA0  EFD5  F00D         	goto	u3270
  5110  001BA4                     u3271:
  5111  001BA4  FFFF               	dw	65535	; assembler added errata NOP
  5112  001BA6  EFDE  F00D         	goto	l3976
  5113  001BAA                     u3270:
  5114  001BAA  FFFF               	dw	65535	; assembler added errata NOP
  5115  001BAC  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5116  001BAE  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5117  001BB0  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5118  001BB2  6C39               	negf	___fltol@f1^0,c
  5119  001BB4  0E00               	movlw	0
  5120  001BB6  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5121  001BB8  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5122  001BBA  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5123  001BBC                     l3976:
  5124  001BBC  FFFF               	dw	65535	; assembler added errata NOP
  5125  001BBE  C039  F039         	movff	___fltol@f1,?___fltol
  5126  001BC2  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5127  001BC6  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5128  001BCA  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5129  001BCE                     l938:
  5130  001BCE  FFFF               	dw	65535	; assembler added errata NOP
  5131  001BD0  0012               	return		;funcret
  5132  001BD2  FFFF               	dw	65535	; errata NOP
  5133  001BD4                     __end_of___fltol:
  5134                           	callstack 0
  5135                           
  5136 ;; *************** function ___fldiv *****************
  5137 ;; Defined at:
  5138 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5139 ;; Parameters:    Size  Location     Type
  5140 ;;  b               4   31[COMRAM] long 
  5141 ;;  a               4   35[COMRAM] long 
  5142 ;; Auto vars:     Size  Location     Type
  5143 ;;  grs             4   50[COMRAM] unsigned long 
  5144 ;;  rem             4   43[COMRAM] unsigned long 
  5145 ;;  new_exp         2   48[COMRAM] short 
  5146 ;;  aexp            1   55[COMRAM] unsigned char 
  5147 ;;  bexp            1   54[COMRAM] unsigned char 
  5148 ;;  sign            1   47[COMRAM] unsigned char 
  5149 ;; Return value:  Size  Location     Type
  5150 ;;                  4   31[COMRAM] unsigned char 
  5151 ;; Registers used:
  5152 ;;		wreg, status,2, status,0
  5153 ;; Tracked objects:
  5154 ;;		On entry : 0/0
  5155 ;;		On exit  : 0/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5158 ;;      Params:         8       0       0       0       0       0       0
  5159 ;;      Locals:        13       0       0       0       0       0       0
  5160 ;;      Temps:          4       0       0       0       0       0       0
  5161 ;;      Totals:        25       0       0       0       0       0       0
  5162 ;;Total ram usage:       25 bytes
  5163 ;; Hardware stack levels used:    1
  5164 ;; Hardware stack levels required when called:    4
  5165 ;; This function calls:
  5166 ;;		Nothing
  5167 ;; This function is called by:
  5168 ;;		_rotateObj
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           	psect	text30
  5173  000616                     __ptext30:
  5174                           	callstack 0
  5175  000616                     ___fldiv:
  5176                           	callstack 0
  5177  000616  FFFF               	dw	65535	; assembler added errata NOP
  5178  000618  5023               	movf	(___fldiv@b+3)^0,w,c
  5179  00061A  0B80               	andlw	128
  5180  00061C  6E30               	movwf	___fldiv@sign^0,c
  5181  00061E  5023               	movf	(___fldiv@b+3)^0,w,c
  5182  000620  2423               	addwf	(___fldiv@b+3)^0,w,c
  5183  000622  6E37               	movwf	___fldiv@bexp^0,c
  5184  000624  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5185  000626  EF17  F003         	goto	u2981
  5186  00062A  EF1A  F003         	goto	u2980
  5187  00062E                     u2981:
  5188  00062E  FFFF               	dw	65535	; assembler added errata NOP
  5189  000630  EF1C  F003         	goto	l3804
  5190  000634                     u2980:
  5191  000634  FFFF               	dw	65535	; assembler added errata NOP
  5192  000636  8037               	bsf	___fldiv@bexp^0,0,c
  5193  000638                     l3804:
  5194  000638  FFFF               	dw	65535	; assembler added errata NOP
  5195  00063A  5037               	movf	___fldiv@bexp^0,w,c
  5196  00063C  B4D8               	btfsc	status,2,c
  5197  00063E  EF23  F003         	goto	u2991
  5198  000642  EF26  F003         	goto	u2990
  5199  000646                     u2991:
  5200  000646  FFFF               	dw	65535	; assembler added errata NOP
  5201  000648  EF3F  F003         	goto	l3814
  5202  00064C                     u2990:
  5203  00064C  FFFF               	dw	65535	; assembler added errata NOP
  5204  00064E  2837               	incf	___fldiv@bexp^0,w,c
  5205  000650  A4D8               	btfss	status,2,c
  5206  000652  EF2D  F003         	goto	u3001
  5207  000656  EF30  F003         	goto	u3000
  5208  00065A                     u3001:
  5209  00065A  FFFF               	dw	65535	; assembler added errata NOP
  5210  00065C  EF39  F003         	goto	l3810
  5211  000660                     u3000:
  5212  000660  FFFF               	dw	65535	; assembler added errata NOP
  5213  000662  0E00               	movlw	0
  5214  000664  6E20               	movwf	___fldiv@b^0,c
  5215  000666  0E00               	movlw	0
  5216  000668  6E21               	movwf	(___fldiv@b+1)^0,c
  5217  00066A  0E00               	movlw	0
  5218  00066C  6E22               	movwf	(___fldiv@b+2)^0,c
  5219  00066E  0E00               	movlw	0
  5220  000670  6E23               	movwf	(___fldiv@b+3)^0,c
  5221  000672                     l3810:
  5222  000672  FFFF               	dw	65535	; assembler added errata NOP
  5223  000674  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5224  000676  0E00               	movlw	0
  5225  000678  6E23               	movwf	(___fldiv@b+3)^0,c
  5226  00067A  EF48  F003         	goto	l3816
  5227  00067E                     l3814:
  5228  00067E  FFFF               	dw	65535	; assembler added errata NOP
  5229  000680  0E00               	movlw	0
  5230  000682  6E20               	movwf	___fldiv@b^0,c
  5231  000684  0E00               	movlw	0
  5232  000686  6E21               	movwf	(___fldiv@b+1)^0,c
  5233  000688  0E00               	movlw	0
  5234  00068A  6E22               	movwf	(___fldiv@b+2)^0,c
  5235  00068C  0E00               	movlw	0
  5236  00068E  6E23               	movwf	(___fldiv@b+3)^0,c
  5237  000690                     l3816:
  5238  000690  FFFF               	dw	65535	; assembler added errata NOP
  5239  000692  5027               	movf	(___fldiv@a+3)^0,w,c
  5240  000694  0B80               	andlw	128
  5241  000696  1A30               	xorwf	___fldiv@sign^0,f,c
  5242  000698  5027               	movf	(___fldiv@a+3)^0,w,c
  5243  00069A  2427               	addwf	(___fldiv@a+3)^0,w,c
  5244  00069C  6E38               	movwf	___fldiv@aexp^0,c
  5245  00069E  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5246  0006A0  EF54  F003         	goto	u3011
  5247  0006A4  EF57  F003         	goto	u3010
  5248  0006A8                     u3011:
  5249  0006A8  FFFF               	dw	65535	; assembler added errata NOP
  5250  0006AA  EF59  F003         	goto	l3824
  5251  0006AE                     u3010:
  5252  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5253  0006B0  8038               	bsf	___fldiv@aexp^0,0,c
  5254  0006B2                     l3824:
  5255  0006B2  FFFF               	dw	65535	; assembler added errata NOP
  5256  0006B4  5038               	movf	___fldiv@aexp^0,w,c
  5257  0006B6  B4D8               	btfsc	status,2,c
  5258  0006B8  EF60  F003         	goto	u3021
  5259  0006BC  EF63  F003         	goto	u3020
  5260  0006C0                     u3021:
  5261  0006C0  FFFF               	dw	65535	; assembler added errata NOP
  5262  0006C2  EF7C  F003         	goto	l3834
  5263  0006C6                     u3020:
  5264  0006C6  FFFF               	dw	65535	; assembler added errata NOP
  5265  0006C8  2838               	incf	___fldiv@aexp^0,w,c
  5266  0006CA  A4D8               	btfss	status,2,c
  5267  0006CC  EF6A  F003         	goto	u3031
  5268  0006D0  EF6D  F003         	goto	u3030
  5269  0006D4                     u3031:
  5270  0006D4  FFFF               	dw	65535	; assembler added errata NOP
  5271  0006D6  EF76  F003         	goto	l3830
  5272  0006DA                     u3030:
  5273  0006DA  FFFF               	dw	65535	; assembler added errata NOP
  5274  0006DC  0E00               	movlw	0
  5275  0006DE  6E24               	movwf	___fldiv@a^0,c
  5276  0006E0  0E00               	movlw	0
  5277  0006E2  6E25               	movwf	(___fldiv@a+1)^0,c
  5278  0006E4  0E00               	movlw	0
  5279  0006E6  6E26               	movwf	(___fldiv@a+2)^0,c
  5280  0006E8  0E00               	movlw	0
  5281  0006EA  6E27               	movwf	(___fldiv@a+3)^0,c
  5282  0006EC                     l3830:
  5283  0006EC  FFFF               	dw	65535	; assembler added errata NOP
  5284  0006EE  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5285  0006F0  0E00               	movlw	0
  5286  0006F2  6E27               	movwf	(___fldiv@a+3)^0,c
  5287  0006F4  EF85  F003         	goto	l3836
  5288  0006F8                     l3834:
  5289  0006F8  FFFF               	dw	65535	; assembler added errata NOP
  5290  0006FA  0E00               	movlw	0
  5291  0006FC  6E24               	movwf	___fldiv@a^0,c
  5292  0006FE  0E00               	movlw	0
  5293  000700  6E25               	movwf	(___fldiv@a+1)^0,c
  5294  000702  0E00               	movlw	0
  5295  000704  6E26               	movwf	(___fldiv@a+2)^0,c
  5296  000706  0E00               	movlw	0
  5297  000708  6E27               	movwf	(___fldiv@a+3)^0,c
  5298  00070A                     l3836:
  5299  00070A  FFFF               	dw	65535	; assembler added errata NOP
  5300  00070C  5024               	movf	___fldiv@a^0,w,c
  5301  00070E  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5302  000710  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5303  000712  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5304  000714  A4D8               	btfss	status,2,c
  5305  000716  EF8F  F003         	goto	u3041
  5306  00071A  EF92  F003         	goto	u3040
  5307  00071E                     u3041:
  5308  00071E  FFFF               	dw	65535	; assembler added errata NOP
  5309  000720  EFAC  F003         	goto	l3848
  5310  000724                     u3040:
  5311  000724  FFFF               	dw	65535	; assembler added errata NOP
  5312  000726  0E00               	movlw	0
  5313  000728  6E20               	movwf	___fldiv@b^0,c
  5314  00072A  0E00               	movlw	0
  5315  00072C  6E21               	movwf	(___fldiv@b+1)^0,c
  5316  00072E  0E00               	movlw	0
  5317  000730  6E22               	movwf	(___fldiv@b+2)^0,c
  5318  000732  0E00               	movlw	0
  5319  000734  6E23               	movwf	(___fldiv@b+3)^0,c
  5320  000736  0E80               	movlw	128
  5321  000738  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5322  00073A  0E7F               	movlw	127
  5323  00073C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5324  00073E                     l3842:
  5325  00073E  FFFF               	dw	65535	; assembler added errata NOP
  5326  000740  5030               	movf	___fldiv@sign^0,w,c
  5327  000742  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5328  000744  C020  F020         	movff	___fldiv@b,?___fldiv
  5329  000748  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5330  00074C  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5331  000750  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5332  000754  EF21  F005         	goto	l1223
  5333  000758                     l3848:
  5334  000758  FFFF               	dw	65535	; assembler added errata NOP
  5335  00075A  5037               	movf	___fldiv@bexp^0,w,c
  5336  00075C  A4D8               	btfss	status,2,c
  5337  00075E  EFB3  F003         	goto	u3051
  5338  000762  EFB6  F003         	goto	u3050
  5339  000766                     u3051:
  5340  000766  FFFF               	dw	65535	; assembler added errata NOP
  5341  000768  EFC1  F003         	goto	l3856
  5342  00076C                     u3050:
  5343  00076C  FFFF               	dw	65535	; assembler added errata NOP
  5344  00076E  0E00               	movlw	0
  5345  000770  6E20               	movwf	?___fldiv^0,c
  5346  000772  0E00               	movlw	0
  5347  000774  6E21               	movwf	(?___fldiv+1)^0,c
  5348  000776  0E00               	movlw	0
  5349  000778  6E22               	movwf	(?___fldiv+2)^0,c
  5350  00077A  0E00               	movlw	0
  5351  00077C  6E23               	movwf	(?___fldiv+3)^0,c
  5352  00077E  EF21  F005         	goto	l1223
  5353  000782                     l3856:
  5354  000782  FFFF               	dw	65535	; assembler added errata NOP
  5355  000784  5038               	movf	___fldiv@aexp^0,w,c
  5356  000786  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5357  00078A  6A29               	clrf	(??___fldiv+1)^0,c
  5358  00078C  5E28               	subwf	??___fldiv^0,f,c
  5359  00078E  0E00               	movlw	0
  5360  000790  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5361  000792  0E7F               	movlw	127
  5362  000794  2428               	addwf	??___fldiv^0,w,c
  5363  000796  6E31               	movwf	___fldiv@new_exp^0,c
  5364  000798  0E00               	movlw	0
  5365  00079A  2029               	addwfc	(??___fldiv+1)^0,w,c
  5366  00079C  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5367  00079E  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5368  0007A2  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5369  0007A6  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5370  0007AA  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5371  0007AE  0E00               	movlw	0
  5372  0007B0  6E20               	movwf	___fldiv@b^0,c
  5373  0007B2  0E00               	movlw	0
  5374  0007B4  6E21               	movwf	(___fldiv@b+1)^0,c
  5375  0007B6  0E00               	movlw	0
  5376  0007B8  6E22               	movwf	(___fldiv@b+2)^0,c
  5377  0007BA  0E00               	movlw	0
  5378  0007BC  6E23               	movwf	(___fldiv@b+3)^0,c
  5379  0007BE  0E00               	movlw	0
  5380  0007C0  6E33               	movwf	___fldiv@grs^0,c
  5381  0007C2  0E00               	movlw	0
  5382  0007C4  6E34               	movwf	(___fldiv@grs+1)^0,c
  5383  0007C6  0E00               	movlw	0
  5384  0007C8  6E35               	movwf	(___fldiv@grs+2)^0,c
  5385  0007CA  0E00               	movlw	0
  5386  0007CC  6E36               	movwf	(___fldiv@grs+3)^0,c
  5387  0007CE  0E00               	movlw	0
  5388  0007D0  6E38               	movwf	___fldiv@aexp^0,c
  5389  0007D2  EF2D  F004         	goto	l1225
  5390  0007D6                     l3866:
  5391  0007D6  FFFF               	dw	65535	; assembler added errata NOP
  5392  0007D8  5038               	movf	___fldiv@aexp^0,w,c
  5393  0007DA  B4D8               	btfsc	status,2,c
  5394  0007DC  EFF2  F003         	goto	u3061
  5395  0007E0  EFF5  F003         	goto	u3060
  5396  0007E4                     u3061:
  5397  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  5398  0007E6  EF10  F004         	goto	l3874
  5399  0007EA                     u3060:
  5400  0007EA  FFFF               	dw	65535	; assembler added errata NOP
  5401  0007EC  90D8               	bcf	status,0,c
  5402  0007EE  362C               	rlcf	___fldiv@rem^0,f,c
  5403  0007F0  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5404  0007F2  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5405  0007F4  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5406  0007F6  90D8               	bcf	status,0,c
  5407  0007F8  3620               	rlcf	___fldiv@b^0,f,c
  5408  0007FA  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5409  0007FC  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5410  0007FE  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5411  000800  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5412  000802  EF05  F004         	goto	u3071
  5413  000806  EF08  F004         	goto	u3070
  5414  00080A                     u3071:
  5415  00080A  FFFF               	dw	65535	; assembler added errata NOP
  5416  00080C  EF0A  F004         	goto	l1228
  5417  000810                     u3070:
  5418  000810  FFFF               	dw	65535	; assembler added errata NOP
  5419  000812  8020               	bsf	___fldiv@b^0,0,c
  5420  000814                     l1228:
  5421  000814  FFFF               	dw	65535	; assembler added errata NOP
  5422  000816  90D8               	bcf	status,0,c
  5423  000818  3633               	rlcf	___fldiv@grs^0,f,c
  5424  00081A  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5425  00081C  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5426  00081E  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5427  000820                     l3874:
  5428  000820  FFFF               	dw	65535	; assembler added errata NOP
  5429  000822  5024               	movf	___fldiv@a^0,w,c
  5430  000824  5C2C               	subwf	___fldiv@rem^0,w,c
  5431  000826  5025               	movf	(___fldiv@a+1)^0,w,c
  5432  000828  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5433  00082A  5026               	movf	(___fldiv@a+2)^0,w,c
  5434  00082C  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5435  00082E  5027               	movf	(___fldiv@a+3)^0,w,c
  5436  000830  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5437  000832  A0D8               	btfss	status,0,c
  5438  000834  EF1E  F004         	goto	u3081
  5439  000838  EF21  F004         	goto	u3080
  5440  00083C                     u3081:
  5441  00083C  FFFF               	dw	65535	; assembler added errata NOP
  5442  00083E  EF2B  F004         	goto	l3880
  5443  000842                     u3080:
  5444  000842  FFFF               	dw	65535	; assembler added errata NOP
  5445  000844  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5446  000846  5024               	movf	___fldiv@a^0,w,c
  5447  000848  5E2C               	subwf	___fldiv@rem^0,f,c
  5448  00084A  5025               	movf	(___fldiv@a+1)^0,w,c
  5449  00084C  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5450  00084E  5026               	movf	(___fldiv@a+2)^0,w,c
  5451  000850  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5452  000852  5027               	movf	(___fldiv@a+3)^0,w,c
  5453  000854  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5454  000856                     l3880:
  5455  000856  FFFF               	dw	65535	; assembler added errata NOP
  5456  000858  2A38               	incf	___fldiv@aexp^0,f,c
  5457  00085A                     l1225:
  5458  00085A  FFFF               	dw	65535	; assembler added errata NOP
  5459  00085C  0E19               	movlw	25
  5460  00085E  6438               	cpfsgt	___fldiv@aexp^0,c
  5461  000860  EF34  F004         	goto	u3091
  5462  000864  EF37  F004         	goto	u3090
  5463  000868                     u3091:
  5464  000868  FFFF               	dw	65535	; assembler added errata NOP
  5465  00086A  EFEB  F003         	goto	l3866
  5466  00086E                     u3090:
  5467  00086E  FFFF               	dw	65535	; assembler added errata NOP
  5468  000870  502C               	movf	___fldiv@rem^0,w,c
  5469  000872  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5470  000874  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5471  000876  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5472  000878  B4D8               	btfsc	status,2,c
  5473  00087A  EF41  F004         	goto	u3101
  5474  00087E  EF44  F004         	goto	u3100
  5475  000882                     u3101:
  5476  000882  FFFF               	dw	65535	; assembler added errata NOP
  5477  000884  EF61  F004         	goto	l3892
  5478  000888                     u3100:
  5479  000888  FFFF               	dw	65535	; assembler added errata NOP
  5480  00088A  8033               	bsf	___fldiv@grs^0,0,c
  5481  00088C  EF61  F004         	goto	l3892
  5482  000890                     l3886:
  5483  000890  FFFF               	dw	65535	; assembler added errata NOP
  5484  000892  90D8               	bcf	status,0,c
  5485  000894  3620               	rlcf	___fldiv@b^0,f,c
  5486  000896  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5487  000898  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5488  00089A  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5489  00089C  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5490  00089E  EF53  F004         	goto	u3111
  5491  0008A2  EF56  F004         	goto	u3110
  5492  0008A6                     u3111:
  5493  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  5494  0008A8  EF58  F004         	goto	l1234
  5495  0008AC                     u3110:
  5496  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5497  0008AE  8020               	bsf	___fldiv@b^0,0,c
  5498  0008B0                     l1234:
  5499  0008B0  FFFF               	dw	65535	; assembler added errata NOP
  5500  0008B2  90D8               	bcf	status,0,c
  5501  0008B4  3633               	rlcf	___fldiv@grs^0,f,c
  5502  0008B6  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5503  0008B8  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5504  0008BA  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5505  0008BC  0631               	decf	___fldiv@new_exp^0,f,c
  5506  0008BE  A0D8               	btfss	status,0,c
  5507  0008C0  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5508  0008C2                     l3892:
  5509  0008C2  FFFF               	dw	65535	; assembler added errata NOP
  5510  0008C4  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5511  0008C6  EF67  F004         	goto	u3121
  5512  0008CA  EF6A  F004         	goto	u3120
  5513  0008CE                     u3121:
  5514  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  5515  0008D0  EF48  F004         	goto	l3886
  5516  0008D4                     u3120:
  5517  0008D4  FFFF               	dw	65535	; assembler added errata NOP
  5518  0008D6  0E00               	movlw	0
  5519  0008D8  6E38               	movwf	___fldiv@aexp^0,c
  5520  0008DA  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5521  0008DC  EF72  F004         	goto	u3131
  5522  0008E0  EF75  F004         	goto	u3130
  5523  0008E4                     u3131:
  5524  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  5525  0008E6  EFA0  F004         	goto	l1236
  5526  0008EA                     u3130:
  5527  0008EA  FFFF               	dw	65535	; assembler added errata NOP
  5528  0008EC  0EFF               	movlw	255
  5529  0008EE  1433               	andwf	___fldiv@grs^0,w,c
  5530  0008F0  6E28               	movwf	??___fldiv^0,c
  5531  0008F2  0EFF               	movlw	255
  5532  0008F4  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5533  0008F6  6E29               	movwf	(??___fldiv+1)^0,c
  5534  0008F8  0EFF               	movlw	255
  5535  0008FA  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5536  0008FC  6E2A               	movwf	(??___fldiv+2)^0,c
  5537  0008FE  0E7F               	movlw	127
  5538  000900  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5539  000902  6E2B               	movwf	(??___fldiv+3)^0,c
  5540  000904  5028               	movf	??___fldiv^0,w,c
  5541  000906  1029               	iorwf	(??___fldiv+1)^0,w,c
  5542  000908  102A               	iorwf	(??___fldiv+2)^0,w,c
  5543  00090A  102B               	iorwf	(??___fldiv+3)^0,w,c
  5544  00090C  B4D8               	btfsc	status,2,c
  5545  00090E  EF8B  F004         	goto	u3141
  5546  000912  EF8E  F004         	goto	u3140
  5547  000916                     u3141:
  5548  000916  FFFF               	dw	65535	; assembler added errata NOP
  5549  000918  EF94  F004         	goto	l1237
  5550  00091C                     u3140:
  5551  00091C  FFFF               	dw	65535	; assembler added errata NOP
  5552  00091E                     l3900:
  5553  00091E  FFFF               	dw	65535	; assembler added errata NOP
  5554  000920  0E01               	movlw	1
  5555  000922  6E38               	movwf	___fldiv@aexp^0,c
  5556  000924  EFA0  F004         	goto	l1236
  5557  000928                     l1237:
  5558  000928  FFFF               	dw	65535	; assembler added errata NOP
  5559  00092A  A020               	btfss	___fldiv@b^0,0,c
  5560  00092C  EF9A  F004         	goto	u3151
  5561  000930  EF9D  F004         	goto	u3150
  5562  000934                     u3151:
  5563  000934  FFFF               	dw	65535	; assembler added errata NOP
  5564  000936  EFA0  F004         	goto	l1236
  5565  00093A                     u3150:
  5566  00093A  FFFF               	dw	65535	; assembler added errata NOP
  5567  00093C  EF8F  F004         	goto	l3900
  5568  000940                     l1236:
  5569  000940  FFFF               	dw	65535	; assembler added errata NOP
  5570  000942  5038               	movf	___fldiv@aexp^0,w,c
  5571  000944  B4D8               	btfsc	status,2,c
  5572  000946  EFA7  F004         	goto	u3161
  5573  00094A  EFAA  F004         	goto	u3160
  5574  00094E                     u3161:
  5575  00094E  FFFF               	dw	65535	; assembler added errata NOP
  5576  000950  EFD1  F004         	goto	l3912
  5577  000954                     u3160:
  5578  000954  FFFF               	dw	65535	; assembler added errata NOP
  5579  000956  0E01               	movlw	1
  5580  000958  2620               	addwf	___fldiv@b^0,f,c
  5581  00095A  0E00               	movlw	0
  5582  00095C  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5583  00095E  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5584  000960  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5585  000962  A023               	btfss	(___fldiv@b+3)^0,0,c
  5586  000964  EFB6  F004         	goto	u3171
  5587  000968  EFB9  F004         	goto	u3170
  5588  00096C                     u3171:
  5589  00096C  FFFF               	dw	65535	; assembler added errata NOP
  5590  00096E  EFD1  F004         	goto	l3912
  5591  000972                     u3170:
  5592  000972  FFFF               	dw	65535	; assembler added errata NOP
  5593  000974  C020  F028         	movff	___fldiv@b,??___fldiv
  5594  000978  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5595  00097C  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5596  000980  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5597  000984  342B               	rlcf	(??___fldiv+3)^0,w,c
  5598  000986  322B               	rrcf	(??___fldiv+3)^0,f,c
  5599  000988  322A               	rrcf	(??___fldiv+2)^0,f,c
  5600  00098A  3229               	rrcf	(??___fldiv+1)^0,f,c
  5601  00098C  3228               	rrcf	??___fldiv^0,f,c
  5602  00098E  C028  F020         	movff	??___fldiv,___fldiv@b
  5603  000992  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5604  000996  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5605  00099A  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5606  00099E  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5607  0009A0  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5608  0009A2                     l3912:
  5609  0009A2  FFFF               	dw	65535	; assembler added errata NOP
  5610  0009A4  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5611  0009A6  EFDD  F004         	goto	u3181
  5612  0009AA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5613  0009AC  E109               	bnz	u3180
  5614  0009AE  2831               	incf	___fldiv@new_exp^0,w,c
  5615  0009B0  A0D8               	btfss	status,0,c
  5616  0009B2  EFDD  F004         	goto	u3181
  5617  0009B6  EFE0  F004         	goto	u3180
  5618  0009BA                     u3181:
  5619  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  5620  0009BC  EFEC  F004         	goto	l3916
  5621  0009C0                     u3180:
  5622  0009C0  FFFF               	dw	65535	; assembler added errata NOP
  5623  0009C2  0E00               	movlw	0
  5624  0009C4  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5625  0009C6  6831               	setf	___fldiv@new_exp^0,c
  5626  0009C8  0E00               	movlw	0
  5627  0009CA  6E20               	movwf	___fldiv@b^0,c
  5628  0009CC  0E00               	movlw	0
  5629  0009CE  6E21               	movwf	(___fldiv@b+1)^0,c
  5630  0009D0  0E00               	movlw	0
  5631  0009D2  6E22               	movwf	(___fldiv@b+2)^0,c
  5632  0009D4  0E00               	movlw	0
  5633  0009D6  6E23               	movwf	(___fldiv@b+3)^0,c
  5634  0009D8                     l3916:
  5635  0009D8  FFFF               	dw	65535	; assembler added errata NOP
  5636  0009DA  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5637  0009DC  EFFB  F004         	goto	u3190
  5638  0009E0  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5639  0009E2  E106               	bnz	u3191
  5640  0009E4  0431               	decf	___fldiv@new_exp^0,w,c
  5641  0009E6  B0D8               	btfsc	status,0,c
  5642  0009E8  EFF8  F004         	goto	u3191
  5643  0009EC  EFFB  F004         	goto	u3190
  5644  0009F0                     u3191:
  5645  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  5646  0009F2  EF0A  F005         	goto	l3920
  5647  0009F6                     u3190:
  5648  0009F6  FFFF               	dw	65535	; assembler added errata NOP
  5649  0009F8  0E00               	movlw	0
  5650  0009FA  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5651  0009FC  0E00               	movlw	0
  5652  0009FE  6E31               	movwf	___fldiv@new_exp^0,c
  5653  000A00  0E00               	movlw	0
  5654  000A02  6E20               	movwf	___fldiv@b^0,c
  5655  000A04  0E00               	movlw	0
  5656  000A06  6E21               	movwf	(___fldiv@b+1)^0,c
  5657  000A08  0E00               	movlw	0
  5658  000A0A  6E22               	movwf	(___fldiv@b+2)^0,c
  5659  000A0C  0E00               	movlw	0
  5660  000A0E  6E23               	movwf	(___fldiv@b+3)^0,c
  5661  000A10  0E00               	movlw	0
  5662  000A12  6E30               	movwf	___fldiv@sign^0,c
  5663  000A14                     l3920:
  5664  000A14  FFFF               	dw	65535	; assembler added errata NOP
  5665  000A16  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5666  000A1A  A037               	btfss	___fldiv@bexp^0,0,c
  5667  000A1C  EF12  F005         	goto	u3201
  5668  000A20  EF15  F005         	goto	u3200
  5669  000A24                     u3201:
  5670  000A24  FFFF               	dw	65535	; assembler added errata NOP
  5671  000A26  EF19  F005         	goto	l3926
  5672  000A2A                     u3200:
  5673  000A2A  FFFF               	dw	65535	; assembler added errata NOP
  5674  000A2C  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5675  000A2E  EF1B  F005         	goto	l3928
  5676  000A32                     l3926:
  5677  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5678  000A34  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5679  000A36                     l3928:
  5680  000A36  FFFF               	dw	65535	; assembler added errata NOP
  5681  000A38  90D8               	bcf	status,0,c
  5682  000A3A  3037               	rrcf	___fldiv@bexp^0,w,c
  5683  000A3C  6E23               	movwf	(___fldiv@b+3)^0,c
  5684  000A3E  EF9F  F003         	goto	l3842
  5685  000A42                     l1223:
  5686  000A42  FFFF               	dw	65535	; assembler added errata NOP
  5687  000A44  0012               	return		;funcret
  5688  000A46  FFFF               	dw	65535	; errata NOP
  5689  000A48                     __end_of___fldiv:
  5690                           	callstack 0
  5691                           
  5692 ;; *************** function _releaseObj *****************
  5693 ;; Defined at:
  5694 ;;		line 819 in file "motors.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;		None
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;		None
  5699 ;; Return value:  Size  Location     Type
  5700 ;;                  1    wreg      void 
  5701 ;; Registers used:
  5702 ;;		wreg, status,2, status,0, cstack
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5708 ;;      Params:         0       0       0       0       0       0       0
  5709 ;;      Locals:         0       0       0       0       0       0       0
  5710 ;;      Temps:          0       0       0       0       0       0       0
  5711 ;;      Totals:         0       0       0       0       0       0       0
  5712 ;;Total ram usage:        0 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    5
  5715 ;; This function calls:
  5716 ;;		_resetTM2_Temp
  5717 ;;		_stepMade
  5718 ;; This function is called by:
  5719 ;;		_executeData
  5720 ;; This function uses a non-reentrant model
  5721 ;;
  5722                           
  5723                           	psect	text31
  5724  0024E4                     __ptext31:
  5725                           	callstack 0
  5726  0024E4                     _releaseObj:
  5727                           	callstack 0
  5728  0024E4  FFFF               	dw	65535	; assembler added errata NOP
  5729  0024E6                     
  5730                           ;motors.c: 820:     LATDbits.LATD1 = 0;
  5731  0024E6  928C               	bcf	140,1,c	;volatile
  5732                           
  5733                           ;motors.c: 823:     T2CONbits.TMR2ON = 1;
  5734  0024E8  84CA               	bsf	202,2,c	;volatile
  5735  0024EA                     l4284:
  5736  0024EA  FFFF               	dw	65535	; assembler added errata NOP
  5737  0024EC  ECD7  F012         	call	_stepMade	;wreg free
  5738  0024F0  5012               	movf	?_stepMade^0,w,c
  5739  0024F2  1013               	iorwf	(?_stepMade+1)^0,w,c
  5740  0024F4  B4D8               	btfsc	status,2,c
  5741  0024F6  EF7F  F012         	goto	u3801
  5742  0024FA  EF82  F012         	goto	u3800
  5743  0024FE                     u3801:
  5744  0024FE  FFFF               	dw	65535	; assembler added errata NOP
  5745  002500  EF75  F012         	goto	l4284
  5746  002504                     u3800:
  5747  002504  FFFF               	dw	65535	; assembler added errata NOP
  5748  002506                     
  5749                           ;motors.c: 825:     T2CONbits.TMR2ON = 0;
  5750  002506  94CA               	bcf	202,2,c	;volatile
  5751  002508                     
  5752                           ;motors.c: 826:     TMR2 = 0;
  5753  002508  0E00               	movlw	0
  5754  00250A  6ECC               	movwf	204,c	;volatile
  5755  00250C                     
  5756                           ;motors.c: 829:     resetTM2_Temp();
  5757  00250C  ECF3  F012         	call	_resetTM2_Temp	;wreg free
  5758  002510  0012               	return		;funcret
  5759  002512  FFFF               	dw	65535	; errata NOP
  5760  002514                     __end_of_releaseObj:
  5761                           	callstack 0
  5762                           
  5763 ;; *************** function _pickObject *****************
  5764 ;; Defined at:
  5765 ;;		line 802 in file "motors.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;		None
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;		None
  5770 ;; Return value:  Size  Location     Type
  5771 ;;                  1    wreg      void 
  5772 ;; Registers used:
  5773 ;;		wreg, status,2, status,0, cstack
  5774 ;; Tracked objects:
  5775 ;;		On entry : 0/0
  5776 ;;		On exit  : 0/0
  5777 ;;		Unchanged: 0/0
  5778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5779 ;;      Params:         0       0       0       0       0       0       0
  5780 ;;      Locals:         0       0       0       0       0       0       0
  5781 ;;      Temps:          0       0       0       0       0       0       0
  5782 ;;      Totals:         0       0       0       0       0       0       0
  5783 ;;Total ram usage:        0 bytes
  5784 ;; Hardware stack levels used:    1
  5785 ;; Hardware stack levels required when called:    5
  5786 ;; This function calls:
  5787 ;;		_resetTM2_Temp
  5788 ;;		_stepMade
  5789 ;; This function is called by:
  5790 ;;		_executeData
  5791 ;; This function uses a non-reentrant model
  5792 ;;
  5793                           
  5794                           	psect	text32
  5795  002514                     __ptext32:
  5796                           	callstack 0
  5797  002514                     _pickObject:
  5798                           	callstack 0
  5799  002514  FFFF               	dw	65535	; assembler added errata NOP
  5800  002516                     
  5801                           ;motors.c: 803:     LATDbits.LATD1 = 1;
  5802  002516  828C               	bsf	140,1,c	;volatile
  5803                           
  5804                           ;motors.c: 806:     T2CONbits.TMR2ON = 1;
  5805  002518  84CA               	bsf	202,2,c	;volatile
  5806  00251A                     l4276:
  5807  00251A  FFFF               	dw	65535	; assembler added errata NOP
  5808  00251C  ECD7  F012         	call	_stepMade	;wreg free
  5809  002520  5012               	movf	?_stepMade^0,w,c
  5810  002522  1013               	iorwf	(?_stepMade+1)^0,w,c
  5811  002524  B4D8               	btfsc	status,2,c
  5812  002526  EF97  F012         	goto	u3791
  5813  00252A  EF9A  F012         	goto	u3790
  5814  00252E                     u3791:
  5815  00252E  FFFF               	dw	65535	; assembler added errata NOP
  5816  002530  EF8D  F012         	goto	l4276
  5817  002534                     u3790:
  5818  002534  FFFF               	dw	65535	; assembler added errata NOP
  5819  002536                     
  5820                           ;motors.c: 808:     T2CONbits.TMR2ON = 0;
  5821  002536  94CA               	bcf	202,2,c	;volatile
  5822  002538                     
  5823                           ;motors.c: 809:     TMR2 = 0;
  5824  002538  0E00               	movlw	0
  5825  00253A  6ECC               	movwf	204,c	;volatile
  5826  00253C                     
  5827                           ;motors.c: 812:     resetTM2_Temp();
  5828  00253C  ECF3  F012         	call	_resetTM2_Temp	;wreg free
  5829  002540  0012               	return		;funcret
  5830  002542  FFFF               	dw	65535	; errata NOP
  5831  002544                     __end_of_pickObject:
  5832                           	callstack 0
  5833                           
  5834 ;; *************** function _moveToPoint *****************
  5835 ;; Defined at:
  5836 ;;		line 315 in file "motors.c"
  5837 ;; Parameters:    Size  Location     Type
  5838 ;;  x1              2   20[COMRAM] int 
  5839 ;;  y1              2   22[COMRAM] int 
  5840 ;;  x2              2   24[COMRAM] int 
  5841 ;;  y2              2   26[COMRAM] int 
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;  keepMovingY     1   33[COMRAM] unsigned char 
  5844 ;;  keepMovingX     1   32[COMRAM] unsigned char 
  5845 ;;  MOT2Directio    1   31[COMRAM] unsigned char 
  5846 ;;  MOT1Directio    1   30[COMRAM] unsigned char 
  5847 ;; Return value:  Size  Location     Type
  5848 ;;                  1    wreg      unsigned char 
  5849 ;; Registers used:
  5850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5856 ;;      Params:         8       0       0       0       0       0       0
  5857 ;;      Locals:         4       0       0       0       0       0       0
  5858 ;;      Temps:          2       0       0       0       0       0       0
  5859 ;;      Totals:        14       0       0       0       0       0       0
  5860 ;;Total ram usage:       14 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:    5
  5863 ;; This function calls:
  5864 ;;		_resetStep
  5865 ;;		_resetTM0_Temp
  5866 ;;		_resetTM2_Temp
  5867 ;;		_stepCounter
  5868 ;;		_stepMade
  5869 ;; This function is called by:
  5870 ;;		_executeData
  5871 ;; This function uses a non-reentrant model
  5872 ;;
  5873                           
  5874                           	psect	text33
  5875  000A48                     __ptext33:
  5876                           	callstack 0
  5877  000A48                     _moveToPoint:
  5878                           	callstack 0
  5879  000A48  FFFF               	dw	65535	; assembler added errata NOP
  5880  000A4A                     
  5881                           ;motors.c: 317:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 337:     if((x
      +                          2 - x1) > 0){
  5882  000A4A  5015               	movf	moveToPoint@x1^0,w,c
  5883  000A4C  5C19               	subwf	moveToPoint@x2^0,w,c
  5884  000A4E  6E1D               	movwf	??_moveToPoint^0,c
  5885  000A50  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5886  000A52  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5887  000A54  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5888  000A56  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5889  000A58  EF36  F005         	goto	u3381
  5890  000A5C  501E               	movf	(??_moveToPoint+1)^0,w,c
  5891  000A5E  E109               	bnz	u3380
  5892  000A60  041D               	decf	??_moveToPoint^0,w,c
  5893  000A62  A0D8               	btfss	status,0,c
  5894  000A64  EF36  F005         	goto	u3381
  5895  000A68  EF39  F005         	goto	u3380
  5896  000A6C                     u3381:
  5897  000A6C  FFFF               	dw	65535	; assembler added errata NOP
  5898  000A6E  EF40  F005         	goto	l154
  5899  000A72                     u3380:
  5900  000A72  FFFF               	dw	65535	; assembler added errata NOP
  5901  000A74                     
  5902                           ;motors.c: 338:         motCounter[0][1] = 1;
  5903  000A74  0E01               	movlw	1
  5904  000A76  6E68               	movwf	(_motCounter+1)^0,c
  5905                           
  5906                           ;motors.c: 339:         MOT1Direction = 1;
  5907  000A78  0E01               	movlw	1
  5908  000A7A  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5909                           
  5910                           ;motors.c: 340:     }else{
  5911  000A7C  EF44  F005         	goto	l4032
  5912  000A80                     l154:
  5913  000A80  FFFF               	dw	65535	; assembler added errata NOP
  5914                           
  5915                           ;motors.c: 341:         motCounter[0][1] = -1;
  5916  000A82  6868               	setf	(_motCounter+1)^0,c
  5917  000A84                     
  5918                           ;motors.c: 342:         MOT1Direction = 0;
  5919  000A84  0E00               	movlw	0
  5920  000A86  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5921  000A88                     l4032:
  5922  000A88  FFFF               	dw	65535	; assembler added errata NOP
  5923                           
  5924                           ;motors.c: 345:     if((y2 - y1) > 0){
  5925  000A8A  5017               	movf	moveToPoint@y1^0,w,c
  5926  000A8C  5C1B               	subwf	moveToPoint@y2^0,w,c
  5927  000A8E  6E1D               	movwf	??_moveToPoint^0,c
  5928  000A90  5018               	movf	(moveToPoint@y1+1)^0,w,c
  5929  000A92  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  5930  000A94  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5931  000A96  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5932  000A98  EF56  F005         	goto	u3391
  5933  000A9C  501E               	movf	(??_moveToPoint+1)^0,w,c
  5934  000A9E  E109               	bnz	u3390
  5935  000AA0  041D               	decf	??_moveToPoint^0,w,c
  5936  000AA2  A0D8               	btfss	status,0,c
  5937  000AA4  EF56  F005         	goto	u3391
  5938  000AA8  EF59  F005         	goto	u3390
  5939  000AAC                     u3391:
  5940  000AAC  FFFF               	dw	65535	; assembler added errata NOP
  5941  000AAE  EF60  F005         	goto	l156
  5942  000AB2                     u3390:
  5943  000AB2  FFFF               	dw	65535	; assembler added errata NOP
  5944  000AB4                     
  5945                           ;motors.c: 346:         motCounter[1][1] = 1;
  5946  000AB4  0E01               	movlw	1
  5947  000AB6  6E6A               	movwf	(_motCounter+3)^0,c
  5948                           
  5949                           ;motors.c: 347:         MOT2Direction = 1;
  5950  000AB8  0E01               	movlw	1
  5951  000ABA  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5952                           
  5953                           ;motors.c: 348:     }else{
  5954  000ABC  EF64  F005         	goto	l157
  5955  000AC0                     l156:
  5956  000AC0  FFFF               	dw	65535	; assembler added errata NOP
  5957                           
  5958                           ;motors.c: 349:         motCounter[1][1] = -1;
  5959  000AC2  686A               	setf	(_motCounter+3)^0,c
  5960  000AC4                     
  5961                           ;motors.c: 350:         MOT2Direction = 0;
  5962  000AC4  0E00               	movlw	0
  5963  000AC6  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5964  000AC8                     l157:
  5965  000AC8  FFFF               	dw	65535	; assembler added errata NOP
  5966                           
  5967                           ;motors.c: 355:     unsigned char keepMovingX = 1;
  5968  000ACA  0E01               	movlw	1
  5969  000ACC  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5970                           
  5971                           ;motors.c: 356:     unsigned char keepMovingY = 1;
  5972  000ACE  0E01               	movlw	1
  5973  000AD0  6E22               	movwf	moveToPoint@keepMovingY^0,c
  5974  000AD2                     
  5975                           ;motors.c: 359:     T2CONbits.TMR2ON = 1;
  5976  000AD2  84CA               	bsf	202,2,c	;volatile
  5977                           
  5978                           ;motors.c: 361:     tm0Error = 0;
  5979  000AD4  0E00               	movlw	0
  5980  000AD6  6E5A               	movwf	(_tm0Error+1)^0,c
  5981  000AD8  0E00               	movlw	0
  5982  000ADA  6E59               	movwf	_tm0Error^0,c
  5983                           
  5984                           ;motors.c: 362:     tm0Limit = 200;
  5985  000ADC  0EC8               	movlw	200
  5986  000ADE  6E66               	movwf	_tm0Limit^0,c
  5987  000AE0                     
  5988                           ;motors.c: 363:     T0CONbits.TMR0ON = 1;
  5989  000AE0  8ED5               	bsf	213,7,c	;volatile
  5990                           
  5991                           ;motors.c: 365:     while(keepMovingX || keepMovingY){
  5992  000AE2  EFA0  F006         	goto	l4104
  5993  000AE6                     l4042:
  5994  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  5995                           
  5996                           ;motors.c: 368:         if(tm0Error){
  5997  000AE8  5059               	movf	_tm0Error^0,w,c
  5998  000AEA  105A               	iorwf	(_tm0Error+1)^0,w,c
  5999  000AEC  B4D8               	btfsc	status,2,c
  6000  000AEE  EF7B  F005         	goto	u3401
  6001  000AF2  EF7E  F005         	goto	u3400
  6002  000AF6                     u3401:
  6003  000AF6  FFFF               	dw	65535	; assembler added errata NOP
  6004  000AF8  EF85  F005         	goto	l4046
  6005  000AFC                     u3400:
  6006  000AFC  FFFF               	dw	65535	; assembler added errata NOP
  6007  000AFE                     
  6008                           ;motors.c: 374:             tm0Error = 4;
  6009  000AFE  0E00               	movlw	0
  6010  000B00  6E5A               	movwf	(_tm0Error+1)^0,c
  6011  000B02  0E04               	movlw	4
  6012  000B04  6E59               	movwf	_tm0Error^0,c
  6013                           
  6014                           ;motors.c: 375:             break;
  6015  000B06  EFB4  F006         	goto	l161
  6016  000B0A                     l4046:
  6017  000B0A  FFFF               	dw	65535	; assembler added errata NOP
  6018                           
  6019                           ;motors.c: 383:         if(MOT1Direction == 1){
  6020  000B0C  041F               	decf	moveToPoint@MOT1Direction^0,w,c
  6021  000B0E  A4D8               	btfss	status,2,c
  6022  000B10  EF8C  F005         	goto	u3411
  6023  000B14  EF8F  F005         	goto	u3410
  6024  000B18                     u3411:
  6025  000B18  FFFF               	dw	65535	; assembler added errata NOP
  6026  000B1A  EFCE  F005         	goto	l4060
  6027  000B1E                     u3410:
  6028  000B1E  FFFF               	dw	65535	; assembler added errata NOP
  6029  000B20                     
  6030                           ;motors.c: 384:             if(x1 + stepCounter() >= x2){
  6031  000B20  EC3B  F013         	call	_stepCounter	;wreg free
  6032  000B24  5015               	movf	moveToPoint@x1^0,w,c
  6033  000B26  2612               	addwf	?_stepCounter^0,f,c
  6034  000B28  5016               	movf	(moveToPoint@x1+1)^0,w,c
  6035  000B2A  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6036  000B2C  5019               	movf	moveToPoint@x2^0,w,c
  6037  000B2E  5C12               	subwf	?_stepCounter^0,w,c
  6038  000B30  501A               	movf	(moveToPoint@x2+1)^0,w,c
  6039  000B32  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6040  000B34  A0D8               	btfss	status,0,c
  6041  000B36  EF9F  F005         	goto	u3421
  6042  000B3A  EFA2  F005         	goto	u3420
  6043  000B3E                     u3421:
  6044  000B3E  FFFF               	dw	65535	; assembler added errata NOP
  6045  000B40  EFA8  F005         	goto	l4052
  6046  000B44                     u3420:
  6047  000B44  FFFF               	dw	65535	; assembler added errata NOP
  6048  000B46                     l4050:
  6049  000B46  FFFF               	dw	65535	; assembler added errata NOP
  6050                           
  6051                           ;motors.c: 386:                 keepMovingX = 0;
  6052  000B48  0E00               	movlw	0
  6053  000B4A  6E21               	movwf	moveToPoint@keepMovingX^0,c
  6054                           
  6055                           ;motors.c: 387:             }else if(keepMovingX){
  6056  000B4C  EF0C  F006         	goto	l4074
  6057  000B50                     l4052:
  6058  000B50  FFFF               	dw	65535	; assembler added errata NOP
  6059  000B52  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6060  000B54  B4D8               	btfsc	status,2,c
  6061  000B56  EFAF  F005         	goto	u3431
  6062  000B5A  EFB2  F005         	goto	u3430
  6063  000B5E                     u3431:
  6064  000B5E  FFFF               	dw	65535	; assembler added errata NOP
  6065  000B60  EF0C  F006         	goto	l4074
  6066  000B64                     u3430:
  6067  000B64  FFFF               	dw	65535	; assembler added errata NOP
  6068  000B66                     
  6069                           ;motors.c: 393:             motCounter[0][0] += motCounter[0][1];
  6070  000B66  5068               	movf	(_motCounter+1)^0,w,c
  6071  000B68  2667               	addwf	_motCounter^0,f,c
  6072                           
  6073                           ;motors.c: 394:             if(motCounter[0][0] > 3){
  6074  000B6A  5067               	movf	_motCounter^0,w,c
  6075  000B6C  0A80               	xorlw	128
  6076  000B6E  0F7C               	addlw	-132
  6077  000B70  A0D8               	btfss	status,0,c
  6078  000B72  EFBD  F005         	goto	u3441
  6079  000B76  EFC0  F005         	goto	u3440
  6080  000B7A                     u3441:
  6081  000B7A  FFFF               	dw	65535	; assembler added errata NOP
  6082  000B7C  EFC3  F005         	goto	l4058
  6083  000B80                     u3440:
  6084  000B80  FFFF               	dw	65535	; assembler added errata NOP
  6085  000B82                     
  6086                           ;motors.c: 395:                 motCounter[0][0] = 0;
  6087  000B82  0E00               	movlw	0
  6088  000B84  6E67               	movwf	_motCounter^0,c
  6089  000B86                     l4058:
  6090  000B86  FFFF               	dw	65535	; assembler added errata NOP
  6091                           
  6092                           ;motors.c: 398:             LATA = stepMot1[motCounter[0][0]];
  6093  000B88  0E8C               	movlw	low _stepMot1
  6094  000B8A  2467               	addwf	_motCounter^0,w,c
  6095  000B8C  6ED9               	movwf	fsr2l,c
  6096  000B8E  6ADA               	clrf	fsr2h,c
  6097  000B90  0E00               	movlw	high _stepMot1
  6098  000B92  22DA               	addwfc	fsr2h,f,c
  6099  000B94  50DF               	movf	indf2,w,c
  6100  000B96  6E89               	movwf	137,c	;volatile
  6101  000B98  EF0C  F006         	goto	l4074
  6102  000B9C                     l4060:
  6103  000B9C  FFFF               	dw	65535	; assembler added errata NOP
  6104  000B9E  501F               	movf	moveToPoint@MOT1Direction^0,w,c
  6105  000BA0  A4D8               	btfss	status,2,c
  6106  000BA2  EFD5  F005         	goto	u3451
  6107  000BA6  EFD8  F005         	goto	u3450
  6108  000BAA                     u3451:
  6109  000BAA  FFFF               	dw	65535	; assembler added errata NOP
  6110  000BAC  EF0C  F006         	goto	l4074
  6111  000BB0                     u3450:
  6112  000BB0  FFFF               	dw	65535	; assembler added errata NOP
  6113  000BB2                     
  6114                           ;motors.c: 402:             if(x1 - stepCounter() <= x2){
  6115  000BB2  EC3B  F013         	call	_stepCounter	;wreg free
  6116  000BB6  C015  F01D         	movff	moveToPoint@x1,??_moveToPoint
  6117  000BBA  C016  F01E         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6118  000BBE  5012               	movf	?_stepCounter^0,w,c
  6119  000BC0  5E1D               	subwf	??_moveToPoint^0,f,c
  6120  000BC2  5013               	movf	(?_stepCounter+1)^0,w,c
  6121  000BC4  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6122  000BC6  501D               	movf	??_moveToPoint^0,w,c
  6123  000BC8  5C19               	subwf	moveToPoint@x2^0,w,c
  6124  000BCA  501E               	movf	(??_moveToPoint+1)^0,w,c
  6125  000BCC  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  6126  000BCE  A0D8               	btfss	status,0,c
  6127  000BD0  EFEC  F005         	goto	u3461
  6128  000BD4  EFEF  F005         	goto	u3460
  6129  000BD8                     u3461:
  6130  000BD8  FFFF               	dw	65535	; assembler added errata NOP
  6131  000BDA  EFF2  F005         	goto	l4066
  6132  000BDE                     u3460:
  6133  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  6134  000BE0  EFA3  F005         	goto	l4050
  6135  000BE4                     l4066:
  6136  000BE4  FFFF               	dw	65535	; assembler added errata NOP
  6137  000BE6  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6138  000BE8  B4D8               	btfsc	status,2,c
  6139  000BEA  EFF9  F005         	goto	u3471
  6140  000BEE  EFFC  F005         	goto	u3470
  6141  000BF2                     u3471:
  6142  000BF2  FFFF               	dw	65535	; assembler added errata NOP
  6143  000BF4  EF0C  F006         	goto	l4074
  6144  000BF8                     u3470:
  6145  000BF8  FFFF               	dw	65535	; assembler added errata NOP
  6146  000BFA                     
  6147                           ;motors.c: 411:             motCounter[0][0] += motCounter[0][1];
  6148  000BFA  5068               	movf	(_motCounter+1)^0,w,c
  6149  000BFC  2667               	addwf	_motCounter^0,f,c
  6150                           
  6151                           ;motors.c: 412:             if(motCounter[0][0] < 0){
  6152  000BFE  BE67               	btfsc	_motCounter^0,7,c
  6153  000C00  EF07  F006         	goto	u3480
  6154  000C04  EF04  F006         	goto	u3481
  6155  000C08                     u3481:
  6156  000C08  FFFF               	dw	65535	; assembler added errata NOP
  6157  000C0A  EFC3  F005         	goto	l4058
  6158  000C0E                     u3480:
  6159  000C0E  FFFF               	dw	65535	; assembler added errata NOP
  6160  000C10                     
  6161                           ;motors.c: 413:                 motCounter[0][0] = 3;
  6162  000C10  0E03               	movlw	3
  6163  000C12  6E67               	movwf	_motCounter^0,c
  6164  000C14  EFC3  F005         	goto	l4058
  6165  000C18                     l4074:
  6166  000C18  FFFF               	dw	65535	; assembler added errata NOP
  6167                           
  6168                           ;motors.c: 421:         if(MOT2Direction == 1){
  6169  000C1A  0420               	decf	moveToPoint@MOT2Direction^0,w,c
  6170  000C1C  A4D8               	btfss	status,2,c
  6171  000C1E  EF13  F006         	goto	u3491
  6172  000C22  EF16  F006         	goto	u3490
  6173  000C26                     u3491:
  6174  000C26  FFFF               	dw	65535	; assembler added errata NOP
  6175  000C28  EF55  F006         	goto	l4088
  6176  000C2C                     u3490:
  6177  000C2C  FFFF               	dw	65535	; assembler added errata NOP
  6178  000C2E                     
  6179                           ;motors.c: 423:             if(y1 + stepCounter() >= y2){
  6180  000C2E  EC3B  F013         	call	_stepCounter	;wreg free
  6181  000C32  5017               	movf	moveToPoint@y1^0,w,c
  6182  000C34  2612               	addwf	?_stepCounter^0,f,c
  6183  000C36  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6184  000C38  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6185  000C3A  501B               	movf	moveToPoint@y2^0,w,c
  6186  000C3C  5C12               	subwf	?_stepCounter^0,w,c
  6187  000C3E  501C               	movf	(moveToPoint@y2+1)^0,w,c
  6188  000C40  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6189  000C42  A0D8               	btfss	status,0,c
  6190  000C44  EF26  F006         	goto	u3501
  6191  000C48  EF29  F006         	goto	u3500
  6192  000C4C                     u3501:
  6193  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  6194  000C4E  EF2F  F006         	goto	l4080
  6195  000C52                     u3500:
  6196  000C52  FFFF               	dw	65535	; assembler added errata NOP
  6197  000C54                     l4078:
  6198  000C54  FFFF               	dw	65535	; assembler added errata NOP
  6199                           
  6200                           ;motors.c: 425:                 keepMovingY = 0;
  6201  000C56  0E00               	movlw	0
  6202  000C58  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6203                           
  6204                           ;motors.c: 426:             }else if(keepMovingY){
  6205  000C5A  EF93  F006         	goto	l4102
  6206  000C5E                     l4080:
  6207  000C5E  FFFF               	dw	65535	; assembler added errata NOP
  6208  000C60  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6209  000C62  B4D8               	btfsc	status,2,c
  6210  000C64  EF36  F006         	goto	u3511
  6211  000C68  EF39  F006         	goto	u3510
  6212  000C6C                     u3511:
  6213  000C6C  FFFF               	dw	65535	; assembler added errata NOP
  6214  000C6E  EF93  F006         	goto	l178
  6215  000C72                     u3510:
  6216  000C72  FFFF               	dw	65535	; assembler added errata NOP
  6217  000C74                     
  6218                           ;motors.c: 432:             motCounter[1][0] += motCounter[1][1];
  6219  000C74  506A               	movf	(_motCounter+3)^0,w,c
  6220  000C76  2669               	addwf	(_motCounter+2)^0,f,c
  6221                           
  6222                           ;motors.c: 433:             if(motCounter[1][0] > 3){
  6223  000C78  5069               	movf	(_motCounter+2)^0,w,c
  6224  000C7A  0A80               	xorlw	128
  6225  000C7C  0F7C               	addlw	-132
  6226  000C7E  A0D8               	btfss	status,0,c
  6227  000C80  EF44  F006         	goto	u3521
  6228  000C84  EF47  F006         	goto	u3520
  6229  000C88                     u3521:
  6230  000C88  FFFF               	dw	65535	; assembler added errata NOP
  6231  000C8A  EF4A  F006         	goto	l4086
  6232  000C8E                     u3520:
  6233  000C8E  FFFF               	dw	65535	; assembler added errata NOP
  6234  000C90                     
  6235                           ;motors.c: 434:                 motCounter[1][0] = 0;
  6236  000C90  0E00               	movlw	0
  6237  000C92  6E69               	movwf	(_motCounter+2)^0,c
  6238  000C94                     l4086:
  6239  000C94  FFFF               	dw	65535	; assembler added errata NOP
  6240                           
  6241                           ;motors.c: 437:             LATB = stepMot2[motCounter[1][0]];
  6242  000C96  0E88               	movlw	low _stepMot2
  6243  000C98  2469               	addwf	(_motCounter+2)^0,w,c
  6244  000C9A  6ED9               	movwf	fsr2l,c
  6245  000C9C  6ADA               	clrf	fsr2h,c
  6246  000C9E  0E00               	movlw	high _stepMot2
  6247  000CA0  22DA               	addwfc	fsr2h,f,c
  6248  000CA2  50DF               	movf	indf2,w,c
  6249  000CA4  6E8A               	movwf	138,c	;volatile
  6250  000CA6  EF93  F006         	goto	l4102
  6251  000CAA                     l4088:
  6252  000CAA  FFFF               	dw	65535	; assembler added errata NOP
  6253  000CAC  5020               	movf	moveToPoint@MOT2Direction^0,w,c
  6254  000CAE  A4D8               	btfss	status,2,c
  6255  000CB0  EF5C  F006         	goto	u3531
  6256  000CB4  EF5F  F006         	goto	u3530
  6257  000CB8                     u3531:
  6258  000CB8  FFFF               	dw	65535	; assembler added errata NOP
  6259  000CBA  EF93  F006         	goto	l4102
  6260  000CBE                     u3530:
  6261  000CBE  FFFF               	dw	65535	; assembler added errata NOP
  6262  000CC0                     
  6263                           ;motors.c: 442:             if(y1 - stepCounter() <= y2){
  6264  000CC0  EC3B  F013         	call	_stepCounter	;wreg free
  6265  000CC4  C017  F01D         	movff	moveToPoint@y1,??_moveToPoint
  6266  000CC8  C018  F01E         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6267  000CCC  5012               	movf	?_stepCounter^0,w,c
  6268  000CCE  5E1D               	subwf	??_moveToPoint^0,f,c
  6269  000CD0  5013               	movf	(?_stepCounter+1)^0,w,c
  6270  000CD2  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6271  000CD4  501D               	movf	??_moveToPoint^0,w,c
  6272  000CD6  5C1B               	subwf	moveToPoint@y2^0,w,c
  6273  000CD8  501E               	movf	(??_moveToPoint+1)^0,w,c
  6274  000CDA  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6275  000CDC  A0D8               	btfss	status,0,c
  6276  000CDE  EF73  F006         	goto	u3541
  6277  000CE2  EF76  F006         	goto	u3540
  6278  000CE6                     u3541:
  6279  000CE6  FFFF               	dw	65535	; assembler added errata NOP
  6280  000CE8  EF79  F006         	goto	l4094
  6281  000CEC                     u3540:
  6282  000CEC  FFFF               	dw	65535	; assembler added errata NOP
  6283  000CEE  EF2A  F006         	goto	l4078
  6284  000CF2                     l4094:
  6285  000CF2  FFFF               	dw	65535	; assembler added errata NOP
  6286  000CF4  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6287  000CF6  B4D8               	btfsc	status,2,c
  6288  000CF8  EF80  F006         	goto	u3551
  6289  000CFC  EF83  F006         	goto	u3550
  6290  000D00                     u3551:
  6291  000D00  FFFF               	dw	65535	; assembler added errata NOP
  6292  000D02  EF93  F006         	goto	l4102
  6293  000D06                     u3550:
  6294  000D06  FFFF               	dw	65535	; assembler added errata NOP
  6295  000D08                     
  6296                           ;motors.c: 451:             motCounter[1][0] += motCounter[1][1];
  6297  000D08  506A               	movf	(_motCounter+3)^0,w,c
  6298  000D0A  2669               	addwf	(_motCounter+2)^0,f,c
  6299                           
  6300                           ;motors.c: 452:             if(motCounter[1][0] < 0){
  6301  000D0C  BE69               	btfsc	(_motCounter+2)^0,7,c
  6302  000D0E  EF8E  F006         	goto	u3560
  6303  000D12  EF8B  F006         	goto	u3561
  6304  000D16                     u3561:
  6305  000D16  FFFF               	dw	65535	; assembler added errata NOP
  6306  000D18  EF4A  F006         	goto	l4086
  6307  000D1C                     u3560:
  6308  000D1C  FFFF               	dw	65535	; assembler added errata NOP
  6309  000D1E                     
  6310                           ;motors.c: 453:                 motCounter[1][0] = 3;
  6311  000D1E  0E03               	movlw	3
  6312  000D20  6E69               	movwf	(_motCounter+2)^0,c
  6313  000D22  EF4A  F006         	goto	l4086
  6314  000D26                     l178:
  6315  000D26                     l4102:
  6316  000D26  FFFF               	dw	65535	; assembler added errata NOP
  6317  000D28  ECD7  F012         	call	_stepMade	;wreg free
  6318  000D2C  5012               	movf	?_stepMade^0,w,c
  6319  000D2E  1013               	iorwf	(?_stepMade+1)^0,w,c
  6320  000D30  B4D8               	btfsc	status,2,c
  6321  000D32  EF9D  F006         	goto	u3571
  6322  000D36  EFA0  F006         	goto	u3570
  6323  000D3A                     u3571:
  6324  000D3A  FFFF               	dw	65535	; assembler added errata NOP
  6325  000D3C  EF93  F006         	goto	l4102
  6326  000D40                     u3570:
  6327  000D40                     l4104:
  6328  000D40  FFFF               	dw	65535	; assembler added errata NOP
  6329                           
  6330                           ;motors.c: 365:     while(keepMovingX || keepMovingY){
  6331  000D42  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6332  000D44  A4D8               	btfss	status,2,c
  6333  000D46  EFA7  F006         	goto	u3581
  6334  000D4A  EFAA  F006         	goto	u3580
  6335  000D4E                     u3581:
  6336  000D4E  FFFF               	dw	65535	; assembler added errata NOP
  6337  000D50  EF73  F005         	goto	l4042
  6338  000D54                     u3580:
  6339  000D54  FFFF               	dw	65535	; assembler added errata NOP
  6340  000D56  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6341  000D58  A4D8               	btfss	status,2,c
  6342  000D5A  EFB1  F006         	goto	u3591
  6343  000D5E  EFB4  F006         	goto	u3590
  6344  000D62                     u3591:
  6345  000D62  FFFF               	dw	65535	; assembler added errata NOP
  6346  000D64  EF73  F005         	goto	l4042
  6347  000D68                     u3590:
  6348  000D68                     l161:
  6349  000D68  FFFF               	dw	65535	; assembler added errata NOP
  6350                           
  6351                           ;motors.c: 476:     T0CONbits.TMR0ON = 0;
  6352  000D6A  9ED5               	bcf	213,7,c	;volatile
  6353                           
  6354                           ;motors.c: 477:     T2CONbits.TMR2ON = 0;
  6355  000D6C  94CA               	bcf	202,2,c	;volatile
  6356  000D6E                     
  6357                           ;motors.c: 479:     resetTM0_Temp();
  6358  000D6E  EC55  F013         	call	_resetTM0_Temp	;wreg free
  6359                           
  6360                           ;motors.c: 480:     resetTM2_Temp();
  6361  000D72  ECF3  F012         	call	_resetTM2_Temp	;wreg free
  6362  000D76                     
  6363                           ;motors.c: 482:     TMR0 = 0;
  6364  000D76  0E00               	movlw	0
  6365  000D78  6ED7               	movwf	215,c	;volatile
  6366  000D7A  0E00               	movlw	0
  6367  000D7C  6ED6               	movwf	214,c	;volatile
  6368  000D7E                     
  6369                           ;motors.c: 483:     TMR2 = 0;
  6370  000D7E  0E00               	movlw	0
  6371  000D80  6ECC               	movwf	204,c	;volatile
  6372                           
  6373                           ;motors.c: 486:     resetStep();
  6374  000D82  EC5A  F013         	call	_resetStep	;wreg free
  6375  000D86                     
  6376                           ;motors.c: 488:     return(tm0Error);
  6377  000D86  5059               	movf	_tm0Error^0,w,c
  6378  000D88  0012               	return		;funcret
  6379  000D8A  FFFF               	dw	65535	; errata NOP
  6380  000D8C                     __end_of_moveToPoint:
  6381                           	callstack 0
  6382                           
  6383 ;; *************** function _stepCounter *****************
  6384 ;; Defined at:
  6385 ;;		line 71 in file "timer.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;		None
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;		None
  6390 ;; Return value:  Size  Location     Type
  6391 ;;                  2   17[COMRAM] unsigned int 
  6392 ;; Registers used:
  6393 ;;		None
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6399 ;;      Params:         2       0       0       0       0       0       0
  6400 ;;      Locals:         0       0       0       0       0       0       0
  6401 ;;      Temps:          0       0       0       0       0       0       0
  6402 ;;      Totals:         2       0       0       0       0       0       0
  6403 ;;Total ram usage:        2 bytes
  6404 ;; Hardware stack levels used:    1
  6405 ;; Hardware stack levels required when called:    4
  6406 ;; This function calls:
  6407 ;;		Nothing
  6408 ;; This function is called by:
  6409 ;;		_moveToPoint
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413                           	psect	text34
  6414  002676                     __ptext34:
  6415                           	callstack 0
  6416  002676                     _stepCounter:
  6417                           	callstack 0
  6418  002676  FFFF               	dw	65535	; assembler added errata NOP
  6419  002678                     
  6420                           ;timer.c: 72:     return pwmStep;
  6421  002678  C05C  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6422  00267C  6A13               	clrf	(?_stepCounter+1)^0,c
  6423  00267E  0012               	return		;funcret
  6424  002680  FFFF               	dw	65535	; errata NOP
  6425  002682                     __end_of_stepCounter:
  6426                           	callstack 0
  6427                           
  6428 ;; *************** function _liftArm *****************
  6429 ;; Defined at:
  6430 ;;		line 690 in file "motors.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;		None
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;		None
  6435 ;; Return value:  Size  Location     Type
  6436 ;;                  1    wreg      unsigned char 
  6437 ;; Registers used:
  6438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6444 ;;      Params:         0       0       0       0       0       0       0
  6445 ;;      Locals:         0       0       0       0       0       0       0
  6446 ;;      Temps:          0       0       0       0       0       0       0
  6447 ;;      Totals:         0       0       0       0       0       0       0
  6448 ;;Total ram usage:        0 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:    5
  6451 ;; This function calls:
  6452 ;;		_resetStep
  6453 ;;		_resetTM0_Temp
  6454 ;;		_resetTM2_Temp
  6455 ;;		_stepMade
  6456 ;; This function is called by:
  6457 ;;		_executeData
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           	psect	text35
  6462  002222                     __ptext35:
  6463                           	callstack 0
  6464  002222                     _liftArm:
  6465                           	callstack 0
  6466  002222  FFFF               	dw	65535	; assembler added errata NOP
  6467  002224                     
  6468                           ;motors.c: 696:     motCounter[2][1] = -1;
  6469  002224  686C               	setf	(_motCounter+5)^0,c
  6470                           
  6471                           ;motors.c: 699:     T2CONbits.TMR2ON = 1;
  6472  002226  84CA               	bsf	202,2,c	;volatile
  6473  002228                     
  6474                           ;motors.c: 701:     tm0Error = 0;
  6475  002228  0E00               	movlw	0
  6476  00222A  6E5A               	movwf	(_tm0Error+1)^0,c
  6477  00222C  0E00               	movlw	0
  6478  00222E  6E59               	movwf	_tm0Error^0,c
  6479                           
  6480                           ;motors.c: 702:     tm0Limit = 200;
  6481  002230  0EC8               	movlw	200
  6482  002232  6E66               	movwf	_tm0Limit^0,c
  6483  002234                     
  6484                           ;motors.c: 703:     T0CONbits.TMR0ON = 1;
  6485  002234  8ED5               	bsf	213,7,c	;volatile
  6486                           
  6487                           ;motors.c: 707:     while(!PORTEbits.RE2){
  6488  002236  EF55  F011         	goto	l214
  6489  00223A                     l4224:
  6490  00223A  FFFF               	dw	65535	; assembler added errata NOP
  6491                           
  6492                           ;motors.c: 709:         resetStep();
  6493  00223C  EC5A  F013         	call	_resetStep	;wreg free
  6494  002240                     
  6495                           ;motors.c: 712:         if(tm0Error){
  6496  002240  5059               	movf	_tm0Error^0,w,c
  6497  002242  105A               	iorwf	(_tm0Error+1)^0,w,c
  6498  002244  B4D8               	btfsc	status,2,c
  6499  002246  EF27  F011         	goto	u3721
  6500  00224A  EF2A  F011         	goto	u3720
  6501  00224E                     u3721:
  6502  00224E  FFFF               	dw	65535	; assembler added errata NOP
  6503  002250  EF31  F011         	goto	l4230
  6504  002254                     u3720:
  6505  002254  FFFF               	dw	65535	; assembler added errata NOP
  6506  002256                     
  6507                           ;motors.c: 717:             tm0Error = 6;
  6508  002256  0E00               	movlw	0
  6509  002258  6E5A               	movwf	(_tm0Error+1)^0,c
  6510  00225A  0E06               	movlw	6
  6511  00225C  6E59               	movwf	_tm0Error^0,c
  6512                           
  6513                           ;motors.c: 718:             break;
  6514  00225E  EF5E  F011         	goto	l217
  6515  002262                     l4230:
  6516  002262  FFFF               	dw	65535	; assembler added errata NOP
  6517                           
  6518                           ;motors.c: 727:             motCounter[2][0] += motCounter[2][1];
  6519  002264  506C               	movf	(_motCounter+5)^0,w,c
  6520  002266  266B               	addwf	(_motCounter+4)^0,f,c
  6521                           
  6522                           ;motors.c: 728:             if(motCounter[2][0] < 0){
  6523  002268  BE6B               	btfsc	(_motCounter+4)^0,7,c
  6524  00226A  EF3C  F011         	goto	u3730
  6525  00226E  EF39  F011         	goto	u3731
  6526  002272                     u3731:
  6527  002272  FFFF               	dw	65535	; assembler added errata NOP
  6528  002274  EF3F  F011         	goto	l4234
  6529  002278                     u3730:
  6530  002278  FFFF               	dw	65535	; assembler added errata NOP
  6531  00227A                     
  6532                           ;motors.c: 729:                 motCounter[2][0] = 3;
  6533  00227A  0E03               	movlw	3
  6534  00227C  6E6B               	movwf	(_motCounter+4)^0,c
  6535  00227E                     l4234:
  6536  00227E  FFFF               	dw	65535	; assembler added errata NOP
  6537                           
  6538                           ;motors.c: 732:             LATC = stepMot3[motCounter[2][0]];
  6539  002280  0E84               	movlw	low _stepMot3
  6540  002282  246B               	addwf	(_motCounter+4)^0,w,c
  6541  002284  6ED9               	movwf	fsr2l,c
  6542  002286  6ADA               	clrf	fsr2h,c
  6543  002288  0E00               	movlw	high _stepMot3
  6544  00228A  22DA               	addwfc	fsr2h,f,c
  6545  00228C  50DF               	movf	indf2,w,c
  6546  00228E  6E8B               	movwf	139,c	;volatile
  6547  002290                     l4236:
  6548  002290  FFFF               	dw	65535	; assembler added errata NOP
  6549  002292  ECD7  F012         	call	_stepMade	;wreg free
  6550  002296  5012               	movf	?_stepMade^0,w,c
  6551  002298  1013               	iorwf	(?_stepMade+1)^0,w,c
  6552  00229A  B4D8               	btfsc	status,2,c
  6553  00229C  EF52  F011         	goto	u3741
  6554  0022A0  EF55  F011         	goto	u3740
  6555  0022A4                     u3741:
  6556  0022A4  FFFF               	dw	65535	; assembler added errata NOP
  6557  0022A6  EF48  F011         	goto	l4236
  6558  0022AA                     u3740:
  6559  0022AA                     l214:
  6560  0022AA  FFFF               	dw	65535	; assembler added errata NOP
  6561                           
  6562                           ;motors.c: 707:     while(!PORTEbits.RE2){
  6563  0022AC  A484               	btfss	132,2,c	;volatile
  6564  0022AE  EF5B  F011         	goto	u3751
  6565  0022B2  EF5E  F011         	goto	u3750
  6566  0022B6                     u3751:
  6567  0022B6  FFFF               	dw	65535	; assembler added errata NOP
  6568  0022B8  EF1D  F011         	goto	l4224
  6569  0022BC                     u3750:
  6570  0022BC                     l217:
  6571  0022BC  FFFF               	dw	65535	; assembler added errata NOP
  6572                           
  6573                           ;motors.c: 749:     T0CONbits.TMR0ON = 0;
  6574  0022BE  9ED5               	bcf	213,7,c	;volatile
  6575                           
  6576                           ;motors.c: 750:     T2CONbits.TMR2ON = 0;
  6577  0022C0  94CA               	bcf	202,2,c	;volatile
  6578  0022C2                     
  6579                           ;motors.c: 752:     resetTM0_Temp();
  6580  0022C2  EC55  F013         	call	_resetTM0_Temp	;wreg free
  6581                           
  6582                           ;motors.c: 753:     resetTM2_Temp();
  6583  0022C6  ECF3  F012         	call	_resetTM2_Temp	;wreg free
  6584  0022CA                     
  6585                           ;motors.c: 755:     TMR0 = 0;
  6586  0022CA  0E00               	movlw	0
  6587  0022CC  6ED7               	movwf	215,c	;volatile
  6588  0022CE  0E00               	movlw	0
  6589  0022D0  6ED6               	movwf	214,c	;volatile
  6590  0022D2                     
  6591                           ;motors.c: 756:     TMR2 = 0;
  6592  0022D2  0E00               	movlw	0
  6593  0022D4  6ECC               	movwf	204,c	;volatile
  6594                           
  6595                           ;motors.c: 759:     resetStep();
  6596  0022D6  EC5A  F013         	call	_resetStep	;wreg free
  6597  0022DA                     
  6598                           ;motors.c: 761:     return(tm0Error);
  6599  0022DA  5059               	movf	_tm0Error^0,w,c
  6600  0022DC  0012               	return		;funcret
  6601  0022DE  FFFF               	dw	65535	; errata NOP
  6602  0022E0                     __end_of_liftArm:
  6603                           	callstack 0
  6604                           
  6605 ;; *************** function _stepMade *****************
  6606 ;; Defined at:
  6607 ;;		line 60 in file "timer.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;		None
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;  temp            1   19[COMRAM] unsigned char 
  6612 ;; Return value:  Size  Location     Type
  6613 ;;                  2   17[COMRAM] unsigned int 
  6614 ;; Registers used:
  6615 ;;		wreg, status,2
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6621 ;;      Params:         2       0       0       0       0       0       0
  6622 ;;      Locals:         1       0       0       0       0       0       0
  6623 ;;      Temps:          0       0       0       0       0       0       0
  6624 ;;      Totals:         3       0       0       0       0       0       0
  6625 ;;Total ram usage:        3 bytes
  6626 ;; Hardware stack levels used:    1
  6627 ;; Hardware stack levels required when called:    4
  6628 ;; This function calls:
  6629 ;;		Nothing
  6630 ;; This function is called by:
  6631 ;;		_resetPosition
  6632 ;;		_moveToPoint
  6633 ;;		_touchObject
  6634 ;;		_touchTherm
  6635 ;;		_liftArm
  6636 ;;		_rotateObj
  6637 ;;		_pickObject
  6638 ;;		_releaseObj
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           	psect	text36
  6643  0025AE                     __ptext36:
  6644                           	callstack 0
  6645  0025AE                     _stepMade:
  6646                           	callstack 0
  6647  0025AE  FFFF               	dw	65535	; assembler added errata NOP
  6648  0025B0                     
  6649                           ;timer.c: 61:     unsigned char temp = stepToggle;
  6650  0025B0  C05B  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6651  0025B4                     
  6652                           ;timer.c: 63:     stepToggle = 0;
  6653  0025B4  0E00               	movlw	0
  6654  0025B6  6E5B               	movwf	_stepToggle^0,c	;volatile
  6655  0025B8                     
  6656                           ;timer.c: 65:     return temp;
  6657  0025B8  C014  F012         	movff	stepMade@temp,?_stepMade
  6658  0025BC  6A13               	clrf	(?_stepMade+1)^0,c
  6659  0025BE  0012               	return		;funcret
  6660  0025C0  FFFF               	dw	65535	; errata NOP
  6661  0025C2                     __end_of_stepMade:
  6662                           	callstack 0
  6663                           
  6664 ;; *************** function _resetTM2_Temp *****************
  6665 ;; Defined at:
  6666 ;;		line 26 in file "interrupt.c"
  6667 ;; Parameters:    Size  Location     Type
  6668 ;;		None
  6669 ;; Auto vars:     Size  Location     Type
  6670 ;;		None
  6671 ;; Return value:  Size  Location     Type
  6672 ;;                  1    wreg      void 
  6673 ;; Registers used:
  6674 ;;		wreg, status,2
  6675 ;; Tracked objects:
  6676 ;;		On entry : 0/0
  6677 ;;		On exit  : 0/0
  6678 ;;		Unchanged: 0/0
  6679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6680 ;;      Params:         0       0       0       0       0       0       0
  6681 ;;      Locals:         0       0       0       0       0       0       0
  6682 ;;      Temps:          0       0       0       0       0       0       0
  6683 ;;      Totals:         0       0       0       0       0       0       0
  6684 ;;Total ram usage:        0 bytes
  6685 ;; Hardware stack levels used:    1
  6686 ;; Hardware stack levels required when called:    4
  6687 ;; This function calls:
  6688 ;;		Nothing
  6689 ;; This function is called by:
  6690 ;;		_resetPosition
  6691 ;;		_moveToPoint
  6692 ;;		_touchObject
  6693 ;;		_touchTherm
  6694 ;;		_liftArm
  6695 ;;		_rotateObj
  6696 ;;		_pickObject
  6697 ;;		_releaseObj
  6698 ;; This function uses a non-reentrant model
  6699 ;;
  6700                           
  6701                           	psect	text37
  6702  0025E6                     __ptext37:
  6703                           	callstack 0
  6704  0025E6                     _resetTM2_Temp:
  6705                           	callstack 0
  6706  0025E6  FFFF               	dw	65535	; assembler added errata NOP
  6707  0025E8                     
  6708                           ;interrupt.c: 27:     single_cycle = 0;
  6709  0025E8  0E00               	movlw	0
  6710  0025EA  6E52               	movwf	(_single_cycle+1)^0,c
  6711  0025EC  0E00               	movlw	0
  6712  0025EE  6E51               	movwf	_single_cycle^0,c
  6713                           
  6714                           ;interrupt.c: 28:     completeStep = 0;
  6715  0025F0  0E00               	movlw	0
  6716  0025F2  6E62               	movwf	_completeStep^0,c
  6717  0025F4  0012               	return		;funcret
  6718  0025F6  FFFF               	dw	65535	; errata NOP
  6719  0025F8                     __end_of_resetTM2_Temp:
  6720                           	callstack 0
  6721                           
  6722 ;; *************** function _resetTM0_Temp *****************
  6723 ;; Defined at:
  6724 ;;		line 22 in file "interrupt.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;		None
  6727 ;; Auto vars:     Size  Location     Type
  6728 ;;		None
  6729 ;; Return value:  Size  Location     Type
  6730 ;;                  1    wreg      void 
  6731 ;; Registers used:
  6732 ;;		wreg, status,2
  6733 ;; Tracked objects:
  6734 ;;		On entry : 0/0
  6735 ;;		On exit  : 0/0
  6736 ;;		Unchanged: 0/0
  6737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6738 ;;      Params:         0       0       0       0       0       0       0
  6739 ;;      Locals:         0       0       0       0       0       0       0
  6740 ;;      Temps:          0       0       0       0       0       0       0
  6741 ;;      Totals:         0       0       0       0       0       0       0
  6742 ;;Total ram usage:        0 bytes
  6743 ;; Hardware stack levels used:    1
  6744 ;; Hardware stack levels required when called:    4
  6745 ;; This function calls:
  6746 ;;		Nothing
  6747 ;; This function is called by:
  6748 ;;		_resetPosition
  6749 ;;		_moveToPoint
  6750 ;;		_touchObject
  6751 ;;		_touchTherm
  6752 ;;		_liftArm
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text38
  6757  0026AA                     __ptext38:
  6758                           	callstack 0
  6759  0026AA                     _resetTM0_Temp:
  6760                           	callstack 0
  6761  0026AA  FFFF               	dw	65535	; assembler added errata NOP
  6762  0026AC                     
  6763                           ;interrupt.c: 23:     tm0Count = 0;
  6764  0026AC  0E00               	movlw	0
  6765  0026AE  6E63               	movwf	_tm0Count^0,c
  6766  0026B0  0012               	return		;funcret
  6767  0026B2  FFFF               	dw	65535	; errata NOP
  6768  0026B4                     __end_of_resetTM0_Temp:
  6769                           	callstack 0
  6770                           
  6771 ;; *************** function _resetStep *****************
  6772 ;; Defined at:
  6773 ;;		line 78 in file "timer.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;		None
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;		None
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  1    wreg      void 
  6780 ;; Registers used:
  6781 ;;		wreg, status,2
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6787 ;;      Params:         0       0       0       0       0       0       0
  6788 ;;      Locals:         0       0       0       0       0       0       0
  6789 ;;      Temps:          0       0       0       0       0       0       0
  6790 ;;      Totals:         0       0       0       0       0       0       0
  6791 ;;Total ram usage:        0 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    4
  6794 ;; This function calls:
  6795 ;;		Nothing
  6796 ;; This function is called by:
  6797 ;;		_resetPosition
  6798 ;;		_moveToPoint
  6799 ;;		_touchObject
  6800 ;;		_touchTherm
  6801 ;;		_liftArm
  6802 ;;		_rotateObj
  6803 ;; This function uses a non-reentrant model
  6804 ;;
  6805                           
  6806                           	psect	text39
  6807  0026B4                     __ptext39:
  6808                           	callstack 0
  6809  0026B4                     _resetStep:
  6810                           	callstack 0
  6811  0026B4  FFFF               	dw	65535	; assembler added errata NOP
  6812  0026B6                     
  6813                           ;timer.c: 79:     pwmStep = 0;
  6814  0026B6  0E00               	movlw	0
  6815  0026B8  6E5C               	movwf	_pwmStep^0,c	;volatile
  6816  0026BA  0012               	return		;funcret
  6817  0026BC  FFFF               	dw	65535	; errata NOP
  6818  0026BE                     __end_of_resetStep:
  6819                           	callstack 0
  6820                           
  6821 ;; *************** function _getData *****************
  6822 ;; Defined at:
  6823 ;;		line 47 in file "usart.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;		None
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;		None
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  2   17[COMRAM] PTR struct .
  6830 ;; Registers used:
  6831 ;;		wreg, status,2, status,0
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6837 ;;      Params:         2       0       0       0       0       0       0
  6838 ;;      Locals:         0       0       0       0       0       0       0
  6839 ;;      Temps:          0       0       0       0       0       0       0
  6840 ;;      Totals:         2       0       0       0       0       0       0
  6841 ;;Total ram usage:        2 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    4
  6844 ;; This function calls:
  6845 ;;		Nothing
  6846 ;; This function is called by:
  6847 ;;		_executeData
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           	psect	text40
  6852  002626                     __ptext40:
  6853                           	callstack 0
  6854  002626                     _getData:
  6855                           	callstack 0
  6856  002626  FFFF               	dw	65535	; assembler added errata NOP
  6857  002628                     
  6858                           ;usart.c: 48:     return(&dataSequence[0]);
  6859  002628  0EC6               	movlw	low _dataSequence
  6860  00262A  6E12               	movwf	?_getData^0,c
  6861  00262C  0E00               	movlw	high _dataSequence
  6862  00262E  6E13               	movwf	(?_getData+1)^0,c
  6863  002630  0012               	return		;funcret
  6864  002632  FFFF               	dw	65535	; errata NOP
  6865  002634                     __end_of_getData:
  6866                           	callstack 0
  6867                           
  6868 ;; *************** function _clearTM0 *****************
  6869 ;; Defined at:
  6870 ;;		line 32 in file "motors.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;		None
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;		None
  6875 ;; Return value:  Size  Location     Type
  6876 ;;                  1    wreg      void 
  6877 ;; Registers used:
  6878 ;;		wreg, status,2
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6884 ;;      Params:         0       0       0       0       0       0       0
  6885 ;;      Locals:         0       0       0       0       0       0       0
  6886 ;;      Temps:          0       0       0       0       0       0       0
  6887 ;;      Totals:         0       0       0       0       0       0       0
  6888 ;;Total ram usage:        0 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; Hardware stack levels required when called:    4
  6891 ;; This function calls:
  6892 ;;		Nothing
  6893 ;; This function is called by:
  6894 ;;		_main
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           	psect	text41
  6899  002634                     __ptext41:
  6900                           	callstack 0
  6901  002634                     _clearTM0:
  6902                           	callstack 0
  6903  002634  FFFF               	dw	65535	; assembler added errata NOP
  6904  002636                     
  6905                           ;motors.c: 33:     tm0Error = 0;
  6906  002636  0E00               	movlw	0
  6907  002638  6E5A               	movwf	(_tm0Error+1)^0,c
  6908  00263A  0E00               	movlw	0
  6909  00263C  6E59               	movwf	_tm0Error^0,c
  6910  00263E  0012               	return		;funcret
  6911  002640  FFFF               	dw	65535	; errata NOP
  6912  002642                     __end_of_clearTM0:
  6913                           	callstack 0
  6914                           
  6915 ;; *************** function _isr *****************
  6916 ;; Defined at:
  6917 ;;		line 52 in file "interrupt.c"
  6918 ;; Parameters:    Size  Location     Type
  6919 ;;		None
  6920 ;; Auto vars:     Size  Location     Type
  6921 ;;  temp            1   16[COMRAM] unsigned char 
  6922 ;; Return value:  Size  Location     Type
  6923 ;;                  1    wreg      void 
  6924 ;; Registers used:
  6925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6926 ;; Tracked objects:
  6927 ;;		On entry : 0/0
  6928 ;;		On exit  : 0/0
  6929 ;;		Unchanged: 0/0
  6930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6931 ;;      Params:         0       0       0       0       0       0       0
  6932 ;;      Locals:         1       0       0       0       0       0       0
  6933 ;;      Temps:          6       0       0       0       0       0       0
  6934 ;;      Totals:         7       0       0       0       0       0       0
  6935 ;;Total ram usage:        7 bytes
  6936 ;; Hardware stack levels used:    1
  6937 ;; Hardware stack levels required when called:    3
  6938 ;; This function calls:
  6939 ;;		_abortAll
  6940 ;;		_fatalError
  6941 ;;		_increaseStep
  6942 ;;		_retPeriod
  6943 ;;		_setThermRel
  6944 ;;		_setTouchRel
  6945 ;;		_toggleStep
  6946 ;;		_whatsTM0Limit
  6947 ;;		_writeTM0
  6948 ;;		i2_storeData
  6949 ;; This function is called by:
  6950 ;;		Interrupt level 2
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           	psect	intcode
  6955  000008                     __pintcode:
  6956                           	callstack 0
  6957  000008                     _isr:
  6958                           	callstack 0
  6959  000008  FFFF               	dw	65535	; assembler added errata NOP
  6960                           
  6961                           ;incstack = 0
  6962  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6963  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6964  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6965  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6966  000018  CFF4 F010          	movff	prodh,??_isr+5
  6967  00001C                     
  6968                           ;interrupt.c: 56:     if(INTCONbits.T0IF){
  6969  00001C  A4F2               	btfss	242,2,c	;volatile
  6970  00001E  EF13  F000         	goto	i2u284_41
  6971  000022  EF16  F000         	goto	i2u284_40
  6972  000026                     i2u284_41:
  6973  000026  FFFF               	dw	65535	; assembler added errata NOP
  6974  000028  EF2C  F000         	goto	i2l3574
  6975  00002C                     i2u284_40:
  6976  00002C  FFFF               	dw	65535	; assembler added errata NOP
  6977  00002E                     
  6978                           ;interrupt.c: 57:         INTCONbits.T0IF = 0;
  6979  00002E  94F2               	bcf	242,2,c	;volatile
  6980  000030                     
  6981                           ;interrupt.c: 60:         tm0Count++;
  6982  000030  2A63               	incf	_tm0Count^0,f,c
  6983  000032                     
  6984                           ;interrupt.c: 62:         if(tm0Count >= whatsTM0Limit()){
  6985  000032  EC7E  F013         	call	_whatsTM0Limit	;wreg free
  6986  000036  6E0B               	movwf	??_isr^0,c
  6987  000038  500B               	movf	??_isr^0,w,c
  6988  00003A  5C63               	subwf	_tm0Count^0,w,c
  6989  00003C  A0D8               	btfss	status,0,c
  6990  00003E  EF23  F000         	goto	i2u285_41
  6991  000042  EF26  F000         	goto	i2u285_40
  6992  000046                     i2u285_41:
  6993  000046  FFFF               	dw	65535	; assembler added errata NOP
  6994  000048  EF2C  F000         	goto	i2l3574
  6995  00004C                     i2u285_40:
  6996  00004C  FFFF               	dw	65535	; assembler added errata NOP
  6997  00004E                     
  6998                           ;interrupt.c: 63:             T0CONbits.TMR0ON = 0;
  6999  00004E  9ED5               	bcf	213,7,c	;volatile
  7000  000050                     
  7001                           ;interrupt.c: 64:             tm0Count = 0;
  7002  000050  0E00               	movlw	0
  7003  000052  6E63               	movwf	_tm0Count^0,c
  7004  000054                     
  7005                           ;interrupt.c: 65:             writeTM0();
  7006  000054  EC21  F013         	call	_writeTM0	;wreg free
  7007  000058                     i2l3574:
  7008  000058  FFFF               	dw	65535	; assembler added errata NOP
  7009                           
  7010                           ;interrupt.c: 70:     if(PIR1bits.TMR1IF){
  7011  00005A  A09E               	btfss	158,0,c	;volatile
  7012  00005C  EF32  F000         	goto	i2u286_41
  7013  000060  EF35  F000         	goto	i2u286_40
  7014  000064                     i2u286_41:
  7015  000064  FFFF               	dw	65535	; assembler added errata NOP
  7016  000066  EF45  F000         	goto	i2l3582
  7017  00006A                     i2u286_40:
  7018  00006A  FFFF               	dw	65535	; assembler added errata NOP
  7019  00006C                     
  7020                           ;interrupt.c: 71:         PIR1bits.TMR1IF = 0;
  7021  00006C  909E               	bcf	158,0,c	;volatile
  7022  00006E                     
  7023                           ;interrupt.c: 72:         if(fatalError()){
  7024  00006E  EC86  F013         	call	_fatalError	;wreg free
  7025  000072  0900               	iorlw	0
  7026  000074  B4D8               	btfsc	status,2,c
  7027  000076  EF3F  F000         	goto	i2u287_41
  7028  00007A  EF42  F000         	goto	i2u287_40
  7029  00007E                     i2u287_41:
  7030  00007E  FFFF               	dw	65535	; assembler added errata NOP
  7031  000080  EF45  F000         	goto	i2l3582
  7032  000084                     i2u287_40:
  7033  000084  FFFF               	dw	65535	; assembler added errata NOP
  7034  000086                     
  7035                           ;interrupt.c: 73:             abortAll();
  7036  000086  ECFC  F012         	call	_abortAll	;wreg free
  7037  00008A                     i2l3582:
  7038  00008A  FFFF               	dw	65535	; assembler added errata NOP
  7039                           
  7040                           ;interrupt.c: 78:     if(PIR1bits.TMR2IF){
  7041  00008C  A29E               	btfss	158,1,c	;volatile
  7042  00008E  EF4B  F000         	goto	i2u288_41
  7043  000092  EF4E  F000         	goto	i2u288_40
  7044  000096                     i2u288_41:
  7045  000096  FFFF               	dw	65535	; assembler added errata NOP
  7046  000098  EF80  F000         	goto	i2l3604
  7047  00009C                     i2u288_40:
  7048  00009C  FFFF               	dw	65535	; assembler added errata NOP
  7049  00009E                     
  7050                           ;interrupt.c: 79:         PIR1bits.TMR2IF = 0;
  7051  00009E  929E               	bcf	158,1,c	;volatile
  7052  0000A0                     
  7053                           ;interrupt.c: 80:         single_cycle++;
  7054  0000A0  4A51               	infsnz	_single_cycle^0,f,c
  7055  0000A2  2A52               	incf	(_single_cycle+1)^0,f,c
  7056  0000A4                     
  7057                           ;interrupt.c: 83:         if(single_cycle > retPeriod()){
  7058  0000A4  EC28  F013         	call	_retPeriod	;wreg free
  7059  0000A8  5051               	movf	_single_cycle^0,w,c
  7060  0000AA  5C01               	subwf	?_retPeriod^0,w,c
  7061  0000AC  5052               	movf	(_single_cycle+1)^0,w,c
  7062  0000AE  5802               	subwfb	(?_retPeriod+1)^0,w,c
  7063  0000B0  B0D8               	btfsc	status,0,c
  7064  0000B2  EF5D  F000         	goto	i2u289_41
  7065  0000B6  EF60  F000         	goto	i2u289_40
  7066  0000BA                     i2u289_41:
  7067  0000BA  FFFF               	dw	65535	; assembler added errata NOP
  7068  0000BC  EF80  F000         	goto	i2l3604
  7069  0000C0                     i2u289_40:
  7070  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  7071  0000C2                     
  7072                           ;interrupt.c: 84:             single_cycle = 0;
  7073  0000C2  0E00               	movlw	0
  7074  0000C4  6E52               	movwf	(_single_cycle+1)^0,c
  7075  0000C6  0E00               	movlw	0
  7076  0000C8  6E51               	movwf	_single_cycle^0,c
  7077  0000CA                     
  7078                           ;interrupt.c: 85:             completeStep++;
  7079  0000CA  2A62               	incf	_completeStep^0,f,c
  7080  0000CC                     
  7081                           ;interrupt.c: 88:             if(completeStep != 0 && !(completeStep % 2)){
  7082  0000CC  5062               	movf	_completeStep^0,w,c
  7083  0000CE  B4D8               	btfsc	status,2,c
  7084  0000D0  EF6C  F000         	goto	i2u290_41
  7085  0000D4  EF6F  F000         	goto	i2u290_40
  7086  0000D8                     i2u290_41:
  7087  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  7088  0000DA  EF7D  F000         	goto	i2l3602
  7089  0000DE                     i2u290_40:
  7090  0000DE  FFFF               	dw	65535	; assembler added errata NOP
  7091  0000E0  B062               	btfsc	_completeStep^0,0,c
  7092  0000E2  EF75  F000         	goto	i2u291_41
  7093  0000E6  EF78  F000         	goto	i2u291_40
  7094  0000EA                     i2u291_41:
  7095  0000EA  FFFF               	dw	65535	; assembler added errata NOP
  7096  0000EC  EF7D  F000         	goto	i2l3602
  7097  0000F0                     i2u291_40:
  7098  0000F0  FFFF               	dw	65535	; assembler added errata NOP
  7099  0000F2                     
  7100                           ;interrupt.c: 90:                 completeStep = 0;
  7101  0000F2  0E00               	movlw	0
  7102  0000F4  6E62               	movwf	_completeStep^0,c
  7103  0000F6                     
  7104                           ;interrupt.c: 93:                 increaseStep();
  7105  0000F6  EC82  F013         	call	_increaseStep	;wreg free
  7106  0000FA                     i2l3602:
  7107  0000FA  FFFF               	dw	65535	; assembler added errata NOP
  7108                           
  7109                           ;interrupt.c: 98:             toggleStep();
  7110  0000FC  EC5F  F013         	call	_toggleStep	;wreg free
  7111  000100                     i2l3604:
  7112  000100  FFFF               	dw	65535	; assembler added errata NOP
  7113                           
  7114                           ;interrupt.c: 103:     if(PIR1bits.ADIF){
  7115  000102  AC9E               	btfss	158,6,c	;volatile
  7116  000104  EF86  F000         	goto	i2u292_41
  7117  000108  EF89  F000         	goto	i2u292_40
  7118  00010C                     i2u292_41:
  7119  00010C  FFFF               	dw	65535	; assembler added errata NOP
  7120  00010E  EFB6  F000         	goto	i2l3616
  7121  000112                     i2u292_40:
  7122  000112  FFFF               	dw	65535	; assembler added errata NOP
  7123  000114                     
  7124                           ;interrupt.c: 104:         PIR1bits.ADIF = 0;
  7125  000114  9C9E               	bcf	158,6,c	;volatile
  7126                           
  7127                           ;interrupt.c: 107:         ADC_res = ADRESL;
  7128  000116  CFC3 F053          	movff	4035,_ADC_res	;volatile
  7129  00011A  6A54               	clrf	(_ADC_res+1)^0,c
  7130  00011C                     
  7131                           ;interrupt.c: 108:         ADC_res |= (ADRESH << 8);
  7132  00011C  50C4               	movf	196,w,c	;volatile
  7133  00011E  6E0C               	movwf	(??_isr+1)^0,c
  7134  000120  6A0B               	clrf	??_isr^0,c
  7135  000122  500B               	movf	??_isr^0,w,c
  7136  000124  1253               	iorwf	_ADC_res^0,f,c
  7137  000126  500C               	movf	(??_isr+1)^0,w,c
  7138  000128  1254               	iorwf	(_ADC_res+1)^0,f,c
  7139                           
  7140                           ;interrupt.c: 111:         if(ADC_res > therm_pressure){
  7141  00012A  0453               	decf	_ADC_res^0,w,c
  7142  00012C  0E04               	movlw	4
  7143  00012E  5854               	subwfb	(_ADC_res+1)^0,w,c
  7144  000130  A0D8               	btfss	status,0,c
  7145  000132  EF9D  F000         	goto	i2u293_41
  7146  000136  EFA0  F000         	goto	i2u293_40
  7147  00013A                     i2u293_41:
  7148  00013A  FFFF               	dw	65535	; assembler added errata NOP
  7149  00013C  EFA7  F000         	goto	i2l3612
  7150  000140                     i2u293_40:
  7151  000140  FFFF               	dw	65535	; assembler added errata NOP
  7152  000142                     
  7153                           ;interrupt.c: 113:             setTouchRel();
  7154  000142  EC64  F013         	call	_setTouchRel	;wreg free
  7155                           
  7156                           ;interrupt.c: 114:             setThermRel();
  7157  000146  EC69  F013         	call	_setThermRel	;wreg free
  7158                           
  7159                           ;interrupt.c: 115:         }else if(ADC_res > touch_pressure){
  7160  00014A  EFB6  F000         	goto	i2l3616
  7161  00014E                     i2l3612:
  7162  00014E  FFFF               	dw	65535	; assembler added errata NOP
  7163  000150  0453               	decf	_ADC_res^0,w,c
  7164  000152  0E02               	movlw	2
  7165  000154  5854               	subwfb	(_ADC_res+1)^0,w,c
  7166  000156  A0D8               	btfss	status,0,c
  7167  000158  EFB0  F000         	goto	i2u294_41
  7168  00015C  EFB3  F000         	goto	i2u294_40
  7169  000160                     i2u294_41:
  7170  000160  FFFF               	dw	65535	; assembler added errata NOP
  7171  000162  EFB6  F000         	goto	i2l3616
  7172  000166                     i2u294_40:
  7173  000166  FFFF               	dw	65535	; assembler added errata NOP
  7174  000168                     
  7175                           ;interrupt.c: 117:             setTouchRel();
  7176  000168  EC64  F013         	call	_setTouchRel	;wreg free
  7177  00016C                     i2l3616:
  7178  00016C  FFFF               	dw	65535	; assembler added errata NOP
  7179                           
  7180                           ;interrupt.c: 122:     if(PIR1bits.RC1IF){
  7181  00016E  AA9E               	btfss	158,5,c	;volatile
  7182  000170  EFBC  F000         	goto	i2u295_41
  7183  000174  EFBF  F000         	goto	i2u295_40
  7184  000178                     i2u295_41:
  7185  000178  FFFF               	dw	65535	; assembler added errata NOP
  7186  00017A  EFC6  F000         	goto	i2l466
  7187  00017E                     i2u295_40:
  7188  00017E  FFFF               	dw	65535	; assembler added errata NOP
  7189  000180                     
  7190                           ;interrupt.c: 123:         PIR1bits.RC1IF = 0;
  7191  000180  9A9E               	bcf	158,5,c	;volatile
  7192                           
  7193                           ;interrupt.c: 126:         unsigned char temp = RCREG1;
  7194  000182  CFAE F011          	movff	4014,isr@temp	;volatile
  7195  000186                     
  7196                           ;interrupt.c: 128:         storeData(temp);
  7197  000186  5011               	movf	isr@temp^0,w,c
  7198  000188  EC83  F009         	call	i2_storeData
  7199  00018C                     i2l466:
  7200  00018C  FFFF               	dw	65535	; assembler added errata NOP
  7201  00018E  C010  FFF4         	movff	??_isr+5,prodh
  7202  000192  C00F  FFF3         	movff	??_isr+4,prodl
  7203  000196  C00E  FFDA         	movff	??_isr+3,fsr2h
  7204  00019A  C00D  FFD9         	movff	??_isr+2,fsr2l
  7205  00019E  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7206  0001A0  0011               	retfie		f
  7207  0001A2  FFFF               	dw	65535	; errata NOP
  7208  0001A4                     __end_of_isr:
  7209                           	callstack 0
  7210                           
  7211 ;; *************** function i2_storeData *****************
  7212 ;; Defined at:
  7213 ;;		line 183 in file "usart.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;  data            1    wreg     unsigned char 
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;  data            1    9[COMRAM] unsigned char 
  7218 ;; Return value:  Size  Location     Type
  7219 ;;                  1    wreg      void 
  7220 ;; Registers used:
  7221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7227 ;;      Params:         0       0       0       0       0       0       0
  7228 ;;      Locals:         1       0       0       0       0       0       0
  7229 ;;      Temps:          2       0       0       0       0       0       0
  7230 ;;      Totals:         3       0       0       0       0       0       0
  7231 ;;Total ram usage:        3 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    2
  7234 ;; This function calls:
  7235 ;;		i2_printError
  7236 ;; This function is called by:
  7237 ;;		_isr
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           	psect	text43
  7242  001306                     __ptext43:
  7243                           	callstack 0
  7244  001306                     i2_storeData:
  7245                           	callstack 0
  7246  001306  FFFF               	dw	65535	; assembler added errata NOP
  7247                           
  7248                           ;incstack = 0
  7249                           ;i2storeData@data stored from wreg
  7250  001308  6E0A               	movwf	i2storeData@data^0,c
  7251  00130A                     
  7252                           ;usart.c: 189:     receivedMex[counter] = data;
  7253  00130A  0E43               	movlw	low _receivedMex
  7254  00130C  245E               	addwf	_counter^0,w,c
  7255  00130E  6ED9               	movwf	fsr2l,c
  7256  001310  6ADA               	clrf	fsr2h,c
  7257  001312  0E00               	movlw	high _receivedMex
  7258  001314  22DA               	addwfc	fsr2h,f,c
  7259  001316  C00A  FFDF         	movff	i2storeData@data,indf2
  7260  00131A                     
  7261                           ;usart.c: 191:     counter++;
  7262  00131A  2A5E               	incf	_counter^0,f,c
  7263                           
  7264                           ;usart.c: 194:     switch(receivedMex[0]){
  7265  00131C  EFAA  F009         	goto	i2l3450
  7266  001320                     i2l3440:
  7267  001320  FFFF               	dw	65535	; assembler added errata NOP
  7268                           
  7269                           ;usart.c: 196:             mexLength = 5;
  7270  001322  0E05               	movlw	5
  7271  001324  6E6D               	movwf	_mexLength^0,c
  7272                           
  7273                           ;usart.c: 197:             neverCheck = 0;
  7274  001326  0E00               	movlw	0
  7275  001328  6E5D               	movwf	_neverCheck^0,c
  7276                           
  7277                           ;usart.c: 198:             break;
  7278  00132A  EFC5  F009         	goto	i2l3452
  7279  00132E                     i2l3442:
  7280  00132E  FFFF               	dw	65535	; assembler added errata NOP
  7281                           
  7282                           ;usart.c: 200:             mexLength = 9;
  7283  001330  0E09               	movlw	9
  7284  001332  6E6D               	movwf	_mexLength^0,c
  7285                           
  7286                           ;usart.c: 201:             neverCheck = 0;
  7287  001334  0E00               	movlw	0
  7288  001336  6E5D               	movwf	_neverCheck^0,c
  7289                           
  7290                           ;usart.c: 202:             break;
  7291  001338  EFC5  F009         	goto	i2l3452
  7292  00133C                     i2l3444:
  7293  00133C  FFFF               	dw	65535	; assembler added errata NOP
  7294                           
  7295                           ;usart.c: 204:             mexLength = 1;
  7296  00133E  0E01               	movlw	1
  7297  001340  6E6D               	movwf	_mexLength^0,c
  7298                           
  7299                           ;usart.c: 205:             neverCheck = 0;
  7300  001342  0E00               	movlw	0
  7301  001344  6E5D               	movwf	_neverCheck^0,c
  7302                           
  7303                           ;usart.c: 206:             break;
  7304  001346  EFC5  F009         	goto	i2l3452
  7305  00134A                     i2l3446:
  7306  00134A  FFFF               	dw	65535	; assembler added errata NOP
  7307                           
  7308                           ;usart.c: 208:             neverCheck = 1;
  7309  00134C  0E01               	movlw	1
  7310  00134E  6E5D               	movwf	_neverCheck^0,c
  7311                           
  7312                           ;usart.c: 209:             break;
  7313  001350  EFC5  F009         	goto	i2l3452
  7314  001354                     i2l3450:
  7315  001354  FFFF               	dw	65535	; assembler added errata NOP
  7316  001356  5043               	movf	_receivedMex^0,w,c
  7317  001358  6E08               	movwf	??i2_storeData^0,c
  7318  00135A  6A09               	clrf	(??i2_storeData+1)^0,c
  7319                           
  7320                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7321                           ; Switch size 1, requested type "simple"
  7322                           ; Number of cases is 1, Range of values is 0 to 0
  7323                           ; switch strategies available:
  7324                           ; Name         Instructions Cycles
  7325                           ; simple_byte            4     3 (average)
  7326                           ;	Chosen strategy is simple_byte
  7327  00135C  5009               	movf	(??i2_storeData+1)^0,w,c
  7328  00135E  0A00               	xorlw	0	; case 0
  7329  001360  B4D8               	btfsc	status,2,c
  7330  001362  EFB5  F009         	goto	i2l4838
  7331  001366  EFA5  F009         	goto	i2l3446
  7332  00136A                     i2l4838:
  7333  00136A  FFFF               	dw	65535	; assembler added errata NOP
  7334                           
  7335                           ; Switch size 1, requested type "simple"
  7336                           ; Number of cases is 3, Range of values is 1 to 3
  7337                           ; switch strategies available:
  7338                           ; Name         Instructions Cycles
  7339                           ; simple_byte           10     6 (average)
  7340                           ;	Chosen strategy is simple_byte
  7341  00136C  5008               	movf	??i2_storeData^0,w,c
  7342  00136E  0A01               	xorlw	1	; case 1
  7343  001370  B4D8               	btfsc	status,2,c
  7344  001372  EF90  F009         	goto	i2l3440
  7345  001376  0A03               	xorlw	3	; case 2
  7346  001378  B4D8               	btfsc	status,2,c
  7347  00137A  EF97  F009         	goto	i2l3442
  7348  00137E  0A01               	xorlw	1	; case 3
  7349  001380  B4D8               	btfsc	status,2,c
  7350  001382  EF9E  F009         	goto	i2l3444
  7351  001386  EFA5  F009         	goto	i2l3446
  7352  00138A                     i2l3452:
  7353  00138A  FFFF               	dw	65535	; assembler added errata NOP
  7354                           
  7355                           ;usart.c: 214:     if(counter == mexLength && !neverCheck){
  7356  00138C  506D               	movf	_mexLength^0,w,c
  7357  00138E  185E               	xorwf	_counter^0,w,c
  7358  001390  A4D8               	btfss	status,2,c
  7359  001392  EFCD  F009         	goto	i2u272_41
  7360  001396  EFD0  F009         	goto	i2u272_40
  7361  00139A                     i2u272_41:
  7362  00139A  FFFF               	dw	65535	; assembler added errata NOP
  7363  00139C  EFC2  F00A         	goto	i2l599
  7364  0013A0                     i2u272_40:
  7365  0013A0  FFFF               	dw	65535	; assembler added errata NOP
  7366  0013A2  505D               	movf	_neverCheck^0,w,c
  7367  0013A4  A4D8               	btfss	status,2,c
  7368  0013A6  EFD7  F009         	goto	i2u273_41
  7369  0013AA  EFDA  F009         	goto	i2u273_40
  7370  0013AE                     i2u273_41:
  7371  0013AE  FFFF               	dw	65535	; assembler added errata NOP
  7372  0013B0  EFC2  F00A         	goto	i2l599
  7373  0013B4                     i2u273_40:
  7374  0013B4  FFFF               	dw	65535	; assembler added errata NOP
  7375  0013B6                     
  7376                           ;usart.c: 215:         counter = 0;
  7377  0013B6  0E00               	movlw	0
  7378  0013B8  6E5E               	movwf	_counter^0,c
  7379                           
  7380                           ;usart.c: 218:         switch(receivedMex[0]){
  7381  0013BA  EFA4  F00A         	goto	i2l3494
  7382  0013BE                     i2l3458:
  7383  0013BE  FFFF               	dw	65535	; assembler added errata NOP
  7384                           
  7385                           ;usart.c: 220:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7386  0013C0  5061               	movf	_dataCounter^0,w,c
  7387  0013C2  0D04               	mullw	4
  7388  0013C4  0EC6               	movlw	low _dataSequence
  7389  0013C6  24F3               	addwf	243,w,c
  7390  0013C8  6ED9               	movwf	fsr2l,c
  7391  0013CA  0E00               	movlw	high _dataSequence
  7392  0013CC  20F4               	addwfc	prodh,w,c
  7393  0013CE  6EDA               	movwf	fsr2h,c
  7394  0013D0  C044  FFDF         	movff	_receivedMex+1,indf2
  7395                           
  7396                           ;usart.c: 221:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  7397  0013D4  5061               	movf	_dataCounter^0,w,c
  7398  0013D6  0D04               	mullw	4
  7399  0013D8  0EC7               	movlw	low (_dataSequence+1)
  7400  0013DA  24F3               	addwf	243,w,c
  7401  0013DC  6ED9               	movwf	fsr2l,c
  7402  0013DE  0E00               	movlw	high (_dataSequence+1)
  7403  0013E0  20F4               	addwfc	prodh,w,c
  7404  0013E2  6EDA               	movwf	fsr2h,c
  7405  0013E4  5045               	movf	(_receivedMex+2)^0,w,c
  7406  0013E6  0D05               	mullw	5
  7407  0013E8  CFF3 FFDF          	movff	prodl,indf2
  7408                           
  7409                           ;usart.c: 222:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  7410  0013EC  5061               	movf	_dataCounter^0,w,c
  7411  0013EE  0D04               	mullw	4
  7412  0013F0  0EC8               	movlw	low (_dataSequence+2)
  7413  0013F2  24F3               	addwf	243,w,c
  7414  0013F4  6ED9               	movwf	fsr2l,c
  7415  0013F6  0E00               	movlw	high (_dataSequence+2)
  7416  0013F8  20F4               	addwfc	prodh,w,c
  7417  0013FA  6EDA               	movwf	fsr2h,c
  7418  0013FC  5046               	movf	(_receivedMex+3)^0,w,c
  7419  0013FE  0D05               	mullw	5
  7420  001400  CFF3 FFDF          	movff	prodl,indf2
  7421                           
  7422                           ;usart.c: 223:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7423  001404  5061               	movf	_dataCounter^0,w,c
  7424  001406  0D04               	mullw	4
  7425  001408  0EC9               	movlw	low (_dataSequence+3)
  7426  00140A  24F3               	addwf	243,w,c
  7427  00140C  6ED9               	movwf	fsr2l,c
  7428  00140E  0E00               	movlw	high (_dataSequence+3)
  7429  001410  20F4               	addwfc	prodh,w,c
  7430  001412  6EDA               	movwf	fsr2h,c
  7431  001414  C047  FFDF         	movff	_receivedMex+4,indf2
  7432                           
  7433                           ;usart.c: 226:                 if((dataSequence[dataCounter].posX > maxX || dataSequence
      +                          [dataCounter].posY > maxY) &&
  7434  001418  5061               	movf	_dataCounter^0,w,c
  7435  00141A  0D04               	mullw	4
  7436  00141C  0EC7               	movlw	low (_dataSequence+1)
  7437  00141E  24F3               	addwf	243,w,c
  7438  001420  6ED9               	movwf	fsr2l,c
  7439  001422  0E00               	movlw	high (_dataSequence+1)
  7440  001424  20F4               	addwfc	prodh,w,c
  7441  001426  6EDA               	movwf	fsr2h,c
  7442  001428  0E66               	movlw	102
  7443  00142A  60DF               	cpfslt	indf2,c
  7444  00142C  EF1A  F00A         	goto	i2u274_41
  7445  001430  EF1D  F00A         	goto	i2u274_40
  7446  001434                     i2u274_41:
  7447  001434  FFFF               	dw	65535	; assembler added errata NOP
  7448  001436  EF2F  F00A         	goto	i2l3462
  7449  00143A                     i2u274_40:
  7450  00143A  FFFF               	dw	65535	; assembler added errata NOP
  7451  00143C  5061               	movf	_dataCounter^0,w,c
  7452  00143E  0D04               	mullw	4
  7453  001440  0EC8               	movlw	low (_dataSequence+2)
  7454  001442  24F3               	addwf	243,w,c
  7455  001444  6ED9               	movwf	fsr2l,c
  7456  001446  0E00               	movlw	high (_dataSequence+2)
  7457  001448  20F4               	addwfc	prodh,w,c
  7458  00144A  6EDA               	movwf	fsr2h,c
  7459  00144C  0E65               	movlw	101
  7460  00144E  64DF               	cpfsgt	indf2,c
  7461  001450  EF2C  F00A         	goto	i2u275_41
  7462  001454  EF2F  F00A         	goto	i2u275_40
  7463  001458                     i2u275_41:
  7464  001458  FFFF               	dw	65535	; assembler added errata NOP
  7465  00145A  EF47  F00A         	goto	i2l3466
  7466  00145E                     i2u275_40:
  7467  00145E                     i2l3462:
  7468  00145E  FFFF               	dw	65535	; assembler added errata NOP
  7469  001460  5061               	movf	_dataCounter^0,w,c
  7470  001462  0D04               	mullw	4
  7471  001464  0EC6               	movlw	low _dataSequence
  7472  001466  24F3               	addwf	243,w,c
  7473  001468  6ED9               	movwf	fsr2l,c
  7474  00146A  0E00               	movlw	high _dataSequence
  7475  00146C  20F4               	addwfc	prodh,w,c
  7476  00146E  6EDA               	movwf	fsr2h,c
  7477  001470  28DE               	incf	postinc2,w,c
  7478  001472  B4D8               	btfsc	status,2,c
  7479  001474  EF3E  F00A         	goto	i2u276_41
  7480  001478  EF41  F00A         	goto	i2u276_40
  7481  00147C                     i2u276_41:
  7482  00147C  FFFF               	dw	65535	; assembler added errata NOP
  7483  00147E  EF47  F00A         	goto	i2l3466
  7484  001482                     i2u276_40:
  7485  001482  FFFF               	dw	65535	; assembler added errata NOP
  7486  001484                     
  7487                           ;usart.c: 227:                         dataSequence[dataCounter].feederLine != 0xFF){;us
      +                          art.c: 228:                     printError(5);
  7488  001484  0E05               	movlw	5
  7489  001486  EC78  F00E         	call	i2_printError
  7490                           
  7491                           ;usart.c: 229:                 }else{
  7492  00148A  EFBF  F00A         	goto	i2l3496
  7493  00148E                     i2l3466:
  7494  00148E  FFFF               	dw	65535	; assembler added errata NOP
  7495                           
  7496                           ;usart.c: 230:                     dataCounter++;
  7497  001490  2A61               	incf	_dataCounter^0,f,c
  7498  001492  EFBF  F00A         	goto	i2l3496
  7499  001496                     i2l592:
  7500  001496  FFFF               	dw	65535	; assembler added errata NOP
  7501                           
  7502                           ;usart.c: 235:                 newSequenceData.L = receivedMex[1];
  7503  001498  C044  F0DA         	movff	_receivedMex+1,_newSequenceData
  7504                           
  7505                           ;usart.c: 236:                 newSequenceData.W = receivedMex[2];
  7506  00149C  C045  F0DB         	movff	_receivedMex+2,_newSequenceData+1
  7507  0014A0                     
  7508                           ;usart.c: 237:                 newSequenceData.init_posX = receivedMex[3] * 5;
  7509  0014A0  5046               	movf	(_receivedMex+3)^0,w,c
  7510  0014A2  0D05               	mullw	5
  7511  0014A4  CFF3 F0DC          	movff	prodl,_newSequenceData+2
  7512                           
  7513                           ;usart.c: 238:                 newSequenceData.init_posY = receivedMex[4] * 5;
  7514  0014A8  5047               	movf	(_receivedMex+4)^0,w,c
  7515  0014AA  0D05               	mullw	5
  7516  0014AC  CFF3 F0DD          	movff	prodl,_newSequenceData+3
  7517  0014B0                     
  7518                           ;usart.c: 239:                 newSequenceData.init_rot = receivedMex[5];
  7519  0014B0  C048  F0DE         	movff	_receivedMex+5,_newSequenceData+4
  7520                           
  7521                           ;usart.c: 240:                 newSequenceData.end_posX = receivedMex[6] * 5;
  7522  0014B4  5049               	movf	(_receivedMex+6)^0,w,c
  7523  0014B6  0D05               	mullw	5
  7524  0014B8  CFF3 F0DF          	movff	prodl,_newSequenceData+5
  7525                           
  7526                           ;usart.c: 241:                 newSequenceData.end_posY = receivedMex[7] * 5;
  7527  0014BC  504A               	movf	(_receivedMex+7)^0,w,c
  7528  0014BE  0D05               	mullw	5
  7529  0014C0  CFF3 F0E0          	movff	prodl,_newSequenceData+6
  7530  0014C4                     
  7531                           ;usart.c: 242:                 newSequenceData.end_rot = receivedMex[8];
  7532  0014C4  C04B  F0E1         	movff	_receivedMex+8,_newSequenceData+7
  7533  0014C8                     
  7534                           ;usart.c: 245:                 if(newSequenceData.init_posX > maxFeedX ||
  7535  0014C8  0E1F               	movlw	31
  7536  0014CA  0100               	movlb	0	; () banked
  7537  0014CC  61DC               	cpfslt	(_newSequenceData+2)& (0+255),b
  7538  0014CE  EF6B  F00A         	goto	i2u277_41
  7539  0014D2  EF6E  F00A         	goto	i2u277_40
  7540  0014D6                     i2u277_41:
  7541  0014D6  FFFF               	dw	65535	; assembler added errata NOP
  7542  0014D8  EF8C  F00A         	goto	i2l3482
  7543  0014DC                     i2u277_40:
  7544  0014DC  FFFF               	dw	65535	; assembler added errata NOP
  7545  0014DE                     
  7546                           ; BSR set to: 0
  7547  0014DE  0E66               	movlw	102
  7548  0014E0  61DF               	cpfslt	(_newSequenceData+5)& (0+255),b
  7549  0014E2  EF75  F00A         	goto	i2u278_41
  7550  0014E6  EF78  F00A         	goto	i2u278_40
  7551  0014EA                     i2u278_41:
  7552  0014EA  FFFF               	dw	65535	; assembler added errata NOP
  7553  0014EC  EF8C  F00A         	goto	i2l3482
  7554  0014F0                     i2u278_40:
  7555  0014F0  FFFF               	dw	65535	; assembler added errata NOP
  7556  0014F2                     
  7557                           ; BSR set to: 0
  7558  0014F2  0E65               	movlw	101
  7559  0014F4  61DD               	cpfslt	(_newSequenceData+3)& (0+255),b
  7560  0014F6  EF7F  F00A         	goto	i2u279_41
  7561  0014FA  EF82  F00A         	goto	i2u279_40
  7562  0014FE                     i2u279_41:
  7563  0014FE  FFFF               	dw	65535	; assembler added errata NOP
  7564  001500  EF8C  F00A         	goto	i2l3482
  7565  001504                     i2u279_40:
  7566  001504  FFFF               	dw	65535	; assembler added errata NOP
  7567  001506                     
  7568                           ; BSR set to: 0
  7569  001506  0E65               	movlw	101
  7570  001508  65E0               	cpfsgt	(_newSequenceData+6)& (0+255),b
  7571  00150A  EF89  F00A         	goto	i2u280_41
  7572  00150E  EF8C  F00A         	goto	i2u280_40
  7573  001512                     i2u280_41:
  7574  001512  FFFF               	dw	65535	; assembler added errata NOP
  7575  001514  EF94  F00A         	goto	i2l3486
  7576  001518                     i2u280_40:
  7577  001518                     i2l3482:
  7578  001518  FFFF               	dw	65535	; assembler added errata NOP
  7579                           
  7580                           ; BSR set to: 0
  7581                           ;usart.c: 248:                         newSequenceData.end_posY > maxY){;usart.c: 249:  
      +                                             _newSequence = 0;
  7582  00151A  0E00               	movlw	0
  7583  00151C  6E5F               	movwf	__newSequence^0,c
  7584  00151E                     
  7585                           ; BSR set to: 0
  7586                           ;usart.c: 250:                     printError(5);
  7587  00151E  0E05               	movlw	5
  7588  001520  EC78  F00E         	call	i2_printError
  7589                           
  7590                           ;usart.c: 251:                 }else{
  7591  001524  EFBF  F00A         	goto	i2l3496
  7592  001528                     i2l3486:
  7593  001528  FFFF               	dw	65535	; assembler added errata NOP
  7594                           
  7595                           ; BSR set to: 0
  7596                           ;usart.c: 252:                     _newSequence = 1;
  7597  00152A  0E01               	movlw	1
  7598  00152C  6E5F               	movwf	__newSequence^0,c
  7599  00152E  EFBF  F00A         	goto	i2l3496
  7600  001532                     i2l3488:
  7601  001532  FFFF               	dw	65535	; assembler added errata NOP
  7602                           
  7603                           ;usart.c: 257:                 _fatalError = 1;
  7604  001534  0E01               	movlw	1
  7605  001536  6E60               	movwf	__fatalError^0,c
  7606                           
  7607                           ;usart.c: 258:                 break;
  7608  001538  EFBF  F00A         	goto	i2l3496
  7609  00153C                     i2l3490:
  7610  00153C  FFFF               	dw	65535	; assembler added errata NOP
  7611                           
  7612                           ;usart.c: 261:                 printError(8);
  7613  00153E  0E08               	movlw	8
  7614  001540  EC78  F00E         	call	i2_printError
  7615                           
  7616                           ;usart.c: 262:                 break;
  7617  001544  EFBF  F00A         	goto	i2l3496
  7618  001548                     i2l3494:
  7619  001548  FFFF               	dw	65535	; assembler added errata NOP
  7620  00154A  5043               	movf	_receivedMex^0,w,c
  7621  00154C  6E08               	movwf	??i2_storeData^0,c
  7622  00154E  6A09               	clrf	(??i2_storeData+1)^0,c
  7623                           
  7624                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7625                           ; Switch size 1, requested type "simple"
  7626                           ; Number of cases is 1, Range of values is 0 to 0
  7627                           ; switch strategies available:
  7628                           ; Name         Instructions Cycles
  7629                           ; simple_byte            4     3 (average)
  7630                           ;	Chosen strategy is simple_byte
  7631  001550  5009               	movf	(??i2_storeData+1)^0,w,c
  7632  001552  0A00               	xorlw	0	; case 0
  7633  001554  B4D8               	btfsc	status,2,c
  7634  001556  EFAF  F00A         	goto	i2l4840
  7635  00155A  EF9E  F00A         	goto	i2l3490
  7636  00155E                     i2l4840:
  7637  00155E  FFFF               	dw	65535	; assembler added errata NOP
  7638                           
  7639                           ; Switch size 1, requested type "simple"
  7640                           ; Number of cases is 3, Range of values is 1 to 3
  7641                           ; switch strategies available:
  7642                           ; Name         Instructions Cycles
  7643                           ; simple_byte           10     6 (average)
  7644                           ;	Chosen strategy is simple_byte
  7645  001560  5008               	movf	??i2_storeData^0,w,c
  7646  001562  0A01               	xorlw	1	; case 1
  7647  001564  B4D8               	btfsc	status,2,c
  7648  001566  EFDF  F009         	goto	i2l3458
  7649  00156A  0A03               	xorlw	3	; case 2
  7650  00156C  B4D8               	btfsc	status,2,c
  7651  00156E  EF4B  F00A         	goto	i2l592
  7652  001572  0A01               	xorlw	1	; case 3
  7653  001574  B4D8               	btfsc	status,2,c
  7654  001576  EF99  F00A         	goto	i2l3488
  7655  00157A  EF9E  F00A         	goto	i2l3490
  7656  00157E                     i2l3496:
  7657  00157E  FFFF               	dw	65535	; assembler added errata NOP
  7658                           
  7659                           ;usart.c: 266:         receivedMex[0] = 0;
  7660  001580  0E00               	movlw	0
  7661  001582  6E43               	movwf	_receivedMex^0,c
  7662  001584                     i2l599:
  7663  001584  FFFF               	dw	65535	; assembler added errata NOP
  7664  001586  0012               	return		;funcret
  7665  001588  FFFF               	dw	65535	; errata NOP
  7666  00158A                     __end_ofi2_storeData:
  7667                           	callstack 0
  7668                           
  7669 ;; *************** function _writeTM0 *****************
  7670 ;; Defined at:
  7671 ;;		line 25 in file "motors.c"
  7672 ;; Parameters:    Size  Location     Type
  7673 ;;		None
  7674 ;; Auto vars:     Size  Location     Type
  7675 ;;		None
  7676 ;; Return value:  Size  Location     Type
  7677 ;;                  1    wreg      void 
  7678 ;; Registers used:
  7679 ;;		wreg, status,2
  7680 ;; Tracked objects:
  7681 ;;		On entry : 0/0
  7682 ;;		On exit  : 0/0
  7683 ;;		Unchanged: 0/0
  7684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7685 ;;      Params:         0       0       0       0       0       0       0
  7686 ;;      Locals:         0       0       0       0       0       0       0
  7687 ;;      Temps:          0       0       0       0       0       0       0
  7688 ;;      Totals:         0       0       0       0       0       0       0
  7689 ;;Total ram usage:        0 bytes
  7690 ;; Hardware stack levels used:    1
  7691 ;; This function calls:
  7692 ;;		Nothing
  7693 ;; This function is called by:
  7694 ;;		_isr
  7695 ;; This function uses a non-reentrant model
  7696 ;;
  7697                           
  7698                           	psect	text44
  7699  002642                     __ptext44:
  7700                           	callstack 0
  7701  002642                     _writeTM0:
  7702                           	callstack 0
  7703  002642  FFFF               	dw	65535	; assembler added errata NOP
  7704  002644                     
  7705                           ;motors.c: 26:     tm0Error = 1;
  7706  002644  0E00               	movlw	0
  7707  002646  6E5A               	movwf	(_tm0Error+1)^0,c
  7708  002648  0E01               	movlw	1
  7709  00264A  6E59               	movwf	_tm0Error^0,c
  7710  00264C  0012               	return		;funcret
  7711  00264E  FFFF               	dw	65535	; errata NOP
  7712  002650                     __end_of_writeTM0:
  7713                           	callstack 0
  7714                           
  7715 ;; *************** function _whatsTM0Limit *****************
  7716 ;; Defined at:
  7717 ;;		line 39 in file "motors.c"
  7718 ;; Parameters:    Size  Location     Type
  7719 ;;		None
  7720 ;; Auto vars:     Size  Location     Type
  7721 ;;		None
  7722 ;; Return value:  Size  Location     Type
  7723 ;;                  1    wreg      unsigned char 
  7724 ;; Registers used:
  7725 ;;		wreg, status,2
  7726 ;; Tracked objects:
  7727 ;;		On entry : 0/0
  7728 ;;		On exit  : 0/0
  7729 ;;		Unchanged: 0/0
  7730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7731 ;;      Params:         0       0       0       0       0       0       0
  7732 ;;      Locals:         0       0       0       0       0       0       0
  7733 ;;      Temps:          0       0       0       0       0       0       0
  7734 ;;      Totals:         0       0       0       0       0       0       0
  7735 ;;Total ram usage:        0 bytes
  7736 ;; Hardware stack levels used:    1
  7737 ;; This function calls:
  7738 ;;		Nothing
  7739 ;; This function is called by:
  7740 ;;		_isr
  7741 ;; This function uses a non-reentrant model
  7742 ;;
  7743                           
  7744                           	psect	text45
  7745  0026FC                     __ptext45:
  7746                           	callstack 0
  7747  0026FC                     _whatsTM0Limit:
  7748                           	callstack 0
  7749  0026FC  FFFF               	dw	65535	; assembler added errata NOP
  7750  0026FE                     
  7751                           ;motors.c: 40:     return(tm0Limit);
  7752  0026FE  5066               	movf	_tm0Limit^0,w,c
  7753  002700  0012               	return		;funcret
  7754  002702  FFFF               	dw	65535	; errata NOP
  7755  002704                     __end_of_whatsTM0Limit:
  7756                           	callstack 0
  7757                           
  7758 ;; *************** function _toggleStep *****************
  7759 ;; Defined at:
  7760 ;;		line 93 in file "timer.c"
  7761 ;; Parameters:    Size  Location     Type
  7762 ;;		None
  7763 ;; Auto vars:     Size  Location     Type
  7764 ;;		None
  7765 ;; Return value:  Size  Location     Type
  7766 ;;                  1    wreg      void 
  7767 ;; Registers used:
  7768 ;;		wreg, status,2
  7769 ;; Tracked objects:
  7770 ;;		On entry : 0/0
  7771 ;;		On exit  : 0/0
  7772 ;;		Unchanged: 0/0
  7773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7774 ;;      Params:         0       0       0       0       0       0       0
  7775 ;;      Locals:         0       0       0       0       0       0       0
  7776 ;;      Temps:          0       0       0       0       0       0       0
  7777 ;;      Totals:         0       0       0       0       0       0       0
  7778 ;;Total ram usage:        0 bytes
  7779 ;; Hardware stack levels used:    1
  7780 ;; This function calls:
  7781 ;;		Nothing
  7782 ;; This function is called by:
  7783 ;;		_isr
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           	psect	text46
  7788  0026BE                     __ptext46:
  7789                           	callstack 0
  7790  0026BE                     _toggleStep:
  7791                           	callstack 0
  7792  0026BE  FFFF               	dw	65535	; assembler added errata NOP
  7793  0026C0                     
  7794                           ;timer.c: 94:     stepToggle = 1;
  7795  0026C0  0E01               	movlw	1
  7796  0026C2  6E5B               	movwf	_stepToggle^0,c	;volatile
  7797  0026C4  0012               	return		;funcret
  7798  0026C6  FFFF               	dw	65535	; errata NOP
  7799  0026C8                     __end_of_toggleStep:
  7800                           	callstack 0
  7801                           
  7802 ;; *************** function _setTouchRel *****************
  7803 ;; Defined at:
  7804 ;;		line 86 in file "adc.c"
  7805 ;; Parameters:    Size  Location     Type
  7806 ;;		None
  7807 ;; Auto vars:     Size  Location     Type
  7808 ;;		None
  7809 ;; Return value:  Size  Location     Type
  7810 ;;                  1    wreg      void 
  7811 ;; Registers used:
  7812 ;;		wreg, status,2
  7813 ;; Tracked objects:
  7814 ;;		On entry : 0/0
  7815 ;;		On exit  : 0/0
  7816 ;;		Unchanged: 0/0
  7817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7818 ;;      Params:         0       0       0       0       0       0       0
  7819 ;;      Locals:         0       0       0       0       0       0       0
  7820 ;;      Temps:          0       0       0       0       0       0       0
  7821 ;;      Totals:         0       0       0       0       0       0       0
  7822 ;;Total ram usage:        0 bytes
  7823 ;; Hardware stack levels used:    1
  7824 ;; This function calls:
  7825 ;;		Nothing
  7826 ;; This function is called by:
  7827 ;;		_isr
  7828 ;; This function uses a non-reentrant model
  7829 ;;
  7830                           
  7831                           	psect	text47
  7832  0026C8                     __ptext47:
  7833                           	callstack 0
  7834  0026C8                     _setTouchRel:
  7835                           	callstack 0
  7836  0026C8  FFFF               	dw	65535	; assembler added errata NOP
  7837  0026CA                     
  7838                           ;adc.c: 87:     touch_rel = 1;
  7839  0026CA  0E01               	movlw	1
  7840  0026CC  6E65               	movwf	_touch_rel^0,c	;volatile
  7841  0026CE  0012               	return		;funcret
  7842  0026D0  FFFF               	dw	65535	; errata NOP
  7843  0026D2                     __end_of_setTouchRel:
  7844                           	callstack 0
  7845                           
  7846 ;; *************** function _setThermRel *****************
  7847 ;; Defined at:
  7848 ;;		line 79 in file "adc.c"
  7849 ;; Parameters:    Size  Location     Type
  7850 ;;		None
  7851 ;; Auto vars:     Size  Location     Type
  7852 ;;		None
  7853 ;; Return value:  Size  Location     Type
  7854 ;;                  1    wreg      void 
  7855 ;; Registers used:
  7856 ;;		wreg, status,2
  7857 ;; Tracked objects:
  7858 ;;		On entry : 0/0
  7859 ;;		On exit  : 0/0
  7860 ;;		Unchanged: 0/0
  7861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7862 ;;      Params:         0       0       0       0       0       0       0
  7863 ;;      Locals:         0       0       0       0       0       0       0
  7864 ;;      Temps:          0       0       0       0       0       0       0
  7865 ;;      Totals:         0       0       0       0       0       0       0
  7866 ;;Total ram usage:        0 bytes
  7867 ;; Hardware stack levels used:    1
  7868 ;; This function calls:
  7869 ;;		Nothing
  7870 ;; This function is called by:
  7871 ;;		_isr
  7872 ;; This function uses a non-reentrant model
  7873 ;;
  7874                           
  7875                           	psect	text48
  7876  0026D2                     __ptext48:
  7877                           	callstack 0
  7878  0026D2                     _setThermRel:
  7879                           	callstack 0
  7880  0026D2  FFFF               	dw	65535	; assembler added errata NOP
  7881  0026D4                     
  7882                           ;adc.c: 80:     therm_rel = 1;
  7883  0026D4  0E01               	movlw	1
  7884  0026D6  6E64               	movwf	_therm_rel^0,c	;volatile
  7885  0026D8  0012               	return		;funcret
  7886  0026DA  FFFF               	dw	65535	; errata NOP
  7887  0026DC                     __end_of_setThermRel:
  7888                           	callstack 0
  7889                           
  7890 ;; *************** function _retPeriod *****************
  7891 ;; Defined at:
  7892 ;;		line 101 in file "timer.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;		None
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;		None
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  2    0[COMRAM] unsigned int 
  7899 ;; Registers used:
  7900 ;;		None
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7906 ;;      Params:         2       0       0       0       0       0       0
  7907 ;;      Locals:         0       0       0       0       0       0       0
  7908 ;;      Temps:          0       0       0       0       0       0       0
  7909 ;;      Totals:         2       0       0       0       0       0       0
  7910 ;;Total ram usage:        2 bytes
  7911 ;; Hardware stack levels used:    1
  7912 ;; This function calls:
  7913 ;;		Nothing
  7914 ;; This function is called by:
  7915 ;;		_isr
  7916 ;; This function uses a non-reentrant model
  7917 ;;
  7918                           
  7919                           	psect	text49
  7920  002650                     __ptext49:
  7921                           	callstack 0
  7922  002650                     _retPeriod:
  7923                           	callstack 0
  7924  002650  FFFF               	dw	65535	; assembler added errata NOP
  7925  002652                     
  7926                           ;timer.c: 102:     return pwmPeriod;
  7927  002652  C04F  F001         	movff	_pwmPeriod,?_retPeriod
  7928  002656  C050  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7929  00265A  0012               	return		;funcret
  7930  00265C  FFFF               	dw	65535	; errata NOP
  7931  00265E                     __end_of_retPeriod:
  7932                           	callstack 0
  7933                           
  7934 ;; *************** function _increaseStep *****************
  7935 ;; Defined at:
  7936 ;;		line 85 in file "timer.c"
  7937 ;; Parameters:    Size  Location     Type
  7938 ;;		None
  7939 ;; Auto vars:     Size  Location     Type
  7940 ;;		None
  7941 ;; Return value:  Size  Location     Type
  7942 ;;                  1    wreg      void 
  7943 ;; Registers used:
  7944 ;;		status,2, status,0
  7945 ;; Tracked objects:
  7946 ;;		On entry : 0/0
  7947 ;;		On exit  : 0/0
  7948 ;;		Unchanged: 0/0
  7949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7950 ;;      Params:         0       0       0       0       0       0       0
  7951 ;;      Locals:         0       0       0       0       0       0       0
  7952 ;;      Temps:          0       0       0       0       0       0       0
  7953 ;;      Totals:         0       0       0       0       0       0       0
  7954 ;;Total ram usage:        0 bytes
  7955 ;; Hardware stack levels used:    1
  7956 ;; This function calls:
  7957 ;;		Nothing
  7958 ;; This function is called by:
  7959 ;;		_isr
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           	psect	text50
  7964  002704                     __ptext50:
  7965                           	callstack 0
  7966  002704                     _increaseStep:
  7967                           	callstack 0
  7968  002704  FFFF               	dw	65535	; assembler added errata NOP
  7969  002706                     
  7970                           ;timer.c: 86:     pwmStep++;
  7971  002706  2A5C               	incf	_pwmStep^0,f,c	;volatile
  7972  002708  0012               	return		;funcret
  7973  00270A  FFFF               	dw	65535	; errata NOP
  7974  00270C                     __end_of_increaseStep:
  7975                           	callstack 0
  7976                           
  7977 ;; *************** function _fatalError *****************
  7978 ;; Defined at:
  7979 ;;		line 80 in file "usart.c"
  7980 ;; Parameters:    Size  Location     Type
  7981 ;;		None
  7982 ;; Auto vars:     Size  Location     Type
  7983 ;;		None
  7984 ;; Return value:  Size  Location     Type
  7985 ;;                  1    wreg      unsigned char 
  7986 ;; Registers used:
  7987 ;;		wreg, status,2
  7988 ;; Tracked objects:
  7989 ;;		On entry : 0/0
  7990 ;;		On exit  : 0/0
  7991 ;;		Unchanged: 0/0
  7992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7993 ;;      Params:         0       0       0       0       0       0       0
  7994 ;;      Locals:         0       0       0       0       0       0       0
  7995 ;;      Temps:          0       0       0       0       0       0       0
  7996 ;;      Totals:         0       0       0       0       0       0       0
  7997 ;;Total ram usage:        0 bytes
  7998 ;; Hardware stack levels used:    1
  7999 ;; This function calls:
  8000 ;;		Nothing
  8001 ;; This function is called by:
  8002 ;;		_isr
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           	psect	text51
  8007  00270C                     __ptext51:
  8008                           	callstack 0
  8009  00270C                     _fatalError:
  8010                           	callstack 0
  8011  00270C  FFFF               	dw	65535	; assembler added errata NOP
  8012  00270E                     
  8013                           ;usart.c: 81:     return _fatalError;
  8014  00270E  5060               	movf	__fatalError^0,w,c
  8015  002710  0012               	return		;funcret
  8016  002712  FFFF               	dw	65535	; errata NOP
  8017  002714                     __end_of_fatalError:
  8018                           	callstack 0
  8019                           
  8020 ;; *************** function _abortAll *****************
  8021 ;; Defined at:
  8022 ;;		line 836 in file "motors.c"
  8023 ;; Parameters:    Size  Location     Type
  8024 ;;		None
  8025 ;; Auto vars:     Size  Location     Type
  8026 ;;		None
  8027 ;; Return value:  Size  Location     Type
  8028 ;;                  1    wreg      void 
  8029 ;; Registers used:
  8030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8031 ;; Tracked objects:
  8032 ;;		On entry : 0/0
  8033 ;;		On exit  : 0/0
  8034 ;;		Unchanged: 0/0
  8035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8036 ;;      Params:         0       0       0       0       0       0       0
  8037 ;;      Locals:         0       0       0       0       0       0       0
  8038 ;;      Temps:          0       0       0       0       0       0       0
  8039 ;;      Totals:         0       0       0       0       0       0       0
  8040 ;;Total ram usage:        0 bytes
  8041 ;; Hardware stack levels used:    1
  8042 ;; Hardware stack levels required when called:    2
  8043 ;; This function calls:
  8044 ;;		i2_printError
  8045 ;; This function is called by:
  8046 ;;		_isr
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           	psect	text52
  8051  0025F8                     __ptext52:
  8052                           	callstack 0
  8053  0025F8                     _abortAll:
  8054                           	callstack 0
  8055  0025F8  FFFF               	dw	65535	; assembler added errata NOP
  8056  0025FA                     
  8057                           ;motors.c: 844:     printError(7);
  8058  0025FA  0E07               	movlw	7
  8059  0025FC  EC78  F00E         	call	i2_printError
  8060  002600                     i2l251:
  8061  002600  FFFF               	dw	65535	; assembler added errata NOP
  8062  002602  EF00  F013         	goto	i2l251
  8063  002606  0012               	return		;funcret
  8064  002608  FFFF               	dw	65535	; errata NOP
  8065  00260A                     __end_of_abortAll:
  8066                           	callstack 0
  8067                           
  8068 ;; *************** function i2_printError *****************
  8069 ;; Defined at:
  8070 ;;		line 130 in file "usart.c"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;  errCode         1    wreg     unsigned char 
  8073 ;; Auto vars:     Size  Location     Type
  8074 ;;  errCode         1    6[COMRAM] unsigned char 
  8075 ;; Return value:  Size  Location     Type
  8076 ;;                  1    wreg      void 
  8077 ;; Registers used:
  8078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8079 ;; Tracked objects:
  8080 ;;		On entry : 0/0
  8081 ;;		On exit  : 0/0
  8082 ;;		Unchanged: 0/0
  8083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8084 ;;      Params:         0       0       0       0       0       0       0
  8085 ;;      Locals:         1       0       0       0       0       0       0
  8086 ;;      Temps:          2       0       0       0       0       0       0
  8087 ;;      Totals:         3       0       0       0       0       0       0
  8088 ;;Total ram usage:        3 bytes
  8089 ;; Hardware stack levels used:    1
  8090 ;; Hardware stack levels required when called:    1
  8091 ;; This function calls:
  8092 ;;		i2_uartTx
  8093 ;; This function is called by:
  8094 ;;		_abortAll
  8095 ;;		i2_storeData
  8096 ;; This function uses a non-reentrant model
  8097 ;;
  8098                           
  8099                           	psect	text53
  8100  001CF0                     __ptext53:
  8101                           	callstack 0
  8102  001CF0                     i2_printError:
  8103                           	callstack 0
  8104  001CF0  FFFF               	dw	65535	; assembler added errata NOP
  8105                           
  8106                           ;incstack = 0
  8107                           ;i2printError@errCode stored from wreg
  8108  001CF2  6E07               	movwf	i2printError@errCode^0,c
  8109  001CF4                     
  8110                           ;usart.c: 132:     switch(errCode){
  8111  001CF4  EFD4  F00E         	goto	i2l3110
  8112  001CF8                     i2l3092:
  8113  001CF8  FFFF               	dw	65535	; assembler added errata NOP
  8114                           
  8115                           ;usart.c: 134:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  8116  001CFA  0E90               	movlw	low _errString_Feed
  8117  001CFC  6E01               	movwf	i2uartTx@ptr^0,c
  8118  001CFE  0E00               	movlw	high _errString_Feed
  8119  001D00  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8120  001D02  0E1E               	movlw	30
  8121  001D04  6E03               	movwf	i2uartTx@length^0,c
  8122  001D06  EC0A  F012         	call	i2_uartTx	;wreg free
  8123                           
  8124                           ;usart.c: 135:             break;
  8125  001D0A  EF03  F00F         	goto	i2l566
  8126  001D0E                     i2l3094:
  8127  001D0E  FFFF               	dw	65535	; assembler added errata NOP
  8128                           
  8129                           ;usart.c: 137:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  8130  001D10  0E5E               	movlw	low _errString_ZEND
  8131  001D12  6E01               	movwf	i2uartTx@ptr^0,c
  8132  001D14  0E01               	movlw	high _errString_ZEND
  8133  001D16  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8134  001D18  0E29               	movlw	41
  8135  001D1A  6E03               	movwf	i2uartTx@length^0,c
  8136  001D1C  EC0A  F012         	call	i2_uartTx	;wreg free
  8137                           
  8138                           ;usart.c: 138:             break;
  8139  001D20  EF03  F00F         	goto	i2l566
  8140  001D24                     i2l3096:
  8141  001D24  FFFF               	dw	65535	; assembler added errata NOP
  8142                           
  8143                           ;usart.c: 140:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  8144  001D26  0E87               	movlw	low _errString_Reset
  8145  001D28  6E01               	movwf	i2uartTx@ptr^0,c
  8146  001D2A  0E01               	movlw	high _errString_Reset
  8147  001D2C  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8148  001D2E  0E28               	movlw	40
  8149  001D30  6E03               	movwf	i2uartTx@length^0,c
  8150  001D32  EC0A  F012         	call	i2_uartTx	;wreg free
  8151                           
  8152                           ;usart.c: 141:             break;
  8153  001D36  EF03  F00F         	goto	i2l566
  8154  001D3A                     i2l3098:
  8155  001D3A  FFFF               	dw	65535	; assembler added errata NOP
  8156                           
  8157                           ;usart.c: 143:             uartTx(&errString_Point[0], sizeof(errString_Point));
  8158  001D3C  0E35               	movlw	low _errString_Point
  8159  001D3E  6E01               	movwf	i2uartTx@ptr^0,c
  8160  001D40  0E01               	movlw	high _errString_Point
  8161  001D42  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8162  001D44  0E29               	movlw	41
  8163  001D46  6E03               	movwf	i2uartTx@length^0,c
  8164  001D48  EC0A  F012         	call	i2_uartTx	;wreg free
  8165                           
  8166                           ;usart.c: 144:             break;
  8167  001D4C  EF03  F00F         	goto	i2l566
  8168  001D50                     i2l3100:
  8169  001D50  FFFF               	dw	65535	; assembler added errata NOP
  8170                           
  8171                           ;usart.c: 146:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  8172  001D52  0ED6               	movlw	low _errString_Bound
  8173  001D54  6E01               	movwf	i2uartTx@ptr^0,c
  8174  001D56  0E01               	movlw	high _errString_Bound
  8175  001D58  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8176  001D5A  0E21               	movlw	33
  8177  001D5C  6E03               	movwf	i2uartTx@length^0,c
  8178  001D5E  EC0A  F012         	call	i2_uartTx	;wreg free
  8179                           
  8180                           ;usart.c: 147:             break;
  8181  001D62  EF03  F00F         	goto	i2l566
  8182  001D66                     i2l3102:
  8183  001D66  FFFF               	dw	65535	; assembler added errata NOP
  8184                           
  8185                           ;usart.c: 149:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  8186  001D68  0E00               	movlw	low _errString_PointZ
  8187  001D6A  6E01               	movwf	i2uartTx@ptr^0,c
  8188  001D6C  0E01               	movlw	high _errString_PointZ
  8189  001D6E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8190  001D70  0E35               	movlw	53
  8191  001D72  6E03               	movwf	i2uartTx@length^0,c
  8192  001D74  EC0A  F012         	call	i2_uartTx	;wreg free
  8193                           
  8194                           ;usart.c: 150:             break;
  8195  001D78  EF03  F00F         	goto	i2l566
  8196  001D7C                     i2l3104:
  8197  001D7C  FFFF               	dw	65535	; assembler added errata NOP
  8198                           
  8199                           ;usart.c: 152:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  8200  001D7E  0EAF               	movlw	low _errString_Fatal
  8201  001D80  6E01               	movwf	i2uartTx@ptr^0,c
  8202  001D82  0E01               	movlw	high _errString_Fatal
  8203  001D84  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8204  001D86  0E27               	movlw	39
  8205  001D88  6E03               	movwf	i2uartTx@length^0,c
  8206  001D8A  EC0A  F012         	call	i2_uartTx	;wreg free
  8207                           
  8208                           ;usart.c: 153:             break;
  8209  001D8E  EF03  F00F         	goto	i2l566
  8210  001D92                     i2l3106:
  8211  001D92  FFFF               	dw	65535	; assembler added errata NOP
  8212                           
  8213                           ;usart.c: 155:             uartTx(&errString_Command[0], sizeof(errString_Command));
  8214  001D94  0EAE               	movlw	low _errString_Command
  8215  001D96  6E01               	movwf	i2uartTx@ptr^0,c
  8216  001D98  0E00               	movlw	high _errString_Command
  8217  001D9A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8218  001D9C  0E18               	movlw	24
  8219  001D9E  6E03               	movwf	i2uartTx@length^0,c
  8220  001DA0  EC0A  F012         	call	i2_uartTx	;wreg free
  8221                           
  8222                           ;usart.c: 156:             break;
  8223  001DA4  EF03  F00F         	goto	i2l566
  8224  001DA8                     i2l3110:
  8225  001DA8  FFFF               	dw	65535	; assembler added errata NOP
  8226  001DAA  5007               	movf	i2printError@errCode^0,w,c
  8227  001DAC  6E05               	movwf	??i2_printError^0,c
  8228  001DAE  6A06               	clrf	(??i2_printError+1)^0,c
  8229                           
  8230                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8231                           ; Switch size 1, requested type "simple"
  8232                           ; Number of cases is 1, Range of values is 0 to 0
  8233                           ; switch strategies available:
  8234                           ; Name         Instructions Cycles
  8235                           ; simple_byte            4     3 (average)
  8236                           ;	Chosen strategy is simple_byte
  8237  001DB0  5006               	movf	(??i2_printError+1)^0,w,c
  8238  001DB2  0A00               	xorlw	0	; case 0
  8239  001DB4  B4D8               	btfsc	status,2,c
  8240  001DB6  EFDF  F00E         	goto	i2l4842
  8241  001DBA  EF03  F00F         	goto	i2l566
  8242  001DBE                     i2l4842:
  8243  001DBE  FFFF               	dw	65535	; assembler added errata NOP
  8244                           
  8245                           ; Switch size 1, requested type "simple"
  8246                           ; Number of cases is 8, Range of values is 1 to 8
  8247                           ; switch strategies available:
  8248                           ; Name         Instructions Cycles
  8249                           ; simple_byte           25    13 (average)
  8250                           ;	Chosen strategy is simple_byte
  8251  001DC0  5005               	movf	??i2_printError^0,w,c
  8252  001DC2  0A01               	xorlw	1	; case 1
  8253  001DC4  B4D8               	btfsc	status,2,c
  8254  001DC6  EF7C  F00E         	goto	i2l3092
  8255  001DCA  0A03               	xorlw	3	; case 2
  8256  001DCC  B4D8               	btfsc	status,2,c
  8257  001DCE  EF87  F00E         	goto	i2l3094
  8258  001DD2  0A01               	xorlw	1	; case 3
  8259  001DD4  B4D8               	btfsc	status,2,c
  8260  001DD6  EF92  F00E         	goto	i2l3096
  8261  001DDA  0A07               	xorlw	7	; case 4
  8262  001DDC  B4D8               	btfsc	status,2,c
  8263  001DDE  EF9D  F00E         	goto	i2l3098
  8264  001DE2  0A01               	xorlw	1	; case 5
  8265  001DE4  B4D8               	btfsc	status,2,c
  8266  001DE6  EFA8  F00E         	goto	i2l3100
  8267  001DEA  0A03               	xorlw	3	; case 6
  8268  001DEC  B4D8               	btfsc	status,2,c
  8269  001DEE  EFB3  F00E         	goto	i2l3102
  8270  001DF2  0A01               	xorlw	1	; case 7
  8271  001DF4  B4D8               	btfsc	status,2,c
  8272  001DF6  EFBE  F00E         	goto	i2l3104
  8273  001DFA  0A0F               	xorlw	15	; case 8
  8274  001DFC  B4D8               	btfsc	status,2,c
  8275  001DFE  EFC9  F00E         	goto	i2l3106
  8276  001E02  EF03  F00F         	goto	i2l566
  8277  001E06                     i2l566:
  8278  001E06  FFFF               	dw	65535	; assembler added errata NOP
  8279  001E08  0012               	return		;funcret
  8280  001E0A  FFFF               	dw	65535	; errata NOP
  8281  001E0C                     __end_ofi2_printError:
  8282                           	callstack 0
  8283                           
  8284 ;; *************** function i2_uartTx *****************
  8285 ;; Defined at:
  8286 ;;		line 167 in file "usart.c"
  8287 ;; Parameters:    Size  Location     Type
  8288 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  8289 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  8290 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  8291 ;;  length          1    2[COMRAM] unsigned char 
  8292 ;; Auto vars:     Size  Location     Type
  8293 ;;  i               1    3[COMRAM] unsigned char 
  8294 ;; Return value:  Size  Location     Type
  8295 ;;                  1    wreg      void 
  8296 ;; Registers used:
  8297 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8298 ;; Tracked objects:
  8299 ;;		On entry : 0/0
  8300 ;;		On exit  : 0/0
  8301 ;;		Unchanged: 0/0
  8302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8303 ;;      Params:         3       0       0       0       0       0       0
  8304 ;;      Locals:         1       0       0       0       0       0       0
  8305 ;;      Temps:          0       0       0       0       0       0       0
  8306 ;;      Totals:         4       0       0       0       0       0       0
  8307 ;;Total ram usage:        4 bytes
  8308 ;; Hardware stack levels used:    1
  8309 ;; This function calls:
  8310 ;;		Nothing
  8311 ;; This function is called by:
  8312 ;;		i2_printError
  8313 ;; This function uses a non-reentrant model
  8314 ;;
  8315                           
  8316                           	psect	text54
  8317  002414                     __ptext54:
  8318                           	callstack 0
  8319  002414                     i2_uartTx:
  8320                           	callstack 0
  8321  002414  FFFF               	dw	65535	; assembler added errata NOP
  8322  002416                     
  8323                           ;usart.c: 167: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 168: {;usa
      +                          rt.c: 170:     for(char i = 1; i < length; i++){
  8324  002416  0E01               	movlw	1
  8325  002418  6E04               	movwf	i2uartTx@i^0,c
  8326  00241A  EF23  F012         	goto	i2l2794
  8327  00241E                     i2l2790:
  8328  00241E  FFFF               	dw	65535	; assembler added errata NOP
  8329                           
  8330                           ;usart.c: 172:         TXREG = *ptr;
  8331  002420  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  8332  002424  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  8333  002428  50DF               	movf	indf2,w,c
  8334  00242A  6EAD               	movwf	173,c	;volatile
  8335  00242C                     i2l571:
  8336  00242C  FFFF               	dw	65535	; assembler added errata NOP
  8337  00242E  A2AC               	btfss	172,1,c	;volatile
  8338  002430  EF1C  F012         	goto	i2u195_41
  8339  002434  EF1F  F012         	goto	i2u195_40
  8340  002438                     i2u195_41:
  8341  002438  FFFF               	dw	65535	; assembler added errata NOP
  8342  00243A  EF16  F012         	goto	i2l571
  8343  00243E                     i2u195_40:
  8344  00243E  FFFF               	dw	65535	; assembler added errata NOP
  8345  002440                     
  8346                           ;usart.c: 176:         ptr++;
  8347  002440  4A01               	infsnz	i2uartTx@ptr^0,f,c
  8348  002442  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  8349                           
  8350                           ;usart.c: 177:     }
  8351  002444  2A04               	incf	i2uartTx@i^0,f,c
  8352  002446                     i2l2794:
  8353  002446  FFFF               	dw	65535	; assembler added errata NOP
  8354  002448  5003               	movf	i2uartTx@length^0,w,c
  8355  00244A  5C04               	subwf	i2uartTx@i^0,w,c
  8356  00244C  A0D8               	btfss	status,0,c
  8357  00244E  EF2B  F012         	goto	i2u196_41
  8358  002452  EF2E  F012         	goto	i2u196_40
  8359  002456                     i2u196_41:
  8360  002456  FFFF               	dw	65535	; assembler added errata NOP
  8361  002458  EF0F  F012         	goto	i2l2790
  8362  00245C                     i2u196_40:
  8363  00245C  FFFF               	dw	65535	; assembler added errata NOP
  8364  00245E  0012               	return		;funcret
  8365  002460  FFFF               	dw	65535	; errata NOP
  8366  002462                     __end_ofi2_uartTx:
  8367                           	callstack 0
  8368                           
  8369                           	psect	rparam
  8370  0000                     
  8371                           	psect	temp
  8372  00006E                     btemp:
  8373                           	callstack 0
  8374  00006E                     	ds	1
  8375  0000                     int$flags	set	btemp
  8376  0000                     wtemp8	set	btemp+1
  8377  0000                     ttemp5	set	btemp+1
  8378  0000                     ttemp6	set	btemp+4
  8379  0000                     ttemp7	set	btemp+8
  8380                           
  8381                           	psect	idloc
  8382                           
  8383                           ;Config register IDLOC0 @ 0x200000
  8384                           ;	unspecified, using default values
  8385  200000                     	org	2097152
  8386  200000  FF                 	db	255
  8387                           
  8388                           ;Config register IDLOC1 @ 0x200001
  8389                           ;	unspecified, using default values
  8390  200001                     	org	2097153
  8391  200001  FF                 	db	255
  8392                           
  8393                           ;Config register IDLOC2 @ 0x200002
  8394                           ;	unspecified, using default values
  8395  200002                     	org	2097154
  8396  200002  FF                 	db	255
  8397                           
  8398                           ;Config register IDLOC3 @ 0x200003
  8399                           ;	unspecified, using default values
  8400  200003                     	org	2097155
  8401  200003  FF                 	db	255
  8402                           
  8403                           ;Config register IDLOC4 @ 0x200004
  8404                           ;	unspecified, using default values
  8405  200004                     	org	2097156
  8406  200004  FF                 	db	255
  8407                           
  8408                           ;Config register IDLOC5 @ 0x200005
  8409                           ;	unspecified, using default values
  8410  200005                     	org	2097157
  8411  200005  FF                 	db	255
  8412                           
  8413                           ;Config register IDLOC6 @ 0x200006
  8414                           ;	unspecified, using default values
  8415  200006                     	org	2097158
  8416  200006  FF                 	db	255
  8417                           
  8418                           ;Config register IDLOC7 @ 0x200007
  8419                           ;	unspecified, using default values
  8420  200007                     	org	2097159
  8421  200007  FF                 	db	255
  8422                           
  8423                           	psect	config
  8424                           
  8425                           ; Padding undefined space
  8426  300000                     	org	3145728
  8427  300000  FF                 	db	255
  8428                           
  8429                           ;Config register CONFIG1H @ 0x300001
  8430                           ;	Oscillator Selection bits
  8431                           ;	OSC = XT, XT oscillator
  8432                           ;	Oscillator System Clock Switch Enable bit
  8433                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8434  300001                     	org	3145729
  8435  300001  21                 	db	33
  8436                           
  8437                           ;Config register CONFIG2L @ 0x300002
  8438                           ;	Power-up Timer Enable bit
  8439                           ;	PWRT = OFF, PWRT disabled
  8440                           ;	Brown-out Reset Enable bit
  8441                           ;	BOR = OFF, Brown-out Reset disabled
  8442                           ;	Brown-out Reset Voltage bits
  8443                           ;	BORV = 20, VBOR set to 2.0V
  8444  300002                     	org	3145730
  8445  300002  0D                 	db	13
  8446                           
  8447                           ;Config register CONFIG2H @ 0x300003
  8448                           ;	Watchdog Timer Enable bit
  8449                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8450                           ;	Watchdog Timer Postscale Select bits
  8451                           ;	WDTPS = 128, 1:128
  8452  300003                     	org	3145731
  8453  300003  0E                 	db	14
  8454                           
  8455                           ; Padding undefined space
  8456  300004                     	org	3145732
  8457  300004  FF                 	db	255
  8458                           
  8459                           ;Config register CONFIG3H @ 0x300005
  8460                           ;	CCP2 Mux bit
  8461                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8462  300005                     	org	3145733
  8463  300005  00                 	db	0
  8464                           
  8465                           ;Config register CONFIG4L @ 0x300006
  8466                           ;	Stack Full/Underflow Reset Enable bit
  8467                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8468                           ;	Low Voltage ICSP Enable bit
  8469                           ;	LVP = OFF, Low Voltage ICSP disabled
  8470                           ;	Background Debugger Enable bit
  8471                           ;	DEBUG = 0x1, unprogrammed default
  8472  300006                     	org	3145734
  8473  300006  80                 	db	128
  8474                           
  8475                           ; Padding undefined space
  8476  300007                     	org	3145735
  8477  300007  FF                 	db	255
  8478                           
  8479                           ;Config register CONFIG5L @ 0x300008
  8480                           ;	Code Protection bit
  8481                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8482                           ;	Code Protection bit
  8483                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8484                           ;	Code Protection bit
  8485                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8486                           ;	Code Protection bit
  8487                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8488  300008                     	org	3145736
  8489  300008  0F                 	db	15
  8490                           
  8491                           ;Config register CONFIG5H @ 0x300009
  8492                           ;	Boot Block Code Protection bit
  8493                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8494                           ;	Data EEPROM Code Protection bit
  8495                           ;	CPD = OFF, Data EEPROM not code protected
  8496  300009                     	org	3145737
  8497  300009  C0                 	db	192
  8498                           
  8499                           ;Config register CONFIG6L @ 0x30000A
  8500                           ;	Write Protection bit
  8501                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8502                           ;	Write Protection bit
  8503                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8504                           ;	Write Protection bit
  8505                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8506                           ;	Write Protection bit
  8507                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8508  30000A                     	org	3145738
  8509  30000A  0F                 	db	15
  8510                           
  8511                           ;Config register CONFIG6H @ 0x30000B
  8512                           ;	Configuration Register Write Protection bit
  8513                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8514                           ;	Boot Block Write Protection bit
  8515                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8516                           ;	Data EEPROM Write Protection bit
  8517                           ;	WRTD = OFF, Data EEPROM not write protected
  8518  30000B                     	org	3145739
  8519  30000B  E0                 	db	224
  8520                           
  8521                           ;Config register CONFIG7L @ 0x30000C
  8522                           ;	Table Read Protection bit
  8523                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8524                           ;	Table Read Protection bit
  8525                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8526                           ;	Table Read Protection bit
  8527                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8528                           ;	Table Read Protection bit
  8529                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8530  30000C                     	org	3145740
  8531  30000C  0F                 	db	15
  8532                           
  8533                           ;Config register CONFIG7H @ 0x30000D
  8534                           ;	Boot Block Table Read Protection bit
  8535                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8536  30000D                     	org	3145741
  8537  30000D  40                 	db	64
  8538                           tosu	equ	0xFFF
  8539                           tosh	equ	0xFFE
  8540                           tosl	equ	0xFFD
  8541                           stkptr	equ	0xFFC
  8542                           pclatu	equ	0xFFB
  8543                           pclath	equ	0xFFA
  8544                           pcl	equ	0xFF9
  8545                           tblptru	equ	0xFF8
  8546                           tblptrh	equ	0xFF7
  8547                           tblptrl	equ	0xFF6
  8548                           tablat	equ	0xFF5
  8549                           prodh	equ	0xFF4
  8550                           prodl	equ	0xFF3
  8551                           indf0	equ	0xFEF
  8552                           postinc0	equ	0xFEE
  8553                           postdec0	equ	0xFED
  8554                           preinc0	equ	0xFEC
  8555                           plusw0	equ	0xFEB
  8556                           fsr0h	equ	0xFEA
  8557                           fsr0l	equ	0xFE9
  8558                           wreg	equ	0xFE8
  8559                           indf1	equ	0xFE7
  8560                           postinc1	equ	0xFE6
  8561                           postdec1	equ	0xFE5
  8562                           preinc1	equ	0xFE4
  8563                           plusw1	equ	0xFE3
  8564                           fsr1h	equ	0xFE2
  8565                           fsr1l	equ	0xFE1
  8566                           bsr	equ	0xFE0
  8567                           indf2	equ	0xFDF
  8568                           postinc2	equ	0xFDE
  8569                           postdec2	equ	0xFDD
  8570                           preinc2	equ	0xFDC
  8571                           plusw2	equ	0xFDB
  8572                           fsr2h	equ	0xFDA
  8573                           fsr2l	equ	0xFD9
  8574                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    20
    Data        324
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     109
    BANK0           128     17     115
    BANK1           256      0     247
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK1[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10470
                                             12 BANK0      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    6513
                                              7 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3203
                                              0 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                          _resetStep
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2546
                                             20 COMRAM    14     6      8
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetTM2_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetTM0_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepMade
     _moveToPoint
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepCounter
       _stepMade
     _pickObject
       _resetTM2_Temp
       _stepMade
     _releaseObj
       _resetTM2_Temp
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _resetStep
       _resetTM2_Temp
       _stepMade
     _touchObject
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _resetTM0_Temp
     _resetTM2_Temp
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80     11      73       5       89.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D7      15        0.0%
DATA                 0      0     1D7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sun May 02 09:05:48 2021

                                        ___fldiv@aexp 0038  
                                        ___fldiv@bexp 0037  
                               __end_of_interruptInit 24E4  
                                        ___fldiv@sign 0030  
                                                  l90 2566  
                                                  l84 263E  
                                                 l210 1F16  
                                                 l211 1F1A  
                                                 l131 17D2  
                                                 l132 1942  
                                                 l222 22DC  
                                                 l214 22AA  
                                                 l151 1962  
                                                 l217 22BC  
                                                 l161 0D68  
                                                 l241 2536  
                                                 l154 0A80  
                                                 l242 2540  
                                                 l234 20F6  
                                                 l156 0AC0  
                                                 l236 2126  
                                                 l157 0AC8  
                                                 l325 19B4  
                                                 l326 19AE  
                                                 l247 2506  
                                                 l327 19B0  
                                                 l248 2510  
                                                 l441 26B0  
                                                 l178 0D26  
                                                 l346 107C  
                                                 l523 2630  
                                                 l187 0D88  
                                                 l444 25F4  
                                                 l372 26F8  
                                                 l620 25D0  
                                                 l381 269C  
                                                 l541 26F0  
                                                 l198 2028  
                                                 l526 2622  
                                                 l366 258C  
                                                 l614 25E2  
                                                 l623 25BE  
                                                 l375 2672  
                                                 l199 202C  
                                                 l447 24BE  
                                                 l535 26E8  
                                                 l384 26A6  
                                                 l448 24D4  
                                                 l544 2688  
                                                 l552 25AA  
                                                 l369 2692  
                                                 l449 24E0  
                                                 l529 26E0  
                                                 l617 2614  
                                                 l626 267E  
                                                 l378 2666  
                                                 l571 23DE  
                                                 l629 26BA  
                                                 l549 23C2  
                                                 l566 1CEA  
                                                 l575 2410  
                                                 l592 1212  
                                                 l599 1300  
                                                 l938 1BCE  
                                                 _isr 0008  
                                         _touchObject 1F1E  
                                                 prod 000FF3  
                                                 wreg 000FE8  
                                        ___fltol@exp1 0042  
                                         main@errCode 00F0  
                                                l1310 1702  
                                                l1223 0A42  
                                                l1303 1696  
                                                l1225 085A  
                                                l1234 08B0  
                                                l1236 0940  
                                                l1228 0814  
                                                l1237 0928  
                                                l4000 1680  
                                                l4010 1716  
                                                l4002 168C  
                                                l4020 1768  
                                                l4012 1718  
                                                l4004 16CE  
                                                l4110 0D76  
                                                l4102 0D26  
                                                l4030 0A84  
                                                l4022 176A  
                                                l4014 171E  
                                                l4006 16DC  
                                                l4112 0D7E  
                                                l4104 0D40  
                                                l4040 0AE0  
                                                l4032 0A88  
                                                l4016 1742  
                                                l4008 16F0  
                                                l1296 15EA  
                                                l4120 1F24  
                                                l4200 1EE2  
                                                l4114 0D86  
                                                l4106 0D56  
                                                l4050 0B46  
                                                l4042 0AE6  
                                                l4034 0AB4  
                                                l4026 0A4A  
                                                l4018 1756  
                                                l4130 1F60  
                                                l4122 1F32  
                                                l4210 1EF8  
                                                l4202 1EE4  
                                                l1299 177C  
                                                l4220 2228  
                                                l4108 0D6E  
                                                l4052 0B50  
                                                l4060 0B9C  
                                                l4044 0AFE  
                                                l4036 0AC4  
                                                l4028 0A74  
                                                l4140 1FBC  
                                                l4132 1F6C  
                                                l4124 1F34  
                                                l4212 1EFC  
                                                l4204 1EE8  
                                                l4300 1C34  
                                                l4230 2262  
                                                l4222 2234  
                                                l4070 0C10  
                                                l4062 0BB2  
                                                l4054 0B66  
                                                l4046 0B0A  
                                                l4038 0AD2  
                                                l4150 1FF4  
                                                l4134 1F8A  
                                                l4126 1F44  
                                                l4142 1FC0  
                                                l4118 1F20  
                                                l4214 1F0E  
                                                l4206 1EEC  
                                                l4302 1C4A  
                                                l4310 1C8C  
                                                l4320 2636  
                                                l4240 22CA  
                                                l4232 227A  
                                                l4224 223A  
                                                l4080 0C5E  
                                                l4056 0B82  
                                                l4048 0B20  
                                                l4160 200A  
                                                l4152 1FF6  
                                                l4144 1FDC  
                                                l4136 1F8E  
                                                l4128 1F4A  
                                                l4208 1EF4  
                                                l4400 1958  
                                                l4304 1C60  
                                                l4242 22D2  
                                                l4234 227E  
                                                l4226 2240  
                                                l4218 2224  
                                                l4090 0CC0  
                                                l4082 0C74  
                                                l4066 0BE4  
                                                l4058 0B86  
                                                l4074 0C18  
                                                l4250 2040  
                                                l4162 200E  
                                                l4154 1FFA  
                                                l4138 1FA0  
                                                l4146 1FEC  
                                                l4170 1E12  
                                                l4330 255A  
                                                l4322 2546  
                                                l4410 24D2  
                                                l4402 1960  
                                                l4306 1C76  
                                                l4316 2628  
                                                l4244 22DA  
                                                l4236 2290  
                                                l4228 2256  
                                                l4084 0C90  
                                                l4076 0C2E  
                                                l4068 0BFA  
                                                l4260 20CE  
                                                l4252 2090  
                                                l4164 2020  
                                                l4156 1FFE  
                                                l4148 1FF2  
                                                l4180 1E4E  
                                                l4172 1E20  
                                                l4420 257E  
                                                l4412 256C  
                                                l4332 255E  
                                                l4324 254E  
                                                l4340 1784  
                                                l4500 12A4  
                                                l4238 22C2  
                                                l4094 0CF2  
                                                l4086 0C94  
                                                l4078 0C54  
                                                l4262 20D6  
                                                l4254 209E  
                                                l4270 2102  
                                                l4158 2006  
                                                l4190 1EAA  
                                                l4182 1E5A  
                                                l4174 1E22  
                                                l4422 2588  
                                                l4414 2574  
                                                l4334 2560  
                                                l4326 2552  
                                                l4406 24AA  
                                                l4350 17B0  
                                                l4342 178A  
                                                l4502 12AE  
                                                l4510 12FA  
                                                l4430 25D6  
                                                l4096 0D08  
                                                l4088 0CAA  
                                                l4280 253C  
                                                l3800 0624  
                                                l4272 211E  
                                                l4264 20DA  
                                                l4256 20B0  
                                                l4248 2036  
                                                l4184 1E78  
                                                l4176 1E32  
                                                l4192 1EAE  
                                                l4168 1E0E  
                                                l4424 258A  
                                                l4416 257A  
                                                l4336 2562  
                                                l4328 2556  
                                                l4408 24BC  
                                                l4520 2684  
                                                l4360 181A  
                                                l4352 17C6  
                                                l4344 1796  
                                                l4504 12B8  
                                                l4432 25DE  
                                                l4440 25C4  
                                                l4098 0D1E  
                                                l4274 2516  
                                                l4282 24E6  
                                                l3810 0672  
                                                l3802 0636  
                                                l4266 20F8  
                                                l4258 20B4  
                                                l4194 1ECA  
                                                l4186 1E7C  
                                                l4178 1E38  
                                                l4530 0D9E  
                                                l4418 257C  
                                                l4338 2564  
                                                l4442 26EE  
                                                l4522 26E6  
                                                l4370 1860  
                                                l4362 181E  
                                                l4354 17E6  
                                                l4346 17A4  
                                                l4290 1BD8  
                                                l4450 1086  
                                                l4434 260C  
                                                l4426 2592  
                                                l4276 251A  
                                                l4284 24EA  
                                                l3900 091E  
                                                l3820 069E  
                                                l3812 0676  
                                                l3804 0638  
                                                l4268 20FC  
                                                l4188 1E8E  
                                                l4196 1EDA  
                                                l4604 106A  
                                                l4540 0E46  
                                                l4532 0DD8  
                                                l4380 18B4  
                                                l4372 1878  
                                                l4364 1830  
                                                l4356 17F8  
                                                l4348 17AA  
                                                l4292 1BDC  
                                                l4508 12C4  
                                                l4460 10C6  
                                                l4452 1096  
                                                l4436 2610  
                                                l4428 25A6  
                                                l4278 2538  
                                                l4286 2508  
                                                l3910 099E  
                                                l3830 06EC  
                                                l3822 06B0  
                                                l3806 064E  
                                                l3814 067E  
                                                l4198 1EE0  
                                                l4606 1070  
                                                l4550 0EDA  
                                                l4542 0E5A  
                                                l4534 0DE8  
                                                l4526 0D8E  
                                                l4446 261A  
                                                l4622 26DE  
                                                l4382 18BE  
                                                l4374 187C  
                                                l4366 1844  
                                                l4358 1802  
                                                l4390 1906  
                                                l4630 236C  
                                                l4294 1BF2  
                                                l4470 1132  
                                                l4454 109C  
                                                l4438 2612  
                                                l4288 250C  
                                                l3920 0A14  
                                                l3904 0956  
                                                l3912 09A2  
                                                l3840 0736  
                                                l3832 06F0  
                                                l3824 06B2  
                                                l3816 0690  
                                                l3808 0662  
                                                l4552 0EDE  
                                                l4544 0E94  
                                                l4536 0DFC  
                                                l4560 0F38  
                                                l4528 0D9A  
                                                l4392 191C  
                                                l4384 18D6  
                                                l4376 188E  
                                                l4368 1856  
                                                l4632 23AC  
                                                l4624 2368  
                                                l4296 1C08  
                                                l4480 120A  
                                                l4472 113A  
                                                l4456 10AA  
                                                l4464 10D0  
                                                l4640 196C  
                                                l3762 26B6  
                                                l3922 0A1A  
                                                l3914 09C2  
                                                l3906 0962  
                                                l3850 076E  
                                                l3842 073E  
                                                l3826 06C8  
                                                l3834 06F8  
                                                l3818 0698  
                                                l4570 0F70  
                                                l4562 0F4E  
                                                l4554 0EE6  
                                                l4546 0EA4  
                                                l4538 0E36  
                                                l4394 1930  
                                                l4386 18DA  
                                                l4378 18A2  
                                                l4634 23AE  
                                                l4298 1C1E  
                                                l4490 125A  
                                                l4482 121C  
                                                l4474 11B8  
                                                l4458 10B8  
                                                l4466 1106  
                                                l4650 1980  
                                                l4642 1970  
                                                l3772 26AC  
                                                l3764 25B0  
                                                l3924 0A2C  
                                                l3916 09D8  
                                                l3908 0974  
                                                l3860 07AE  
                                                l3852 076E  
                                                l3844 0744  
                                                l3836 070A  
                                                l3828 06DC  
                                                l3780 2698  
                                                l4580 0F96  
                                                l4572 0F76  
                                                l4564 0F56  
                                                l4548 0EB8  
                                                l4396 1948  
                                                l4388 18EC  
                                                l4492 126E  
                                                l4484 122C  
                                                l4476 11DA  
                                                l4468 111E  
                                                l4660 19D2  
                                                l4652 198C  
                                                l4644 1974  
                                                l4636 1966  
                                                l3774 25E8  
                                                l3766 25B4  
                                                l3926 0A32  
                                                l3918 09F8  
                                                l3870 0800  
                                                l3862 07BE  
                                                l3838 0726  
                                                l3950 1B16  
                                                l3942 1AD0  
                                                l3782 26A2  
                                                l4590 1028  
                                                l4582 0FD8  
                                                l4574 0F7E  
                                                l4566 0F68  
                                                l4558 0EF0  
                                                l4398 1950  
                                                l3790 23C8  
                                                l4494 1282  
                                                l4486 1240  
                                                l4478 1200  
                                                l4830 10E6  
                                                l4670 1A0C  
                                                l4662 19DE  
                                                l4654 1994  
                                                l4646 1978  
                                                l4638 1966  
                                                l3768 25B8  
                                                l3776 2678  
                                                l3928 0A36  
                                                l3880 0856  
                                                l3872 0812  
                                                l3864 07CE  
                                                l3856 0782  
                                                l3848 0758  
                                                l3960 1B50  
                                                l3952 1B28  
                                                l3944 1B00  
                                                l3936 1AA0  
                                                l3784 266C  
                                                l4592 103A  
                                                l3792 23D0  
                                                l4832 12DA  
                                                l4496 1294  
                                                l4488 1244  
                                                l4680 1A7C  
                                                l4672 1A20  
                                                l4664 19F0  
                                                l4656 19A8  
                                                l4648 197C  
                                                l3890 08AE  
                                                l3882 0870  
                                                l3874 0820  
                                                l3866 07D6  
                                                l3858 079E  
                                                l3970 1B82  
                                                l3962 1B5A  
                                                l3946 1B02  
                                                l3938 1ABA  
                                                l3778 268E  
                                                l3786 26F6  
                                                l4594 1042  
                                                l3794 23F2  
                                                l4834 1CA2  
                                                l4498 129A  
                                                l4682 1A84  
                                                l4674 1A34  
                                                l4666 1A00  
                                                l4658 19B8  
                                                l3884 088A  
                                                l3892 08C2  
                                                l3876 0844  
                                                l3868 07EC  
                                                l3972 1B96  
                                                l3948 1B12  
                                                l3980 158E  
                                                l3788 2660  
                                                l4596 104A  
                                                l4588 0FF0  
                                                l4836 0F10  
                                                l3796 23F8  
                                                l4684 1A8A  
                                                l4676 1A5E  
                                                l4668 1A06  
                                                l3894 08D6  
                                                l3886 0890  
                                                l3878 0846  
                                                l3798 0618  
                                                l3974 1BAC  
                                                l3958 1B44  
                                                l3982 15A2  
                                                l4598 1052  
                                                l4686 1A8E  
                                                l4678 1A62  
                                                l3896 08DA  
                                                l3888 089C  
                                                l3976 1BBC  
                                                l3968 1B74  
                                                l3992 162C  
                                                l3984 15B4  
                                                l4688 1A92  
                                                l3898 08EC  
                                                l3994 1636  
                                                l3986 15FC  
                                                l3996 1644  
                                                l3988 1618  
                                                ?_isr 0001  
                                                l3998 167C  
                                                u3000 0660  
                                                u3001 065A  
                                                u3010 06AE  
                                                u3011 06A8  
                                                u3100 0888  
                                                u3020 06C6  
                                                u3101 0882  
                                                u3021 06C0  
                                                _LATA 000F89  
                                                u3110 08AC  
                                                u3030 06DA  
                                                _LATB 000F8A  
                                                u3111 08A6  
                                                u3031 06D4  
                                                _LATC 000F8B  
                                                u3200 0A2A  
                                                u3120 08D4  
                                                u3040 0724  
                                                u4000 11DA  
                                                _LATD 000F8C  
                                                u3201 0A24  
                                                u3121 08CE  
                                                u3041 071E  
                                                u4001 11D4  
                                                u3130 08EA  
                                                u3050 076C  
                                                u3210 1AB8  
                                                u4010 11FE  
                                                u3131 08E4  
                                                u3051 0766  
                                                u3211 1AB2  
                                                u4011 11F8  
                                                u3140 091C  
                                                u3060 07EA  
                                                u3220 1AF4  
                                                u3300 1616  
                                                u4100 1038  
                                                u4020 1258  
                                                u3141 0916  
                                                u3061 07E4  
                                                u3301 1610  
                                                u4101 1032  
                                                u4021 1252  
                                                u3150 093A  
                                                u3070 0810  
                                                u3230 1B26  
                                                u3310 1676  
                                                u4110 1064  
                                                u4030 126C  
                                                u3151 0934  
                                                u3071 080A  
                                                u3231 1B20  
                                                u3311 1670  
                                                u4111 105E  
                                                u4031 1266  
                                                u3400 0AFC  
                                                u3160 0954  
                                                u3080 0842  
                                                u3240 1B3E  
                                                u3320 16C8  
                                                u4120 23C0  
                                                u4040 1280  
                                                u3401 0AF6  
                                                u3161 094E  
                                                u3081 083C  
                                                u3241 1B38  
                                                u3225 1AE8  
                                                u3321 16C2  
                                                u4121 23BA  
                                                u4041 127A  
                                                u3410 0B1E  
                                                u3170 0972  
                                                u3090 086E  
                                                u3250 1B6E  
                                                u3330 16EE  
                                                u4050 1294  
                                                u4130 19A6  
                                                u3411 0B18  
                                                u3171 096C  
                                                u3091 0868  
                                                u3251 1B68  
                                                u3331 16E8  
                                                u4051 128E  
                                                u4131 19A0  
                                                u3500 0C52  
                                                u3420 0B44  
                                                u3180 09C0  
                                                u3260 1B96  
                                                u3340 1702  
                                                u4060 0F4C  
                                                u4140 19D0  
                                                u3501 0C4C  
                                                u3421 0B3E  
                                                u3181 09BA  
                                                u3261 1B90  
                                                u3341 16FC  
                                                u4061 0F46  
                                                u4141 19CA  
                                                u3510 0C72  
                                                u3430 0B64  
                                                u3190 09F6  
                                                u3270 1BAA  
                                                u3350 1714  
                                                u4070 0F68  
                                                u4150 1A7A  
                                                u3511 0C6C  
                                                u3431 0B5E  
                                                u3191 09F0  
                                                u3271 1BA4  
                                                u3351 170E  
                                                u4071 0F62  
                                                u4151 1A74  
                                                u3520 0C8E  
                                                u3440 0B80  
                                                u3360 1754  
                                                u3280 15A0  
                                                u3600 1F5E  
                                                u4080 0F90  
                                                u3521 0C88  
                                                u3441 0B7A  
                                                u3361 174E  
                                                u3281 159A  
                                                u3601 1F58  
                                                u4081 0F8A  
                                                u3530 0CBE  
                                                u3450 0BB0  
                                                u3370 1766  
                                                u3290 15B2  
                                                u3610 1F88  
                                                u4090 0FEA  
                                                u3531 0CB8  
                                                u3451 0BAA  
                                                u3371 1760  
                                                u3291 15AC  
                                                u3611 1F82  
                                                u4091 0FE4  
                                                u3540 0CEC  
                                                u3460 0BDE  
                                                u3380 0A72  
                                                u3620 1FBA  
                                                u3700 1EDA  
                                                u3541 0CE6  
                                                u3461 0BD8  
                                                u3381 0A6C  
                                                u3621 1FB4  
                                                u3701 1ED4  
                                                u3550 0D06  
                                                u3470 0BF8  
                                                u3390 0AB2  
                                                u3630 1FDA  
                                                u3710 1F0C  
                                                u3551 0D00  
                                                u3471 0BF2  
                                                u3391 0AAC  
                                                u3631 1FD4  
                                                u3711 1F06  
                                                u3720 2254  
                                                u3560 0D1C  
                                                u3480 0C0E  
                                                u3800 2504  
                                                u3640 1FEC  
                                                u3721 224E  
                                                u3561 0D16  
                                                u3481 0C08  
                                                u3801 24FE  
                                                u3641 1FE6  
                                                u3730 2278  
                                                u3570 0D40  
                                                u3490 0C2C  
                                                u3650 201E  
                                                u3810 17C4  
                                                u3731 2272  
                                                u3571 0D3A  
                                                u3491 0C26  
                                                u3651 2018  
                                                u3811 17BE  
                                                u3740 22AA  
                                                u3580 0D54  
                                                u3660 1E4C  
                                                u3900 18D4  
                                                u3820 17E4  
                                                u3741 22A4  
                                                u3581 0D4E  
                                                u3661 1E46  
                                                u3901 18CE  
                                                u3821 17DE  
                                                u3750 22BC  
                                                u3590 0D68  
                                                u3670 1E76  
                                                u3910 1906  
                                                u3830 17F8  
                                                u3751 22B6  
                                                u3591 0D62  
                                                u3671 1E70  
                                                u3911 1900  
                                                u3831 17F2  
                                                u3760 20CC  
                                                u3680 1EA8  
                                                u3920 191A  
                                                u3840 1818  
                                                u2960 23F0  
                                                u3761 20C6  
                                                u3681 1EA2  
                                                u3921 1914  
                                                u3841 1812  
                                                u2961 23EA  
                                                u3770 20F4  
                                                u3690 1EC8  
                                                u3930 192E  
                                                u3850 1842  
                                                u2970 240E  
                                         main@newData 00F1  
                                                u3771 20EE  
                                                u3691 1EC2  
                                                u3931 1928  
                                                u3851 183C  
                                                u2971 2408  
                                                u2980 0634  
                                                u3780 211C  
                                                u3940 1942  
                                                u3860 1856  
                                                u2981 062E  
                                                u3781 2116  
                                                u3941 193C  
                                                u3861 1850  
                                                u3790 2534  
                                                u2990 064C  
                                                u3950 24BA  
                                                u3870 1876  
                                                u3791 252E  
                                                u2991 0646  
                                                u3951 24B4  
                                                u3871 1870  
                                                u3960 24D0  
                                                u3880 18A0  
                                                u3961 24CA  
                                                u3881 189A  
                                                u3890 18B4  
                                                u3970 111C  
                                                u3891 18AE  
                                                u3971 1116  
                                                u3980 1130  
                                                u3981 112A  
                                                u3990 11B6  
                                                u3991 11B0  
                                                i2l81 264C  
                                                i2l87 2700  
                                                _TMR0 000FD6  
                                                _TMR2 000FCC  
                                 __end_ofi2_storeData 158A  
                                                _main 1966  
                                                _maxX 0607  
                                                _maxY 0605  
                                __end_ofi2_printError 1E0C  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                btemp 006E  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 01A4  
                                     ___fldiv@new_exp 0031  
                                        ___param_bank 000000  
                                     ??_whatsTM0Limit 0001  
                                               ??_isr 000B  
                                        ?_executeData 0001  
                                     executeData@data 00EB  
                                       ___fltol@sign1 0041  
                                               ?_main 0001  
                                     __end_of___fldiv 0A48  
                                     __end_of___fltol 1BD4  
                                               i2l251 2600  
                                               i2l252 2602  
                                               i2l390 26CE  
                                               i2l632 2708  
                                               i2l538 2710  
                                               i2l466 018C  
                                               i2l571 242C  
                                               i2l387 26D8  
                                               i2l635 26C4  
                                               i2l566 1E06  
                                               i2l638 265A  
                                               i2l575 245E  
                                               i2l592 1496  
                                               i2l599 1584  
                                rotateObj@rotSequence 0080  
                                               _SPBRG 000FAF  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                                               _TRISC 000F94  
                                               _TRISD 000F95  
                                               _TXREG 000FAD  
                                     __end_of_getData 2634  
                                     i2storeData@data 000A  
                                     __end_of_initADC 2590  
                                        ?_newSequence 0001  
                                     __end_of_liftArm 22E0  
                                     __end_of_readSeq 26EC  
                                        stepMade@temp 0014  
                                               tablat 000FF5  
                                      i2uartTx@length 0003  
                                     __end_of_stopADC 26FC  
                                               ttemp5 006F  
                                               ttemp6 0072  
                                               ttemp7 0076  
                                               status 000FD8  
                                               wtemp8 006F  
                                    __end_ofi2_uartTx 2462  
                                       ?_increaseStep 0001  
                                     __initialization 22E0  
                              __size_of_initPinMotors 0026  
                                        __end_of_main 1A9E  
                                        __end_of_maxX 0609  
                                        __end_of_maxY 0607  
                            resetPosition@keepMovingX 0015  
                            resetPosition@keepMovingY 0016  
                            resetPosition@keepMovingZ 0017  
                                              ??_main 00EE  
                                       __activetblptr 000002  
                               __end_of_resetTM0_Temp 26B4  
                               __end_of_resetTM2_Temp 25F8  
                                         i2_storeData 1306  
                                        ?_setThermRel 0001  
                                              _ADRESH 000FC4  
                                              _ADRESL 000FC3  
                                        ?_moveToPoint 0015  
                                              i2l3100 1D50  
                                              i2l3102 1D66  
                                              i2l3110 1DA8  
                                              i2l2230 26D4  
                                              i2l3104 1D7C  
                                              i2l2240 2706  
                                              i2l2232 26CA  
                                              i2l3106 1D92  
                                              i2l3202 25FA  
                                              i2l2234 270E  
                                              i2l2242 26C0  
                                              i2l3090 1CF4  
                                              i2l3092 1CF8  
                                              i2l3094 1D0E  
                                              i2l1910 26FE  
                                              i2l3096 1D24  
                                              i2l3440 1320  
                                              i2l3600 00F6  
                                              i2l3098 1D3A  
                                              i2l3434 2652  
                                              i2l1906 2644  
                                              i2l3442 132E  
                                              i2l3450 1354  
                                              i2l3610 0142  
                                              i2l3602 00FA  
                                              i2l3460 143C  
                                              i2l3444 133C  
                                              i2l3452 138A  
                                              i2l3436 130A  
                                              i2l3620 0186  
                                              i2l3612 014E  
                                              i2l3604 0100  
                                              i2l3470 14B0  
                                              i2l3462 145E  
                                              i2l3454 13A2  
                                              i2l3446 134A  
                                              i2l3438 131A  
                                              i2l3614 0168  
                                              i2l3606 0114  
                                              i2l3480 1506  
                                              i2l3472 14C4  
                                              i2l3464 1484  
                                              i2l3456 13B6  
                                              i2l3608 011C  
                                              i2l3616 016C  
                                              i2l3560 001C  
                                              i2l3490 153C  
                                              i2l3482 1518  
                                              i2l3474 14C8  
                                              i2l3466 148E  
                                              i2l3458 13BE  
                                              i2l3618 0180  
                                              i2l3570 0050  
                                              i2l3562 002E  
                                              i2l3484 151E  
                                              i2l3476 14DE  
                                              i2l3468 14A0  
                                              i2l3580 0086  
                                              i2l3572 0054  
                                              i2l3564 0030  
                                              i2l2790 241E  
                                              i2l3486 1528  
                                              i2l3478 14F2  
                                              i2l3494 1548  
                                              i2l3590 00C2  
                                              i2l3582 008A  
                                              i2l3566 0032  
                                              i2l3574 0058  
                                              i2l2792 2440  
                                              i2l3488 1532  
                                              i2l3496 157E  
                                              i2l3592 00CA  
                                              i2l3584 009E  
                                              i2l3576 006C  
                                              i2l3568 004E  
                                              i2l2794 2446  
                                              i2l3594 00CC  
                                              i2l3586 00A0  
                                              i2l3578 006E  
                                              i2l2788 2416  
                                              i2l3596 00E0  
                                              i2l3588 00A4  
                                              i2l3598 00F2  
                                              i2l4840 155E  
                                              i2l4842 1DBE  
                                              i2l4838 136A  
                                              _RCREG1 000FAE  
                                        ?_setTouchRel 0001  
                                    __end_of_abortAll 260A  
                                    __end_of___xxtofl 1782  
                                    __end_of_clearTM0 2642  
                                    _errString_PointZ 0100  
                                      ??_increaseStep 0001  
                                    __end_of_maxFeedX 0615  
                                    __end_of_maxFeedY 0614  
                                           ??___fldiv 0028  
                                           ??___fltol 003D  
                                    __end_of_tim0Init 25E6  
                                    __end_of_tim1Init 2618  
                                    __end_of_tim2Init 25D4  
                                              clear_0 2346  
                                              clear_1 2352  
                                           ??_getData 0014  
                                              _uartTx 23C6  
                                           ??_initADC 0012  
                                           ??_liftArm 0015  
                                           ??_readSeq 0012  
                                        __pdataCOMRAM 0067  
                               __end_of_resetPosition 1966  
                                        __mediumconst 0000  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                                        ?_returnTherm 0012  
                                    __end_of_startADC 2696  
                                    __end_of_stepMade 25C2  
                                       _initPinMotors 2544  
                                        ?_returnTouch 0012  
                                           ??_stopADC 0012  
                               __size_ofi2_printError 011C  
                                    __end_of_writeTM0 2650  
                           __size_of_resetNewSequence 000A  
                                        ___xxtofl@arg 001C  
                                        ___xxtofl@exp 001B  
                                        ___xxtofl@val 0012  
                                          __accesstop 0080  
                             __end_of__initialization 2358  
                                        _dataSequence 00C6  
                                       ___rparam_used 000001  
                                          ___fltol@f1 0039  
                                        ?_stepCounter 0012  
                                         i2uartTx@ptr 0001  
                                      __pcstackCOMRAM 0001  
                                        __newSequence 005F  
                                        __pidataBANK0 2462  
                                        __pidataBANK1 212A  
                                __size_of_executeData 02F6  
                                        i2_printError 1CF0  
                                        ?_touchObject 0001  
                                      _errString_ZEND 015E  
                                      _errString_Feed 0090  
                                      ?_initPinMotors 0001  
                                           ?i2_uartTx 0001  
                                          __pbssBANK0 00C6  
                                __size_of_newSequence 0008  
                                          _feeder1Pos 0611  
                                          _feeder2Pos 060F  
                                          _feeder3Pos 060D  
                             __size_of_getNewSequence 000E  
                                          _fatalError 270C  
                                  __size_of_reduceSeq 0008  
                                  __size_of_retPeriod 000E  
                                      _touch_pressure 060B  
                                  __size_of_shiftData 0060  
                                  __size_of_resetStep 000A  
                                             _ADC_res 0053  
                                             ?_uartTx 0012  
                                           ?_abortAll 0001  
                                           ?___xxtofl 0012  
                                __end_of_increaseStep 270C  
                                           ?_clearTM0 0001  
                                          ??i2_uartTx 0004  
                                  __size_of_rotateObj 00FA  
                                   _errString_Command 00AE  
                                  __size_of_usartInit 001E  
                              __size_of_interruptInit 003C  
                                __size_of_setThermRel 000A  
                                  __size_of_storeData 0284  
                                           ?_tim0Init 0001  
                                           ?_tim1Init 0001  
                                           ?_tim2Init 0012  
                                __size_of_moveToPoint 0344  
                                     _newSequenceData 00DA  
                                __size_of_setTouchRel 000A  
                                             __Hparam 0000  
                                             __Lparam 0000  
                              __end_of_touch_pressure 060D  
                                             ___fldiv 0616  
                                           ?_startADC 0001  
                                           ?_stepMade 0012  
                                             ___fltol 1A9E  
                                        __psmallconst 0600  
                                             __pcinit 22E0  
                               __end_of_whatsTM0Limit 2704  
                                             _getData 2626  
                                             __ramtop 0600  
                                           ?_writeTM0 0001  
                                          _pickObject 2514  
                                             __ptext0 1966  
                                             __ptext1 2590  
                                             __ptext2 25C2  
                                             __ptext3 260A  
                                             __ptext4 25D4  
                                             __ptext5 1082  
                                             __ptext6 1BD4  
                                             __ptext7 23C6  
                                             __ptext8 2366  
                                             __ptext9 1782  
                                     __size_of_uartTx 004E  
                                           _T0CONbits 000FD5  
                                             _initADC 256A  
                                           _T1CONbits 000FCD  
                                     ??_initPinMotors 0012  
                                             _counter 005E  
                                             _liftArm 2222  
                                           _T2CONbits 000FCA  
                                          ??_abortAll 0008  
                                             _readSeq 26E4  
                                        __size_of_isr 019C  
                                          ??___xxtofl 0016  
                                          _neverCheck 005D  
                                        ?i2_storeData 0001  
                                          ??_clearTM0 0012  
                                          _motCounter 0067  
                                             _pwmStep 005C  
                                             _stopADC 26F4  
                                   __end_of_reduceSeq 26E4  
                                   __end_of_retPeriod 265E  
                                          _releaseObj 24E4  
                                __size_of_returnTherm 000C  
                                end_of_initialization 2358  
                                __size_of_returnTouch 000C  
                                    _resetNewSequence 2682  
                                    rotateObj@totStep 00E3  
                                   __end_of_shiftData 23C6  
                                             isr@temp 0011  
                                   __end_of_resetStep 26BE  
                                          ??_tim0Init 0012  
                                       __Lmediumconst 0000  
                                          ??_tim1Init 0012  
                                          ??_tim2Init 0014  
                                          _resetTherm 26A0  
                                          _resetTouch 2696  
                                             uartTx@i 0015  
                                         ?_fatalError 0001  
                                           _RCSTAbits 000FAB  
                                             postdec1 000FE5  
                                   __end_of_rotateObj 212A  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                                          ??_startADC 0012  
                                          ??_stepMade 0014  
                                __size_of_stepCounter 000C  
                                       _interruptInit 24A8  
                                   __end_of_usartInit 25AE  
                                   __end_of_storeData 1306  
                          __end_ofrotateObj@stepAngle 0605  
                                          ??_writeTM0 0001  
                                           _PORTDbits 000F83  
                                          _printError 1BD4  
                                           _PORTEbits 000F84  
                                 i2printError@errCode 0007  
                                          _toggleStep 26BE  
                                       ___xxtofl@sign 001A  
                                           _TRISCbits 000F94  
                                           _TRISDbits 000F95  
                                           _TRISEbits 000F96  
                                         ___fldiv@grs 0033  
                                         ___fldiv@rem 002C  
                                __size_of_touchObject 0112  
                                          _stepToggle 005B  
                                        _completeStep 0062  
                                          _touchTherm 1E0C  
                                           _TXSTAbits 000FAC  
                                      _getNewSequence 2618  
                              __size_of_resetTM0_Temp 000A  
                              __size_of_resetTM2_Temp 0012  
                                      ?_interruptInit 0001  
                                       __pidataCOMRAM 2714  
                               __size_of_increaseStep 0008  
                                         ?_pickObject 0001  
                                         __fatalError 0060  
                                      __end_of_uartTx 2414  
                                       moveToPoint@x1 0015  
                                       moveToPoint@x2 0019  
                                       moveToPoint@y1 0017  
                                       moveToPoint@y2 001B  
                                 start_initialization 22E0  
                                           i2uartTx@i 0004  
                                         __end_of_isr 01A4  
                                 __size_of_fatalError 0008  
                                         ?_releaseObj 0001  
                                   __size_ofi2_uartTx 004E  
                              __end_of_getNewSequence 2626  
                                     _errString_Fatal 01AF  
                                     _errString_Bound 01D6  
                                         ?_resetTherm 0001  
                                     _errString_Reset 0187  
                                         ?_resetTouch 0001  
                                     _errString_Point 0135  
                                        _increaseStep 2704  
                              __size_of_resetPosition 01E4  
                                       ??_executeData 00E9  
                                         __pdataBANK0 0080  
                                         __pdataBANK1 0100  
                                         _dataCounter 0061  
                                            ??_uartTx 0015  
                              moveToPoint@keepMovingX 0021  
                              moveToPoint@keepMovingY 0022  
                                         ?_printError 0001  
                                           ___fldiv@a 0024  
                                           ___fldiv@b 0020  
                                      _therm_pressure 0609  
                                         ?_toggleStep 0001  
                                         __pbssCOMRAM 0043  
                                       _resetTM0_Temp 26AA  
                                       _resetTM2_Temp 25E6  
                                       __pcstackBANK0 00E2  
                                       ??_newSequence 0012  
                                   __size_of_abortAll 0012  
                                   __size_of___xxtofl 01F8  
                                __size_ofi2_storeData 0284  
                                   __size_of_clearTM0 000E  
                                     ?_getNewSequence 0012  
                                         ?_touchTherm 0001  
                                 __size_of_pickObject 0030  
                                  executeData@errCode 00ED  
                                   __size_of_tim0Init 0012  
                                   __size_of_tim1Init 000E  
                                   __size_of_tim2Init 0012  
                                     ??_interruptInit 0012  
                                           __pintcode 0008  
                                            ?___fldiv 0020  
                                            ?___fltol 0039  
                            __end_of_resetNewSequence 268C  
                                 __size_of_releaseObj 0030  
                                       storeData@data 001B  
                                            ?_getData 0012  
                                   __size_of_startADC 000A  
                                   __size_of_stepMade 0014  
                              __end_of_therm_pressure 060B  
                                            ?_initADC 0001  
                                         __smallconst 0600  
                                            ?_liftArm 0001  
                                            ?_readSeq 0001  
                                      ?_resetTM0_Temp 0001  
                                   __size_of_writeTM0 000E  
                                      ?_resetTM2_Temp 0001  
                                 __end_of_executeData 1082  
                                          shiftData@i 0014  
                                 __size_of_resetTherm 000A  
                                           _newFeeder 0055  
                                       _resetPosition 1782  
                                 __size_of_resetTouch 000A  
                                           _mexLength 006D  
                                       ??_setThermRel 0001  
                                            ?_stopADC 0001  
                                       ??_moveToPoint 001D  
                                       ??_setTouchRel 0001  
                                 __end_of_newSequence 26F4  
                                           _reduceSeq 26DC  
                                            _LATAbits 000F89  
                                            _LATBbits 000F8A  
                                           _retPeriod 2650  
                                            _LATCbits 000F8B  
                                            _LATDbits 000F8C  
                                 __size_of_printError 011C  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                                           _shiftData 2366  
                                           _resetStep 26B4  
                                            i2u280_40 1518  
                                            i2u272_40 13A0  
                                            i2u280_41 1512  
                                            i2u272_41 139A  
                                            i2u273_40 13B4  
                                            i2u273_41 13AE  
                                            _PIR1bits 000F9E  
                                            i2u274_40 143A  
                                            i2u290_40 00DE  
                                            i2u274_41 1434  
                                            i2u290_41 00D8  
                                            i2u195_40 243E  
                                            i2u275_40 145E  
                                            i2u291_40 00F0  
                                            i2u195_41 2438  
                                            i2u275_41 1458  
                                            i2u291_41 00EA  
                                            i2u196_40 245C  
                                            i2u276_40 1482  
                                            i2u292_40 0112  
                                            i2u284_40 002C  
                                            i2u196_41 2456  
                                            i2u276_41 147C  
                                            i2u292_41 010C  
                                            i2u284_41 0026  
                                            i2u277_40 14DC  
                                            i2u293_40 0140  
                                            i2u285_40 004C  
                                            i2u277_41 14D6  
                                            i2u293_41 013A  
                                            i2u285_41 0046  
                                            i2u278_40 14F0  
                                            i2u294_40 0166  
                                            i2u286_40 006A  
                                            i2u278_41 14EA  
                                            i2u294_41 0160  
                                            i2u286_41 0064  
                                            i2u279_40 1504  
                                            i2u295_40 017E  
                                            i2u287_40 0084  
                                            i2u279_41 14FE  
                                            i2u295_41 0178  
                                            i2u287_41 007E  
                                            i2u288_40 009C  
                                            i2u288_41 0096  
                                            i2u289_40 00C0  
                                            i2u289_41 00BA  
                                 __size_of_toggleStep 000A  
                                        ??_fatalError 0001  
                                           _posVector 004C  
                                            _RCONbits 000FD0  
                                           _therm_rel 0064  
                                           _pwmPeriod 004F  
                                           _rotateObj 2030  
                                          _ADCON0bits 000FC2  
                                          _ADCON1bits 000FC1  
                                 __size_of_touchTherm 0112  
                                           _usartInit 2590  
                                           _touch_rel 0065  
                                  __end_of_feeder1Pos 0613  
                                  __end_of_feeder2Pos 0611  
                                  __end_of_feeder3Pos 060F  
                                           _storeData 1082  
                                      ?_resetPosition 0001  
                               __end_of_initPinMotors 256A  
                                       ??_returnTherm 0014  
                                       ??_returnTouch 0014  
                                            i2_uartTx 2414  
                                           copy_data0 22F4  
                                           copy_data1 2314  
                                           copy_data2 2334  
                                  __end_of_fatalError 2714  
                                  rotateObj@stepAngle 0601  
                                          ?_reduceSeq 0001  
                                          ?_retPeriod 0001  
                                          rotateObj@c 00E7  
                                          rotateObj@i 00E5  
                              __size_of_whatsTM0Limit 0008  
                                 __end_of_setThermRel 26DC  
                                 __end_of_moveToPoint 0D8C  
                                   printError@errCode 0018  
                                          ?_shiftData 0001  
                                       ??_stepCounter 0014  
                                            __Hrparam 0000  
                                          ?_resetStep 0001  
                                 __end_of_setTouchRel 26D2  
                                            __Lrparam 0000  
                                    __size_of___fldiv 0432  
                                    __size_of___fltol 0136  
                                         _executeData 0D8C  
                                        ??_pickObject 0015  
                                          ?_rotateObj 0001  
                            moveToPoint@MOT1Direction 001F  
                                     ??_resetTM0_Temp 0012  
                                       ?i2_printError 0001  
                                     ??_resetTM2_Temp 0012  
                                    __size_of_getData 000E  
                            moveToPoint@MOT2Direction 0020  
                                       ??_touchObject 0015  
                                            _abortAll 25F8  
                                          ?_usartInit 0001  
                                    __size_of_initADC 0026  
                                            ___xxtofl 158A  
                                    __size_of_liftArm 00BE  
                                          ?_storeData 0001  
                                            _clearTM0 2634  
                                    __size_of_readSeq 0008  
                                            _tm0Count 0063  
                                            _tm0Error 0059  
                                            _tm0Limit 0066  
                                         _newSequence 26EC  
                                            __ptext10 2682  
                                            __ptext11 26DC  
                                            __ptext20 265E  
                                            __ptext12 26E4  
                                            __ptext21 1F1E  
                                            __ptext13 26EC  
                                            __ptext30 0616  
                                            __ptext22 26F4  
                                            __ptext14 24A8  
                                            __ptext31 24E4  
                                            __ptext23 268C  
                                            __ptext15 2544  
                                            __ptext40 2626  
                                            __ptext32 2514  
                                            __ptext24 266A  
                                            __ptext16 256A  
                                            __ptext41 2634  
                                            __ptext33 0A48  
                                            __ptext25 2696  
                                            __ptext17 2618  
                                            __ptext50 2704  
                                            __ptext34 2676  
                                            __ptext26 26A0  
                                            __ptext18 0D8C  
                                            __ptext51 270C  
                                            __ptext43 1306  
                                            __ptext35 2222  
                                            __ptext27 2030  
                                            __ptext19 1E0C  
                                            __ptext52 25F8  
                                            __ptext44 2642  
                                            __ptext36 25AE  
                                            __ptext28 158A  
                                            __ptext53 1CF0  
                                            __ptext45 26FC  
                                            __ptext37 25E6  
                                            __ptext29 1A9E  
                                            __ptext54 2414  
                                            __ptext46 26BE  
                                            __ptext38 26AA  
                                            __ptext47 26C8  
                                            __ptext39 26B4  
                                            __ptext48 26D2  
                                            __ptext49 2650  
                                        ??_releaseObj 0015  
                                    __size_of_stopADC 0008  
                                            _maxFeedX 0614  
                                            _maxFeedY 0613  
                                 __end_of_returnTherm 266A  
                                 __end_of_returnTouch 2676  
                                            _tim0Init 25D4  
                                            _tim1Init 260A  
                                            _tim2Init 25C2  
                                       __size_of_main 0138  
                                         _receivedMex 0043  
                                  __end_of_pickObject 2544  
                                        ??_resetTherm 0012  
                                        ??_resetTouch 0012  
                                           uartTx@ptr 0012  
                                            _rotAngle 0057  
                                            int$flags 006E  
                                            _startADC 268C  
                                            _stepMade 25AE  
                                            _stepMot1 008C  
                                            _stepMot2 0088  
                                            _stepMot3 0084  
                                 __end_of_stepCounter 2682  
                                   rotateObj@rotAngle 00E2  
                                      ??i2_printError 0005  
                                  __end_of_releaseObj 2514  
                                            _writeTM0 2642  
                                        ??_printError 0016  
                                       _whatsTM0Limit 26FC  
                                     ??_resetPosition 0015  
                                  tim2Init@_pwmPeriod 0012  
                                          _INTCONbits 000FF2  
                                        ??_toggleStep 0001  
                                    ??_getNewSequence 0014  
                                  __end_of_resetTherm 26AA  
                                  __end_of_resetTouch 26A0  
                                         _setThermRel 26D2  
                                        uartTx@length 0014  
                                        _single_cycle 0051  
                                         _moveToPoint 0A48  
                                 __end_of_touchObject 2030  
                                            intlevel2 271C  
                                        ??_touchTherm 0015  
                                         _setTouchRel 26C8  
                                         ??_reduceSeq 0012  
                                         ??_retPeriod 0003  
                                          _RCSTA1bits 000FAB  
                                  __end_of_printError 1CF0  
                                         ??_shiftData 0012  
                                         ??_resetStep 0012  
                                  __end_of_toggleStep 26C8  
                                   ?_resetNewSequence 0001  
                                      ?_whatsTM0Limit 0001  
                                         ??_rotateObj 0043  
                                  ??_resetNewSequence 0012  
                                  __end_of_touchTherm 1F1E  
                                         ??_usartInit 0012  
                                       ??i2_storeData 0008  
                                         ??_storeData 0019  
                                         _returnTherm 265E  
                                         _returnTouch 266A  
                                         _stepCounter 2676  
