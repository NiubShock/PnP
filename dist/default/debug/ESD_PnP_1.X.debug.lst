

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Wed Apr 28 15:56:13 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    76                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    77  0000                     
    78                           ; Version 2.20
    79                           ; Generated 12/02/2020 GMT
    80                           ; 
    81                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F452 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataCOMRAM
   114  0026A2                     __pidataCOMRAM:
   115                           	callstack 0
   116                           
   117                           ;initializer for _motCounter
   118  0026A2  00                 	db	0
   119  0026A3  01                 	db	1
   120  0026A4  00                 	db	0
   121  0026A5  01                 	db	1
   122  0026A6  00                 	db	0
   123  0026A7  01                 	db	1
   124                           
   125                           ;initializer for _maxY
   126  0026A8  0065               	dw	101
   127                           
   128                           ;initializer for _maxX
   129  0026AA  0065               	dw	101
   130                           
   131                           ;initializer for storeData@mexLength
   132  0026AC  05                 	db	5
   133                           
   134                           	psect	idataBANK0
   135  002480                     __pidataBANK0:
   136                           	callstack 0
   137                           
   138                           ;initializer for rotateObj@rotSequence
   139  002480  24                 	db	36
   140  002481  0C                 	db	12
   141  002482  18                 	db	24
   142  002483  30                 	db	48
   143                           
   144                           ;initializer for _stepMot3
   145  002484  09                 	db	9
   146  002485  03                 	db	3
   147  002486  06                 	db	6
   148  002487  0C                 	db	12
   149                           
   150                           ;initializer for _stepMot2
   151  002488  11                 	db	17
   152  002489  05                 	db	5
   153  00248A  0C                 	db	12
   154  00248B  18                 	db	24
   155                           
   156                           ;initializer for _stepMot1
   157  00248C  22                 	db	34
   158  00248D  06                 	db	6
   159  00248E  0C                 	db	12
   160  00248F  28                 	db	40
   161                           
   162                           ;initializer for _errString_Feed
   163  002490  45                 	db	69
   164  002491  72                 	db	114
   165  002492  72                 	db	114
   166  002493  6F                 	db	111
   167  002494  72                 	db	114
   168  002495  2C                 	db	44
   169  002496  20                 	db	32
   170  002497  66                 	db	102
   171  002498  65                 	db	101
   172  002499  65                 	db	101
   173  00249A  64                 	db	100
   174  00249B  20                 	db	32
   175  00249C  6C                 	db	108
   176  00249D  69                 	db	105
   177  00249E  6E                 	db	110
   178  00249F  65                 	db	101
   179  0024A0  20                 	db	32
   180  0024A1  6E                 	db	110
   181  0024A2  6F                 	db	111
   182  0024A3  74                 	db	116
   183  0024A4  20                 	db	32
   184  0024A5  64                 	db	100
   185  0024A6  65                 	db	101
   186  0024A7  66                 	db	102
   187  0024A8  69                 	db	105
   188  0024A9  6E                 	db	110
   189  0024AA  65                 	db	101
   190  0024AB  64                 	db	100
   191  0024AC  0A                 	db	10
   192  0024AD  00                 	db	0
   193                           
   194                           ;initializer for _errString_Command
   195  0024AE  43                 	db	67
   196  0024AF  6F                 	db	111
   197  0024B0  6D                 	db	109
   198  0024B1  6D                 	db	109
   199  0024B2  61                 	db	97
   200  0024B3  6E                 	db	110
   201  0024B4  64                 	db	100
   202  0024B5  20                 	db	32
   203  0024B6  6E                 	db	110
   204  0024B7  6F                 	db	111
   205  0024B8  74                 	db	116
   206  0024B9  20                 	db	32
   207  0024BA  72                 	db	114
   208  0024BB  65                 	db	101
   209  0024BC  63                 	db	99
   210  0024BD  6F                 	db	111
   211  0024BE  67                 	db	103
   212  0024BF  6E                 	db	110
   213  0024C0  69                 	db	105
   214  0024C1  7A                 	db	122
   215  0024C2  65                 	db	101
   216  0024C3  64                 	db	100
   217  0024C4  0A                 	db	10
   218  0024C5  00                 	db	0
   219                           
   220                           	psect	idataBANK1
   221  00206E                     __pidataBANK1:
   222                           	callstack 0
   223                           
   224                           ;initializer for _errString_PointZ
   225  00206E  45                 	db	69
   226  00206F  72                 	db	114
   227  002070  72                 	db	114
   228  002071  6F                 	db	111
   229  002072  72                 	db	114
   230  002073  2C                 	db	44
   231  002074  20                 	db	32
   232  002075  74                 	db	116
   233  002076  69                 	db	105
   234  002077  6D                 	db	109
   235  002078  65                 	db	101
   236  002079  20                 	db	32
   237  00207A  65                 	db	101
   238  00207B  78                 	db	120
   239  00207C  63                 	db	99
   240  00207D  65                 	db	101
   241  00207E  65                 	db	101
   242  00207F  64                 	db	100
   243  002080  65                 	db	101
   244  002081  64                 	db	100
   245  002082  20                 	db	32
   246  002083  74                 	db	116
   247  002084  6F                 	db	111
   248  002085  20                 	db	32
   249  002086  72                 	db	114
   250  002087  65                 	db	101
   251  002088  61                 	db	97
   252  002089  63                 	db	99
   253  00208A  68                 	db	104
   254  00208B  20                 	db	32
   255  00208C  74                 	db	116
   256  00208D  68                 	db	104
   257  00208E  65                 	db	101
   258  00208F  20                 	db	32
   259  002090  65                 	db	101
   260  002091  6E                 	db	110
   261  002092  64                 	db	100
   262  002093  20                 	db	32
   263  002094  6F                 	db	111
   264  002095  66                 	db	102
   265  002096  20                 	db	32
   266  002097  74                 	db	116
   267  002098  68                 	db	104
   268  002099  65                 	db	101
   269  00209A  20                 	db	32
   270  00209B  5A                 	db	90
   271  00209C  20                 	db	32
   272  00209D  41                 	db	65
   273  00209E  78                 	db	120
   274  00209F  69                 	db	105
   275  0020A0  73                 	db	115
   276  0020A1  0A                 	db	10
   277  0020A2  00                 	db	0
   278                           
   279                           ;initializer for _errString_Point
   280  0020A3  45                 	db	69
   281  0020A4  72                 	db	114
   282  0020A5  72                 	db	114
   283  0020A6  6F                 	db	111
   284  0020A7  72                 	db	114
   285  0020A8  2C                 	db	44
   286  0020A9  20                 	db	32
   287  0020AA  74                 	db	116
   288  0020AB  69                 	db	105
   289  0020AC  6D                 	db	109
   290  0020AD  65                 	db	101
   291  0020AE  20                 	db	32
   292  0020AF  65                 	db	101
   293  0020B0  78                 	db	120
   294  0020B1  63                 	db	99
   295  0020B2  65                 	db	101
   296  0020B3  65                 	db	101
   297  0020B4  64                 	db	100
   298  0020B5  65                 	db	101
   299  0020B6  64                 	db	100
   300  0020B7  20                 	db	32
   301  0020B8  74                 	db	116
   302  0020B9  6F                 	db	111
   303  0020BA  20                 	db	32
   304  0020BB  72                 	db	114
   305  0020BC  65                 	db	101
   306  0020BD  61                 	db	97
   307  0020BE  63                 	db	99
   308  0020BF  68                 	db	104
   309  0020C0  20                 	db	32
   310  0020C1  74                 	db	116
   311  0020C2  68                 	db	104
   312  0020C3  65                 	db	101
   313  0020C4  20                 	db	32
   314  0020C5  70                 	db	112
   315  0020C6  6F                 	db	111
   316  0020C7  69                 	db	105
   317  0020C8  6E                 	db	110
   318  0020C9  74                 	db	116
   319  0020CA  0A                 	db	10
   320  0020CB  00                 	db	0
   321                           
   322                           ;initializer for _errString_ZEND
   323  0020CC  45                 	db	69
   324  0020CD  72                 	db	114
   325  0020CE  72                 	db	114
   326  0020CF  6F                 	db	111
   327  0020D0  72                 	db	114
   328  0020D1  2C                 	db	44
   329  0020D2  20                 	db	32
   330  0020D3  6E                 	db	110
   331  0020D4  6F                 	db	111
   332  0020D5  20                 	db	32
   333  0020D6  6F                 	db	111
   334  0020D7  62                 	db	98
   335  0020D8  6A                 	db	106
   336  0020D9  65                 	db	101
   337  0020DA  63                 	db	99
   338  0020DB  74                 	db	116
   339  0020DC  20                 	db	32
   340  0020DD  72                 	db	114
   341  0020DE  65                 	db	101
   342  0020DF  6C                 	db	108
   343  0020E0  65                 	db	101
   344  0020E1  76                 	db	118
   345  0020E2  61                 	db	97
   346  0020E3  74                 	db	116
   347  0020E4  65                 	db	101
   348  0020E5  64                 	db	100
   349  0020E6  20                 	db	32
   350  0020E7  61                 	db	97
   351  0020E8  6C                 	db	108
   352  0020E9  6F                 	db	111
   353  0020EA  6E                 	db	110
   354  0020EB  67                 	db	103
   355  0020EC  20                 	db	32
   356  0020ED  5A                 	db	90
   357  0020EE  20                 	db	32
   358  0020EF  41                 	db	65
   359  0020F0  78                 	db	120
   360  0020F1  69                 	db	105
   361  0020F2  73                 	db	115
   362  0020F3  0A                 	db	10
   363  0020F4  00                 	db	0
   364                           
   365                           ;initializer for _errString_Reset
   366  0020F5  45                 	db	69
   367  0020F6  72                 	db	114
   368  0020F7  72                 	db	114
   369  0020F8  6F                 	db	111
   370  0020F9  72                 	db	114
   371  0020FA  2C                 	db	44
   372  0020FB  20                 	db	32
   373  0020FC  74                 	db	116
   374  0020FD  69                 	db	105
   375  0020FE  6D                 	db	109
   376  0020FF  65                 	db	101
   377  002100  20                 	db	32
   378  002101  65                 	db	101
   379  002102  78                 	db	120
   380  002103  63                 	db	99
   381  002104  65                 	db	101
   382  002105  65                 	db	101
   383  002106  64                 	db	100
   384  002107  65                 	db	101
   385  002108  64                 	db	100
   386  002109  20                 	db	32
   387  00210A  74                 	db	116
   388  00210B  6F                 	db	111
   389  00210C  20                 	db	32
   390  00210D  72                 	db	114
   391  00210E  65                 	db	101
   392  00210F  73                 	db	115
   393  002110  65                 	db	101
   394  002111  74                 	db	116
   395  002112  20                 	db	32
   396  002113  70                 	db	112
   397  002114  6F                 	db	111
   398  002115  73                 	db	115
   399  002116  69                 	db	105
   400  002117  74                 	db	116
   401  002118  69                 	db	105
   402  002119  6F                 	db	111
   403  00211A  6E                 	db	110
   404  00211B  0A                 	db	10
   405  00211C  00                 	db	0
   406                           
   407                           ;initializer for _errString_Fatal
   408  00211D  46                 	db	70
   409  00211E  61                 	db	97
   410  00211F  74                 	db	116
   411  002120  61                 	db	97
   412  002121  6C                 	db	108
   413  002122  20                 	db	32
   414  002123  45                 	db	69
   415  002124  72                 	db	114
   416  002125  72                 	db	114
   417  002126  6F                 	db	111
   418  002127  72                 	db	114
   419  002128  2C                 	db	44
   420  002129  20                 	db	32
   421  00212A  70                 	db	112
   422  00212B  6C                 	db	108
   423  00212C  65                 	db	101
   424  00212D  61                 	db	97
   425  00212E  73                 	db	115
   426  00212F  65                 	db	101
   427  002130  20                 	db	32
   428  002131  72                 	db	114
   429  002132  65                 	db	101
   430  002133  73                 	db	115
   431  002134  65                 	db	101
   432  002135  74                 	db	116
   433  002136  20                 	db	32
   434  002137  74                 	db	116
   435  002138  68                 	db	104
   436  002139  65                 	db	101
   437  00213A  20                 	db	32
   438  00213B  64                 	db	100
   439  00213C  65                 	db	101
   440  00213D  76                 	db	118
   441  00213E  69                 	db	105
   442  00213F  63                 	db	99
   443  002140  65                 	db	101
   444  002141  21                 	db	33
   445  002142  0A                 	db	10
   446  002143  00                 	db	0
   447                           
   448                           ;initializer for _errString_Bound
   449  002144  45                 	db	69
   450  002145  72                 	db	114
   451  002146  72                 	db	114
   452  002147  6F                 	db	111
   453  002148  72                 	db	114
   454  002149  2C                 	db	44
   455  00214A  20                 	db	32
   456  00214B  70                 	db	112
   457  00214C  6F                 	db	111
   458  00214D  69                 	db	105
   459  00214E  6E                 	db	110
   460  00214F  74                 	db	116
   461  002150  20                 	db	32
   462  002151  6F                 	db	111
   463  002152  75                 	db	117
   464  002153  74                 	db	116
   465  002154  73                 	db	115
   466  002155  69                 	db	105
   467  002156  64                 	db	100
   468  002157  65                 	db	101
   469  002158  20                 	db	32
   470  002159  62                 	db	98
   471  00215A  6F                 	db	111
   472  00215B  75                 	db	117
   473  00215C  6E                 	db	110
   474  00215D  64                 	db	100
   475  00215E  61                 	db	97
   476  00215F  72                 	db	114
   477  002160  69                 	db	105
   478  002161  65                 	db	101
   479  002162  73                 	db	115
   480  002163  0A                 	db	10
   481  002164  00                 	db	0
   482                           
   483                           	psect	smallconst
   484  000600                     __psmallconst:
   485                           	callstack 0
   486  000600  00                 	db	0
   487  000601  0000               	dw	0
   488  000603  4120               	dw	16672
   489  000605                     __end_ofrotateObj@stepAngle:
   490                           	callstack 0
   491  000605  0400               	dw	1024
   492  000607                     __end_of_therm_pressure:
   493                           	callstack 0
   494  000607  0200               	dw	512
   495  000609                     __end_of_touch_pressure:
   496                           	callstack 0
   497  000609                     _feeder3Pos:
   498                           	callstack 0
   499  000609  0F                 	db	15
   500  00060A  50                 	db	80
   501  00060B                     __end_of_feeder3Pos:
   502                           	callstack 0
   503  00060B                     _feeder2Pos:
   504                           	callstack 0
   505  00060B  0F                 	db	15
   506  00060C  32                 	db	50
   507  00060D                     __end_of_feeder2Pos:
   508                           	callstack 0
   509  00060D                     _feeder1Pos:
   510                           	callstack 0
   511  00060D  0F                 	db	15
   512  00060E  14                 	db	20
   513  00060F                     __end_of_feeder1Pos:
   514                           	callstack 0
   515  00060F  64                 	db	100
   516  000610                     __end_of_maxFeedY:
   517                           	callstack 0
   518  000610  1E                 	db	30
   519  000611                     __end_of_maxFeedX:
   520                           	callstack 0
   521  0000                     _TMR0	set	4054
   522  0000                     _T1CONbits	set	4045
   523  0000                     _TXREG	set	4013
   524  0000                     _SPBRG	set	4015
   525  0000                     _TXSTAbits	set	4012
   526  0000                     _TRISCbits	set	3988
   527  0000                     _RCREG1	set	4014
   528  0000                     _ADRESH	set	4036
   529  0000                     _ADRESL	set	4035
   530  0000                     _PIR1bits	set	3998
   531  0000                     _RCONbits	set	4048
   532  0000                     _INTCONbits	set	4082
   533  0000                     _IPR1bits	set	3999
   534  0000                     _PIE1bits	set	3997
   535  0000                     _ADCON0bits	set	4034
   536  0000                     _RCSTAbits	set	4011
   537  0000                     _RCSTA1bits	set	4011
   538  0000                     _LATD	set	3980
   539  0000                     _PORTDbits	set	3971
   540  0000                     _TMR2	set	4044
   541  0000                     _LATC	set	3979
   542  0000                     _LATB	set	3978
   543  0000                     _LATA	set	3977
   544  0000                     _PORTEbits	set	3972
   545  0000                     _T0CONbits	set	4053
   546  0000                     _T2CONbits	set	4042
   547  0000                     _LATDbits	set	3980
   548  0000                     _LATCbits	set	3979
   549  0000                     _LATBbits	set	3978
   550  0000                     _LATAbits	set	3977
   551  0000                     _TRISDbits	set	3989
   552  0000                     _TRISEbits	set	3990
   553  0000                     _TRISD	set	3989
   554  0000                     _TRISC	set	3988
   555  0000                     _TRISB	set	3987
   556  0000                     _TRISA	set	3986
   557  0000                     _ADCON1bits	set	4033
   558  000611  00                 	db	0	; dummy byte at the end
   559  0000                     
   560                           ; #config settings
   561                           
   562                           	psect	cinit
   563  0022FE                     __pcinit:
   564                           	callstack 0
   565  0022FE                     start_initialization:
   566                           	callstack 0
   567  0022FE                     __initialization:
   568                           	callstack 0
   569                           
   570                           ; Initialize objects allocated to BANK1 (247 bytes)
   571                           ; load TBLPTR registers with __pidataBANK1
   572  0022FE  0E6E               	movlw	low __pidataBANK1
   573  002300  6EF6               	movwf	tblptrl,c
   574  002302  0E20               	movlw	high __pidataBANK1
   575  002304  6EF7               	movwf	tblptrh,c
   576  002306  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   577  002308  6EF8               	movwf	tblptru,c
   578  00230A  EE01  F000         	lfsr	0,__pdataBANK1
   579  00230E  EE10 F0F7          	lfsr	1,247
   580  002312                     copy_data0:
   581  002312  0009               	tblrd		*+
   582  002314  CFF5 FFEE          	movff	tablat,postinc0
   583  002318  50E5               	movf	postdec1,w,c
   584  00231A  50E1               	movf	fsr1l,w,c
   585  00231C  E1FA               	bnz	copy_data0
   586                           
   587                           ; Initialize objects allocated to BANK0 (70 bytes)
   588                           ; load TBLPTR registers with __pidataBANK0
   589  00231E  0E80               	movlw	low __pidataBANK0
   590  002320  6EF6               	movwf	tblptrl,c
   591  002322  0E24               	movlw	high __pidataBANK0
   592  002324  6EF7               	movwf	tblptrh,c
   593  002326  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   594  002328  6EF8               	movwf	tblptru,c
   595  00232A  EE00  F080         	lfsr	0,__pdataBANK0
   596  00232E  EE10 F046          	lfsr	1,70
   597  002332                     copy_data1:
   598  002332  0009               	tblrd		*+
   599  002334  CFF5 FFEE          	movff	tablat,postinc0
   600  002338  50E5               	movf	postdec1,w,c
   601  00233A  50E1               	movf	fsr1l,w,c
   602  00233C  E1FA               	bnz	copy_data1
   603                           
   604                           ; Initialize objects allocated to COMRAM (11 bytes)
   605                           ; load TBLPTR registers with __pidataCOMRAM
   606  00233E  0EA2               	movlw	low __pidataCOMRAM
   607  002340  6EF6               	movwf	tblptrl,c
   608  002342  0E26               	movlw	high __pidataCOMRAM
   609  002344  6EF7               	movwf	tblptrh,c
   610  002346  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   611  002348  6EF8               	movwf	tblptru,c
   612  00234A  EE00  F063         	lfsr	0,__pdataCOMRAM
   613  00234E  EE10 F00B          	lfsr	1,11
   614  002352                     copy_data2:
   615  002352  0009               	tblrd		*+
   616  002354  CFF5 FFEE          	movff	tablat,postinc0
   617  002358  50E5               	movf	postdec1,w,c
   618  00235A  50E1               	movf	fsr1l,w,c
   619  00235C  E1FA               	bnz	copy_data2
   620                           
   621                           ; Clear objects allocated to BANK0 (32 bytes)
   622  00235E  EE00  F0C6         	lfsr	0,__pbssBANK0
   623  002362  0E20               	movlw	32
   624  002364                     clear_0:
   625  002364  6AEE               	clrf	postinc0,c
   626  002366  06E8               	decf	wreg,f,c
   627  002368  E1FD               	bnz	clear_0
   628                           
   629                           ; Clear objects allocated to COMRAM (32 bytes)
   630  00236A  EE00  F043         	lfsr	0,__pbssCOMRAM
   631  00236E  0E20               	movlw	32
   632  002370                     clear_1:
   633  002370  6AEE               	clrf	postinc0,c
   634  002372  06E8               	decf	wreg,f,c
   635  002374  E1FD               	bnz	clear_1
   636  002376                     end_of_initialization:
   637                           	callstack 0
   638  002376                     __end_of__initialization:
   639                           	callstack 0
   640  002376  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   641  002378  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   642  00237A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   643  00237C  6EF8               	movwf	tblptru,c
   644  00237E  0100               	movlb	0
   645  002380  EF99  F00C         	goto	_main	;jump to C main() function
   646                           
   647                           	psect	bssCOMRAM
   648  000043                     __pbssCOMRAM:
   649                           	callstack 0
   650  000043                     storeData@receivedMex:
   651                           	callstack 0
   652  000043                     	ds	9
   653  00004C                     _posVector:
   654                           	callstack 0
   655  00004C                     	ds	3
   656  00004F                     _ADC_res:
   657                           	callstack 0
   658  00004F                     	ds	2
   659  000051                     _newFeeder:
   660                           	callstack 0
   661  000051                     	ds	2
   662  000053                     _rotAngle:
   663                           	callstack 0
   664  000053                     	ds	2
   665  000055                     _tm0Error:
   666                           	callstack 0
   667  000055                     	ds	2
   668  000057                     _stepToggle:
   669                           	callstack 0
   670  000057                     	ds	1
   671  000058                     _pwmStep:
   672                           	callstack 0
   673  000058                     	ds	1
   674  000059                     	ds	1
   675  00005A                     storeData@counter:
   676                           	callstack 0
   677  00005A                     	ds	1
   678  00005B                     __newSequence:
   679                           	callstack 0
   680  00005B                     	ds	1
   681  00005C                     __fatalError:
   682                           	callstack 0
   683  00005C                     	ds	1
   684  00005D                     _dataCounter:
   685                           	callstack 0
   686  00005D                     	ds	1
   687  00005E                     _completeStep:
   688                           	callstack 0
   689  00005E                     	ds	1
   690  00005F                     _tm0Count:
   691                           	callstack 0
   692  00005F                     	ds	1
   693  000060                     _therm_rel:
   694                           	callstack 0
   695  000060                     	ds	1
   696  000061                     _touch_rel:
   697                           	callstack 0
   698  000061                     	ds	1
   699  000062                     _tm0Limit:
   700                           	callstack 0
   701  000062                     	ds	1
   702                           
   703                           	psect	dataCOMRAM
   704  000063                     __pdataCOMRAM:
   705                           	callstack 0
   706  000063                     _motCounter:
   707                           	callstack 0
   708  000063                     	ds	6
   709  000069                     _maxY:
   710                           	callstack 0
   711  000069                     	ds	2
   712  00006B                     _maxX:
   713                           	callstack 0
   714  00006B                     	ds	2
   715  00006D                     storeData@mexLength:
   716                           	callstack 0
   717  00006D                     	ds	1
   718                           
   719                           	psect	bssBANK0
   720  0000C6                     __pbssBANK0:
   721                           	callstack 0
   722  0000C6                     _pwmPeriod:
   723                           	callstack 0
   724  0000C6                     	ds	2
   725  0000C8                     _single_cycle:
   726                           	callstack 0
   727  0000C8                     	ds	2
   728  0000CA                     _dataSequence:
   729                           	callstack 0
   730  0000CA                     	ds	20
   731  0000DE                     _newSequenceData:
   732                           	callstack 0
   733  0000DE                     	ds	8
   734                           
   735                           	psect	dataBANK0
   736  000080                     __pdataBANK0:
   737                           	callstack 0
   738  000080                     rotateObj@rotSequence:
   739                           	callstack 0
   740  000080                     	ds	4
   741  000084                     _stepMot3:
   742                           	callstack 0
   743  000084                     	ds	4
   744  000088                     _stepMot2:
   745                           	callstack 0
   746  000088                     	ds	4
   747  00008C                     _stepMot1:
   748                           	callstack 0
   749  00008C                     	ds	4
   750  000090                     _errString_Feed:
   751                           	callstack 0
   752  000090                     	ds	30
   753  0000AE                     _errString_Command:
   754                           	callstack 0
   755  0000AE                     	ds	24
   756                           
   757                           	psect	dataBANK1
   758  000100                     __pdataBANK1:
   759                           	callstack 0
   760  000100                     _errString_PointZ:
   761                           	callstack 0
   762  000100                     	ds	53
   763  000135                     _errString_Point:
   764                           	callstack 0
   765  000135                     	ds	41
   766  00015E                     _errString_ZEND:
   767                           	callstack 0
   768  00015E                     	ds	41
   769  000187                     _errString_Reset:
   770                           	callstack 0
   771  000187                     	ds	40
   772  0001AF                     _errString_Fatal:
   773                           	callstack 0
   774  0001AF                     	ds	39
   775  0001D6                     _errString_Bound:
   776                           	callstack 0
   777  0001D6                     	ds	33
   778                           
   779                           	psect	cstackBANK0
   780  0000E6                     __pcstackBANK0:
   781                           	callstack 0
   782  0000E6                     ??_rotateObj:
   783                           
   784                           ; 1 bytes @ 0x0
   785  0000E6                     	ds	2
   786  0000E8                     rotateObj@rotAngle:
   787                           	callstack 0
   788                           
   789                           ; 1 bytes @ 0x2
   790  0000E8                     	ds	1
   791  0000E9                     rotateObj@totStep:
   792                           	callstack 0
   793                           
   794                           ; 2 bytes @ 0x3
   795  0000E9                     	ds	2
   796  0000EB                     rotateObj@i:
   797                           	callstack 0
   798                           
   799                           ; 2 bytes @ 0x5
   800  0000EB                     	ds	2
   801  0000ED                     ??_executeData:
   802                           
   803                           ; 1 bytes @ 0x7
   804  0000ED                     	ds	2
   805  0000EF                     executeData@data:
   806                           	callstack 0
   807                           
   808                           ; 2 bytes @ 0x9
   809  0000EF                     	ds	2
   810  0000F1                     executeData@errCode:
   811                           	callstack 0
   812                           
   813                           ; 1 bytes @ 0xB
   814  0000F1                     	ds	1
   815  0000F2                     ??_main:
   816                           
   817                           ; 1 bytes @ 0xC
   818  0000F2                     	ds	2
   819  0000F4                     main@errCode:
   820                           	callstack 0
   821                           
   822                           ; 1 bytes @ 0xE
   823  0000F4                     	ds	1
   824  0000F5                     main@newData:
   825                           	callstack 0
   826                           
   827                           ; 2 bytes @ 0xF
   828  0000F5                     	ds	2
   829                           
   830                           	psect	cstackCOMRAM
   831  000001                     __pcstackCOMRAM:
   832                           	callstack 0
   833  000001                     ?_retPeriod:
   834                           	callstack 0
   835  000001                     i2uartTx@ptr:
   836                           	callstack 0
   837                           
   838                           ; 2 bytes @ 0x0
   839  000001                     	ds	2
   840  000003                     i2uartTx@length:
   841                           	callstack 0
   842                           
   843                           ; 1 bytes @ 0x2
   844  000003                     	ds	1
   845  000004                     i2uartTx@i:
   846                           	callstack 0
   847                           
   848                           ; 1 bytes @ 0x3
   849  000004                     	ds	1
   850  000005                     ??i2_printError:
   851                           
   852                           ; 1 bytes @ 0x4
   853  000005                     	ds	2
   854  000007                     i2printError@errCode:
   855                           	callstack 0
   856                           
   857                           ; 1 bytes @ 0x6
   858  000007                     	ds	1
   859  000008                     ??i2_storeData:
   860                           
   861                           ; 1 bytes @ 0x7
   862  000008                     	ds	2
   863  00000A                     i2storeData@data:
   864                           	callstack 0
   865                           
   866                           ; 1 bytes @ 0x9
   867  00000A                     	ds	1
   868  00000B                     ??_isr:
   869                           
   870                           ; 1 bytes @ 0xA
   871  00000B                     	ds	6
   872  000011                     isr@temp:
   873                           	callstack 0
   874                           
   875                           ; 1 bytes @ 0x10
   876  000011                     	ds	1
   877  000012                     ??_shiftData:
   878  000012                     ?_stepMade:
   879                           	callstack 0
   880  000012                     ?_stepCounter:
   881                           	callstack 0
   882  000012                     ?_returnTouch:
   883                           	callstack 0
   884  000012                     ?_returnTherm:
   885                           	callstack 0
   886  000012                     ?_getNewSequence:
   887                           	callstack 0
   888  000012                     ?_getData:
   889                           	callstack 0
   890  000012                     ?___xxtofl:
   891                           	callstack 0
   892  000012                     uartTx@ptr:
   893                           	callstack 0
   894  000012                     tim2Init@_pwmPeriod:
   895                           	callstack 0
   896  000012                     ___xxtofl@val:
   897                           	callstack 0
   898                           
   899                           ; 4 bytes @ 0x11
   900  000012                     	ds	2
   901  000014                     shiftData@i:
   902                           	callstack 0
   903  000014                     uartTx@length:
   904                           	callstack 0
   905  000014                     stepMade@temp:
   906                           	callstack 0
   907                           
   908                           ; 1 bytes @ 0x13
   909  000014                     	ds	1
   910  000015                     resetPosition@keepMovingX:
   911                           	callstack 0
   912  000015                     uartTx@i:
   913                           	callstack 0
   914  000015                     moveToPoint@x1:
   915                           	callstack 0
   916                           
   917                           ; 2 bytes @ 0x14
   918  000015                     	ds	1
   919  000016                     ??_printError:
   920  000016                     ??___xxtofl:
   921  000016                     resetPosition@keepMovingY:
   922                           	callstack 0
   923                           
   924                           ; 1 bytes @ 0x15
   925  000016                     	ds	1
   926  000017                     resetPosition@keepMovingZ:
   927                           	callstack 0
   928  000017                     moveToPoint@y1:
   929                           	callstack 0
   930                           
   931                           ; 2 bytes @ 0x16
   932  000017                     	ds	1
   933  000018                     printError@errCode:
   934                           	callstack 0
   935                           
   936                           ; 1 bytes @ 0x17
   937  000018                     	ds	1
   938  000019                     ??_storeData:
   939  000019                     moveToPoint@x2:
   940                           	callstack 0
   941                           
   942                           ; 2 bytes @ 0x18
   943  000019                     	ds	1
   944  00001A                     ___xxtofl@sign:
   945                           	callstack 0
   946                           
   947                           ; 1 bytes @ 0x19
   948  00001A                     	ds	1
   949  00001B                     storeData@data:
   950                           	callstack 0
   951  00001B                     ___xxtofl@exp:
   952                           	callstack 0
   953  00001B                     moveToPoint@y2:
   954                           	callstack 0
   955                           
   956                           ; 2 bytes @ 0x1A
   957  00001B                     	ds	1
   958  00001C                     ___xxtofl@arg:
   959                           	callstack 0
   960                           
   961                           ; 4 bytes @ 0x1B
   962  00001C                     	ds	1
   963  00001D                     ??_moveToPoint:
   964                           
   965                           ; 1 bytes @ 0x1C
   966  00001D                     	ds	2
   967  00001F                     moveToPoint@MOT1Direction:
   968                           	callstack 0
   969                           
   970                           ; 1 bytes @ 0x1E
   971  00001F                     	ds	1
   972  000020                     ?___fldiv:
   973                           	callstack 0
   974  000020                     moveToPoint@MOT2Direction:
   975                           	callstack 0
   976  000020                     ___fldiv@b:
   977                           	callstack 0
   978                           
   979                           ; 4 bytes @ 0x1F
   980  000020                     	ds	1
   981  000021                     moveToPoint@keepMovingX:
   982                           	callstack 0
   983                           
   984                           ; 1 bytes @ 0x20
   985  000021                     	ds	1
   986  000022                     moveToPoint@keepMovingY:
   987                           	callstack 0
   988                           
   989                           ; 1 bytes @ 0x21
   990  000022                     	ds	2
   991  000024                     ___fldiv@a:
   992                           	callstack 0
   993                           
   994                           ; 4 bytes @ 0x23
   995  000024                     	ds	4
   996  000028                     ??___fldiv:
   997                           
   998                           ; 1 bytes @ 0x27
   999  000028                     	ds	4
  1000  00002C                     ___fldiv@rem:
  1001                           	callstack 0
  1002                           
  1003                           ; 4 bytes @ 0x2B
  1004  00002C                     	ds	4
  1005  000030                     ___fldiv@sign:
  1006                           	callstack 0
  1007                           
  1008                           ; 1 bytes @ 0x2F
  1009  000030                     	ds	1
  1010  000031                     ___fldiv@new_exp:
  1011                           	callstack 0
  1012                           
  1013                           ; 2 bytes @ 0x30
  1014  000031                     	ds	2
  1015  000033                     ___fldiv@grs:
  1016                           	callstack 0
  1017                           
  1018                           ; 4 bytes @ 0x32
  1019  000033                     	ds	4
  1020  000037                     ___fldiv@bexp:
  1021                           	callstack 0
  1022                           
  1023                           ; 1 bytes @ 0x36
  1024  000037                     	ds	1
  1025  000038                     ___fldiv@aexp:
  1026                           	callstack 0
  1027                           
  1028                           ; 1 bytes @ 0x37
  1029  000038                     	ds	1
  1030  000039                     ?___fltol:
  1031                           	callstack 0
  1032  000039                     ___fltol@f1:
  1033                           	callstack 0
  1034                           
  1035                           ; 4 bytes @ 0x38
  1036  000039                     	ds	4
  1037  00003D                     ??___fltol:
  1038                           
  1039                           ; 1 bytes @ 0x3C
  1040  00003D                     	ds	4
  1041  000041                     ___fltol@sign1:
  1042                           	callstack 0
  1043                           
  1044                           ; 1 bytes @ 0x40
  1045  000041                     	ds	1
  1046  000042                     ___fltol@exp1:
  1047                           	callstack 0
  1048                           
  1049                           ; 1 bytes @ 0x41
  1050  000042                     	ds	1
  1051                           
  1052 ;;
  1053 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1054 ;;
  1055 ;; *************** function _main *****************
  1056 ;; Defined at:
  1057 ;;		line 19 in file "main.c"
  1058 ;; Parameters:    Size  Location     Type
  1059 ;;		None
  1060 ;; Auto vars:     Size  Location     Type
  1061 ;;  newData         2   15[BANK0 ] PTR struct .
  1062 ;;		 -> newSequenceData(8), 
  1063 ;;  errCode         1   14[BANK0 ] unsigned char 
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  1    wreg      void 
  1066 ;; Registers used:
  1067 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1073 ;;      Params:         0       0       0       0       0       0       0
  1074 ;;      Locals:         0       3       0       0       0       0       0
  1075 ;;      Temps:          0       2       0       0       0       0       0
  1076 ;;      Totals:         0       5       0       0       0       0       0
  1077 ;;Total ram usage:        5 bytes
  1078 ;; Hardware stack levels required when called:    7
  1079 ;; This function calls:
  1080 ;;		_clearTM0
  1081 ;;		_executeData
  1082 ;;		_getNewSequence
  1083 ;;		_initADC
  1084 ;;		_initPinMotors
  1085 ;;		_interruptInit
  1086 ;;		_newSequence
  1087 ;;		_printError
  1088 ;;		_readSeq
  1089 ;;		_reduceSeq
  1090 ;;		_resetNewSequence
  1091 ;;		_resetPosition
  1092 ;;		_shiftData
  1093 ;;		_storeData
  1094 ;;		_tim0Init
  1095 ;;		_tim1Init
  1096 ;;		_tim2Init
  1097 ;;		_usartInit
  1098 ;; This function is called by:
  1099 ;;		Startup code after reset
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           	psect	text0
  1104  001932                     __ptext0:
  1105                           	callstack 0
  1106  001932                     _main:
  1107                           	callstack 24
  1108  001932  FFFF               	dw	65535	; assembler added errata NOP
  1109                           
  1110                           ;main.c: 23:     interruptInit();
  1111  001934  EC63  F012         	call	_interruptInit	;wreg free
  1112  001938                     
  1113                           ;main.c: 24:     initPinMotors();
  1114  001938  ECB1  F012         	call	_initPinMotors	;wreg free
  1115  00193C                     
  1116                           ;main.c: 25:     initADC();
  1117  00193C  ECC4  F012         	call	_initADC	;wreg free
  1118  001940                     
  1119                           ;main.c: 26:     usartInit();
  1120  001940  ECD7  F012         	call	_usartInit	;wreg free
  1121  001944                     
  1122                           ;main.c: 27:     tim0Init();
  1123  001944  EC03  F013         	call	_tim0Init	;wreg free
  1124  001948                     
  1125                           ;main.c: 28:     tim1Init();
  1126  001948  EC15  F013         	call	_tim1Init	;wreg free
  1127  00194C                     
  1128                           ;main.c: 29:     tim2Init(10);
  1129  00194C  0E00               	movlw	0
  1130  00194E  6E13               	movwf	(tim2Init@_pwmPeriod+1)^0,c
  1131  001950  0E0A               	movlw	10
  1132  001952  6E12               	movwf	tim2Init@_pwmPeriod^0,c
  1133  001954  ECFA  F012         	call	_tim2Init	;wreg free
  1134  001958                     
  1135                           ;main.c: 32:     errCode = resetPosition();
  1136  001958  ECA7  F00B         	call	_resetPosition	;wreg free
  1137  00195C  0100               	movlb	0	; () banked
  1138  00195E  6FF4               	movwf	main@errCode& (0+255),b
  1139  001960                     
  1140                           ; BSR set to: 0
  1141                           ;main.c: 33:     if(errCode != 0){
  1142  001960  51F4               	movf	main@errCode& (0+255),w,b
  1143  001962  B4D8               	btfsc	status,2,c
  1144  001964  EFB6  F00C         	goto	u4061
  1145  001968  EFB9  F00C         	goto	u4060
  1146  00196C                     u4061:
  1147  00196C  FFFF               	dw	65535	; assembler added errata NOP
  1148  00196E  EFC0  F00C         	goto	l330
  1149  001972                     u4060:
  1150  001972  FFFF               	dw	65535	; assembler added errata NOP
  1151  001974                     
  1152                           ; BSR set to: 0
  1153                           ;main.c: 34:         printError(errCode);
  1154  001974  51F4               	movf	main@errCode& (0+255),w,b
  1155  001976  EC09  F00E         	call	_printError
  1156  00197A                     l331:
  1157  00197A  FFFF               	dw	65535	; assembler added errata NOP
  1158  00197C  EFBD  F00C         	goto	l331
  1159  001980                     l330:
  1160  001980  FFFF               	dw	65535	; assembler added errata NOP
  1161                           
  1162                           ; BSR set to: 0
  1163                           ;main.c: 39:     RCSTA1bits.CREN = 1;
  1164  001982  88AB               	bsf	171,4,c	;volatile
  1165  001984                     l4626:
  1166  001984  FFFF               	dw	65535	; assembler added errata NOP
  1167                           
  1168                           ;main.c: 42:         if(newSequence()){
  1169  001986  EC8C  F013         	call	_newSequence	;wreg free
  1170  00198A  0900               	iorlw	0
  1171  00198C  B4D8               	btfsc	status,2,c
  1172  00198E  EFCB  F00C         	goto	u4071
  1173  001992  EFCE  F00C         	goto	u4070
  1174  001996                     u4071:
  1175  001996  FFFF               	dw	65535	; assembler added errata NOP
  1176  001998  EF50  F00D         	goto	l4654
  1177  00199C                     u4070:
  1178  00199C  FFFF               	dw	65535	; assembler added errata NOP
  1179  00199E                     
  1180                           ;main.c: 43:             t_newSequence* newData = getNewSequence();
  1181  00199E  EC1C  F013         	call	_getNewSequence	;wreg free
  1182  0019A2  C012  F0F5         	movff	?_getNewSequence,main@newData
  1183  0019A6  C013  F0F6         	movff	?_getNewSequence+1,main@newData+1
  1184  0019AA                     
  1185                           ;main.c: 45:             newFeeder[0] = newData ->init_posX;
  1186  0019AA  0100               	movlb	0	; () banked
  1187  0019AC  EE20 F002          	lfsr	2,2
  1188  0019B0  51F5               	movf	main@newData& (0+255),w,b
  1189  0019B2  26D9               	addwf	fsr2l,f,c
  1190  0019B4  51F6               	movf	(main@newData+1)& (0+255),w,b
  1191  0019B6  22DA               	addwfc	fsr2h,f,c
  1192  0019B8  50DF               	movf	indf2,w,c
  1193  0019BA  6E51               	movwf	_newFeeder^0,c
  1194  0019BC                     
  1195                           ; BSR set to: 0
  1196                           ;main.c: 46:             newFeeder[1] = newData ->init_posY;
  1197  0019BC  EE20 F003          	lfsr	2,3
  1198  0019C0  51F5               	movf	main@newData& (0+255),w,b
  1199  0019C2  26D9               	addwf	fsr2l,f,c
  1200  0019C4  51F6               	movf	(main@newData+1)& (0+255),w,b
  1201  0019C6  22DA               	addwfc	fsr2h,f,c
  1202  0019C8  50DF               	movf	indf2,w,c
  1203  0019CA  6E52               	movwf	(_newFeeder+1)^0,c
  1204  0019CC                     
  1205                           ; BSR set to: 0
  1206                           ;main.c: 50:             RCSTAbits.CREN = 0;
  1207  0019CC  98AB               	bcf	171,4,c	;volatile
  1208  0019CE                     
  1209                           ; BSR set to: 0
  1210                           ;main.c: 55:             if(newData ->end_posX > maxFeedX || newData ->end_posY > maxFee
      +                          dY){
  1211  0019CE  EE20 F005          	lfsr	2,5
  1212  0019D2  51F5               	movf	main@newData& (0+255),w,b
  1213  0019D4  26D9               	addwf	fsr2l,f,c
  1214  0019D6  51F6               	movf	(main@newData+1)& (0+255),w,b
  1215  0019D8  22DA               	addwfc	fsr2h,f,c
  1216  0019DA  0E1F               	movlw	31
  1217  0019DC  60DF               	cpfslt	indf2,c
  1218  0019DE  EFF3  F00C         	goto	u4081
  1219  0019E2  EFF6  F00C         	goto	u4080
  1220  0019E6                     u4081:
  1221  0019E6  FFFF               	dw	65535	; assembler added errata NOP
  1222  0019E8  EF06  F00D         	goto	l4640
  1223  0019EC                     u4080:
  1224  0019EC  FFFF               	dw	65535	; assembler added errata NOP
  1225  0019EE                     
  1226                           ; BSR set to: 0
  1227  0019EE  EE20 F006          	lfsr	2,6
  1228  0019F2  51F5               	movf	main@newData& (0+255),w,b
  1229  0019F4  26D9               	addwf	fsr2l,f,c
  1230  0019F6  51F6               	movf	(main@newData+1)& (0+255),w,b
  1231  0019F8  22DA               	addwfc	fsr2h,f,c
  1232  0019FA  0E64               	movlw	100
  1233  0019FC  64DF               	cpfsgt	indf2,c
  1234  0019FE  EF03  F00D         	goto	u4091
  1235  001A02  EF06  F00D         	goto	u4090
  1236  001A06                     u4091:
  1237  001A06  FFFF               	dw	65535	; assembler added errata NOP
  1238  001A08  EF0B  F00D         	goto	l4642
  1239  001A0C                     u4090:
  1240  001A0C                     l4640:
  1241  001A0C  FFFF               	dw	65535	; assembler added errata NOP
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;main.c: 56:                 errCode = 5;
  1245  001A0E  0E05               	movlw	5
  1246  001A10  6FF4               	movwf	main@errCode& (0+255),b
  1247                           
  1248                           ;main.c: 57:             }else{
  1249  001A12  EF1F  F00D         	goto	l4644
  1250  001A16                     l4642:
  1251  001A16  FFFF               	dw	65535	; assembler added errata NOP
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;main.c: 58:                 storeData(newData ->end_posX);
  1255  001A18  EE20 F005          	lfsr	2,5
  1256  001A1C  51F5               	movf	main@newData& (0+255),w,b
  1257  001A1E  26D9               	addwf	fsr2l,f,c
  1258  001A20  51F6               	movf	(main@newData+1)& (0+255),w,b
  1259  001A22  22DA               	addwfc	fsr2h,f,c
  1260  001A24  50DF               	movf	indf2,w,c
  1261  001A26  EC3F  F008         	call	_storeData
  1262                           
  1263                           ;main.c: 59:                 storeData(newData ->end_posY);
  1264  001A2A  0100               	movlb	0	; () banked
  1265  001A2C  EE20 F006          	lfsr	2,6
  1266  001A30  51F5               	movf	main@newData& (0+255),w,b
  1267  001A32  26D9               	addwf	fsr2l,f,c
  1268  001A34  51F6               	movf	(main@newData+1)& (0+255),w,b
  1269  001A36  22DA               	addwfc	fsr2h,f,c
  1270  001A38  50DF               	movf	indf2,w,c
  1271  001A3A  EC3F  F008         	call	_storeData
  1272  001A3E                     l4644:
  1273  001A3E  FFFF               	dw	65535	; assembler added errata NOP
  1274                           
  1275                           ;main.c: 63:             if(errCode == 0){
  1276  001A40  0100               	movlb	0	; () banked
  1277  001A42  51F4               	movf	main@errCode& (0+255),w,b
  1278  001A44  A4D8               	btfss	status,2,c
  1279  001A46  EF27  F00D         	goto	u4101
  1280  001A4A  EF2A  F00D         	goto	u4100
  1281  001A4E                     u4101:
  1282  001A4E  FFFF               	dw	65535	; assembler added errata NOP
  1283  001A50  EF48  F00D         	goto	l4648
  1284  001A54                     u4100:
  1285  001A54  FFFF               	dw	65535	; assembler added errata NOP
  1286  001A56                     
  1287                           ; BSR set to: 0
  1288                           ;main.c: 65:                 storeData(0);
  1289  001A56  0E00               	movlw	0
  1290  001A58  EC3F  F008         	call	_storeData
  1291                           
  1292                           ;main.c: 66:                 storeData(0xFF);
  1293  001A5C  0EFF               	movlw	255
  1294  001A5E  EC3F  F008         	call	_storeData
  1295                           
  1296                           ;main.c: 67:                 storeData(newData ->end_rot - newData ->init_rot);
  1297  001A62  0100               	movlb	0	; () banked
  1298  001A64  EE20 F004          	lfsr	2,4
  1299  001A68  51F5               	movf	main@newData& (0+255),w,b
  1300  001A6A  26D9               	addwf	fsr2l,f,c
  1301  001A6C  51F6               	movf	(main@newData+1)& (0+255),w,b
  1302  001A6E  22DA               	addwfc	fsr2h,f,c
  1303  001A70  50DF               	movf	indf2,w,c
  1304  001A72  6FF2               	movwf	??_main& (0+255),b
  1305  001A74  EE20 F007          	lfsr	2,7
  1306  001A78  51F5               	movf	main@newData& (0+255),w,b
  1307  001A7A  26D9               	addwf	fsr2l,f,c
  1308  001A7C  51F6               	movf	(main@newData+1)& (0+255),w,b
  1309  001A7E  22DA               	addwfc	fsr2h,f,c
  1310  001A80  50DF               	movf	indf2,w,c
  1311  001A82  6FF3               	movwf	(??_main+1)& (0+255),b
  1312  001A84  51F2               	movf	??_main& (0+255),w,b
  1313  001A86  5DF3               	subwf	(??_main+1)& (0+255),w,b
  1314  001A88  EC3F  F008         	call	_storeData
  1315                           
  1316                           ;main.c: 68:             }else{
  1317  001A8C  EF4C  F00D         	goto	l4650
  1318  001A90                     l4648:
  1319  001A90  FFFF               	dw	65535	; assembler added errata NOP
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;main.c: 69:                 printError(errCode);
  1323  001A92  51F4               	movf	main@errCode& (0+255),w,b
  1324  001A94  EC09  F00E         	call	_printError
  1325  001A98                     l4650:
  1326  001A98  FFFF               	dw	65535	; assembler added errata NOP
  1327                           
  1328                           ;main.c: 73:             RCSTAbits.CREN = 1;
  1329  001A9A  88AB               	bsf	171,4,c	;volatile
  1330  001A9C                     
  1331                           ;main.c: 76:             resetNewSequence();
  1332  001A9C  EC57  F013         	call	_resetNewSequence	;wreg free
  1333  001AA0                     l4654:
  1334  001AA0  FFFF               	dw	65535	; assembler added errata NOP
  1335                           
  1336                           ;main.c: 78:         if(readSeq()){
  1337  001AA2  EC88  F013         	call	_readSeq	;wreg free
  1338  001AA6  0900               	iorlw	0
  1339  001AA8  B4D8               	btfsc	status,2,c
  1340  001AAA  EF59  F00D         	goto	u4111
  1341  001AAE  EF5C  F00D         	goto	u4110
  1342  001AB2                     u4111:
  1343  001AB2  FFFF               	dw	65535	; assembler added errata NOP
  1344  001AB4  EFC2  F00C         	goto	l4626
  1345  001AB8                     u4110:
  1346  001AB8  FFFF               	dw	65535	; assembler added errata NOP
  1347  001ABA                     
  1348                           ;main.c: 82:             errCode = executeData();
  1349  001ABA  ECC4  F006         	call	_executeData	;wreg free
  1350  001ABE  0100               	movlb	0	; () banked
  1351  001AC0  6FF4               	movwf	main@errCode& (0+255),b
  1352  001AC2                     
  1353                           ; BSR set to: 0
  1354                           ;main.c: 84:             printError(errCode);
  1355  001AC2  51F4               	movf	main@errCode& (0+255),w,b
  1356  001AC4  EC09  F00E         	call	_printError
  1357  001AC8                     
  1358                           ;main.c: 87:             clearTM0();
  1359  001AC8  EC2A  F013         	call	_clearTM0	;wreg free
  1360  001ACC                     
  1361                           ;main.c: 91:             reduceSeq();
  1362  001ACC  EC84  F013         	call	_reduceSeq	;wreg free
  1363  001AD0                     
  1364                           ;main.c: 92:             shiftData();
  1365  001AD0  ECC2  F011         	call	_shiftData	;wreg free
  1366  001AD4  EFC2  F00C         	goto	l4626
  1367  001AD8  EFD4  F000         	goto	start
  1368  001ADC                     __end_of_main:
  1369                           	callstack 0
  1370                           
  1371 ;; *************** function _usartInit *****************
  1372 ;; Defined at:
  1373 ;;		line 95 in file "usart.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;		None
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;		None
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  1    wreg      void 
  1380 ;; Registers used:
  1381 ;;		wreg, status,2
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1387 ;;      Params:         0       0       0       0       0       0       0
  1388 ;;      Locals:         0       0       0       0       0       0       0
  1389 ;;      Temps:          0       0       0       0       0       0       0
  1390 ;;      Totals:         0       0       0       0       0       0       0
  1391 ;;Total ram usage:        0 bytes
  1392 ;; Hardware stack levels used:    1
  1393 ;; Hardware stack levels required when called:    4
  1394 ;; This function calls:
  1395 ;;		Nothing
  1396 ;; This function is called by:
  1397 ;;		_main
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401                           	psect	text1
  1402  0025AE                     __ptext1:
  1403                           	callstack 0
  1404  0025AE                     _usartInit:
  1405                           	callstack 0
  1406  0025AE  FFFF               	dw	65535	; assembler added errata NOP
  1407  0025B0                     
  1408                           ;usart.c: 97:     TRISCbits.TRISC6 = 0;
  1409  0025B0  9C94               	bcf	148,6,c	;volatile
  1410                           
  1411                           ;usart.c: 98:     TRISCbits.TRISC7 = 1;
  1412  0025B2  8E94               	bsf	148,7,c	;volatile
  1413                           
  1414                           ;usart.c: 100:     TXSTAbits.TX9 = 0;
  1415  0025B4  9CAC               	bcf	172,6,c	;volatile
  1416                           
  1417                           ;usart.c: 101:     TXSTAbits.TXEN = 1;
  1418  0025B6  8AAC               	bsf	172,5,c	;volatile
  1419                           
  1420                           ;usart.c: 102:     TXSTAbits.SYNC = 0;
  1421  0025B8  98AC               	bcf	172,4,c	;volatile
  1422                           
  1423                           ;usart.c: 103:     TXSTAbits.BRGH = 0;
  1424  0025BA  94AC               	bcf	172,2,c	;volatile
  1425                           
  1426                           ;usart.c: 105:     RCSTAbits.SPEN = 1;
  1427  0025BC  8EAB               	bsf	171,7,c	;volatile
  1428                           
  1429                           ;usart.c: 106:     RCSTAbits.RX9 = 0;
  1430  0025BE  9CAB               	bcf	171,6,c	;volatile
  1431                           
  1432                           ;usart.c: 107:     RCSTAbits.CREN = 0;
  1433  0025C0  98AB               	bcf	171,4,c	;volatile
  1434                           
  1435                           ;usart.c: 108:     RCSTAbits.ADDEN = 0;
  1436  0025C2  96AB               	bcf	171,3,c	;volatile
  1437  0025C4                     
  1438                           ;usart.c: 111:     SPBRG = 25;
  1439  0025C4  0E19               	movlw	25
  1440  0025C6  6EAF               	movwf	175,c	;volatile
  1441  0025C8  0012               	return		;funcret
  1442  0025CA  FFFF               	dw	65535	; errata NOP
  1443  0025CC                     __end_of_usartInit:
  1444                           	callstack 0
  1445                           
  1446 ;; *************** function _tim2Init *****************
  1447 ;; Defined at:
  1448 ;;		line 46 in file "timer.c"
  1449 ;; Parameters:    Size  Location     Type
  1450 ;;  _pwmPeriod      2   17[COMRAM] unsigned int 
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;		None
  1453 ;; Return value:  Size  Location     Type
  1454 ;;                  1    wreg      void 
  1455 ;; Registers used:
  1456 ;;		None
  1457 ;; Tracked objects:
  1458 ;;		On entry : 0/0
  1459 ;;		On exit  : 0/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1462 ;;      Params:         2       0       0       0       0       0       0
  1463 ;;      Locals:         0       0       0       0       0       0       0
  1464 ;;      Temps:          0       0       0       0       0       0       0
  1465 ;;      Totals:         2       0       0       0       0       0       0
  1466 ;;Total ram usage:        2 bytes
  1467 ;; Hardware stack levels used:    1
  1468 ;; Hardware stack levels required when called:    4
  1469 ;; This function calls:
  1470 ;;		Nothing
  1471 ;; This function is called by:
  1472 ;;		_main
  1473 ;; This function uses a non-reentrant model
  1474 ;;
  1475                           
  1476                           	psect	text2
  1477  0025F4                     __ptext2:
  1478                           	callstack 0
  1479  0025F4                     _tim2Init:
  1480                           	callstack 0
  1481  0025F4  FFFF               	dw	65535	; assembler added errata NOP
  1482  0025F6                     
  1483                           ;timer.c: 47:     T2CONbits.TMR2ON = 0;
  1484  0025F6  94CA               	bcf	202,2,c	;volatile
  1485                           
  1486                           ;timer.c: 48:     T2CONbits.T2CKPS1 = 1;
  1487  0025F8  82CA               	bsf	202,1,c	;volatile
  1488                           
  1489                           ;timer.c: 52:     pwmPeriod = _pwmPeriod;
  1490  0025FA  C012  F0C6         	movff	tim2Init@_pwmPeriod,_pwmPeriod
  1491  0025FE  C013  F0C7         	movff	tim2Init@_pwmPeriod+1,_pwmPeriod+1
  1492  002602  0012               	return		;funcret
  1493  002604  FFFF               	dw	65535	; errata NOP
  1494  002606                     __end_of_tim2Init:
  1495                           	callstack 0
  1496                           
  1497 ;; *************** function _tim1Init *****************
  1498 ;; Defined at:
  1499 ;;		line 33 in file "timer.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;		None
  1502 ;; Auto vars:     Size  Location     Type
  1503 ;;		None
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  1    wreg      void 
  1506 ;; Registers used:
  1507 ;;		wreg, status,2
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1513 ;;      Params:         0       0       0       0       0       0       0
  1514 ;;      Locals:         0       0       0       0       0       0       0
  1515 ;;      Temps:          0       0       0       0       0       0       0
  1516 ;;      Totals:         0       0       0       0       0       0       0
  1517 ;;Total ram usage:        0 bytes
  1518 ;; Hardware stack levels used:    1
  1519 ;; Hardware stack levels required when called:    4
  1520 ;; This function calls:
  1521 ;;		Nothing
  1522 ;; This function is called by:
  1523 ;;		_main
  1524 ;; This function uses a non-reentrant model
  1525 ;;
  1526                           
  1527                           	psect	text3
  1528  00262A                     __ptext3:
  1529                           	callstack 0
  1530  00262A                     _tim1Init:
  1531                           	callstack 0
  1532  00262A  FFFF               	dw	65535	; assembler added errata NOP
  1533  00262C                     
  1534                           ;timer.c: 34:     T1CONbits.T1CKPS = 0x03;
  1535  00262C  0E30               	movlw	48
  1536  00262E  12CD               	iorwf	205,f,c	;volatile
  1537  002630                     
  1538                           ;timer.c: 35:     T1CONbits.TMR1CS = 0;
  1539  002630  92CD               	bcf	205,1,c	;volatile
  1540  002632                     
  1541                           ;timer.c: 37:     T1CONbits.TMR1ON = 1;
  1542  002632  80CD               	bsf	205,0,c	;volatile
  1543  002634  0012               	return		;funcret
  1544  002636  FFFF               	dw	65535	; errata NOP
  1545  002638                     __end_of_tim1Init:
  1546                           	callstack 0
  1547                           
  1548 ;; *************** function _tim0Init *****************
  1549 ;; Defined at:
  1550 ;;		line 21 in file "timer.c"
  1551 ;; Parameters:    Size  Location     Type
  1552 ;;		None
  1553 ;; Auto vars:     Size  Location     Type
  1554 ;;		None
  1555 ;; Return value:  Size  Location     Type
  1556 ;;                  1    wreg      void 
  1557 ;; Registers used:
  1558 ;;		wreg, status,2
  1559 ;; Tracked objects:
  1560 ;;		On entry : 0/0
  1561 ;;		On exit  : 0/0
  1562 ;;		Unchanged: 0/0
  1563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1564 ;;      Params:         0       0       0       0       0       0       0
  1565 ;;      Locals:         0       0       0       0       0       0       0
  1566 ;;      Temps:          0       0       0       0       0       0       0
  1567 ;;      Totals:         0       0       0       0       0       0       0
  1568 ;;Total ram usage:        0 bytes
  1569 ;; Hardware stack levels used:    1
  1570 ;; Hardware stack levels required when called:    4
  1571 ;; This function calls:
  1572 ;;		Nothing
  1573 ;; This function is called by:
  1574 ;;		_main
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           	psect	text4
  1579  002606                     __ptext4:
  1580                           	callstack 0
  1581  002606                     _tim0Init:
  1582                           	callstack 0
  1583  002606  FFFF               	dw	65535	; assembler added errata NOP
  1584  002608                     
  1585                           ;timer.c: 22:     T0CONbits.TMR0ON = 0;
  1586  002608  9ED5               	bcf	213,7,c	;volatile
  1587                           
  1588                           ;timer.c: 23:     T0CONbits.T08BIT = 0;
  1589  00260A  9CD5               	bcf	213,6,c	;volatile
  1590                           
  1591                           ;timer.c: 24:     T0CONbits.T0CS = 0;
  1592  00260C  9AD5               	bcf	213,5,c	;volatile
  1593                           
  1594                           ;timer.c: 25:     T0CONbits.PSA = 1;
  1595  00260E  86D5               	bsf	213,3,c	;volatile
  1596  002610                     
  1597                           ;timer.c: 26:     T0CONbits.T0PS = 0x07;
  1598  002610  0E07               	movlw	7
  1599  002612  12D5               	iorwf	213,f,c	;volatile
  1600  002614  0012               	return		;funcret
  1601  002616  FFFF               	dw	65535	; errata NOP
  1602  002618                     __end_of_tim0Init:
  1603                           	callstack 0
  1604                           
  1605 ;; *************** function _storeData *****************
  1606 ;; Defined at:
  1607 ;;		line 167 in file "usart.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;  data            1    wreg     unsigned char 
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;  data            1   26[COMRAM] unsigned char 
  1612 ;; Return value:  Size  Location     Type
  1613 ;;                  1    wreg      void 
  1614 ;; Registers used:
  1615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1616 ;; Tracked objects:
  1617 ;;		On entry : 0/0
  1618 ;;		On exit  : 0/0
  1619 ;;		Unchanged: 0/0
  1620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1621 ;;      Params:         0       0       0       0       0       0       0
  1622 ;;      Locals:         1       0       0       0       0       0       0
  1623 ;;      Temps:          2       0       0       0       0       0       0
  1624 ;;      Totals:         3       0       0       0       0       0       0
  1625 ;;Total ram usage:        3 bytes
  1626 ;; Hardware stack levels used:    1
  1627 ;; Hardware stack levels required when called:    6
  1628 ;; This function calls:
  1629 ;;		_printError
  1630 ;; This function is called by:
  1631 ;;		_main
  1632 ;; This function uses a non-reentrant model
  1633 ;;
  1634                           
  1635                           	psect	text5
  1636  00107E                     __ptext5:
  1637                           	callstack 0
  1638  00107E                     _storeData:
  1639                           	callstack 0
  1640  00107E  FFFF               	dw	65535	; assembler added errata NOP
  1641                           
  1642                           ;incstack = 0
  1643                           ;storeData@data stored from wreg
  1644  001080  6E1B               	movwf	storeData@data^0,c
  1645  001082                     
  1646                           ;usart.c: 169:     static unsigned char counter = 0;;usart.c: 170:     static unsigned c
      +                          har mexLength = 5;;usart.c: 171:     static unsigned char command;;usart.c: 172:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 176:     receivedMex[counter] = data;
  1647  001082  0E43               	movlw	low storeData@receivedMex
  1648  001084  245A               	addwf	storeData@counter^0,w,c
  1649  001086  6ED9               	movwf	fsr2l,c
  1650  001088  6ADA               	clrf	fsr2h,c
  1651  00108A  0E00               	movlw	high storeData@receivedMex
  1652  00108C  22DA               	addwfc	fsr2h,f,c
  1653  00108E  C01B  FFDF         	movff	storeData@data,indf2
  1654  001092                     
  1655                           ;usart.c: 178:     counter++;
  1656  001092  2A5A               	incf	storeData@counter^0,f,c
  1657                           
  1658                           ;usart.c: 181:     switch(receivedMex[0]){
  1659  001094  EF5B  F008         	goto	l4440
  1660  001098                     l4432:
  1661  001098  FFFF               	dw	65535	; assembler added errata NOP
  1662                           
  1663                           ;usart.c: 183:             mexLength = 5;
  1664  00109A  0E05               	movlw	5
  1665  00109C  6E6D               	movwf	storeData@mexLength^0,c
  1666                           
  1667                           ;usart.c: 184:             break;
  1668  00109E  EF76  F008         	goto	l4442
  1669  0010A2                     l4434:
  1670  0010A2  FFFF               	dw	65535	; assembler added errata NOP
  1671                           
  1672                           ;usart.c: 186:             mexLength = 9;
  1673  0010A4  0E09               	movlw	9
  1674  0010A6  6E6D               	movwf	storeData@mexLength^0,c
  1675                           
  1676                           ;usart.c: 187:             break;
  1677  0010A8  EF76  F008         	goto	l4442
  1678  0010AC                     l4436:
  1679  0010AC  FFFF               	dw	65535	; assembler added errata NOP
  1680                           
  1681                           ;usart.c: 189:             mexLength = 1;
  1682  0010AE  0E01               	movlw	1
  1683  0010B0  6E6D               	movwf	storeData@mexLength^0,c
  1684                           
  1685                           ;usart.c: 190:             break;
  1686  0010B2  EF76  F008         	goto	l4442
  1687  0010B6                     l4440:
  1688  0010B6  FFFF               	dw	65535	; assembler added errata NOP
  1689  0010B8  5043               	movf	storeData@receivedMex^0,w,c
  1690  0010BA  6E19               	movwf	??_storeData^0,c
  1691  0010BC  6A1A               	clrf	(??_storeData+1)^0,c
  1692                           
  1693                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1694                           ; Switch size 1, requested type "simple"
  1695                           ; Number of cases is 1, Range of values is 0 to 0
  1696                           ; switch strategies available:
  1697                           ; Name         Instructions Cycles
  1698                           ; simple_byte            4     3 (average)
  1699                           ;	Chosen strategy is simple_byte
  1700  0010BE  501A               	movf	(??_storeData+1)^0,w,c
  1701  0010C0  0A00               	xorlw	0	; case 0
  1702  0010C2  B4D8               	btfsc	status,2,c
  1703  0010C4  EF66  F008         	goto	l4806
  1704  0010C8  EF76  F008         	goto	l4442
  1705  0010CC                     l4806:
  1706  0010CC  FFFF               	dw	65535	; assembler added errata NOP
  1707                           
  1708                           ; Switch size 1, requested type "simple"
  1709                           ; Number of cases is 3, Range of values is 0 to 2
  1710                           ; switch strategies available:
  1711                           ; Name         Instructions Cycles
  1712                           ; simple_byte           10     6 (average)
  1713                           ;	Chosen strategy is simple_byte
  1714  0010CE  5019               	movf	??_storeData^0,w,c
  1715  0010D0  0A00               	xorlw	0	; case 0
  1716  0010D2  B4D8               	btfsc	status,2,c
  1717  0010D4  EF4C  F008         	goto	l4432
  1718  0010D8  0A01               	xorlw	1	; case 1
  1719  0010DA  B4D8               	btfsc	status,2,c
  1720  0010DC  EF51  F008         	goto	l4434
  1721  0010E0  0A03               	xorlw	3	; case 2
  1722  0010E2  B4D8               	btfsc	status,2,c
  1723  0010E4  EF56  F008         	goto	l4436
  1724  0010E8  EF76  F008         	goto	l4442
  1725  0010EC                     l4442:
  1726  0010EC  FFFF               	dw	65535	; assembler added errata NOP
  1727                           
  1728                           ;usart.c: 197:     if(counter >= mexLength){
  1729  0010EE  506D               	movf	storeData@mexLength^0,w,c
  1730  0010F0  5C5A               	subwf	storeData@counter^0,w,c
  1731  0010F2  A0D8               	btfss	status,0,c
  1732  0010F4  EF7E  F008         	goto	u3921
  1733  0010F8  EF81  F008         	goto	u3920
  1734  0010FC                     u3921:
  1735  0010FC  FFFF               	dw	65535	; assembler added errata NOP
  1736  0010FE  EF72  F009         	goto	l603
  1737  001102                     u3920:
  1738  001102  FFFF               	dw	65535	; assembler added errata NOP
  1739  001104                     
  1740                           ;usart.c: 198:         counter = 0;
  1741  001104  0E00               	movlw	0
  1742  001106  6E5A               	movwf	storeData@counter^0,c
  1743                           
  1744                           ;usart.c: 201:         switch(receivedMex[0]){
  1745  001108  EF57  F009         	goto	l4478
  1746  00110C                     l4446:
  1747  00110C  FFFF               	dw	65535	; assembler added errata NOP
  1748                           
  1749                           ;usart.c: 203:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  1750  00110E  505D               	movf	_dataCounter^0,w,c
  1751  001110  0D04               	mullw	4
  1752  001112  0ECA               	movlw	low _dataSequence
  1753  001114  24F3               	addwf	243,w,c
  1754  001116  6ED9               	movwf	fsr2l,c
  1755  001118  0E00               	movlw	high _dataSequence
  1756  00111A  20F4               	addwfc	prodh,w,c
  1757  00111C  6EDA               	movwf	fsr2h,c
  1758  00111E  C044  FFDF         	movff	storeData@receivedMex+1,indf2
  1759                           
  1760                           ;usart.c: 204:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  1761  001122  505D               	movf	_dataCounter^0,w,c
  1762  001124  0D04               	mullw	4
  1763  001126  0ECB               	movlw	low (_dataSequence+1)
  1764  001128  24F3               	addwf	243,w,c
  1765  00112A  6ED9               	movwf	fsr2l,c
  1766  00112C  0E00               	movlw	high (_dataSequence+1)
  1767  00112E  20F4               	addwfc	prodh,w,c
  1768  001130  6EDA               	movwf	fsr2h,c
  1769  001132  5045               	movf	(storeData@receivedMex+2)^0,w,c
  1770  001134  0D05               	mullw	5
  1771  001136  CFF3 FFDF          	movff	prodl,indf2
  1772                           
  1773                           ;usart.c: 205:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  1774  00113A  505D               	movf	_dataCounter^0,w,c
  1775  00113C  0D04               	mullw	4
  1776  00113E  0ECC               	movlw	low (_dataSequence+2)
  1777  001140  24F3               	addwf	243,w,c
  1778  001142  6ED9               	movwf	fsr2l,c
  1779  001144  0E00               	movlw	high (_dataSequence+2)
  1780  001146  20F4               	addwfc	prodh,w,c
  1781  001148  6EDA               	movwf	fsr2h,c
  1782  00114A  5046               	movf	(storeData@receivedMex+3)^0,w,c
  1783  00114C  0D05               	mullw	5
  1784  00114E  CFF3 FFDF          	movff	prodl,indf2
  1785                           
  1786                           ;usart.c: 206:                 dataSequence[dataCounter].rotation = receivedMex[4];
  1787  001152  505D               	movf	_dataCounter^0,w,c
  1788  001154  0D04               	mullw	4
  1789  001156  0ECD               	movlw	low (_dataSequence+3)
  1790  001158  24F3               	addwf	243,w,c
  1791  00115A  6ED9               	movwf	fsr2l,c
  1792  00115C  0E00               	movlw	high (_dataSequence+3)
  1793  00115E  20F4               	addwfc	prodh,w,c
  1794  001160  6EDA               	movwf	fsr2h,c
  1795  001162  C047  FFDF         	movff	storeData@receivedMex+4,indf2
  1796                           
  1797                           ;usart.c: 209:                 if(dataSequence[dataCounter].posX > maxX ||
  1798  001166  505D               	movf	_dataCounter^0,w,c
  1799  001168  0D04               	mullw	4
  1800  00116A  0ECB               	movlw	low (_dataSequence+1)
  1801  00116C  24F3               	addwf	243,w,c
  1802  00116E  6ED9               	movwf	fsr2l,c
  1803  001170  0E00               	movlw	high (_dataSequence+1)
  1804  001172  20F4               	addwfc	prodh,w,c
  1805  001174  6EDA               	movwf	fsr2h,c
  1806  001176  50DF               	movf	indf2,w,c
  1807  001178  6E19               	movwf	??_storeData^0,c
  1808  00117A  6A1A               	clrf	(??_storeData+1)^0,c
  1809  00117C  5019               	movf	??_storeData^0,w,c
  1810  00117E  5C6B               	subwf	_maxX^0,w,c
  1811  001180  501A               	movf	(??_storeData+1)^0,w,c
  1812  001182  586C               	subwfb	(_maxX+1)^0,w,c
  1813  001184  A0D8               	btfss	status,0,c
  1814  001186  EFC7  F008         	goto	u3931
  1815  00118A  EFCA  F008         	goto	u3930
  1816  00118E                     u3931:
  1817  00118E  FFFF               	dw	65535	; assembler added errata NOP
  1818  001190  EFE1  F008         	goto	l4450
  1819  001194                     u3930:
  1820  001194  FFFF               	dw	65535	; assembler added errata NOP
  1821  001196  505D               	movf	_dataCounter^0,w,c
  1822  001198  0D04               	mullw	4
  1823  00119A  0ECC               	movlw	low (_dataSequence+2)
  1824  00119C  24F3               	addwf	243,w,c
  1825  00119E  6ED9               	movwf	fsr2l,c
  1826  0011A0  0E00               	movlw	high (_dataSequence+2)
  1827  0011A2  20F4               	addwfc	prodh,w,c
  1828  0011A4  6EDA               	movwf	fsr2h,c
  1829  0011A6  50DF               	movf	indf2,w,c
  1830  0011A8  6E19               	movwf	??_storeData^0,c
  1831  0011AA  5019               	movf	??_storeData^0,w,c
  1832  0011AC  5C69               	subwf	_maxY^0,w,c
  1833  0011AE  0E00               	movlw	0
  1834  0011B0  586A               	subwfb	(_maxY+1)^0,w,c
  1835  0011B2  B0D8               	btfsc	status,0,c
  1836  0011B4  EFDE  F008         	goto	u3941
  1837  0011B8  EFE1  F008         	goto	u3940
  1838  0011BC                     u3941:
  1839  0011BC  FFFF               	dw	65535	; assembler added errata NOP
  1840  0011BE  EFE7  F008         	goto	l4452
  1841  0011C2                     u3940:
  1842  0011C2                     l4450:
  1843  0011C2  FFFF               	dw	65535	; assembler added errata NOP
  1844                           
  1845                           ;usart.c: 210:                         dataSequence[dataCounter].posY > maxY){;usart.c: 
      +                          211:                     printError(5);
  1846  0011C4  0E05               	movlw	5
  1847  0011C6  EC09  F00E         	call	_printError
  1848                           
  1849                           ;usart.c: 212:                 }else{
  1850  0011CA  EF72  F009         	goto	l603
  1851  0011CE                     l4452:
  1852  0011CE  FFFF               	dw	65535	; assembler added errata NOP
  1853                           
  1854                           ;usart.c: 213:                     dataCounter++;
  1855  0011D0  2A5D               	incf	_dataCounter^0,f,c
  1856  0011D2  EF72  F009         	goto	l603
  1857  0011D6                     l596:
  1858  0011D6  FFFF               	dw	65535	; assembler added errata NOP
  1859                           
  1860                           ;usart.c: 218:                 newSequenceData.L = receivedMex[1];
  1861  0011D8  C044  F0DE         	movff	storeData@receivedMex+1,_newSequenceData
  1862                           
  1863                           ;usart.c: 219:                 newSequenceData.W = receivedMex[2];
  1864  0011DC  C045  F0DF         	movff	storeData@receivedMex+2,_newSequenceData+1
  1865  0011E0                     
  1866                           ;usart.c: 220:                 newSequenceData.init_posX = receivedMex[3] * 5;
  1867  0011E0  5046               	movf	(storeData@receivedMex+3)^0,w,c
  1868  0011E2  0D05               	mullw	5
  1869  0011E4  CFF3 F0E0          	movff	prodl,_newSequenceData+2
  1870                           
  1871                           ;usart.c: 221:                 newSequenceData.init_posY = receivedMex[4] * 5;
  1872  0011E8  5047               	movf	(storeData@receivedMex+4)^0,w,c
  1873  0011EA  0D05               	mullw	5
  1874  0011EC  CFF3 F0E1          	movff	prodl,_newSequenceData+3
  1875  0011F0                     
  1876                           ;usart.c: 222:                 newSequenceData.init_rot = receivedMex[5];
  1877  0011F0  C048  F0E2         	movff	storeData@receivedMex+5,_newSequenceData+4
  1878                           
  1879                           ;usart.c: 223:                 newSequenceData.end_posX = receivedMex[6] * 5;
  1880  0011F4  5049               	movf	(storeData@receivedMex+6)^0,w,c
  1881  0011F6  0D05               	mullw	5
  1882  0011F8  CFF3 F0E3          	movff	prodl,_newSequenceData+5
  1883                           
  1884                           ;usart.c: 224:                 newSequenceData.end_posY = receivedMex[7] * 5;
  1885  0011FC  504A               	movf	(storeData@receivedMex+7)^0,w,c
  1886  0011FE  0D05               	mullw	5
  1887  001200  CFF3 F0E4          	movff	prodl,_newSequenceData+6
  1888  001204                     
  1889                           ;usart.c: 225:                 newSequenceData.end_rot = receivedMex[8];
  1890  001204  C04B  F0E5         	movff	storeData@receivedMex+8,_newSequenceData+7
  1891  001208                     
  1892                           ;usart.c: 228:                 if(newSequenceData.init_posX > maxX ||
  1893  001208  0100               	movlb	0	; () banked
  1894  00120A  51E0               	movf	(_newSequenceData+2)& (0+255),w,b
  1895  00120C  6E19               	movwf	??_storeData^0,c
  1896  00120E  6A1A               	clrf	(??_storeData+1)^0,c
  1897  001210  5019               	movf	??_storeData^0,w,c
  1898  001212  5C6B               	subwf	_maxX^0,w,c
  1899  001214  501A               	movf	(??_storeData+1)^0,w,c
  1900  001216  586C               	subwfb	(_maxX+1)^0,w,c
  1901  001218  A0D8               	btfss	status,0,c
  1902  00121A  EF11  F009         	goto	u3951
  1903  00121E  EF14  F009         	goto	u3950
  1904  001222                     u3951:
  1905  001222  FFFF               	dw	65535	; assembler added errata NOP
  1906  001224  EF41  F009         	goto	l4468
  1907  001228                     u3950:
  1908  001228  FFFF               	dw	65535	; assembler added errata NOP
  1909  00122A                     
  1910                           ; BSR set to: 0
  1911  00122A  51E3               	movf	(_newSequenceData+5)& (0+255),w,b
  1912  00122C  6E19               	movwf	??_storeData^0,c
  1913  00122E  6A1A               	clrf	(??_storeData+1)^0,c
  1914  001230  5019               	movf	??_storeData^0,w,c
  1915  001232  5C6B               	subwf	_maxX^0,w,c
  1916  001234  501A               	movf	(??_storeData+1)^0,w,c
  1917  001236  586C               	subwfb	(_maxX+1)^0,w,c
  1918  001238  A0D8               	btfss	status,0,c
  1919  00123A  EF21  F009         	goto	u3961
  1920  00123E  EF24  F009         	goto	u3960
  1921  001242                     u3961:
  1922  001242  FFFF               	dw	65535	; assembler added errata NOP
  1923  001244  EF41  F009         	goto	l4468
  1924  001248                     u3960:
  1925  001248  FFFF               	dw	65535	; assembler added errata NOP
  1926  00124A                     
  1927                           ; BSR set to: 0
  1928  00124A  51E1               	movf	(_newSequenceData+3)& (0+255),w,b
  1929  00124C  6E19               	movwf	??_storeData^0,c
  1930  00124E  6A1A               	clrf	(??_storeData+1)^0,c
  1931  001250  5019               	movf	??_storeData^0,w,c
  1932  001252  5C69               	subwf	_maxY^0,w,c
  1933  001254  501A               	movf	(??_storeData+1)^0,w,c
  1934  001256  586A               	subwfb	(_maxY+1)^0,w,c
  1935  001258  A0D8               	btfss	status,0,c
  1936  00125A  EF31  F009         	goto	u3971
  1937  00125E  EF34  F009         	goto	u3970
  1938  001262                     u3971:
  1939  001262  FFFF               	dw	65535	; assembler added errata NOP
  1940  001264  EF41  F009         	goto	l4468
  1941  001268                     u3970:
  1942  001268  FFFF               	dw	65535	; assembler added errata NOP
  1943  00126A                     
  1944                           ; BSR set to: 0
  1945  00126A  51E4               	movf	(_newSequenceData+6)& (0+255),w,b
  1946  00126C  5C69               	subwf	_maxY^0,w,c
  1947  00126E  0E00               	movlw	0
  1948  001270  586A               	subwfb	(_maxY+1)^0,w,c
  1949  001272  B0D8               	btfsc	status,0,c
  1950  001274  EF3E  F009         	goto	u3981
  1951  001278  EF41  F009         	goto	u3980
  1952  00127C                     u3981:
  1953  00127C  FFFF               	dw	65535	; assembler added errata NOP
  1954  00127E  EF47  F009         	goto	l4470
  1955  001282                     u3980:
  1956  001282                     l4468:
  1957  001282  FFFF               	dw	65535	; assembler added errata NOP
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;usart.c: 231:                         newSequenceData.end_posY > maxY){;usart.c: 232:  
      +                                             printError(5);
  1961  001284  0E05               	movlw	5
  1962  001286  EC09  F00E         	call	_printError
  1963                           
  1964                           ;usart.c: 233:                 }else{
  1965  00128A  EF72  F009         	goto	l603
  1966  00128E                     l4470:
  1967  00128E  FFFF               	dw	65535	; assembler added errata NOP
  1968                           
  1969                           ; BSR set to: 0
  1970                           ;usart.c: 234:                     _newSequence = 1;
  1971  001290  0E01               	movlw	1
  1972  001292  6E5B               	movwf	__newSequence^0,c
  1973  001294  EF72  F009         	goto	l603
  1974  001298                     l4472:
  1975  001298  FFFF               	dw	65535	; assembler added errata NOP
  1976                           
  1977                           ;usart.c: 239:                 _fatalError = 1;
  1978  00129A  0E01               	movlw	1
  1979  00129C  6E5C               	movwf	__fatalError^0,c
  1980                           
  1981                           ;usart.c: 240:                 break;
  1982  00129E  EF72  F009         	goto	l603
  1983  0012A2                     l4474:
  1984  0012A2  FFFF               	dw	65535	; assembler added errata NOP
  1985                           
  1986                           ;usart.c: 243:                 printError(8);
  1987  0012A4  0E08               	movlw	8
  1988  0012A6  EC09  F00E         	call	_printError
  1989                           
  1990                           ;usart.c: 244:                 break;
  1991  0012AA  EF72  F009         	goto	l603
  1992  0012AE                     l4478:
  1993  0012AE  FFFF               	dw	65535	; assembler added errata NOP
  1994  0012B0  5043               	movf	storeData@receivedMex^0,w,c
  1995  0012B2  6E19               	movwf	??_storeData^0,c
  1996  0012B4  6A1A               	clrf	(??_storeData+1)^0,c
  1997                           
  1998                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1999                           ; Switch size 1, requested type "simple"
  2000                           ; Number of cases is 1, Range of values is 0 to 0
  2001                           ; switch strategies available:
  2002                           ; Name         Instructions Cycles
  2003                           ; simple_byte            4     3 (average)
  2004                           ;	Chosen strategy is simple_byte
  2005  0012B6  501A               	movf	(??_storeData+1)^0,w,c
  2006  0012B8  0A00               	xorlw	0	; case 0
  2007  0012BA  B4D8               	btfsc	status,2,c
  2008  0012BC  EF62  F009         	goto	l4808
  2009  0012C0  EF51  F009         	goto	l4474
  2010  0012C4                     l4808:
  2011  0012C4  FFFF               	dw	65535	; assembler added errata NOP
  2012                           
  2013                           ; Switch size 1, requested type "simple"
  2014                           ; Number of cases is 3, Range of values is 0 to 2
  2015                           ; switch strategies available:
  2016                           ; Name         Instructions Cycles
  2017                           ; simple_byte           10     6 (average)
  2018                           ;	Chosen strategy is simple_byte
  2019  0012C6  5019               	movf	??_storeData^0,w,c
  2020  0012C8  0A00               	xorlw	0	; case 0
  2021  0012CA  B4D8               	btfsc	status,2,c
  2022  0012CC  EF86  F008         	goto	l4446
  2023  0012D0  0A01               	xorlw	1	; case 1
  2024  0012D2  B4D8               	btfsc	status,2,c
  2025  0012D4  EFEB  F008         	goto	l596
  2026  0012D8  0A03               	xorlw	3	; case 2
  2027  0012DA  B4D8               	btfsc	status,2,c
  2028  0012DC  EF4C  F009         	goto	l4472
  2029  0012E0  EF51  F009         	goto	l4474
  2030  0012E4                     l603:
  2031  0012E4  FFFF               	dw	65535	; assembler added errata NOP
  2032  0012E6  0012               	return		;funcret
  2033  0012E8  FFFF               	dw	65535	; errata NOP
  2034  0012EA                     __end_of_storeData:
  2035                           	callstack 0
  2036                           
  2037 ;; *************** function _printError *****************
  2038 ;; Defined at:
  2039 ;;		line 114 in file "usart.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;  errCode         1    wreg     unsigned char 
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;  errCode         1   23[COMRAM] unsigned char 
  2044 ;; Return value:  Size  Location     Type
  2045 ;;                  1    wreg      void 
  2046 ;; Registers used:
  2047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2053 ;;      Params:         0       0       0       0       0       0       0
  2054 ;;      Locals:         1       0       0       0       0       0       0
  2055 ;;      Temps:          2       0       0       0       0       0       0
  2056 ;;      Totals:         3       0       0       0       0       0       0
  2057 ;;Total ram usage:        3 bytes
  2058 ;; Hardware stack levels used:    1
  2059 ;; Hardware stack levels required when called:    5
  2060 ;; This function calls:
  2061 ;;		_uartTx
  2062 ;; This function is called by:
  2063 ;;		_main
  2064 ;;		_storeData
  2065 ;; This function uses a non-reentrant model
  2066 ;;
  2067                           
  2068                           	psect	text6
  2069  001C12                     __ptext6:
  2070                           	callstack 0
  2071  001C12                     _printError:
  2072                           	callstack 0
  2073  001C12  FFFF               	dw	65535	; assembler added errata NOP
  2074                           
  2075                           ;incstack = 0
  2076                           ;printError@errCode stored from wreg
  2077  001C14  6E18               	movwf	printError@errCode^0,c
  2078  001C16                     
  2079                           ;usart.c: 116:     switch(errCode){
  2080  001C16  EF65  F00E         	goto	l4288
  2081  001C1A                     l4270:
  2082  001C1A  FFFF               	dw	65535	; assembler added errata NOP
  2083                           
  2084                           ;usart.c: 118:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  2085  001C1C  0E90               	movlw	low _errString_Feed
  2086  001C1E  6E12               	movwf	uartTx@ptr^0,c
  2087  001C20  0E00               	movlw	high _errString_Feed
  2088  001C22  6E13               	movwf	(uartTx@ptr+1)^0,c
  2089  001C24  0E1E               	movlw	30
  2090  001C26  6E14               	movwf	uartTx@length^0,c
  2091  001C28  ECF2  F011         	call	_uartTx	;wreg free
  2092                           
  2093                           ;usart.c: 119:             break;
  2094  001C2C  EF94  F00E         	goto	l562
  2095  001C30                     l4272:
  2096  001C30  FFFF               	dw	65535	; assembler added errata NOP
  2097                           
  2098                           ;usart.c: 121:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  2099  001C32  0E5E               	movlw	low _errString_ZEND
  2100  001C34  6E12               	movwf	uartTx@ptr^0,c
  2101  001C36  0E01               	movlw	high _errString_ZEND
  2102  001C38  6E13               	movwf	(uartTx@ptr+1)^0,c
  2103  001C3A  0E29               	movlw	41
  2104  001C3C  6E14               	movwf	uartTx@length^0,c
  2105  001C3E  ECF2  F011         	call	_uartTx	;wreg free
  2106                           
  2107                           ;usart.c: 122:             break;
  2108  001C42  EF94  F00E         	goto	l562
  2109  001C46                     l4274:
  2110  001C46  FFFF               	dw	65535	; assembler added errata NOP
  2111                           
  2112                           ;usart.c: 124:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  2113  001C48  0E87               	movlw	low _errString_Reset
  2114  001C4A  6E12               	movwf	uartTx@ptr^0,c
  2115  001C4C  0E01               	movlw	high _errString_Reset
  2116  001C4E  6E13               	movwf	(uartTx@ptr+1)^0,c
  2117  001C50  0E28               	movlw	40
  2118  001C52  6E14               	movwf	uartTx@length^0,c
  2119  001C54  ECF2  F011         	call	_uartTx	;wreg free
  2120                           
  2121                           ;usart.c: 125:             break;
  2122  001C58  EF94  F00E         	goto	l562
  2123  001C5C                     l4276:
  2124  001C5C  FFFF               	dw	65535	; assembler added errata NOP
  2125                           
  2126                           ;usart.c: 127:             uartTx(&errString_Point[0], sizeof(errString_Point));
  2127  001C5E  0E35               	movlw	low _errString_Point
  2128  001C60  6E12               	movwf	uartTx@ptr^0,c
  2129  001C62  0E01               	movlw	high _errString_Point
  2130  001C64  6E13               	movwf	(uartTx@ptr+1)^0,c
  2131  001C66  0E29               	movlw	41
  2132  001C68  6E14               	movwf	uartTx@length^0,c
  2133  001C6A  ECF2  F011         	call	_uartTx	;wreg free
  2134                           
  2135                           ;usart.c: 128:             break;
  2136  001C6E  EF94  F00E         	goto	l562
  2137  001C72                     l4278:
  2138  001C72  FFFF               	dw	65535	; assembler added errata NOP
  2139                           
  2140                           ;usart.c: 130:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  2141  001C74  0ED6               	movlw	low _errString_Bound
  2142  001C76  6E12               	movwf	uartTx@ptr^0,c
  2143  001C78  0E01               	movlw	high _errString_Bound
  2144  001C7A  6E13               	movwf	(uartTx@ptr+1)^0,c
  2145  001C7C  0E21               	movlw	33
  2146  001C7E  6E14               	movwf	uartTx@length^0,c
  2147  001C80  ECF2  F011         	call	_uartTx	;wreg free
  2148                           
  2149                           ;usart.c: 131:             break;
  2150  001C84  EF94  F00E         	goto	l562
  2151  001C88                     l4280:
  2152  001C88  FFFF               	dw	65535	; assembler added errata NOP
  2153                           
  2154                           ;usart.c: 133:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  2155  001C8A  0E00               	movlw	low _errString_PointZ
  2156  001C8C  6E12               	movwf	uartTx@ptr^0,c
  2157  001C8E  0E01               	movlw	high _errString_PointZ
  2158  001C90  6E13               	movwf	(uartTx@ptr+1)^0,c
  2159  001C92  0E35               	movlw	53
  2160  001C94  6E14               	movwf	uartTx@length^0,c
  2161  001C96  ECF2  F011         	call	_uartTx	;wreg free
  2162                           
  2163                           ;usart.c: 134:             break;
  2164  001C9A  EF94  F00E         	goto	l562
  2165  001C9E                     l4282:
  2166  001C9E  FFFF               	dw	65535	; assembler added errata NOP
  2167                           
  2168                           ;usart.c: 136:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  2169  001CA0  0EAF               	movlw	low _errString_Fatal
  2170  001CA2  6E12               	movwf	uartTx@ptr^0,c
  2171  001CA4  0E01               	movlw	high _errString_Fatal
  2172  001CA6  6E13               	movwf	(uartTx@ptr+1)^0,c
  2173  001CA8  0E27               	movlw	39
  2174  001CAA  6E14               	movwf	uartTx@length^0,c
  2175  001CAC  ECF2  F011         	call	_uartTx	;wreg free
  2176                           
  2177                           ;usart.c: 137:             break;
  2178  001CB0  EF94  F00E         	goto	l562
  2179  001CB4                     l4284:
  2180  001CB4  FFFF               	dw	65535	; assembler added errata NOP
  2181                           
  2182                           ;usart.c: 139:             uartTx(&errString_Command[0], sizeof(errString_Command));
  2183  001CB6  0EAE               	movlw	low _errString_Command
  2184  001CB8  6E12               	movwf	uartTx@ptr^0,c
  2185  001CBA  0E00               	movlw	high _errString_Command
  2186  001CBC  6E13               	movwf	(uartTx@ptr+1)^0,c
  2187  001CBE  0E18               	movlw	24
  2188  001CC0  6E14               	movwf	uartTx@length^0,c
  2189  001CC2  ECF2  F011         	call	_uartTx	;wreg free
  2190                           
  2191                           ;usart.c: 140:             break;
  2192  001CC6  EF94  F00E         	goto	l562
  2193  001CCA                     l4288:
  2194  001CCA  FFFF               	dw	65535	; assembler added errata NOP
  2195  001CCC  5018               	movf	printError@errCode^0,w,c
  2196  001CCE  6E16               	movwf	??_printError^0,c
  2197  001CD0  6A17               	clrf	(??_printError+1)^0,c
  2198                           
  2199                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2200                           ; Switch size 1, requested type "simple"
  2201                           ; Number of cases is 1, Range of values is 0 to 0
  2202                           ; switch strategies available:
  2203                           ; Name         Instructions Cycles
  2204                           ; simple_byte            4     3 (average)
  2205                           ;	Chosen strategy is simple_byte
  2206  001CD2  5017               	movf	(??_printError+1)^0,w,c
  2207  001CD4  0A00               	xorlw	0	; case 0
  2208  001CD6  B4D8               	btfsc	status,2,c
  2209  001CD8  EF70  F00E         	goto	l4810
  2210  001CDC  EF94  F00E         	goto	l562
  2211  001CE0                     l4810:
  2212  001CE0  FFFF               	dw	65535	; assembler added errata NOP
  2213                           
  2214                           ; Switch size 1, requested type "simple"
  2215                           ; Number of cases is 8, Range of values is 1 to 8
  2216                           ; switch strategies available:
  2217                           ; Name         Instructions Cycles
  2218                           ; simple_byte           25    13 (average)
  2219                           ;	Chosen strategy is simple_byte
  2220  001CE2  5016               	movf	??_printError^0,w,c
  2221  001CE4  0A01               	xorlw	1	; case 1
  2222  001CE6  B4D8               	btfsc	status,2,c
  2223  001CE8  EF0D  F00E         	goto	l4270
  2224  001CEC  0A03               	xorlw	3	; case 2
  2225  001CEE  B4D8               	btfsc	status,2,c
  2226  001CF0  EF18  F00E         	goto	l4272
  2227  001CF4  0A01               	xorlw	1	; case 3
  2228  001CF6  B4D8               	btfsc	status,2,c
  2229  001CF8  EF23  F00E         	goto	l4274
  2230  001CFC  0A07               	xorlw	7	; case 4
  2231  001CFE  B4D8               	btfsc	status,2,c
  2232  001D00  EF2E  F00E         	goto	l4276
  2233  001D04  0A01               	xorlw	1	; case 5
  2234  001D06  B4D8               	btfsc	status,2,c
  2235  001D08  EF39  F00E         	goto	l4278
  2236  001D0C  0A03               	xorlw	3	; case 6
  2237  001D0E  B4D8               	btfsc	status,2,c
  2238  001D10  EF44  F00E         	goto	l4280
  2239  001D14  0A01               	xorlw	1	; case 7
  2240  001D16  B4D8               	btfsc	status,2,c
  2241  001D18  EF4F  F00E         	goto	l4282
  2242  001D1C  0A0F               	xorlw	15	; case 8
  2243  001D1E  B4D8               	btfsc	status,2,c
  2244  001D20  EF5A  F00E         	goto	l4284
  2245  001D24  EF94  F00E         	goto	l562
  2246  001D28                     l562:
  2247  001D28  FFFF               	dw	65535	; assembler added errata NOP
  2248  001D2A  0012               	return		;funcret
  2249  001D2C  FFFF               	dw	65535	; errata NOP
  2250  001D2E                     __end_of_printError:
  2251                           	callstack 0
  2252                           
  2253 ;; *************** function _uartTx *****************
  2254 ;; Defined at:
  2255 ;;		line 151 in file "usart.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;  ptr             2   17[COMRAM] PTR unsigned char 
  2258 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  2259 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  2260 ;;  length          1   19[COMRAM] unsigned char 
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;  i               1   20[COMRAM] unsigned char 
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  1    wreg      void 
  2265 ;; Registers used:
  2266 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2272 ;;      Params:         3       0       0       0       0       0       0
  2273 ;;      Locals:         1       0       0       0       0       0       0
  2274 ;;      Temps:          0       0       0       0       0       0       0
  2275 ;;      Totals:         4       0       0       0       0       0       0
  2276 ;;Total ram usage:        4 bytes
  2277 ;; Hardware stack levels used:    1
  2278 ;; Hardware stack levels required when called:    4
  2279 ;; This function calls:
  2280 ;;		Nothing
  2281 ;; This function is called by:
  2282 ;;		_printError
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           	psect	text7
  2287  0023E4                     __ptext7:
  2288                           	callstack 0
  2289  0023E4                     _uartTx:
  2290                           	callstack 0
  2291  0023E4  FFFF               	dw	65535	; assembler added errata NOP
  2292  0023E6                     
  2293                           ;usart.c: 151: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 152: {;usa
      +                          rt.c: 154:     for(char i = 1; i < length; i++){
  2294  0023E6  0E01               	movlw	1
  2295  0023E8  6E15               	movwf	uartTx@i^0,c
  2296  0023EA  EF0B  F012         	goto	l3780
  2297  0023EE                     l3776:
  2298  0023EE  FFFF               	dw	65535	; assembler added errata NOP
  2299                           
  2300                           ;usart.c: 156:         TXREG = *ptr;
  2301  0023F0  C012  FFD9         	movff	uartTx@ptr,fsr2l
  2302  0023F4  C013  FFDA         	movff	uartTx@ptr+1,fsr2h
  2303  0023F8  50DF               	movf	indf2,w,c
  2304  0023FA  6EAD               	movwf	173,c	;volatile
  2305  0023FC                     l567:
  2306  0023FC  FFFF               	dw	65535	; assembler added errata NOP
  2307  0023FE  A2AC               	btfss	172,1,c	;volatile
  2308  002400  EF04  F012         	goto	u2921
  2309  002404  EF07  F012         	goto	u2920
  2310  002408                     u2921:
  2311  002408  FFFF               	dw	65535	; assembler added errata NOP
  2312  00240A  EFFE  F011         	goto	l567
  2313  00240E                     u2920:
  2314  00240E  FFFF               	dw	65535	; assembler added errata NOP
  2315  002410                     
  2316                           ;usart.c: 160:         ptr++;
  2317  002410  4A12               	infsnz	uartTx@ptr^0,f,c
  2318  002412  2A13               	incf	(uartTx@ptr+1)^0,f,c
  2319                           
  2320                           ;usart.c: 161:     }
  2321  002414  2A15               	incf	uartTx@i^0,f,c
  2322  002416                     l3780:
  2323  002416  FFFF               	dw	65535	; assembler added errata NOP
  2324  002418  5014               	movf	uartTx@length^0,w,c
  2325  00241A  5C15               	subwf	uartTx@i^0,w,c
  2326  00241C  A0D8               	btfss	status,0,c
  2327  00241E  EF13  F012         	goto	u2931
  2328  002422  EF16  F012         	goto	u2930
  2329  002426                     u2931:
  2330  002426  FFFF               	dw	65535	; assembler added errata NOP
  2331  002428  EFF7  F011         	goto	l3776
  2332  00242C                     u2930:
  2333  00242C  FFFF               	dw	65535	; assembler added errata NOP
  2334  00242E  0012               	return		;funcret
  2335  002430  FFFF               	dw	65535	; errata NOP
  2336  002432                     __end_of_uartTx:
  2337                           	callstack 0
  2338                           
  2339 ;; *************** function _shiftData *****************
  2340 ;; Defined at:
  2341 ;;		line 84 in file "usart.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;		None
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;  i               1   19[COMRAM] unsigned char 
  2346 ;; Return value:  Size  Location     Type
  2347 ;;                  1    wreg      void 
  2348 ;; Registers used:
  2349 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2350 ;; Tracked objects:
  2351 ;;		On entry : 0/0
  2352 ;;		On exit  : 0/0
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2355 ;;      Params:         0       0       0       0       0       0       0
  2356 ;;      Locals:         1       0       0       0       0       0       0
  2357 ;;      Temps:          2       0       0       0       0       0       0
  2358 ;;      Totals:         3       0       0       0       0       0       0
  2359 ;;Total ram usage:        3 bytes
  2360 ;; Hardware stack levels used:    1
  2361 ;; Hardware stack levels required when called:    4
  2362 ;; This function calls:
  2363 ;;		Nothing
  2364 ;; This function is called by:
  2365 ;;		_main
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           	psect	text8
  2370  002384                     __ptext8:
  2371                           	callstack 0
  2372  002384                     _shiftData:
  2373                           	callstack 0
  2374  002384  FFFF               	dw	65535	; assembler added errata NOP
  2375  002386                     
  2376                           ;usart.c: 85:     char i;;usart.c: 87:     for(i = 0; i < 4; i++){
  2377  002386  0E00               	movlw	0
  2378  002388  6E14               	movwf	shiftData@i^0,c
  2379  00238A                     l4598:
  2380  00238A  FFFF               	dw	65535	; assembler added errata NOP
  2381                           
  2382                           ;usart.c: 88:         dataSequence[i] = dataSequence[i+1];
  2383  00238C  5014               	movf	shiftData@i^0,w,c
  2384  00238E  6E12               	movwf	??_shiftData^0,c
  2385  002390  6A13               	clrf	(??_shiftData+1)^0,c
  2386  002392  90D8               	bcf	status,0,c
  2387  002394  3612               	rlcf	??_shiftData^0,f,c
  2388  002396  3613               	rlcf	(??_shiftData+1)^0,f,c
  2389  002398  90D8               	bcf	status,0,c
  2390  00239A  3612               	rlcf	??_shiftData^0,f,c
  2391  00239C  3613               	rlcf	(??_shiftData+1)^0,f,c
  2392  00239E  0ECE               	movlw	low (_dataSequence+4)
  2393  0023A0  2412               	addwf	??_shiftData^0,w,c
  2394  0023A2  6ED9               	movwf	fsr2l,c
  2395  0023A4  0E00               	movlw	high (_dataSequence+4)
  2396  0023A6  2013               	addwfc	(??_shiftData+1)^0,w,c
  2397  0023A8  6EDA               	movwf	fsr2h,c
  2398  0023AA  5014               	movf	shiftData@i^0,w,c
  2399  0023AC  0D04               	mullw	4
  2400  0023AE  0ECA               	movlw	low _dataSequence
  2401  0023B0  24F3               	addwf	243,w,c
  2402  0023B2  6EE1               	movwf	fsr1l,c
  2403  0023B4  0E00               	movlw	high _dataSequence
  2404  0023B6  20F4               	addwfc	prodh,w,c
  2405  0023B8  6EE2               	movwf	fsr1h,c
  2406  0023BA  CFDE FFE6          	movff	postinc2,postinc1
  2407  0023BE  CFDE FFE6          	movff	postinc2,postinc1
  2408  0023C2  CFDE FFE6          	movff	postinc2,postinc1
  2409  0023C6  CFDE FFE6          	movff	postinc2,postinc1
  2410  0023CA                     
  2411                           ;usart.c: 89:     }
  2412  0023CA  2A14               	incf	shiftData@i^0,f,c
  2413  0023CC  0E03               	movlw	3
  2414  0023CE  6414               	cpfsgt	shiftData@i^0,c
  2415  0023D0  EFEC  F011         	goto	u4051
  2416  0023D4  EFEF  F011         	goto	u4050
  2417  0023D8                     u4051:
  2418  0023D8  FFFF               	dw	65535	; assembler added errata NOP
  2419  0023DA  EFC5  F011         	goto	l4598
  2420  0023DE                     u4050:
  2421  0023DE  FFFF               	dw	65535	; assembler added errata NOP
  2422  0023E0  0012               	return		;funcret
  2423  0023E2  FFFF               	dw	65535	; errata NOP
  2424  0023E4                     __end_of_shiftData:
  2425                           	callstack 0
  2426                           
  2427 ;; *************** function _resetPosition *****************
  2428 ;; Defined at:
  2429 ;;		line 162 in file "motors.c"
  2430 ;; Parameters:    Size  Location     Type
  2431 ;;		None
  2432 ;; Auto vars:     Size  Location     Type
  2433 ;;  keepMovingZ     1   22[COMRAM] unsigned char 
  2434 ;;  keepMovingY     1   21[COMRAM] unsigned char 
  2435 ;;  keepMovingX     1   20[COMRAM] unsigned char 
  2436 ;; Return value:  Size  Location     Type
  2437 ;;                  1    wreg      unsigned char 
  2438 ;; Registers used:
  2439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2440 ;; Tracked objects:
  2441 ;;		On entry : 0/0
  2442 ;;		On exit  : 0/0
  2443 ;;		Unchanged: 0/0
  2444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2445 ;;      Params:         0       0       0       0       0       0       0
  2446 ;;      Locals:         3       0       0       0       0       0       0
  2447 ;;      Temps:          0       0       0       0       0       0       0
  2448 ;;      Totals:         3       0       0       0       0       0       0
  2449 ;;Total ram usage:        3 bytes
  2450 ;; Hardware stack levels used:    1
  2451 ;; Hardware stack levels required when called:    5
  2452 ;; This function calls:
  2453 ;;		_resetStep
  2454 ;;		_resetTM0_Temp
  2455 ;;		_resetTM2_Temp
  2456 ;;		_stepMade
  2457 ;; This function is called by:
  2458 ;;		_main
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462                           	psect	text9
  2463  00174E                     __ptext9:
  2464                           	callstack 0
  2465  00174E                     _resetPosition:
  2466                           	callstack 0
  2467  00174E  FFFF               	dw	65535	; assembler added errata NOP
  2468  001750                     
  2469                           ;motors.c: 182:     motCounter[0][1] = -1;
  2470  001750  6864               	setf	(_motCounter+1)^0,c
  2471                           
  2472                           ;motors.c: 183:     motCounter[1][1] = -1;
  2473  001752  6866               	setf	(_motCounter+3)^0,c
  2474                           
  2475                           ;motors.c: 184:     motCounter[2][1] = -1;
  2476  001754  6868               	setf	(_motCounter+5)^0,c
  2477  001756                     
  2478                           ;motors.c: 189:     unsigned char keepMovingX = 1;
  2479  001756  0E01               	movlw	1
  2480  001758  6E15               	movwf	resetPosition@keepMovingX^0,c
  2481                           
  2482                           ;motors.c: 190:     unsigned char keepMovingY = 1;
  2483  00175A  0E01               	movlw	1
  2484  00175C  6E16               	movwf	resetPosition@keepMovingY^0,c
  2485                           
  2486                           ;motors.c: 191:     unsigned char keepMovingZ = 1;
  2487  00175E  0E01               	movlw	1
  2488  001760  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2489  001762                     
  2490                           ;motors.c: 194:     T2CONbits.TMR2ON = 1;
  2491  001762  84CA               	bsf	202,2,c	;volatile
  2492                           
  2493                           ;motors.c: 196:     tm0Error = 0;
  2494  001764  0E00               	movlw	0
  2495  001766  6E56               	movwf	(_tm0Error+1)^0,c
  2496  001768  0E00               	movlw	0
  2497  00176A  6E55               	movwf	_tm0Error^0,c
  2498                           
  2499                           ;motors.c: 197:     tm0Limit = 200;
  2500  00176C  0EC8               	movlw	200
  2501  00176E  6E62               	movwf	_tm0Limit^0,c
  2502  001770                     
  2503                           ;motors.c: 198:     T0CONbits.TMR0ON = 1;
  2504  001770  8ED5               	bsf	213,7,c	;volatile
  2505                           
  2506                           ;motors.c: 200:     while(keepMovingX || keepMovingY || keepMovingZ){
  2507  001772  EF69  F00C         	goto	l4368
  2508  001776                     l4326:
  2509  001776  FFFF               	dw	65535	; assembler added errata NOP
  2510                           
  2511                           ;motors.c: 202:         resetStep();
  2512  001778  EC70  F013         	call	_resetStep	;wreg free
  2513  00177C                     
  2514                           ;motors.c: 205:         if(tm0Error){
  2515  00177C  5055               	movf	_tm0Error^0,w,c
  2516  00177E  1056               	iorwf	(_tm0Error+1)^0,w,c
  2517  001780  B4D8               	btfsc	status,2,c
  2518  001782  EFC5  F00B         	goto	u3761
  2519  001786  EFC8  F00B         	goto	u3760
  2520  00178A                     u3761:
  2521  00178A  FFFF               	dw	65535	; assembler added errata NOP
  2522  00178C  EFCF  F00B         	goto	l131
  2523  001790                     u3760:
  2524  001790  FFFF               	dw	65535	; assembler added errata NOP
  2525  001792                     
  2526                           ;motors.c: 213:             tm0Error = 3;
  2527  001792  0E00               	movlw	0
  2528  001794  6E56               	movwf	(_tm0Error+1)^0,c
  2529  001796  0E03               	movlw	3
  2530  001798  6E55               	movwf	_tm0Error^0,c
  2531                           
  2532                           ;motors.c: 214:             break;
  2533  00179A  EF87  F00C         	goto	l132
  2534  00179E                     l131:
  2535  00179E  FFFF               	dw	65535	; assembler added errata NOP
  2536                           
  2537                           ;motors.c: 221:         if(PORTEbits.RE0 || !keepMovingX){
  2538  0017A0  B084               	btfsc	132,0,c	;volatile
  2539  0017A2  EFD5  F00B         	goto	u3771
  2540  0017A6  EFD8  F00B         	goto	u3770
  2541  0017AA                     u3771:
  2542  0017AA  FFFF               	dw	65535	; assembler added errata NOP
  2543  0017AC  EFE2  F00B         	goto	l4334
  2544  0017B0                     u3770:
  2545  0017B0  FFFF               	dw	65535	; assembler added errata NOP
  2546  0017B2  5015               	movf	resetPosition@keepMovingX^0,w,c
  2547  0017B4  A4D8               	btfss	status,2,c
  2548  0017B6  EFDF  F00B         	goto	u3781
  2549  0017BA  EFE2  F00B         	goto	u3780
  2550  0017BE                     u3781:
  2551  0017BE  FFFF               	dw	65535	; assembler added errata NOP
  2552  0017C0  EFE7  F00B         	goto	l4336
  2553  0017C4                     u3780:
  2554  0017C4                     l4334:
  2555  0017C4  FFFF               	dw	65535	; assembler added errata NOP
  2556                           
  2557                           ;motors.c: 223:             keepMovingX = 0;
  2558  0017C6  0E00               	movlw	0
  2559  0017C8  6E15               	movwf	resetPosition@keepMovingX^0,c
  2560                           
  2561                           ;motors.c: 224:         }else{
  2562  0017CA  EFFE  F00B         	goto	l4342
  2563  0017CE                     l4336:
  2564  0017CE  FFFF               	dw	65535	; assembler added errata NOP
  2565                           
  2566                           ;motors.c: 230:             motCounter[0][0] += motCounter[0][1];
  2567  0017D0  5064               	movf	(_motCounter+1)^0,w,c
  2568  0017D2  2663               	addwf	_motCounter^0,f,c
  2569                           
  2570                           ;motors.c: 231:             if(motCounter[0][0] < 0){
  2571  0017D4  BE63               	btfsc	_motCounter^0,7,c
  2572  0017D6  EFF2  F00B         	goto	u3790
  2573  0017DA  EFEF  F00B         	goto	u3791
  2574  0017DE                     u3791:
  2575  0017DE  FFFF               	dw	65535	; assembler added errata NOP
  2576  0017E0  EFF5  F00B         	goto	l4340
  2577  0017E4                     u3790:
  2578  0017E4  FFFF               	dw	65535	; assembler added errata NOP
  2579  0017E6                     
  2580                           ;motors.c: 232:                 motCounter[0][0] = 3;
  2581  0017E6  0E03               	movlw	3
  2582  0017E8  6E63               	movwf	_motCounter^0,c
  2583  0017EA                     l4340:
  2584  0017EA  FFFF               	dw	65535	; assembler added errata NOP
  2585                           
  2586                           ;motors.c: 235:             LATA = stepMot1[motCounter[0][0]];
  2587  0017EC  0E8C               	movlw	low _stepMot1
  2588  0017EE  2463               	addwf	_motCounter^0,w,c
  2589  0017F0  6ED9               	movwf	fsr2l,c
  2590  0017F2  6ADA               	clrf	fsr2h,c
  2591  0017F4  0E00               	movlw	high _stepMot1
  2592  0017F6  22DA               	addwfc	fsr2h,f,c
  2593  0017F8  50DF               	movf	indf2,w,c
  2594  0017FA  6E89               	movwf	137,c	;volatile
  2595  0017FC                     l4342:
  2596  0017FC  FFFF               	dw	65535	; assembler added errata NOP
  2597                           
  2598                           ;motors.c: 240:         if(PORTEbits.RE1 || !keepMovingY){
  2599  0017FE  B284               	btfsc	132,1,c	;volatile
  2600  001800  EF04  F00C         	goto	u3801
  2601  001804  EF07  F00C         	goto	u3800
  2602  001808                     u3801:
  2603  001808  FFFF               	dw	65535	; assembler added errata NOP
  2604  00180A  EF11  F00C         	goto	l4346
  2605  00180E                     u3800:
  2606  00180E  FFFF               	dw	65535	; assembler added errata NOP
  2607  001810  5016               	movf	resetPosition@keepMovingY^0,w,c
  2608  001812  A4D8               	btfss	status,2,c
  2609  001814  EF0E  F00C         	goto	u3811
  2610  001818  EF11  F00C         	goto	u3810
  2611  00181C                     u3811:
  2612  00181C  FFFF               	dw	65535	; assembler added errata NOP
  2613  00181E  EF16  F00C         	goto	l4348
  2614  001822                     u3810:
  2615  001822                     l4346:
  2616  001822  FFFF               	dw	65535	; assembler added errata NOP
  2617                           
  2618                           ;motors.c: 242:             keepMovingY = 0;
  2619  001824  0E00               	movlw	0
  2620  001826  6E16               	movwf	resetPosition@keepMovingY^0,c
  2621                           
  2622                           ;motors.c: 243:         }else{
  2623  001828  EF2D  F00C         	goto	l4354
  2624  00182C                     l4348:
  2625  00182C  FFFF               	dw	65535	; assembler added errata NOP
  2626                           
  2627                           ;motors.c: 249:             motCounter[1][0] += motCounter[1][1];
  2628  00182E  5066               	movf	(_motCounter+3)^0,w,c
  2629  001830  2665               	addwf	(_motCounter+2)^0,f,c
  2630                           
  2631                           ;motors.c: 250:             if(motCounter[1][0] < 0){
  2632  001832  BE65               	btfsc	(_motCounter+2)^0,7,c
  2633  001834  EF21  F00C         	goto	u3820
  2634  001838  EF1E  F00C         	goto	u3821
  2635  00183C                     u3821:
  2636  00183C  FFFF               	dw	65535	; assembler added errata NOP
  2637  00183E  EF24  F00C         	goto	l4352
  2638  001842                     u3820:
  2639  001842  FFFF               	dw	65535	; assembler added errata NOP
  2640  001844                     
  2641                           ;motors.c: 251:                 motCounter[1][0] = 3;
  2642  001844  0E03               	movlw	3
  2643  001846  6E65               	movwf	(_motCounter+2)^0,c
  2644  001848                     l4352:
  2645  001848  FFFF               	dw	65535	; assembler added errata NOP
  2646                           
  2647                           ;motors.c: 254:             LATB = stepMot2[motCounter[1][0]];
  2648  00184A  0E88               	movlw	low _stepMot2
  2649  00184C  2465               	addwf	(_motCounter+2)^0,w,c
  2650  00184E  6ED9               	movwf	fsr2l,c
  2651  001850  6ADA               	clrf	fsr2h,c
  2652  001852  0E00               	movlw	high _stepMot2
  2653  001854  22DA               	addwfc	fsr2h,f,c
  2654  001856  50DF               	movf	indf2,w,c
  2655  001858  6E8A               	movwf	138,c	;volatile
  2656  00185A                     l4354:
  2657  00185A  FFFF               	dw	65535	; assembler added errata NOP
  2658                           
  2659                           ;motors.c: 259:         if(PORTEbits.RE2 || !keepMovingZ){
  2660  00185C  B484               	btfsc	132,2,c	;volatile
  2661  00185E  EF33  F00C         	goto	u3831
  2662  001862  EF36  F00C         	goto	u3830
  2663  001866                     u3831:
  2664  001866  FFFF               	dw	65535	; assembler added errata NOP
  2665  001868  EF40  F00C         	goto	l4358
  2666  00186C                     u3830:
  2667  00186C  FFFF               	dw	65535	; assembler added errata NOP
  2668  00186E  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2669  001870  A4D8               	btfss	status,2,c
  2670  001872  EF3D  F00C         	goto	u3841
  2671  001876  EF40  F00C         	goto	u3840
  2672  00187A                     u3841:
  2673  00187A  FFFF               	dw	65535	; assembler added errata NOP
  2674  00187C  EF45  F00C         	goto	l4360
  2675  001880                     u3840:
  2676  001880                     l4358:
  2677  001880  FFFF               	dw	65535	; assembler added errata NOP
  2678                           
  2679                           ;motors.c: 261:             keepMovingZ = 0;
  2680  001882  0E00               	movlw	0
  2681  001884  6E17               	movwf	resetPosition@keepMovingZ^0,c
  2682                           
  2683                           ;motors.c: 262:         }else{
  2684  001886  EF5C  F00C         	goto	l4366
  2685  00188A                     l4360:
  2686  00188A  FFFF               	dw	65535	; assembler added errata NOP
  2687                           
  2688                           ;motors.c: 268:             motCounter[2][0] += motCounter[2][1];
  2689  00188C  5068               	movf	(_motCounter+5)^0,w,c
  2690  00188E  2667               	addwf	(_motCounter+4)^0,f,c
  2691                           
  2692                           ;motors.c: 269:             if(motCounter[2][0] < 0){
  2693  001890  BE67               	btfsc	(_motCounter+4)^0,7,c
  2694  001892  EF50  F00C         	goto	u3850
  2695  001896  EF4D  F00C         	goto	u3851
  2696  00189A                     u3851:
  2697  00189A  FFFF               	dw	65535	; assembler added errata NOP
  2698  00189C  EF53  F00C         	goto	l4364
  2699  0018A0                     u3850:
  2700  0018A0  FFFF               	dw	65535	; assembler added errata NOP
  2701  0018A2                     
  2702                           ;motors.c: 270:                 motCounter[2][0] = 3;
  2703  0018A2  0E03               	movlw	3
  2704  0018A4  6E67               	movwf	(_motCounter+4)^0,c
  2705  0018A6                     l4364:
  2706  0018A6  FFFF               	dw	65535	; assembler added errata NOP
  2707                           
  2708                           ;motors.c: 273:             LATC = stepMot3[motCounter[2][0]];
  2709  0018A8  0E84               	movlw	low _stepMot3
  2710  0018AA  2467               	addwf	(_motCounter+4)^0,w,c
  2711  0018AC  6ED9               	movwf	fsr2l,c
  2712  0018AE  6ADA               	clrf	fsr2h,c
  2713  0018B0  0E00               	movlw	high _stepMot3
  2714  0018B2  22DA               	addwfc	fsr2h,f,c
  2715  0018B4  50DF               	movf	indf2,w,c
  2716  0018B6  6E8B               	movwf	139,c	;volatile
  2717  0018B8                     l4366:
  2718  0018B8  FFFF               	dw	65535	; assembler added errata NOP
  2719  0018BA  ECE6  F012         	call	_stepMade	;wreg free
  2720  0018BE  5012               	movf	?_stepMade^0,w,c
  2721  0018C0  1013               	iorwf	(?_stepMade+1)^0,w,c
  2722  0018C2  B4D8               	btfsc	status,2,c
  2723  0018C4  EF66  F00C         	goto	u3861
  2724  0018C8  EF69  F00C         	goto	u3860
  2725  0018CC                     u3861:
  2726  0018CC  FFFF               	dw	65535	; assembler added errata NOP
  2727  0018CE  EF5C  F00C         	goto	l4366
  2728  0018D2                     u3860:
  2729  0018D2                     l4368:
  2730  0018D2  FFFF               	dw	65535	; assembler added errata NOP
  2731                           
  2732                           ;motors.c: 200:     while(keepMovingX || keepMovingY || keepMovingZ){
  2733  0018D4  5015               	movf	resetPosition@keepMovingX^0,w,c
  2734  0018D6  A4D8               	btfss	status,2,c
  2735  0018D8  EF70  F00C         	goto	u3871
  2736  0018DC  EF73  F00C         	goto	u3870
  2737  0018E0                     u3871:
  2738  0018E0  FFFF               	dw	65535	; assembler added errata NOP
  2739  0018E2  EFBB  F00B         	goto	l4326
  2740  0018E6                     u3870:
  2741  0018E6  FFFF               	dw	65535	; assembler added errata NOP
  2742  0018E8  5016               	movf	resetPosition@keepMovingY^0,w,c
  2743  0018EA  A4D8               	btfss	status,2,c
  2744  0018EC  EF7A  F00C         	goto	u3881
  2745  0018F0  EF7D  F00C         	goto	u3880
  2746  0018F4                     u3881:
  2747  0018F4  FFFF               	dw	65535	; assembler added errata NOP
  2748  0018F6  EFBB  F00B         	goto	l4326
  2749  0018FA                     u3880:
  2750  0018FA  FFFF               	dw	65535	; assembler added errata NOP
  2751  0018FC  5017               	movf	resetPosition@keepMovingZ^0,w,c
  2752  0018FE  A4D8               	btfss	status,2,c
  2753  001900  EF84  F00C         	goto	u3891
  2754  001904  EF87  F00C         	goto	u3890
  2755  001908                     u3891:
  2756  001908  FFFF               	dw	65535	; assembler added errata NOP
  2757  00190A  EFBB  F00B         	goto	l4326
  2758  00190E                     u3890:
  2759  00190E                     l132:
  2760  00190E  FFFF               	dw	65535	; assembler added errata NOP
  2761                           
  2762                           ;motors.c: 293:     T0CONbits.TMR0ON = 0;
  2763  001910  9ED5               	bcf	213,7,c	;volatile
  2764                           
  2765                           ;motors.c: 294:     T2CONbits.TMR2ON = 0;
  2766  001912  94CA               	bcf	202,2,c	;volatile
  2767  001914                     
  2768                           ;motors.c: 296:     resetTM0_Temp();
  2769  001914  EC6B  F013         	call	_resetTM0_Temp	;wreg free
  2770                           
  2771                           ;motors.c: 297:     resetTM2_Temp();
  2772  001918  ECF0  F012         	call	_resetTM2_Temp	;wreg free
  2773  00191C                     
  2774                           ;motors.c: 299:     TMR0 = 0;
  2775  00191C  0E00               	movlw	0
  2776  00191E  6ED7               	movwf	215,c	;volatile
  2777  001920  0E00               	movlw	0
  2778  001922  6ED6               	movwf	214,c	;volatile
  2779  001924                     
  2780                           ;motors.c: 300:     TMR2 = 0;
  2781  001924  0E00               	movlw	0
  2782  001926  6ECC               	movwf	204,c	;volatile
  2783                           
  2784                           ;motors.c: 303:     resetStep();
  2785  001928  EC70  F013         	call	_resetStep	;wreg free
  2786  00192C                     
  2787                           ;motors.c: 306:     return(tm0Error);
  2788  00192C  5055               	movf	_tm0Error^0,w,c
  2789  00192E  0012               	return		;funcret
  2790  001930  FFFF               	dw	65535	; errata NOP
  2791  001932                     __end_of_resetPosition:
  2792                           	callstack 0
  2793                           
  2794 ;; *************** function _resetNewSequence *****************
  2795 ;; Defined at:
  2796 ;;		line 76 in file "usart.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;		None
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;		None
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  1    wreg      void 
  2803 ;; Registers used:
  2804 ;;		wreg, status,2
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2810 ;;      Params:         0       0       0       0       0       0       0
  2811 ;;      Locals:         0       0       0       0       0       0       0
  2812 ;;      Temps:          0       0       0       0       0       0       0
  2813 ;;      Totals:         0       0       0       0       0       0       0
  2814 ;;Total ram usage:        0 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    4
  2817 ;; This function calls:
  2818 ;;		Nothing
  2819 ;; This function is called by:
  2820 ;;		_main
  2821 ;; This function uses a non-reentrant model
  2822 ;;
  2823                           
  2824                           	psect	text10
  2825  0026AE                     __ptext10:
  2826                           	callstack 0
  2827  0026AE                     _resetNewSequence:
  2828                           	callstack 0
  2829  0026AE  FFFF               	dw	65535	; assembler added errata NOP
  2830  0026B0                     
  2831                           ;usart.c: 77:     _newSequence = 0;
  2832  0026B0  0E00               	movlw	0
  2833  0026B2  6E5B               	movwf	__newSequence^0,c
  2834  0026B4  0012               	return		;funcret
  2835  0026B6  FFFF               	dw	65535	; errata NOP
  2836  0026B8                     __end_of_resetNewSequence:
  2837                           	callstack 0
  2838                           
  2839 ;; *************** function _reduceSeq *****************
  2840 ;; Defined at:
  2841 ;;		line 53 in file "usart.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;		None
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;		None
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  1    wreg      void 
  2848 ;; Registers used:
  2849 ;;		status,2, status,0
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2855 ;;      Params:         0       0       0       0       0       0       0
  2856 ;;      Locals:         0       0       0       0       0       0       0
  2857 ;;      Temps:          0       0       0       0       0       0       0
  2858 ;;      Totals:         0       0       0       0       0       0       0
  2859 ;;Total ram usage:        0 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    4
  2862 ;; This function calls:
  2863 ;;		Nothing
  2864 ;; This function is called by:
  2865 ;;		_main
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text11
  2870  002708                     __ptext11:
  2871                           	callstack 0
  2872  002708                     _reduceSeq:
  2873                           	callstack 0
  2874  002708  FFFF               	dw	65535	; assembler added errata NOP
  2875  00270A                     
  2876                           ;usart.c: 54:     dataCounter--;
  2877  00270A  065D               	decf	_dataCounter^0,f,c
  2878  00270C  0012               	return		;funcret
  2879  00270E  FFFF               	dw	65535	; errata NOP
  2880  002710                     __end_of_reduceSeq:
  2881                           	callstack 0
  2882                           
  2883 ;; *************** function _readSeq *****************
  2884 ;; Defined at:
  2885 ;;		line 60 in file "usart.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;		None
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;		None
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  1    wreg      unsigned char 
  2892 ;; Registers used:
  2893 ;;		wreg, status,2
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2899 ;;      Params:         0       0       0       0       0       0       0
  2900 ;;      Locals:         0       0       0       0       0       0       0
  2901 ;;      Temps:          0       0       0       0       0       0       0
  2902 ;;      Totals:         0       0       0       0       0       0       0
  2903 ;;Total ram usage:        0 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    4
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_main
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           	psect	text12
  2914  002710                     __ptext12:
  2915                           	callstack 0
  2916  002710                     _readSeq:
  2917                           	callstack 0
  2918  002710  FFFF               	dw	65535	; assembler added errata NOP
  2919  002712                     
  2920                           ;usart.c: 61:     return dataCounter;
  2921  002712  505D               	movf	_dataCounter^0,w,c
  2922  002714  0012               	return		;funcret
  2923  002716  FFFF               	dw	65535	; errata NOP
  2924  002718                     __end_of_readSeq:
  2925                           	callstack 0
  2926                           
  2927 ;; *************** function _newSequence *****************
  2928 ;; Defined at:
  2929 ;;		line 68 in file "usart.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;		None
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;		None
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      unsigned char 
  2936 ;; Registers used:
  2937 ;;		wreg, status,2
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2943 ;;      Params:         0       0       0       0       0       0       0
  2944 ;;      Locals:         0       0       0       0       0       0       0
  2945 ;;      Temps:          0       0       0       0       0       0       0
  2946 ;;      Totals:         0       0       0       0       0       0       0
  2947 ;;Total ram usage:        0 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; Hardware stack levels required when called:    4
  2950 ;; This function calls:
  2951 ;;		Nothing
  2952 ;; This function is called by:
  2953 ;;		_main
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           	psect	text13
  2958  002718                     __ptext13:
  2959                           	callstack 0
  2960  002718                     _newSequence:
  2961                           	callstack 0
  2962  002718  FFFF               	dw	65535	; assembler added errata NOP
  2963  00271A                     
  2964                           ;usart.c: 69:     return _newSequence;
  2965  00271A  505B               	movf	__newSequence^0,w,c
  2966  00271C  0012               	return		;funcret
  2967  00271E  FFFF               	dw	65535	; errata NOP
  2968  002720                     __end_of_newSequence:
  2969                           	callstack 0
  2970                           
  2971 ;; *************** function _interruptInit *****************
  2972 ;; Defined at:
  2973 ;;		line 35 in file "interrupt.c"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;		None
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;		None
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  1    wreg      void 
  2980 ;; Registers used:
  2981 ;;		None
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2987 ;;      Params:         0       0       0       0       0       0       0
  2988 ;;      Locals:         0       0       0       0       0       0       0
  2989 ;;      Temps:          0       0       0       0       0       0       0
  2990 ;;      Totals:         0       0       0       0       0       0       0
  2991 ;;Total ram usage:        0 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:    4
  2994 ;; This function calls:
  2995 ;;		Nothing
  2996 ;; This function is called by:
  2997 ;;		_main
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           	psect	text14
  3002  0024C6                     __ptext14:
  3003                           	callstack 0
  3004  0024C6                     _interruptInit:
  3005                           	callstack 0
  3006  0024C6  FFFF               	dw	65535	; assembler added errata NOP
  3007  0024C8                     
  3008                           ;interrupt.c: 37:     if(!INTCONbits.GIE){
  3009  0024C8  BEF2               	btfsc	242,7,c	;volatile
  3010  0024CA  EF69  F012         	goto	u3901
  3011  0024CE  EF6C  F012         	goto	u3900
  3012  0024D2                     u3901:
  3013  0024D2  FFFF               	dw	65535	; assembler added errata NOP
  3014  0024D4  EF6E  F012         	goto	l458
  3015  0024D8                     u3900:
  3016  0024D8  FFFF               	dw	65535	; assembler added errata NOP
  3017  0024DA                     
  3018                           ;interrupt.c: 38:         INTCONbits.GIE = 1;
  3019  0024DA  8EF2               	bsf	242,7,c	;volatile
  3020  0024DC                     l458:
  3021  0024DC  FFFF               	dw	65535	; assembler added errata NOP
  3022                           
  3023                           ;interrupt.c: 40:     if(!INTCONbits.PEIE){
  3024  0024DE  BCF2               	btfsc	242,6,c	;volatile
  3025  0024E0  EF74  F012         	goto	u3911
  3026  0024E4  EF77  F012         	goto	u3910
  3027  0024E8                     u3911:
  3028  0024E8  FFFF               	dw	65535	; assembler added errata NOP
  3029  0024EA  EF79  F012         	goto	l459
  3030  0024EE                     u3910:
  3031  0024EE  FFFF               	dw	65535	; assembler added errata NOP
  3032  0024F0                     
  3033                           ;interrupt.c: 41:         INTCONbits.PEIE = 1;
  3034  0024F0  8CF2               	bsf	242,6,c	;volatile
  3035  0024F2                     l459:
  3036  0024F2  FFFF               	dw	65535	; assembler added errata NOP
  3037                           
  3038                           ;interrupt.c: 45:     RCONbits.IPEN = 1;
  3039  0024F4  8ED0               	bsf	208,7,c	;volatile
  3040                           
  3041                           ;interrupt.c: 46:     INTCONbits.T0IE = 1;
  3042  0024F6  8AF2               	bsf	242,5,c	;volatile
  3043                           
  3044                           ;interrupt.c: 47:     PIE1bits.TMR1IE = 1;
  3045  0024F8  809D               	bsf	157,0,c	;volatile
  3046                           
  3047                           ;interrupt.c: 48:     PIE1bits.TMR2IE = 1;
  3048  0024FA  829D               	bsf	157,1,c	;volatile
  3049                           
  3050                           ;interrupt.c: 49:     PIE1bits.RC1IE = 1;
  3051  0024FC  8A9D               	bsf	157,5,c	;volatile
  3052  0024FE  0012               	return		;funcret
  3053  002500  FFFF               	dw	65535	; errata NOP
  3054  002502                     __end_of_interruptInit:
  3055                           	callstack 0
  3056                           
  3057 ;; *************** function _initPinMotors *****************
  3058 ;; Defined at:
  3059 ;;		line 46 in file "motors.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;		None
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;		None
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  1    wreg      void 
  3066 ;; Registers used:
  3067 ;;		wreg, status,2, status,0
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3073 ;;      Params:         0       0       0       0       0       0       0
  3074 ;;      Locals:         0       0       0       0       0       0       0
  3075 ;;      Temps:          0       0       0       0       0       0       0
  3076 ;;      Totals:         0       0       0       0       0       0       0
  3077 ;;Total ram usage:        0 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    4
  3080 ;; This function calls:
  3081 ;;		Nothing
  3082 ;; This function is called by:
  3083 ;;		_main
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           	psect	text15
  3088  002562                     __ptext15:
  3089                           	callstack 0
  3090  002562                     _initPinMotors:
  3091                           	callstack 0
  3092  002562  FFFF               	dw	65535	; assembler added errata NOP
  3093  002564                     
  3094                           ;motors.c: 48:     ADCON1bits.PCFG = 0x06;
  3095  002564  50C1               	movf	193,w,c	;volatile
  3096  002566  0BF0               	andlw	-16
  3097  002568  0906               	iorlw	6
  3098  00256A  6EC1               	movwf	193,c	;volatile
  3099  00256C                     
  3100                           ;motors.c: 49:     TRISA &= 0b11010001;
  3101  00256C  0ED1               	movlw	209
  3102  00256E  1692               	andwf	146,f,c	;volatile
  3103  002570                     
  3104                           ;motors.c: 51:     TRISB &= 0b00000010;
  3105  002570  0E02               	movlw	2
  3106  002572  1693               	andwf	147,f,c	;volatile
  3107  002574                     
  3108                           ;motors.c: 52:     TRISC &= 0b11000000;
  3109  002574  0EC0               	movlw	192
  3110  002576  1694               	andwf	148,f,c	;volatile
  3111  002578                     
  3112                           ;motors.c: 53:     TRISD &= 0b11000000;
  3113  002578  0EC0               	movlw	192
  3114  00257A  1695               	andwf	149,f,c	;volatile
  3115  00257C                     
  3116                           ;motors.c: 56:     TRISEbits.TRISE0 = 1;
  3117  00257C  8096               	bsf	150,0,c	;volatile
  3118  00257E                     
  3119                           ;motors.c: 57:     TRISEbits.TRISE1 = 1;
  3120  00257E  8296               	bsf	150,1,c	;volatile
  3121  002580                     
  3122                           ;motors.c: 58:     TRISEbits.TRISE2 = 1;
  3123  002580  8496               	bsf	150,2,c	;volatile
  3124  002582                     
  3125                           ;motors.c: 61:     TRISDbits.TRISD7 = 1;
  3126  002582  8E95               	bsf	149,7,c	;volatile
  3127  002584  0012               	return		;funcret
  3128  002586  FFFF               	dw	65535	; errata NOP
  3129  002588                     __end_of_initPinMotors:
  3130                           	callstack 0
  3131                           
  3132 ;; *************** function _initADC *****************
  3133 ;; Defined at:
  3134 ;;		line 18 in file "adc.c"
  3135 ;; Parameters:    Size  Location     Type
  3136 ;;		None
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;		None
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      void 
  3141 ;; Registers used:
  3142 ;;		wreg, status,2
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3148 ;;      Params:         0       0       0       0       0       0       0
  3149 ;;      Locals:         0       0       0       0       0       0       0
  3150 ;;      Temps:          0       0       0       0       0       0       0
  3151 ;;      Totals:         0       0       0       0       0       0       0
  3152 ;;Total ram usage:        0 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    4
  3155 ;; This function calls:
  3156 ;;		Nothing
  3157 ;; This function is called by:
  3158 ;;		_main
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text16
  3163  002588                     __ptext16:
  3164                           	callstack 0
  3165  002588                     _initADC:
  3166                           	callstack 0
  3167  002588  FFFF               	dw	65535	; assembler added errata NOP
  3168  00258A                     
  3169                           ;adc.c: 19:     ADCON0bits.ADCS = 0x01;
  3170  00258A  50C2               	movf	194,w,c	;volatile
  3171  00258C  0B3F               	andlw	-193
  3172  00258E  0940               	iorlw	64
  3173  002590  6EC2               	movwf	194,c	;volatile
  3174  002592                     
  3175                           ;adc.c: 20:     ADCON1bits.ADCS2 = 0x01;
  3176  002592  8CC1               	bsf	193,6,c	;volatile
  3177                           
  3178                           ;adc.c: 22:     ADCON0bits.CHS = 0x00;
  3179  002594  0EC7               	movlw	-57
  3180  002596  16C2               	andwf	194,f,c	;volatile
  3181  002598                     
  3182                           ;adc.c: 23:     ADCON0bits.GO_DONE = 0x00;
  3183  002598  94C2               	bcf	194,2,c	;volatile
  3184  00259A                     
  3185                           ;adc.c: 24:     ADCON0bits.ADON = 0;
  3186  00259A  90C2               	bcf	194,0,c	;volatile
  3187  00259C                     
  3188                           ;adc.c: 26:     ADCON1bits.ADFM = 0x00;
  3189  00259C  9EC1               	bcf	193,7,c	;volatile
  3190                           
  3191                           ;adc.c: 27:     ADCON1bits.PCFG = 0x0E;
  3192  00259E  50C1               	movf	193,w,c	;volatile
  3193  0025A0  0BF0               	andlw	-16
  3194  0025A2  090E               	iorlw	14
  3195  0025A4  6EC1               	movwf	193,c	;volatile
  3196  0025A6                     
  3197                           ;adc.c: 29:     PIE1bits.ADIE = 1;
  3198  0025A6  8C9D               	bsf	157,6,c	;volatile
  3199  0025A8                     
  3200                           ;adc.c: 30:     IPR1bits.ADIP = 1;
  3201  0025A8  8C9F               	bsf	159,6,c	;volatile
  3202  0025AA  0012               	return		;funcret
  3203  0025AC  FFFF               	dw	65535	; errata NOP
  3204  0025AE                     __end_of_initADC:
  3205                           	callstack 0
  3206                           
  3207 ;; *************** function _getNewSequence *****************
  3208 ;; Defined at:
  3209 ;;		line 46 in file "usart.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;		None
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;		None
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  2   17[COMRAM] PTR struct .
  3216 ;; Registers used:
  3217 ;;		wreg, status,2, status,0
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3223 ;;      Params:         2       0       0       0       0       0       0
  3224 ;;      Locals:         0       0       0       0       0       0       0
  3225 ;;      Temps:          0       0       0       0       0       0       0
  3226 ;;      Totals:         2       0       0       0       0       0       0
  3227 ;;Total ram usage:        2 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; Hardware stack levels required when called:    4
  3230 ;; This function calls:
  3231 ;;		Nothing
  3232 ;; This function is called by:
  3233 ;;		_main
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           	psect	text17
  3238  002638                     __ptext17:
  3239                           	callstack 0
  3240  002638                     _getNewSequence:
  3241                           	callstack 0
  3242  002638  FFFF               	dw	65535	; assembler added errata NOP
  3243  00263A                     
  3244                           ;usart.c: 47:     return(&newSequenceData);
  3245  00263A  0EDE               	movlw	low _newSequenceData
  3246  00263C  6E12               	movwf	?_getNewSequence^0,c
  3247  00263E  0E00               	movlw	high _newSequenceData
  3248  002640  6E13               	movwf	(?_getNewSequence+1)^0,c
  3249  002642  0012               	return		;funcret
  3250  002644  FFFF               	dw	65535	; errata NOP
  3251  002646                     __end_of_getNewSequence:
  3252                           	callstack 0
  3253                           
  3254 ;; *************** function _executeData *****************
  3255 ;; Defined at:
  3256 ;;		line 105 in file "main.c"
  3257 ;; Parameters:    Size  Location     Type
  3258 ;;		None
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;  data            2    9[BANK0 ] PTR struct .
  3261 ;;		 -> dataSequence(20), 
  3262 ;;  errCode         1   11[BANK0 ] unsigned char 
  3263 ;; Return value:  Size  Location     Type
  3264 ;;                  1    wreg      unsigned char 
  3265 ;; Registers used:
  3266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3267 ;; Tracked objects:
  3268 ;;		On entry : 0/0
  3269 ;;		On exit  : 0/0
  3270 ;;		Unchanged: 0/0
  3271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3272 ;;      Params:         0       0       0       0       0       0       0
  3273 ;;      Locals:         0       3       0       0       0       0       0
  3274 ;;      Temps:          0       2       0       0       0       0       0
  3275 ;;      Totals:         0       5       0       0       0       0       0
  3276 ;;Total ram usage:        5 bytes
  3277 ;; Hardware stack levels used:    1
  3278 ;; Hardware stack levels required when called:    6
  3279 ;; This function calls:
  3280 ;;		_getData
  3281 ;;		_liftArm
  3282 ;;		_moveToPoint
  3283 ;;		_pickObject
  3284 ;;		_releaseObj
  3285 ;;		_rotateObj
  3286 ;;		_touchObject
  3287 ;;		_touchTherm
  3288 ;; This function is called by:
  3289 ;;		_main
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           	psect	text18
  3294  000D88                     __ptext18:
  3295                           	callstack 0
  3296  000D88                     _executeData:
  3297                           	callstack 0
  3298  000D88  FFFF               	dw	65535	; assembler added errata NOP
  3299  000D8A                     
  3300                           ;main.c: 106:     t_sequence *data = getData();
  3301  000D8A  EC23  F013         	call	_getData	;wreg free
  3302  000D8E  C012  F0EF         	movff	?_getData,executeData@data
  3303  000D92  C013  F0F0         	movff	?_getData+1,executeData@data+1
  3304  000D96                     
  3305                           ;main.c: 112:     switch(data->feederLine){
  3306  000D96  EF76  F007         	goto	l4526
  3307  000D9A                     l4498:
  3308  000D9A  FFFF               	dw	65535	; assembler added errata NOP
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;main.c: 115:             errCode = moveToPoint(posVector[0], posVector[1], feeder1Pos[0
      +                          ], feeder1Pos[1]);
  3312  000D9C  C04C  F015         	movff	_posVector,moveToPoint@x1
  3313  000DA0  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3314  000DA2  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3315  000DA6  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3316  000DA8  0E0D               	movlw	low _feeder1Pos
  3317  000DAA  6EF6               	movwf	tblptrl,c
  3318  000DAC                     	if	1	;There is more than 1 active tblptr byte
  3319  000DAC  0E06               	movlw	high _feeder1Pos
  3320  000DAE  6EF7               	movwf	tblptrh,c
  3321  000DB0                     	endif
  3322  000DB0                     	if	0	;There are less than 3 active tblptr bytes
  3323  000DB0                     	endif
  3324  000DB0  0008               	tblrd		*
  3325  000DB2  FFFF               	dw	65535	; errata NOP
  3326  000DB4  50F5               	movf	tablat,w,c
  3327  000DB6  6E19               	movwf	moveToPoint@x2^0,c
  3328  000DB8  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3329  000DBA  0E0E               	movlw	low (_feeder1Pos+1)
  3330  000DBC  6EF6               	movwf	tblptrl,c
  3331  000DBE  0E06               	movlw	high (_feeder1Pos+1)
  3332  000DC0  6EF7               	movwf	tblptrh,c
  3333  000DC2                     	if	0	;tblptru may be non-zero
  3334  000DC2                     	endif
  3335  000DC2                     	if	0	;tblptru may be non-zero
  3336  000DC2                     	endif
  3337  000DC2  0008               	tblrd		*
  3338  000DC4  FFFF               	dw	65535	; errata NOP
  3339  000DC6  50F5               	movf	tablat,w,c
  3340  000DC8  6E1B               	movwf	moveToPoint@y2^0,c
  3341  000DCA  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3342  000DCC  EC22  F005         	call	_moveToPoint	;wreg free
  3343  000DD0  0100               	movlb	0	; () banked
  3344  000DD2  6FF1               	movwf	executeData@errCode& (0+255),b
  3345  000DD4                     
  3346                           ; BSR set to: 0
  3347                           ;main.c: 117:             posVector[0] = feeder1Pos[0];
  3348  000DD4  0E0D               	movlw	low _feeder1Pos
  3349  000DD6  6EF6               	movwf	tblptrl,c
  3350  000DD8                     	if	1	;There is more than 1 active tblptr byte
  3351  000DD8  0E06               	movlw	high _feeder1Pos
  3352  000DDA  6EF7               	movwf	tblptrh,c
  3353  000DDC                     	endif
  3354  000DDC                     	if	0	;There are less than 3 active tblptr bytes
  3355  000DDC                     	endif
  3356  000DDC  0008               	tblrd		*
  3357  000DDE  FFFF               	dw	65535	; errata NOP
  3358  000DE0  CFF5 F04C          	movff	tablat,_posVector
  3359  000DE4                     
  3360                           ; BSR set to: 0
  3361                           ;main.c: 118:             posVector[1] = feeder1Pos[1];
  3362  000DE4  0E0E               	movlw	low (_feeder1Pos+1)
  3363  000DE6  6EF6               	movwf	tblptrl,c
  3364  000DE8  0E06               	movlw	high (_feeder1Pos+1)
  3365  000DEA  6EF7               	movwf	tblptrh,c
  3366  000DEC                     	if	0	;tblptru may be non-zero
  3367  000DEC                     	endif
  3368  000DEC                     	if	0	;tblptru may be non-zero
  3369  000DEC                     	endif
  3370  000DEC  0008               	tblrd		*
  3371  000DEE  FFFF               	dw	65535	; errata NOP
  3372  000DF0  CFF5 F04D          	movff	tablat,_posVector+1
  3373                           
  3374                           ;main.c: 119:             break;
  3375  000DF4  EF9A  F007         	goto	l4528
  3376  000DF8                     l4504:
  3377  000DF8  FFFF               	dw	65535	; assembler added errata NOP
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;main.c: 121:             errCode = moveToPoint(posVector[0], posVector[1], feeder2Pos[0
      +                          ], feeder2Pos[1]);
  3381  000DFA  C04C  F015         	movff	_posVector,moveToPoint@x1
  3382  000DFE  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3383  000E00  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3384  000E04  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3385  000E06  0E0B               	movlw	low _feeder2Pos
  3386  000E08  6EF6               	movwf	tblptrl,c
  3387  000E0A                     	if	1	;There is more than 1 active tblptr byte
  3388  000E0A  0E06               	movlw	high _feeder2Pos
  3389  000E0C  6EF7               	movwf	tblptrh,c
  3390  000E0E                     	endif
  3391  000E0E                     	if	0	;There are less than 3 active tblptr bytes
  3392  000E0E                     	endif
  3393  000E0E  0008               	tblrd		*
  3394  000E10  FFFF               	dw	65535	; errata NOP
  3395  000E12  50F5               	movf	tablat,w,c
  3396  000E14  6E19               	movwf	moveToPoint@x2^0,c
  3397  000E16  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3398  000E18  0E0C               	movlw	low (_feeder2Pos+1)
  3399  000E1A  6EF6               	movwf	tblptrl,c
  3400  000E1C  0E06               	movlw	high (_feeder2Pos+1)
  3401  000E1E  6EF7               	movwf	tblptrh,c
  3402  000E20                     	if	0	;tblptru may be non-zero
  3403  000E20                     	endif
  3404  000E20                     	if	0	;tblptru may be non-zero
  3405  000E20                     	endif
  3406  000E20  0008               	tblrd		*
  3407  000E22  FFFF               	dw	65535	; errata NOP
  3408  000E24  50F5               	movf	tablat,w,c
  3409  000E26  6E1B               	movwf	moveToPoint@y2^0,c
  3410  000E28  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3411  000E2A  EC22  F005         	call	_moveToPoint	;wreg free
  3412  000E2E  0100               	movlb	0	; () banked
  3413  000E30  6FF1               	movwf	executeData@errCode& (0+255),b
  3414  000E32                     
  3415                           ; BSR set to: 0
  3416                           ;main.c: 122:             posVector[0] = feeder2Pos[0];
  3417  000E32  0E0B               	movlw	low _feeder2Pos
  3418  000E34  6EF6               	movwf	tblptrl,c
  3419  000E36                     	if	1	;There is more than 1 active tblptr byte
  3420  000E36  0E06               	movlw	high _feeder2Pos
  3421  000E38  6EF7               	movwf	tblptrh,c
  3422  000E3A                     	endif
  3423  000E3A                     	if	0	;There are less than 3 active tblptr bytes
  3424  000E3A                     	endif
  3425  000E3A  0008               	tblrd		*
  3426  000E3C  FFFF               	dw	65535	; errata NOP
  3427  000E3E  CFF5 F04C          	movff	tablat,_posVector
  3428  000E42                     
  3429                           ; BSR set to: 0
  3430                           ;main.c: 123:             posVector[1] = feeder2Pos[1];
  3431  000E42  0E0C               	movlw	low (_feeder2Pos+1)
  3432  000E44  6EF6               	movwf	tblptrl,c
  3433  000E46  0E06               	movlw	high (_feeder2Pos+1)
  3434  000E48  6EF7               	movwf	tblptrh,c
  3435  000E4A                     	if	0	;tblptru may be non-zero
  3436  000E4A                     	endif
  3437  000E4A                     	if	0	;tblptru may be non-zero
  3438  000E4A                     	endif
  3439  000E4A  0008               	tblrd		*
  3440  000E4C  FFFF               	dw	65535	; errata NOP
  3441  000E4E  CFF5 F04D          	movff	tablat,_posVector+1
  3442                           
  3443                           ;main.c: 124:             break;
  3444  000E52  EF9A  F007         	goto	l4528
  3445  000E56                     l4510:
  3446  000E56  FFFF               	dw	65535	; assembler added errata NOP
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;main.c: 126:             errCode = moveToPoint(posVector[0], posVector[1], feeder3Pos[0
      +                          ], feeder3Pos[1]);
  3450  000E58  C04C  F015         	movff	_posVector,moveToPoint@x1
  3451  000E5C  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3452  000E5E  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3453  000E62  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3454  000E64  0E09               	movlw	low _feeder3Pos
  3455  000E66  6EF6               	movwf	tblptrl,c
  3456  000E68                     	if	1	;There is more than 1 active tblptr byte
  3457  000E68  0E06               	movlw	high _feeder3Pos
  3458  000E6A  6EF7               	movwf	tblptrh,c
  3459  000E6C                     	endif
  3460  000E6C                     	if	0	;There are less than 3 active tblptr bytes
  3461  000E6C                     	endif
  3462  000E6C  0008               	tblrd		*
  3463  000E6E  FFFF               	dw	65535	; errata NOP
  3464  000E70  50F5               	movf	tablat,w,c
  3465  000E72  6E19               	movwf	moveToPoint@x2^0,c
  3466  000E74  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3467  000E76  0E0A               	movlw	low (_feeder3Pos+1)
  3468  000E78  6EF6               	movwf	tblptrl,c
  3469  000E7A  0E06               	movlw	high (_feeder3Pos+1)
  3470  000E7C  6EF7               	movwf	tblptrh,c
  3471  000E7E                     	if	0	;tblptru may be non-zero
  3472  000E7E                     	endif
  3473  000E7E                     	if	0	;tblptru may be non-zero
  3474  000E7E                     	endif
  3475  000E7E  0008               	tblrd		*
  3476  000E80  FFFF               	dw	65535	; errata NOP
  3477  000E82  50F5               	movf	tablat,w,c
  3478  000E84  6E1B               	movwf	moveToPoint@y2^0,c
  3479  000E86  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3480  000E88  EC22  F005         	call	_moveToPoint	;wreg free
  3481  000E8C  0100               	movlb	0	; () banked
  3482  000E8E  6FF1               	movwf	executeData@errCode& (0+255),b
  3483  000E90                     
  3484                           ; BSR set to: 0
  3485                           ;main.c: 127:             posVector[0] = feeder3Pos[0];
  3486  000E90  0E09               	movlw	low _feeder3Pos
  3487  000E92  6EF6               	movwf	tblptrl,c
  3488  000E94                     	if	1	;There is more than 1 active tblptr byte
  3489  000E94  0E06               	movlw	high _feeder3Pos
  3490  000E96  6EF7               	movwf	tblptrh,c
  3491  000E98                     	endif
  3492  000E98                     	if	0	;There are less than 3 active tblptr bytes
  3493  000E98                     	endif
  3494  000E98  0008               	tblrd		*
  3495  000E9A  FFFF               	dw	65535	; errata NOP
  3496  000E9C  CFF5 F04C          	movff	tablat,_posVector
  3497  000EA0                     
  3498                           ; BSR set to: 0
  3499                           ;main.c: 128:             posVector[1] = feeder3Pos[1];
  3500  000EA0  0E0A               	movlw	low (_feeder3Pos+1)
  3501  000EA2  6EF6               	movwf	tblptrl,c
  3502  000EA4  0E06               	movlw	high (_feeder3Pos+1)
  3503  000EA6  6EF7               	movwf	tblptrh,c
  3504  000EA8                     	if	0	;tblptru may be non-zero
  3505  000EA8                     	endif
  3506  000EA8                     	if	0	;tblptru may be non-zero
  3507  000EA8                     	endif
  3508  000EA8  0008               	tblrd		*
  3509  000EAA  FFFF               	dw	65535	; errata NOP
  3510  000EAC  CFF5 F04D          	movff	tablat,_posVector+1
  3511                           
  3512                           ;main.c: 129:             break;
  3513  000EB0  EF9A  F007         	goto	l4528
  3514  000EB4                     l4516:
  3515  000EB4  FFFF               	dw	65535	; assembler added errata NOP
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;main.c: 133:             errCode = moveToPoint(posVector[0], posVector[1], newFeeder[0]
      +                          , newFeeder[1]);
  3519  000EB6  C04C  F015         	movff	_posVector,moveToPoint@x1
  3520  000EBA  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3521  000EBC  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3522  000EC0  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3523  000EC2  C051  F019         	movff	_newFeeder,moveToPoint@x2
  3524  000EC6  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3525  000EC8  C052  F01B         	movff	_newFeeder+1,moveToPoint@y2
  3526  000ECC  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3527  000ECE  EC22  F005         	call	_moveToPoint	;wreg free
  3528  000ED2  0100               	movlb	0	; () banked
  3529  000ED4  6FF1               	movwf	executeData@errCode& (0+255),b
  3530  000ED6                     
  3531                           ; BSR set to: 0
  3532                           ;main.c: 134:             posVector[0] = newFeeder[0];
  3533  000ED6  C051  F04C         	movff	_newFeeder,_posVector
  3534  000EDA                     
  3535                           ; BSR set to: 0
  3536                           ;main.c: 135:             posVector[1] = newFeeder[1];
  3537  000EDA  C052  F04D         	movff	_newFeeder+1,_posVector+1
  3538                           
  3539                           ;main.c: 136:             break;
  3540  000EDE  EF9A  F007         	goto	l4528
  3541  000EE2                     l4522:
  3542  000EE2  FFFF               	dw	65535	; assembler added errata NOP
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;main.c: 140:             errCode = 1;
  3546  000EE4  0E01               	movlw	1
  3547  000EE6  6FF1               	movwf	executeData@errCode& (0+255),b
  3548                           
  3549                           ;main.c: 141:             break;
  3550  000EE8  EF9A  F007         	goto	l4528
  3551  000EEC                     l4526:
  3552  000EEC  FFFF               	dw	65535	; assembler added errata NOP
  3553  000EEE  C0EF  FFD9         	movff	executeData@data,fsr2l
  3554  000EF2  C0F0  FFDA         	movff	executeData@data+1,fsr2h
  3555  000EF6  50DF               	movf	indf2,w,c
  3556  000EF8  0100               	movlb	0	; () banked
  3557  000EFA  6FED               	movwf	??_executeData& (0+255),b
  3558  000EFC  6BEE               	clrf	(??_executeData+1)& (0+255),b
  3559                           
  3560                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3561                           ; Switch size 1, requested type "simple"
  3562                           ; Number of cases is 1, Range of values is 0 to 0
  3563                           ; switch strategies available:
  3564                           ; Name         Instructions Cycles
  3565                           ; simple_byte            4     3 (average)
  3566                           ;	Chosen strategy is simple_byte
  3567  000EFE  51EE               	movf	(??_executeData+1)& (0+255),w,b
  3568  000F00  0A00               	xorlw	0	; case 0
  3569  000F02  B4D8               	btfsc	status,2,c
  3570  000F04  EF86  F007         	goto	l4812
  3571  000F08  EF71  F007         	goto	l4522
  3572  000F0C                     l4812:
  3573  000F0C  FFFF               	dw	65535	; assembler added errata NOP
  3574                           
  3575                           ; BSR set to: 0
  3576                           ; Switch size 1, requested type "simple"
  3577                           ; Number of cases is 4, Range of values is 0 to 255
  3578                           ; switch strategies available:
  3579                           ; Name         Instructions Cycles
  3580                           ; simple_byte           13     7 (average)
  3581                           ;	Chosen strategy is simple_byte
  3582  000F0E  51ED               	movf	??_executeData& (0+255),w,b
  3583  000F10  0A00               	xorlw	0	; case 0
  3584  000F12  B4D8               	btfsc	status,2,c
  3585  000F14  EFCD  F006         	goto	l4498
  3586  000F18  0A01               	xorlw	1	; case 1
  3587  000F1A  B4D8               	btfsc	status,2,c
  3588  000F1C  EFFC  F006         	goto	l4504
  3589  000F20  0A03               	xorlw	3	; case 2
  3590  000F22  B4D8               	btfsc	status,2,c
  3591  000F24  EF2B  F007         	goto	l4510
  3592  000F28  0AFD               	xorlw	253	; case 255
  3593  000F2A  B4D8               	btfsc	status,2,c
  3594  000F2C  EF5A  F007         	goto	l4516
  3595  000F30  EF71  F007         	goto	l4522
  3596  000F34                     l4528:
  3597  000F34  FFFF               	dw	65535	; assembler added errata NOP
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;main.c: 145:     if(!errCode){
  3601  000F36  51F1               	movf	executeData@errCode& (0+255),w,b
  3602  000F38  A4D8               	btfss	status,2,c
  3603  000F3A  EFA1  F007         	goto	u3991
  3604  000F3E  EFA4  F007         	goto	u3990
  3605  000F42                     u3991:
  3606  000F42  FFFF               	dw	65535	; assembler added errata NOP
  3607  000F44  EFB2  F007         	goto	l4534
  3608  000F48                     u3990:
  3609  000F48  FFFF               	dw	65535	; assembler added errata NOP
  3610  000F4A                     
  3611                           ; BSR set to: 0
  3612                           ;main.c: 148:         errCode = touchObject();
  3613  000F4A  ECAE  F00F         	call	_touchObject	;wreg free
  3614  000F4E  0100               	movlb	0	; () banked
  3615  000F50  6FF1               	movwf	executeData@errCode& (0+255),b
  3616  000F52                     
  3617                           ; BSR set to: 0
  3618                           ;main.c: 149:         if(errCode != 0){
  3619  000F52  51F1               	movf	executeData@errCode& (0+255),w,b
  3620  000F54  B4D8               	btfsc	status,2,c
  3621  000F56  EFAF  F007         	goto	u4001
  3622  000F5A  EFB2  F007         	goto	u4000
  3623  000F5E                     u4001:
  3624  000F5E  FFFF               	dw	65535	; assembler added errata NOP
  3625  000F60  EFB6  F007         	goto	l4538
  3626  000F64                     u4000:
  3627  000F64                     l4534:
  3628  000F64  FFFF               	dw	65535	; assembler added errata NOP
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;main.c: 150:             return(errCode);
  3632  000F66  51F1               	movf	executeData@errCode& (0+255),w,b
  3633  000F68  EF3C  F008         	goto	l357
  3634  000F6C                     l4538:
  3635  000F6C  FFFF               	dw	65535	; assembler added errata NOP
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;main.c: 153:         pickObject();
  3639  000F6E  EC99  F012         	call	_pickObject	;wreg free
  3640  000F72                     
  3641                           ;main.c: 156:         errCode = liftArm();
  3642  000F72  EC20  F011         	call	_liftArm	;wreg free
  3643  000F76  0100               	movlb	0	; () banked
  3644  000F78  6FF1               	movwf	executeData@errCode& (0+255),b
  3645  000F7A                     
  3646                           ; BSR set to: 0
  3647                           ;main.c: 157:         if(errCode != 0){
  3648  000F7A  51F1               	movf	executeData@errCode& (0+255),w,b
  3649  000F7C  B4D8               	btfsc	status,2,c
  3650  000F7E  EFC3  F007         	goto	u4011
  3651  000F82  EFC6  F007         	goto	u4010
  3652  000F86                     u4011:
  3653  000F86  FFFF               	dw	65535	; assembler added errata NOP
  3654  000F88  EFC9  F007         	goto	l4548
  3655  000F8C                     u4010:
  3656  000F8C  FFFF               	dw	65535	; assembler added errata NOP
  3657  000F8E  EFB2  F007         	goto	l4534
  3658  000F92                     l4548:
  3659  000F92  FFFF               	dw	65535	; assembler added errata NOP
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;main.c: 162:         errCode = moveToPoint(posVector[0], posVector[1], data->posX, data
      +                          ->posY);
  3663  000F94  C04C  F015         	movff	_posVector,moveToPoint@x1
  3664  000F98  6A16               	clrf	(moveToPoint@x1+1)^0,c
  3665  000F9A  C04D  F017         	movff	_posVector+1,moveToPoint@y1
  3666  000F9E  6A18               	clrf	(moveToPoint@y1+1)^0,c
  3667  000FA0  EE20 F001          	lfsr	2,1
  3668  000FA4  51EF               	movf	executeData@data& (0+255),w,b
  3669  000FA6  26D9               	addwf	fsr2l,f,c
  3670  000FA8  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3671  000FAA  22DA               	addwfc	fsr2h,f,c
  3672  000FAC  50DF               	movf	indf2,w,c
  3673  000FAE  6FED               	movwf	??_executeData& (0+255),b
  3674  000FB0  51ED               	movf	??_executeData& (0+255),w,b
  3675  000FB2  6E19               	movwf	moveToPoint@x2^0,c
  3676  000FB4  6A1A               	clrf	(moveToPoint@x2+1)^0,c
  3677  000FB6  EE20 F002          	lfsr	2,2
  3678  000FBA  51EF               	movf	executeData@data& (0+255),w,b
  3679  000FBC  26D9               	addwf	fsr2l,f,c
  3680  000FBE  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3681  000FC0  22DA               	addwfc	fsr2h,f,c
  3682  000FC2  50DF               	movf	indf2,w,c
  3683  000FC4  6FEE               	movwf	(??_executeData+1)& (0+255),b
  3684  000FC6  51EE               	movf	(??_executeData+1)& (0+255),w,b
  3685  000FC8  6E1B               	movwf	moveToPoint@y2^0,c
  3686  000FCA  6A1C               	clrf	(moveToPoint@y2+1)^0,c
  3687  000FCC  EC22  F005         	call	_moveToPoint	;wreg free
  3688  000FD0  0100               	movlb	0	; () banked
  3689  000FD2  6FF1               	movwf	executeData@errCode& (0+255),b
  3690  000FD4                     
  3691                           ; BSR set to: 0
  3692                           ;main.c: 163:         if(errCode != 0){
  3693  000FD4  51F1               	movf	executeData@errCode& (0+255),w,b
  3694  000FD6  B4D8               	btfsc	status,2,c
  3695  000FD8  EFF0  F007         	goto	u4021
  3696  000FDC  EFF3  F007         	goto	u4020
  3697  000FE0                     u4021:
  3698  000FE0  FFFF               	dw	65535	; assembler added errata NOP
  3699  000FE2  EFF6  F007         	goto	l4556
  3700  000FE6                     u4020:
  3701  000FE6  FFFF               	dw	65535	; assembler added errata NOP
  3702  000FE8  EFB2  F007         	goto	l4534
  3703  000FEC                     l4556:
  3704  000FEC  FFFF               	dw	65535	; assembler added errata NOP
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;main.c: 166:         posVector[0] = data->posX;
  3708  000FEE  EE20 F001          	lfsr	2,1
  3709  000FF2  51EF               	movf	executeData@data& (0+255),w,b
  3710  000FF4  26D9               	addwf	fsr2l,f,c
  3711  000FF6  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3712  000FF8  22DA               	addwfc	fsr2h,f,c
  3713  000FFA  50DF               	movf	indf2,w,c
  3714  000FFC  6E4C               	movwf	_posVector^0,c
  3715                           
  3716                           ;main.c: 167:         posVector[1] = data->posY;
  3717  000FFE  EE20 F002          	lfsr	2,2
  3718  001002  51EF               	movf	executeData@data& (0+255),w,b
  3719  001004  26D9               	addwf	fsr2l,f,c
  3720  001006  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3721  001008  22DA               	addwfc	fsr2h,f,c
  3722  00100A  50DF               	movf	indf2,w,c
  3723  00100C  6E4D               	movwf	(_posVector+1)^0,c
  3724                           
  3725                           ;main.c: 170:         rotAngle = data->rotation;
  3726  00100E  EE20 F003          	lfsr	2,3
  3727  001012  51EF               	movf	executeData@data& (0+255),w,b
  3728  001014  26D9               	addwf	fsr2l,f,c
  3729  001016  51F0               	movf	(executeData@data+1)& (0+255),w,b
  3730  001018  22DA               	addwfc	fsr2h,f,c
  3731  00101A  50DF               	movf	indf2,w,c
  3732  00101C  6FED               	movwf	??_executeData& (0+255),b
  3733  00101E  51ED               	movf	??_executeData& (0+255),w,b
  3734  001020  6E53               	movwf	_rotAngle^0,c
  3735  001022  6A54               	clrf	(_rotAngle+1)^0,c
  3736  001024                     
  3737                           ; BSR set to: 0
  3738                           ;main.c: 172:         if(rotAngle < 0){
  3739  001024  BE54               	btfsc	(_rotAngle+1)^0,7,c
  3740  001026  EF1A  F008         	goto	u4030
  3741  00102A  EF17  F008         	goto	u4031
  3742  00102E                     u4031:
  3743  00102E  FFFF               	dw	65535	; assembler added errata NOP
  3744  001030  EF1F  F008         	goto	l4562
  3745  001034                     u4030:
  3746  001034  FFFF               	dw	65535	; assembler added errata NOP
  3747  001036                     
  3748                           ; BSR set to: 0
  3749                           ;main.c: 173:             rotAngle += 360;
  3750  001036  0E68               	movlw	104
  3751  001038  2653               	addwf	_rotAngle^0,f,c
  3752  00103A  0E01               	movlw	1
  3753  00103C  2254               	addwfc	(_rotAngle+1)^0,f,c
  3754  00103E                     l4562:
  3755  00103E  FFFF               	dw	65535	; assembler added errata NOP
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;main.c: 175:         rotateObj(rotAngle);
  3759  001040  5053               	movf	_rotAngle^0,w,c
  3760  001042  ECB3  F010         	call	_rotateObj
  3761  001046                     
  3762                           ;main.c: 178:         errCode = touchTherm();
  3763  001046  EC25  F00F         	call	_touchTherm	;wreg free
  3764  00104A  0100               	movlb	0	; () banked
  3765  00104C  6FF1               	movwf	executeData@errCode& (0+255),b
  3766  00104E                     
  3767                           ; BSR set to: 0
  3768                           ;main.c: 179:         if(errCode != 0){
  3769  00104E  51F1               	movf	executeData@errCode& (0+255),w,b
  3770  001050  B4D8               	btfsc	status,2,c
  3771  001052  EF2D  F008         	goto	u4041
  3772  001056  EF30  F008         	goto	u4040
  3773  00105A                     u4041:
  3774  00105A  FFFF               	dw	65535	; assembler added errata NOP
  3775  00105C  EF33  F008         	goto	l4572
  3776  001060                     u4040:
  3777  001060  FFFF               	dw	65535	; assembler added errata NOP
  3778  001062  EFB2  F007         	goto	l4534
  3779  001066                     l4572:
  3780  001066  FFFF               	dw	65535	; assembler added errata NOP
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;main.c: 183:         releaseObj();
  3784  001068  EC81  F012         	call	_releaseObj	;wreg free
  3785  00106C                     
  3786                           ;main.c: 186:         errCode = liftArm();
  3787  00106C  EC20  F011         	call	_liftArm	;wreg free
  3788  001070  0100               	movlb	0	; () banked
  3789  001072  6FF1               	movwf	executeData@errCode& (0+255),b
  3790  001074  EFB2  F007         	goto	l4534
  3791  001078                     l357:
  3792  001078  FFFF               	dw	65535	; assembler added errata NOP
  3793                           
  3794                           ; BSR set to: 0
  3795  00107A  0012               	return		;funcret
  3796  00107C  FFFF               	dw	65535	; errata NOP
  3797  00107E                     __end_of_executeData:
  3798                           	callstack 0
  3799                           
  3800 ;; *************** function _touchTherm *****************
  3801 ;; Defined at:
  3802 ;;		line 595 in file "motors.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;		None
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;		None
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  1    wreg      unsigned char 
  3809 ;; Registers used:
  3810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3816 ;;      Params:         0       0       0       0       0       0       0
  3817 ;;      Locals:         0       0       0       0       0       0       0
  3818 ;;      Temps:          0       0       0       0       0       0       0
  3819 ;;      Totals:         0       0       0       0       0       0       0
  3820 ;;Total ram usage:        0 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; Hardware stack levels required when called:    5
  3823 ;; This function calls:
  3824 ;;		_resetStep
  3825 ;;		_resetTM0_Temp
  3826 ;;		_resetTM2_Temp
  3827 ;;		_resetTherm
  3828 ;;		_resetTouch
  3829 ;;		_returnTherm
  3830 ;;		_startADC
  3831 ;;		_stepMade
  3832 ;;		_stopADC
  3833 ;; This function is called by:
  3834 ;;		_executeData
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           	psect	text19
  3839  001E4A                     __ptext19:
  3840                           	callstack 0
  3841  001E4A                     _touchTherm:
  3842                           	callstack 0
  3843  001E4A  FFFF               	dw	65535	; assembler added errata NOP
  3844  001E4C                     
  3845                           ;motors.c: 601:     motCounter[2][1] = 1;
  3846  001E4C  0E01               	movlw	1
  3847  001E4E  6E68               	movwf	(_motCounter+5)^0,c
  3848  001E50                     
  3849                           ;motors.c: 604:     T2CONbits.TMR2ON = 1;
  3850  001E50  84CA               	bsf	202,2,c	;volatile
  3851                           
  3852                           ;motors.c: 606:     tm0Error = 0;
  3853  001E52  0E00               	movlw	0
  3854  001E54  6E56               	movwf	(_tm0Error+1)^0,c
  3855  001E56  0E00               	movlw	0
  3856  001E58  6E55               	movwf	_tm0Error^0,c
  3857                           
  3858                           ;motors.c: 607:     tm0Limit = 200;
  3859  001E5A  0EC8               	movlw	200
  3860  001E5C  6E62               	movwf	_tm0Limit^0,c
  3861  001E5E                     
  3862                           ;motors.c: 608:     T0CONbits.TMR0ON = 1;
  3863  001E5E  8ED5               	bsf	213,7,c	;volatile
  3864  001E60                     
  3865                           ;motors.c: 611:     startADC();
  3866  001E60  EC5C  F013         	call	_startADC	;wreg free
  3867                           
  3868                           ;motors.c: 614:     resetTouch();
  3869  001E64  EC61  F013         	call	_resetTouch	;wreg free
  3870                           
  3871                           ;motors.c: 615:     resetTherm();
  3872  001E68  EC66  F013         	call	_resetTherm	;wreg free
  3873                           
  3874                           ;motors.c: 618:     while(!returnTherm() || PORTDbits.RD7){
  3875  001E6C  EF76  F00F         	goto	l4176
  3876  001E70                     l4160:
  3877  001E70  FFFF               	dw	65535	; assembler added errata NOP
  3878                           
  3879                           ;motors.c: 620:         resetStep();
  3880  001E72  EC70  F013         	call	_resetStep	;wreg free
  3881  001E76                     
  3882                           ;motors.c: 623:         if(tm0Error){
  3883  001E76  5055               	movf	_tm0Error^0,w,c
  3884  001E78  1056               	iorwf	(_tm0Error+1)^0,w,c
  3885  001E7A  B4D8               	btfsc	status,2,c
  3886  001E7C  EF42  F00F         	goto	u3621
  3887  001E80  EF45  F00F         	goto	u3620
  3888  001E84                     u3621:
  3889  001E84  FFFF               	dw	65535	; assembler added errata NOP
  3890  001E86  EF4C  F00F         	goto	l4166
  3891  001E8A                     u3620:
  3892  001E8A  FFFF               	dw	65535	; assembler added errata NOP
  3893  001E8C                     
  3894                           ;motors.c: 628:             tm0Error = 6;
  3895  001E8C  0E00               	movlw	0
  3896  001E8E  6E56               	movwf	(_tm0Error+1)^0,c
  3897  001E90  0E06               	movlw	6
  3898  001E92  6E55               	movwf	_tm0Error^0,c
  3899                           
  3900                           ;motors.c: 629:             break;
  3901  001E94  EF8C  F00F         	goto	l4180
  3902  001E98                     l4166:
  3903  001E98  FFFF               	dw	65535	; assembler added errata NOP
  3904                           
  3905                           ;motors.c: 637:             motCounter[2][0] += motCounter[2][1];
  3906  001E9A  5068               	movf	(_motCounter+5)^0,w,c
  3907  001E9C  2667               	addwf	(_motCounter+4)^0,f,c
  3908                           
  3909                           ;motors.c: 638:             if(motCounter[2][0] > 3){
  3910  001E9E  5067               	movf	(_motCounter+4)^0,w,c
  3911  001EA0  0A80               	xorlw	128
  3912  001EA2  0F7C               	addlw	-132
  3913  001EA4  A0D8               	btfss	status,0,c
  3914  001EA6  EF57  F00F         	goto	u3631
  3915  001EAA  EF5A  F00F         	goto	u3630
  3916  001EAE                     u3631:
  3917  001EAE  FFFF               	dw	65535	; assembler added errata NOP
  3918  001EB0  EF5D  F00F         	goto	l4170
  3919  001EB4                     u3630:
  3920  001EB4  FFFF               	dw	65535	; assembler added errata NOP
  3921  001EB6                     
  3922                           ;motors.c: 639:                 motCounter[2][0] = 0;
  3923  001EB6  0E00               	movlw	0
  3924  001EB8  6E67               	movwf	(_motCounter+4)^0,c
  3925  001EBA                     l4170:
  3926  001EBA  FFFF               	dw	65535	; assembler added errata NOP
  3927                           
  3928                           ;motors.c: 642:             LATC = stepMot3[motCounter[2][0]];
  3929  001EBC  0E84               	movlw	low _stepMot3
  3930  001EBE  2467               	addwf	(_motCounter+4)^0,w,c
  3931  001EC0  6ED9               	movwf	fsr2l,c
  3932  001EC2  6ADA               	clrf	fsr2h,c
  3933  001EC4  0E00               	movlw	high _stepMot3
  3934  001EC6  22DA               	addwfc	fsr2h,f,c
  3935  001EC8  50DF               	movf	indf2,w,c
  3936  001ECA  6E8B               	movwf	139,c	;volatile
  3937  001ECC                     l4172:
  3938  001ECC  FFFF               	dw	65535	; assembler added errata NOP
  3939  001ECE  ECE6  F012         	call	_stepMade	;wreg free
  3940  001ED2  5012               	movf	?_stepMade^0,w,c
  3941  001ED4  1013               	iorwf	(?_stepMade+1)^0,w,c
  3942  001ED6  B4D8               	btfsc	status,2,c
  3943  001ED8  EF70  F00F         	goto	u3641
  3944  001EDC  EF73  F00F         	goto	u3640
  3945  001EE0                     u3641:
  3946  001EE0  FFFF               	dw	65535	; assembler added errata NOP
  3947  001EE2  EF66  F00F         	goto	l4172
  3948  001EE6                     u3640:
  3949  001EE6  FFFF               	dw	65535	; assembler added errata NOP
  3950  001EE8                     
  3951                           ;motors.c: 657:         startADC();
  3952  001EE8  EC5C  F013         	call	_startADC	;wreg free
  3953  001EEC                     l4176:
  3954  001EEC  FFFF               	dw	65535	; assembler added errata NOP
  3955                           
  3956                           ;motors.c: 618:     while(!returnTherm() || PORTDbits.RD7){
  3957  001EEE  EC3F  F013         	call	_returnTherm	;wreg free
  3958  001EF2  5012               	movf	?_returnTherm^0,w,c
  3959  001EF4  1013               	iorwf	(?_returnTherm+1)^0,w,c
  3960  001EF6  B4D8               	btfsc	status,2,c
  3961  001EF8  EF80  F00F         	goto	u3651
  3962  001EFC  EF83  F00F         	goto	u3650
  3963  001F00                     u3651:
  3964  001F00  FFFF               	dw	65535	; assembler added errata NOP
  3965  001F02  EF38  F00F         	goto	l4160
  3966  001F06                     u3650:
  3967  001F06  FFFF               	dw	65535	; assembler added errata NOP
  3968  001F08  BE83               	btfsc	131,7,c	;volatile
  3969  001F0A  EF89  F00F         	goto	u3661
  3970  001F0E  EF8C  F00F         	goto	u3660
  3971  001F12                     u3661:
  3972  001F12  FFFF               	dw	65535	; assembler added errata NOP
  3973  001F14  EF38  F00F         	goto	l4160
  3974  001F18                     u3660:
  3975  001F18                     l4180:
  3976  001F18  FFFF               	dw	65535	; assembler added errata NOP
  3977                           
  3978                           ;motors.c: 663:     stopADC();
  3979  001F1A  EC90  F013         	call	_stopADC	;wreg free
  3980  001F1E                     
  3981                           ;motors.c: 666:     T0CONbits.TMR0ON = 0;
  3982  001F1E  9ED5               	bcf	213,7,c	;volatile
  3983  001F20                     
  3984                           ;motors.c: 667:     T2CONbits.TMR2ON = 0;
  3985  001F20  94CA               	bcf	202,2,c	;volatile
  3986  001F22                     
  3987                           ;motors.c: 669:     resetTM0_Temp();
  3988  001F22  EC6B  F013         	call	_resetTM0_Temp	;wreg free
  3989  001F26                     
  3990                           ;motors.c: 670:     resetTM2_Temp();
  3991  001F26  ECF0  F012         	call	_resetTM2_Temp	;wreg free
  3992  001F2A                     
  3993                           ;motors.c: 672:     TMR0 = 0;
  3994  001F2A  0E00               	movlw	0
  3995  001F2C  6ED7               	movwf	215,c	;volatile
  3996  001F2E  0E00               	movlw	0
  3997  001F30  6ED6               	movwf	214,c	;volatile
  3998  001F32                     
  3999                           ;motors.c: 673:     TMR2 = 0;
  4000  001F32  0E00               	movlw	0
  4001  001F34  6ECC               	movwf	204,c	;volatile
  4002  001F36                     
  4003                           ;motors.c: 676:     resetStep();
  4004  001F36  EC70  F013         	call	_resetStep	;wreg free
  4005  001F3A                     
  4006                           ;motors.c: 679:     if(PORTDbits.RD7){
  4007  001F3A  AE83               	btfss	131,7,c	;volatile
  4008  001F3C  EFA2  F00F         	goto	u3671
  4009  001F40  EFA5  F00F         	goto	u3670
  4010  001F44                     u3671:
  4011  001F44  FFFF               	dw	65535	; assembler added errata NOP
  4012  001F46  EFAA  F00F         	goto	l210
  4013  001F4A                     u3670:
  4014  001F4A  FFFF               	dw	65535	; assembler added errata NOP
  4015  001F4C                     
  4016                           ;motors.c: 680:         tm0Error = 2;
  4017  001F4C  0E00               	movlw	0
  4018  001F4E  6E56               	movwf	(_tm0Error+1)^0,c
  4019  001F50  0E02               	movlw	2
  4020  001F52  6E55               	movwf	_tm0Error^0,c
  4021  001F54                     l210:
  4022  001F54  FFFF               	dw	65535	; assembler added errata NOP
  4023                           
  4024                           ;motors.c: 683:     return(tm0Error);
  4025  001F56  5055               	movf	_tm0Error^0,w,c
  4026  001F58  0012               	return		;funcret
  4027  001F5A  FFFF               	dw	65535	; errata NOP
  4028  001F5C                     __end_of_touchTherm:
  4029                           	callstack 0
  4030                           
  4031 ;; *************** function _returnTherm *****************
  4032 ;; Defined at:
  4033 ;;		line 58 in file "adc.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;		None
  4036 ;; Auto vars:     Size  Location     Type
  4037 ;;		None
  4038 ;; Return value:  Size  Location     Type
  4039 ;;                  2   17[COMRAM] unsigned int 
  4040 ;; Registers used:
  4041 ;;		None
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 0/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4047 ;;      Params:         2       0       0       0       0       0       0
  4048 ;;      Locals:         0       0       0       0       0       0       0
  4049 ;;      Temps:          0       0       0       0       0       0       0
  4050 ;;      Totals:         2       0       0       0       0       0       0
  4051 ;;Total ram usage:        2 bytes
  4052 ;; Hardware stack levels used:    1
  4053 ;; Hardware stack levels required when called:    4
  4054 ;; This function calls:
  4055 ;;		Nothing
  4056 ;; This function is called by:
  4057 ;;		_touchTherm
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	text20
  4062  00267E                     __ptext20:
  4063                           	callstack 0
  4064  00267E                     _returnTherm:
  4065                           	callstack 0
  4066  00267E  FFFF               	dw	65535	; assembler added errata NOP
  4067  002680                     
  4068                           ;adc.c: 59:     return therm_rel;
  4069  002680  C060  F012         	movff	_therm_rel,?_returnTherm	;volatile
  4070  002684  6A13               	clrf	(?_returnTherm+1)^0,c
  4071  002686  0012               	return		;funcret
  4072  002688  FFFF               	dw	65535	; errata NOP
  4073  00268A                     __end_of_returnTherm:
  4074                           	callstack 0
  4075                           
  4076 ;; *************** function _touchObject *****************
  4077 ;; Defined at:
  4078 ;;		line 497 in file "motors.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;		None
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;		None
  4083 ;; Return value:  Size  Location     Type
  4084 ;;                  1    wreg      unsigned char 
  4085 ;; Registers used:
  4086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4092 ;;      Params:         0       0       0       0       0       0       0
  4093 ;;      Locals:         0       0       0       0       0       0       0
  4094 ;;      Temps:          0       0       0       0       0       0       0
  4095 ;;      Totals:         0       0       0       0       0       0       0
  4096 ;;Total ram usage:        0 bytes
  4097 ;; Hardware stack levels used:    1
  4098 ;; Hardware stack levels required when called:    5
  4099 ;; This function calls:
  4100 ;;		_resetStep
  4101 ;;		_resetTM0_Temp
  4102 ;;		_resetTM2_Temp
  4103 ;;		_resetTherm
  4104 ;;		_resetTouch
  4105 ;;		_returnTouch
  4106 ;;		_startADC
  4107 ;;		_stepMade
  4108 ;;		_stopADC
  4109 ;; This function is called by:
  4110 ;;		_executeData
  4111 ;; This function uses a non-reentrant model
  4112 ;;
  4113                           
  4114                           	psect	text21
  4115  001F5C                     __ptext21:
  4116                           	callstack 0
  4117  001F5C                     _touchObject:
  4118                           	callstack 0
  4119  001F5C  FFFF               	dw	65535	; assembler added errata NOP
  4120  001F5E                     
  4121                           ;motors.c: 503:     motCounter[2][1] = 1;
  4122  001F5E  0E01               	movlw	1
  4123  001F60  6E68               	movwf	(_motCounter+5)^0,c
  4124  001F62                     
  4125                           ;motors.c: 506:     T2CONbits.TMR2ON = 1;
  4126  001F62  84CA               	bsf	202,2,c	;volatile
  4127                           
  4128                           ;motors.c: 508:     tm0Error = 0;
  4129  001F64  0E00               	movlw	0
  4130  001F66  6E56               	movwf	(_tm0Error+1)^0,c
  4131  001F68  0E00               	movlw	0
  4132  001F6A  6E55               	movwf	_tm0Error^0,c
  4133                           
  4134                           ;motors.c: 509:     tm0Limit = 200;
  4135  001F6C  0EC8               	movlw	200
  4136  001F6E  6E62               	movwf	_tm0Limit^0,c
  4137  001F70                     
  4138                           ;motors.c: 510:     T0CONbits.TMR0ON = 1;
  4139  001F70  8ED5               	bsf	213,7,c	;volatile
  4140  001F72                     
  4141                           ;motors.c: 513:     startADC();
  4142  001F72  EC5C  F013         	call	_startADC	;wreg free
  4143                           
  4144                           ;motors.c: 516:     resetTouch();
  4145  001F76  EC61  F013         	call	_resetTouch	;wreg free
  4146                           
  4147                           ;motors.c: 517:     resetTherm();
  4148  001F7A  EC66  F013         	call	_resetTherm	;wreg free
  4149                           
  4150                           ;motors.c: 520:     while(!returnTouch() || PORTDbits.RD7){
  4151  001F7E  EFFF  F00F         	goto	l4126
  4152  001F82                     l4110:
  4153  001F82  FFFF               	dw	65535	; assembler added errata NOP
  4154                           
  4155                           ;motors.c: 522:         resetStep();
  4156  001F84  EC70  F013         	call	_resetStep	;wreg free
  4157  001F88                     
  4158                           ;motors.c: 525:         if(tm0Error){
  4159  001F88  5055               	movf	_tm0Error^0,w,c
  4160  001F8A  1056               	iorwf	(_tm0Error+1)^0,w,c
  4161  001F8C  B4D8               	btfsc	status,2,c
  4162  001F8E  EFCB  F00F         	goto	u3561
  4163  001F92  EFCE  F00F         	goto	u3560
  4164  001F96                     u3561:
  4165  001F96  FFFF               	dw	65535	; assembler added errata NOP
  4166  001F98  EFD5  F00F         	goto	l4116
  4167  001F9C                     u3560:
  4168  001F9C  FFFF               	dw	65535	; assembler added errata NOP
  4169  001F9E                     
  4170                           ;motors.c: 530:             tm0Error = 6;
  4171  001F9E  0E00               	movlw	0
  4172  001FA0  6E56               	movwf	(_tm0Error+1)^0,c
  4173  001FA2  0E06               	movlw	6
  4174  001FA4  6E55               	movwf	_tm0Error^0,c
  4175                           
  4176                           ;motors.c: 531:             break;
  4177  001FA6  EF15  F010         	goto	l4130
  4178  001FAA                     l4116:
  4179  001FAA  FFFF               	dw	65535	; assembler added errata NOP
  4180                           
  4181                           ;motors.c: 539:             motCounter[2][0] += motCounter[2][1];
  4182  001FAC  5068               	movf	(_motCounter+5)^0,w,c
  4183  001FAE  2667               	addwf	(_motCounter+4)^0,f,c
  4184                           
  4185                           ;motors.c: 540:             if(motCounter[2][0] > 3){
  4186  001FB0  5067               	movf	(_motCounter+4)^0,w,c
  4187  001FB2  0A80               	xorlw	128
  4188  001FB4  0F7C               	addlw	-132
  4189  001FB6  A0D8               	btfss	status,0,c
  4190  001FB8  EFE0  F00F         	goto	u3571
  4191  001FBC  EFE3  F00F         	goto	u3570
  4192  001FC0                     u3571:
  4193  001FC0  FFFF               	dw	65535	; assembler added errata NOP
  4194  001FC2  EFE6  F00F         	goto	l4120
  4195  001FC6                     u3570:
  4196  001FC6  FFFF               	dw	65535	; assembler added errata NOP
  4197  001FC8                     
  4198                           ;motors.c: 541:                 motCounter[2][0] = 0;
  4199  001FC8  0E00               	movlw	0
  4200  001FCA  6E67               	movwf	(_motCounter+4)^0,c
  4201  001FCC                     l4120:
  4202  001FCC  FFFF               	dw	65535	; assembler added errata NOP
  4203                           
  4204                           ;motors.c: 544:             LATC = stepMot3[motCounter[2][0]];
  4205  001FCE  0E84               	movlw	low _stepMot3
  4206  001FD0  2467               	addwf	(_motCounter+4)^0,w,c
  4207  001FD2  6ED9               	movwf	fsr2l,c
  4208  001FD4  6ADA               	clrf	fsr2h,c
  4209  001FD6  0E00               	movlw	high _stepMot3
  4210  001FD8  22DA               	addwfc	fsr2h,f,c
  4211  001FDA  50DF               	movf	indf2,w,c
  4212  001FDC  6E8B               	movwf	139,c	;volatile
  4213  001FDE                     l4122:
  4214  001FDE  FFFF               	dw	65535	; assembler added errata NOP
  4215  001FE0  ECE6  F012         	call	_stepMade	;wreg free
  4216  001FE4  5012               	movf	?_stepMade^0,w,c
  4217  001FE6  1013               	iorwf	(?_stepMade+1)^0,w,c
  4218  001FE8  B4D8               	btfsc	status,2,c
  4219  001FEA  EFF9  F00F         	goto	u3581
  4220  001FEE  EFFC  F00F         	goto	u3580
  4221  001FF2                     u3581:
  4222  001FF2  FFFF               	dw	65535	; assembler added errata NOP
  4223  001FF4  EFEF  F00F         	goto	l4122
  4224  001FF8                     u3580:
  4225  001FF8  FFFF               	dw	65535	; assembler added errata NOP
  4226  001FFA                     
  4227                           ;motors.c: 558:         startADC();
  4228  001FFA  EC5C  F013         	call	_startADC	;wreg free
  4229  001FFE                     l4126:
  4230  001FFE  FFFF               	dw	65535	; assembler added errata NOP
  4231                           
  4232                           ;motors.c: 520:     while(!returnTouch() || PORTDbits.RD7){
  4233  002000  EC45  F013         	call	_returnTouch	;wreg free
  4234  002004  5012               	movf	?_returnTouch^0,w,c
  4235  002006  1013               	iorwf	(?_returnTouch+1)^0,w,c
  4236  002008  B4D8               	btfsc	status,2,c
  4237  00200A  EF09  F010         	goto	u3591
  4238  00200E  EF0C  F010         	goto	u3590
  4239  002012                     u3591:
  4240  002012  FFFF               	dw	65535	; assembler added errata NOP
  4241  002014  EFC1  F00F         	goto	l4110
  4242  002018                     u3590:
  4243  002018  FFFF               	dw	65535	; assembler added errata NOP
  4244  00201A  BE83               	btfsc	131,7,c	;volatile
  4245  00201C  EF12  F010         	goto	u3601
  4246  002020  EF15  F010         	goto	u3600
  4247  002024                     u3601:
  4248  002024  FFFF               	dw	65535	; assembler added errata NOP
  4249  002026  EFC1  F00F         	goto	l4110
  4250  00202A                     u3600:
  4251  00202A                     l4130:
  4252  00202A  FFFF               	dw	65535	; assembler added errata NOP
  4253                           
  4254                           ;motors.c: 563:     stopADC();
  4255  00202C  EC90  F013         	call	_stopADC	;wreg free
  4256  002030                     
  4257                           ;motors.c: 566:     T0CONbits.TMR0ON = 0;
  4258  002030  9ED5               	bcf	213,7,c	;volatile
  4259  002032                     
  4260                           ;motors.c: 567:     T2CONbits.TMR2ON = 0;
  4261  002032  94CA               	bcf	202,2,c	;volatile
  4262  002034                     
  4263                           ;motors.c: 569:     resetTM0_Temp();
  4264  002034  EC6B  F013         	call	_resetTM0_Temp	;wreg free
  4265  002038                     
  4266                           ;motors.c: 570:     resetTM2_Temp();
  4267  002038  ECF0  F012         	call	_resetTM2_Temp	;wreg free
  4268  00203C                     
  4269                           ;motors.c: 572:     TMR0 = 0;
  4270  00203C  0E00               	movlw	0
  4271  00203E  6ED7               	movwf	215,c	;volatile
  4272  002040  0E00               	movlw	0
  4273  002042  6ED6               	movwf	214,c	;volatile
  4274  002044                     
  4275                           ;motors.c: 573:     TMR2 = 0;
  4276  002044  0E00               	movlw	0
  4277  002046  6ECC               	movwf	204,c	;volatile
  4278  002048                     
  4279                           ;motors.c: 576:     resetStep();
  4280  002048  EC70  F013         	call	_resetStep	;wreg free
  4281  00204C                     
  4282                           ;motors.c: 579:     if(PORTDbits.RD7){
  4283  00204C  AE83               	btfss	131,7,c	;volatile
  4284  00204E  EF2B  F010         	goto	u3611
  4285  002052  EF2E  F010         	goto	u3610
  4286  002056                     u3611:
  4287  002056  FFFF               	dw	65535	; assembler added errata NOP
  4288  002058  EF33  F010         	goto	l198
  4289  00205C                     u3610:
  4290  00205C  FFFF               	dw	65535	; assembler added errata NOP
  4291  00205E                     
  4292                           ;motors.c: 580:         tm0Error = 2;
  4293  00205E  0E00               	movlw	0
  4294  002060  6E56               	movwf	(_tm0Error+1)^0,c
  4295  002062  0E02               	movlw	2
  4296  002064  6E55               	movwf	_tm0Error^0,c
  4297  002066                     l198:
  4298  002066  FFFF               	dw	65535	; assembler added errata NOP
  4299                           
  4300                           ;motors.c: 583:     return(tm0Error);
  4301  002068  5055               	movf	_tm0Error^0,w,c
  4302  00206A  0012               	return		;funcret
  4303  00206C  FFFF               	dw	65535	; errata NOP
  4304  00206E                     __end_of_touchObject:
  4305                           	callstack 0
  4306                           
  4307 ;; *************** function _stopADC *****************
  4308 ;; Defined at:
  4309 ;;		line 44 in file "adc.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;		None
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;		None
  4314 ;; Return value:  Size  Location     Type
  4315 ;;                  1    wreg      void 
  4316 ;; Registers used:
  4317 ;;		None
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4323 ;;      Params:         0       0       0       0       0       0       0
  4324 ;;      Locals:         0       0       0       0       0       0       0
  4325 ;;      Temps:          0       0       0       0       0       0       0
  4326 ;;      Totals:         0       0       0       0       0       0       0
  4327 ;;Total ram usage:        0 bytes
  4328 ;; Hardware stack levels used:    1
  4329 ;; Hardware stack levels required when called:    4
  4330 ;; This function calls:
  4331 ;;		Nothing
  4332 ;; This function is called by:
  4333 ;;		_touchObject
  4334 ;;		_touchTherm
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           	psect	text22
  4339  002720                     __ptext22:
  4340                           	callstack 0
  4341  002720                     _stopADC:
  4342                           	callstack 0
  4343  002720  FFFF               	dw	65535	; assembler added errata NOP
  4344  002722                     
  4345                           ;adc.c: 45:     ADCON0bits.ADON = 0;
  4346  002722  90C2               	bcf	194,0,c	;volatile
  4347  002724  0012               	return		;funcret
  4348  002726  FFFF               	dw	65535	; errata NOP
  4349  002728                     __end_of_stopADC:
  4350                           	callstack 0
  4351                           
  4352 ;; *************** function _startADC *****************
  4353 ;; Defined at:
  4354 ;;		line 36 in file "adc.c"
  4355 ;; Parameters:    Size  Location     Type
  4356 ;;		None
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;		None
  4359 ;; Return value:  Size  Location     Type
  4360 ;;                  1    wreg      void 
  4361 ;; Registers used:
  4362 ;;		None
  4363 ;; Tracked objects:
  4364 ;;		On entry : 0/0
  4365 ;;		On exit  : 0/0
  4366 ;;		Unchanged: 0/0
  4367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4368 ;;      Params:         0       0       0       0       0       0       0
  4369 ;;      Locals:         0       0       0       0       0       0       0
  4370 ;;      Temps:          0       0       0       0       0       0       0
  4371 ;;      Totals:         0       0       0       0       0       0       0
  4372 ;;Total ram usage:        0 bytes
  4373 ;; Hardware stack levels used:    1
  4374 ;; Hardware stack levels required when called:    4
  4375 ;; This function calls:
  4376 ;;		Nothing
  4377 ;; This function is called by:
  4378 ;;		_touchObject
  4379 ;;		_touchTherm
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           	psect	text23
  4384  0026B8                     __ptext23:
  4385                           	callstack 0
  4386  0026B8                     _startADC:
  4387                           	callstack 0
  4388  0026B8  FFFF               	dw	65535	; assembler added errata NOP
  4389  0026BA                     
  4390                           ;adc.c: 37:     ADCON0bits.ADON = 1;
  4391  0026BA  80C2               	bsf	194,0,c	;volatile
  4392                           
  4393                           ;adc.c: 38:     ADCON0bits.GODONE = 1;
  4394  0026BC  84C2               	bsf	194,2,c	;volatile
  4395  0026BE  0012               	return		;funcret
  4396  0026C0  FFFF               	dw	65535	; errata NOP
  4397  0026C2                     __end_of_startADC:
  4398                           	callstack 0
  4399                           
  4400 ;; *************** function _returnTouch *****************
  4401 ;; Defined at:
  4402 ;;		line 51 in file "adc.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;		None
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;		None
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  2   17[COMRAM] unsigned int 
  4409 ;; Registers used:
  4410 ;;		None
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4416 ;;      Params:         2       0       0       0       0       0       0
  4417 ;;      Locals:         0       0       0       0       0       0       0
  4418 ;;      Temps:          0       0       0       0       0       0       0
  4419 ;;      Totals:         2       0       0       0       0       0       0
  4420 ;;Total ram usage:        2 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; Hardware stack levels required when called:    4
  4423 ;; This function calls:
  4424 ;;		Nothing
  4425 ;; This function is called by:
  4426 ;;		_touchObject
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429                           
  4430                           	psect	text24
  4431  00268A                     __ptext24:
  4432                           	callstack 0
  4433  00268A                     _returnTouch:
  4434                           	callstack 0
  4435  00268A  FFFF               	dw	65535	; assembler added errata NOP
  4436  00268C                     
  4437                           ;adc.c: 52:     return touch_rel;
  4438  00268C  C061  F012         	movff	_touch_rel,?_returnTouch	;volatile
  4439  002690  6A13               	clrf	(?_returnTouch+1)^0,c
  4440  002692  0012               	return		;funcret
  4441  002694  FFFF               	dw	65535	; errata NOP
  4442  002696                     __end_of_returnTouch:
  4443                           	callstack 0
  4444                           
  4445 ;; *************** function _resetTouch *****************
  4446 ;; Defined at:
  4447 ;;		line 65 in file "adc.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;		None
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;		None
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  1    wreg      void 
  4454 ;; Registers used:
  4455 ;;		wreg, status,2
  4456 ;; Tracked objects:
  4457 ;;		On entry : 0/0
  4458 ;;		On exit  : 0/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4461 ;;      Params:         0       0       0       0       0       0       0
  4462 ;;      Locals:         0       0       0       0       0       0       0
  4463 ;;      Temps:          0       0       0       0       0       0       0
  4464 ;;      Totals:         0       0       0       0       0       0       0
  4465 ;;Total ram usage:        0 bytes
  4466 ;; Hardware stack levels used:    1
  4467 ;; Hardware stack levels required when called:    4
  4468 ;; This function calls:
  4469 ;;		Nothing
  4470 ;; This function is called by:
  4471 ;;		_touchObject
  4472 ;;		_touchTherm
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           	psect	text25
  4477  0026C2                     __ptext25:
  4478                           	callstack 0
  4479  0026C2                     _resetTouch:
  4480                           	callstack 0
  4481  0026C2  FFFF               	dw	65535	; assembler added errata NOP
  4482  0026C4                     
  4483                           ;adc.c: 66:     touch_rel = 0;
  4484  0026C4  0E00               	movlw	0
  4485  0026C6  6E61               	movwf	_touch_rel^0,c	;volatile
  4486  0026C8  0012               	return		;funcret
  4487  0026CA  FFFF               	dw	65535	; errata NOP
  4488  0026CC                     __end_of_resetTouch:
  4489                           	callstack 0
  4490                           
  4491 ;; *************** function _resetTherm *****************
  4492 ;; Defined at:
  4493 ;;		line 72 in file "adc.c"
  4494 ;; Parameters:    Size  Location     Type
  4495 ;;		None
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;		None
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  1    wreg      void 
  4500 ;; Registers used:
  4501 ;;		wreg, status,2
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4507 ;;      Params:         0       0       0       0       0       0       0
  4508 ;;      Locals:         0       0       0       0       0       0       0
  4509 ;;      Temps:          0       0       0       0       0       0       0
  4510 ;;      Totals:         0       0       0       0       0       0       0
  4511 ;;Total ram usage:        0 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:    4
  4514 ;; This function calls:
  4515 ;;		Nothing
  4516 ;; This function is called by:
  4517 ;;		_touchObject
  4518 ;;		_touchTherm
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           	psect	text26
  4523  0026CC                     __ptext26:
  4524                           	callstack 0
  4525  0026CC                     _resetTherm:
  4526                           	callstack 0
  4527  0026CC  FFFF               	dw	65535	; assembler added errata NOP
  4528  0026CE                     
  4529                           ;adc.c: 73:     therm_rel = 0;
  4530  0026CE  0E00               	movlw	0
  4531  0026D0  6E60               	movwf	_therm_rel^0,c	;volatile
  4532  0026D2  0012               	return		;funcret
  4533  0026D4  FFFF               	dw	65535	; errata NOP
  4534  0026D6                     __end_of_resetTherm:
  4535                           	callstack 0
  4536                           
  4537 ;; *************** function _rotateObj *****************
  4538 ;; Defined at:
  4539 ;;		line 768 in file "motors.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;  rotAngle        1    wreg     unsigned char 
  4542 ;; Auto vars:     Size  Location     Type
  4543 ;;  rotAngle        1    2[BANK0 ] unsigned char 
  4544 ;;  i               2    5[BANK0 ] unsigned int 
  4545 ;;  totStep         2    3[BANK0 ] int 
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  1    wreg      void 
  4548 ;; Registers used:
  4549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4555 ;;      Params:         0       0       0       0       0       0       0
  4556 ;;      Locals:         0       5       0       0       0       0       0
  4557 ;;      Temps:          0       2       0       0       0       0       0
  4558 ;;      Totals:         0       7       0       0       0       0       0
  4559 ;;Total ram usage:        7 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    5
  4562 ;; This function calls:
  4563 ;;		___fldiv
  4564 ;;		___fltol
  4565 ;;		___xxtofl
  4566 ;;		_resetStep
  4567 ;;		_resetTM2_Temp
  4568 ;;		_stepMade
  4569 ;; This function is called by:
  4570 ;;		_executeData
  4571 ;; This function uses a non-reentrant model
  4572 ;;
  4573                           
  4574                           	psect	text27
  4575  002166                     __ptext27:
  4576                           	callstack 0
  4577  002166                     _rotateObj:
  4578                           	callstack 0
  4579  002166  FFFF               	dw	65535	; assembler added errata NOP
  4580                           
  4581                           ;incstack = 0
  4582                           ;rotateObj@rotAngle stored from wreg
  4583  002168  0100               	movlb	0	; () banked
  4584  00216A  6FE8               	movwf	rotateObj@rotAngle& (0+255),b
  4585  00216C                     
  4586                           ;motors.c: 770:     static const float stepAngle = 10;;motors.c: 771:     static char ro
      +                          tSequence[] = {0b100100, 0b001100, 0b011000, 0b110000};;motors.c: 772:     unsigned int 
      +                          i;;motors.c: 773:     int totStep = rotAngle/stepAngle;
  4587  00216C  0E00               	movlw	0
  4588  00216E  6E24               	movwf	___fldiv@a^0,c
  4589  002170  0E00               	movlw	0
  4590  002172  6E25               	movwf	(___fldiv@a+1)^0,c
  4591  002174  0E20               	movlw	32
  4592  002176  6E26               	movwf	(___fldiv@a+2)^0,c
  4593  002178  0E41               	movlw	65
  4594  00217A  6E27               	movwf	(___fldiv@a+3)^0,c
  4595  00217C  0100               	movlb	0	; () banked
  4596  00217E  51E8               	movf	rotateObj@rotAngle& (0+255),w,b
  4597  002180  6E12               	movwf	___xxtofl@val^0,c
  4598  002182  6A13               	clrf	(___xxtofl@val+1)^0,c
  4599  002184  6A14               	clrf	(___xxtofl@val+2)^0,c
  4600  002186  6A15               	clrf	(___xxtofl@val+3)^0,c
  4601  002188  0E01               	movlw	1
  4602  00218A  ECAB  F00A         	call	___xxtofl
  4603  00218E  C012  F020         	movff	?___xxtofl,___fldiv@b
  4604  002192  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4605  002196  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4606  00219A  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4607  00219E  EC09  F003         	call	___fldiv	;wreg free
  4608  0021A2  C020  F039         	movff	?___fldiv,___fltol@f1
  4609  0021A6  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4610  0021AA  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4611  0021AE  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4612  0021B2  EC6E  F00D         	call	___fltol	;wreg free
  4613  0021B6  C039  F0E9         	movff	?___fltol,rotateObj@totStep
  4614  0021BA  C03A  F0EA         	movff	?___fltol+1,rotateObj@totStep+1
  4615  0021BE                     
  4616                           ;motors.c: 776:     for(i = 0; i < totStep; i++){
  4617  0021BE  0E00               	movlw	0
  4618  0021C0  0100               	movlb	0	; () banked
  4619  0021C2  6FEC               	movwf	(rotateObj@i+1)& (0+255),b
  4620  0021C4  0E00               	movlw	0
  4621  0021C6  6FEB               	movwf	rotateObj@i& (0+255),b
  4622  0021C8  EF0C  F011         	goto	l4248
  4623  0021CC                     l4236:
  4624  0021CC  FFFF               	dw	65535	; assembler added errata NOP
  4625                           
  4626                           ; BSR set to: 0
  4627                           ;motors.c: 778:         LATD &= 0xC3;
  4628  0021CE  0EC3               	movlw	195
  4629  0021D0  168C               	andwf	140,f,c	;volatile
  4630  0021D2                     
  4631                           ; BSR set to: 0
  4632                           ;motors.c: 780:         LATD |= rotSequence[i%4];
  4633  0021D2  0E03               	movlw	3
  4634  0021D4  15EB               	andwf	rotateObj@i& (0+255),w,b
  4635  0021D6  6FE6               	movwf	??_rotateObj& (0+255),b
  4636  0021D8  0E00               	movlw	0
  4637  0021DA  15EC               	andwf	(rotateObj@i+1)& (0+255),w,b
  4638  0021DC  6FE7               	movwf	(??_rotateObj+1)& (0+255),b
  4639  0021DE  0E80               	movlw	low rotateObj@rotSequence
  4640  0021E0  25E6               	addwf	??_rotateObj& (0+255),w,b
  4641  0021E2  6ED9               	movwf	fsr2l,c
  4642  0021E4  0E00               	movlw	high rotateObj@rotSequence
  4643  0021E6  21E7               	addwfc	(??_rotateObj+1)& (0+255),w,b
  4644  0021E8  6EDA               	movwf	fsr2h,c
  4645  0021EA  50DF               	movf	indf2,w,c
  4646  0021EC  128C               	iorwf	140,f,c	;volatile
  4647  0021EE                     
  4648                           ; BSR set to: 0
  4649                           ;motors.c: 783:         T2CONbits.TMR2ON = 1;
  4650  0021EE  84CA               	bsf	202,2,c	;volatile
  4651  0021F0                     l4242:
  4652  0021F0  FFFF               	dw	65535	; assembler added errata NOP
  4653  0021F2  ECE6  F012         	call	_stepMade	;wreg free
  4654  0021F6  5012               	movf	?_stepMade^0,w,c
  4655  0021F8  1013               	iorwf	(?_stepMade+1)^0,w,c
  4656  0021FA  B4D8               	btfsc	status,2,c
  4657  0021FC  EF02  F011         	goto	u3721
  4658  002200  EF05  F011         	goto	u3720
  4659  002204                     u3721:
  4660  002204  FFFF               	dw	65535	; assembler added errata NOP
  4661  002206  EFF8  F010         	goto	l4242
  4662  00220A                     u3720:
  4663  00220A  FFFF               	dw	65535	; assembler added errata NOP
  4664  00220C                     
  4665                           ;motors.c: 785:         T2CONbits.TMR2ON = 0;
  4666  00220C  94CA               	bcf	202,2,c	;volatile
  4667  00220E                     
  4668                           ;motors.c: 786:         TMR2 = 0;
  4669  00220E  0E00               	movlw	0
  4670  002210  6ECC               	movwf	204,c	;volatile
  4671  002212                     
  4672                           ;motors.c: 787:     }
  4673  002212  0100               	movlb	0	; () banked
  4674  002214  4BEB               	infsnz	rotateObj@i& (0+255),f,b
  4675  002216  2BEC               	incf	(rotateObj@i+1)& (0+255),f,b
  4676  002218                     l4248:
  4677  002218  FFFF               	dw	65535	; assembler added errata NOP
  4678                           
  4679                           ; BSR set to: 0
  4680  00221A  51E9               	movf	rotateObj@totStep& (0+255),w,b
  4681  00221C  5DEB               	subwf	rotateObj@i& (0+255),w,b
  4682  00221E  51EA               	movf	(rotateObj@totStep+1)& (0+255),w,b
  4683  002220  59EC               	subwfb	(rotateObj@i+1)& (0+255),w,b
  4684  002222  A0D8               	btfss	status,0,c
  4685  002224  EF16  F011         	goto	u3731
  4686  002228  EF19  F011         	goto	u3730
  4687  00222C                     u3731:
  4688  00222C  FFFF               	dw	65535	; assembler added errata NOP
  4689  00222E  EFE6  F010         	goto	l4236
  4690  002232                     u3730:
  4691  002232  FFFF               	dw	65535	; assembler added errata NOP
  4692  002234                     
  4693                           ; BSR set to: 0
  4694                           ;motors.c: 790:     resetTM2_Temp();
  4695  002234  ECF0  F012         	call	_resetTM2_Temp	;wreg free
  4696                           
  4697                           ;motors.c: 793:     resetStep();
  4698  002238  EC70  F013         	call	_resetStep	;wreg free
  4699  00223C  0012               	return		;funcret
  4700  00223E  FFFF               	dw	65535	; errata NOP
  4701  002240                     __end_of_rotateObj:
  4702                           	callstack 0
  4703                           
  4704 ;; *************** function ___xxtofl *****************
  4705 ;; Defined at:
  4706 ;;		line 10 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\xxtofl.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  sign            1    wreg     unsigned char 
  4709 ;;  val             4   17[COMRAM] long 
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  sign            1   25[COMRAM] unsigned char 
  4712 ;;  arg             4   27[COMRAM] unsigned long 
  4713 ;;  exp             1   26[COMRAM] unsigned char 
  4714 ;; Return value:  Size  Location     Type
  4715 ;;                  4   17[COMRAM] unsigned char 
  4716 ;; Registers used:
  4717 ;;		wreg, status,2, status,0
  4718 ;; Tracked objects:
  4719 ;;		On entry : 0/0
  4720 ;;		On exit  : 0/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4723 ;;      Params:         4       0       0       0       0       0       0
  4724 ;;      Locals:         6       0       0       0       0       0       0
  4725 ;;      Temps:          4       0       0       0       0       0       0
  4726 ;;      Totals:        14       0       0       0       0       0       0
  4727 ;;Total ram usage:       14 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:    4
  4730 ;; This function calls:
  4731 ;;		Nothing
  4732 ;; This function is called by:
  4733 ;;		_rotateObj
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           	psect	text28
  4738  001556                     __ptext28:
  4739                           	callstack 0
  4740  001556                     ___xxtofl:
  4741                           	callstack 0
  4742  001556  FFFF               	dw	65535	; assembler added errata NOP
  4743                           
  4744                           ;incstack = 0
  4745                           ;___xxtofl@sign stored from wreg
  4746  001558  6E1A               	movwf	___xxtofl@sign^0,c
  4747  00155A  501A               	movf	___xxtofl@sign^0,w,c
  4748  00155C  B4D8               	btfsc	status,2,c
  4749  00155E  EFB3  F00A         	goto	u3241
  4750  001562  EFB6  F00A         	goto	u3240
  4751  001566                     u3241:
  4752  001566  FFFF               	dw	65535	; assembler added errata NOP
  4753  001568  EFDB  F00A         	goto	l1300
  4754  00156C                     u3240:
  4755  00156C  FFFF               	dw	65535	; assembler added errata NOP
  4756  00156E  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4757  001570  EFBF  F00A         	goto	u3250
  4758  001574  EFBC  F00A         	goto	u3251
  4759  001578                     u3251:
  4760  001578  FFFF               	dw	65535	; assembler added errata NOP
  4761  00157A  EFDB  F00A         	goto	l1300
  4762  00157E                     u3250:
  4763  00157E  FFFF               	dw	65535	; assembler added errata NOP
  4764  001580  C012  F016         	movff	___xxtofl@val,??___xxtofl
  4765  001584  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  4766  001588  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  4767  00158C  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  4768  001590  1E16               	comf	??___xxtofl^0,f,c
  4769  001592  1E17               	comf	(??___xxtofl+1)^0,f,c
  4770  001594  1E18               	comf	(??___xxtofl+2)^0,f,c
  4771  001596  1E19               	comf	(??___xxtofl+3)^0,f,c
  4772  001598  2A16               	incf	??___xxtofl^0,f,c
  4773  00159A  0E00               	movlw	0
  4774  00159C  2217               	addwfc	(??___xxtofl+1)^0,f,c
  4775  00159E  2218               	addwfc	(??___xxtofl+2)^0,f,c
  4776  0015A0  2219               	addwfc	(??___xxtofl+3)^0,f,c
  4777  0015A2  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  4778  0015A6  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  4779  0015AA  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  4780  0015AE  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  4781  0015B2  EFE4  F00A         	goto	l3970
  4782  0015B6                     l1300:
  4783  0015B6  FFFF               	dw	65535	; assembler added errata NOP
  4784  0015B8  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  4785  0015BC  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4786  0015C0  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4787  0015C4  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4788  0015C8                     l3970:
  4789  0015C8  FFFF               	dw	65535	; assembler added errata NOP
  4790  0015CA  5012               	movf	___xxtofl@val^0,w,c
  4791  0015CC  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  4792  0015CE  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  4793  0015D0  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  4794  0015D2  A4D8               	btfss	status,2,c
  4795  0015D4  EFEE  F00A         	goto	u3261
  4796  0015D8  EFF1  F00A         	goto	u3260
  4797  0015DC                     u3261:
  4798  0015DC  FFFF               	dw	65535	; assembler added errata NOP
  4799  0015DE  EFFC  F00A         	goto	l3976
  4800  0015E2                     u3260:
  4801  0015E2  FFFF               	dw	65535	; assembler added errata NOP
  4802  0015E4  0E00               	movlw	0
  4803  0015E6  6E12               	movwf	?___xxtofl^0,c
  4804  0015E8  0E00               	movlw	0
  4805  0015EA  6E13               	movwf	(?___xxtofl+1)^0,c
  4806  0015EC  0E00               	movlw	0
  4807  0015EE  6E14               	movwf	(?___xxtofl+2)^0,c
  4808  0015F0  0E00               	movlw	0
  4809  0015F2  6E15               	movwf	(?___xxtofl+3)^0,c
  4810  0015F4  EFA4  F00B         	goto	l1303
  4811  0015F8                     l3976:
  4812  0015F8  FFFF               	dw	65535	; assembler added errata NOP
  4813  0015FA  0E96               	movlw	150
  4814  0015FC  6E1B               	movwf	___xxtofl@exp^0,c
  4815  0015FE  EF08  F00B         	goto	l3980
  4816  001602                     l3978:
  4817  001602  FFFF               	dw	65535	; assembler added errata NOP
  4818  001604  2A1B               	incf	___xxtofl@exp^0,f,c
  4819  001606  90D8               	bcf	status,0,c
  4820  001608  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4821  00160A  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4822  00160C  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4823  00160E  321C               	rrcf	___xxtofl@arg^0,f,c
  4824  001610                     l3980:
  4825  001610  FFFF               	dw	65535	; assembler added errata NOP
  4826  001612  0E00               	movlw	0
  4827  001614  141C               	andwf	___xxtofl@arg^0,w,c
  4828  001616  6E16               	movwf	??___xxtofl^0,c
  4829  001618  0E00               	movlw	0
  4830  00161A  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4831  00161C  6E17               	movwf	(??___xxtofl+1)^0,c
  4832  00161E  0E00               	movlw	0
  4833  001620  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4834  001622  6E18               	movwf	(??___xxtofl+2)^0,c
  4835  001624  0EFE               	movlw	254
  4836  001626  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4837  001628  6E19               	movwf	(??___xxtofl+3)^0,c
  4838  00162A  5016               	movf	??___xxtofl^0,w,c
  4839  00162C  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4840  00162E  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4841  001630  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4842  001632  A4D8               	btfss	status,2,c
  4843  001634  EF1E  F00B         	goto	u3271
  4844  001638  EF21  F00B         	goto	u3270
  4845  00163C                     u3271:
  4846  00163C  FFFF               	dw	65535	; assembler added errata NOP
  4847  00163E  EF01  F00B         	goto	l3978
  4848  001642                     u3270:
  4849  001642  FFFF               	dw	65535	; assembler added errata NOP
  4850  001644  EF31  F00B         	goto	l1307
  4851  001648                     l3982:
  4852  001648  FFFF               	dw	65535	; assembler added errata NOP
  4853  00164A  2A1B               	incf	___xxtofl@exp^0,f,c
  4854  00164C  0E01               	movlw	1
  4855  00164E  261C               	addwf	___xxtofl@arg^0,f,c
  4856  001650  0E00               	movlw	0
  4857  001652  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  4858  001654  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  4859  001656  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  4860  001658  90D8               	bcf	status,0,c
  4861  00165A  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  4862  00165C  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  4863  00165E  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  4864  001660  321C               	rrcf	___xxtofl@arg^0,f,c
  4865  001662                     l1307:
  4866  001662  FFFF               	dw	65535	; assembler added errata NOP
  4867  001664  0E00               	movlw	0
  4868  001666  141C               	andwf	___xxtofl@arg^0,w,c
  4869  001668  6E16               	movwf	??___xxtofl^0,c
  4870  00166A  0E00               	movlw	0
  4871  00166C  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  4872  00166E  6E17               	movwf	(??___xxtofl+1)^0,c
  4873  001670  0E00               	movlw	0
  4874  001672  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  4875  001674  6E18               	movwf	(??___xxtofl+2)^0,c
  4876  001676  0EFF               	movlw	255
  4877  001678  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  4878  00167A  6E19               	movwf	(??___xxtofl+3)^0,c
  4879  00167C  5016               	movf	??___xxtofl^0,w,c
  4880  00167E  1017               	iorwf	(??___xxtofl+1)^0,w,c
  4881  001680  1018               	iorwf	(??___xxtofl+2)^0,w,c
  4882  001682  1019               	iorwf	(??___xxtofl+3)^0,w,c
  4883  001684  A4D8               	btfss	status,2,c
  4884  001686  EF47  F00B         	goto	u3281
  4885  00168A  EF4A  F00B         	goto	u3280
  4886  00168E                     u3281:
  4887  00168E  FFFF               	dw	65535	; assembler added errata NOP
  4888  001690  EF24  F00B         	goto	l3982
  4889  001694                     u3280:
  4890  001694  FFFF               	dw	65535	; assembler added errata NOP
  4891  001696  EF54  F00B         	goto	l3990
  4892  00169A                     l3988:
  4893  00169A  FFFF               	dw	65535	; assembler added errata NOP
  4894  00169C  061B               	decf	___xxtofl@exp^0,f,c
  4895  00169E  90D8               	bcf	status,0,c
  4896  0016A0  361C               	rlcf	___xxtofl@arg^0,f,c
  4897  0016A2  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  4898  0016A4  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  4899  0016A6  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  4900  0016A8                     l3990:
  4901  0016A8  FFFF               	dw	65535	; assembler added errata NOP
  4902  0016AA  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  4903  0016AC  EF5A  F00B         	goto	u3291
  4904  0016B0  EF5D  F00B         	goto	u3290
  4905  0016B4                     u3291:
  4906  0016B4  FFFF               	dw	65535	; assembler added errata NOP
  4907  0016B6  EF67  F00B         	goto	l1314
  4908  0016BA                     u3290:
  4909  0016BA  FFFF               	dw	65535	; assembler added errata NOP
  4910  0016BC  0E02               	movlw	2
  4911  0016BE  601B               	cpfslt	___xxtofl@exp^0,c
  4912  0016C0  EF64  F00B         	goto	u3301
  4913  0016C4  EF67  F00B         	goto	u3300
  4914  0016C8                     u3301:
  4915  0016C8  FFFF               	dw	65535	; assembler added errata NOP
  4916  0016CA  EF4D  F00B         	goto	l3988
  4917  0016CE                     u3300:
  4918  0016CE                     l1314:
  4919  0016CE  FFFF               	dw	65535	; assembler added errata NOP
  4920  0016D0  B01B               	btfsc	___xxtofl@exp^0,0,c
  4921  0016D2  EF6D  F00B         	goto	u3311
  4922  0016D6  EF70  F00B         	goto	u3310
  4923  0016DA                     u3311:
  4924  0016DA  FFFF               	dw	65535	; assembler added errata NOP
  4925  0016DC  EF72  F00B         	goto	l3996
  4926  0016E0                     u3310:
  4927  0016E0  FFFF               	dw	65535	; assembler added errata NOP
  4928  0016E2  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  4929  0016E4                     l3996:
  4930  0016E4  FFFF               	dw	65535	; assembler added errata NOP
  4931  0016E6  90D8               	bcf	status,0,c
  4932  0016E8  321B               	rrcf	___xxtofl@exp^0,f,c
  4933  0016EA  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  4934  0016EE  6A17               	clrf	(??___xxtofl+1)^0,c
  4935  0016F0  6A18               	clrf	(??___xxtofl+2)^0,c
  4936  0016F2  6A19               	clrf	(??___xxtofl+3)^0,c
  4937  0016F4  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  4938  0016F8  6A18               	clrf	(??___xxtofl+2)^0,c
  4939  0016FA  6A17               	clrf	(??___xxtofl+1)^0,c
  4940  0016FC  6A16               	clrf	??___xxtofl^0,c
  4941  0016FE  5016               	movf	??___xxtofl^0,w,c
  4942  001700  121C               	iorwf	___xxtofl@arg^0,f,c
  4943  001702  5017               	movf	(??___xxtofl+1)^0,w,c
  4944  001704  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  4945  001706  5018               	movf	(??___xxtofl+2)^0,w,c
  4946  001708  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  4947  00170A  5019               	movf	(??___xxtofl+3)^0,w,c
  4948  00170C  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  4949  00170E  501A               	movf	___xxtofl@sign^0,w,c
  4950  001710  B4D8               	btfsc	status,2,c
  4951  001712  EF8D  F00B         	goto	u3321
  4952  001716  EF90  F00B         	goto	u3320
  4953  00171A                     u3321:
  4954  00171A  FFFF               	dw	65535	; assembler added errata NOP
  4955  00171C  EF9B  F00B         	goto	l4006
  4956  001720                     u3320:
  4957  001720  FFFF               	dw	65535	; assembler added errata NOP
  4958  001722  BE15               	btfsc	(___xxtofl@val+3)^0,7,c
  4959  001724  EF99  F00B         	goto	u3330
  4960  001728  EF96  F00B         	goto	u3331
  4961  00172C                     u3331:
  4962  00172C  FFFF               	dw	65535	; assembler added errata NOP
  4963  00172E  EF9B  F00B         	goto	l4006
  4964  001732                     u3330:
  4965  001732  FFFF               	dw	65535	; assembler added errata NOP
  4966  001734  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  4967  001736                     l4006:
  4968  001736  FFFF               	dw	65535	; assembler added errata NOP
  4969  001738  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  4970  00173C  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  4971  001740  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  4972  001744  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  4973  001748                     l1303:
  4974  001748  FFFF               	dw	65535	; assembler added errata NOP
  4975  00174A  0012               	return		;funcret
  4976  00174C  FFFF               	dw	65535	; errata NOP
  4977  00174E                     __end_of___xxtofl:
  4978                           	callstack 0
  4979                           
  4980 ;; *************** function ___fltol *****************
  4981 ;; Defined at:
  4982 ;;		line 43 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\fltol.c"
  4983 ;; Parameters:    Size  Location     Type
  4984 ;;  f1              4   56[COMRAM] unsigned char 
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;  exp1            1   65[COMRAM] unsigned char 
  4987 ;;  sign1           1   64[COMRAM] unsigned char 
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  4   56[COMRAM] long 
  4990 ;; Registers used:
  4991 ;;		wreg, status,2, status,0
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4997 ;;      Params:         4       0       0       0       0       0       0
  4998 ;;      Locals:         2       0       0       0       0       0       0
  4999 ;;      Temps:          4       0       0       0       0       0       0
  5000 ;;      Totals:        10       0       0       0       0       0       0
  5001 ;;Total ram usage:       10 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; Hardware stack levels required when called:    4
  5004 ;; This function calls:
  5005 ;;		Nothing
  5006 ;; This function is called by:
  5007 ;;		_rotateObj
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	text29
  5012  001ADC                     __ptext29:
  5013                           	callstack 0
  5014  001ADC                     ___fltol:
  5015                           	callstack 0
  5016  001ADC  FFFF               	dw	65535	; assembler added errata NOP
  5017  001ADE  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5018  001AE0  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5019  001AE2  6E42               	movwf	___fltol@exp1^0,c
  5020  001AE4  5042               	movf	___fltol@exp1^0,w,c
  5021  001AE6  A4D8               	btfss	status,2,c
  5022  001AE8  EF78  F00D         	goto	u3171
  5023  001AEC  EF7B  F00D         	goto	u3170
  5024  001AF0                     u3171:
  5025  001AF0  FFFF               	dw	65535	; assembler added errata NOP
  5026  001AF2  EF87  F00D         	goto	l3926
  5027  001AF6                     u3170:
  5028  001AF6  FFFF               	dw	65535	; assembler added errata NOP
  5029  001AF8                     l3922:
  5030  001AF8  FFFF               	dw	65535	; assembler added errata NOP
  5031  001AFA  0E00               	movlw	0
  5032  001AFC  6E39               	movwf	?___fltol^0,c
  5033  001AFE  0E00               	movlw	0
  5034  001B00  6E3A               	movwf	(?___fltol+1)^0,c
  5035  001B02  0E00               	movlw	0
  5036  001B04  6E3B               	movwf	(?___fltol+2)^0,c
  5037  001B06  0E00               	movlw	0
  5038  001B08  6E3C               	movwf	(?___fltol+3)^0,c
  5039  001B0A  EF06  F00E         	goto	l942
  5040  001B0E                     l3926:
  5041  001B0E  FFFF               	dw	65535	; assembler added errata NOP
  5042  001B10  C039  F03D         	movff	___fltol@f1,??___fltol
  5043  001B14  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5044  001B18  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5045  001B1C  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5046  001B20  0E20               	movlw	32
  5047  001B22  EF99  F00D         	goto	u3180
  5048  001B26                     u3185:
  5049  001B26  FFFF               	dw	65535	; assembler added errata NOP
  5050  001B28  90D8               	bcf	status,0,c
  5051  001B2A  3240               	rrcf	(??___fltol+3)^0,f,c
  5052  001B2C  323F               	rrcf	(??___fltol+2)^0,f,c
  5053  001B2E  323E               	rrcf	(??___fltol+1)^0,f,c
  5054  001B30  323D               	rrcf	??___fltol^0,f,c
  5055  001B32                     u3180:
  5056  001B32  FFFF               	dw	65535	; assembler added errata NOP
  5057  001B34  2EE8               	decfsz	wreg,f,c
  5058  001B36  EF93  F00D         	goto	u3185
  5059  001B3A  503D               	movf	??___fltol^0,w,c
  5060  001B3C  6E41               	movwf	___fltol@sign1^0,c
  5061  001B3E  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5062  001B40  0EFF               	movlw	255
  5063  001B42  1639               	andwf	___fltol@f1^0,f,c
  5064  001B44  0EFF               	movlw	255
  5065  001B46  163A               	andwf	(___fltol@f1+1)^0,f,c
  5066  001B48  0EFF               	movlw	255
  5067  001B4A  163B               	andwf	(___fltol@f1+2)^0,f,c
  5068  001B4C  0E00               	movlw	0
  5069  001B4E  163C               	andwf	(___fltol@f1+3)^0,f,c
  5070  001B50  0E96               	movlw	150
  5071  001B52  5E42               	subwf	___fltol@exp1^0,f,c
  5072  001B54  BE42               	btfsc	___fltol@exp1^0,7,c
  5073  001B56  EFB2  F00D         	goto	u3190
  5074  001B5A  EFAF  F00D         	goto	u3191
  5075  001B5E                     u3191:
  5076  001B5E  FFFF               	dw	65535	; assembler added errata NOP
  5077  001B60  EFCC  F00D         	goto	l3946
  5078  001B64                     u3190:
  5079  001B64  FFFF               	dw	65535	; assembler added errata NOP
  5080  001B66  5042               	movf	___fltol@exp1^0,w,c
  5081  001B68  0A80               	xorlw	128
  5082  001B6A  0F97               	addlw	151
  5083  001B6C  B0D8               	btfsc	status,0,c
  5084  001B6E  EFBB  F00D         	goto	u3201
  5085  001B72  EFBE  F00D         	goto	u3200
  5086  001B76                     u3201:
  5087  001B76  FFFF               	dw	65535	; assembler added errata NOP
  5088  001B78  EFC1  F00D         	goto	l3942
  5089  001B7C                     u3200:
  5090  001B7C  FFFF               	dw	65535	; assembler added errata NOP
  5091  001B7E  EF7C  F00D         	goto	l3922
  5092  001B82                     l3942:
  5093  001B82  FFFF               	dw	65535	; assembler added errata NOP
  5094  001B84  90D8               	bcf	status,0,c
  5095  001B86  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5096  001B88  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5097  001B8A  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5098  001B8C  3239               	rrcf	___fltol@f1^0,f,c
  5099  001B8E  3E42               	incfsz	___fltol@exp1^0,f,c
  5100  001B90  EFC1  F00D         	goto	l3942
  5101  001B94  EFEA  F00D         	goto	l3956
  5102  001B98                     l3946:
  5103  001B98  FFFF               	dw	65535	; assembler added errata NOP
  5104  001B9A  0E1F               	movlw	31
  5105  001B9C  6442               	cpfsgt	___fltol@exp1^0,c
  5106  001B9E  EFD3  F00D         	goto	u3211
  5107  001BA2  EFD6  F00D         	goto	u3210
  5108  001BA6                     u3211:
  5109  001BA6  FFFF               	dw	65535	; assembler added errata NOP
  5110  001BA8  EFE0  F00D         	goto	l3954
  5111  001BAC                     u3210:
  5112  001BAC  FFFF               	dw	65535	; assembler added errata NOP
  5113  001BAE  EF7C  F00D         	goto	l3922
  5114  001BB2                     l3952:
  5115  001BB2  FFFF               	dw	65535	; assembler added errata NOP
  5116  001BB4  90D8               	bcf	status,0,c
  5117  001BB6  3639               	rlcf	___fltol@f1^0,f,c
  5118  001BB8  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5119  001BBA  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5120  001BBC  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5121  001BBE  0642               	decf	___fltol@exp1^0,f,c
  5122  001BC0                     l3954:
  5123  001BC0  FFFF               	dw	65535	; assembler added errata NOP
  5124  001BC2  5042               	movf	___fltol@exp1^0,w,c
  5125  001BC4  A4D8               	btfss	status,2,c
  5126  001BC6  EFE7  F00D         	goto	u3221
  5127  001BCA  EFEA  F00D         	goto	u3220
  5128  001BCE                     u3221:
  5129  001BCE  FFFF               	dw	65535	; assembler added errata NOP
  5130  001BD0  EFD9  F00D         	goto	l3952
  5131  001BD4                     u3220:
  5132  001BD4                     l3956:
  5133  001BD4  FFFF               	dw	65535	; assembler added errata NOP
  5134  001BD6  5041               	movf	___fltol@sign1^0,w,c
  5135  001BD8  B4D8               	btfsc	status,2,c
  5136  001BDA  EFF1  F00D         	goto	u3231
  5137  001BDE  EFF4  F00D         	goto	u3230
  5138  001BE2                     u3231:
  5139  001BE2  FFFF               	dw	65535	; assembler added errata NOP
  5140  001BE4  EFFD  F00D         	goto	l3960
  5141  001BE8                     u3230:
  5142  001BE8  FFFF               	dw	65535	; assembler added errata NOP
  5143  001BEA  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5144  001BEC  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5145  001BEE  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5146  001BF0  6C39               	negf	___fltol@f1^0,c
  5147  001BF2  0E00               	movlw	0
  5148  001BF4  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5149  001BF6  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5150  001BF8  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5151  001BFA                     l3960:
  5152  001BFA  FFFF               	dw	65535	; assembler added errata NOP
  5153  001BFC  C039  F039         	movff	___fltol@f1,?___fltol
  5154  001C00  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5155  001C04  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5156  001C08  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5157  001C0C                     l942:
  5158  001C0C  FFFF               	dw	65535	; assembler added errata NOP
  5159  001C0E  0012               	return		;funcret
  5160  001C10  FFFF               	dw	65535	; errata NOP
  5161  001C12                     __end_of___fltol:
  5162                           	callstack 0
  5163                           
  5164 ;; *************** function ___fldiv *****************
  5165 ;; Defined at:
  5166 ;;		line 11 in file "D:\Programs\MPLABx\xc8\v2.20\pic\sources\c99\common\sprcdiv.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;  b               4   31[COMRAM] long 
  5169 ;;  a               4   35[COMRAM] long 
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;  grs             4   50[COMRAM] unsigned long 
  5172 ;;  rem             4   43[COMRAM] unsigned long 
  5173 ;;  new_exp         2   48[COMRAM] short 
  5174 ;;  aexp            1   55[COMRAM] unsigned char 
  5175 ;;  bexp            1   54[COMRAM] unsigned char 
  5176 ;;  sign            1   47[COMRAM] unsigned char 
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  4   31[COMRAM] unsigned char 
  5179 ;; Registers used:
  5180 ;;		wreg, status,2, status,0
  5181 ;; Tracked objects:
  5182 ;;		On entry : 0/0
  5183 ;;		On exit  : 0/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5186 ;;      Params:         8       0       0       0       0       0       0
  5187 ;;      Locals:        13       0       0       0       0       0       0
  5188 ;;      Temps:          4       0       0       0       0       0       0
  5189 ;;      Totals:        25       0       0       0       0       0       0
  5190 ;;Total ram usage:       25 bytes
  5191 ;; Hardware stack levels used:    1
  5192 ;; Hardware stack levels required when called:    4
  5193 ;; This function calls:
  5194 ;;		Nothing
  5195 ;; This function is called by:
  5196 ;;		_rotateObj
  5197 ;; This function uses a non-reentrant model
  5198 ;;
  5199                           
  5200                           	psect	text30
  5201  000612                     __ptext30:
  5202                           	callstack 0
  5203  000612                     ___fldiv:
  5204                           	callstack 0
  5205  000612  FFFF               	dw	65535	; assembler added errata NOP
  5206  000614  5023               	movf	(___fldiv@b+3)^0,w,c
  5207  000616  0B80               	andlw	128
  5208  000618  6E30               	movwf	___fldiv@sign^0,c
  5209  00061A  5023               	movf	(___fldiv@b+3)^0,w,c
  5210  00061C  2423               	addwf	(___fldiv@b+3)^0,w,c
  5211  00061E  6E37               	movwf	___fldiv@bexp^0,c
  5212  000620  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5213  000622  EF15  F003         	goto	u2941
  5214  000626  EF18  F003         	goto	u2940
  5215  00062A                     u2941:
  5216  00062A  FFFF               	dw	65535	; assembler added errata NOP
  5217  00062C  EF1A  F003         	goto	l3788
  5218  000630                     u2940:
  5219  000630  FFFF               	dw	65535	; assembler added errata NOP
  5220  000632  8037               	bsf	___fldiv@bexp^0,0,c
  5221  000634                     l3788:
  5222  000634  FFFF               	dw	65535	; assembler added errata NOP
  5223  000636  5037               	movf	___fldiv@bexp^0,w,c
  5224  000638  B4D8               	btfsc	status,2,c
  5225  00063A  EF21  F003         	goto	u2951
  5226  00063E  EF24  F003         	goto	u2950
  5227  000642                     u2951:
  5228  000642  FFFF               	dw	65535	; assembler added errata NOP
  5229  000644  EF3D  F003         	goto	l3798
  5230  000648                     u2950:
  5231  000648  FFFF               	dw	65535	; assembler added errata NOP
  5232  00064A  2837               	incf	___fldiv@bexp^0,w,c
  5233  00064C  A4D8               	btfss	status,2,c
  5234  00064E  EF2B  F003         	goto	u2961
  5235  000652  EF2E  F003         	goto	u2960
  5236  000656                     u2961:
  5237  000656  FFFF               	dw	65535	; assembler added errata NOP
  5238  000658  EF37  F003         	goto	l3794
  5239  00065C                     u2960:
  5240  00065C  FFFF               	dw	65535	; assembler added errata NOP
  5241  00065E  0E00               	movlw	0
  5242  000660  6E20               	movwf	___fldiv@b^0,c
  5243  000662  0E00               	movlw	0
  5244  000664  6E21               	movwf	(___fldiv@b+1)^0,c
  5245  000666  0E00               	movlw	0
  5246  000668  6E22               	movwf	(___fldiv@b+2)^0,c
  5247  00066A  0E00               	movlw	0
  5248  00066C  6E23               	movwf	(___fldiv@b+3)^0,c
  5249  00066E                     l3794:
  5250  00066E  FFFF               	dw	65535	; assembler added errata NOP
  5251  000670  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5252  000672  0E00               	movlw	0
  5253  000674  6E23               	movwf	(___fldiv@b+3)^0,c
  5254  000676  EF46  F003         	goto	l3800
  5255  00067A                     l3798:
  5256  00067A  FFFF               	dw	65535	; assembler added errata NOP
  5257  00067C  0E00               	movlw	0
  5258  00067E  6E20               	movwf	___fldiv@b^0,c
  5259  000680  0E00               	movlw	0
  5260  000682  6E21               	movwf	(___fldiv@b+1)^0,c
  5261  000684  0E00               	movlw	0
  5262  000686  6E22               	movwf	(___fldiv@b+2)^0,c
  5263  000688  0E00               	movlw	0
  5264  00068A  6E23               	movwf	(___fldiv@b+3)^0,c
  5265  00068C                     l3800:
  5266  00068C  FFFF               	dw	65535	; assembler added errata NOP
  5267  00068E  5027               	movf	(___fldiv@a+3)^0,w,c
  5268  000690  0B80               	andlw	128
  5269  000692  1A30               	xorwf	___fldiv@sign^0,f,c
  5270  000694  5027               	movf	(___fldiv@a+3)^0,w,c
  5271  000696  2427               	addwf	(___fldiv@a+3)^0,w,c
  5272  000698  6E38               	movwf	___fldiv@aexp^0,c
  5273  00069A  AE26               	btfss	(___fldiv@a+2)^0,7,c
  5274  00069C  EF52  F003         	goto	u2971
  5275  0006A0  EF55  F003         	goto	u2970
  5276  0006A4                     u2971:
  5277  0006A4  FFFF               	dw	65535	; assembler added errata NOP
  5278  0006A6  EF57  F003         	goto	l3808
  5279  0006AA                     u2970:
  5280  0006AA  FFFF               	dw	65535	; assembler added errata NOP
  5281  0006AC  8038               	bsf	___fldiv@aexp^0,0,c
  5282  0006AE                     l3808:
  5283  0006AE  FFFF               	dw	65535	; assembler added errata NOP
  5284  0006B0  5038               	movf	___fldiv@aexp^0,w,c
  5285  0006B2  B4D8               	btfsc	status,2,c
  5286  0006B4  EF5E  F003         	goto	u2981
  5287  0006B8  EF61  F003         	goto	u2980
  5288  0006BC                     u2981:
  5289  0006BC  FFFF               	dw	65535	; assembler added errata NOP
  5290  0006BE  EF7A  F003         	goto	l3818
  5291  0006C2                     u2980:
  5292  0006C2  FFFF               	dw	65535	; assembler added errata NOP
  5293  0006C4  2838               	incf	___fldiv@aexp^0,w,c
  5294  0006C6  A4D8               	btfss	status,2,c
  5295  0006C8  EF68  F003         	goto	u2991
  5296  0006CC  EF6B  F003         	goto	u2990
  5297  0006D0                     u2991:
  5298  0006D0  FFFF               	dw	65535	; assembler added errata NOP
  5299  0006D2  EF74  F003         	goto	l3814
  5300  0006D6                     u2990:
  5301  0006D6  FFFF               	dw	65535	; assembler added errata NOP
  5302  0006D8  0E00               	movlw	0
  5303  0006DA  6E24               	movwf	___fldiv@a^0,c
  5304  0006DC  0E00               	movlw	0
  5305  0006DE  6E25               	movwf	(___fldiv@a+1)^0,c
  5306  0006E0  0E00               	movlw	0
  5307  0006E2  6E26               	movwf	(___fldiv@a+2)^0,c
  5308  0006E4  0E00               	movlw	0
  5309  0006E6  6E27               	movwf	(___fldiv@a+3)^0,c
  5310  0006E8                     l3814:
  5311  0006E8  FFFF               	dw	65535	; assembler added errata NOP
  5312  0006EA  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5313  0006EC  0E00               	movlw	0
  5314  0006EE  6E27               	movwf	(___fldiv@a+3)^0,c
  5315  0006F0  EF83  F003         	goto	l3820
  5316  0006F4                     l3818:
  5317  0006F4  FFFF               	dw	65535	; assembler added errata NOP
  5318  0006F6  0E00               	movlw	0
  5319  0006F8  6E24               	movwf	___fldiv@a^0,c
  5320  0006FA  0E00               	movlw	0
  5321  0006FC  6E25               	movwf	(___fldiv@a+1)^0,c
  5322  0006FE  0E00               	movlw	0
  5323  000700  6E26               	movwf	(___fldiv@a+2)^0,c
  5324  000702  0E00               	movlw	0
  5325  000704  6E27               	movwf	(___fldiv@a+3)^0,c
  5326  000706                     l3820:
  5327  000706  FFFF               	dw	65535	; assembler added errata NOP
  5328  000708  5024               	movf	___fldiv@a^0,w,c
  5329  00070A  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5330  00070C  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5331  00070E  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5332  000710  A4D8               	btfss	status,2,c
  5333  000712  EF8D  F003         	goto	u3001
  5334  000716  EF90  F003         	goto	u3000
  5335  00071A                     u3001:
  5336  00071A  FFFF               	dw	65535	; assembler added errata NOP
  5337  00071C  EFAA  F003         	goto	l3832
  5338  000720                     u3000:
  5339  000720  FFFF               	dw	65535	; assembler added errata NOP
  5340  000722  0E00               	movlw	0
  5341  000724  6E20               	movwf	___fldiv@b^0,c
  5342  000726  0E00               	movlw	0
  5343  000728  6E21               	movwf	(___fldiv@b+1)^0,c
  5344  00072A  0E00               	movlw	0
  5345  00072C  6E22               	movwf	(___fldiv@b+2)^0,c
  5346  00072E  0E00               	movlw	0
  5347  000730  6E23               	movwf	(___fldiv@b+3)^0,c
  5348  000732  0E80               	movlw	128
  5349  000734  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5350  000736  0E7F               	movlw	127
  5351  000738  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5352  00073A                     l3826:
  5353  00073A  FFFF               	dw	65535	; assembler added errata NOP
  5354  00073C  5030               	movf	___fldiv@sign^0,w,c
  5355  00073E  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5356  000740  C020  F020         	movff	___fldiv@b,?___fldiv
  5357  000744  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5358  000748  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5359  00074C  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5360  000750  EF1F  F005         	goto	l1227
  5361  000754                     l3832:
  5362  000754  FFFF               	dw	65535	; assembler added errata NOP
  5363  000756  5037               	movf	___fldiv@bexp^0,w,c
  5364  000758  A4D8               	btfss	status,2,c
  5365  00075A  EFB1  F003         	goto	u3011
  5366  00075E  EFB4  F003         	goto	u3010
  5367  000762                     u3011:
  5368  000762  FFFF               	dw	65535	; assembler added errata NOP
  5369  000764  EFBF  F003         	goto	l3840
  5370  000768                     u3010:
  5371  000768  FFFF               	dw	65535	; assembler added errata NOP
  5372  00076A  0E00               	movlw	0
  5373  00076C  6E20               	movwf	?___fldiv^0,c
  5374  00076E  0E00               	movlw	0
  5375  000770  6E21               	movwf	(?___fldiv+1)^0,c
  5376  000772  0E00               	movlw	0
  5377  000774  6E22               	movwf	(?___fldiv+2)^0,c
  5378  000776  0E00               	movlw	0
  5379  000778  6E23               	movwf	(?___fldiv+3)^0,c
  5380  00077A  EF1F  F005         	goto	l1227
  5381  00077E                     l3840:
  5382  00077E  FFFF               	dw	65535	; assembler added errata NOP
  5383  000780  5038               	movf	___fldiv@aexp^0,w,c
  5384  000782  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5385  000786  6A29               	clrf	(??___fldiv+1)^0,c
  5386  000788  5E28               	subwf	??___fldiv^0,f,c
  5387  00078A  0E00               	movlw	0
  5388  00078C  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5389  00078E  0E7F               	movlw	127
  5390  000790  2428               	addwf	??___fldiv^0,w,c
  5391  000792  6E31               	movwf	___fldiv@new_exp^0,c
  5392  000794  0E00               	movlw	0
  5393  000796  2029               	addwfc	(??___fldiv+1)^0,w,c
  5394  000798  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5395  00079A  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5396  00079E  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5397  0007A2  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5398  0007A6  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5399  0007AA  0E00               	movlw	0
  5400  0007AC  6E20               	movwf	___fldiv@b^0,c
  5401  0007AE  0E00               	movlw	0
  5402  0007B0  6E21               	movwf	(___fldiv@b+1)^0,c
  5403  0007B2  0E00               	movlw	0
  5404  0007B4  6E22               	movwf	(___fldiv@b+2)^0,c
  5405  0007B6  0E00               	movlw	0
  5406  0007B8  6E23               	movwf	(___fldiv@b+3)^0,c
  5407  0007BA  0E00               	movlw	0
  5408  0007BC  6E33               	movwf	___fldiv@grs^0,c
  5409  0007BE  0E00               	movlw	0
  5410  0007C0  6E34               	movwf	(___fldiv@grs+1)^0,c
  5411  0007C2  0E00               	movlw	0
  5412  0007C4  6E35               	movwf	(___fldiv@grs+2)^0,c
  5413  0007C6  0E00               	movlw	0
  5414  0007C8  6E36               	movwf	(___fldiv@grs+3)^0,c
  5415  0007CA  0E00               	movlw	0
  5416  0007CC  6E38               	movwf	___fldiv@aexp^0,c
  5417  0007CE  EF2B  F004         	goto	l1229
  5418  0007D2                     l3850:
  5419  0007D2  FFFF               	dw	65535	; assembler added errata NOP
  5420  0007D4  5038               	movf	___fldiv@aexp^0,w,c
  5421  0007D6  B4D8               	btfsc	status,2,c
  5422  0007D8  EFF0  F003         	goto	u3021
  5423  0007DC  EFF3  F003         	goto	u3020
  5424  0007E0                     u3021:
  5425  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  5426  0007E2  EF0E  F004         	goto	l3858
  5427  0007E6                     u3020:
  5428  0007E6  FFFF               	dw	65535	; assembler added errata NOP
  5429  0007E8  90D8               	bcf	status,0,c
  5430  0007EA  362C               	rlcf	___fldiv@rem^0,f,c
  5431  0007EC  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5432  0007EE  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5433  0007F0  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5434  0007F2  90D8               	bcf	status,0,c
  5435  0007F4  3620               	rlcf	___fldiv@b^0,f,c
  5436  0007F6  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5437  0007F8  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5438  0007FA  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5439  0007FC  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5440  0007FE  EF03  F004         	goto	u3031
  5441  000802  EF06  F004         	goto	u3030
  5442  000806                     u3031:
  5443  000806  FFFF               	dw	65535	; assembler added errata NOP
  5444  000808  EF08  F004         	goto	l1232
  5445  00080C                     u3030:
  5446  00080C  FFFF               	dw	65535	; assembler added errata NOP
  5447  00080E  8020               	bsf	___fldiv@b^0,0,c
  5448  000810                     l1232:
  5449  000810  FFFF               	dw	65535	; assembler added errata NOP
  5450  000812  90D8               	bcf	status,0,c
  5451  000814  3633               	rlcf	___fldiv@grs^0,f,c
  5452  000816  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5453  000818  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5454  00081A  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5455  00081C                     l3858:
  5456  00081C  FFFF               	dw	65535	; assembler added errata NOP
  5457  00081E  5024               	movf	___fldiv@a^0,w,c
  5458  000820  5C2C               	subwf	___fldiv@rem^0,w,c
  5459  000822  5025               	movf	(___fldiv@a+1)^0,w,c
  5460  000824  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5461  000826  5026               	movf	(___fldiv@a+2)^0,w,c
  5462  000828  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5463  00082A  5027               	movf	(___fldiv@a+3)^0,w,c
  5464  00082C  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5465  00082E  A0D8               	btfss	status,0,c
  5466  000830  EF1C  F004         	goto	u3041
  5467  000834  EF1F  F004         	goto	u3040
  5468  000838                     u3041:
  5469  000838  FFFF               	dw	65535	; assembler added errata NOP
  5470  00083A  EF29  F004         	goto	l3864
  5471  00083E                     u3040:
  5472  00083E  FFFF               	dw	65535	; assembler added errata NOP
  5473  000840  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5474  000842  5024               	movf	___fldiv@a^0,w,c
  5475  000844  5E2C               	subwf	___fldiv@rem^0,f,c
  5476  000846  5025               	movf	(___fldiv@a+1)^0,w,c
  5477  000848  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5478  00084A  5026               	movf	(___fldiv@a+2)^0,w,c
  5479  00084C  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5480  00084E  5027               	movf	(___fldiv@a+3)^0,w,c
  5481  000850  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5482  000852                     l3864:
  5483  000852  FFFF               	dw	65535	; assembler added errata NOP
  5484  000854  2A38               	incf	___fldiv@aexp^0,f,c
  5485  000856                     l1229:
  5486  000856  FFFF               	dw	65535	; assembler added errata NOP
  5487  000858  0E19               	movlw	25
  5488  00085A  6438               	cpfsgt	___fldiv@aexp^0,c
  5489  00085C  EF32  F004         	goto	u3051
  5490  000860  EF35  F004         	goto	u3050
  5491  000864                     u3051:
  5492  000864  FFFF               	dw	65535	; assembler added errata NOP
  5493  000866  EFE9  F003         	goto	l3850
  5494  00086A                     u3050:
  5495  00086A  FFFF               	dw	65535	; assembler added errata NOP
  5496  00086C  502C               	movf	___fldiv@rem^0,w,c
  5497  00086E  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5498  000870  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5499  000872  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5500  000874  B4D8               	btfsc	status,2,c
  5501  000876  EF3F  F004         	goto	u3061
  5502  00087A  EF42  F004         	goto	u3060
  5503  00087E                     u3061:
  5504  00087E  FFFF               	dw	65535	; assembler added errata NOP
  5505  000880  EF5F  F004         	goto	l3876
  5506  000884                     u3060:
  5507  000884  FFFF               	dw	65535	; assembler added errata NOP
  5508  000886  8033               	bsf	___fldiv@grs^0,0,c
  5509  000888  EF5F  F004         	goto	l3876
  5510  00088C                     l3870:
  5511  00088C  FFFF               	dw	65535	; assembler added errata NOP
  5512  00088E  90D8               	bcf	status,0,c
  5513  000890  3620               	rlcf	___fldiv@b^0,f,c
  5514  000892  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5515  000894  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5516  000896  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5517  000898  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5518  00089A  EF51  F004         	goto	u3071
  5519  00089E  EF54  F004         	goto	u3070
  5520  0008A2                     u3071:
  5521  0008A2  FFFF               	dw	65535	; assembler added errata NOP
  5522  0008A4  EF56  F004         	goto	l1238
  5523  0008A8                     u3070:
  5524  0008A8  FFFF               	dw	65535	; assembler added errata NOP
  5525  0008AA  8020               	bsf	___fldiv@b^0,0,c
  5526  0008AC                     l1238:
  5527  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  5528  0008AE  90D8               	bcf	status,0,c
  5529  0008B0  3633               	rlcf	___fldiv@grs^0,f,c
  5530  0008B2  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5531  0008B4  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5532  0008B6  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5533  0008B8  0631               	decf	___fldiv@new_exp^0,f,c
  5534  0008BA  A0D8               	btfss	status,0,c
  5535  0008BC  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5536  0008BE                     l3876:
  5537  0008BE  FFFF               	dw	65535	; assembler added errata NOP
  5538  0008C0  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5539  0008C2  EF65  F004         	goto	u3081
  5540  0008C6  EF68  F004         	goto	u3080
  5541  0008CA                     u3081:
  5542  0008CA  FFFF               	dw	65535	; assembler added errata NOP
  5543  0008CC  EF46  F004         	goto	l3870
  5544  0008D0                     u3080:
  5545  0008D0  FFFF               	dw	65535	; assembler added errata NOP
  5546  0008D2  0E00               	movlw	0
  5547  0008D4  6E38               	movwf	___fldiv@aexp^0,c
  5548  0008D6  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5549  0008D8  EF70  F004         	goto	u3091
  5550  0008DC  EF73  F004         	goto	u3090
  5551  0008E0                     u3091:
  5552  0008E0  FFFF               	dw	65535	; assembler added errata NOP
  5553  0008E2  EF9E  F004         	goto	l1240
  5554  0008E6                     u3090:
  5555  0008E6  FFFF               	dw	65535	; assembler added errata NOP
  5556  0008E8  0EFF               	movlw	255
  5557  0008EA  1433               	andwf	___fldiv@grs^0,w,c
  5558  0008EC  6E28               	movwf	??___fldiv^0,c
  5559  0008EE  0EFF               	movlw	255
  5560  0008F0  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5561  0008F2  6E29               	movwf	(??___fldiv+1)^0,c
  5562  0008F4  0EFF               	movlw	255
  5563  0008F6  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5564  0008F8  6E2A               	movwf	(??___fldiv+2)^0,c
  5565  0008FA  0E7F               	movlw	127
  5566  0008FC  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5567  0008FE  6E2B               	movwf	(??___fldiv+3)^0,c
  5568  000900  5028               	movf	??___fldiv^0,w,c
  5569  000902  1029               	iorwf	(??___fldiv+1)^0,w,c
  5570  000904  102A               	iorwf	(??___fldiv+2)^0,w,c
  5571  000906  102B               	iorwf	(??___fldiv+3)^0,w,c
  5572  000908  B4D8               	btfsc	status,2,c
  5573  00090A  EF89  F004         	goto	u3101
  5574  00090E  EF8C  F004         	goto	u3100
  5575  000912                     u3101:
  5576  000912  FFFF               	dw	65535	; assembler added errata NOP
  5577  000914  EF92  F004         	goto	l1241
  5578  000918                     u3100:
  5579  000918  FFFF               	dw	65535	; assembler added errata NOP
  5580  00091A                     l3884:
  5581  00091A  FFFF               	dw	65535	; assembler added errata NOP
  5582  00091C  0E01               	movlw	1
  5583  00091E  6E38               	movwf	___fldiv@aexp^0,c
  5584  000920  EF9E  F004         	goto	l1240
  5585  000924                     l1241:
  5586  000924  FFFF               	dw	65535	; assembler added errata NOP
  5587  000926  A020               	btfss	___fldiv@b^0,0,c
  5588  000928  EF98  F004         	goto	u3111
  5589  00092C  EF9B  F004         	goto	u3110
  5590  000930                     u3111:
  5591  000930  FFFF               	dw	65535	; assembler added errata NOP
  5592  000932  EF9E  F004         	goto	l1240
  5593  000936                     u3110:
  5594  000936  FFFF               	dw	65535	; assembler added errata NOP
  5595  000938  EF8D  F004         	goto	l3884
  5596  00093C                     l1240:
  5597  00093C  FFFF               	dw	65535	; assembler added errata NOP
  5598  00093E  5038               	movf	___fldiv@aexp^0,w,c
  5599  000940  B4D8               	btfsc	status,2,c
  5600  000942  EFA5  F004         	goto	u3121
  5601  000946  EFA8  F004         	goto	u3120
  5602  00094A                     u3121:
  5603  00094A  FFFF               	dw	65535	; assembler added errata NOP
  5604  00094C  EFCF  F004         	goto	l3896
  5605  000950                     u3120:
  5606  000950  FFFF               	dw	65535	; assembler added errata NOP
  5607  000952  0E01               	movlw	1
  5608  000954  2620               	addwf	___fldiv@b^0,f,c
  5609  000956  0E00               	movlw	0
  5610  000958  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5611  00095A  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5612  00095C  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5613  00095E  A023               	btfss	(___fldiv@b+3)^0,0,c
  5614  000960  EFB4  F004         	goto	u3131
  5615  000964  EFB7  F004         	goto	u3130
  5616  000968                     u3131:
  5617  000968  FFFF               	dw	65535	; assembler added errata NOP
  5618  00096A  EFCF  F004         	goto	l3896
  5619  00096E                     u3130:
  5620  00096E  FFFF               	dw	65535	; assembler added errata NOP
  5621  000970  C020  F028         	movff	___fldiv@b,??___fldiv
  5622  000974  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5623  000978  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5624  00097C  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5625  000980  342B               	rlcf	(??___fldiv+3)^0,w,c
  5626  000982  322B               	rrcf	(??___fldiv+3)^0,f,c
  5627  000984  322A               	rrcf	(??___fldiv+2)^0,f,c
  5628  000986  3229               	rrcf	(??___fldiv+1)^0,f,c
  5629  000988  3228               	rrcf	??___fldiv^0,f,c
  5630  00098A  C028  F020         	movff	??___fldiv,___fldiv@b
  5631  00098E  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5632  000992  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5633  000996  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5634  00099A  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5635  00099C  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5636  00099E                     l3896:
  5637  00099E  FFFF               	dw	65535	; assembler added errata NOP
  5638  0009A0  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5639  0009A2  EFDB  F004         	goto	u3141
  5640  0009A6  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5641  0009A8  E109               	bnz	u3140
  5642  0009AA  2831               	incf	___fldiv@new_exp^0,w,c
  5643  0009AC  A0D8               	btfss	status,0,c
  5644  0009AE  EFDB  F004         	goto	u3141
  5645  0009B2  EFDE  F004         	goto	u3140
  5646  0009B6                     u3141:
  5647  0009B6  FFFF               	dw	65535	; assembler added errata NOP
  5648  0009B8  EFEA  F004         	goto	l3900
  5649  0009BC                     u3140:
  5650  0009BC  FFFF               	dw	65535	; assembler added errata NOP
  5651  0009BE  0E00               	movlw	0
  5652  0009C0  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5653  0009C2  6831               	setf	___fldiv@new_exp^0,c
  5654  0009C4  0E00               	movlw	0
  5655  0009C6  6E20               	movwf	___fldiv@b^0,c
  5656  0009C8  0E00               	movlw	0
  5657  0009CA  6E21               	movwf	(___fldiv@b+1)^0,c
  5658  0009CC  0E00               	movlw	0
  5659  0009CE  6E22               	movwf	(___fldiv@b+2)^0,c
  5660  0009D0  0E00               	movlw	0
  5661  0009D2  6E23               	movwf	(___fldiv@b+3)^0,c
  5662  0009D4                     l3900:
  5663  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  5664  0009D6  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5665  0009D8  EFF9  F004         	goto	u3150
  5666  0009DC  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5667  0009DE  E106               	bnz	u3151
  5668  0009E0  0431               	decf	___fldiv@new_exp^0,w,c
  5669  0009E2  B0D8               	btfsc	status,0,c
  5670  0009E4  EFF6  F004         	goto	u3151
  5671  0009E8  EFF9  F004         	goto	u3150
  5672  0009EC                     u3151:
  5673  0009EC  FFFF               	dw	65535	; assembler added errata NOP
  5674  0009EE  EF08  F005         	goto	l3904
  5675  0009F2                     u3150:
  5676  0009F2  FFFF               	dw	65535	; assembler added errata NOP
  5677  0009F4  0E00               	movlw	0
  5678  0009F6  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5679  0009F8  0E00               	movlw	0
  5680  0009FA  6E31               	movwf	___fldiv@new_exp^0,c
  5681  0009FC  0E00               	movlw	0
  5682  0009FE  6E20               	movwf	___fldiv@b^0,c
  5683  000A00  0E00               	movlw	0
  5684  000A02  6E21               	movwf	(___fldiv@b+1)^0,c
  5685  000A04  0E00               	movlw	0
  5686  000A06  6E22               	movwf	(___fldiv@b+2)^0,c
  5687  000A08  0E00               	movlw	0
  5688  000A0A  6E23               	movwf	(___fldiv@b+3)^0,c
  5689  000A0C  0E00               	movlw	0
  5690  000A0E  6E30               	movwf	___fldiv@sign^0,c
  5691  000A10                     l3904:
  5692  000A10  FFFF               	dw	65535	; assembler added errata NOP
  5693  000A12  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5694  000A16  A037               	btfss	___fldiv@bexp^0,0,c
  5695  000A18  EF10  F005         	goto	u3161
  5696  000A1C  EF13  F005         	goto	u3160
  5697  000A20                     u3161:
  5698  000A20  FFFF               	dw	65535	; assembler added errata NOP
  5699  000A22  EF17  F005         	goto	l3910
  5700  000A26                     u3160:
  5701  000A26  FFFF               	dw	65535	; assembler added errata NOP
  5702  000A28  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5703  000A2A  EF19  F005         	goto	l3912
  5704  000A2E                     l3910:
  5705  000A2E  FFFF               	dw	65535	; assembler added errata NOP
  5706  000A30  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5707  000A32                     l3912:
  5708  000A32  FFFF               	dw	65535	; assembler added errata NOP
  5709  000A34  90D8               	bcf	status,0,c
  5710  000A36  3037               	rrcf	___fldiv@bexp^0,w,c
  5711  000A38  6E23               	movwf	(___fldiv@b+3)^0,c
  5712  000A3A  EF9D  F003         	goto	l3826
  5713  000A3E                     l1227:
  5714  000A3E  FFFF               	dw	65535	; assembler added errata NOP
  5715  000A40  0012               	return		;funcret
  5716  000A42  FFFF               	dw	65535	; errata NOP
  5717  000A44                     __end_of___fldiv:
  5718                           	callstack 0
  5719                           
  5720 ;; *************** function _releaseObj *****************
  5721 ;; Defined at:
  5722 ;;		line 816 in file "motors.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;		None
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;		None
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  1    wreg      void 
  5729 ;; Registers used:
  5730 ;;		wreg, status,2, status,0, cstack
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5736 ;;      Params:         0       0       0       0       0       0       0
  5737 ;;      Locals:         0       0       0       0       0       0       0
  5738 ;;      Temps:          0       0       0       0       0       0       0
  5739 ;;      Totals:         0       0       0       0       0       0       0
  5740 ;;Total ram usage:        0 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    5
  5743 ;; This function calls:
  5744 ;;		_resetTM2_Temp
  5745 ;;		_stepMade
  5746 ;; This function is called by:
  5747 ;;		_executeData
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750                           
  5751                           	psect	text31
  5752  002502                     __ptext31:
  5753                           	callstack 0
  5754  002502                     _releaseObj:
  5755                           	callstack 0
  5756  002502  FFFF               	dw	65535	; assembler added errata NOP
  5757  002504                     
  5758                           ;motors.c: 817:     LATDbits.LATD1 = 0;
  5759  002504  928C               	bcf	140,1,c	;volatile
  5760                           
  5761                           ;motors.c: 820:     T2CONbits.TMR2ON = 1;
  5762  002506  84CA               	bsf	202,2,c	;volatile
  5763  002508                     l4262:
  5764  002508  FFFF               	dw	65535	; assembler added errata NOP
  5765  00250A  ECE6  F012         	call	_stepMade	;wreg free
  5766  00250E  5012               	movf	?_stepMade^0,w,c
  5767  002510  1013               	iorwf	(?_stepMade+1)^0,w,c
  5768  002512  B4D8               	btfsc	status,2,c
  5769  002514  EF8E  F012         	goto	u3751
  5770  002518  EF91  F012         	goto	u3750
  5771  00251C                     u3751:
  5772  00251C  FFFF               	dw	65535	; assembler added errata NOP
  5773  00251E  EF84  F012         	goto	l4262
  5774  002522                     u3750:
  5775  002522  FFFF               	dw	65535	; assembler added errata NOP
  5776  002524                     
  5777                           ;motors.c: 822:     T2CONbits.TMR2ON = 0;
  5778  002524  94CA               	bcf	202,2,c	;volatile
  5779  002526                     
  5780                           ;motors.c: 823:     TMR2 = 0;
  5781  002526  0E00               	movlw	0
  5782  002528  6ECC               	movwf	204,c	;volatile
  5783  00252A                     
  5784                           ;motors.c: 826:     resetTM2_Temp();
  5785  00252A  ECF0  F012         	call	_resetTM2_Temp	;wreg free
  5786  00252E  0012               	return		;funcret
  5787  002530  FFFF               	dw	65535	; errata NOP
  5788  002532                     __end_of_releaseObj:
  5789                           	callstack 0
  5790                           
  5791 ;; *************** function _pickObject *****************
  5792 ;; Defined at:
  5793 ;;		line 799 in file "motors.c"
  5794 ;; Parameters:    Size  Location     Type
  5795 ;;		None
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;		None
  5798 ;; Return value:  Size  Location     Type
  5799 ;;                  1    wreg      void 
  5800 ;; Registers used:
  5801 ;;		wreg, status,2, status,0, cstack
  5802 ;; Tracked objects:
  5803 ;;		On entry : 0/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5807 ;;      Params:         0       0       0       0       0       0       0
  5808 ;;      Locals:         0       0       0       0       0       0       0
  5809 ;;      Temps:          0       0       0       0       0       0       0
  5810 ;;      Totals:         0       0       0       0       0       0       0
  5811 ;;Total ram usage:        0 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:    5
  5814 ;; This function calls:
  5815 ;;		_resetTM2_Temp
  5816 ;;		_stepMade
  5817 ;; This function is called by:
  5818 ;;		_executeData
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822                           	psect	text32
  5823  002532                     __ptext32:
  5824                           	callstack 0
  5825  002532                     _pickObject:
  5826                           	callstack 0
  5827  002532  FFFF               	dw	65535	; assembler added errata NOP
  5828  002534                     
  5829                           ;motors.c: 800:     LATDbits.LATD1 = 1;
  5830  002534  828C               	bsf	140,1,c	;volatile
  5831                           
  5832                           ;motors.c: 803:     T2CONbits.TMR2ON = 1;
  5833  002536  84CA               	bsf	202,2,c	;volatile
  5834  002538                     l4254:
  5835  002538  FFFF               	dw	65535	; assembler added errata NOP
  5836  00253A  ECE6  F012         	call	_stepMade	;wreg free
  5837  00253E  5012               	movf	?_stepMade^0,w,c
  5838  002540  1013               	iorwf	(?_stepMade+1)^0,w,c
  5839  002542  B4D8               	btfsc	status,2,c
  5840  002544  EFA6  F012         	goto	u3741
  5841  002548  EFA9  F012         	goto	u3740
  5842  00254C                     u3741:
  5843  00254C  FFFF               	dw	65535	; assembler added errata NOP
  5844  00254E  EF9C  F012         	goto	l4254
  5845  002552                     u3740:
  5846  002552  FFFF               	dw	65535	; assembler added errata NOP
  5847  002554                     
  5848                           ;motors.c: 805:     T2CONbits.TMR2ON = 0;
  5849  002554  94CA               	bcf	202,2,c	;volatile
  5850  002556                     
  5851                           ;motors.c: 806:     TMR2 = 0;
  5852  002556  0E00               	movlw	0
  5853  002558  6ECC               	movwf	204,c	;volatile
  5854  00255A                     
  5855                           ;motors.c: 809:     resetTM2_Temp();
  5856  00255A  ECF0  F012         	call	_resetTM2_Temp	;wreg free
  5857  00255E  0012               	return		;funcret
  5858  002560  FFFF               	dw	65535	; errata NOP
  5859  002562                     __end_of_pickObject:
  5860                           	callstack 0
  5861                           
  5862 ;; *************** function _moveToPoint *****************
  5863 ;; Defined at:
  5864 ;;		line 315 in file "motors.c"
  5865 ;; Parameters:    Size  Location     Type
  5866 ;;  x1              2   20[COMRAM] int 
  5867 ;;  y1              2   22[COMRAM] int 
  5868 ;;  x2              2   24[COMRAM] int 
  5869 ;;  y2              2   26[COMRAM] int 
  5870 ;; Auto vars:     Size  Location     Type
  5871 ;;  keepMovingY     1   33[COMRAM] unsigned char 
  5872 ;;  keepMovingX     1   32[COMRAM] unsigned char 
  5873 ;;  MOT2Directio    1   31[COMRAM] unsigned char 
  5874 ;;  MOT1Directio    1   30[COMRAM] unsigned char 
  5875 ;; Return value:  Size  Location     Type
  5876 ;;                  1    wreg      unsigned char 
  5877 ;; Registers used:
  5878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5879 ;; Tracked objects:
  5880 ;;		On entry : 0/0
  5881 ;;		On exit  : 0/0
  5882 ;;		Unchanged: 0/0
  5883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5884 ;;      Params:         8       0       0       0       0       0       0
  5885 ;;      Locals:         4       0       0       0       0       0       0
  5886 ;;      Temps:          2       0       0       0       0       0       0
  5887 ;;      Totals:        14       0       0       0       0       0       0
  5888 ;;Total ram usage:       14 bytes
  5889 ;; Hardware stack levels used:    1
  5890 ;; Hardware stack levels required when called:    5
  5891 ;; This function calls:
  5892 ;;		_resetStep
  5893 ;;		_resetTM0_Temp
  5894 ;;		_resetTM2_Temp
  5895 ;;		_stepCounter
  5896 ;;		_stepMade
  5897 ;; This function is called by:
  5898 ;;		_executeData
  5899 ;; This function uses a non-reentrant model
  5900 ;;
  5901                           
  5902                           	psect	text33
  5903  000A44                     __ptext33:
  5904                           	callstack 0
  5905  000A44                     _moveToPoint:
  5906                           	callstack 0
  5907  000A44  FFFF               	dw	65535	; assembler added errata NOP
  5908  000A46                     
  5909                           ;motors.c: 317:     unsigned char MOT1Direction, MOT2Direction;;motors.c: 337:     if((x
      +                          2 - x1) > 0){
  5910  000A46  5015               	movf	moveToPoint@x1^0,w,c
  5911  000A48  5C19               	subwf	moveToPoint@x2^0,w,c
  5912  000A4A  6E1D               	movwf	??_moveToPoint^0,c
  5913  000A4C  5016               	movf	(moveToPoint@x1+1)^0,w,c
  5914  000A4E  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  5915  000A50  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5916  000A52  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5917  000A54  EF34  F005         	goto	u3341
  5918  000A58  501E               	movf	(??_moveToPoint+1)^0,w,c
  5919  000A5A  E109               	bnz	u3340
  5920  000A5C  041D               	decf	??_moveToPoint^0,w,c
  5921  000A5E  A0D8               	btfss	status,0,c
  5922  000A60  EF34  F005         	goto	u3341
  5923  000A64  EF37  F005         	goto	u3340
  5924  000A68                     u3341:
  5925  000A68  FFFF               	dw	65535	; assembler added errata NOP
  5926  000A6A  EF3E  F005         	goto	l154
  5927  000A6E                     u3340:
  5928  000A6E  FFFF               	dw	65535	; assembler added errata NOP
  5929  000A70                     
  5930                           ;motors.c: 338:         motCounter[0][1] = 1;
  5931  000A70  0E01               	movlw	1
  5932  000A72  6E64               	movwf	(_motCounter+1)^0,c
  5933                           
  5934                           ;motors.c: 339:         MOT1Direction = 1;
  5935  000A74  0E01               	movlw	1
  5936  000A76  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5937                           
  5938                           ;motors.c: 340:     }else{
  5939  000A78  EF42  F005         	goto	l4016
  5940  000A7C                     l154:
  5941  000A7C  FFFF               	dw	65535	; assembler added errata NOP
  5942                           
  5943                           ;motors.c: 341:         motCounter[0][1] = -1;
  5944  000A7E  6864               	setf	(_motCounter+1)^0,c
  5945  000A80                     
  5946                           ;motors.c: 342:         MOT1Direction = 0;
  5947  000A80  0E00               	movlw	0
  5948  000A82  6E1F               	movwf	moveToPoint@MOT1Direction^0,c
  5949  000A84                     l4016:
  5950  000A84  FFFF               	dw	65535	; assembler added errata NOP
  5951                           
  5952                           ;motors.c: 345:     if((y2 - y1) > 0){
  5953  000A86  5017               	movf	moveToPoint@y1^0,w,c
  5954  000A88  5C1B               	subwf	moveToPoint@y2^0,w,c
  5955  000A8A  6E1D               	movwf	??_moveToPoint^0,c
  5956  000A8C  5018               	movf	(moveToPoint@y1+1)^0,w,c
  5957  000A8E  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  5958  000A90  6E1E               	movwf	(??_moveToPoint+1)^0,c
  5959  000A92  BE1E               	btfsc	(??_moveToPoint+1)^0,7,c
  5960  000A94  EF54  F005         	goto	u3351
  5961  000A98  501E               	movf	(??_moveToPoint+1)^0,w,c
  5962  000A9A  E109               	bnz	u3350
  5963  000A9C  041D               	decf	??_moveToPoint^0,w,c
  5964  000A9E  A0D8               	btfss	status,0,c
  5965  000AA0  EF54  F005         	goto	u3351
  5966  000AA4  EF57  F005         	goto	u3350
  5967  000AA8                     u3351:
  5968  000AA8  FFFF               	dw	65535	; assembler added errata NOP
  5969  000AAA  EF5E  F005         	goto	l156
  5970  000AAE                     u3350:
  5971  000AAE  FFFF               	dw	65535	; assembler added errata NOP
  5972  000AB0                     
  5973                           ;motors.c: 346:         motCounter[1][1] = 1;
  5974  000AB0  0E01               	movlw	1
  5975  000AB2  6E66               	movwf	(_motCounter+3)^0,c
  5976                           
  5977                           ;motors.c: 347:         MOT2Direction = 1;
  5978  000AB4  0E01               	movlw	1
  5979  000AB6  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5980                           
  5981                           ;motors.c: 348:     }else{
  5982  000AB8  EF62  F005         	goto	l157
  5983  000ABC                     l156:
  5984  000ABC  FFFF               	dw	65535	; assembler added errata NOP
  5985                           
  5986                           ;motors.c: 349:         motCounter[1][1] = -1;
  5987  000ABE  6866               	setf	(_motCounter+3)^0,c
  5988  000AC0                     
  5989                           ;motors.c: 350:         MOT2Direction = 0;
  5990  000AC0  0E00               	movlw	0
  5991  000AC2  6E20               	movwf	moveToPoint@MOT2Direction^0,c
  5992  000AC4                     l157:
  5993  000AC4  FFFF               	dw	65535	; assembler added errata NOP
  5994                           
  5995                           ;motors.c: 355:     unsigned char keepMovingX = 1;
  5996  000AC6  0E01               	movlw	1
  5997  000AC8  6E21               	movwf	moveToPoint@keepMovingX^0,c
  5998                           
  5999                           ;motors.c: 356:     unsigned char keepMovingY = 1;
  6000  000ACA  0E01               	movlw	1
  6001  000ACC  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6002  000ACE                     
  6003                           ;motors.c: 359:     T2CONbits.TMR2ON = 1;
  6004  000ACE  84CA               	bsf	202,2,c	;volatile
  6005                           
  6006                           ;motors.c: 361:     tm0Error = 0;
  6007  000AD0  0E00               	movlw	0
  6008  000AD2  6E56               	movwf	(_tm0Error+1)^0,c
  6009  000AD4  0E00               	movlw	0
  6010  000AD6  6E55               	movwf	_tm0Error^0,c
  6011                           
  6012                           ;motors.c: 362:     tm0Limit = 200;
  6013  000AD8  0EC8               	movlw	200
  6014  000ADA  6E62               	movwf	_tm0Limit^0,c
  6015  000ADC                     
  6016                           ;motors.c: 363:     T0CONbits.TMR0ON = 1;
  6017  000ADC  8ED5               	bsf	213,7,c	;volatile
  6018                           
  6019                           ;motors.c: 365:     while(keepMovingX || keepMovingY){
  6020  000ADE  EF9E  F006         	goto	l4088
  6021  000AE2                     l4026:
  6022  000AE2  FFFF               	dw	65535	; assembler added errata NOP
  6023                           
  6024                           ;motors.c: 368:         if(tm0Error){
  6025  000AE4  5055               	movf	_tm0Error^0,w,c
  6026  000AE6  1056               	iorwf	(_tm0Error+1)^0,w,c
  6027  000AE8  B4D8               	btfsc	status,2,c
  6028  000AEA  EF79  F005         	goto	u3361
  6029  000AEE  EF7C  F005         	goto	u3360
  6030  000AF2                     u3361:
  6031  000AF2  FFFF               	dw	65535	; assembler added errata NOP
  6032  000AF4  EF83  F005         	goto	l4030
  6033  000AF8                     u3360:
  6034  000AF8  FFFF               	dw	65535	; assembler added errata NOP
  6035  000AFA                     
  6036                           ;motors.c: 374:             tm0Error = 4;
  6037  000AFA  0E00               	movlw	0
  6038  000AFC  6E56               	movwf	(_tm0Error+1)^0,c
  6039  000AFE  0E04               	movlw	4
  6040  000B00  6E55               	movwf	_tm0Error^0,c
  6041                           
  6042                           ;motors.c: 375:             break;
  6043  000B02  EFB2  F006         	goto	l161
  6044  000B06                     l4030:
  6045  000B06  FFFF               	dw	65535	; assembler added errata NOP
  6046                           
  6047                           ;motors.c: 383:         if(MOT1Direction == 1){
  6048  000B08  041F               	decf	moveToPoint@MOT1Direction^0,w,c
  6049  000B0A  A4D8               	btfss	status,2,c
  6050  000B0C  EF8A  F005         	goto	u3371
  6051  000B10  EF8D  F005         	goto	u3370
  6052  000B14                     u3371:
  6053  000B14  FFFF               	dw	65535	; assembler added errata NOP
  6054  000B16  EFCC  F005         	goto	l4044
  6055  000B1A                     u3370:
  6056  000B1A  FFFF               	dw	65535	; assembler added errata NOP
  6057  000B1C                     
  6058                           ;motors.c: 384:             if(x1 + stepCounter() >= x2){
  6059  000B1C  EC4B  F013         	call	_stepCounter	;wreg free
  6060  000B20  5015               	movf	moveToPoint@x1^0,w,c
  6061  000B22  2612               	addwf	?_stepCounter^0,f,c
  6062  000B24  5016               	movf	(moveToPoint@x1+1)^0,w,c
  6063  000B26  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6064  000B28  5019               	movf	moveToPoint@x2^0,w,c
  6065  000B2A  5C12               	subwf	?_stepCounter^0,w,c
  6066  000B2C  501A               	movf	(moveToPoint@x2+1)^0,w,c
  6067  000B2E  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6068  000B30  A0D8               	btfss	status,0,c
  6069  000B32  EF9D  F005         	goto	u3381
  6070  000B36  EFA0  F005         	goto	u3380
  6071  000B3A                     u3381:
  6072  000B3A  FFFF               	dw	65535	; assembler added errata NOP
  6073  000B3C  EFA6  F005         	goto	l4036
  6074  000B40                     u3380:
  6075  000B40  FFFF               	dw	65535	; assembler added errata NOP
  6076  000B42                     l4034:
  6077  000B42  FFFF               	dw	65535	; assembler added errata NOP
  6078                           
  6079                           ;motors.c: 386:                 keepMovingX = 0;
  6080  000B44  0E00               	movlw	0
  6081  000B46  6E21               	movwf	moveToPoint@keepMovingX^0,c
  6082                           
  6083                           ;motors.c: 387:             }else if(keepMovingX){
  6084  000B48  EF0A  F006         	goto	l4058
  6085  000B4C                     l4036:
  6086  000B4C  FFFF               	dw	65535	; assembler added errata NOP
  6087  000B4E  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6088  000B50  B4D8               	btfsc	status,2,c
  6089  000B52  EFAD  F005         	goto	u3391
  6090  000B56  EFB0  F005         	goto	u3390
  6091  000B5A                     u3391:
  6092  000B5A  FFFF               	dw	65535	; assembler added errata NOP
  6093  000B5C  EF0A  F006         	goto	l4058
  6094  000B60                     u3390:
  6095  000B60  FFFF               	dw	65535	; assembler added errata NOP
  6096  000B62                     
  6097                           ;motors.c: 393:             motCounter[0][0] += motCounter[0][1];
  6098  000B62  5064               	movf	(_motCounter+1)^0,w,c
  6099  000B64  2663               	addwf	_motCounter^0,f,c
  6100                           
  6101                           ;motors.c: 394:             if(motCounter[0][0] > 3){
  6102  000B66  5063               	movf	_motCounter^0,w,c
  6103  000B68  0A80               	xorlw	128
  6104  000B6A  0F7C               	addlw	-132
  6105  000B6C  A0D8               	btfss	status,0,c
  6106  000B6E  EFBB  F005         	goto	u3401
  6107  000B72  EFBE  F005         	goto	u3400
  6108  000B76                     u3401:
  6109  000B76  FFFF               	dw	65535	; assembler added errata NOP
  6110  000B78  EFC1  F005         	goto	l4042
  6111  000B7C                     u3400:
  6112  000B7C  FFFF               	dw	65535	; assembler added errata NOP
  6113  000B7E                     
  6114                           ;motors.c: 395:                 motCounter[0][0] = 0;
  6115  000B7E  0E00               	movlw	0
  6116  000B80  6E63               	movwf	_motCounter^0,c
  6117  000B82                     l4042:
  6118  000B82  FFFF               	dw	65535	; assembler added errata NOP
  6119                           
  6120                           ;motors.c: 398:             LATA = stepMot1[motCounter[0][0]];
  6121  000B84  0E8C               	movlw	low _stepMot1
  6122  000B86  2463               	addwf	_motCounter^0,w,c
  6123  000B88  6ED9               	movwf	fsr2l,c
  6124  000B8A  6ADA               	clrf	fsr2h,c
  6125  000B8C  0E00               	movlw	high _stepMot1
  6126  000B8E  22DA               	addwfc	fsr2h,f,c
  6127  000B90  50DF               	movf	indf2,w,c
  6128  000B92  6E89               	movwf	137,c	;volatile
  6129  000B94  EF0A  F006         	goto	l4058
  6130  000B98                     l4044:
  6131  000B98  FFFF               	dw	65535	; assembler added errata NOP
  6132  000B9A  501F               	movf	moveToPoint@MOT1Direction^0,w,c
  6133  000B9C  A4D8               	btfss	status,2,c
  6134  000B9E  EFD3  F005         	goto	u3411
  6135  000BA2  EFD6  F005         	goto	u3410
  6136  000BA6                     u3411:
  6137  000BA6  FFFF               	dw	65535	; assembler added errata NOP
  6138  000BA8  EF0A  F006         	goto	l4058
  6139  000BAC                     u3410:
  6140  000BAC  FFFF               	dw	65535	; assembler added errata NOP
  6141  000BAE                     
  6142                           ;motors.c: 402:             if(x1 - stepCounter() <= x2){
  6143  000BAE  EC4B  F013         	call	_stepCounter	;wreg free
  6144  000BB2  C015  F01D         	movff	moveToPoint@x1,??_moveToPoint
  6145  000BB6  C016  F01E         	movff	moveToPoint@x1+1,??_moveToPoint+1
  6146  000BBA  5012               	movf	?_stepCounter^0,w,c
  6147  000BBC  5E1D               	subwf	??_moveToPoint^0,f,c
  6148  000BBE  5013               	movf	(?_stepCounter+1)^0,w,c
  6149  000BC0  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6150  000BC2  501D               	movf	??_moveToPoint^0,w,c
  6151  000BC4  5C19               	subwf	moveToPoint@x2^0,w,c
  6152  000BC6  501E               	movf	(??_moveToPoint+1)^0,w,c
  6153  000BC8  581A               	subwfb	(moveToPoint@x2+1)^0,w,c
  6154  000BCA  A0D8               	btfss	status,0,c
  6155  000BCC  EFEA  F005         	goto	u3421
  6156  000BD0  EFED  F005         	goto	u3420
  6157  000BD4                     u3421:
  6158  000BD4  FFFF               	dw	65535	; assembler added errata NOP
  6159  000BD6  EFF0  F005         	goto	l4050
  6160  000BDA                     u3420:
  6161  000BDA  FFFF               	dw	65535	; assembler added errata NOP
  6162  000BDC  EFA1  F005         	goto	l4034
  6163  000BE0                     l4050:
  6164  000BE0  FFFF               	dw	65535	; assembler added errata NOP
  6165  000BE2  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6166  000BE4  B4D8               	btfsc	status,2,c
  6167  000BE6  EFF7  F005         	goto	u3431
  6168  000BEA  EFFA  F005         	goto	u3430
  6169  000BEE                     u3431:
  6170  000BEE  FFFF               	dw	65535	; assembler added errata NOP
  6171  000BF0  EF0A  F006         	goto	l4058
  6172  000BF4                     u3430:
  6173  000BF4  FFFF               	dw	65535	; assembler added errata NOP
  6174  000BF6                     
  6175                           ;motors.c: 411:             motCounter[0][0] += motCounter[0][1];
  6176  000BF6  5064               	movf	(_motCounter+1)^0,w,c
  6177  000BF8  2663               	addwf	_motCounter^0,f,c
  6178                           
  6179                           ;motors.c: 412:             if(motCounter[0][0] < 0){
  6180  000BFA  BE63               	btfsc	_motCounter^0,7,c
  6181  000BFC  EF05  F006         	goto	u3440
  6182  000C00  EF02  F006         	goto	u3441
  6183  000C04                     u3441:
  6184  000C04  FFFF               	dw	65535	; assembler added errata NOP
  6185  000C06  EFC1  F005         	goto	l4042
  6186  000C0A                     u3440:
  6187  000C0A  FFFF               	dw	65535	; assembler added errata NOP
  6188  000C0C                     
  6189                           ;motors.c: 413:                 motCounter[0][0] = 3;
  6190  000C0C  0E03               	movlw	3
  6191  000C0E  6E63               	movwf	_motCounter^0,c
  6192  000C10  EFC1  F005         	goto	l4042
  6193  000C14                     l4058:
  6194  000C14  FFFF               	dw	65535	; assembler added errata NOP
  6195                           
  6196                           ;motors.c: 421:         if(MOT2Direction == 1){
  6197  000C16  0420               	decf	moveToPoint@MOT2Direction^0,w,c
  6198  000C18  A4D8               	btfss	status,2,c
  6199  000C1A  EF11  F006         	goto	u3451
  6200  000C1E  EF14  F006         	goto	u3450
  6201  000C22                     u3451:
  6202  000C22  FFFF               	dw	65535	; assembler added errata NOP
  6203  000C24  EF53  F006         	goto	l4072
  6204  000C28                     u3450:
  6205  000C28  FFFF               	dw	65535	; assembler added errata NOP
  6206  000C2A                     
  6207                           ;motors.c: 423:             if(y1 + stepCounter() >= y2){
  6208  000C2A  EC4B  F013         	call	_stepCounter	;wreg free
  6209  000C2E  5017               	movf	moveToPoint@y1^0,w,c
  6210  000C30  2612               	addwf	?_stepCounter^0,f,c
  6211  000C32  5018               	movf	(moveToPoint@y1+1)^0,w,c
  6212  000C34  2213               	addwfc	(?_stepCounter+1)^0,f,c
  6213  000C36  501B               	movf	moveToPoint@y2^0,w,c
  6214  000C38  5C12               	subwf	?_stepCounter^0,w,c
  6215  000C3A  501C               	movf	(moveToPoint@y2+1)^0,w,c
  6216  000C3C  5813               	subwfb	(?_stepCounter+1)^0,w,c
  6217  000C3E  A0D8               	btfss	status,0,c
  6218  000C40  EF24  F006         	goto	u3461
  6219  000C44  EF27  F006         	goto	u3460
  6220  000C48                     u3461:
  6221  000C48  FFFF               	dw	65535	; assembler added errata NOP
  6222  000C4A  EF2D  F006         	goto	l4064
  6223  000C4E                     u3460:
  6224  000C4E  FFFF               	dw	65535	; assembler added errata NOP
  6225  000C50                     l4062:
  6226  000C50  FFFF               	dw	65535	; assembler added errata NOP
  6227                           
  6228                           ;motors.c: 425:                 keepMovingY = 0;
  6229  000C52  0E00               	movlw	0
  6230  000C54  6E22               	movwf	moveToPoint@keepMovingY^0,c
  6231                           
  6232                           ;motors.c: 426:             }else if(keepMovingY){
  6233  000C56  EF91  F006         	goto	l4086
  6234  000C5A                     l4064:
  6235  000C5A  FFFF               	dw	65535	; assembler added errata NOP
  6236  000C5C  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6237  000C5E  B4D8               	btfsc	status,2,c
  6238  000C60  EF34  F006         	goto	u3471
  6239  000C64  EF37  F006         	goto	u3470
  6240  000C68                     u3471:
  6241  000C68  FFFF               	dw	65535	; assembler added errata NOP
  6242  000C6A  EF91  F006         	goto	l178
  6243  000C6E                     u3470:
  6244  000C6E  FFFF               	dw	65535	; assembler added errata NOP
  6245  000C70                     
  6246                           ;motors.c: 432:             motCounter[1][0] += motCounter[1][1];
  6247  000C70  5066               	movf	(_motCounter+3)^0,w,c
  6248  000C72  2665               	addwf	(_motCounter+2)^0,f,c
  6249                           
  6250                           ;motors.c: 433:             if(motCounter[1][0] > 3){
  6251  000C74  5065               	movf	(_motCounter+2)^0,w,c
  6252  000C76  0A80               	xorlw	128
  6253  000C78  0F7C               	addlw	-132
  6254  000C7A  A0D8               	btfss	status,0,c
  6255  000C7C  EF42  F006         	goto	u3481
  6256  000C80  EF45  F006         	goto	u3480
  6257  000C84                     u3481:
  6258  000C84  FFFF               	dw	65535	; assembler added errata NOP
  6259  000C86  EF48  F006         	goto	l4070
  6260  000C8A                     u3480:
  6261  000C8A  FFFF               	dw	65535	; assembler added errata NOP
  6262  000C8C                     
  6263                           ;motors.c: 434:                 motCounter[1][0] = 0;
  6264  000C8C  0E00               	movlw	0
  6265  000C8E  6E65               	movwf	(_motCounter+2)^0,c
  6266  000C90                     l4070:
  6267  000C90  FFFF               	dw	65535	; assembler added errata NOP
  6268                           
  6269                           ;motors.c: 437:             LATB = stepMot2[motCounter[1][0]];
  6270  000C92  0E88               	movlw	low _stepMot2
  6271  000C94  2465               	addwf	(_motCounter+2)^0,w,c
  6272  000C96  6ED9               	movwf	fsr2l,c
  6273  000C98  6ADA               	clrf	fsr2h,c
  6274  000C9A  0E00               	movlw	high _stepMot2
  6275  000C9C  22DA               	addwfc	fsr2h,f,c
  6276  000C9E  50DF               	movf	indf2,w,c
  6277  000CA0  6E8A               	movwf	138,c	;volatile
  6278  000CA2  EF91  F006         	goto	l4086
  6279  000CA6                     l4072:
  6280  000CA6  FFFF               	dw	65535	; assembler added errata NOP
  6281  000CA8  5020               	movf	moveToPoint@MOT2Direction^0,w,c
  6282  000CAA  A4D8               	btfss	status,2,c
  6283  000CAC  EF5A  F006         	goto	u3491
  6284  000CB0  EF5D  F006         	goto	u3490
  6285  000CB4                     u3491:
  6286  000CB4  FFFF               	dw	65535	; assembler added errata NOP
  6287  000CB6  EF91  F006         	goto	l4086
  6288  000CBA                     u3490:
  6289  000CBA  FFFF               	dw	65535	; assembler added errata NOP
  6290  000CBC                     
  6291                           ;motors.c: 442:             if(y1 - stepCounter() <= y2){
  6292  000CBC  EC4B  F013         	call	_stepCounter	;wreg free
  6293  000CC0  C017  F01D         	movff	moveToPoint@y1,??_moveToPoint
  6294  000CC4  C018  F01E         	movff	moveToPoint@y1+1,??_moveToPoint+1
  6295  000CC8  5012               	movf	?_stepCounter^0,w,c
  6296  000CCA  5E1D               	subwf	??_moveToPoint^0,f,c
  6297  000CCC  5013               	movf	(?_stepCounter+1)^0,w,c
  6298  000CCE  5A1E               	subwfb	(??_moveToPoint+1)^0,f,c
  6299  000CD0  501D               	movf	??_moveToPoint^0,w,c
  6300  000CD2  5C1B               	subwf	moveToPoint@y2^0,w,c
  6301  000CD4  501E               	movf	(??_moveToPoint+1)^0,w,c
  6302  000CD6  581C               	subwfb	(moveToPoint@y2+1)^0,w,c
  6303  000CD8  A0D8               	btfss	status,0,c
  6304  000CDA  EF71  F006         	goto	u3501
  6305  000CDE  EF74  F006         	goto	u3500
  6306  000CE2                     u3501:
  6307  000CE2  FFFF               	dw	65535	; assembler added errata NOP
  6308  000CE4  EF77  F006         	goto	l4078
  6309  000CE8                     u3500:
  6310  000CE8  FFFF               	dw	65535	; assembler added errata NOP
  6311  000CEA  EF28  F006         	goto	l4062
  6312  000CEE                     l4078:
  6313  000CEE  FFFF               	dw	65535	; assembler added errata NOP
  6314  000CF0  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6315  000CF2  B4D8               	btfsc	status,2,c
  6316  000CF4  EF7E  F006         	goto	u3511
  6317  000CF8  EF81  F006         	goto	u3510
  6318  000CFC                     u3511:
  6319  000CFC  FFFF               	dw	65535	; assembler added errata NOP
  6320  000CFE  EF91  F006         	goto	l4086
  6321  000D02                     u3510:
  6322  000D02  FFFF               	dw	65535	; assembler added errata NOP
  6323  000D04                     
  6324                           ;motors.c: 451:             motCounter[1][0] += motCounter[1][1];
  6325  000D04  5066               	movf	(_motCounter+3)^0,w,c
  6326  000D06  2665               	addwf	(_motCounter+2)^0,f,c
  6327                           
  6328                           ;motors.c: 452:             if(motCounter[1][0] < 0){
  6329  000D08  BE65               	btfsc	(_motCounter+2)^0,7,c
  6330  000D0A  EF8C  F006         	goto	u3520
  6331  000D0E  EF89  F006         	goto	u3521
  6332  000D12                     u3521:
  6333  000D12  FFFF               	dw	65535	; assembler added errata NOP
  6334  000D14  EF48  F006         	goto	l4070
  6335  000D18                     u3520:
  6336  000D18  FFFF               	dw	65535	; assembler added errata NOP
  6337  000D1A                     
  6338                           ;motors.c: 453:                 motCounter[1][0] = 3;
  6339  000D1A  0E03               	movlw	3
  6340  000D1C  6E65               	movwf	(_motCounter+2)^0,c
  6341  000D1E  EF48  F006         	goto	l4070
  6342  000D22                     l178:
  6343  000D22                     l4086:
  6344  000D22  FFFF               	dw	65535	; assembler added errata NOP
  6345  000D24  ECE6  F012         	call	_stepMade	;wreg free
  6346  000D28  5012               	movf	?_stepMade^0,w,c
  6347  000D2A  1013               	iorwf	(?_stepMade+1)^0,w,c
  6348  000D2C  B4D8               	btfsc	status,2,c
  6349  000D2E  EF9B  F006         	goto	u3531
  6350  000D32  EF9E  F006         	goto	u3530
  6351  000D36                     u3531:
  6352  000D36  FFFF               	dw	65535	; assembler added errata NOP
  6353  000D38  EF91  F006         	goto	l4086
  6354  000D3C                     u3530:
  6355  000D3C                     l4088:
  6356  000D3C  FFFF               	dw	65535	; assembler added errata NOP
  6357                           
  6358                           ;motors.c: 365:     while(keepMovingX || keepMovingY){
  6359  000D3E  5021               	movf	moveToPoint@keepMovingX^0,w,c
  6360  000D40  A4D8               	btfss	status,2,c
  6361  000D42  EFA5  F006         	goto	u3541
  6362  000D46  EFA8  F006         	goto	u3540
  6363  000D4A                     u3541:
  6364  000D4A  FFFF               	dw	65535	; assembler added errata NOP
  6365  000D4C  EF71  F005         	goto	l4026
  6366  000D50                     u3540:
  6367  000D50  FFFF               	dw	65535	; assembler added errata NOP
  6368  000D52  5022               	movf	moveToPoint@keepMovingY^0,w,c
  6369  000D54  A4D8               	btfss	status,2,c
  6370  000D56  EFAF  F006         	goto	u3551
  6371  000D5A  EFB2  F006         	goto	u3550
  6372  000D5E                     u3551:
  6373  000D5E  FFFF               	dw	65535	; assembler added errata NOP
  6374  000D60  EF71  F005         	goto	l4026
  6375  000D64                     u3550:
  6376  000D64                     l161:
  6377  000D64  FFFF               	dw	65535	; assembler added errata NOP
  6378                           
  6379                           ;motors.c: 476:     T0CONbits.TMR0ON = 0;
  6380  000D66  9ED5               	bcf	213,7,c	;volatile
  6381                           
  6382                           ;motors.c: 477:     T2CONbits.TMR2ON = 0;
  6383  000D68  94CA               	bcf	202,2,c	;volatile
  6384  000D6A                     
  6385                           ;motors.c: 479:     resetTM0_Temp();
  6386  000D6A  EC6B  F013         	call	_resetTM0_Temp	;wreg free
  6387                           
  6388                           ;motors.c: 480:     resetTM2_Temp();
  6389  000D6E  ECF0  F012         	call	_resetTM2_Temp	;wreg free
  6390  000D72                     
  6391                           ;motors.c: 482:     TMR0 = 0;
  6392  000D72  0E00               	movlw	0
  6393  000D74  6ED7               	movwf	215,c	;volatile
  6394  000D76  0E00               	movlw	0
  6395  000D78  6ED6               	movwf	214,c	;volatile
  6396  000D7A                     
  6397                           ;motors.c: 483:     TMR2 = 0;
  6398  000D7A  0E00               	movlw	0
  6399  000D7C  6ECC               	movwf	204,c	;volatile
  6400                           
  6401                           ;motors.c: 486:     resetStep();
  6402  000D7E  EC70  F013         	call	_resetStep	;wreg free
  6403  000D82                     
  6404                           ;motors.c: 488:     return(tm0Error);
  6405  000D82  5055               	movf	_tm0Error^0,w,c
  6406  000D84  0012               	return		;funcret
  6407  000D86  FFFF               	dw	65535	; errata NOP
  6408  000D88                     __end_of_moveToPoint:
  6409                           	callstack 0
  6410                           
  6411 ;; *************** function _stepCounter *****************
  6412 ;; Defined at:
  6413 ;;		line 71 in file "timer.c"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;		None
  6416 ;; Auto vars:     Size  Location     Type
  6417 ;;		None
  6418 ;; Return value:  Size  Location     Type
  6419 ;;                  2   17[COMRAM] unsigned int 
  6420 ;; Registers used:
  6421 ;;		None
  6422 ;; Tracked objects:
  6423 ;;		On entry : 0/0
  6424 ;;		On exit  : 0/0
  6425 ;;		Unchanged: 0/0
  6426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6427 ;;      Params:         2       0       0       0       0       0       0
  6428 ;;      Locals:         0       0       0       0       0       0       0
  6429 ;;      Temps:          0       0       0       0       0       0       0
  6430 ;;      Totals:         2       0       0       0       0       0       0
  6431 ;;Total ram usage:        2 bytes
  6432 ;; Hardware stack levels used:    1
  6433 ;; Hardware stack levels required when called:    4
  6434 ;; This function calls:
  6435 ;;		Nothing
  6436 ;; This function is called by:
  6437 ;;		_moveToPoint
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           	psect	text34
  6442  002696                     __ptext34:
  6443                           	callstack 0
  6444  002696                     _stepCounter:
  6445                           	callstack 0
  6446  002696  FFFF               	dw	65535	; assembler added errata NOP
  6447  002698                     
  6448                           ;timer.c: 72:     return pwmStep;
  6449  002698  C058  F012         	movff	_pwmStep,?_stepCounter	;volatile
  6450  00269C  6A13               	clrf	(?_stepCounter+1)^0,c
  6451  00269E  0012               	return		;funcret
  6452  0026A0  FFFF               	dw	65535	; errata NOP
  6453  0026A2                     __end_of_stepCounter:
  6454                           	callstack 0
  6455                           
  6456 ;; *************** function _liftArm *****************
  6457 ;; Defined at:
  6458 ;;		line 690 in file "motors.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;		None
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;		None
  6463 ;; Return value:  Size  Location     Type
  6464 ;;                  1    wreg      unsigned char 
  6465 ;; Registers used:
  6466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6467 ;; Tracked objects:
  6468 ;;		On entry : 0/0
  6469 ;;		On exit  : 0/0
  6470 ;;		Unchanged: 0/0
  6471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6472 ;;      Params:         0       0       0       0       0       0       0
  6473 ;;      Locals:         0       0       0       0       0       0       0
  6474 ;;      Temps:          0       0       0       0       0       0       0
  6475 ;;      Totals:         0       0       0       0       0       0       0
  6476 ;;Total ram usage:        0 bytes
  6477 ;; Hardware stack levels used:    1
  6478 ;; Hardware stack levels required when called:    5
  6479 ;; This function calls:
  6480 ;;		_resetStep
  6481 ;;		_resetTM0_Temp
  6482 ;;		_resetTM2_Temp
  6483 ;;		_stepMade
  6484 ;; This function is called by:
  6485 ;;		_executeData
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           	psect	text35
  6490  002240                     __ptext35:
  6491                           	callstack 0
  6492  002240                     _liftArm:
  6493                           	callstack 0
  6494  002240  FFFF               	dw	65535	; assembler added errata NOP
  6495  002242                     
  6496                           ;motors.c: 696:     motCounter[2][1] = -1;
  6497  002242  6868               	setf	(_motCounter+5)^0,c
  6498                           
  6499                           ;motors.c: 699:     T2CONbits.TMR2ON = 1;
  6500  002244  84CA               	bsf	202,2,c	;volatile
  6501  002246                     
  6502                           ;motors.c: 701:     tm0Error = 0;
  6503  002246  0E00               	movlw	0
  6504  002248  6E56               	movwf	(_tm0Error+1)^0,c
  6505  00224A  0E00               	movlw	0
  6506  00224C  6E55               	movwf	_tm0Error^0,c
  6507                           
  6508                           ;motors.c: 702:     tm0Limit = 200;
  6509  00224E  0EC8               	movlw	200
  6510  002250  6E62               	movwf	_tm0Limit^0,c
  6511  002252                     
  6512                           ;motors.c: 703:     T0CONbits.TMR0ON = 1;
  6513  002252  8ED5               	bsf	213,7,c	;volatile
  6514                           
  6515                           ;motors.c: 707:     while(!PORTEbits.RE2){
  6516  002254  EF64  F011         	goto	l214
  6517  002258                     l4208:
  6518  002258  FFFF               	dw	65535	; assembler added errata NOP
  6519                           
  6520                           ;motors.c: 709:         resetStep();
  6521  00225A  EC70  F013         	call	_resetStep	;wreg free
  6522  00225E                     
  6523                           ;motors.c: 712:         if(tm0Error){
  6524  00225E  5055               	movf	_tm0Error^0,w,c
  6525  002260  1056               	iorwf	(_tm0Error+1)^0,w,c
  6526  002262  B4D8               	btfsc	status,2,c
  6527  002264  EF36  F011         	goto	u3681
  6528  002268  EF39  F011         	goto	u3680
  6529  00226C                     u3681:
  6530  00226C  FFFF               	dw	65535	; assembler added errata NOP
  6531  00226E  EF40  F011         	goto	l4214
  6532  002272                     u3680:
  6533  002272  FFFF               	dw	65535	; assembler added errata NOP
  6534  002274                     
  6535                           ;motors.c: 717:             tm0Error = 6;
  6536  002274  0E00               	movlw	0
  6537  002276  6E56               	movwf	(_tm0Error+1)^0,c
  6538  002278  0E06               	movlw	6
  6539  00227A  6E55               	movwf	_tm0Error^0,c
  6540                           
  6541                           ;motors.c: 718:             break;
  6542  00227C  EF6D  F011         	goto	l217
  6543  002280                     l4214:
  6544  002280  FFFF               	dw	65535	; assembler added errata NOP
  6545                           
  6546                           ;motors.c: 727:             motCounter[2][0] += motCounter[2][1];
  6547  002282  5068               	movf	(_motCounter+5)^0,w,c
  6548  002284  2667               	addwf	(_motCounter+4)^0,f,c
  6549                           
  6550                           ;motors.c: 728:             if(motCounter[2][0] < 0){
  6551  002286  BE67               	btfsc	(_motCounter+4)^0,7,c
  6552  002288  EF4B  F011         	goto	u3690
  6553  00228C  EF48  F011         	goto	u3691
  6554  002290                     u3691:
  6555  002290  FFFF               	dw	65535	; assembler added errata NOP
  6556  002292  EF4E  F011         	goto	l4218
  6557  002296                     u3690:
  6558  002296  FFFF               	dw	65535	; assembler added errata NOP
  6559  002298                     
  6560                           ;motors.c: 729:                 motCounter[2][0] = 3;
  6561  002298  0E03               	movlw	3
  6562  00229A  6E67               	movwf	(_motCounter+4)^0,c
  6563  00229C                     l4218:
  6564  00229C  FFFF               	dw	65535	; assembler added errata NOP
  6565                           
  6566                           ;motors.c: 732:             LATC = stepMot3[motCounter[2][0]];
  6567  00229E  0E84               	movlw	low _stepMot3
  6568  0022A0  2467               	addwf	(_motCounter+4)^0,w,c
  6569  0022A2  6ED9               	movwf	fsr2l,c
  6570  0022A4  6ADA               	clrf	fsr2h,c
  6571  0022A6  0E00               	movlw	high _stepMot3
  6572  0022A8  22DA               	addwfc	fsr2h,f,c
  6573  0022AA  50DF               	movf	indf2,w,c
  6574  0022AC  6E8B               	movwf	139,c	;volatile
  6575  0022AE                     l4220:
  6576  0022AE  FFFF               	dw	65535	; assembler added errata NOP
  6577  0022B0  ECE6  F012         	call	_stepMade	;wreg free
  6578  0022B4  5012               	movf	?_stepMade^0,w,c
  6579  0022B6  1013               	iorwf	(?_stepMade+1)^0,w,c
  6580  0022B8  B4D8               	btfsc	status,2,c
  6581  0022BA  EF61  F011         	goto	u3701
  6582  0022BE  EF64  F011         	goto	u3700
  6583  0022C2                     u3701:
  6584  0022C2  FFFF               	dw	65535	; assembler added errata NOP
  6585  0022C4  EF57  F011         	goto	l4220
  6586  0022C8                     u3700:
  6587  0022C8                     l214:
  6588  0022C8  FFFF               	dw	65535	; assembler added errata NOP
  6589                           
  6590                           ;motors.c: 707:     while(!PORTEbits.RE2){
  6591  0022CA  A484               	btfss	132,2,c	;volatile
  6592  0022CC  EF6A  F011         	goto	u3711
  6593  0022D0  EF6D  F011         	goto	u3710
  6594  0022D4                     u3711:
  6595  0022D4  FFFF               	dw	65535	; assembler added errata NOP
  6596  0022D6  EF2C  F011         	goto	l4208
  6597  0022DA                     u3710:
  6598  0022DA                     l217:
  6599  0022DA  FFFF               	dw	65535	; assembler added errata NOP
  6600                           
  6601                           ;motors.c: 749:     T0CONbits.TMR0ON = 0;
  6602  0022DC  9ED5               	bcf	213,7,c	;volatile
  6603                           
  6604                           ;motors.c: 750:     T2CONbits.TMR2ON = 0;
  6605  0022DE  94CA               	bcf	202,2,c	;volatile
  6606  0022E0                     
  6607                           ;motors.c: 752:     resetTM0_Temp();
  6608  0022E0  EC6B  F013         	call	_resetTM0_Temp	;wreg free
  6609                           
  6610                           ;motors.c: 753:     resetTM2_Temp();
  6611  0022E4  ECF0  F012         	call	_resetTM2_Temp	;wreg free
  6612  0022E8                     
  6613                           ;motors.c: 755:     TMR0 = 0;
  6614  0022E8  0E00               	movlw	0
  6615  0022EA  6ED7               	movwf	215,c	;volatile
  6616  0022EC  0E00               	movlw	0
  6617  0022EE  6ED6               	movwf	214,c	;volatile
  6618  0022F0                     
  6619                           ;motors.c: 756:     TMR2 = 0;
  6620  0022F0  0E00               	movlw	0
  6621  0022F2  6ECC               	movwf	204,c	;volatile
  6622                           
  6623                           ;motors.c: 759:     resetStep();
  6624  0022F4  EC70  F013         	call	_resetStep	;wreg free
  6625  0022F8                     
  6626                           ;motors.c: 761:     return(tm0Error);
  6627  0022F8  5055               	movf	_tm0Error^0,w,c
  6628  0022FA  0012               	return		;funcret
  6629  0022FC  FFFF               	dw	65535	; errata NOP
  6630  0022FE                     __end_of_liftArm:
  6631                           	callstack 0
  6632                           
  6633 ;; *************** function _stepMade *****************
  6634 ;; Defined at:
  6635 ;;		line 60 in file "timer.c"
  6636 ;; Parameters:    Size  Location     Type
  6637 ;;		None
  6638 ;; Auto vars:     Size  Location     Type
  6639 ;;  temp            1   19[COMRAM] unsigned char 
  6640 ;; Return value:  Size  Location     Type
  6641 ;;                  2   17[COMRAM] unsigned int 
  6642 ;; Registers used:
  6643 ;;		wreg, status,2
  6644 ;; Tracked objects:
  6645 ;;		On entry : 0/0
  6646 ;;		On exit  : 0/0
  6647 ;;		Unchanged: 0/0
  6648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6649 ;;      Params:         2       0       0       0       0       0       0
  6650 ;;      Locals:         1       0       0       0       0       0       0
  6651 ;;      Temps:          0       0       0       0       0       0       0
  6652 ;;      Totals:         3       0       0       0       0       0       0
  6653 ;;Total ram usage:        3 bytes
  6654 ;; Hardware stack levels used:    1
  6655 ;; Hardware stack levels required when called:    4
  6656 ;; This function calls:
  6657 ;;		Nothing
  6658 ;; This function is called by:
  6659 ;;		_resetPosition
  6660 ;;		_moveToPoint
  6661 ;;		_touchObject
  6662 ;;		_touchTherm
  6663 ;;		_liftArm
  6664 ;;		_rotateObj
  6665 ;;		_pickObject
  6666 ;;		_releaseObj
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           	psect	text36
  6671  0025CC                     __ptext36:
  6672                           	callstack 0
  6673  0025CC                     _stepMade:
  6674                           	callstack 0
  6675  0025CC  FFFF               	dw	65535	; assembler added errata NOP
  6676  0025CE                     
  6677                           ;timer.c: 61:     unsigned char temp = stepToggle;
  6678  0025CE  C057  F014         	movff	_stepToggle,stepMade@temp	;volatile
  6679  0025D2                     
  6680                           ;timer.c: 63:     stepToggle = 0;
  6681  0025D2  0E00               	movlw	0
  6682  0025D4  6E57               	movwf	_stepToggle^0,c	;volatile
  6683  0025D6                     
  6684                           ;timer.c: 65:     return temp;
  6685  0025D6  C014  F012         	movff	stepMade@temp,?_stepMade
  6686  0025DA  6A13               	clrf	(?_stepMade+1)^0,c
  6687  0025DC  0012               	return		;funcret
  6688  0025DE  FFFF               	dw	65535	; errata NOP
  6689  0025E0                     __end_of_stepMade:
  6690                           	callstack 0
  6691                           
  6692 ;; *************** function _resetTM2_Temp *****************
  6693 ;; Defined at:
  6694 ;;		line 26 in file "interrupt.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;		None
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;		None
  6699 ;; Return value:  Size  Location     Type
  6700 ;;                  1    wreg      void 
  6701 ;; Registers used:
  6702 ;;		wreg, status,2
  6703 ;; Tracked objects:
  6704 ;;		On entry : 0/0
  6705 ;;		On exit  : 0/0
  6706 ;;		Unchanged: 0/0
  6707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6708 ;;      Params:         0       0       0       0       0       0       0
  6709 ;;      Locals:         0       0       0       0       0       0       0
  6710 ;;      Temps:          0       0       0       0       0       0       0
  6711 ;;      Totals:         0       0       0       0       0       0       0
  6712 ;;Total ram usage:        0 bytes
  6713 ;; Hardware stack levels used:    1
  6714 ;; Hardware stack levels required when called:    4
  6715 ;; This function calls:
  6716 ;;		Nothing
  6717 ;; This function is called by:
  6718 ;;		_resetPosition
  6719 ;;		_moveToPoint
  6720 ;;		_touchObject
  6721 ;;		_touchTherm
  6722 ;;		_liftArm
  6723 ;;		_rotateObj
  6724 ;;		_pickObject
  6725 ;;		_releaseObj
  6726 ;; This function uses a non-reentrant model
  6727 ;;
  6728                           
  6729                           	psect	text37
  6730  0025E0                     __ptext37:
  6731                           	callstack 0
  6732  0025E0                     _resetTM2_Temp:
  6733                           	callstack 0
  6734  0025E0  FFFF               	dw	65535	; assembler added errata NOP
  6735  0025E2                     
  6736                           ;interrupt.c: 27:     single_cycle = 0;
  6737  0025E2  0E00               	movlw	0
  6738  0025E4  0100               	movlb	0	; () banked
  6739  0025E6  6FC9               	movwf	(_single_cycle+1)& (0+255),b
  6740  0025E8  0E00               	movlw	0
  6741  0025EA  6FC8               	movwf	_single_cycle& (0+255),b
  6742                           
  6743                           ;interrupt.c: 28:     completeStep = 0;
  6744  0025EC  0E00               	movlw	0
  6745  0025EE  6E5E               	movwf	_completeStep^0,c
  6746  0025F0                     
  6747                           ; BSR set to: 0
  6748  0025F0  0012               	return		;funcret
  6749  0025F2  FFFF               	dw	65535	; errata NOP
  6750  0025F4                     __end_of_resetTM2_Temp:
  6751                           	callstack 0
  6752                           
  6753 ;; *************** function _resetTM0_Temp *****************
  6754 ;; Defined at:
  6755 ;;		line 22 in file "interrupt.c"
  6756 ;; Parameters:    Size  Location     Type
  6757 ;;		None
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;		None
  6760 ;; Return value:  Size  Location     Type
  6761 ;;                  1    wreg      void 
  6762 ;; Registers used:
  6763 ;;		wreg, status,2
  6764 ;; Tracked objects:
  6765 ;;		On entry : 0/0
  6766 ;;		On exit  : 0/0
  6767 ;;		Unchanged: 0/0
  6768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6769 ;;      Params:         0       0       0       0       0       0       0
  6770 ;;      Locals:         0       0       0       0       0       0       0
  6771 ;;      Temps:          0       0       0       0       0       0       0
  6772 ;;      Totals:         0       0       0       0       0       0       0
  6773 ;;Total ram usage:        0 bytes
  6774 ;; Hardware stack levels used:    1
  6775 ;; Hardware stack levels required when called:    4
  6776 ;; This function calls:
  6777 ;;		Nothing
  6778 ;; This function is called by:
  6779 ;;		_resetPosition
  6780 ;;		_moveToPoint
  6781 ;;		_touchObject
  6782 ;;		_touchTherm
  6783 ;;		_liftArm
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           	psect	text38
  6788  0026D6                     __ptext38:
  6789                           	callstack 0
  6790  0026D6                     _resetTM0_Temp:
  6791                           	callstack 0
  6792  0026D6  FFFF               	dw	65535	; assembler added errata NOP
  6793  0026D8                     
  6794                           ;interrupt.c: 23:     tm0Count = 0;
  6795  0026D8  0E00               	movlw	0
  6796  0026DA  6E5F               	movwf	_tm0Count^0,c
  6797  0026DC  0012               	return		;funcret
  6798  0026DE  FFFF               	dw	65535	; errata NOP
  6799  0026E0                     __end_of_resetTM0_Temp:
  6800                           	callstack 0
  6801                           
  6802 ;; *************** function _resetStep *****************
  6803 ;; Defined at:
  6804 ;;		line 78 in file "timer.c"
  6805 ;; Parameters:    Size  Location     Type
  6806 ;;		None
  6807 ;; Auto vars:     Size  Location     Type
  6808 ;;		None
  6809 ;; Return value:  Size  Location     Type
  6810 ;;                  1    wreg      void 
  6811 ;; Registers used:
  6812 ;;		wreg, status,2
  6813 ;; Tracked objects:
  6814 ;;		On entry : 0/0
  6815 ;;		On exit  : 0/0
  6816 ;;		Unchanged: 0/0
  6817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6818 ;;      Params:         0       0       0       0       0       0       0
  6819 ;;      Locals:         0       0       0       0       0       0       0
  6820 ;;      Temps:          0       0       0       0       0       0       0
  6821 ;;      Totals:         0       0       0       0       0       0       0
  6822 ;;Total ram usage:        0 bytes
  6823 ;; Hardware stack levels used:    1
  6824 ;; Hardware stack levels required when called:    4
  6825 ;; This function calls:
  6826 ;;		Nothing
  6827 ;; This function is called by:
  6828 ;;		_resetPosition
  6829 ;;		_moveToPoint
  6830 ;;		_touchObject
  6831 ;;		_touchTherm
  6832 ;;		_liftArm
  6833 ;;		_rotateObj
  6834 ;; This function uses a non-reentrant model
  6835 ;;
  6836                           
  6837                           	psect	text39
  6838  0026E0                     __ptext39:
  6839                           	callstack 0
  6840  0026E0                     _resetStep:
  6841                           	callstack 0
  6842  0026E0  FFFF               	dw	65535	; assembler added errata NOP
  6843  0026E2                     
  6844                           ;timer.c: 79:     pwmStep = 0;
  6845  0026E2  0E00               	movlw	0
  6846  0026E4  6E58               	movwf	_pwmStep^0,c	;volatile
  6847  0026E6  0012               	return		;funcret
  6848  0026E8  FFFF               	dw	65535	; errata NOP
  6849  0026EA                     __end_of_resetStep:
  6850                           	callstack 0
  6851                           
  6852 ;; *************** function _getData *****************
  6853 ;; Defined at:
  6854 ;;		line 38 in file "usart.c"
  6855 ;; Parameters:    Size  Location     Type
  6856 ;;		None
  6857 ;; Auto vars:     Size  Location     Type
  6858 ;;		None
  6859 ;; Return value:  Size  Location     Type
  6860 ;;                  2   17[COMRAM] PTR struct .
  6861 ;; Registers used:
  6862 ;;		wreg, status,2, status,0
  6863 ;; Tracked objects:
  6864 ;;		On entry : 0/0
  6865 ;;		On exit  : 0/0
  6866 ;;		Unchanged: 0/0
  6867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6868 ;;      Params:         2       0       0       0       0       0       0
  6869 ;;      Locals:         0       0       0       0       0       0       0
  6870 ;;      Temps:          0       0       0       0       0       0       0
  6871 ;;      Totals:         2       0       0       0       0       0       0
  6872 ;;Total ram usage:        2 bytes
  6873 ;; Hardware stack levels used:    1
  6874 ;; Hardware stack levels required when called:    4
  6875 ;; This function calls:
  6876 ;;		Nothing
  6877 ;; This function is called by:
  6878 ;;		_executeData
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           	psect	text40
  6883  002646                     __ptext40:
  6884                           	callstack 0
  6885  002646                     _getData:
  6886                           	callstack 0
  6887  002646  FFFF               	dw	65535	; assembler added errata NOP
  6888  002648                     
  6889                           ;usart.c: 39:     return(&dataSequence[0]);
  6890  002648  0ECA               	movlw	low _dataSequence
  6891  00264A  6E12               	movwf	?_getData^0,c
  6892  00264C  0E00               	movlw	high _dataSequence
  6893  00264E  6E13               	movwf	(?_getData+1)^0,c
  6894  002650  0012               	return		;funcret
  6895  002652  FFFF               	dw	65535	; errata NOP
  6896  002654                     __end_of_getData:
  6897                           	callstack 0
  6898                           
  6899 ;; *************** function _clearTM0 *****************
  6900 ;; Defined at:
  6901 ;;		line 32 in file "motors.c"
  6902 ;; Parameters:    Size  Location     Type
  6903 ;;		None
  6904 ;; Auto vars:     Size  Location     Type
  6905 ;;		None
  6906 ;; Return value:  Size  Location     Type
  6907 ;;                  1    wreg      void 
  6908 ;; Registers used:
  6909 ;;		wreg, status,2
  6910 ;; Tracked objects:
  6911 ;;		On entry : 0/0
  6912 ;;		On exit  : 0/0
  6913 ;;		Unchanged: 0/0
  6914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6915 ;;      Params:         0       0       0       0       0       0       0
  6916 ;;      Locals:         0       0       0       0       0       0       0
  6917 ;;      Temps:          0       0       0       0       0       0       0
  6918 ;;      Totals:         0       0       0       0       0       0       0
  6919 ;;Total ram usage:        0 bytes
  6920 ;; Hardware stack levels used:    1
  6921 ;; Hardware stack levels required when called:    4
  6922 ;; This function calls:
  6923 ;;		Nothing
  6924 ;; This function is called by:
  6925 ;;		_main
  6926 ;; This function uses a non-reentrant model
  6927 ;;
  6928                           
  6929                           	psect	text41
  6930  002654                     __ptext41:
  6931                           	callstack 0
  6932  002654                     _clearTM0:
  6933                           	callstack 0
  6934  002654  FFFF               	dw	65535	; assembler added errata NOP
  6935  002656                     
  6936                           ;motors.c: 33:     tm0Error = 0;
  6937  002656  0E00               	movlw	0
  6938  002658  6E56               	movwf	(_tm0Error+1)^0,c
  6939  00265A  0E00               	movlw	0
  6940  00265C  6E55               	movwf	_tm0Error^0,c
  6941  00265E  0012               	return		;funcret
  6942  002660  FFFF               	dw	65535	; errata NOP
  6943  002662                     __end_of_clearTM0:
  6944                           	callstack 0
  6945                           
  6946 ;; *************** function _isr *****************
  6947 ;; Defined at:
  6948 ;;		line 52 in file "interrupt.c"
  6949 ;; Parameters:    Size  Location     Type
  6950 ;;		None
  6951 ;; Auto vars:     Size  Location     Type
  6952 ;;  temp            1   16[COMRAM] unsigned char 
  6953 ;; Return value:  Size  Location     Type
  6954 ;;                  1    wreg      void 
  6955 ;; Registers used:
  6956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6957 ;; Tracked objects:
  6958 ;;		On entry : 0/0
  6959 ;;		On exit  : 0/0
  6960 ;;		Unchanged: 0/0
  6961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6962 ;;      Params:         0       0       0       0       0       0       0
  6963 ;;      Locals:         1       0       0       0       0       0       0
  6964 ;;      Temps:          6       0       0       0       0       0       0
  6965 ;;      Totals:         7       0       0       0       0       0       0
  6966 ;;Total ram usage:        7 bytes
  6967 ;; Hardware stack levels used:    1
  6968 ;; Hardware stack levels required when called:    3
  6969 ;; This function calls:
  6970 ;;		_abortAll
  6971 ;;		_fatalError
  6972 ;;		_increaseStep
  6973 ;;		_retPeriod
  6974 ;;		_setThermRel
  6975 ;;		_setTouchRel
  6976 ;;		_toggleStep
  6977 ;;		_whatsTM0Limit
  6978 ;;		_writeTM0
  6979 ;;		i2_storeData
  6980 ;; This function is called by:
  6981 ;;		Interrupt level 2
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985                           	psect	intcode
  6986  000008                     __pintcode:
  6987                           	callstack 0
  6988  000008                     _isr:
  6989                           	callstack 0
  6990  000008  FFFF               	dw	65535	; assembler added errata NOP
  6991                           
  6992                           ;incstack = 0
  6993  00000A  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6994  00000C  CFD9 F00D          	movff	fsr2l,??_isr+2
  6995  000010  CFDA F00E          	movff	fsr2h,??_isr+3
  6996  000014  CFF3 F00F          	movff	prodl,??_isr+4
  6997  000018  CFF4 F010          	movff	prodh,??_isr+5
  6998  00001C                     
  6999                           ;interrupt.c: 56:     if(INTCONbits.T0IF){
  7000  00001C  A4F2               	btfss	242,2,c	;volatile
  7001  00001E  EF13  F000         	goto	i2u280_41
  7002  000022  EF16  F000         	goto	i2u280_40
  7003  000026                     i2u280_41:
  7004  000026  FFFF               	dw	65535	; assembler added errata NOP
  7005  000028  EF2C  F000         	goto	i2l3558
  7006  00002C                     i2u280_40:
  7007  00002C  FFFF               	dw	65535	; assembler added errata NOP
  7008  00002E                     
  7009                           ;interrupt.c: 57:         INTCONbits.T0IF = 0;
  7010  00002E  94F2               	bcf	242,2,c	;volatile
  7011  000030                     
  7012                           ;interrupt.c: 60:         tm0Count++;
  7013  000030  2A5F               	incf	_tm0Count^0,f,c
  7014  000032                     
  7015                           ;interrupt.c: 62:         if(tm0Count >= whatsTM0Limit()){
  7016  000032  EC94  F013         	call	_whatsTM0Limit	;wreg free
  7017  000036  6E0B               	movwf	??_isr^0,c
  7018  000038  500B               	movf	??_isr^0,w,c
  7019  00003A  5C5F               	subwf	_tm0Count^0,w,c
  7020  00003C  A0D8               	btfss	status,0,c
  7021  00003E  EF23  F000         	goto	i2u281_41
  7022  000042  EF26  F000         	goto	i2u281_40
  7023  000046                     i2u281_41:
  7024  000046  FFFF               	dw	65535	; assembler added errata NOP
  7025  000048  EF2C  F000         	goto	i2l3558
  7026  00004C                     i2u281_40:
  7027  00004C  FFFF               	dw	65535	; assembler added errata NOP
  7028  00004E                     
  7029                           ;interrupt.c: 63:             T0CONbits.TMR0ON = 0;
  7030  00004E  9ED5               	bcf	213,7,c	;volatile
  7031  000050                     
  7032                           ;interrupt.c: 64:             tm0Count = 0;
  7033  000050  0E00               	movlw	0
  7034  000052  6E5F               	movwf	_tm0Count^0,c
  7035  000054                     
  7036                           ;interrupt.c: 65:             writeTM0();
  7037  000054  EC31  F013         	call	_writeTM0	;wreg free
  7038  000058                     i2l3558:
  7039  000058  FFFF               	dw	65535	; assembler added errata NOP
  7040                           
  7041                           ;interrupt.c: 70:     if(PIR1bits.TMR1IF){
  7042  00005A  A09E               	btfss	158,0,c	;volatile
  7043  00005C  EF32  F000         	goto	i2u282_41
  7044  000060  EF35  F000         	goto	i2u282_40
  7045  000064                     i2u282_41:
  7046  000064  FFFF               	dw	65535	; assembler added errata NOP
  7047  000066  EF45  F000         	goto	i2l3566
  7048  00006A                     i2u282_40:
  7049  00006A  FFFF               	dw	65535	; assembler added errata NOP
  7050  00006C                     
  7051                           ;interrupt.c: 71:         PIR1bits.TMR1IF = 0;
  7052  00006C  909E               	bcf	158,0,c	;volatile
  7053  00006E                     
  7054                           ;interrupt.c: 72:         if(fatalError()){
  7055  00006E  EC9C  F013         	call	_fatalError	;wreg free
  7056  000072  0900               	iorlw	0
  7057  000074  B4D8               	btfsc	status,2,c
  7058  000076  EF3F  F000         	goto	i2u283_41
  7059  00007A  EF42  F000         	goto	i2u283_40
  7060  00007E                     i2u283_41:
  7061  00007E  FFFF               	dw	65535	; assembler added errata NOP
  7062  000080  EF45  F000         	goto	i2l3566
  7063  000084                     i2u283_40:
  7064  000084  FFFF               	dw	65535	; assembler added errata NOP
  7065  000086                     
  7066                           ;interrupt.c: 73:             abortAll();
  7067  000086  EC0C  F013         	call	_abortAll	;wreg free
  7068  00008A                     i2l3566:
  7069  00008A  FFFF               	dw	65535	; assembler added errata NOP
  7070                           
  7071                           ;interrupt.c: 78:     if(PIR1bits.TMR2IF){
  7072  00008C  A29E               	btfss	158,1,c	;volatile
  7073  00008E  EF4B  F000         	goto	i2u284_41
  7074  000092  EF4E  F000         	goto	i2u284_40
  7075  000096                     i2u284_41:
  7076  000096  FFFF               	dw	65535	; assembler added errata NOP
  7077  000098  EF82  F000         	goto	i2l3588
  7078  00009C                     i2u284_40:
  7079  00009C  FFFF               	dw	65535	; assembler added errata NOP
  7080  00009E                     
  7081                           ;interrupt.c: 79:         PIR1bits.TMR2IF = 0;
  7082  00009E  929E               	bcf	158,1,c	;volatile
  7083  0000A0                     
  7084                           ;interrupt.c: 80:         single_cycle++;
  7085  0000A0  0100               	movlb	0	; () banked
  7086  0000A2  4BC8               	infsnz	_single_cycle& (0+255),f,b
  7087  0000A4  2BC9               	incf	(_single_cycle+1)& (0+255),f,b
  7088  0000A6                     
  7089                           ; BSR set to: 0
  7090                           ;interrupt.c: 83:         if(single_cycle > retPeriod()){
  7091  0000A6  EC38  F013         	call	_retPeriod	;wreg free
  7092  0000AA  0100               	movlb	0	; () banked
  7093  0000AC  51C8               	movf	_single_cycle& (0+255),w,b
  7094  0000AE  5C01               	subwf	?_retPeriod^0,w,c
  7095  0000B0  51C9               	movf	(_single_cycle+1)& (0+255),w,b
  7096  0000B2  5802               	subwfb	(?_retPeriod+1)^0,w,c
  7097  0000B4  B0D8               	btfsc	status,0,c
  7098  0000B6  EF5F  F000         	goto	i2u285_41
  7099  0000BA  EF62  F000         	goto	i2u285_40
  7100  0000BE                     i2u285_41:
  7101  0000BE  FFFF               	dw	65535	; assembler added errata NOP
  7102  0000C0  EF82  F000         	goto	i2l3588
  7103  0000C4                     i2u285_40:
  7104  0000C4  FFFF               	dw	65535	; assembler added errata NOP
  7105  0000C6                     
  7106                           ; BSR set to: 0
  7107                           ;interrupt.c: 84:             single_cycle = 0;
  7108  0000C6  0E00               	movlw	0
  7109  0000C8  6FC9               	movwf	(_single_cycle+1)& (0+255),b
  7110  0000CA  0E00               	movlw	0
  7111  0000CC  6FC8               	movwf	_single_cycle& (0+255),b
  7112  0000CE                     
  7113                           ; BSR set to: 0
  7114                           ;interrupt.c: 85:             completeStep++;
  7115  0000CE  2A5E               	incf	_completeStep^0,f,c
  7116  0000D0                     
  7117                           ; BSR set to: 0
  7118                           ;interrupt.c: 88:             if(completeStep != 0 && !(completeStep % 2)){
  7119  0000D0  505E               	movf	_completeStep^0,w,c
  7120  0000D2  B4D8               	btfsc	status,2,c
  7121  0000D4  EF6E  F000         	goto	i2u286_41
  7122  0000D8  EF71  F000         	goto	i2u286_40
  7123  0000DC                     i2u286_41:
  7124  0000DC  FFFF               	dw	65535	; assembler added errata NOP
  7125  0000DE  EF7F  F000         	goto	i2l3586
  7126  0000E2                     i2u286_40:
  7127  0000E2  FFFF               	dw	65535	; assembler added errata NOP
  7128  0000E4                     
  7129                           ; BSR set to: 0
  7130  0000E4  B05E               	btfsc	_completeStep^0,0,c
  7131  0000E6  EF77  F000         	goto	i2u287_41
  7132  0000EA  EF7A  F000         	goto	i2u287_40
  7133  0000EE                     i2u287_41:
  7134  0000EE  FFFF               	dw	65535	; assembler added errata NOP
  7135  0000F0  EF7F  F000         	goto	i2l3586
  7136  0000F4                     i2u287_40:
  7137  0000F4  FFFF               	dw	65535	; assembler added errata NOP
  7138  0000F6                     
  7139                           ; BSR set to: 0
  7140                           ;interrupt.c: 90:                 completeStep = 0;
  7141  0000F6  0E00               	movlw	0
  7142  0000F8  6E5E               	movwf	_completeStep^0,c
  7143  0000FA                     
  7144                           ; BSR set to: 0
  7145                           ;interrupt.c: 93:                 increaseStep();
  7146  0000FA  EC98  F013         	call	_increaseStep	;wreg free
  7147  0000FE                     i2l3586:
  7148  0000FE  FFFF               	dw	65535	; assembler added errata NOP
  7149                           
  7150                           ;interrupt.c: 98:             toggleStep();
  7151  000100  EC75  F013         	call	_toggleStep	;wreg free
  7152  000104                     i2l3588:
  7153  000104  FFFF               	dw	65535	; assembler added errata NOP
  7154                           
  7155                           ;interrupt.c: 103:     if(PIR1bits.ADIF){
  7156  000106  AC9E               	btfss	158,6,c	;volatile
  7157  000108  EF88  F000         	goto	i2u288_41
  7158  00010C  EF8B  F000         	goto	i2u288_40
  7159  000110                     i2u288_41:
  7160  000110  FFFF               	dw	65535	; assembler added errata NOP
  7161  000112  EFB8  F000         	goto	i2l3600
  7162  000116                     i2u288_40:
  7163  000116  FFFF               	dw	65535	; assembler added errata NOP
  7164  000118                     
  7165                           ;interrupt.c: 104:         PIR1bits.ADIF = 0;
  7166  000118  9C9E               	bcf	158,6,c	;volatile
  7167                           
  7168                           ;interrupt.c: 107:         ADC_res = ADRESL;
  7169  00011A  CFC3 F04F          	movff	4035,_ADC_res	;volatile
  7170  00011E  6A50               	clrf	(_ADC_res+1)^0,c
  7171  000120                     
  7172                           ;interrupt.c: 108:         ADC_res |= (ADRESH << 8);
  7173  000120  50C4               	movf	196,w,c	;volatile
  7174  000122  6E0C               	movwf	(??_isr+1)^0,c
  7175  000124  6A0B               	clrf	??_isr^0,c
  7176  000126  500B               	movf	??_isr^0,w,c
  7177  000128  124F               	iorwf	_ADC_res^0,f,c
  7178  00012A  500C               	movf	(??_isr+1)^0,w,c
  7179  00012C  1250               	iorwf	(_ADC_res+1)^0,f,c
  7180                           
  7181                           ;interrupt.c: 111:         if(ADC_res > therm_pressure){
  7182  00012E  044F               	decf	_ADC_res^0,w,c
  7183  000130  0E04               	movlw	4
  7184  000132  5850               	subwfb	(_ADC_res+1)^0,w,c
  7185  000134  A0D8               	btfss	status,0,c
  7186  000136  EF9F  F000         	goto	i2u289_41
  7187  00013A  EFA2  F000         	goto	i2u289_40
  7188  00013E                     i2u289_41:
  7189  00013E  FFFF               	dw	65535	; assembler added errata NOP
  7190  000140  EFA9  F000         	goto	i2l3596
  7191  000144                     i2u289_40:
  7192  000144  FFFF               	dw	65535	; assembler added errata NOP
  7193  000146                     
  7194                           ;interrupt.c: 113:             setTouchRel();
  7195  000146  EC7A  F013         	call	_setTouchRel	;wreg free
  7196                           
  7197                           ;interrupt.c: 114:             setThermRel();
  7198  00014A  EC7F  F013         	call	_setThermRel	;wreg free
  7199                           
  7200                           ;interrupt.c: 115:         }else if(ADC_res > touch_pressure){
  7201  00014E  EFB8  F000         	goto	i2l3600
  7202  000152                     i2l3596:
  7203  000152  FFFF               	dw	65535	; assembler added errata NOP
  7204  000154  044F               	decf	_ADC_res^0,w,c
  7205  000156  0E02               	movlw	2
  7206  000158  5850               	subwfb	(_ADC_res+1)^0,w,c
  7207  00015A  A0D8               	btfss	status,0,c
  7208  00015C  EFB2  F000         	goto	i2u290_41
  7209  000160  EFB5  F000         	goto	i2u290_40
  7210  000164                     i2u290_41:
  7211  000164  FFFF               	dw	65535	; assembler added errata NOP
  7212  000166  EFB8  F000         	goto	i2l3600
  7213  00016A                     i2u290_40:
  7214  00016A  FFFF               	dw	65535	; assembler added errata NOP
  7215  00016C                     
  7216                           ;interrupt.c: 117:             setTouchRel();
  7217  00016C  EC7A  F013         	call	_setTouchRel	;wreg free
  7218  000170                     i2l3600:
  7219  000170  FFFF               	dw	65535	; assembler added errata NOP
  7220                           
  7221                           ;interrupt.c: 122:     if(PIR1bits.RC1IF){
  7222  000172  AA9E               	btfss	158,5,c	;volatile
  7223  000174  EFBE  F000         	goto	i2u291_41
  7224  000178  EFC1  F000         	goto	i2u291_40
  7225  00017C                     i2u291_41:
  7226  00017C  FFFF               	dw	65535	; assembler added errata NOP
  7227  00017E  EFC8  F000         	goto	i2l477
  7228  000182                     i2u291_40:
  7229  000182  FFFF               	dw	65535	; assembler added errata NOP
  7230  000184                     
  7231                           ;interrupt.c: 123:         PIR1bits.RC1IF = 0;
  7232  000184  9A9E               	bcf	158,5,c	;volatile
  7233                           
  7234                           ;interrupt.c: 126:         unsigned char temp = RCREG1;
  7235  000186  CFAE F011          	movff	4014,isr@temp	;volatile
  7236  00018A                     
  7237                           ;interrupt.c: 128:         storeData(temp);
  7238  00018A  5011               	movf	isr@temp^0,w,c
  7239  00018C  EC75  F009         	call	i2_storeData
  7240  000190                     i2l477:
  7241  000190  FFFF               	dw	65535	; assembler added errata NOP
  7242  000192  C010  FFF4         	movff	??_isr+5,prodh
  7243  000196  C00F  FFF3         	movff	??_isr+4,prodl
  7244  00019A  C00E  FFDA         	movff	??_isr+3,fsr2h
  7245  00019E  C00D  FFD9         	movff	??_isr+2,fsr2l
  7246  0001A2  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7247  0001A4  0011               	retfie		f
  7248  0001A6  FFFF               	dw	65535	; errata NOP
  7249  0001A8                     __end_of_isr:
  7250                           	callstack 0
  7251                           
  7252 ;; *************** function i2_storeData *****************
  7253 ;; Defined at:
  7254 ;;		line 167 in file "usart.c"
  7255 ;; Parameters:    Size  Location     Type
  7256 ;;  data            1    wreg     unsigned char 
  7257 ;; Auto vars:     Size  Location     Type
  7258 ;;  data            1    9[COMRAM] unsigned char 
  7259 ;; Return value:  Size  Location     Type
  7260 ;;                  1    wreg      void 
  7261 ;; Registers used:
  7262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7263 ;; Tracked objects:
  7264 ;;		On entry : 0/0
  7265 ;;		On exit  : 0/0
  7266 ;;		Unchanged: 0/0
  7267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7268 ;;      Params:         0       0       0       0       0       0       0
  7269 ;;      Locals:         1       0       0       0       0       0       0
  7270 ;;      Temps:          2       0       0       0       0       0       0
  7271 ;;      Totals:         3       0       0       0       0       0       0
  7272 ;;Total ram usage:        3 bytes
  7273 ;; Hardware stack levels used:    1
  7274 ;; Hardware stack levels required when called:    2
  7275 ;; This function calls:
  7276 ;;		i2_printError
  7277 ;; This function is called by:
  7278 ;;		_isr
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           	psect	text43
  7283  0012EA                     __ptext43:
  7284                           	callstack 0
  7285  0012EA                     i2_storeData:
  7286                           	callstack 0
  7287  0012EA  FFFF               	dw	65535	; assembler added errata NOP
  7288                           
  7289                           ;incstack = 0
  7290                           ;i2storeData@data stored from wreg
  7291  0012EC  6E0A               	movwf	i2storeData@data^0,c
  7292  0012EE                     
  7293                           ;usart.c: 169:     static unsigned char counter = 0;;usart.c: 170:     static unsigned c
      +                          har mexLength = 5;;usart.c: 171:     static unsigned char command;;usart.c: 172:     sta
      +                          tic unsigned char receivedMex[9];;usart.c: 176:     receivedMex[counter] = data;
  7294  0012EE  0E43               	movlw	low storeData@receivedMex
  7295  0012F0  245A               	addwf	storeData@counter^0,w,c
  7296  0012F2  6ED9               	movwf	fsr2l,c
  7297  0012F4  6ADA               	clrf	fsr2h,c
  7298  0012F6  0E00               	movlw	high storeData@receivedMex
  7299  0012F8  22DA               	addwfc	fsr2h,f,c
  7300  0012FA  C00A  FFDF         	movff	i2storeData@data,indf2
  7301  0012FE                     
  7302                           ;usart.c: 178:     counter++;
  7303  0012FE  2A5A               	incf	storeData@counter^0,f,c
  7304                           
  7305                           ;usart.c: 181:     switch(receivedMex[0]){
  7306  001300  EF91  F009         	goto	i2l3434
  7307  001304                     i2l3426:
  7308  001304  FFFF               	dw	65535	; assembler added errata NOP
  7309                           
  7310                           ;usart.c: 183:             mexLength = 5;
  7311  001306  0E05               	movlw	5
  7312  001308  6E6D               	movwf	storeData@mexLength^0,c
  7313                           
  7314                           ;usart.c: 184:             break;
  7315  00130A  EFAC  F009         	goto	i2l3436
  7316  00130E                     i2l3428:
  7317  00130E  FFFF               	dw	65535	; assembler added errata NOP
  7318                           
  7319                           ;usart.c: 186:             mexLength = 9;
  7320  001310  0E09               	movlw	9
  7321  001312  6E6D               	movwf	storeData@mexLength^0,c
  7322                           
  7323                           ;usart.c: 187:             break;
  7324  001314  EFAC  F009         	goto	i2l3436
  7325  001318                     i2l3430:
  7326  001318  FFFF               	dw	65535	; assembler added errata NOP
  7327                           
  7328                           ;usart.c: 189:             mexLength = 1;
  7329  00131A  0E01               	movlw	1
  7330  00131C  6E6D               	movwf	storeData@mexLength^0,c
  7331                           
  7332                           ;usart.c: 190:             break;
  7333  00131E  EFAC  F009         	goto	i2l3436
  7334  001322                     i2l3434:
  7335  001322  FFFF               	dw	65535	; assembler added errata NOP
  7336  001324  5043               	movf	storeData@receivedMex^0,w,c
  7337  001326  6E08               	movwf	??i2_storeData^0,c
  7338  001328  6A09               	clrf	(??i2_storeData+1)^0,c
  7339                           
  7340                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7341                           ; Switch size 1, requested type "simple"
  7342                           ; Number of cases is 1, Range of values is 0 to 0
  7343                           ; switch strategies available:
  7344                           ; Name         Instructions Cycles
  7345                           ; simple_byte            4     3 (average)
  7346                           ;	Chosen strategy is simple_byte
  7347  00132A  5009               	movf	(??i2_storeData+1)^0,w,c
  7348  00132C  0A00               	xorlw	0	; case 0
  7349  00132E  B4D8               	btfsc	status,2,c
  7350  001330  EF9C  F009         	goto	i2l4814
  7351  001334  EFAC  F009         	goto	i2l3436
  7352  001338                     i2l4814:
  7353  001338  FFFF               	dw	65535	; assembler added errata NOP
  7354                           
  7355                           ; Switch size 1, requested type "simple"
  7356                           ; Number of cases is 3, Range of values is 0 to 2
  7357                           ; switch strategies available:
  7358                           ; Name         Instructions Cycles
  7359                           ; simple_byte           10     6 (average)
  7360                           ;	Chosen strategy is simple_byte
  7361  00133A  5008               	movf	??i2_storeData^0,w,c
  7362  00133C  0A00               	xorlw	0	; case 0
  7363  00133E  B4D8               	btfsc	status,2,c
  7364  001340  EF82  F009         	goto	i2l3426
  7365  001344  0A01               	xorlw	1	; case 1
  7366  001346  B4D8               	btfsc	status,2,c
  7367  001348  EF87  F009         	goto	i2l3428
  7368  00134C  0A03               	xorlw	3	; case 2
  7369  00134E  B4D8               	btfsc	status,2,c
  7370  001350  EF8C  F009         	goto	i2l3430
  7371  001354  EFAC  F009         	goto	i2l3436
  7372  001358                     i2l3436:
  7373  001358  FFFF               	dw	65535	; assembler added errata NOP
  7374                           
  7375                           ;usart.c: 197:     if(counter >= mexLength){
  7376  00135A  506D               	movf	storeData@mexLength^0,w,c
  7377  00135C  5C5A               	subwf	storeData@counter^0,w,c
  7378  00135E  A0D8               	btfss	status,0,c
  7379  001360  EFB4  F009         	goto	i2u267_41
  7380  001364  EFB7  F009         	goto	i2u267_40
  7381  001368                     i2u267_41:
  7382  001368  FFFF               	dw	65535	; assembler added errata NOP
  7383  00136A  EFA8  F00A         	goto	i2l603
  7384  00136E                     i2u267_40:
  7385  00136E  FFFF               	dw	65535	; assembler added errata NOP
  7386  001370                     
  7387                           ;usart.c: 198:         counter = 0;
  7388  001370  0E00               	movlw	0
  7389  001372  6E5A               	movwf	storeData@counter^0,c
  7390                           
  7391                           ;usart.c: 201:         switch(receivedMex[0]){
  7392  001374  EF8D  F00A         	goto	i2l3472
  7393  001378                     i2l3440:
  7394  001378  FFFF               	dw	65535	; assembler added errata NOP
  7395                           
  7396                           ;usart.c: 203:                 dataSequence[dataCounter].feederLine = receivedMex[1];
  7397  00137A  505D               	movf	_dataCounter^0,w,c
  7398  00137C  0D04               	mullw	4
  7399  00137E  0ECA               	movlw	low _dataSequence
  7400  001380  24F3               	addwf	243,w,c
  7401  001382  6ED9               	movwf	fsr2l,c
  7402  001384  0E00               	movlw	high _dataSequence
  7403  001386  20F4               	addwfc	prodh,w,c
  7404  001388  6EDA               	movwf	fsr2h,c
  7405  00138A  C044  FFDF         	movff	storeData@receivedMex+1,indf2
  7406                           
  7407                           ;usart.c: 204:                 dataSequence[dataCounter].posX = receivedMex[2] * 5;
  7408  00138E  505D               	movf	_dataCounter^0,w,c
  7409  001390  0D04               	mullw	4
  7410  001392  0ECB               	movlw	low (_dataSequence+1)
  7411  001394  24F3               	addwf	243,w,c
  7412  001396  6ED9               	movwf	fsr2l,c
  7413  001398  0E00               	movlw	high (_dataSequence+1)
  7414  00139A  20F4               	addwfc	prodh,w,c
  7415  00139C  6EDA               	movwf	fsr2h,c
  7416  00139E  5045               	movf	(storeData@receivedMex+2)^0,w,c
  7417  0013A0  0D05               	mullw	5
  7418  0013A2  CFF3 FFDF          	movff	prodl,indf2
  7419                           
  7420                           ;usart.c: 205:                 dataSequence[dataCounter].posY = receivedMex[3] * 5;
  7421  0013A6  505D               	movf	_dataCounter^0,w,c
  7422  0013A8  0D04               	mullw	4
  7423  0013AA  0ECC               	movlw	low (_dataSequence+2)
  7424  0013AC  24F3               	addwf	243,w,c
  7425  0013AE  6ED9               	movwf	fsr2l,c
  7426  0013B0  0E00               	movlw	high (_dataSequence+2)
  7427  0013B2  20F4               	addwfc	prodh,w,c
  7428  0013B4  6EDA               	movwf	fsr2h,c
  7429  0013B6  5046               	movf	(storeData@receivedMex+3)^0,w,c
  7430  0013B8  0D05               	mullw	5
  7431  0013BA  CFF3 FFDF          	movff	prodl,indf2
  7432                           
  7433                           ;usart.c: 206:                 dataSequence[dataCounter].rotation = receivedMex[4];
  7434  0013BE  505D               	movf	_dataCounter^0,w,c
  7435  0013C0  0D04               	mullw	4
  7436  0013C2  0ECD               	movlw	low (_dataSequence+3)
  7437  0013C4  24F3               	addwf	243,w,c
  7438  0013C6  6ED9               	movwf	fsr2l,c
  7439  0013C8  0E00               	movlw	high (_dataSequence+3)
  7440  0013CA  20F4               	addwfc	prodh,w,c
  7441  0013CC  6EDA               	movwf	fsr2h,c
  7442  0013CE  C047  FFDF         	movff	storeData@receivedMex+4,indf2
  7443                           
  7444                           ;usart.c: 209:                 if(dataSequence[dataCounter].posX > maxX ||
  7445  0013D2  505D               	movf	_dataCounter^0,w,c
  7446  0013D4  0D04               	mullw	4
  7447  0013D6  0ECB               	movlw	low (_dataSequence+1)
  7448  0013D8  24F3               	addwf	243,w,c
  7449  0013DA  6ED9               	movwf	fsr2l,c
  7450  0013DC  0E00               	movlw	high (_dataSequence+1)
  7451  0013DE  20F4               	addwfc	prodh,w,c
  7452  0013E0  6EDA               	movwf	fsr2h,c
  7453  0013E2  50DF               	movf	indf2,w,c
  7454  0013E4  6E08               	movwf	??i2_storeData^0,c
  7455  0013E6  6A09               	clrf	(??i2_storeData+1)^0,c
  7456  0013E8  5008               	movf	??i2_storeData^0,w,c
  7457  0013EA  5C6B               	subwf	_maxX^0,w,c
  7458  0013EC  5009               	movf	(??i2_storeData+1)^0,w,c
  7459  0013EE  586C               	subwfb	(_maxX+1)^0,w,c
  7460  0013F0  A0D8               	btfss	status,0,c
  7461  0013F2  EFFD  F009         	goto	i2u268_41
  7462  0013F6  EF00  F00A         	goto	i2u268_40
  7463  0013FA                     i2u268_41:
  7464  0013FA  FFFF               	dw	65535	; assembler added errata NOP
  7465  0013FC  EF17  F00A         	goto	i2l3444
  7466  001400                     i2u268_40:
  7467  001400  FFFF               	dw	65535	; assembler added errata NOP
  7468  001402  505D               	movf	_dataCounter^0,w,c
  7469  001404  0D04               	mullw	4
  7470  001406  0ECC               	movlw	low (_dataSequence+2)
  7471  001408  24F3               	addwf	243,w,c
  7472  00140A  6ED9               	movwf	fsr2l,c
  7473  00140C  0E00               	movlw	high (_dataSequence+2)
  7474  00140E  20F4               	addwfc	prodh,w,c
  7475  001410  6EDA               	movwf	fsr2h,c
  7476  001412  50DF               	movf	indf2,w,c
  7477  001414  6E08               	movwf	??i2_storeData^0,c
  7478  001416  5008               	movf	??i2_storeData^0,w,c
  7479  001418  5C69               	subwf	_maxY^0,w,c
  7480  00141A  0E00               	movlw	0
  7481  00141C  586A               	subwfb	(_maxY+1)^0,w,c
  7482  00141E  B0D8               	btfsc	status,0,c
  7483  001420  EF14  F00A         	goto	i2u269_41
  7484  001424  EF17  F00A         	goto	i2u269_40
  7485  001428                     i2u269_41:
  7486  001428  FFFF               	dw	65535	; assembler added errata NOP
  7487  00142A  EF1D  F00A         	goto	i2l3446
  7488  00142E                     i2u269_40:
  7489  00142E                     i2l3444:
  7490  00142E  FFFF               	dw	65535	; assembler added errata NOP
  7491                           
  7492                           ;usart.c: 210:                         dataSequence[dataCounter].posY > maxY){;usart.c: 
      +                          211:                     printError(5);
  7493  001430  0E05               	movlw	5
  7494  001432  EC97  F00E         	call	i2_printError
  7495                           
  7496                           ;usart.c: 212:                 }else{
  7497  001436  EFA8  F00A         	goto	i2l603
  7498  00143A                     i2l3446:
  7499  00143A  FFFF               	dw	65535	; assembler added errata NOP
  7500                           
  7501                           ;usart.c: 213:                     dataCounter++;
  7502  00143C  2A5D               	incf	_dataCounter^0,f,c
  7503  00143E  EFA8  F00A         	goto	i2l603
  7504  001442                     i2l596:
  7505  001442  FFFF               	dw	65535	; assembler added errata NOP
  7506                           
  7507                           ;usart.c: 218:                 newSequenceData.L = receivedMex[1];
  7508  001444  C044  F0DE         	movff	storeData@receivedMex+1,_newSequenceData
  7509                           
  7510                           ;usart.c: 219:                 newSequenceData.W = receivedMex[2];
  7511  001448  C045  F0DF         	movff	storeData@receivedMex+2,_newSequenceData+1
  7512  00144C                     
  7513                           ;usart.c: 220:                 newSequenceData.init_posX = receivedMex[3] * 5;
  7514  00144C  5046               	movf	(storeData@receivedMex+3)^0,w,c
  7515  00144E  0D05               	mullw	5
  7516  001450  CFF3 F0E0          	movff	prodl,_newSequenceData+2
  7517                           
  7518                           ;usart.c: 221:                 newSequenceData.init_posY = receivedMex[4] * 5;
  7519  001454  5047               	movf	(storeData@receivedMex+4)^0,w,c
  7520  001456  0D05               	mullw	5
  7521  001458  CFF3 F0E1          	movff	prodl,_newSequenceData+3
  7522  00145C                     
  7523                           ;usart.c: 222:                 newSequenceData.init_rot = receivedMex[5];
  7524  00145C  C048  F0E2         	movff	storeData@receivedMex+5,_newSequenceData+4
  7525                           
  7526                           ;usart.c: 223:                 newSequenceData.end_posX = receivedMex[6] * 5;
  7527  001460  5049               	movf	(storeData@receivedMex+6)^0,w,c
  7528  001462  0D05               	mullw	5
  7529  001464  CFF3 F0E3          	movff	prodl,_newSequenceData+5
  7530                           
  7531                           ;usart.c: 224:                 newSequenceData.end_posY = receivedMex[7] * 5;
  7532  001468  504A               	movf	(storeData@receivedMex+7)^0,w,c
  7533  00146A  0D05               	mullw	5
  7534  00146C  CFF3 F0E4          	movff	prodl,_newSequenceData+6
  7535  001470                     
  7536                           ;usart.c: 225:                 newSequenceData.end_rot = receivedMex[8];
  7537  001470  C04B  F0E5         	movff	storeData@receivedMex+8,_newSequenceData+7
  7538  001474                     
  7539                           ;usart.c: 228:                 if(newSequenceData.init_posX > maxX ||
  7540  001474  0100               	movlb	0	; () banked
  7541  001476  51E0               	movf	(_newSequenceData+2)& (0+255),w,b
  7542  001478  6E08               	movwf	??i2_storeData^0,c
  7543  00147A  6A09               	clrf	(??i2_storeData+1)^0,c
  7544  00147C  5008               	movf	??i2_storeData^0,w,c
  7545  00147E  5C6B               	subwf	_maxX^0,w,c
  7546  001480  5009               	movf	(??i2_storeData+1)^0,w,c
  7547  001482  586C               	subwfb	(_maxX+1)^0,w,c
  7548  001484  A0D8               	btfss	status,0,c
  7549  001486  EF47  F00A         	goto	i2u270_41
  7550  00148A  EF4A  F00A         	goto	i2u270_40
  7551  00148E                     i2u270_41:
  7552  00148E  FFFF               	dw	65535	; assembler added errata NOP
  7553  001490  EF77  F00A         	goto	i2l3462
  7554  001494                     i2u270_40:
  7555  001494  FFFF               	dw	65535	; assembler added errata NOP
  7556  001496                     
  7557                           ; BSR set to: 0
  7558  001496  51E3               	movf	(_newSequenceData+5)& (0+255),w,b
  7559  001498  6E08               	movwf	??i2_storeData^0,c
  7560  00149A  6A09               	clrf	(??i2_storeData+1)^0,c
  7561  00149C  5008               	movf	??i2_storeData^0,w,c
  7562  00149E  5C6B               	subwf	_maxX^0,w,c
  7563  0014A0  5009               	movf	(??i2_storeData+1)^0,w,c
  7564  0014A2  586C               	subwfb	(_maxX+1)^0,w,c
  7565  0014A4  A0D8               	btfss	status,0,c
  7566  0014A6  EF57  F00A         	goto	i2u271_41
  7567  0014AA  EF5A  F00A         	goto	i2u271_40
  7568  0014AE                     i2u271_41:
  7569  0014AE  FFFF               	dw	65535	; assembler added errata NOP
  7570  0014B0  EF77  F00A         	goto	i2l3462
  7571  0014B4                     i2u271_40:
  7572  0014B4  FFFF               	dw	65535	; assembler added errata NOP
  7573  0014B6                     
  7574                           ; BSR set to: 0
  7575  0014B6  51E1               	movf	(_newSequenceData+3)& (0+255),w,b
  7576  0014B8  6E08               	movwf	??i2_storeData^0,c
  7577  0014BA  6A09               	clrf	(??i2_storeData+1)^0,c
  7578  0014BC  5008               	movf	??i2_storeData^0,w,c
  7579  0014BE  5C69               	subwf	_maxY^0,w,c
  7580  0014C0  5009               	movf	(??i2_storeData+1)^0,w,c
  7581  0014C2  586A               	subwfb	(_maxY+1)^0,w,c
  7582  0014C4  A0D8               	btfss	status,0,c
  7583  0014C6  EF67  F00A         	goto	i2u272_41
  7584  0014CA  EF6A  F00A         	goto	i2u272_40
  7585  0014CE                     i2u272_41:
  7586  0014CE  FFFF               	dw	65535	; assembler added errata NOP
  7587  0014D0  EF77  F00A         	goto	i2l3462
  7588  0014D4                     i2u272_40:
  7589  0014D4  FFFF               	dw	65535	; assembler added errata NOP
  7590  0014D6                     
  7591                           ; BSR set to: 0
  7592  0014D6  51E4               	movf	(_newSequenceData+6)& (0+255),w,b
  7593  0014D8  5C69               	subwf	_maxY^0,w,c
  7594  0014DA  0E00               	movlw	0
  7595  0014DC  586A               	subwfb	(_maxY+1)^0,w,c
  7596  0014DE  B0D8               	btfsc	status,0,c
  7597  0014E0  EF74  F00A         	goto	i2u273_41
  7598  0014E4  EF77  F00A         	goto	i2u273_40
  7599  0014E8                     i2u273_41:
  7600  0014E8  FFFF               	dw	65535	; assembler added errata NOP
  7601  0014EA  EF7D  F00A         	goto	i2l3464
  7602  0014EE                     i2u273_40:
  7603  0014EE                     i2l3462:
  7604  0014EE  FFFF               	dw	65535	; assembler added errata NOP
  7605                           
  7606                           ; BSR set to: 0
  7607                           ;usart.c: 231:                         newSequenceData.end_posY > maxY){;usart.c: 232:  
      +                                             printError(5);
  7608  0014F0  0E05               	movlw	5
  7609  0014F2  EC97  F00E         	call	i2_printError
  7610                           
  7611                           ;usart.c: 233:                 }else{
  7612  0014F6  EFA8  F00A         	goto	i2l603
  7613  0014FA                     i2l3464:
  7614  0014FA  FFFF               	dw	65535	; assembler added errata NOP
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;usart.c: 234:                     _newSequence = 1;
  7618  0014FC  0E01               	movlw	1
  7619  0014FE  6E5B               	movwf	__newSequence^0,c
  7620  001500  EFA8  F00A         	goto	i2l603
  7621  001504                     i2l3466:
  7622  001504  FFFF               	dw	65535	; assembler added errata NOP
  7623                           
  7624                           ;usart.c: 239:                 _fatalError = 1;
  7625  001506  0E01               	movlw	1
  7626  001508  6E5C               	movwf	__fatalError^0,c
  7627                           
  7628                           ;usart.c: 240:                 break;
  7629  00150A  EFA8  F00A         	goto	i2l603
  7630  00150E                     i2l3468:
  7631  00150E  FFFF               	dw	65535	; assembler added errata NOP
  7632                           
  7633                           ;usart.c: 243:                 printError(8);
  7634  001510  0E08               	movlw	8
  7635  001512  EC97  F00E         	call	i2_printError
  7636                           
  7637                           ;usart.c: 244:                 break;
  7638  001516  EFA8  F00A         	goto	i2l603
  7639  00151A                     i2l3472:
  7640  00151A  FFFF               	dw	65535	; assembler added errata NOP
  7641  00151C  5043               	movf	storeData@receivedMex^0,w,c
  7642  00151E  6E08               	movwf	??i2_storeData^0,c
  7643  001520  6A09               	clrf	(??i2_storeData+1)^0,c
  7644                           
  7645                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7646                           ; Switch size 1, requested type "simple"
  7647                           ; Number of cases is 1, Range of values is 0 to 0
  7648                           ; switch strategies available:
  7649                           ; Name         Instructions Cycles
  7650                           ; simple_byte            4     3 (average)
  7651                           ;	Chosen strategy is simple_byte
  7652  001522  5009               	movf	(??i2_storeData+1)^0,w,c
  7653  001524  0A00               	xorlw	0	; case 0
  7654  001526  B4D8               	btfsc	status,2,c
  7655  001528  EF98  F00A         	goto	i2l4816
  7656  00152C  EF87  F00A         	goto	i2l3468
  7657  001530                     i2l4816:
  7658  001530  FFFF               	dw	65535	; assembler added errata NOP
  7659                           
  7660                           ; Switch size 1, requested type "simple"
  7661                           ; Number of cases is 3, Range of values is 0 to 2
  7662                           ; switch strategies available:
  7663                           ; Name         Instructions Cycles
  7664                           ; simple_byte           10     6 (average)
  7665                           ;	Chosen strategy is simple_byte
  7666  001532  5008               	movf	??i2_storeData^0,w,c
  7667  001534  0A00               	xorlw	0	; case 0
  7668  001536  B4D8               	btfsc	status,2,c
  7669  001538  EFBC  F009         	goto	i2l3440
  7670  00153C  0A01               	xorlw	1	; case 1
  7671  00153E  B4D8               	btfsc	status,2,c
  7672  001540  EF21  F00A         	goto	i2l596
  7673  001544  0A03               	xorlw	3	; case 2
  7674  001546  B4D8               	btfsc	status,2,c
  7675  001548  EF82  F00A         	goto	i2l3466
  7676  00154C  EF87  F00A         	goto	i2l3468
  7677  001550                     i2l603:
  7678  001550  FFFF               	dw	65535	; assembler added errata NOP
  7679  001552  0012               	return		;funcret
  7680  001554  FFFF               	dw	65535	; errata NOP
  7681  001556                     __end_ofi2_storeData:
  7682                           	callstack 0
  7683                           
  7684 ;; *************** function _writeTM0 *****************
  7685 ;; Defined at:
  7686 ;;		line 25 in file "motors.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;		None
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;		None
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  1    wreg      void 
  7693 ;; Registers used:
  7694 ;;		wreg, status,2
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7700 ;;      Params:         0       0       0       0       0       0       0
  7701 ;;      Locals:         0       0       0       0       0       0       0
  7702 ;;      Temps:          0       0       0       0       0       0       0
  7703 ;;      Totals:         0       0       0       0       0       0       0
  7704 ;;Total ram usage:        0 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; This function calls:
  7707 ;;		Nothing
  7708 ;; This function is called by:
  7709 ;;		_isr
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           	psect	text44
  7714  002662                     __ptext44:
  7715                           	callstack 0
  7716  002662                     _writeTM0:
  7717                           	callstack 0
  7718  002662  FFFF               	dw	65535	; assembler added errata NOP
  7719  002664                     
  7720                           ;motors.c: 26:     tm0Error = 1;
  7721  002664  0E00               	movlw	0
  7722  002666  6E56               	movwf	(_tm0Error+1)^0,c
  7723  002668  0E01               	movlw	1
  7724  00266A  6E55               	movwf	_tm0Error^0,c
  7725  00266C  0012               	return		;funcret
  7726  00266E  FFFF               	dw	65535	; errata NOP
  7727  002670                     __end_of_writeTM0:
  7728                           	callstack 0
  7729                           
  7730 ;; *************** function _whatsTM0Limit *****************
  7731 ;; Defined at:
  7732 ;;		line 39 in file "motors.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;		None
  7735 ;; Auto vars:     Size  Location     Type
  7736 ;;		None
  7737 ;; Return value:  Size  Location     Type
  7738 ;;                  1    wreg      unsigned char 
  7739 ;; Registers used:
  7740 ;;		wreg, status,2
  7741 ;; Tracked objects:
  7742 ;;		On entry : 0/0
  7743 ;;		On exit  : 0/0
  7744 ;;		Unchanged: 0/0
  7745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7746 ;;      Params:         0       0       0       0       0       0       0
  7747 ;;      Locals:         0       0       0       0       0       0       0
  7748 ;;      Temps:          0       0       0       0       0       0       0
  7749 ;;      Totals:         0       0       0       0       0       0       0
  7750 ;;Total ram usage:        0 bytes
  7751 ;; Hardware stack levels used:    1
  7752 ;; This function calls:
  7753 ;;		Nothing
  7754 ;; This function is called by:
  7755 ;;		_isr
  7756 ;; This function uses a non-reentrant model
  7757 ;;
  7758                           
  7759                           	psect	text45
  7760  002728                     __ptext45:
  7761                           	callstack 0
  7762  002728                     _whatsTM0Limit:
  7763                           	callstack 0
  7764  002728  FFFF               	dw	65535	; assembler added errata NOP
  7765  00272A                     
  7766                           ;motors.c: 40:     return(tm0Limit);
  7767  00272A  5062               	movf	_tm0Limit^0,w,c
  7768  00272C  0012               	return		;funcret
  7769  00272E  FFFF               	dw	65535	; errata NOP
  7770  002730                     __end_of_whatsTM0Limit:
  7771                           	callstack 0
  7772                           
  7773 ;; *************** function _toggleStep *****************
  7774 ;; Defined at:
  7775 ;;		line 93 in file "timer.c"
  7776 ;; Parameters:    Size  Location     Type
  7777 ;;		None
  7778 ;; Auto vars:     Size  Location     Type
  7779 ;;		None
  7780 ;; Return value:  Size  Location     Type
  7781 ;;                  1    wreg      void 
  7782 ;; Registers used:
  7783 ;;		wreg, status,2
  7784 ;; Tracked objects:
  7785 ;;		On entry : 0/0
  7786 ;;		On exit  : 0/0
  7787 ;;		Unchanged: 0/0
  7788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7789 ;;      Params:         0       0       0       0       0       0       0
  7790 ;;      Locals:         0       0       0       0       0       0       0
  7791 ;;      Temps:          0       0       0       0       0       0       0
  7792 ;;      Totals:         0       0       0       0       0       0       0
  7793 ;;Total ram usage:        0 bytes
  7794 ;; Hardware stack levels used:    1
  7795 ;; This function calls:
  7796 ;;		Nothing
  7797 ;; This function is called by:
  7798 ;;		_isr
  7799 ;; This function uses a non-reentrant model
  7800 ;;
  7801                           
  7802                           	psect	text46
  7803  0026EA                     __ptext46:
  7804                           	callstack 0
  7805  0026EA                     _toggleStep:
  7806                           	callstack 0
  7807  0026EA  FFFF               	dw	65535	; assembler added errata NOP
  7808  0026EC                     
  7809                           ;timer.c: 94:     stepToggle = 1;
  7810  0026EC  0E01               	movlw	1
  7811  0026EE  6E57               	movwf	_stepToggle^0,c	;volatile
  7812  0026F0  0012               	return		;funcret
  7813  0026F2  FFFF               	dw	65535	; errata NOP
  7814  0026F4                     __end_of_toggleStep:
  7815                           	callstack 0
  7816                           
  7817 ;; *************** function _setTouchRel *****************
  7818 ;; Defined at:
  7819 ;;		line 86 in file "adc.c"
  7820 ;; Parameters:    Size  Location     Type
  7821 ;;		None
  7822 ;; Auto vars:     Size  Location     Type
  7823 ;;		None
  7824 ;; Return value:  Size  Location     Type
  7825 ;;                  1    wreg      void 
  7826 ;; Registers used:
  7827 ;;		wreg, status,2
  7828 ;; Tracked objects:
  7829 ;;		On entry : 0/0
  7830 ;;		On exit  : 0/0
  7831 ;;		Unchanged: 0/0
  7832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7833 ;;      Params:         0       0       0       0       0       0       0
  7834 ;;      Locals:         0       0       0       0       0       0       0
  7835 ;;      Temps:          0       0       0       0       0       0       0
  7836 ;;      Totals:         0       0       0       0       0       0       0
  7837 ;;Total ram usage:        0 bytes
  7838 ;; Hardware stack levels used:    1
  7839 ;; This function calls:
  7840 ;;		Nothing
  7841 ;; This function is called by:
  7842 ;;		_isr
  7843 ;; This function uses a non-reentrant model
  7844 ;;
  7845                           
  7846                           	psect	text47
  7847  0026F4                     __ptext47:
  7848                           	callstack 0
  7849  0026F4                     _setTouchRel:
  7850                           	callstack 0
  7851  0026F4  FFFF               	dw	65535	; assembler added errata NOP
  7852  0026F6                     
  7853                           ;adc.c: 87:     touch_rel = 1;
  7854  0026F6  0E01               	movlw	1
  7855  0026F8  6E61               	movwf	_touch_rel^0,c	;volatile
  7856  0026FA  0012               	return		;funcret
  7857  0026FC  FFFF               	dw	65535	; errata NOP
  7858  0026FE                     __end_of_setTouchRel:
  7859                           	callstack 0
  7860                           
  7861 ;; *************** function _setThermRel *****************
  7862 ;; Defined at:
  7863 ;;		line 79 in file "adc.c"
  7864 ;; Parameters:    Size  Location     Type
  7865 ;;		None
  7866 ;; Auto vars:     Size  Location     Type
  7867 ;;		None
  7868 ;; Return value:  Size  Location     Type
  7869 ;;                  1    wreg      void 
  7870 ;; Registers used:
  7871 ;;		wreg, status,2
  7872 ;; Tracked objects:
  7873 ;;		On entry : 0/0
  7874 ;;		On exit  : 0/0
  7875 ;;		Unchanged: 0/0
  7876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7877 ;;      Params:         0       0       0       0       0       0       0
  7878 ;;      Locals:         0       0       0       0       0       0       0
  7879 ;;      Temps:          0       0       0       0       0       0       0
  7880 ;;      Totals:         0       0       0       0       0       0       0
  7881 ;;Total ram usage:        0 bytes
  7882 ;; Hardware stack levels used:    1
  7883 ;; This function calls:
  7884 ;;		Nothing
  7885 ;; This function is called by:
  7886 ;;		_isr
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           	psect	text48
  7891  0026FE                     __ptext48:
  7892                           	callstack 0
  7893  0026FE                     _setThermRel:
  7894                           	callstack 0
  7895  0026FE  FFFF               	dw	65535	; assembler added errata NOP
  7896  002700                     
  7897                           ;adc.c: 80:     therm_rel = 1;
  7898  002700  0E01               	movlw	1
  7899  002702  6E60               	movwf	_therm_rel^0,c	;volatile
  7900  002704  0012               	return		;funcret
  7901  002706  FFFF               	dw	65535	; errata NOP
  7902  002708                     __end_of_setThermRel:
  7903                           	callstack 0
  7904                           
  7905 ;; *************** function _retPeriod *****************
  7906 ;; Defined at:
  7907 ;;		line 101 in file "timer.c"
  7908 ;; Parameters:    Size  Location     Type
  7909 ;;		None
  7910 ;; Auto vars:     Size  Location     Type
  7911 ;;		None
  7912 ;; Return value:  Size  Location     Type
  7913 ;;                  2    0[COMRAM] unsigned int 
  7914 ;; Registers used:
  7915 ;;		None
  7916 ;; Tracked objects:
  7917 ;;		On entry : 0/0
  7918 ;;		On exit  : 0/0
  7919 ;;		Unchanged: 0/0
  7920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7921 ;;      Params:         2       0       0       0       0       0       0
  7922 ;;      Locals:         0       0       0       0       0       0       0
  7923 ;;      Temps:          0       0       0       0       0       0       0
  7924 ;;      Totals:         2       0       0       0       0       0       0
  7925 ;;Total ram usage:        2 bytes
  7926 ;; Hardware stack levels used:    1
  7927 ;; This function calls:
  7928 ;;		Nothing
  7929 ;; This function is called by:
  7930 ;;		_isr
  7931 ;; This function uses a non-reentrant model
  7932 ;;
  7933                           
  7934                           	psect	text49
  7935  002670                     __ptext49:
  7936                           	callstack 0
  7937  002670                     _retPeriod:
  7938                           	callstack 0
  7939  002670  FFFF               	dw	65535	; assembler added errata NOP
  7940  002672                     
  7941                           ;timer.c: 102:     return pwmPeriod;
  7942  002672  C0C6  F001         	movff	_pwmPeriod,?_retPeriod
  7943  002676  C0C7  F002         	movff	_pwmPeriod+1,?_retPeriod+1
  7944  00267A  0012               	return		;funcret
  7945  00267C  FFFF               	dw	65535	; errata NOP
  7946  00267E                     __end_of_retPeriod:
  7947                           	callstack 0
  7948                           
  7949 ;; *************** function _increaseStep *****************
  7950 ;; Defined at:
  7951 ;;		line 85 in file "timer.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;		None
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;		None
  7956 ;; Return value:  Size  Location     Type
  7957 ;;                  1    wreg      void 
  7958 ;; Registers used:
  7959 ;;		status,2, status,0
  7960 ;; Tracked objects:
  7961 ;;		On entry : 0/0
  7962 ;;		On exit  : 0/0
  7963 ;;		Unchanged: 0/0
  7964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7965 ;;      Params:         0       0       0       0       0       0       0
  7966 ;;      Locals:         0       0       0       0       0       0       0
  7967 ;;      Temps:          0       0       0       0       0       0       0
  7968 ;;      Totals:         0       0       0       0       0       0       0
  7969 ;;Total ram usage:        0 bytes
  7970 ;; Hardware stack levels used:    1
  7971 ;; This function calls:
  7972 ;;		Nothing
  7973 ;; This function is called by:
  7974 ;;		_isr
  7975 ;; This function uses a non-reentrant model
  7976 ;;
  7977                           
  7978                           	psect	text50
  7979  002730                     __ptext50:
  7980                           	callstack 0
  7981  002730                     _increaseStep:
  7982                           	callstack 0
  7983  002730  FFFF               	dw	65535	; assembler added errata NOP
  7984  002732                     
  7985                           ;timer.c: 86:     pwmStep++;
  7986  002732  2A58               	incf	_pwmStep^0,f,c	;volatile
  7987  002734  0012               	return		;funcret
  7988  002736  FFFF               	dw	65535	; errata NOP
  7989  002738                     __end_of_increaseStep:
  7990                           	callstack 0
  7991                           
  7992 ;; *************** function _fatalError *****************
  7993 ;; Defined at:
  7994 ;;		line 64 in file "usart.c"
  7995 ;; Parameters:    Size  Location     Type
  7996 ;;		None
  7997 ;; Auto vars:     Size  Location     Type
  7998 ;;		None
  7999 ;; Return value:  Size  Location     Type
  8000 ;;                  1    wreg      unsigned char 
  8001 ;; Registers used:
  8002 ;;		wreg, status,2
  8003 ;; Tracked objects:
  8004 ;;		On entry : 0/0
  8005 ;;		On exit  : 0/0
  8006 ;;		Unchanged: 0/0
  8007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8008 ;;      Params:         0       0       0       0       0       0       0
  8009 ;;      Locals:         0       0       0       0       0       0       0
  8010 ;;      Temps:          0       0       0       0       0       0       0
  8011 ;;      Totals:         0       0       0       0       0       0       0
  8012 ;;Total ram usage:        0 bytes
  8013 ;; Hardware stack levels used:    1
  8014 ;; This function calls:
  8015 ;;		Nothing
  8016 ;; This function is called by:
  8017 ;;		_isr
  8018 ;; This function uses a non-reentrant model
  8019 ;;
  8020                           
  8021                           	psect	text51
  8022  002738                     __ptext51:
  8023                           	callstack 0
  8024  002738                     _fatalError:
  8025                           	callstack 0
  8026  002738  FFFF               	dw	65535	; assembler added errata NOP
  8027  00273A                     
  8028                           ;usart.c: 65:     return _fatalError;
  8029  00273A  505C               	movf	__fatalError^0,w,c
  8030  00273C  0012               	return		;funcret
  8031  00273E  FFFF               	dw	65535	; errata NOP
  8032  002740                     __end_of_fatalError:
  8033                           	callstack 0
  8034                           
  8035 ;; *************** function _abortAll *****************
  8036 ;; Defined at:
  8037 ;;		line 833 in file "motors.c"
  8038 ;; Parameters:    Size  Location     Type
  8039 ;;		None
  8040 ;; Auto vars:     Size  Location     Type
  8041 ;;		None
  8042 ;; Return value:  Size  Location     Type
  8043 ;;                  1    wreg      void 
  8044 ;; Registers used:
  8045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8046 ;; Tracked objects:
  8047 ;;		On entry : 0/0
  8048 ;;		On exit  : 0/0
  8049 ;;		Unchanged: 0/0
  8050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8051 ;;      Params:         0       0       0       0       0       0       0
  8052 ;;      Locals:         0       0       0       0       0       0       0
  8053 ;;      Temps:          0       0       0       0       0       0       0
  8054 ;;      Totals:         0       0       0       0       0       0       0
  8055 ;;Total ram usage:        0 bytes
  8056 ;; Hardware stack levels used:    1
  8057 ;; Hardware stack levels required when called:    2
  8058 ;; This function calls:
  8059 ;;		i2_printError
  8060 ;; This function is called by:
  8061 ;;		_isr
  8062 ;; This function uses a non-reentrant model
  8063 ;;
  8064                           
  8065                           	psect	text52
  8066  002618                     __ptext52:
  8067                           	callstack 0
  8068  002618                     _abortAll:
  8069                           	callstack 0
  8070  002618  FFFF               	dw	65535	; assembler added errata NOP
  8071  00261A                     
  8072                           ;motors.c: 841:     printError(7);
  8073  00261A  0E07               	movlw	7
  8074  00261C  EC97  F00E         	call	i2_printError
  8075  002620                     i2l250:
  8076  002620  FFFF               	dw	65535	; assembler added errata NOP
  8077  002622  EF10  F013         	goto	i2l250
  8078  002626  0012               	return		;funcret
  8079  002628  FFFF               	dw	65535	; errata NOP
  8080  00262A                     __end_of_abortAll:
  8081                           	callstack 0
  8082                           
  8083 ;; *************** function i2_printError *****************
  8084 ;; Defined at:
  8085 ;;		line 114 in file "usart.c"
  8086 ;; Parameters:    Size  Location     Type
  8087 ;;  errCode         1    wreg     unsigned char 
  8088 ;; Auto vars:     Size  Location     Type
  8089 ;;  errCode         1    6[COMRAM] unsigned char 
  8090 ;; Return value:  Size  Location     Type
  8091 ;;                  1    wreg      void 
  8092 ;; Registers used:
  8093 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8094 ;; Tracked objects:
  8095 ;;		On entry : 0/0
  8096 ;;		On exit  : 0/0
  8097 ;;		Unchanged: 0/0
  8098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8099 ;;      Params:         0       0       0       0       0       0       0
  8100 ;;      Locals:         1       0       0       0       0       0       0
  8101 ;;      Temps:          2       0       0       0       0       0       0
  8102 ;;      Totals:         3       0       0       0       0       0       0
  8103 ;;Total ram usage:        3 bytes
  8104 ;; Hardware stack levels used:    1
  8105 ;; Hardware stack levels required when called:    1
  8106 ;; This function calls:
  8107 ;;		i2_uartTx
  8108 ;; This function is called by:
  8109 ;;		_abortAll
  8110 ;;		i2_storeData
  8111 ;; This function uses a non-reentrant model
  8112 ;;
  8113                           
  8114                           	psect	text53
  8115  001D2E                     __ptext53:
  8116                           	callstack 0
  8117  001D2E                     i2_printError:
  8118                           	callstack 0
  8119  001D2E  FFFF               	dw	65535	; assembler added errata NOP
  8120                           
  8121                           ;incstack = 0
  8122                           ;i2printError@errCode stored from wreg
  8123  001D30  6E07               	movwf	i2printError@errCode^0,c
  8124  001D32                     
  8125                           ;usart.c: 116:     switch(errCode){
  8126  001D32  EFF3  F00E         	goto	i2l3088
  8127  001D36                     i2l3070:
  8128  001D36  FFFF               	dw	65535	; assembler added errata NOP
  8129                           
  8130                           ;usart.c: 118:             uartTx(&errString_Feed[0], sizeof(errString_Feed));
  8131  001D38  0E90               	movlw	low _errString_Feed
  8132  001D3A  6E01               	movwf	i2uartTx@ptr^0,c
  8133  001D3C  0E00               	movlw	high _errString_Feed
  8134  001D3E  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8135  001D40  0E1E               	movlw	30
  8136  001D42  6E03               	movwf	i2uartTx@length^0,c
  8137  001D44  EC19  F012         	call	i2_uartTx	;wreg free
  8138                           
  8139                           ;usart.c: 119:             break;
  8140  001D48  EF22  F00F         	goto	i2l562
  8141  001D4C                     i2l3072:
  8142  001D4C  FFFF               	dw	65535	; assembler added errata NOP
  8143                           
  8144                           ;usart.c: 121:             uartTx(&errString_ZEND[0], sizeof(errString_ZEND));
  8145  001D4E  0E5E               	movlw	low _errString_ZEND
  8146  001D50  6E01               	movwf	i2uartTx@ptr^0,c
  8147  001D52  0E01               	movlw	high _errString_ZEND
  8148  001D54  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8149  001D56  0E29               	movlw	41
  8150  001D58  6E03               	movwf	i2uartTx@length^0,c
  8151  001D5A  EC19  F012         	call	i2_uartTx	;wreg free
  8152                           
  8153                           ;usart.c: 122:             break;
  8154  001D5E  EF22  F00F         	goto	i2l562
  8155  001D62                     i2l3074:
  8156  001D62  FFFF               	dw	65535	; assembler added errata NOP
  8157                           
  8158                           ;usart.c: 124:             uartTx(&errString_Reset[0], sizeof(errString_Reset));
  8159  001D64  0E87               	movlw	low _errString_Reset
  8160  001D66  6E01               	movwf	i2uartTx@ptr^0,c
  8161  001D68  0E01               	movlw	high _errString_Reset
  8162  001D6A  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8163  001D6C  0E28               	movlw	40
  8164  001D6E  6E03               	movwf	i2uartTx@length^0,c
  8165  001D70  EC19  F012         	call	i2_uartTx	;wreg free
  8166                           
  8167                           ;usart.c: 125:             break;
  8168  001D74  EF22  F00F         	goto	i2l562
  8169  001D78                     i2l3076:
  8170  001D78  FFFF               	dw	65535	; assembler added errata NOP
  8171                           
  8172                           ;usart.c: 127:             uartTx(&errString_Point[0], sizeof(errString_Point));
  8173  001D7A  0E35               	movlw	low _errString_Point
  8174  001D7C  6E01               	movwf	i2uartTx@ptr^0,c
  8175  001D7E  0E01               	movlw	high _errString_Point
  8176  001D80  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8177  001D82  0E29               	movlw	41
  8178  001D84  6E03               	movwf	i2uartTx@length^0,c
  8179  001D86  EC19  F012         	call	i2_uartTx	;wreg free
  8180                           
  8181                           ;usart.c: 128:             break;
  8182  001D8A  EF22  F00F         	goto	i2l562
  8183  001D8E                     i2l3078:
  8184  001D8E  FFFF               	dw	65535	; assembler added errata NOP
  8185                           
  8186                           ;usart.c: 130:             uartTx(&errString_Bound[0], sizeof(errString_Bound));
  8187  001D90  0ED6               	movlw	low _errString_Bound
  8188  001D92  6E01               	movwf	i2uartTx@ptr^0,c
  8189  001D94  0E01               	movlw	high _errString_Bound
  8190  001D96  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8191  001D98  0E21               	movlw	33
  8192  001D9A  6E03               	movwf	i2uartTx@length^0,c
  8193  001D9C  EC19  F012         	call	i2_uartTx	;wreg free
  8194                           
  8195                           ;usart.c: 131:             break;
  8196  001DA0  EF22  F00F         	goto	i2l562
  8197  001DA4                     i2l3080:
  8198  001DA4  FFFF               	dw	65535	; assembler added errata NOP
  8199                           
  8200                           ;usart.c: 133:             uartTx(&errString_PointZ[0], sizeof(errString_PointZ));
  8201  001DA6  0E00               	movlw	low _errString_PointZ
  8202  001DA8  6E01               	movwf	i2uartTx@ptr^0,c
  8203  001DAA  0E01               	movlw	high _errString_PointZ
  8204  001DAC  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8205  001DAE  0E35               	movlw	53
  8206  001DB0  6E03               	movwf	i2uartTx@length^0,c
  8207  001DB2  EC19  F012         	call	i2_uartTx	;wreg free
  8208                           
  8209                           ;usart.c: 134:             break;
  8210  001DB6  EF22  F00F         	goto	i2l562
  8211  001DBA                     i2l3082:
  8212  001DBA  FFFF               	dw	65535	; assembler added errata NOP
  8213                           
  8214                           ;usart.c: 136:             uartTx(&errString_Fatal[0], sizeof(errString_Fatal));
  8215  001DBC  0EAF               	movlw	low _errString_Fatal
  8216  001DBE  6E01               	movwf	i2uartTx@ptr^0,c
  8217  001DC0  0E01               	movlw	high _errString_Fatal
  8218  001DC2  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8219  001DC4  0E27               	movlw	39
  8220  001DC6  6E03               	movwf	i2uartTx@length^0,c
  8221  001DC8  EC19  F012         	call	i2_uartTx	;wreg free
  8222                           
  8223                           ;usart.c: 137:             break;
  8224  001DCC  EF22  F00F         	goto	i2l562
  8225  001DD0                     i2l3084:
  8226  001DD0  FFFF               	dw	65535	; assembler added errata NOP
  8227                           
  8228                           ;usart.c: 139:             uartTx(&errString_Command[0], sizeof(errString_Command));
  8229  001DD2  0EAE               	movlw	low _errString_Command
  8230  001DD4  6E01               	movwf	i2uartTx@ptr^0,c
  8231  001DD6  0E00               	movlw	high _errString_Command
  8232  001DD8  6E02               	movwf	(i2uartTx@ptr+1)^0,c
  8233  001DDA  0E18               	movlw	24
  8234  001DDC  6E03               	movwf	i2uartTx@length^0,c
  8235  001DDE  EC19  F012         	call	i2_uartTx	;wreg free
  8236                           
  8237                           ;usart.c: 140:             break;
  8238  001DE2  EF22  F00F         	goto	i2l562
  8239  001DE6                     i2l3088:
  8240  001DE6  FFFF               	dw	65535	; assembler added errata NOP
  8241  001DE8  5007               	movf	i2printError@errCode^0,w,c
  8242  001DEA  6E05               	movwf	??i2_printError^0,c
  8243  001DEC  6A06               	clrf	(??i2_printError+1)^0,c
  8244                           
  8245                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8246                           ; Switch size 1, requested type "simple"
  8247                           ; Number of cases is 1, Range of values is 0 to 0
  8248                           ; switch strategies available:
  8249                           ; Name         Instructions Cycles
  8250                           ; simple_byte            4     3 (average)
  8251                           ;	Chosen strategy is simple_byte
  8252  001DEE  5006               	movf	(??i2_printError+1)^0,w,c
  8253  001DF0  0A00               	xorlw	0	; case 0
  8254  001DF2  B4D8               	btfsc	status,2,c
  8255  001DF4  EFFE  F00E         	goto	i2l4818
  8256  001DF8  EF22  F00F         	goto	i2l562
  8257  001DFC                     i2l4818:
  8258  001DFC  FFFF               	dw	65535	; assembler added errata NOP
  8259                           
  8260                           ; Switch size 1, requested type "simple"
  8261                           ; Number of cases is 8, Range of values is 1 to 8
  8262                           ; switch strategies available:
  8263                           ; Name         Instructions Cycles
  8264                           ; simple_byte           25    13 (average)
  8265                           ;	Chosen strategy is simple_byte
  8266  001DFE  5005               	movf	??i2_printError^0,w,c
  8267  001E00  0A01               	xorlw	1	; case 1
  8268  001E02  B4D8               	btfsc	status,2,c
  8269  001E04  EF9B  F00E         	goto	i2l3070
  8270  001E08  0A03               	xorlw	3	; case 2
  8271  001E0A  B4D8               	btfsc	status,2,c
  8272  001E0C  EFA6  F00E         	goto	i2l3072
  8273  001E10  0A01               	xorlw	1	; case 3
  8274  001E12  B4D8               	btfsc	status,2,c
  8275  001E14  EFB1  F00E         	goto	i2l3074
  8276  001E18  0A07               	xorlw	7	; case 4
  8277  001E1A  B4D8               	btfsc	status,2,c
  8278  001E1C  EFBC  F00E         	goto	i2l3076
  8279  001E20  0A01               	xorlw	1	; case 5
  8280  001E22  B4D8               	btfsc	status,2,c
  8281  001E24  EFC7  F00E         	goto	i2l3078
  8282  001E28  0A03               	xorlw	3	; case 6
  8283  001E2A  B4D8               	btfsc	status,2,c
  8284  001E2C  EFD2  F00E         	goto	i2l3080
  8285  001E30  0A01               	xorlw	1	; case 7
  8286  001E32  B4D8               	btfsc	status,2,c
  8287  001E34  EFDD  F00E         	goto	i2l3082
  8288  001E38  0A0F               	xorlw	15	; case 8
  8289  001E3A  B4D8               	btfsc	status,2,c
  8290  001E3C  EFE8  F00E         	goto	i2l3084
  8291  001E40  EF22  F00F         	goto	i2l562
  8292  001E44                     i2l562:
  8293  001E44  FFFF               	dw	65535	; assembler added errata NOP
  8294  001E46  0012               	return		;funcret
  8295  001E48  FFFF               	dw	65535	; errata NOP
  8296  001E4A                     __end_ofi2_printError:
  8297                           	callstack 0
  8298                           
  8299 ;; *************** function i2_uartTx *****************
  8300 ;; Defined at:
  8301 ;;		line 151 in file "usart.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;  ptr             2    0[COMRAM] PTR unsigned char 
  8304 ;;		 -> errString_Command(24), errString_Fatal(39), errString_PointZ(53), errString_Bound(33), 
  8305 ;;		 -> errString_Point(41), errString_Reset(40), errString_ZEND(41), errString_Feed(30), 
  8306 ;;  length          1    2[COMRAM] unsigned char 
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;  i               1    3[COMRAM] unsigned char 
  8309 ;; Return value:  Size  Location     Type
  8310 ;;                  1    wreg      void 
  8311 ;; Registers used:
  8312 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8313 ;; Tracked objects:
  8314 ;;		On entry : 0/0
  8315 ;;		On exit  : 0/0
  8316 ;;		Unchanged: 0/0
  8317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8318 ;;      Params:         3       0       0       0       0       0       0
  8319 ;;      Locals:         1       0       0       0       0       0       0
  8320 ;;      Temps:          0       0       0       0       0       0       0
  8321 ;;      Totals:         4       0       0       0       0       0       0
  8322 ;;Total ram usage:        4 bytes
  8323 ;; Hardware stack levels used:    1
  8324 ;; This function calls:
  8325 ;;		Nothing
  8326 ;; This function is called by:
  8327 ;;		i2_printError
  8328 ;; This function uses a non-reentrant model
  8329 ;;
  8330                           
  8331                           	psect	text54
  8332  002432                     __ptext54:
  8333                           	callstack 0
  8334  002432                     i2_uartTx:
  8335                           	callstack 0
  8336  002432  FFFF               	dw	65535	; assembler added errata NOP
  8337  002434                     
  8338                           ;usart.c: 151: void uartTx(unsigned char *ptr, unsigned char length);usart.c: 152: {;usa
      +                          rt.c: 154:     for(char i = 1; i < length; i++){
  8339  002434  0E01               	movlw	1
  8340  002436  6E04               	movwf	i2uartTx@i^0,c
  8341  002438  EF32  F012         	goto	i2l2778
  8342  00243C                     i2l2774:
  8343  00243C  FFFF               	dw	65535	; assembler added errata NOP
  8344                           
  8345                           ;usart.c: 156:         TXREG = *ptr;
  8346  00243E  C001  FFD9         	movff	i2uartTx@ptr,fsr2l
  8347  002442  C002  FFDA         	movff	i2uartTx@ptr+1,fsr2h
  8348  002446  50DF               	movf	indf2,w,c
  8349  002448  6EAD               	movwf	173,c	;volatile
  8350  00244A                     i2l567:
  8351  00244A  FFFF               	dw	65535	; assembler added errata NOP
  8352  00244C  A2AC               	btfss	172,1,c	;volatile
  8353  00244E  EF2B  F012         	goto	i2u193_41
  8354  002452  EF2E  F012         	goto	i2u193_40
  8355  002456                     i2u193_41:
  8356  002456  FFFF               	dw	65535	; assembler added errata NOP
  8357  002458  EF25  F012         	goto	i2l567
  8358  00245C                     i2u193_40:
  8359  00245C  FFFF               	dw	65535	; assembler added errata NOP
  8360  00245E                     
  8361                           ;usart.c: 160:         ptr++;
  8362  00245E  4A01               	infsnz	i2uartTx@ptr^0,f,c
  8363  002460  2A02               	incf	(i2uartTx@ptr+1)^0,f,c
  8364                           
  8365                           ;usart.c: 161:     }
  8366  002462  2A04               	incf	i2uartTx@i^0,f,c
  8367  002464                     i2l2778:
  8368  002464  FFFF               	dw	65535	; assembler added errata NOP
  8369  002466  5003               	movf	i2uartTx@length^0,w,c
  8370  002468  5C04               	subwf	i2uartTx@i^0,w,c
  8371  00246A  A0D8               	btfss	status,0,c
  8372  00246C  EF3A  F012         	goto	i2u194_41
  8373  002470  EF3D  F012         	goto	i2u194_40
  8374  002474                     i2u194_41:
  8375  002474  FFFF               	dw	65535	; assembler added errata NOP
  8376  002476  EF1E  F012         	goto	i2l2774
  8377  00247A                     i2u194_40:
  8378  00247A  FFFF               	dw	65535	; assembler added errata NOP
  8379  00247C  0012               	return		;funcret
  8380  00247E  FFFF               	dw	65535	; errata NOP
  8381  002480                     __end_ofi2_uartTx:
  8382                           	callstack 0
  8383                           
  8384                           	psect	rparam
  8385  0000                     
  8386                           	psect	temp
  8387  00006E                     btemp:
  8388                           	callstack 0
  8389  00006E                     	ds	1
  8390  0000                     int$flags	set	btemp
  8391  0000                     wtemp8	set	btemp+1
  8392  0000                     ttemp5	set	btemp+1
  8393  0000                     ttemp6	set	btemp+4
  8394  0000                     ttemp7	set	btemp+8
  8395                           
  8396                           	psect	idloc
  8397                           
  8398                           ;Config register IDLOC0 @ 0x200000
  8399                           ;	unspecified, using default values
  8400  200000                     	org	2097152
  8401  200000  FF                 	db	255
  8402                           
  8403                           ;Config register IDLOC1 @ 0x200001
  8404                           ;	unspecified, using default values
  8405  200001                     	org	2097153
  8406  200001  FF                 	db	255
  8407                           
  8408                           ;Config register IDLOC2 @ 0x200002
  8409                           ;	unspecified, using default values
  8410  200002                     	org	2097154
  8411  200002  FF                 	db	255
  8412                           
  8413                           ;Config register IDLOC3 @ 0x200003
  8414                           ;	unspecified, using default values
  8415  200003                     	org	2097155
  8416  200003  FF                 	db	255
  8417                           
  8418                           ;Config register IDLOC4 @ 0x200004
  8419                           ;	unspecified, using default values
  8420  200004                     	org	2097156
  8421  200004  FF                 	db	255
  8422                           
  8423                           ;Config register IDLOC5 @ 0x200005
  8424                           ;	unspecified, using default values
  8425  200005                     	org	2097157
  8426  200005  FF                 	db	255
  8427                           
  8428                           ;Config register IDLOC6 @ 0x200006
  8429                           ;	unspecified, using default values
  8430  200006                     	org	2097158
  8431  200006  FF                 	db	255
  8432                           
  8433                           ;Config register IDLOC7 @ 0x200007
  8434                           ;	unspecified, using default values
  8435  200007                     	org	2097159
  8436  200007  FF                 	db	255
  8437                           
  8438                           	psect	config
  8439                           
  8440                           ; Padding undefined space
  8441  300000                     	org	3145728
  8442  300000  FF                 	db	255
  8443                           
  8444                           ;Config register CONFIG1H @ 0x300001
  8445                           ;	Oscillator Selection bits
  8446                           ;	OSC = XT, XT oscillator
  8447                           ;	Oscillator System Clock Switch Enable bit
  8448                           ;	OSCS = OFF, Oscillator system clock switch option is disabled (main oscillator is sour
      +                          ce)
  8449  300001                     	org	3145729
  8450  300001  21                 	db	33
  8451                           
  8452                           ;Config register CONFIG2L @ 0x300002
  8453                           ;	Power-up Timer Enable bit
  8454                           ;	PWRT = OFF, PWRT disabled
  8455                           ;	Brown-out Reset Enable bit
  8456                           ;	BOR = OFF, Brown-out Reset disabled
  8457                           ;	Brown-out Reset Voltage bits
  8458                           ;	BORV = 20, VBOR set to 2.0V
  8459  300002                     	org	3145730
  8460  300002  0D                 	db	13
  8461                           
  8462                           ;Config register CONFIG2H @ 0x300003
  8463                           ;	Watchdog Timer Enable bit
  8464                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8465                           ;	Watchdog Timer Postscale Select bits
  8466                           ;	WDTPS = 128, 1:128
  8467  300003                     	org	3145731
  8468  300003  0E                 	db	14
  8469                           
  8470                           ; Padding undefined space
  8471  300004                     	org	3145732
  8472  300004  FF                 	db	255
  8473                           
  8474                           ;Config register CONFIG3H @ 0x300005
  8475                           ;	CCP2 Mux bit
  8476                           ;	CCP2MUX = OFF, CCP2 input/output is multiplexed with RB3
  8477  300005                     	org	3145733
  8478  300005  00                 	db	0
  8479                           
  8480                           ;Config register CONFIG4L @ 0x300006
  8481                           ;	Stack Full/Underflow Reset Enable bit
  8482                           ;	STVR = OFF, Stack Full/Underflow will not cause RESET
  8483                           ;	Low Voltage ICSP Enable bit
  8484                           ;	LVP = OFF, Low Voltage ICSP disabled
  8485                           ;	Background Debugger Enable bit
  8486                           ;	DEBUG = 0x1, unprogrammed default
  8487  300006                     	org	3145734
  8488  300006  80                 	db	128
  8489                           
  8490                           ; Padding undefined space
  8491  300007                     	org	3145735
  8492  300007  FF                 	db	255
  8493                           
  8494                           ;Config register CONFIG5L @ 0x300008
  8495                           ;	Code Protection bit
  8496                           ;	CP0 = OFF, Block 0 (000200-001FFFh) not code protected
  8497                           ;	Code Protection bit
  8498                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code protected
  8499                           ;	Code Protection bit
  8500                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code protected
  8501                           ;	Code Protection bit
  8502                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code protected
  8503  300008                     	org	3145736
  8504  300008  0F                 	db	15
  8505                           
  8506                           ;Config register CONFIG5H @ 0x300009
  8507                           ;	Boot Block Code Protection bit
  8508                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code protected
  8509                           ;	Data EEPROM Code Protection bit
  8510                           ;	CPD = OFF, Data EEPROM not code protected
  8511  300009                     	org	3145737
  8512  300009  C0                 	db	192
  8513                           
  8514                           ;Config register CONFIG6L @ 0x30000A
  8515                           ;	Write Protection bit
  8516                           ;	WRT0 = OFF, Block 0 (000200-001FFFh) not write protected
  8517                           ;	Write Protection bit
  8518                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write protected
  8519                           ;	Write Protection bit
  8520                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write protected
  8521                           ;	Write Protection bit
  8522                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write protected
  8523  30000A                     	org	3145738
  8524  30000A  0F                 	db	15
  8525                           
  8526                           ;Config register CONFIG6H @ 0x30000B
  8527                           ;	Configuration Register Write Protection bit
  8528                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write protected
  8529                           ;	Boot Block Write Protection bit
  8530                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write protected
  8531                           ;	Data EEPROM Write Protection bit
  8532                           ;	WRTD = OFF, Data EEPROM not write protected
  8533  30000B                     	org	3145739
  8534  30000B  E0                 	db	224
  8535                           
  8536                           ;Config register CONFIG7L @ 0x30000C
  8537                           ;	Table Read Protection bit
  8538                           ;	EBTR0 = OFF, Block 0 (000200-001FFFh) not protected from Table Reads executed in other
      +                           blocks
  8539                           ;	Table Read Protection bit
  8540                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from Table Reads executed in other
      +                           blocks
  8541                           ;	Table Read Protection bit
  8542                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from Table Reads executed in other
      +                           blocks
  8543                           ;	Table Read Protection bit
  8544                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from Table Reads executed in other
      +                           blocks
  8545  30000C                     	org	3145740
  8546  30000C  0F                 	db	15
  8547                           
  8548                           ;Config register CONFIG7H @ 0x30000D
  8549                           ;	Boot Block Table Read Protection bit
  8550                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from Table Reads executed in ot
      +                          her blocks
  8551  30000D                     	org	3145741
  8552  30000D  40                 	db	64
  8553                           tosu	equ	0xFFF
  8554                           tosh	equ	0xFFE
  8555                           tosl	equ	0xFFD
  8556                           stkptr	equ	0xFFC
  8557                           pclatu	equ	0xFFB
  8558                           pclath	equ	0xFFA
  8559                           pcl	equ	0xFF9
  8560                           tblptru	equ	0xFF8
  8561                           tblptrh	equ	0xFF7
  8562                           tblptrl	equ	0xFF6
  8563                           tablat	equ	0xFF5
  8564                           prodh	equ	0xFF4
  8565                           prodl	equ	0xFF3
  8566                           indf0	equ	0xFEF
  8567                           postinc0	equ	0xFEE
  8568                           postdec0	equ	0xFED
  8569                           preinc0	equ	0xFEC
  8570                           plusw0	equ	0xFEB
  8571                           fsr0h	equ	0xFEA
  8572                           fsr0l	equ	0xFE9
  8573                           wreg	equ	0xFE8
  8574                           indf1	equ	0xFE7
  8575                           postinc1	equ	0xFE6
  8576                           postdec1	equ	0xFE5
  8577                           preinc1	equ	0xFE4
  8578                           plusw1	equ	0xFE3
  8579                           fsr1h	equ	0xFE2
  8580                           fsr1l	equ	0xFE1
  8581                           bsr	equ	0xFE0
  8582                           indf2	equ	0xFDF
  8583                           postinc2	equ	0xFDE
  8584                           postdec2	equ	0xFDD
  8585                           preinc2	equ	0xFDC
  8586                           plusw2	equ	0xFDB
  8587                           fsr2h	equ	0xFDA
  8588                           fsr2l	equ	0xFD9
  8589                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    16
    Data        328
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     109
    BANK0           128     17     119
    BANK1           256      0     247
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uartTx@ptr	PTR unsigned char  size(2) Largest target is 53
		 -> errString_Command(BANK0[24]), errString_Fatal(BANK1[39]), errString_PointZ(BANK1[53]), errString_Bound(BANK1[33]), 
		 -> errString_Point(BANK1[41]), errString_Reset(BANK1[40]), errString_ZEND(BANK1[41]), errString_Feed(BANK0[30]), 

    sp__getData	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    executeData@data	PTR struct . size(2) Largest target is 20
		 -> dataSequence(BANK0[20]), 

    sp__getNewSequence	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 

    main@newData	PTR struct . size(2) Largest target is 8
		 -> newSequenceData(BANK0[8]), 


Critical Paths under _main in COMRAM

    _storeData->_printError
    _printError->_uartTx
    _resetPosition->_stepMade
    _touchTherm->_stepMade
    _touchObject->_stepMade
    _rotateObj->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _releaseObj->_stepMade
    _pickObject->_stepMade
    _moveToPoint->_stepMade
    _liftArm->_stepMade

Critical Paths under _isr in COMRAM

    _isr->i2_storeData
    i2_storeData->i2_printError
    _abortAll->i2_printError
    i2_printError->i2_uartTx

Critical Paths under _main in BANK0

    _main->_executeData
    _executeData->_rotateObj

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10557
                                             12 BANK0      5     5      0
                           _clearTM0
                        _executeData
                     _getNewSequence
                            _initADC
                      _initPinMotors
                      _interruptInit
                        _newSequence
                         _printError
                            _readSeq
                          _reduceSeq
                   _resetNewSequence
                      _resetPosition
                          _shiftData
                          _storeData
                           _tim0Init
                           _tim1Init
                           _tim2Init
                          _usartInit
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim2Init                                             2     0      2     121
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _tim1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tim0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _storeData                                            3     3      0    1604
                                             24 COMRAM     3     3      0
                         _printError
 ---------------------------------------------------------------------------------
 (2) _printError                                           3     3      0    1573
                                             21 COMRAM     3     3      0
                             _uartTx
 ---------------------------------------------------------------------------------
 (3) _uartTx                                               4     1      3    1542
                                             17 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _shiftData                                            3     3      0     130
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetPosition                                        3     3      0     238
                                             20 COMRAM     3     3      0
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (1) _resetNewSequence                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reduceSeq                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSeq                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _newSequence                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPinMotors                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getNewSequence                                       2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _executeData                                          5     5      0    6473
                                              7 BANK0      5     5      0
                            _getData
                            _liftArm
                        _moveToPoint
                         _pickObject
                         _releaseObj
                          _rotateObj
                        _touchObject
                         _touchTherm
 ---------------------------------------------------------------------------------
 (2) _touchTherm                                           0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTherm
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _returnTherm                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _touchObject                                          0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                         _resetTherm
                         _resetTouch
                        _returnTouch
                           _startADC
                           _stepMade
                            _stopADC
 ---------------------------------------------------------------------------------
 (3) _stopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _startADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _returnTouch                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _resetTouch                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetTherm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rotateObj                                            7     7      0    3163
                                              0 BANK0      7     7      0
                            ___fldiv
                            ___fltol
                           ___xxtofl
                          _resetStep
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _releaseObj                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _pickObject                                           0     0      0      34
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _moveToPoint                                         14     6      8    2546
                                             20 COMRAM    14     6      8
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                        _stepCounter
                           _stepMade
 ---------------------------------------------------------------------------------
 (3) _stepCounter                                          2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _liftArm                                              0     0      0      34
                          _resetStep
                      _resetTM0_Temp
                      _resetTM2_Temp
                           _stepMade
 ---------------------------------------------------------------------------------
 (2) _stepMade                                             3     1      2      34
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resetTM2_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetTM0_Temp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetStep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getData                                              2     0      2       0
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clearTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    1059
                                             10 COMRAM     7     7      0
                           _abortAll
                         _fatalError
                       _increaseStep
                          _retPeriod
                        _setThermRel
                        _setTouchRel
                         _toggleStep
                      _whatsTM0Limit
                           _writeTM0
                        i2_storeData
 ---------------------------------------------------------------------------------
 (5) i2_storeData                                          3     3      0     529
                                              7 COMRAM     3     3      0
                       i2_printError
 ---------------------------------------------------------------------------------
 (5) _writeTM0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _whatsTM0Limit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _toggleStep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setTouchRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setThermRel                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _retPeriod                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _increaseStep                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _fatalError                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _abortAll                                             0     0      0     507
                       i2_printError
 ---------------------------------------------------------------------------------
 (6) i2_printError                                         3     3      0     507
                                              4 COMRAM     3     3      0
                           i2_uartTx
 ---------------------------------------------------------------------------------
 (7) i2_uartTx                                             4     1      3     485
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearTM0
   _executeData
     _getData
     _liftArm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepMade
     _moveToPoint
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _stepCounter
       _stepMade
     _pickObject
       _resetTM2_Temp
       _stepMade
     _releaseObj
       _resetTM2_Temp
       _stepMade
     _rotateObj
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _resetStep
       _resetTM2_Temp
       _stepMade
     _touchObject
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTouch
       _startADC
       _stepMade
       _stopADC
     _touchTherm
       _resetStep
       _resetTM0_Temp
       _resetTM2_Temp
       _resetTherm
       _resetTouch
       _returnTherm
       _startADC
       _stepMade
       _stopADC
   _getNewSequence
   _initADC
   _initPinMotors
   _interruptInit
   _newSequence
   _printError
     _uartTx
   _readSeq
   _reduceSeq
   _resetNewSequence
   _resetPosition
     _resetStep
     _resetTM0_Temp
     _resetTM2_Temp
     _stepMade
   _shiftData
   _storeData
     _printError
       _uartTx
   _tim0Init
   _tim1Init
   _tim2Init
   _usartInit

 _isr (ROOT)
   _abortAll
     i2_printError
       i2_uartTx
   _fatalError
   _increaseStep
   _retPeriod
   _setThermRel
   _setTouchRel
   _toggleStep
   _whatsTM0Limit
   _writeTM0
   i2_storeData
     i2_printError
       i2_uartTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80     11      77       5       93.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1DB      15        0.0%
DATA                 0      0     1DB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Wed Apr 28 15:56:13 2021

                                        ___fldiv@aexp 0038  
                                        ___fldiv@bexp 0037  
                               __end_of_interruptInit 2502  
                                        ___fldiv@sign 0030  
                                                  l90 2584  
                                                  l84 265E  
                                                 l210 1F54  
                                                 l211 1F58  
                                                 l131 179E  
                                                 l132 190E  
                                                 l222 22FA  
                                                 l214 22C8  
                                                 l151 192E  
                                                 l240 2554  
                                                 l217 22DA  
                                                 l161 0D64  
                                                 l241 255E  
                                                 l233 220C  
                                                 l154 0A7C  
                                                 l330 1980  
                                                 l235 223C  
                                                 l331 197A  
                                                 l156 0ABC  
                                                 l332 197C  
                                                 l157 0AC4  
                                                 l246 2524  
                                                 l247 252E  
                                                 l522 2650  
                                                 l178 0D22  
                                                 l187 0D84  
                                                 l531 2714  
                                                 l603 12E4  
                                                 l452 26DC  
                                                 l380 26BE  
                                                 l460 24FE  
                                                 l540 26B4  
                                                 l357 1078  
                                                 l525 2642  
                                                 l621 2634  
                                                 l630 269E  
                                                 l198 2066  
                                                 l455 25F0  
                                                 l383 2724  
                                                 l199 206A  
                                                 l392 26C8  
                                                 l528 270C  
                                                 l624 2602  
                                                 l633 26E6  
                                                 l377 25AA  
                                                 l537 271C  
                                                 l545 23E0  
                                                 l386 2692  
                                                 l458 24DC  
                                                 l562 1D28  
                                                 l618 2614  
                                                 l627 25DC  
                                                 l395 26D2  
                                                 l459 24F2  
                                                 l571 242E  
                                                 l548 25C8  
                                                 l389 2686  
                                                 l567 23FC  
                                                 l596 11D6  
                                                 l942 1C0C  
                                                 _isr 0008  
                                         _touchObject 1F5C  
                                                 prod 000FF3  
                                                 wreg 000FE8  
                                        ___fltol@exp1 0042  
                                         main@errCode 00F4  
                                                l1300 15B6  
                                                l1303 1748  
                                                l1240 093C  
                                                l1232 0810  
                                                l1241 0924  
                                                l1314 16CE  
                                                l1227 0A3E  
                                                l1307 1662  
                                                l1229 0856  
                                                l1238 08AC  
                                                l4000 170E  
                                                l4010 0A46  
                                                l4002 1722  
                                                l4020 0AC0  
                                                l4012 0A70  
                                                l4004 1734  
                                                l4030 0B06  
                                                l4022 0ACE  
                                                l4014 0A80  
                                                l4006 1736  
                                                l4110 1F82  
                                                l4102 1F5E  
                                                l4040 0B7E  
                                                l4032 0B1C  
                                                l4024 0ADC  
                                                l4016 0A84  
                                                l4120 1FCC  
                                                l4112 1F88  
                                                l4104 1F62  
                                                l4210 225E  
                                                l4202 2242  
                                                l4050 0BE0  
                                                l4042 0B82  
                                                l4034 0B42  
                                                l4026 0AE2  
                                                l4018 0AB0  
                                                l4122 1FDE  
                                                l4130 202A  
                                                l4114 1F9E  
                                                l4106 1F70  
                                                l4220 22AE  
                                                l4212 2274  
                                                l4204 2246  
                                                l4060 0C2A  
                                                l4052 0BF6  
                                                l4036 0B4C  
                                                l4044 0B98  
                                                l4028 0AFA  
                                                l4140 203C  
                                                l4132 2030  
                                                l4124 1FFA  
                                                l4116 1FAA  
                                                l4108 1F72  
                                                l4300 2564  
                                                l4222 22E0  
                                                l4214 2280  
                                                l4206 2252  
                                                l4070 0C90  
                                                l4062 0C50  
                                                l4054 0C0C  
                                                l4046 0BAE  
                                                l4038 0B62  
                                                l4142 2044  
                                                l4134 2032  
                                                l4118 1FC8  
                                                l4126 1FFE  
                                                l4310 257C  
                                                l4302 256C  
                                                l4224 22E8  
                                                l4216 2298  
                                                l4208 2258  
                                                l4080 0D04  
                                                l4064 0C5A  
                                                l4072 0CA6  
                                                l4240 21EE  
                                                l4232 216C  
                                                l4144 2048  
                                                l4136 2034  
                                                l4128 201A  
                                                l4160 1E70  
                                                l4152 1E4C  
                                                l4400 25A6  
                                                l4312 257E  
                                                l4304 2570  
                                                l4320 1756  
                                                l4226 22F0  
                                                l4218 229C  
                                                l4090 0D52  
                                                l4082 0D1A  
                                                l4074 0CBC  
                                                l4066 0C70  
                                                l4058 0C14  
                                                l4250 2234  
                                                l4242 21F0  
                                                l4234 21BE  
                                                l4146 204C  
                                                l4138 2038  
                                                l4170 1EBA  
                                                l4162 1E76  
                                                l4154 1E50  
                                                l4402 25A8  
                                                l4314 2580  
                                                l4306 2574  
                                                l4330 1792  
                                                l4322 1762  
                                                l4410 2610  
                                                l4228 22F8  
                                                l4092 0D6A  
                                                l4068 0C8C  
                                                l4252 2534  
                                                l4260 2504  
                                                l4244 220E  
                                                l4236 21CC  
                                                l4148 205E  
                                                l4172 1ECC  
                                                l4180 1F18  
                                                l4164 1E8C  
                                                l4156 1E5E  
                                                l4500 0DD4  
                                                l4316 2582  
                                                l4308 2578  
                                                l4420 271A  
                                                l4340 17EA  
                                                l4332 17B2  
                                                l4324 1770  
                                                l4412 262C  
                                                l4404 25B0  
                                                l4094 0D72  
                                                l4078 0CEE  
                                                l4086 0D22  
                                                l4254 2538  
                                                l4262 2508  
                                                l4246 2212  
                                                l4238 21D2  
                                                l4190 1F2A  
                                                l4182 1F1E  
                                                l4174 1EE8  
                                                l4166 1E98  
                                                l4158 1E60  
                                                l4510 0E56  
                                                l4502 0DE4  
                                                l4350 1844  
                                                l4342 17FC  
                                                l4334 17C4  
                                                l4326 1776  
                                                l4318 1750  
                                                l4270 1C1A  
                                                l4430 1092  
                                                l4414 2630  
                                                l4406 25C4  
                                                l4096 0D7A  
                                                l4088 0D3C  
                                                l4256 2556  
                                                l4264 2526  
                                                l3800 068C  
                                                l4248 2218  
                                                l4192 1F32  
                                                l4184 1F20  
                                                l4168 1EB6  
                                                l4176 1EEC  
                                                l4520 0EDA  
                                                l4512 0E90  
                                                l4504 0DF8  
                                                l4424 263A  
                                                l4360 188A  
                                                l4352 1848  
                                                l4344 1810  
                                                l4336 17CE  
                                                l4328 177C  
                                                l4600 23CA  
                                                l4280 1C88  
                                                l4272 1C30  
                                                l4432 1098  
                                                l4440 10B6  
                                                l4408 2608  
                                                l4416 2632  
                                                l4098 0D82  
                                                l4258 255A  
                                                l4266 252A  
                                                l3810 06C4  
                                                l3802 0694  
                                                l4194 1F36  
                                                l4186 1F22  
                                                l4178 1F08  
                                                l4530 0F4A  
                                                l4522 0EE2  
                                                l4514 0EA0  
                                                l4506 0E32  
                                                l4370 18E8  
                                                l4362 18A2  
                                                l4354 185A  
                                                l4346 1822  
                                                l4338 17E6  
                                                l4602 23CC  
                                                l4282 1C9E  
                                                l4274 1C46  
                                                l4450 11C2  
                                                l4434 10A2  
                                                l4442 10EC  
                                                l4418 25F6  
                                                l4610 193C  
                                                l3900 09D4  
                                                l3820 0706  
                                                l3812 06D8  
                                                l3804 069A  
                                                l4196 1F3A  
                                                l4188 1F26  
                                                l4540 0F72  
                                                l4532 0F52  
                                                l4516 0EB4  
                                                l4508 0E42  
                                                l4380 192C  
                                                l4372 18FC  
                                                l4364 18A6  
                                                l4356 186E  
                                                l4348 182C  
                                                l4284 1CB4  
                                                l4276 1C5C  
                                                l4268 1C16  
                                                l4460 1208  
                                                l4452 11CE  
                                                l4444 1104  
                                                l4436 10AC  
                                                l4428 1082  
                                                l4620 1958  
                                                l4612 1940  
                                                l4604 1932  
                                                l4294 2648  
                                                l3750 25D2  
                                                l3910 0A2E  
                                                l3902 09F4  
                                                l3822 0722  
                                                l3814 06E8  
                                                l3806 06AC  
                                                l4198 1F4C  
                                                l4550 0FD4  
                                                l4542 0F7A  
                                                l4534 0F64  
                                                l4518 0ED6  
                                                l4526 0EEC  
                                                l4390 258A  
                                                l4374 1914  
                                                l4366 18B8  
                                                l4358 1880  
                                                l4278 1C72  
                                                l4470 128E  
                                                l4462 122A  
                                                l4454 11E0  
                                                l4446 110C  
                                                l4630 19AA  
                                                l4622 1960  
                                                l4614 1944  
                                                l4606 1932  
                                                l3752 25D6  
                                                l3760 2698  
                                                l3912 0A32  
                                                l3904 0A10  
                                                l3840 077E  
                                                l3824 0732  
                                                l3832 0754  
                                                l3816 06EC  
                                                l3808 06AE  
                                                l3920 1ADE  
                                                l4560 1036  
                                                l4528 0F34  
                                                l4392 2592  
                                                l4384 24C8  
                                                l4376 191C  
                                                l4368 18D2  
                                                l4288 1CCA  
                                                l4472 1298  
                                                l4464 124A  
                                                l4456 11F0  
                                                l4448 1196  
                                                l4640 1A0C  
                                                l4632 19BC  
                                                l4624 1974  
                                                l4616 1948  
                                                l4608 1938  
                                                l4298 2656  
                                                l3746 26E2  
                                                l3906 0A16  
                                                l3850 07D2  
                                                l3842 079A  
                                                l3834 076A  
                                                l3826 073A  
                                                l3818 06F4  
                                                l3930 1B40  
                                                l3922 1AF8  
                                                l3762 26BA  
                                                l3770 2722  
                                                l4562 103E  
                                                l4538 0F6C  
                                                l4394 2598  
                                                l4386 24DA  
                                                l4490 2712  
                                                l4378 1924  
                                                l4810 1CE0  
                                                l4474 12A2  
                                                l4466 126A  
                                                l4458 1204  
                                                l4650 1A98  
                                                l4642 1A16  
                                                l4634 19CC  
                                                l4626 1984  
                                                l4618 194C  
                                                l3756 26D8  
                                                l3748 25CE  
                                                l3908 0A28  
                                                l3860 0840  
                                                l3852 07E8  
                                                l3844 07AA  
                                                l3836 076A  
                                                l3828 0740  
                                                l3932 1B50  
                                                l3764 26C4  
                                                l3772 2680  
                                                l4572 1066  
                                                l4564 1046  
                                                l4556 0FEC  
                                                l4548 0F92  
                                                l4812 0F0C  
                                                l4396 259A  
                                                l4388 24F0  
                                                l3780 2416  
                                                l4468 1282  
                                                l4660 1AC8  
                                                l4652 1A9C  
                                                l4644 1A3E  
                                                l4636 19CE  
                                                l4628 199E  
                                                l3758 25E2  
                                                l3870 088C  
                                                l3862 0842  
                                                l3854 07FC  
                                                l3846 07BA  
                                                l3790 064A  
                                                l3782 0614  
                                                l3942 1B82  
                                                l3934 1B54  
                                                l3926 1B0E  
                                                l3766 26CE  
                                                l4574 106C  
                                                l4566 104E  
                                                l4558 1024  
                                                l4494 0D8A  
                                                l4398 259C  
                                                l4590 270A  
                                                l3774 23E6  
                                                l4478 12AE  
                                                l4806 10CC  
                                                l4662 1ACC  
                                                l4646 1A56  
                                                l4638 19EE  
                                                l4654 1AA0  
                                                l3880 08D6  
                                                l3872 0898  
                                                l3864 0852  
                                                l3856 080E  
                                                l3848 07CA  
                                                l3792 065E  
                                                l3784 0620  
                                                l3960 1BFA  
                                                l3952 1BB2  
                                                l3944 1B8E  
                                                l3936 1B66  
                                                l3928 1B3E  
                                                l3768 268C  
                                                l4496 0D96  
                                                l4488 26B0  
                                                l4592 2386  
                                                l3776 23EE  
                                                l4808 12C4  
                                                l4664 1AD0  
                                                l4656 1ABA  
                                                l4648 1A90  
                                                l3890 095E  
                                                l3882 08E8  
                                                l3874 08AA  
                                                l3866 086C  
                                                l3858 081C  
                                                l3794 066E  
                                                l3786 0632  
                                                l3954 1BC0  
                                                l3946 1B98  
                                                l3970 15C8  
                                                l4498 0D9A  
                                                l3778 2410  
                                                l4658 1AC2  
                                                l3892 0970  
                                                l3884 091A  
                                                l3868 0886  
                                                l3876 08BE  
                                                l3796 0672  
                                                l3788 0634  
                                                l3956 1BD4  
                                                l3980 1610  
                                                l3972 15E4  
                                                l3964 155A  
                                                l3894 099A  
                                                l3878 08D2  
                                                l3798 067A  
                                                l3958 1BEA  
                                                l3990 16A8  
                                                l3982 1648  
                                                l3966 156E  
                                                l4598 238A  
                                                l3888 0952  
                                                l3896 099E  
                                                l3992 16BC  
                                                l3984 164C  
                                                l3976 15F8  
                                                l3968 1580  
                                                l3898 09BE  
                                                l3994 16E2  
                                                l3986 1658  
                                                l3978 1602  
                                                l3996 16E4  
                                                l3988 169A  
                                                ?_isr 0001  
                                                l3998 16EA  
                                                u3000 0720  
                                                u3001 071A  
                                                u3010 0768  
                                                u3011 0762  
                                                u3100 0918  
                                                u3020 07E6  
                                                u3101 0912  
                                                u3021 07E0  
                                                _LATA 000F89  
                                                u3110 0936  
                                                u3030 080C  
                                                _LATB 000F8A  
                                                u3111 0930  
                                                u3031 0806  
                                                _LATC 000F8B  
                                                u3120 0950  
                                                u3040 083E  
                                                u3200 1B7C  
                                                u4000 0F64  
                                                _LATD 000F8C  
                                                u3121 094A  
                                                u3041 0838  
                                                u3201 1B76  
                                                u4001 0F5E  
                                                u3130 096E  
                                                u3050 086A  
                                                u3210 1BAC  
                                                u4010 0F8C  
                                                u3131 0968  
                                                u3051 0864  
                                                u3211 1BA6  
                                                u4011 0F86  
                                                u3140 09BC  
                                                u3060 0884  
                                                u3220 1BD4  
                                                u3300 16CE  
                                                u4020 0FE6  
                                                u4100 1A54  
                                                u3141 09B6  
                                                u3061 087E  
                                                u3221 1BCE  
                                                u3301 16C8  
                                                u4021 0FE0  
                                                u4101 1A4E  
                                                u3150 09F2  
                                                u3070 08A8  
                                                u3230 1BE8  
                                                u3310 16E0  
                                                u4030 1034  
                                                u4110 1AB8  
                                                u3151 09EC  
                                                u3071 08A2  
                                                u3231 1BE2  
                                                u3311 16DA  
                                                u4031 102E  
                                                u4111 1AB2  
                                                u3400 0B7C  
                                                u3160 0A26  
                                                u3080 08D0  
                                                u3320 1720  
                                                u3240 156C  
                                                u4040 1060  
                                                u3401 0B76  
                                                u3161 0A20  
                                                u3081 08CA  
                                                u3321 171A  
                                                u3241 1566  
                                                u4041 105A  
                                                u3410 0BAC  
                                                u3090 08E6  
                                                u3170 1AF6  
                                                u3330 1732  
                                                u3250 157E  
                                                u4050 23DE  
                                                u3411 0BA6  
                                                u3091 08E0  
                                                u3171 1AF0  
                                                u3331 172C  
                                                u3251 1578  
                                                u4051 23D8  
                                                u3500 0CE8  
                                                u3420 0BDA  
                                                u3340 0A6E  
                                                u3180 1B32  
                                                u3260 15E2  
                                                u4060 1972  
                                                u3501 0CE2  
                                                u3421 0BD4  
                                                u3341 0A68  
                                                u3261 15DC  
                                                u4061 196C  
                                                u3510 0D02  
                                                u3430 0BF4  
                                                u3350 0AAE  
                                                u3190 1B64  
                                                u3270 1642  
                                                u4070 199C  
                                                u3511 0CFC  
                                                u3431 0BEE  
                                                u3351 0AA8  
                                                u3191 1B5E  
                                                u3271 163C  
                                                u4071 1996  
                                                u3520 0D18  
                                                u3440 0C0A  
                                                u3360 0AF8  
                                                u3280 1694  
                                                u3600 202A  
                                                u4080 19EC  
                                                u3521 0D12  
                                                u3441 0C04  
                                                u3361 0AF2  
                                                u3185 1B26  
                                                u3281 168E  
                                                u3601 2024  
                                                u4081 19E6  
                                                u3530 0D3C  
                                                u3450 0C28  
                                                u3370 0B1A  
                                                u3290 16BA  
                                                u3610 205C  
                                                u4090 1A0C  
                                                u3531 0D36  
                                                u3451 0C22  
                                                u3371 0B14  
                                                u3291 16B4  
                                                u3611 2056  
                                                u4091 1A06  
                                                u3700 22C8  
                                                u3540 0D50  
                                                u3460 0C4E  
                                                u3380 0B40  
                                                u3620 1E8A  
                                                u3701 22C2  
                                                u3541 0D4A  
                                                u3461 0C48  
                                                u3381 0B3A  
                                                u3621 1E84  
                                                u3710 22DA  
                                                u3550 0D64  
                                                u3470 0C6E  
                                                u3390 0B60  
                                                u3630 1EB4  
                                                u3711 22D4  
                                                u3551 0D5E  
                                                u3471 0C68  
                                                u3391 0B5A  
                                                u3631 1EAE  
                                                u3480 0C8A  
                                                u3720 220A  
                                                u3560 1F9C  
                                                u3640 1EE6  
                                                u3800 180E  
                                                u2920 240E  
                                                u3481 0C84  
                                                u3721 2204  
                                                u3561 1F96  
                                                u3641 1EE0  
                                                u3801 1808  
                                                u2921 2408  
                                                u3490 0CBA  
                                                u3730 2232  
                                                u3570 1FC6  
                                                u3650 1F06  
                                                u3810 1822  
                                                u2930 242C  
                                                u3491 0CB4  
                                                u3731 222C  
                                                u3571 1FC0  
                                                u3651 1F00  
                                                u3811 181C  
                                                u2931 2426  
                                                u3740 2552  
                                                u2940 0630  
                                                u3580 1FF8  
                                                u3660 1F18  
                                                u3900 24D8  
                                                u3820 1842  
                                                u3741 254C  
                                                u2941 062A  
                                                u3581 1FF2  
                                                u3661 1F12  
                                                u3901 24D2  
                                                u3821 183C  
                                                u3750 2522  
                                                u2950 0648  
                                                u3590 2018  
                                                u3670 1F4A  
                                                u3910 24EE  
                                                u3830 186C  
                                                u3751 251C  
                                                u2951 0642  
                                                u3591 2012  
                                                u3671 1F44  
                                                u3911 24E8  
                                                u3831 1866  
                                                u3680 2272  
                                                u2960 065C  
                                                u3840 1880  
                                                u3760 1790  
                                                u3920 1102  
                                                u3681 226C  
                                                u2961 0656  
                                                u3841 187A  
                                                u3761 178A  
                                                u3921 10FC  
                                                u3690 2296  
                                                u2970 06AA  
                                                u3850 18A0  
                                                u3770 17B0  
                                                u3930 1194  
                                         main@newData 00F5  
                                                u3691 2290  
                                                u2971 06A4  
                                                u3851 189A  
                                                u3771 17AA  
                                                u3931 118E  
                                                u2980 06C2  
                                                u3860 18D2  
                                                u3780 17C4  
                                                u3940 11C2  
                                                u2981 06BC  
                                                u3861 18CC  
                                                u3781 17BE  
                                                u3941 11BC  
                                                u2990 06D6  
                                                u3870 18E6  
                                                u3790 17E4  
                                                u3950 1228  
                                                u2991 06D0  
                                                u3871 18E0  
                                                u3791 17DE  
                                                u3951 1222  
                                                u3880 18FA  
                                                u3960 1248  
                                                u3881 18F4  
                                                u3961 1242  
                                                u3890 190E  
                                                u3970 1268  
                                                u3891 1908  
                                                u3971 1262  
                                                u3980 1282  
                                                u3981 127C  
                                                u3990 0F48  
                                                u3991 0F42  
                                                i2l81 266C  
                                                i2l87 272C  
                                                _TMR0 000FD6  
                                                _TMR2 000FCC  
                                 __end_ofi2_storeData 1556  
                                                _main 1932  
                                                _maxX 006B  
                                                _maxY 0069  
                                __end_ofi2_printError 1E4A  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                btemp 006E  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 01A8  
                                     ___fldiv@new_exp 0031  
                                        ___param_bank 000000  
                                     ??_whatsTM0Limit 0001  
                                               ??_isr 000B  
                                        ?_executeData 0001  
                                     executeData@data 00EF  
                                       ___fltol@sign1 0041  
                                               ?_main 0001  
                                     __end_of___fldiv 0A44  
                                     __end_of___fltol 1C12  
                                               i2l401 26FA  
                                               i2l250 2620  
                                               i2l251 2622  
                                               i2l603 1550  
                                               i2l534 273C  
                                               i2l562 1E44  
                                               i2l642 267A  
                                               i2l571 247C  
                                               i2l636 2734  
                                               i2l477 0190  
                                               i2l398 2704  
                                               i2l567 244A  
                                               i2l639 26F0  
                                               i2l596 1442  
                                rotateObj@rotSequence 0080  
                                               _SPBRG 000FAF  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                                               _TRISC 000F94  
                                               _TRISD 000F95  
                                               _TXREG 000FAD  
                                     __end_of_getData 2654  
                                     i2storeData@data 000A  
                                     __end_of_initADC 25AE  
                                        ?_newSequence 0001  
                                     __end_of_liftArm 22FE  
                                     __end_of_readSeq 2718  
                                        stepMade@temp 0014  
                                               tablat 000FF5  
                                      i2uartTx@length 0003  
                                     __end_of_stopADC 2728  
                                               ttemp5 006F  
                                               ttemp6 0072  
                                               ttemp7 0076  
                                               status 000FD8  
                                               wtemp8 006F  
                                    __end_ofi2_uartTx 2480  
                                       ?_increaseStep 0001  
                                     __initialization 22FE  
                              __size_of_initPinMotors 0026  
                                        __end_of_main 1ADC  
                            resetPosition@keepMovingX 0015  
                            resetPosition@keepMovingY 0016  
                            resetPosition@keepMovingZ 0017  
                                              ??_main 00F2  
                                       __activetblptr 000002  
                               __end_of_resetTM0_Temp 26E0  
                               __end_of_resetTM2_Temp 25F4  
                                         i2_storeData 12EA  
                                        ?_setThermRel 0001  
                                              _ADRESH 000FC4  
                                              _ADRESL 000FC3  
                                        ?_moveToPoint 0015  
                                              i2l3070 1D36  
                                              i2l3080 1DA4  
                                              i2l3072 1D4C  
                                              i2l3082 1DBA  
                                              i2l3074 1D62  
                                              i2l3410 26F6  
                                              i2l3084 1DD0  
                                              i2l3076 1D78  
                                              i2l3068 1D32  
                                              i2l3412 273A  
                                              i2l3420 26EC  
                                              i2l3078 1D8E  
                                              i2l3094 2664  
                                              i2l3430 1318  
                                              i2l3422 12EE  
                                              i2l3088 1DE6  
                                              i2l3416 2672  
                                              i2l3408 2700  
                                              i2l3440 1378  
                                              i2l3424 12FE  
                                              i2l3600 0170  
                                              i2l3186 261A  
                                              i2l3418 2732  
                                              i2l3098 272A  
                                              i2l3450 145C  
                                              i2l3442 1402  
                                              i2l3426 1304  
                                              i2l3434 1322  
                                              i2l3602 0184  
                                              i2l3460 14D6  
                                              i2l3452 1470  
                                              i2l3444 142E  
                                              i2l3428 130E  
                                              i2l3436 1358  
                                              i2l3604 018A  
                                              i2l3462 14EE  
                                              i2l3454 1474  
                                              i2l3446 143A  
                                              i2l3438 1370  
                                              i2l3550 0032  
                                              i2l3464 14FA  
                                              i2l3456 1496  
                                              i2l3448 144C  
                                              i2l3472 151A  
                                              i2l3560 006C  
                                              i2l3552 004E  
                                              i2l3544 001C  
                                              i2l3466 1504  
                                              i2l3458 14B6  
                                              i2l3570 00A0  
                                              i2l3562 006E  
                                              i2l3554 0050  
                                              i2l3546 002E  
                                              i2l2772 2434  
                                              i2l3468 150E  
                                              i2l3580 00E4  
                                              i2l3572 00A6  
                                              i2l3564 0086  
                                              i2l3556 0054  
                                              i2l3548 0030  
                                              i2l2774 243C  
                                              i2l3590 0118  
                                              i2l3582 00F6  
                                              i2l3574 00C6  
                                              i2l3566 008A  
                                              i2l3558 0058  
                                              i2l2776 245E  
                                              i2l3592 0120  
                                              i2l3584 00FA  
                                              i2l3576 00CE  
                                              i2l3568 009E  
                                              i2l2778 2464  
                                              i2l3594 0146  
                                              i2l3586 00FE  
                                              i2l3578 00D0  
                                              i2l3596 0152  
                                              i2l3588 0104  
                                              i2l4814 1338  
                                              i2l3598 016C  
                                              i2l4816 1530  
                                              i2l4818 1DFC  
                                              _RCREG1 000FAE  
                                        ?_setTouchRel 0001  
                                    __end_of_abortAll 262A  
                                    __end_of___xxtofl 174E  
                                    __end_of_clearTM0 2662  
                                    _errString_PointZ 0100  
                                      ??_increaseStep 0001  
                                    __end_of_maxFeedX 0611  
                                    __end_of_maxFeedY 0610  
                                           ??___fldiv 0028  
                                           ??___fltol 003D  
                                    __end_of_tim0Init 2618  
                                    __end_of_tim1Init 2638  
                                    __end_of_tim2Init 2606  
                                              clear_0 2364  
                                              clear_1 2370  
                                           ??_getData 0014  
                                              _uartTx 23E4  
                                           ??_initADC 0012  
                                           ??_liftArm 0015  
                                           ??_readSeq 0012  
                                        __pdataCOMRAM 0063  
                               __end_of_resetPosition 1932  
                                        __mediumconst 0000  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                                        ?_returnTherm 0012  
                                    __end_of_startADC 26C2  
                                    __end_of_stepMade 25E0  
                                       _initPinMotors 2562  
                                        ?_returnTouch 0012  
                                           ??_stopADC 0012  
                               __size_ofi2_printError 011C  
                                    __end_of_writeTM0 2670  
                           __size_of_resetNewSequence 000A  
                                        ___xxtofl@arg 001C  
                                        ___xxtofl@exp 001B  
                                        ___xxtofl@val 0012  
                                          __accesstop 0080  
                             __end_of__initialization 2376  
                                        _dataSequence 00CA  
                                       ___rparam_used 000001  
                                          ___fltol@f1 0039  
                                        ?_stepCounter 0012  
                                         i2uartTx@ptr 0001  
                                      __pcstackCOMRAM 0001  
                                        __newSequence 005B  
                                        __pidataBANK0 2480  
                                        __pidataBANK1 206E  
                                __size_of_executeData 02F6  
                                        i2_printError 1D2E  
                                        ?_touchObject 0001  
                                      _errString_ZEND 015E  
                                      _errString_Feed 0090  
                                      ?_initPinMotors 0001  
                                           ?i2_uartTx 0001  
                                          __pbssBANK0 00C6  
                                __size_of_newSequence 0008  
                                          _feeder1Pos 060D  
                                          _feeder2Pos 060B  
                                          _feeder3Pos 0609  
                             __size_of_getNewSequence 000E  
                                          _fatalError 2738  
                                  __size_of_reduceSeq 0008  
                                  __size_of_retPeriod 000E  
                                      _touch_pressure 0607  
                                  __size_of_shiftData 0060  
                                  __size_of_resetStep 000A  
                                             _ADC_res 004F  
                                             ?_uartTx 0012  
                                           ?_abortAll 0001  
                                           ?___xxtofl 0012  
                                __end_of_increaseStep 2738  
                                           ?_clearTM0 0001  
                                          ??i2_uartTx 0004  
                                  __size_of_rotateObj 00DA  
                                   _errString_Command 00AE  
                                  __size_of_usartInit 001E  
                              __size_of_interruptInit 003C  
                                __size_of_setThermRel 000A  
                                  __size_of_storeData 026C  
                                           ?_tim0Init 0001  
                                           ?_tim1Init 0001  
                                           ?_tim2Init 0012  
                                __size_of_moveToPoint 0344  
                                storeData@receivedMex 0043  
                                     _newSequenceData 00DE  
                                __size_of_setTouchRel 000A  
                                             __Hparam 0000  
                                             __Lparam 0000  
                              __end_of_touch_pressure 0609  
                                             ___fldiv 0612  
                                           ?_startADC 0001  
                                           ?_stepMade 0012  
                                             ___fltol 1ADC  
                                        __psmallconst 0600  
                                             __pcinit 22FE  
                               __end_of_whatsTM0Limit 2730  
                                             _getData 2646  
                                             __ramtop 0600  
                                           ?_writeTM0 0001  
                                          _pickObject 2532  
                                             __ptext0 1932  
                                             __ptext1 25AE  
                                             __ptext2 25F4  
                                             __ptext3 262A  
                                             __ptext4 2606  
                                             __ptext5 107E  
                                             __ptext6 1C12  
                                             __ptext7 23E4  
                                             __ptext8 2384  
                                             __ptext9 174E  
                                     __size_of_uartTx 004E  
                                           _T0CONbits 000FD5  
                                             _initADC 2588  
                                           _T1CONbits 000FCD  
                                     ??_initPinMotors 0012  
                                             _liftArm 2240  
                                           _T2CONbits 000FCA  
                                          ??_abortAll 0008  
                                             _readSeq 2710  
                                        __size_of_isr 01A0  
                                          ??___xxtofl 0016  
                                        ?i2_storeData 0001  
                                          ??_clearTM0 0012  
                                          _motCounter 0063  
                                             _pwmStep 0058  
                                             _stopADC 2720  
                                   __end_of_reduceSeq 2710  
                                   __end_of_retPeriod 267E  
                                          _releaseObj 2502  
                                __size_of_returnTherm 000C  
                                end_of_initialization 2376  
                                __size_of_returnTouch 000C  
                                    _resetNewSequence 26AE  
                                    rotateObj@totStep 00E9  
                                   __end_of_shiftData 23E4  
                                             isr@temp 0011  
                                   __end_of_resetStep 26EA  
                                          ??_tim0Init 0012  
                                       __Lmediumconst 0000  
                                          ??_tim1Init 0012  
                                          ??_tim2Init 0014  
                                    storeData@command 0059  
                                    storeData@counter 005A  
                                          _resetTherm 26CC  
                                          _resetTouch 26C2  
                                             uartTx@i 0015  
                                         ?_fatalError 0001  
                                           _RCSTAbits 000FAB  
                                             postdec1 000FE5  
                                   __end_of_rotateObj 2240  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                                          ??_startADC 0012  
                                          ??_stepMade 0014  
                                __size_of_stepCounter 000C  
                                       _interruptInit 24C6  
                                   __end_of_usartInit 25CC  
                                   __end_of_storeData 12EA  
                          __end_ofrotateObj@stepAngle 0605  
                                          ??_writeTM0 0001  
                                           _PORTDbits 000F83  
                                          _printError 1C12  
                                           _PORTEbits 000F84  
                                 i2printError@errCode 0007  
                                          _toggleStep 26EA  
                                       ___xxtofl@sign 001A  
                                           _TRISCbits 000F94  
                                           _TRISDbits 000F95  
                                           _TRISEbits 000F96  
                                         ___fldiv@grs 0033  
                                         ___fldiv@rem 002C  
                                __size_of_touchObject 0112  
                                          _stepToggle 0057  
                                        _completeStep 005E  
                                          _touchTherm 1E4A  
                                           _TXSTAbits 000FAC  
                                      _getNewSequence 2638  
                              __size_of_resetTM0_Temp 000A  
                              __size_of_resetTM2_Temp 0014  
                                      ?_interruptInit 0001  
                                       __pidataCOMRAM 26A2  
                               __size_of_increaseStep 0008  
                                         ?_pickObject 0001  
                                         __fatalError 005C  
                                      __end_of_uartTx 2432  
                                       moveToPoint@x1 0015  
                                       moveToPoint@x2 0019  
                                       moveToPoint@y1 0017  
                                       moveToPoint@y2 001B  
                                 start_initialization 22FE  
                                           i2uartTx@i 0004  
                                         __end_of_isr 01A8  
                                 __size_of_fatalError 0008  
                                         ?_releaseObj 0001  
                                   __size_ofi2_uartTx 004E  
                              __end_of_getNewSequence 2646  
                                     _errString_Fatal 01AF  
                                     _errString_Bound 01D6  
                                         ?_resetTherm 0001  
                                     _errString_Reset 0187  
                                         ?_resetTouch 0001  
                                     _errString_Point 0135  
                                        _increaseStep 2730  
                              __size_of_resetPosition 01E4  
                                       ??_executeData 00ED  
                                         __pdataBANK0 0080  
                                         __pdataBANK1 0100  
                                         _dataCounter 005D  
                                            ??_uartTx 0015  
                              moveToPoint@keepMovingX 0021  
                              moveToPoint@keepMovingY 0022  
                                         ?_printError 0001  
                                           ___fldiv@a 0024  
                                           ___fldiv@b 0020  
                                      _therm_pressure 0605  
                                         ?_toggleStep 0001  
                                         __pbssCOMRAM 0043  
                                       _resetTM0_Temp 26D6  
                                       _resetTM2_Temp 25E0  
                                       __pcstackBANK0 00E6  
                                       ??_newSequence 0012  
                                   __size_of_abortAll 0012  
                                   __size_of___xxtofl 01F8  
                                __size_ofi2_storeData 026C  
                                   __size_of_clearTM0 000E  
                                     ?_getNewSequence 0012  
                                         ?_touchTherm 0001  
                                 __size_of_pickObject 0030  
                                  executeData@errCode 00F1  
                                   __size_of_tim0Init 0012  
                                   __size_of_tim1Init 000E  
                                   __size_of_tim2Init 0012  
                                     ??_interruptInit 0012  
                                           __pintcode 0008  
                                            ?___fldiv 0020  
                                            ?___fltol 0039  
                            __end_of_resetNewSequence 26B8  
                                 __size_of_releaseObj 0030  
                                       storeData@data 001B  
                                            ?_getData 0012  
                                   __size_of_startADC 000A  
                                   __size_of_stepMade 0014  
                              __end_of_therm_pressure 0607  
                                            ?_initADC 0001  
                                         __smallconst 0600  
                                            ?_liftArm 0001  
                                            ?_readSeq 0001  
                                      ?_resetTM0_Temp 0001  
                                   __size_of_writeTM0 000E  
                                      ?_resetTM2_Temp 0001  
                                 __end_of_executeData 107E  
                                          shiftData@i 0014  
                                 __size_of_resetTherm 000A  
                                           _newFeeder 0051  
                                       _resetPosition 174E  
                                 __size_of_resetTouch 000A  
                                       ??_setThermRel 0001  
                                            ?_stopADC 0001  
                                       ??_moveToPoint 001D  
                                       ??_setTouchRel 0001  
                                 __end_of_newSequence 2720  
                                           _reduceSeq 2708  
                                            _LATAbits 000F89  
                                            _LATBbits 000F8A  
                                           _retPeriod 2670  
                                            _LATCbits 000F8B  
                                            _LATDbits 000F8C  
                                 __size_of_printError 011C  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                                           _shiftData 2384  
                                           _resetStep 26E0  
                                            i2u270_40 1494  
                                            i2u270_41 148E  
                                            i2u271_40 14B4  
                                            i2u271_41 14AE  
                                            i2u272_40 14D4  
                                            i2u280_40 002C  
                                            i2u272_41 14CE  
                                            i2u280_41 0026  
                                            i2u193_40 245C  
                                            i2u273_40 14EE  
                                            i2u281_40 004C  
                                            i2u193_41 2456  
                                            i2u273_41 14E8  
                                            i2u281_41 0046  
                                            _PIR1bits 000F9E  
                                            i2u194_40 247A  
                                            i2u290_40 016A  
                                            i2u282_40 006A  
                                            i2u194_41 2474  
                                            i2u290_41 0164  
                                            i2u282_41 0064  
                                            i2u267_40 136E  
                                            i2u291_40 0182  
                                            i2u283_40 0084  
                                            i2u267_41 1368  
                                            i2u291_41 017C  
                                            i2u283_41 007E  
                                            i2u268_40 1400  
                                            i2u284_40 009C  
                                            i2u268_41 13FA  
                                            i2u284_41 0096  
                                            i2u269_40 142E  
                                            i2u285_40 00C4  
                                            i2u269_41 1428  
                                            i2u285_41 00BE  
                                            i2u286_40 00E2  
                                            i2u286_41 00DC  
                                            i2u287_40 00F4  
                                            i2u287_41 00EE  
                                            i2u288_40 0116  
                                            i2u288_41 0110  
                                            i2u289_40 0144  
                                            i2u289_41 013E  
                                 __size_of_toggleStep 000A  
                                        ??_fatalError 0001  
                                           _posVector 004C  
                                            _RCONbits 000FD0  
                                           _therm_rel 0060  
                                           _pwmPeriod 00C6  
                                           _rotateObj 2166  
                                          _ADCON0bits 000FC2  
                                          _ADCON1bits 000FC1  
                                 __size_of_touchTherm 0112  
                                           _usartInit 25AE  
                                           _touch_rel 0061  
                                  __end_of_feeder1Pos 060F  
                                  __end_of_feeder2Pos 060D  
                                  __end_of_feeder3Pos 060B  
                                           _storeData 107E  
                                      ?_resetPosition 0001  
                               __end_of_initPinMotors 2588  
                                       ??_returnTherm 0014  
                                       ??_returnTouch 0014  
                                            i2_uartTx 2432  
                                           copy_data0 2312  
                                           copy_data1 2332  
                                           copy_data2 2352  
                                  __end_of_fatalError 2740  
                                  rotateObj@stepAngle 0601  
                                          ?_reduceSeq 0001  
                                          ?_retPeriod 0001  
                                          rotateObj@i 00EB  
                              __size_of_whatsTM0Limit 0008  
                                 __end_of_setThermRel 2708  
                                 __end_of_moveToPoint 0D88  
                                   printError@errCode 0018  
                                          ?_shiftData 0001  
                                       ??_stepCounter 0014  
                                            __Hrparam 0000  
                                          ?_resetStep 0001  
                                 __end_of_setTouchRel 26FE  
                                            __Lrparam 0000  
                                    __size_of___fldiv 0432  
                                    __size_of___fltol 0136  
                                         _executeData 0D88  
                                        ??_pickObject 0015  
                                          ?_rotateObj 0001  
                            moveToPoint@MOT1Direction 001F  
                                     ??_resetTM0_Temp 0012  
                                       ?i2_printError 0001  
                                     ??_resetTM2_Temp 0012  
                                    __size_of_getData 000E  
                            moveToPoint@MOT2Direction 0020  
                                       ??_touchObject 0015  
                                            _abortAll 2618  
                                          ?_usartInit 0001  
                                    __size_of_initADC 0026  
                                            ___xxtofl 1556  
                                    __size_of_liftArm 00BE  
                                          ?_storeData 0001  
                                            _clearTM0 2654  
                                    __size_of_readSeq 0008  
                                  storeData@mexLength 006D  
                                            _tm0Count 005F  
                                            _tm0Error 0055  
                                            _tm0Limit 0062  
                                         _newSequence 2718  
                                            __ptext10 26AE  
                                            __ptext11 2708  
                                            __ptext20 267E  
                                            __ptext12 2710  
                                            __ptext21 1F5C  
                                            __ptext13 2718  
                                            __ptext30 0612  
                                            __ptext22 2720  
                                            __ptext14 24C6  
                                            __ptext31 2502  
                                            __ptext23 26B8  
                                            __ptext15 2562  
                                            __ptext40 2646  
                                            __ptext32 2532  
                                            __ptext24 268A  
                                            __ptext16 2588  
                                            __ptext41 2654  
                                            __ptext33 0A44  
                                            __ptext25 26C2  
                                            __ptext17 2638  
                                            __ptext50 2730  
                                            __ptext34 2696  
                                            __ptext26 26CC  
                                            __ptext18 0D88  
                                            __ptext51 2738  
                                            __ptext43 12EA  
                                            __ptext35 2240  
                                            __ptext27 2166  
                                            __ptext19 1E4A  
                                            __ptext52 2618  
                                            __ptext44 2662  
                                            __ptext36 25CC  
                                            __ptext28 1556  
                                            __ptext53 1D2E  
                                            __ptext45 2728  
                                            __ptext37 25E0  
                                            __ptext29 1ADC  
                                            __ptext54 2432  
                                            __ptext46 26EA  
                                            __ptext38 26D6  
                                            __ptext47 26F4  
                                            __ptext39 26E0  
                                            __ptext48 26FE  
                                            __ptext49 2670  
                                        ??_releaseObj 0015  
                                    __size_of_stopADC 0008  
                                            _maxFeedX 0610  
                                            _maxFeedY 060F  
                                 __end_of_returnTherm 268A  
                                 __end_of_returnTouch 2696  
                                            _tim0Init 2606  
                                            _tim1Init 262A  
                                            _tim2Init 25F4  
                                       __size_of_main 01AA  
                                  __end_of_pickObject 2562  
                                        ??_resetTherm 0012  
                                        ??_resetTouch 0012  
                                           uartTx@ptr 0012  
                                            _rotAngle 0053  
                                            int$flags 006E  
                                            _startADC 26B8  
                                            _stepMade 25CC  
                                            _stepMot1 008C  
                                            _stepMot2 0088  
                                            _stepMot3 0084  
                                 __end_of_stepCounter 26A2  
                                   rotateObj@rotAngle 00E8  
                                      ??i2_printError 0005  
                                  __end_of_releaseObj 2532  
                                            _writeTM0 2662  
                                        ??_printError 0016  
                                       _whatsTM0Limit 2728  
                                     ??_resetPosition 0015  
                                  tim2Init@_pwmPeriod 0012  
                                          _INTCONbits 000FF2  
                                        ??_toggleStep 0001  
                                    ??_getNewSequence 0014  
                                  __end_of_resetTherm 26D6  
                                  __end_of_resetTouch 26CC  
                                         _setThermRel 26FE  
                                        uartTx@length 0014  
                                        _single_cycle 00C8  
                                         _moveToPoint 0A44  
                                 __end_of_touchObject 206E  
                                            intlevel2 2740  
                                        ??_touchTherm 0015  
                                         _setTouchRel 26F4  
                                         ??_reduceSeq 0012  
                                         ??_retPeriod 0003  
                                          _RCSTA1bits 000FAB  
                                  __end_of_printError 1D2E  
                                         ??_shiftData 0012  
                                         ??_resetStep 0012  
                                  __end_of_toggleStep 26F4  
                                   ?_resetNewSequence 0001  
                                      ?_whatsTM0Limit 0001  
                                         ??_rotateObj 00E6  
                                  ??_resetNewSequence 0012  
                                  __end_of_touchTherm 1F5C  
                                         ??_usartInit 0012  
                                       ??i2_storeData 0008  
                                         ??_storeData 0019  
                                         _returnTherm 267E  
                                         _returnTouch 268A  
                                         _stepCounter 2696  
